BOOL sub_19BF860D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BOOL8 result;
  NSObject *v7;
  char *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  const UInt8 *v14;
  const __CFURL *v15;
  uint64_t v16;
  const __CFDictionary *v17;
  CFURLRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  const void **v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  BOOL v27;
  _QWORD *v28;
  BOOL v29;
  char *v30;
  _OWORD *v31;
  unint64_t v32;
  void *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *exception;
  const __CFURL *v47;
  _BYTE buf[22];
  __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a1 + 14352);
  if ((_DWORD)v2 == -1)
    sub_19BFC4E9C();
  *(_QWORD *)buf = &v47;
  if (((unsigned int (*)(_BYTE *, uint64_t))off_1E3D17560[v2])(buf, a1))
    __assert_rtn("load", "TIStaticDictionaryImpl.cpp", 183, "!m_baseline_trie.valid()");
  v5 = *(unsigned int *)(a1 + 14352);
  if ((_DWORD)v5 == -1)
    sub_19BFC4E9C();
  *(_QWORD *)buf = &v47;
  if ((((uint64_t (*)(_BYTE *, uint64_t))off_1E3D17560[v5])(buf, a1) & 1) != 0)
    return 0;
  if (qword_1ED024240 != -1)
    dispatch_once(&qword_1ED024240, &unk_1E3D157A0);
  v7 = qword_1ED024248;
  if (os_log_type_enabled((os_log_t)qword_1ED024248, OS_LOG_TYPE_DEBUG))
  {
    v42 = *(_QWORD *)(a2 + 8);
    if (!v42)
      v42 = a2 + 16;
    v43 = *(_QWORD *)(a2 + 40);
    if (!v43)
      v43 = a2 + 48;
    v44 = *(_QWORD *)(a2 + 72);
    *(_DWORD *)buf = 136315650;
    if (!v44)
      v44 = a2 + 80;
    *(_QWORD *)&buf[4] = v42;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v43;
    v49 = 2080;
    v50 = v44;
    _os_log_debug_impl(&dword_19BF85000, v7, OS_LOG_TYPE_DEBUG, "Loading static dictionary for localeIdentifier=%s, unigrams='%s', delta='%s'", buf, 0x20u);
  }
  if (*(_QWORD *)(a2 + 8))
    v8 = *(char **)(a2 + 8);
  else
    v8 = (char *)(a2 + 16);
  sub_19BF87864(buf, v8);
  v9 = (uint64_t *)(a1 + 28720);
  sub_19BFAED8C(a1 + 28720, (__int128 *)buf);
  v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (!*v9)
    __assert_rtn("load", "TIStaticDictionaryImpl.cpp", 192, "m_collator");
  sub_19BF8D014(a1, a2 + 32, *v9);
  v13 = *(unsigned int *)(a1 + 14352);
  if ((_DWORD)v13 == -1)
    sub_19BFC4E9C();
  *(_QWORD *)buf = &v47;
  if ((((uint64_t (*)(_BYTE *, uint64_t))off_1E3D17560[v13])(buf, a1) & 1) != 0)
  {
    if (*(_WORD *)(a2 + 160))
    {
      if (*(_QWORD *)(a2 + 168))
        v14 = *(const UInt8 **)(a2 + 168);
      else
        v14 = (const UInt8 *)(a2 + 176);
      v15 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v14, *(unsigned __int16 *)(a2 + 160), 0);
      v47 = v15;
      v16 = operator new();
      *(_OWORD *)(v16 + 8) = 0u;
      *(_OWORD *)(v16 + 104) = 0u;
      *(_QWORD *)(v16 + 136) = 0;
      *(_OWORD *)(v16 + 120) = 0u;
      *(_OWORD *)(v16 + 72) = 0u;
      *(_OWORD *)(v16 + 88) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 24) = 0u;
      v17 = (const __CFDictionary *)sub_19BF8E010(v15, 0);
      if (!v17 || (sub_19BFE8B10((unsigned int *)v16, v17) & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_19BF8E43C(buf, "invalid stem suffix lexicon ID converter plist");
        sub_19BFE98CC(exception, (__int128 *)buf);
        __cxa_throw(exception, (struct type_info *)&unk_1E3D12D50, (void (*)(void *))sub_19BFE9934);
      }
      v18 = CFURLCopyAbsoluteURL(v15);
      sub_19BFC4DD4((const void **)(v16 + 136), v18);
      CFRelease(v17);
      v19 = *(_QWORD *)(a1 + 30120);
      *(_QWORD *)(a1 + 30120) = v16;
      if (v19)
        sub_19BFC42E0(v19);
      if (v15)
        CFRelease(v15);
    }
    v20 = *(unsigned int *)(a1 + 14352);
    if ((_DWORD)v20 == -1)
      sub_19BFC4E9C();
    *(_QWORD *)buf = &v47;
    v21 = ((uint64_t (*)(_BYTE *, uint64_t))off_1E3D157C0[v20])(buf, a1);
    v22 = (unsigned int *)(a1 + 28712);
    memcpy((void *)(a1 + 28752), (const void *)(v21 + 8), 0x504uLL);
    if (a1 + 28744 != v21)
    {
      *(_DWORD *)(a1 + 30072) = *(_DWORD *)(v21 + 1328);
      v23 = *(const void ***)(v21 + 1312);
      v24 = *(_QWORD *)(a1 + 30048);
      if (v24)
      {
        for (i = 0; i != v24; ++i)
          *(_QWORD *)(*(_QWORD *)(a1 + 30040) + 8 * i) = 0;
        v26 = *(_QWORD *)(a1 + 30056);
        *(_QWORD *)(a1 + 30064) = 0;
        *(_QWORD *)(a1 + 30056) = 0;
        if (v26)
          v27 = v23 == 0;
        else
          v27 = 1;
        if (v27)
        {
          v28 = (_QWORD *)v26;
        }
        else
        {
          do
          {
            sub_19BFECEA8((unsigned __int16 *)(v26 + 16), v23 + 2);
            *(_DWORD *)(v26 + 32) = *((_DWORD *)v23 + 8);
            v28 = *(_QWORD **)v26;
            sub_19BFCCA68(a1 + 30040, v26);
            v23 = (const void **)*v23;
            if (v28)
              v29 = v23 == 0;
            else
              v29 = 1;
            v26 = (uint64_t)v28;
          }
          while (!v29);
        }
        sub_19BF876D4(v28);
      }
      for (; v23; v23 = (const void **)*v23)
      {
        v30 = (char *)operator new(0x28uLL);
        v31 = v30 + 16;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
        v32 = *((unsigned __int16 *)v23 + 8);
        if (v32 < 0xF)
        {
          *v31 = *((_OWORD *)v23 + 1);
          v34 = *((unsigned __int16 *)v30 + 8);
          v33 = (void *)*((_QWORD *)v30 + 3);
        }
        else
        {
          *(_WORD *)v31 = v32;
          v33 = (void *)operator new[]();
          *((_QWORD *)v30 + 3) = v33;
          v34 = *((unsigned __int16 *)v30 + 8);
          memcpy(v33, v23[3], *((unsigned __int16 *)v30 + 8));
        }
        *((_DWORD *)v30 + 8) = *((_DWORD *)v23 + 8);
        if (v34 <= 0xE)
          v35 = (unsigned __int8 *)(v30 + 18);
        else
          v35 = (unsigned __int8 *)v33;
        *((_QWORD *)v30 + 1) = sub_19BFF79A0(v35, v34);
        sub_19BFCCA68(a1 + 30040, (uint64_t)v30);
      }
    }
    *(_DWORD *)(a1 + 30080) = *(_DWORD *)(v21 + 1336);
    v36 = sub_19BF8A1F4(a1 + 30088, (unsigned __int16 *)(v21 + 1344));
    sub_19BF8A1F4(v36, (unsigned __int16 *)a2);
    if (*(_WORD *)(a2 + 64))
    {
      if (qword_1ED024240 != -1)
        dispatch_once(&qword_1ED024240, &unk_1E3D157A0);
      v37 = qword_1ED024248;
      if (os_log_type_enabled((os_log_t)qword_1ED024248, OS_LOG_TYPE_DEBUG))
      {
        v45 = *(_QWORD *)(a2 + 72);
        if (!v45)
          v45 = a2 + 80;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v45;
        _os_log_debug_impl(&dword_19BF85000, v37, OS_LOG_TYPE_DEBUG, "loading delta lexicon path=%s", buf, 0xCu);
      }
      sub_19BF8D014(a1 + 14360, a2 + 64, *(_QWORD *)(a1 + 28720));
      v38 = *v22;
      if ((_DWORD)v38 == -1)
        sub_19BFC4E9C();
      *(_QWORD *)buf = &v47;
      if (((unsigned int (*)(_BYTE *, uint64_t))off_1E3D17560[v38])(buf, a1 + 14360))
      {
        v39 = *v22;
        if ((_DWORD)v39 == -1)
          sub_19BFC4E9C();
        *(_QWORD *)buf = &v47;
        v40 = ((uint64_t (*)(_BYTE *, uint64_t))off_1E3D157C0[v39])(buf, a1 + 14360);
        sub_19C0174D8(a1 + 28744, *(uint64_t **)(v40 + 1312));
      }
    }
    return 1;
  }
  else
  {
    if (qword_1ED024240 != -1)
      dispatch_once(&qword_1ED024240, &unk_1E3D157A0);
    v41 = qword_1ED024248;
    result = os_log_type_enabled((os_log_t)qword_1ED024248, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_19BF85000, v41, OS_LOG_TYPE_DEBUG, "baseline trie not loaded", buf, 2u);
      return 0;
    }
  }
  return result;
}

void sub_19BF8683C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19BF8E3F8(a1);
  _Unwind_Resume(a1);
}

void sub_19BF86844(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19BF8E3F8();
  _Unwind_Resume(a1);
}

void sub_19BF8684C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, _Unwind_Exception *exception_object, const void *a13, __int128 __p, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  _QWORD *v19;
  const void **v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  uint64_t v29;

  if (a18 < 0)
  {
    operator delete((void *)__p);
    if ((a10 & 1) == 0)
      goto LABEL_6;
  }
  else if (!a10)
  {
LABEL_6:
    if (v22)
      CFRelease(v22);
    sub_19BFC4DD4(v20, 0);
    sub_19BFC0928((const void **)(v23 + 120), 0);
    sub_19BFC4E08((void ***)&__p);
    *(_QWORD *)&__p = v23 + 72;
    sub_19BFBF780((void ***)&__p);
    v24 = (void *)v19[7];
    if (v24)
    {
      v19[8] = v24;
      operator delete(v24);
    }
    v25 = (void *)v19[4];
    if (v25)
    {
      v19[5] = v25;
      operator delete(v25);
    }
    v26 = *(void **)v23;
    if (*(_QWORD *)v23)
    {
      v19[2] = v26;
      operator delete(v26);
    }
    MEMORY[0x1A1AD0CDC](v19, 0x1070C4046963303);
    if (a2 == 1)
    {
      v27 = __cxa_begin_catch(a1);
      if (qword_1ED024240 != -1)
        dispatch_once(&qword_1ED024240, &unk_1E3D157A0);
      v28 = qword_1ED024248;
      if (os_log_type_enabled((os_log_t)qword_1ED024248, OS_LOG_TYPE_ERROR))
      {
        v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v29;
        _os_log_error_impl(&dword_19BF85000, v28, OS_LOG_TYPE_ERROR, "failed to create the stem-suffix lexiconID converter: %s", (uint8_t *)&__p, 0xCu);
      }
      __cxa_end_catch();
      if (!v18)
        JUMPOUT(0x19BF86314);
      JUMPOUT(0x19BF8630CLL);
    }
    sub_19BFC4DD4(&a13, 0);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void sub_19BF869F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;

  sub_19BFCCF10(0, v11);
  JUMPOUT(0x19BF86A44);
}

void sub_19BF86A00(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_19BF876D4(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_19BF86A20(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_19BF86A2C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x19BF86A30);
  _Unwind_Resume(a1);
}

void sub_19BF86A34()
{
  JUMPOUT(0x19BF86A3CLL);
}

uint64_t sub_19BF86A50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19BF86B60(a1, (unsigned __int16 *)a2);
  sub_19BF86B60(v4 + 32, (unsigned __int16 *)(a2 + 32));
  sub_19BF86B60(a1 + 64, (unsigned __int16 *)(a2 + 64));
  sub_19BF86B60(a1 + 96, (unsigned __int16 *)(a2 + 96));
  sub_19BF86B60(a1 + 128, (unsigned __int16 *)(a2 + 128));
  sub_19BF86B60(a1 + 160, (unsigned __int16 *)(a2 + 160));
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  return a1;
}

void sub_19BF86ABC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = *(void **)(v1 + 136);
  if (v3 && *(_BYTE *)(v1 + 134) == 1)
    free(v3);
  v4 = *(void **)(v1 + 104);
  if (v4 && *(_BYTE *)(v1 + 102) == 1)
    free(v4);
  v5 = *(void **)(v1 + 72);
  if (v5 && *(_BYTE *)(v1 + 70) == 1)
    free(v5);
  v6 = *(void **)(v1 + 40);
  if (v6 && *(_BYTE *)(v1 + 38) == 1)
    free(v6);
  v7 = *(void **)(v1 + 8);
  if (v7)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF86B60(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  unsigned __int16 v5;
  uint64_t v6;

  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  v4 = *((unsigned __int8 *)a2 + 6);
  *(_BYTE *)(a1 + 6) = v4;
  *(_QWORD *)(a1 + 8) = 0;
  if (v4 == 1)
  {
    if (*((_QWORD *)a2 + 1))
      v6 = *((_QWORD *)a2 + 1);
    else
      v6 = (uint64_t)(a2 + 8);
    sub_19BF8CA04((_QWORD *)a1, v6, 0, *a2);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_WORD *)a1 = *a2;
    v5 = a2[2];
    if (!v5)
    {
      sub_19BF86BF8(a2);
      v5 = a2[2];
    }
    *(_WORD *)(a1 + 4) = v5;
    *(_BYTE *)(a1 + 17) = 0;
  }
  return a1;
}

unsigned __int16 *sub_19BF86BF8(unsigned __int16 *result)
{
  unsigned int v1;
  int v2;
  __int16 v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;

  result[2] = 0;
  v1 = *result;
  if (*result)
  {
    v2 = 0;
    v3 = 0;
    v4 = (unsigned __int16 *)*((_QWORD *)result + 1);
    if (!v4)
      v4 = result + 8;
    do
    {
      v5 = (unsigned __int16)v2 + 1;
      if (v1 == (unsigned __int16)(v2 + 1))
        goto LABEL_22;
      v6 = *((unsigned __int8 *)v4 + (unsigned __int16)v2);
      if ((v6 + 11) < 0xCDu)
        goto LABEL_22;
      v7 = *((unsigned __int8 *)v4 + v5);
      if ((v6 & 0xF0) == 0xE0)
      {
        if (((a00000000000000[v6 & 0xF] >> (*((_BYTE *)v4 + v5) >> 5)) & 1) != 0)
        {
          LODWORD(v5) = v2 + 2;
          if (v1 == (unsigned __int16)(v2 + 2))
            goto LABEL_24;
          v8 = *((char *)v4 + (unsigned __int16)(v2 + 2));
          v9 = v2 + 3;
LABEL_10:
          if (v8 < -64)
            LODWORD(v5) = v9;
        }
      }
      else
      {
        if (v6 <= 0xDF)
        {
          v10 = v2 + 2;
          if ((char)v7 < -64)
            LODWORD(v5) = v10;
          goto LABEL_22;
        }
        if (((byte_19C066E8A[v7 >> 4] >> (v6 & 7)) & 1) != 0)
        {
          LODWORD(v5) = v2 + 2;
          if (v1 == (unsigned __int16)(v2 + 2))
            goto LABEL_24;
          if (*((char *)v4 + (unsigned __int16)(v2 + 2)) <= -65)
          {
            LODWORD(v5) = v2 + 3;
            if (v1 == (unsigned __int16)(v2 + 3))
            {
LABEL_24:
              result[2] = v3 + 1;
              return result;
            }
            v8 = *((char *)v4 + (unsigned __int16)(v2 + 3));
            v9 = v2 + 4;
            goto LABEL_10;
          }
        }
      }
LABEL_22:
      result[2] = ++v3;
      v2 = v5;
    }
    while (v1 > (unsigned __int16)v5);
  }
  return result;
}

uint64_t sub_19BF86D24(uint64_t a1)
{
  int v2;

  *(_QWORD *)a1 = &off_1E3D14970;
  v2 = *(_DWORD *)(a1 + 32);
  if (v2 != -1)
    close(v2);
  *(_BYTE *)(a1 + 24) = 0;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

uint64_t sub_19BF86D78(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v4;
  size_t v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  void *v9;

  v4 = sub_19BF86E34(a1, a2, a3, 256);
  *(_QWORD *)v4 = &off_1E3D143A8;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_DWORD *)(v4 + 80) = 1;
  *(_BYTE *)(v4 + 84) = 0;
  *(_DWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  if (*(_BYTE *)(v4 + 24))
  {
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 64) = v5;
    if (!v5
      || ((v6 = getpagesize(), v7 = v5 / v6 * v6, v5 != v7) ? (v8 = v7 + v6) : (v8 = v5),
          *(_QWORD *)(a1 + 72) = v8,
          v9 = mmap(0, v8, 1, 1, *(_DWORD *)(a1 + 32), 0),
          *(_QWORD *)(a1 + 96) = v9,
          v9 == (void *)-1))
    {
      *(_BYTE *)(a1 + 24) = 0;
    }
  }
  return a1;
}

void sub_19BF86E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BF86D24(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF86E34(uint64_t a1, __int128 *a2, int a3, int a4)
{
  char *v5;
  __int128 v6;
  const char *v7;
  int v8;
  stat v10;

  *(_QWORD *)a1 = &off_1E3D14970;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 28) = 0xFFFFFFFF00000000;
  v5 = (char *)(a1 + 40);
  if (*((char *)a2 + 23) < 0)
  {
    sub_19BF8CD70((_BYTE *)(a1 + 40), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  v7 = v5;
  if (*(char *)(a1 + 63) < 0)
    v7 = *(const char **)v5;
  v8 = open_dprotected_np(v7, *(_DWORD *)(a1 + 8), 3, 0, *(unsigned int *)(a1 + 12));
  *(_DWORD *)(a1 + 32) = v8;
  if (v8 < 0)
  {
    *(_DWORD *)(a1 + 28) = *__error();
    __error();
  }
  else if (fstat(v8, &v10))
  {
    *(_DWORD *)(a1 + 28) = *__error();
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v10.st_size;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_19BF86F20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

BOOL sub_19BF86F40(const __CFLocale *a1, const __CFString *a2)
{
  const __CFString *Value;

  Value = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  return CFStringCompare(a2, Value, 0) == kCFCompareEqualTo;
}

unsigned __int16 *sub_19BF86F84(unsigned __int16 *result, char *__s1, size_t __n)
{
  unsigned __int16 *v4;
  size_t v5;
  __int16 v6;
  unsigned __int16 *v7;
  unsigned __int16 v8;
  unsigned __int16 *v9;

  if (__s1)
  {
    v4 = result;
    result = (unsigned __int16 *)strnlen(__s1, __n);
    v5 = (unsigned __int16)result;
    if ((_WORD)result)
    {
      v6 = (__int16)result;
      if (!*((_BYTE *)v4 + 6))
        sub_19BFF6860(v4);
      sub_19BF8CA9C((uint64_t)v4, *v4 + v6);
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (!v7)
        v7 = v4 + 8;
      result = (unsigned __int16 *)memcpy((char *)v7 + *v4, __s1, v5);
      v8 = *v4 + v6;
      *v4 = v8;
      v9 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (!v9)
        v9 = v4 + 8;
      *((_BYTE *)v9 + v8) = 0;
      v4[2] = 0;
    }
  }
  return result;
}

uint64_t sub_19BF8703C()
{
  ucol_setStrength();
  ucol_setAttribute();
  return 0;
}

const __CFString *sub_19BF87140@<X0>(const __CFString *result@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v3;
  char *CStringPtr;
  CFIndex Length;
  CFIndex v6;
  char *v7;

  if (result)
  {
    v3 = result;
    CStringPtr = (char *)CFStringGetCStringPtr(result, 0x8000100u);
    if (!CStringPtr)
    {
      Length = CFStringGetLength(v3);
      v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      v7 = (char *)operator new[]();
      CFStringGetCString(v3, v7, v6, 0x8000100u);
      sub_19BF8E43C(a2, v7);
      JUMPOUT(0x1A1AD0CB8);
    }
    return (const __CFString *)sub_19BF8E43C(a2, CStringPtr);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void sub_19BF87218(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CB8](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

const __CFString *sub_19BF8723C(const __CFDictionary *a1)
{
  const __CFString *Value;
  const __CFString *v2;
  CFTypeID v3;
  const __CFLocale *v4;
  CFTypeID v5;
  CFLocaleRef v6;

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("locale"));
  v2 = Value;
  if (!Value)
    return v2;
  v3 = CFGetTypeID(Value);
  if (v3 == CFStringGetTypeID())
  {
    v4 = CFLocaleCreate(0, v2);
  }
  else
  {
    v5 = CFGetTypeID(v2);
    if (v5 != CFLocaleGetTypeID())
      __assert_rtn("createLocale", "LXUtils.cpp", 61, "false && \"received unsupported CFType for locale\"");
    v4 = (const __CFLocale *)MEMORY[0x1A1AD0634](0, v2);
  }
  v2 = (const __CFString *)v4;
  if (!sub_19BF86F40(v4, CFSTR("ars")))
    return v2;
  v6 = sub_19BF8E188((uint64_t)v2, CFSTR("ar"));
  CFRelease(v2);
  return (const __CFString *)v6;
}

uint64_t sub_19BF87310(uint64_t a1)
{
  _DWORD *v2;

  v2 = sub_19BF873B4((_DWORD *)a1);
  sub_19BF873B4(v2 + 3590);
  *(_QWORD *)(a1 + 28736) = 0;
  *(_OWORD *)(a1 + 28720) = 0u;
  sub_19BF875B8(a1 + 28744);
  *(_QWORD *)(a1 + 30120) = 0;
  return a1;
}

void sub_19BF87370(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v1 + 28736);
  *(_QWORD *)(v1 + 28736) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  sub_19BFACCEC(v3);
  sub_19BFC4380(v2);
  sub_19BFC4380(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_19BF873B4(_DWORD *a1)
{
  _DWORD *v2;

  bzero(a1, 0x3810uLL);
  v2 = (_DWORD *)sub_19BF87400((uint64_t)a1);
  a1[3588] = 0;
  sub_19C047650(v2);
  return a1;
}

void sub_19BF873EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFC4380(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF87400(uint64_t a1)
{
  _WORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (_WORD *)(a1 + 14296);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 13) = 0;
  v3 = 296;
  do
  {
    v4 = a1 + v3;
    *(_DWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    v3 += 24;
  }
  while (v4 + 24 != a1 + 6440);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = -6144;
  do
  {
    v6 = a1 + v5;
    *(_DWORD *)(v6 + 6440) = 0;
    *(_QWORD *)(v6 + 6448) = 0;
    *(_DWORD *)(v6 + 6456) = 0;
    v5 += 24;
  }
  while (v5);
  *(_DWORD *)(a1 + 6440) = 0;
  *(_OWORD *)(a1 + 6448) = 0u;
  v7 = 6736;
  do
  {
    v8 = a1 + v7;
    *(_DWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 16) = 0;
    v7 += 24;
  }
  while (v8 + 24 != a1 + 12880);
  *(_OWORD *)(a1 + 6704) = 0u;
  *(_OWORD *)(a1 + 6688) = 0u;
  *(_OWORD *)(a1 + 6672) = 0u;
  *(_OWORD *)(a1 + 6656) = 0u;
  *(_OWORD *)(a1 + 6640) = 0u;
  *(_OWORD *)(a1 + 6624) = 0u;
  *(_OWORD *)(a1 + 6608) = 0u;
  *(_OWORD *)(a1 + 6592) = 0u;
  *(_OWORD *)(a1 + 6576) = 0u;
  *(_OWORD *)(a1 + 6560) = 0u;
  *(_OWORD *)(a1 + 6544) = 0u;
  *(_OWORD *)(a1 + 6528) = 0u;
  *(_OWORD *)(a1 + 6512) = 0u;
  *(_OWORD *)(a1 + 6496) = 0u;
  *(_OWORD *)(a1 + 6480) = 0u;
  *(_OWORD *)(a1 + 6716) = 0u;
  v9 = -6144;
  *(_OWORD *)(a1 + 6464) = 0u;
  do
  {
    v10 = a1 + v9;
    *(_DWORD *)(v10 + 12880) = 0;
    *(_QWORD *)(v10 + 12888) = 0;
    *(_DWORD *)(v10 + 12896) = 0;
    v9 += 24;
  }
  while (v9);
  *(_DWORD *)(a1 + 12880) = 0;
  *(_OWORD *)(a1 + 12888) = 0u;
  *(_OWORD *)(a1 + 12904) = 0u;
  sub_19BF875B8(a1 + 12920);
  *v2 = 0;
  *(_OWORD *)(a1 + 14336) = 0u;
  *(_QWORD *)(a1 + 14308) = 0;
  *(_QWORD *)(a1 + 14316) = 0;
  *(_QWORD *)(a1 + 14300) = 0;
  *(_QWORD *)(a1 + 14322) = 0;
  return a1;
}

void sub_19BF8758C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[1];
  v1[1] = 0;
  if (v3)
    sub_19C014608(v3);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    sub_19C014608(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF875B8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D146F0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_DWORD *)(a1 + 1328) = 1065353216;
  *(_DWORD *)(a1 + 1336) = 0;
  *(_DWORD *)(a1 + 1344) = 0x100000;
  *(_WORD *)(a1 + 1348) = 0;
  *(_BYTE *)(a1 + 1350) = 0;
  *(_QWORD *)(a1 + 1352) = 0;
  *(_BYTE *)(a1 + 1360) = 0;
  sub_19BF8761C(a1);
  return a1;
}

void sub_19BF8761C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t j;

  if (*(_QWORD *)(a1 + 1320))
  {
    sub_19BF876D4(*(_QWORD **)(a1 + 1312));
    *(_QWORD *)(a1 + 1312) = 0;
    v2 = *(_QWORD *)(a1 + 1304);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 1296) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 1320) = 0;
  }
  *(_DWORD *)(a1 + 1336) = 0;
  bzero((void *)(a1 + 12), 0x400uLL);
  for (j = 0; j != 256; j += 16)
    *(_OWORD *)(a1 + 1036 + j) = 0uLL;
}

uint64_t sub_19BF8769C(uint64_t a1)
{
  void *v2;

  sub_19BF876D4(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_19BF876D4(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = v1;
      v1 = (_QWORD *)*v1;
      if (*((unsigned __int16 *)v2 + 8) >= 0xFu)
      {
        v3 = v2[3];
        if (v3)
          MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
      }
      operator delete(v2);
    }
    while (v1);
  }
}

double sub_19BF87730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    sub_19C014608(v2);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    sub_19C014608(v3);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    sub_19C014608(v4);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    sub_19C014608(v5);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 12916) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  v6 = -6144;
  do
  {
    v7 = a1 + v6;
    *(_DWORD *)(v7 + 6440) = 0;
    *(_QWORD *)(v7 + 6448) = 0;
    *(_DWORD *)(v7 + 6456) = 0;
    v6 += 24;
  }
  while (v6);
  *(_DWORD *)(a1 + 6440) = 0;
  *(_OWORD *)(a1 + 6716) = 0u;
  *(_OWORD *)(a1 + 6448) = 0u;
  *(_OWORD *)(a1 + 6464) = 0u;
  *(_OWORD *)(a1 + 6480) = 0u;
  *(_OWORD *)(a1 + 6496) = 0u;
  *(_OWORD *)(a1 + 6512) = 0u;
  *(_OWORD *)(a1 + 6528) = 0u;
  *(_OWORD *)(a1 + 6544) = 0u;
  *(_OWORD *)(a1 + 6560) = 0u;
  *(_OWORD *)(a1 + 6576) = 0u;
  *(_OWORD *)(a1 + 6592) = 0u;
  *(_OWORD *)(a1 + 6608) = 0u;
  *(_OWORD *)(a1 + 6624) = 0u;
  *(_OWORD *)(a1 + 6640) = 0u;
  *(_OWORD *)(a1 + 6656) = 0u;
  *(_OWORD *)(a1 + 6672) = 0u;
  *(_OWORD *)(a1 + 6688) = 0u;
  v8 = -6144;
  *(_OWORD *)(a1 + 6704) = 0u;
  do
  {
    v9 = a1 + v8;
    *(_DWORD *)(v9 + 12880) = 0;
    *(_QWORD *)(v9 + 12888) = 0;
    *(_DWORD *)(v9 + 12896) = 0;
    v8 += 24;
  }
  while (v8);
  *(_DWORD *)(a1 + 12880) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 12888) = 0u;
  return result;
}

void sub_19BF87864(_QWORD *a1, char *__s1)
{
  const __CFAllocator *v4;
  const __CFString *v5;
  const __CFLocale *v6;
  const __CFLocale *v7;
  const __CFString *Value;
  uint64_t v9;
  int v10;
  uint8_t *v11;
  int v12;
  NSObject *v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  __int16 *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  char *v29;
  size_t v30;
  const __int16 *v31;
  uint64_t v32;
  unint64_t v33;
  __int16 *v35;
  char *v36;
  __int16 *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  char *p_p;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  char *v51;
  uint64_t v52;
  std::string::size_type v53;
  char *v54;
  __n128 v55;
  __n128 v56;
  std::string::size_type size;
  std::string *p_b;
  char *v59;
  int v60;
  std::string *v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string *v64;
  std::string *v65;
  std::string *v66;
  std::string::size_type v67;
  std::string::size_type v68;
  std::string::size_type v69;
  std::string::size_type v70;
  std::string *v71;
  char *v72;
  std::string::size_type v73;
  char *i;
  int v75;
  std::string *v76;
  char *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string *v80;
  NSObject *v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  char *v86;
  __int128 v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  NSObject *v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::string *v103;
  _QWORD *v104;
  uint64_t v105;
  int v106;
  void **v107;
  const char *v108;
  void **v109;
  __int128 v110;
  __int128 v111;
  void *__dst[2];
  char v113;
  std::string __b;
  void *__p;
  uint64_t v116;
  int64_t v117;
  const __CFLocale *v118;
  UErrorCode v119;
  uint64_t v120;
  _BYTE code[32];
  __n128 v122;
  __n128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint8_t buf[16];
  _OWORD v129[2];
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __n128 v133;
  __n128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  if (__s1 && strcmp(__s1, "root"))
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], __s1, 0x8000100u);
    *(_QWORD *)code = v5;
    v6 = CFLocaleCreate(v4, v5);
    v7 = v6;
    v118 = v6;
    if (!v6)
    {
      if (qword_1EE4177A0 != -1)
        dispatch_once(&qword_1EE4177A0, &unk_1E3D170D0);
      v13 = qword_1EE417798;
      if (os_log_type_enabled((os_log_t)qword_1EE417798, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = 0;
        _os_log_impl(&dword_19BF85000, v13, OS_LOG_TYPE_DEFAULT, "could not create custom collator for locale=%@; using default custom collator",
          buf,
          0xCu);
      }
      v12 = 1;
      goto LABEL_29;
    }
    Value = (const __CFString *)CFLocaleGetValue(v6, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
    sub_19BF87140(Value, buf);
    v9 = BYTE7(v129[0]);
    v10 = SBYTE7(v129[0]);
    if (SBYTE7(v129[0]) < 0)
      v9 = *(_QWORD *)&buf[8];
    if (v9 != 2)
      goto LABEL_16;
    v11 = *(uint8_t **)buf;
    if ((SBYTE7(v129[0]) & 0x80u) == 0)
      v11 = buf;
    switch(*(_WORD *)v11)
    {
      case 0x6164:
      case 0x626E:
      case 0x6966:
      case 0x7673:
      case 0x6E6E:
        v12 = 3;
        break;
      case 0x7274:
        v12 = 2;
        break;
      case 0x6174:
        v12 = 5;
        break;
      default:
LABEL_16:
        if (sub_19BFB96E8((const void **)buf, "de"))
          v12 = 6;
        else
          v12 = 1;
        break;
    }
    if (v10 < 0)
      operator delete(*(void **)buf);
    CFRelease(v7);
LABEL_29:
    if (v5)
      CFRelease(v5);
    goto LABEL_31;
  }
  v12 = 1;
LABEL_31:
  v14 = atomic_load((unsigned __int8 *)&qword_1ED024300);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED024300))
  {
    sub_19C021454(buf);
    xmmword_1ED0242E0 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    sub_19BFACCEC((uint64_t)buf);
    __cxa_guard_release(&qword_1ED024300);
  }
  v15 = xmmword_1ED0242E0;
  v111 = xmmword_1ED0242E0;
  if (*((_QWORD *)&xmmword_1ED0242E0 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&xmmword_1ED0242E0 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (v15)
  {
    *(_DWORD *)code = 0;
    sub_19BF8DAEC(buf);
    v18 = ucol_openBinary();
    v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    *(_DWORD *)code = sub_19BF8703C();
    if (*(int *)code < 1)
    {
      if (v18)
        goto LABEL_176;
    }
    else
    {
      ucol_close();
    }
  }
  if (qword_1EE4177A0 != -1)
    dispatch_once(&qword_1EE4177A0, &unk_1E3D170D0);
  v22 = qword_1EE417798;
  if (os_log_type_enabled((os_log_t)qword_1EE417798, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19BF85000, v22, OS_LOG_TYPE_DEFAULT, "WARNING! Creating precompiled collator. This is expensive!", buf, 2u);
  }
  memset(buf, 0, sizeof(buf));
  *(_QWORD *)&v129[0] = 0;
  v23 = (__int16 *)&unk_19C074196;
  v24 = 21;
  switch(v12)
  {
    case 1:
      v25 = 0;
      v23 = (__int16 *)"&";
      do
        v26 = v25 + 1;
      while (*(unsigned __int16 *)&asc_19C073B74[2 * v25++ + 2]);
      if (v26 >= 0xB)
      {
        v24 = 0;
        do
          v36 = &asc_19C073B74[2 * v24++];
        while (*((_WORD *)v36 + 1));
        goto LABEL_73;
      }
      v28 = 0;
      do
        v29 = &asc_19C073B74[2 * v28++];
      while (*((_WORD *)v29 + 1));
      BYTE7(v129[0]) = v28 & 0x7F;
      if (v28)
      {
        v30 = 2 * v28;
        v31 = (const __int16 *)"&";
        goto LABEL_63;
      }
      goto LABEL_64;
    case 2:
      goto LABEL_73;
    case 3:
      v23 = (__int16 *)&unk_19C0741C2;
      v24 = 54;
      goto LABEL_73;
    case 5:
      v32 = 0;
      v23 = aNWKGPBAAAEEEII;
      do
        v33 = v32 + 1;
      while (aNWKGPBAAAEEEII[++v32]);
      if (v33 >= 0xB)
      {
        v24 = 0;
        do
          v37 = &aNWKGPBAAAEEEII[v24++];
        while (v37[1]);
LABEL_73:
        sub_19C021260((void **)buf, v23, v24);
      }
      else
      {
        v28 = 0;
        do
          v35 = &aNWKGPBAAAEEEII[v28++];
        while (v35[1]);
        BYTE7(v129[0]) = v28 & 0x7F;
        if (v28)
        {
          v30 = 2 * v28;
          v31 = aNWKGPBAAAEEEII;
LABEL_63:
          memcpy(buf, v31, v30);
        }
LABEL_64:
        *(_WORD *)&buf[2 * v28] = 0;
      }
LABEL_74:
      v38 = SBYTE7(v129[0]);
      if ((SBYTE7(v129[0]) & 0x80u) == 0)
        v39 = BYTE7(v129[0]);
      else
        v39 = *(_QWORD *)&buf[8];
      v40 = v39 + 27;
      if ((unint64_t)(v39 + 27) >= 0x7FFFFFFFFFFFFFF8)
        sub_19BF8E4EC();
      if (v40 <= 0xA)
      {
        v116 = 0;
        v117 = 0;
        __p = 0;
        HIBYTE(v117) = v39 + 27;
        if ((v40 & 0x80u) == 0)
          p_p = (char *)&__p;
        else
          p_p = 0;
LABEL_86:
        if (v38 >= 0)
          v44 = buf;
        else
          v44 = *(uint8_t **)buf;
        memmove(p_p, v44, 2 * v39);
        goto LABEL_90;
      }
      v42 = (v40 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v40 | 3) != 0xB)
        v42 = v40 | 3;
      v43 = v42 + 1;
      if (v42 + 1 < 0)
        sub_19BF8E6D0();
      p_p = (char *)operator new(2 * v43);
      v116 = v39 + 27;
      v117 = v43 | 0x8000000000000000;
      __p = p_p;
      if (v39)
        goto LABEL_86;
LABEL_90:
      v45 = &p_p[2 * v39];
      *(_OWORD *)v45 = *(_OWORD *)L"& [before 1] a < ' ' < '&' ";
      *((_OWORD *)v45 + 1) = *(_OWORD *)L"e 1] a < ' ' < '&' ";
      *((_OWORD *)v45 + 2) = *(_OWORD *)L" ' ' < '&' ";
      *(_QWORD *)(v45 + 46) = *(_QWORD *)L"'&' ";
      *((_WORD *)v45 + 27) = 0;
      if (SBYTE7(v129[0]) < 0)
        operator delete(*(void **)buf);
      v119 = U_ZERO_ERROR;
      v46 = ucol_openRules();
      if (v119 >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        v47 = operator new();
        *(_QWORD *)v47 = off_1E3D14DB0;
        v48 = HIBYTE(v117);
        v49 = v116;
        v50 = v117 < 0;
        if (v117 >= 0)
          v51 = (char *)&__p;
        else
          v51 = (char *)__p;
        *(_OWORD *)(v47 + 8) = xmmword_19C063D20;
        *(_DWORD *)(v47 + 24) = 0;
        *(_OWORD *)buf = 0u;
        memset(v129, 0, sizeof(v129));
        v131 = 0u;
        v132 = 0u;
        v133 = 0u;
        v134 = 0u;
        v135 = 0u;
        v136 = 0u;
        v137 = 0u;
        v138 = 0u;
        if (v50)
          v52 = v49;
        else
          v52 = v48;
        v130 = v47;
        v139 = 0;
        sub_19BF8E998(&__b, 2 * v52, 0);
        if (v52)
        {
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = 22;
          else
            v53 = (__b.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          std::string::resize(&__b, v53, 0);
          v54 = &v51[2 * v52];
          v124 = v135;
          v125 = v136;
          v126 = v137;
          v127 = v138;
          *(_OWORD *)code = v131;
          *(_OWORD *)&code[16] = v132;
          v55 = v133;
          v56 = v134;
          size = HIBYTE(__b.__r_.__value_.__r.__words[2]);
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_b = &__b;
          else
            p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __b.__r_.__value_.__l.__size_;
          v59 = (char *)p_b + size;
          v122 = v133;
          v123 = v134;
          while (1)
          {
            v60 = (*(uint64_t (**)(uint64_t, _BYTE *, char *, char *, void **, std::string *, char *, uint64_t *, __n128, __n128))(*(_QWORD *)v130 + 24))(v130, code, v51, v54, __dst, p_b, v59, &v120, v55, v56);
            v139 += ((char *)__dst[0] - (char *)v51) >> 1;
            if (__dst[0] == v51)
              goto LABEL_157;
            if (v60 != 1)
              break;
            if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v61 = &__b;
            else
              v61 = (std::string *)__b.__r_.__value_.__r.__words[0];
            v62 = v120 - (_QWORD)v61;
            std::string::resize(&__b, 2 * (v120 - (_QWORD)v61), 0);
            v63 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
            if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v64 = &__b;
            else
              v64 = (std::string *)__b.__r_.__value_.__r.__words[0];
            p_b = (std::string *)((char *)v64 + v62);
            if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v63 = __b.__r_.__value_.__l.__size_;
            v59 = (char *)v64 + v63;
            v51 = (char *)__dst[0];
            if (__dst[0] >= v54)
              goto LABEL_157;
          }
          if (v60)
          {
            if (v60 != 3)
              goto LABEL_157;
            v65 = &__b;
            if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v65 = (std::string *)__b.__r_.__value_.__r.__words[0];
            std::string::resize(&__b, (char *)p_b - (char *)v65, 0);
            sub_19BF8ED34(&__b, v51, v54);
          }
          else
          {
            v66 = &__b;
            if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v66 = (std::string *)__b.__r_.__value_.__r.__words[0];
            std::string::resize(&__b, v120 - (_QWORD)v66, 0);
          }
        }
        else
        {
          v124 = v135;
          v125 = v136;
          v126 = v137;
          v127 = v138;
          *(_OWORD *)code = v131;
          *(_OWORD *)&code[16] = v132;
          v122 = v133;
          v123 = v134;
        }
        v67 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        v68 = __b.__r_.__value_.__l.__size_;
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = 22;
        else
          v69 = (__b.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        std::string::resize(&__b, v69, 0);
        if ((v67 & 0x80u) == 0)
          v70 = v67;
        else
          v70 = v68;
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v71 = &__b;
        else
          v71 = (std::string *)__b.__r_.__value_.__r.__words[0];
        v72 = (char *)v71 + v70;
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
        else
          v73 = __b.__r_.__value_.__l.__size_;
        for (i = &v72[v73]; ; i = (char *)v79 + v78)
        {
          v75 = (*(uint64_t (**)(uint64_t, _BYTE *, char *, char *, void **))(*(_QWORD *)v130 + 40))(v130, code, v72, i, __dst);
          if (v75 != 1)
            break;
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = &__b;
          else
            v76 = (std::string *)__b.__r_.__value_.__r.__words[0];
          v77 = (char *)((char *)__dst[0] - (char *)v76);
          std::string::resize(&__b, 2 * ((char *)__dst[0] - (char *)v76), 0);
          v78 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = &__b;
          else
            v79 = (std::string *)__b.__r_.__value_.__r.__words[0];
          v72 = &v77[(_QWORD)v79];
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v78 = __b.__r_.__value_.__l.__size_;
        }
        if (v75)
        {
          if (v75 != 3)
          {
LABEL_157:
            if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__b.__r_.__value_.__l.__data_);
            if (SBYTE7(v129[0]) < 0)
            {
              if (*(_QWORD *)&buf[8])
              {
                sub_19BF8CD70(&__b, *(void **)buf, *(unint64_t *)&buf[8]);
                goto LABEL_168;
              }
            }
            else if (BYTE7(v129[0]))
            {
              *(_OWORD *)&__b.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
              __b.__r_.__value_.__r.__words[2] = *(_QWORD *)&v129[0];
LABEL_168:
              sub_19C0211E4((uint64_t)buf);
              if (qword_1EE4177A0 != -1)
                dispatch_once(&qword_1EE4177A0, &unk_1E3D170D0);
              v81 = qword_1EE417798;
              if (os_log_type_enabled((os_log_t)qword_1EE417798, OS_LOG_TYPE_ERROR))
              {
                if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v103 = &__b;
                else
                  v103 = (std::string *)__b.__r_.__value_.__r.__words[0];
                if (((0x6Fu >> v12) & 1) != 0)
                {
                  sub_19BF8E43C(__dst, (&off_1E3D1ADB8)[v12]);
                }
                else
                {
                  sub_19BFA0144((uint64_t)buf);
                  sub_19BF8E6F8(v129, (uint64_t)"unknown custom collator (type=", 30);
                  v104 = (_QWORD *)std::ostream::operator<<();
                  sub_19BF8E6F8(v104, (uint64_t)")", 1);
                  sub_19BFAAA88(__dst, (uint64_t)v129 + 8);
                  *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
                  v105 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
                  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
                  *(_QWORD *)&v129[0] = v105;
                  *((_QWORD *)&v129[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
                  if (v134.n128_i8[7] < 0)
                    operator delete((void *)v133.n128_u64[0]);
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x1A1AD0C7C]((char *)&v135 + 8);
                }
                v106 = v113;
                v107 = (void **)__dst[0];
                v108 = u_errorName(v119);
                v109 = __dst;
                *(_DWORD *)code = 136315650;
                if (v106 < 0)
                  v109 = v107;
                *(_QWORD *)&code[4] = v103;
                *(_WORD *)&code[12] = 2080;
                *(_QWORD *)&code[14] = v109;
                *(_WORD *)&code[22] = 2080;
                *(_QWORD *)&code[24] = v108;
                _os_log_error_impl(&dword_19BF85000, v81, OS_LOG_TYPE_ERROR, "failed to compile rules '%s' for collator type %s: %s", code, 0x20u);
                if (v113 < 0)
                  operator delete(__dst[0]);
              }
              if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__b.__r_.__value_.__l.__data_);
              goto LABEL_173;
            }
            sub_19BF8EEA8("wstring_convert: to_bytes error");
          }
        }
        else
        {
          v72 = (char *)__dst[0];
        }
        v80 = &__b;
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v80 = (std::string *)__b.__r_.__value_.__r.__words[0];
        std::string::resize(&__b, v72 - (char *)v80, 0);
        goto LABEL_168;
      }
      v18 = v46;
      v119 = sub_19BF8703C();
      if (v119 < U_ILLEGAL_ARGUMENT_ERROR)
        goto LABEL_174;
      ucol_close();
LABEL_173:
      v18 = 0;
LABEL_174:
      if (SHIBYTE(v117) < 0)
        operator delete(__p);
LABEL_176:
      if (*((_QWORD *)&v111 + 1))
      {
        v82 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v111 + 1) + 16))(*((_QWORD *)&v111 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v111 + 1));
        }
      }
      sub_19C021348(&v110, v18);
      if (!(_QWORD)v110)
      {
        if (qword_1EE4177A0 != -1)
          dispatch_once(&qword_1EE4177A0, &unk_1E3D170D0);
        v92 = qword_1EE417798;
        if (os_log_type_enabled((os_log_t)qword_1EE417798, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = __s1;
          _os_log_impl(&dword_19BF85000, v92, OS_LOG_TYPE_DEFAULT, "Collator creation failed for locale '%s'! Backing off to root collator.", buf, 0xCu);
        }
        sub_19BF8DAEC(buf);
        v93 = *(_OWORD *)buf;
        memset(buf, 0, sizeof(buf));
        v94 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
        v110 = v93;
        if (v94)
        {
          p_shared_owners = (unint64_t *)&v94->__shared_owners_;
          do
            v96 = __ldaxr(p_shared_owners);
          while (__stlxr(v96 - 1, p_shared_owners));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        v97 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v98 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
      }
      v84 = operator new(0x30uLL);
      v85 = v84;
      v84[1] = 0;
      v84[2] = 0;
      *v84 = &off_1E3D12AA0;
      v86 = (char *)(v84 + 3);
      v87 = v110;
      if (*((_QWORD *)&v110 + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
        v84[3] = off_1E3D11C28;
        *((_OWORD *)v84 + 2) = v87;
        do
          v90 = __ldxr(v88);
        while (__stxr(v90 + 1, v88));
        do
          v91 = __ldaxr(v88);
        while (__stlxr(v91 - 1, v88));
        if (!v91)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v87 + 1) + 16))(*((_QWORD *)&v87 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v87 + 1));
        }
      }
      else
      {
        v84[3] = off_1E3D11C28;
        *((_OWORD *)v84 + 2) = v87;
      }
      *a1 = v86;
      a1[1] = v85;
      v100 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
      if (*((_QWORD *)&v110 + 1))
      {
        v101 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      return;
    case 6:
      v23 = aA_0;
      v24 = 65;
      goto LABEL_73;
    default:
      goto LABEL_74;
  }
}

void sub_19BF886F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED024300);
  _Unwind_Resume(a1);
}

BOOL sub_19BF8883C(uint64_t a1, CFErrorRef *a2)
{
  const char *v3;
  NSObject *v4;
  const __CFLocale *v5;
  const __CFString *v6;
  const __CFString *v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  char *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _WORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  void ***v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  const char *v61;
  const char *v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  void **v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  char v74;
  char *v75;
  float v76;
  uint64_t v77;
  __n128 v78;
  BOOL v79;
  char v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  char v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  void *v98;
  char *v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v104;
  char *v105;
  char v106;
  char v107;
  void **v108;
  unsigned int **v109;
  unsigned int **v110;
  void ***v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  std::__shared_weak_count *v118;
  unint64_t v119;
  unint64_t *p_shared_weak_owners;
  unint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  int v143;
  void *v144;
  int v145;
  BOOL v146;
  uint64_t v147;
  unsigned int *i;
  unsigned int *v149;
  unsigned int **v150;
  NSObject *v151;
  uint64_t v152;
  uint64_t v153;
  __n128 (*v154)(_QWORD *, uint64_t);
  NSObject *log;
  unsigned int *v158;
  __int128 v159;
  std::mutex *v160;
  _QWORD v161[7];
  std::__shared_weak_count *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  char *__endptr;
  void *v172[2];
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  void *__p[3];
  void *v183;
  _QWORD v184[2];
  uint8_t buf[24];
  __n128 (*v186)(_QWORD *, uint64_t);
  void (*v187)(uint64_t);
  void *v188[3];
  char v189;
  void *v190;
  char v191;
  void *v192;
  char v193;
  void *v194;
  char v195;
  void *v196;
  _BYTE v197[24];
  __n128 (*v198)(_QWORD *, uint64_t);
  void (*v199)(uint64_t);
  void *v200;
  _QWORD v201[2];
  unint64_t v202;
  void *v203;
  char v204;
  uint64_t v205;
  void *v206;
  char v207;
  int v208;
  __int16 v209;
  char v210;
  void *v211;
  char v212;
  int v213;
  __int16 v214;
  char v215;
  void *v216;
  char v217;
  int v218;
  const __CFLocale *v219;
  char *v220;
  uint64_t v221;
  void **v222[3];
  void ***v223;
  uint64_t v224;

  v224 = *MEMORY[0x1E0C80C00];
  v160 = (std::mutex *)(a1 + 1600);
  std::mutex::lock((std::mutex *)(a1 + 1600));
  if (*(_WORD *)(a1 + 8))
  {
    v3 = *(_QWORD *)(a1 + 16) ? *(const char **)(a1 + 16) : (const char *)(a1 + 24);
    if (strcmp(v3, "root"))
    {
      sub_19BF8CF44();
      v4 = qword_1ED024230;
      if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEBUG))
      {
        v96 = *(_QWORD *)(a1 + 16);
        if (!v96)
          v96 = a1 + 24;
        *(_DWORD *)v197 = 136315138;
        *(_QWORD *)&v197[4] = v96;
        _os_log_debug_impl(&dword_19BF85000, v4, OS_LOG_TYPE_DEBUG, "Valid locale identifier: %s", v197, 0xCu);
      }
      sub_19BF8A1F4(a1 + 1480, (unsigned __int16 *)(a1 + 8));
      sub_19BF8CFAC((CFStringRef *)v222, (unsigned __int16 *)(a1 + 8));
      v5 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFLocaleIdentifier)v222[0]);
      v219 = v5;
      v6 = (const __CFString *)sub_19C0371E4(*(const __CFDictionary **)(a1 + 104), v5);
      v174 = (uint64_t)v6;
      v7 = (const __CFString *)sub_19C0376AC(*(const __CFDictionary **)(a1 + 104), v5);
      v172[0] = (void *)v7;
      if (v6)
      {
        *(_DWORD *)v197 = 0x100000;
        *(_WORD *)&v197[4] = 0;
        v197[6] = 0;
        *(_QWORD *)&v197[8] = 0;
        v197[16] = 0;
        LODWORD(v199) = 0x100000;
        WORD2(v199) = 0;
        BYTE6(v199) = 0;
        v200 = 0;
        LOBYTE(v201[0]) = 0;
        LODWORD(v202) = 0x100000;
        WORD2(v202) = 0;
        BYTE6(v202) = 0;
        v203 = 0;
        v204 = 0;
        LODWORD(v205) = 0x100000;
        WORD2(v205) = 0;
        BYTE6(v205) = 0;
        v206 = 0;
        v207 = 0;
        v208 = 0x100000;
        v209 = 0;
        v210 = 0;
        v211 = 0;
        v212 = 0;
        v213 = 0x100000;
        v214 = 0;
        v215 = 0;
        v216 = 0;
        v217 = 0;
        sub_19BF8C4B0((uint64_t)buf, v6);
        sub_19BF8A370((uint64_t)&v199, (unsigned __int16 *)buf);
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        sub_19BF8C4B0((uint64_t)buf, v7);
        sub_19BF8A370((uint64_t)&v202, (unsigned __int16 *)buf);
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        sub_19BF8A1F4((uint64_t)v197, (unsigned __int16 *)(a1 + 8));
        v218 = 1065353216;
        v8 = (void *)operator new();
        bzero(v8, 0x75B0uLL);
        sub_19BF87310((uint64_t)v8);
        sub_19BFF4FDC((uint64_t *)(a1 + 112), (uint64_t)v8);
        v9 = *(_QWORD *)(a1 + 112);
        sub_19BF86A50((uint64_t)buf, (uint64_t)v197);
        v10 = sub_19BF860D8(v9, (uint64_t)buf);
        if (v196 && v195 == 1)
          free(v196);
        if (v194 && v193 == 1)
          free(v194);
        if (v192 && v191 == 1)
          free(v192);
        if (v190 && v189 == 1)
          free(v190);
        if (v188[0] && BYTE6(v187) == 1)
          free(v188[0]);
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        if (!v10)
        {
          sub_19BF8CF44();
          v11 = qword_1ED024230;
          if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_ERROR))
          {
            v97 = v201;
            v98 = *(void **)(a1 + 16);
            if (!v98)
              v98 = (void *)(a1 + 24);
            if (v200)
              v97 = v200;
            v99 = &v204;
            if (v203)
              v99 = (char *)v203;
            LODWORD(__p[0]) = 136315906;
            *(void **)((char *)__p + 4) = "load_corresponding_static_lexicon";
            WORD2(__p[1]) = 2080;
            *(void **)((char *)&__p[1] + 6) = v98;
            HIWORD(__p[2]) = 2080;
            v183 = v97;
            LOWORD(v184[0]) = 2080;
            *(_QWORD *)((char *)v184 + 2) = v99;
            _os_log_error_impl(&dword_19BF85000, v11, OS_LOG_TYPE_ERROR, "%s: Failed to load static dictionary for localeIdentifier=%s, unigrams='%s', delta='%s'", (uint8_t *)__p, 0x2Au);
          }
        }
        if (v216 && v215 == 1)
          free(v216);
        if (v211 && v210 == 1)
          free(v211);
        if (v206 && BYTE6(v205) == 1)
          free(v206);
        if (v203 && BYTE6(v202) == 1)
          free(v203);
        if (v200 && BYTE6(v199) == 1)
          free(v200);
        if (*(_QWORD *)&v197[8] && v197[6] == 1)
          free(*(void **)&v197[8]);
      }
      if (v7)
        CFRelease(v7);
      if (v6)
        CFRelease(v6);
      if (v5)
        CFRelease(v5);
      sub_19BF8DAB8((const void **)v222);
    }
  }
  sub_19BF8CF44();
  v12 = qword_1ED024230;
  if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEBUG))
  {
    v83 = *(_QWORD *)(a1 + 16);
    if (!v83)
      v83 = a1 + 24;
    v84 = *(_QWORD *)(a1 + 48);
    if (!v84)
      v84 = a1 + 56;
    *(_DWORD *)v197 = 136315394;
    *(_QWORD *)&v197[4] = v83;
    *(_WORD *)&v197[12] = 2080;
    *(_QWORD *)&v197[14] = v84;
    _os_log_debug_impl(&dword_19BF85000, v12, OS_LOG_TYPE_DEBUG, "Loading mutable lexicon locale=%s path=%s", v197, 0x16u);
  }
  v13 = *(_QWORD *)(a1 + 112);
  if (v13 && sub_19BFC50B4(v13))
  {
    sub_19BF8CF44();
    v14 = qword_1ED024230;
    if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v197 = 0;
      _os_log_debug_impl(&dword_19BF85000, v14, OS_LOG_TYPE_DEBUG, "Getting collator from static lexicon", v197, 2u);
    }
    sub_19BF8CC94((uint64_t)v197, *(_QWORD *)(a1 + 112));
    v15 = *(_OWORD *)v197;
    *(_QWORD *)&v197[8] = 0;
    *(_QWORD *)v197 = 0;
    v16 = *(std::__shared_weak_count **)(a1 + 1520);
    *(_OWORD *)(a1 + 1512) = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(std::__shared_weak_count **)&v197[8];
    if (*(_QWORD *)&v197[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&v197[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_85;
    }
  }
  else
  {
    sub_19BF8CF44();
    v22 = qword_1ED024230;
    if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEBUG))
    {
      v85 = *(_QWORD *)(a1 + 16);
      if (!v85)
        v85 = a1 + 24;
      *(_DWORD *)v197 = 136315138;
      *(_QWORD *)&v197[4] = v85;
      _os_log_debug_impl(&dword_19BF85000, v22, OS_LOG_TYPE_DEBUG, "Getting ICU collator for locale=%s", v197, 0xCu);
    }
    if (*(_QWORD *)(a1 + 16))
      v23 = *(char **)(a1 + 16);
    else
      v23 = (char *)(a1 + 24);
    sub_19BF87864(v197, v23);
    v24 = *(_OWORD *)v197;
    *(_QWORD *)&v197[8] = 0;
    *(_QWORD *)v197 = 0;
    v25 = *(std::__shared_weak_count **)(a1 + 1520);
    *(_OWORD *)(a1 + 1512) = v24;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v19 = *(std::__shared_weak_count **)&v197[8];
    if (*(_QWORD *)&v197[8])
    {
      v28 = (unint64_t *)(*(_QWORD *)&v197[8] + 8);
      do
        v21 = __ldaxr(v28);
      while (__stlxr(v21 - 1, v28));
LABEL_85:
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v29 = *(_QWORD *)(a1 + 1528);
  v30 = *(std::__shared_weak_count **)(a1 + 1536);
  v163 = v29;
  v164 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(_QWORD *)(a1 + 1512);
  v34 = *(std::__shared_weak_count **)(a1 + 1520);
  v161[6] = v33;
  v162 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = operator new();
  v38 = (_QWORD *)v37;
  v167 = v29;
  v168 = v30;
  if (v30)
  {
    v39 = (unint64_t *)&v30->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v165 = v33;
  v166 = v34;
  v41 = a1 + 8;
  if (v34)
  {
    v42 = (unint64_t *)&v34->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = (_WORD *)(v37 + 24);
  *(_QWORD *)v37 = 0;
  *(_QWORD *)(v37 + 8) = 0;
  *(_WORD *)(v37 + 16) = 0;
  sub_19BF86B60(v37 + 24, (unsigned __int16 *)(a1 + 40));
  v45 = (_QWORD *)operator new();
  v46 = v45;
  *(_QWORD *)v197 = v33;
  *(_QWORD *)&v197[8] = v34;
  if (v34)
  {
    v47 = (unint64_t *)&v34->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  sub_19BFD7E80(v45, v33, (uint64_t)v34);
  v38[7] = v46;
  if (v34)
  {
    v49 = (unint64_t *)&v34->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v51 = v168;
  v38[8] = v167;
  v38[9] = v51;
  v52 = (void ***)(v38 + 8);
  if (v51)
  {
    v53 = (unint64_t *)&v51->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = v166;
  v169 = v165;
  v170 = v166;
  if (v166)
  {
    v56 = &v166->__shared_owners_;
    do
      v57 = __ldxr((unint64_t *)v56);
    while (__stxr(v57 + 1, (unint64_t *)v56));
  }
  if (*v44)
  {
    if (v38[4])
      v58 = (char *)v38[4];
    else
      v58 = (char *)(v38 + 5);
    sub_19BF8D9CC(v197, v58, 1);
    if ((_BYTE)v198)
    {
      v174 = v205;
      v175 = v202;
      v176 = 0;
      v172[0] = 0;
      v172[1] = 0;
      v173 = 0;
      if ((sub_19C03427C(&v174, (uint64_t)v172) & 1) != 0)
      {
        if (v173 >= 0)
          v59 = (char *)v172;
        else
          v59 = (char *)v172[0];
        sub_19BFF68B0((uint64_t)&v219, v59);
        v60 = v220;
        if (v220)
          v61 = v220;
        else
          v61 = (const char *)&v221;
        if (!strncmp(v61, "DynamicDictionary-", 0x12uLL))
        {
          __endptr = 0;
          if (v60)
            v62 = v60 + 18;
          else
            v62 = (char *)v222 + 2;
          v63 = strtol(v62, &__endptr, 10);
          v158 = (unsigned int *)operator new();
          *(_QWORD *)buf = v165;
          *(_QWORD *)&buf[8] = v166;
          if (v166)
          {
            v64 = &v166->__shared_owners_;
            do
              v65 = __ldxr((unint64_t *)v64);
            while (__stxr(v65 + 1, (unint64_t *)v64));
          }
          sub_19BFD7E80(v158, v165, (uint64_t)v166);
          if (v166)
          {
            v66 = &v166->__shared_owners_;
            do
              v67 = __ldaxr((unint64_t *)v66);
            while (__stlxr(v67 - 1, (unint64_t *)v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
            }
          }
          if (v63 > 9)
            goto LABEL_281;
          if (((1 << v63) & 0x3C0) != 0)
          {
            v68 = *v52;
            v69 = v176;
            if (!v175 || v176 + 4 <= v175)
            {
              v176 += 4;
              if (v174)
              {
                v70 = *(_DWORD *)(v174 + v69);
                if (v70)
                {
                  v71 = bswap32(v70) - 1;
                  do
                  {
                    HIDWORD(v181) = 0;
                    if ((sub_19C0343C8(&v174, (_DWORD *)&v181 + 1) & 1) == 0)
                      break;
                    LODWORD(v181) = 0;
                    if ((sub_19C0343C8(&v174, &v181) & 1) == 0)
                      break;
                    v180 = 0;
                    if (v63 >= 7 && (sub_19C0343C8(&v174, &v180) & 1) == 0)
                      break;
                    v179 = 0;
                    if ((sub_19C0343C8(&v174, &v179) & 1) == 0)
                      break;
                    if (v63 > 7)
                    {
                      v178 = 0;
                      if (v63 >= 9 && (sub_19C0343C8(&v174, &v178) & 1) == 0)
                        goto LABEL_281;
                    }
                    else
                    {
                      v179 = ((v179 >> 8) | (v179 << 27)) & 0x38000002 | (v179 >> 3) & 0x80;
                      v178 = 0;
                    }
                    v72 = v176;
                    if (v175)
                    {
                      if (v176 + 4 > v175)
                        break;
                    }
                    v176 += 4;
                    if (!v174)
                      break;
                    v73 = *(_DWORD *)(v174 + v72);
                    memset(__p, 0, sizeof(__p));
                    v74 = sub_19C03427C(&v174, (uint64_t)__p);
                    if ((v74 & 1) != 0)
                    {
                      if (SHIBYTE(__p[2]) >= 0)
                        v75 = (char *)__p;
                      else
                        v75 = (char *)__p[0];
                      sub_19BFF68B0((uint64_t)buf, v75);
                      v76 = COERCE_FLOAT(bswap32(v73));
                      v77 = HIDWORD(v181);
                      v78.n128_u64[0] = (unint64_t)sub_19BFF3524(&v177, (unsigned __int16 *)buf, SHIDWORD(v181), v179, v181, v180, v178, v76);
                      if (*(_QWORD *)&buf[8] && buf[6] == 1)
                        free(*(void **)&buf[8]);
                      if (*(_DWORD *)(v177 + 40)
                        && *(_WORD *)(v177 + 8)
                        && (*(_DWORD *)(v177 + 48) & 0x80000000) == 0
                        && (*(_DWORD *)(v177 + 52) & 0x80000000) == 0)
                      {
                        sub_19BF8CFAC((CFStringRef *)v222, (unsigned __int16 *)(v177 + 8));
                        if (v222[0])
                        {
                          sub_19BF8DAB8((const void **)v222);
                          sub_19C01A604(v158, &v177);
                        }
                        else
                        {
                          if (qword_1EE417788[0] != -1)
                            dispatch_once(qword_1EE417788, &unk_1E3D16FD0);
                          log = qword_1EE417780;
                          if (os_log_type_enabled((os_log_t)qword_1EE417780, OS_LOG_TYPE_ERROR))
                          {
                            v81 = *(_QWORD *)(v177 + 16);
                            if (!v81)
                              v81 = v177 + 24;
                            v82 = *(_DWORD *)(v177 + 40);
                            *(_DWORD *)buf = 136315394;
                            *(_QWORD *)&buf[4] = v81;
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = v82;
                            _os_log_error_impl(&dword_19BF85000, log, OS_LOG_TYPE_ERROR, "found invalid serialized entry with string='%s' and token_id=%d", buf, 0x12u);
                          }
                          sub_19BF8DAB8((const void **)v222);
                        }
                      }
                      (*((void (**)(void **, uint64_t, __n128))*v68 + 3))(v68, v77, v78);
                      if (v177)
                        sub_19BFD5E54(v177);
                    }
                    if (SHIBYTE(__p[2]) < 0)
                      operator delete(__p[0]);
                    v79 = v71-- != 0;
                    v80 = v79 ? v74 : 0;
                  }
                  while ((v80 & 1) != 0);
                }
              }
            }
            goto LABEL_281;
          }
          if (((1 << v63) & 0x2C) == 0)
            goto LABEL_281;
          v86 = v175;
          v87 = v176;
          v88 = v176 + 4;
          if (v175)
          {
            if (v88 > v175)
              goto LABEL_281;
          }
          v176 += 4;
          if (!v174)
            goto LABEL_281;
          v89 = *(_DWORD *)(v174 + v87);
          if (v89)
          {
            v90 = bswap32(v89);
            do
            {
              memset(buf, 0, sizeof(buf));
              v91 = sub_19C03427C(&v174, (uint64_t)buf);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              if ((v91 & 1) == 0)
                goto LABEL_281;
              --v90;
            }
            while (v90);
            v86 = v175;
            v88 = v176;
          }
          if (v63 >= 3)
          {
            v92 = v88 + 4;
            if (v86 && v92 > v86)
              goto LABEL_281;
            v176 = v88 + 4;
            if (!v174)
              goto LABEL_281;
            v93 = *(_DWORD *)(v174 + v88);
            if (!v93)
              goto LABEL_236;
            v94 = bswap32(v93);
            while (1)
            {
              memset(__p, 0, sizeof(__p));
              if ((sub_19C03427C(&v174, (uint64_t)__p) & 1) == 0)
                goto LABEL_279;
              if (SHIBYTE(__p[2]) < 0)
              {
                if (!__p[1])
                {
LABEL_278:
                  sub_19BFD823C((uint64_t)v158);
LABEL_279:
                  if (SHIBYTE(__p[2]) < 0)
                    operator delete(__p[0]);
                  goto LABEL_281;
                }
                v95 = (char *)__p[0];
              }
              else
              {
                if (!HIBYTE(__p[2]))
                  goto LABEL_278;
                v95 = (char *)__p;
              }
              sub_19BFF68B0((uint64_t)buf, v95);
              sub_19BFF3524((uint64_t *)v222, (unsigned __int16 *)buf, 0, 0, 1u, 0, 0, 0.0);
              if (*(_QWORD *)&buf[8] && buf[6] == 1)
                free(*(void **)&buf[8]);
              sub_19C01A604(v158, v222);
              if (v222[0])
                sub_19BFD5E54((uint64_t)v222[0]);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              if (!--v94)
              {
                v86 = v175;
                v92 = v176;
                goto LABEL_236;
              }
            }
          }
          v92 = v88;
LABEL_236:
          if (!v86 || v92 + 4 <= v86)
          {
            v176 = v92 + 4;
            if (v174)
            {
              v100 = *(_DWORD *)(v174 + v92);
              if (v100)
              {
                v101 = bswap32(v100) - 1;
                do
                {
                  LODWORD(v177) = 1;
                  v181 = 0;
                  if (v63 < 5)
                  {
                    if (v63 >= 3)
                    {
                      if (v175 && v176 + 1 > v175)
                        break;
                      ++v176;
                      if (!v174)
                        break;
                    }
                    v102 = 1;
                  }
                  else
                  {
                    if (!sub_19C0343C8(&v174, &v177))
                      break;
                    v102 = v177;
                    if (v177 >> 29)
                    {
                      v102 = 0;
                      LODWORD(v177) = 0;
                    }
                    else if ((_DWORD)v177
                           && (!sub_19C0343C8(&v174, (_DWORD *)&v181 + 1)
                            || HIDWORD(v181) && (sub_19C0343C8(&v174, &v181) & 1) == 0))
                    {
                      break;
                    }
                  }
                  memset(__p, 0, sizeof(__p));
                  if ((sub_19C03427C(&v174, (uint64_t)__p) & 1) != 0)
                  {
                    if (SHIBYTE(__p[2]) < 0)
                    {
                      if (__p[1])
                      {
                        v104 = v181;
                        v105 = (char *)__p[0];
LABEL_263:
                        sub_19BFF68B0((uint64_t)buf, v105);
                        sub_19BFF3524((uint64_t *)v222, (unsigned __int16 *)buf, 0, 0, v102 - v104, v104, 0, 0.0);
                        if (*(_QWORD *)&buf[8] && buf[6] == 1)
                          free(*(void **)&buf[8]);
                        sub_19C01A604(v158, v222);
                        if (v222[0])
                          sub_19BFD5E54((uint64_t)v222[0]);
                        v106 = 0;
                        goto LABEL_271;
                      }
                    }
                    else if (HIBYTE(__p[2]))
                    {
                      v104 = v181;
                      v105 = (char *)__p;
                      goto LABEL_263;
                    }
                    sub_19BFD823C((uint64_t)v158);
                  }
                  v106 = 1;
LABEL_271:
                  if (SHIBYTE(__p[2]) < 0)
                    operator delete(__p[0]);
                  if (v101)
                    v107 = v106;
                  else
                    v107 = 1;
                  --v101;
                }
                while ((v107 & 1) == 0);
              }
            }
          }
LABEL_281:
          v108 = *v52;
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = buf;
          *(_QWORD *)&buf[16] = 0x4002000000;
          v186 = sub_19C01A6E0;
          v187 = sub_19C01A704;
          memset(v188, 0, sizeof(v188));
          __p[0] = (void *)MEMORY[0x1E0C809B0];
          __p[1] = (void *)0x40000000;
          __p[2] = sub_19C01A72C;
          v183 = &unk_1E3D16F90;
          v184[0] = buf;
          sub_19BFD5FDC(*((_QWORD *)v158 + 2), (uint64_t)__p);
          v109 = *(unsigned int ***)(*(_QWORD *)&buf[8] + 40);
          v110 = *(unsigned int ***)(*(_QWORD *)&buf[8] + 48);
          if (v109 != v110)
          {
            while (1)
            {
              v222[0] = (void **)&off_1E3D122C0;
              v222[1] = v108;
              v223 = v222;
              sub_19BFD7ED8(v158, v109, (uint64_t)v222);
              v111 = v223;
              if (v223 == v222)
                break;
              if (v223)
              {
                v112 = 5;
LABEL_286:
                ((void (*)(void))(*v111)[v112])();
              }
              v109 += 4;
              if (v109 == v110)
                goto LABEL_288;
            }
            v111 = v222;
            v112 = 4;
            goto LABEL_286;
          }
LABEL_288:
          _Block_object_dispose(buf, 8);
          v222[0] = v188;
          sub_19BFBF780(v222);
          v113 = v38[7];
          v38[7] = v158;
          if (v113)
            sub_19C01A5C0(v113);
          v60 = v220;
          v41 = a1 + 8;
        }
        if (v60 && BYTE6(v219) == 1)
          free(v60);
      }
      if (SHIBYTE(v173) < 0)
        operator delete(v172[0]);
    }
    sub_19BF8DA50((uint64_t)v197);
  }
  if (v55)
  {
    v114 = (unint64_t *)&v55->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v116 = (std::__shared_weak_count *)operator new();
  v116->__shared_owners_ = 0;
  v117 = (unint64_t *)&v116->__shared_owners_;
  v116->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D14F50;
  v116->__shared_weak_owners_ = 0;
  v116[1].__vftable = (std::__shared_weak_count_vtbl *)v38;
  v118 = (std::__shared_weak_count *)v38[1];
  if (v118)
  {
    if (v118->__shared_owners_ != -1)
      goto LABEL_315;
    do
      v119 = __ldxr(v117);
    while (__stxr(v119 + 1, v117));
    p_shared_weak_owners = (unint64_t *)&v116->__shared_weak_owners_;
    do
      v121 = __ldxr(p_shared_weak_owners);
    while (__stxr(v121 + 1, p_shared_weak_owners));
    *v38 = v38;
    v38[1] = v116;
    std::__shared_weak_count::__release_weak(v118);
  }
  else
  {
    do
      v122 = __ldxr(v117);
    while (__stxr(v122 + 1, v117));
    v123 = (unint64_t *)&v116->__shared_weak_owners_;
    do
      v124 = __ldxr(v123);
    while (__stxr(v124 + 1, v123));
    *v38 = v38;
    v38[1] = v116;
  }
  do
    v125 = __ldaxr(v117);
  while (__stlxr(v125 - 1, v117));
  if (!v125)
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
LABEL_315:
  *(_QWORD *)&v126 = v38;
  if (v34)
  {
    v127 = (unint64_t *)&v34->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      *(_QWORD *)&v126 = v38;
    }
  }
  *((_QWORD *)&v126 + 1) = v116;
  if (v168)
  {
    v129 = &v168->__shared_owners_;
    do
      v130 = __ldaxr((unint64_t *)v129);
    while (__stlxr(v130 - 1, (unint64_t *)v129));
    if (!v130)
    {
      v159 = v126;
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
      v126 = v159;
    }
  }
  v131 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v126;
  if (v131)
  {
    v132 = (unint64_t *)&v131->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  if (v162)
  {
    v134 = &v162->__shared_owners_;
    do
      v135 = __ldaxr((unint64_t *)v134);
    while (__stlxr(v135 - 1, (unint64_t *)v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  if (v164)
  {
    v136 = &v164->__shared_owners_;
    do
      v137 = __ldaxr((unint64_t *)v136);
    while (__stlxr(v137 - 1, (unint64_t *)v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v138 = *(_QWORD *)(a1 + 120);
  if (v138)
  {
    v139 = *(_QWORD *)(a1 + 112);
    if (v139 && sub_19BFC50B4(v139))
    {
      sub_19C0174D8(a1 + 136, *(uint64_t **)(*(_QWORD *)(a1 + 112) + 30056));
    }
    else
    {
      v140 = *(_QWORD *)(a1 + 1512);
      sub_19BF8CF44();
      sub_19BFF4AA4(v41, a1 + 136, v140, 0);
      v141 = *(_QWORD *)(a1 + 1512);
      sub_19BF8CF44();
      sub_19BFF4AA4(v41, a1 + 136, v141, 3);
      *(_DWORD *)v197 = 0x100000;
      *(_WORD *)&v197[4] = 0;
      v197[6] = 1;
      *(_QWORD *)&v197[8] = 0;
      sub_19BF8CA04(v197, (uint64_t)"0123456789 ", 0, 0xBu);
      if (*(_QWORD *)&v197[8])
        v142 = *(_BYTE **)&v197[8];
      else
        v142 = &v197[16];
      *(_QWORD *)buf = v142;
      v143 = *(unsigned __int16 *)v197;
      *(_DWORD *)&buf[8] = 0;
      *(_DWORD *)&buf[12] = *(unsigned __int16 *)v197;
      *(_DWORD *)&buf[16] = 0;
      sub_19BF8BB80((uint64_t *)buf);
      __p[0] = v142;
      LODWORD(__p[1]) = v143;
      HIDWORD(__p[1]) = v143;
      LODWORD(__p[2]) = 0;
      sub_19BF8BB80((uint64_t *)__p);
      v144 = __p[0];
      v145 = (int)__p[1];
      while (1)
      {
        if (*(void **)buf != v144)
          __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
        if (*(_DWORD *)&buf[8] == v145)
          break;
        sub_19BFF4C5C(a1 + 136, *(_QWORD *)(a1 + 1512), *(unsigned int *)&buf[16]);
        sub_19BF8BB80((uint64_t *)buf);
      }
      if (*(_QWORD *)&v197[8])
        v146 = v197[6] == 1;
      else
        v146 = 0;
      if (v146)
        free(*(void **)&v197[8]);
    }
    *(_QWORD *)v197 = 0;
    *(_QWORD *)&v197[8] = v197;
    *(_QWORD *)&v197[16] = 0x4002000000;
    v198 = sub_19BFF450C;
    v199 = sub_19BFF4530;
    v201[1] = 0;
    v200 = 0;
    v201[0] = 0;
    v147 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 56);
    v161[0] = MEMORY[0x1E0C809B0];
    v161[1] = 0x40000000;
    v161[2] = sub_19BFF4558;
    v161[3] = &unk_1E3D15FE8;
    v161[4] = v197;
    v161[5] = a1;
    sub_19BFD5FDC(*(_QWORD *)(v147 + 16), (uint64_t)v161);
    v149 = *(unsigned int **)(*(_QWORD *)&v197[8] + 40);
    for (i = *(unsigned int **)(*(_QWORD *)&v197[8] + 48); v149 != i; v149 = (unsigned int *)(v150 + 4))
    {
      sub_19BFF3098((_QWORD *)(a1 + 1560), *v149);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 64) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 64), *v149);
      v150 = (unsigned int **)(v149 + 2);
      sub_19BFF2FA4(*(_QWORD *)(a1 + 120), v150);
    }
    if (*(_WORD *)(a1 + 40))
    {
      sub_19BF8CF44();
      v151 = qword_1ED024230;
      if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_INFO))
      {
        v152 = *(_QWORD *)(a1 + 80);
        if (!v152)
          v152 = a1 + 88;
        v153 = *(_QWORD *)(a1 + 1584);
        v154 = *(__n128 (**)(_QWORD *, uint64_t))(a1 + 48);
        if (!v154)
          v154 = (__n128 (*)(_QWORD *, uint64_t))(a1 + 56);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v152;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v153;
        *(_WORD *)&buf[22] = 2080;
        v186 = v154;
        _os_log_impl(&dword_19BF85000, v151, OS_LOG_TYPE_INFO, "%s: loaded %lu entries from %s", buf, 0x20u);
      }
    }
    _Block_object_dispose(v197, 8);
    *(_QWORD *)buf = &v200;
    sub_19BFF480C((void ***)buf);
  }
  else if (a2)
  {
    *a2 = sub_19BFEA6B4(CFSTR("Failed to create a mutable lexicon instance."));
  }
  std::mutex::unlock(v160);
  return v138 != 0;
}

void sub_19BF89E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    operator delete(__p);
  sub_19C01A5C0(a15);
}

void sub_19BF8A1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::mutex *a17)
{
  if (STACK[0x228])
  {
    if (LOBYTE(STACK[0x226]) == 1)
      free((void *)STACK[0x228]);
  }
  std::mutex::unlock(a17);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF8A1F4(uint64_t a1, unsigned __int16 *a2)
{
  void *v4;
  BOOL v5;
  unsigned __int16 v6;
  char *v7;
  const char *v8;
  unsigned __int16 v9;

  if ((unsigned __int16 *)a1 != a2)
  {
    v4 = *(void **)(a1 + 8);
    if (v4)
      v5 = v4 == *((void **)a2 + 1);
    else
      v5 = 0;
    if (v5 && *(_BYTE *)(a1 + 6))
      __assert_rtn("operator=", "TIString.cpp", 145, "!m_buffer || m_buffer != o.m_buffer || m_buffer_type == External");
    if (*((_BYTE *)a2 + 6) == 1)
    {
      sub_19BF8A320(a1);
      if (*a2)
      {
        sub_19BF8CA9C(a1, *a2);
        if (*(_QWORD *)(a1 + 8))
          v7 = *(char **)(a1 + 8);
        else
          v7 = (char *)(a1 + 16);
        if (*((_QWORD *)a2 + 1))
          v8 = (const char *)*((_QWORD *)a2 + 1);
        else
          v8 = (const char *)(a2 + 8);
        strlcpy(v7, v8, *a2 + 1);
        *(_WORD *)a1 = *a2;
        v9 = a2[2];
        if (!v9)
        {
          sub_19BF86BF8(a2);
          v9 = a2[2];
        }
        *(_WORD *)(a1 + 4) = v9;
      }
    }
    else if (!*((_BYTE *)a2 + 6))
    {
      if (v4 && *(_BYTE *)(a1 + 6) == 1)
        free(v4);
      *(_WORD *)(a1 + 2) = 16;
      *(_BYTE *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_WORD *)a1 = *a2;
      v6 = a2[2];
      if (!v6)
      {
        sub_19BF86BF8(a2);
        v6 = a2[2];
      }
      *(_WORD *)(a1 + 4) = v6;
      *(_BYTE *)(a1 + 6) = 0;
    }
  }
  return a1;
}

void sub_19BF8A320(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 && *(_BYTE *)(a1 + 6) == 1)
    free(v2);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 6) = 1;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
}

uint64_t sub_19BF8A370(uint64_t a1, unsigned __int16 *a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  _OWORD *v7;

  v4 = *(void **)(a1 + 8);
  if (v4 && *(_BYTE *)(a1 + 6) == 1)
    free(v4);
  v5 = *a2;
  *(_WORD *)a1 = v5;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 1);
  *(_BYTE *)(a1 + 6) = *((_BYTE *)a2 + 6);
  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 8) = v6;
  if (!v6)
  {
    v7 = (_OWORD *)(a1 + 16);
    if (v5)
      *v7 = *((_OWORD *)a2 + 1);
    else
      *(_BYTE *)v7 = 0;
  }
  *((_QWORD *)a2 + 1) = 0;
  sub_19BF8A320((uint64_t)a2);
  return a1;
}

const void *LXLexiconCreateTransient(const __CFDictionary *a1, CFErrorRef *a2)
{
  const __CFString *Value;
  const __CFString *v5;
  unsigned __int8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t Instance;
  const void *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  const __CFString *cf;
  _QWORD v25[2];

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("name"));
  if (Value && (v5 = Value, CFStringGetLength(Value)))
  {
    cf = sub_19BF8723C(a1);
    v6 = atomic_load((unsigned __int8 *)&qword_1ED024228);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED024228))
    {
      v21 = operator new();
      sub_19BFEC3AC(v25);
      v22 = v25[0];
      *(_QWORD *)v21 = &off_1E3D14860;
      *(_QWORD *)(v21 + 8) = v22;
      *(_QWORD *)(v21 + 16) = 850045863;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_OWORD *)(v21 + 40) = 0u;
      *(_OWORD *)(v21 + 56) = 0u;
      *(_QWORD *)(v21 + 72) = 0;
      sub_19BFEC418(v21);
      __cxa_guard_release(&qword_1ED024228);
    }
    v7 = qword_1ED024198;
    v8 = (std::__shared_weak_count *)qword_1ED024210;
    v23 = (std::__shared_weak_count *)qword_1ED024210;
    if (qword_1ED024210)
    {
      v9 = (unint64_t *)(qword_1ED024210 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (qword_1ED024410 != -1)
      dispatch_once(&qword_1ED024410, &unk_1E3D15ED8);
    Instance = _CFRuntimeCreateInstance();
    v12 = (const void *)Instance;
    v13 = Instance + 16;
    v25[0] = v7;
    v25[1] = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    sub_19C020844((_QWORD *)(Instance + 16), v5, &stru_1E3D1ADF0, v7, v8, (uint64_t)cf, a1);
    if (v8)
    {
      v16 = (unint64_t *)&v8->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (((*(uint64_t (**)(uint64_t, CFErrorRef *))(*(_QWORD *)v13 + 16))(v13, a2) & 1) == 0)
    {
      CFRelease(v12);
      v12 = 0;
    }
    if (v23)
    {
      v18 = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v12 = 0;
    if (a2)
      *a2 = sub_19BFEA6B4(CFSTR("A name is required when creating a transient lexicon"));
  }
  return v12;
}

void sub_19BF8A66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __cxa_guard_abort(&qword_1ED024228);
  sub_19BFC0928((const void **)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BF8A6DC(_QWORD *a1, uint64_t a2)
{
  const char *v4;
  int v5;
  int v6;
  unint64_t st_size;
  void *v8;
  std::ios_base::failure *exception;
  int *v11;
  std::ios_base::failure *v12;
  int *v13;
  std::ios_base::failure *v14;
  int *v15;
  const void *v16;
  int v17;
  stat v18;

  *a1 = 0;
  a1[1] = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  v5 = open(v4, 0);
  if (v5 < 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    sub_19BF8E43C(&v18, "open()");
    v11 = __error();
    sub_19C014708(exception, (const void **)&v18, a2, *v11);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  v6 = v5;
  if (fstat(v5, &v18) < 0)
  {
    v12 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    sub_19BF8E43C(&v16, "fstat()");
    v13 = __error();
    sub_19C014708(v12, &v16, a2, *v13);
    __cxa_throw(v12, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  st_size = v18.st_size;
  a1[1] = v18.st_size;
  if (st_size >= 0x7FFFFFFF)
    LODWORD(st_size) = 0x7FFFFFFF;
  v17 = st_size;
  v16 = 0;
  fcntl(v6, 44, &v16);
  v8 = mmap(0, a1[1], 1, 1, v6, 0);
  *a1 = v8;
  if (v8 == (void *)-1)
  {
    v14 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    sub_19BF8E43C(&v16, "mmap()");
    v15 = __error();
    sub_19C014708(v14, &v16, a2, *v15);
    __cxa_throw(v14, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  close(v6);
  return a1;
}

void sub_19BF8A8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;
  int v23;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      close(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t sub_19BF8A934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v5;
  char *v6;

  v1 = *(unsigned int *)(a1 + 14360);
  if ((_DWORD)v1 == -1
    || (v6 = &v5,
        ((void (*)(char **, uint64_t))off_1E3D15960[v1])(&v6, a1 + 8),
        v3 = *(unsigned int *)(a1 + 28720),
        (_DWORD)v3 == -1))
  {
    sub_19BFC4E9C();
  }
  v6 = &v5;
  return ((uint64_t (*)(char **, uint64_t))off_1E3D15960[v3])(&v6, a1 + 14368);
}

void sub_19BF8A9B8(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  std::string *v5;
  const char *v6;
  NSObject *v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string v12;
  std::error_code v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  std::string *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    if (qword_1EE4177C0 != -1)
      dispatch_once(&qword_1EE4177C0, &unk_1E3D17150);
    v4 = qword_1EE4177B8;
    if (os_log_type_enabled((os_log_t)qword_1EE4177B8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a3 + 23) >= 0)
        v5 = (std::string *)a3;
      else
        v5 = *(std::string **)a3;
      *(_DWORD *)buf = 136315394;
      v15 = "handle_locking";
      v16 = 2080;
      v17 = v5;
      v6 = "%s: %s file is already locked";
LABEL_30:
      _os_log_impl(&dword_19BF85000, v4, OS_LOG_TYPE_DEFAULT, v6, buf, 0x16u);
    }
  }
  else
  {
    if (mlock(*(const void **)a2, *(_QWORD *)(a2 + 8)))
    {
      *(_QWORD *)&v13.__val_ = *__error();
      v13.__cat_ = std::generic_category();
      if (v13.__val_)
      {
        if (qword_1EE4177C0 != -1)
          dispatch_once(&qword_1EE4177C0, &unk_1E3D17150);
        v8 = qword_1EE4177B8;
        if (os_log_type_enabled((os_log_t)qword_1EE4177B8, OS_LOG_TYPE_DEFAULT))
        {
          std::error_code::message(&v12, &v13);
          v9 = (v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &v12
             : (std::string *)v12.__r_.__value_.__r.__words[0];
          v10 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
          *(_DWORD *)buf = 136315650;
          v15 = "handle_locking";
          v16 = 2080;
          v17 = v9;
          v18 = 2080;
          v19 = v10;
          _os_log_impl(&dword_19BF85000, v8, OS_LOG_TYPE_DEFAULT, "%s: mlock() failed for %s file: %s", buf, 0x20u);
          if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v12.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    else
    {
      std::system_category();
    }
    *a1 = 1;
    if (qword_1EE4177C0 != -1)
      dispatch_once(&qword_1EE4177C0, &unk_1E3D17150);
    v4 = qword_1EE4177B8;
    if (os_log_type_enabled((os_log_t)qword_1EE4177B8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a3 + 23) >= 0)
        v11 = (std::string *)a3;
      else
        v11 = *(std::string **)a3;
      *(_DWORD *)buf = 136315394;
      v15 = "handle_locking";
      v16 = 2080;
      v17 = v11;
      v6 = "%s: %s file locked successfully";
      goto LABEL_30;
    }
  }
}

void sub_19BF8AC40(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19BF8E3F8(a1);
}

BOOL sub_19BF8AC4C(const __CFURL *a1, const __CFString *a2)
{
  const __CFString *PathComponent;
  _BOOL8 v5;
  const __CFString *v6;

  PathComponent = CFURLCopyLastPathComponent(a1);
  if ((unint64_t)CFStringFind(PathComponent, a2, 0).location)
  {
    v5 = 0;
  }
  else
  {
    v6 = CFURLCopyPathExtension(a1);
    v5 = CFStringCompare(CFSTR("dat"), v6, 0) == kCFCompareEqualTo;
    if (v6)
      CFRelease(v6);
  }
  if (PathComponent)
    CFRelease(PathComponent);
  return v5;
}

void sub_19BF8ACEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_19BF8AD20(&a9, 0);
  sub_19BF8AD20(&a10, 0);
  _Unwind_Resume(a1);
}

void sub_19BF8AD20(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t LXLexiconCreate(const __CFDictionary *a1, CFErrorRef *a2)
{
  const __CFLocale *v4;
  const __CFString *v5;
  const __CFString *v6;
  CFIndex v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t Instance;
  uint64_t v11;
  const __CFString *v12;
  const __CFString *Value;
  const __CFString *v14;
  const __CFString *v15;
  CFIndex Length;
  const __CFString *v17;
  const __CFString *v18;
  uint64_t Copy;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  const __CFArray *v24;
  const __CFArray *v25;
  const __CFString *ValueAtIndex;
  uint64_t v27;
  const __CFString *v28;
  const __CFBoolean *v29;
  const __CFBoolean *v30;
  CFTypeID v31;
  int v32;
  const __CFAllocator *v33;
  const __CFURL *v34;
  const __CFString *PathComponent;
  CFStringRef v36;
  const __CFString *v37;
  const __CFURL *v38;
  const __CFString *v39;
  const __CFString *v40;
  uint64_t (***v41)();
  uint64_t v42;
  char v43;
  const __CFURL *url;
  const __CFString *cf;
  const __CFLocale *v47;
  uint64_t (**v48)();
  void *v49;
  uint64_t (***v50)();
  uint64_t v51;
  CFRange v52;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFLocale *)sub_19BF8723C(a1);
  v47 = v4;
  if (!_os_feature_enabled_impl()
    || (v5 = (const __CFString *)sub_19BFEA39C(a1, v4), v6 = v5, (v48 = (uint64_t (**)())v5) == 0)
    || (v7 = CFStringGetLength(v5), CFRelease(v6), v7 < 1))
  {
    Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("type"));
    if (Value)
    {
      if (CFStringCompare(Value, CFSTR("morphemes"), 0) == kCFCompareEqualTo)
      {
LABEL_14:
        v17 = sub_19BFEA1B8(a1, v4);
        v48 = (uint64_t (**)())v17;
        if (qword_1ED024410 != -1)
          dispatch_once(&qword_1ED024410, &unk_1E3D15ED8);
        Instance = _CFRuntimeCreateInstance();
        sub_19BFEBB34((char *)(Instance + 16), (uint64_t)v4, v17, 0, 0);
        *(_QWORD *)(Instance + 16) = &off_1E3D11C68;
        sub_19BFB17F4(Instance + 30280);
        *(_QWORD *)(Instance + 30816) = &off_1E3D11C08;
        *(_QWORD *)(Instance + 30824) = 0;
        *(_QWORD *)(Instance + 30832) = &off_1E3D11AB8;
        *(_DWORD *)(Instance + 30840) = 0;
        sub_19BF8EFC0((_QWORD *)(Instance + 30848));
        *(_QWORD *)(Instance + 30904) = 0;
        *(_OWORD *)(Instance + 30872) = 0u;
        *(_OWORD *)(Instance + 30888) = 0u;
        *(_OWORD *)(Instance + 30856) = 0u;
        if (v17)
          CFRelease(v17);
        goto LABEL_84;
      }
    }
    else if (_os_feature_enabled_impl())
    {
      v14 = sub_19BFEA1B8(a1, v4);
      v15 = v14;
      v48 = (uint64_t (**)())v14;
      if (v14)
      {
        Length = CFStringGetLength(v14);
        CFRelease(v15);
        if (Length >= 1)
          goto LABEL_14;
      }
    }
    v18 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("dataFile"));
    if (v18)
    {
      Copy = (uint64_t)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v18);
    }
    else
    {
      v20 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("type"));
      v21 = v20;
      if (v20 && CFStringCompare(v20, CFSTR("unigrams"), 0))
      {
        if (CFStringCompare(v21, CFSTR("phrases"), 0) == kCFCompareEqualTo)
        {
          v48 = &off_1E3D10AD8;
          v50 = &v48;
          v22 = (const __CFString *)sub_19C0372B8(a1, v4);
          v41 = v50;
          if (v50 == &v48)
          {
            v42 = 4;
            v41 = &v48;
          }
          else
          {
            if (!v50)
              goto LABEL_26;
            v42 = 5;
          }
          (*v41)[v42]();
          goto LABEL_26;
        }
        v22 = 0;
LABEL_26:
        v23 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("type"));
        if (v23 && CFStringCompare(v23, CFSTR("phrases"), 0) == kCFCompareEqualTo)
        {
          v28 = 0;
        }
        else
        {
          v24 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("deltaFiles"));
          v25 = v24;
          if (v24 && CFArrayGetCount(v24) >= 1)
          {
            if (CFArrayGetCount(v25) != 1)
              __assert_rtn("createDeltaLexiconPath", "LXUtils.cpp", 105, "CFArrayGetCount(delta_paths) == 1 && \"multiple delta files are not currently supported\"");
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v25, 0);
            v27 = (uint64_t)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], ValueAtIndex);
          }
          else
          {
            v27 = sub_19C0376AC(a1, v4);
          }
          v28 = (const __CFString *)v27;
        }
        v29 = (const __CFBoolean *)CFDictionaryGetValue(a1, CFSTR("enableInternalStemSuffix"));
        v30 = v29;
        if (v29 && (v31 = CFGetTypeID(v29), v31 == CFBooleanGetTypeID()) && (v32 = CFBooleanGetValue(v30), v22) && v32)
        {
          v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v34 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v22, kCFURLPOSIXPathStyle, 0);
          v48 = (uint64_t (**)())v34;
          if (v34)
          {
            url = CFURLCreateCopyDeletingLastPathComponent(v33, v34);
            PathComponent = CFURLCopyLastPathComponent(v34);
            if (CFStringHasPrefix(PathComponent, CFSTR("Unigrams")))
            {
              v52.length = CFStringGetLength(PathComponent) - 8;
              v52.location = 8;
              v36 = CFStringCreateWithSubstring(v33, PathComponent, v52);
              v37 = CFStringCreateWithFormat(v33, 0, CFSTR("lstsfmap%@"), v36);
              v38 = CFURLCreateCopyAppendingPathComponent(v33, url, v37, 0);
              if (CFURLResourceIsReachable(v38, 0))
                v39 = CFURLCopyFileSystemPath(v38, kCFURLPOSIXPathStyle);
              else
                v39 = 0;
              if (v38)
                CFRelease(v38);
              if (v37)
                CFRelease(v37);
              if (v36)
                CFRelease(v36);
            }
            else
            {
              v39 = 0;
            }
            if (PathComponent)
              CFRelease(PathComponent);
            if (url)
              CFRelease(url);
            CFRelease(v34);
          }
          else
          {
            v39 = 0;
          }
          cf = v39;
        }
        else
        {
          v39 = 0;
          cf = 0;
          if (!v22)
            goto LABEL_74;
        }
        if (CFStringGetLength(v22))
        {
          if (qword_1ED024410 != -1)
            dispatch_once(&qword_1ED024410, &unk_1E3D15ED8);
          Instance = _CFRuntimeCreateInstance();
          sub_19BFEBB34((char *)(Instance + 16), (uint64_t)v4, v22, v28, v39);
          v43 = 1;
          v39 = cf;
          if (!cf)
          {
LABEL_79:
            if (v28)
              CFRelease(v28);
            if (v22)
              CFRelease(v22);
            if ((v43 & 1) == 0)
              goto LABEL_86;
            goto LABEL_84;
          }
LABEL_78:
          CFRelease(v39);
          goto LABEL_79;
        }
LABEL_74:
        if (a2)
        {
          Instance = 0;
          v43 = 0;
          *a2 = sub_19BFEA6B4(CFSTR("Could not determine the location of the base unigrams file, or one was not provided."));
          if (!v39)
            goto LABEL_79;
        }
        else
        {
          Instance = 0;
          v43 = 0;
          if (!v39)
            goto LABEL_79;
        }
        goto LABEL_78;
      }
      Copy = sub_19C0371E4(a1, v4);
    }
    v22 = (const __CFString *)Copy;
    goto LABEL_26;
  }
  v8 = (const __CFString *)sub_19BFEA39C(a1, v4);
  if (qword_1ED024410 != -1)
    dispatch_once(&qword_1ED024410, &unk_1E3D15ED8);
  v9 = _CFRuntimeCreateInstance();
  Instance = v9;
  *(_QWORD *)(v9 + 24) = 0;
  v11 = v9 + 24;
  *(_QWORD *)(v9 + 16) = &off_1E3D11938;
  if (v4)
  {
    v12 = (const __CFString *)MEMORY[0x1A1AD064C](v4);
    sub_19BF8C4B0(v11 + 8, v12);
  }
  else
  {
    *(_DWORD *)(v9 + 32) = 0x100000;
    *(_WORD *)(v9 + 36) = 0;
    *(_BYTE *)(v9 + 38) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_BYTE *)(v9 + 48) = 0;
  }
  sub_19BF8C4B0(Instance + 64, v8);
  *(_DWORD *)(Instance + 160) = 0x100000;
  *(_DWORD *)(Instance + 96) = 0x100000;
  *(_WORD *)(Instance + 100) = 0;
  *(_BYTE *)(Instance + 102) = 0;
  *(_QWORD *)(Instance + 104) = 0;
  *(_BYTE *)(Instance + 112) = 0;
  *(_DWORD *)(Instance + 128) = 0x100000;
  *(_WORD *)(Instance + 132) = 0;
  *(_BYTE *)(Instance + 134) = 0;
  *(_QWORD *)(Instance + 136) = 0;
  *(_BYTE *)(Instance + 144) = 0;
  *(_WORD *)(Instance + 164) = 0;
  *(_BYTE *)(Instance + 166) = 0;
  *(_QWORD *)(Instance + 168) = 0;
  *(_BYTE *)(Instance + 176) = 0;
  v40 = (const __CFString *)CFLocaleGetValue(v4, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
  sub_19BF8C4B0((uint64_t)&v48, v40);
  sub_19BF8A370(Instance + 160, (unsigned __int16 *)&v48);
  if (v49 && BYTE6(v48) == 1)
    free(v49);
  if (v8)
    CFRelease(v8);
LABEL_84:
  if (((*(uint64_t (**)(uint64_t, CFErrorRef *))(*(_QWORD *)(Instance + 16) + 16))(Instance + 16, a2) & 1) != 0)
    goto LABEL_87;
  CFRelease((CFTypeRef)Instance);
LABEL_86:
  Instance = 0;
LABEL_87:
  if (v47)
    CFRelease(v47);
  return Instance;
}

void sub_19BF8B520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19BF8B7D8(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  BOOL v4;
  _BYTE v5[8];
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  sub_19BF8C4B0((uint64_t)v5, a3);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 8))(a2, v5);
  if (v6)
    v4 = v5[6] == 1;
  else
    v4 = 0;
  if (v4)
    free(v6);
}

void sub_19BF8B868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  BOOL v14;

  if (a13)
    v14 = a12 == 1;
  else
    v14 = 0;
  if (v14)
    free(a13);
  _Unwind_Resume(exception_object);
}

void *sub_19BF8B894@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  void *result;
  size_t v12;
  void *v13;
  __int128 v14;
  int v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  void *__src[2];
  char v25;
  __int128 v26;
  int v27;

  LOWORD(__src[0]) = 0;
  v25 = 0;
  LOWORD(v26) = 0;
  v27 = 0;
  v6 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
  v7 = a2 + 8;
  if (v6)
    v8 = *((_QWORD *)a2 + 1);
  else
    v8 = (uint64_t)(a2 + 8);
  v20 = v8;
  v9 = *a2;
  v21 = 0;
  v22 = v9;
  v23 = 0;
  sub_19BF8BB80(&v20);
  while (1)
  {
    if (v6)
      v10 = v6;
    else
      v10 = v7;
    *(_QWORD *)&v14 = v10;
    DWORD2(v14) = v9;
    HIDWORD(v14) = v9;
    v15 = 0;
    result = sub_19BF8BB80((uint64_t *)&v14);
    if (v20 != (_QWORD)v14)
      __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
    if (v21 == DWORD2(v14))
      break;
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, _QWORD))(*a1 + 16))(&v18, a1, v23);
    sub_19BF8BF40((uint64_t)&v14, a1[1], (uint64_t)__src, 0, (unsigned __int16 *)&v18);
    if (LOWORD(__src[0]) >= 0xFu && __src[1])
      MEMORY[0x1A1AD0CB8](__src[1], 0x1000C8077774924);
    *(_OWORD *)__src = v14;
    if ((unsigned __int16)v14 >= 0xFu)
      LOWORD(v14) = 0;
    v25 = v15;
    if ((unsigned __int16)v26 >= 0xFu && *((_QWORD *)&v26 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v26 + 1), 0x1000C8077774924);
    v26 = v16;
    if ((unsigned __int16)v16 >= 0xFu)
      LOWORD(v16) = 0;
    v27 = v17;
    if ((unsigned __int16)v14 >= 0xFu && *((_QWORD *)&v14 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v14 + 1), 0x1000C8077774924);
    if ((unsigned __int16)v18 >= 0xFu)
    {
      if (v19)
        MEMORY[0x1A1AD0CB8](v19, 0x1000C8077774924);
    }
    sub_19BF8BB80(&v20);
    v9 = *a2;
    v6 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
  }
  v12 = LOWORD(__src[0]);
  if (LOWORD(__src[0]) < 0xFuLL)
  {
    *(_OWORD *)a3 = *(_OWORD *)__src;
  }
  else
  {
    *(_WORD *)a3 = __src[0];
    v13 = (void *)operator new[]();
    *(_QWORD *)(a3 + 8) = v13;
    result = memcpy(v13, __src[1], v12);
  }
  if ((unsigned __int16)v26 >= 0xFu)
  {
    result = (void *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
      result = (void *)MEMORY[0x1A1AD0CB8](*((_QWORD *)&v26 + 1), 0x1000C8077774924);
  }
  if (v12 >= 0xF)
  {
    result = __src[1];
    if (__src[1])
      return (void *)MEMORY[0x1A1AD0CB8](__src[1], 0x1000C8077774924);
  }
  return result;
}

void sub_19BF8BB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_19BFCF8D8((unsigned __int16 *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19BF8BB80(uint64_t *result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;

  v1 = *((_DWORD *)result + 3);
  v2 = *((int *)result + 2);
  if ((int)v2 >= v1)
  {
    *((_DWORD *)result + 2) = v1 + 1;
    *((_DWORD *)result + 4) = 0;
  }
  else
  {
    v3 = *result;
    v4 = v2 + 1;
    *((_DWORD *)result + 2) = v2 + 1;
    v5 = *(char *)(v3 + v2);
    v6 = *(unsigned __int8 *)(v3 + v2);
    *((_DWORD *)result + 4) = v6;
    if (v5 < 0)
    {
      if (v6 > 0xDF)
      {
        v7 = v2 + 3;
        if (v6 > 0xEF)
        {
          *((_DWORD *)result + 4) = ((v6 & 7) << 18) | ((*(_BYTE *)(v3 + v4) & 0x3F) << 12) | ((*(_BYTE *)(v2 + v3 + 2) & 0x3F) << 6) | *(_BYTE *)(v3 + v7) & 0x3F;
          *((_DWORD *)result + 2) = v2 + 4;
        }
        else
        {
          *((_DWORD *)result + 4) = ((v6 & 0xF) << 12) | ((*(_BYTE *)(v3 + v4) & 0x3F) << 6) | *(_BYTE *)(v2 + v3 + 2) & 0x3F;
          *((_DWORD *)result + 2) = v7;
        }
      }
      else
      {
        *((_DWORD *)result + 2) = v2 + 2;
        *((_DWORD *)result + 4) = *(_BYTE *)(v3 + v4) & 0x3F | ((v6 & 0x1F) << 6);
      }
    }
  }
  return result;
}

uint64_t sub_19BF8BC44(uint64_t a1, unint64_t a2, void *__src, size_t __len)
{
  NSObject *v5;
  void *v9;
  void *v10;
  _DWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a2 < 0x10000)
  {
    *(_WORD *)a1 = a2;
    if ((unsigned __int16)a2 < 0xFu)
    {
      v10 = (void *)(a1 + 2);
      if (__len)
        memmove(v10, __src, __len);
      return (uint64_t)v10 + __len;
    }
    else
    {
      v9 = (void *)operator new[]();
      *(_QWORD *)(a1 + 8) = v9;
      memcpy(v9, __src, __len);
      return (uint64_t)v9 + __len;
    }
  }
  else
  {
    if (qword_1EE417758 != -1)
      dispatch_once(&qword_1EE417758, &unk_1E3D15F58);
    v5 = qword_1EE417750;
    if (os_log_type_enabled((os_log_t)qword_1EE417750, OS_LOG_TYPE_ERROR))
    {
      v12[0] = 67109120;
      v12[1] = 0xFFFF;
      _os_log_error_impl(&dword_19BF85000, v5, OS_LOG_TYPE_ERROR, "ByteString initialized with buffer longer than 0x%x. Returning empty byte string", (uint8_t *)v12, 8u);
    }
    *(_WORD *)a1 = 0;
    return a1 + 2;
  }
}

void sub_19BF8BD94(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  int *v8;
  _DWORD *v9;
  int v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  char __src;
  int v17;
  unsigned __int16 __n;
  char __n_6;
  void *v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v4 = a1[3];
  if (v4)
  {
    v5 = (_DWORD *)a1[2];
    v6 = &v5[2 * v4];
    do
    {
      v7 = v4 >> 1;
      v8 = &v5[2 * (v4 >> 1)];
      v10 = *v8;
      v9 = v8 + 2;
      v4 += ~(v4 >> 1);
      if ((v10 & 0xFFFFFFu) < (a2 & 0xFFFFFF))
        v5 = v9;
      else
        v4 = v7;
    }
    while (v4);
    if (v5 != v6 && (*v5 & 0xFFFFFF) == a2)
    {
      v11 = (char *)(v5 + 1);
      if (HIBYTE(*v5) != 1)
      {
        v13 = strnlen(v11, 4uLL);
        goto LABEL_20;
      }
      v12 = *(unsigned int *)v11;
      if (a1[5] > v12)
      {
        v11 = (char *)(a1[4] + v12);
        v13 = strlen(v11);
LABEL_20:
        sub_19BF8BC44(a3, v13, v11, v13);
        return;
      }
    }
  }
  sub_19BF8D914((uint64_t)&__n, a2);
  v17 = 0;
  __src = 2;
  if (v20)
    v14 = v20;
  else
    v14 = v21;
  v15 = __n;
  memcpy(&v17, v14, __n);
  sub_19BF8BC44(a3, v15 + 1, &__src, v15 + 1);
  if (v20)
  {
    if (__n_6 == 1)
      free(v20);
  }
}

void sub_19BF8BF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  if (a13)
  {
    if (a12 == 1)
      free(a13);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_19BF8BF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  BOOL v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  NSObject *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  size_t v47;
  unsigned __int16 *v48;
  void *v49;
  unsigned __int16 *result;
  uint64_t v51;
  _QWORD *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  unsigned __int16 *v55;
  unsigned int v56;
  uint8_t buf[4];
  int v58;
  __int16 v59;
  char *v60;
  __int16 v61;
  char *v62;
  const void *v63;
  char *v64;
  _BYTE v65[16];
  const void *v66;
  char *v67;
  _QWORD v68[4];

  v54 = a4;
  v68[2] = *MEMORY[0x1E0C80C00];
  v7 = (unsigned __int16 *)MEMORY[0x1E0C80A78]();
  v10 = (char *)&v51 - v9;
  v55 = (unsigned __int16 *)v11;
  v12 = *(unsigned __int8 *)(v11 + 16);
  v53 = v7;
  if (v8)
  {
    v13 = (unsigned __int8 *)*((_QWORD *)a5 + 1);
    if (v8 <= 0xE)
      v13 = (unsigned __int8 *)(a5 + 1);
    v14 = *v13;
    if (v12 == v14)
    {
      v56 = v12;
      v15 = 0;
    }
    else
    {
      if (v12)
      {
        if (v14 > v12)
          v16 = -1;
        else
          v16 = 3;
        *v10 = v16;
        v12 = 1;
      }
      v15 = v12 + 1;
      v10[v12] = v14;
      if ((v14 - 95) >= 0x1Eu && v14 != 254)
        v14 = 0;
      v56 = v14;
    }
    if (v8 < 2)
    {
      v8 = 1;
    }
    else
    {
      v18 = 0;
      v52 = (_QWORD *)(a2 + 1296);
      v19 = &v10[v15];
      do
      {
        if (v8 <= 0xE)
          v20 = (unsigned __int8 *)(a5 + 1);
        else
          v20 = (unsigned __int8 *)*((_QWORD *)a5 + 1);
        v21 = v20[v18 + 1];
        v19[v18] = v21;
        if (*(_BYTE *)(a2 + v21 + 1036))
        {
          v22 = (_DWORD)v21 != 254 && (v21 - 95) > 0x1Du;
          if (!v22 && !*(_DWORD *)(a2 + 4 * v21 + 12))
          {
            sub_19BF8BC44((uint64_t)&v66, v18 + 1, v20, v18 + 1);
            v23 = sub_19BFF4D28(v52, (unsigned __int16 *)&v66);
            if ((unsigned __int16)v66 >= 0xFu && v67)
              MEMORY[0x1A1AD0CB8](v67, 0x1000C8077774924);
            v24 = v56;
            if (v23)
              v24 = v21;
            v56 = v24;
            v8 = *a5;
          }
        }
        LOWORD(v15) = v15 + 1;
        v25 = v18 + 2 >= (unint64_t)v8;
        ++v18;
      }
      while (!v25);
    }
  }
  else
  {
    v56 = v12;
    LOWORD(v15) = 0;
  }
  if (v8 + 1 < (unsigned __int16)v15)
  {
    v26 = atomic_load(byte_1EE414EA8);
    if ((v26 & 1) != 0)
    {
      v27 = atomic_load(byte_1EE417890);
      if ((v27 & 1) != 0)
      {
        sub_19BF86B60((uint64_t)&v66, (unsigned __int16 *)(a2 + 1344));
        v38 = v67;
        sub_19BFED050((uint64_t)&v63, v55, v39, v40, v41, v42, v43, v44);
        v45 = (const char *)v68;
        if (v38)
          v45 = v38;
        v46 = v64;
        if (!v64)
          v46 = v65;
        printf("Attempted to write past bounds of sortkey buffer: UTF-32 char: (%#07x), locale code: (%s), partial sort key (%s)", v54, v45, v46);
        if (v64 && BYTE6(v63) == 1)
          free(v64);
        if (v67 && BYTE6(v66) == 1)
          free(v67);
        putchar(10);
      }
      else
      {
        v28 = sub_19BFD3F34();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
        {
          sub_19BF86B60((uint64_t)&v66, (unsigned __int16 *)(a2 + 1344));
          v29 = v67;
          sub_19BFED050((uint64_t)&v63, v55, v30, v31, v32, v33, v34, v35);
          v36 = (char *)v68;
          if (v29)
            v36 = v29;
          v37 = v64;
          *(_DWORD *)buf = 67109634;
          v58 = v54;
          if (!v64)
            v37 = v65;
          v59 = 2080;
          v60 = v36;
          v61 = 2080;
          v62 = v37;
          _os_log_impl(&dword_19BF85000, v28, OS_LOG_TYPE_FAULT, "Attempted to write past bounds of sortkey buffer: UTF-32 char: (%#07x), locale code: (%s), partial sort key (%s)", buf, 0x1Cu);
          if (v64 && BYTE6(v63) == 1)
            free(v64);
          if (v67 && BYTE6(v66) == 1)
            free(v67);
        }
      }
    }
  }
  v47 = *v55;
  if (v47 <= 0xE)
    v48 = v55 + 1;
  else
    v48 = (unsigned __int16 *)*((_QWORD *)v55 + 1);
  v49 = (void *)sub_19BF8BC44((uint64_t)&v66, v47 + (unsigned __int16)v15, v48, v47);
  if ((_WORD)v15)
    memcpy(v49, v10, (unsigned __int16)v15);
  LOWORD(v63) = 0;
  result = sub_19BF8C3B0(v53, &v66, v56, &v63, v54);
  if ((unsigned __int16)v66 >= 0xFu)
  {
    result = (unsigned __int16 *)v67;
    if (v67)
      return (unsigned __int16 *)MEMORY[0x1A1AD0CB8](v67, 0x1000C8077774924);
  }
  return result;
}

void sub_19BF8C350(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 120);
  if (v3)
  {
    if (*(_BYTE *)(v1 - 122) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_19BF8C3B0(unsigned __int16 *a1, const void **a2, char a3, const void **a4, int a5)
{
  unint64_t v10;
  void *v11;
  _OWORD *v12;
  unint64_t v13;
  void *v14;

  v10 = *(unsigned __int16 *)a2;
  if (v10 < 0xF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *a1 = v10;
    v11 = (void *)operator new[]();
    *((_QWORD *)a1 + 1) = v11;
    memcpy(v11, a2[1], *a1);
  }
  *((_BYTE *)a1 + 16) = a3;
  v12 = a1 + 12;
  v13 = *(unsigned __int16 *)a4;
  if (v13 < 0xF)
  {
    *v12 = *(_OWORD *)a4;
  }
  else
  {
    *(_WORD *)v12 = v13;
    v14 = (void *)operator new[]();
    *((_QWORD *)a1 + 4) = v14;
    memcpy(v14, a4[1], a1[12]);
  }
  *((_DWORD *)a1 + 10) = a5;
  return a1;
}

void sub_19BF8C47C(_Unwind_Exception *exception_object)
{
  unsigned __int16 *v1;
  uint64_t v3;

  if (*v1 >= 0xFu)
  {
    v3 = *((_QWORD *)v1 + 1);
    if (v3)
      MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void sub_19BF8C4B0(uint64_t a1, CFStringRef theString)
{
  const char *CStringPtr;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  CFIndex v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  CFIndex v16;
  UniChar *v17;
  UniChar *v18;
  char v19;
  NSObject *v20;
  uint64_t v21;
  void **v22;
  void *__dst[2];
  char v24;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD v27[10];
  char v28;
  uint64_t v29;
  UniChar *v30;
  UniChar *v31;
  char buffer[1024];
  uint8_t buf[4];
  CFStringRef v34;
  __int16 v35;
  void **v36;
  uint64_t v37;
  CFRange v38;

  v37 = *MEMORY[0x1E0C80C00];
  if (!theString)
  {
    *(_DWORD *)a1 = 0x100000;
    *(_WORD *)(a1 + 4) = 0;
    *(_BYTE *)(a1 + 6) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr)
  {
    v5 = (uint64_t)CStringPtr;
    *(_DWORD *)a1 = 0x100000;
    *(_WORD *)(a1 + 4) = 0;
    *(_BYTE *)(a1 + 6) = 1;
    *(_QWORD *)(a1 + 8) = 0;
    v6 = strlen(CStringPtr);
    sub_19BF8CA04((_QWORD *)a1, v5, 0, v6);
    return;
  }
  if (CFStringGetCString(theString, buffer, 1024, 0x8000100u))
  {
    *(_DWORD *)a1 = 0x100000;
    *(_WORD *)(a1 + 4) = 0;
    *(_BYTE *)(a1 + 6) = 1;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = strlen(buffer);
    sub_19BF8CA04((_QWORD *)a1, (uint64_t)buffer, 0, v7);
    return;
  }
  Length = CFStringGetLength(theString);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  v10 = MaximumSizeForEncoding + 1;
  if (MaximumSizeForEncoding == -1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  else
  {
    if (MaximumSizeForEncoding <= -2)
      sub_19BF8EB40();
    v14 = (char *)operator new(MaximumSizeForEncoding + 1);
    v11 = v14;
    v15 = 0;
    v13 = &v14[v10];
    do
      v14[v15++] = 0;
    while (v10 != v15);
    v12 = v14;
  }
  if (CFStringGetCString(theString, v11, v13 - v12, 0x8000100u))
  {
    sub_19BFF68B0(a1, v11);
    if (!v11)
      return;
    goto LABEL_15;
  }
  v16 = CFStringGetLength(theString);
  sub_19BFC4130(&v30, v16);
  v38.location = 0;
  v38.length = v16;
  CFStringGetCharacters(theString, v38, v30);
  sub_19BFA0144((uint64_t)v25);
  *(_DWORD *)((char *)v27 + *(_QWORD *)(v26 - 24)) = *(_DWORD *)((_BYTE *)v27 + *(_QWORD *)(v26 - 24)) & 0xFFFFFFB5 | 8;
  v17 = v30;
  v18 = v31;
  if (v30 != v31)
  {
    v19 = 1;
    do
    {
      if ((v19 & 1) == 0)
        sub_19BF8E6F8(&v26, (uint64_t)" ", 1);
      sub_19BF8E6F8(&v26, (uint64_t)"0x", 2);
      std::ostream::operator<<();
      v19 = 0;
      ++v17;
    }
    while (v17 != v18);
  }
  if (qword_1EE417748 != -1)
    dispatch_once(&qword_1EE417748, &unk_1E3D15F18);
  v20 = qword_1EE417740;
  if (os_log_type_enabled((os_log_t)qword_1EE417740, OS_LOG_TYPE_FAULT))
  {
    sub_19BFAAA88(__dst, (uint64_t)v27);
    v22 = v24 >= 0 ? __dst : (void **)__dst[0];
    *(_DWORD *)buf = 138412546;
    v34 = theString;
    v35 = 2080;
    v36 = v22;
    _os_log_fault_impl(&dword_19BF85000, v20, OS_LOG_TYPE_FAULT, "Failed to convert '%@' (%s) to UTF-8", buf, 0x16u);
    if (v24 < 0)
      operator delete(__dst[0]);
  }
  v25[0] = *MEMORY[0x1E0DE4F50];
  v21 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v26 = v21;
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v28 < 0)
    operator delete((void *)v27[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD0C7C](&v29);
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (v11)
LABEL_15:
    operator delete(v11);
}

void sub_19BF8C8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  void *v49;

  sub_19BFA0270((uint64_t)&a13);
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v49)
    operator delete(v49);
  _Unwind_Resume(a1);
}

unint64_t LXLexiconGetSortkeyBytes(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  uint64_t v14;
  char *v15;

  if (!a5)
    __assert_rtn("LXLexiconGetSortkeyBytes", "LXLexicon.cpp", 512, "numBytes != NULL && \"numBytes must not be NULL\"");
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(a1 + 16) + 96))(&v14, a1 + 16);
  if (a3)
  {
    v8 = 0xFFFFLL;
    if ((unint64_t)a4 < 0xFFFF)
      v8 = a4;
    if (a4 <= 0)
      v9 = 0;
    else
      v9 = v8;
    v10 = (unsigned __int16)v14;
    if (v9 >= (unsigned __int16)v14)
      v11 = (unsigned __int16)v14;
    else
      v11 = v9;
    if ((unsigned __int16)v14 <= 0xEu)
      v12 = (char *)&v14 + 2;
    else
      v12 = v15;
    memcpy((void *)a3, v12, v11);
    if (v9 > v10)
      *(_BYTE *)(a3 + v11) = 0;
    *a5 = v10;
    a3 = v9 >= v10;
  }
  else
  {
    LODWORD(v10) = (unsigned __int16)v14;
    *a5 = (unsigned __int16)v14;
  }
  if (v10 >= 0xF && v15)
    MEMORY[0x1A1AD0CB8](v15, 0x1000C8077774924);
  return a3;
}

_QWORD *sub_19BF8CA04(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  char *v4;
  _QWORD *v8;
  void *v9;

  result[2] = 0;
  result[3] = 0;
  v4 = (char *)(result + 2);
  if (a2 && a4)
  {
    v8 = result;
    sub_19BF8CA9C((uint64_t)result, a4);
    if (*((unsigned __int16 *)v8 + 1) < a4)
      __assert_rtn("initialize", "TIString.cpp", 215, "len <= m_capacity");
    if (v8[1])
      v9 = (void *)v8[1];
    else
      v9 = v4;
    result = memcpy(v9, (const void *)(a2 + a3), a4);
    *(_WORD *)v8 = a4;
  }
  return result;
}

void sub_19BF8CA9C(uint64_t a1, __int16 a2)
{
  unsigned int v2;
  unsigned __int16 v3;
  unsigned __int16 v5;
  void *v6;
  uint64_t v7;
  char *v8;
  void *v9;

  v2 = *(unsigned __int16 *)(a1 + 2);
  if (v2 <= 0xF)
    __assert_rtn("ensure_capacity", "TIString.cpp", 249, "m_capacity >= InitialCapacity");
  v3 = a2 + 1;
  if (v2 <= (unsigned __int16)(a2 + 1))
  {
    if (!*(_BYTE *)(a1 + 6))
    {
      sub_19BFF6860((unsigned __int16 *)a1);
      v2 = *(unsigned __int16 *)(a1 + 2);
    }
    v5 = v2;
    if (v2 < v3)
    {
      v5 = v2;
      do
        v5 = 2 * v5 + 16;
      while ((v5 & 0xFFFEu) < v3);
      *(_WORD *)(a1 + 2) = v5;
    }
    if (v5 >= 0x11u)
    {
      if (*(_BYTE *)(a1 + 6) == 1 && (v6 = *(void **)(a1 + 8)) != 0)
      {
        v7 = v2;
        v8 = (char *)malloc_type_realloc(v6, v5 + 1, 0x634B52BCuLL);
        *(_QWORD *)(a1 + 8) = v8;
        bzero(&v8[v7], *(unsigned __int16 *)(a1 + 2) - v7 + 1);
      }
      else
      {
        v9 = malloc_type_malloc(v5 + 1, 0x5966F548uLL);
        *(_QWORD *)(a1 + 8) = v9;
        bzero(v9, *(unsigned __int16 *)(a1 + 2) + 1);
        if (*(_WORD *)a1)
        {
          strlcpy(*(char **)(a1 + 8), (const char *)(a1 + 16), *(unsigned __int16 *)(a1 + 2) + 1);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
        }
      }
      if (*(_BYTE *)(a1 + 6) != 1 || !*(_QWORD *)(a1 + 8))
        __assert_rtn("ensure_capacity", "TIString.cpp", 275, "data_in_allocated_internal_buffer()");
    }
  }
}

void sub_19BF8CBF8(uint64_t a1@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_19BF8CC94((uint64_t)&v8, a1 + 8);
  sub_19BF8B7D8(a3, v8, a2);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19BF8CC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFACCEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BF8CC94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  char v11;
  char *v12;

  v2 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v2 == -1)
    goto LABEL_9;
  *(_QWORD *)&v10 = &v12;
  result = (_QWORD *)((uint64_t (*)(__int128 *))off_1E3D15828[v2])(&v10);
  if ((_DWORD)result)
  {
    v6 = *(unsigned int *)(a2 + 14352);
    if ((_DWORD)v6 != -1)
    {
      v12 = &v11;
      result = ((_QWORD *(*)(__int128 *__return_ptr, char **, uint64_t))off_1E3D15890[v6])(&v10, &v12, a2);
      *(_OWORD *)a1 = v10;
      return result;
    }
LABEL_9:
    sub_19BFC4E9C();
  }
  v7 = *(_QWORD *)(a2 + 28728);
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 28720);
  *(_QWORD *)(a1 + 8) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t LXLexiconLockMemory(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 40))(a1 + 16);
}

uint64_t LXLexiconIncrementUsageCount(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 144))(a1 + 16);
}

uint64_t LXLexiconAdd(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 128))(a1 + 16);
}

void *sub_19BF8CD70(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

BOOL sub_19BF8CDFC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  size_t v2;
  uint64_t v3;
  size_t v5;
  unsigned __int16 *v6;
  const char *v7;

  v2 = *a2;
  v3 = *a1;
  if (v2 > v3)
    return 0;
  v5 = v3 - v2;
  v6 = (unsigned __int16 *)*((_QWORD *)a1 + 1);
  if (!v6)
    v6 = a1 + 8;
  if (*((_QWORD *)a2 + 1))
    v7 = (const char *)*((_QWORD *)a2 + 1);
  else
    v7 = (const char *)(a2 + 8);
  return strncmp((const char *)v6 + v5, v7, v2) == 0;
}

_QWORD *sub_19BF8CE58(_QWORD *result, unsigned __int16 *a2, unsigned int a3, int a4)
{
  _QWORD *v4;
  unsigned int v5;
  unsigned __int16 v7;
  const char *v8;

  v4 = result;
  v5 = *a2;
  if (v5 <= a3)
  {
    *(_DWORD *)result = 0x100000;
    *((_WORD *)result + 2) = 0;
    *((_BYTE *)result + 6) = 0;
    result[1] = 0;
    *((_BYTE *)result + 16) = 0;
  }
  else
  {
    if (a4 + a3 <= v5)
      v7 = a4;
    else
      v7 = v5 - a3;
    if (*((_QWORD *)a2 + 1))
      v8 = (const char *)*((_QWORD *)a2 + 1);
    else
      v8 = (const char *)(a2 + 8);
    *(_DWORD *)result = 0x100000;
    *((_WORD *)result + 2) = 0;
    *((_BYTE *)result + 6) = 1;
    result[1] = 0;
    if (v7 + (unint64_t)a3 > strlen(v8))
    {
      if (a3 + v7)
        __assert_rtn("String", "TIString.cpp", 95, "(str && pos + len <= strlen(str)) || pos + len == 0");
    }
    return sub_19BF8CA04(v4, (uint64_t)v8, a3, v7);
  }
  return result;
}

void sub_19BF8CF44()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)qword_1ED024258);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(qword_1ED024258))
    {
      sub_19BFF3250();
      __cxa_guard_release(qword_1ED024258);
    }
  }
}

void sub_19BF8CF94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_1ED024258);
  _Unwind_Resume(a1);
}

const void **sub_19BF8CFAC(CFStringRef *a1, unsigned __int16 *a2)
{
  const UInt8 *v3;
  CFStringRef v4;
  const void *v6;

  v3 = (const UInt8 *)*((_QWORD *)a2 + 1);
  if (!v3)
    v3 = (const UInt8 *)(a2 + 8);
  v4 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, *a2, 0x8000100u, 1u);
  v6 = 0;
  *a1 = v4;
  return sub_19BF8DAB8(&v6);
}

uint64_t sub_19BF8D014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  BOOL v7;
  int v8;
  int v9;
  unsigned int v10;
  _BOOL4 v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  _QWORD *exception;
  __int128 *v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  if (*(_QWORD *)(a2 + 8))
    v6 = *(char **)(a2 + 8);
  else
    v6 = (char *)(a2 + 16);
  sub_19BF8D9CC(&v29, v6, 0);
  if (!v30 || ((unint64_t)(v31 - 1) >= 0x2B ? (v7 = v32 == 0) : (v7 = 1), v7))
  {
    sub_19BF8DA50((uint64_t)&v29);
LABEL_11:
    sub_19C047650((_DWORD *)a1);
    v8 = *(_DWORD *)(a1 + 14352);
    *(_QWORD *)&v29 = a2;
    *((_QWORD *)&v29 + 1) = a3;
    if (v8 == -1)
      sub_19BFC4E9C();
  }
  else
  {
    v9 = *(_DWORD *)(v32 + 40);
    if ((unint64_t)(v31 - 48) > 0xFFFFFFFFFFFFFFD0)
      v10 = 0;
    else
      v10 = bswap32(*(_DWORD *)(v32 + 44));
    v11 = (unint64_t)(v31 - 48) < 0xFFFFFFFFFFFFFFD1 && v10 != 0;
    if ((unint64_t)(v31 - 48) < 0xFFFFFFFFFFFFFFD1 && v10 != 0)
      v12 = v10;
    else
      v12 = 5;
    sub_19BF8DA50((uint64_t)&v29);
    if (!v11 || (v9 & 0x1000) == 0)
    {
      switch(v12)
      {
        case 1:
          v14 = *(unsigned int *)(a1 + 14352);
          if ((_DWORD)v14 != -1)
            ((void (*)(__int128 *, uint64_t))off_1E3D18FC0[v14])(&v29, a1);
          *(_DWORD *)(a1 + 14352) = -1;
          bzero((void *)a1, 0x630uLL);
          *(_QWORD *)(a1 + 40) = &off_1E3D190A0;
          *(_QWORD *)(a1 + 48) = &off_1E3D19178;
          *(_DWORD *)(a1 + 140) = 0;
          *(_OWORD *)(a1 + 56) = 0u;
          *(_OWORD *)(a1 + 72) = 0u;
          *(_QWORD *)(a1 + 168) = 0;
          *(_QWORD *)(a1 + 160) = 0;
          *(_QWORD *)(a1 + 152) = a1 + 160;
          sub_19BF875B8(a1 + 176);
          *(_OWORD *)(a1 + 1568) = 0u;
          *(_OWORD *)(a1 + 1552) = 0u;
          v8 = 2;
          goto LABEL_59;
        case 2:
          v22 = *(unsigned int *)(a1 + 14352);
          if ((_DWORD)v22 != -1)
            ((void (*)(__int128 *, uint64_t))off_1E3D18FC0[v22])(&v29, a1);
          *(_DWORD *)(a1 + 14352) = -1;
          bzero((void *)a1, 0x5F0uLL);
          *(_QWORD *)(a1 + 40) = &off_1E3D195E0;
          *(_QWORD *)(a1 + 48) = &off_1E3D196B8;
          *(_QWORD *)(a1 + 56) = &off_1E3D13868;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 88) = a1 + 96;
          sub_19BF875B8(a1 + 112);
          *(_OWORD *)(a1 + 1504) = 0u;
          *(_OWORD *)(a1 + 1488) = 0u;
          v8 = 1;
          goto LABEL_59;
        case 3:
          v23 = *(unsigned int *)(a1 + 14352);
          if ((_DWORD)v23 != -1)
            ((void (*)(__int128 *, uint64_t))off_1E3D18FC0[v23])(&v29, a1);
          *(_DWORD *)(a1 + 14352) = -1;
          bzero((void *)a1, 0x5F8uLL);
          *(_QWORD *)(a1 + 40) = &off_1E3D1A280;
          *(_QWORD *)(a1 + 48) = &off_1E3D138D8;
          *(_QWORD *)(a1 + 112) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = a1 + 104;
          sub_19BF875B8(a1 + 120);
          *(_OWORD *)(a1 + 1496) = 0u;
          *(_OWORD *)(a1 + 1512) = 0u;
          v8 = 6;
          goto LABEL_59;
        case 5:
          goto LABEL_11;
        case 6:
          v20 = *(unsigned int *)(a1 + 14352);
          if ((_DWORD)v20 != -1)
            ((void (*)(__int128 *, uint64_t))off_1E3D18FC0[v20])(&v29, a1);
          *(_DWORD *)(a1 + 14352) = -1;
          bzero((void *)a1, 0x608uLL);
          *(_QWORD *)(a1 + 40) = &off_1E3D1A000;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 48) = &off_1E3D1A0C0;
          *(_QWORD *)(a1 + 56) = &off_1E3D13868;
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)(a1 + 120) = 0;
          *(_QWORD *)(a1 + 112) = a1 + 120;
          sub_19BF875B8(a1 + 136);
          *(_OWORD *)(a1 + 1512) = 0u;
          *(_OWORD *)(a1 + 1528) = 0u;
          v8 = 5;
          goto LABEL_59;
        case 7:
          v21 = *(unsigned int *)(a1 + 14352);
          if ((_DWORD)v21 != -1)
            ((void (*)(__int128 *, uint64_t))off_1E3D18FC0[v21])(&v29, a1);
          *(_DWORD *)(a1 + 14352) = -1;
          bzero((void *)a1, 0x828uLL);
          *(_QWORD *)(a1 + 40) = &off_1E3D19B20;
          *(_QWORD *)(a1 + 48) = &off_1E3D19BF8;
          bzero((void *)(a1 + 56), 0x252uLL);
          sub_19BFFC450(a1 + 56);
          *(_QWORD *)(a1 + 672) = 0;
          *(_QWORD *)(a1 + 664) = 0;
          *(_QWORD *)(a1 + 656) = a1 + 664;
          sub_19BF875B8(a1 + 680);
          *(_OWORD *)(a1 + 2056) = 0u;
          *(_OWORD *)(a1 + 2072) = 0u;
          v8 = 3;
          goto LABEL_59;
        case 8:
          v24 = *(unsigned int *)(a1 + 14352);
          if ((_DWORD)v24 != -1)
            ((void (*)(__int128 *, uint64_t))off_1E3D18FC0[v24])(&v29, a1);
          *(_DWORD *)(a1 + 14352) = -1;
          bzero((void *)a1, 0x608uLL);
          *(_QWORD *)(a1 + 40) = &off_1E3D11B60;
          *(_QWORD *)(a1 + 48) = &off_1E3D11A10;
          sub_19BF8EFC0((_QWORD *)(a1 + 64));
          *(_QWORD *)(a1 + 120) = 0;
          *(_OWORD *)(a1 + 72) = 0u;
          *(_OWORD *)(a1 + 88) = 0u;
          *(_QWORD *)(a1 + 128) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          *(_QWORD *)(a1 + 112) = a1 + 120;
          sub_19BF875B8(a1 + 136);
          *(_OWORD *)(a1 + 1512) = 0u;
          *(_OWORD *)(a1 + 1528) = 0u;
          v8 = 4;
          goto LABEL_59;
        default:
          exception = __cxa_allocate_exception(0x20uLL);
          sub_19BF8E43C(&v29, "unsupported");
          sub_19BFD48D0(exception, &v29);
          __cxa_throw(exception, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
      }
    }
    switch(v12)
    {
      case 1:
        v15 = *(unsigned int *)(a1 + 14352);
        if ((_DWORD)v15 != -1)
          ((void (*)(__int128 *, uint64_t))off_1E3D18FC0[v15])(&v29, a1);
        *(_DWORD *)(a1 + 14352) = -1;
        bzero((void *)a1, 0x610uLL);
        *(_OWORD *)(a1 + 48) = 0u;
        *(_QWORD *)(a1 + 40) = &off_1E3D1A4D8;
        *(_DWORD *)(a1 + 132) = 0;
        *(_OWORD *)(a1 + 64) = 0u;
        sub_19BF875B8(a1 + 144);
        *(_OWORD *)(a1 + 1536) = 0u;
        *(_OWORD *)(a1 + 1520) = 0u;
        v8 = 7;
        break;
      case 2:
        v19 = *(unsigned int *)(a1 + 14352);
        if ((_DWORD)v19 != -1)
          ((void (*)(__int128 *, uint64_t))off_1E3D18FC0[v19])(&v29, a1);
        *(_DWORD *)(a1 + 14352) = -1;
        bzero((void *)a1, 0x5D0uLL);
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 40) = &off_1E3D1A698;
        *(_QWORD *)(a1 + 48) = &off_1E3D13868;
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        sub_19BF875B8(a1 + 80);
        *(_OWORD *)(a1 + 1472) = 0u;
        *(_OWORD *)(a1 + 1456) = 0u;
        v8 = 8;
        break;
      case 6:
        v17 = *(unsigned int *)(a1 + 14352);
        if ((_DWORD)v17 != -1)
          ((void (*)(__int128 *, uint64_t))off_1E3D18FC0[v17])(&v29, a1);
        *(_DWORD *)(a1 + 14352) = -1;
        bzero((void *)a1, 0x5E8uLL);
        *(_QWORD *)(a1 + 40) = &off_1E3D1AC88;
        *(_QWORD *)(a1 + 48) = &off_1E3D13868;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        *(_QWORD *)(a1 + 96) = 0;
        sub_19BF875B8(a1 + 104);
        *(_OWORD *)(a1 + 1480) = 0u;
        *(_OWORD *)(a1 + 1496) = 0u;
        v8 = 11;
        break;
      case 7:
        v18 = *(unsigned int *)(a1 + 14352);
        if ((_DWORD)v18 != -1)
          ((void (*)(__int128 *, uint64_t))off_1E3D18FC0[v18])(&v29, a1);
        *(_DWORD *)(a1 + 14352) = -1;
        bzero((void *)a1, 0x808uLL);
        *(_QWORD *)(a1 + 40) = &off_1E3D1A858;
        bzero((void *)(a1 + 48), 0x252uLL);
        sub_19C042F9C(a1 + 48);
        sub_19BF875B8(a1 + 648);
        *(_OWORD *)(a1 + 2024) = 0u;
        *(_OWORD *)(a1 + 2040) = 0u;
        v8 = 9;
        break;
      case 8:
        v16 = *(unsigned int *)(a1 + 14352);
        if ((_DWORD)v16 != -1)
          ((void (*)(__int128 *, uint64_t))off_1E3D18FC0[v16])(&v29, a1);
        *(_DWORD *)(a1 + 14352) = -1;
        bzero((void *)a1, 0x5E8uLL);
        *(_QWORD *)(a1 + 40) = &off_1E3D1A9C8;
        sub_19BF8EFC0((_QWORD *)(a1 + 56));
        *(_QWORD *)(a1 + 96) = 0;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 80) = 0u;
        sub_19BF875B8(a1 + 104);
        *(_OWORD *)(a1 + 1480) = 0u;
        *(_OWORD *)(a1 + 1496) = 0u;
        v8 = 10;
        break;
      default:
        v26 = __cxa_allocate_exception(0x20uLL);
        sub_19BF8E43C(&v29, "unsupported");
        sub_19BFD48D0(v26, &v29);
        __cxa_throw(v26, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
    }
LABEL_59:
    *(_DWORD *)(a1 + 14352) = v8;
    *(_QWORD *)&v29 = a2;
    *((_QWORD *)&v29 + 1) = a3;
  }
  v28 = &v29;
  return ((uint64_t (*)(__int128 **, uint64_t))off_1E3D19028[v8])(&v28, a1);
}

void sub_19BF8D7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_19BF8D914(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  *(_DWORD *)(result + 2) = 16;
  *(_BYTE *)(result + 6) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        v3 = (a2 >> 18) | 0xFFFFFFF0;
        *(_BYTE *)(result + 17) = (a2 >> 12) & 0x3F | 0x80;
        v4 = 2;
      }
      else
      {
        v3 = (a2 >> 12) | 0xFFFFFFE0;
        v4 = 1;
      }
      *(_BYTE *)(result + 16) = v3;
      v2 = v4 + 1;
      *(_BYTE *)(result + 16 + v4) = (a2 >> 6) & 0x3F | 0x80;
    }
    else
    {
      *(_BYTE *)(result + 16) = (a2 >> 6) | 0xC0;
      v2 = 1;
    }
    *(_WORD *)result = v2 + 1;
    *(_BYTE *)(result + 16 + v2) = a2 & 0x3F | 0x80;
    *(_BYTE *)(result + 16 + v2 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(result + 16) = a2;
    *(_WORD *)result = 1;
  }
  return result;
}

BOOL sub_19BF8D9C4(uint64_t a1, CFErrorRef *a2)
{
  return sub_19BF8883C(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *sub_19BF8D9CC(_QWORD *a1, char *a2, int a3)
{
  int v5;
  void *__p[2];
  char v8;

  sub_19BF8E43C(__p, a2);
  if (a3)
    v5 = 16;
  else
    v5 = 0;
  sub_19BF86D78((uint64_t)a1, (__int128 *)__p, v5);
  if (v8 < 0)
    operator delete(__p[0]);
  *a1 = &off_1E3D144D8;
  return a1;
}

void sub_19BF8DA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF8DA50(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D143A8;
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(_BYTE *)(a1 + 84) && (*(_BYTE *)(a1 + 80) & 2) != 0)
    {
      msync(*(void **)(a1 + 96), *(_QWORD *)(a1 + 72), 16);
      *(_BYTE *)(a1 + 84) = 0;
    }
    munmap(*(void **)(a1 + 96), *(_QWORD *)(a1 + 72));
  }
  return sub_19BF86D24(a1);
}

const void **sub_19BF8DAB8(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

void sub_19BF8DAEC(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = atomic_load((unsigned __int8 *)qword_1ED0242F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_1ED0242F0))
  {
    v6 = ucol_open();
    sub_19C021348(&qword_1ED024400, v6);
    __cxa_guard_release(qword_1ED0242F0);
  }
  if (dword_1EE4177A8 >= 1)
    __assert_rtn("getRootCollator", "TIKeyboardCollator.cpp", 78, "U_SUCCESS(error)");
  if (!qword_1ED024400)
    __assert_rtn("getRootCollator", "TIKeyboardCollator.cpp", 79, "*rootCollator");
  v3 = qword_1ED024408;
  *a1 = qword_1ED024400;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_19BF8DBDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_1ED0242F0);
  _Unwind_Resume(a1);
}

CFStringRef sub_19BF8DBF4(uint64_t a1)
{
  const UInt8 *v1;
  CFIndex v2;

  v1 = (const UInt8 *)a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v2 = *(unsigned __int8 *)(a1 + 23);
    if (!*(_BYTE *)(a1 + 23))
      return &stru_1E3D1ADF0;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, v2, 0x8000100u, 0);
  }
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v1 = *(const UInt8 **)a1;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, v2, 0x8000100u, 0);
  }
  return &stru_1E3D1ADF0;
}

void sub_19BF8DC40(const __CFURL *a1@<X0>, _QWORD *a2@<X8>)
{
  UInt8 *v4;

  v4 = (UInt8 *)operator new[]();
  CFURLGetFileSystemRepresentation(a1, 1u, v4, 1024);
  sub_19BF8E43C(a2, (char *)v4);
  JUMPOUT(0x1A1AD0CB8);
}

void sub_19BF8DCB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CB8](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL sub_19BF8DCDC(const void *a1, CFURLRef fileURL, CFPropertyListFormat a3, int a4, CFErrorRef *a5)
{
  _BOOL8 v5;
  const __CFURL *PathComponent;
  __CFWriteStream *v10;
  __CFWriteStream *v11;
  CFIndex v12;
  void *v14;
  __int128 __p;
  uint64_t v16;

  v5 = 0;
  if (a1 && fileURL)
  {
    __p = 0uLL;
    v16 = 0;
    if (a4)
    {
      PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, fileURL);
      sub_19BF8DC40(PathComponent, &v14);
    }
    v10 = CFWriteStreamCreateWithFile(0, fileURL);
    v11 = v10;
    if (v10)
    {
      if (CFWriteStreamOpen(v10))
      {
        v12 = CFPropertyListWrite(a1, v11, a3, 0, a5);
        CFWriteStreamClose(v11);
      }
      else
      {
        v12 = 0;
      }
      CFRelease(v11);
      v5 = v12 > 0;
    }
    else
    {
      v5 = 0;
    }
    if (SHIBYTE(v16) < 0)
      operator delete((void *)__p);
  }
  return v5;
}

void sub_19BF8DF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_19BF8DF50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  const char *v5;
  char *v6;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_19BF8CD70((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
  {
    v4 = getenv("TMPDIR");
    if (v4)
      v5 = v4;
    else
      v5 = "/tmp";
    MEMORY[0x1A1AD0A00](a2, v5);
  }
  std::string::append((std::string *)a2, "/nlptemp-XXXXXX");
  if (*(char *)(a2 + 23) >= 0)
    v6 = (char *)a2;
  else
    v6 = *(char **)a2;
  return mktemp(v6);
}

void sub_19BF8DFF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

CFPropertyListRef sub_19BF8E010(const __CFURL *a1, CFErrorRef *a2)
{
  return sub_19BF8E01C(a1, 0, a2);
}

CFPropertyListRef sub_19BF8E01C(CFURLRef fileURL, int a2, CFErrorRef *a3)
{
  __CFReadStream *v6;
  __CFReadStream *v7;
  CFOptionFlags v8;
  CFPropertyListRef v9;
  CFTypeID v10;

  v6 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E0C9AE00], fileURL);
  if (v6)
  {
    v7 = v6;
    if (CFReadStreamOpen(v6)
      && (!a2 ? (v8 = 0) : (v8 = 2),
          v9 = CFPropertyListCreateWithStream(0, v7, 0, v8, 0, 0),
          CFReadStreamClose(v7),
          v9))
    {
      v10 = CFGetTypeID(v9);
      if (v10 != CFDictionaryGetTypeID())
      {
        if (a3)
          *a3 = sub_19BF8E294((uint64_t)CFSTR("Property list at URL is not a dictionary"), fileURL);
        CFRelease(v9);
        goto LABEL_15;
      }
    }
    else
    {
      if (!a3)
      {
LABEL_15:
        v9 = 0;
        goto LABEL_16;
      }
      v9 = 0;
      *a3 = sub_19BF8E294((uint64_t)CFSTR("File at URL is not a valid property list"), fileURL);
    }
LABEL_16:
    CFRelease(v7);
    return v9;
  }
  v9 = 0;
  if (a3)
    *a3 = sub_19BF8E294((uint64_t)CFSTR("File at URL is not readable"), fileURL);
  return v9;
}

void sub_19BF8E154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BF8E408((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFLocaleRef sub_19BF8E188(uint64_t a1, const void *a2)
{
  const __CFString *v3;
  const __CFDictionary *ComponentsFromLocaleIdentifier;
  __CFDictionary *MutableCopy;
  const __CFString *LocaleIdentifierFromComponents;
  CFLocaleRef v7;

  v3 = (const __CFString *)MEMORY[0x1A1AD064C]();
  ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(0, v3);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 3, ComponentsFromLocaleIdentifier);
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0C9B088], a2);
  LocaleIdentifierFromComponents = CFLocaleCreateLocaleIdentifierFromComponents(0, MutableCopy);
  v7 = CFLocaleCreate(0, LocaleIdentifierFromComponents);
  if (LocaleIdentifierFromComponents)
    CFRelease(LocaleIdentifierFromComponents);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (ComponentsFromLocaleIdentifier)
    CFRelease(ComponentsFromLocaleIdentifier);
  return v7;
}

void sub_19BF8E250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  sub_19BF8AD20((const void **)va, 0);
  sub_19BF8E3C4((const void **)va1, 0);
  sub_19BF8E574((const void **)va2, 0);
  _Unwind_Resume(a1);
}

CFErrorRef sub_19BF8E294(uint64_t a1, CFURLRef anURL)
{
  CFStringRef v3;
  const __CFAllocator *v4;
  CFStringRef v5;
  __CFDictionary *Mutable;
  CFErrorRef v7;

  v3 = CFURLCopyPath(anURL);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@: %@"), a1, v3);
  Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0C9AFE0], v5);
  v7 = CFErrorCreate(v4, CFSTR("com.apple.NLPUtils.ErrorDomain"), 0, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  if (v5)
    CFRelease(v5);
  if (v3)
    CFRelease(v3);
  return v7;
}

void sub_19BF8E384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  sub_19BF8AD20((const void **)va, 0);
  sub_19BF8AD20((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void sub_19BF8E3C4(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_19BF8E3F8(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_19BF8E408(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

_QWORD *sub_19BF8E43C(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_19BF8E4EC()
{
  sub_19BF8E500("basic_string");
}

void sub_19BF8E500(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_19BF8E550(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E3D0FF60, MEMORY[0x1E0DE42D0]);
}

void sub_19BF8E53C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19BF8E550(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void sub_19BF8E574(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_19BF8E5A8()
{
  return atomic_load((unsigned int *)&unk_1EE417270);
}

uint64_t sub_19BF8E5B8(uint64_t result)
{
  atomic_store(result, (unsigned int *)&unk_1EE417270);
  return result;
}

void sub_19BF8E5C8()
{
  _QWORD *v0;

  if (!dword_1EE417258)
  {
    v0 = sub_19BF8E60C(MEMORY[0x1E0DE4A50], "Program terminated with an unrecoverable error.");
    sub_19BF8E640(v0);
    exit(-1);
  }
  dword_1EE417258 = 2;
}

_QWORD *sub_19BF8E60C(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_19BF8E6F8(a1, (uint64_t)__s, v4);
}

_QWORD *sub_19BF8E640(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_19BF8E6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_19BF8E6D0()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

_QWORD *sub_19BF8E6F8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1A1AD0B20](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_19BF8E85C(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1A1AD0B2C](v13);
  return a1;
}

void sub_19BF8E800(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1A1AD0B2C](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x19BF8E7E0);
}

void sub_19BF8E848(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19BF8E85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_19BF8E998(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_19BF8E97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BF8E998(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_19BF8EA40(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_19BF8EA80((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_19BF8EA80(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t sub_19BF8EACC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_19BF8EB98((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_19BF8EB40()
{
  sub_19BF8E500("vector");
}

void *sub_19BF8EB54(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_19BF8E6D0();
  return operator new(24 * a2);
}

uint64_t sub_19BF8EB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_19BF8EC34((uint64_t)v12);
  return a6;
}

uint64_t sub_19BF8EC34(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19BF8EC68(a1);
  return a1;
}

void sub_19BF8EC68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_19BF8ECAC(uint64_t a1)
{
  sub_19BF8ECE0(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19BF8ECE0(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *sub_19BF8ED34(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    sub_19BF8EEF8(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_19BF8EE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19BF8EEA8(const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  sub_19BF8EF9C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E3D0FF58, MEMORY[0x1E0DE42B0]);
}

void sub_19BF8EEE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BF8EEF8(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

std::runtime_error *sub_19BF8EF9C(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
  return result;
}

_QWORD *sub_19BF8EFC0(_QWORD *result)
{
  *result = 0;
  return result;
}

_QWORD *sub_19BF8EFCC(uint64_t *a1, uint64_t *a2, _QWORD *a3, unsigned int a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *exception;
  uint64_t v13;

  v8 = operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
  if (!v8)
  {
    v13 = 0;
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x800000014;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:20: MARISA_"
                   "MEMORY_ERROR: temp.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  v9 = (uint64_t)v8;
  sub_19BF90064((uint64_t)v8);
  v13 = v9;
  sub_19BF902CC(v9, a2, a3, a4);
  v10 = *a1;
  *a1 = v9;
  v13 = v10;
  return sub_19BF8F694(&v13);
}

void sub_19BF8F0A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CD0](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BF8F0D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  _QWORD *v11;
  __int128 v12[2];
  uint64_t v13;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000029;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:41: MARISA_"
                   "NULL_ERROR: (ptr == NULL) && (size != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  v6 = operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
  if (!v6)
  {
    v13 = 0;
    v11 = __cxa_allocate_exception(0x20uLL);
    *v11 = &off_1E3D11E20;
    v11[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    v11[2] = 0x80000002CLL;
    v11[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:44: MARISA_MEMORY"
             "_ERROR: temp.get() == NULL";
    __cxa_throw(v11, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  v7 = (uint64_t)v6;
  sub_19BF90064((uint64_t)v6);
  v13 = v7;
  sub_19BF8FAEC((uint64_t)v12);
  sub_19BF8FB94(v12, a2, a3);
  sub_19BF907FC(v13, (uint64_t *)v12);
  v8 = *a1;
  *a1 = v13;
  v13 = v8;
  sub_19BF8FB4C(v12);
  return sub_19BF8F694(&v13);
}

void sub_19BF8F210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_19BF8F694((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF8F250(uint64_t *a1, uint64_t a2)
{
  _QWORD *exception;
  _BYTE v6[32];

  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:100: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  sub_19BF8F6D4((uint64_t)v6);
  sub_19BF8F71C((uint64_t)v6, a2);
  sub_19BF90AC4(*a1, (uint64_t)v6);
  return sub_19BF8F6EC((uint64_t)v6);
}

void sub_19BF8F2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BF8F6EC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF8F304(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *exception;

  v3 = *a1;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000006DLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:109: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  return sub_19BF90BC4(v3, a2, a3);
}

uint64_t sub_19BF8F364(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *exception;

  v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000073;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:115: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  return sub_19BF916E8(v4, a2, a3, a4);
}

void sub_19BF8F3C4(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *exception;

  v3 = *a1;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000079;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:121: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  sub_19BF919F0(v3, a2, a3);
}

uint64_t sub_19BF8F424(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *exception;

  v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000007FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:127: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  return sub_19BF91C78(v4, a2, a3, a4);
}

void sub_19BF8F484(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  _QWORD *exception;

  v5 = *a1;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:134: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  sub_19BF90C2C(v5, a2, a3, a4, a5);
}

void sub_19BF8F4E4(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *exception;

  v5 = *a1;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000008CLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:140: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  sub_19BF92EB8(v5, a2, a3, a4, a5);
}

void sub_19BF8F544(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000093;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:147: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  sub_19BF91228(v4, a2, a3, a4);
}

void sub_19BF8F5A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *exception;

  v3 = *a1;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000099;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:153: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  sub_19BF91368(v3, a2, a3);
}

uint64_t sub_19BF8F604(uint64_t a1)
{
  _QWORD *exception;

  if (!*(_QWORD *)a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000C3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:195: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 264);
}

void sub_19BF8F668(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BF8F68C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

_QWORD *sub_19BF8F694(_QWORD *a1)
{
  uint64_t v2;

  if (*a1)
  {
    v2 = sub_19BF902C8();
    MEMORY[0x1A1AD0CDC](v2, 0x10F0C4010279AD7);
  }
  return a1;
}

uint64_t sub_19BF8F6D4(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = -1;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

uint64_t sub_19BF8F6EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24))
    fclose(*(FILE **)a1);
  return a1;
}

FILE *sub_19BF8F71C(uint64_t a1, uint64_t a2)
{
  FILE *result;
  int v4;

  result = *(FILE **)a1;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = a2;
  v4 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = 0;
  if (v4)
    return (FILE *)fclose(result);
  return result;
}

uint64_t sub_19BF8F748(uint64_t result, size_t __nitems)
{
  size_t v2;
  uint64_t v3;
  size_t v4;
  _QWORD *exception;
  _QWORD __buf[129];

  v2 = __nitems;
  v3 = result;
  __buf[128] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)result && *(_DWORD *)(result + 8) == -1 && !*(_QWORD *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x10000004FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:79: MARISA_STATE_ERROR: !is_open()";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      bzero(__buf, 0x400uLL);
      do
      {
        if (v2 >= 0x400)
          v4 = 1024;
        else
          v4 = v2;
        result = sub_19BF8F868(v3, (char *)__buf, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      __buf[0] = 0;
      __buf[1] = 0;
      return sub_19BF8F868(result, (char *)__buf, __nitems);
    }
  }
  return result;
}

uint64_t sub_19BF8F868(uint64_t result, char *__buf, size_t __nitems)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  FILE *v6;
  size_t v7;
  _QWORD *exception;
  const char *v9;
  _QWORD *v10;

  v3 = __nitems;
  v4 = __buf;
  v5 = result;
  v6 = *(FILE **)result;
  if (!*(_QWORD *)result && *(_DWORD *)(result + 8) == -1 && !*(_QWORD *)(result + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000076;
    v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:118: MA"
         "RISA_STATE_ERROR: !is_open()";
    goto LABEL_20;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(result + 8) != -1)
    {
      while (1)
      {
        v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        result = write(*(_DWORD *)(v5 + 8), v4, v7);
        if (result <= 0)
          break;
        v4 += result;
        v3 -= result;
        if (!v3)
          return result;
      }
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E3D11E20;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
      exception[2] = 0x900000084;
      v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:132: "
           "MARISA_IO_ERROR: size_written <= 0";
LABEL_20:
      exception[3] = v9;
      __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
    }
    if (v6)
    {
      if (fwrite(__buf, 1uLL, __nitems, v6) != __nitems)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_1E3D11E20;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000089;
        v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:137"
             ": MARISA_IO_ERROR: ::fwrite(data, 1, size, file_) != size";
        goto LABEL_20;
      }
      result = fflush(*(FILE **)v5);
      if ((_DWORD)result)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_1E3D11E20;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x90000008ALL;
        v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:138"
             ": MARISA_IO_ERROR: ::fflush(file_) != 0";
        goto LABEL_20;
      }
    }
    else
    {
      result = *(_QWORD *)(result + 16);
      if (result)
      {
        result = std::ostream::write();
        if ((*(_BYTE *)(result + *(_QWORD *)(*(_QWORD *)result - 24) + 32) & 5) != 0)
        {
          v10 = __cxa_allocate_exception(0x20uLL);
          *v10 = &off_1E3D11E20;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
          v10[2] = 0x90000008FLL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:143: MARISA_IO_ERROR: !stream_->write(static_cast<const char*>(data), static_cast<std::streamsize>(size))";
          __cxa_throw(v10, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
        }
      }
    }
  }
  return result;
}

void sub_19BF8FA74()
{
  __break(1u);
}

void sub_19BF8FAD8()
{
  __cxa_end_catch();
  JUMPOUT(0x19BF8FAE0);
}

uint64_t sub_19BF8FAEC(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = -1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  return result;
}

uint64_t sub_19BF8FB04(uint64_t a1)
{
  void *v2;
  int v3;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)-1)
    munmap(v2, *(_QWORD *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 32);
  if (v3 != -1)
    close(v3);
  return a1;
}

uint64_t *sub_19BF8FB50(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v4 = result[1];
  v3 = result[2];
  v5 = a2[2];
  result[1] = a2[1];
  result[2] = v5;
  a2[1] = v4;
  a2[2] = v3;
  v6 = result[3];
  result[3] = a2[3];
  a2[3] = v6;
  LODWORD(v6) = *((_DWORD *)result + 8);
  *((_DWORD *)result + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  return result;
}

uint64_t sub_19BF8FB94(__int128 *a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  int v5;
  _QWORD *exception;
  _OWORD v8[2];
  int v9;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x200000050;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper."
                   "cc:80: MARISA_NULL_ERROR: (ptr == NULL) && (size != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  v3 = *a1;
  v4 = a1[1];
  *(_QWORD *)a1 = a2;
  *((_QWORD *)a1 + 1) = -1;
  *((_QWORD *)a1 + 2) = a3;
  *((_QWORD *)a1 + 3) = 0;
  v8[0] = v3;
  v8[1] = v4;
  v5 = *((_DWORD *)a1 + 8);
  *((_DWORD *)a1 + 8) = -1;
  v9 = v5;
  return sub_19BF8FB04((uint64_t)v8);
}

uint64_t sub_19BF8FC28(uint64_t *a1, unint64_t a2)
{
  _QWORD *exception;
  const char *v4;

  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000059;
    v4 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:89: MAR"
         "ISA_STATE_ERROR: !is_open()";
    goto LABEL_6;
  }
  if (a1[2] < a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x90000005ALL;
    v4 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:90: MAR"
         "ISA_IO_ERROR: size > avail_";
LABEL_6:
    exception[3] = v4;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  return sub_19BF8FCC8(a1, a2);
}

uint64_t sub_19BF8FCC8(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  _QWORD *exception;
  const char *v8;

  v2 = *a1;
  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000073;
    v8 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:115: MA"
         "RISA_STATE_ERROR: !is_open()";
LABEL_6:
    exception[3] = v8;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  v3 = a1[2];
  v4 = v3 >= a2;
  v5 = v3 - a2;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000074;
    v8 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:116: MA"
         "RISA_IO_ERROR: size > avail_";
    goto LABEL_6;
  }
  *a1 = v2 + a2;
  a1[2] = v5;
  return v2;
}

uint64_t sub_19BF8FD78(uint64_t a1)
{
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 137) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 185) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 233) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 345) = 0u;
  *(_OWORD *)(a1 + 393) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 297) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 441) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 553) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 601) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 505) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 649) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_QWORD *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  sub_19BF995AC((_OWORD *)(a1 + 744));
  *(_BYTE *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_QWORD *)(a1 + 1072) = 3;
  *(_QWORD *)(a1 + 1080) = 0x100000000200;
  *(_DWORD *)(a1 + 1088) = 0x20000;
  sub_19BF8FAEC(a1 + 1096);
  return a1;
}

void sub_19BF8FE98(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;

  v9 = v1[126];
  if (v9)
    MEMORY[0x1A1AD0CB8](v9, 0x1000C8077774924);
  sub_19BF8F694(v5);
  sub_19BF8FF28(v4);
  if (*v7)
    MEMORY[0x1A1AD0CB8](*v7, 0x1000C8077774924);
  if (*v6)
    MEMORY[0x1A1AD0CB8](*v6, 0x1000C8077774924);
  sub_19BF8FFD4(v3);
  sub_19BF8FFD4(v2);
  sub_19BF8FFD4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BF8FF28(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[26];
  if (v2)
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  v3 = a1[20];
  if (v3)
    MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  v4 = a1[14];
  if (v4)
    MEMORY[0x1A1AD0CB8](v4, 0x1000C8077774924);
  v5 = a1[6];
  if (v5)
    MEMORY[0x1A1AD0CB8](v5, 0x1000C8077774924);
  if (*a1)
    MEMORY[0x1A1AD0CB8](*a1, 0x1000C8077774924);
  return a1;
}

_QWORD *sub_19BF8FFD4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[20];
  if (v2)
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  v3 = a1[14];
  if (v3)
    MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  v4 = a1[8];
  if (v4)
    MEMORY[0x1A1AD0CB8](v4, 0x1000C8077774924);
  if (*a1)
    MEMORY[0x1A1AD0CB8](*a1, 0x1000C8077774924);
  return a1;
}

_QWORD *sub_19BF90068(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_19BF8FB4C(a1 + 137);
  v2 = a1[126];
  if (v2)
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  sub_19BF8F694(a1 + 125);
  v3 = a1[119];
  if (v3)
    MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  v4 = a1[113];
  if (v4)
    MEMORY[0x1A1AD0CB8](v4, 0x1000C8077774924);
  v5 = a1[107];
  if (v5)
    MEMORY[0x1A1AD0CB8](v5, 0x1000C8077774924);
  v6 = a1[99];
  if (v6)
    MEMORY[0x1A1AD0CB8](v6, 0x1000C8077774924);
  v7 = a1[93];
  if (v7)
    MEMORY[0x1A1AD0CB8](v7, 0x1000C8077774924);
  v8 = a1[84];
  if (v8)
    MEMORY[0x1A1AD0CB8](v8, 0x1000C8077774924);
  v9 = a1[78];
  if (v9)
    MEMORY[0x1A1AD0CB8](v9, 0x1000C8077774924);
  v10 = a1[72];
  if (v10)
    MEMORY[0x1A1AD0CB8](v10, 0x1000C8077774924);
  v11 = a1[66];
  if (v11)
    MEMORY[0x1A1AD0CB8](v11, 0x1000C8077774924);
  v12 = a1[60];
  if (v12)
    MEMORY[0x1A1AD0CB8](v12, 0x1000C8077774924);
  v13 = a1[52];
  if (v13)
    MEMORY[0x1A1AD0CB8](v13, 0x1000C8077774924);
  v14 = a1[46];
  if (v14)
    MEMORY[0x1A1AD0CB8](v14, 0x1000C8077774924);
  v15 = a1[40];
  if (v15)
    MEMORY[0x1A1AD0CB8](v15, 0x1000C8077774924);
  v16 = a1[34];
  if (v16)
    MEMORY[0x1A1AD0CB8](v16, 0x1000C8077774924);
  v17 = a1[26];
  if (v17)
    MEMORY[0x1A1AD0CB8](v17, 0x1000C8077774924);
  v18 = a1[20];
  if (v18)
    MEMORY[0x1A1AD0CB8](v18, 0x1000C8077774924);
  v19 = a1[14];
  if (v19)
    MEMORY[0x1A1AD0CB8](v19, 0x1000C8077774924);
  v20 = a1[8];
  if (v20)
    MEMORY[0x1A1AD0CB8](v20, 0x1000C8077774924);
  if (*a1)
    MEMORY[0x1A1AD0CB8](*a1, 0x1000C8077774924);
  return a1;
}

_QWORD *sub_19BF902CC(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v11[2];
  int v12;

  v8 = 3;
  v9 = 0x100000000200;
  v10 = 0x20000;
  sub_19BF937C0(&v8, a4);
  v11[0] = v8;
  v11[1] = v9;
  v12 = v10;
  sub_19BF8FD78((uint64_t)&v8);
  sub_19BF90384((uint64_t)&v8, a2, a3, (uint64_t)v11);
  sub_19BF906F8(a1, (uint64_t)&v8);
  return sub_19BF90068(&v8);
}

void sub_19BF90370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BF90068((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF90384(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  _OWORD v33[3];
  __int128 v34;
  unint64_t v35[4];
  _OWORD v36[3];
  char v37;

  memset(v36, 0, 41);
  sub_19BF91E5C((uint64_t *)v36, (a2[1] - *a2) >> 4);
  v8 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *((_QWORD *)&v36[0] + 1) + v10;
      v13 = (uint64_t *)(v8 + v9);
      v15 = *v13;
      v14 = v13[1];
      *(_QWORD *)v12 = v15;
      *(_DWORD *)(v12 + 8) = v14;
      *(_DWORD *)(v12 + 12) = 1065353216;
      ++v11;
      v8 = *a2;
      v10 += 24;
      v9 += 16;
    }
    while (v11 < (a2[1] - *a2) >> 4);
  }
  v34 = 0u;
  memset(v35, 0, 25);
  sub_19BF91EE8(a1, (uint64_t *)v36, &v34, a4, 1);
  memset(v33, 0, 41);
  sub_19BF920C8((uint64_t *)v33, v35[1]);
  v16 = *((_QWORD *)&v33[1] + 1);
  if (*((_QWORD *)&v33[1] + 1))
  {
    v17 = 0;
    v18 = *((_QWORD *)&v34 + 1);
    v19 = (_DWORD *)(*((_QWORD *)&v33[0] + 1) + 4);
    do
    {
      *(v19 - 1) = *(_DWORD *)(v18 + 4 * v17);
      *v19 = v17++;
      v19 += 2;
    }
    while (v16 != v17);
  }
  v20 = v34;
  v34 = 0u;
  memset(v35, 0, 25);
  if (v20)
  {
    MEMORY[0x1A1AD0CB8](v20, 0x1000C8077774924);
    v16 = *((_QWORD *)&v33[1] + 1);
  }
  v21 = 126 - 2 * __clz(v16);
  if (v16)
    v22 = v21;
  else
    v22 = 0;
  sub_19BF972DC(*((uint64_t *)&v33[0] + 1), (unsigned int *)(*((_QWORD *)&v33[0] + 1) + 8 * v16), (uint64_t)&v37, v22, 1);
  if (*((_QWORD *)&v33[1] + 1))
  {
    v23 = 0;
    v24 = 0;
    do
    {
      for (i = *((_QWORD *)&v33[0] + 1); ; i = *((_QWORD *)&v33[0] + 1))
      {
        v26 = *(unsigned int *)(i + 8 * v23);
        if (v24 >= v26)
          break;
        sub_19BF92138((uint64_t *)(a1 + 208), 0);
        ++v24;
      }
      if (v24 == v26)
      {
        sub_19BF92138((uint64_t *)(a1 + 208), 1);
        ++v24;
      }
      ++v23;
    }
    while (v23 < *((_QWORD *)&v33[1] + 1));
  }
  else
  {
    v24 = 0;
  }
  for (; v24 < *(_QWORD *)(a1 + 648); ++v24)
    sub_19BF92138((uint64_t *)(a1 + 208), 0);
  v27 = (uint64_t *)(a1 + 208);
  sub_19BF92138(v27, 0);
  sub_19BF92214((uint64_t)v27, 0, 1);
  if (a3)
  {
    sub_19BF92350((uint64_t)a3, (a2[1] - *a2) >> 4);
    if (a2[1] != *a2)
    {
      v28 = 0;
      v29 = 0;
      v30 = *((_QWORD *)&v33[0] + 1);
      do
      {
        v31 = sub_19BF9A628((uint64_t)v27, *(unsigned int *)(v30 + v28));
        v30 = *((_QWORD *)&v33[0] + 1);
        *(_QWORD *)(*a3 + 8 * *(unsigned int *)(*((_QWORD *)&v33[0] + 1) + v28 + 4)) = v31;
        ++v29;
        v28 += 8;
      }
      while (v29 < (a2[1] - *a2) >> 4);
    }
  }
  if (*(_QWORD *)&v33[0])
    MEMORY[0x1A1AD0CB8](*(_QWORD *)&v33[0], 0x1000C8077774924);
  if ((_QWORD)v34)
    MEMORY[0x1A1AD0CB8](v34, 0x1000C8077774924);
  result = *(_QWORD *)&v36[0];
  if (*(_QWORD *)&v36[0])
    return MEMORY[0x1A1AD0CB8](*(_QWORD *)&v36[0], 0x1000C8077774924);
  return result;
}

void sub_19BF90674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15)
    MEMORY[0x1A1AD0CB8](a15, 0x1000C8077774924);
  if (a21)
    MEMORY[0x1A1AD0CB8](a21, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19BF906F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_19BF91DA4((uint64_t *)a1, (uint64_t *)a2);
  sub_19BF91DA4((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
  sub_19BF91DA4((uint64_t *)(a1 + 416), (uint64_t *)(a2 + 416));
  sub_19BF91E08((uint64_t *)(a1 + 624), (uint64_t *)(a2 + 624));
  sub_19BF91E08((uint64_t *)(a1 + 672), (uint64_t *)(a2 + 672));
  v4 = *(_QWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  *(_QWORD *)(a2 + 720) = v4;
  LODWORD(v4) = *(_DWORD *)(a1 + 728);
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  *(_DWORD *)(a2 + 728) = v4;
  v5 = *(_QWORD *)(a1 + 736);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a2 + 736) = v5;
  sub_19BF99B5C((uint64_t *)(a1 + 744), (uint64_t *)(a2 + 744));
  v6 = *(_QWORD *)(a1 + 1000);
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
  *(_QWORD *)(a2 + 1000) = v6;
  sub_19BF91E08((uint64_t *)(a1 + 1008), (uint64_t *)(a2 + 1008));
  v7 = *(_QWORD *)(a1 + 1056);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
  *(_QWORD *)(a2 + 1056) = v7;
  v8 = *(_QWORD *)(a1 + 1064);
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)(a2 + 1064) = v8;
  v9 = *(_QWORD *)(a1 + 1072);
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a2 + 1072) = v9;
  v10 = *(_QWORD *)(a1 + 1080);
  *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
  *(_QWORD *)(a2 + 1080) = v10;
  LODWORD(v9) = *(_DWORD *)(a1 + 1088);
  *(_DWORD *)(a1 + 1088) = *(_DWORD *)(a2 + 1088);
  *(_DWORD *)(a2 + 1088) = v9;
  return sub_19BF8FB50((uint64_t *)(a1 + 1096), (uint64_t *)(a2 + 1096));
}

_QWORD *sub_19BF907FC(uint64_t a1, uint64_t *a2)
{
  _QWORD v5[137];
  uint64_t v6[5];

  sub_19BF90880((uint64_t)v5, a2);
  sub_19BF8FD78((uint64_t)v5);
  sub_19BF90924((uint64_t)v5, a2);
  sub_19BF8FB50(v6, a2);
  sub_19BF906F8(a1, (uint64_t)v5);
  return sub_19BF90068(v5);
}

void sub_19BF9086C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BF90068(&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_19BF90880(uint64_t a1, uint64_t *a2)
{
  _BYTE *result;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *exception;

  result = (_BYTE *)sub_19BF8FCC8(a2, 0x10uLL);
  if (*result != 87)
    goto LABEL_7;
  v3 = 1u;
  do
  {
    if (v3 == 16)
      return result;
    v4 = result[v3];
    v5 = aWeLoveMarisa[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA00000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/heade"
                   "r.h:21: MARISA_FORMAT_ERROR: !test_header(ptr)";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

double sub_19BF90924(uint64_t a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  double result;
  _QWORD *exception;
  uint64_t v10;
  double v11;
  int v12;

  sub_19BF92B60((uint64_t *)a1, a2);
  sub_19BF92B60((uint64_t *)(a1 + 208), a2);
  sub_19BF92B60((uint64_t *)(a1 + 416), a2);
  sub_19BF92C48((__int128 *)(a1 + 624), a2);
  sub_19BF92D04((__int128 *)(a1 + 672), a2);
  sub_19BF99B88(a1 + 744, a2);
  if (*(_QWORD *)(a1 + 472) && !*(_QWORD *)(a1 + 768))
  {
    v4 = operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
    v5 = v4;
    if (v4)
      sub_19BF8FD78((uint64_t)v4);
    v10 = *(_QWORD *)(a1 + 1000);
    *(_QWORD *)(a1 + 1000) = v5;
    sub_19BF8F694(&v10);
    v6 = *(_QWORD *)(a1 + 1000);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E3D11E20;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x800000249;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:585: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
    }
    sub_19BF90924(v6, a2);
  }
  sub_19BF92DFC((__int128 *)(a1 + 1008), a2);
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a1 + 1032) - 1;
  *(_QWORD *)(a1 + 1064) = *(unsigned int *)sub_19BF8FCC8(a2, 4uLL);
  v7 = *(_DWORD *)sub_19BF8FCC8(a2, 4uLL);
  v10 = 3;
  *(_QWORD *)&v11 = 0x100000000200;
  v12 = 0x20000;
  sub_19BF937C0(&v10, v7);
  *(_QWORD *)(a1 + 1072) = v10;
  result = v11;
  *(double *)(a1 + 1080) = v11;
  *(_DWORD *)(a1 + 1088) = v12;
  return result;
}

void sub_19BF90AA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CD0](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF90AC4(uint64_t a1, uint64_t a2)
{
  sub_19BF8F868(a2, "We love Marisa.", 0x10uLL);
  return sub_19BF90B00(a1, a2);
}

uint64_t sub_19BF90B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v6;
  int __buf;

  sub_19BF9461C(a1, a2);
  sub_19BF9461C(a1 + 208, a2);
  sub_19BF9461C(a1 + 416, a2);
  sub_19BF994F0(a1 + 624, a2);
  sub_19BF949AC(a1 + 672, a2);
  sub_19BF99CF0(a1 + 744, a2);
  v4 = *(_QWORD *)(a1 + 1000);
  if (v4)
    sub_19BF90B00(v4, a2);
  sub_19BF94798(a1 + 1008, a2);
  __buf = *(_QWORD *)(a1 + 1064);
  sub_19BF8F868(a2, (char *)&__buf, 4uLL);
  v6 = *(_DWORD *)(a1 + 1084) | *(_DWORD *)(a1 + 1072) | *(_DWORD *)(a1 + 1088);
  return sub_19BF8F868(a2, (char *)&v6, 4uLL);
}

uint64_t sub_19BF90BC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v5;

  v3 = *(unsigned __int8 *)(a2 + 31);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 16);
  if (v3)
    return 0;
  v5 = *(_QWORD *)a2;
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
    return 0;
  *a3 = sub_19BF9A628(a1 + 208, v5);
  return 1;
}

void sub_19BF90C2C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  std::string __p;
  char v12;
  unint64_t v13;
  unint64_t v14;

  v13 = 0;
  v14 = 0;
  v12 = 0;
  memset(&__p, 0, sizeof(__p));
  while (v13 < a3)
  {
    if ((sub_19BF90D18(a1, a2, a3, &v13, &v14, &__p) & 1) == 0)
      goto LABEL_8;
  }
  v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = __p.__r_.__value_.__r.__words[1];
  sub_19BF90FB8(a1, v14, (uint64_t)&__p, &v12, a4, (v10 - a3) & ~((v10 - (int)a3) >> 31), a5);
LABEL_8:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19BF90CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF90D18(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5, std::string *this)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v12 = (*(unsigned __int8 *)(a2 + *a4) ^ (32 * *a5) ^ *a5) & *(_QWORD *)(a1 + 1056);
  v13 = *(_QWORD *)(a1 + 1024);
  if (*a5 != *(_DWORD *)(v13 + 12 * v12))
  {
    v15 = sub_19BF9A74C((_QWORD *)a1, *a5);
    v16 = *(_QWORD *)(a1 + 16);
    if (((*(_QWORD *)(v16 + (((v15 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15 + 1)) & 1) != 0)
    {
      v17 = v15 - *a5;
      *a5 = v17;
      v18 = v15 + 2;
      v19 = 0xFFFFFFFFLL;
      while (1)
      {
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
        {
          if (v19 == 0xFFFFFFFFLL)
          {
            v19 = sub_19BF9A628(a1 + 416, v17);
            v17 = *a5;
          }
          else
          {
            ++v19;
          }
          v21 = *a4;
          v22 = *(_QWORD *)(a1 + 720);
          v23 = (unint64_t)(v22 * v19) >> 6;
          v24 = (v22 * v19) & 0x3F;
          v25 = v24 + v22;
          v26 = *(_QWORD *)(a1 + 688);
          v27 = *(_QWORD *)(v26 + 8 * v23) >> v24;
          if (v25 > 0x40)
            v27 |= (2 * *(_QWORD *)(v26 + 8 * v23 + 8)) << (v24 ^ 0x3Fu);
          v28 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v17) | ((*(_DWORD *)(a1 + 728) & v27) << 8);
          v29 = *(_QWORD *)(a1 + 1000);
          if (v29)
          {
            if ((sub_19BF93584(v29, a2, a3, a4, v28, this) & 1) != 0)
              return 1;
          }
          else if (sub_19BF99E3C((_QWORD *)(a1 + 744), a2, a3, a4, v28, this))
          {
            return 1;
          }
          if (*a4 != v21)
            return 0;
          v17 = *a5;
          v16 = *(_QWORD *)(a1 + 16);
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v17);
          if (v20 == *(unsigned __int8 *)(a2 + *a4))
          {
            std::string::push_back(this, v20);
            ++*a4;
            return 1;
          }
        }
        *a5 = ++v17;
        v30 = *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18;
        ++v18;
        if ((v30 & 1) == 0)
          return 0;
      }
    }
    return 0;
  }
  v14 = *(unsigned int *)(v13 + 12 * v12 + 8);
  if (v14 > 0xFFFFFEFF)
  {
    std::string::push_back(this, v14);
    ++*a4;
    goto LABEL_24;
  }
  v31 = *(_QWORD *)(a1 + 1000);
  if (v31)
  {
    if ((sub_19BF93584(v31, a2, a3, a4, v14, this) & 1) != 0)
      goto LABEL_24;
    return 0;
  }
  if (!sub_19BF99E3C((_QWORD *)(a1 + 744), a2, a3, a4, v14, this))
    return 0;
LABEL_24:
  *a5 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v12 + 4);
  return 1;
}

unint64_t sub_19BF90FB8(unint64_t result, unint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, int a6, uint64_t a7)
{
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  if (!*a4)
  {
    v11 = result;
    if ((a7 & 0x80000000) != 0 || a6 <= (int)a7)
    {
      if (((*(_QWORD *)(*(_QWORD *)(result + 224) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0
        || ((v12 = sub_19BF9A628(result + 208, a2), v13 = *(char *)(a3 + 23), v13 >= 0)
          ? (v14 = a3)
          : (v14 = *(_QWORD *)a3),
            v13 >= 0 ? (v15 = *(unsigned __int8 *)(a3 + 23)) : (v15 = *(_QWORD *)(a3 + 8)),
            result = sub_19BF91324(a5, v12, v14, v15, (uint64_t)a4),
            !*a4))
      {
        v16 = *(char *)(a3 + 23) >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(_QWORD *)(a3 + 8);
        result = sub_19BF9A74C((_QWORD *)v11, a2);
        if (!*a4)
        {
          v17 = result;
          v18 = 0xFFFFFFFFLL;
          do
          {
            if (((*(_QWORD *)(*(_QWORD *)(v11 + 16) + (((v17 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 + 1)) & 1) == 0)
              break;
            if (((*(_QWORD *)(*(_QWORD *)(v11 + 432) + (((v17 - a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 - a2)) & 1) != 0)
            {
              if (v18 == 0xFFFFFFFFLL)
                v18 = sub_19BF9A628(v11 + 416, v17 - a2);
              else
                ++v18;
              v19 = *(_QWORD *)(v11 + 720);
              v20 = (unint64_t)(v19 * v18) >> 6;
              v21 = (v19 * v18) & 0x3F;
              v22 = v21 + v19;
              v23 = *(_QWORD *)(v11 + 688);
              v24 = *(_QWORD *)(v23 + 8 * v20) >> v21;
              if (v22 > 0x40)
                v24 |= (2 * *(_QWORD *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu);
              v25 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 640) - a2 + v17) | ((*(_DWORD *)(v11 + 728) & v24) << 8);
              v26 = *(_QWORD *)(v11 + 1000);
              if (v26)
                sub_19BF931B4(v26, (std::string *)a3, v25);
              else
                sub_19BF99D1C((_QWORD *)(v11 + 744), (std::string *)a3, v25);
            }
            else
            {
              std::string::push_back((std::string *)a3, *(_BYTE *)(*(_QWORD *)(v11 + 640) - a2 + v17));
            }
            v27 = *(unsigned __int8 *)(a3 + 23);
            if ((v27 & 0x80u) != 0)
              v27 = *(_DWORD *)(a3 + 8);
            sub_19BF90FB8(v11, v17 - a2, a3, a4, a5, (v27 - v16 + a6), a7);
            v28 = *(unsigned __int8 *)(a3 + 23);
            v29 = (char)v28;
            v30 = a3 + v28;
            if (v29 >= 0)
            {
              v31 = a3;
            }
            else
            {
              v30 = *(_QWORD *)a3 + *(_QWORD *)(a3 + 8);
              v31 = *(_QWORD *)a3;
            }
            result = (unint64_t)std::string::erase((std::string *)a3, v16, v30 - (v31 + v16));
            ++v17;
          }
          while (!*a4);
        }
      }
    }
  }
  return result;
}

void sub_19BF91228(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *__p;
  int v18;
  unsigned __int8 v19;
  char v20;

  if ((a4 & 0x80000000) != 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 31);
    v10 = *(_QWORD *)(a2 + 16);
    v9 = *(_BYTE *)(a2 + 31);
LABEL_8:
    v20 = 0;
    v12 = *(_QWORD *)(a2 + 8) + v10;
    v13 = a2 + 8 + v8;
    if (v9 >= 0)
      v14 = v13;
    else
      v14 = v12;
    if (v9 >= 0)
      v15 = a2 + 8;
    else
      v15 = *(_QWORD *)(a2 + 8);
    sub_19BF94A20(&__p, v14, v14, v15, v15, v14 - v15);
    if ((v19 & 0x80u) == 0)
      v16 = v19;
    else
      v16 = v18;
    sub_19BF90FB8(a1, *(_QWORD *)a2, (uint64_t)&__p, &v20, a3, v16, a4);
    if ((char)v19 < 0)
      operator delete(__p);
    return;
  }
  v8 = *(unsigned __int8 *)(a2 + 31);
  v9 = v8;
  v10 = *(_QWORD *)(a2 + 16);
  if ((v8 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a2 + 31);
  else
    v11 = *(_QWORD *)(a2 + 16);
  if (v11 <= a4)
    goto LABEL_8;
}

void sub_19BF91308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF91324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v7, v8, a5);
}

void sub_19BF91368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  void **v8;
  std::string *p_p;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::string::size_type size;
  std::string *v23;
  std::string *v24;
  char *v25;
  std::string::value_type v26;
  char v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  int v32;
  std::string::value_type v33;
  uint64_t v34;
  uint64_t v35;
  int v36[2];
  std::string v37;
  unint64_t v38;
  std::string __p;
  unsigned __int8 v40;
  char v41;

  v40 = 0;
  v5 = *(unsigned __int8 *)(a2 + 31);
  v6 = (char)v5;
  v7 = *(_QWORD *)(a2 + 16);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v8 = (void **)(a2 + 8);
    v38 = *(_QWORD *)a2;
    p_p = &__p;
    if (v6 < 0)
    {
      sub_19BF8CD70(&__p, *v8, v7);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v33 = *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_ - 1);
      v34 = --__p.__r_.__value_.__l.__size_;
    }
    else
    {
      v33 = __p.__r_.__value_.__s.__data_[HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1];
      v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v34 & 0x7F;
    }
    p_p->__r_.__value_.__s.__data_[v34] = 0;
    v37.__r_.__value_.__s.__data_[0] = v33;
    v35 = *(_QWORD *)(a3 + 24);
    if (!v35)
      sub_19BF94AC4();
    (*(void (**)(uint64_t, std::string *, unint64_t *, unsigned __int8 *))(*(_QWORD *)v35 + 48))(v35, &v37, &v38, &v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = sub_19BF9A74C((_QWORD *)a1, *(_QWORD *)a2);
    v12 = v11 - *(_QWORD *)a2;
    *(_QWORD *)v36 = a1 + 744;
    v13 = 0xFFFFFFFFLL;
    do
    {
      ++v11;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 16) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        break;
      memset(&v37, 0, sizeof(v37));
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
      {
        if (v13 == 0xFFFFFFFFLL)
          v13 = sub_19BF9A628(a1 + 416, v12);
        else
          ++v13;
        v14 = *(_QWORD *)(a1 + 720);
        v15 = (unint64_t)(v14 * v13) >> 6;
        v16 = (v14 * v13) & 0x3F;
        v17 = v16 + v14;
        v18 = *(_QWORD *)(a1 + 688);
        v19 = *(_QWORD *)(v18 + 8 * v15) >> v16;
        if (v17 > 0x40)
          v19 |= (2 * *(_QWORD *)(v18 + 8 * v15 + 8)) << (v16 ^ 0x3Fu);
        v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v12) | ((*(_DWORD *)(a1 + 728) & v19) << 8);
        v21 = *(_QWORD *)(a1 + 1000);
        if (v21)
          sub_19BF931B4(v21, &v37, v20);
        else
          sub_19BF99D1C(*(_QWORD **)v36, &v37, v20);
        size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v37;
        else
          v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v37.__r_.__value_.__l.__size_;
        if (size)
        {
          v24 = (std::string *)((char *)v23 + size - 1);
          if (v24 > v23)
          {
            v25 = &v23->__r_.__value_.__s.__data_[1];
            do
            {
              v26 = *(v25 - 1);
              *(v25 - 1) = v24->__r_.__value_.__s.__data_[0];
              v24->__r_.__value_.__s.__data_[0] = v26;
              v24 = (std::string *)((char *)v24 - 1);
            }
            while (v25++ < (char *)v24);
          }
        }
      }
      else
      {
        std::string::push_back(&v37, *(_BYTE *)(*(_QWORD *)(a1 + 640) + v12));
      }
      __p = v37;
      memset(&v37, 0, sizeof(v37));
      v38 = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v28 = *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_ - 1);
        v29 = --__p.__r_.__value_.__l.__size_;
      }
      else
      {
        v28 = *((_BYTE *)&v38 + HIBYTE(__p.__r_.__value_.__r.__words[2]) + 7);
        v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v29 & 0x7F;
        v30 = &__p;
      }
      v30->__r_.__value_.__s.__data_[v29] = 0;
      v41 = v28;
      v31 = *(_QWORD *)(a3 + 24);
      if (!v31)
        sub_19BF94AC4();
      (*(void (**)(uint64_t, char *, unint64_t *, unsigned __int8 *))(*(_QWORD *)v31 + 48))(v31, &v41, &v38, &v40);
      v32 = v40;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      ++v12;
    }
    while (!v32);
  }
}

void sub_19BF9169C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF916E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v9;
  unint64_t v10;

  v9 = 0;
  v10 = 0;
  while (v9 < a3)
  {
    if ((sub_19BF91784(a1, a2, a3, &v9, &v10) & 1) == 0)
      return 0;
  }
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    *a4 = sub_19BF9A628(a1 + 208, v10);
    return 1;
  }
  return 0;
}

uint64_t sub_19BF91784(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v10 = (*(unsigned __int8 *)(a2 + *a4) ^ (32 * *a5) ^ *a5) & *(_QWORD *)(a1 + 1056);
  v11 = *(_QWORD *)(a1 + 1024);
  if (*a5 != *(_DWORD *)(v11 + 12 * v10))
  {
    v13 = sub_19BF9A74C((_QWORD *)a1, *a5);
    v14 = *(_QWORD *)(a1 + 16);
    if (((*(_QWORD *)(v14 + (((v13 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13 + 1)) & 1) != 0)
    {
      v15 = v13 - *a5;
      *a5 = v15;
      v16 = v13 + 2;
      v17 = 0xFFFFFFFFLL;
      while (1)
      {
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
        {
          if (v17 == 0xFFFFFFFFLL)
          {
            v17 = sub_19BF9A628(a1 + 416, v15);
            v15 = *a5;
          }
          else
          {
            ++v17;
          }
          v18 = *a4;
          v19 = *(_QWORD *)(a1 + 720);
          v20 = (unint64_t)(v19 * v17) >> 6;
          v21 = (v19 * v17) & 0x3F;
          v22 = v21 + v19;
          v23 = *(_QWORD *)(a1 + 688);
          v24 = *(_QWORD *)(v23 + 8 * v20) >> v21;
          if (v22 > 0x40)
            v24 |= (2 * *(_QWORD *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu);
          v25 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v15) | ((*(_DWORD *)(a1 + 728) & v24) << 8);
          v26 = *(_QWORD *)(a1 + 1000);
          if (v26)
          {
            if ((sub_19BF9333C(v26, a2, a3, a4, v25) & 1) != 0)
              return 1;
          }
          else if ((sub_19BF99DA8((_QWORD *)(a1 + 744), a2, a3, a4, v25) & 1) != 0)
          {
            return 1;
          }
          if (*a4 != v18)
            return 0;
          v15 = *a5;
          v14 = *(_QWORD *)(a1 + 16);
        }
        else if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v15) == *(unsigned __int8 *)(a2 + *a4))
        {
          ++*a4;
          return 1;
        }
        *a5 = ++v15;
        v27 = *(_QWORD *)(v14 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16;
        ++v16;
        if ((v27 & 1) == 0)
          return 0;
      }
    }
    return 0;
  }
  v12 = *(unsigned int *)(v11 + 12 * v10 + 8);
  if (v12 > 0xFFFFFEFF)
  {
    ++*a4;
    goto LABEL_24;
  }
  v28 = *(_QWORD *)(a1 + 1000);
  if (v28)
  {
    if ((sub_19BF9333C(v28, a2, a3, a4, v12) & 1) != 0)
      goto LABEL_24;
    return 0;
  }
  if ((sub_19BF99DA8((_QWORD *)(a1 + 744), a2, a3, a4, v12) & 1) == 0)
    return 0;
LABEL_24:
  *a5 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v10 + 4);
  return 1;
}

void sub_19BF919F0(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  BOOL v30;
  unint64_t v31;
  char v32;
  _QWORD *exception;

  if (*(_QWORD *)(a1 + 264) <= a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x3000000C6;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:198: MARISA_BOUND_ERROR: payload_id >= size()";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  v5 = sub_19BF9A9B8((_QWORD *)(a1 + 208), a2);
  if (v5)
  {
    v6 = v5;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    while (1)
    {
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      {
        if (*(char *)(a3 + 23) >= 0)
          v7 = *(unsigned __int8 *)(a3 + 23);
        else
          v7 = *(_QWORD *)(a3 + 8);
        v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v6);
        v9 = sub_19BF9A628(a1 + 416, v6);
        v10 = *(_QWORD *)(a1 + 720);
        v11 = (unint64_t)(v10 * v9) >> 6;
        v12 = (v10 * v9) & 0x3F;
        v13 = v12 + v10;
        v14 = *(_QWORD *)(a1 + 688);
        v15 = *(_QWORD *)(v14 + 8 * v11);
        if (v13 > 0x40)
          v16 = ((2 * *(_QWORD *)(v14 + 8 * v11 + 8)) << (v12 ^ 0x3Fu)) | (v15 >> v12);
        else
          v16 = v15 >> v12;
        v17 = v8 | ((*(_DWORD *)(a1 + 728) & v16) << 8);
        v18 = *(_QWORD *)(a1 + 1000);
        if (v18)
          sub_19BF931B4(v18, (std::string *)a3, v17);
        else
          sub_19BF99D1C((_QWORD *)(a1 + 744), (std::string *)a3, v17);
        v19 = *(unsigned __int8 *)(a3 + 23);
        if ((v19 & 0x80u) == 0)
          v20 = a3;
        else
          v20 = *(_QWORD *)a3;
        if ((v19 & 0x80u) != 0)
          v19 = *(_QWORD *)(a3 + 8);
        if (v7 != v19)
        {
          v21 = (_BYTE *)(v20 + v19 - 1);
          if ((unint64_t)v21 > v20 + v7)
          {
            v22 = v20 + v7 + 1;
            do
            {
              v23 = *(_BYTE *)(v22 - 1);
              *(_BYTE *)(v22 - 1) = *v21;
              *v21-- = v23;
              v24 = v22++ >= (unint64_t)v21;
            }
            while (!v24);
          }
        }
      }
      else
      {
        std::string::push_back((std::string *)a3, *(_BYTE *)(*(_QWORD *)(a1 + 640) + v6));
      }
      if (v6 <= *(_QWORD *)(a1 + 1064))
        break;
      v6 = sub_19BF9A9B8((_QWORD *)a1, v6) + ~v6;
    }
    v25 = *(char *)(a3 + 23);
    v26 = v25 < 0;
    if (v25 >= 0)
      v27 = a3;
    else
      v27 = *(_QWORD *)a3;
    if (v26)
      v28 = *(_QWORD *)(a3 + 8);
    else
      v28 = *(unsigned __int8 *)(a3 + 23);
    v29 = (_BYTE *)(v27 + v28 - 1);
    if (v28)
      v30 = (unint64_t)v29 > v27;
    else
      v30 = 0;
    if (v30)
    {
      v31 = v27 + 1;
      do
      {
        v32 = *(_BYTE *)(v31 - 1);
        *(_BYTE *)(v31 - 1) = *v29;
        *v29-- = v32;
        v24 = v31++ >= (unint64_t)v29;
      }
      while (!v24);
    }
  }
  else
  {
    sub_19BF8E43C((_QWORD *)a3, "");
  }
}

void sub_19BF91C58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF91C78(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  v7 = result;
  v15 = 0;
  v13 = 0;
  v14 = 0;
  v8 = result + 208;
  if ((**(_BYTE **)(result + 224) & 1) != 0)
  {
    v9 = sub_19BF9A628(result + 208, 0);
    result = sub_19BF91324(a4, v9, a2, 0, (uint64_t)&v15);
    if (v15)
      v10 = 1;
    else
      v10 = a3 == 0;
    if (v10)
      return result;
  }
  else if (!a3)
  {
    return result;
  }
  result = sub_19BF91784(v7, a2, a3, &v13, &v14);
  if ((_DWORD)result)
  {
    do
    {
      if (((*(_QWORD *)(*(_QWORD *)(v7 + 224) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
      {
        v11 = sub_19BF9A628(v8, v14);
        result = sub_19BF91324(a4, v11, a2, v13, (uint64_t)&v15);
        if (v15)
          v12 = 1;
        else
          v12 = v13 >= a3;
        if (v12)
          return result;
      }
      else if (v13 >= a3)
      {
        return result;
      }
      result = sub_19BF91784(v7, a2, a3, &v13, &v14);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t *sub_19BF91DA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_19BF91E08(a1, a2);
  v4 = a1[6];
  a1[6] = a2[6];
  a2[6] = v4;
  v5 = a1[7];
  a1[7] = a2[7];
  a2[7] = v5;
  sub_19BF91E08(a1 + 8, a2 + 8);
  sub_19BF91E08(a1 + 14, a2 + 14);
  return sub_19BF91E08(a1 + 20, a2 + 20);
}

uint64_t *sub_19BF91E08(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  v4 = result[2];
  v5 = result[3];
  v6 = a2[3];
  result[2] = a2[2];
  result[3] = v6;
  a2[2] = v4;
  a2[3] = v5;
  v7 = result[4];
  result[4] = a2[4];
  a2[4] = v7;
  LOBYTE(v7) = *((_BYTE *)result + 40);
  *((_BYTE *)result + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  return result;
}

uint64_t *sub_19BF91E5C(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0x555555555555555)
      v5 = 0xAAAAAAAAAAAAAAALL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)sub_19BF94B20(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = 24 * v6;
    do
    {
      v9 = v3[1] + v8;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v8 += 24;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t sub_19BF91EE8(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17[3];
  uint64_t v18;
  uint64_t v19;
  int v20;

  sub_19BF94BC4((uint64_t *)a1, (uint64_t)a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (a2[3])
    sub_19BF92380(a1, a2, v17, a4, a5);
  v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    v10 = (v9[268] + 1) | v9[271] | v9[272];
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    sub_19BF937C0(&v18, v10);
  }
  else
  {
    if (*(_QWORD *)(a1 + 840))
      v11 = 0x2000;
    else
      v11 = 4096;
    v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    sub_19BF937C0(&v18, v12);
  }
  *(_QWORD *)(a1 + 1072) = v18;
  *(_QWORD *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  sub_19BF92214(a1 + 416, 0, 0);
  if (*((_QWORD *)&v17[1] + 1))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((_QWORD *)&v17[1] + 1));
  }
  sub_19BF95310((__int128 *)(a1 + 672), (uint64_t)v17);
  sub_19BF92A58(a1);
  result = *(_QWORD *)&v17[0];
  if (*(_QWORD *)&v17[0])
    return MEMORY[0x1A1AD0CB8](*(_QWORD *)&v17[0], 0x1000C8077774924);
  return result;
}

void sub_19BF9209C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void sub_19BF920C8(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = a1[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 60)
      v5 = 0x1FFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    sub_19BF93A80(a1, a2);
  }
  v6 = a1[3];
  if (v2 > v6)
    bzero((void *)(a1[1] + 8 * v6), 8 * (v2 - v6));
  a1[3] = v2;
}

uint64_t *sub_19BF92138(uint64_t *result, int a2)
{
  unint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *exception;
  uint64_t v7;

  v2 = result[6];
  if (v2 == 0xFFFFFFFF)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit-vector.h";
    exception[2] = 0x70000003ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit"
                   "-vector.h:58: MARISA_SIZE_ERROR: size_ == MARISA_UINT32_MAX";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  v4 = result;
  v5 = result[3];
  if (v2 == v5 << 6)
  {
    v7 = 0;
    result = sub_19BF939FC(result, v5 + 1, &v7);
    v2 = v4[6];
  }
  if (a2)
  {
    *(_QWORD *)(v4[1] + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v2;
    ++v4[7];
  }
  v4[6] = v2 + 1;
  return result;
}

uint64_t sub_19BF92214(uint64_t a1, int a2, int a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  _OWORD v8[4];
  __int128 v9;
  _BYTE v10[25];
  __int128 v11;
  _BYTE v12[25];
  __int128 v13;
  _BYTE v14[25];

  memset(v8, 0, 41);
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v8[3] = 0u;
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  sub_19BF9AB2C(v8, (_QWORD *)a1, a2, a3);
  sub_19BF93B04((_QWORD *)a1);
  v4 = v8[0];
  v8[0] = *(_OWORD *)a1;
  *(_OWORD *)a1 = v4;
  v5 = *(_QWORD *)&v8[1];
  *(_QWORD *)&v8[1] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_OWORD *)((char *)&v8[1] + 8);
  *(_OWORD *)((char *)&v8[1] + 8) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  LOBYTE(v5) = BYTE8(v8[2]);
  BYTE8(v8[2]) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v5;
  sub_19BF91DA4((uint64_t *)a1, (uint64_t *)v8);
  if ((_QWORD)v13)
    MEMORY[0x1A1AD0CB8](v13, 0x1000C8077774924);
  if ((_QWORD)v11)
    MEMORY[0x1A1AD0CB8](v11, 0x1000C8077774924);
  if ((_QWORD)v9)
    MEMORY[0x1A1AD0CB8](v9, 0x1000C8077774924);
  result = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return MEMORY[0x1A1AD0CB8](*(_QWORD *)&v8[0], 0x1000C8077774924);
  return result;
}

void sub_19BF9233C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BF8FFD4(&a9);
  _Unwind_Resume(a1);
}

void sub_19BF92350(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_19BF983C4((char **)a1, a2 - v2);
  }
}

uint64_t sub_19BF92380(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *exception;
  __int128 v26;
  _BYTE v27[25];
  uint64_t v28;

  if (*(_QWORD *)a4 == a5)
  {
    v26 = 0u;
    memset(v27, 0, sizeof(v27));
    sub_19BF925C4((uint64_t *)&v26, a2[3]);
    v9 = a2[3];
    if (v9)
    {
      v10 = (unsigned int *)(*((_QWORD *)&v26 + 1) + 8);
      v11 = (_DWORD *)(a2[1] + 8);
      do
      {
        v12 = *((_QWORD *)v11 - 1);
        v13 = *v11;
        v11 += 6;
        *((_QWORD *)v10 - 1) = v12 + v13 - 1;
        *v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    sub_19BF995E0((__int128 *)(a1 + 744), (uint64_t)&v26, a3, *(_DWORD *)(a4 + 12));
  }
  else
  {
    v26 = 0u;
    memset(v27, 0, sizeof(v27));
    sub_19BF91E5C((uint64_t *)&v26, a2[3]);
    if (a2[3])
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = *((_QWORD *)&v26 + 1) + v15;
        v18 = a2[1] + v15;
        v19 = *(unsigned int *)(v18 + 8);
        *(_QWORD *)v17 = *(_QWORD *)v18 + v19;
        *(_DWORD *)(v17 + 8) = v19;
        *(_DWORD *)(v17 + 12) = *(_DWORD *)(v18 + 12);
        ++v16;
        v15 += 24;
      }
      while (v16 < a2[3]);
    }
    v20 = *a2;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)((char *)a2 + 25) = 0u;
    if (v20)
      MEMORY[0x1A1AD0CB8](v20, 0x1000C8077774924);
    v21 = operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
    v22 = v21;
    if (v21)
      sub_19BF8FD78((uint64_t)v21);
    v28 = *(_QWORD *)(a1 + 1000);
    *(_QWORD *)(a1 + 1000) = v22;
    sub_19BF8F694(&v28);
    v23 = *(_QWORD *)(a1 + 1000);
    if (!v23)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E3D11E20;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001EBLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:491: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
    }
    sub_19BF92640(v23, (uint64_t)&v26, a3, a4, a5 + 1);
  }
  result = v26;
  if ((_QWORD)v26)
    return MEMORY[0x1A1AD0CB8](v26, 0x1000C8077774924);
  return result;
}

void sub_19BF92580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x1A1AD0CD0](v9, MEMORY[0x1E0DE4E10]);
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t *sub_19BF925C4(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 59)
      v5 = 0xFFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)sub_19BF984CC(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = 16 * v6;
    do
    {
      v9 = (_QWORD *)(v3[1] + v8);
      *v9 = 0;
      v9[1] = 0;
      v8 += 16;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t sub_19BF92640(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17[3];
  uint64_t v18;
  uint64_t v19;
  int v20;

  sub_19BF9855C((uint64_t *)a1, a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (*(_QWORD *)(a2 + 24))
    sub_19BF92820(a1, a2, v17, a4, a5);
  v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    v10 = (v9[268] + 1) | v9[271] | v9[272];
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    sub_19BF937C0(&v18, v10);
  }
  else
  {
    if (*(_QWORD *)(a1 + 840))
      v11 = 0x2000;
    else
      v11 = 4096;
    v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    sub_19BF937C0(&v18, v12);
  }
  *(_QWORD *)(a1 + 1072) = v18;
  *(_QWORD *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  sub_19BF92214(a1 + 416, 0, 0);
  if (*((_QWORD *)&v17[1] + 1))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((_QWORD *)&v17[1] + 1));
  }
  sub_19BF95310((__int128 *)(a1 + 672), (uint64_t)v17);
  sub_19BF92A58(a1);
  result = *(_QWORD *)&v17[0];
  if (*(_QWORD *)&v17[0])
    return MEMORY[0x1A1AD0CB8](*(_QWORD *)&v17[0], 0x1000C8077774924);
  return result;
}

void sub_19BF927F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF92820(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD *exception;
  _OWORD v20[3];

  if (*(_QWORD *)a4 == a5)
  {
    memset(v20, 0, 41);
    sub_19BF925C4((uint64_t *)v20, *(_QWORD *)(a2 + 24));
    v9 = *(_QWORD *)(a2 + 24);
    if (v9)
    {
      v10 = (_DWORD *)(*((_QWORD *)&v20[0] + 1) + 8);
      v11 = (_DWORD *)(*(_QWORD *)(a2 + 8) + 8);
      do
      {
        v12 = *((_QWORD *)v11 - 1);
        v13 = *v11;
        v11 += 6;
        *((_QWORD *)v10 - 1) = v12 - 1;
        *v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    sub_19BF995E0((__int128 *)(a1 + 744), (uint64_t)v20, a3, *(_DWORD *)(a4 + 12));
    result = *(_QWORD *)&v20[0];
    if (*(_QWORD *)&v20[0])
      return MEMORY[0x1A1AD0CB8](*(_QWORD *)&v20[0], 0x1000C8077774924);
  }
  else
  {
    v16 = operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
    v17 = v16;
    if (v16)
      sub_19BF8FD78((uint64_t)v16);
    *(_QWORD *)&v20[0] = *(_QWORD *)(a1 + 1000);
    *(_QWORD *)(a1 + 1000) = v17;
    sub_19BF8F694(v20);
    v18 = *(_QWORD *)(a1 + 1000);
    if (!v18)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E3D11E20;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001FDLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:509: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
      __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
    }
    return sub_19BF92640(v18, a2, a3, a4, a5 + 1);
  }
  return result;
}

void sub_19BF92988(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CD0](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t *sub_19BF929C8(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      v5 = 0x1555555555555555;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)sub_19BF993FC(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = 12 * v6;
    do
    {
      v9 = v3[1] + v8;
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0x800000;
      v8 += 12;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t sub_19BF92A58(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;

  v1 = *(_QWORD *)(result + 1032);
  if (v1)
  {
    v2 = result;
    v3 = 0;
    v4 = 0;
    v5 = result + 416;
    do
    {
      v6 = *(_QWORD *)(v2 + 1016);
      v7 = *(unsigned int *)(v6 + v3 + 4);
      if ((_DWORD)v7)
      {
        *(_BYTE *)(v6 + v3 + 8) = *(_BYTE *)(*(_QWORD *)(v2 + 632) + v7);
        v8 = *(_QWORD *)(v2 + 1016);
        if (((*(_QWORD *)(*(_QWORD *)(v2 + 432) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) != 0)
        {
          result = sub_19BF9A628(v5, v7);
          v9 = *(_QWORD *)(v2 + 720);
          v10 = (unint64_t)(v9 * result) >> 6;
          v11 = (v9 * result) & 0x3F;
          v12 = v11 + v9;
          v13 = *(_QWORD *)(v2 + 688);
          v14 = *(_QWORD *)(v13 + 8 * v10);
          if (v12 > 0x40)
            v15 = ((2 * *(_QWORD *)(v13 + 8 * v10 + 8)) << (v11 ^ 0x3Fu)) | (v14 >> v11);
          else
            v15 = v14 >> v11;
          v16 = *(_DWORD *)(v2 + 728) & v15;
        }
        else
        {
          v16 = 0xFFFFFF;
        }
        *(_DWORD *)(v8 + v3 + 8) = *(unsigned __int8 *)(v8 + v3 + 8) | (v16 << 8);
        v1 = *(_QWORD *)(v2 + 1032);
      }
      else
      {
        *(_QWORD *)(v6 + v3) = -1;
      }
      ++v4;
      v3 += 12;
    }
    while (v4 < v1);
  }
  return result;
}

uint64_t sub_19BF92B60(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  _OWORD v4[4];
  __int128 v5;
  _BYTE v6[25];
  __int128 v7;
  _BYTE v8[25];
  __int128 v9;
  _BYTE v10[25];

  memset(v4, 0, 41);
  v7 = 0u;
  memset(v8, 0, sizeof(v8));
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v4[3] = 0u;
  v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_19BF93B78((uint64_t)v4, a2);
  sub_19BF91DA4(a1, (uint64_t *)v4);
  if ((_QWORD)v9)
    MEMORY[0x1A1AD0CB8](v9, 0x1000C8077774924);
  if ((_QWORD)v7)
    MEMORY[0x1A1AD0CB8](v7, 0x1000C8077774924);
  if ((_QWORD)v5)
    MEMORY[0x1A1AD0CB8](v5, 0x1000C8077774924);
  result = *(_QWORD *)&v4[0];
  if (*(_QWORD *)&v4[0])
    return MEMORY[0x1A1AD0CB8](*(_QWORD *)&v4[0], 0x1000C8077774924);
  return result;
}

void sub_19BF92C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BF8FFD4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF92C48(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_19BF99490((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  return result;
}

void sub_19BF92CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF92D04(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  uint64_t v12;

  memset(v9, 0, 41);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_19BF9432C((uint64_t)v9, a2);
  v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v9[1];
  *(_QWORD *)&v9[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  v6 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = v10;
  v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  v11 = v6;
  v7 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v12;
  result = v3;
  v12 = v7;
  if ((_QWORD)v3)
    return MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  return result;
}

void sub_19BF92DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF92DFC(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_19BF9403C((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  return result;
}

void sub_19BF92E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void sub_19BF92EB8(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  std::string *p_p;
  std::string *v12;
  char v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  BOOL v17;
  char *v18;
  std::string::value_type v19;
  std::string *v21;
  std::string v22;
  std::string __str;
  unint64_t v24;
  unint64_t v25;
  std::string __p;
  char v27;

  if (*(_QWORD *)a4 == 0xFFFFFFFFLL)
  {
    MEMORY[0xFFFFFFFF] = 0xFFFFFFFFLL;
    if (*(char *)(a4 + 31) < 0)
    {
      sub_19BF8CD70((_BYTE *)0x100000007, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
    }
    else
    {
      MEMORY[0x100000007] = *(_OWORD *)(a4 + 8);
      MEMORY[0x100000017] = *(_QWORD *)(a4 + 24);
    }
    return;
  }
  v25 = *(_QWORD *)a4;
  if (*(char *)(a4 + 31) < 0)
    sub_19BF8CD70(&__p, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
  else
    __p = *(std::string *)(a4 + 8);
  v24 = 0;
  if (!a3)
  {
LABEL_18:
    *a5 = v25;
    v12 = (std::string *)(a5 + 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_19BF8CD70(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      *v12 = __p;
    goto LABEL_44;
  }
  v9 = 0;
  while ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_21;
    v24 = v9 + 1;
    if (*(unsigned __int8 *)(a2 + v9) != *((unsigned __int8 *)&v25 + HIBYTE(__p.__r_.__value_.__r.__words[2]) + 7))
    {
LABEL_25:
      *a5 = 0xFFFFFFFFLL;
      a5[1] = 0;
      a5[2] = 0;
      a5[3] = 0;
      goto LABEL_44;
    }
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
    --*((_BYTE *)&__p.__r_.__value_.__s + 23);
    ++v9;
    p_p = &__p;
LABEL_17:
    p_p->__r_.__value_.__s.__data_[v10] = 0;
    if (v9 >= a3)
      goto LABEL_18;
  }
  if (__p.__r_.__value_.__l.__size_)
  {
    v24 = v9 + 1;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (*(unsigned __int8 *)(a2 + v9) != *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0]
                                                             + __p.__r_.__value_.__l.__size_
                                                             - 1))
      goto LABEL_25;
    v10 = --__p.__r_.__value_.__l.__size_;
    ++v9;
    goto LABEL_17;
  }
LABEL_21:
  memset(&__str, 0, sizeof(__str));
  while (v24 < a3)
  {
    if ((sub_19BF90D18(a1, a2, a3, &v24, &v25, &__str) & 1) == 0)
    {
      *a5 = 0xFFFFFFFFLL;
      a5[1] = 0;
      a5[2] = 0;
      a5[3] = 0;
      goto LABEL_42;
    }
  }
  std::string::basic_string(&v22, &__str, v24 - v9, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v22;
  v13 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  size = v22.__r_.__value_.__l.__size_;
  v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v14 = &__p;
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  v16 = (std::string *)((char *)v14 + size - 1);
  if (size)
    v17 = v16 > v14;
  else
    v17 = 0;
  if (v17)
  {
    v18 = &v14->__r_.__value_.__s.__data_[1];
    do
    {
      v19 = *(v18 - 1);
      *(v18 - 1) = v16->__r_.__value_.__s.__data_[0];
      v16->__r_.__value_.__s.__data_[0] = v19;
      v16 = (std::string *)((char *)v16 - 1);
    }
    while (v18++ < (char *)v16);
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  *a5 = v25;
  v21 = (std::string *)(a5 + 1);
  if (v13 < 0)
    sub_19BF8CD70(v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    *v21 = __p;
LABEL_42:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_44:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19BF93178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_19BF931B4(uint64_t a1, std::string *a2, unint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v6 = a1 + 416;
  v7 = (_QWORD *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 1056) & a3;
      v9 = *(_QWORD *)(a1 + 1024);
      if (a3 != *(_DWORD *)(v9 + 12 * v8 + 4))
        break;
      v10 = *(unsigned int *)(v9 + 12 * v8 + 8);
      if (v10 <= 0xFFFFFEFF)
      {
        v20 = *(_QWORD *)(a1 + 1000);
        if (v20)
          sub_19BF931B4(v20, a2, v10);
        else
          sub_19BF99D1C(v7, a2, v10);
      }
      else
      {
        std::string::push_back(a2, v10);
      }
      a3 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v8);
      if (!(_DWORD)a3)
        return;
    }
    v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a3);
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v12 = sub_19BF9A628(v6, a3);
      v13 = *(_QWORD *)(a1 + 720);
      v14 = (unint64_t)(v13 * v12) >> 6;
      v15 = (v13 * v12) & 0x3F;
      v16 = v15 + v13;
      v17 = *(_QWORD *)(a1 + 688);
      v18 = *(_QWORD *)(v17 + 8 * v14);
      v19 = v16 > 0x40
          ? ((2 * *(_QWORD *)(v17 + 8 * v14 + 8)) << (v15 ^ 0x3Fu)) | (v18 >> v15)
          : v18 >> v15;
      v21 = v11 | ((*(_DWORD *)(a1 + 728) & v19) << 8);
      v22 = *(_QWORD *)(a1 + 1000);
      if (v22)
        sub_19BF931B4(v22, a2, v21);
      else
        sub_19BF99D1C(v7, a2, v21);
    }
    else
    {
      std::string::push_back(a2, v11);
    }
    if (a3 <= *(_QWORD *)(a1 + 1064))
      break;
    a3 = sub_19BF9A9B8((_QWORD *)a1, a3) + ~a3;
  }
}

uint64_t sub_19BF9333C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v10 = a1 + 416;
  v11 = (_QWORD *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 1056) & a5;
      v13 = *(_QWORD *)(a1 + 1024);
      if (a5 == *(_DWORD *)(v13 + 12 * v12 + 4))
        break;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
      {
        v15 = *(_QWORD *)(a1 + 1000);
        v16 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a5);
        v17 = sub_19BF9A628(v10, a5);
        v18 = *(_QWORD *)(a1 + 720);
        v19 = (unint64_t)(v18 * v17) >> 6;
        v20 = (v18 * v17) & 0x3F;
        v21 = v20 + v18;
        v22 = *(_QWORD *)(a1 + 688);
        v23 = *(_QWORD *)(v22 + 8 * v19);
        if (v15)
        {
          v24 = v23 >> v20;
          if (v21 > 0x40)
            v24 |= (2 * *(_QWORD *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu);
          v25 = v16 | ((*(_DWORD *)(a1 + 728) & v24) << 8);
          v26 = *(_QWORD *)(a1 + 1000);
          if (v26)
          {
            if ((sub_19BF9333C(v26, a2, a3, a4, v25) & 1) == 0)
              return 0;
            goto LABEL_27;
          }
        }
        else
        {
          if (v21 > 0x40)
            v28 = ((2 * *(_QWORD *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu)) | (v23 >> v20);
          else
            v28 = v23 >> v20;
          v25 = v16 | ((*(_DWORD *)(a1 + 728) & v28) << 8);
        }
        if ((sub_19BF99DA8(v11, a2, a3, a4, v25) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a5) != *(unsigned __int8 *)(a2 + *a4))
          return 0;
        ++*a4;
      }
LABEL_27:
      if (a5 <= *(_QWORD *)(a1 + 1064))
        return 1;
      if (*a4 >= a3)
        return 0;
      a5 = sub_19BF9A9B8((_QWORD *)a1, a5) + ~a5;
    }
    v14 = *(unsigned int *)(v13 + 12 * v12 + 8);
    if (v14 <= 0xFFFFFEFF)
    {
      v27 = *(_QWORD *)(a1 + 1000);
      if (v27)
      {
        if ((sub_19BF9333C(v27, a2, a3, a4, v14) & 1) == 0)
          return 0;
      }
      else if ((sub_19BF99DA8(v11, a2, a3, a4, v14) & 1) == 0)
      {
        return 0;
      }
    }
    else
    {
      if (*(unsigned __int8 *)(a2 + *a4) != v14)
        return 0;
      ++*a4;
    }
    a5 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v12);
    if (!(_DWORD)a5)
      return 1;
    if (*a4 >= a3)
      return 0;
  }
}

uint64_t sub_19BF93584(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, std::string *a6)
{
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v12 = a1 + 416;
  v13 = (_QWORD *)(a1 + 744);
  while (1)
  {
    v14 = *(_QWORD *)(a1 + 1056) & a5;
    v15 = *(_QWORD *)(a1 + 1024);
    if (a5 != *(_DWORD *)(v15 + 12 * v14 + 4))
    {
      v17 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a5);
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
      {
        v18 = sub_19BF9A628(v12, a5);
        v19 = *(_QWORD *)(a1 + 720);
        v20 = (unint64_t)(v19 * v18) >> 6;
        v21 = (v19 * v18) & 0x3F;
        v22 = v21 + v19;
        v23 = *(_QWORD *)(a1 + 688);
        v24 = *(_QWORD *)(v23 + 8 * v20);
        if (v22 > 0x40)
          v25 = ((2 * *(_QWORD *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu)) | (v24 >> v21);
        else
          v25 = v24 >> v21;
        v27 = v17 | ((*(_DWORD *)(a1 + 728) & v25) << 8);
        v28 = *(_QWORD *)(a1 + 1000);
        if (v28)
        {
          if ((sub_19BF93584(v28, a2, a3, a4, v27, a6) & 1) == 0)
            return 0;
        }
        else if (!sub_19BF99E3C(v13, a2, a3, a4, v27, a6))
        {
          return 0;
        }
      }
      else
      {
        if (v17 != *(unsigned __int8 *)(a2 + *a4))
          return 0;
        std::string::push_back(a6, v17);
        ++*a4;
      }
      if (a5 <= *(_QWORD *)(a1 + 1064))
        return 1;
      a5 = sub_19BF9A9B8((_QWORD *)a1, a5) + ~a5;
      goto LABEL_23;
    }
    v16 = *(unsigned int *)(v15 + 12 * v14 + 8);
    if (v16 > 0xFFFFFEFF)
    {
      if (*(unsigned __int8 *)(a2 + *a4) != v16)
        return 0;
      std::string::push_back(a6, v16);
      ++*a4;
      goto LABEL_22;
    }
    v26 = *(_QWORD *)(a1 + 1000);
    if (!v26)
      break;
    if ((sub_19BF93584(v26, a2, a3, a4, v16, a6) & 1) == 0)
      return 0;
LABEL_22:
    a5 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v14);
    if (!(_DWORD)a5)
      return 1;
LABEL_23:
    if (*a4 >= a3)
    {
      sub_19BF931B4(a1, a6, a5);
      return 1;
    }
  }
  if (sub_19BF99E3C(v13, a2, a3, a4, v16, a6))
    goto LABEL_22;
  return 0;
}

uint64_t sub_19BF937C0(_QWORD *a1, unsigned int a2)
{
  _QWORD *exception;

  if (a2 >= 0x100000)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000034;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/confi"
                   "g.h:52: MARISA_CODE_ERROR: (config_flags & ~MARISA_CONFIG_MASK) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  if ((a2 & 0x7F) != 0)
    *a1 = a2 & 0x7F;
  sub_19BF9385C((uint64_t)a1, a2);
  sub_19BF93904((uint64_t)a1, a2);
  return sub_19BF93980((uint64_t)a1, a2);
}

uint64_t sub_19BF9385C(uint64_t result, __int16 a2)
{
  unsigned int v2;
  int v3;
  _QWORD *exception;

  v2 = a2 & 0xF80;
  v3 = 512;
  if (v2 > 0x1FF)
  {
    if (v2 == 512)
      goto LABEL_11;
    if (v2 != 1024)
    {
      v3 = a2 & 0xF80;
      if (v2 != 2048)
        goto LABEL_9;
      goto LABEL_11;
    }
LABEL_10:
    v3 = a2 & 0xF80;
    goto LABEL_11;
  }
  if ((a2 & 0xF80) == 0)
    goto LABEL_11;
  if (v2 == 128)
    goto LABEL_10;
  v3 = a2 & 0xF80;
  if (v2 != 256)
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000060;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/confi"
                   "g.h:96: MARISA_CODE_ERROR: undefined cache level";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  *(_DWORD *)(result + 8) = v3;
  return result;
}

uint64_t sub_19BF93904(uint64_t result, __int16 a2)
{
  int v2;
  int v3;
  _QWORD *exception;

  v2 = 4096;
  v3 = a2 & 0xF000;
  if ((a2 & 0xF000) != 0 && v3 != 4096)
  {
    if (v3 != 0x2000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E3D11E20;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x500000075;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/con"
                     "fig.h:117: MARISA_CODE_ERROR: undefined tail mode";
      __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
    }
    v2 = 0x2000;
  }
  *(_DWORD *)(result + 12) = v2;
  return result;
}

uint64_t sub_19BF93980(uint64_t result, int a2)
{
  int v2;
  int v3;
  _QWORD *exception;

  v2 = 0x20000;
  v3 = a2 & 0xF0000;
  if ((a2 & 0xF0000) != 0 && v3 != 0x20000)
  {
    if (v3 != 0x10000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E3D11E20;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x50000008ALL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/con"
                     "fig.h:138: MARISA_CODE_ERROR: undefined node order";
      __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
    }
    v2 = 0x10000;
  }
  *(_DWORD *)(result + 16) = v2;
  return result;
}

uint64_t *sub_19BF939FC(uint64_t *result, unint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v4 = a2;
  v5 = result;
  v6 = result[4];
  if (v6 < a2)
  {
    v7 = 2 * v6;
    if (v6 >> 60)
      v7 = 0x1FFFFFFFFFFFFFFFLL;
    if (v6 > a2 >> 1)
      a2 = v7;
    result = sub_19BF93A80(result, a2);
  }
  v8 = v5[3];
  v9 = v4 - v8;
  if (v4 > v8)
  {
    v10 = (_QWORD *)(v5[1] + 8 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  v5[3] = v4;
  return result;
}

_QWORD *sub_19BF93A80(uint64_t *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = operator new[](8 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (uint64_t *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1A1AD0CB8);
  return result;
}

_QWORD *sub_19BF93B04(_QWORD *result)
{
  uint64_t v1;
  _QWORD *exception;

  if (*((_BYTE *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  v1 = result[3];
  if (v1 != result[4])
    return sub_19BF93A80(result, v1);
  return result;
}

uint64_t sub_19BF93B78(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD *exception;

  sub_19BF93C38((__int128 *)a1, a2);
  *(_QWORD *)(a1 + 48) = *(unsigned int *)sub_19BF8FCC8(a2, 4uLL);
  v4 = *(unsigned int *)sub_19BF8FCC8(a2, 4uLL);
  if (*(_QWORD *)(a1 + 48) < v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit-vector.h";
    exception[2] = 0xA00000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit"
                   "-vector.h:134: MARISA_FORMAT_ERROR: temp_num_1s > size_";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)(a1 + 56) = v4;
  sub_19BF93CF4((__int128 *)(a1 + 64), a2);
  sub_19BF93DB0((__int128 *)(a1 + 112), a2);
  return sub_19BF93DB0((__int128 *)(a1 + 160), a2);
}

uint64_t sub_19BF93C38(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_19BF93E6C((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  return result;
}

void sub_19BF93CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF93CF4(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_19BF9403C((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  return result;
}

void sub_19BF93D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF93DB0(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_19BF941C4((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  return result;
}

void sub_19BF93E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF93E6C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *(_QWORD *)sub_19BF8FCC8(a2, 8uLL);
  if ((v4 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  sub_19BF93F20(a2, (uint64_t *)(a1 + 16), v4 >> 3);
  sub_19BF8FC28(a2, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4 >> 3;
  return sub_19BF93FD4(a1);
}

uint64_t sub_19BF93F20(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  result = sub_19BF8FCC8(a1, 8 * a3);
  *a2 = result;
  return result;
}

uint64_t sub_19BF93FD4(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x10000007ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:122: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t sub_19BF9403C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *exception;

  v4 = *(_QWORD *)sub_19BF8FCC8(a2, 8uLL);
  v5 = v4 / 0xC;
  if (v4 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  sub_19BF94100(a2, (uint64_t *)(a1 + 16), v5);
  sub_19BF8FC28(a2, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v5;
  return sub_19BF93FD4(a1);
}

uint64_t sub_19BF94100(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  result = sub_19BF8FCC8(a1, 12 * a3);
  *a2 = result;
  return result;
}

uint64_t sub_19BF941C4(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *(_QWORD *)sub_19BF8FCC8(a2, 8uLL);
  if ((v4 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  sub_19BF94278(a2, (uint64_t *)(a1 + 16), v4 >> 2);
  sub_19BF8FC28(a2, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4 >> 2;
  return sub_19BF93FD4(a1);
}

uint64_t sub_19BF94278(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  result = sub_19BF8FCC8(a1, 4 * a3);
  *a2 = result;
  return result;
}

_QWORD *sub_19BF9432C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *exception;

  sub_19BF93C38((__int128 *)a1, a2);
  v4 = *(unsigned int *)sub_19BF8FCC8(a2, 4uLL);
  if (v4 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/flat-vector.h";
    exception[2] = 0xA00000084;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/fla"
                   "t-vector.h:132: MARISA_FORMAT_ERROR: temp_value_size > 32";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)sub_19BF8FCC8(a2, 4uLL);
  result = (_QWORD *)sub_19BF8FCC8(a2, 8uLL);
  *(_QWORD *)(a1 + 64) = *result;
  return result;
}

uint64_t *sub_19BF943DC(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 60)
      v5 = 0x1FFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = sub_19BF93A80(result, a2);
  }
  v3[3] = v2;
  return result;
}

void sub_19BF94430(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = a1[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      v5 = 0x1555555555555555;
    if (v4 > a2 >> 1)
      a2 = v5;
    sub_19BF944B0(a1, a2);
  }
  v6 = a1[3];
  if (v2 > v6)
    bzero((void *)(a1[1] + 12 * v6), 12 * (v2 - v6));
  a1[3] = v2;
}

_DWORD *sub_19BF944B0(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = operator new[](12 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (uint64_t *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6;
      v7[2] = *((_DWORD *)v6 + 2);
      *(_QWORD *)v7 = v8;
      v7 += 3;
      v6 = (uint64_t *)((char *)v6 + 12);
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1A1AD0CB8);
  return result;
}

uint64_t *sub_19BF94544(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 61)
      v5 = 0x3FFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)sub_19BF94598(result, a2);
  }
  v3[3] = v2;
  return result;
}

_DWORD *sub_19BF94598(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  int *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  result = operator new[](4 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (int *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1A1AD0CB8);
  return result;
}

uint64_t sub_19BF9461C(uint64_t a1, uint64_t a2)
{
  int v5;
  int __buf;

  sub_19BF9469C(a1, a2);
  __buf = *(_QWORD *)(a1 + 48);
  sub_19BF8F868(a2, (char *)&__buf, 4uLL);
  v5 = *(_QWORD *)(a1 + 56);
  sub_19BF8F868(a2, (char *)&v5, 4uLL);
  sub_19BF94798(a1 + 64, a2);
  sub_19BF948AC(a1 + 112, a2);
  return sub_19BF948AC(a1 + 160, a2);
}

uint64_t sub_19BF9469C(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = 8 * *(_QWORD *)(a1 + 24);
  sub_19BF8F868(a2, (char *)&__buf, 8uLL);
  sub_19BF946F8(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_19BF8F748(a2, 0);
}

uint64_t sub_19BF946F8(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  return sub_19BF8F868(a1, a2, 8 * a3);
}

uint64_t sub_19BF94798(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = 12 * *(_QWORD *)(a1 + 24);
  sub_19BF8F868(a2, (char *)&__buf, 8uLL);
  sub_19BF947FC(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_19BF8F748(a2, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t sub_19BF947FC(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  return sub_19BF8F868(a1, a2, 12 * a3);
}

uint64_t sub_19BF948AC(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = 4 * *(_QWORD *)(a1 + 24);
  sub_19BF8F868(a2, (char *)&__buf, 8uLL);
  sub_19BF9490C(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_19BF8F748(a2, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t sub_19BF9490C(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  return sub_19BF8F868(a1, a2, 4 * a3);
}

uint64_t sub_19BF949AC(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  sub_19BF9469C(a1, a2);
  LODWORD(__buf) = *(_QWORD *)(a1 + 48);
  sub_19BF8F868(a2, (char *)&__buf, 4uLL);
  LODWORD(__buf) = *(_DWORD *)(a1 + 56);
  sub_19BF8F868(a2, (char *)&__buf, 4uLL);
  __buf = *(_QWORD *)(a1 + 64);
  return sub_19BF8F868(a2, (char *)&__buf, 8uLL);
}

_QWORD *sub_19BF94A20(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v6 = result;
  if (a6 >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  if (a6 > 0x16)
  {
    v10 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v10 = a6 | 7;
    v11 = v10 + 1;
    result = operator new(v10 + 1);
    v6[1] = a6;
    v6[2] = v11 | 0x8000000000000000;
    *v6 = result;
    v6 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a6;
  }
  while (a3 != a5)
  {
    v12 = *(_BYTE *)--a3;
    *(_BYTE *)v6 = v12;
    v6 = (_QWORD *)((char *)v6 + 1);
  }
  *(_BYTE *)v6 = 0;
  return result;
}

void sub_19BF94AC4()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_1E3D14E10;
  __cxa_throw(exception, (struct type_info *)&unk_1E3D134F0, (void (*)(void *))std::exception::~exception);
}

void sub_19BF94AFC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

char *sub_19BF94B20(uint64_t *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  result = (char *)operator new[](24 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (_DWORD *)(a1[1] + 16);
    v7 = result + 16;
    do
    {
      *((_QWORD *)v7 - 2) = *((_QWORD *)v6 - 2);
      *(v7 - 2) = *(v6 - 2);
      *(v7 - 1) = *(v6 - 1);
      v8 = *v6;
      v6 += 6;
      *v7 = v8;
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1A1AD0CB8);
  return result;
}

uint64_t sub_19BF94BC4(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  __n128 v34;
  uint64_t v35;
  __n128 *v36;
  unint64_t v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int32 *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  float v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t result;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  __n128 v78;
  int v79;
  __int128 v80;
  uint64_t v81[4];
  _OWORD v82[2];
  __int128 v83;
  _OWORD v84[4];

  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v11 = 0;
    v12 = (_DWORD *)(v10 + 16);
    do
    {
      *v12 = v11;
      v12 += 6;
      ++v11;
    }
    while (v9 != v11);
  }
  v13 = sub_19BF956E0(v10, v10 + 24 * v9, 0);
  v14 = 256;
  if (a5 != 1)
    v14 = 1;
  do
  {
    v15 = v14;
    v14 *= 2;
  }
  while (v15 < v13 / *(unsigned int *)(a4 + 8));
  sub_19BF929C8(a1 + 126, v15);
  a1[132] = v15 - 1;
  sub_19BF92138(a1, 1);
  sub_19BF92138(a1, 0);
  v16 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  sub_19BF95408(a1 + 78, v84);
  v77 = a1 + 52;
  sub_19BF92138(a1 + 52, 0);
  v72 = a5;
  memset(v84, 0, 41);
  v83 = 0u;
  memset(v82, 0, sizeof(v82));
  v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(_QWORD *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  sub_19BF95D98(v82, (uint64_t *)&v78);
  v17 = *((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v73 = a1 + 78;
    do
    {
      v18 = a1[58];
      v19 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      *(_QWORD *)&v83 = v83 + 1;
      *((_QWORD *)&v83 + 1) = v17 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        v23 = v18;
        operator delete(**((void ***)&v82[0] + 1));
        v18 = v23;
        *((_QWORD *)&v82[0] + 1) += 8;
        *(_QWORD *)&v83 = v83 - 341;
      }
      v76 = v17;
      v24 = v18 - v17;
      if (v20 < v21)
      {
        while (1)
        {
          v25 = *(_QWORD *)(a2 + 8);
          if (*(_DWORD *)(v25 + 24 * v20 + 8) != (_DWORD)v22)
            break;
          *(_DWORD *)(v25 + 24 * v20 + 12) = v24;
          v20 = (v20 + 1);
          if ((_DWORD)v21 == (_DWORD)v20)
            goto LABEL_49;
        }
      }
      if ((_DWORD)v20 != (_DWORD)v21)
      {
        v75 = v18;
        v26 = v80;
        v80 = 0u;
        memset(v81, 0, 25);
        if (v26)
          MEMORY[0x1A1AD0CB8](v26, 0x1000C8077774924);
        v27 = *(_QWORD *)(a2 + 8);
        v28 = *(float *)(v27 + 24 * v20 + 12);
        v29 = v20 + 1;
        if (v20 + 1 < v21)
        {
          v30 = 24 * v20;
          v31 = (v20 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v27 + v30) + v22) != *(unsigned __int8 *)(*(_QWORD *)(v27 + v30 + 24)
                                                                                          + v22))
            {
              *(float *)&v32 = v28;
              v78.n128_u64[0] = v31 + v20;
              v78.n128_u64[1] = v22 | ((unint64_t)v32 << 32);
              sub_19BF95470((uint64_t *)&v80, &v78);
              v27 = *(_QWORD *)(a2 + 8);
              v28 = 0.0;
              LODWORD(v20) = v29;
            }
            v28 = v28 + *(float *)(v27 + v30 + 36);
            ++v29;
            v30 += 24;
            v31 += 0x100000000;
          }
          while (v21 != v29);
        }
        *(float *)&v33 = v28;
        v78.n128_u32[0] = v20;
        v78.n128_u32[1] = v21;
        v78.n128_u64[1] = v22 | ((unint64_t)v33 << 32);
        v34 = sub_19BF95470((uint64_t *)&v80, &v78);
        v16 = a1 + 78;
        v35 = v75;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          v36 = (__n128 *)*((_QWORD *)&v80 + 1);
          v37 = v81[1];
          if (v81[1] < 129)
          {
            v38 = 0;
            v40 = 0;
          }
          else
          {
            v38 = (__n128 *)sub_19BF9667C(v81[1]);
            v40 = v39;
          }
          sub_19BF966DC(v36, &v36[v37], (uint64_t)&v78, v37, v38, v40, v34);
          if (v38)
            operator delete(v38);
          v35 = v75;
        }
        v41 = v81[1];
        if (v35 == v76)
          a1[133] = v81[1];
        if (v41)
        {
          v42 = 0;
          do
          {
            v43 = (unsigned int *)(*((_QWORD *)&v80 + 1) + 16 * v42);
            v44 = (uint64_t *)v43;
            v45 = v43[2];
            v46 = *v43;
            v47 = *(_QWORD *)(a2 + 8);
            v48 = *(unsigned int *)(v47 + 24 * *v43 + 8);
            v49 = v45 + 1;
            if (v45 + 1 >= v48)
            {
              v50 = v43[2];
              LODWORD(v48) = v45 + 1;
            }
            else
            {
              v50 = v48 - 1;
              v51 = v43[2];
              do
              {
                v52 = v51;
                v51 = v49;
                v53 = (uint64_t *)(v47 + 24 * v46);
                v54 = *v43;
                while (++v54 < (unint64_t)v43[1])
                {
                  v55 = *v53;
                  v56 = v53[3];
                  v53 += 3;
                  if (*(unsigned __int8 *)(v55 + v51) != *(unsigned __int8 *)(v56 + v51))
                  {
                    v50 = v52;
                    LODWORD(v48) = v51;
                    goto LABEL_43;
                  }
                }
                v49 = v51 + 1;
              }
              while (v51 + 1 != v48);
            }
LABEL_43:
            v58 = *((float *)v43 + 3);
            v57 = v43 + 3;
            v59 = v58;
            v60 = ((32 * v24) ^ v24 ^ *(unsigned __int8 *)(*(_QWORD *)(v47 + 24 * v46) + v45)) & a1[132];
            v61 = a1[127];
            v62 = v61 + 12 * v60;
            v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              v65 = a1[81];
              v66 = (_DWORD *)(v61 + 12 * v60);
              *v66 = v24;
              v66[1] = v65;
              *v63 = v59;
              v45 = *((unsigned int *)v44 + 2);
            }
            if (v50 == v45)
            {
              v78.n128_u8[0] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v44) + v50);
              sub_19BF95408(v73, &v78);
              sub_19BF92138(v77, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              sub_19BF95408(v73, &v78);
              sub_19BF92138(v77, 1);
              v78 = 0uLL;
              v79 = 0;
              v67 = *((unsigned int *)v44 + 2);
              v78.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v44) + v67;
              v78.n128_u64[1] = (v48 - v67);
              v78.n128_u32[3] = *v57;
              sub_19BF954E0((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v44 + 2) = v48;
            sub_19BF95D98(v82, v44);
            sub_19BF92138(a1, 1);
            ++v42;
          }
          while (v42 < v81[1]);
        }
      }
LABEL_49:
      sub_19BF92138(a1, 0);
      v17 = *((_QWORD *)&v83 + 1);
    }
    while (*((_QWORD *)&v83 + 1));
  }
  sub_19BF92138(a1, 0);
  sub_19BF92214((uint64_t)a1, v72 == 1, 1);
  sub_19BF95578(v16);
  sub_19BF955EC((uint64_t)a1, a2, a3);
  v68 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v68;
  v69 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v84[1];
  *(_QWORD *)&v84[1] = v69;
  v70 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v70;
  LOBYTE(v69) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v69;
  if ((_QWORD)v80)
    MEMORY[0x1A1AD0CB8](v80, 0x1000C8077774924);
  sub_19BF9709C(v82);
  result = *(_QWORD *)&v84[0];
  if (*(_QWORD *)&v84[0])
    return MEMORY[0x1A1AD0CB8](*(_QWORD *)&v84[0], 0x1000C8077774924);
  return result;
}

void sub_19BF95208(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  uint64_t v18;
  uint64_t v21;
  _QWORD *exception;
  va_list va;

  va_start(va, a18);
  if (a13)
    MEMORY[0x1A1AD0CB8](a13, 0x1000C8077774924);
  sub_19BF9709C((uint64_t *)va);
  v21 = *(_QWORD *)(v18 - 144);
  if (v21)
    MEMORY[0x1A1AD0CB8](v21, 0x1000C8077774924);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001D3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:467: MARISA_MEMORY_ERROR: std::bad_alloc";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19BF95310(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  uint64_t v12;

  memset(v9, 0, 41);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_19BF9717C((uint64_t)v9, a2);
  v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v9[1];
  *(_QWORD *)&v9[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  v6 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = v10;
  v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  v11 = v6;
  v7 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v12;
  result = v3;
  v12 = v7;
  if ((_QWORD)v3)
    return MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  return result;
}

void sub_19BF953E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19BF95408(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  size_t v8;

  v3 = result;
  v4 = result[3];
  v5 = result[4];
  v6 = v4 + 1;
  if (v5 < (unint64_t)(v4 + 1))
  {
    v7 = 2 * v5;
    if (v5 < 0)
      v7 = -1;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    result = (uint64_t *)sub_19BF95D14(result, v8);
    v4 = v3[3];
  }
  *(_BYTE *)(v3[1] + v4) = *a2;
  ++v3[3];
  return result;
}

__n128 sub_19BF95470(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v4 = a1[3];
  v5 = a1[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 >> 59)
      v7 = 0xFFFFFFFFFFFFFFFLL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    sub_19BF965F8(a1, v8);
    v4 = a1[3];
  }
  result = *a2;
  *(__n128 *)(a1[1] + 16 * v4) = *a2;
  ++a1[3];
  return result;
}

uint64_t *sub_19BF954E0(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[3];
  v5 = result[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 > 0x555555555555555)
      v7 = 0xAAAAAAAAAAAAAAALL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    result = (uint64_t *)sub_19BF94B20(result, v8);
    v4 = v3[3];
  }
  v9 = v3[1] + 24 * v4;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v9 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 + 16);
  ++v3[3];
  return result;
}

_BYTE *sub_19BF95578(_BYTE *result)
{
  size_t v1;
  _QWORD *exception;

  if (result[40])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  v1 = *((_QWORD *)result + 3);
  if (v1 != *((_QWORD *)result + 4))
    return sub_19BF95D14((uint64_t *)result, v1);
  return result;
}

uint64_t sub_19BF955EC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  _OWORD v13[3];

  memset(v13, 0, 41);
  sub_19BF94544((uint64_t *)v13, *(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((_QWORD *)&v13[0] + 1);
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = *((_QWORD *)&v13[0] + 1);
  }
  v8 = *a3;
  v9 = *(_QWORD *)&v13[1];
  *(_QWORD *)a3 = *(_QWORD *)&v13[0];
  *((_QWORD *)a3 + 1) = v6;
  v13[0] = v8;
  v10 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v9;
  *(_QWORD *)&v13[1] = v10;
  v11 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v13[2]);
  result = v8;
  BYTE8(v13[2]) = v10;
  if ((_QWORD)v8)
    return MEMORY[0x1A1AD0CB8](v8, 0x1000C8077774924);
  return result;
}

void sub_19BF956B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF956E0(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    v7 = 0;
    goto LABEL_69;
  }
  v7 = 0;
  do
  {
    v8 = sub_19BF95B58(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    v9 = v8;
    v10 = v5;
    v11 = v4;
    v12 = v5;
    v13 = v4;
    while (v10 < v11)
    {
      v14 = *(unsigned int *)(v10 + 8);
      v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(_QWORD *)v10 + a3);
      if (v15 > v8)
        break;
      if (v15 == v8)
      {
        v16 = *(_QWORD *)v10;
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        v17 = *(_QWORD *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_QWORD *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      v18 = v11 - 24;
      do
      {
        v11 = v18;
        v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19)
          v20 = -1;
        else
          v20 = *(unsigned __int8 *)(*(_QWORD *)v11 + a3);
        if (v20 < v8)
          break;
        if (v20 == v8)
        {
          v21 = *(_QWORD *)(v13 - 24);
          v13 -= 24;
          v22 = *(_QWORD *)v11;
          *(_QWORD *)v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          v23 = *(_QWORD *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(_QWORD *)v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_QWORD *)(v13 + 12) = v23;
        }
        v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      v24 = *(_QWORD *)v10;
      v25 = *(_DWORD *)(v10 + 16);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v26 = *(_QWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v24;
      *(_QWORD *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    v44 = v7;
    if (v12 > v5)
    {
      v27 = 0;
      do
      {
        v28 = v12 + v27;
        v29 = v10 + v27;
        v30 = *(_QWORD *)(v12 + v27 - 24);
        v31 = *(_DWORD *)(v12 + v27 - 8);
        *(_QWORD *)(v28 - 24) = *(_QWORD *)(v10 + v27 - 24);
        v32 = *(_QWORD *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(_QWORD *)(v29 - 24) = v30;
        *(_QWORD *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      v33 = *(_QWORD *)v13;
      v34 = *(_DWORD *)(v13 + 16);
      *(_QWORD *)v13 = *(_QWORD *)v11;
      v35 = *(_QWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v33;
      *(_QWORD *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    v36 = v10 - v5;
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    v38 = v11 - v10;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25)
            goto LABEL_53;
          v41 = sub_19BF956E0(v5, v10, a3) + v44;
        }
        v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          v7 = v44;
        }
        else
        {
          v7 = sub_19BF956E0(v11, v4, a3) + v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        v5 = v10;
LABEL_64:
        v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24)
      goto LABEL_32;
    if (v38 < 25)
    {
      v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      v7 = v44 + 1;
    }
    else
    {
      v7 = sub_19BF956E0(v10, v11, a3 + 1) + v44;
    }
    v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += sub_19BF956E0(v11, v4, a3);
      }
      v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += sub_19BF956E0(v5, v10, a3);
      }
      v5 = v11;
    }
LABEL_65:
    v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25)
    v7 += sub_19BF95BCC(v5, v4, a3);
  return v7;
}

uint64_t sub_19BF95B58(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(unsigned int *)(a1 + 8) <= a4)
    v4 = -1;
  else
    v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + a4);
  if (*(unsigned int *)(a2 + 8) <= a4)
    v5 = -1;
  else
    v5 = *(unsigned __int8 *)(*(_QWORD *)a2 + a4);
  if (*(unsigned int *)(a3 + 8) <= a4)
    v6 = -1;
  else
    v6 = *(unsigned __int8 *)(*(_QWORD *)a3 + a4);
  if (v4 <= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 >= v5)
    v4 = v5;
  if (v4 <= v6)
    v4 = v6;
  if (v7 >= v6)
    return v4;
  else
    return v7;
}

uint64_t sub_19BF95BCC(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1 + 24;
  if (a1 + 24 >= a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v3;
    if (v3 <= a1)
    {
      v10 = 0;
    }
    else
    {
      while (1)
      {
        v9 = v8 - 24;
        v10 = sub_19BF95CA8(v8 - 24, v8, a3);
        if (v10 < 1)
          break;
        v11 = *(_QWORD *)(v8 - 24);
        v12 = *(_DWORD *)(v8 - 8);
        *(_QWORD *)(v8 - 24) = *(_QWORD *)v8;
        v13 = *(_QWORD *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(_QWORD *)v8 = v11;
        v14 = *(_QWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          v10 = 1;
          break;
        }
      }
    }
    if (v10)
      ++v7;
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t sub_19BF95CA8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4)
      v12 = -1;
    else
      v12 = 1;
    if ((_DWORD)v3 == (_DWORD)v4)
      return 0;
    else
      return v12;
  }
  else
  {
    v6 = v4 - a3;
    v7 = (unsigned __int8 *)(*(_QWORD *)a1 + a3);
    v8 = (unsigned __int8 *)(*(_QWORD *)a2 + a3);
    while (v6)
    {
      v9 = *v7;
      v10 = *v8;
      result = (v9 - v10);
      if (v9 != v10)
        return result;
      --v6;
      ++v7;
      ++v8;
      if (!--v5)
        goto LABEL_6;
    }
    return 1;
  }
}

_BYTE *sub_19BF95D14(uint64_t *a1, size_t __sz)
{
  _BYTE *result;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  char v8;
  uint64_t v9;

  result = operator new[](__sz, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (char *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = __sz;
  if (v9)
    JUMPOUT(0x1A1AD0CB8);
  return result;
}

void sub_19BF95D98(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_19BF95E54(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v8 = v9;
  ++a1[5];
}

void sub_19BF95E54(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_19BF965C4(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFFCuLL);
      sub_19BF96168(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFFCuLL);
    sub_19BF9627C((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_19BF965C4((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_19BF965C4((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  sub_19BF96398(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_19BF964AC((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_19BF9611C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19BF96168(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_19BF965C4(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_19BF9627C(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_19BF965C4(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_19BF96398(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_19BF965C4(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_19BF964AC(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_19BF965C4(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void *sub_19BF965C4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_19BF8E6D0();
  return operator new(8 * a2);
}

_OWORD *sub_19BF965F8(uint64_t *a1, uint64_t a2)
{
  _OWORD *result;
  uint64_t v5;
  __int128 *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;

  result = operator new[](16 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (__int128 *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1A1AD0CB8);
  return result;
}

void *sub_19BF9667C(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x7FFFFFFFFFFFFFFLL)
    v1 = 0x7FFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(16 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

double sub_19BF966DC(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      a7.n128_u32[0] = a2[-1].n128_u32[3];
      if (a7.n128_f32[0] > a1->n128_f32[3])
      {
        a7 = *a1;
        *a1 = a2[-1];
        a2[-1] = a7;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v13 = a4 >> 1;
      v14 = &a1[a4 >> 1];
      v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v17.n128_f64[0] = sub_19BF96918(a1, v14, a3, v15, a5, a7);
        v18.n128_f64[0] = sub_19BF96918(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13], v17);
        a7.n128_u64[0] = sub_19BF96A54(a5, &a5[v13], &a5[v13], &a5[a4], a1, v18).n128_u64[0];
      }
      else
      {
        sub_19BF966DC(a1, v14, a3, v15, a5, a6);
        sub_19BF966DC(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = sub_19BF96AC8((__int128 *)a1, (__int128 *)&a1[a4 >> 1], (__int128 *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v16).n128_u64[0];
      }
    }
    else
    {
      sub_19BF96874((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a7.n128_f64[0];
}

uint64_t sub_19BF96874(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (result != a2)
  {
    v2 = result + 16;
    if (result + 16 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = *(float *)(v4 + 28);
        v6 = *(float *)(v4 + 12);
        v4 = v2;
        if (v5 > v6)
        {
          v10 = *(_QWORD *)v2;
          v11 = *(_DWORD *)(v2 + 8);
          v7 = v3;
          while (1)
          {
            *(_OWORD *)(result + v7 + 16) = *(_OWORD *)(result + v7);
            if (!v7)
              break;
            v8 = *(float *)(result + v7 - 4);
            v7 -= 16;
            if (v5 <= v8)
            {
              v9 = result + v7 + 16;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(_QWORD *)v9 = v10;
          *(_DWORD *)(v9 + 8) = v11;
          *(float *)(v9 + 12) = v5;
        }
        v2 = v4 + 16;
        v3 += 16;
      }
      while (v4 + 16 != a2);
    }
  }
  return result;
}

double sub_19BF96918(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 a6)
{
  __n128 *v10;
  __n128 v12;

  if (a4)
  {
    if (a4 == 2)
    {
      v10 = a2 - 1;
      if (a2[-1].n128_f32[3] <= a1->n128_f32[3])
      {
        *a5 = *a1;
        a6 = *v10;
      }
      else
      {
        *a5 = *v10;
        a6 = *a1;
      }
      a5[1] = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      sub_19BF966DC(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      sub_19BF966DC(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      a6.n128_u64[0] = sub_19BF96A54(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v12).n128_u64[0];
    }
    else
    {
      a6.n128_u64[0] = sub_19BF96D30(a1, a2, a5).n128_u64[0];
    }
  }
  return a6.n128_f64[0];
}

__n128 sub_19BF96A54(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  __n128 v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        v8 = *a3++;
        result.n128_u64[0] = v8.n128_u64[0];
        *a5++ = v8;
      }
      return result;
    }
    if (a3 == a4)
      break;
    if (a3->n128_f32[3] <= a1->n128_f32[3])
    {
      v7 = *a1++;
      result = v7;
    }
    else
    {
      v6 = *a3++;
      result = v6;
    }
    *a5++ = result;
  }
  if (a1 != a2)
  {
    v9 = 0;
    do
    {
      result = a1[v9];
      a5[v9++] = result;
    }
    while (&a1[v9] != a2);
  }
  return result;
}

__n128 sub_19BF96AC8(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 *v23;
  float v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 *v29;
  float v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  __n128 v43;

  if (a6)
  {
    v10 = a6;
    do
    {
      if (v10 <= a8 || a5 <= a8)
      {
        sub_19BF96DD4(a1, a2, a3, a4, a5, v10, a7);
        return result;
      }
      if (!a5)
        return result;
      v12 = 0;
      result.n128_u32[0] = *((_DWORD *)a2 + 3);
      v13 = -a5;
      while (1)
      {
        v14 = &a1[v12];
        if (result.n128_f32[0] > *((float *)&a1[v12] + 3))
          break;
        ++v12;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v16 = -v13;
      v39 = a3;
      v40 = a8;
      if (-v13 >= v10)
      {
        if (v13 == -1)
        {
          v43 = (__n128)a1[v12];
          a1[v12] = *a2;
          result = v43;
          *a2 = (__int128)v43;
          return result;
        }
        if (v13 > 0)
          v16 = 1 - v13;
        v26 = v16 >> 1;
        v20 = &a1[(v16 >> 1) + v12];
        v19 = a3;
        if (a3 != a2)
        {
          v27 = a3 - a2;
          v19 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = &v19[v27 >> 1];
            v30 = *((float *)v29 + 3);
            v31 = v29 + 1;
            v27 += ~(v27 >> 1);
            if (v30 > *((float *)v20 + 3))
              v19 = v31;
            else
              v27 = v28;
          }
          while (v27);
        }
        v18 = v19 - a2;
      }
      else
      {
        if (v10 >= 0)
          v17 = v10;
        else
          v17 = v10 + 1;
        v18 = v17 >> 1;
        v19 = &a2[v17 >> 1];
        v20 = a2;
        if (v14 != a2)
        {
          v21 = ((char *)a2 - (char *)a1 - v12 * 16) >> 4;
          v20 = &a1[v12];
          do
          {
            v22 = v21 >> 1;
            v23 = &v20[v21 >> 1];
            v24 = *((float *)v23 + 3);
            v25 = v23 + 1;
            v21 += ~(v21 >> 1);
            if (*((float *)v19 + 3) > v24)
              v21 = v22;
            else
              v20 = v25;
          }
          while (v21);
        }
        v26 = ((char *)v20 - (char *)a1 - v12 * 16) >> 4;
      }
      a5 = -(v26 + v13);
      v32 = v10 - v18;
      v33 = v18;
      v34 = sub_19BF96EE4((char *)v20, (char *)a2, (char *)v19);
      v35 = v33;
      v36 = (__int128 *)v34;
      if (v26 + v35 >= v10 - (v26 + v35) - v13)
      {
        v38 = v35;
        sub_19BF96AC8(v34, v19, v39, a4, a5, v32, a7, v40);
        v19 = v20;
        v32 = v38;
        a5 = v26;
        a8 = v40;
        a3 = v36;
      }
      else
      {
        v37 = v26;
        a8 = v40;
        sub_19BF96AC8(v14, v20, v34, a4, v37, v35, a7, v40);
        v14 = v36;
        a3 = v39;
      }
      v10 = v32;
      a1 = v14;
      a2 = v19;
    }
    while (v32);
  }
  return result;
}

__n128 sub_19BF96D30(__n128 *a1, __n128 *a2, __n128 *a3)
{
  __n128 result;
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    result = *a1;
    *a3 = *a1;
    v4 = a1 + 1;
    if (&a1[1] != a2)
    {
      v5 = 0;
      v6 = a3;
      do
      {
        v7 = a1;
        v8 = v6;
        a1 = v4;
        v9 = ++v6;
        if (v7[1].n128_f32[3] > v8->n128_f32[3])
        {
          *v6 = *v8;
          v9 = a3;
          if (v8 != a3)
          {
            v10 = v5;
            while (1)
            {
              v9 = (__n128 *)((char *)a3 + v10);
              if (v7[1].n128_f32[3] <= *(float *)((char *)&a3->n128_f32[-1] + v10))
                break;
              *v9 = v9[-1];
              v10 -= 16;
              if (!v10)
              {
                v9 = a3;
                break;
              }
            }
          }
        }
        result = *a1;
        *v9 = *a1;
        v4 = a1 + 1;
        v5 += 16;
      }
      while (&a1[1] != a2);
    }
  }
  return result;
}

__int128 *sub_19BF96DD4(__int128 *result, __int128 *a2, __int128 *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7;
  float *v8;
  __int128 *v9;
  float v10;
  float v11;
  char *v12;
  unint64_t v13;
  float *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;

  if (a5 <= a6)
  {
    if (result != a2)
    {
      v13 = 0;
      do
      {
        *(_OWORD *)&__src[v13] = result[v13 / 0x10];
        v13 += 16;
      }
      while (&result[v13 / 0x10] != a2);
      if (v13)
      {
        v14 = (float *)__src;
        while (a2 != a3)
        {
          if (*((float *)a2 + 3) <= v14[3])
          {
            v17 = *(_OWORD *)v14;
            v14 += 4;
            v16 = v17;
          }
          else
          {
            v15 = *a2++;
            v16 = v15;
          }
          *result++ = v16;
          if (&__src[v13] == (char *)v14)
            return result;
        }
        return (__int128 *)memmove(result, v14, __src - (char *)v14 + v13);
      }
    }
  }
  else if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_OWORD *)&__src[v7 * 16] = a2[v7];
      ++v7;
    }
    while (&a2[v7] != a3);
    if (v7 * 16)
    {
      v8 = (float *)&__src[v7 * 16];
      v9 = a3 - 1;
      while (a2 != result)
      {
        v10 = *(v8 - 1);
        v11 = *((float *)a2 - 1);
        if (v10 <= v11)
          v12 = (char *)(v8 - 4);
        else
          v12 = (char *)(a2 - 1);
        if (v10 <= v11)
          v8 -= 4;
        else
          --a2;
        *v9-- = *(_OWORD *)v12;
        if (v8 == (float *)__src)
          return result;
      }
      v18 = 0;
      do
      {
        v9[v18 / 4] = *(_OWORD *)&v8[v18 - 4];
        v18 -= 4;
      }
      while (&v8[v18] != (float *)__src);
    }
  }
  return result;
}

char *sub_19BF96EE4(char *__src, char *a2, char *a3)
{
  char *v4;
  int64_t v6;
  size_t v7;
  __int128 v9;
  __int128 v10;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 16 == a2)
    {
      v9 = *(_OWORD *)__src;
      v6 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v6];
      *(_OWORD *)v4 = v9;
    }
    else if (a2 + 16 == a3)
    {
      v4 = __src + 16;
      v10 = *((_OWORD *)a3 - 1);
      v7 = a3 - 16 - __src;
      if (a3 - 16 != __src)
        memmove(__src + 16, __src, v7);
      *(_OWORD *)__src = v10;
    }
    else
    {
      return (char *)sub_19BF96FBC(__src, a2, a3);
    }
  }
  return v4;
}

_OWORD *sub_19BF96FBC(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  BOOL v17;
  char v18;
  uint64_t v19;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = 0;
      do
      {
        v5 = a1[v4];
        a1[v4] = a2[v4];
        v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        v7 = (uint64_t)&a2[++v4];
      }
      while ((_OWORD *)v6 != a2 && v7 != (_QWORD)a3);
    }
  }
  else
  {
    v9 = a3 - a2;
    v10 = a2 - a1;
    do
    {
      v11 = v10;
      v10 = v9;
      v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      v12 = &a1[v10];
      do
      {
        v13 = *--v12;
        v14 = &v12[v3];
        v15 = v12;
        do
        {
          v16 = v15;
          v15 = v14;
          *v16 = *v14;
          v17 = __OFSUB__(v3, a3 - v14);
          v19 = v3 - (a3 - v14);
          v18 = (v19 < 0) ^ v17;
          v14 = &a1[v19];
          if (v18)
            v14 = &v15[v3];
        }
        while (v14 != v12);
        *v15 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t sub_19BF9709C(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 170;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_19BF97130((uint64_t)a1);
}

uint64_t sub_19BF97130(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t sub_19BF9717C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;

  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    goto LABEL_10;
  v5 = 0;
  v6 = *(unsigned int **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  do
  {
    v9 = *v6++;
    v8 = v9;
    if (v9 > v5)
      v5 = v8;
    --v7;
  }
  while (v7);
  if (v5)
  {
    v10 = 0;
    do
    {
      ++v10;
      v11 = v5 > 1;
      v5 >>= 1;
    }
    while (v11);
  }
  else
  {
LABEL_10:
    v10 = 0;
  }
  v12 = v4 != 0;
  v13 = (unint64_t)(v10 * v4 + 63) >> 6;
  if (v10)
    v14 = v13;
  else
    v14 = v12;
  result = (uint64_t)sub_19BF943DC((uint64_t *)a1, v14);
  if (v14)
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(_QWORD *)(a1 + 24) - 8) = 0;
  *(_QWORD *)(a1 + 48) = v10;
  if (v10)
    *(_DWORD *)(a1 + 56) = 0xFFFFFFFF >> -(char)v10;
  v16 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 64) = v16;
  if (v16)
  {
    v17 = 0;
    do
    {
      result = sub_19BF97278(a1, v17, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v17));
      ++v17;
    }
    while (v17 < *(_QWORD *)(a2 + 24));
  }
  return result;
}

uint64_t sub_19BF97278(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 48);
  v4 = (unint64_t)(v3 * a2) >> 6;
  v5 = (v3 * a2) & 0x3F;
  v6 = *(unsigned int *)(result + 56);
  v7 = *(_QWORD *)(result + 8);
  v8 = v6 & a3;
  *(_QWORD *)(v7 + 8 * v4) = *(_QWORD *)(v7 + 8 * v4) & ~(v6 << (v3 * a2)) | (v8 << (v3 * a2));
  if ((unint64_t)(v5 + v3) >= 0x41)
    *(_QWORD *)(v7 + 8 * v4 + 8) = *(_QWORD *)(v7 + 8 * v4 + 8) & ~(v6 >> -(char)v5) | (v8 >> -(char)v5);
  return result;
}

uint64_t sub_19BF972DC(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  char v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          *v9 = v21;
          *(a2 - 2) = v22;
          v23 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v23;
        }
        return result;
      case 3uLL:
        return sub_19BF977BC(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return sub_19BF97D78(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return sub_19BF97E78(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_19BF97650(v9, a2);
          else
            return (uint64_t)sub_19BF97724(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            sub_19BF977BC(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            sub_19BF977BC(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            sub_19BF977BC(v9 + 2, v15 - 2, a2 - 4);
            sub_19BF977BC(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            sub_19BF977BC(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            result = (uint64_t)sub_19BF97910(v9, a2);
            v9 = (unsigned int *)result;
            goto LABEL_19;
          }
LABEL_14:
          v18 = sub_19BF97A44(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_17;
          v20 = sub_19BF97B80(v9, v18);
          v9 = v18 + 2;
          result = sub_19BF97B80(v18 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_17:
            result = sub_19BF972DC(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_19BF97FCC(v9, a2, a2, a3);
        return result;
    }
  }
}

unsigned int *sub_19BF97650(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v4;
        v4 = v2;
        v6 = v5[2];
        v7 = *v5;
        if (v6 < *v5 || v7 >= v6 && v5[3] < v5[1])
        {
          v9 = v5[2];
          v8 = v5[3];
          v10 = v5[1];
          v5[2] = v7;
          v4[1] = v10;
          v11 = result;
          if (v5 != result)
          {
            v12 = v3;
            do
            {
              v13 = *(unsigned int *)((char *)result + v12 - 8);
              if (v13 <= v9)
              {
                if (v13 < v9)
                {
                  v11 = v5;
                  goto LABEL_17;
                }
                v11 = (unsigned int *)((char *)result + v12);
                v14 = *(unsigned int *)((char *)result + v12 - 4);
                if (v14 <= v8)
                  goto LABEL_17;
              }
              else
              {
                v14 = *(unsigned int *)((char *)result + v12 - 4);
              }
              v5 -= 2;
              v15 = (unsigned int *)((char *)result + v12);
              *v15 = v13;
              v15[1] = v14;
              v12 -= 8;
            }
            while (v12);
            v11 = result;
          }
LABEL_17:
          *v11 = v9;
          v11[1] = v8;
        }
        v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

unsigned int *sub_19BF97724(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *i;
  unsigned int v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = result + 1;
      do
      {
        v4 = result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4 || v6 >= v5 && v4[3] < v4[1])
        {
          v7 = *result;
          v8 = result[1];
          for (i = v3; ; i -= 2)
          {
            v10 = *i;
            i[1] = v6;
            i[2] = v10;
            v6 = *(i - 3);
            if (v6 <= v7 && (v6 < v7 || *(i - 2) <= v8))
              break;
          }
          *(i - 1) = v7;
          *i = v8;
        }
        v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_19BF977BC(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1]))
      return 0;
    *a2 = v9;
    *a3 = v3;
    v11 = (int *)(a2 + 1);
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1]))
      return 1;
    *a1 = v12;
    v6 = (int *)(a1 + 1);
    *a2 = v13;
    v8 = 2;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = (int *)(a1 + 1);
      *a3 = v4;
      v7 = (int *)(a3 + 1);
      v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      v15 = *a3;
      v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14))
        return 1;
      *a2 = v15;
      *a3 = v16;
      v7 = (int *)(a3 + 1);
      v8 = 2;
      v6 = (int *)(a2 + 1);
    }
    v11 = v7;
  }
  v17 = *v6;
  *v6 = *v11;
  *v11 = v17;
  return v8;
}

unsigned int *sub_19BF97910(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *i;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
          v14 = v13 >= v3;
        }
        while (v13 > v3);
      }
      while (v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

unsigned int *sub_19BF97A44(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v9 > v3)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unsigned int *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (unsigned int *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
          v17 = v16 > v3;
        }
        while (v16 < v3);
      }
      while (!v17 && v13[1] < v4);
      do
      {
        v18 = *(v14 - 2);
        v14 -= 2;
        v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL sub_19BF97B80(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_19BF977BC(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_19BF97D78(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19BF97E78(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      sub_19BF977BC(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1]))
      goto LABEL_22;
    v14 = *v10;
    v15 = v10[1];
    *v10 = v13;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_21;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(unsigned int *)((char *)a1 + v17 + 8);
      if (v19 <= v14)
        break;
      v20 = *((_DWORD *)v18 + 3);
LABEL_18:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(unsigned int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        v16 = a1;
        goto LABEL_21;
      }
    }
    if (v19 < v14)
    {
      v16 = v9;
      goto LABEL_21;
    }
    v20 = *(unsigned int *)((char *)a1 + v17 + 12);
    if (v20 > v15)
      goto LABEL_18;
    v16 = (unsigned int *)((char *)a1 + v17 + 16);
LABEL_21:
    *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_22:
    v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t sub_19BF97D78(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  result = sub_19BF977BC(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t sub_19BF97E78(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  result = sub_19BF97D78(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unsigned int *sub_19BF97FCC(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        sub_19BF98144((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *v14 = v16;
          *a1 = v15;
          v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          sub_19BF98144((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v18 = (unint64_t)v8 >> 3;
      v19 = a2 - 2;
      do
      {
        v21 = *a1;
        v20 = a1[1];
        v22 = sub_19BF98288(a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v21;
          v19[1] = v20;
          sub_19BF9831C((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_19BF98144(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unsigned int *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        v12 = *a4;
        v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (unsigned int *)(result + 8 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_22;
          }
        }
        v14 = v8;
LABEL_22:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unsigned int *sub_19BF98288(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        v3 = v9;
      }
    }
    *v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_19BF9831C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unsigned int *)(result + 8 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && *(_DWORD *)(result + 8 * v5 + 4) < *(_DWORD *)(a2 - 4))
    {
      v9 = *(_DWORD *)(a2 - 8);
      v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          v12 = v5 - 1;
          v5 = (v5 - 1) >> 1;
          v11 = (unsigned int *)(result + 8 * v5);
          v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9)
              break;
            v14 = *(_DWORD *)(result + 8 * v5 + 4);
            if (v14 >= v10)
              break;
          }
          else
          {
            v14 = v11[1];
          }
          *v6 = v13;
          v6[1] = v14;
          v6 = (unsigned int *)(result + 8 * v5);
          if (v12 <= 1)
            goto LABEL_12;
        }
      }
      v11 = v6;
LABEL_12:
      *v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

void sub_19BF983C4(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_19BF8EB40();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_19BF965C4(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

char *sub_19BF984CC(uint64_t *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = (char *)operator new[](16 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (uint64_t *)(a1[1] + 8);
    v7 = result + 8;
    do
    {
      *(v7 - 1) = *(v6 - 1);
      v8 = *v6;
      v6 += 2;
      *v7 = v8;
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1A1AD0CB8);
  return result;
}

uint64_t sub_19BF9855C(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  __n128 v33;
  uint64_t v34;
  __n128 *v35;
  unint64_t v36;
  __n128 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int32 *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  float v64;
  _DWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t result;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __n128 v78;
  int v79;
  __int128 v80;
  uint64_t v81[4];
  _OWORD v82[2];
  __int128 v83;
  _OWORD v84[4];

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v10 = 0;
    v11 = (_DWORD *)(v9 + 16);
    do
    {
      *v11 = v10;
      v11 += 6;
      ++v10;
    }
    while (v8 != v10);
  }
  v12 = sub_19BF98DAC(v9, v9 + 24 * v8, 0);
  v13 = 256;
  if (a5 != 1)
    v13 = 1;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v12 / *(unsigned int *)(a4 + 8));
  sub_19BF929C8(a1 + 126, v14);
  a1[132] = v14 - 1;
  sub_19BF92138(a1, 1);
  sub_19BF92138(a1, 0);
  v15 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  sub_19BF95408(a1 + 78, v84);
  sub_19BF92138(a1 + 52, 0);
  memset(v84, 0, 41);
  v83 = 0u;
  memset(v82, 0, sizeof(v82));
  v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(_QWORD *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  sub_19BF95D98(v82, (uint64_t *)&v78);
  v16 = *((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v72 = a1 + 52;
    v73 = a1 + 78;
    do
    {
      v17 = a1[58];
      v18 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      v19 = *v18;
      v20 = v18[1];
      v21 = v18[2];
      *(_QWORD *)&v83 = v83 + 1;
      *((_QWORD *)&v83 + 1) = v16 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        v22 = v17;
        v23 = v16;
        operator delete(**((void ***)&v82[0] + 1));
        v16 = v23;
        v17 = v22;
        *((_QWORD *)&v82[0] + 1) += 8;
        *(_QWORD *)&v83 = v83 - 341;
      }
      if (v19 < v20)
      {
        while (1)
        {
          v24 = *(_QWORD *)(a2 + 8);
          if (*(_DWORD *)(v24 + 24 * v19 + 8) != (_DWORD)v21)
            break;
          *(_DWORD *)(v24 + 24 * v19 + 12) = v17 - v16;
          v19 = (v19 + 1);
          if ((_DWORD)v20 == (_DWORD)v19)
            goto LABEL_49;
        }
      }
      if ((_DWORD)v19 != (_DWORD)v20)
      {
        v76 = v16;
        v77 = v17 - v16;
        v25 = v80;
        v80 = 0u;
        memset(v81, 0, 25);
        if (v25)
          MEMORY[0x1A1AD0CB8](v25, 0x1000C8077774924);
        v75 = v17;
        v26 = *(_QWORD *)(a2 + 8);
        v27 = *(float *)(v26 + 24 * v19 + 12);
        v28 = v19 + 1;
        if (v19 + 1 < v20)
        {
          v29 = 24 * v19;
          v30 = (v19 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v26 + v29) - v21 - 1) != *(unsigned __int8 *)(*(_QWORD *)(v26 + v29 + 24)
                                                                                              - v21
                                                                                              - 1))
            {
              *(float *)&v31 = v27;
              v78.n128_u64[0] = v30 + v19;
              v78.n128_u64[1] = v21 | ((unint64_t)v31 << 32);
              sub_19BF95470((uint64_t *)&v80, &v78);
              v26 = *(_QWORD *)(a2 + 8);
              v27 = 0.0;
              LODWORD(v19) = v28;
            }
            v27 = v27 + *(float *)(v26 + v29 + 36);
            ++v28;
            v29 += 24;
            v30 += 0x100000000;
          }
          while (v20 != v28);
        }
        *(float *)&v32 = v27;
        v78.n128_u32[0] = v19;
        v78.n128_u32[1] = v20;
        v78.n128_u64[1] = v21 | ((unint64_t)v32 << 32);
        v33 = sub_19BF95470((uint64_t *)&v80, &v78);
        v15 = a1 + 78;
        v34 = v76;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          v35 = (__n128 *)*((_QWORD *)&v80 + 1);
          v36 = v81[1];
          if (v81[1] < 129)
          {
            v37 = 0;
            v39 = 0;
          }
          else
          {
            v37 = (__n128 *)sub_19BF9667C(v81[1]);
            v39 = v38;
          }
          sub_19BF966DC(v35, &v35[v36], (uint64_t)&v78, v36, v37, v39, v33);
          if (v37)
            operator delete(v37);
          v34 = v76;
        }
        v40 = v81[1];
        if (v75 == v34)
          a1[133] = v81[1];
        if (v40)
        {
          v41 = 0;
          do
          {
            v42 = (unsigned int *)(*((_QWORD *)&v80 + 1) + 16 * v41);
            v43 = (uint64_t *)v42;
            v44 = v42[2];
            v45 = *(_QWORD *)(a2 + 8);
            v46 = *(unsigned int *)(v45 + 24 * *v42 + 8);
            v47 = v44 + 1;
            if (v44 + 1 >= v46)
            {
              v48 = v42[2];
              LODWORD(v46) = v44 + 1;
            }
            else
            {
              v48 = v46 - 1;
              v49 = (uint64_t *)(v45 + 24 * *v42);
              v50 = v42[2];
              do
              {
                v51 = v50;
                v50 = v47;
                v52 = v49;
                v53 = *v42;
                while (++v53 < (unint64_t)v42[1])
                {
                  v54 = *v52;
                  v55 = v52[3];
                  v52 += 3;
                  if (*(unsigned __int8 *)(v54 + ~v51 - 1) != *(unsigned __int8 *)(v55 + ~v51 - 1))
                  {
                    v48 = v51;
                    LODWORD(v46) = v47;
                    goto LABEL_43;
                  }
                }
                ++v47;
              }
              while (v50 + 1 != v46);
            }
LABEL_43:
            v56 = a1[81];
            v58 = *((float *)v42 + 3);
            v57 = v42 + 3;
            v59 = v58;
            v60 = a1[132] & v56;
            v61 = a1[127];
            v62 = v61 + 12 * v60;
            v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              v65 = (_DWORD *)(v61 + 12 * v60);
              *v65 = v77;
              v65[1] = v56;
              *v63 = v59;
              v44 = *((unsigned int *)v43 + 2);
            }
            if (v48 == v44)
            {
              v78.n128_u8[0] = *(_BYTE *)(~v48 + *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v43));
              sub_19BF95408(v73, &v78);
              sub_19BF92138(v72, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              sub_19BF95408(v73, &v78);
              sub_19BF92138(v72, 1);
              v78 = 0uLL;
              v79 = 0;
              v66 = *((unsigned int *)v43 + 2);
              v78.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v43) - v66;
              v78.n128_u64[1] = (v46 - v66);
              v78.n128_u32[3] = *v57;
              sub_19BF954E0((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v43 + 2) = v46;
            sub_19BF95D98(v82, v43);
            sub_19BF92138(a1, 1);
            ++v41;
          }
          while (v41 < v81[1]);
        }
      }
LABEL_49:
      sub_19BF92138(a1, 0);
      v16 = *((_QWORD *)&v83 + 1);
    }
    while (*((_QWORD *)&v83 + 1));
  }
  sub_19BF92138(a1, 0);
  sub_19BF92214((uint64_t)a1, a5 == 1, 1);
  sub_19BF95578(v15);
  sub_19BF98CB8((uint64_t)a1, a2, a3);
  v67 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v67;
  v68 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v84[1];
  *(_QWORD *)&v84[1] = v68;
  v69 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v69;
  LOBYTE(v68) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v68;
  if ((_QWORD)v80)
    MEMORY[0x1A1AD0CB8](v80, 0x1000C8077774924);
  sub_19BF9709C(v82);
  result = *(_QWORD *)&v84[0];
  if (*(_QWORD *)&v84[0])
    return MEMORY[0x1A1AD0CB8](*(_QWORD *)&v84[0], 0x1000C8077774924);
  return result;
}

void sub_19BF98BB0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v30;
  _QWORD *exception;

  if (a21)
    MEMORY[0x1A1AD0CB8](a21, 0x1000C8077774924);
  sub_19BF9709C(&a27);
  v30 = *(_QWORD *)(v27 - 144);
  if (v30)
    MEMORY[0x1A1AD0CB8](v30, 0x1000C8077774924);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001D3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:467: MARISA_MEMORY_ERROR: std::bad_alloc";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19BF98CB8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  _OWORD v13[3];

  memset(v13, 0, 41);
  sub_19BF94544((uint64_t *)v13, *(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((_QWORD *)&v13[0] + 1);
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = *((_QWORD *)&v13[0] + 1);
  }
  v8 = *a3;
  v9 = *(_QWORD *)&v13[1];
  *(_QWORD *)a3 = *(_QWORD *)&v13[0];
  *((_QWORD *)a3 + 1) = v6;
  v13[0] = v8;
  v10 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v9;
  *(_QWORD *)&v13[1] = v10;
  v11 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v13[2]);
  result = v8;
  BYTE8(v13[2]) = v10;
  if ((_QWORD)v8)
    return MEMORY[0x1A1AD0CB8](v8, 0x1000C8077774924);
  return result;
}

void sub_19BF98D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF98DAC(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    v7 = 0;
    goto LABEL_69;
  }
  v7 = 0;
  do
  {
    v8 = sub_19BF99230(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    v9 = v8;
    v10 = v5;
    v11 = v4;
    v12 = v5;
    v13 = v4;
    while (v10 < v11)
    {
      v14 = *(unsigned int *)(v10 + 8);
      v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(_QWORD *)v10 - a3 - 1);
      if (v15 > v8)
        break;
      if (v15 == v8)
      {
        v16 = *(_QWORD *)v10;
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        v17 = *(_QWORD *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_QWORD *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      v18 = v11 - 24;
      do
      {
        v11 = v18;
        v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19)
          v20 = -1;
        else
          v20 = *(unsigned __int8 *)(*(_QWORD *)v11 - a3 - 1);
        if (v20 < v8)
          break;
        if (v20 == v8)
        {
          v21 = *(_QWORD *)(v13 - 24);
          v13 -= 24;
          v22 = *(_QWORD *)v11;
          *(_QWORD *)v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          v23 = *(_QWORD *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(_QWORD *)v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_QWORD *)(v13 + 12) = v23;
        }
        v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      v24 = *(_QWORD *)v10;
      v25 = *(_DWORD *)(v10 + 16);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v26 = *(_QWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v24;
      *(_QWORD *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    v44 = v7;
    if (v12 > v5)
    {
      v27 = 0;
      do
      {
        v28 = v12 + v27;
        v29 = v10 + v27;
        v30 = *(_QWORD *)(v12 + v27 - 24);
        v31 = *(_DWORD *)(v12 + v27 - 8);
        *(_QWORD *)(v28 - 24) = *(_QWORD *)(v10 + v27 - 24);
        v32 = *(_QWORD *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(_QWORD *)(v29 - 24) = v30;
        *(_QWORD *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      v33 = *(_QWORD *)v13;
      v34 = *(_DWORD *)(v13 + 16);
      *(_QWORD *)v13 = *(_QWORD *)v11;
      v35 = *(_QWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v33;
      *(_QWORD *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    v36 = v10 - v5;
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    v38 = v11 - v10;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25)
            goto LABEL_53;
          v41 = sub_19BF98DAC(v5, v10, a3) + v44;
        }
        v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          v7 = v44;
        }
        else
        {
          v7 = sub_19BF98DAC(v11, v4, a3) + v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        v5 = v10;
LABEL_64:
        v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24)
      goto LABEL_32;
    if (v38 < 25)
    {
      v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      v7 = v44 + 1;
    }
    else
    {
      v7 = sub_19BF98DAC(v10, v11, a3 + 1) + v44;
    }
    v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += sub_19BF98DAC(v11, v4, a3);
      }
      v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += sub_19BF98DAC(v5, v10, a3);
      }
      v5 = v11;
    }
LABEL_65:
    v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25)
    v7 += sub_19BF992B0(v5, v4, a3);
  return v7;
}

uint64_t sub_19BF99230(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(unsigned int *)(a1 + 8) <= a4)
    v4 = -1;
  else
    v4 = *(unsigned __int8 *)(~a4 + *(_QWORD *)a1);
  if (*(unsigned int *)(a2 + 8) <= a4)
    v5 = -1;
  else
    v5 = *(unsigned __int8 *)(~a4 + *(_QWORD *)a2);
  if (*(unsigned int *)(a3 + 8) <= a4)
    v6 = -1;
  else
    v6 = *(unsigned __int8 *)(~a4 + *(_QWORD *)a3);
  if (v4 <= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 >= v5)
    v4 = v5;
  if (v4 <= v6)
    v4 = v6;
  if (v7 >= v6)
    return v4;
  else
    return v7;
}

uint64_t sub_19BF992B0(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1 + 24;
  if (a1 + 24 >= a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v3;
    if (v3 <= a1)
    {
      v10 = 0;
    }
    else
    {
      while (1)
      {
        v9 = v8 - 24;
        v10 = sub_19BF9938C(v8 - 24, v8, a3);
        if (v10 < 1)
          break;
        v11 = *(_QWORD *)(v8 - 24);
        v12 = *(_DWORD *)(v8 - 8);
        *(_QWORD *)(v8 - 24) = *(_QWORD *)v8;
        v13 = *(_QWORD *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(_QWORD *)v8 = v11;
        v14 = *(_QWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          v10 = 1;
          break;
        }
      }
    }
    if (v10)
      ++v7;
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t sub_19BF9938C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4)
      v12 = -1;
    else
      v12 = 1;
    if ((_DWORD)v3 == (_DWORD)v4)
      return 0;
    else
      return v12;
  }
  else
  {
    v6 = v4 - a3;
    v7 = (unsigned __int8 *)(*(_QWORD *)a2 + ~a3);
    v8 = (unsigned __int8 *)(*(_QWORD *)a1 + ~a3);
    while (v6)
    {
      v9 = *v8;
      v10 = *v7;
      result = (v9 - v10);
      if (v9 != v10)
        return result;
      --v6;
      --v7;
      --v8;
      if (!--v5)
        goto LABEL_6;
    }
    return 1;
  }
}

char *sub_19BF993FC(uint64_t *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  result = (char *)operator new[](12 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (_DWORD *)(a1[1] + 8);
    v7 = result + 8;
    do
    {
      *((_QWORD *)v7 - 1) = *((_QWORD *)v6 - 1);
      v8 = *v6;
      v6 += 3;
      *v7 = v8;
      v7 += 3;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1A1AD0CB8);
  return result;
}

uint64_t sub_19BF99490(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)sub_19BF8FCC8(a2, 8uLL);
  *(_QWORD *)(a1 + 16) = sub_19BF8FCC8(a2, v4);
  sub_19BF8FC28(a2, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4;
  return sub_19BF93FD4(a1);
}

uint64_t sub_19BF994F0(uint64_t a1, uint64_t a2)
{
  uint64_t __buf;

  __buf = *(_QWORD *)(a1 + 24);
  sub_19BF8F868(a2, (char *)&__buf, 8uLL);
  sub_19BF99550(a2, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_19BF8F748(a2, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t sub_19BF99550(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *exception;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "h:33: MARISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  return sub_19BF8F868(a1, a2, a3);
}

double sub_19BF995AC(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 25) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  *(_OWORD *)((char *)a1 + 73) = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  *(_OWORD *)((char *)a1 + 185) = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  *(_OWORD *)((char *)a1 + 233) = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  *(_OWORD *)((char *)a1 + 137) = 0u;
  return result;
}

uint64_t sub_19BF995E0(__int128 *a1, uint64_t a2, __int128 *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t result;
  _QWORD *exception;
  const char *v17;
  _OWORD v18[3];
  _OWORD v19[4];
  __int128 v20;
  _BYTE v21[25];
  __int128 v22;
  _BYTE v23[25];
  __int128 v24;
  _BYTE v25[25];

  if (!a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x200000011;
    v17 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc:17: MA"
          "RISA_NULL_ERROR: offsets == NULL";
    goto LABEL_28;
  }
  if (a4 == 0x2000)
    goto LABEL_15;
  if (a4 != 4096)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x500000028;
    v17 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc:40: MA"
          "RISA_CODE_ERROR: undefined tail mode";
LABEL_28:
    exception[3] = v17;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = 0;
    a4 = 4096;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + 8) + 16 * v6;
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8)
        break;
LABEL_11:
      if (++v6 == v5)
        goto LABEL_15;
    }
    v9 = -v8;
    v10 = *(_QWORD *)v7 + 1;
    while (*(_BYTE *)(v10 + v9))
    {
      if (__CFADD__(v9++, 1))
        goto LABEL_11;
    }
    a4 = 0x2000;
  }
  else
  {
    a4 = 4096;
  }
LABEL_15:
  memset(v18, 0, 41);
  memset(v19, 0, 41);
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  v19[3] = 0u;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  sub_19BF99820((uint64_t)v18, a2, a3, a4);
  v12 = *a1;
  *a1 = v18[0];
  v18[0] = v12;
  v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v18[1];
  *(_QWORD *)&v18[1] = v13;
  v14 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)((char *)&v18[1] + 8) = v14;
  LOBYTE(v13) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v18[2]);
  BYTE8(v18[2]) = v13;
  sub_19BF91DA4((uint64_t *)a1 + 6, (uint64_t *)v19);
  if ((_QWORD)v24)
    MEMORY[0x1A1AD0CB8](v24, 0x1000C8077774924);
  if ((_QWORD)v22)
    MEMORY[0x1A1AD0CB8](v22, 0x1000C8077774924);
  if ((_QWORD)v20)
    MEMORY[0x1A1AD0CB8](v20, 0x1000C8077774924);
  if (*(_QWORD *)&v19[0])
    MEMORY[0x1A1AD0CB8](*(_QWORD *)&v19[0], 0x1000C8077774924);
  result = *(_QWORD *)&v18[0];
  if (*(_QWORD *)&v18[0])
    return MEMORY[0x1A1AD0CB8](*(_QWORD *)&v18[0], 0x1000C8077774924);
  return result;
}

void sub_19BF9980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BF8FF28(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF99820(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t result;
  _QWORD *exception;
  _QWORD *v31;
  char v32;
  _QWORD v33[2];
  _OWORD v34[3];

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v10 = 0;
    v11 = (_DWORD *)(v9 + 12);
    do
    {
      *v11 = v10;
      v11 += 4;
      ++v10;
    }
    while (v8 != v10);
  }
  sub_19BF9A0DC(v9, v9 + 16 * v8, 0);
  memset(v34, 0, 41);
  v12 = *(_QWORD *)(a2 + 24);
  LODWORD(v33[0]) = 0;
  sub_19BF99F9C((uint64_t *)v34, v12, v33);
  v33[0] = 0;
  v33[1] = 0;
  v13 = *(_QWORD *)(a2 + 24);
  if (v13)
  {
    v14 = v33;
    do
    {
      --v13;
      v15 = *(_QWORD *)(a2 + 8);
      v16 = v15 + 16 * v13;
      v18 = (unsigned int *)(v16 + 8);
      v17 = *(unsigned int *)(v16 + 8);
      if (!*(_DWORD *)(v16 + 8))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_1E3D11E20;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
        exception[2] = 0x4000000ACLL;
        exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/t"
                       "ail.cc:172: MARISA_RANGE_ERROR: current.length() == 0";
        __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
      }
      v19 = 0;
      v20 = 0;
      v21 = *((unsigned int *)v14 + 2);
      while (v21 != v20)
      {
        if (*(unsigned __int8 *)(*v14 + v19) != *(unsigned __int8 *)(*(_QWORD *)v16 + v19))
          goto LABEL_13;
        ++v20;
        --v19;
        if (v17 == v20)
          goto LABEL_14;
      }
      v20 = *((unsigned int *)v14 + 2);
LABEL_13:
      if (v20 != v17)
      {
        v22 = *((_QWORD *)&v34[0] + 1);
        goto LABEL_17;
      }
LABEL_14:
      v22 = *((_QWORD *)&v34[0] + 1);
      if ((_DWORD)v21)
      {
        *(_DWORD *)(*((_QWORD *)&v34[0] + 1) + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = v21
                                                                                             - v17
                                                                                             + *(_DWORD *)(*((_QWORD *)&v34[0] + 1) + 4 * *((unsigned int *)v14 + 3));
        goto LABEL_29;
      }
LABEL_17:
      *(_DWORD *)(v22 + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = *(_QWORD *)(a1 + 24);
      v23 = *v18;
      if ((_DWORD)v23)
      {
        for (i = 0; i < v23; ++i)
        {
          v32 = *(_BYTE *)(*(_QWORD *)v16 - v23 + i + 1);
          sub_19BF95408((uint64_t *)a1, &v32);
          v23 = *v18;
        }
        if (a4 != 4096)
        {
          if (v23 >= 2)
          {
            v25 = 1;
            do
            {
              sub_19BF92138((uint64_t *)(a1 + 48), 0);
              ++v25;
            }
            while (v25 < *v18);
          }
LABEL_27:
          sub_19BF92138((uint64_t *)(a1 + 48), 1);
          goto LABEL_28;
        }
      }
      else if (a4 != 4096)
      {
        goto LABEL_27;
      }
      v32 = 0;
      sub_19BF95408((uint64_t *)a1, &v32);
LABEL_28:
      if (*(_DWORD *)(a1 + 28))
      {
        v31 = __cxa_allocate_exception(0x20uLL);
        *v31 = &off_1E3D11E20;
        v31[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
        v31[2] = 0x7000000C2;
        v31[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc"
                 ":194: MARISA_SIZE_ERROR: buf_.size() > MARISA_UINT32_MAX";
        __cxa_throw(v31, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
      }
LABEL_29:
      v14 = (_QWORD *)v16;
    }
    while (v13);
  }
  sub_19BF95578((_BYTE *)a1);
  v26 = *a3;
  *a3 = v34[0];
  v34[0] = v26;
  v27 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = *(_QWORD *)&v34[1];
  *(_QWORD *)&v34[1] = v27;
  v28 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v34[1] + 8);
  *(_OWORD *)((char *)&v34[1] + 8) = v28;
  LOBYTE(v27) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v34[2]);
  result = v26;
  BYTE8(v34[2]) = v27;
  if ((_QWORD)v26)
    return MEMORY[0x1A1AD0CB8](v26, 0x1000C8077774924);
  return result;
}

void sub_19BF99B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1A1AD0CB8](a13, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19BF99B5C(uint64_t *a1, uint64_t *a2)
{
  sub_19BF91E08(a1, a2);
  return sub_19BF91DA4(a1 + 6, a2 + 6);
}

uint64_t sub_19BF99B88(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  __int128 v8[3];
  _OWORD v9[4];
  __int128 v10;
  _BYTE v11[25];
  __int128 v12;
  _BYTE v13[25];
  __int128 v14;
  _BYTE v15[25];

  memset(v8, 0, 41);
  memset(v9, 0, 41);
  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v9[3] = 0u;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  sub_19BF9A020(v8, a2);
  sub_19BF92B60((uint64_t *)v9, a2);
  v4 = *(_OWORD *)a1;
  *(_OWORD *)a1 = v8[0];
  v8[0] = v4;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)&v8[1];
  *(_QWORD *)&v8[1] = v5;
  v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)&v8[1] + 8);
  *(__int128 *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  sub_19BF91DA4((uint64_t *)(a1 + 48), (uint64_t *)v9);
  if ((_QWORD)v14)
    MEMORY[0x1A1AD0CB8](v14, 0x1000C8077774924);
  if ((_QWORD)v12)
    MEMORY[0x1A1AD0CB8](v12, 0x1000C8077774924);
  if ((_QWORD)v10)
    MEMORY[0x1A1AD0CB8](v10, 0x1000C8077774924);
  if (*(_QWORD *)&v9[0])
    MEMORY[0x1A1AD0CB8](*(_QWORD *)&v9[0], 0x1000C8077774924);
  result = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return MEMORY[0x1A1AD0CB8](*(_QWORD *)&v8[0], 0x1000C8077774924);
  return result;
}

void sub_19BF99CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BF8FF28(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF99CF0(uint64_t a1, uint64_t a2)
{
  sub_19BF994F0(a1, a2);
  return sub_19BF9461C(a1 + 48, a2);
}

void sub_19BF99D1C(_QWORD *a1, std::string *this, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  std::string::value_type v8;
  unsigned __int8 *v9;
  int v10;

  v3 = a3;
  if (a1[12])
  {
    do
    {
      std::string::push_back(this, *(_BYTE *)(a1[2] + v3));
      v6 = *(_QWORD *)(a1[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
      ++v3;
    }
    while ((v6 & 1) == 0);
  }
  else
  {
    v7 = a1[2];
    v8 = *(_BYTE *)(v7 + a3);
    if (v8)
    {
      v9 = (unsigned __int8 *)(a3 + v7 + 1);
      do
      {
        std::string::push_back(this, v8);
        v10 = *v9++;
        v8 = v10;
      }
      while (v10);
    }
  }
}

uint64_t sub_19BF99DA8(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;

  v5 = a1[2];
  if (a1[12])
  {
    v6 = *a4;
    do
    {
      if (*(unsigned __int8 *)(v5 + a5) != *(unsigned __int8 *)(a2 + v6))
        break;
      *a4 = ++v6;
      if (((*(_QWORD *)(a1[8] + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
        return 1;
      ++a5;
    }
    while (v6 < a3);
  }
  else
  {
    v7 = (unsigned __int8 *)(v5 + a5);
    v8 = *a4;
    v11 = *v7;
    v9 = v7 + 1;
    v10 = v11;
    while (v10 == *(unsigned __int8 *)(a2 + v8))
    {
      *a4 = ++v8;
      v10 = *v9;
      if (!*v9)
        return 1;
      ++v9;
      if (v8 >= a3)
        return 0;
    }
  }
  return 0;
}

BOOL sub_19BF99E3C(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, std::string *this)
{
  unint64_t v7;
  unint64_t v12;
  int v13;
  int v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;

  v7 = a5;
  if (a1[12])
  {
    v12 = *a4;
    while (1)
    {
      v13 = *(unsigned __int8 *)(a1[2] + v7);
      v14 = *(unsigned __int8 *)(a2 + v12);
      v15 = v13 == v14;
      if (v13 != v14)
        break;
      std::string::push_back(this, v13);
      v12 = *a4 + 1;
      *a4 = v12;
      if (((*(_QWORD *)(a1[8] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        break;
      ++v7;
      if (v12 >= a3)
      {
        do
        {
          std::string::push_back(this, *(_BYTE *)(a1[2] + v7));
          v16 = *(_QWORD *)(a1[8] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7;
          ++v7;
        }
        while ((v16 & 1) == 0);
        return 1;
      }
    }
  }
  else
  {
    v17 = a1[2];
    v18 = *a4;
    v19 = v17 + a5 - *a4;
    v20 = *(_BYTE *)(v17 + a5);
    v21 = *a4;
    while (1)
    {
      v22 = *(unsigned __int8 *)(a2 + v21);
      v15 = v20 == v22;
      if (v20 != v22)
        break;
      std::string::push_back(this, v20);
      v23 = *a4;
      v21 = *a4 + 1;
      *a4 = v21;
      v20 = *(_BYTE *)(v19 + v21);
      if (!v20)
        break;
      if (v21 >= a3)
      {
        v24 = (unsigned __int8 *)(v7 - v18 + v17 + v23 + 2);
        do
        {
          std::string::push_back(this, v20);
          v25 = *v24++;
          v20 = v25;
        }
        while (v25);
        return 1;
      }
    }
  }
  return v15;
}

uint64_t *sub_19BF99F9C(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;

  v4 = a2;
  v5 = result;
  v6 = result[4];
  if (v6 < a2)
  {
    v7 = 2 * v6;
    if (v6 >> 61)
      v7 = 0x3FFFFFFFFFFFFFFFLL;
    if (v6 > a2 >> 1)
      a2 = v7;
    result = (uint64_t *)sub_19BF94598(result, a2);
  }
  v8 = v5[3];
  v9 = v4 - v8;
  if (v4 > v8)
  {
    v10 = (_DWORD *)(v5[1] + 4 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  v5[3] = v4;
  return result;
}

uint64_t sub_19BF9A020(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  sub_19BF99490((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  return result;
}

void sub_19BF9A0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF9A0DC(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 161)
  {
    v7 = 0;
    goto LABEL_68;
  }
  v7 = 0;
  do
  {
    v8 = sub_19BF9A470(v5, v5 + 16 * ((unint64_t)v6 >> 5), v4 - 16, a3);
    v9 = v8;
    v10 = v5;
    v11 = v4;
    v12 = v5;
    v13 = v4;
    while (v10 < v11)
    {
      v14 = *(unsigned int *)(v10 + 8);
      v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(_QWORD *)v10 - a3);
      if (v15 > v8)
        break;
      if (v15 == v8)
      {
        v16 = *(_QWORD *)v10;
        v17 = *(_DWORD *)(v10 + 12);
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v12 + 8);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_DWORD *)(v12 + 12) = v17;
        v12 += 16;
      }
LABEL_11:
      v10 += 16;
    }
    if (v10 < v11)
    {
      v18 = v11 - 16;
      do
      {
        v11 = v18;
        v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19)
          v20 = -1;
        else
          v20 = *(unsigned __int8 *)(*(_QWORD *)v11 - a3);
        if (v20 < v8)
          break;
        if (v20 == v8)
        {
          v21 = *(_QWORD *)(v13 - 16);
          v13 -= 16;
          v22 = *(_QWORD *)v11;
          v23 = *(_DWORD *)(v11 + 12);
          *(_QWORD *)v11 = v21;
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(v13 + 8);
          *(_QWORD *)v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_DWORD *)(v13 + 12) = v23;
        }
        v18 = v11 - 16;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      v24 = *(_QWORD *)v10;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v25 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v11 = v24;
      v26 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v25;
      *(_QWORD *)(v11 + 8) = v26;
      goto LABEL_11;
    }
    v42 = v7;
    while (v12 > v5)
    {
      v28 = *(_QWORD *)(v12 - 16);
      v12 -= 16;
      v27 = v28;
      v29 = *(_QWORD *)(v10 - 16);
      v10 -= 16;
      *(_QWORD *)v12 = v29;
      v30 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)v10 = v27;
      v31 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v30;
      *(_QWORD *)(v10 + 8) = v31;
    }
    while (v13 < v4)
    {
      v32 = *(_QWORD *)v13;
      *(_QWORD *)v13 = *(_QWORD *)v11;
      v33 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v11 = v32;
      v34 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v33;
      *(_QWORD *)(v11 + 8) = v34;
      v11 += 16;
      v13 += 16;
    }
    v35 = v10 - v5;
    v36 = (uint64_t)(v10 - v5) >> 4;
    v37 = v11 - v10;
    if (v36 <= (uint64_t)(v11 - v10) >> 4)
    {
      v38 = v4 - v11;
      if (v37 >> 4 >= (uint64_t)(v4 - v11) >> 4)
      {
        if (v35 == 16)
        {
          v39 = v42 + 1;
        }
        else
        {
          if (v35 < 17)
            goto LABEL_52;
          v39 = sub_19BF9A0DC(v5, v10, a3) + v42;
        }
        v42 = v39;
LABEL_52:
        if (v38 == 16)
        {
          v7 = v42 + 1;
        }
        else if (v38 < 17)
        {
          v7 = v42;
        }
        else
        {
          v7 = sub_19BF9A0DC(v11, v4, a3) + v42;
        }
        if (v37 == 16)
        {
          ++v7;
        }
        else if (v37 >= 17)
        {
          if (v9 == -1)
          {
            ++v7;
            v5 = v11;
            goto LABEL_63;
          }
          ++a3;
        }
        v5 = v10;
LABEL_63:
        v4 = v11;
        goto LABEL_64;
      }
    }
    if (v37 == 16)
      goto LABEL_31;
    if (v37 < 17)
    {
      v7 = v42;
    }
    else if (v8 == -1)
    {
LABEL_31:
      v7 = v42 + 1;
    }
    else
    {
      v7 = sub_19BF9A0DC(v10, v11, a3 + 1) + v42;
    }
    v40 = v4 - v11;
    if (v36 >= (uint64_t)(v4 - v11) >> 4)
    {
      if (v40 == 16)
      {
        ++v7;
      }
      else if (v40 >= 17)
      {
        v7 += sub_19BF9A0DC(v11, v4, a3);
      }
      v4 = v10;
    }
    else
    {
      if (v35 == 16)
      {
        ++v7;
      }
      else if (v35 >= 17)
      {
        v7 += sub_19BF9A0DC(v5, v10, a3);
      }
      v5 = v11;
    }
LABEL_64:
    v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 160);
LABEL_68:
  if (v6 >= 17)
    v7 += sub_19BF9A4F0(v5, v4, a3);
  return v7;
}

uint64_t sub_19BF9A470(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(unsigned int *)(a1 + 8) <= a4)
    v4 = -1;
  else
    v4 = *(unsigned __int8 *)(*(_QWORD *)a1 - a4);
  if (*(unsigned int *)(a2 + 8) <= a4)
    v5 = -1;
  else
    v5 = *(unsigned __int8 *)(*(_QWORD *)a2 - a4);
  if (*(unsigned int *)(a3 + 8) <= a4)
    v6 = -1;
  else
    v6 = *(unsigned __int8 *)(*(_QWORD *)a3 - a4);
  if (v4 <= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 >= v5)
    v4 = v5;
  if (v4 <= v6)
    v4 = v6;
  if (v7 >= v6)
    return v4;
  else
    return v7;
}

uint64_t sub_19BF9A4F0(unint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (_QWORD *)(a1 + 16);
  if (a1 + 16 >= a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v3;
    if ((unint64_t)v3 <= a1)
    {
      v10 = 0;
    }
    else
    {
      while (1)
      {
        v9 = v8 - 2;
        v10 = sub_19BF9A5BC((uint64_t)(v8 - 2), (uint64_t)v8, a3);
        if (v10 < 1)
          break;
        v11 = *(v8 - 2);
        *(v8 - 2) = *v8;
        v12 = v8[1];
        *v8 = v11;
        v13 = *(v8 - 1);
        *(v8 - 1) = v12;
        v8[1] = v13;
        v8 -= 2;
        if ((unint64_t)v9 <= a1)
        {
          v10 = 1;
          break;
        }
      }
    }
    if (v10)
      ++v7;
    v3 += 2;
  }
  while ((unint64_t)v3 < a2);
  return v7;
}

uint64_t sub_19BF9A5BC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4)
      v12 = -1;
    else
      v12 = 1;
    if ((_DWORD)v3 == (_DWORD)v4)
      return 0;
    else
      return v12;
  }
  else
  {
    v6 = v4 - a3;
    v7 = (unsigned __int8 *)(*(_QWORD *)a2 - a3);
    v8 = (unsigned __int8 *)(*(_QWORD *)a1 - a3);
    while (v6)
    {
      v9 = *v8;
      v10 = *v7;
      result = (v9 - v10);
      if (v9 != v10)
        return result;
      --v6;
      --v7;
      --v8;
      if (!--v5)
        goto LABEL_6;
    }
    return 1;
  }
}

uint64_t sub_19BF9A628(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2 >> 9;
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(unsigned int *)(v3 + 12 * (a2 >> 9));
  switch((a2 >> 6) & 7)
  {
    case 1uLL:
      v5 = *(_DWORD *)(v3 + 12 * v2 + 4) & 0x7F;
      goto LABEL_10;
    case 2uLL:
      v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 7;
      goto LABEL_5;
    case 3uLL:
      v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 15;
LABEL_5:
      v4 += v6;
      break;
    case 4uLL:
      v4 += (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 23;
      break;
    case 5uLL:
      v5 = *(_DWORD *)(v3 + 12 * v2 + 8) & 0x1FF;
      goto LABEL_10;
    case 6uLL:
      v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 9) & 0x1FF;
      goto LABEL_10;
    case 7uLL:
      v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 18) & 0x1FF;
LABEL_10:
      v4 += v5;
      break;
    default:
      break;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (a2 >> 6)) & ~(-1 << a2);
  v8 = (((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) & 0x3333333333333333);
  return v4 + ((0x101010101010101 * (((v8 >> 4) & 0x707070707070707) + (v8 & 0x707070707070707))) >> 56);
}

unint64_t sub_19BF9A74C(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1[16];
  if ((a2 & 0x1FF) == 0)
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  v5 = a1[10];
  if (v3 + 10 >= v4)
  {
    v7 = v5 + 12 * v3;
    v8 = v3-- << 9;
    v9 = (unsigned int *)(v7 + 12);
    do
    {
      v10 = *v9;
      v9 += 3;
      ++v3;
      v8 += 512;
    }
    while (v8 - v10 <= a2);
  }
  else
  {
    do
    {
      if (((v4 + v3) >> 1 << 9) - *(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2)
        v4 = (v4 + v3) >> 1;
      else
        v3 = (v4 + v3) >> 1;
    }
    while (v3 + 1 < v4);
  }
  v11 = (unsigned int *)(v5 + 12 * v3);
  v12 = v11[1];
  v13 = a2 - (v3 << 9) + *v11;
  v14 = 8 * v3;
  if (v13 >= 256 - (v12 >> 23))
  {
    v15 = *(unsigned int *)(v5 + 12 * v3 + 8);
    v16 = (v15 >> 9) & 0x1FF;
    if (v13 >= 384 - v16)
    {
      v18 = (v15 >> 18) & 0x1FF;
      if (v13 >= 448 - v18)
      {
        v14 |= 7uLL;
        v13 = v13 + v18 - 448;
      }
      else
      {
        v14 |= 6uLL;
        v13 = v13 + v16 - 384;
      }
    }
    else if (v13 >= 320 - (v15 & 0x1FF))
    {
      v14 |= 5uLL;
      v13 = v13 + (v15 & 0x1FF) - 320;
    }
    else
    {
      v14 |= 4uLL;
      v13 = (v12 >> 23) + v13 - 256;
    }
  }
  else if (v13 >= 128 - (unint64_t)(v12 >> 7))
  {
    v17 = (v12 >> 15);
    if (v13 >= 192 - v17)
    {
      v14 |= 3uLL;
      v13 = v13 + v17 - 192;
    }
    else
    {
      v14 |= 2uLL;
      v13 = v13 + (v12 >> 7) - 128;
    }
  }
  else if (v13 >= 64 - (v12 & 0x7F))
  {
    v14 |= 1uLL;
    v13 = (v12 & 0x7F) + v13 - 64;
  }
  return sub_19BF9A930(v13, v14 << 6, ~*(_QWORD *)(a1[2] + 8 * v14));
}

unint64_t sub_19BF9A930(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (((a3 - ((a3 >> 1) & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((a3 - ((a3 >> 1) & 0x5555555555555555)) & 0x3333333333333333);
  v4 = (v3 + (v3 >> 4)) & 0xF0F0F0F0F0F0F0FLL;
  v5 = __clz(__rbit64(((((0x101010101010101 * v4) | 0x8080808080808080)
                      - 0x101010101010101 * a1
                      - 0x101010101010101) >> 7) & 0x101010101010101));
  return v5
       + a2
       + byte_19C063F06[256 * (a1 - ((unint64_t)(0x101010101010100 * v4) >> v5))
                      + (a3 >> v5)];
}

unint64_t sub_19BF9A9B8(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;

  v2 = a1[22];
  if ((a2 & 0x1FF) == 0)
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  v5 = a1[10];
  if (v3 + 10 >= v4)
  {
    v7 = v5 + 12 * v3--;
    v8 = (unsigned int *)(v7 + 12);
    do
    {
      v9 = *v8;
      v8 += 3;
      ++v3;
    }
    while (v9 <= a2);
  }
  else
  {
    do
    {
      if (*(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2)
        v4 = (v4 + v3) >> 1;
      else
        v3 = (v4 + v3) >> 1;
    }
    while (v3 + 1 < v4);
  }
  v10 = (unsigned int *)(v5 + 12 * v3);
  v11 = v10[1];
  v12 = a2 - *v10;
  v13 = 8 * v3;
  if (v12 >= v11 >> 23)
  {
    v23 = v11 >> 23;
    v24 = *(unsigned int *)(v5 + 12 * v3 + 8);
    v25 = (v24 >> 9) & 0x1FF;
    v26 = (v24 >> 18) & 0x1FF;
    v27 = v13 | 7;
    v28 = v12 >= v26;
    if (v12 < v26)
      v29 = v12 - v25;
    else
      v29 = v12 - v26;
    if (!v28)
      v27 = v13 | 6;
    v30 = v24 & 0x1FF;
    v31 = v13 | 5;
    v32 = v13 | 4;
    v33 = v12 - v23;
    v34 = v12 >= v30;
    if (v12 < v30)
      v21 = v33;
    else
      v21 = v12 - v30;
    if (v34)
      v32 = v31;
    if (v12 < v25)
    {
      v22 = v32;
    }
    else
    {
      v21 = v29;
      v22 = v27;
    }
  }
  else
  {
    v14 = v11 >> 7;
    v15 = (v11 >> 15);
    v16 = v12 - (v11 >> 7);
    if (v12 < v15)
    {
      v17 = v13 | 2;
    }
    else
    {
      v16 = v12 - v15;
      v17 = v13 | 3;
    }
    v18 = v11 & 0x7F;
    v20 = v12 >= v18;
    v19 = v12 - v18;
    if (v20)
      v13 |= 1uLL;
    else
      v19 = v12;
    v20 = v12 >= v14;
    if (v12 < v14)
      v21 = v19;
    else
      v21 = v16;
    if (v20)
      v22 = v17;
    else
      v22 = v13;
  }
  return sub_19BF9A930(v21, v22 << 6, *(_QWORD *)(a1[2] + 8 * v22));
}

void sub_19BF9AB2C(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;

  v8 = a2[6];
  v9 = a1 + 8;
  v10 = v8 >> 9;
  if ((v8 & 0x1FF) != 0)
    ++v10;
  sub_19BF94430(v9, v10 + 1);
  if (a2[3])
    __asm { BR              X10 }
  if ((v8 & 0x1FF) != 0)
  {
    v11 = (v8 - 1) >> 9;
    switch(((v8 - 1) >> 6) & 7)
    {
      case 0uLL:
        v12 = a1[9];
        v13 = (_DWORD *)(v12 + 12 * v11);
        v14 = -*v13;
        v15 = v13[1] & 0xFFFFFF80 | v14 & 0x7F;
        v13[1] = v15;
        goto LABEL_9;
      case 1uLL:
        v12 = a1[9];
        v16 = (_DWORD *)(v12 + 12 * v11);
        v15 = v16[1];
        v14 = -*v16;
LABEL_9:
        v17 = v15 & 0xFFFF807F | (v14 << 7);
        *(_DWORD *)(v12 + 12 * v11 + 4) = v17;
        goto LABEL_11;
      case 2uLL:
        v12 = a1[9];
        v18 = (_DWORD *)(v12 + 12 * v11);
        v17 = v18[1];
        v14 = -*v18;
LABEL_11:
        v19 = v17 & 0xFF807FFF | (v14 << 15);
        *(_DWORD *)(v12 + 12 * v11 + 4) = v19;
        goto LABEL_13;
      case 3uLL:
        v12 = a1[9];
        v20 = (_DWORD *)(v12 + 12 * v11);
        v19 = v20[1];
        v14 = -*v20;
LABEL_13:
        *(_DWORD *)(v12 + 12 * v11 + 4) = v19 & 0x7FFFFF | ((unsigned __int16)v14 << 23);
        goto LABEL_15;
      case 4uLL:
        v12 = a1[9];
        v14 = -*(_DWORD *)(v12 + 12 * v11);
LABEL_15:
        v21 = v12 + 12 * v11;
        v22 = *(_DWORD *)(v21 + 8) & 0xFFFFFE00 | v14 & 0x1FF;
        *(_DWORD *)(v21 + 8) = v22;
        goto LABEL_16;
      case 5uLL:
        v12 = a1[9];
        v25 = (_DWORD *)(v12 + 12 * v11);
        v22 = v25[2];
        v14 = -*v25;
LABEL_16:
        v23 = v22 & 0xFFFC01FF | ((v14 & 0x1FF) << 9);
        *(_DWORD *)(v12 + 12 * v11 + 8) = v23;
        goto LABEL_17;
      case 6uLL:
        v12 = a1[9];
        v26 = (_DWORD *)(v12 + 12 * v11);
        v23 = v26[2];
        v14 = -*v26;
LABEL_17:
        *(_DWORD *)(v12 + 12 * v11 + 8) = v23 & 0xF803FFFF | ((v14 & 0x1FF) << 18);
        break;
      default:
        break;
    }
  }
  a1[6] = v8;
  a1[7] = a2[7];
  *(_DWORD *)(a1[9] + 12 * a1[11] - 12) = 0;
  if (a3)
  {
    v27 = v8;
    sub_19BF9AF98(a1 + 14, &v27);
    sub_19BF9B004((_DWORD *)a1 + 28);
  }
  if (a4)
  {
    v24 = a1 + 20;
    v27 = v8;
    sub_19BF9AF98(v24, &v27);
    sub_19BF9B004(v24);
  }
}

uint64_t *sub_19BF9AF98(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[3];
  v5 = result[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 >> 61)
      v7 = 0x3FFFFFFFFFFFFFFFLL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    result = (uint64_t *)sub_19BF94598(result, v8);
    v4 = v3[3];
    v6 = v4 + 1;
  }
  *(_DWORD *)(v3[1] + 4 * v4) = *a2;
  v3[3] = v6;
  return result;
}

_DWORD *sub_19BF9B004(_DWORD *result)
{
  uint64_t v1;
  _QWORD *exception;

  if (*((_BYTE *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E3D11E20;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D11118, (void (*)(void *))std::exception::~exception);
  }
  v1 = *((_QWORD *)result + 3);
  if (v1 != *((_QWORD *)result + 4))
    return sub_19BF94598((uint64_t *)result, v1);
  return result;
}

uint64_t sub_19BF9B078(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_19BF9B0C8();
  v3 = sub_19BF9C2C0(a1);
  v4 = *(_QWORD *)(v2 + 8 * (v3 & 3));
  return (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v4 + 40))(v4, a1, v3);
}

uint64_t sub_19BF9B0C8()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1EE417280);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EE417280))
  {
    v2 = operator new();
    sub_19BF9B174(v2);
    qword_1EE417278 = v2;
    __cxa_guard_release(&qword_1EE417280);
  }
  return qword_1EE417278;
}

void sub_19BF9B13C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CDC](v1, 0x20C40DC1BFBCFLL);
  __cxa_guard_abort(&qword_1EE417280);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF9B174(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = (_QWORD *)operator new();
  *v2 = &off_1E3D139A0;
  *(_QWORD *)a1 = v2;
  v3 = (_QWORD *)operator new();
  *v3 = &off_1E3D139F0;
  *(_QWORD *)(a1 + 24) = v3;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E3D13A90;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E3D13A40;
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_19BF9B23C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8 * (*(_DWORD *)(a3 + 12) & 3));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
}

uint64_t sub_19BF9B254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8 * (*(_DWORD *)(a3 + 12) & 3));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

uint64_t sub_19BF9B26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8 * (*(_DWORD *)(a3 + 12) & 3));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
}

uint64_t sub_19BF9B284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(a1 + 8 * (*(_DWORD *)(a3 + 12) & 3));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
}

BOOL sub_19BF9B2A8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 12);
  return (v1 & 3) != 0 && v1 != -1;
}

unint64_t sub_19BF9B2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(int *)(a3 + 12) & 0xFFFFFFFFFFFFFFFCLL) + *(_QWORD *)(a2 + 8);
}

uint64_t sub_19BF9B2D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;

  v5 = *(_QWORD *)(sub_19BF9B0C8()
                 + 8
                 * (*(_DWORD *)(*(_QWORD *)(a2 + 8) + (*(int *)(a3 + 12) & 0xFFFFFFFFFFFFFFFCLL) + 4 * a4 + 4) & 3));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, a2);
}

void sub_19BF9B32C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v24[6];
  _QWORD v25[2];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE v29[8];

  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(int *)(a3 + 12) & 0xFFFFFFFFFFFFFFFCLL;
  v26 = 0;
  v27 = &v26;
  v28 = 0x2000000000;
  v29[0] = 0;
  v14 = *(unsigned int *)(v12 + v13);
  if ((_DWORD)v14)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t, _BYTE *))(a7 + 16))(a7, v14, a4, v29);
    v15 = *((_BYTE *)v27 + 24) != 0;
  }
  else
  {
    v15 = 0;
  }
  if (a5 - 1 >= a4 && !v15)
  {
    v16 = sub_19BF9B0C8();
    if (!*((_BYTE *)v27 + 24))
    {
      v17 = v16;
      v18 = 0;
      v19 = v13 + v12 + 4;
      do
      {
        v20 = *(_QWORD *)(v17 + 8 * (*(_DWORD *)(v19 + 4 * v18) & 3));
        v25[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 40))(v20, a2);
        v25[1] = v21;
        if (a6)
          *(_BYTE *)(a6 + a4) = v18;
        v24[0] = MEMORY[0x1E0C809B0];
        v24[1] = 0x40000000;
        v24[2] = sub_19BF9B4E4;
        v24[3] = &unk_1E3D14FF8;
        v24[4] = a7;
        v24[5] = &v26;
        v22 = *(_QWORD *)(v17 + 8 * (HIDWORD(v21) & 3));
        (*(void (**)(uint64_t, uint64_t, _QWORD *, unint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v22 + 24))(v22, a2, v25, a4 + 1, a5, a6, v24);
        if (*((_BYTE *)v27 + 24))
          break;
      }
      while (v18++ < 0xFF);
    }
  }
  _Block_object_dispose(&v26, 8);
}

void sub_19BF9B4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF9B4E4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return result;
}

uint64_t sub_19BF9B52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 8) + (*(int *)(a3 + 12) & 0xFFFFFFFFFFFFFFFCLL));
}

uint64_t sub_19BF9B540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  _QWORD v15[2];
  char v16;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(int *)(a3 + 12) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = sub_19BF9B0C8();
  v9 = 0;
  v16 = 0;
  v10 = v7 + v6 + 4;
  do
  {
    v11 = *(_QWORD *)(v8 + 8 * (*(_DWORD *)(v10 + 4 * v9) & 3));
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, a2);
    v15[0] = result;
    v15[1] = v13;
    v14 = HIDWORD(v13) == -1 || (v13 & 0x300000000) == 0;
    if (!v14)
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *, char *))(a4 + 16))(a4, v9, v15, &v16);
    if (v16)
      break;
    v14 = v9++ == 255;
  }
  while (!v14);
  return result;
}

uint64_t sub_19BF9B600(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  char v12;
  uint64_t v13;
  int8x8_t v14;
  int v15;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint8x8_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(int *)(a3 + 12) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a4 >> 5;
  v7 = v4 + v5 + 4 * (a4 >> 5);
  v9 = *(_DWORD *)(v7 + 4);
  v8 = (_DWORD *)(v7 + 4);
  if (((v9 >> a4) & 1) == 0)
    return 0;
  v12 = a4 & 0x1F;
  v13 = sub_19BF9B0C8();
  if (a4 >= 0x20)
  {
    v15 = 0;
    if (v6 <= 1)
      v17 = 1;
    else
      v17 = v6;
    v18 = (unsigned int *)(v5 + v4 + 4);
    do
    {
      v19 = *v18++;
      v14 = vcnt_s8((int8x8_t)v19);
      v14.i16[0] = vaddlv_u8((uint8x8_t)v14);
      v15 += v14.i32[0];
      --v17;
    }
    while (v17);
  }
  else
  {
    v15 = 0;
  }
  v14.i32[0] = *v8 & ~(-1 << v12);
  v20 = (uint8x8_t)vcnt_s8(v14);
  v20.i16[0] = vaddlv_u8(v20);
  v21 = *(_QWORD *)(v13 + 8 * (*(_DWORD *)(v4 + v5 + 4 * (v20.i32[0] + v15) + 40) & 3));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 40))(v21, a2);
}

void sub_19BF9B708(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int8x8_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v33;
  _QWORD v34[6];
  _QWORD v35[2];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39[8];

  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(int *)(a3 + 12) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v12 + v13;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39[0] = 0;
  v15 = *(unsigned int *)(v12 + v13);
  if ((_DWORD)v15)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t, char *))(a7 + 16))(a7, v15, a4, v39);
    v16 = *((_BYTE *)v37 + 24) != 0;
  }
  else
  {
    v16 = 0;
  }
  v33 = a4;
  if (a5 - 1 >= a4 && !v16)
  {
    v17 = sub_19BF9B0C8();
    v19 = v37;
    if (!*((_BYTE *)v37 + 24))
    {
      v20 = v17;
      v21 = 0;
      v22 = v13 + v12 + 4;
      do
      {
        if (v21 >> 5 <= 1)
          v23 = 1;
        else
          v23 = v21 >> 5;
        v24 = *(_DWORD *)(v14 + 4 * (v21 >> 5) + 4);
        if (((v24 >> v21) & 1) != 0)
        {
          if (v21 >= 0x20u)
          {
            v25 = 0;
            v26 = (unsigned int *)v22;
            do
            {
              v27 = *v26++;
              v18 = vcnt_s8((int8x8_t)v27);
              v18.i16[0] = vaddlv_u8((uint8x8_t)v18);
              v25 += v18.i32[0];
              --v23;
            }
            while (v23);
          }
          else
          {
            v25 = 0;
          }
          v18.i32[0] = v24 & ~(-1 << (v21 & 0x1F));
          v28 = (uint8x8_t)vcnt_s8(v18);
          v28.i16[0] = vaddlv_u8(v28);
          v29 = *(_QWORD *)(v20 + 8 * (*(_DWORD *)(v14 + 4 * (v28.i32[0] + v25) + 40) & 3));
          v35[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 40))(v29, a2);
          v35[1] = v30;
          if (a6)
            *(_BYTE *)(a6 + v33) = v21;
          v34[0] = MEMORY[0x1E0C809B0];
          v34[1] = 0x40000000;
          v34[2] = sub_19BF9B954;
          v34[3] = &unk_1E3D15020;
          v34[4] = a7;
          v34[5] = &v36;
          v31 = *(_QWORD *)(v20 + 8 * (HIDWORD(v30) & 3));
          (*(void (**)(uint64_t, uint64_t, _QWORD *, unint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v31 + 24))(v31, a2, v35, v33 + 1, a5, a6, v34);
          v19 = v37;
        }
        if (*((_BYTE *)v19 + 24))
          break;
      }
      while (v21++ < 0xFF);
    }
  }
  _Block_object_dispose(&v36, 8);
}

void sub_19BF9B934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF9B954(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return result;
}

uint64_t sub_19BF9B99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t result;
  int8x8_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  uint8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  char v21;

  v6 = *(_QWORD *)(a2 + 8) + (*(int *)(a3 + 12) & 0xFFFFFFFFFFFFFFFCLL);
  result = sub_19BF9B0C8();
  v9 = result;
  v10 = 0;
  v21 = 0;
  while (1)
  {
    v11 = v10 >> 5 <= 1 ? 1 : v10 >> 5;
    v12 = *(_DWORD *)(v6 + 4 * (v10 >> 5) + 4);
    if (((v12 >> v10) & 1) != 0)
      break;
    if (v10 > 0xFE)
      return result;
LABEL_19:
    ++v10;
  }
  if (v10 >= 0x20u)
  {
    v13 = 0;
    v14 = (unsigned int *)(v6 + 4);
    do
    {
      v15 = *v14++;
      v8 = vcnt_s8((int8x8_t)v15);
      v8.i16[0] = vaddlv_u8((uint8x8_t)v8);
      v13 += v8.i32[0];
      --v11;
    }
    while (v11);
  }
  else
  {
    v13 = 0;
  }
  v8.i32[0] = v12 & ~(-1 << (v10 & 0x1F));
  v16 = (uint8x8_t)vcnt_s8(v8);
  v16.i16[0] = vaddlv_u8(v16);
  v17 = *(_QWORD *)(v9 + 8 * (*(_DWORD *)(v6 + 4 * (v16.i32[0] + v13) + 40) & 3));
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, a2);
  v20[0] = result;
  v20[1] = v18;
  if (HIDWORD(v18) != -1 && (v18 & 0x300000000) != 0)
    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *, char *))(a4 + 16))(a4, v10, v20, &v21);
  if (!v21 && v10 < 0xFF)
    goto LABEL_19;
  return result;
}

uint64_t sub_19BF9BAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 8) + (*(int *)(a3 + 12) & 0xFFFFFFFFFFFFFFFCLL));
}

unsigned __int8 *sub_19BF9BB08(int a1, uint64_t a2, unsigned __int8 **a3, char a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  if (!*a3)
    return 0;
  v6 = (unsigned __int8 *)(*(_QWORD *)(a2 + 16) + (*((int *)a3 + 3) & 0xFFFFFFFFFFFFFFFCLL));
  memset(v12, 0, sizeof(v12));
  if (v4 <= v6 + 4)
  {
    if (v4 != v6 + 4)
      sub_19BF9C194();
    v10 = (unint64_t)(v6 + 8);
    LOBYTE(v12[0]) = a4;
    v9 = 1;
  }
  else
  {
    v7 = *v4;
    v8 = *((unsigned __int8 *)a3 + 8);
    a1 = memcpy(v12, v4 + 1, v8);
    v9 = v8 + 1;
    *((_BYTE *)v12 + v8) = a4;
    if (v8 >= v7)
      v10 = (unint64_t)&v4[v7 + 5];
    else
      v10 = (unint64_t)v4;
  }
  return sub_19BF9BC30(a1, v10, (unint64_t)&v6[*(unsigned int *)v6 + 4], v12, v9);
}

unsigned __int8 *sub_19BF9BC30(int a1, unint64_t __s1, unint64_t a3, void *__s2, unint64_t a5)
{
  unsigned __int8 *v8;
  size_t v9;
  unint64_t v10;
  int v11;

  if (__s1 >= a3)
    return 0;
  v8 = (unsigned __int8 *)__s1;
  v9 = (int)a5;
  while (1)
  {
    v10 = *v8;
    if (v10 >= a5)
    {
      v11 = memcmp(v8 + 1, __s2, v9);
      if (v11 > 0)
        return 0;
      if (!v11)
        break;
    }
    v8 += v10 + 5;
    if ((unint64_t)v8 >= a3)
      return 0;
  }
  return v8;
}

void sub_19BF9BCDC(uint64_t a1, uint64_t a2, unsigned int **a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v7;
  unsigned int *v13;
  unsigned int *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  size_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  size_t v24;
  int v25;
  int v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unsigned __int8 v30;
  _OWORD __dst[16];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  if (*a3)
  {
    v30 = 0;
    v13 = (unsigned int *)(*(_QWORD *)(a2 + 16) + (*((int *)a3 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    v14 = v13 + 1;
    if (v7 != v13 + 1
      || (v19 = *v7, !(_DWORD)v19)
      || ((*(void (**)(uint64_t, uint64_t, unint64_t, unsigned __int8 *))(a7 + 16))(a7, v19, a4, &v30),
          !v30))
    {
      if (a5 - 1 >= a4)
      {
        memset(__dst, 0, sizeof(__dst));
        v15 = (unsigned __int8 *)*a3;
        if (*a3 <= v14)
        {
          v17 = 0;
          v18 = (unsigned __int8 *)(v13 + 2);
        }
        else
        {
          v16 = *v15;
          v17 = *((unsigned __int8 *)a3 + 8);
          memcpy(__dst, v15 + 1, v17);
          if (v17 <= v16)
            v18 = v15;
          else
            v18 = &v15[v16 + 5];
        }
        v20 = a5 - a4;
        v28 = (void *)(a6 + a4);
        v29 = a4 - v17;
        do
        {
          if (v18 >= (unsigned __int8 *)v14 + *v13)
            break;
          v23 = *v18;
          v21 = (char *)(v18 + 1);
          v22 = v23;
          v24 = v23 - v17;
          if (v23 < v17 || a5 && v24 > v20)
            goto LABEL_19;
          v25 = memcmp(v21, __dst, v17);
          if (v25 > 0)
            return;
          if (v25 || (v27 = *(unsigned int *)&v21[v22], !(_DWORD)v27))
          {
LABEL_19:
            v26 = 0;
          }
          else
          {
            if (a6)
            {
              memcpy(v28, &v21[v17], v24);
              v27 = *(unsigned int *)&v21[v22];
            }
            (*(void (**)(uint64_t, uint64_t, unint64_t, unsigned __int8 *))(a7 + 16))(a7, v27, v29 + v22, &v30);
            v26 = v30;
          }
          v18 = (unsigned __int8 *)&v21[v22 + 4];
        }
        while (!v26);
      }
    }
  }
}

uint64_t sub_19BF9BECC(uint64_t a1, uint64_t a2, int a3)
{
  return *(_QWORD *)(a2 + 16) + (int)(a3 & 0xFFFFFFFC) + 4;
}

uint64_t sub_19BF9BEE4(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  unsigned int *v3;
  uint64_t v4;

  v3 = *a3;
  if (*a3 == (unsigned int *)(*(_QWORD *)(a2 + 16) + (*((int *)a3 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4))
    return *v3;
  v4 = *(unsigned __int8 *)v3;
  if ((_DWORD)v4 == *((unsigned __int8 *)a3 + 8))
  {
    v3 = (unsigned int *)((char *)v3 + v4 + 1);
    return *v3;
  }
  return 0;
}

uint64_t sub_19BF9BF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int8 *)(a3 + 8) + *(_QWORD *)a3;
}

void sub_19BF9BF3C(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  __int128 v7;
  uint64_t v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  size_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v19;
  char v20;
  char v21;
  int v22;
  unsigned __int8 v23;
  _OWORD v24[16];
  _BYTE __dst[264];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  if (*a3)
  {
    v6 = (unsigned __int8 *)(*(_QWORD *)(a2 + 16) + (*((int *)a3 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    v7 = 0uLL;
    memset(__dst, 0, 256);
    if (v4 <= v6 + 4)
    {
      v9 = 0;
      v10 = v6 + 8;
    }
    else
    {
      v8 = *v4;
      v9 = *((unsigned __int8 *)a3 + 8);
      memcpy(__dst, v4 + 1, v9);
      v7 = 0uLL;
      if (v9 >= v8)
        v10 = &v4[v8 + 5];
      else
        v10 = v4;
    }
    v11 = 0;
    v24[14] = v7;
    v24[15] = v7;
    v24[12] = v7;
    v24[13] = v7;
    v24[10] = v7;
    v24[11] = v7;
    v24[8] = v7;
    v24[9] = v7;
    v24[7] = v7;
    v24[5] = v7;
    v24[6] = v7;
    v24[3] = v7;
    v24[4] = v7;
    v24[1] = v7;
    v24[2] = v7;
    v24[0] = v7;
    v23 = 0;
    while (v10 < &v6[*(unsigned int *)v6 + 4])
    {
      v13 = v10 + 1;
      v12 = *v10;
      if (v9 > v12 || (v14 = v13[v9], *((_BYTE *)v24 + v14)))
      {
        v15 = 0;
      }
      else
      {
        v16 = memcmp(v10 + 1, __dst, v9);
        if (v16 > 0)
          return;
        if (!v16)
        {
          v17 = *((_DWORD *)a3 + 3);
          v19 = v10;
          v20 = v9 + 1;
          v21 = 0;
          v22 = v17;
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 **, unsigned __int8 *))(a4 + 16))(a4, v14, &v19, &v23);
          v11 = v23;
        }
        *((_BYTE *)v24 + v14) = 1;
        v15 = v11;
      }
      v10 = &v13[v12 + 4];
      if (v15)
        return;
    }
  }
}

uint64_t sub_19BF9C118()
{
  return 0;
}

uint64_t sub_19BF9C124()
{
  return 0;
}

void sub_19BF9C130()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19BF9C148()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19BF9C160()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19BF9C178()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BF9C18C()
{
  return 0;
}

void sub_19BF9C194()
{
  __assert_rtn("nextPositionForByte", "BTriePositionInterpreter.cpp", 405, "position.m_flatPageKey == page->bytes");
}

float sub_19BF9C1BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;

  v8 = malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
  if (v8)
  {
    LODWORD(v9) = 0;
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    *((_QWORD *)v8 + 7) = a1;
    *((_QWORD *)v8 + 8) = a2;
    *((_QWORD *)v8 + 1) = a3;
    *((_QWORD *)v8 + 5) = a4;
    *((_QWORD *)v8 + 6) = 0;
    if (a3)
    {
      if (a4 >= 0x18)
      {
        *(_DWORD *)v8 = *(_DWORD *)(a3 + 4);
        *((_QWORD *)v8 + 2) = a3 + *(unsigned int *)(a3 + 12);
        v9 = *(_QWORD *)(a3 + 16);
        *(_QWORD *)&v10 = v9;
        *((_QWORD *)&v10 + 1) = HIDWORD(v9);
        *(_OWORD *)((char *)v8 + 24) = v10;
      }
    }
  }
  return *(float *)&v9;
}

void sub_19BF9C24C(void **a1)
{
  if (a1)
  {
    if (*((_DWORD *)a1 + 12))
      free(a1[1]);
    free(a1);
  }
}

uint64_t sub_19BF9C284(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;

  if (a1)
  {
    if (a2)
    {
      result = a1[1];
      *a2 = a1[2] - result + a1[3];
    }
    else
    {
      return a1[1];
    }
  }
  else
  {
    result = 0;
    if (a2)
      *a2 = 0;
  }
  return result;
}

uint64_t sub_19BF9C2C0(unsigned int *a1)
{
  return *a1;
}

BOOL sub_19BF9C2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  if (a2)
  {
    v2 = a2;
    a2 = *(_QWORD *)(a2 + 8);
    v3 = *(_DWORD *)(v2 + 16);
    v4 = *(unsigned int *)(v2 + 4);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  return sub_19BF9C2EC(a1, a2, v3, v4);
}

BOOL sub_19BF9C2EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  const void *v18;
  unsigned int v19;
  size_t v20;
  unint64_t v21;
  int v22;
  unsigned __int16 *v23;

  if (*(_QWORD *)(a1 + 2080) || (*(_BYTE *)(a1 + 2064) & 1) != 0)
    return 0;
  v5 = 0;
  v22 = 0;
  v6 = a3 - 1;
  if ((a3 - 1) <= 0x3FE)
  {
    v7 = a4;
    if ((_DWORD)a4)
    {
      v9 = 0;
      v10 = (int *)a1;
      while (1)
      {
        v11 = *(_QWORD *)&v10[2 * *(unsigned __int8 *)(a2 + v9) + 1];
        if ((v11 & 3) != 1)
          break;
        v10 = (int *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (a3 == ++v9)
        {
          v12 = *v10;
          *v10 = a4;
          if (!v12)
            goto LABEL_17;
LABEL_18:
          v5 = 1;
          return v5 != 0;
        }
      }
      if ((v11 & 3) != 2)
      {
        v17 = (unsigned __int8 *)(a2 + v9);
        v18 = (const void *)(a2 + v9 + 1);
        v19 = v6 - v9;
        v20 = (v6 - v9);
        v21 = (unint64_t)malloc_type_calloc(1uLL, v20 + 15, 0x16B4CD09uLL);
        memcpy((void *)(v21 + 14), v18, v20);
        *(_BYTE *)(v21 + 14 + v19) = 0;
        *(_WORD *)(v21 + 12) = v19;
        *(_DWORD *)(v21 + 8) = v7;
        *(_QWORD *)v21 = 0;
        *(_QWORD *)&v10[2 * *v17 + 1] = v21 | 2;
        goto LABEL_17;
      }
      v23 = (unsigned __int16 *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      v14 = sub_19BFA03F0(a1, &v23, a2, a3, (int)v9 + 1, a4, &v22);
      v15 = (unint64_t)v23;
      if (v14 >= *(_DWORD *)(a1 + 2088))
      {
        v15 = (unint64_t)sub_19BFA05EC(a1, v23, &v22);
        v16 = 1;
      }
      else
      {
        v16 = 2;
      }
      v5 = v22;
      *(_QWORD *)&v10[2 * *(unsigned __int8 *)(a2 + v9) + 1] = v16 | v15;
      if (v5 == 2)
      {
LABEL_17:
        ++*(_DWORD *)(a1 + 2060);
        goto LABEL_18;
      }
    }
  }
  return v5 != 0;
}

uint64_t sub_19BF9C498(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_19BF9C4A4(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

uint64_t sub_19BF9C4B0(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 4);
  return result;
}

_QWORD *sub_19BF9C4BC(uint64_t a1, uint64_t a2)
{
  float *v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = (float *)a2;
    a2 = *(_QWORD *)(a2 + 8);
    v3 = *((unsigned int *)v2 + 4);
    v4 = *((unsigned int *)v2 + 1);
    v5 = *v2;
  }
  else
  {
    v4 = 0;
    v3 = 0;
    v5 = 0.0;
  }
  v9 = 0;
  sub_19BF9C5AC(a1, a2, v3, v4, 0, (uint64_t)v8, v5);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_19BF9C570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL sub_19BF9C5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  _BOOL8 result;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 2080) || (*(_BYTE *)(a1 + 2064) & 1) == 0)
    return 0;
  result = 0;
  v18 = 0;
  if ((a3 - 1) <= 0x3FE && (_DWORD)a4)
  {
    v17 = 0;
    sub_19BFA2418((uint64_t)v19, a6);
    sub_19BF9CCC0((unsigned __int16 *)a1, a1, a2, a3, 0, a4, (float *)&v17, &v18, a7, a5, (uint64_t)v19);
    v14 = v20;
    if (v20 == v19)
    {
      v15 = 4;
      v14 = v19;
    }
    else
    {
      if (!v20)
      {
LABEL_12:
        v16 = v18;
        if (v18 == 2)
          ++*(_DWORD *)(a1 + 2060);
        return v16 != 0;
      }
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
    goto LABEL_12;
  }
  return result;
}

void sub_19BF9C6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_19BF9C72C(int a1, int a2)
{
  char *v4;
  double result;

  v4 = (char *)malloc_type_calloc(1uLL, 0x838uLL, 0x105004014637929uLL);
  if (v4)
  {
    result = 0.0;
    *(_OWORD *)(v4 + 2060) = 0u;
    *((_DWORD *)v4 + 519) = 1;
    *((_QWORD *)v4 + 260) = 0;
    *(_QWORD *)(v4 + 2092) = 0x200000000;
    *((_DWORD *)v4 + 516) = a2;
    *((_DWORD *)v4 + 522) = a1;
  }
  return result;
}

char *sub_19BF9C7A0(char *result, int a2)
{
  _DWORD *v2;
  int v5;
  int v6;

  if (result)
  {
    v2 = result;
    if (*(_DWORD *)result == 12648430 || *(_DWORD *)result == -900339842)
    {
      result = (char *)malloc_type_calloc(1uLL, 0x838uLL, 0x105004014637929uLL);
      *((_QWORD *)result + 260) = v2;
      v5 = v2[3];
      *(_QWORD *)(result + 2068) = v2[2];
      *((_DWORD *)result + 515) = v5;
      v6 = v2[4];
      *((_DWORD *)result + 516) = v6;
      if (*v2 == -900339842)
        *((_DWORD *)result + 516) = v6 | 1;
      *((_DWORD *)result + 522) = v2[5];
      *((_DWORD *)result + 523) = a2;
      *((_DWORD *)result + 524) = 2;
      *((_DWORD *)result + 519) = 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_19BF9C85C(char *a1)
{
  int v2;
  void *v3;

  if (a1)
  {
    v2 = *((_DWORD *)a1 + 519) - 1;
    *((_DWORD *)a1 + 519) = v2;
    if (!v2)
    {
      v3 = (void *)*((_QWORD *)a1 + 260);
      if (v3)
      {
        if (*((_DWORD *)a1 + 523))
          munmap(v3, *(_QWORD *)(a1 + 2068));
      }
      else if ((a1[2064] & 1) != 0)
      {
        sub_19BFA02F8((uint64_t)a1);
      }
      else
      {
        sub_19BFA0374((uint64_t)a1);
      }
      free(a1);
    }
  }
}

char *sub_19BF9C8D8(char *a1)
{
  char *result;
  char *v2;
  uint64_t v3;

  result = sub_19BF9C7A0(a1, 0);
  if (result)
  {
    v2 = result;
    v3 = sub_19BF9C914((uint64_t)result);
    sub_19BF9C85C(v2);
    return (char *)v3;
  }
  return result;
}

uint64_t sub_19BF9C914(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  sub_19BF9C72C(*(_DWORD *)(a1 + 2088), *(_DWORD *)(a1 + 2064));
  v3 = v2;
  if ((*(_BYTE *)(a1 + 2064) & 1) != 0)
  {
    v9[0] = &off_1E3D14990;
    v9[1] = sub_19BF9C4BC;
    v10 = v9;
    sub_19BF9CA9C((_QWORD *)a1, 0, 0, v2, (uint64_t)v9, -1);
    v4 = v10;
    if (v10 == v9)
    {
      v5 = 4;
      v4 = v9;
      goto LABEL_10;
    }
  }
  else
  {
    v7[0] = &off_1E3D14990;
    v7[1] = sub_19BF9C2C8;
    v8 = v7;
    sub_19BF9CA9C((_QWORD *)a1, 0, 0, v2, (uint64_t)v7, -1);
    v4 = v8;
    if (v8 == v7)
    {
      v5 = 4;
      v4 = v7;
LABEL_10:
      (*(void (**)(void))(*v4 + 8 * v5))();
      return v3;
    }
  }
  if (v4)
  {
    v5 = 5;
    goto LABEL_10;
  }
  return v3;
}

void sub_19BF9CA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19BF9CA9C(_QWORD *a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _BYTE *v11;
  _BYTE *v12;
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  void *__p;
  int v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((a6 & 0x80000000) == 0)
  {
    v11 = sub_19BF9DEC8((uint64_t)a1, a2, a3);
    if (!v11)
      return;
    v12 = v11;
    sub_19BFA4428(&__p, a2, a3);
    v13 = operator new(0x20uLL);
    *(_QWORD *)v13 = &off_1E3D14A98;
    v13[2] = a3;
    *((_QWORD *)v13 + 2) = &__p;
    *((_QWORD *)v13 + 3) = a5;
    v19 = v13;
    sub_19BF9DF38(v12, 0, (uint64_t)v18, a6);
    v14 = v19;
    if (v19 == v18)
    {
      v15 = 4;
      v14 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_11;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_11:
    free(v12);
    if (SHIBYTE(v22) < 0)
      operator delete(__p);
    return;
  }
  __p = (void *)0xFFFFFFFF00000003;
  v21 = 0;
  v22 = a4;
  v16 = v23;
  sub_19BFA2418((uint64_t)v23, a5);
  sub_19BF9DC28(a1, a2, a3, 0, (uint64_t)&__p);
  if (v24 == v23)
  {
    v17 = 4;
  }
  else
  {
    if (!v24)
      return;
    v17 = 5;
    v16 = v24;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v17))(v16);
}

void sub_19BF9CC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  _QWORD *v22;
  uint64_t v24;

  if (a22 == v22)
  {
    v24 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v24 = 5;
    v22 = a22;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v24))(v22);
LABEL_6:
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_19BF9CCC0(unsigned __int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, float *a7, int *a8, float a9, uint64_t a10, uint64_t a11)
{
  float v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int16 *v32;
  _BYTE v33[24];
  unsigned __int16 *v34;
  _BYTE v35[24];
  unsigned __int16 *v36;
  uint64_t v37;

  v13 = a9;
  v37 = *MEMORY[0x1E0C80C00];
  if (a5 >= a4)
  {
    *a8 = 2;
    if (*(_DWORD *)(a2 + 8))
    {
      *a8 = 1;
      if (*(_QWORD *)(a11 + 24))
      {
        result = (unsigned __int16 *)sub_19BFA0C78(a11, a10, *(float *)(a2 + 4), a9);
        v13 = v22;
      }
    }
    *(float *)(a2 + 4) = v13;
    *(_DWORD *)(a2 + 8) = a6;
    *a7 = v13;
    goto LABEL_24;
  }
  v19 = (uint64_t)result;
  v31 = (unsigned __int8 *)(a3 + a5);
  v20 = *(_QWORD *)(a2 + 8 * *v31 + 12);
  if ((v20 & 3) == 2)
  {
    v32 = (unsigned __int16 *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    sub_19BFA2418((uint64_t)v33, a11);
    v23 = sub_19BFA0790(v19, (uint64_t **)&v32, a3, a4, a5 + 1, a6, a7, a8, v13, a10, (uint64_t)v33);
    result = v34;
    if (v34 == (unsigned __int16 *)v33)
    {
      v24 = 4;
      result = (unsigned __int16 *)v33;
    }
    else
    {
      if (!v34)
      {
LABEL_19:
        v29 = v32;
        if (v23 >= *(_DWORD *)(v19 + 2088))
        {
          result = (unsigned __int16 *)sub_19BFA09B0(v19, v32, a7, a8);
          v29 = result;
          v30 = 1;
        }
        else
        {
          v30 = 2;
        }
        v28 = v30 | (unint64_t)v29;
        v25 = v31;
        goto LABEL_23;
      }
      v24 = 5;
    }
    result = (unsigned __int16 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v24))();
    goto LABEL_19;
  }
  if ((v20 & 3) != 1)
  {
    *a7 = a9;
    v25 = (unsigned __int8 *)(a3 + a5);
    v26 = ~a5 + a4;
    v27 = (unint64_t)malloc_type_calloc(1uLL, v26 + 23, 0xD69735D9uLL);
    result = (unsigned __int16 *)memcpy((void *)(v27 + 22), v31 + 1, v26);
    *(_BYTE *)(v27 + 22 + v26) = 0;
    *(_WORD *)(v27 + 20) = v26;
    *(_DWORD *)(v27 + 16) = a6;
    *(float *)(v27 + 8) = v13;
    *(float *)(v27 + 12) = v13;
    *(_QWORD *)v27 = 0;
    v28 = v27 | 2;
    *a8 = 2;
LABEL_23:
    *(_QWORD *)(a2 + 8 * *v25 + 12) = v28;
    goto LABEL_24;
  }
  sub_19BFA2418((uint64_t)v35, a11);
  sub_19BF9CCC0(v19, v20 & 0xFFFFFFFFFFFFFFFCLL, a3, a4, a5 + 1, a6, a7, a8, v13, a10, v35);
  result = v36;
  if (v36 == (unsigned __int16 *)v35)
  {
    v21 = 4;
    result = (unsigned __int16 *)v35;
  }
  else
  {
    if (!v36)
      goto LABEL_24;
    v21 = 5;
  }
  result = (unsigned __int16 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v21))();
LABEL_24:
  if (*a7 > *(float *)a2)
    *(float *)a2 = *a7;
  return result;
}

void sub_19BF9CF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v22;
  uint64_t v23;

  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF9CFD4(_DWORD *a1, char *a2, int a3)
{
  uint64_t result;
  char *v5;
  char *v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  int v40;
  uint64_t *v41;
  size_t v42;
  uint64_t v43;
  uint64_t *v44;
  size_t v45;
  int v46;
  char *v47;
  int v48;
  uint64_t *v49;
  size_t v50;
  uint64_t v51;
  uint64_t *v52;
  size_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  uint64_t (***v64)();
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  uint64_t (***v71)();
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t (***v75)();
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t (***v79)();
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  size_t v89;
  const void *v90;
  uint64_t v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  size_t v105;
  const void *v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  char *__p;
  unint64_t *__pa;
  char *v115;
  unint64_t *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  void **v122;
  _BYTE v123[24];
  _BYTE *v124;
  uint64_t (**v125)();
  uint64_t *v126;
  uint64_t (***v127)();
  uint64_t (**v128)();
  unsigned int *v129;
  uint64_t (***v130)();
  uint64_t v131;

  result = 0;
  v131 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return result;
  v5 = a2;
  if (!a2 || !a3)
    return result;
  if ((a1[516] & 1) != 0)
  {
    v23 = (unint64_t *)operator new(8uLL);
    v24 = 0;
    *v23 = (unint64_t)a1;
    v25 = v23 + 1;
    v117 = (char *)(v23 + 1);
    __pa = v23;
    v116 = v23 + 1;
    v26 = (unint64_t)a1;
    while (1)
    {
      v27 = v26 + 8 * v5[v24];
      v30 = *(_QWORD *)(v27 + 12);
      v29 = (uint64_t *)(v27 + 12);
      v28 = v30;
      v31 = v30 & 3;
      if ((v30 & 3) == 0)
        goto LABEL_62;
      if (v31 == 2)
        break;
      v26 = v28 & 0xFFFFFFFFFFFFFFFCLL;
      if (v25 >= (unint64_t *)v117)
      {
        v32 = v25 - __pa;
        if ((unint64_t)(v32 + 1) >> 61)
          sub_19BF8EB40();
        v33 = (v117 - (char *)__pa) >> 2;
        if (v33 <= v32 + 1)
          v33 = v32 + 1;
        if ((unint64_t)(v117 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        if (v34)
          v35 = (char *)sub_19BF965C4((uint64_t)&v117, v34);
        else
          v35 = 0;
        v36 = (unint64_t *)&v35[8 * v32];
        *v36 = v26;
        v25 = v36 + 1;
        v37 = v116;
        if (v116 != __pa)
        {
          do
          {
            v38 = *--v37;
            *--v36 = v38;
          }
          while (v37 != __pa);
          v37 = __pa;
        }
        __pa = v36;
        v117 = &v35[8 * v34];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *v25++ = v26;
      }
      v116 = v25;
      if (++v24 == a3)
      {
        if (*(_DWORD *)(v26 + 8))
        {
          *(_DWORD *)(v26 + 8) = 0;
          goto LABEL_84;
        }
LABEL_62:
        v54 = 0;
LABEL_165:
        if (__pa)
          operator delete(__pa);
        if ((v54 & 1) == 0)
          return 0;
        goto LABEL_168;
      }
    }
    v47 = &v5[v24 + 1];
    v48 = ~(_DWORD)v24 + a3;
    v49 = (uint64_t *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
    v50 = *(unsigned __int16 *)((v28 & 0xFFFFFFFFFFFFFFFCLL) + 20);
    if (v48 == (_DWORD)v50 && !memcmp(v47, (char *)v49 + 22, v50))
    {
      v57 = *v49;
      free(v49);
      v58 = v57 | 2;
      if (!v57)
        v58 = 0;
      *v29 = v58;
    }
    else
    {
      v51 = *v49;
      if (!*v49)
        goto LABEL_62;
      while (1)
      {
        v52 = (uint64_t *)v51;
        v53 = *(unsigned __int16 *)(v51 + 20);
        if (v48 == (_DWORD)v53 && !memcmp(v47, (const void *)(v51 + 22), v53))
          break;
        v51 = *v52;
        v49 = v52;
        if (!*v52)
          goto LABEL_62;
      }
      *v49 = *v52;
      free(v52);
    }
LABEL_84:
    if ((unint64_t)((char *)v116 - (char *)__pa) < 0x10)
      goto LABEL_164;
    v66 = v116 - __pa;
    v121 = 0;
    v67 = v66 - 1;
    if (v66 == 1)
      goto LABEL_164;
    LOBYTE(v68) = 0;
    v69 = a1[522];
    while (1)
    {
      v70 = sub_19BFA4594((uint64_t)a1, __pa[v67]);
      v121 = 0;
      v128 = &off_1E3D14BF8;
      v129 = &v121;
      v130 = &v128;
      sub_19BF9DF38(v70, 0, (uint64_t)&v128, -1);
      v71 = v130;
      if (v130 == &v128)
      {
        v71 = &v128;
        v72 = 4;
      }
      else
      {
        if (!v130)
          goto LABEL_92;
        v72 = 5;
      }
      (*v71)[v72]();
LABEL_92:
      if (v70)
        free(v70);
      if (v121 >= v69)
      {
        if ((v68 & 1) != 0)
        {
          v68 = v67 + 1;
LABEL_104:
          v118 = 0;
          v119 = 0;
          v120 = 0;
          sub_19BFA462C(&v118, v69);
          v77 = __pa[v68];
          v78 = sub_19BFA4594((uint64_t)a1, v77);
          v125 = &off_1E3D14BA0;
          v126 = &v118;
          v127 = &v125;
          sub_19BF9DF38(v78, 0, (uint64_t)&v125, -1);
          v79 = v127;
          if (v127 == &v125)
          {
            v80 = 4;
            v79 = &v125;
LABEL_139:
            (*v79)[v80]();
          }
          else if (v127)
          {
            v80 = 5;
            goto LABEL_139;
          }
          if (v69 <= (v119 - v118) >> 5)
            __assert_rtn("reverseBurst", "BurstTrie.cpp", 1003, "items.size() < sizeThreshold");
          if (v78)
            free(v78);
          sub_19BFA02F8(v77);
          a1[515] -= (unint64_t)(v119 - v118) >> 5;
          *(_QWORD *)(__pa[v67] + 8 * v5[v67] + 12) = 0;
          if ((a3 + 1) < (unint64_t)(v116 - __pa))
            __assert_rtn("reverseBurst", "BurstTrie.cpp", 1012, "levels.size() <= keyLen + 1");
          v97 = sub_19BF9F46C();
          v98 = (uint64_t)v97;
          if (v68)
          {
            v99 = v97;
            v100 = v68;
            do
            {
              v101 = *v5++;
              *v99++ = v101;
              --v100;
            }
            while (v100);
          }
          v102 = v118;
          v103 = v119;
          if (v118 != v119)
          {
            v104 = a1[516];
            do
            {
              if (*(char *)(v102 + 23) < 0)
              {
                v106 = *(const void **)v102;
                v105 = *(_QWORD *)(v102 + 8);
              }
              else
              {
                v105 = *(unsigned __int8 *)(v102 + 23);
                v106 = (const void *)v102;
              }
              v107 = *(unsigned int *)(v102 + 24);
              v108 = *(float *)(v102 + 28);
              memcpy((void *)(v98 + v68), v106, v105);
              if (*(char *)(v102 + 23) < 0)
                v109 = *(_QWORD *)(v102 + 8);
              else
                LODWORD(v109) = *(unsigned __int8 *)(v102 + 23);
              v110 = (v109 + v68);
              if ((v104 & 1) != 0)
              {
                v124 = 0;
                sub_19BF9C5AC((uint64_t)a1, v98, v110, v107, 0, (uint64_t)v123, v108);
                v111 = v124;
                if (v124 == v123)
                {
                  v111 = v123;
                  v112 = 4;
                  goto LABEL_161;
                }
                if (v124)
                {
                  v112 = 5;
LABEL_161:
                  (*(void (**)(void))(*v111 + 8 * v112))();
                }
              }
              else
              {
                sub_19BF9C2EC((uint64_t)a1, v98, v110, v107);
              }
              v102 += 32;
            }
            while (v102 != v103);
          }
          v122 = (void **)&v118;
          sub_19BFA4BF0(&v122);
        }
LABEL_164:
        v54 = 1;
        goto LABEL_165;
      }
      v68 = 1;
      if (!--v67)
        goto LABEL_104;
    }
  }
  v7 = (char *)operator new(8uLL);
  v8 = 0;
  *(_QWORD *)v7 = a1;
  v9 = v7 + 8;
  v117 = v7 + 8;
  __p = v7;
  v115 = v7 + 8;
  v10 = a1;
  do
  {
    v11 = &v10[2 * v5[v8]];
    v14 = *(_QWORD *)(v11 + 1);
    v13 = (uint64_t *)(v11 + 1);
    v12 = v14;
    v15 = v14 & 3;
    if ((v14 & 3) == 0)
      goto LABEL_55;
    if (v15 == 2)
    {
      v39 = &v5[v8 + 1];
      v40 = ~(_DWORD)v8 + a3;
      v41 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      v42 = *(unsigned __int16 *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 12);
      if (v40 == (_DWORD)v42 && !memcmp(v39, (char *)v41 + 14, v42))
      {
        v55 = *v41;
        free(v41);
        v56 = v55 | 2;
        if (!v55)
          v56 = 0;
        *v13 = v56;
      }
      else
      {
        v43 = *v41;
        if (!*v41)
          goto LABEL_55;
        while (1)
        {
          v44 = (uint64_t *)v43;
          v45 = *(unsigned __int16 *)(v43 + 12);
          if (v40 == (_DWORD)v45 && !memcmp(v39, (const void *)(v43 + 14), v45))
            break;
          v43 = *v44;
          v41 = v44;
          if (!*v44)
            goto LABEL_55;
        }
        *v41 = *v44;
        free(v44);
      }
LABEL_70:
      if ((unint64_t)(v115 - __p) < 0x10)
        goto LABEL_133;
      v59 = (v115 - __p) >> 3;
      v121 = 0;
      v60 = v59 - 1;
      if (v59 == 1)
        goto LABEL_133;
      LOBYTE(v61) = 0;
      v62 = a1[522];
      while (1)
      {
        v63 = sub_19BFA4C7C((uint64_t)a1, *(_QWORD *)&__p[8 * v60]);
        v121 = 0;
        v128 = &off_1E3D14B48;
        v129 = &v121;
        v130 = &v128;
        sub_19BF9DF38(v63, 0, (uint64_t)&v128, -1);
        v64 = v130;
        if (v130 == &v128)
        {
          v64 = &v128;
          v65 = 4;
        }
        else
        {
          if (!v130)
            goto LABEL_78;
          v65 = 5;
        }
        (*v64)[v65]();
LABEL_78:
        if (v63)
          free(v63);
        if (v121 >= v62)
        {
          if ((v61 & 1) != 0)
          {
            v61 = v60 + 1;
LABEL_99:
            v118 = 0;
            v119 = 0;
            v120 = 0;
            sub_19BFA462C(&v118, v62);
            v73 = *(_QWORD *)&__p[8 * v61];
            v74 = sub_19BFA4C7C((uint64_t)a1, v73);
            v125 = &off_1E3D14AF0;
            v126 = &v118;
            v127 = &v125;
            sub_19BF9DF38(v74, 0, (uint64_t)&v125, -1);
            v75 = v127;
            if (v127 == &v125)
            {
              v76 = 4;
              v75 = &v125;
LABEL_108:
              (*v75)[v76]();
            }
            else if (v127)
            {
              v76 = 5;
              goto LABEL_108;
            }
            if (v62 <= (v119 - v118) >> 5)
              __assert_rtn("reverseBurst", "BurstTrie.cpp", 1003, "items.size() < sizeThreshold");
            if (v74)
              free(v74);
            sub_19BFA0374(v73);
            a1[515] -= (unint64_t)(v119 - v118) >> 5;
            *(_QWORD *)(*(_QWORD *)&__p[8 * v60] + 8 * v5[v60] + 4) = 0;
            if ((a3 + 1) < (unint64_t)((v115 - __p) >> 3))
              __assert_rtn("reverseBurst", "BurstTrie.cpp", 1012, "levels.size() <= keyLen + 1");
            v81 = sub_19BF9F46C();
            v82 = (uint64_t)v81;
            if (v61)
            {
              v83 = v81;
              v84 = v61;
              do
              {
                v85 = *v5++;
                *v83++ = v85;
                --v84;
              }
              while (v84);
            }
            v86 = v118;
            v87 = v119;
            if (v118 != v119)
            {
              v88 = a1[516];
              do
              {
                if (*(char *)(v86 + 23) < 0)
                {
                  v90 = *(const void **)v86;
                  v89 = *(_QWORD *)(v86 + 8);
                }
                else
                {
                  v89 = *(unsigned __int8 *)(v86 + 23);
                  v90 = (const void *)v86;
                }
                v91 = *(unsigned int *)(v86 + 24);
                v92 = *(float *)(v86 + 28);
                memcpy((void *)(v82 + v61), v90, v89);
                if (*(char *)(v86 + 23) < 0)
                  v93 = *(_QWORD *)(v86 + 8);
                else
                  LODWORD(v93) = *(unsigned __int8 *)(v86 + 23);
                v94 = (v93 + v61);
                if ((v88 & 1) != 0)
                {
                  v124 = 0;
                  sub_19BF9C5AC((uint64_t)a1, v82, v94, v91, 0, (uint64_t)v123, v92);
                  v95 = v124;
                  if (v124 == v123)
                  {
                    v95 = v123;
                    v96 = 4;
                    goto LABEL_130;
                  }
                  if (v124)
                  {
                    v96 = 5;
LABEL_130:
                    (*(void (**)(void))(*v95 + 8 * v96))();
                  }
                }
                else
                {
                  sub_19BF9C2EC((uint64_t)a1, v82, v94, v91);
                }
                v86 += 32;
              }
              while (v86 != v87);
            }
            v122 = (void **)&v118;
            sub_19BFA4BF0(&v122);
          }
LABEL_133:
          v46 = 1;
          goto LABEL_134;
        }
        v61 = 1;
        if (!--v60)
          goto LABEL_99;
      }
    }
    v10 = (_DWORD *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9 >= v117)
    {
      v16 = (v9 - __p) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        sub_19BF8EB40();
      v17 = (v117 - __p) >> 2;
      if (v17 <= v16 + 1)
        v17 = v16 + 1;
      if ((unint64_t)(v117 - __p) >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)sub_19BF965C4((uint64_t)&v117, v18);
      else
        v19 = 0;
      v20 = &v19[8 * v16];
      *(_QWORD *)v20 = v10;
      v9 = v20 + 8;
      v21 = v115;
      if (v115 != __p)
      {
        do
        {
          v22 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v20 - 1) = v22;
          v20 -= 8;
        }
        while (v21 != __p);
        v21 = __p;
      }
      __p = v20;
      v117 = &v19[8 * v18];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v9 = v10;
      v9 += 8;
    }
    v115 = v9;
    ++v8;
  }
  while (v8 != a3);
  if (*v10)
  {
    *v10 = 0;
    goto LABEL_70;
  }
LABEL_55:
  v46 = 0;
LABEL_134:
  if (__p)
    operator delete(__p);
  if (!v46)
    return 0;
LABEL_168:
  --a1[515];
  return 1;
}

void sub_19BF9DA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  a16 = &a12;
  sub_19BFA4BF0((void ***)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19BF9DB04(_QWORD *a1, const void *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a3)
    return 0;
  v12 = 0xFFFFFFFF00000000;
  v13 = 0;
  v7 = v15;
  v14 = 0;
  v16 = 0;
  sub_19BF9DC28(a1, a2, a3, 1, (uint64_t)&v12);
  v8 = ~HIDWORD(v12);
  if ((v12 & 0x8000000000000000) == 0)
  {
    if (a4)
      *a4 = HIDWORD(v12);
    if (a5)
      *a5 = v13;
  }
  v9 = v8 >> 31;
  if (v16 == v15)
  {
    v10 = 4;
    goto LABEL_12;
  }
  if (v16)
  {
    v10 = 5;
    v7 = v16;
LABEL_12:
    (*(void (**)(_QWORD *))(*v7 + 8 * v10))(v7);
  }
  return v9;
}

void sub_19BF9DBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  _QWORD *v15;
  uint64_t v17;

  if (a15 == v15)
  {
    v17 = 4;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
    v15 = a15;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v17))(v15);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BF9DC28(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a3 <= 0x3FF)
  {
    v9 = (uint64_t)result;
    v10 = sub_19BF9F46C();
    memcpy(v10, a2, a3);
    *((_BYTE *)v10 + a3) = 0;
    v11 = *(_QWORD *)(v9 + 2080);
    v12 = *(_DWORD *)(v9 + 2064);
    if (v11)
    {
      v13 = (*(_DWORD *)(v11 + 4) & 0xFFFFFFFC) + v11;
      if ((v12 & 1) != 0)
      {
        v21[0] = &off_1E3D149E8;
        v21[1] = sub_19BFA1170;
        v22 = v21;
        sub_19BFA0D04(v9, v13, (uint64_t)v10, a3, 0, a4, a5, (uint64_t)v21);
        result = v22;
        if (v22 == v21)
        {
          v14 = 4;
          result = v21;
          return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
        }
      }
      else
      {
        v19[0] = &off_1E3D149E8;
        v19[1] = sub_19BFA1170;
        v20 = v19;
        sub_19BFA11F8(v9, v13, (uint64_t)v10, a3, 0, a4, a5, (uint64_t)v19);
        result = v20;
        if (v20 == v19)
        {
          v14 = 4;
          result = v19;
          return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
        }
      }
    }
    else if ((v12 & 1) != 0)
    {
      v17[0] = &off_1E3D149E8;
      v17[1] = sub_19BFA1170;
      v18 = v17;
      sub_19BFA166C(v9, (uint64_t)v10, a3, 0, a4, a5, (uint64_t)v17);
      result = v18;
      if (v18 == v17)
      {
        v14 = 4;
        result = v17;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
      }
    }
    else
    {
      v15[0] = &off_1E3D149E8;
      v15[1] = sub_19BFA1170;
      v16 = v15;
      sub_19BFA19CC((int *)v9, (uint64_t)v10, a3, 0, a4, a5, (uint64_t)v15);
      result = v16;
      if (v16 == v15)
      {
        v14 = 4;
        result = v15;
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
      }
    }
    if (!result)
      return result;
    v14 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }
  return result;
}

void sub_19BF9DE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_19BF9DEC8(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  void *v6;

  v6 = malloc_type_calloc(0x28uLL, 1uLL, 0x119D39A0uLL);
  if ((sub_19BF9ED64(a1, (uint64_t)v6, a2, a3) & 1) == 0 && v6)
  {
    free(v6);
    return 0;
  }
  return v6;
}

_BYTE *sub_19BF9DF38(_BYTE *result, uint64_t a2, uint64_t a3, int a4)
{
  _BYTE *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  char v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v7 = result;
    result = sub_19BF9F46C();
    v8 = (uint64_t)result;
    v19 = 0;
    v9 = *((_DWORD *)v7 + 7);
    if (v9)
    {
      if (v9 != 1)
        return result;
      v16 = *(_OWORD *)v7;
      v17 = *((_QWORD *)v7 + 2);
      v10 = *((_QWORD *)v7 + 4);
      sub_19BFA2418((uint64_t)v22, a3);
      sub_19BF9E174(v10, (uint64_t)&v16);
      result = v23;
      if (v23 == v22)
      {
        v14 = 4;
        result = v22;
        return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v14))(result, v11, v12, v13);
      }
    }
    else
    {
      v16 = *(_OWORD *)v7;
      v17 = *((_QWORD *)v7 + 2);
      v18 = *((_DWORD *)v7 + 6);
      v15 = (_QWORD *)*((_QWORD *)v7 + 4);
      sub_19BFA2418((uint64_t)v20, a3);
      sub_19BF9F500(v15, (uint64_t)&v16, v8, 0, &v19, a4, a2, (uint64_t)v20);
      result = v21;
      if (v21 == v20)
      {
        v14 = 4;
        result = v20;
        return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v14))(result, v11, v12, v13);
      }
    }
    if (!result)
      return result;
    v14 = 5;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v14))(result, v11, v12, v13);
  }
  return result;
}

void sub_19BF9E0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a17;
  if (a17 == v21)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19BF9E10C(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t sub_19BF9E118(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, float a7)
{
  uint64_t v7;
  uint64_t v9;
  float v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a3;
  v14 = a2;
  v12 = a4;
  v11 = a5;
  v10 = a7;
  v9 = a6;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, int *, int *, float *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v14, &v13, &v12, &v11, &v10, &v9);
}

void sub_19BF9E174(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_19BF9E1E0(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;

  if (a2 == *(_DWORD *)(*(_QWORD *)(v6 + 2080) + 4))
  {
    sub_19BFA2418((uint64_t)v11, a1);
    sub_19BF9EA6C((_BYTE *)v6, v4, v3, v7, v5, v2, v10, (uint64_t)v11);
    v8 = v12;
    if (v12 == v11)
    {
      v9 = 4;
      v8 = v11;
    }
    else
    {
      if (!v12)
        return;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
}

void sub_19BF9E94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a14;
  if (a14 == v26)
  {
    v29 = 4;
    v28 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_BYTE *sub_19BF9EA6C(_BYTE *result, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, _BYTE *a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v11 = result;
  v28 = *MEMORY[0x1E0C80C00];
  v12 = (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL) + *((_QWORD *)result + 260);
  if ((result[2064] & 1) == 0)
  {
    if (*(_DWORD *)(v12 + 1024))
    {
      *(_BYTE *)(a3 + a5) = 0;
      result = (_BYTE *)sub_19BF9E118(a8, a7, a3, 0, *(_DWORD *)(v12 + 1024), (uint64_t)a6, 0.0);
      if (a5 >= a4 || *a6)
        return result;
    }
    else if (a5 >= a4)
    {
      return result;
    }
    v13 = 0;
    while (1)
    {
      *(_BYTE *)(a3 + a5) = v13;
      *(_QWORD *)a2 = *(unsigned int *)(v12 + 4 * v13);
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      if (v13)
        v14 = a5 + 1;
      else
        v14 = a5;
      sub_19BFA2418((uint64_t)v24, a8);
      sub_19BF9E174(v11, a2, a3, a4 - (v13 != 0), v14, a6, a7, v24);
      result = v25;
      if (v25 == v24)
      {
        result = v24;
        v15 = 4;
      }
      else
      {
        if (!v25)
          goto LABEL_20;
        v15 = 5;
      }
      result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v15))();
LABEL_20:
      if (!*a6)
      {
        v16 = v13++ == 255;
        if (!v16)
          continue;
      }
      return result;
    }
  }
  if (!*(_DWORD *)(v12 + 1024))
  {
    if (a5 >= a4)
      return result;
    goto LABEL_25;
  }
  *(_BYTE *)(a3 + a5) = 0;
  result = (_BYTE *)sub_19BF9E118(a8, a7, a3, 0, *(_DWORD *)(v12 + 1024), (uint64_t)a6, *(float *)(v12 + 1032));
  if (a5 < a4 && !*a6)
  {
LABEL_25:
    v17 = 0;
    while (1)
    {
      *(_BYTE *)(a3 + a5) = v17;
      *(_QWORD *)a2 = *(unsigned int *)(v12 + 4 * v17);
      if (v17)
        v18 = a5 + 1;
      else
        v18 = a5;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_19BFA2418((uint64_t)v26, a8);
      sub_19BF9E174(v11, a2, a3, a4 - (v17 != 0), v18, a6, a7, v26);
      result = v27;
      if (v27 == v26)
      {
        result = v26;
        v19 = 4;
      }
      else
      {
        if (!v27)
          goto LABEL_34;
        v19 = 5;
      }
      result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v19))();
LABEL_34:
      if (!*a6)
      {
        v16 = v17++ == 255;
        if (!v16)
          continue;
      }
      return result;
    }
  }
  return result;
}

void sub_19BF9ED00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BF9ED64(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4)
{
  __n128 v7;
  __n128 v8;

  if (a1 && a2 && sub_19BF9EDC4(a1, a2))
    return sub_19BF9EE38(a2, a3, a4, v7, v8);
  else
    return 0;
}

uint64_t sub_19BF9EDC4(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t result;
  uint64_t v4;

  if (!a2)
    return 0;
  *(_QWORD *)(a2 + 32) = a1;
  v2 = *(_DWORD **)(a1 + 2080);
  if (v2)
  {
    if (*v2 == -900339842 || *v2 == 12648430 && v2[7] == 2)
    {
      result = 1;
      *(_DWORD *)(a2 + 28) = 1;
      v4 = v2[1];
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = v4;
      return result;
    }
    return 0;
  }
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 8) = a1 | 1;
  *(_QWORD *)(a2 + 16) = 0;
  return 1;
}

uint64_t sub_19BF9EE38(uint64_t result, unsigned __int8 *a2, size_t a3, __n128 a4, __n128 a5)
{
  unsigned int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t i;
  _DWORD *v19;
  uint64_t *v20;

  if (result)
  {
    v5 = a3;
    v6 = a2;
    v7 = result;
    v8 = *(_DWORD *)(result + 28);
    if (v8)
    {
      if (v8 != 1)
        return 0;
      v9 = *(_QWORD *)result;
      v10 = *(_QWORD *)(result + 8);
      v11 = *(_DWORD *)(result + 16);
      v12 = *(_DWORD *)(result + 20);
      if ((sub_19BF9EF94(*(_QWORD *)(result + 32), result, a2, a3, a4.n128_f64[0], a5) & 1) == 0)
      {
        result = 0;
        *(_QWORD *)v7 = v9;
        *(_QWORD *)(v7 + 8) = v10;
        *(_DWORD *)(v7 + 16) = v11;
        *(_DWORD *)(v7 + 20) = v12;
        return result;
      }
    }
    else
    {
      v14 = *(_QWORD *)result;
      v13 = *(_QWORD *)(result + 8);
      v15 = *(_QWORD *)(result + 16);
      v16 = *(_DWORD *)(result + 24);
      v17 = *(_QWORD *)(result + 32);
      for (i = v13; (i & 3) == 1; i = *(_QWORD *)(v7 + 8))
      {
        v19 = (_DWORD *)(i & 0xFFFFFFFFFFFFFFFCLL);
        if ((*(_BYTE *)(v17 + 2064) & 1) != 0)
        {
          if (!v5)
          {
            *(_DWORD *)(v7 + 20) = v19[2];
            *(_DWORD *)(v7 + 24) = v19[1];
            return 1;
          }
          v20 = (uint64_t *)&v19[2 * *v6 + 3];
        }
        else
        {
          if (!v5)
          {
            *(_DWORD *)(v7 + 20) = *v19;
            return 1;
          }
          v20 = (uint64_t *)&v19[2 * *v6 + 1];
        }
        sub_19BFA3500(v17, v7, *v20);
        ++v6;
        --v5;
      }
      if ((i & 3) != 2 || (sub_19BFA322C(v17, v7, v6, v5, a4) & 1) == 0)
      {
        result = 0;
        *(_QWORD *)v7 = v14;
        *(_QWORD *)(v7 + 8) = v13;
        *(_QWORD *)(v7 + 16) = v15;
        *(_DWORD *)(v7 + 24) = v16;
        return result;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_19BF9EF94(uint64_t a1, uint64_t a2, unsigned __int8 *__s2, size_t __n, double a5, __n128 a6)
{
  unsigned int i;
  uint64_t v10;
  uint64_t v11;
  int8x8_t *v12;
  unsigned int v13;
  uint64_t v14;
  int8x8_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int8x8_t v20;
  uint64_t v21;
  int v22;
  int8x8_t *v23;
  int8x8_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  unsigned int *v27;
  int8x8_t *v28;
  int8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  int v32;
  int *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unsigned int v39;
  _DWORD *v40;
  char v41;
  __int32 v43;
  unsigned int v44;
  float v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned __int32 v49;
  size_t v50;
  char *v51;
  unsigned __int32 v52;
  _DWORD *v53;
  double v54;
  BOOL v55;
  unsigned int v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char *v63;
  unsigned int v64;
  unsigned int v65;
  size_t v66;
  uint64_t v67;
  __n128 v68;

  for (i = __n; ; --i)
  {
    v10 = *(_QWORD *)a2;
    v11 = *(_QWORD *)a2 & 3;
    if (v11 != 3)
      break;
    v12 = (int8x8_t *)((v10 & 0xFFFFFFFFFFFFFFFCLL) + *(_QWORD *)(a1 + 2080));
    if ((*(_BYTE *)(a1 + 2064) & 1) != 0)
    {
      if (!i)
      {
        *(_DWORD *)(a2 + 16) = v12[5].i32[0];
        *(_DWORD *)(a2 + 20) = v12[4].i32[1];
        goto LABEL_44;
      }
      v18 = *__s2;
      LODWORD(v19) = v18 >> 6;
      v20 = v12[v18 >> 6];
      v21 = 1 << v18;
      if (((1 << v18) & *(_QWORD *)&v20) == 0)
        goto LABEL_40;
      if (v18 >= 0x40)
      {
        v22 = 0;
        if (v19 <= 1)
          v19 = 1;
        else
          v19 = v19;
        v28 = v12;
        do
        {
          v29 = *v28++;
          v30 = (uint8x8_t)vcnt_s8(v29);
          v30.i16[0] = vaddlv_u8(v30);
          v22 += v30.i32[0];
          --v19;
        }
        while (v19);
      }
      else
      {
        v22 = 0;
      }
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)((v21 - 1) & *(_QWORD *)&v20));
      v31.i16[0] = vaddlv_u8(v31);
      v27 = (unsigned int *)&v12[5] + (v22 + v31.i32[0]) + 1;
    }
    else
    {
      if (!i)
      {
        v43 = v12[4].i32[0];
LABEL_42:
        *(_DWORD *)(a2 + 16) = v43;
        goto LABEL_44;
      }
      v13 = *__s2;
      LODWORD(v14) = v13 >> 6;
      v15 = v12[v13 >> 6];
      v16 = 1 << v13;
      if (((1 << v13) & *(_QWORD *)&v15) == 0)
        goto LABEL_40;
      if (v13 >= 0x40)
      {
        v17 = 0;
        if (v14 <= 1)
          v14 = 1;
        else
          v14 = v14;
        v23 = v12;
        do
        {
          v24 = *v23++;
          v25 = (uint8x8_t)vcnt_s8(v24);
          v25.i16[0] = vaddlv_u8(v25);
          v17 += v25.i32[0];
          --v14;
        }
        while (v14);
      }
      else
      {
        v17 = 0;
      }
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)((v16 - 1) & *(_QWORD *)&v15));
      v26.i16[0] = vaddlv_u8(v26);
      v27 = (unsigned int *)&v12[4] + (v17 + v26.i32[0]) + 1;
    }
    sub_19BFA3158(a1, (_QWORD *)a2, *v27);
    ++__s2;
  }
  if (!v11)
  {
    if (v10 != *(_DWORD *)(*(_QWORD *)(a1 + 2080) + 4))
      goto LABEL_40;
    return sub_19BFA30B4(a1, a2, __s2, i);
  }
  if (v11 != 2)
    return sub_19BFA30B4(a1, a2, __s2, i);
  v32 = *(_DWORD *)(a1 + 2064);
  v33 = (int *)((v10 & 0xFFFFFFFFFFFFFFFCLL) + *(_QWORD *)(a1 + 2080));
  v34 = *v33;
  if ((v32 & 1) == 0)
  {
    v35 = v34 - 4;
    if (v34 == 4)
      goto LABEL_40;
    v36 = *(unsigned int *)(a2 + 8);
    if ((v32 & 4) != 0)
    {
      if (i)
      {
        if (v36 < v35)
        {
          v56 = 0;
          while (1)
          {
            v57 = (char *)v33 + v36;
            v58 = v57 + 4;
            v59 = v57[10];
            LODWORD(v60) = v59;
            if (i > v59)
            {
              if (v59 <= *((unsigned __int16 *)v58 + 2))
                v60 = *((unsigned __int16 *)v58 + 2);
              else
                v60 = v59;
              v61 = v59;
              while (v60 != v61)
              {
                if (v58[(v61 + *(_DWORD *)(a2 + 12)) + 7] != __s2[v56 + v61])
                {
                  LODWORD(v60) = v61;
                  break;
                }
                if (i == ++v61)
                {
                  LODWORD(v60) = i;
                  break;
                }
              }
            }
            v56 += v60;
            v62 = *((unsigned __int16 *)v58 + 2);
            if (v56 == i)
              break;
            v41 = 0;
            LODWORD(v36) = v36 + v62 + 7;
            *(_DWORD *)(a2 + 8) = v36;
            if (v36 >= v35)
              return v41 & 1;
          }
          v64 = *(_DWORD *)(a2 + 12) + i;
          *(_DWORD *)(a2 + 16) = 0;
          if (v62 + (_DWORD)v59 == v64)
            *(_DWORD *)(a2 + 16) = *(_DWORD *)v58;
          goto LABEL_89;
        }
LABEL_40:
        v41 = 0;
        return v41 & 1;
      }
      v63 = (char *)v33 + v36;
      if (*(unsigned __int16 *)((char *)v33 + v36 + 8) + *((unsigned __int8 *)v33 + v36 + 10))
      {
LABEL_80:
        *(_DWORD *)(a2 + 16) = 0;
        goto LABEL_44;
      }
    }
    else
    {
      if (i)
      {
        if (v36 < v35)
        {
          v37 = *(unsigned int *)(a2 + 12);
          while (1)
          {
            v38 = (char *)v33 + v36;
            v39 = *((unsigned __int16 *)v38 + 4);
            if (v39 >= v37)
            {
              v40 = v38 + 4;
              if (!memcmp(&v38[v37 + 10], __s2, i))
                break;
            }
            v41 = 0;
            LODWORD(v36) = v36 + v39 + 6;
            *(_DWORD *)(a2 + 8) = v36;
            if (v36 >= v35)
              return v41 & 1;
          }
          *(_DWORD *)(a2 + 16) = 0;
          if (v39 - (_DWORD)v37 == i)
            *(_DWORD *)(a2 + 16) = *v40;
          v64 = v37 + i;
LABEL_89:
          *(_DWORD *)(a2 + 12) = v64;
          goto LABEL_44;
        }
        goto LABEL_40;
      }
      v63 = (char *)v33 + v36;
      if (*(_WORD *)((char *)v33 + v36 + 8))
        goto LABEL_80;
    }
    *(_DWORD *)(a2 + 16) = 0;
    v43 = *((_DWORD *)v63 + 1);
    goto LABEL_42;
  }
  if (v34 == 4)
    goto LABEL_40;
  v44 = *(_DWORD *)(a2 + 8);
  a6.n128_u64[0] = *(_QWORD *)(a2 + 12);
  v45 = *(float *)(a2 + 20);
  v46 = v34 - 8;
  if (v34 == 8)
  {
    v41 = 0;
LABEL_78:
    *(_DWORD *)(a2 + 8) = v44;
    *(_QWORD *)(a2 + 12) = a6.n128_u64[0];
    *(float *)(a2 + 20) = v45;
    return v41 & 1;
  }
  v47 = 0;
  v41 = 0;
  v48 = a6.n128_u32[0];
  v49 = a6.n128_u32[0] + i;
  v50 = i;
  while (1)
  {
    while (1)
    {
      v51 = (char *)v33 + v47;
      v52 = *((unsigned __int16 *)v51 + 8);
      if (v49 <= v52)
        break;
      v47 += v52 + 10;
      if (v47 >= v46)
        goto LABEL_78;
    }
    v68 = a6;
    v65 = v44;
    v53 = v51 + 8;
    v66 = v50;
    v67 = v48;
    if (!memcmp(&v51[v48 + 18], __s2, v50))
      break;
    v44 = v65;
    a6 = v68;
LABEL_59:
    v47 += v52 + 10;
    v50 = v66;
    v48 = v67;
    if (v47 >= v46)
      goto LABEL_78;
  }
  a6 = v68;
  if (v49 != v52)
  {
    HIDWORD(v54) = 0;
    v55 = (v41 & 1) == 0;
    v44 = v65;
    if ((v41 & 1) == 0)
    {
      v44 = v47;
      v45 = 0.0;
    }
    v41 = 1;
    if (v55)
    {
      LODWORD(v54) = v68.n128_u32[0] + i;
      a6.n128_f64[0] = v54;
    }
    goto LABEL_59;
  }
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 16) = v53[1];
  *(_DWORD *)(a2 + 20) = *v53;
  *(_DWORD *)(a2 + 8) = v47;
  *(_DWORD *)(a2 + 12) = v49;
LABEL_44:
  v41 = 1;
  return v41 & 1;
}

void *sub_19BF9F46C()
{
  unint64_t v0;
  void *v1;
  char v3;
  char **v4;
  char *v5;

  v0 = atomic_load(&qword_1EE417288);
  if (v0 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1EE417288, &v4, (void (__cdecl *)(void *))sub_19BFA359C);
  }
  v1 = pthread_getspecific(qword_1EE417290);
  if (!v1)
  {
    v1 = malloc_type_malloc(0x1000uLL, 0xAE75DD23uLL);
    pthread_setspecific(qword_1EE417290, v1);
  }
  return v1;
}

_QWORD *sub_19BF9F500(_QWORD *result, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5, int a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD v60[3];
  _QWORD *v61;
  _BYTE v62[24];
  _BYTE *v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  _BYTE v68[24];
  _BYTE *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v13 = *((_DWORD *)result + 516);
  v14 = *(_QWORD *)(a2 + 8) & 3;
  if (v14 != 2)
  {
    if (v14 != 1)
      return result;
    v15 = (uint64_t)result;
    if ((v13 & 1) == 0)
    {
      sub_19BFA2418((uint64_t)v64, a8);
      v16 = (int *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL);
      if (*v16)
      {
        sub_19BF9E118((uint64_t)v64, a7, a3, a4, *v16, (uint64_t)a5, *(float *)(a2 + 24));
        if (!a6 || *a5)
          goto LABEL_85;
      }
      else if (!a6)
      {
        goto LABEL_85;
      }
      v48 = 0;
      v49 = (a6 - 1);
      while (1)
      {
        *(_BYTE *)(a3 + a4) = v48;
        sub_19BFA3500(v15, a2, *(_QWORD *)&v16[2 * v48 + 1]);
        v50 = (uint64_t)v65;
        if (!v65)
          goto LABEL_59;
        if (v65 != v64)
          break;
        v69 = v68;
        (*(void (**)(_QWORD *, _BYTE *))(v64[0] + 24))(v64, v68);
LABEL_61:
        sub_19BF9F500(v15, a2, a3, a4 + 1, a5, v49, a7, v68);
        v51 = v69;
        if (v69 == v68)
        {
          v51 = v68;
          v52 = 4;
        }
        else
        {
          if (!v69)
            goto LABEL_66;
          v52 = 5;
        }
        (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_66:
        if (!*a5)
        {
          v53 = v48++ == 255;
          if (!v53)
            continue;
        }
        goto LABEL_85;
      }
      v50 = (*(uint64_t (**)(void))(*v65 + 16))();
LABEL_59:
      v69 = (_BYTE *)v50;
      goto LABEL_61;
    }
    sub_19BFA2418((uint64_t)v66, a8);
    v33 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
    v34 = *(_DWORD *)(v33 + 8);
    if (v34)
    {
      sub_19BF9E118((uint64_t)v66, a7, a3, a4, v34, (uint64_t)a5, *(float *)(a2 + 24));
      if (!a6 || *a5)
      {
LABEL_85:
        if ((v13 & 1) != 0)
        {
          result = v67;
          if (v67 != v66)
            goto LABEL_89;
          v47 = 4;
          result = v66;
        }
        else
        {
          result = v65;
          if (v65 != v64)
            goto LABEL_89;
          v47 = 4;
          result = v64;
        }
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v47))();
      }
    }
    else if (!a6)
    {
      goto LABEL_85;
    }
    v54 = 0;
    v55 = (a6 - 1);
    while (1)
    {
      *(_BYTE *)(a3 + a4) = v54;
      sub_19BFA3500(v15, a2, *(_QWORD *)(v33 + 12 + 8 * v54));
      v56 = (uint64_t)v67;
      if (!v67)
        goto LABEL_75;
      if (v67 != v66)
        break;
      v69 = v68;
      (*(void (**)(_QWORD *, _BYTE *))(v66[0] + 24))(v66, v68);
LABEL_77:
      sub_19BF9F500(v15, a2, a3, a4 + 1, a5, v55, a7, v68);
      v57 = v69;
      if (v69 == v68)
      {
        v57 = v68;
        v58 = 4;
      }
      else
      {
        if (!v69)
          goto LABEL_82;
        v58 = 5;
      }
      (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_82:
      if (!*a5)
      {
        v53 = v54++ == 255;
        if (!v53)
          continue;
      }
      goto LABEL_85;
    }
    v56 = (*(uint64_t (**)(void))(*v67 + 16))();
LABEL_75:
    v69 = (_BYTE *)v56;
    goto LABEL_77;
  }
  if ((v13 & 1) != 0)
  {
    sub_19BFA2418((uint64_t)v62, a8);
    v35 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL;
    if (v35)
    {
      v36 = (unsigned __int8 *)(v35 + 22);
      v37 = *(unsigned int *)(a2 + 16);
      while (1)
      {
        v38 = *(unsigned __int16 *)(v35 + 20);
        if (v38 >= v37)
        {
          v39 = v38 - (int)v37;
          if (a6 < 0 || (int)v39 <= a6)
          {
            if ((_DWORD)v37)
            {
              v40 = (unsigned __int8 *)(v35 + 22);
              v41 = v36;
              v42 = v37;
              while (1)
              {
                v44 = *v40++;
                v43 = v44;
                v45 = *v41++;
                if (v43 != v45)
                  break;
                if (!--v42)
                  goto LABEL_47;
              }
            }
            else
            {
LABEL_47:
              v46 = v39 + a4;
              memcpy((void *)(a3 + a4), (const void *)(v35 + v37 + 22), v39);
              *(_BYTE *)(a3 + v46) = 0;
              sub_19BF9E118((uint64_t)v62, a7, a3, v46, *(_DWORD *)(v35 + 16), (uint64_t)a5, *(float *)(v35 + 12));
            }
          }
        }
        v35 = *(_QWORD *)v35;
        if (!v35)
          goto LABEL_49;
      }
    }
    goto LABEL_52;
  }
  sub_19BFA2418((uint64_t)v60, a8);
  v17 = v13;
  v18 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = *(unsigned int *)(a2 + 16);
  if (v19 > *(unsigned __int16 *)(v18 + 12))
    __assert_rtn("traverseFromMapCursorTrieList", "BurstTrie.cpp", 2107, "cursor.prfxlen <= head->restlen");
  if (!v18)
    goto LABEL_33;
  v20 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFCLL;
  while (1)
  {
    if (v20 == v18)
    {
      v21 = *(unsigned __int16 *)(v18 + 12);
      goto LABEL_20;
    }
    v21 = *(unsigned __int16 *)(v20 + 12);
    if (v21 <= (unsigned __int16)v19)
      goto LABEL_33;
    if ((_DWORD)v19)
      break;
LABEL_20:
    v28 = v21 - v19;
    if ((a6 & 0x80000000) == 0 && v28 > a6)
      goto LABEL_32;
    v29 = v28 + a4;
    memcpy((void *)(a3 + a4), (const void *)(v20 + v19 + 14), v28);
    *(_BYTE *)(a3 + v29) = 0;
    v30 = (uint64_t)v61;
    if (!v61)
      goto LABEL_25;
    if (v61 != v60)
    {
      v30 = (*(uint64_t (**)(void))(*v61 + 16))();
LABEL_25:
      v69 = (_BYTE *)v30;
      goto LABEL_27;
    }
    v69 = v68;
    (*(void (**)(_QWORD *, _BYTE *))(v60[0] + 24))(v60, v68);
LABEL_27:
    sub_19BF9E118((uint64_t)v68, a7, a3, v29, *(_DWORD *)(v20 + 8), (uint64_t)a5, 0.0);
    v31 = v69;
    if (v69 == v68)
    {
      v31 = v68;
      v32 = 4;
      goto LABEL_31;
    }
    if (v69)
    {
      v32 = 5;
LABEL_31:
      (*(void (**)(void))(*v31 + 8 * v32))();
    }
LABEL_32:
    v20 = *(_QWORD *)v20;
    if (!v20)
      goto LABEL_33;
  }
  v22 = (unsigned __int8 *)(v20 + 14);
  v23 = (unsigned __int8 *)(v18 + 14);
  v24 = v19;
  while (1)
  {
    v26 = *v22++;
    v25 = v26;
    v27 = *v23++;
    if (v25 != v27)
      break;
    if (!--v24)
      goto LABEL_20;
  }
LABEL_33:
  LOBYTE(v13) = v17;
LABEL_49:
  if ((v13 & 1) != 0)
  {
LABEL_52:
    result = v63;
    if (v63 != v62)
      goto LABEL_89;
    v47 = 4;
    result = v62;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v47))();
  }
  result = v61;
  if (v61 == v60)
  {
    v47 = 4;
    result = v60;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v47))();
  }
LABEL_89:
  if (result)
  {
    v47 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v47))();
  }
  return result;
}

void sub_19BF9FAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v29;
  uint64_t v30;

  v29 = a28;
  if (a28 == &a25)
  {
    v30 = 4;
    v29 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BF9FC1C(_QWORD *result)
{
  _QWORD *v1;
  int v2;

  if (result)
  {
    v1 = result;
    result = malloc_type_calloc(0x28uLL, 1uLL, 0x105D286FuLL);
    v2 = *((_DWORD *)v1 + 7);
    if (v2)
    {
      if (v2 == 1)
      {
        *result = *v1;
        result[1] = v1[1];
        *((_DWORD *)result + 4) = *((_DWORD *)v1 + 4);
        *((_DWORD *)result + 5) = *((_DWORD *)v1 + 5);
      }
    }
    else
    {
      *(_OWORD *)result = *(_OWORD *)v1;
      result[2] = v1[2];
      *((_DWORD *)result + 6) = *((_DWORD *)v1 + 6);
    }
    *((_DWORD *)result + 7) = v2;
    result[4] = v1[4];
  }
  return result;
}

uint64_t sub_19BF9FCA8(_DWORD *a1, _DWORD *a2)
{
  int v2;
  int v3;

  v2 = a1[7];
  if (v2)
  {
    if (v2 != 1)
      return 0;
    v3 = a1[4];
    if (!v3)
      return 0;
  }
  else
  {
    v3 = a1[5];
    if (!v3)
      return 0;
  }
  if (a2)
    *a2 = v3;
  return 1;
}

_QWORD *sub_19BF9FCE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BYTE v29[16];
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[16];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a1 || *(_QWORD *)(a1 + 2080))
    return sub_19BF8E43C((_QWORD *)a2, "");
  sub_19BFA0144((uint64_t)v16);
  v21 = 12648430;
  v22 = 0;
  v23 = *(_QWORD *)(a1 + 2060);
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v28 = 0;
  v24 = *(_DWORD *)(a1 + 2088);
  HIDWORD(v25) = 2;
  std::ostream::write();
  if ((*(_BYTE *)(a1 + 2064) & 1) != 0)
    sub_19BFA35B0(a1, a1, v17);
  else
    sub_19BFA3830(a1, a1, v17);
  v5 = (char *)v17 + *(_QWORD *)(v17[0] - 24);
  if ((v5[32] & 5) != 0)
  {
    v6 = -1;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v5 + 5) + 32))(v34, *((_QWORD *)v5 + 5), 0, 1, 16);
    v6 = v35;
  }
  v20 = v6;
  sub_19BFA3BA4(v17, (uint64_t)&v20, 4, 4);
  if ((*(_BYTE *)(a1 + 2064) & 1) != 0)
    sub_19BFA3EC0((_DWORD *)a1, v17, 0, 1, (int *)&v20);
  else
    sub_19BFA4180((_DWORD *)a1, v17, 0, 1, (int *)&v20);
  sub_19BFA3BA4(v17, (uint64_t)&v20, 4, 8);
  v7 = v20;
  MEMORY[0x1A1AD0B20](v29, v17);
  v8 = (char *)v17 + *(_QWORD *)(v17[0] - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)v8 + 5) + 32))(v34, *((_QWORD *)v8 + 5), v7, 0, 16);
    if (v35 == -1)
      std::ios_base::clear((std::ios_base *)((char *)v17 + *(_QWORD *)(v17[0] - 24)), *(_DWORD *)((char *)&v17[4] + *(_QWORD *)(v17[0] - 24)) | 4);
  }
  MEMORY[0x1A1AD0B2C](v29);
  *(_DWORD *)(a1 + 2060) = 0;
  if ((*(_DWORD *)(a1 + 2064) & 1) != 0)
    v9 = 2060;
  else
    v9 = 2052;
  bzero((void *)a1, v9);
  std::stringbuf::str();
  if (*(char *)(a2 + 23) >= 0)
    v10 = (char *)a2;
  else
    v10 = *(char **)a2;
  v11 = sub_19BF9C7A0(v10, 0);
  v12 = v11;
  if ((*(_BYTE *)(a1 + 2064) & 1) != 0)
  {
    v32[0] = &off_1E3D14990;
    v32[1] = sub_19BF9C4BC;
    v33 = v32;
    sub_19BF9CA9C(v11, 0, 0, a1, (uint64_t)v32, -1);
    v13 = v33;
    if (v33 == v32)
    {
      v14 = 4;
      v13 = v32;
      goto LABEL_29;
    }
  }
  else
  {
    v30[0] = &off_1E3D14990;
    v30[1] = sub_19BF9C2C8;
    v31 = v30;
    sub_19BF9CA9C(v11, 0, 0, a1, (uint64_t)v30, -1);
    v13 = v31;
    if (v31 == v30)
    {
      v14 = 4;
      v13 = v30;
LABEL_29:
      (*(void (**)(void))(*v13 + 8 * v14))();
      goto LABEL_30;
    }
  }
  if (v13)
  {
    v14 = 5;
    goto LABEL_29;
  }
LABEL_30:
  sub_19BF9C85C(v12);
  v16[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v15;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (_QWORD *)MEMORY[0x1A1AD0C7C](&v19);
}

void sub_19BFA00AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  MEMORY[0x1A1AD0B2C](&a53);
  sub_19BFA0270((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFA0144(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_19BFA0248(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD0C7C](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFA0270(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD0C7C](a1 + 128);
  return a1;
}

void sub_19BFA02F8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  for (i = 0; i != 256; ++i)
  {
    v3 = a1 + 8 * i;
    v6 = *(_QWORD *)(v3 + 12);
    v5 = (_QWORD *)(v3 + 12);
    v4 = v6;
    v7 = v6 & 3;
    if (v7 == 2)
    {
      v8 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    else if (v7 == 1)
    {
      sub_19BFA02F8(v4 & 0xFFFFFFFFFFFFFFFCLL);
      free((void *)(*v5 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

void sub_19BFA0374(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  for (i = 0; i != 256; ++i)
  {
    v3 = a1 + 8 * i;
    v6 = *(_QWORD *)(v3 + 4);
    v5 = (_QWORD *)(v3 + 4);
    v4 = v6;
    v7 = v6 & 3;
    if (v7 == 2)
    {
      v8 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    else if (v7 == 1)
    {
      sub_19BFA0374(v4 & 0xFFFFFFFFFFFFFFFCLL);
      free((void *)(*v5 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

uint64_t sub_19BFA03F0(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, int *a7)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  const void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  size_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v36;
  uint64_t v37;
  int *v38;

  v12 = a2;
  v13 = a1;
  v14 = (uint64_t *)*a2;
  v15 = malloc_type_calloc(8uLL, (*(_DWORD *)(a1 + 2088) + 1), 0x5241DECuLL);
  v16 = (const void *)(a3 + a5);
  if (v14)
  {
    v36 = v12;
    v37 = v13;
    v38 = a7;
    v17 = 0;
    v18 = 1;
LABEL_3:
    v19 = a6;
    v20 = 0;
    v21 = v17;
    v22 = &v15[v17];
    do
    {
      v23 = *((unsigned __int16 *)v14 + 6);
      if ((_DWORD)v23 + a5 == a4 && !memcmp(v16, (char *)v14 + 14, v23))
      {
        v18 = 0;
        a6 = v19;
        *((_DWORD *)v14 + 2) = v19;
        v17 = v21 + v20 + 1;
        v15[v21 + v20] = v14;
        v14 = (uint64_t *)*v14;
        if (v14)
          goto LABEL_3;
        v24 = (v21 + v20 + 1);
        v25 = 1;
        goto LABEL_15;
      }
      v22[v20] = v14;
      v14 = (uint64_t *)*v14;
      ++v20;
    }
    while (v14);
    v26 = v21 + v20;
    if ((v18 & 1) != 0)
    {
      v13 = v37;
      a7 = v38;
      LODWORD(a6) = v19;
      v12 = v36;
      goto LABEL_13;
    }
    v25 = 1;
    v24 = v26;
LABEL_15:
    v13 = v37;
    a7 = v38;
    v12 = v36;
  }
  else
  {
    LODWORD(v26) = 0;
LABEL_13:
    v27 = a4 - a5;
    v28 = (char *)malloc_type_calloc(1uLL, v27 + 15, 0x16B4CD09uLL);
    memcpy(v28 + 14, v16, v27);
    v28[v27 + 14] = 0;
    *((_WORD *)v28 + 6) = v27;
    *((_DWORD *)v28 + 2) = a6;
    v24 = (v26 + 1);
    v25 = 2;
    *(_QWORD *)v28 = 0;
    v15[v26] = v28;
  }
  qsort(v15, (int)v24, 8uLL, (int (__cdecl *)(const void *, const void *))sub_19BFA074C);
  v29 = (_QWORD *)*v15;
  v30 = (_QWORD *)*v15;
  if ((int)v24 >= 2)
  {
    v31 = v15 + 1;
    v32 = v24 - 1;
    v33 = (_QWORD *)*v15;
    do
    {
      v34 = (_QWORD *)*v31++;
      v30 = v34;
      *v33 = v34;
      v33 = v34;
      --v32;
    }
    while (v32);
  }
  *v30 = 0;
  *v12 = v29;
  free(v15);
  *a7 = v25;
  if (v24 > *(_DWORD *)(v13 + 2088))
    sub_19BFA518C();
  return v24;
}

_DWORD *sub_19BFA05EC(uint64_t a1, unsigned __int16 *a2, int *a3)
{
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unint64_t v19;

  v6 = malloc_type_calloc(1uLL, 0x804uLL, 0x10000406A7154B6uLL);
  if (a2)
  {
    do
    {
      v7 = a2[6];
      v8 = *((unsigned int *)a2 + 2);
      if (a2[6])
      {
        v9 = *(_QWORD *)&v6[2 * *((unsigned __int8 *)a2 + 14) + 1];
        if (v9)
        {
          v19 = v9 & 0xFFFFFFFFFFFFFFFCLL;
          v10 = sub_19BFA03F0(a1, &v19, (uint64_t)(a2 + 7), v7, 1u, v8, a3);
          v11 = v19;
          if (v10 >= *(_DWORD *)(a1 + 2088))
          {
            v11 = sub_19BFA05EC(a1, v19, a3);
            v12 = 1;
          }
          else
          {
            v12 = 2;
          }
          v15 = v12 | v11;
          v16 = *((unsigned __int8 *)a2 + 14);
        }
        else
        {
          v13 = (v7 - 1);
          v14 = (unint64_t)malloc_type_calloc(1uLL, v13 + 15, 0x16B4CD09uLL);
          memcpy((void *)(v14 + 14), (char *)a2 + 15, v13);
          *(_BYTE *)(v14 + 14 + v13) = 0;
          *(_WORD *)(v14 + 12) = v13;
          *(_DWORD *)(v14 + 8) = v8;
          *(_QWORD *)v14 = 0;
          v15 = v14 | 2;
          v16 = *((unsigned __int8 *)a2 + 14);
        }
        *(_QWORD *)&v6[2 * v16 + 1] = v15;
      }
      else
      {
        *v6 = v8;
      }
      v17 = *(unsigned __int16 **)a2;
      free(a2);
      a2 = v17;
    }
    while (v17);
  }
  return v6;
}

uint64_t sub_19BFA074C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  v4 = (const void *)(*a1 + 14);
  v5 = (const void *)(*a2 + 14);
  v6 = *(unsigned __int16 *)(v2 + 12);
  v7 = *(unsigned __int16 *)(v3 + 12);
  v8 = v6 - v7;
  if ((int)v6 >= (int)v7)
    v9 = v7;
  else
    v9 = v6;
  LODWORD(result) = memcmp(v4, v5, v9);
  if ((_DWORD)result)
    return result;
  else
    return v8;
}

uint64_t sub_19BFA0790(uint64_t a1, uint64_t **a2, uint64_t a3, int a4, unsigned int a5, int a6, float *a7, int *a8, float a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v17;
  uint64_t *v18;
  const void *v19;
  uint64_t v20;
  int v21;
  float v22;
  uint64_t v23;
  size_t v24;
  float v25;
  float v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;

  v17 = *a2;
  v18 = (uint64_t *)malloc_type_calloc(8uLL, (*(_DWORD *)(a1 + 2088) + 1), 0xA627795FuLL);
  v19 = (const void *)(a3 + a5);
  if (v17)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0.0;
    do
    {
      v23 = v20;
      v24 = *((unsigned __int16 *)v17 + 10);
      if ((_DWORD)v24 + a5 == a4 && !memcmp(v19, (char *)v17 + 22, v24))
      {
        *((_DWORD *)v17 + 4) = a6;
        v25 = *((float *)v17 + 3);
        if (*(_QWORD *)(a11 + 24))
          sub_19BFA0C78(a11, a10, v25, a9);
        else
          v26 = v25 + a9;
        *((float *)v17 + 3) = v26;
        v21 = 1;
      }
      if (*((float *)v17 + 2) > v22)
        v22 = *((float *)v17 + 2);
      ++v20;
      v18[v23] = (uint64_t)v17;
      v17 = (uint64_t *)*v17;
    }
    while (v17);
    if (v21)
    {
      v27 = 1;
      v28 = v23 + 1;
      v29 = a1;
      goto LABEL_18;
    }
  }
  else
  {
    LODWORD(v20) = 0;
    v22 = 0.0;
  }
  v29 = a1;
  if (v22 < a9)
    v22 = a9;
  v30 = a4 - a5;
  v31 = (char *)malloc_type_calloc(1uLL, v30 + 23, 0xD69735D9uLL);
  memcpy(v31 + 22, v19, v30);
  v31[v30 + 22] = 0;
  *((_WORD *)v31 + 10) = v30;
  *((_DWORD *)v31 + 4) = a6;
  *((float *)v31 + 2) = v22;
  *((float *)v31 + 3) = a9;
  v28 = (v20 + 1);
  v27 = 2;
  *(_QWORD *)v31 = 0;
  v18[v20] = (uint64_t)v31;
LABEL_18:
  qsort(v18, (int)v28, 8uLL, (int (__cdecl *)(const void *, const void *))sub_19BFA0CBC);
  v32 = (_QWORD *)*v18;
  *a7 = v22;
  v33 = v32;
  if ((int)v28 >= 2)
  {
    v34 = (v28 - 1);
    v35 = v18 + 1;
    v36 = v32;
    do
    {
      v37 = *v35++;
      v33 = (_QWORD *)v37;
      *v36 = v37;
      *(float *)(v37 + 8) = *a7;
      v36 = (_QWORD *)v37;
      --v34;
    }
    while (v34);
  }
  *v33 = 0;
  *a2 = v32;
  free(v18);
  *a8 = v27;
  if (v28 > *(_DWORD *)(v29 + 2088))
    sub_19BFA51B4();
  return v28;
}

float *sub_19BFA09B0(uint64_t a1, unsigned __int16 *a2, float *a3, int *a4)
{
  float *v8;
  int v9;
  int v10;
  float v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  float v24;
  unsigned __int16 *v25;
  float v26;
  float v28;
  uint64_t *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = (float *)malloc_type_calloc(1uLL, 0x80CuLL, 0x10000408B9410F9uLL);
  *a3 = 0.0;
  if (!a2)
  {
    v26 = 0.0;
    goto LABEL_26;
  }
  do
  {
    v28 = 0.0;
    v9 = a2[10];
    v10 = *((_DWORD *)a2 + 4);
    v11 = *((float *)a2 + 3);
    v31 = 0;
    if (!v9)
    {
      v8[1] = v11;
      *((_DWORD *)v8 + 2) = v10;
      v28 = v11;
      goto LABEL_16;
    }
    v12 = *(_QWORD *)&v8[2 * *((unsigned __int8 *)a2 + 22) + 3];
    if (v12)
    {
      v29 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      v33 = 0;
      v13 = sub_19BFA0790(a1, &v29, (uint64_t)(a2 + 11), v9, 1u, v10, &v28, a4, v11, 0, (uint64_t)v32);
      v14 = v33;
      if (v33 == v32)
      {
        v14 = v32;
        v15 = 4;
      }
      else
      {
        if (!v33)
        {
LABEL_11:
          v20 = (uint64_t)v29;
          if (v13 >= *(_DWORD *)(a1 + 2088))
          {
            v20 = sub_19BFA09B0(a1, v29, &v28, a4);
            v21 = 1;
          }
          else
          {
            v21 = 2;
          }
          v18 = v21 | v20;
          v19 = *((unsigned __int8 *)a2 + 22);
          goto LABEL_15;
        }
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
      goto LABEL_11;
    }
    v16 = (v9 - 1);
    v17 = (unint64_t)malloc_type_calloc(1uLL, v16 + 23, 0xD69735D9uLL);
    memcpy((void *)(v17 + 22), (char *)a2 + 23, v16);
    *(_BYTE *)(v17 + 22 + v16) = 0;
    *(_WORD *)(v17 + 20) = v16;
    *(_DWORD *)(v17 + 16) = v10;
    *(float *)(v17 + 8) = v11;
    *(float *)(v17 + 12) = v11;
    *(_QWORD *)v17 = 0;
    v28 = v11;
    v18 = v17 | 2;
    v19 = *((unsigned __int8 *)a2 + 22);
LABEL_15:
    *(_QWORD *)&v8[2 * v19 + 3] = v18;
LABEL_16:
    v22 = v31;
    if (v31 == v30)
    {
      v22 = v30;
      v23 = 4;
    }
    else
    {
      if (!v31)
        goto LABEL_21;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_21:
    v24 = v28;
    if (v28 <= *a3)
      v24 = *a3;
    *a3 = v24;
    v25 = *(unsigned __int16 **)a2;
    free(a2);
    a2 = v25;
  }
  while (v25);
  v26 = *a3;
LABEL_26:
  *v8 = v26;
  return v8;
}

void sub_19BFA0C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a17;
  if (a17 == &a14)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFA0C78(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v4;
  float v6;
  float v7;
  uint64_t v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, uint64_t *, float *, float *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_19BFA0CBC(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;

  v2 = *(float *)(*(_QWORD *)a1 + 12);
  v3 = *(float *)(*(_QWORD *)a2 + 12);
  if (v2 == v3)
  {
    v4 = *(_DWORD *)(*(_QWORD *)a1 + 16);
    v5 = *(_DWORD *)(*(_QWORD *)a2 + 16);
    v6 = v4 == v5;
    if (v4 > v5)
      v7 = -1;
    else
      v7 = 1;
    if (v6)
      return 0;
    else
      return v7;
  }
  else if ((float)(v2 - v3) <= 0.0)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_19BFA0D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _DWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  _BYTE v43[24];
  _BYTE *v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  if (a5 >= a4)
  {
    v21 = *(_DWORD *)(a2 + 1024);
    if (v21)
    {
      v35[0] = *(_DWORD *)(a2 + 1032);
      v35[1] = v21;
      v36 = a3;
      v37 = a4;
      sub_19BFA23C8(a8, a7, (uint64_t)v35, 1, (uint64_t)&v38);
      if (v38)
        return 1;
    }
    if ((a6 & 1) != 0)
      return v38 != 0;
    v23 = 0;
    v34 = a4 + 1;
    while (1)
    {
      v24 = *(_DWORD *)(a2 + 4 * v23);
      *(_BYTE *)(a3 + a5) = v23;
      v25 = v24 & 3;
      switch(v25)
      {
        case 3:
          v29 = *(_QWORD *)(a1 + 2080);
          sub_19BFA2418((uint64_t)v41, a8);
          v27 = sub_19BFA1D24(a1, (int8x8_t *)((v24 & 0xFFFFFFFC) + v29), a3, v34, a5 + 1, 0, a7, (uint64_t)v41);
          v38 = v27;
          v28 = v42;
          if (v42 == v41)
          {
            v28 = v41;
LABEL_23:
            v31 = 4;
            goto LABEL_24;
          }
          break;
        case 2:
          v30 = *(_QWORD *)(a1 + 2080);
          sub_19BFA2418((uint64_t)v39, a8);
          v27 = sub_19BFA2270((unsigned int *)((v24 & 0xFFFFFFFC) + v30), a3, v34, a5 + 1, 0, a7, (uint64_t)v39);
          v38 = v27;
          v28 = v40;
          if (v40 == v39)
          {
            v28 = v39;
            goto LABEL_23;
          }
          break;
        case 1:
          v26 = *(_QWORD *)(a1 + 2080);
          sub_19BFA2418((uint64_t)v43, a8);
          v27 = sub_19BFA0D04(a1, (v24 & 0xFFFFFFFC) + v26, a3, v34, a5 + 1, 0, a7, v43);
          v38 = v27;
          v28 = v44;
          if (v44 == v43)
          {
            v28 = v43;
            goto LABEL_23;
          }
          break;
        default:
          goto LABEL_25;
      }
      if (v28)
      {
        v31 = 5;
LABEL_24:
        (*(void (**)(_BYTE *))(*(_QWORD *)v28 + 8 * v31))(v28);
LABEL_25:
        v27 = v38;
      }
      if (v27)
        return 1;
      if (++v23 == 256)
        return v38 != 0;
    }
  }
  v16 = *(_DWORD *)(a2 + 4 * *(unsigned __int8 *)(a3 + a5));
  v17 = v16 & 3;
  switch(v17)
  {
    case 3:
      v32 = *(_QWORD *)(a1 + 2080);
      sub_19BFA2418((uint64_t)v47, a8);
      v38 = sub_19BFA1D24(a1, (int8x8_t *)((v16 & 0xFFFFFFFC) + v32), a3, a4, a5 + 1, a6, a7, (uint64_t)v47);
      v19 = v48;
      if (v48 == v47)
      {
        v20 = 4;
        v19 = v47;
        goto LABEL_35;
      }
      break;
    case 2:
      v33 = *(_QWORD *)(a1 + 2080);
      sub_19BFA2418((uint64_t)v45, a8);
      v38 = sub_19BFA2270((unsigned int *)((v16 & 0xFFFFFFFC) + v33), a3, a4, a5 + 1, a6, a7, (uint64_t)v45);
      v19 = v46;
      if (v46 == v45)
      {
        v20 = 4;
        v19 = v45;
        goto LABEL_35;
      }
      break;
    case 1:
      v18 = *(_QWORD *)(a1 + 2080);
      sub_19BFA2418((uint64_t)v49, a8);
      v38 = sub_19BFA0D04(a1, (v16 & 0xFFFFFFFC) + v18, a3, a4, a5 + 1, a6, a7, v49);
      v19 = v50;
      if (v50 == v49)
      {
        v20 = 4;
        v19 = v49;
LABEL_35:
        (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
        return v38 != 0;
      }
      break;
    default:
      return v38 != 0;
  }
  if (v19)
  {
    v20 = 5;
    goto LABEL_35;
  }
  return v38 != 0;
}

void sub_19BFA1098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;

  v33 = *(_QWORD **)(v30 + 88);
  if (v33 == v29)
  {
    v34 = 4;
    v33 = (_QWORD *)(v31 - 128);
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFA1170(uint64_t result, _DWORD *a2, int a3, _BYTE *a4)
{
  char v5;

  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
LABEL_5:
      *(_DWORD *)(result + 4) = a2[1];
      *(_DWORD *)(result + 8) = *a2;
LABEL_8:
      *a4 = 1;
      return result;
    }
    if (!*(_DWORD *)result)
    {
      if (!a3)
        return result;
      goto LABEL_5;
    }
    v5 = 0;
    if (*(_QWORD *)(result + 48))
    {
      result = sub_19BFA247C(result + 24, *(_QWORD *)(result + 16), (uint64_t)a2, (uint64_t)&v5);
      if (v5)
        goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_19BFA11F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _DWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  _BYTE v43[24];
  _BYTE *v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  if (a5 >= a4)
  {
    v21 = *(_DWORD *)(a2 + 1024);
    if (v21)
    {
      v35[0] = 0;
      v35[1] = v21;
      v36 = a3;
      v37 = a4;
      sub_19BFA23C8(a8, a7, (uint64_t)v35, 1, (uint64_t)&v38);
      if (v38)
        return 1;
    }
    if ((a6 & 1) != 0)
      return v38 != 0;
    v23 = 0;
    v34 = a4 + 1;
    while (1)
    {
      v24 = *(_DWORD *)(a2 + 4 * v23);
      *(_BYTE *)(a3 + a5) = v23;
      v25 = v24 & 3;
      switch(v25)
      {
        case 3:
          v29 = *(_QWORD *)(a1 + 2080);
          sub_19BFA2418((uint64_t)v41, a8);
          v27 = sub_19BFA25D4(a1, (int8x8_t *)((v24 & 0xFFFFFFFC) + v29), a3, v34, a5 + 1, 0, a7, (uint64_t)v41);
          v38 = v27;
          v28 = v42;
          if (v42 == v41)
          {
            v28 = v41;
LABEL_23:
            v31 = 4;
            goto LABEL_24;
          }
          break;
        case 2:
          v30 = *(_QWORD *)(a1 + 2080);
          sub_19BFA2418((uint64_t)v39, a8);
          v27 = sub_19BFA2B28(a1, (unsigned int *)((v24 & 0xFFFFFFFC) + v30), a3, v34, a5 + 1, 0, a7, (uint64_t)v39);
          v38 = v27;
          v28 = v40;
          if (v40 == v39)
          {
            v28 = v39;
            goto LABEL_23;
          }
          break;
        case 1:
          v26 = *(_QWORD *)(a1 + 2080);
          sub_19BFA2418((uint64_t)v43, a8);
          v27 = sub_19BFA11F8(a1, (v24 & 0xFFFFFFFC) + v26, a3, v34, a5 + 1, 0, a7, v43);
          v38 = v27;
          v28 = v44;
          if (v44 == v43)
          {
            v28 = v43;
            goto LABEL_23;
          }
          break;
        default:
          goto LABEL_25;
      }
      if (v28)
      {
        v31 = 5;
LABEL_24:
        (*(void (**)(void))(*(_QWORD *)v28 + 8 * v31))();
LABEL_25:
        v27 = v38;
      }
      if (v27)
        return 1;
      if (++v23 == 256)
        return v38 != 0;
    }
  }
  v16 = *(_DWORD *)(a2 + 4 * *(unsigned __int8 *)(a3 + a5));
  v17 = v16 & 3;
  switch(v17)
  {
    case 3:
      v32 = *(_QWORD *)(a1 + 2080);
      sub_19BFA2418((uint64_t)v47, a8);
      v38 = sub_19BFA25D4(a1, (int8x8_t *)((v16 & 0xFFFFFFFC) + v32), a3, a4, a5 + 1, a6, a7, (uint64_t)v47);
      v19 = v48;
      if (v48 == v47)
      {
        v20 = 4;
        v19 = v47;
        goto LABEL_35;
      }
      break;
    case 2:
      v33 = *(_QWORD *)(a1 + 2080);
      sub_19BFA2418((uint64_t)v45, a8);
      v38 = sub_19BFA2B28(a1, (unsigned int *)((v16 & 0xFFFFFFFC) + v33), a3, a4, a5 + 1, a6, a7, (uint64_t)v45);
      v19 = v46;
      if (v46 == v45)
      {
        v20 = 4;
        v19 = v45;
        goto LABEL_35;
      }
      break;
    case 1:
      v18 = *(_QWORD *)(a1 + 2080);
      sub_19BFA2418((uint64_t)v49, a8);
      v38 = sub_19BFA11F8(a1, (v16 & 0xFFFFFFFC) + v18, a3, a4, a5 + 1, a6, a7, v49);
      v19 = v50;
      if (v50 == v49)
      {
        v20 = 4;
        v19 = v49;
LABEL_35:
        (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
        return v38 != 0;
      }
      break;
    default:
      return v38 != 0;
  }
  if (v19)
  {
    v20 = 5;
    goto LABEL_35;
  }
  return v38 != 0;
}

void sub_19BFA1594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;

  v33 = *(_QWORD **)(v30 + 88);
  if (v33 == v29)
  {
    v34 = 4;
    v33 = (_QWORD *)(v31 - 128);
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFA166C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  _DWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  if (a4 >= a3)
  {
    v18 = *(_DWORD *)(a1 + 8);
    if (v18)
    {
      v28[0] = *(_DWORD *)(a1 + 4);
      v28[1] = v18;
      v29 = a2;
      v30 = a4;
      sub_19BFA23C8(a7, a6, (uint64_t)v28, 1, (uint64_t)&v31);
      v15 = v31 != 0;
      if (v31 || (a5 & 1) != 0)
        return v15;
    }
    else if ((a5 & 1) != 0)
    {
      return 0;
    }
    v19 = 0;
    v20 = (a3 + 1);
    v21 = a1 + 12;
    while (1)
    {
      v22 = *(_QWORD *)(v21 + 8 * v19);
      *(_BYTE *)(a2 + a4) = v19;
      if ((v22 & 3) == 2)
        break;
      if ((v22 & 3) == 1)
      {
        sub_19BFA2418((uint64_t)v34, a7);
        v23 = sub_19BFA166C(v22 & 0xFFFFFFFFFFFFFFFCLL, a2, v20, a4 + 1, 0, a6, v34);
        v31 = v23;
        v24 = v35;
        if (v35 == v34)
        {
          v24 = v34;
          goto LABEL_21;
        }
LABEL_18:
        if (!v24)
          goto LABEL_24;
        v25 = 5;
        goto LABEL_22;
      }
LABEL_23:
      v23 = v31;
LABEL_24:
      v15 = v23 != 0;
      if (!v23 && v19++ != 255)
        continue;
      return v15;
    }
    sub_19BFA2418((uint64_t)v32, a7);
    v23 = sub_19BFA2E74(v22 & 0xFFFFFFFFFFFFFFFCLL, a2, v20, a4 + 1, 0, a6, (uint64_t)v32);
    v31 = v23;
    v24 = v33;
    if (v33 != v32)
      goto LABEL_18;
    v24 = v32;
LABEL_21:
    v25 = 4;
LABEL_22:
    (*(void (**)(_BYTE *))(*(_QWORD *)v24 + 8 * v25))(v24);
    goto LABEL_23;
  }
  v14 = *(_QWORD *)(a1 + 8 * *(unsigned __int8 *)(a2 + a4) + 12);
  if ((v14 & 3) != 2)
  {
    if ((v14 & 3) == 1)
    {
      sub_19BFA2418((uint64_t)v38, a7);
      v15 = sub_19BFA166C(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, v38);
      v16 = v39;
      if (v39 == v38)
      {
        v17 = 4;
        v16 = v38;
LABEL_32:
        (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
        return v15;
      }
      goto LABEL_29;
    }
    return 0;
  }
  sub_19BFA2418((uint64_t)v36, a7);
  v15 = sub_19BFA2E74(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, (uint64_t)v36);
  v16 = v37;
  if (v37 == v36)
  {
    v17 = 4;
    v16 = v36;
    goto LABEL_32;
  }
LABEL_29:
  if (v16)
  {
    v17 = 5;
    goto LABEL_32;
  }
  return v15;
}

void sub_19BFA1930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFA19CC(int *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  _DWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  if (a4 >= a3)
  {
    v18 = *a1;
    if (*a1)
    {
      v28[0] = 0;
      v28[1] = v18;
      v29 = a2;
      v30 = a4;
      sub_19BFA23C8(a7, a6, (uint64_t)v28, 1, (uint64_t)&v31);
      v15 = v31 != 0;
      if (v31 || (a5 & 1) != 0)
        return v15;
    }
    else if ((a5 & 1) != 0)
    {
      return 0;
    }
    v19 = 0;
    v20 = (a3 + 1);
    v21 = a1 + 1;
    while (1)
    {
      v22 = *(_QWORD *)&v21[2 * v19];
      *(_BYTE *)(a2 + a4) = v19;
      if ((v22 & 3) == 2)
        break;
      if ((v22 & 3) == 1)
      {
        sub_19BFA2418((uint64_t)v34, a7);
        v23 = sub_19BFA19CC(v22 & 0xFFFFFFFFFFFFFFFCLL, a2, v20, a4 + 1, 0, a6, v34);
        v31 = v23;
        v24 = v35;
        if (v35 == v34)
        {
          v24 = v34;
          goto LABEL_21;
        }
LABEL_18:
        if (!v24)
          goto LABEL_24;
        v25 = 5;
        goto LABEL_22;
      }
LABEL_23:
      v23 = v31;
LABEL_24:
      v15 = v23 != 0;
      if (!v23 && v19++ != 255)
        continue;
      return v15;
    }
    sub_19BFA2418((uint64_t)v32, a7);
    v23 = sub_19BFA2F98(v22 & 0xFFFFFFFFFFFFFFFCLL, a2, v20, a4 + 1, 0, a6, (uint64_t)v32);
    v31 = v23;
    v24 = v33;
    if (v33 != v32)
      goto LABEL_18;
    v24 = v32;
LABEL_21:
    v25 = 4;
LABEL_22:
    (*(void (**)(_BYTE *))(*(_QWORD *)v24 + 8 * v25))(v24);
    goto LABEL_23;
  }
  v14 = *(_QWORD *)&a1[2 * *(unsigned __int8 *)(a2 + a4) + 1];
  if ((v14 & 3) != 2)
  {
    if ((v14 & 3) == 1)
    {
      sub_19BFA2418((uint64_t)v38, a7);
      v15 = sub_19BFA19CC(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, v38);
      v16 = v39;
      if (v39 == v38)
      {
        v17 = 4;
        v16 = v38;
LABEL_32:
        (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
        return v15;
      }
      goto LABEL_29;
    }
    return 0;
  }
  sub_19BFA2418((uint64_t)v36, a7);
  v15 = sub_19BFA2F98(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, (uint64_t)v36);
  v16 = v37;
  if (v37 == v36)
  {
    v17 = 4;
    v16 = v36;
    goto LABEL_32;
  }
LABEL_29:
  if (v16)
  {
    v17 = 5;
    goto LABEL_32;
  }
  return v15;
}

void sub_19BFA1C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFA1D24(uint64_t a1, int8x8_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  uint64_t v19;
  int v20;
  __int32 v21;
  unint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  int v26;
  int8x8_t *v27;
  int8x8_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  __int32 v31;
  int v32;
  uint64_t v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x8_t *v39;
  int8x8_t v40;
  uint8x8_t v41;
  uint8x8_t v42;
  __int32 v43;
  int v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  _DWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  _BYTE v56[24];
  _BYTE *v57;
  _BYTE v58[24];
  _BYTE *v59;
  _BYTE v60[24];
  _BYTE *v61;
  _BYTE v62[24];
  _BYTE *v63;
  _BYTE v64[24];
  _BYTE *v65;
  _BYTE v66[24];
  _BYTE *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v55 = 0;
  if (a5 >= a4)
  {
    v21 = a2[5].i32[0];
    if (v21)
    {
      v52[0] = a2[4].i32[1];
      v52[1] = v21;
      v53 = a3;
      v54 = a4;
      sub_19BFA23C8(a8, a7, (uint64_t)v52, 1, (uint64_t)&v55);
      if (v55)
        return 1;
    }
    if ((a6 & 1) != 0)
      return v55 != 0;
    v23 = 0;
    v50 = a5 + 1;
    v51 = a4 + 1;
    while (1)
    {
      if (v23 >> 6 <= 1)
        v24 = 1;
      else
        v24 = v23 >> 6;
      v25 = a2[v23 >> 6];
      if ((*(_QWORD *)&v25 & (1 << v23)) == 0)
        goto LABEL_31;
      if (v23 >= 0x40)
      {
        v26 = 0;
        v27 = a2;
        do
        {
          v28 = *v27++;
          v29 = (uint8x8_t)vcnt_s8(v28);
          v29.i16[0] = vaddlv_u8(v29);
          v26 += v29.i32[0];
          --v24;
        }
        while (v24);
      }
      else
      {
        v26 = 0;
      }
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v25 & ((1 << v23) - 1)));
      v30.i16[0] = vaddlv_u8(v30);
      v31 = a2[5].i32[v26 + v30.i32[0] + 1];
      *(_BYTE *)(a3 + a5) = v23;
      v32 = v31 & 3;
      switch(v32)
      {
        case 1:
          v36 = *(_QWORD *)(a1 + 2080);
          sub_19BFA2418((uint64_t)v60, a8);
          v34 = sub_19BFA0D04(a1, v36 + (v31 & 0xFFFFFFFC), a3, v51, v50, 0, a7, v60);
          v55 = v34;
          v35 = v61;
          if (v61 == v60)
          {
            v35 = v60;
LABEL_29:
            v38 = 4;
            goto LABEL_30;
          }
          break;
        case 2:
          v37 = *(_QWORD *)(a1 + 2080);
          sub_19BFA2418((uint64_t)v56, a8);
          v34 = sub_19BFA2270((unsigned int *)(v37 + (v31 & 0xFFFFFFFC)), a3, v51, v50, 0, a7, (uint64_t)v56);
          v55 = v34;
          v35 = v57;
          if (v57 == v56)
          {
            v35 = v56;
            goto LABEL_29;
          }
          break;
        case 3:
          v33 = *(_QWORD *)(a1 + 2080);
          sub_19BFA2418((uint64_t)v58, a8);
          v34 = sub_19BFA1D24(a1, v33 + (v31 & 0xFFFFFFFC), a3, v51, v50, 0, a7, v58);
          v55 = v34;
          v35 = v59;
          if (v59 == v58)
          {
            v35 = v58;
            goto LABEL_29;
          }
          break;
        default:
          goto LABEL_31;
      }
      if (v35)
      {
        v38 = 5;
LABEL_30:
        (*(void (**)(_BYTE *))(*(_QWORD *)v35 + 8 * v38))(v35);
LABEL_31:
        v34 = v55;
      }
      if (v34)
        return 1;
      if ((_DWORD)++v23 == 256)
        return v55 != 0;
    }
  }
  v16 = *(unsigned __int8 *)(a3 + a5);
  v17 = v16 >> 6;
  v18 = a2[v16 >> 6];
  v19 = 1 << v16;
  if (((1 << v16) & *(_QWORD *)&v18) != 0)
  {
    if (v16 >= 0x40)
    {
      v20 = 0;
      if (v17 <= 1)
        v17 = 1;
      else
        v17 = v17;
      v39 = a2;
      do
      {
        v40 = *v39++;
        v41 = (uint8x8_t)vcnt_s8(v40);
        v41.i16[0] = vaddlv_u8(v41);
        v20 += v41.i32[0];
        --v17;
      }
      while (v17);
    }
    else
    {
      v20 = 0;
    }
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)((v19 - 1) & *(_QWORD *)&v18));
    v42.i16[0] = vaddlv_u8(v42);
    v43 = a2[5].i32[v20 + v42.i32[0] + 1];
    v44 = v43 & 3;
    switch(v44)
    {
      case 1:
        v48 = *(_QWORD *)(a1 + 2080);
        sub_19BFA2418((uint64_t)v66, a8);
        v55 = sub_19BFA0D04(a1, (v43 & 0xFFFFFFFC) + v48, a3, a4, a5 + 1, a6, a7, v66);
        v46 = v67;
        if (v67 == v66)
        {
          v47 = 4;
          v46 = v66;
          goto LABEL_51;
        }
        break;
      case 2:
        v49 = *(_QWORD *)(a1 + 2080);
        sub_19BFA2418((uint64_t)v62, a8);
        v55 = sub_19BFA2270((unsigned int *)((v43 & 0xFFFFFFFC) + v49), a3, a4, a5 + 1, a6, a7, (uint64_t)v62);
        v46 = v63;
        if (v63 == v62)
        {
          v47 = 4;
          v46 = v62;
          goto LABEL_51;
        }
        break;
      case 3:
        v45 = *(_QWORD *)(a1 + 2080);
        sub_19BFA2418((uint64_t)v64, a8);
        v55 = sub_19BFA1D24(a1, (v43 & 0xFFFFFFFC) + v45, a3, a4, a5 + 1, a6, a7, v64);
        v46 = v65;
        if (v65 == v64)
        {
          v47 = 4;
          v46 = v64;
LABEL_51:
          (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
          return v55 != 0;
        }
        break;
      default:
        return v55 != 0;
    }
    if (v46)
    {
      v47 = 5;
      goto LABEL_51;
    }
  }
  return v55 != 0;
}

void sub_19BFA2198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  v31 = *(_QWORD **)(v28 + 56);
  if (v31 == v27)
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 160);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFA2270(unsigned int *a1, uint64_t a2, unsigned int a3, unsigned int a4, char a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  const void *v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  void *__dst;
  uint64_t v24;
  _DWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  char v33;

  v33 = 0;
  v7 = *a1;
  if (*a1)
  {
    v8 = a4;
    v10 = 0;
    v11 = (const void *)(a2 + a4);
    v12 = a3 - a4;
    v24 = a3;
    __dst = (void *)(a2 + a3);
    do
    {
      v13 = (char *)a1 + v10;
      v14 = *((unsigned __int16 *)v13 + 8);
      if (v12 <= (int)v14)
      {
        v15 = v13 + 8;
        v16 = v13 + 18;
        if (!memcmp(v13 + 18, v11, v12))
        {
          v17 = a5;
          if (v12 == (_DWORD)v14)
            v17 = 0;
          if ((v17 & 1) == 0)
          {
            v18 = v14 + v8;
            v19 = v18 - a3;
            v20 = v24;
            if ((int)v19 >= 1)
            {
              memcpy(__dst, &v16[v14 - (int)v19], v19);
              v20 = v18;
            }
            *(_BYTE *)(a2 + v20) = 0;
            v30[0] = *(_DWORD *)v15;
            v30[1] = *((_DWORD *)v15 + 1);
            v31 = a2;
            v32 = v20;
            sub_19BFA23C8(a7, a6, (uint64_t)v30, v12 == (_DWORD)v14, (uint64_t)&v33);
            if (v33)
              return 1;
            LODWORD(v14) = *((unsigned __int16 *)v15 + 4);
            v8 = a4;
          }
        }
      }
      v10 += v14 + 10;
    }
    while (v10 < v7);
  }
  return 0;
}

uint64_t sub_19BFA23C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v9 = a3;
  v8 = a4;
  v7 = a5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t sub_19BFA2418(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_19BFA247C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

void sub_19BFA24C4()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFA24D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D149E8;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFA250C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D149E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFA2528(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, _QWORD *a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4, *a5);
}

uint64_t sub_19BFA2540(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D135F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFA257C()
{
  return &unk_1E3D135F0;
}

BOOL sub_19BFA2588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t sub_19BFA25D4(uint64_t a1, int8x8_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  uint64_t v19;
  int v20;
  __int32 v21;
  unint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  int v26;
  int8x8_t *v27;
  int8x8_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  __int32 v31;
  int v32;
  uint64_t v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x8_t *v39;
  int8x8_t v40;
  uint8x8_t v41;
  uint8x8_t v42;
  __int32 v43;
  int v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  _DWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  _BYTE v56[24];
  _BYTE *v57;
  _BYTE v58[24];
  _BYTE *v59;
  _BYTE v60[24];
  _BYTE *v61;
  _BYTE v62[24];
  _BYTE *v63;
  _BYTE v64[24];
  _BYTE *v65;
  _BYTE v66[24];
  _BYTE *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v55 = 0;
  if (a5 >= a4)
  {
    v21 = a2[4].i32[0];
    if (v21)
    {
      v52[0] = 0;
      v52[1] = v21;
      v53 = a3;
      v54 = a4;
      sub_19BFA23C8(a8, a7, (uint64_t)v52, 1, (uint64_t)&v55);
      if (v55)
        return 1;
    }
    if ((a6 & 1) != 0)
      return v55 != 0;
    v23 = 0;
    v50 = a5 + 1;
    v51 = a4 + 1;
    while (1)
    {
      if (v23 >> 6 <= 1)
        v24 = 1;
      else
        v24 = v23 >> 6;
      v25 = a2[v23 >> 6];
      if ((*(_QWORD *)&v25 & (1 << v23)) == 0)
        goto LABEL_31;
      if (v23 >= 0x40)
      {
        v26 = 0;
        v27 = a2;
        do
        {
          v28 = *v27++;
          v29 = (uint8x8_t)vcnt_s8(v28);
          v29.i16[0] = vaddlv_u8(v29);
          v26 += v29.i32[0];
          --v24;
        }
        while (v24);
      }
      else
      {
        v26 = 0;
      }
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v25 & ((1 << v23) - 1)));
      v30.i16[0] = vaddlv_u8(v30);
      v31 = a2[4].i32[v26 + v30.i32[0] + 1];
      *(_BYTE *)(a3 + a5) = v23;
      v32 = v31 & 3;
      switch(v32)
      {
        case 1:
          v36 = *(_QWORD *)(a1 + 2080);
          sub_19BFA2418((uint64_t)v60, a8);
          v34 = sub_19BFA11F8(a1, v36 + (v31 & 0xFFFFFFFC), a3, v51, v50, 0, a7, v60);
          v55 = v34;
          v35 = v61;
          if (v61 == v60)
          {
            v35 = v60;
LABEL_29:
            v38 = 4;
            goto LABEL_30;
          }
          break;
        case 2:
          v37 = *(_QWORD *)(a1 + 2080);
          sub_19BFA2418((uint64_t)v56, a8);
          v34 = sub_19BFA2B28(a1, (unsigned int *)(v37 + (v31 & 0xFFFFFFFC)), a3, v51, v50, 0, a7, (uint64_t)v56);
          v55 = v34;
          v35 = v57;
          if (v57 == v56)
          {
            v35 = v56;
            goto LABEL_29;
          }
          break;
        case 3:
          v33 = *(_QWORD *)(a1 + 2080);
          sub_19BFA2418((uint64_t)v58, a8);
          v34 = sub_19BFA25D4(a1, v33 + (v31 & 0xFFFFFFFC), a3, v51, v50, 0, a7, v58);
          v55 = v34;
          v35 = v59;
          if (v59 == v58)
          {
            v35 = v58;
            goto LABEL_29;
          }
          break;
        default:
          goto LABEL_31;
      }
      if (v35)
      {
        v38 = 5;
LABEL_30:
        (*(void (**)(void))(*(_QWORD *)v35 + 8 * v38))();
LABEL_31:
        v34 = v55;
      }
      if (v34)
        return 1;
      if ((_DWORD)++v23 == 256)
        return v55 != 0;
    }
  }
  v16 = *(unsigned __int8 *)(a3 + a5);
  v17 = v16 >> 6;
  v18 = a2[v16 >> 6];
  v19 = 1 << v16;
  if (((1 << v16) & *(_QWORD *)&v18) != 0)
  {
    if (v16 >= 0x40)
    {
      v20 = 0;
      if (v17 <= 1)
        v17 = 1;
      else
        v17 = v17;
      v39 = a2;
      do
      {
        v40 = *v39++;
        v41 = (uint8x8_t)vcnt_s8(v40);
        v41.i16[0] = vaddlv_u8(v41);
        v20 += v41.i32[0];
        --v17;
      }
      while (v17);
    }
    else
    {
      v20 = 0;
    }
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)((v19 - 1) & *(_QWORD *)&v18));
    v42.i16[0] = vaddlv_u8(v42);
    v43 = a2[4].i32[v20 + v42.i32[0] + 1];
    v44 = v43 & 3;
    switch(v44)
    {
      case 1:
        v48 = *(_QWORD *)(a1 + 2080);
        sub_19BFA2418((uint64_t)v66, a8);
        v55 = sub_19BFA11F8(a1, (v43 & 0xFFFFFFFC) + v48, a3, a4, a5 + 1, a6, a7, v66);
        v46 = v67;
        if (v67 == v66)
        {
          v47 = 4;
          v46 = v66;
          goto LABEL_51;
        }
        break;
      case 2:
        v49 = *(_QWORD *)(a1 + 2080);
        sub_19BFA2418((uint64_t)v62, a8);
        v55 = sub_19BFA2B28(a1, (unsigned int *)((v43 & 0xFFFFFFFC) + v49), a3, a4, a5 + 1, a6, a7, (uint64_t)v62);
        v46 = v63;
        if (v63 == v62)
        {
          v47 = 4;
          v46 = v62;
          goto LABEL_51;
        }
        break;
      case 3:
        v45 = *(_QWORD *)(a1 + 2080);
        sub_19BFA2418((uint64_t)v64, a8);
        v55 = sub_19BFA25D4(a1, (v43 & 0xFFFFFFFC) + v45, a3, a4, a5 + 1, a6, a7, v64);
        v46 = v65;
        if (v65 == v64)
        {
          v47 = 4;
          v46 = v64;
LABEL_51:
          (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
          return v55 != 0;
        }
        break;
      default:
        return v55 != 0;
    }
    if (v46)
    {
      v47 = 5;
      goto LABEL_51;
    }
  }
  return v55 != 0;
}

void sub_19BFA2A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  v31 = *(_QWORD **)(v28 + 56);
  if (v31 == v27)
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 160);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFA2B28(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int a4, unsigned int a5, char a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  unsigned int v11;
  const void *v12;
  char v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  size_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  unsigned int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  size_t v32;
  char v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  void *v41;
  void *__dst;
  char *__dsta;
  unsigned int v45;
  uint64_t v46;
  _DWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 __s1;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v56 = 0;
  v9 = a4 - a5;
  v10 = *a2;
  if ((*(_BYTE *)(a1 + 2064) & 4) != 0)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v64 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    __s1 = 0u;
    if (v10)
    {
      v22 = 0;
      v23 = 0;
      v24 = (char *)(a3 + a5);
      v45 = a5 - a4;
      v41 = (void *)(a3 + a4);
      __dsta = v24;
      do
      {
        v25 = (char *)a2 + v23;
        v26 = v25[10];
        if (v22)
        {
          v27 = v22[6];
          if (v26 > v27)
            memcpy((char *)&__s1 + v27, v22 + 7, v26 - v27);
        }
        v22 = v25 + 4;
        v28 = *((unsigned __int16 *)v25 + 4);
        v29 = v28 + v26;
        if ((int)(v28 + v26) >= v9)
        {
          if (a4 == a5 || ((int)v26 >= v9 ? (v30 = v9) : (v30 = v26), !memcmp(&__s1, v24, v30)))
          {
            v31 = v9 - v26;
            if (v9 - (int)v26 < 0
              || ((int)v28 >= (int)v31 ? (v32 = v31) : (v32 = v28), !memcmp(v25 + 11, &v24[v26], v32)))
            {
              v33 = a6;
              if (v9 == v29)
                v33 = 0;
              if ((v33 & 1) == 0)
              {
                v34 = v26 + a5;
                v35 = v26 + a5 - a4;
                if (v35 < 1)
                {
                  v34 = a4;
                }
                else
                {
                  memcpy(v41, (char *)&__s1 + v26 - v35, v34 - a4);
                  v28 = *((unsigned __int16 *)v22 + 2);
                  LODWORD(v26) = v22[6];
                }
                v36 = v45 + v28 + v26;
                if (v36 < 1)
                {
                  v38 = a3;
                }
                else
                {
                  v37 = v36 - (v35 & ~(v35 >> 31));
                  v38 = a3;
                  memcpy((void *)(a3 + v34), &v22[v28 - v37 + 7], v37);
                  v34 += v37;
                }
                *(_BYTE *)(v38 + v34) = 0;
                v39 = *(_DWORD *)v22;
                v53[0] = 0;
                v53[1] = v39;
                v54 = v38;
                v55 = v34;
                sub_19BFA23C8(a8, a7, (uint64_t)v53, v9 == v29, (uint64_t)&v56);
                if (v56)
                  return 1;
                v28 = *((unsigned __int16 *)v22 + 2);
                v24 = __dsta;
              }
            }
          }
        }
        v23 += v28 + 7;
      }
      while (v23 < v10);
    }
  }
  else if (v10)
  {
    v11 = 0;
    v12 = (const void *)(a3 + a5);
    v46 = a4;
    v13 = a6;
    __dst = (void *)(a3 + a4);
    do
    {
      v14 = (char *)a2 + v11;
      v15 = *((unsigned __int16 *)v14 + 4);
      if (v9 <= (int)v15)
      {
        v16 = v14 + 4;
        v17 = v14 + 10;
        if (!memcmp(v14 + 10, v12, v9))
        {
          v18 = v9 == (_DWORD)v15 ? 0 : v13;
          if ((v18 & 1) == 0)
          {
            v19 = (_DWORD)v15 + a5 - a4;
            v20 = v46;
            if ((int)v19 >= 1)
            {
              memcpy(__dst, &v17[v15 - (int)v19], v19);
              v20 = v15 + a5;
            }
            *(_BYTE *)(a3 + v20) = 0;
            v21 = *(_DWORD *)v16;
            LODWORD(__s1) = 0;
            DWORD1(__s1) = v21;
            *((_QWORD *)&__s1 + 1) = a3;
            *(_QWORD *)&v58 = v20;
            sub_19BFA23C8(a8, a7, (uint64_t)&__s1, v9 == (_DWORD)v15, (uint64_t)&v56);
            if (v56)
              return 1;
            LODWORD(v15) = *((unsigned __int16 *)v16 + 2);
            v13 = a6;
          }
        }
      }
      v11 += v15 + 6;
    }
    while (v11 < v10);
  }
  return 0;
}

uint64_t sub_19BFA2E74(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  const void *v11;
  size_t v12;
  uint64_t v14;
  char v15;
  size_t v16;
  uint64_t v17;
  void *__dst;
  uint64_t v19;
  _DWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  char v25;

  v25 = 0;
  if (result)
  {
    v10 = result;
    v11 = (const void *)(a2 + a4);
    v12 = (int)(a3 - a4);
    __dst = (void *)(a2 + a3);
    v19 = a3;
    while (1)
    {
      v14 = *(unsigned __int16 *)(v10 + 20);
      if ((int)v12 <= (int)v14 && !memcmp((const void *)(v10 + 22), v11, v12))
      {
        v15 = (_DWORD)v12 == (_DWORD)v14 ? 0 : a5;
        if ((v15 & 1) == 0)
        {
          v16 = (_DWORD)v14 + a4 - a3;
          v17 = v19;
          if ((int)v16 >= 1)
          {
            memcpy(__dst, (const void *)(v10 + 22 + v14 - (int)v16), v16);
            v17 = v14 + a4;
          }
          *(_BYTE *)(a2 + v17) = 0;
          v22[0] = *(_DWORD *)(v10 + 12);
          v22[1] = *(_DWORD *)(v10 + 16);
          v23 = a2;
          v24 = v17;
          sub_19BFA23C8(a7, a6, (uint64_t)v22, (_DWORD)v12 == (_DWORD)v14, (uint64_t)&v25);
          if (v25)
            break;
        }
      }
      v10 = *(_QWORD *)v10;
      if (!v10)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_19BFA2F98(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  const void *v11;
  size_t v12;
  uint64_t v14;
  char v15;
  size_t v16;
  uint64_t v17;
  int v18;
  void *__dst;
  uint64_t v20;
  _DWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  char v26;

  v26 = 0;
  if (result)
  {
    v10 = result;
    v11 = (const void *)(a2 + a4);
    v12 = (int)(a3 - a4);
    __dst = (void *)(a2 + a3);
    v20 = a3;
    while (1)
    {
      v14 = *(unsigned __int16 *)(v10 + 12);
      if ((int)v12 <= (int)v14 && !memcmp((const void *)(v10 + 14), v11, v12))
      {
        v15 = (_DWORD)v12 == (_DWORD)v14 ? 0 : a5;
        if ((v15 & 1) == 0)
        {
          v16 = (_DWORD)v14 + a4 - a3;
          v17 = v20;
          if ((int)v16 >= 1)
          {
            memcpy(__dst, (const void *)(v10 + 14 + v14 - (int)v16), v16);
            v17 = v14 + a4;
          }
          *(_BYTE *)(a2 + v17) = 0;
          v18 = *(_DWORD *)(v10 + 8);
          v23[0] = 0;
          v23[1] = v18;
          v24 = a2;
          v25 = v17;
          sub_19BFA23C8(a7, a6, (uint64_t)v23, (_DWORD)v12 == (_DWORD)v14, (uint64_t)&v26);
          if (v26)
            break;
        }
      }
      v10 = *(_QWORD *)v10;
      if (!v10)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_19BFA30B4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  int v6;
  int v7;
  unint64_t v8;

  v6 = a2;
  v7 = a1;
  v8 = (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL) + *(_QWORD *)(a1 + 2080);
  if ((*(_BYTE *)(a1 + 2064) & 1) != 0)
  {
    if (!a4)
    {
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v8 + 1024);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(v8 + 1032);
      return 1;
    }
LABEL_5:
    sub_19BFA3158(a1, (_QWORD *)a2, *(unsigned int *)(v8 + 4 * *a3));
    return sub_19BF9EF94(v7, v6, a3 + 1, (a4 - 1));
  }
  if (a4)
    goto LABEL_5;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v8 + 1024);
  return 1;
}

uint64_t sub_19BFA3158(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;

  if (*a2 != a3)
    return ((uint64_t (*)(void))((char *)&loc_19BFA3180 + 4 * byte_19C06480C[a3 & 3]))();
  return result;
}

uint64_t sub_19BFA322C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, __n128 a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  char v21;
  float v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  __n128 v30;
  double v31;
  char v32;
  int v34;
  _QWORD v35[2];
  size_t v36;
  int v37;
  __n128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 2064) & 1) == 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = *(unsigned int *)(a2 + 16);
    if (v10 > *(unsigned __int16 *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 12))
      sub_19BFA51DC();
    if (!v9)
    {
LABEL_20:
      v21 = 0;
      return v21 & 1;
    }
    v11 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    while (1)
    {
      v12 = *(unsigned __int16 *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 12);
      if (v11 != v9)
      {
        v12 = *(unsigned __int16 *)(v11 + 12);
        if (v10 >= v12)
          goto LABEL_19;
        if ((_DWORD)v10)
        {
          v13 = (unsigned __int8 *)(v11 + 14);
          v14 = *(unsigned int *)(a2 + 16);
          v15 = (unsigned __int8 *)(v9 + 14);
          do
          {
            v17 = *v13++;
            v16 = v17;
            v18 = *v15++;
            if (v16 != v18)
              goto LABEL_19;
          }
          while (--v14);
        }
      }
      LODWORD(v19) = 0;
      v20 = *(_DWORD *)(a2 + 16);
      if (v10 < v12 && a4)
      {
        v19 = 0;
        do
        {
          if (*(unsigned __int8 *)(v11 + v10 + 14 + v19) != a3[v19])
            break;
          if (++v19 + v10 >= v12)
            break;
        }
        while (v19 < a4);
        v20 = v10 + v19;
      }
      if ((_DWORD)v19 == a4)
      {
        *(_QWORD *)(a2 + 8) = v11 | 2;
        if (v20 == v12)
        {
          *(_DWORD *)(a2 + 16) = v12;
          *(_DWORD *)(a2 + 20) = *(_DWORD *)(v11 + 8);
        }
        else
        {
          *(_QWORD *)(a2 + 16) = v10 + a4;
        }
        v21 = 1;
        return v21 & 1;
      }
LABEL_19:
      v11 = *(_QWORD *)v11;
      if (!v11)
        goto LABEL_20;
    }
  }
  v35[1] = v35;
  v35[0] = *(_QWORD *)a2;
  a5.n128_u64[0] = *(_QWORD *)(a2 + 16);
  v22 = *(float *)(a2 + 24);
  v38 = a5;
  MEMORY[0x1E0C80A78]();
  v24 = (char *)v35 - v23;
  v26 = *(unsigned int *)(a2 + 16);
  memcpy((char *)v35 - v23, (const void *)(v25 + 22), v26);
  v27 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFCLL;
  if (v27)
  {
    v37 = 0;
    v28 = v26 + a4;
    v36 = a4;
    do
    {
      v29 = *(unsigned __int16 *)(v27 + 20);
      if (v28 <= v29 && !memcmp((const void *)(v27 + 22), v24, v26) && !memcmp((const void *)(v27 + 22 + v26), a3, v36))
      {
        if (v28 == v29)
        {
          *(_QWORD *)(a2 + 8) = v27 | 2;
          v34 = *(_DWORD *)(v27 + 16);
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(v27 + 12);
          *(_DWORD *)(a2 + 16) = v28;
          *(_DWORD *)(a2 + 20) = v34;
          v21 = 1;
          return v21 & 1;
        }
        v30 = v38;
        HIDWORD(v31) = 0;
        v32 = v37;
        if ((v37 & 1) == 0)
        {
          v8 = v27 | 2;
          v22 = 0.0;
        }
        v37 = 1;
        if ((v32 & 1) == 0)
        {
          LODWORD(v31) = v38.n128_u32[0] + a4;
          v30.n128_f64[0] = v31;
        }
        v38 = v30;
      }
      v27 = *(_QWORD *)v27;
    }
    while (v27);
  }
  else
  {
    v37 = 0;
  }
  *(_QWORD *)a2 = v35[0];
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v38.n128_u64[0];
  *(float *)(a2 + 24) = v22;
  v21 = v37;
  return v21 & 1;
}

uint64_t sub_19BFA3500(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v4;
  int v5;
  unint64_t v6;

  if (*(_QWORD *)(a2 + 8) != a3)
  {
    v3 = a3 & 3;
    if ((a3 & 3) != 0)
    {
      if (v3 == 2)
      {
        v6 = a3 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_BYTE *)(result + 2064) & 1) == 0)
        {
          if (*(_WORD *)(v6 + 12))
            v5 = 0;
          else
            v5 = *(_DWORD *)(v6 + 8);
          goto LABEL_14;
        }
        *(_DWORD *)(a2 + 20) = *(_DWORD *)(v6 + 16);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(v6 + 12);
        *(_QWORD *)a2 = a3;
      }
      else if (v3 == 1)
      {
        v4 = (int *)(a3 & 0xFFFFFFFFFFFFFFFCLL);
        if ((*(_BYTE *)(result + 2064) & 1) == 0)
        {
          v5 = *v4;
LABEL_14:
          *(_DWORD *)(a2 + 20) = v5;
          goto LABEL_15;
        }
        *(_DWORD *)(a2 + 20) = v4[2];
        *(_DWORD *)(a2 + 24) = v4[1];
      }
    }
    else
    {
      *(_QWORD *)(a2 + 20) = 0;
    }
LABEL_15:
    *(_QWORD *)(a2 + 8) = a3;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t sub_19BFA359C()
{
  return pthread_key_create((pthread_key_t *)&qword_1EE417290, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
}

void sub_19BFA35B0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  _DWORD *v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  _DWORD *v18;
  void *v19;
  size_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  _DWORD *v28;
  unsigned int v32;
  uint64_t v33[16];
  uint64_t v34;
  uint64_t v35;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = 0;
  v35 = *MEMORY[0x1E0C80C00];
  do
  {
    v7 = v4 + 8 * v6;
    v10 = *(_QWORD *)(v7 + 12);
    v9 = (uint64_t *)(v7 + 12);
    v8 = v10;
    v11 = v10 & 3;
    if (v11 == 2)
    {
      v12 = (char *)v3 + *(_QWORD *)(*v3 - 24);
      if ((v12[32] & 5) != 0)
      {
        v13 = -1;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(v33, *((_QWORD *)v12 + 5), 0, 1, 16);
        v13 = v34;
      }
      v32 = v13;
      v14 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      v15 = *(_DWORD *)(v5 + 2088);
      if (v15 <= 1)
        v16 = 1;
      else
        v16 = v15;
      v17 = v14[2];
      v18 = malloc_type_malloc(1035 * v16 + 8, 0xEBBE78C5uLL);
      v19 = malloc_type_malloc(8 * v16, 0x2004093837F09uLL);
      LODWORD(v20) = 0;
      v21 = 1;
      v22 = v14;
      do
      {
        LODWORD(v23) = v21;
        if (v16 <= v20)
        {
          v19 = malloc_type_realloc(v19, 16 * v16, 0x2004093837F09uLL);
          v16 *= 2;
        }
        *((_QWORD *)v19 + v20) = v22;
        v22 = (_QWORD *)*v22;
        v20 = (v20 + 1);
        v21 = v23 + 1;
      }
      while (v22);
      qsort(v19, v20, 8uLL, (int (__cdecl *)(const void *, const void *))sub_19BFA0CBC);
      v24 = 0;
      if ((_DWORD)v20)
      {
        v23 = v23;
        v25 = (uint64_t *)v19;
        do
        {
          v26 = *v25++;
          v27 = (char *)v18 + v24;
          *((_WORD *)v27 + 8) = *(_WORD *)(v26 + 20);
          *((_DWORD *)v27 + 2) = *(_DWORD *)(v26 + 12);
          *((_DWORD *)v27 + 3) = *(_DWORD *)(v26 + 16);
          memcpy(v27 + 18, (const void *)(v26 + 22), *(unsigned __int16 *)(v26 + 20));
          v24 += *(unsigned __int16 *)(v26 + 20) + 10;
          --v23;
        }
        while (v23);
      }
      *v18 = v24;
      v18[1] = v17;
      v3 = a3;
      std::ostream::write();
      free(v19);
      free(v18);
      do
      {
        v28 = *(_DWORD **)v14;
        free(v14);
        v14 = v28;
      }
      while (v28);
      *v9 = v32 | 2;
      v5 = a1;
      v4 = a2;
    }
    else if (v11 == 1)
    {
      sub_19BFA35B0(v5, v8 & 0xFFFFFFFFFFFFFFFCLL, v3);
    }
    ++v6;
  }
  while (v6 != 256);
}

void sub_19BFA3830(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  _QWORD *v14;
  unsigned int v15;
  unint64_t v16;
  _DWORD *v17;
  void *v18;
  unsigned int v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  int (__cdecl *v23)(const void *, const void *);
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  unsigned __int16 v36;
  _QWORD *v37;
  unsigned int v41;
  _QWORD v42[16];
  uint64_t v43;
  uint64_t v44;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = 0;
  v44 = *MEMORY[0x1E0C80C00];
  do
  {
    v7 = v4 + 8 * v6;
    v10 = *(_QWORD *)(v7 + 4);
    v9 = (uint64_t *)(v7 + 4);
    v8 = v10;
    v11 = v10 & 3;
    if (v11 != 2)
    {
      if (v11 == 1)
        sub_19BFA3830(v5, v8 & 0xFFFFFFFFFFFFFFFCLL, v3);
      goto LABEL_43;
    }
    v12 = (char *)v3 + *(_QWORD *)(*v3 - 24);
    if ((v12[32] & 5) != 0)
    {
      v13 = -1;
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5) + 32))(v42, *((_QWORD *)v12 + 5), 0, 1, 16);
      v13 = v43;
    }
    v41 = v13;
    v14 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    v15 = *(_DWORD *)(v5 + 2088);
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = v15;
    v17 = malloc_type_malloc(1031 * v16 + 4, 0x4CD827F1uLL);
    v18 = malloc_type_malloc(8 * v16, 0x2004093837F09uLL);
    v19 = 0;
    if (v14)
    {
      v20 = v14;
      do
      {
        if (v16 <= v19)
        {
          v18 = malloc_type_realloc(v18, 16 * v16, 0x2004093837F09uLL);
          v16 *= 2;
        }
        *((_QWORD *)v18 + v19) = v20;
        v20 = (_QWORD *)*v20;
        ++v19;
      }
      while (v20);
    }
    v21 = *(_DWORD *)(v5 + 2064);
    if ((v21 & 4) != 0)
    {
      v28 = v19;
      qsort(v18, v19, 8uLL, (int (__cdecl *)(const void *, const void *))sub_19BFA074C);
      if (v19)
      {
        v29 = 0;
        v30 = 0;
        v24 = 0;
        do
        {
          v31 = v30;
          v30 = *((_QWORD *)v18 + v29);
          if (v31)
          {
            v32 = 0;
            v33 = *(unsigned __int16 *)(v30 + 12);
            v34 = *(_WORD *)(v30 + 12);
            while (v33 != v32)
            {
              if (*(unsigned __int16 *)(v31 + 12) <= (unsigned __int16)v32
                || *(unsigned __int8 *)(v30 + 14 + v32) != *(unsigned __int8 *)(v31 + 14 + v32))
              {
                v34 = v32;
                break;
              }
              if (++v32 == 255)
              {
                v34 = 255;
                break;
              }
            }
          }
          else
          {
            v34 = 0;
            LOWORD(v33) = *(_WORD *)(v30 + 12);
          }
          v35 = (char *)v17 + v24;
          v36 = v33 - v34;
          *((_WORD *)v35 + 4) = v36;
          *((_DWORD *)v35 + 1) = *(_DWORD *)(v30 + 8);
          v35[10] = v34;
          memcpy(v35 + 11, (const void *)(v30 + v34 + 14), v36);
          v24 = v24 - v34 + *(unsigned __int16 *)(v30 + 12) + 7;
          ++v29;
        }
        while (v29 != v28);
      }
      else
      {
        v24 = 0;
      }
    }
    else
    {
      v22 = v19;
      if ((v21 & 1) != 0)
        v23 = (int (__cdecl *)(const void *, const void *))sub_19BFA0CBC;
      else
        v23 = (int (__cdecl *)(const void *, const void *))sub_19BFA074C;
      qsort(v18, v19, 8uLL, v23);
      v24 = 0;
      if (v19)
      {
        v25 = (uint64_t *)v18;
        v4 = a2;
        do
        {
          v26 = *v25++;
          v27 = (char *)v17 + v24;
          *((_WORD *)v27 + 4) = *(_WORD *)(v26 + 12);
          *((_DWORD *)v27 + 1) = *(_DWORD *)(v26 + 8);
          memcpy(v27 + 10, (const void *)(v26 + 14), *(unsigned __int16 *)(v26 + 12));
          v24 += *(unsigned __int16 *)(v26 + 12) + 6;
          --v22;
        }
        while (v22);
        goto LABEL_40;
      }
    }
    v4 = a2;
LABEL_40:
    *v17 = v24;
    v3 = a3;
    std::ostream::write();
    free(v18);
    free(v17);
    v5 = a1;
    do
    {
      v37 = (_QWORD *)*v14;
      free(v14);
      v14 = v37;
    }
    while (v37);
    *v9 = v41 | 2;
LABEL_43:
    ++v6;
  }
  while (v6 != 256);
}

uint64_t sub_19BFA3BA4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _BYTE v14[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[17];
  _OWORD v34[8];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v6[32] & 5) != 0)
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v32 = -1;
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v6 + 5) + 32))(&v24, *((_QWORD *)v6 + 5), 0, 1, 16);
  }
  MEMORY[0x1A1AD0B20](v33, a1);
  v7 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v7[32] & 5) == 0)
  {
    (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 5) + 32))(v34, *((_QWORD *)v7 + 5), 0, 2, 16);
    if (v35 == -1)
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  }
  MEMORY[0x1A1AD0B2C](v33);
  while (1)
  {
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v8[32] & 5) != 0)
    {
      v9 = -1;
    }
    else
    {
      (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(v34, *((_QWORD *)v8 + 5), 0, 1, 16);
      v9 = v35;
    }
    if (v9 >= a4)
      break;
    LOBYTE(v34[0]) = 0;
    sub_19BF8E6F8(a1, (uint64_t)v34, 1);
  }
  MEMORY[0x1A1AD0B20](v33, a1);
  v10 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v10[32] & 5) == 0)
  {
    (*(void (**)(_OWORD *__return_ptr, _QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)v10 + 5) + 32))(v34, *((_QWORD *)v10 + 5), a4, 0, 16);
    if (v35 == -1)
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  }
  MEMORY[0x1A1AD0B2C](v33);
  std::ostream::write();
  v21 = v30;
  v22 = v31;
  v23 = v32;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  v20 = v29;
  v15 = v24;
  v16 = v25;
  MEMORY[0x1A1AD0B20](v14, a1);
  v11 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if ((v11[32] & 5) == 0)
  {
    v12 = *((_QWORD *)v11 + 5);
    v34[0] = v15;
    v34[1] = v16;
    v34[2] = v17;
    v34[3] = v18;
    v35 = v23;
    v34[6] = v21;
    v34[7] = v22;
    v34[4] = v19;
    v34[5] = v20;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v12 + 40))(v33, v12, v34, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  }
  return MEMORY[0x1A1AD0B2C](v14);
}

void sub_19BFA3E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x1A1AD0B2C](&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFA3EC0(_DWORD *a1, _QWORD *a2, int a3, int a4, int *a5)
{
  int32x4_t v9;
  uint64_t i;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  size_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  _DWORD v34[257];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v9 = 0uLL;
  for (i = 3; i != 515; i += 8)
    v9 = vsubq_s32(v9, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)&a1[i]), (int32x4_t)vceqzq_s64(*(int64x2_t *)&a1[i + 4]))));
  v11 = vaddvq_s32(v9);
  if (v11 > 0xC7)
    a4 = 1;
  v33 = a4;
  if ((a4 & 1) != 0)
  {
    v13 = 0;
    v14 = *a5;
    *a5 = v14 + 1036;
    do
    {
      v15 = *(_QWORD *)&a1[2 * v13 + 3];
      if ((v15 & 3) == 1)
      {
        v16 = *a5;
        if (sub_19BFA3EC0(v15 & 0xFFFFFFFFFFFFFFFCLL, a2, 1, 0, a5))
          v17 = v16 | 1;
        else
          v17 = v16 | 3;
        v34[v13] = v17;
      }
      else
      {
        v34[v13] = v15;
      }
      ++v13;
    }
    while (v13 != 256);
    v34[256] = a1[2];
    v35 = *(_QWORD *)a1;
    sub_19BFA3BA4(a2, (uint64_t)v34, 1036, v14);
    if (a3)
LABEL_16:
      free(a1);
  }
  else
  {
    v31 = a3;
    v32 = v11;
    v19 = 4 * v11 + 44;
    v20 = *a5;
    MEMORY[0x1E0C80A78]();
    v22 = (int8x16_t *)((char *)&v29 - v21);
    bzero((char *)&v29 - v21, v19);
    bzero(v22, v19);
    v23 = 0;
    v24 = 0;
    v29 = v20;
    v30 = v19;
    *a5 = v20 + v19;
    do
    {
      v25 = *(_QWORD *)&a1[2 * v23 + 3];
      if (v25)
      {
        v22->i64[v23 >> 6] |= 1 << v23;
        v26 = &v22->i8[4 * v24];
        if ((v25 & 3) == 1)
        {
          v27 = *a5;
          if (sub_19BFA3EC0(v25 & 0xFFFFFFFFFFFFFFFCLL, a2, 1, 0, a5))
            v28 = v27 | 1;
          else
            v28 = v27 | 3;
          *((_DWORD *)v26 + 11) = v28;
        }
        else
        {
          *((_DWORD *)v26 + 11) = v25;
        }
        ++v24;
      }
      ++v23;
    }
    while (v23 != 256);
    if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v22)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v22[1])))))) != (_DWORD)v32)sub_19BFA5204();
    v22[2].i32[2] = a1[2];
    v22[2].i64[0] = *(_QWORD *)a1;
    sub_19BFA3BA4(a2, (uint64_t)v22, v30, v29);
    if (v31)
      goto LABEL_16;
  }
  return v33;
}

uint64_t sub_19BFA4180(_DWORD *a1, _QWORD *a2, int a3, int a4, int *a5)
{
  int32x4_t v9;
  uint64_t i;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  _DWORD v35[257];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v9 = 0uLL;
  for (i = 1; i != 513; i += 8)
    v9 = vsubq_s32(v9, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)&a1[i]), (int32x4_t)vceqzq_s64(*(int64x2_t *)&a1[i + 4]))));
  v11 = vaddvq_s32(v9);
  if (v11 > 0xC7)
    a4 = 1;
  v34 = a4;
  if ((a4 & 1) != 0)
  {
    v13 = 0;
    v14 = *a5;
    *a5 = v14 + 1028;
    do
    {
      v15 = *(_QWORD *)&a1[2 * v13 + 1];
      if ((v15 & 3) == 1)
      {
        v16 = *a5;
        if (sub_19BFA4180(v15 & 0xFFFFFFFFFFFFFFFCLL, a2, 1, 0, a5))
          v17 = v16 | 1;
        else
          v17 = v16 | 3;
        v35[v13] = v17;
      }
      else
      {
        v35[v13] = v15;
      }
      ++v13;
    }
    while (v13 != 256);
    v35[256] = *a1;
    sub_19BFA3BA4(a2, (uint64_t)v35, 1028, v14);
    if (a3)
LABEL_16:
      free(a1);
  }
  else
  {
    v32 = a3;
    v33 = v11;
    v19 = 4 * v11 + 36;
    v20 = *a5;
    MEMORY[0x1E0C80A78]();
    v22 = (int8x16_t *)((char *)&v29 - v21);
    bzero((char *)&v29 - v21, v19);
    bzero(v22, v19);
    v23 = 0;
    v24 = 0;
    v30 = v20;
    v31 = v19;
    *a5 = v20 + v19;
    do
    {
      v25 = *(_QWORD *)&a1[2 * v23 + 1];
      if (v25)
      {
        v22->i64[v23 >> 6] |= 1 << v23;
        v26 = &v22->i8[4 * v24];
        if ((v25 & 3) == 1)
        {
          v27 = *a5;
          if (sub_19BFA4180(v25 & 0xFFFFFFFFFFFFFFFCLL, a2, 1, 0, a5))
            v28 = v27 | 1;
          else
            v28 = v27 | 3;
          *((_DWORD *)v26 + 9) = v28;
        }
        else
        {
          *((_DWORD *)v26 + 9) = v25;
        }
        ++v24;
      }
      ++v23;
    }
    while (v23 != 256);
    if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v22)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v22[1])))))) != (_DWORD)v33)sub_19BFA522C();
    v22[2].i32[0] = *a1;
    sub_19BFA3BA4(a2, (uint64_t)v22, v31, v30);
    if (v32)
      goto LABEL_16;
  }
  return v34;
}

_QWORD *sub_19BFA4428(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void sub_19BFA44D4()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFA44E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D14990;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFA451C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D14990;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFA4538(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t sub_19BFA454C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D135D0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFA4588()
{
  return &unk_1E3D135D0;
}

_QWORD *sub_19BFA4594(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = 0;
  if (a1 && a2)
  {
    if (*(_QWORD *)(a1 + 2080))
      sub_19BFA5254();
    v2 = malloc_type_calloc(0x28uLL, 1uLL, 0x2B391B84uLL);
    if ((sub_19BF9EDC4(a1, (uint64_t)v2) & 1) != 0)
    {
      v2[1] = a2 | 1;
      *((_DWORD *)v2 + 5) = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v2 + 6) = *(_DWORD *)(a2 + 4);
    }
    else if (v2)
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

uint64_t sub_19BFA462C(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_19BF8EB40();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_19BFA47F4(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_19BFA4780(a1, v7);
    return sub_19BFA494C((uint64_t)v7);
  }
  return result;
}

void sub_19BFA46A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFA494C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19BFA46C0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFA46D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D14BF8;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFA4708(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D14BF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFA4724(uint64_t result)
{
  ++**(_DWORD **)(result + 8);
  return result;
}

uint64_t sub_19BFA4738(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D13660))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFA4774()
{
  return &unk_1E3D13660;
}

uint64_t sub_19BFA4780(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_19BFA4828((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_19BFA47F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_19BF8E6D0();
  return operator new(32 * a2);
}

uint64_t sub_19BFA4828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  sub_19BFA48D4((uint64_t)v12);
  return v10;
}

uint64_t sub_19BFA48D4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19BFA4908(a1);
  return a1;
}

void sub_19BFA4908(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

uint64_t sub_19BFA494C(uint64_t a1)
{
  sub_19BFA4980(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19BFA4980(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_19BFA49D8()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFA49EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D14BA0;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFA4A20(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D14BA0;
  a2[1] = v2;
  return result;
}

void sub_19BFA4A3C(uint64_t a1, uint64_t a2, void **a3, unsigned int *a4, int *a5, int *a6)
{
  int v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[5];

  v6 = *a5;
  v7 = *a6;
  v8 = *(uint64_t **)(a1 + 8);
  sub_19BFA4428(__p, *a3, *a4);
  v9 = v8[1];
  v10 = v8[2];
  if (v9 >= v10)
  {
    v12 = (uint64_t)(v9 - *v8) >> 5;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59)
      sub_19BF8EB40();
    v14 = v10 - *v8;
    if (v14 >> 4 > v13)
      v13 = v14 >> 4;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v23[4] = v8 + 2;
    if (v15)
      v16 = (char *)sub_19BFA47F4((uint64_t)(v8 + 2), v15);
    else
      v16 = 0;
    v17 = &v16[32 * v12];
    v23[0] = v16;
    v23[1] = v17;
    v23[3] = &v16[32 * v15];
    v18 = *(_OWORD *)__p;
    *((_QWORD *)v17 + 2) = v22;
    *(_OWORD *)v17 = v18;
    __p[1] = 0;
    v22 = 0;
    __p[0] = 0;
    *((_DWORD *)v17 + 6) = v6;
    *((_DWORD *)v17 + 7) = v7;
    v23[2] = v17 + 32;
    sub_19BFA4780(v8, v23);
    v19 = v8[1];
    sub_19BFA494C((uint64_t)v23);
    v20 = SHIBYTE(v22);
    v8[1] = v19;
    if (v20 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v11 = *(_OWORD *)__p;
    *(_QWORD *)(v9 + 16) = v22;
    *(_OWORD *)v9 = v11;
    *(_DWORD *)(v9 + 24) = v6;
    *(_DWORD *)(v9 + 28) = v7;
    v8[1] = v9 + 32;
  }
}

void sub_19BFA4B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_19BFA494C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFA4BA8(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D13650))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFA4BE4()
{
  return &unk_1E3D13650;
}

void sub_19BFA4BF0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_19BFA4C30((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_19BFA4C30(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

_QWORD *sub_19BFA4C7C(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;

  v2 = 0;
  if (a1 && a2)
  {
    if (*(_QWORD *)(a1 + 2080))
      sub_19BFA5254();
    v2 = malloc_type_calloc(0x28uLL, 1uLL, 0x2B391B84uLL);
    if ((sub_19BF9EDC4(a1, (uint64_t)v2) & 1) != 0)
    {
      v2[1] = a2 | 1;
      *((_DWORD *)v2 + 5) = *(_DWORD *)a2;
    }
    else if (v2)
    {
      free(v2);
      return 0;
    }
  }
  return v2;
}

void sub_19BFA4D10()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFA4D24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D14B48;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFA4D58(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D14B48;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFA4D74(uint64_t result)
{
  ++**(_DWORD **)(result + 8);
  return result;
}

uint64_t sub_19BFA4D88(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D13640))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFA4DC4()
{
  return &unk_1E3D13640;
}

void sub_19BFA4DD4()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFA4DE8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D14AF0;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFA4E1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D14AF0;
  a2[1] = v2;
  return result;
}

void sub_19BFA4E38(uint64_t a1, uint64_t a2, void **a3, unsigned int *a4, int *a5, int *a6)
{
  int v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  void *__p[2];
  uint64_t v22;
  _QWORD v23[5];

  v6 = *a5;
  v7 = *a6;
  v8 = *(uint64_t **)(a1 + 8);
  sub_19BFA4428(__p, *a3, *a4);
  v9 = v8[1];
  v10 = v8[2];
  if (v9 >= v10)
  {
    v12 = (uint64_t)(v9 - *v8) >> 5;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59)
      sub_19BF8EB40();
    v14 = v10 - *v8;
    if (v14 >> 4 > v13)
      v13 = v14 >> 4;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v23[4] = v8 + 2;
    if (v15)
      v16 = (char *)sub_19BFA47F4((uint64_t)(v8 + 2), v15);
    else
      v16 = 0;
    v17 = &v16[32 * v12];
    v23[0] = v16;
    v23[1] = v17;
    v23[3] = &v16[32 * v15];
    v18 = *(_OWORD *)__p;
    *((_QWORD *)v17 + 2) = v22;
    *(_OWORD *)v17 = v18;
    __p[1] = 0;
    v22 = 0;
    __p[0] = 0;
    *((_DWORD *)v17 + 6) = v6;
    *((_DWORD *)v17 + 7) = v7;
    v23[2] = v17 + 32;
    sub_19BFA4780(v8, v23);
    v19 = v8[1];
    sub_19BFA494C((uint64_t)v23);
    v20 = SHIBYTE(v22);
    v8[1] = v19;
    if (v20 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v11 = *(_OWORD *)__p;
    *(_QWORD *)(v9 + 16) = v22;
    *(_OWORD *)v9 = v11;
    *(_DWORD *)(v9 + 24) = v6;
    *(_DWORD *)(v9 + 28) = v7;
    v8[1] = v9 + 32;
  }
}

void sub_19BFA4F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_19BFA494C((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFA4FA4(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D13630))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFA4FE0()
{
  return &unk_1E3D13630;
}

void sub_19BFA4FF0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFA5004(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D14A98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19BFA5044(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D14A98;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19BFA506C(uint64_t a1, uint64_t a2, const void **a3, unsigned int *a4, int *a5, int *a6, uint64_t *a7)
{
  size_t v8;
  std::string::size_type v9;
  std::string *v10;
  int v11;
  std::string::size_type size;
  const void *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v17;
  _DWORD v19[2];
  uint64_t *v20;
  std::string::size_type v21;

  v8 = *a4;
  v9 = (*(_DWORD *)(a1 + 8) + v8);
  v10 = *(std::string **)(a1 + 16);
  v11 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  if (v11 < 0)
    size = v10->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v13 = *a3;
  v14 = *a7;
  v15 = *a5;
  v16 = *a6;
  if (size < v9)
  {
    std::string::resize(v10, v9, 0);
    v10 = *(std::string **)(a1 + 16);
    LOBYTE(v11) = *((_BYTE *)&v10->__r_.__value_.__s + 23);
  }
  if ((v11 & 0x80) != 0)
    v10 = (std::string *)v10->__r_.__value_.__r.__words[0];
  memcpy((char *)v10 + *(unsigned int *)(a1 + 8), v13, v8);
  v19[0] = v16;
  v19[1] = v15;
  v17 = *(uint64_t **)(a1 + 16);
  if (*((char *)v17 + 23) < 0)
    v17 = (uint64_t *)*v17;
  v20 = v17;
  v21 = v9;
  return sub_19BFA247C(*(_QWORD *)(a1 + 24), 0, (uint64_t)v19, v14);
}

uint64_t sub_19BFA5144(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D13620))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFA5180()
{
  return &unk_1E3D13620;
}

void sub_19BFA518C()
{
  __assert_rtn("addListNode", "BurstTrie.cpp", 568, "listcount <= trie->reserved[ContainerSize]");
}

void sub_19BFA51B4()
{
  __assert_rtn("addListNodeRanked", "BurstTrie.cpp", 721, "listcount <= trie->reserved[ContainerSize]");
}

void sub_19BFA51DC()
{
  __assert_rtn("advanceMapCursorTrieList", "BurstTrie.cpp", 1995, "cursor->prfxlen <= head->restlen");
}

void sub_19BFA5204()
{
  __assert_rtn("serializeLevelsRanked", "BurstTrie.cpp", 3366, "bitcount == count");
}

void sub_19BFA522C()
{
  __assert_rtn("serializeLevels", "BurstTrie.cpp", 3220, "bitcount == count");
}

void sub_19BFA5254()
{
  __assert_rtn("burstTrieCreateCursorWithTrieLevelRef", "BurstTrie.cpp", 2892, "nullptr == trie->mapbase");
}

uint64_t sub_19BFA527C(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t *v8;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  size_t v35;
  size_t __n;
  uint64_t v37;
  int v38;
  void *__src;
  size_t v40;
  size_t size;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  void *ptr;
  uint64_t v47;
  unsigned int v48;

  v5 = 1;
  if (a1)
  {
    v6 = a2;
    if (a2)
    {
      v7 = a3;
      if (a3)
      {
        v8 = a4;
        if (a4)
        {
          v48 = 1024;
          v31 = 0;
          v32 = 0;
          v30 = 0x10000;
          v34 = malloc_type_malloc(0x10000uLL, 0x88F986E9uLL);
          v33 = 0;
          bzero(v34, 0x10000uLL);
          __n = 0;
          v37 = 0;
          v35 = 0x10000;
          __src = malloc_type_malloc(0x10000uLL, 0x88F986E9uLL);
          v38 = 0;
          bzero(__src, 0x10000uLL);
          size = 0;
          v42 = 0;
          v40 = *(_QWORD *)(a1 + 40);
          v11 = *(void **)(a1 + 8);
          v45 = *(_OWORD *)(a1 + 56);
          v44 = a1 + 48;
          ptr = v11;
          v43 = 1;
          bzero(v11, v40);
          v12 = sub_19BFA56AC(&v30, 1028, 4);
          v13 = (v12 >> 2) | 0x300000000;
          if (v12 == -1)
            v13 = 0;
          v47 = v13;
          while (1)
          {
            v15 = *v8++;
            v14 = v15;
            if ((unint64_t)(v15 - 257) <= 0xFFFFFFFFFFFFFEFFLL)
              break;
            v17 = *v7++;
            v16 = v17;
            LODWORD(v17) = *a5++;
            sub_19BFA54F8((unint64_t)&v30, v47, v16, v14, v17);
            if (!--v6)
            {
              v30 = v31;
              v35 = (v37 & 0xFFFFFFFC)
                  + (unint64_t)*(unsigned int *)((char *)__src + (v37 & 0xFFFFFFFC))
                  + 4;
              __n = v35;
              v18 = sub_19BFA56AC(&v40, 24, 4);
              v19 = sub_19BFA58E0((uint64_t)&v30, v47, &v40, 1);
              v20 = size;
              v21 = sub_19BFA56AC(&v40, __n, 4096);
              if (v21 == -1)
              {
                v5 = 0xFFFFFFFFLL;
              }
              else
              {
                v22 = v21;
                memcpy((char *)ptr + v21, __src, __n);
                v23 = HIDWORD(v19) + 4 * v19;
                v24 = ptr;
                v25 = (char *)ptr + v18;
                *v25 = 1;
                v25[1] = v23;
                v25[2] = v20;
                v25[3] = v22;
                v26 = __n;
                v25[4] = __n;
                v27 = v48;
                v25[5] = v48;
                *(_DWORD *)a1 = v23;
                *(_QWORD *)(a1 + 24) = v26;
                *(_QWORD *)(a1 + 32) = v27;
                v40 = size;
                if ((_QWORD)v45)
                  v28 = (char *)((uint64_t (*)(void))v45)();
                else
                  v28 = (char *)malloc_type_realloc(v24, size, 0x28D4551EuLL);
                v5 = 0;
                ptr = v28;
                *(_QWORD *)(a1 + 8) = v28;
                *(_QWORD *)(a1 + 16) = &v28[v22];
              }
              if (v34)
                free(v34);
              if (__src)
                free(__src);
              return v5;
            }
          }
          if (v34)
            free(v34);
          if (__src)
            free(__src);
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return v5;
}

unint64_t sub_19BFA54F8(unint64_t result, int a2, unsigned __int8 *a3, int a4, unsigned int a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  size_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;

  v6 = *(_QWORD *)(result + 56);
  v7 = (4 * a2);
  v8 = (unsigned int *)(v6 + v7);
  if (!a4)
  {
LABEL_19:
    *v8 = a5;
    return result;
  }
  v9 = a4;
  v11 = result;
  v12 = (unint64_t *)(result + 64);
  while (1)
  {
    v13 = *a3;
    v14 = &v8[v13];
    v16 = v14[1];
    v15 = v14 + 1;
    v17 = v16 & 3;
    v18 = (unint64_t)v16 >> 2;
    if (v17 != 3)
      break;
    result = v18 | 0x300000000;
    ++a3;
    LODWORD(v19) = v9 - 1;
LABEL_18:
    v7 = (4 * result);
    v8 = (unsigned int *)(v6 + v7);
    v9 = v19;
    if (!(_DWORD)v19)
      goto LABEL_19;
  }
  if (v17 != 1)
  {
    if (v17)
      return result;
    if (*(_QWORD *)(v11 + 80) != *(_QWORD *)(v11 + 72))
      *(_QWORD *)(v11 + 72) = (*(_QWORD *)(v11 + 80) & 0xFFFFFFFCLL)
                            + *(unsigned int *)(*(_QWORD *)(v11 + 120) + (*(_QWORD *)(v11 + 80) & 0xFFFFFFFCLL))
                            + 4;
    result = sub_19BFA56AC(v12, *(unsigned int *)(v11 + 200), 4);
    if (result == -1)
      v18 = 0;
    else
      v18 = (result >> 2) | 0x100000000;
    *v15 = HIDWORD(v18) | (4 * v18);
  }
  v20 = (int *)(*(_QWORD *)(v11 + 120) + (4 * v18));
  v19 = (v9 - 1);
  if (v9 == 1)
  {
    v20[1] = a5;
    v24 = 4;
    goto LABEL_22;
  }
  v21 = *v20;
  if (!(_DWORD)v21)
  {
    *(_QWORD *)v20 = 4;
    v21 = 4;
  }
  ++a3;
  v22 = (v9 + 4);
  v23 = v21 + 4;
  if (v23 + v22 >= (unint64_t)*(unsigned int *)(v11 + 200))
  {
    result = sub_19BFA57A4((unint64_t *)v11);
    v6 = *(_QWORD *)(v11 + 56);
    *(_DWORD *)(v6 + v7 + 4 * v13 + 4) = HIDWORD(result) | (4 * result);
    goto LABEL_18;
  }
  *((_BYTE *)v20 + v23) = v19;
  v25 = (char *)v20 + v23 + 1;
  result = (unint64_t)memcpy(v25, a3, v19);
  *(_DWORD *)&v25[v19] = a5;
  v24 = *v20 + v22;
LABEL_22:
  *v20 = v24;
  return result;
}

uint64_t sub_19BFA56AC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t (*v8)(void *, _QWORD, unint64_t);
  void *v9;
  char *v10;

  v4 = *a1;
  v5 = (a3 + a1[1] - 1) & -a3;
  v6 = v5 + a2;
  if (v5 + a2 <= *a1)
  {
LABEL_13:
    a1[1] = v6;
    a1[2] = v5;
    return v5;
  }
  while (1)
  {
    v7 = 2 * (int)v4 ? 2 * v4 : 0x10000;
    if (!*((_DWORD *)a1 + 6))
      break;
    v8 = (uint64_t (*)(void *, _QWORD, unint64_t))a1[5];
    v9 = (void *)a1[7];
    v4 = v7;
    if (!v8)
    {
      v10 = (char *)malloc_type_realloc(v9, v7, 0x949C1903uLL);
      a1[7] = (unint64_t)v10;
      *(_DWORD *)a1[4] = 1;
      goto LABEL_11;
    }
    a1[7] = v8(v9, v7, a1[6]);
LABEL_12:
    *a1 = v4;
    if (v6 <= v4)
      goto LABEL_13;
  }
  v4 = v7;
  v10 = (char *)malloc_type_realloc((void *)a1[7], v7, 0x868F7F08uLL);
  a1[7] = (unint64_t)v10;
  if (v10)
  {
LABEL_11:
    bzero(&v10[*a1], v4 - *a1);
    goto LABEL_12;
  }
  return -1;
}

uint64_t sub_19BFA57A4(unint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v2 = MEMORY[0x1E0C80A78]();
  v4 = (_DWORD *)((char *)v15 - ((v3 + 19) & 0x1FFFFFFF0));
  v6 = (4 * v5);
  v7 = (unsigned int *)(*(_QWORD *)(v2 + 120) + v6);
  v8 = *v7;
  *v4 = v8;
  memcpy(v4 + 1, v7 + 1, v8);
  if (a1[10] == v6)
  {
    bzero(v7, a1[9] - v6);
    a1[9] = a1[10];
  }
  v9 = sub_19BFA56AC(a1, 1028, 4);
  if (v9 == -1)
    v10 = 0;
  else
    v10 = (v9 >> 2) | 0x300000000;
  *(_DWORD *)(a1[7] + (4 * v10)) = v4[1];
  v11 = (unsigned __int8 *)(v4 + 2);
  v12 = (unint64_t)v4 + v8 + 4;
  if ((unint64_t)(v4 + 2) < v12)
  {
    do
    {
      v13 = (unint64_t)&v11[*v11 + 5];
      sub_19BFA54F8(a1, v10);
      v11 = (unsigned __int8 *)v13;
    }
    while (v13 < v12);
  }
  return v10;
}

unint64_t sub_19BFA58E0(uint64_t a1, unint64_t a2, unint64_t *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  LODWORD(v4) = a2;
  v5 = HIDWORD(a2);
  if (HIDWORD(a2) == 3)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (4 * a2);
    v11 = 0uLL;
    v12.i64[0] = 0x300000003;
    v12.i64[1] = 0x300000003;
    do
    {
      v11 = vsubq_s32(v11, vtstq_s32(*(int32x4_t *)(v10 + v9 + 4 + v8), v12));
      v8 += 16;
    }
    while (v8 != 1024);
    if (a4 || (v13 = vaddvq_s32(v11), v13 >= 0x21))
    {
      v24 = sub_19BFA56AC(a3, 1028, 4);
      v25 = 0;
      if (v24 == -1)
        v4 = 0;
      else
        v4 = (v24 >> 2) | 0x300000000;
      v26 = (4 * v4);
      v27 = (int *)(v9 + v10);
      v29 = *v27;
      v28 = v27 + 1;
      *(_DWORD *)(a3[7] + v26) = v29;
      v30 = v26 + 4;
      do
      {
        v31 = sub_19BFA58E0(a1, ((unint64_t)v28[v25] >> 2) | ((unint64_t)(v28[v25] & 3) << 32), a3, 0);
        *(_DWORD *)(a3[7] + v30 + v25 * 4) = HIDWORD(v31) + 4 * v31;
        ++v25;
      }
      while (v25 != 256);
    }
    else
    {
      v14 = sub_19BFA56AC(a3, 4 * v13 + 40, 4);
      v15 = 0;
      if (v14 == -1)
        v4 = 0;
      else
        v4 = (v14 >> 2) | 0x200000000;
      v16 = (4 * v4);
      v17 = (int *)(v9 + v10);
      v19 = *v17;
      v18 = v17 + 1;
      v20 = a3[7] + v16;
      *(_DWORD *)v20 = v19;
      *(_BYTE *)(v20 + 37) = v13;
      do
      {
        v21 = sub_19BFA58E0(a1, ((unint64_t)v18[v15] >> 2) | ((unint64_t)(v18[v15] & 3) << 32), a3, 0);
        if (HIDWORD(v21))
        {
          v22 = a3[7] + v16;
          v23 = *(unsigned __int8 *)(v22 + 36);
          *(_BYTE *)(v22 + 36) = v23 + 1;
          *(_DWORD *)(v22 + 4 * v23 + 40) = HIDWORD(v21) + 4 * v21;
          *(_DWORD *)(v22 + 4 * (v15 >> 5) + 4) |= 1 << v15;
        }
        ++v15;
      }
      while (v15 != 256);
    }
    v5 = HIDWORD(v4);
  }
  return v4 | ((unint64_t)v5 << 32);
}

_QWORD *sub_19BFA5AB0(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  result[2] = 0;
  return result;
}

uint64_t sub_19BFA5ABC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = a1[1];
  v2 = a1[2];
  v4 = v2 + 4;
  if (v3)
    v5 = v4 > v3;
  else
    v5 = 0;
  if (v5)
    return 0;
  v6 = *a1;
  a1[2] = v4;
  if (!v6)
    return 0;
  *a2 = bswap32(*(_DWORD *)(v6 + v2));
  return 1;
}

uint64_t sub_19BFA5AF8(uint64_t *a1, void *__dst, size_t a3)
{
  uint64_t v3;
  size_t v4;
  size_t v5;
  BOOL v6;
  uint64_t v7;

  v4 = a1[1];
  v3 = a1[2];
  v5 = v3 + a3;
  if (v4)
    v6 = v5 > v4;
  else
    v6 = 0;
  if (v6)
    return 0;
  v7 = *a1;
  a1[2] = v5;
  if (!v7)
    return 0;
  memcpy(__dst, (const void *)(v7 + v3), a3);
  return 1;
}

uint64_t sub_19BFA5B44(uint64_t *a1, _WORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = a1[1];
  v2 = a1[2];
  v4 = v2 + 2;
  if (v3)
    v5 = v4 > v3;
  else
    v5 = 0;
  if (v5)
    return 0;
  v6 = *a1;
  a1[2] = v4;
  if (!v6)
    return 0;
  *a2 = bswap32(*(unsigned __int16 *)(v6 + v2)) >> 16;
  return 1;
}

uint64_t sub_19BFA5B84(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = a1[1];
  v2 = a1[2];
  v4 = v2 + 1;
  if (v3)
    v5 = v4 > v3;
  else
    v5 = 0;
  if (v5)
    return 0;
  v6 = *a1;
  a1[2] = v4;
  if (!v6)
    return 0;
  *a2 = *(_BYTE *)(v6 + v2);
  return 1;
}

uint64_t sub_19BFA5BBC()
{
  return std::ostream::write();
}

uint64_t sub_19BFA5BC4()
{
  return std::ostream::write();
}

uint64_t sub_19BFA5BF0()
{
  return std::ostream::write();
}

uint64_t sub_19BFA5C20()
{
  return std::ostream::write();
}

uint64_t sub_19BFA5C5C()
{
  return std::ostream::write();
}

uint64_t sub_19BFA5C90()
{
  return std::ostream::write();
}

uint64_t sub_19BFA5CC0(unsigned int a1)
{
  unsigned int v1;

  if (a1 >= 0x3FFF)
    v1 = 4;
  else
    v1 = 2;
  if (a1 < 0x7F)
    return 1;
  else
    return v1;
}

uint64_t sub_19BFA5CE0(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[18];

  v3[17] = *MEMORY[0x1E0C80C00];
  v1 = a1 + 16 + *(_QWORD *)(*(_QWORD *)(a1 + 16) - 24);
  if ((*(_BYTE *)(v1 + 32) & 5) != 0)
    return -1;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 40) + 32))(v3, *(_QWORD *)(v1 + 40), 0, 1, 16);
  return v3[16];
}

uint64_t sub_19BFA5D6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE v7[16];
  _QWORD v8[18];

  v8[17] = *MEMORY[0x1E0C80C00];
  while (sub_19BFA5CE0(a1) < a2)
  {
    LOBYTE(v8[0]) = 0;
    std::ostream::write();
  }
  v4 = (_QWORD *)(a1 + 16);
  MEMORY[0x1A1AD0B20](v7, v4);
  v5 = (char *)v4 + *(_QWORD *)(*v4 - 24);
  if ((v5[32] & 5) == 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)v5 + 5) + 32))(v8, *((_QWORD *)v5 + 5), a2, 0, 16);
    if (v8[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)), *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 32) | 4);
  }
  return MEMORY[0x1A1AD0B2C](v7);
}

void sub_19BFA5E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x1A1AD0B2C](&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFA5E94(uint64_t a1, uint64_t *a2, int a3, BOOL *a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  char v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  char v17;
  int v18;
  int v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  _BYTE v24[3];
  unsigned __int8 v25;
  _BYTE __dst[3];
  __int16 v27;
  unsigned __int8 v28;
  char v29;

  v8 = a2[2];
  v29 = 0;
  v9 = sub_19BFA5B84(a2, &v29);
  result = 0;
  if (v9)
  {
    v11 = v29;
    *(_BYTE *)(a1 + 3) = v29;
    result = sub_19BFA5AF8(a2, (void *)(a1 + 16), (v11 & 3) + 1);
    if ((_DWORD)result)
    {
      v12 = *(_DWORD *)a1;
      v13 = (*(_DWORD *)a1 >> 26) & 3;
      v28 = 0;
      v27 = 0;
      if (v13 == 3)
      {
        result = sub_19BFA5AF8(a2, __dst, 3uLL);
        if (!(_DWORD)result)
          return result;
        v12 = (__dst[0] << 16) | (*(unsigned __int8 *)(a1 + 3) << 24) | (__dst[1] << 8) | __dst[2];
      }
      else
      {
        if (v13 == 2)
        {
          result = sub_19BFA5B44(a2, &v27);
          if (!(_DWORD)result)
            return result;
          v14 = v27;
        }
        else
        {
          if (v13 != 1)
            goto LABEL_14;
          result = sub_19BFA5B84(a2, &v28);
          if (!(_DWORD)result)
            return result;
          v14 = v28;
        }
        v12 = (v14 + v8) & 0xFFFFFF | (*(unsigned __int8 *)(a1 + 3) << 24);
      }
      *(_DWORD *)a1 = v12;
LABEL_14:
      if ((v12 & 0x40000000) != 0)
      {
        v25 = 0;
        result = sub_19BFA5B84(a2, &v25);
        if (!(_DWORD)result)
          return result;
        v15 = *(_QWORD *)(a1 + 8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v25 << 32);
        *(_QWORD *)(a1 + 8) = v15;
        v12 = *(_DWORD *)a1;
        if ((*(_DWORD *)a1 & 0x20000000) == 0)
          goto LABEL_16;
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 8) | 0xFF00000000;
        *(_QWORD *)(a1 + 8) = v15;
        if ((v12 & 0x20000000) == 0)
        {
          if ((v12 & 0x10000000) == 0)
            goto LABEL_19;
LABEL_16:
          v22 = 0;
          result = sub_19BFA5B84(a2, &v22);
          if (!(_DWORD)result)
            return result;
          v16 = v22;
          v15 = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFF00 | v22;
          *(_QWORD *)(a1 + 8) = v15;
          if ((*(_BYTE *)(a1 + 3) & 0x10) != 0)
          {
            v17 = 0;
            if (!v13 && !v16)
              goto LABEL_35;
          }
          else
          {
LABEL_19:
            v17 = 1;
          }
          if (!v13)
            v17 = 0;
          if ((a3 & 0x10000) == 0 || (v17 & 1) != 0)
            goto LABEL_35;
          v21 = 0;
          if (sub_19BFA5B84(a2, &v21))
          {
            v18 = (char)v21;
            v15 = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v21 << 8);
            *(_QWORD *)(a1 + 8) = v15;
            if ((v18 & 0x80000000) == 0)
            {
LABEL_35:
              v19 = *(_DWORD *)a1;
              *(_QWORD *)(a1 + 8) = v15 & 0xFFFFF8FFFFFFFFFFLL | ((unint64_t)((*(_DWORD *)a1 >> 29) & 1) << 40) | ((unint64_t)((*(_DWORD *)a1 >> 28) & 1) << 41) | ((unint64_t)((*(_DWORD *)a1 & 0xFFFFFF) == 0) << 42);
              *a4 = v19 < 0;
              return 1;
            }
            v20 = 0;
            if (sub_19BFA5B84(a2, &v20))
            {
              v15 = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v20 << 16);
              goto LABEL_35;
            }
          }
          return 0;
        }
      }
      if ((a3 & 0x20000) != 0)
      {
        if (sub_19BFA5AF8(a2, &v23, 4uLL))
        {
          v15 = (char)v23 & 0x80000000 | ((unint64_t)*(unsigned int *)(a1 + 12) << 32) | __rev16(*(unsigned __int16 *)&v24[1]) | ((unint64_t)v24[0] << 16) & 0xFFFFFFFF80FFFFFFLL | ((unint64_t)(v23 & 0x7F) << 24);
          goto LABEL_35;
        }
      }
      else if (sub_19BFA5AF8(a2, &v23, 3uLL))
      {
        v15 = ((v23 << 24) | (v23 << 16)) & 0x807F0000 | ((unint64_t)*(unsigned int *)(a1 + 12) << 32) | __rev16(*(unsigned __int16 *)v24);
        goto LABEL_35;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_19BFA614C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15[3];

  v4 = *(unsigned int *)(a1 + 8);
  if ((int)v4 >= 1)
  {
    v5 = v4 + 1;
    do
    {
      v6 = a1 + 24 * *(unsigned __int8 *)(a1 + (v5 - 2) + 12);
      *(_DWORD *)(v6 + 272) = 0;
      *(_QWORD *)(v6 + 280) = 0;
      *(_DWORD *)(v6 + 288) = 0;
      --v5;
    }
    while (v5 > 1);
  }
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a2;
  v7 = (_QWORD *)(a1 + 6424);
  sub_19BFA5AB0(v15, *(_QWORD *)(a1 + 6424), *(_QWORD *)(a1 + 6432));
  v15[2] = a2 - *(_QWORD *)(a1 + 6424);
  v14 = 1;
  while (1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    result = sub_19BFA5E94((uint64_t)&v11, v15, *(_DWORD *)(a1 + 6416), (BOOL *)&v14);
    if ((result & 1) == 0)
      break;
    result = sub_19BFA6278(a1, v13, (uint64_t)&v11);
    if (!v14)
      return result;
  }
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v9 = -6144;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  do
  {
    v10 = a1 + v9;
    *(_DWORD *)(v10 + 6416) = 0;
    *(_QWORD *)(v10 + 6424) = 0;
    *(_DWORD *)(v10 + 6432) = 0;
    v9 += 24;
  }
  while (v9);
  *(_DWORD *)(a1 + 6416) = 0;
  *v7 = 0;
  *(_QWORD *)(a1 + 6432) = 0;
  return result;
}

uint64_t sub_19BFA6278(uint64_t result, unsigned int a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_DWORD *)(result + 24 * a2 + 272);
  if (v3 != (_DWORD *)a3)
  {
    v4 = 0;
    *v3 = *(_DWORD *)a3;
    v5 = result + 24 * a2;
    *(_QWORD *)(v5 + 280) = *(_QWORD *)(a3 + 8);
    do
    {
      *(_BYTE *)(v5 + 288 + v4) = *(_BYTE *)(a3 + 16 + v4);
      ++v4;
    }
    while (v4 != 4);
  }
  v6 = *(int *)(result + 8);
  *(_DWORD *)(result + 8) = v6 + 1;
  *(_BYTE *)(result + v6 + 12) = a2;
  return result;
}

_QWORD *sub_19BFA62E0@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19BF8E43C(a2, off_1E3D15040[*a1 - 1]);
}

uint64_t sub_19BFA62FC(const void *a1, size_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  void **v9;
  BOOL v10;
  void *__p[2];
  unsigned __int8 v13;
  int v14;

  v4 = operator new(0x20uLL);
  v5 = 0;
  *v4 = xmmword_19C0650D0;
  v4[1] = unk_19C0650E0;
  while (1)
  {
    v6 = *(unsigned int *)((char *)v4 + v5);
    v14 = *(_DWORD *)((char *)v4 + v5);
    sub_19BFA62E0(&v14, __p);
    v7 = v13;
    v8 = (char)v13;
    if ((v13 & 0x80u) != 0)
      v7 = (unint64_t)__p[1];
    if (v7 != a2)
    {
      v10 = 0;
      if (((char)v13 & 0x80000000) == 0)
        goto LABEL_12;
LABEL_11:
      operator delete(__p[0]);
      goto LABEL_12;
    }
    if ((v13 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    v10 = memcmp(v9, a1, a2) == 0;
    if (v8 < 0)
      goto LABEL_11;
LABEL_12:
    if (v10)
      break;
    v5 += 4;
    if (v5 == 32)
    {
      operator delete(v4);
      return 0;
    }
  }
  operator delete(v4);
  return v6 | 0x100000000;
}

void sub_19BFA63F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFA6408(uint64_t a1)
{
  char __src;
  uint64_t v4;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  __src = 0;
  sub_19BFA747C((_QWORD *)(a1 + 104), &__src, (char *)&v4, 1uLL);
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 168) = -1;
  ++dword_1EE41725C;
  return a1;
}

void sub_19BFA64B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  _QWORD *v4;
  void **v5;
  void **v6;
  void *v8;

  v6 = v5;
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 152) = v8;
    operator delete(v8);
  }
  sub_19BFA7710(v3, v2, v1, v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFA64EC(uint64_t a1)
{
  _QWORD *result;
  char __src;
  uint64_t v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 96) = 0;
  __src = 0;
  result = sub_19BFA747C((_QWORD *)(a1 + 104), &__src, (char *)&v4, 1uLL);
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 168) = -1;
  return result;
}

_QWORD *sub_19BFA6550(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_19BFA6594(uint64_t a1)
{
  double v3;
  unsigned int v4;
  unsigned __int8 v5;
  BOOL v6;

  if (((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) & 0x7FFFFFFF8) != 0
    && *(_DWORD *)(a1 + 88) == 1
    && !*(_DWORD *)(a1 + 24))
  {
    v3 = *(double *)(a1 + 80) / *(double *)(a1 + 96);
    v4 = (sqrt(v3) * 255.0);
    if (v4 >= 0xFF)
      v5 = -1;
    else
      v5 = v4;
    if (v4)
      v6 = 1;
    else
      v6 = v3 <= 0.0;
    if (v6)
      return v5;
    else
      return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t *sub_19BFA6604(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;

  v1 = *result;
  v2 = result[1] - *result;
  v3 = v2 >> 3;
  if ((v2 >> 3))
  {
    v4 = 0;
    v5 = 0;
    v6 = (v2 >> 3);
    do
    {
      if (*(_QWORD *)(*(_QWORD *)v1 + 104) != *(_QWORD *)(*(_QWORD *)v1 + 112))
      {
        if (*(_DWORD *)(*(_QWORD *)v1 + 128))
          ++v4;
        else
          ++v5;
      }
      v1 += 8;
      --v6;
    }
    while (v6);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 != (_DWORD)v3 && v5 != (_DWORD)v3)
  {
    result = (uint64_t *)sub_19BF8E5A8();
    if ((int)result <= 0)
    {
      v16 = 0;
      v8 = sub_19BF8E6F8(MEMORY[0x1E0DE4A50], (uint64_t)"UnigramTrieNode.cpp", 19);
      sub_19BF8E6F8(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = sub_19BF8E6F8(v9, (uint64_t)") ", 2);
      v11 = sub_19BF8E6F8(v10, (uint64_t)"LOG(", 4);
      v12 = sub_19BF8E6F8(v11, (uint64_t)"INFO", 4);
      v13 = sub_19BF8E6F8(v12, (uint64_t)") ", 2);
      sub_19BF8E6F8(v13, (uint64_t)"YIKES:  ", 8);
      v14 = (_QWORD *)std::ostream::operator<<();
      sub_19BF8E6F8(v14, (uint64_t)" grandchildren already have trie offsets but ", 45);
      v15 = (_QWORD *)std::ostream::operator<<();
      sub_19BF8E6F8(v15, (uint64_t)" don't!", 7);
      return (uint64_t *)sub_19BFA72A4(&v16);
    }
  }
  return result;
}

void sub_19BFA6750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_19BFA72A4(&a13);
  _Unwind_Resume(a1);
}

void sub_19BFA6764(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE **v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  char v18;
  uint64_t v19;

  v2 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (*(_DWORD *)(a1 + 88))
    LODWORD(v2) = v2 + 1;
  if (v2 <= 1)
  {
    v5 = **(_BYTE **)(a1 + 104);
    v7 = *(_BYTE **)(a2 + 112);
    v6 = *(_QWORD *)(a2 + 120);
    if ((unint64_t)v7 >= v6)
    {
      v9 = (_BYTE **)(a2 + 104);
      v10 = *(_QWORD *)(a2 + 104);
      v11 = &v7[-v10];
      v12 = (uint64_t)&v7[-v10 + 1];
      if (v12 < 0)
        sub_19BF8EB40();
      v13 = v6 - v10;
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = operator new(v14);
      else
        v15 = 0;
      v16 = &v15[v14];
      v11[(_QWORD)v15] = v5;
      v8 = (uint64_t)&v11[(_QWORD)v15 + 1];
      if (v7 == (_BYTE *)v10)
      {
        v15 = &v11[(_QWORD)v15];
      }
      else
      {
        v17 = &v7[~v10];
        do
        {
          v18 = *--v7;
          (v17--)[(_QWORD)v15] = v18;
        }
        while (v7 != (_BYTE *)v10);
        v7 = *v9;
      }
      *(_QWORD *)(a2 + 104) = v15;
      *(_QWORD *)(a2 + 112) = v8;
      *(_QWORD *)(a2 + 120) = v16;
      if (v7)
        operator delete(v7);
    }
    else
    {
      *v7 = v5;
      v8 = (uint64_t)(v7 + 1);
    }
    *(_QWORD *)(a2 + 112) = v8;
    if (a2 != a1)
      sub_19BFA75C8((char *)a2, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
    if (((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) & 0x7FFFFFFF8) == 8)
    {
      **(_QWORD **)(**(_QWORD **)a1 + 144) = a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
      if (*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104) <= 3uLL)
        sub_19BFA6764();
    }
    else if (*(_DWORD *)(a1 + 88))
    {
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
      sub_19BFA7358(a2 + 32, (__n128 *)(a1 + 32));
      sub_19BFA7358(a2 + 56, (__n128 *)(a1 + 56));
      v19 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a2 + 85) = *(_QWORD *)(a1 + 85);
      *(_QWORD *)(a2 + 80) = v19;
    }
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  }
}

uint64_t sub_19BFA6924(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v9;

  v2 = *a1;
  v1 = a1[1];
  if (((v1 - *a1) & 0x7FFFFFFF8) == 0)
    return 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_QWORD *)(v2 + 8 * v4);
    if (*(_QWORD *)(v6 + 104) != *(_QWORD *)(v6 + 112))
    {
      if (((*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) & 0x7FFFFFFF8) == 8)
      {
        v7 = *(_DWORD *)(v6 + 168);
        v9 = v7 != -1 && v7 <= *((_DWORD *)a1 + 42);
        if (!*(_DWORD *)(v6 + 88) && !v9)
        {
          sub_19BFA6764(**(_QWORD **)v6, v6);
          LODWORD(v5) = v5 + *(_DWORD *)(v6 + 112) - *(_DWORD *)(v6 + 104) - 1;
        }
      }
      v5 = sub_19BFA6924(v6) + v5;
      v2 = *a1;
      v1 = a1[1];
    }
    ++v4;
  }
  while (v4 < ((unint64_t)(v1 - v2) >> 3));
  return v5;
}

uint64_t *sub_19BFA69F4(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;

  v2 = *result;
  v1 = result[1];
  if (((v1 - *result) & 0x7FFFFFFF8) != 0)
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      if (*(_QWORD *)(v5 + 104) != *(_QWORD *)(v5 + 112))
      {
        if (((*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) & 0x7FFFFFFF8) != 0
          && (v6 = *(_DWORD *)(**(_QWORD **)v5 + 128)) != 0)
        {
          v7 = v6 - *(_DWORD *)(v5 + 128);
          if (v7 > 0xFF)
          {
            if (v7 == (__int16)v7)
              *(_DWORD *)(v5 + 136) = 2;
            else
              *(_DWORD *)(v5 + 136) = 3;
          }
          else
          {
            *(_DWORD *)(v5 + 136) = 1;
          }
        }
        else
        {
          *(_DWORD *)(v5 + 136) = 0;
        }
        result = (uint64_t *)sub_19BFA69F4(v5);
        *(_DWORD *)(v5 + 128) = 0;
        v2 = *v3;
        v1 = v3[1];
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v1 - v2) >> 3));
  }
  dword_1EE417260 = 0;
  return result;
}

uint64_t sub_19BFA6AD0(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  _BOOL4 v22;
  int v23;
  unint64_t v25;
  _QWORD *v26;
  int v29;
  _BOOL4 v30;

  v4 = *a1;
  v5 = a1[1];
  v6 = v5 - *a1;
  if ((v6 & 0x7FFFFFFF8) != 0)
  {
    v8 = 0;
    v9 = *((_DWORD *)a1 + 22) + (v6 >> 3) > 1;
    if ((a3 & 0x1000) != 0)
      v10 = 4;
    else
      v10 = 3;
    v29 = v10;
    v30 = v9;
    do
    {
      v11 = *(_QWORD *)(v4 + 8 * v8);
      v12 = *(_QWORD *)(v11 + 104);
      v13 = *(_QWORD *)(v11 + 112);
      if (v12 != v13)
      {
        ++dword_1EE417260;
        *(_DWORD *)(v11 + 128) = a2;
        v14 = a2 + v13 - v12 + 1;
        v15 = (*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3;
        if ((_DWORD)v15)
        {
          v16 = *(_DWORD *)(v11 + 136);
          v17 = v14 + 2;
          if (v16 == 1)
            ++v14;
          else
            v14 += 3;
          if (v16 == 2)
            v14 = v17;
        }
        v18 = v14 + v30;
        v19 = *(_DWORD *)(v11 + 88);
        if (v19 && *(_DWORD *)(v11 + 24))
        {
          a2 = (v18 + v29);
        }
        else
        {
          v20 = sub_19BFA6594(v11);
          v21 = v19 + (_DWORD)v15 == 0;
          if (v19 + (_DWORD)v15)
            v22 = v15 == 0;
          else
            v22 = 0;
          if (v20)
            v21 = 1;
          a2 = (v18 + v21);
          if (v20)
            v23 = 1;
          else
            v23 = v22;
          if (v23 == 1 && (a3 & 0x100) != 0)
          {
            a2 = sub_19BFA5CC0(*(_DWORD *)(v11 + 28)) + a2;
            v4 = *a1;
            v5 = a1[1];
          }
        }
      }
      ++v8;
    }
    while (v8 < ((unint64_t)(v5 - v4) >> 3));
    if (((v5 - v4) & 0x7FFFFFFF8) != 0)
    {
      v25 = 0;
      do
      {
        v26 = *(_QWORD **)(v4 + 8 * v25);
        if (v26[13] != v26[14])
        {
          sub_19BFA6604(*(uint64_t **)(v4 + 8 * v25));
          if (v26[13] != v26[14] && (((v26[1] - *v26) & 0x7FFFFFFF8) == 0 || !*(_DWORD *)(*(_QWORD *)*v26 + 128)))
            a2 = sub_19BFA6AD0(v26, a2, a3);
        }
        ++v25;
        v4 = *a1;
      }
      while (v25 < ((unint64_t)(a1[1] - *a1) >> 3));
    }
  }
  return a2;
}

uint64_t sub_19BFA6CBC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __int16 a6)
{
  uint64_t v8;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  _BOOL4 v14;
  uint64_t result;
  unsigned int v16;
  int v18;
  unsigned int v19;
  int v20;

  v8 = *(unsigned int *)(a1 + 128);
  *(_DWORD *)(a1 + 132) = v8;
  if (sub_19BFA5CE0(a2) != v8)
    sub_19BFA7804();
  if (*(_DWORD *)(a1 + 88))
    v10 = *(_DWORD *)(a1 + 24);
  else
    v10 = 0;
  v20 = sub_19BFA6594(a1);
  if (((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) & 0x7FFFFFFF8) != 0)
  {
    v11 = (_QWORD *)(a1 + 104);
    v12 = (_QWORD *)(a1 + 112);
    if (~*(_QWORD *)(a1 + 104) + *(_QWORD *)(a1 + 112) <= 3uLL)
    {
      v13 = *(_DWORD *)(**(_QWORD **)a1 + 128);
      v19 = v13 - *(_DWORD *)(a1 + 128);
      v14 = v13 == 0;
      goto LABEL_10;
    }
LABEL_39:
    sub_19BFA7764();
  }
  v11 = (_QWORD *)(a1 + 104);
  v12 = (_QWORD *)(a1 + 112);
  if (~*(_QWORD *)(a1 + 104) + *(_QWORD *)(a1 + 112) > 3uLL)
    goto LABEL_39;
  v13 = 0;
  v19 = -*(_DWORD *)(a1 + 128);
  v14 = 1;
LABEL_10:
  result = sub_19BFA5BC4();
  if (*v12 != *v11)
  {
    v16 = 1;
    do
      result = sub_19BFA5BC4();
    while (*v12 - *v11 > (unint64_t)v16++);
  }
  if (!v14)
  {
    v18 = *(_DWORD *)(a1 + 136);
    if (v18 == 2)
    {
      if (v19 != (__int16)v19)
        sub_19BFA77DC();
      result = sub_19BFA5C90();
    }
    else
    {
      if (v18 == 1)
      {
        if (v19 >= 0x100)
          sub_19BFA77B4();
      }
      else
      {
        if (HIBYTE(v13))
          sub_19BFA778C();
        sub_19BFA5BC4();
        sub_19BFA5BC4();
      }
      result = sub_19BFA5BC4();
    }
  }
  if (a4)
    result = sub_19BFA5BC4();
  if (v10)
    return sub_19BFA5BBC();
  if (v20)
  {
    result = sub_19BFA5BC4();
LABEL_29:
    if ((a6 & 0x100) != 0)
      return sub_19BFA5C20();
    return result;
  }
  if (*(_DWORD *)(a1 + 88) + ((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3))
  {
    if (!v14)
      return result;
  }
  else
  {
    result = sub_19BFA5BC4();
    if (!v14)
      return result;
  }
  if (*(_DWORD *)(a1 + 88) + ((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3))
    goto LABEL_29;
  return result;
}

uint64_t sub_19BFA7030(uint64_t result, uint64_t a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *exception;
  __int128 v18;
  _BYTE v19[16];
  _QWORD v20[33];

  v4 = *(_QWORD *)result;
  v3 = *(_QWORD *)(result + 8);
  v5 = v3 - *(_QWORD *)result;
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    v7 = (uint64_t *)result;
    v8 = 0;
    v9 = v5 >> 3;
    v10 = *(_DWORD *)(result + 88) + v9;
    v11 = (v9 - 1);
    do
    {
      result = *(_QWORD *)(v4 + 8 * v8);
      if (*(_QWORD *)(result + 104) != *(_QWORD *)(result + 112))
      {
        if (!*(_DWORD *)(result + 128))
        {
          sub_19BFA0144((uint64_t)v19);
          sub_19BF8E6F8(v20, (uint64_t)"UnigramTrieNode ", 16);
          v14 = (_QWORD *)std::ostream::operator<<();
          sub_19BF8E6F8(v14, (uint64_t)"/", 1);
          v15 = (_QWORD *)std::ostream::operator<<();
          v16 = sub_19BF8E6F8(v15, (uint64_t)" was not allocated a write file offset: parent @0x", 50);
          *(_DWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v16
                                                                              + *(_QWORD *)(*v16 - 24)
                                                                              + 8) & 0xFFFFFFB5 | 8;
          std::ostream::operator<<();
          exception = __cxa_allocate_exception(0x20uLL);
          std::stringbuf::str();
          sub_19BFA73A8(exception, &v18);
          __cxa_throw(exception, (struct type_info *)&unk_1E3D12E18, (void (*)(void *))sub_19BFA7268);
        }
        ++dword_1EE417264;
        result = sub_19BFA6CBC(result, a2, (uint64_t)v7, v10 > 1, v8 < v11, a3);
        v4 = *v7;
        v3 = v7[1];
      }
      ++v8;
    }
    while (v8 < ((unint64_t)(v3 - v4) >> 3));
    if (((v3 - v4) & 0x7FFFFFFF8) != 0)
    {
      v13 = 0;
      do
      {
        result = *(_QWORD *)(v4 + 8 * v13);
        if (*(_QWORD *)(result + 104) != *(_QWORD *)(result + 112)
          && (((*(_QWORD *)(result + 8) - *(_QWORD *)result) & 0x7FFFFFFF8) == 0
           || !*(_DWORD *)(**(_QWORD **)result + 132)))
        {
          result = sub_19BFA7030();
          v4 = *v7;
          v3 = v7[1];
        }
        ++v13;
      }
      while (v13 < ((unint64_t)(v3 - v4) >> 3));
    }
  }
  return result;
}

void sub_19BFA7220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_19BFA0270((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_19BFA7268(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E3D13AE0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

_BYTE *sub_19BFA72A4(_BYTE *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A50] + *(_QWORD *)(*MEMORY[0x1E0DE4A50] - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*a1)
    sub_19BF8E5C8();
  return a1;
}

void sub_19BFA733C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  sub_19BF8E3F8(a1);
}

__n128 sub_19BFA7358(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

_QWORD *sub_19BFA73A8(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = off_1E3D13AE0;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19BF8CD70(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_19BFA73FC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_19BFA7410(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E3D13AE0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFA7460(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

_QWORD *sub_19BFA747C(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      sub_19BF8EB40();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_19BFA7588(v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *sub_19BFA7588(_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    sub_19BF8EB40();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

char *sub_19BFA75C8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      sub_19BF8EB40();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_19BFA76D0(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *sub_19BFA76D0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_19BF8EB40();
  result = (char *)sub_19BF965C4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_19BFA7710(void **a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  void *v7;
  void *v8;

  v7 = *a1;
  if (v7)
  {
    *(_QWORD *)(a3 + 112) = v7;
    operator delete(v7);
  }
  sub_19BFA6550(a2);
  v8 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *a4 = v8;
    operator delete(v8);
  }
}

void sub_19BFA7764()
{
  __assert_rtn("write_trie_node_as_var_byte_slot", "UnigramTrieNode.cpp", 309, "patricia_key_size_1 <= (kMaxPatriciaKeyBytes - 1)");
}

void sub_19BFA778C()
{
  __assert_rtn("write_trie_node_as_var_byte_slot", "UnigramTrieNode.cpp", 347, "node_children_offset < kPatriciaTrieNodeOffsetLimit");
}

void sub_19BFA77B4()
{
  __assert_rtn("write_trie_node_as_var_byte_slot", "UnigramTrieNode.cpp", 340, "relative_child_offset >= 0 && relative_child_offset <= DC_UINT8_MAX");
}

void sub_19BFA77DC()
{
  __assert_rtn("write_trie_node_as_var_byte_slot", "UnigramTrieNode.cpp", 343, "relative_child_offset >= DC_INT16_MIN && relative_child_offset <= DC_INT16_MAX");
}

void sub_19BFA7804()
{
  __assert_rtn("write_trie_node_as_var_byte_slot", "UnigramTrieNode.cpp", 302, "m_written_offset == idx_file.tell()");
}

uint64_t sub_19BFA782C(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = operator new();
  *(_QWORD *)v8 = &off_1E3D13980;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 1024;
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_19BFA8ED8((_QWORD *)(a1 + 16), *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  sub_19BFA92F4((uint64_t *)(a1 + 40), a3);
  *(_DWORD *)(a1 + 64) = a4;
  v9 = sub_19BFA7958(*(_QWORD **)a1);
  *(_QWORD *)(a1 + 8) = v9;
  sub_19BFA64EC(v9);
  sub_19BFA7B3C(a1);
  return a1;
}

void sub_19BFA790C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  sub_19BFA9270((void ***)va);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFA7958(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char **v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  v6 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0xB0uLL);
    v7 = (_QWORD *)operator new[]();
    *v7 = 176;
    v7[1] = v3;
    if (v3)
    {
      v8 = 0;
      v9 = 176 * v3;
      do
      {
        sub_19BFA6590((uint64_t)&v7[v8 / 8 + 2]);
        v8 += 176;
      }
      while (v9 != v8);
    }
    v10 = v7 + 2;
    bzero(v10, 176 * a1[6]);
    v11 = a1[3];
    v12 = (_QWORD *)a1[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - *v6) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_19BF8EB40();
      v15 = v11 - (_QWORD)*v6;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)sub_19BF965C4((uint64_t)(a1 + 3), v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *(_QWORD *)v19 = v10;
      v13 = v19 + 8;
      v22 = (char *)a1[1];
      v21 = (char *)a1[2];
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v19 - 1) = v23;
          v19 -= 8;
        }
        while (v21 != v22);
        v21 = *v6;
      }
      a1[1] = v19;
      a1[2] = v13;
      a1[3] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12 = v10;
      v13 = v12 + 1;
    }
    a1[2] = v13;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 176 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t sub_19BFA7B3C(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = sub_19BF8E5B8((*(_DWORD *)(a1 + 64) >> 19) & 1);
  v3 = *(_DWORD *)(a1 + 64);
  if ((v3 & 0x8000) != 0)
    *(_DWORD *)(a1 + 68) = 1;
  if ((v3 & 0x10000) != 0)
    *(_DWORD *)(a1 + 68) = 2;
  return result;
}

uint64_t sub_19BFA7B80(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  return sub_19BFA782C(a1, a2, a3, a4);
}

uint64_t *sub_19BFA7B88(uint64_t *a1)
{
  uint64_t v2;
  void **v4;

  sub_19BFA98BC((uint64_t)(a1 + 5), (_QWORD *)a1[6]);
  v4 = (void **)(a1 + 2);
  sub_19BFA9270(&v4);
  v2 = *a1;
  *a1 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_BYTE *sub_19BFA7BE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  char v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  while (v2 != v3)
  {
    sub_19BFA7DD8((_QWORD **)a1, *(_QWORD **)(a1 + 8), v2, 0);
    v2 += 72;
  }
  result = (_BYTE *)sub_19BF8E5A8();
  if ((int)result < 1)
  {
    v20 = 0;
    v5 = sub_19BF8E6F8(MEMORY[0x1E0DE4A50], (uint64_t)"UnigramsCompiler.cpp", 20);
    sub_19BF8E6F8(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_19BF8E6F8(v6, (uint64_t)") ", 2);
    v8 = sub_19BF8E6F8(v7, (uint64_t)"LOG(", 4);
    v9 = sub_19BF8E6F8(v8, (uint64_t)"INFO", 4);
    v10 = sub_19BF8E6F8(v9, (uint64_t)") ", 2);
    sub_19BF8E6F8(v10, (uint64_t)"\tInserted ", 10);
    v11 = (_QWORD *)std::ostream::operator<<();
    sub_19BF8E6F8(v11, (uint64_t)" trie nodes.", 12);
    result = sub_19BFA72A4(&v20);
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    sub_19BFA6924(*(uint64_t **)(a1 + 8));
    result = (_BYTE *)sub_19BF8E5A8();
    if ((int)result <= 0)
    {
      v19 = 0;
      v12 = sub_19BF8E6F8(MEMORY[0x1E0DE4A50], (uint64_t)"UnigramsCompiler.cpp", 20);
      sub_19BF8E6F8(v12, (uint64_t)"(", 1);
      v13 = (_QWORD *)std::ostream::operator<<();
      v14 = sub_19BF8E6F8(v13, (uint64_t)") ", 2);
      v15 = sub_19BF8E6F8(v14, (uint64_t)"LOG(", 4);
      v16 = sub_19BF8E6F8(v15, (uint64_t)"INFO", 4);
      v17 = sub_19BF8E6F8(v16, (uint64_t)") ", 2);
      sub_19BF8E6F8(v17, (uint64_t)"\tCondensed ", 11);
      v18 = (_QWORD *)std::ostream::operator<<();
      sub_19BF8E6F8(v18, (uint64_t)" nodes into patricia nodes.", 27);
      return sub_19BFA72A4(&v19);
    }
  }
  return result;
}

void sub_19BFA7DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  sub_19BFA72A4(&a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFA7DD8(_QWORD **a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  v8 = (_QWORD *)(a3 + 8);
  v9 = (uint64_t *)(a3 + 56);
  while (1)
  {
    *((double *)a2 + 12) = *(double *)(a3 + 56) + *((double *)a2 + 12);
    v10 = a4 - 1;
    v11 = *(_QWORD *)(a3 + 32);
    if (*(_QWORD *)(a3 + 40) - v11 <= v10)
    {
      v13 = (unsigned int *)(a2 + 21);
      v14 = *((_DWORD *)a2 + 42);
LABEL_6:
      v12 = v14;
      goto LABEL_7;
    }
    v12 = *(unsigned __int8 *)(v11 + v10);
    v13 = (unsigned int *)(a2 + 21);
    v14 = *((_DWORD *)a2 + 42);
    if (v14 <= v12)
      goto LABEL_6;
LABEL_7:
    *v13 = v12;
    if (*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8) <= (unint64_t)a4)
      break;
    a2 = sub_19BFA7EE0(a1, a2, v8, a4++);
  }
  if (a4)
  {
    a2[3] = *(_QWORD *)a3;
    if (a2 + 3 != (_QWORD *)a3)
    {
      sub_19BFA747C(a2 + 4, *(char **)(a3 + 8), *(char **)(a3 + 16), *(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8));
      sub_19BFA747C(a2 + 7, *(char **)(a3 + 32), *(char **)(a3 + 40), *(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32));
    }
    v15 = *v9;
    *(_QWORD *)((char *)a2 + 85) = *(uint64_t *)((char *)v9 + 5);
    a2[10] = v15;
  }
  return a2;
}

_QWORD *sub_19BFA7EE0(_QWORD **a1, _QWORD *a2, _QWORD *a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  char __src;
  _QWORD *v15;

  v5 = *(unsigned __int8 *)(*a3 + a4);
  v6 = (a2[1] - *a2) >> 3;
  if ((int)v6 < 1)
  {
    LODWORD(v8) = -1;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = (v7 + v6) >> 1;
      v9 = *(_QWORD *)(*a2 + 8 * v8);
      v10 = **(unsigned __int8 **)(v9 + 104);
      if (v10 <= v5)
      {
        if (v10 >= v5)
          return (_QWORD *)v9;
      }
      else
      {
        LODWORD(v6) = (v7 + v6) >> 1;
        v8 = v7;
      }
      v7 = v8;
    }
    while ((int)v6 - (int)v8 > 1);
  }
  if ((int)v6 >= (int)v8 + 1)
    v11 = v8 + 1;
  else
    v11 = v6;
  v12 = (_QWORD *)sub_19BFA7958(*a1);
  v15 = v12;
  sub_19BFA64EC((uint64_t)v12);
  __src = v5;
  sub_19BFA747C(v12 + 13, &__src, (char *)&v15, 1uLL);
  sub_19BFA7FD4(v12, (uint64_t)a2);
  sub_19BFA80B0((uint64_t)a2, (char *)(*a2 + 8 * v11), (char *)&v15);
  return v15;
}

void sub_19BFA7FD4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (a2)
  {
    v6 = a1[20];
    v4 = (uint64_t)(a1 + 20);
    v5 = v6;
    v7 = *(_QWORD **)(v4 - 8);
    if ((unint64_t)v7 >= v6)
    {
      v9 = (void **)(v4 - 16);
      v10 = *(_QWORD *)(v4 - 16);
      v11 = ((uint64_t)v7 - v10) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_19BF8EB40();
      v12 = v5 - v10;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)sub_19BF965C4(v4, v14);
      else
        v15 = 0;
      v16 = &v15[8 * v11];
      v17 = &v15[8 * v14];
      *(_QWORD *)v16 = a2;
      v8 = v16 + 8;
      v19 = (char *)a1[18];
      v18 = (char *)a1[19];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *((_QWORD *)v16 - 1) = v20;
          v16 -= 8;
        }
        while (v18 != v19);
        v18 = (char *)*v9;
      }
      a1[18] = v16;
      a1[19] = v8;
      a1[20] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v7 = a2;
      v8 = v7 + 1;
    }
    a1[19] = v8;
  }
}

char *sub_19BFA80B0(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      sub_19BF8EB40();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_19BF965C4(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_19BF965C4(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_19BFA990C((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_19BFA82B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFA82F0(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type size;
  int v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  char v25;
  std::string v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  sub_19BFA5BF0();
  sub_19BFA5BF0();
  sub_19BFA5BF0();
  sub_19BFA5BBC();
  sub_19BFA5BBC();
  v27 = 0;
  v28 = 0;
  sub_19BFA5BBC();
  sub_19BFA5C5C();
  v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 1) != 0)
    v5 = 70;
  else
    v5 = 6;
  sub_19BFA5BF0();
  if (*(int *)(a1 + 68) >= 2)
  {
    memset(&v26, 0, sizeof(v26));
    std::string::append(&v26, " CommonLetterForms,");
    std::string::append(&v26, " PartialProbability,");
    std::string::append(&v26, " UnigramRecordV2,");
    std::string::append(&v26, " VarByteTrieNodesV2,");
    std::string::append(&v26, " RelativeChildOffsetsV2,");
    if ((v5 & 0x40) != 0)
      std::string::append(&v26, " PatriciaTrieRuns,");
    std::string::append(&v26, " AllSortKeysAreDistributive,");
    if (((v4 << 8) & 0x10000) != 0)
      std::string::append(&v26, " WriteWordIds");
    if (((32 * v4) & 0x20000) != 0)
      std::string::append(&v26, " Write4ByteUnigramOffsets");
    if ((int)sub_19BF8E5A8() <= 0)
    {
      v25 = 0;
      v6 = sub_19BF8E6F8(MEMORY[0x1E0DE4A50], (uint64_t)"UnigramsCompiler.cpp", 20);
      sub_19BF8E6F8(v6, (uint64_t)"(", 1);
      v7 = (_QWORD *)std::ostream::operator<<();
      v8 = sub_19BF8E6F8(v7, (uint64_t)") ", 2);
      v9 = sub_19BF8E6F8(v8, (uint64_t)"LOG(", 4);
      v10 = sub_19BF8E6F8(v9, (uint64_t)"INFO", 4);
      v11 = sub_19BF8E6F8(v10, (uint64_t)") ", 2);
      v12 = sub_19BF8E6F8(v11, (uint64_t)"    Options: ", 13);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v26;
      else
        v13 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      else
        size = v26.__r_.__value_.__l.__size_;
      sub_19BF8E6F8(v12, (uint64_t)v13, size);
      sub_19BFA72A4(&v25);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  sub_19BFA5BF0();
  sub_19BFA5BF0();
  sub_19BFA5BF0();
  sub_19BFA5BF0();
  sub_19BFA5BF0();
  v15 = 8 * *(_DWORD *)(a1 + 56) + 8;
  sub_19BFA5BF0();
  sub_19BFA5BF0();
  result = sub_19BFA5D6C(a2, 128);
  if (v15)
  {
    sub_19BFA5BF0();
    result = sub_19BFA5BF0();
    v17 = *(_QWORD **)(a1 + 40);
    if (v17 != (_QWORD *)(a1 + 48))
    {
      do
      {
        if (v17[6] - v17[5] <= 4uLL)
        {
          sub_19BFA5BBC();
          v19 = v17[5];
          v18 = v17[6];
          if (v19 - v18 != -4)
          {
            v20 = v18 - v19 - 4;
            do
              sub_19BFA5BC4();
            while (!__CFADD__(v20++, 1));
          }
          result = sub_19BFA5BF0();
        }
        v22 = (_QWORD *)v17[1];
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v17[2];
            v24 = *v23 == (_QWORD)v17;
            v17 = v23;
          }
          while (!v24);
        }
        v17 = v23;
      }
      while (v23 != (_QWORD *)(a1 + 48));
    }
  }
  return result;
}

void sub_19BFA86A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_19BFA72A4(&a13);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFA86D8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v20;
  _QWORD *exception;
  __int128 v22;
  _BYTE v23[16];
  _QWORD v24[33];
  _BYTE v25[280];

  sub_19BFA8BFC((uint64_t)v25, 20);
  if ((int)sub_19BF8E5A8() <= 0)
  {
    v23[0] = 0;
    v2 = sub_19BF8E6F8(MEMORY[0x1E0DE4A50], (uint64_t)"UnigramsCompiler.cpp", 20);
    sub_19BF8E6F8(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_19BF8E6F8(v3, (uint64_t)") ", 2);
    v5 = sub_19BF8E6F8(v4, (uint64_t)"LOG(", 4);
    v6 = sub_19BF8E6F8(v5, (uint64_t)"INFO", 4);
    v7 = sub_19BF8E6F8(v6, (uint64_t)") ", 2);
    sub_19BF8E6F8(v7, (uint64_t)"\tAllocating trie slots: magic_number=", 37);
    v8 = (_QWORD *)std::ostream::operator<<();
    sub_19BF8E6F8(v8, (uint64_t)", root_usage_sum=", 17);
    std::ostream::operator<<();
    sub_19BFA72A4(v23);
  }
  sub_19BFA82F0(a1, (uint64_t)v25);
  v9 = sub_19BFA5CE0((uint64_t)v25);
  sub_19BFA6AD0(*(uint64_t **)(a1 + 8), v9, *(_DWORD *)(a1 + 64));
  sub_19BFA69F4(*(uint64_t **)(a1 + 8));
  if (sub_19BFA6AD0(*(uint64_t **)(a1 + 8), v9, *(_DWORD *)(a1 + 64)) >= 0x1000001)
  {
    sub_19BFA0144((uint64_t)v23);
    sub_19BF8E6F8(v24, (uint64_t)"Trie size=", 10);
    v20 = (_QWORD *)std::ostream::operator<<();
    sub_19BF8E6F8(v20, (uint64_t)" bytes exceeds trie addressing capacity=", 40);
    std::ostream::operator<<();
    exception = __cxa_allocate_exception(0x20uLL);
    std::stringbuf::str();
    sub_19BFA73A8(exception, &v22);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D12E18, (void (*)(void *))sub_19BFA7268);
  }
  sub_19BFA7030(*(_QWORD *)(a1 + 8), (uint64_t)v25, *(_DWORD *)(a1 + 64));
  if ((int)sub_19BF8E5A8() <= 0)
  {
    v23[0] = 0;
    v10 = sub_19BF8E6F8(MEMORY[0x1E0DE4A50], (uint64_t)"UnigramsCompiler.cpp", 20);
    sub_19BF8E6F8(v10, (uint64_t)"(", 1);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = sub_19BF8E6F8(v11, (uint64_t)") ", 2);
    v13 = sub_19BF8E6F8(v12, (uint64_t)"LOG(", 4);
    v14 = sub_19BF8E6F8(v13, (uint64_t)"INFO", 4);
    v15 = sub_19BF8E6F8(v14, (uint64_t)") ", 2);
    sub_19BF8E6F8(v15, (uint64_t)"\tReserved ", 10);
    v16 = (_QWORD *)std::ostream::operator<<();
    sub_19BF8E6F8(v16, (uint64_t)" and wrote ", 11);
    v17 = (_QWORD *)std::ostream::operator<<();
    sub_19BF8E6F8(v17, (uint64_t)" trie nodes in ", 15);
    v18 = (_QWORD *)std::ostream::operator<<();
    sub_19BF8E6F8(v18, (uint64_t)" bytes", 6);
    sub_19BFA72A4(v23);
  }
  sub_19BFA5BF0();
  std::stringbuf::str();
  return sub_19BFA0270((uint64_t)v25);
}

void sub_19BFA89D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  void *v51;
  int v52;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v52 & 1) == 0)
    {
LABEL_6:
      sub_19BFA0270((uint64_t)&a16);
      sub_19BFA0270((uint64_t)&a51);
      _Unwind_Resume(a1);
    }
  }
  else if (!v52)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v51);
  goto LABEL_6;
}

uint64_t sub_19BFA8A4C(uint64_t a1, uint64_t a2)
{
  __int128 v5;
  uint64_t v6;

  sub_19BFA7BE8(a1);
  sub_19BFA86D8(a1);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  return 1;
}

void sub_19BFA8AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  const char *v18;
  size_t v19;
  _QWORD *v20;

  if (a2 == 1)
  {
    v10 = __cxa_begin_catch(exception_object);
    if ((int)sub_19BF8E5A8() <= 0)
    {
      a10 = 0;
      v11 = sub_19BF8E6F8(MEMORY[0x1E0DE4A50], (uint64_t)"UnigramsCompiler.cpp", 20);
      sub_19BF8E6F8(v11, (uint64_t)"(", 1);
      v12 = (_QWORD *)std::ostream::operator<<();
      v13 = sub_19BF8E6F8(v12, (uint64_t)") ", 2);
      v14 = sub_19BF8E6F8(v13, (uint64_t)"LOG(", 4);
      v15 = sub_19BF8E6F8(v14, (uint64_t)"INFO", 4);
      v16 = sub_19BF8E6F8(v15, (uint64_t)") ", 2);
      v17 = sub_19BF8E6F8(v16, (uint64_t)"Error occurred during trie construction: ", 41);
      v18 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v10 + 16))(v10);
      v19 = strlen(v18);
      v20 = sub_19BF8E6F8(v17, (uint64_t)v18, v19);
      sub_19BF8E640(v20);
      sub_19BFA72A4(&a10);
    }
    __cxa_end_catch();
    JUMPOUT(0x19BFA8A98);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFA8BBC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6[3];

  sub_19BFA5AB0(v6, a1 + a3, 4);
  return sub_19BFA5ABC(v6, a4);
}

uint64_t sub_19BFA8BFC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = MEMORY[0x1E0DE4FD0];
  v5 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v4 + 64;
  v6 = a1 + 16;
  v7 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + *(_QWORD *)(v8 - 24)) = v9;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v10, (void *)(a1 + 24));
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v11 = v7[4];
  v12 = v7[5];
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v6 + *(_QWORD *)(v11 - 24)) = v12;
  v13 = v7[1];
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + *(_QWORD *)(v13 - 24)) = v7[6];
  *(_QWORD *)a1 = v4 + 24;
  *(_QWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 16) = v4 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a2;
  return a1;
}

void sub_19BFA8D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD0C7C](v1);
  _Unwind_Resume(a1);
}

void sub_19BFA8D2C(_QWORD *a1)
{
  sub_19BFA8D50(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFA8D50(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  *a1 = &off_1E3D13980;
  v2 = (uint64_t *)a1[1];
  v3 = (uint64_t *)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2;
      if (*v2)
      {
        v5 = *(_QWORD *)(v4 - 8);
        if (v5)
        {
          v6 = 176 * v5;
          v7 = v4 - 72;
          do
          {
            v8 = v7 + v6;
            v9 = *(void **)(v7 + v6 + 40);
            if (v9)
            {
              *(_QWORD *)(v8 + 48) = v9;
              operator delete(v9);
            }
            v10 = *(void **)(v7 + v6);
            if (v10)
            {
              *(_QWORD *)(v7 + v6 + 8) = v10;
              operator delete(v10);
            }
            v11 = v7 + v6;
            v12 = *(void **)(v7 + v6 - 48);
            if (v12)
            {
              *(_QWORD *)(v11 - 40) = v12;
              operator delete(v12);
            }
            v13 = *(void **)(v11 - 72);
            if (v13)
            {
              *(_QWORD *)(v7 + v6 - 64) = v13;
              operator delete(v13);
            }
            v14 = *(void **)(v8 - 104);
            if (v14)
            {
              *(_QWORD *)(v7 + v6 - 96) = v14;
              operator delete(v14);
            }
            v6 -= 176;
          }
          while (v6);
        }
        MEMORY[0x1A1AD0CB8](v4 - 16, 0x1090C8033691413);
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = (uint64_t *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19BFA8E68(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(_QWORD *)(a1 + 112) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 32);
  if (v5)
  {
    *(_QWORD *)(a1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

_QWORD *sub_19BFA8ED8(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_19BFA8F5C(result, a4);
    result = sub_19BFA8FF8((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19BFA8F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_19BFA9270(&a9);
  _Unwind_Resume(a1);
}

char *sub_19BFA8F5C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    sub_19BF8EB40();
  result = (char *)sub_19BFA8FB0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *sub_19BFA8FB0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    sub_19BF8E6D0();
  return operator new(72 * a2);
}

_QWORD *sub_19BFA8FF8(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v9[3];
  char v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_19BFA90A0(a1, v4, v6);
      v6 += 9;
      v4 = v12 + 9;
      v12 += 9;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_19BFA91A8((uint64_t)v9);
  return v4;
}

void sub_19BFA908C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFA91A8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFA90A0(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v5 = *a3;
  a2[1] = 0;
  *a2 = v5;
  a2[2] = 0;
  a2[3] = 0;
  sub_19BFA9130(a2 + 1, (const void *)a3[1], a3[2], a3[2] - a3[1]);
  a2[4] = 0;
  a2[5] = 0;
  a2[6] = 0;
  result = sub_19BFA9130(a2 + 4, (const void *)a3[4], a3[5], a3[5] - a3[4]);
  v7 = a3[7];
  *(_QWORD *)((char *)a2 + 61) = *(uint64_t *)((char *)a3 + 61);
  a2[7] = v7;
  return result;
}

void sub_19BFA9114(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFA9130(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_19BFA7588(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19BFA918C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFA91A8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19BFA91DC((uint64_t *)a1);
  return a1;
}

void sub_19BFA91DC(uint64_t *a1)
{
  _QWORD **v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)a1[1];
  v1 = (_QWORD **)a1[2];
  v3 = *v1;
  v4 = (_QWORD *)*v2;
  if (*v1 != (_QWORD *)*v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 9;
      sub_19BFA922C(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_19BFA922C(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[4];
  if (v3)
  {
    a2[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[1];
  if (v4)
  {
    a2[2] = v4;
    operator delete(v4);
  }
}

void sub_19BFA9270(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 9;
        sub_19BFA922C((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_19BFA92F4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_19BFA9348(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_19BFA9330(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFA98BC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_19BFA9348(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_19BFA93CC(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_19BFA93CC(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_19BFA944C(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_19BFA95F4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_19BFA9684(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_19BFA944C(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *sub_19BFA95F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 5) = 0;
  result = sub_19BFA9130((_QWORD *)v6 + 5, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_19BFA9668(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_19BFA9870(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_19BFA9684(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_19BFA96D8(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_19BFA96D8(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_19BFA9870(uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[5];
    if (v3)
    {
      __p[6] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_19BFA98BC(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_19BFA98BC(a1, *a2);
    sub_19BFA98BC(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

char *sub_19BFA990C(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_19BFA99D4(uint64_t a1)
{
  sub_19BFA99F8(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFA99F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E3D14278;
  v2 = a1 + 136;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 136) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 144) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 248);
  sub_19BFA9AC8((uint64_t *)(a1 + 88), 0);
  v5 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

uint64_t sub_19BFA9AC8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_19BFB21EC(result);
    JUMPOUT(0x1A1AD0CDCLL);
  }
  return result;
}

uint64_t sub_19BFA9B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (!a3)
    return 1;
  v5 = a3;
  while (1)
  {
    v7 = *(_QWORD *)(a4 + 8 * a2);
    if (!v7)
      break;
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 88);
    v10 = *(unsigned __int16 *)(v5 + 102);
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    v12 = *(int *)(v5 + 80);
    do
    {
      v13 = *(_QWORD *)(v7 + 112);
      v14 = sub_19BFA9CC8(v9, *(unsigned __int16 *)(v7 + 100), v10);
      if (v13 + v12 + v14 < v11)
      {
        v11 = v13 + v12 + v14;
        v8 = v7;
      }
      v7 = *(_QWORD *)(v7 + 16);
    }
    while (v7);
    if (!v8)
      break;
    *(_QWORD *)v5 = v8;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 112) = v11;
    v15 = *(unsigned __int16 *)(v5 + 98) + a2;
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a4 + 8 * v15);
    *(_QWORD *)(a4 + 8 * v15) = v5;
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5)
      return 1;
  }
  return 0;
}

uint64_t sub_19BFA9BDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_19BFA9CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFA9CC8(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(v3 + 4 * (a2 + 1));
  v5 = *(_DWORD *)(v3 + 4 * a2);
  if (v4 - v5 == *(unsigned __int16 *)(a1 + 34))
    return *(__int16 *)(*(_QWORD *)(a1 + 24) + 2 * (v5 + a3));
  else
    return sub_19BFA9CFC((_QWORD *)a1, a2, a3);
}

uint64_t sub_19BFA9CFC(_QWORD *a1, unsigned int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  v3 = a1[1];
  v4 = *(_DWORD *)(v3 + 4 * a2);
  v5 = *(_DWORD *)(v3 + 4 * (a2 + 1)) - 1;
  if (v4 > v5)
    return 0x7FFFLL;
  while (1)
  {
    v6 = *(__int16 *)(a1[2] + 2 * ((v5 + v4) / 2));
    if (v6 >= a3)
      break;
    v4 = (v5 + v4) / 2 + 1;
LABEL_6:
    if (v4 > v5)
      return 0x7FFFLL;
  }
  if (v6 > a3)
  {
    v5 = (v5 + v4) / 2 - 1;
    goto LABEL_6;
  }
  return *(__int16 *)(a1[3] + 2 * ((uint64_t)(v5 + v4 + (v5 + v4 < 0)) >> 1));
}

uint64_t sub_19BFA9D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  std::string *p_dst;
  char v12;
  char v13;
  int v14;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  std::string::size_type size;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  void **v30;
  size_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *__p[2];
  char v38;
  void *v39[2];
  char v40;
  std::string __dst;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E3D140B8;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  v5 = operator new();
  sub_19BFB9458(v5);
  *(_QWORD *)(v4 + 56) = v5;
  v6 = operator new(0x2C0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E3D12A30;
  v7 = sub_19BFB9458((uint64_t)(v6 + 3));
  v6[3] = &off_1E3D14118;
  v6[86] = 0;
  *((_BYTE *)v6 + 696) = 0;
  *((_DWORD *)v6 + 175) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 64) = v7;
  *(_QWORD *)(v4 + 72) = v6;
  *(_QWORD *)(v4 + 88) = 0;
  *(_WORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  sub_19BFACEA4((_QWORD *)(v4 + 128));
  sub_19BFACEA4((_QWORD *)(v4 + 144));
  *(_QWORD *)(v4 + 160) = &off_1E3D142D8;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_QWORD *)(v4 + 256) = &off_1E3D13FD0;
  *(_QWORD *)(v4 + 200) = 0;
  *(_QWORD *)(v4 + 208) = 4;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 292) = 0u;
  sub_19BFA9BDC(v4 + 312);
  *(_QWORD *)(v4 + 584) = 0;
  *(_QWORD *)(v4 + 576) = 0;
  *(_QWORD *)(v4 + 592) = 0;
  *(_QWORD *)(v4 + 792) = 0;
  sub_19BFA9BDC(v4 + 800);
  *(_QWORD *)(v4 + 1072) = 0;
  *(_QWORD *)(v4 + 1064) = 0;
  *(_QWORD *)(v4 + 1080) = 0;
  *(_OWORD *)(v4 + 1288) = 0u;
  *(_OWORD *)(v4 + 1304) = 0u;
  *(_OWORD *)(v4 + 1320) = 0u;
  *(_OWORD *)(v4 + 1336) = 0u;
  *(_OWORD *)(v4 + 1352) = 0u;
  *(_OWORD *)(v4 + 1368) = 0u;
  *(_OWORD *)(v4 + 1384) = 0u;
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v4;
  if (v8)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 8))(v8, v4);
  if (!sub_19BFAEEF0())
  {
    if (setjmp((int *)(a1 + 424)) != 1)
    {
      std::ios_base::clear((std::ios_base *)(a1 + 136 + *(_QWORD *)(*(_QWORD *)(a1 + 136) - 24)), 0);
      v16 = sub_19BF8E6F8((_QWORD *)(a1 + 136), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/viterbi.cpp", 70);
      sub_19BF8E6F8(v16, (uint64_t)"(", 1);
      v17 = (_QWORD *)std::ostream::operator<<();
      v18 = sub_19BF8E6F8(v17, (uint64_t)") [", 3);
      v19 = sub_19BF8E6F8(v18, (uint64_t)"tokenizer_->open(param)", 23);
      v20 = sub_19BF8E6F8(v19, (uint64_t)"] ", 2);
      v21 = (char *)sub_19BFAA4D8(*(_QWORD *)(a1 + 80) + 800);
      v22 = sub_19BF8E43C(&__dst, v21);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = (uint64_t)v22;
      else
        v23 = __dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      sub_19BF8E6F8(v20, v23, size);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      longjmp((int *)(a1 + 424), 1);
    }
    return 0;
  }
  v9 = operator new();
  sub_19BFB17F4(v9);
  sub_19BFA9AC8((uint64_t *)(a1 + 88), v9);
  v10 = *(unint64_t **)(a1 + 88);
  sub_19BFB1144(v39, a2, "dicdir");
  sub_19BF8E43C(__p, "matrix.bin");
  sub_19BFB975C(&__dst, (uint64_t)v39, (uint64_t)__p);
  if (v38 < 0)
    operator delete(__p[0]);
  if (v40 < 0)
    operator delete(v39[0]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v12 = sub_19BFB22D8(v10, (char *)p_dst, "r");
  v13 = v12;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v13 & 1) != 0)
      goto LABEL_13;
LABEL_26:
    if (setjmp((int *)(a1 + 424)) != 1)
    {
      std::ios_base::clear((std::ios_base *)(a1 + 136 + *(_QWORD *)(*(_QWORD *)(a1 + 136) - 24)), 0);
      v25 = sub_19BF8E6F8((_QWORD *)(a1 + 136), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/viterbi.cpp", 70);
      sub_19BF8E6F8(v25, (uint64_t)"(", 1);
      v26 = (_QWORD *)std::ostream::operator<<();
      v27 = sub_19BF8E6F8(v26, (uint64_t)") [", 3);
      v28 = sub_19BF8E6F8(v27, (uint64_t)"connector_->open(param)", 23);
      v29 = sub_19BF8E6F8(v28, (uint64_t)"] ", 2);
      v30 = sub_19BFAA4D8(*(_QWORD *)(a1 + 88) + 56);
      v31 = strlen((const char *)v30);
      sub_19BF8E6F8(v29, (uint64_t)v30, v31);
      longjmp((int *)(a1 + 424), 1);
    }
    return 0;
  }
  if ((v12 & 1) == 0)
    goto LABEL_26;
LABEL_13:
  v14 = sub_19BFAA558(a2, "cost-factor");
  *(_DWORD *)(a1 + 96) = v14;
  if (v14 > 0)
    return 1;
  if (setjmp((int *)(a1 + 424)) != 1)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 136 + *(_QWORD *)(*(_QWORD *)(a1 + 136) - 24)), 0);
    v32 = sub_19BF8E6F8((_QWORD *)(a1 + 136), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/viterbi.cpp", 70);
    sub_19BF8E6F8(v32, (uint64_t)"(", 1);
    v33 = (_QWORD *)std::ostream::operator<<();
    v34 = sub_19BF8E6F8(v33, (uint64_t)") [", 3);
    v35 = sub_19BF8E6F8(v34, (uint64_t)"cost_factor_ > 0", 16);
    v36 = sub_19BF8E6F8(v35, (uint64_t)"] ", 2);
    sub_19BF8E6F8(v36, (uint64_t)"cost-factor is empty", 20);
    longjmp((int *)(a1 + 424), 1);
  }
  return 0;
}

void sub_19BFAA2E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  sub_19BFAA53C(v21);
}

void sub_19BFAA310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **sub_19BFAA4D8(uint64_t a1)
{
  void **v2;
  __int128 __dst;
  uint64_t v5;

  sub_19BFAAA88(&__dst, a1 + 8);
  v2 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = __dst;
  *(_QWORD *)(a1 + 280) = v5;
  if (*(char *)(a1 + 287) < 0)
    return (void **)*v2;
  return v2;
}

void sub_19BFAA53C(uint64_t a1)
{
  longjmp((int *)(a1 + 288), 1);
}

uint64_t sub_19BFAA558(uint64_t a1, char *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v11[2];
  uint64_t v12;
  unsigned int v13;
  std::strstream __p[2];

  v3 = a1 + 8;
  sub_19BF8E43C(__p, a2);
  v4 = sub_19BFAA740(v3, __p);
  if (SHIBYTE(__p[0].__sb_.__binp_) < 0)
    operator delete(__p[0].__sb_.__vftable);
  if ((_QWORD *)(a1 + 16) == v4)
  {
    *(_DWORD *)operator new() = 0;
    MEMORY[0x1A1AD0CDC]();
    return 0;
  }
  else
  {
    if (*((char *)v4 + 79) < 0)
    {
      sub_19BF8CD70(v11, (void *)v4[7], v4[8]);
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)(v4 + 7);
      v12 = v4[9];
    }
    sub_19BFAA7BC((uint64_t)__p);
    v13 = 0;
    if (v12 >= 0)
      v6 = v11;
    else
      v6 = (void **)v11[0];
    if (v12 >= 0)
      v7 = HIBYTE(v12);
    else
      v7 = (uint64_t)v11[1];
    v8 = sub_19BF8E6F8(&__p[0].__sb_.__binp_, (uint64_t)v6, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0
      || (v9 = (_QWORD *)MEMORY[0x1A1AD0AD8](__p, &v13), (*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
      || (sub_19BFAA880(__p),
          (*((_BYTE *)&__p[0].__sb_.__einp_ + (unint64_t)__p[0].__sb_.__vftable[-1].pbackfail) & 2) == 0))
    {
      *(_DWORD *)operator new() = 0;
      MEMORY[0x1A1AD0CDC]();
      v5 = 0;
    }
    else
    {
      v5 = v13;
    }
    std::strstream::~strstream(__p);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
  }
  return v5;
}

void sub_19BFAA710(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, std::strstream *a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  std::strstream::~strstream((std::strstream *)&a16);
  if (a14 < 0)
    operator delete(__pa);
  _Unwind_Resume(__p);
}

_QWORD *sub_19BFAA740(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  char v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_19BFAAA0C(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_19BFAAA0C(a2, v5 + 4) & 0x80) != 0)
    return v2;
  return v5;
}

uint64_t sub_19BFAA7BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::strstreambuf *v4;

  *(_QWORD *)(a1 + 120) = &unk_1E3D12C88;
  v2 = MEMORY[0x1E0DE5000];
  v3 = MEMORY[0x1E0DE5000] + 64;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  v4 = (std::strstreambuf *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E3D12C60;
  std::ios_base::init((std::ios_base *)(a1 + 120), (void *)(a1 + 24));
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 120) = v2 + 104;
  *(_QWORD *)(a1 + 16) = v3;
  std::strstreambuf::strstreambuf(v4, 0);
  return a1;
}

void sub_19BFAA850(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD0C7C](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFAA880(_QWORD *a1)
{
  const std::locale::facet *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  std::locale v11;
  char v12;

  MEMORY[0x1A1AD0AA8](&v12, a1, 1);
  if (!v12)
    return a1;
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v11, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v11);
  v3 = a1 + 5;
  while (1)
  {
    v4 = *(_QWORD **)((char *)v3 + *(_QWORD *)(*a1 - 24));
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
      break;
    LOBYTE(v6) = *v5;
LABEL_6:
    if ((v6 & 0x80) != 0 || (*((_DWORD *)&v2[1].~facet + v6) & 0x4000) == 0)
    {
      v9 = 0;
      goto LABEL_12;
    }
    v7 = *(_QWORD **)((char *)v3 + *(_QWORD *)(*a1 - 24));
    v8 = v7[3];
    if (v8 == v7[4])
      (*(void (**)(_QWORD *))(*v7 + 80))(v7);
    else
      v7[3] = v8 + 1;
  }
  v6 = (*(uint64_t (**)(_QWORD *))(*v4 + 72))(v4);
  if (v6 != -1)
    goto LABEL_6;
  v9 = 2;
LABEL_12:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_19BFAA99C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x19BFAA964);
  }
  __cxa_rethrow();
}

void sub_19BFAA9F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19BFAAA0C(_QWORD *a1, _QWORD *a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (_QWORD *)*a1;
    v3 = v2;
  }
  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v5 = v4;
  }
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (v3 == v5)
      return 0;
    if (v3 >= v5)
      return 1;
  }
  return 255;
}

_QWORD *sub_19BFAAA88(_QWORD *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a2 + 88);
    v6 = *(_QWORD *)(a2 + 48);
    if (v5 < v6)
    {
      *(_QWORD *)(a2 + 88) = v6;
      v5 = v6;
    }
    v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_16;
    }
    v7 = (const void **)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 32);
  }
  v8 = *v7;
  v4 = v5 - (_QWORD)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    *v2 = v11;
    v2 = v11;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    if (!v4)
      goto LABEL_16;
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((_BYTE *)v2 + v4) = 0;
  return __dst;
}

uint64_t sub_19BFAAB60(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4, unsigned int a5)
{
  uint64_t v8;
  std::mutex *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int (*v19)(_QWORD *, _QWORD, uint64_t, uint64_t *, uint64_t, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD *, _QWORD, uint64_t, uint64_t *, uint64_t, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  size_t v44;
  const void *v45;
  size_t v46;
  const void *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  char *v55;
  unint64_t v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int16 v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int8 *v65;
  unint64_t v66;
  unsigned __int16 v67;
  uint64_t v68;
  unsigned int (*v69)(_QWORD *);
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(_QWORD *, unint64_t, uint64_t, uint64_t *, uint64_t, uint64_t);
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  void *v90;
  unsigned __int8 *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v99;
  _QWORD v100[2];
  void (*v101)(uint64_t);
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  _QWORD v107[2];

  v8 = a1;
  v100[0] = MEMORY[0x1E0C809B0];
  v100[1] = 0x40000000;
  v101 = sub_19BFAB7DC;
  v102 = &unk_1E3D15080;
  v103 = a1;
  v9 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  *(_DWORD *)(v8 + 8) = 1;
  std::mutex::unlock(v9);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, 2) & 1) != 0
    || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, 8))
  {
    *(_QWORD *)(v8 + 120) = sub_19BFAB80C;
    *(_QWORD *)(v8 + 128) = 0;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, 4)
    && !sub_19BFAB9D8(a2, a4, a5)
    || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2))
  {
    goto LABEL_181;
  }
  v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v96 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  v95 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  v13 = *(_QWORD *)(v8 + 80);
  v14 = sub_19BFAC3A8(*(_QWORD **)(v11 + 16));
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  v15 = *(_QWORD *)(v13 + 136);
  *(_BYTE *)(v14 + 124) = 2;
  v91 = &v95[v12];
  *(_QWORD *)(v14 + 48) = v95;
  *(_QWORD *)(v14 + 56) = v15;
  *v10 = v14;
  if ((a3 & 2) == 0)
  {
    v16 = sub_19BFAC2E0(v14);
    *(_DWORD *)(v8 + 112) = v16;
    if (v16 == -1)
    {
LABEL_11:
      *(_DWORD *)(v8 + 116) = v16;
      v17 = (_DWORD *)(v8 + 116);
      if (v12 >= 2)
      {
        v88 = &v95[2 * (*(_WORD *)v95 == 32)];
        goto LABEL_27;
      }
      v88 = v95;
      if (v12)
      {
LABEL_27:
        v32 = 0;
        v97 = v11;
        v83 = a2;
        v84 = (_DWORD *)(v8 + 116);
        v86 = v10;
        v87 = v8;
        v85 = v12;
        while (1)
        {
          if (*(_DWORD *)(v8 + 8) == 2)
            goto LABEL_181;
          if (v10[v32])
            break;
LABEL_171:
          v32 += 2;
          if (v32 >= v12)
            goto LABEL_175;
        }
        if (!v32 && *v96)
        {
          v88 += *(unsigned __int16 *)(*v96 + 98);
LABEL_164:
          v69 = *(unsigned int (**)(_QWORD *))(v8 + 120);
          v70 = *(_QWORD *)(v8 + 128);
          v71 = (_QWORD *)(v8 + (v70 >> 1));
          if ((v70 & 1) != 0)
            v69 = *(unsigned int (**)(_QWORD *))(*v71 + v69);
          v72 = v32;
          if (!v69(v71))
            goto LABEL_181;
          if (*v17 == -1)
          {
            v11 = v97;
            v32 = v72;
          }
          else
          {
            v11 = v97;
            v32 = v72;
            if (*v17 >= *(_DWORD *)(v8 + 112))
              goto LABEL_175;
          }
          goto LABEL_171;
        }
        v33 = *(_QWORD *)(v8 + 80);
        v92 = v32;
        v34 = &v95[v32];
        if (&v95[v32 + 0xFFFF] <= v91)
          v35 = (unint64_t)&v95[v32 + 0xFFFF];
        else
          v35 = (unint64_t)v91;
        v94 = (uint64_t)&v95[v32];
        if (v35 <= (unint64_t)v34)
        {
          v39 = 0;
          goto LABEL_61;
        }
        v36 = *(_DWORD *)(v33 + 248);
        while (1)
        {
          v37 = v35 - (_QWORD)v34;
          if ((*(_DWORD *)(v33 + 304) - 4) <= 2)
          {
            if (v37 >= 2)
            {
              v38 = *(_WORD *)v34;
              v39 = 2;
              goto LABEL_44;
            }
            v40 = 0;
            a5 = **(_DWORD **)(v33 + 296);
            if ((v36 & a5 & 0x3FFFF) == 0)
            {
              v39 = 0;
LABEL_61:
              v89 = v39;
              v40 = 0;
              if (v34)
              {
                if (v34 != (unsigned __int8 *)v35)
                {
                  v107[0] = 0;
                  v93 = v35 - (_QWORD)v34;
                  v41 = *(uint64_t **)(v33 + 8);
                  v42 = *(uint64_t **)(v33 + 16);
                  v99 = v35;
                  if (v41 != v42)
                  {
                    v43 = v32 & 0xFFFFFFFE;
                    v90 = *(void **)(v11 + 104);
                    do
                    {
                      if (*(char *)(v33 + 1327) < 0)
                      {
                        v45 = *(const void **)(v33 + 1304);
                        v44 = *(_QWORD *)(v33 + 1312);
                      }
                      else
                      {
                        v44 = *(unsigned __int8 *)(v33 + 1327);
                        v45 = (const void *)(v33 + 1304);
                      }
                      if (*(char *)(v33 + 1351) < 0)
                      {
                        v47 = *(const void **)(v33 + 1328);
                        v46 = *(_QWORD *)(v33 + 1336);
                      }
                      else
                      {
                        v46 = *(unsigned __int8 *)(v33 + 1351);
                        v47 = (const void *)(v33 + 1328);
                      }
                      v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v41 + 160))(*v41);
                      if ((sub_19BFAD074(v45, v44, v47, v46, v48, v43 == 0) & 1) == 0)
                      {
                        v49 = *(_DWORD *)(*v41 + 52);
                        if (((a3 & 0x40000) != 0 || v49 != 1) && ((a3 & 0x100000) == 0 || (v49 & 0xFFFFFFFD) != 1))
                        {
                          v50 = ((v93 > 1) & ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v41 + 160))(*v41) | ((a3 & 8) >> 3))) != 0
                              ? 2
                              : 0;
                          v51 = (a3 >> 2) & 5 | (a3 >> 4) & 8 | (a3 >> 15) & 0x10 | v50;
                          bzero(v90, 0x3000uLL);
                          v52 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t, _QWORD, _QWORD, int64_t, void *, uint64_t))(*(_QWORD *)*v41 + 80))(*v41, v51, v34, v93, *(_QWORD *)(v33 + 1288), *(_QWORD *)(v33 + 1296), v34 - v88, v90, 512);
                          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v41 + 160))(*v41))
                            sub_19BFAD0DC((_BYTE *)v33, v97, (uint64_t)v107, v52);
                          else
                            sub_19BFAD37C((_QWORD *)v33, v97, v94, (uint64_t)v34, v93, a3, v52, *v41, (uint64_t)v107);
                          if (v52)
                          {
                            v53 = 16;
                            do
                            {
                              sub_19BFAD520((const void **)(*(_QWORD *)(v97 + 104) + v53), 0);
                              v53 += 24;
                              --v52;
                            }
                            while (v52);
                          }
                        }
                      }
                      v41 += 2;
                      v35 = v99;
                    }
                    while (v41 != v42);
                  }
                  a2 = v83;
                  v17 = v84;
                  v10 = v86;
                  v8 = v87;
                  v12 = v85;
                  if (*(_BYTE *)(v33 + 105))
                  {
                    sub_19C02C568((uint64_t)&v104, (unsigned __int16 *)v34, v93 >> 1);
                    if (v106)
                      sub_19BFAD554(v33, v97, *(_QWORD *)(v33 + 96) + v104, v94, (uint64_t)v34, (_WORD)v34 + 2 * v105, (uint64_t)v107);
                    v35 = v99;
                  }
                  v40 = v107[0];
                  if ((a5 & 0x80000000) != 0 || !v107[0])
                  {
                    v54 = &v34[v89];
                    if ((unint64_t)&v34[v89] > v35)
                    {
                      v40 = sub_19BFAD554(v33, v97, (a5 >> 18), v94, (uint64_t)v34, (unsigned __int16)v34 + (unsigned __int16)v89, (uint64_t)v107);
                      goto LABEL_163;
                    }
                    if ((a5 & 0x40000000) == 0)
                    {
                      v55 = 0;
                      goto LABEL_130;
                    }
                    if ((unint64_t)v54 >= v35)
                    {
                      v56 = 0;
                      v55 = (char *)&v34[v89];
                      goto LABEL_127;
                    }
                    v56 = 0;
                    v55 = (char *)&v34[v89];
                    v57 = a5;
                    v58 = v99;
                    while (2)
                    {
                      v59 = v58 - (_QWORD)v55;
                      if ((*(_DWORD *)(v33 + 304) - 4) > 2)
                      {
                        v60 = *v55;
                        if (*v55 < 0)
                        {
                          if (v59 >= 2 && (v60 & 0xE0) == 0xC0)
                          {
                            v61 = 2;
                            v60 = v55[1] & 0x3F | ((v60 & 0x1F) << 6);
                            goto LABEL_110;
                          }
                          if (v59 >= 3)
                          {
                            if ((v60 & 0xF0) == 0xE0)
                            {
                              v60 = (v60 << 12) | ((v55[1] & 0x3F) << 6) | v55[2] & 0x3F;
                              v61 = 3;
                              goto LABEL_110;
                            }
                            if (v59 >= 4)
                            {
                              if ((v60 & 0xF8) == 0xF0)
                              {
                                v60 = 0;
                                v61 = 4;
                                goto LABEL_110;
                              }
                              if (v59 >= 5)
                              {
                                if ((v60 & 0xFC) == 0xF8)
                                {
                                  v60 = 0;
                                  v61 = 5;
                                  goto LABEL_110;
                                }
                                if (v59 >= 6 && (v60 & 0xFE) == 0xFC)
                                {
                                  v60 = 0;
                                  v61 = 6;
                                  goto LABEL_110;
                                }
                              }
                            }
                          }
                          v60 = 0;
                        }
                        v61 = 1;
LABEL_110:
                        v62 = *(_DWORD *)(*(_QWORD *)(v33 + 296) + 4 * v60);
                        if ((v57 & v62 & 0x3FFFF) == 0)
                          goto LABEL_128;
                        v55 += v61;
                        ++v56;
                        v57 = v62;
                        v58 = v99;
                        if ((unint64_t)v55 >= v99)
                          goto LABEL_128;
                        continue;
                      }
                      break;
                    }
                    if (v59 >= 2)
                    {
                      v60 = *(_WORD *)v55;
                      v61 = 2;
                      goto LABEL_110;
                    }
                    if ((v57 & **(_DWORD **)(v33 + 296) & 0x3FFFF) == 0)
                    {
LABEL_127:
                      if (v55)
                      {
LABEL_128:
                        if (v56 <= *(_QWORD *)(v33 + 792))
                          sub_19BFAD554(v33, v97, (a5 >> 18), v94, (uint64_t)v34, (__int16)v55, (uint64_t)v107);
LABEL_130:
                        v63 = (a5 >> 26) & 0xF;
                        if ((_DWORD)v63)
                        {
                          v64 = 1;
                          while (1)
                          {
                            v65 = (unsigned __int8 *)v55;
                            if (v54 != (unsigned __int8 *)v55)
                              break;
LABEL_150:
                            if (v64 < v63)
                            {
                              ++v64;
                              v54 = v65;
                              if ((unint64_t)v65 <= v99)
                                continue;
                            }
                            goto LABEL_161;
                          }
                          sub_19BFAD554(v33, v97, (a5 >> 18), v94, (uint64_t)v34, (__int16)v54, (uint64_t)v107);
                          v66 = v99 - (_QWORD)v54;
                          if ((*(_DWORD *)(v33 + 304) - 4) <= 2)
                          {
                            if (v66 < 2)
                            {
                              v68 = 0;
                              v67 = 0;
                            }
                            else
                            {
                              v67 = *(_WORD *)v54;
                              v68 = 2;
                            }
                            goto LABEL_148;
                          }
                          v67 = *v54;
                          if ((char)*v54 < 0)
                          {
                            if (v66 < 2 || (v67 & 0xE0) != 0xC0)
                            {
                              if (v66 >= 3)
                              {
                                if ((v67 & 0xF0) == 0xE0)
                                {
                                  v67 = (v67 << 12) | ((v54[1] & 0x3F) << 6) | v54[2] & 0x3F;
                                  v68 = 3;
                                  goto LABEL_148;
                                }
                                if (v66 >= 4)
                                {
                                  if ((v67 & 0xF8) == 0xF0)
                                  {
                                    v67 = 0;
                                    v68 = 4;
                                    goto LABEL_148;
                                  }
                                  if (v66 >= 5)
                                  {
                                    if ((v67 & 0xFC) == 0xF8)
                                    {
                                      v67 = 0;
                                      v68 = 5;
                                      goto LABEL_148;
                                    }
                                    if (v66 >= 6 && (v67 & 0xFE) == 0xFC)
                                    {
                                      v67 = 0;
                                      v68 = 6;
                                      goto LABEL_148;
                                    }
                                  }
                                }
                              }
                              v67 = 0;
                              goto LABEL_137;
                            }
                            v68 = 2;
                            v67 = v54[1] & 0x3F | ((v67 & 0x1F) << 6);
                          }
                          else
                          {
LABEL_137:
                            v68 = 1;
                          }
LABEL_148:
                          if ((a5 & 0x3FFFF & *(_DWORD *)(*(_QWORD *)(v33 + 296) + 4 * v67)) == 0)
                            goto LABEL_160;
                          v65 = &v54[v68];
                          goto LABEL_150;
                        }
LABEL_160:
                        LOWORD(v65) = (_WORD)v54;
LABEL_161:
                        v40 = v107[0];
                        v10 = v86;
                        v8 = v87;
                        v17 = v84;
                        v12 = v85;
                        if (!v107[0])
                        {
                          sub_19BFAD554(v33, v97, (a5 >> 18), v94, (uint64_t)v34, (__int16)v65, (uint64_t)v107);
                          v40 = v107[0];
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_163:
            v32 = v92;
            v96[v92] = v40;
            goto LABEL_164;
          }
          v38 = *v34;
          if (((char)*v34 & 0x80000000) == 0)
            goto LABEL_40;
          if (v37 >= 2 && (v38 & 0xE0) == 0xC0)
          {
            v39 = 2;
            v38 = v34[1] & 0x3F | ((v38 & 0x1F) << 6);
          }
          else
          {
            if (v37 < 3)
              goto LABEL_59;
            if ((v38 & 0xF0) == 0xE0)
            {
              v38 = (v38 << 12) | ((v34[1] & 0x3F) << 6) | v34[2] & 0x3F;
              v39 = 3;
            }
            else
            {
              if (v37 < 4)
                goto LABEL_59;
              if ((v38 & 0xF8) == 0xF0)
              {
                v38 = 0;
                v39 = 4;
              }
              else
              {
                if (v37 < 5)
                  goto LABEL_59;
                if ((v38 & 0xFC) == 0xF8)
                {
                  v38 = 0;
                  v39 = 5;
                }
                else
                {
                  if (v37 < 6 || (v38 & 0xFE) != 0xFC)
                  {
LABEL_59:
                    v38 = 0;
LABEL_40:
                    v39 = 1;
                    goto LABEL_44;
                  }
                  v38 = 0;
                  v39 = 6;
                }
              }
            }
          }
LABEL_44:
          a5 = *(_DWORD *)(*(_QWORD *)(v33 + 296) + 4 * v38);
          if ((v36 & a5 & 0x3FFFF) != 0)
          {
            v34 += v39;
            v36 = *(_DWORD *)(*(_QWORD *)(v33 + 296) + 4 * v38);
            if ((unint64_t)v34 < v35)
              continue;
          }
          goto LABEL_61;
        }
      }
      goto LABEL_175;
    }
    if (v16)
    {
      v16 = 0;
      goto LABEL_11;
    }
LABEL_181:
    v79 = 0;
    goto LABEL_182;
  }
  *(_DWORD *)(v8 + 116) = -1;
  v18 = *v96;
  if (!*v96)
  {
    v28 = sub_19BFAE97C(*(_QWORD *)(v8 + 80), (unint64_t)v95, v91, v11, a3);
    *v96 = v28;
    v29 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t *, uint64_t, uint64_t))(v8 + 120);
    v30 = *(_QWORD *)(v8 + 128);
    v31 = (_QWORD *)(v8 + (v30 >> 1));
    if ((v30 & 1) != 0)
      v29 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t *, uint64_t, uint64_t))(*v31 + v29);
    v27 = v29(v31, 0, v28, v10, v11, v8 + 116);
LABEL_24:
    if ((v27 & 1) != 0)
      goto LABEL_175;
    goto LABEL_181;
  }
  v19 = *(unsigned int (**)(_QWORD *, _QWORD, uint64_t, uint64_t *, uint64_t, uint64_t))(v8 + 120);
  v20 = *(_QWORD *)(v8 + 128);
  v21 = (_QWORD *)(v8 + (v20 >> 1));
  if ((v20 & 1) != 0)
    v19 = *(unsigned int (**)(_QWORD *, _QWORD, uint64_t, uint64_t *, uint64_t, uint64_t))(*v21
                                                                                                + v19);
  if (!v19(v21, 0, *v96, v10, v11, v8 + 116))
    goto LABEL_181;
  v22 = *(unsigned __int16 *)(v18 + 98);
  if (v10[v22])
  {
    v23 = sub_19BFAE97C(*(_QWORD *)(v8 + 80), (unint64_t)&v95[v22], v91, v11, a3);
    v96[v22] = v23;
    v24 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v8 + 120);
    v25 = *(_QWORD *)(v8 + 128);
    v26 = (_QWORD *)(v8 + (v25 >> 1));
    if ((v25 & 1) != 0)
      v24 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*v26 + v24);
    v27 = v24(v26, v22, v23, v10, v11, v8 + 116);
    goto LABEL_24;
  }
LABEL_175:
  v73 = *(_QWORD *)(v8 + 80);
  v74 = sub_19BFAC3A8(*(_QWORD **)(v11 + 16));
  *(_OWORD *)(v74 + 96) = 0u;
  *(_OWORD *)(v74 + 112) = 0u;
  *(_OWORD *)(v74 + 64) = 0u;
  *(_OWORD *)(v74 + 80) = 0u;
  *(_OWORD *)(v74 + 32) = 0u;
  *(_OWORD *)(v74 + 48) = 0u;
  *(_OWORD *)v74 = 0u;
  *(_OWORD *)(v74 + 16) = 0u;
  v75 = *(_QWORD *)(v73 + 136);
  *(_BYTE *)(v74 + 124) = 3;
  *(_QWORD *)(v74 + 48) = v91;
  *(_QWORD *)(v74 + 56) = v75;
  v96[v12] = v74;
  if (v10[v12])
  {
    v76 = *(unsigned int (**)(_QWORD *, unint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v8 + 120);
    v77 = *(_QWORD *)(v8 + 128);
    v78 = (_QWORD *)(v8 + (v77 >> 1));
    if ((v77 & 1) != 0)
      v76 = *(unsigned int (**)(_QWORD *, unint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*v78 + v76);
    if (!v76(v78, v12, v74, v10, v11, v8 + 116))
      goto LABEL_181;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a2, 32, v74))
  {
    sub_19BFAC228(a2);
  }
  else
  {
    v81 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v82 = (_QWORD *)*v81;
    if (*v81)
    {
      do
      {
        v82[1] = v81;
        v81 = v82;
        v82 = (_QWORD *)*v82;
      }
      while (v82);
    }
  }
  v79 = 1;
LABEL_182:
  v101((uint64_t)v100);
  return v79;
}

void sub_19BFAB7B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 - 144))(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_19BFAB7DC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  std::mutex::lock((std::mutex *)(v1 + 16));
  *(_DWORD *)(v1 + 8) = 0;
  std::mutex::unlock((std::mutex *)(v1 + 16));
}

uint64_t sub_19BFAB80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!a3)
    return 1;
  v8 = a3;
  v25 = a2;
  v26 = a4;
  while (1)
  {
    v10 = *(_QWORD *)(a4 + 8 * a2);
    if (v10)
    {
      v11 = 0;
      v12 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        if ((!*(_BYTE *)(v10 + 122) || *(int *)(v10 + 80) <= 20000)
          && (!*(_BYTE *)(v8 + 122) || *(int *)(v8 + 80) <= 20000))
        {
          v13 = sub_19BFAC58C(*(_QWORD *)(a1 + 88), *(unsigned __int16 *)(v10 + 100), *(unsigned __int16 *)(v8 + 102));
          if (v13 <= 32766)
          {
            v14 = *(int *)(v8 + 80) + (uint64_t)v13;
            if (*(_QWORD *)(v10 + 112) + v14 < v12)
            {
              v12 = *(_QWORD *)(v10 + 112) + v14;
              v11 = v10;
            }
            v15 = sub_19BFAC61C(a5);
            *((_DWORD *)v15 + 4) = v14;
            v16 = *a6;
            if (*a6 != -1 && v16 < *(_DWORD *)(a1 + 112))
              *a6 = v16 + 1;
            v17 = *(_QWORD *)(v8 + 40);
            *v15 = v10;
            v15[1] = v17;
            *(_QWORD *)(v8 + 40) = v15;
            *(_QWORD *)(v10 + 32) = v15;
          }
        }
        v10 = *(_QWORD *)(v10 + 16);
      }
      while (v10);
    }
    else
    {
      v11 = 0;
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (*(_QWORD *)(v8 + 40))
      goto LABEL_30;
    v18 = *(_QWORD *)(v26 + 8 * v25);
    if (!v18)
      goto LABEL_30;
    v24 = *(int *)(v8 + 80)
        + (uint64_t)(int)sub_19BFA9CC8(*(_QWORD *)(a1 + 88), *(unsigned __int16 *)(v18 + 100), *(unsigned __int16 *)(v8 + 102));
    v19 = *(_QWORD *)(v18 + 112) + v24;
    v21 = sub_19BFAC61C(a5);
    *((_DWORD *)v21 + 4) = v24;
    v22 = *(_QWORD *)(v8 + 40);
    *v21 = v18;
    v21[1] = v22;
    *(_QWORD *)(v8 + 40) = v21;
    *(_QWORD *)(v18 + 32) = v21;
    if (v19 >= v12)
    {
LABEL_30:
      v18 = v11;
      v19 = v12;
      if (!v11)
        return 0;
    }
    *(_QWORD *)v8 = v18;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 112) = v19;
    a2 = v25;
    a4 = v26;
    v20 = *(unsigned __int16 *)(v8 + 98) + v25;
    *(_QWORD *)(v8 + 16) = *(_QWORD *)(v26 + 8 * v20);
    *(_QWORD *)(v26 + 8 * v20) = v8;
    v8 = *(_QWORD *)(v8 + 24);
    if (!v8)
      return 1;
  }
}

uint64_t sub_19BFAB9D8(uint64_t a1, __int16 a2, __int16 a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;
  const void *v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  char *v36;
  unint64_t v37;
  int64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  int64_t *v47;
  int64_t v48;
  uint64_t v49;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _WORD *v60;
  _WORD *v61;
  size_t *v62;
  _QWORD *v63;
  uint64_t v64;
  _WORD *v65;
  size_t v66;
  const void *v67;
  uint64_t v69;
  uint64_t v70;
  _WORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  char *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v92;
  char *v93;
  uint64_t (**v94)();
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  void *__p;
  char *v100;
  char *v101;
  size_t v102;
  _WORD *v103;
  _WORD *v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v6 = v5 + 1;
  v8 = *(_QWORD *)(v4 + 72);
  v7 = *(_BYTE **)(v4 + 80);
  v9 = v5 + 1 - (_QWORD)&v7[-v8];
  if (v5 + 1 <= (unint64_t)&v7[-v8])
  {
    if (v5 + 1 < (unint64_t)&v7[-v8])
      *(_QWORD *)(v4 + 80) = v8 + v6;
  }
  else
  {
    v10 = *(_QWORD *)(v4 + 88);
    if (v10 - (uint64_t)v7 >= v9)
    {
      bzero(*(void **)(v4 + 80), v9);
      *(_QWORD *)(v4 + 80) = &v7[v9];
    }
    else
    {
      if ((v6 & 0x8000000000000000) != 0)
        sub_19BF8EB40();
      v11 = v10 - v8;
      v12 = 2 * v11;
      if (2 * v11 <= v6)
        v12 = v5 + 1;
      if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v14 = operator new(v13);
      v15 = &v14[v13];
      v16 = &v14[v6];
      bzero(&v7[(_QWORD)v14 - v8], v9);
      if (v7 == (_BYTE *)v8)
      {
        v14 = &v7[(_QWORD)v14 - v8];
      }
      else
      {
        v17 = &v7[~v8];
        do
        {
          v18 = *--v7;
          (v17--)[(_QWORD)v14] = v18;
        }
        while (v7 != (_BYTE *)v8);
        v7 = *(_BYTE **)(v4 + 72);
      }
      *(_QWORD *)(v4 + 72) = v14;
      *(_QWORD *)(v4 + 80) = v16;
      *(_QWORD *)(v4 + 88) = v15;
      if (v7)
        operator delete(v7);
    }
    v8 = *(_QWORD *)(v4 + 72);
  }
  v92 = v4;
  v19 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  memcpy((void *)v8, v19, v20);
  __p = 0;
  v100 = 0;
  v101 = 0;
  v88 = a1;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = (char *)(v8 + (v21 & 0xFFFFFFFFFFFFFFFELL));
  v27 = 1;
  do
  {
    if (v25 == 0xFFFF)
      goto LABEL_61;
    v28 = v25;
    v29 = v27;
    v30 = (char *)v8;
    if (v8 < (unint64_t)v26)
    {
      v30 = (char *)v8;
      do
      {
        if (*(_WORD *)v30 == 10)
          break;
        v30 += 2;
      }
      while (v30 < v26);
    }
    if ((unint64_t)v22 >= v23)
    {
      v31 = (v22 - v24) >> 3;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        sub_19BF8EB40();
      if ((uint64_t)(v23 - (_QWORD)v24) >> 2 > v32)
        v32 = (uint64_t)(v23 - (_QWORD)v24) >> 2;
      if (v23 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
        v33 = (unint64_t)sub_19BFAC524(v33);
      else
        v34 = 0;
      v35 = (unint64_t *)(v33 + 8 * v31);
      *v35 = v8;
      v36 = (char *)(v35 + 1);
      if (v22 != v24)
      {
        do
        {
          v37 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v35 = v37;
        }
        while (v22 != v24);
        v22 = v24;
      }
      v24 = (char *)v35;
      v23 = v33 + 8 * v34;
      if (v22)
        operator delete(v22);
      v22 = v36;
    }
    else
    {
      *(_QWORD *)v22 = v8;
      v22 += 8;
    }
    v38 = (int64_t)&v30[-v8];
    v39 = v100;
    if (v100 >= v101)
    {
      v41 = (char *)__p;
      v42 = (v100 - (_BYTE *)__p) >> 3;
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 61)
        sub_19BF8EB40();
      v44 = v101 - (_BYTE *)__p;
      if ((v101 - (_BYTE *)__p) >> 2 > v43)
        v43 = v44 >> 2;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v45 = v43;
      if (v45)
      {
        v46 = (char *)sub_19BF965C4((uint64_t)&v101, v45);
        v41 = (char *)__p;
        v39 = v100;
      }
      else
      {
        v46 = 0;
      }
      v47 = (int64_t *)&v46[8 * v42];
      *v47 = v38;
      v40 = (char *)(v47 + 1);
      while (v39 != v41)
      {
        v48 = *((_QWORD *)v39 - 1);
        v39 -= 8;
        *--v47 = v48;
      }
      __p = v47;
      v100 = v40;
      v101 = &v46[8 * v45];
      if (v41)
        operator delete(v41);
    }
    else
    {
      *(_QWORD *)v100 = v38;
      v40 = v39 + 8;
    }
    v100 = v40;
    v25 = v28 + 1;
    v8 = (unint64_t)(v30 + 2);
    v27 = v29 + 1;
  }
  while (v30 != v26);
  if (v28 > 0xFFFD)
  {
LABEL_61:
    v49 = 0;
    goto LABEL_62;
  }
  v51 = (char *)sub_19BFAC364(v25);
  v53 = v52;
  v103 = 0;
  v104 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v88 + 88))(v88);
  v87 = operator new[]();
  v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 88))(v88);
  v94 = &off_1E3D14038;
  v95 = 0;
  v96 = v54 + 2;
  v97 = v87;
  v98 = 0;
  v93 = &v51[24 * v53];
  if (sub_19BFB959C((uint64_t)&v94, 2))
  {
    v55 = v95;
    *(_WORD *)(v97 + v95) = 32;
    v95 = v55 + 2;
  }
  v56 = 0;
  v57 = 2;
  v58 = v51;
  while (2)
  {
    v59 = 0;
    v60 = *(_WORD **)&v24[8 * v56];
    v61 = (_WORD *)((char *)v60 + (*((_QWORD *)__p + v56) & 0xFFFFFFFFFFFFFFFELL));
    v62 = &v102;
    v63 = &v103;
    do
    {
      if (v59 == 2)
      {
        v66 = v102;
        v67 = v103;
        goto LABEL_85;
      }
      v64 = v59;
      v65 = v60;
      if (v60 < v61)
      {
        v65 = v60;
        do
        {
          if (*v65 == 9)
            break;
          ++v65;
        }
        while (v65 < v61);
      }
      *v63++ = v60;
      *v62++ = (char *)v65 - (char *)v60;
      ++v59;
      v60 = v65 + 1;
    }
    while (v65 != v61);
    v66 = v102;
    v67 = v103;
    if (!v64 && v102 == 6)
    {
      if (*(_DWORD *)v103 == 5177413 && v103[2] == 83)
        break;
      v66 = 6;
      v59 = 1;
    }
LABEL_85:
    if (sub_19BFB959C((uint64_t)&v94, v66))
    {
      v69 = v95;
      memcpy((void *)(v97 + v95), v67, v66);
      v95 = v69 + v66;
    }
    if (sub_19BFB959C((uint64_t)&v94, 2))
    {
      v70 = v95;
      *(_WORD *)(v97 + v95) = 32;
      v95 = v70 + 2;
    }
    if (v59 == 2)
    {
      v71 = v104;
      if (!*v104)
      {
        v49 = 0;
        goto LABEL_119;
      }
      if (v58 >= v93)
      {
        v72 = 0xAAAAAAAAAAAAAAABLL * ((v58 - v51) >> 3) + 1;
        if (v72 > 0xAAAAAAAAAAAAAAALL)
          sub_19BF8EB40();
        if (0x5555555555555556 * ((v93 - v51) >> 3) > v72)
          v72 = 0x5555555555555556 * ((v93 - v51) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v93 - v51) >> 3) >= 0x555555555555555)
          v73 = 0xAAAAAAAAAAAAAAALL;
        else
          v73 = v72;
        if (v73)
          v73 = (unint64_t)sub_19BFAC364(v73);
        else
          v74 = 0;
        v75 = (_QWORD *)(v73 + 8 * ((v58 - v51) >> 3));
        *v75 = v67;
        v75[1] = v66;
        v75[2] = v71;
        if (v58 == v51)
        {
          v77 = (char *)(v73 + 8 * ((v58 - v51) >> 3));
        }
        else
        {
          v76 = v73 + 8 * ((v58 - v51) >> 3);
          do
          {
            v77 = (char *)(v76 - 24);
            v78 = *(_OWORD *)(v58 - 24);
            *(_QWORD *)(v76 - 8) = *((_QWORD *)v58 - 1);
            *(_OWORD *)(v76 - 24) = v78;
            v58 -= 24;
            v76 -= 24;
          }
          while (v58 != v51);
        }
        v93 = (char *)(v73 + 24 * v74);
        v58 = (char *)(v75 + 3);
        if (v51)
          operator delete(v51);
        v51 = v77;
      }
      else
      {
        *(_QWORD *)v58 = v67;
        *((_QWORD *)v58 + 1) = v66;
        *((_QWORD *)v58 + 2) = v71;
        v58 += 24;
      }
    }
    v57 += v66 + 2;
    if (++v56 != v29)
      continue;
    break;
  }
  if (HIBYTE(v98))
    v79 = 0;
  else
    v79 = v97;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88 + 80))(v88, v79, v57 - 2);
  if (v51 != v58)
  {
    v80 = 2;
    v81 = v51;
    do
    {
      v83 = *(_QWORD *)v81;
      v82 = *((_QWORD *)v81 + 1);
      v84 = *((_QWORD *)v81 + 2);
      v85 = sub_19BFAC3A8(*(_QWORD **)(v92 + 16));
      *(_OWORD *)(v85 + 96) = 0u;
      *(_OWORD *)(v85 + 112) = 0u;
      *(_OWORD *)(v85 + 64) = 0u;
      *(_OWORD *)(v85 + 80) = 0u;
      *(_OWORD *)(v85 + 32) = 0u;
      *(_OWORD *)(v85 + 48) = 0u;
      *(_OWORD *)v85 = 0u;
      *(_OWORD *)(v85 + 16) = 0u;
      *(_QWORD *)(v85 + 48) = v83;
      *(_QWORD *)(v85 + 56) = v84;
      *(_WORD *)(v85 + 96) = v82;
      *(_WORD *)(v85 + 98) = v82 + 2;
      *(_WORD *)(v85 + 102) = a2;
      v86 = v89 + 8 * v80;
      *(_WORD *)(v85 + 100) = a3;
      v80 += v82;
      v81 += 24;
      *(_QWORD *)(v86 - 16) = v85;
    }
    while (v81 != v58);
  }
  v49 = 1;
LABEL_119:
  if ((_BYTE)v98 && v97)
    MEMORY[0x1A1AD0CB8](v97, 0x1000C8077774924);
  MEMORY[0x1A1AD0CB8](v87, 0x1000C8077774924);
  if (v51)
    operator delete(v51);
LABEL_62:
  if (__p)
  {
    v100 = (char *)__p;
    operator delete(__p);
  }
  if (v24)
    operator delete(v24);
  return v49;
}

void sub_19BFAC178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21)
{
  void *v21;
  void *v22;

  if (a19 && a18)
    MEMORY[0x1A1AD0CB8](a18, 0x1000C8077774924);
  MEMORY[0x1A1AD0CB8](a9, 0x1000C8077774924);
  if (v22)
    operator delete(v22);
  if (__p)
    operator delete(__p);
  if (v21)
    operator delete(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFAC228(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *i;

  v2 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v3 = (_QWORD *)*v2;
  if (*v2)
  {
    do
    {
      v3[1] = v2;
      v2 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    do
    {
      for (i = *(uint64_t **)(result + 8 * v7); i; i = (uint64_t *)i[3])
      {
        *(_QWORD *)(v4 + 8) = i;
        *i = v4;
        v4 = (uint64_t)i;
      }
    }
    while (v7++ != v5);
  }
  return result;
}

unint64_t sub_19BFAC2E0(uint64_t a1)
{
  host_t v1;
  uint64_t v3;
  mach_msg_type_number_t v4;
  integer_t host_info_out[15];

  v4 = 15;
  v1 = MEMORY[0x1A1AD0F7C](a1);
  if (host_statistics(v1, 2, host_info_out, &v4))
    return 0xFFFFFFFFLL;
  v3 = *MEMORY[0x1E0C85AD8] * host_info_out[0];
  if (v3 <= 0x100000)
    return 0;
  if (v3 >= 2148532223)
    LODWORD(v3) = -2146435073;
  return (v3 - 0x100000) / 0x18uLL;
}

void *sub_19BFAC364(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    sub_19BF8E6D0();
  return operator new(24 * a1);
}

uint64_t sub_19BFAC3A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 == v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    v6 = (_QWORD *)operator new[]();
    *v6 = 128;
    v6[1] = v3;
    v7 = v6 + 2;
    if (v3)
    {
      v8 = v3 << 7;
      v9 = v6 + 15;
      do
      {
        *v9 = 0;
        v9 += 16;
        v8 -= 128;
      }
      while (v8);
    }
    v11 = (_QWORD *)a1[2];
    v10 = a1[3];
    if ((unint64_t)v11 >= v10)
    {
      v13 = a1[1];
      v14 = ((uint64_t)v11 - v13) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_19BF8EB40();
      v15 = v10 - v13;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v17 = (unint64_t)sub_19BFAC524(v17);
      else
        v18 = 0;
      v19 = (_QWORD *)(v17 + 8 * v14);
      v20 = v17 + 8 * v18;
      *v19 = v7;
      v12 = v19 + 1;
      v22 = (char *)a1[1];
      v21 = (char *)a1[2];
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v19 = v23;
        }
        while (v21 != v22);
        v21 = (char *)a1[1];
      }
      a1[1] = v19;
      a1[2] = v12;
      a1[3] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v11 = v7;
      v12 = v11 + 1;
    }
    a1[2] = v12;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  v24 = *(_QWORD *)(v5 + 8 * v2);
  a1[4] = v4 + 1;
  v25 = v24 + (v4 << 7);
  sub_19BFAC558((const void **)(v25 + 104), 0);
  *(_OWORD *)(v25 + 96) = 0u;
  *(_OWORD *)(v25 + 112) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  return v25;
}

void *sub_19BFAC524(unint64_t a1)
{
  if (a1 >> 61)
    sub_19BF8E6D0();
  return operator new(8 * a1);
}

void sub_19BFAC558(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_19BFAC58C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(v4 + 4 * (a2 + 1));
  v6 = *(_DWORD *)(v4 + 4 * a2);
  if (v5 - v6 == *(unsigned __int16 *)(a1 + 34))
    return *(__int16 *)(*(_QWORD *)(a1 + 24) + 2 * (v6 + a3));
  v8 = a3 | (a2 << 16);
  v9 = *(_DWORD *)(a1 + 36) & (3 * a2 + a3);
  v10 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(v10 + 4 * v9) == v8)
    return *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * v9);
  *(_DWORD *)(v10 + 4 * v9) = v8;
  result = sub_19BFA9CFC((_QWORD *)a1, a2, a3);
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v9) = result;
  return result;
}

_QWORD *sub_19BFAC61C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *result;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 48);
  }
  else
  {
    v1 = operator new();
    *(_QWORD *)v1 = &off_1E3D142B8;
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 2048;
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 32) = v1;
    v2 = 2048;
  }
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  if (v5 == v2)
  {
    v5 = 0;
    ++v6;
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = v6;
  }
  v7 = *(_QWORD *)(v1 + 8);
  if (v6 == (*(_QWORD *)(v1 + 16) - v7) >> 3)
  {
    v8 = operator new[]();
    v9 = v8;
    v11 = *(uint64_t **)(v1 + 16);
    v10 = *(_QWORD *)(v1 + 24);
    if ((unint64_t)v11 >= v10)
    {
      v13 = *(uint64_t **)(v1 + 8);
      v14 = v11 - v13;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_19BF8EB40();
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 61)
          sub_19BF8E6D0();
        v18 = (char *)operator new(8 * v17);
        v13 = *(uint64_t **)(v1 + 8);
        v11 = *(uint64_t **)(v1 + 16);
      }
      else
      {
        v18 = 0;
      }
      v19 = (uint64_t *)&v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = v19 + 1;
      if (v11 != v13)
      {
        do
        {
          v21 = *--v11;
          *--v19 = v21;
        }
        while (v11 != v13);
        v13 = *(uint64_t **)(v1 + 8);
      }
      *(_QWORD *)(v1 + 8) = v19;
      *(_QWORD *)(v1 + 16) = v12;
      *(_QWORD *)(v1 + 24) = v20;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v11 = v8;
      v12 = v11 + 1;
    }
    *(_QWORD *)(v1 + 16) = v12;
    v7 = *(_QWORD *)(v1 + 8);
    v5 = *(_QWORD *)(v1 + 32);
    v6 = *(_QWORD *)(v1 + 40);
  }
  v22 = *(_QWORD *)(v7 + 8 * v6);
  *(_QWORD *)(v1 + 32) = v5 + 1;
  result = (_QWORD *)(v22 + 24 * v5);
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void sub_19BFAC7E4(_QWORD *a1)
{
  sub_19BFAC808(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFAC808(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_1E3D142B8;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x1A1AD0CB8](v2[v5], 0x1020C80EDCEB4C7);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19BFAC89C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  std::mutex::lock((std::mutex *)(v1 + 16));
  *(_DWORD *)(v1 + 8) = 0;
  std::mutex::unlock((std::mutex *)(v1 + 16));
}

void sub_19BFAC8D0(uint64_t a1)
{
  sub_19BFAC8F4(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFAC8F4(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v18;

  *(_QWORD *)a1 = &off_1E3D140B8;
  sub_19BFACB20((_QWORD *)a1);
  v2 = *(void ***)(a1 + 1360);
  v3 = *(void ***)(a1 + 1368);
  *(_QWORD *)(a1 + 1392) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v2 = (void **)(*(_QWORD *)(a1 + 1360) + 8);
      *(_QWORD *)(a1 + 1360) = v2;
      v3 = *(void ***)(a1 + 1368);
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 4096;
LABEL_7:
    *(_QWORD *)(a1 + 1384) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v8 = *(_QWORD *)(a1 + 1360);
    v9 = *(_QWORD *)(a1 + 1368);
    if (v9 != v8)
      *(_QWORD *)(a1 + 1368) = v9 + ((v8 - v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v10 = *(void **)(a1 + 1352);
  if (v10)
    operator delete(v10);
  if (*(char *)(a1 + 1351) < 0)
    operator delete(*(void **)(a1 + 1328));
  if (*(char *)(a1 + 1327) < 0)
    operator delete(*(void **)(a1 + 1304));
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  v11 = MEMORY[0x1E0DE4F60];
  v12 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 800) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 800 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 24);
  *(_QWORD *)(a1 + 808) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 895) < 0)
    operator delete(*(void **)(a1 + 872));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 912);
  sub_19BFACB90(a1 + 256);
  v13 = *(void **)(a1 + 216);
  if (v13)
  {
    *(_QWORD *)(a1 + 224) = v13;
    operator delete(v13);
  }
  sub_19BFACC58((_QWORD *)(a1 + 160));
  *(_QWORD *)(a1 + 144) = &off_1E3D14078;
  v14 = *(_QWORD *)(a1 + 152);
  if (v14)
    MEMORY[0x1A1AD0CB8](v14, 0x1000C8077774924);
  *(_QWORD *)(a1 + 128) = &off_1E3D14078;
  v15 = *(_QWORD *)(a1 + 136);
  if (v15)
    MEMORY[0x1A1AD0CB8](v15, 0x1000C8077774924);
  sub_19BFACCEC(a1 + 80);
  sub_19BFACCEC(a1 + 64);
  v16 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v18 = (void **)(a1 + 32);
  sub_19BFACD44(&v18);
  v18 = (void **)(a1 + 8);
  sub_19BFACD44(&v18);
  return a1;
}

uint64_t sub_19BFACB20(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[1];
  while (v2 != v3)
    v2 = sub_19BFACCEC(v2 - 16);
  a1[2] = v3;
  v5 = a1[4];
  for (i = a1[5]; i != v5; i = sub_19BFACCEC(i - 16))
    ;
  a1[5] = v5;
  a1[28] = a1[27];
  v6 = sub_19BFB6DF0();
  result = sub_19BFB198C(v6, a1[33]);
  a1[33] = 0;
  return result;
}

uint64_t sub_19BFACB90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E3D13FD0;
  v2 = sub_19BFB6DF0();
  sub_19BFB198C(v2, *(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 56) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 56 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 64) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 168);
  v5 = *(void **)(a1 + 16);
  if (v5)
  {
    *(_QWORD *)(a1 + 24) = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_19BFACC58(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_1E3D142D8;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x1A1AD0CB8](v2[v5], 0x1070C802D7A0B02);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19BFACCEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_19BFACD44(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_19BFACCEC(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_19BFACDB4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D14078;
  v2 = a1[1];
  if (v2)
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  return a1;
}

void sub_19BFACDFC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D14078;
  v1 = a1[1];
  if (v1)
    MEMORY[0x1A1AD0CB8](v1, 0x1000C8077774924);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19BFACE58(_QWORD *a1)
{
  sub_19BFACC58(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19BFACE80(uint64_t a1)
{
  sub_19BFACB90(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFACEA4(_QWORD *a1)
{
  *a1 = &off_1E3D140D8;
  a1[1] = 0;
  sub_19BFACF10((uint64_t)a1, "");
  return a1;
}

void sub_19BFACEDC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &off_1E3D14078;
  v3 = v1[1];
  if (v3)
    MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFACF10(uint64_t a1, char *__s)
{
  char *v4;
  uint64_t result;

  strlen(__s);
  v4 = (char *)operator new[]();
  strcpy(v4, __s);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = MEMORY[0x1A1AD0CB8](result, 0x1000C8077774924);
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

_QWORD *sub_19BFACF84(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D14078;
  v2 = a1[1];
  if (v2)
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  return a1;
}

void sub_19BFACFCC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D14078;
  v1 = a1[1];
  if (v1)
    MEMORY[0x1A1AD0CB8](v1, 0x1000C8077774924);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19BFAD024(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D12A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19BFAD034(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D12A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFAD064(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_19BFAD074(const void *a1, size_t a2, const void *a3, size_t a4, int a5, int a6)
{
  uint64_t result;

  result = sub_19BFADCF4(a1, a2, "ko", 2uLL);
  if ((_DWORD)result)
  {
    if (sub_19BFADCF4(a3, a4, "en", 2uLL))
      return a5 & ~a6;
    else
      return 0;
  }
  return result;
}

_BYTE *sub_19BFAD0DC(_BYTE *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _BYTE *v4;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  _BYTE *v26;
  _QWORD v27[4];
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v24 = a2;
  if (*((_QWORD *)result + 10))
  {
    v4 = result;
    if (result[105])
    {
      if ((char)result[1351] < 0)
      {
        v7 = (_BYTE *)*((_QWORD *)result + 166);
        v8 = *((_QWORD *)result + 167);
      }
      else
      {
        v7 = result + 1328;
        v8 = result[1351];
      }
      if (v8 == 5)
      {
        v9 = bswap32(*(_DWORD *)v7);
        if (v9 == 1701732181)
          v10 = v7[4] - 83;
        else
          v10 = v9 < 0x656E5F55 ? -1 : 1;
        v11 = v10 == 0;
      }
      else
      {
        v11 = 0;
      }
      v12 = *(_QWORD *)(*((_QWORD *)result + 27) + 16 * (v11 + *((_QWORD *)result + 12)));
      v22 = *(_QWORD *)(a2 + 104);
      v23 = v12;
      v21 = 0;
      if (a4)
      {
        for (i = 0; i < a4; v21 = i)
        {
          v14 = v22;
          result = operator new(0x38uLL);
          *(_QWORD *)result = &off_1E3D128F0;
          *((_QWORD *)result + 1) = &v24;
          *((_QWORD *)result + 2) = v4;
          *((_QWORD *)result + 3) = &v23;
          *((_QWORD *)result + 4) = &v22;
          *((_QWORD *)result + 5) = &v21;
          *((_QWORD *)result + 6) = a3;
          v26 = result;
          v15 = *(_QWORD *)(v14 + 24 * i + 16);
          if (!v15)
          {
LABEL_24:
            v20 = 5;
LABEL_26:
            result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v20))();
            goto LABEL_27;
          }
          v27[0] = MEMORY[0x1E0C809B0];
          v27[1] = 1174405120;
          v27[2] = sub_19BFEF2AC;
          v27[3] = &unk_1E3D15FA8;
          v16 = sub_19BFADABC((uint64_t)result);
          v29 = v17;
          (*(void (**)(uint64_t, _QWORD *, __n128))(*(_QWORD *)(v15 + 16) + 48))(v15 + 16, v27, v16);
          v18 = v29;
          if (v29 == v28)
          {
            v18 = v28;
            v19 = 4;
          }
          else
          {
            if (!v29)
              goto LABEL_22;
            v19 = 5;
          }
          (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_22:
          result = v26;
          if (v26 == v25)
          {
            result = v25;
            v20 = 4;
            goto LABEL_26;
          }
          if (v26)
            goto LABEL_24;
LABEL_27:
          i = v21 + 1;
        }
      }
    }
  }
  return result;
}

void sub_19BFAD300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24)
{
  _QWORD *v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  if (a24 == v24)
  {
    v26 = 4;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v26 = 5;
    v24 = a24;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v26))(v24);
LABEL_6:
  v27 = a16;
  if (a16 == &a13)
  {
    v28 = 4;
    v27 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_11;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFAD37C(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v24 = a3;
  v25 = a2;
  v22 = a5;
  v23 = a4;
  v21 = a6;
  v20 = a8;
  v19 = *(_DWORD *)(a8 + 52);
  v9 = *(_QWORD *)(a2 + 104);
  v17 = 0;
  v18 = v9;
  if (a7)
  {
    v11 = result;
    v12 = 0;
    while (1)
    {
      v13 = v20;
      v14 = v18;
      v15 = operator new(0x60uLL);
      *v15 = &off_1E3D12840;
      v15[1] = &v25;
      v15[2] = &v20;
      v15[3] = &v21;
      v15[4] = &v18;
      v15[5] = &v17;
      v15[6] = &v22;
      v15[7] = &v23;
      v15[8] = &v24;
      v15[9] = &v19;
      v15[10] = a9;
      v15[11] = v11;
      v27 = v15;
      (*(void (**)(uint64_t, unint64_t, _BYTE *))(*(_QWORD *)v13 + 144))(v13, v14 + 24 * v12, v26);
      result = v27;
      if (v27 == v26)
        break;
      if (v27)
      {
        v16 = 5;
LABEL_7:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
      }
      v12 = v17 + 1;
      v17 = v12;
      if (v12 >= a7)
        return result;
    }
    result = v26;
    v16 = 4;
    goto LABEL_7;
  }
  return result;
}

void sub_19BFAD4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19BFAD520(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_19BFAD554(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, __int16 a6, uint64_t a7)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v23;

  v8 = (uint64_t *)(*(_QWORD *)(a1 + 216) + 16 * a3);
  v9 = v8[1];
  if (!v9)
    return *(_QWORD *)a7;
  v14 = *v8;
  v15 = a6 - a5;
  v23 = 5000 * (unsigned __int16)(a6 - a5);
  v16 = a6 - a4;
  do
  {
    v17 = sub_19BFAC3A8(*(_QWORD **)(a2 + 16));
    *(_OWORD *)(v17 + 96) = 0u;
    *(_OWORD *)(v17 + 112) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    *(_OWORD *)(v17 + 80) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    v18 = *(_DWORD **)(a1 + 56);
    HIDWORD(v19) = *(_DWORD *)v14;
    LODWORD(v19) = *(_DWORD *)v14;
    *(_DWORD *)(v17 + 100) = v19 >> 16;
    *(_DWORD *)(v17 + 64) = *(_DWORD *)(v14 + 8) + (v18[13] << 28);
    v20 = *(__int16 *)(v14 + 6);
    *(_DWORD *)(v17 + 76) = v20;
    *(_DWORD *)(v17 + 80) = v20;
    v21 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v18 + 152))(v18, v14);
    *(_QWORD *)(v17 + 48) = a5;
    *(_QWORD *)(v17 + 56) = v21;
    *(_WORD *)(v17 + 96) = v15;
    if (!a3)
      *(_DWORD *)(v17 + 80) += v23;
    v14 += 12;
    *(_WORD *)(v17 + 98) = v16;
    *(_QWORD *)(v17 + 24) = *(_QWORD *)a7;
    *(_BYTE *)(v17 + 124) = 1;
    *(_DWORD *)(v17 + 72) = 0;
    *(_BYTE *)(v17 + 123) = *(_BYTE *)(*(_QWORD *)(a1 + 56) + 656);
    *(_QWORD *)a7 = v17;
    --v9;
  }
  while (v9);
  return v17;
}

void sub_19BFAD68C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFAD6A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_1E3D12840;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19BFAD700(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_1E3D12840;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

int32x2_t sub_19BFAD748(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v3;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  int v10;
  int32x2_t result;
  int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int16 v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  __int16 v24;
  char v25;
  uint64_t *v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int32x2_t v32;

  v3 = *a2;
  if ((*(_WORD *)(*a2 + 4) & 0x40) == 0)
  {
    v5 = *a3;
    v6 = *(_QWORD *)(a1 + 88);
    v7 = sub_19BFAC3A8(*(_QWORD **)(**(_QWORD **)(a1 + 8) + 16));
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 112) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    v8 = **(_DWORD ***)(a1 + 16);
    HIDWORD(v9) = *(_DWORD *)v3;
    LODWORD(v9) = *(_DWORD *)v3;
    *(_DWORD *)(v7 + 100) = v9 >> 16;
    *(_DWORD *)(v7 + 64) = *(_DWORD *)(v3 + 8) + (v8[13] << 28);
    v10 = *(__int16 *)(v3 + 6);
    *(_DWORD *)(v7 + 76) = v10;
    *(_DWORD *)(v7 + 80) = v10;
    *(_QWORD *)(v7 + 56) = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v8 + 152))(v8, v3);
    if (v5)
      sub_19BFADA58((const void **)(v7 + 104), v5);
    v12 = *(int **)(a1 + 24);
    if ((*v12 & 2) != 0)
    {
      if ((*v12 & 0x10) != 0)
        v19 = *(_WORD *)(**(_QWORD **)(a1 + 32) + 24 * **(_QWORD **)(a1 + 40) + 12);
      else
        v19 = **(_WORD **)(a1 + 48);
      *(_WORD *)(v7 + 96) = v19;
      v18 = **(_QWORD **)(a1 + 56);
      *(_WORD *)(v7 + 98) = v18 - **(_DWORD **)(a1 + 64) + **(_DWORD **)(a1 + 48);
      v13 = *(uint64_t **)(a1 + 32);
      v14 = *v13;
      v15 = **(_QWORD **)(a1 + 40);
    }
    else
    {
      v13 = *(uint64_t **)(a1 + 32);
      v14 = *v13;
      v15 = **(_QWORD **)(a1 + 40);
      v16 = *(unsigned __int16 *)(*v13 + 24 * v15 + 12);
      *(_WORD *)(v7 + 96) = v16;
      v17 = **(_QWORD **)(a1 + 48);
      if (v17 < v16)
      {
        *(_WORD *)(v7 + 96) = v17;
        LOWORD(v16) = v17;
      }
      v18 = **(_QWORD **)(a1 + 56);
      *(_WORD *)(v7 + 98) = v16 + v18 - **(_WORD **)(a1 + 64);
    }
    v20 = *(int **)(a1 + 72);
    if (*v20 == 2)
      v21 = 0;
    else
      v21 = *(_DWORD *)(v14 + 24 * v15 + 8) + (*v20 << 28);
    v22 = *(unsigned __int8 *)(v14 + 24 * v15);
    *(_DWORD *)(v7 + 72) = v21;
    *(_BYTE *)(v7 + 123) = *(_BYTE *)(**(_QWORD **)(a1 + 16) + 656);
    *(_QWORD *)(v7 + 48) = v18;
    v23 = *v20;
    v24 = *(_WORD *)(v3 + 4);
    if (v23 == 7)
    {
      v25 = 9;
    }
    else if ((v24 & 2) != 0)
    {
      v25 = 5;
    }
    else if ((v24 & 3) == 0 || v23 == 6)
    {
      v25 = 6;
    }
    else
    {
      v25 = 0;
    }
    *(_BYTE *)(v7 + 124) = v25;
    v27 = *(uint64_t **)(a1 + 80);
    *(_QWORD *)(v7 + 24) = *v27;
    *(_BYTE *)(v7 + 122) = v22;
    if (v23 == 8)
      v24 |= 0x10u;
    *(_WORD *)(v7 + 120) = v24;
    v28 = *v12;
    if ((v28 & 0x80) == 0)
    {
      if ((v28 & 0x1580) == 0)
        goto LABEL_36;
      goto LABEL_33;
    }
    if ((v28 & 0x80000) == 0 || !v22 || (v24 & 2) != 0)
    {
LABEL_33:
      if (*(_BYTE *)(*v13 + 24 * v15))
      {
        v29 = (int)(float)(0.0 - (float)(*(float *)(*v13 + 24 * v15 + 4) * (float)*(int *)(v6 + 1280)));
        if ((v28 & 8) != 0)
        {
LABEL_37:
          v30 = *(unsigned __int16 *)(*v13 + 24 * v15 + 14);
          if (v30 >= 2)
            v31 = 1000 * (v30 >> 1) + 1000;
          else
            v31 = 0;
          v29 += v31;
        }
LABEL_41:
        v32.i32[0] = *(_DWORD *)(v7 + 80) + v29;
        v32.i32[1] = v29;
        result = vmin_s32(v32, (int32x2_t)0x7F0000007FLL);
        *(int32x2_t *)(v7 + 80) = result;
        *v27 = v7;
        return result;
      }
LABEL_36:
      v29 = 0;
      if ((v28 & 8) != 0)
        goto LABEL_37;
      goto LABEL_41;
    }
  }
  return result;
}

uint64_t sub_19BFADA10(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11770))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFADA4C()
{
  return &unk_1E3D11770;
}

void sub_19BFADA58(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_19BFAC558(a1, cf);
  }
}

void sub_19BFADAA8()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFADABC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E3D128F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_19BFADB04(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3D128F0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_19BFADB34(uint64_t a1, const void **a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  double result;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = sub_19BFAC3A8(*(_QWORD **)(**(_QWORD **)(a1 + 8) + 16));
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  v6 = *(_DWORD **)(v4 + 56);
  v7 = **(_QWORD **)(a1 + 24);
  HIDWORD(v8) = *(_DWORD *)v7;
  LODWORD(v8) = *(_DWORD *)v7;
  *(_DWORD *)(v5 + 100) = v8 >> 16;
  *(_DWORD *)(v5 + 64) = *(_DWORD *)(v7 + 8) + (v6[13] << 28);
  v9 = *(__int16 *)(v7 + 6);
  *(_DWORD *)(v5 + 76) = v9;
  *(_DWORD *)(v5 + 80) = v9;
  *(_QWORD *)(v5 + 56) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 152))(v6);
  if (v3)
    sub_19BFADA58((const void **)(v5 + 104), v3);
  v11 = *(_QWORD *)(a1 + 24);
  v10 = *(uint64_t **)(a1 + 32);
  v12 = *(uint64_t **)(a1 + 48);
  v13 = **(_QWORD **)(a1 + 40);
  v14 = *(_WORD *)(*v10 + 24 * v13 + 12);
  *(_WORD *)(v5 + 96) = v14;
  *(_WORD *)(v5 + 98) = v14;
  *(_DWORD *)(v5 + 72) = 0;
  *(_BYTE *)(v5 + 123) = *(_BYTE *)(*(_QWORD *)(v4 + 56) + 656);
  *(_QWORD *)(v5 + 24) = *v12;
  v15 = *v10;
  v16 = *(unsigned __int8 *)(v15 + 24 * v13);
  *(_BYTE *)(v5 + 124) = 0;
  *(_BYTE *)(v5 + 122) = v16;
  *(_WORD *)(v5 + 120) = *(_WORD *)(*(_QWORD *)v11 + 4);
  v17 = *(_DWORD *)(v5 + 80);
  if (v16)
    v17 -= (int)(float)(*(float *)(v15 + 24 * v13 + 4) * (float)*(int *)(v4 + 1280));
  v18 = *(unsigned __int16 *)(v15 + 24 * v13 + 14);
  if (*(_WORD *)(v15 + 24 * v13 + 14))
  {
    if (v18 == 1)
      v19 = 0;
    else
      v19 = 1000 * (v18 >> 1) + 1000;
    v17 += v19;
  }
  if (v17 >= 0x7FFF)
    v17 = 0x7FFF;
  *(_DWORD *)(v5 + 80) = v17;
  result = *(float *)(v15 + 24 * v13 + 4);
  *(double *)(v5 + 88) = result;
  *v12 = v5;
  return result;
}

uint64_t sub_19BFADCAC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11790))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFADCE8()
{
  return &unk_1E3D11790;
}

BOOL sub_19BFADCF4(const void *a1, size_t a2, void *__s2, size_t __n)
{
  return __n <= a2 && memcmp(a1, __s2, __n) == 0;
}

void sub_19BFADD28(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_19BFADD78(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E3D0FF68, MEMORY[0x1E0DE42E0]);
}

void sub_19BFADD64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19BFADD78(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

uint64_t sub_19BFADD9C(uint64_t a1, uint64_t a2, int a3, unsigned __int16 *a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v7;
  uint64_t *v9;
  uint64_t *v10;
  int v13;
  size_t v14;
  size_t v15;
  const void *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  __int16 v29;
  unint64_t v30;
  int v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned __int16 v34;
  uint64_t v35;
  uint64_t result;
  unsigned __int8 *v37;
  char *v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int16 v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unsigned __int16 v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  void *v55;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v62 = 0;
  v10 = *(uint64_t **)(a1 + 8);
  v9 = *(uint64_t **)(a1 + 16);
  if (v10 != v9)
  {
    v60 = (const void *)(a1 + 1328);
    v61 = a1 + 1304;
    v54 = a3;
    v55 = *(void **)(a6 + 104);
    v53 = (a7 >> 2) & 5 | (a7 >> 4) & 8 | (a7 >> 15) & 0x10;
    if (a3 >= 0)
      v13 = a3;
    else
      v13 = a3 + 1;
    v52 = v13 >> 1;
    while (1)
    {
      if (*(char *)(a1 + 1327) < 0)
      {
        v7 = *(_QWORD *)(a1 + 1304);
        v14 = *(_QWORD *)(a1 + 1312);
      }
      else
      {
        v14 = *(unsigned __int8 *)(a1 + 1327);
        v7 = v61;
      }
      if (*(char *)(a1 + 1351) < 0)
      {
        v16 = *(const void **)(a1 + 1328);
        v15 = *(_QWORD *)(a1 + 1336);
      }
      else
      {
        v15 = *(unsigned __int8 *)(a1 + 1351);
        v16 = v60;
      }
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v10 + 160))(*v10);
      if ((sub_19BFAD074((const void *)v7, v14, v16, v15, v17, a3 == 0) & 1) == 0)
      {
        v18 = *(_DWORD *)(*v10 + 52);
        if (((a7 & 0x40000) != 0 || v18 != 1) && ((a7 & 0x100000) == 0 || (v18 & 0xFFFFFFFD) != 1))
          break;
      }
LABEL_33:
      v10 += 2;
      if (v10 == v9)
        goto LABEL_34;
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    if ((((unint64_t)(2 * v19 - v54) > 1) & ((a7 >> 3) & 1 | (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v10 + 160))(*v10))) != 0)
      v20 = 2;
    else
      v20 = 0;
    v7 = v53 | v20;
    bzero(v55, 0x3000uLL);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, void *, uint64_t))(*(_QWORD *)*v10 + 88))(*v10, v7, a2, v52, v55, 512);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v10 + 160))(*v10))
    {
      sub_19BFAD0DC((_BYTE *)a1, a6, (uint64_t)&v62, v21);
      goto LABEL_30;
    }
    v22 = *v10;
    v68 = a6;
    v67 = a7;
    v66 = v22;
    v65 = *(_DWORD *)(v22 + 52);
    v23 = *(_QWORD *)(a6 + 104);
    v63 = 0;
    v64 = v23;
    if (!v21)
    {
LABEL_30:
      if (v21)
      {
        v7 = 16;
        do
        {
          sub_19BFAD520((const void **)(*(_QWORD *)(a6 + 104) + v7), 0);
          v7 += 24;
          --v21;
        }
        while (v21);
      }
      goto LABEL_33;
    }
    v24 = 0;
    while (1)
    {
      v7 = v66;
      v25 = v64;
      v26 = (uint64_t *)operator new(0x48uLL);
      *v26 = (uint64_t)&off_1E3D12898;
      v26[1] = (uint64_t)&v68;
      v26[2] = (uint64_t)&v66;
      v26[3] = (uint64_t)&v67;
      v26[4] = (uint64_t)&v64;
      v26[5] = (uint64_t)&v63;
      v26[6] = (uint64_t)&v65;
      v26[7] = (uint64_t)&v62;
      v26[8] = a1;
      v72 = v26;
      (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)v7 + 144))(v7, v25 + 24 * v24, &v69);
      v27 = v72;
      if (v72 == &v69)
        break;
      if (v72)
      {
        v28 = 5;
LABEL_28:
        (*(void (**)(void))(*v27 + 8 * v28))();
      }
      v24 = v63 + 1;
      v63 = v24;
      if (v24 >= v21)
        goto LABEL_30;
    }
    v27 = &v69;
    v28 = 4;
    goto LABEL_28;
  }
LABEL_34:
  v29 = (__int16)a4;
  if (!a4)
    return v62;
  v30 = a5;
  if ((unint64_t)a4 >= a5)
  {
    v35 = 0;
    v32 = a4;
    goto LABEL_62;
  }
  v31 = *(_DWORD *)(a1 + 248);
  v32 = a4;
  while (1)
  {
    v33 = a5 - (_QWORD)v32;
    if ((*(_DWORD *)(a1 + 304) - 4) <= 2)
      break;
    v34 = *(unsigned __int8 *)v32;
    if ((*(char *)v32 & 0x80000000) == 0)
      goto LABEL_41;
    if (v33 >= 2 && (v34 & 0xE0) == 0xC0)
    {
      v35 = 2;
      v34 = *((_BYTE *)v32 + 1) & 0x3F | ((v34 & 0x1F) << 6);
    }
    else
    {
      if (v33 < 3)
        goto LABEL_60;
      if ((v34 & 0xF0) == 0xE0)
      {
        v34 = (v34 << 12) | ((*((_BYTE *)v32 + 1) & 0x3F) << 6) | v32[1] & 0x3F;
        v35 = 3;
      }
      else
      {
        if (v33 < 4)
          goto LABEL_60;
        if ((v34 & 0xF8) == 0xF0)
        {
          v34 = 0;
          v35 = 4;
        }
        else
        {
          if (v33 < 5)
            goto LABEL_60;
          if ((v34 & 0xFC) == 0xF8)
          {
            v34 = 0;
            v35 = 5;
          }
          else
          {
            if (v33 < 6 || (v34 & 0xFE) != 0xFC)
            {
LABEL_60:
              v34 = 0;
LABEL_41:
              v35 = 1;
              goto LABEL_45;
            }
            v34 = 0;
            v35 = 6;
          }
        }
      }
    }
LABEL_45:
    LODWORD(v7) = *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * v34);
    if ((v31 & v7 & 0x3FFFF) != 0)
    {
      v32 = (unsigned __int16 *)((char *)v32 + v35);
      v31 = *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * v34);
      if ((unint64_t)v32 < a5)
        continue;
    }
    goto LABEL_62;
  }
  if (v33 >= 2)
  {
    v34 = *v32;
    v35 = 2;
    goto LABEL_45;
  }
  v35 = 0;
  LODWORD(v7) = **(_DWORD **)(a1 + 296);
  if ((v31 & v7 & 0x3FFFF) != 0)
    v32 = 0;
LABEL_62:
  if (*(_BYTE *)(a1 + 105))
  {
    sub_19C02C568((uint64_t)&v69, v32, (a5 - (unint64_t)v32) >> 1);
    if (v71)
    {
      sub_19BFAD554(a1, a6, *(_QWORD *)(a1 + 96) + v69, (__int16)a4, (uint64_t)v32, (_WORD)v32 + 2 * v70, (uint64_t)&v62);
      v29 = (__int16)a4;
      v30 = a5;
    }
  }
  result = v62;
  if (!v62 || (v7 & 0x80000000) != 0)
  {
    v37 = (unsigned __int8 *)v32 + v35;
    if ((unint64_t)v32 + v35 > v30)
      return sub_19BFAD554(a1, a6, (v7 >> 18), v29, (uint64_t)v32, (unsigned __int16)v32 + (unsigned __int16)v35, (uint64_t)&v62);
    if ((v7 & 0x40000000) == 0)
    {
      v38 = 0;
      goto LABEL_104;
    }
    v39 = 0;
    if ((unint64_t)v37 >= v30)
    {
      v38 = (char *)v32 + v35;
      goto LABEL_101;
    }
    v38 = (char *)v32 + v35;
    v40 = v7;
    v41 = a5;
    while (2)
    {
      v42 = v41 - (_QWORD)v38;
      if ((*(_DWORD *)(a1 + 304) - 4) > 2)
      {
        v43 = *v38;
        if (*v38 < 0)
        {
          if (v42 >= 2 && (v43 & 0xE0) == 0xC0)
          {
            v44 = 2;
            v43 = v38[1] & 0x3F | ((v43 & 0x1F) << 6);
            goto LABEL_87;
          }
          if (v42 >= 3)
          {
            if ((v43 & 0xF0) == 0xE0)
            {
              v43 = (v43 << 12) | ((v38[1] & 0x3F) << 6) | v38[2] & 0x3F;
              v44 = 3;
              goto LABEL_87;
            }
            if (v42 >= 4)
            {
              if ((v43 & 0xF8) == 0xF0)
              {
                v43 = 0;
                v44 = 4;
                goto LABEL_87;
              }
              if (v42 >= 5)
              {
                if ((v43 & 0xFC) == 0xF8)
                {
                  v43 = 0;
                  v44 = 5;
                  goto LABEL_87;
                }
                if (v42 >= 6 && (v43 & 0xFE) == 0xFC)
                {
                  v43 = 0;
                  v44 = 6;
                  goto LABEL_87;
                }
              }
            }
          }
          v43 = 0;
        }
        v44 = 1;
LABEL_87:
        v45 = *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * v43);
        if ((v40 & v45 & 0x3FFFF) == 0)
          goto LABEL_102;
        v38 += v44;
        ++v39;
        v40 = v45;
        v41 = a5;
        if ((unint64_t)v38 >= a5)
          goto LABEL_102;
        continue;
      }
      break;
    }
    if (v42 >= 2)
    {
      v43 = *(_WORD *)v38;
      v44 = 2;
      goto LABEL_87;
    }
    if ((v40 & **(_DWORD **)(a1 + 296) & 0x3FFFF) == 0)
    {
LABEL_101:
      if (v38)
      {
LABEL_102:
        if (v39 <= *(_QWORD *)(a1 + 792))
          sub_19BFAD554(a1, a6, (v7 >> 18), (__int16)a4, (uint64_t)v32, (__int16)v38, (uint64_t)&v62);
LABEL_104:
        v46 = (v7 >> 26) & 0xF;
        if ((_DWORD)v46)
        {
          v47 = 1;
          while (1)
          {
            v48 = (unsigned __int8 *)v38;
            if (v37 != (unsigned __int8 *)v38)
              break;
LABEL_118:
            if (v47 < v46)
            {
              ++v47;
              v37 = v48;
              if ((unint64_t)v48 <= a5)
                continue;
            }
            goto LABEL_135;
          }
          sub_19BFAD554(a1, a6, (v7 >> 18), (__int16)a4, (uint64_t)v32, (__int16)v37, (uint64_t)&v62);
          v49 = a5 - (_QWORD)v37;
          if ((*(_DWORD *)(a1 + 304) - 4) <= 2)
          {
            if (v49 < 2)
            {
              v51 = 0;
              v50 = 0;
            }
            else
            {
              v50 = *(_WORD *)v37;
              v51 = 2;
            }
            goto LABEL_116;
          }
          v50 = *v37;
          if ((char)*v37 < 0)
          {
            if (v49 < 2 || (v50 & 0xE0) != 0xC0)
            {
              if (v49 >= 3)
              {
                if ((v50 & 0xF0) == 0xE0)
                {
                  v50 = (v50 << 12) | ((v37[1] & 0x3F) << 6) | v37[2] & 0x3F;
                  v51 = 3;
                  goto LABEL_116;
                }
                if (v49 >= 4)
                {
                  if ((v50 & 0xF8) == 0xF0)
                  {
                    v50 = 0;
                    v51 = 4;
                    goto LABEL_116;
                  }
                  if (v49 >= 5)
                  {
                    if ((v50 & 0xFC) == 0xF8)
                    {
                      v50 = 0;
                      v51 = 5;
                      goto LABEL_116;
                    }
                    if (v49 >= 6 && (v50 & 0xFE) == 0xFC)
                    {
                      v50 = 0;
                      v51 = 6;
                      goto LABEL_116;
                    }
                  }
                }
              }
              v50 = 0;
              goto LABEL_111;
            }
            v51 = 2;
            v50 = v37[1] & 0x3F | ((v50 & 0x1F) << 6);
          }
          else
          {
LABEL_111:
            v51 = 1;
          }
LABEL_116:
          if ((v7 & 0x3FFFF & *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * v50)) == 0)
            goto LABEL_134;
          v48 = &v37[v51];
          goto LABEL_118;
        }
LABEL_134:
        LOWORD(v48) = (_WORD)v37;
LABEL_135:
        result = v62;
        if (!v62)
        {
          sub_19BFAD554(a1, a6, (v7 >> 18), (__int16)a4, (uint64_t)v32, (__int16)v48, (uint64_t)&v62);
          return v62;
        }
      }
    }
  }
  return result;
}

void sub_19BFAE61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v29;
  uint64_t v30;

  v29 = a28;
  if (a28 == &a25)
  {
    v30 = 4;
    v29 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19BFAE664()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFAE678(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E3D12898;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_19BFAE6C8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E3D12898;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

int32x2_t sub_19BFAE700(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  int v10;
  int32x2_t result;
  int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  __int16 v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  __int16 v22;
  char v23;
  uint64_t *v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int32x2_t v31;
  double v32;

  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 64);
  v7 = sub_19BFAC3A8(*(_QWORD **)(**(_QWORD **)(a1 + 8) + 16));
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  v8 = **(_DWORD ***)(a1 + 16);
  HIDWORD(v9) = *(_DWORD *)v4;
  LODWORD(v9) = *(_DWORD *)v4;
  *(_DWORD *)(v7 + 100) = v9 >> 16;
  *(_DWORD *)(v7 + 64) = *(_DWORD *)(v4 + 8) + (v8[13] << 28);
  v10 = *(__int16 *)(v4 + 6);
  *(_DWORD *)(v7 + 76) = v10;
  *(_DWORD *)(v7 + 80) = v10;
  *(_QWORD *)(v7 + 56) = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v8 + 152))(v8, v4);
  if (v5)
    sub_19BFADA58((const void **)(v7 + 104), v5);
  v12 = *(int **)(a1 + 24);
  if ((*(_BYTE *)v12 & 2) == 0)
  {
    v13 = *(uint64_t **)(a1 + 32);
    v14 = *v13;
    v15 = **(_QWORD **)(a1 + 40);
    v16 = (unsigned __int8 *)(*v13 + 24 * v15);
    v17 = *((_WORD *)v16 + 6);
    *(_WORD *)(v7 + 96) = v17;
    *(_WORD *)(v7 + 98) = v17;
    v18 = *(int **)(a1 + 48);
    if (*v18 == 2)
      v19 = 0;
    else
      v19 = *(_DWORD *)(v14 + 24 * v15 + 8) + (*v18 << 28);
    v20 = *v16;
    *(_DWORD *)(v7 + 72) = v19;
    *(_BYTE *)(v7 + 123) = *(_BYTE *)(**(_QWORD **)(a1 + 16) + 656);
    v21 = *v18;
    v22 = *(_WORD *)(v4 + 4);
    if (*v18 == 7)
    {
      v23 = 9;
    }
    else if ((v22 & 2) != 0)
    {
      v23 = 5;
    }
    else if ((v22 & 3) == 0 || v21 == 6)
    {
      v23 = 6;
    }
    else
    {
      v23 = 0;
    }
    *(_BYTE *)(v7 + 124) = v23;
    v25 = *(uint64_t **)(a1 + 56);
    *(_QWORD *)(v7 + 24) = *v25;
    *(_BYTE *)(v7 + 122) = v20;
    if (v21 == 8)
      v22 |= 0x10u;
    *(_WORD *)(v7 + 120) = v22;
    v26 = *v12;
    if ((v26 & 0x80) != 0)
    {
      if ((v26 & 0x80000) != 0 && v20 && (v22 & 2) == 0)
        return result;
    }
    else if ((v26 & 0x1580) == 0)
    {
      v27 = 0;
      v28 = *v13;
LABEL_27:
      if ((v26 & 8) != 0)
      {
        v29 = *(unsigned __int16 *)(v28 + 24 * v15 + 14);
        if (v29 >= 2)
          v30 = 1000 * (v29 >> 1) + 1000;
        else
          v30 = 0;
        v27 += v30;
      }
      v31.i32[0] = *(_DWORD *)(v7 + 80) + v27;
      v31.i32[1] = v27;
      result = vmin_s32(v31, (int32x2_t)0x7F0000007FLL);
      v32 = *(float *)(v28 + 24 * v15 + 4);
      *(int32x2_t *)(v7 + 80) = result;
      *(double *)(v7 + 88) = v32;
      *v25 = v7;
      return result;
    }
    v28 = *v13;
    v27 = *(unsigned __int8 *)(v28 + 24 * v15);
    if (*(_BYTE *)(v28 + 24 * v15))
      v27 = (int)(float)(0.0 - (float)(*(float *)(v28 + 24 * v15 + 4) * (float)*(int *)(v6 + 1280)));
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_19BFAE934(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11780))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFAE970()
{
  return &unk_1E3D11780;
}

uint64_t sub_19BFAE97C(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5)
{
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  _BOOL4 v28;
  int v29;
  int v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;

  v36 = 0;
  if ((unint64_t)&a3[-a2] <= 0xFFFE)
    v9 = a3;
  else
    v9 = (unsigned __int8 *)(a2 + 0xFFFF);
  v10 = (unsigned __int8 *)a2;
  if ((unint64_t)v9 > a2)
  {
    v11 = *(_DWORD *)(a1 + 248);
    v10 = (unsigned __int8 *)a2;
    while (1)
    {
      v12 = v9 - v10;
      if ((*(_DWORD *)(a1 + 304) - 4) > 2)
      {
        v13 = *v10;
        if (((char)*v10 & 0x80000000) == 0)
          goto LABEL_10;
        if (v12 >= 2 && (v13 & 0xE0) == 0xC0)
        {
          v14 = 2;
          v13 = v10[1] & 0x3F | ((v13 & 0x1F) << 6);
        }
        else
        {
          if (v12 < 3)
            goto LABEL_29;
          if ((v13 & 0xF0) == 0xE0)
          {
            v13 = (v13 << 12) | ((v10[1] & 0x3F) << 6) | v10[2] & 0x3F;
            v14 = 3;
          }
          else
          {
            if (v12 < 4)
              goto LABEL_29;
            if ((v13 & 0xF8) == 0xF0)
            {
              v13 = 0;
              v14 = 4;
            }
            else
            {
              if (v12 < 5)
                goto LABEL_29;
              if ((v13 & 0xFC) == 0xF8)
              {
                v13 = 0;
                v14 = 5;
              }
              else
              {
                if (v12 < 6 || (v13 & 0xFE) != 0xFC)
                {
LABEL_29:
                  v13 = 0;
LABEL_10:
                  v14 = 1;
                  goto LABEL_26;
                }
                v13 = 0;
                v14 = 6;
              }
            }
          }
        }
      }
      else
      {
        if (v12 < 2)
        {
          if ((v11 & **(_DWORD **)(a1 + 296) & 0x3FFFF) == 0)
            break;
          return 0;
        }
        v13 = *(_WORD *)v10;
        v14 = 2;
      }
LABEL_26:
      v15 = *(_DWORD *)(*(_QWORD *)(a1 + 296) + 4 * v13);
      if ((v11 & v15 & 0x3FFFF) != 0)
      {
        v10 += v14;
        v11 = v15;
        if (v10 < v9)
          continue;
      }
      break;
    }
  }
  result = 0;
  if (v10 && v10 != v9)
  {
    v17 = *(uint64_t **)(a1 + 8);
    v18 = *(uint64_t **)(a1 + 16);
    if (v17 == v18)
      return 0;
    v19 = v9 - v10;
    v20 = (a5 >> 4) & 8;
    v21 = (a5 >> 15) & 0x10;
    v22 = v20 | (a5 >> 2) & 7 | v21 | 2;
    v23 = v20 | (a5 >> 2) & 4;
    v24 = v20 | (a5 >> 2) & 1 | v21 | 4;
    v25 = v23 | v21 | 1;
    v26 = a5 & 0x18;
    if ((a5 & 8) != 0)
      v25 = v22;
    v27 = v26 == 16;
    v28 = v26 != 16;
    if (v27)
      v25 = v24;
    v34 = v25;
    v35 = v19;
    v29 = v19 > 2 || v28;
    do
    {
      v30 = *(_DWORD *)(*v17 + 52);
      if (((a5 & 0x40000) != 0 || v30 != 1) && ((a5 & 0x100000) == 0 || (v30 & 0xFFFFFFFD) != 1))
      {
        v31 = *(void **)(a4 + 104);
        bzero(v31, 0x3000uLL);
        if (v29)
        {
          v32 = (*(uint64_t (**)(uint64_t, _QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD, _QWORD, void *, uint64_t))(*(_QWORD *)*v17 + 80))(*v17, v34, v10, v35, *(_QWORD *)(a1 + 1288), *(_QWORD *)(a1 + 1296), 0, v31, 512);
          sub_19BFAD37C((_QWORD *)a1, a4, a2, (uint64_t)v10, v35, a5, v32, *v17, (uint64_t)&v36);
          if (v32)
          {
            v33 = 16;
            do
            {
              sub_19BFAD520((const void **)(*(_QWORD *)(a4 + 104) + v33), 0);
              v33 += 24;
              --v32;
            }
            while (v32);
          }
        }
      }
      v17 += 2;
    }
    while (v17 != v18);
    return v36;
  }
  return result;
}

_QWORD *sub_19BFAEC9C(_QWORD *__dst, char *__src)
{
  unint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_WORD *)__src)
  {
    v4 = 0;
    do
      v5 = &__src[2 * v4++];
    while (*((_WORD *)v5 + 1));
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    if (v4 >= 0xB)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v4 | 3) != 0xB)
        v7 = v4 | 3;
      v6 = sub_19BFAED5C(v7 + 1);
      __dst[1] = v4;
      __dst[2] = v8 | 0x8000000000000000;
      *__dst = v6;
    }
    else
    {
      *((_BYTE *)__dst + 23) = v4;
      v6 = __dst;
      if (!v4)
        goto LABEL_9;
    }
    memmove(v6, __src, 2 * v4);
    goto LABEL_14;
  }
  v4 = 0;
  *((_BYTE *)__dst + 23) = 0;
LABEL_9:
  v6 = __dst;
LABEL_14:
  *((_WORD *)v6 + v4) = 0;
  return __dst;
}

void *sub_19BFAED5C(uint64_t a1)
{
  if (a1 < 0)
    sub_19BF8E6D0();
  return operator new(2 * a1);
}

uint64_t sub_19BFAED8C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void *sub_19BFAEDF0(unint64_t a1)
{
  if (a1 >> 60)
    sub_19BF8E6D0();
  return operator new(16 * a1);
}

uint64_t sub_19BFAEE24(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_19BFACCEC(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19BFAEE74(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFAEE98(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19BFAEEB0(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D114D0))
    return a1 + 24;
  else
    return 0;
}

BOOL sub_19BFAEEF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  char v5;
  const char *v6;
  uint64_t v7;
  void *p_dst;
  char v9;
  _QWORD *v10;
  _BOOL8 v11;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  std::string *v16;
  std::string::size_type size;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  const char *v26;
  BOOL v27;
  BOOL v28;
  _DWORD *v29;
  int *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  void **v38;
  uint64_t v39;
  char *v40;
  std::locale::__imp *v41;
  BOOL v42;
  std::locale::__imp *v43;
  std::locale::__imp *v44;
  uint64_t v45;
  std::locale::__imp *v46;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  std::locale::__imp *v50;
  std::locale::__imp *v51;
  unint64_t v52;
  std::locale::__imp *v53;
  std::locale::__imp *v54;
  std::locale::__imp *v55;
  _BOOL4 v56;
  unsigned __int16 *v57;
  int v58;
  int v59;
  BOOL v60;
  int v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  BOOL v65;
  int v66;
  _DWORD *v67;
  unsigned __int16 *v68;
  int v69;
  unsigned __int8 *v71;
  uint64_t v73;
  unsigned __int16 *v75;
  unsigned int *v76;
  int v77;
  int v78;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  int v84;
  _QWORD *v85;
  unsigned __int8 *v86;
  BOOL v88;
  int v89;
  __int128 v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  _OWORD *v94;
  _OWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  char *v109;
  int64x2_t v110;
  _OWORD *v111;
  _OWORD *v112;
  std::streambuf::char_type *v113;
  void **v114;
  uint64_t v115;
  _QWORD *v116;
  std::locale::__imp *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  __int128 v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  _OWORD *v126;
  _OWORD *v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  _QWORD *v139;
  unint64_t v140;
  _QWORD *v141;
  char *v142;
  int64x2_t v143;
  _OWORD *v144;
  _OWORD *v145;
  std::streambuf::char_type *v146;
  uint64_t v147;
  __n128 v148;
  __int128 v149;
  const char *v150;
  char *v151;
  int64_t v152;
  unsigned __int8 *v153;
  std::string *v154;
  std::strstream *v155;
  uint64_t v156;
  uint64_t v157;
  std::string *v158;
  unint64_t v159;
  int v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  int v165;
  int v166;
  unsigned __int8 *v167;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  unsigned __int8 *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count *v177;
  unint64_t *p_shared_owners;
  const char *v179;
  _QWORD *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  unint64_t *v191;
  unint64_t v192;
  char *v193;
  _QWORD *v194;
  unint64_t v195;
  _QWORD *v196;
  char *v197;
  int64x2_t v198;
  _OWORD *v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t *v213;
  uint64_t *v214;
  _QWORD *v215;
  uint64_t *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  char *v221;
  unint64_t v222;
  uint64_t *v223;
  _QWORD *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  unint64_t i;
  uint64_t v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  __n128 *v257;
  void *v258;
  char **v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t *v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  __n128 *v279;
  void *v280;
  double v281;
  uint64_t v282;
  std::locale::__imp *v283;
  int v284;
  _BOOL8 v285;
  uint64_t v286;
  uint64_t v287;
  int *v288;
  int *v289;
  int *v290;
  _QWORD *v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v296;
  char *v297;
  _QWORD *v298;
  void *v299;
  uint64_t v300;
  int *v301;
  unint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  _QWORD *v305;
  _QWORD *v306;
  _QWORD *v307;
  char *v308;
  std::strstreambuf_vtbl *v309;
  std::strstreambuf_vtbl *v310;
  uint64_t binp_high;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *v315;
  _QWORD *v316;
  char *v317;
  std::strstreambuf_vtbl *v318;
  std::strstreambuf_vtbl *v319;
  uint64_t locale;
  _QWORD *v321;
  _QWORD *v322;
  _QWORD *v323;
  _QWORD *v324;
  _QWORD *v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  _QWORD *v329;
  _QWORD *v330;
  _QWORD *v331;
  char *v332;
  std::strstreambuf_vtbl *v333;
  std::strstreambuf_vtbl *v334;
  uint64_t v335;
  _QWORD *v336;
  _QWORD *v337;
  _QWORD *v338;
  _QWORD *v339;
  _QWORD *v340;
  _QWORD *v341;
  char *v342;
  std::strstreambuf_vtbl *v343;
  std::strstreambuf_vtbl *v344;
  uint64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  _QWORD *v349;
  _QWORD *v350;
  _QWORD *v351;
  _QWORD *v352;
  size_t v353;
  _QWORD *v354;
  _QWORD *v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  _QWORD *v364;
  _QWORD *v365;
  _QWORD *v366;
  size_t v367;
  __int128 v368;
  __int128 v369;
  _QWORD *v370;
  __int128 v371;
  char *__src[2];
  char v373;
  void *v374[2];
  unsigned __int8 v375;
  void *v376[2];
  unsigned __int8 v377;
  void *__p;
  int64x2_t v379;
  uint64_t v380;
  _QWORD *v381;
  std::strstream __dst;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  std::string v409[341];
  uint64_t v410;

  v0 = (_QWORD *)MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  v410 = *MEMORY[0x1E0C80C00];
  sub_19BFACB20(v0);
  sub_19BFB1144(v376, v2, "dicdir");
  sub_19BFB1144(&__dst, v2, "dicdir");
  sub_19BF8E43C(&__p, "char.bin");
  sub_19BFB975C(v409, (uint64_t)&__dst, (uint64_t)&__p);
  if (v379.i8[15] < 0)
    operator delete(__p);
  if ((v409[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = v409;
  else
    v4 = (std::string *)v409[0].__r_.__value_.__r.__words[0];
  v5 = sub_19BFBCE30((uint64_t)(v3 + 32), (char *)v4);
  if (SHIBYTE(v409[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v409[0].__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__sb_.__binp_) & 0x80000000) == 0)
  {
    if ((v5 & 1) != 0)
      goto LABEL_10;
LABEL_26:
    if (setjmp((int *)v3 + 272) != 1)
    {
      std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(v3[100] - 24) + 800), 0);
      v303 = sub_19BF8E6F8(v3 + 100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tokenizer.cpp", 72);
      sub_19BF8E6F8(v303, (uint64_t)"(", 1);
      v304 = (_QWORD *)std::ostream::operator<<();
      v305 = sub_19BF8E6F8(v304, (uint64_t)") [", 3);
      v306 = sub_19BF8E6F8(v305, (uint64_t)"property_.open(param)", 21);
      v307 = sub_19BF8E6F8(v306, (uint64_t)"] ", 2);
      v308 = (char *)sub_19BFAA4D8((uint64_t)(v3 + 39));
      v309 = (std::strstreambuf_vtbl *)sub_19BF8E43C(&__dst, v308);
      if (SHIBYTE(__dst.__sb_.__binp_) >= 0)
        v310 = v309;
      else
        v310 = __dst.__sb_.__vftable;
      if (SHIBYTE(__dst.__sb_.__binp_) >= 0)
        binp_high = HIBYTE(__dst.__sb_.__binp_);
      else
        binp_high = (uint64_t)__dst.__sb_.__loc_.__locale_;
      sub_19BF8E6F8(v307, (uint64_t)v310, binp_high);
      if (SHIBYTE(__dst.__sb_.__binp_) < 0)
        operator delete(__dst.__sb_.__vftable);
      longjmp((int *)v3 + 272, 1);
    }
    goto LABEL_30;
  }
  operator delete(__dst.__sb_.__vftable);
  if ((v5 & 1) == 0)
    goto LABEL_26;
LABEL_10:
  *((_DWORD *)v3 + 320) = sub_19BFAA558(v2, "correction-penalty");
  if (sub_19BFB122C(v2, "open-mutable-dictionary"))
    v6 = "r+";
  else
    v6 = "r";
  v7 = v3[7];
  sub_19BF8E43C(v409, "unk.dic");
  sub_19BFB975C((std::string *)&__dst, (uint64_t)v376, (uint64_t)v409);
  if (SHIBYTE(__dst.__sb_.__binp_) >= 0)
    p_dst = &__dst;
  else
    p_dst = __dst.__sb_.__vftable;
  v9 = (*(uint64_t (**)(uint64_t, void *, const char *))(*(_QWORD *)v7 + 16))(v7, p_dst, v6);
  if (SHIBYTE(__dst.__sb_.__binp_) < 0)
    operator delete(__dst.__sb_.__vftable);
  if ((SHIBYTE(v409[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v9 & 1) != 0)
      goto LABEL_20;
    goto LABEL_29;
  }
  operator delete(v409[0].__r_.__value_.__l.__data_);
  if ((v9 & 1) == 0)
  {
LABEL_29:
    if (setjmp((int *)v3 + 272) != 1)
    {
      std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(v3[100] - 24) + 800), 0);
      v312 = sub_19BF8E6F8(v3 + 100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tokenizer.cpp", 72);
      sub_19BF8E6F8(v312, (uint64_t)"(", 1);
      v313 = (_QWORD *)std::ostream::operator<<();
      v314 = sub_19BF8E6F8(v313, (uint64_t)") [", 3);
      v315 = sub_19BF8E6F8(v314, (uint64_t)"unkSuccess", 10);
      v316 = sub_19BF8E6F8(v315, (uint64_t)"] ", 2);
      v317 = (char *)sub_19BFAA4D8(v3[7] + 96);
      v318 = (std::strstreambuf_vtbl *)sub_19BF8E43C(&__dst, v317);
      if (SHIBYTE(__dst.__sb_.__binp_) >= 0)
        v319 = v318;
      else
        v319 = __dst.__sb_.__vftable;
      if (SHIBYTE(__dst.__sb_.__binp_) >= 0)
        locale = HIBYTE(__dst.__sb_.__binp_);
      else
        locale = (uint64_t)__dst.__sb_.__loc_.__locale_;
      sub_19BF8E6F8(v316, (uint64_t)v319, locale);
      if (SHIBYTE(__dst.__sb_.__binp_) < 0)
        operator delete(__dst.__sb_.__vftable);
      longjmp((int *)v3 + 272, 1);
    }
LABEL_30:
    sub_19BFACB20(v3);
    v11 = 0;
    goto LABEL_31;
  }
LABEL_20:
  sub_19BF8E43C(&__dst, "completion-lookahead");
  v10 = sub_19BFAA740(v2 + 8, &__dst);
  if (SHIBYTE(__dst.__sb_.__binp_) < 0)
    operator delete(__dst.__sb_.__vftable);
  if ((_QWORD *)(v2 + 16) == v10)
  {
    v13 = 0;
    *(_DWORD *)operator new() = 0;
    MEMORY[0x1A1AD0CDC]();
  }
  else
  {
    if (*((char *)v10 + 79) < 0)
      sub_19BF8CD70(v409, (void *)v10[7], v10[8]);
    else
      v409[0] = *(std::string *)(v10 + 7);
    v14 = sub_19BFAA7BC((uint64_t)&__dst);
    LODWORD(__p) = 0;
    v15 = (_QWORD *)(v14 + 16);
    if ((v409[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = v409;
    else
      v16 = (std::string *)v409[0].__r_.__value_.__r.__words[0];
    if ((v409[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v409[0].__r_.__value_.__r.__words[2]);
    else
      size = v409[0].__r_.__value_.__l.__size_;
    v18 = sub_19BF8E6F8(v15, (uint64_t)v16, size);
    if ((*((_BYTE *)v18 + *(_QWORD *)(*v18 - 24) + 32) & 5) != 0
      || (v19 = (_QWORD *)MEMORY[0x1A1AD0AE4](&__dst, &__p), (*((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 32) & 5) != 0)
      || (v20 = sub_19BFAA880(&__dst),
          (*((_BYTE *)v20 + (unint64_t)__dst.__sb_.__vftable[-1].pbackfail + 32) & 2) == 0))
    {
      v13 = 0;
      *(_DWORD *)operator new() = 0;
      MEMORY[0x1A1AD0CDC]();
    }
    else
    {
      v13 = (int)__p;
    }
    std::strstream::~strstream(&__dst);
    if (SHIBYTE(v409[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v409[0].__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(v3[8] + 676) = v13;
  sub_19BFB1144(v374, v2, "lexicon-data-file");
  v21 = v375;
  if ((v375 & 0x80u) != 0)
    v21 = (unint64_t)v374[1];
  if (!v21)
  {
    v25 = (int *)(v3 + 136);
    if (setjmp((int *)v3 + 272) != 1)
    {
      v321 = v3 + 100;
      std::ios_base::clear((std::ios_base *)((char *)v321 + *(_QWORD *)(*v321 - 24)), 0);
      v322 = sub_19BF8E6F8(v321, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tokenizer.cpp", 72);
      sub_19BF8E6F8(v322, (uint64_t)"(", 1);
      v323 = (_QWORD *)std::ostream::operator<<();
      v324 = sub_19BF8E6F8(v323, (uint64_t)") [", 3);
      v325 = sub_19BF8E6F8(v324, (uint64_t)"!lexiconDataFile.empty()", 24);
      v326 = sub_19BF8E6F8(v325, (uint64_t)"] ", 2);
      sub_19BF8E6F8(v326, (uint64_t)"need lexicon data file path specified", 37);
      longjmp(v25, 1);
    }
    goto LABEL_74;
  }
  sub_19BFB1144(&__dst, v2, "dictionary-locale");
  v22 = (void **)(v3 + 163);
  if (*((char *)v3 + 1327) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = *(_OWORD *)&__dst.__sb_.__vftable;
  v3[165] = __dst.__sb_.__binp_;
  v23 = v3[8];
  if (*((char *)v3 + 1327) < 0)
  {
    v22 = (void **)v3[163];
    v24 = v3[164];
  }
  else
  {
    LOWORD(v24) = *((unsigned __int8 *)v3 + 1327);
  }
  sub_19BFB975C((std::string *)&__dst, (uint64_t)v376, (uint64_t)v374);
  if (SHIBYTE(__dst.__sb_.__binp_) >= 0)
    v26 = (const char *)&__dst;
  else
    v26 = (const char *)__dst.__sb_.__vftable;
  v27 = sub_19BFEF0C4(v23, (char *)v22, v24, v26);
  v28 = v27;
  if (SHIBYTE(__dst.__sb_.__binp_) < 0)
  {
    operator delete(__dst.__sb_.__vftable);
    if (v28)
      goto LABEL_63;
LABEL_73:
    if (setjmp((int *)v3 + 272) != 1)
    {
      std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(v3[100] - 24) + 800), 0);
      v327 = sub_19BF8E6F8(v3 + 100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tokenizer.cpp", 72);
      sub_19BF8E6F8(v327, (uint64_t)"(", 1);
      v328 = (_QWORD *)std::ostream::operator<<();
      v329 = sub_19BF8E6F8(v328, (uint64_t)") [", 3);
      v330 = sub_19BF8E6F8(v329, (uint64_t)"sysSuccess", 10);
      v331 = sub_19BF8E6F8(v330, (uint64_t)"] ", 2);
      v332 = (char *)sub_19BFAA4D8(v3[8] + 96);
      v333 = (std::strstreambuf_vtbl *)sub_19BF8E43C(&__dst, v332);
      if (SHIBYTE(__dst.__sb_.__binp_) >= 0)
        v334 = v333;
      else
        v334 = __dst.__sb_.__vftable;
      if (SHIBYTE(__dst.__sb_.__binp_) >= 0)
        v335 = HIBYTE(__dst.__sb_.__binp_);
      else
        v335 = (uint64_t)__dst.__sb_.__loc_.__locale_;
      sub_19BF8E6F8(v331, (uint64_t)v334, v335);
      if (SHIBYTE(__dst.__sb_.__binp_) < 0)
        operator delete(__dst.__sb_.__vftable);
      longjmp((int *)v3 + 272, 1);
    }
    goto LABEL_74;
  }
  if (!v27)
    goto LABEL_73;
LABEL_63:
  v29 = (_DWORD *)v3[8];
  if (v29[13])
  {
    v30 = (int *)(v3 + 136);
    if (setjmp((int *)v3 + 272) != 1)
    {
      v31 = v3 + 100;
      std::ios_base::clear((std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)), 0);
      v32 = sub_19BF8E6F8(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tokenizer.cpp", 72);
      sub_19BF8E6F8(v32, (uint64_t)"(", 1);
      v33 = (_QWORD *)std::ostream::operator<<();
      v34 = sub_19BF8E6F8(v33, (uint64_t)") [", 3);
      v35 = sub_19BF8E6F8(v34, (uint64_t)"sysdic_->type() == MECAB_SYS_DIC", 32);
      v36 = sub_19BF8E6F8(v35, (uint64_t)"] ", 2);
      v37 = sub_19BF8E6F8(v36, (uint64_t)"not a system dictionary: ", 25);
      if ((v377 & 0x80u) == 0)
        v38 = v376;
      else
        v38 = (void **)v376[0];
      if ((v377 & 0x80u) == 0)
        v39 = v377;
      else
        v39 = (uint64_t)v376[1];
      sub_19BF8E6F8(v37, (uint64_t)v38, v39);
      longjmp(v30, 1);
    }
LABEL_74:
    sub_19BFACB20(v3);
    v11 = 0;
    goto LABEL_75;
  }
  v40 = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v29 + 32))(v29);
  sub_19BF8E43C(&__dst, v40);
  v41 = (std::locale::__imp *)HIBYTE(__dst.__sb_.__binp_);
  v42 = SHIBYTE(__dst.__sb_.__binp_) < 0;
  v43 = __dst.__sb_.__loc_.__locale_;
  if (SHIBYTE(__dst.__sb_.__binp_) >= 0)
    v44 = (std::locale::__imp *)HIBYTE(__dst.__sb_.__binp_);
  else
    v44 = __dst.__sb_.__loc_.__locale_;
  if (v44)
  {
    v45 = 0;
    v46 = (std::locale::__imp *)HIBYTE(__dst.__sb_.__binp_);
    do
    {
      v47 = v45;
      v48 = __dst.__sb_.__vftable;
      if (!v42)
        v48 = &__dst;
      v49 = v48[v45];
      v50 = v43;
      v51 = v46;
      if ((v49 - 65) <= 0x19)
      {
        v48[v47] = v49 + 32;
        v51 = (std::locale::__imp *)HIBYTE(__dst.__sb_.__binp_);
        v50 = __dst.__sb_.__loc_.__locale_;
      }
      v46 = v51;
      v43 = v50;
      v52 = v47 + 1;
      v45 = v47 + 1;
      v42 = (char)v46 < 0;
      if ((char)v46 >= 0)
        v53 = v46;
      else
        v53 = v43;
      v54 = v43;
      v41 = v46;
      v55 = v46;
      v56 = (char)v46 < 0;
    }
    while (v52 < (unint64_t)v53);
  }
  else
  {
    v55 = (std::locale::__imp *)HIBYTE(__dst.__sb_.__binp_);
    v54 = __dst.__sb_.__loc_.__locale_;
    v56 = SHIBYTE(__dst.__sb_.__binp_) < 0;
  }
  if (v56)
    v55 = v54;
  switch((unint64_t)v55)
  {
    case 3uLL:
      v60 = !v56;
      v57 = (unsigned __int16 *)&__dst;
      if (!v60)
        v57 = (unsigned __int16 *)__dst.__sb_.__vftable;
      v58 = *v57;
      v59 = *((unsigned __int8 *)v57 + 2);
      v60 = v58 == 30053;
      v61 = 99;
      goto LABEL_109;
    case 4uLL:
      v60 = !v56;
      v67 = &__dst;
      if (!v60)
        v67 = __dst.__sb_.__vftable;
      if (*v67 == 1936288371)
        goto LABEL_142;
      goto LABEL_126;
    case 5uLL:
      v60 = !v56;
      v62 = (unsigned __int8 *)&__dst;
      if (!v60)
        v62 = (unsigned __int8 *)__dst.__sb_.__vftable;
      v63 = *(_DWORD *)v62;
      v64 = v62[4];
      v65 = v63 == 859402339;
      v66 = 50;
      goto LABEL_122;
    case 6uLL:
      v60 = !v56;
      v68 = (unsigned __int16 *)&__dst;
      if (!v60)
        v68 = (unsigned __int16 *)__dst.__sb_.__vftable;
      v69 = *(_DWORD *)v68;
      v59 = v68[2];
      v60 = v69 == 1600353637;
      v61 = 28778;
LABEL_109:
      if (!v60 || v59 != v61)
        goto LABEL_126;
      goto LABEL_143;
    case 9uLL:
      v60 = !v56;
      v71 = (unsigned __int8 *)&__dst;
      if (!v60)
        v71 = (unsigned __int8 *)__dst.__sb_.__vftable;
      v66 = 115;
      if (*(_QWORD *)v71 == 0x696A2D7466696873 && v71[8] == 115)
        goto LABEL_142;
      v73 = *(_QWORD *)v71;
      v64 = v71[8];
      v65 = v73 == 0x696A5F7466696873;
LABEL_122:
      if (v65 && v64 == v66)
      {
LABEL_142:
        v84 = 1;
        goto LABEL_172;
      }
LABEL_126:
      if ((char)v41 >= 0)
        v54 = v41;
      if (v54 == (std::locale::__imp *)5)
      {
        v86 = (unsigned __int8 *)&__dst;
        if ((char)v41 < 0)
          v86 = (unsigned __int8 *)__dst.__sb_.__vftable;
        if (*(_DWORD *)v86 == 1600550005 && v86[4] == 56)
          goto LABEL_163;
        v88 = *(_DWORD *)v86 == 761689205 && v86[4] == 56;
        v84 = 2;
        if (!v88)
        {
          if (*(_DWORD *)v86 ^ 0x69637361 | v86[4] ^ 0x69)
            v84 = 2;
          else
            v84 = 3;
        }
      }
      else
      {
        if (v54 != (std::locale::__imp *)8)
        {
          if (v54 == (std::locale::__imp *)6)
          {
            v75 = (unsigned __int16 *)__dst.__sb_.__vftable;
            v76 = (unsigned int *)&__dst;
            if ((char)v41 >= 0)
              v75 = (unsigned __int16 *)&__dst;
            v77 = *(_DWORD *)v75;
            v78 = v75[2];
            if (v77 == 761492837 && v78 == 28778)
            {
LABEL_143:
              v84 = 0;
              goto LABEL_172;
            }
            if ((char)v41 < 0)
              v76 = (unsigned int *)__dst.__sb_.__vftable;
            v80 = 1970562605;
            v81 = bswap32(*v76);
            if (v81 == 1970562605)
            {
              v82 = bswap32(*((unsigned __int16 *)v76 + 2)) >> 16;
              v80 = 12598;
              if (v82 == 12598)
              {
                v83 = 0;
LABEL_169:
                if (v83)
                  v84 = 2;
                else
                  v84 = 4;
                goto LABEL_172;
              }
            }
            else
            {
              v82 = v81;
            }
            if (v82 < v80)
              v83 = -1;
            else
              v83 = 1;
            goto LABEL_169;
          }
LABEL_163:
          v84 = 2;
          goto LABEL_172;
        }
        v85 = &__dst.__sb_.~strstreambuf;
        if ((char)v41 >= 0)
          v85 = &__dst;
        if (*v85 == 0x656236312D667475)
        {
          v84 = 5;
        }
        else if (*v85 == 0x656C36312D667475)
        {
          v84 = 6;
        }
        else
        {
          v84 = 2;
        }
      }
LABEL_172:
      v89 = v84;
      if ((v41 & 0x80) != 0)
        operator delete(__dst.__sb_.__vftable);
      *((_DWORD *)v3 + 76) = v89;
      v90 = *((_OWORD *)v3 + 4);
      *(_OWORD *)&v409[0].__r_.__value_.__l.__data_ = v90;
      if (*((_QWORD *)&v90 + 1))
      {
        v91 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      v93 = v3[3];
      v94 = (_OWORD *)v3[2];
      if ((unint64_t)v94 >= v93)
      {
        v369 = v90;
        v96 = v3[1];
        v97 = ((uint64_t)v94 - v96) >> 4;
        v98 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 60)
          sub_19BF8EB40();
        v99 = v93 - v96;
        if (v99 >> 3 > v98)
          v98 = v99 >> 3;
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF0)
          v100 = 0xFFFFFFFFFFFFFFFLL;
        else
          v100 = v98;
        __dst.__sb_.__einp_ = (std::streambuf::char_type *)(v3 + 3);
        v101 = (char *)sub_19BFAEDF0(v100);
        v103 = v101;
        v104 = &v101[16 * v97];
        v105 = v104;
        *(_OWORD *)v104 = v369;
        v106 = (_QWORD *)v3[1];
        v107 = v3[2];
        if ((_QWORD *)v107 == v106)
        {
          v110 = vdupq_n_s64(v107);
          v109 = &v101[16 * v97];
        }
        else
        {
          do
          {
            v108 = (_QWORD *)(v107 - 16);
            *((_OWORD *)v105 - 1) = *(_OWORD *)(v107 - 16);
            v105 -= 16;
            *v108 = 0;
            v108[1] = 0;
            v107 -= 16;
          }
          while (v108 != v106);
          v109 = v105;
          v110 = *(int64x2_t *)(v3 + 1);
        }
        v111 = v104 + 16;
        v3[1] = v109;
        v3[2] = v111;
        v112 = v111;
        *(int64x2_t *)&__dst.__sb_.__loc_.__locale_ = v110;
        v113 = (std::streambuf::char_type *)v3[3];
        v3[3] = &v103[16 * v102];
        __dst.__sb_.__ninp_ = v113;
        __dst.__sb_.__vftable = (std::strstreambuf_vtbl *)v110.i64[0];
        sub_19BFAEE24((uint64_t)&__dst);
        v95 = v112;
      }
      else
      {
        *v94 = v90;
        v95 = v94 + 1;
      }
      v3[2] = v95;
      sub_19BFB1144(&__dst, v2, "additional-dictionary-locale");
      v114 = (void **)(v3 + 166);
      if (*((char *)v3 + 1351) < 0)
        operator delete(*v114);
      *(_OWORD *)v114 = *(_OWORD *)&__dst.__sb_.__vftable;
      v3[168] = __dst.__sb_.__binp_;
      if (*((char *)v3 + 1351) < 0)
        v115 = v3[167];
      else
        v115 = *((unsigned __int8 *)v3 + 1351);
      if (v115)
      {
        sub_19BFB141C((uint64_t *)&__dst, 1);
        v116 = v3 + 10;
        sub_19BFAED8C((uint64_t)(v3 + 10), (__int128 *)&__dst);
        if (__dst.__sb_.__loc_.__locale_)
        {
          v117 = __dst.__sb_.__loc_.__locale_;
          v118 = (unint64_t *)((char *)__dst.__sb_.__loc_.__locale_ + 8);
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            (*(void (**)(std::locale::__imp *))(*(_QWORD *)v117 + 16))(v117);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v117);
          }
        }
        if (*((char *)v3 + 1351) < 0)
        {
          v121 = (char *)v3[166];
          v120 = v3[167];
        }
        else
        {
          LOWORD(v120) = *((unsigned __int8 *)v3 + 1351);
          v121 = (char *)(v3 + 166);
        }
        if (!sub_19BFEF0C4(v3[10], v121, v120, 0))
        {
          v128 = (int *)(v3 + 136);
          if (setjmp((int *)v3 + 272) != 1)
          {
            v336 = v3 + 100;
            std::ios_base::clear((std::ios_base *)((char *)v336 + *(_QWORD *)(*v336 - 24)), 0);
            v337 = sub_19BF8E6F8(v336, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tokenizer.cpp", 72);
            sub_19BF8E6F8(v337, (uint64_t)"(", 1);
            v338 = (_QWORD *)std::ostream::operator<<();
            v339 = sub_19BF8E6F8(v338, (uint64_t)") [", 3);
            v340 = sub_19BF8E6F8(v339, (uint64_t)"success", 7);
            v341 = sub_19BF8E6F8(v340, (uint64_t)"] ", 2);
            v342 = (char *)sub_19BFAA4D8(*v116 + 96);
            v343 = (std::strstreambuf_vtbl *)sub_19BF8E43C(&__dst, v342);
            if (SHIBYTE(__dst.__sb_.__binp_) >= 0)
              v344 = v343;
            else
              v344 = __dst.__sb_.__vftable;
            if (SHIBYTE(__dst.__sb_.__binp_) >= 0)
              v345 = HIBYTE(__dst.__sb_.__binp_);
            else
              v345 = (uint64_t)__dst.__sb_.__loc_.__locale_;
            sub_19BF8E6F8(v341, (uint64_t)v344, v345);
            if (SHIBYTE(__dst.__sb_.__binp_) < 0)
              operator delete(__dst.__sb_.__vftable);
            longjmp(v128, 1);
          }
          goto LABEL_74;
        }
        *(_OWORD *)&v409[0].__r_.__value_.__l.__data_ = *(_OWORD *)v116;
        v122 = *(_OWORD *)&v409[0].__r_.__value_.__l.__data_;
        if (v409[0].__r_.__value_.__l.__size_)
        {
          v123 = (unint64_t *)(v409[0].__r_.__value_.__l.__size_ + 8);
          do
            v124 = __ldxr(v123);
          while (__stxr(v124 + 1, v123));
        }
        v126 = (_OWORD *)v3[2];
        v125 = v3[3];
        if ((unint64_t)v126 >= v125)
        {
          v368 = v122;
          v129 = v3[1];
          v130 = ((uint64_t)v126 - v129) >> 4;
          v131 = v130 + 1;
          if ((unint64_t)(v130 + 1) >> 60)
            sub_19BF8EB40();
          v132 = v125 - v129;
          if (v132 >> 3 > v131)
            v131 = v132 >> 3;
          if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0)
            v133 = 0xFFFFFFFFFFFFFFFLL;
          else
            v133 = v131;
          __dst.__sb_.__einp_ = (std::streambuf::char_type *)(v3 + 3);
          v134 = (char *)sub_19BFAEDF0(v133);
          v136 = v134;
          v137 = &v134[16 * v130];
          v138 = v137;
          *(_OWORD *)v137 = v368;
          v139 = (_QWORD *)v3[1];
          v140 = v3[2];
          if ((_QWORD *)v140 == v139)
          {
            v143 = vdupq_n_s64(v140);
            v142 = &v134[16 * v130];
          }
          else
          {
            do
            {
              v141 = (_QWORD *)(v140 - 16);
              *((_OWORD *)v138 - 1) = *(_OWORD *)(v140 - 16);
              v138 -= 16;
              *v141 = 0;
              v141[1] = 0;
              v140 -= 16;
            }
            while (v141 != v139);
            v142 = v138;
            v143 = *(int64x2_t *)(v3 + 1);
          }
          v144 = v137 + 16;
          v3[1] = v142;
          v3[2] = v144;
          v145 = v144;
          *(int64x2_t *)&__dst.__sb_.__loc_.__locale_ = v143;
          v146 = (std::streambuf::char_type *)v3[3];
          v3[3] = &v136[16 * v135];
          __dst.__sb_.__ninp_ = v146;
          __dst.__sb_.__vftable = (std::strstreambuf_vtbl *)v143.i64[0];
          sub_19BFAEE24((uint64_t)&__dst);
          v127 = v145;
        }
        else
        {
          *v126 = v122;
          v127 = v126 + 1;
        }
        v3[2] = v127;
      }
      v148.n128_f64[0] = sub_19BFB1144(__src, v2, "userdic");
      if (v373 < 0)
      {
        if (!__src[1])
          goto LABEL_282;
        v370 = v3 + 3;
        v149 = 0uLL;
        v407 = 0u;
        v408 = 0u;
        v405 = 0u;
        v406 = 0u;
        v403 = 0u;
        v404 = 0u;
        v401 = 0u;
        v402 = 0u;
        v399 = 0u;
        v400 = 0u;
        v397 = 0u;
        v398 = 0u;
        v395 = 0u;
        v396 = 0u;
        v393 = 0u;
        v394 = 0u;
        v391 = 0u;
        v392 = 0u;
        v389 = 0u;
        v390 = 0u;
        v387 = 0u;
        v388 = 0u;
        v385 = 0u;
        v386 = 0u;
        v383 = 0u;
        v384 = 0u;
        memset(&__dst.__sb_.__einp_, 0, 64);
        v150 = __src[0];
      }
      else
      {
        if (!v373)
          goto LABEL_282;
        v370 = v3 + 3;
        v149 = 0uLL;
        v407 = 0u;
        v408 = 0u;
        v405 = 0u;
        v406 = 0u;
        v403 = 0u;
        v404 = 0u;
        v401 = 0u;
        v402 = 0u;
        v399 = 0u;
        v400 = 0u;
        v397 = 0u;
        v398 = 0u;
        v395 = 0u;
        v396 = 0u;
        v393 = 0u;
        v394 = 0u;
        v391 = 0u;
        v392 = 0u;
        v389 = 0u;
        v390 = 0u;
        v387 = 0u;
        v388 = 0u;
        v385 = 0u;
        v386 = 0u;
        v383 = 0u;
        v384 = 0u;
        memset(&__dst.__sb_.__einp_, 0, 64);
        v150 = (const char *)__src;
      }
      *(_OWORD *)&__dst.__sb_.__vftable = v149;
      *(_OWORD *)&__dst.__sb_.__binp_ = v149;
      v151 = strncpy((char *)v409, v150, 0x2000uLL);
      v152 = strlen(v151);
      if (v152 < 1)
        goto LABEL_282;
      v153 = (unsigned __int8 *)v409 + v152;
      v154 = v409;
      v155 = &__dst;
      v156 = 0x10000;
      v157 = 0;
      do
      {
        v158 = v154;
        v159 = v156;
        while (1)
        {
          v160 = v158->__r_.__value_.__s.__data_[0];
          if (v160 != 9 && v160 != 32)
            break;
          v158 = (std::string *)((char *)v158 + 1);
        }
        if (v160 == 34)
        {
          v158 = (std::string *)((char *)v158 + 1);
          v161 = (unsigned __int8 *)v158;
          v162 = (unsigned __int8 *)v158;
          if (v158 < (std::string *)v153)
          {
            v163 = (unsigned __int8 *)v158;
            v164 = (unsigned __int8 *)v158;
            while (1)
            {
              v161 = v163;
              v165 = *v164;
              if (v165 == 34)
              {
                v166 = *++v164;
                if (v166 != 34)
                  break;
              }
              *v161++ = v165;
              v163 = v161;
              v162 = ++v164;
              if (v164 >= v153)
                goto LABEL_247;
            }
            v162 = v164;
          }
LABEL_247:
          v171 = v161;
          v172 = (unsigned __int8 *)memchr(v162, 44, v153 - v162);
          if (v172)
            v170 = v172;
          else
            v170 = v153;
          v169 = v171;
        }
        else
        {
          v167 = (unsigned __int8 *)memchr(v158, 44, v153 - (unsigned __int8 *)v158);
          if (v167)
            v168 = v167;
          else
            v168 = v153;
          v169 = v168;
          v170 = v168;
        }
        v156 = v159 - 1;
        if (v159 < 2)
        {
          v155->__sb_.__vftable = (std::strstreambuf_vtbl *)v158;
          v174 = v157 + 1;
          v173 = v157 + 1;
          if (v159 == 1)
            break;
        }
        else
        {
          *v169 = 0;
          v155->__sb_.__vftable = (std::strstreambuf_vtbl *)v158;
          v173 = v157 + 1;
        }
        v157 = v173;
        v155 = (std::strstream *)((char *)v155 + 8);
        v154 = (std::string *)(v170 + 1);
        v174 = v157;
      }
      while (v170 + 1 < v153);
      if (!v174)
      {
LABEL_282:
        v3[30] = 0;
        v3[24] = 0;
        v3[25] = 0;
        v203 = ((v3[2] - v3[1]) >> 4) - 1;
        if ((int)v203 >= 0)
        {
          do
          {
            v204 = v203;
            v205 = v3[25];
            if (v3[24] == v3[26])
            {
              v147 = ++v205;
              v3[24] = 0;
              v3[25] = v205;
              v206 = 0;
            }
            else
            {
              v206 = v3[24];
            }
            v207 = v205;
            v60 = v205 == (uint64_t)(v3[22] - v3[21]) >> 3;
            v208 = v206;
            v209 = v3[21];
            if (v60)
            {
              v210 = operator new[]();
              v211 = v210;
              v213 = (uint64_t *)v3[22];
              v212 = v3[23];
              v214 = v213;
              if ((unint64_t)v213 >= v212)
              {
                v216 = (uint64_t *)v3[21];
                v217 = v213 - v216;
                v218 = v217 + 1;
                if ((unint64_t)(v217 + 1) >> 61)
                  sub_19BF8EB40();
                v219 = v212 - (_QWORD)v216;
                if (v219 >> 2 > v218)
                  v218 = v219 >> 2;
                if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFF8)
                  v220 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v220 = v218;
                if (v220)
                {
                  if (v220 >> 61)
                    sub_19BF8E6D0();
                  v221 = (char *)operator new(8 * v220);
                  v222 = v220;
                }
                else
                {
                  v222 = 0;
                  v221 = 0;
                }
                v223 = (uint64_t *)&v221[8 * v217];
                *v223 = v211;
                v224 = v223 + 1;
                if (v213 != v216)
                {
                  v225 = &v221[8 * v217];
                  do
                  {
                    v226 = *--v214;
                    *((_QWORD *)v225 - 1) = v226;
                    v225 -= 8;
                  }
                  while (v214 != v216);
                  v223 = (uint64_t *)v225;
                  v214 = (uint64_t *)v3[21];
                }
                v215 = v224;
                v3[21] = v223;
                v3[22] = v224;
                v3[23] = &v221[8 * v222];
                if (v214)
                  operator delete(v214);
              }
              else
              {
                *v213 = v210;
                v215 = v213 + 1;
              }
              v3[22] = v215;
              v208 = v3[24];
              v209 = v3[21];
              v207 = v3[25];
            }
            v227 = *(_QWORD *)(v209 + 8 * v207);
            v3[24] = v208 + 1;
            v228 = v227 + 48 * v208;
            *(_OWORD *)(v228 + 16) = 0u;
            *(_OWORD *)(v228 + 32) = 0u;
            *(_OWORD *)v228 = 0u;
            *(_QWORD *)(v228 + 40) = v3[30];
            v229 = *(char **)(v3[1] + 16 * v204);
            v230 = v229 + 72;
            if (v229[95] < 0)
              v230 = (_QWORD *)*v230;
            *(_QWORD *)v228 = v230;
            v231 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v229 + 32))(v229, v147);
            v232 = v227 + 48 * v208;
            *(_QWORD *)(v232 + 8) = v231;
            v233 = *(_QWORD *)(v3[1] + 16 * v204);
            v148 = *(__n128 *)(v233 + 52);
            *(_QWORD *)&v234 = vrev64q_s32((int32x4_t)v148).u64[0];
            *((_QWORD *)&v234 + 1) = *(_QWORD *)(v233 + 60);
            *(_OWORD *)(v232 + 16) = v234;
            *(_WORD *)(v232 + 32) = *(_DWORD *)(v233 + 48);
            v3[30] = v228;
            v203 = v204 - 1;
          }
          while (v204 > 0);
        }
        v3[28] = v3[27];
        if (v3[7])
        {
          for (i = 0; ; ++i)
          {
            v236 = v3[34];
            if (i >= (v3[35] - v236) >> 3)
              break;
            v237 = *(const char **)(v236 + 8 * i);
            (*(void (**)(std::strstream *__return_ptr, _QWORD, const char *, __n128))(*(_QWORD *)v3[7] + 64))(&__dst, v3[7], v237, v148);
            if (!LODWORD(__dst.__sb_.__loc_.__locale_))
            {
              v288 = (int *)(v3 + 136);
              if (setjmp((int *)v3 + 272) != 1)
              {
                v346 = v3 + 100;
                std::ios_base::clear((std::ios_base *)((char *)v346 + *(_QWORD *)(*v346 - 24)), 0);
                v347 = sub_19BF8E6F8(v346, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tokenizer.cpp", 72);
                sub_19BF8E6F8(v347, (uint64_t)"(", 1);
                v348 = (_QWORD *)std::ostream::operator<<();
                v349 = sub_19BF8E6F8(v348, (uint64_t)") [", 3);
                v350 = sub_19BF8E6F8(v349, (uint64_t)"n.value != 0", 12);
                v351 = sub_19BF8E6F8(v350, (uint64_t)"] ", 2);
                v352 = sub_19BF8E6F8(v351, (uint64_t)"cannot find UNK category: ", 26);
                v353 = strlen(v237);
                sub_19BF8E6F8(v352, (uint64_t)v237, v353);
                longjmp(v288, 1);
              }
              sub_19BFACB20(v3);
              if (__dst.__sb_.__binp_)
                CFRelease(__dst.__sb_.__binp_);
              goto LABEL_397;
            }
            v238 = (*(uint64_t (**)(_QWORD, std::strstream *, _QWORD))(*(_QWORD *)v3[7] + 128))(v3[7], &__dst, 0);
            v239 = (*(uint64_t (**)(_QWORD, std::strstream *))(*(_QWORD *)v3[7] + 136))(v3[7], &__dst);
            v240 = v238;
            v241 = v239;
            v243 = (uint64_t *)v3[28];
            v242 = v3[29];
            if ((unint64_t)v243 >= v242)
            {
              v245 = v3[27];
              v246 = ((uint64_t)v243 - v245) >> 4;
              v247 = v246 + 1;
              if ((unint64_t)(v246 + 1) >> 60)
                sub_19BF8EB40();
              v248 = v242 - v245;
              if (v248 >> 3 > v247)
                v247 = v248 >> 3;
              if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFF0)
                v249 = 0xFFFFFFFFFFFFFFFLL;
              else
                v249 = v247;
              if (v249)
              {
                v250 = (char *)sub_19BFAEDF0(v249);
                v252 = v251;
              }
              else
              {
                v252 = 0;
                v250 = 0;
              }
              v253 = (uint64_t *)&v250[16 * v246];
              v254 = (char *)v253;
              *v253 = v240;
              v253[1] = v241;
              v255 = v3[27];
              v256 = v3[28];
              if (v256 == v255)
              {
                v258 = (void *)v3[28];
              }
              else
              {
                v257 = (__n128 *)&v250[16 * v246];
                do
                {
                  v254 = (char *)&v257[-1];
                  v148 = *(__n128 *)(v256 - 16);
                  v257[-1] = v148;
                  v256 -= 16;
                  --v257;
                }
                while (v256 != v255);
                v258 = (void *)v3[27];
              }
              v244 = v253 + 2;
              v3[27] = v254;
              v3[28] = v253 + 2;
              v3[29] = &v250[16 * v252];
              if (v258)
                operator delete(v258);
            }
            else
            {
              *v243 = v240;
              v243[1] = v239;
              v244 = v243 + 2;
            }
            v3[28] = v244;
            if (__dst.__sb_.__binp_)
              CFRelease(__dst.__sb_.__binp_);
          }
          *((_BYTE *)v3 + 105) = 1;
          v3[12] = (uint64_t)(v3[28] - v3[27]) >> 4;
          v259 = &off_1E3D17BF0;
          do
          {
            (*(void (**)(std::strstream *__return_ptr, _QWORD, char *, char *, __n128))(*(_QWORD *)v3[7]
                                                                                                 + 56))(&__dst, v3[7], *v259, v259[1], v148);
            v260 = (int)__dst.__sb_.__loc_.__locale_;
            if (LODWORD(__dst.__sb_.__loc_.__locale_))
            {
              v261 = (*(uint64_t (**)(_QWORD, std::strstream *, _QWORD))(*(_QWORD *)v3[7] + 128))(v3[7], &__dst, 0);
              v262 = (*(uint64_t (**)(_QWORD, std::strstream *))(*(_QWORD *)v3[7] + 136))(v3[7], &__dst);
              v263 = v262;
              v265 = (uint64_t *)v3[28];
              v264 = v3[29];
              if ((unint64_t)v265 >= v264)
              {
                v267 = v3[27];
                v268 = ((uint64_t)v265 - v267) >> 4;
                v269 = v268 + 1;
                if ((unint64_t)(v268 + 1) >> 60)
                  sub_19BF8EB40();
                v270 = v264 - v267;
                if (v270 >> 3 > v269)
                  v269 = v270 >> 3;
                if ((unint64_t)v270 >= 0x7FFFFFFFFFFFFFF0)
                  v271 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v271 = v269;
                if (v271)
                {
                  v272 = (char *)sub_19BFAEDF0(v271);
                  v274 = v273;
                }
                else
                {
                  v274 = 0;
                  v272 = 0;
                }
                v275 = (uint64_t *)&v272[16 * v268];
                v276 = v275;
                *v275 = v261;
                v275[1] = v263;
                v277 = v3[27];
                v278 = v3[28];
                if (v278 == v277)
                {
                  v280 = (void *)v3[28];
                }
                else
                {
                  v279 = (__n128 *)&v272[16 * v268];
                  do
                  {
                    v276 = (uint64_t *)&v279[-1];
                    v148 = *(__n128 *)(v278 - 16);
                    v279[-1] = v148;
                    v278 -= 16;
                    --v279;
                  }
                  while (v278 != v277);
                  v280 = (void *)v3[27];
                }
                v266 = v275 + 2;
                v3[27] = v276;
                v3[28] = v275 + 2;
                v3[29] = &v272[16 * v274];
                if (v280)
                  operator delete(v280);
              }
              else
              {
                *v265 = v261;
                v265[1] = v262;
                v266 = v265 + 2;
              }
              v3[28] = v266;
            }
            else if (*((_BYTE *)v3 + 105))
            {
              *((_BYTE *)v3 + 105) = 0;
            }
            if (__dst.__sb_.__binp_)
              CFRelease(__dst.__sb_.__binp_);
            if (!v260)
              break;
            v259 += 2;
          }
          while (v259 != &off_1E3D17C10);
        }
        *((_DWORD *)v3 + 62) = *(_DWORD *)(v3[37] + 128);
        sub_19BFB1144(&__dst, v2, "bos-feature");
        sub_19BFB14A4((uint64_t)(v3 + 16), (uint64_t)&__dst);
        if (SHIBYTE(__dst.__sb_.__binp_) < 0)
          operator delete(__dst.__sb_.__vftable);
        v281 = sub_19BFB1144(&__dst, v2, "unk-feature");
        v282 = v3[19];
        if (v282)
          MEMORY[0x1A1AD0CB8](v282, 0x1000C8077774924, v281);
        v3[19] = 0;
        v283 = (std::locale::__imp *)HIBYTE(__dst.__sb_.__binp_);
        v284 = SHIBYTE(__dst.__sb_.__binp_);
        if (SHIBYTE(__dst.__sb_.__binp_) < 0)
          v283 = __dst.__sb_.__loc_.__locale_;
        if (v283)
          sub_19BFB14A4((uint64_t)(v3 + 18), (uint64_t)&__dst);
        v285 = *(_BYTE *)v3[17] != 0;
        if (*(_BYTE *)v3[17])
        {
          v286 = sub_19BFB1530(v2);
          v287 = 24;
          if (v286)
            v287 = v286;
          v3[99] = v287;
        }
        else
        {
          v289 = (int *)(v3 + 136);
          if (setjmp((int *)v3 + 272) != 1)
          {
            v354 = v3 + 100;
            std::ios_base::clear((std::ios_base *)((char *)v354 + *(_QWORD *)(*v354 - 24)), 0);
            v355 = sub_19BF8E6F8(v354, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tokenizer.cpp", 72);
            sub_19BF8E6F8(v355, (uint64_t)"(", 1);
            v356 = (_QWORD *)std::ostream::operator<<();
            v357 = sub_19BF8E6F8(v356, (uint64_t)") [", 3);
            v358 = sub_19BF8E6F8(v357, (uint64_t)"*bos_feature_ != '\\0'", 21);
            v359 = sub_19BF8E6F8(v358, (uint64_t)"] ", 2);
            sub_19BF8E6F8(v359, (uint64_t)"bos-feature is undefined in dicrc", 33);
            longjmp(v289, 1);
          }
          sub_19BFACB20(v3);
        }
        if (v284 < 0)
          operator delete(__dst.__sb_.__vftable);
        v11 = v285;
        goto LABEL_398;
      }
      v175 = 0;
      while (1)
      {
        v176 = (std::__shared_weak_count *)operator new(0x2B0uLL);
        v177 = v176;
        v176->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v176->__shared_owners_;
        v176->__shared_weak_owners_ = 0;
        v176->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D129F8;
        *(_QWORD *)&v371 = sub_19BFB9458((uint64_t)&v176[1]);
        *((_QWORD *)&v371 + 1) = v176;
        v179 = (const char *)*((_QWORD *)&__dst.__sb_.__vftable + v175);
        if ((((uint64_t (*)(_QWORD, const char *, const char *))v176[1].__on_zero_shared)(v371, v179, v6) & 1) == 0)
          break;
        if (HIDWORD(v176[3].__vftable) != 1)
        {
          v301 = (int *)(v3 + 136);
          if (setjmp((int *)v3 + 272) != 1)
          {
            v360 = v3 + 100;
            std::ios_base::clear((std::ios_base *)((char *)v360 + *(_QWORD *)(*v360 - 24)), 0);
            v361 = sub_19BF8E6F8(v360, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tokenizer.cpp", 72);
            sub_19BF8E6F8(v361, (uint64_t)"(", 1);
            v362 = (_QWORD *)std::ostream::operator<<();
            v363 = sub_19BF8E6F8(v362, (uint64_t)") [", 3);
            v364 = sub_19BF8E6F8(v363, (uint64_t)"d->type() == MECAB_USR_DIC", 26);
            v365 = sub_19BF8E6F8(v364, (uint64_t)"] ", 2);
            v366 = sub_19BF8E6F8(v365, (uint64_t)"not a user dictionary: ", 23);
            v367 = strlen(v179);
            sub_19BF8E6F8(v366, (uint64_t)v179, v367);
            longjmp(v301, 1);
          }
          goto LABEL_393;
        }
        v180 = (_QWORD *)v3[2];
        v181 = v3[3];
        if ((unint64_t)v180 >= v181)
        {
          v183 = v3[1];
          v184 = ((uint64_t)v180 - v183) >> 4;
          v185 = v184 + 1;
          if ((unint64_t)(v184 + 1) >> 60)
            sub_19BF8EB40();
          v186 = v181 - v183;
          if (v186 >> 3 > v185)
            v185 = v186 >> 3;
          if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF0)
            v187 = 0xFFFFFFFFFFFFFFFLL;
          else
            v187 = v185;
          v381 = v370;
          v188 = (char *)sub_19BFAEDF0(v187);
          v190 = &v188[16 * v184];
          *(_OWORD *)v190 = v371;
          if (v176)
          {
            v191 = (unint64_t *)&v176->__shared_owners_;
            do
              v192 = __ldxr(v191);
            while (__stxr(v192 + 1, v191));
          }
          v193 = &v188[16 * v184];
          v194 = (_QWORD *)v3[1];
          v195 = v3[2];
          if ((_QWORD *)v195 == v194)
          {
            v198 = vdupq_n_s64(v195);
            v197 = &v188[16 * v184];
          }
          else
          {
            do
            {
              v196 = (_QWORD *)(v195 - 16);
              *((_OWORD *)v193 - 1) = *(_OWORD *)(v195 - 16);
              v193 -= 16;
              *v196 = 0;
              v196[1] = 0;
              v195 -= 16;
            }
            while (v196 != v194);
            v197 = v193;
            v198 = *(int64x2_t *)(v3 + 1);
          }
          v199 = v190 + 16;
          v3[1] = v197;
          v3[2] = v190 + 16;
          v379 = v198;
          v200 = v3[3];
          v3[3] = &v188[16 * v189];
          v380 = v200;
          __p = (void *)v198.i64[0];
          sub_19BFAEE24((uint64_t)&__p);
          v3[2] = v199;
          v177 = v176;
          if (!v176)
            goto LABEL_281;
        }
        else
        {
          *v180 = v371;
          v180[1] = v176;
          do
            v182 = __ldxr(p_shared_owners);
          while (__stxr(v182 + 1, p_shared_owners));
          v3[2] = v180 + 2;
        }
        v201 = (unint64_t *)&v177->__shared_owners_;
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 - 1, v201));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
          std::__shared_weak_count::__release_weak(v177);
        }
LABEL_281:
        if (++v175 == v174)
          goto LABEL_282;
      }
      v290 = (int *)(v3 + 136);
      if (setjmp((int *)v3 + 272) != 1)
      {
        v291 = v3 + 100;
        std::ios_base::clear((std::ios_base *)((char *)v291 + *(_QWORD *)(*v291 - 24)), 0);
        v292 = sub_19BF8E6F8(v291, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tokenizer.cpp", 72);
        sub_19BF8E6F8(v292, (uint64_t)"(", 1);
        v293 = (_QWORD *)std::ostream::operator<<();
        v294 = sub_19BF8E6F8(v293, (uint64_t)") [", 3);
        v295 = sub_19BF8E6F8(v294, (uint64_t)"d->open(_dic[i], mode)", 22);
        v296 = sub_19BF8E6F8(v295, (uint64_t)"] ", 2);
        v297 = (char *)sub_19BFAA4D8((uint64_t)&v176[5]);
        v298 = sub_19BF8E43C(&__p, v297);
        if (v379.i8[15] >= 0)
          v299 = v298;
        else
          v299 = __p;
        if (v379.i8[15] >= 0)
          v300 = v379.u8[15];
        else
          v300 = v379.i64[0];
        sub_19BF8E6F8(v296, (uint64_t)v299, v300);
        if (v379.i8[15] < 0)
          operator delete(__p);
        longjmp(v290, 1);
      }
LABEL_393:
      sub_19BFACB20(v3);
      do
        v302 = __ldaxr(p_shared_owners);
      while (__stlxr(v302 - 1, p_shared_owners));
      if (!v302)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
LABEL_397:
      v11 = 0;
LABEL_398:
      if (v373 < 0)
        operator delete(__src[0]);
LABEL_75:
      if ((char)v375 < 0)
        operator delete(v374[0]);
LABEL_31:
      if ((char)v377 < 0)
        operator delete(v376[0]);
      return v11;
    default:
      goto LABEL_126;
  }
}

void sub_19BFB0E70(_Unwind_Exception *a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,std::strstream *a37)
{
  if (a2)
    sub_19BF8E3F8(a1);
  _Unwind_Resume(a1);
}

double sub_19BFB1144(_QWORD *a1, uint64_t a2, char *__s)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  double result;
  __int128 v9;
  uint64_t v10;
  void *__p[2];
  char v12;

  v5 = a2 + 8;
  sub_19BF8E43C(__p, __s);
  v6 = sub_19BFAA740(v5, __p);
  if (v12 < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(a2 + 16) == v6)
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    __p[0] = &off_1E3D13E48;
    __p[1] = v7;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    sub_19BFB1770(__p);
  }
  else
  {
    if (*((char *)v6 + 79) < 0)
    {
      sub_19BF8CD70(&v9, (void *)v6[7], v6[8]);
    }
    else
    {
      v9 = *(_OWORD *)(v6 + 7);
      v10 = v6[9];
    }
    result = *(double *)&v9;
    *(_OWORD *)a1 = v9;
    a1[2] = v10;
  }
  return result;
}

BOOL sub_19BFB122C(uint64_t a1, char *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _BOOL8 v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v11[2];
  uint64_t v12;
  char v13;
  std::strstream __p[2];

  v3 = a1 + 8;
  sub_19BF8E43C(__p, a2);
  v4 = sub_19BFAA740(v3, __p);
  if (SHIBYTE(__p[0].__sb_.__binp_) < 0)
    operator delete(__p[0].__sb_.__vftable);
  if ((_QWORD *)(a1 + 16) == v4)
  {
    *(_BYTE *)operator new() = 0;
    MEMORY[0x1A1AD0CDC]();
    return 0;
  }
  else
  {
    if (*((char *)v4 + 79) < 0)
    {
      sub_19BF8CD70(v11, (void *)v4[7], v4[8]);
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)(v4 + 7);
      v12 = v4[9];
    }
    sub_19BFAA7BC((uint64_t)__p);
    v13 = 0;
    if (v12 >= 0)
      v6 = v11;
    else
      v6 = (void **)v11[0];
    if (v12 >= 0)
      v7 = HIBYTE(v12);
    else
      v7 = (uint64_t)v11[1];
    v8 = sub_19BF8E6F8(&__p[0].__sb_.__binp_, (uint64_t)v6, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0
      || (v9 = (_QWORD *)MEMORY[0x1A1AD0AC0](__p, &v13), (*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
      || (sub_19BFAA880(__p),
          (*((_BYTE *)&__p[0].__sb_.__einp_ + (unint64_t)__p[0].__sb_.__vftable[-1].pbackfail) & 2) == 0))
    {
      *(_BYTE *)operator new() = 0;
      MEMORY[0x1A1AD0CDC]();
      v5 = 0;
    }
    else
    {
      v5 = v13 != 0;
    }
    std::strstream::~strstream(__p);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[0]);
  }
  return v5;
}

void sub_19BFB13EC(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, std::strstream *a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  std::strstream::~strstream((std::strstream *)&a16);
  if (a14 < 0)
    operator delete(__pa);
  _Unwind_Resume(__p);
}

uint64_t sub_19BFB141C(uint64_t *a1, char a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x2C0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E3D12A30;
  result = sub_19BFB9458((uint64_t)(v4 + 3));
  v4[3] = &off_1E3D14118;
  v4[86] = 0;
  *((_BYTE *)v4 + 696) = a2 != 0;
  *((_DWORD *)v4 + 175) = -1;
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_19BFB148C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFB14A4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  const char *v6;
  uint64_t result;

  v4 = (char *)operator new[]();
  v5 = v4;
  if (*(char *)(a2 + 23) >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  strcpy(v4, v6);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = MEMORY[0x1A1AD0CB8](result, 0x1000C8077774924);
  *(_QWORD *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_19BFB1530(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v10[2];
  uint64_t v11;
  uint64_t v12;
  std::strstream __p[2];

  v2 = a1 + 8;
  sub_19BF8E43C(__p, "max-grouping-size");
  v3 = sub_19BFAA740(v2, __p);
  if (SHIBYTE(__p[0].__sb_.__binp_) < 0)
    operator delete(__p[0].__sb_.__vftable);
  if ((_QWORD *)(a1 + 16) == v3)
  {
    *(_QWORD *)operator new() = 0;
    MEMORY[0x1A1AD0CDC]();
    return 0;
  }
  else
  {
    if (*((char *)v3 + 79) < 0)
    {
      sub_19BF8CD70(v10, (void *)v3[7], v3[8]);
    }
    else
    {
      *(_OWORD *)v10 = *(_OWORD *)(v3 + 7);
      v11 = v3[9];
    }
    sub_19BFAA7BC((uint64_t)__p);
    v12 = 0;
    if (v11 >= 0)
      v5 = v10;
    else
      v5 = (void **)v10[0];
    if (v11 >= 0)
      v6 = HIBYTE(v11);
    else
      v6 = (uint64_t)v10[1];
    v7 = sub_19BF8E6F8(&__p[0].__sb_.__binp_, (uint64_t)v5, v6);
    if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0
      || (v8 = (_QWORD *)MEMORY[0x1A1AD0AF0](__p, &v12), (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      || (sub_19BFAA880(__p),
          (*((_BYTE *)&__p[0].__sb_.__einp_ + (unint64_t)__p[0].__sb_.__vftable[-1].pbackfail) & 2) == 0))
    {
      *(_QWORD *)operator new() = 0;
      MEMORY[0x1A1AD0CDC]();
      v4 = 0;
    }
    else
    {
      v4 = v12;
    }
    std::strstream::~strstream(__p);
    if (SHIBYTE(v11) < 0)
      operator delete(v10[0]);
  }
  return v4;
}

void sub_19BFB16F0(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, std::strstream *a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  std::strstream::~strstream((std::strstream *)&a16);
  if (a14 < 0)
    operator delete(__pa);
  _Unwind_Resume(__p);
}

void sub_19BFB1720(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D129F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19BFB1730(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D129F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFB1760(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_19BFB1770(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D13E48;
  v2 = a1[1];
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1A1AD0CDC](v2, 0x1012C40EC159624);
  }
  return a1;
}

void sub_19BFB17D0(_QWORD *a1)
{
  sub_19BFB1770(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFB17F4(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0x1FF00000000;
  *(_QWORD *)(a1 + 40) = operator new[]();
  *(_QWORD *)(a1 + 48) = operator new[]();
  sub_19BFA9BDC(a1 + 56);
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  memset(*(void **)(a1 + 40), 255, 0x800uLL);
  return a1;
}

void sub_19BFB1878(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    MEMORY[0x1A1AD0CB8](v3, 0x1000C8052888210);
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v4)
    MEMORY[0x1A1AD0CB8](v4, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFB18CC()
{
  _QWORD *v0;

  pthread_mutex_lock(&stru_1EE414E28);
  if (!qword_1EE417320)
  {
    v0 = (_QWORD *)operator new();
    v0[2] = 0;
    *v0 = &off_1E3D13BE8;
    v0[1] = v0 + 2;
    v0[6] = 0;
    v0[5] = 0;
    v0[3] = 0;
    v0[4] = v0 + 5;
    sub_19BFB1EAC((uint64_t)(v0 + 7));
    qword_1EE417320 = (uint64_t)v0;
  }
  pthread_mutex_unlock(&stru_1EE414E28);
  return qword_1EE417320;
}

void sub_19BFB1958(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFB1F0C(*(char **)(v1 + 40));
  sub_19BFB1F54(*(char **)(v1 + 16));
  MEMORY[0x1A1AD0CDC](v1, 0x10B3C401829B6ABLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFB198C(uint64_t a1, unint64_t a2)
{
  pthread_mutex_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;

  v4 = (pthread_mutex_t *)(a1 + 64);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  if (a2)
  {
    v5 = *(_QWORD **)(a1 + 40);
    if (v5)
    {
      v6 = (_QWORD *)(a1 + 40);
      do
      {
        v7 = v5[4];
        v8 = v7 >= a2;
        if (v7 >= a2)
          v9 = v5;
        else
          v9 = v5 + 1;
        if (v8)
          v6 = v5;
        v5 = (_QWORD *)*v9;
      }
      while (*v9);
      if (v6 != (_QWORD *)(a1 + 40) && v6[4] <= a2)
      {
        v10 = v6[8] - 1;
        v6[8] = v10;
        if (!v10)
        {
          v11 = (uint64_t **)(a1 + 8);
          v12 = sub_19BFAA740(a1 + 8, v6 + 5);
          v13 = v12;
          v14 = (uint64_t *)v12[1];
          if (v14)
          {
            do
            {
              v15 = v14;
              v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            v16 = v12;
            do
            {
              v15 = (uint64_t *)v16[2];
              v17 = *v15 == (_QWORD)v16;
              v16 = v15;
            }
            while (!v17);
          }
          if (*v11 == v12)
            *v11 = v15;
          v18 = *(uint64_t **)(a1 + 16);
          --*(_QWORD *)(a1 + 24);
          sub_19BFB1B28(v18, v13);
          if (*((char *)v13 + 55) < 0)
            operator delete((void *)v13[4]);
          operator delete(v13);
          v19 = (_QWORD *)v6[1];
          if (v19)
          {
            do
            {
              v20 = v19;
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
          else
          {
            v21 = v6;
            do
            {
              v20 = (_QWORD *)v21[2];
              v17 = *v20 == (_QWORD)v21;
              v21 = v20;
            }
            while (!v17);
          }
          if (*(_QWORD **)(a1 + 32) == v6)
            *(_QWORD *)(a1 + 32) = v20;
          v22 = *(uint64_t **)(a1 + 40);
          --*(_QWORD *)(a1 + 48);
          sub_19BFB1B28(v22, v6);
          if (*((char *)v6 + 63) < 0)
            operator delete((void *)v6[5]);
          operator delete(v6);
          (*(void (**)(unint64_t))(*(_QWORD *)a2 + 8))(a2);
        }
      }
    }
  }
  return pthread_mutex_unlock(v4);
}

uint64_t *sub_19BFB1B28(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_19BFB1EAC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D14218;
  sub_19BFA9BDC(a1 + 72);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 8), 0);
  return a1;
}

void sub_19BFB1EF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFB1F9C(v1);
  _Unwind_Resume(a1);
}

void sub_19BFB1F0C(char *a1)
{
  if (a1)
  {
    sub_19BFB1F0C(*(_QWORD *)a1);
    sub_19BFB1F0C(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

void sub_19BFB1F54(char *a1)
{
  if (a1)
  {
    sub_19BFB1F54(*(_QWORD *)a1);
    sub_19BFB1F54(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_19BFB1F9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 112);
  return a1;
}

void sub_19BFB2034(uint64_t a1)
{
  sub_19BFB2058(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFB2058(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E3D14218;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 72) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 72 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 80) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 184);
  return a1;
}

void sub_19BFB2108(uint64_t a1)
{
  sub_19BFB212C(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFB212C(uint64_t a1)
{
  pthread_mutex_t *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  *(_QWORD *)a1 = &off_1E3D13BE8;
  v2 = (pthread_mutex_t *)(a1 + 64);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  v3 = *(_QWORD **)(a1 + 8);
  if (v3 != (_QWORD *)(a1 + 16))
  {
    do
    {
      v4 = v3[7];
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != (_QWORD *)(a1 + 16));
  }
  pthread_mutex_unlock(v2);
  sub_19BFB2058(a1 + 56);
  sub_19BFB1F0C(*(char **)(a1 + 40));
  sub_19BFB1F54(*(char **)(a1 + 16));
  return a1;
}

uint64_t sub_19BFB21EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_19BFB18CC();
  sub_19BFB198C(v2, *(_QWORD *)a1);
  *(_QWORD *)a1 = 0;
  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 56) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 56 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 64) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 168);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v5)
    MEMORY[0x1A1AD0CB8](v5, 0x1000C8052888210);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v6)
    MEMORY[0x1A1AD0CB8](v6, 0x1000C8052888210);
  return a1;
}

uint64_t sub_19BFB22D8(unint64_t *a1, char *a2, const char *a3)
{
  uint64_t v6;
  pthread_mutex_t *v7;
  _QWORD **v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  _QWORD *v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  _OWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t **v25;
  unint64_t v26;
  char *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t result;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  size_t v53;
  void *v54[2];
  uint64_t v55;
  void *__p[2];
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v6 = sub_19BFB18CC();
  sub_19BF8E43C(v54, a2);
  v7 = (pthread_mutex_t *)(v6 + 64);
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 64));
  v8 = (_QWORD **)(v6 + 8);
  v9 = (uint64_t **)sub_19BFAA740(v6 + 8, v54);
  v10 = v9;
  if ((uint64_t **)(v6 + 16) == v9)
  {
    v14 = operator new();
    *(_QWORD *)v14 = &off_1E3D141F8;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    sub_19BFA9BDC(v14 + 48);
    *(_QWORD *)(v14 + 312) = 0;
    *(_QWORD *)(v14 + 320) = 0;
    *(_QWORD *)(v14 + 328) = 0;
    *(_DWORD *)(v14 + 528) = -1;
    v59 = v14;
    if (SHIBYTE(v55) < 0)
    {
      sub_19BF8CD70(__p, v54[0], (unint64_t)v54[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v54;
      v57 = v55;
    }
    v58 = v14;
    if (*v10)
    {
      v15 = *v10;
      do
      {
        while (1)
        {
          v16 = (uint64_t **)v15;
          v17 = v15 + 4;
          if ((sub_19BFAAA0C(__p, v15 + 4) & 0x80) == 0)
            break;
          v15 = *v16;
          v18 = v16;
          if (!*v16)
            goto LABEL_15;
        }
        if ((sub_19BFAAA0C(v17, __p) & 0x80) == 0)
          goto LABEL_18;
        v15 = v16[1];
      }
      while (v15);
      v18 = v16++;
    }
    else
    {
      v18 = v10;
      v16 = v10;
    }
LABEL_15:
    v19 = v16;
    v20 = v18;
    v21 = operator new(0x40uLL);
    v21[2] = *(_OWORD *)__p;
    v22 = v57;
    __p[1] = 0;
    v57 = 0;
    __p[0] = 0;
    *((_QWORD *)v21 + 6) = v22;
    *((_QWORD *)v21 + 7) = v14;
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
    *((_QWORD *)v21 + 2) = v20;
    *v19 = (uint64_t *)v21;
    v23 = (_QWORD *)**v8;
    v24 = (uint64_t *)v21;
    if (v23)
    {
      *v8 = v23;
      v24 = *v19;
    }
    sub_19BFA96D8(*v10, v24);
    ++*(_QWORD *)(v6 + 24);
LABEL_18:
    if (SHIBYTE(v57) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v55) < 0)
    {
      sub_19BF8CD70(__p, v54[0], (unint64_t)v54[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v54;
      v57 = v55;
    }
    v58 = 1;
    v25 = (uint64_t **)(v6 + 32);
    v26 = v59;
    v27 = sub_19BFB31D0(v25, v59, &v59);
    v28 = (void **)(v27 + 40);
    if (v27[63] < 0)
      operator delete(*v28);
    *(_OWORD *)v28 = *(_OWORD *)__p;
    v29 = v58;
    *((_QWORD *)v27 + 7) = v57;
    *((_QWORD *)v27 + 8) = v29;
    v13 = v26;
  }
  else
  {
    v11 = (unint64_t)v9[7];
    v59 = v11;
    v12 = sub_19BFB31D0((uint64_t **)(v6 + 32), v11, &v59);
    ++*((_QWORD *)v12 + 8);
    v13 = v11;
  }
  pthread_mutex_unlock(v7);
  *a1 = v13;
  if (SHIBYTE(v55) < 0)
    operator delete(v54[0]);
  pthread_mutex_lock(v7);
  v30 = *a1;
  if (*(_QWORD *)(*a1 + 8))
    goto LABEL_34;
  v31 = (char *)sub_19BF8E43C(__p, a2);
  if (v57 >= 0)
    v32 = v31;
  else
    v32 = (char *)__p[0];
  v33 = sub_19BFB28DC(v30, v32, a3);
  v34 = v33;
  if (SHIBYTE(v57) < 0)
  {
    operator delete(__p[0]);
    if ((v34 & 1) != 0)
      goto LABEL_34;
LABEL_42:
    v42 = (char *)sub_19BFAA4D8(*a1 + 48);
    v43 = sub_19BF8E43C(__p, v42);
    if (v57 >= 0)
      v44 = v43;
    else
      v44 = __p[0];
    if (v57 >= 0)
      v45 = HIBYTE(v57);
    else
      v45 = (uint64_t)__p[1];
    sub_19BF8E6F8(a1 + 7, (uint64_t)v44, v45);
    if (SHIBYTE(v57) < 0)
      operator delete(__p[0]);
    pthread_mutex_unlock(v7);
    v46 = sub_19BFB18CC();
    sub_19BFB198C(v46, *a1);
    result = 0;
    *a1 = 0;
    return result;
  }
  if ((v33 & 1) == 0)
    goto LABEL_42;
LABEL_34:
  pthread_mutex_unlock(v7);
  v35 = *(_QWORD *)(*a1 + 8);
  if (v35)
  {
    if (*(_QWORD *)(*a1 + 16) > 3uLL)
      return sub_19BFB2EC0((uint64_t)a1, v35);
    if (setjmp((int *)a1 + 86) != 1)
    {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(a1[7] - 24) + 56), 0);
      v47 = sub_19BF8E6F8(a1 + 7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/compressed_connector.cpp", 83);
      sub_19BF8E6F8(v47, (uint64_t)"(", 1);
      v48 = (_QWORD *)std::ostream::operator<<();
      v49 = sub_19BF8E6F8(v48, (uint64_t)") [", 3);
      v50 = sub_19BF8E6F8(v49, (uint64_t)"cmmap_->size() >= 2", 19);
      v51 = sub_19BF8E6F8(v50, (uint64_t)"] ", 2);
      v52 = sub_19BF8E6F8(v51, (uint64_t)"file size is invalid: ", 22);
      v53 = strlen(a2);
      sub_19BF8E6F8(v52, (uint64_t)a2, v53);
      longjmp((int *)a1 + 86, 1);
    }
  }
  else if (setjmp((int *)a1 + 86) != 1)
  {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(a1[7] - 24) + 56), 0);
    v37 = sub_19BF8E6F8(a1 + 7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/compressed_connector.cpp", 83);
    sub_19BF8E6F8(v37, (uint64_t)"(", 1);
    v38 = (_QWORD *)std::ostream::operator<<();
    v39 = sub_19BF8E6F8(v38, (uint64_t)") [", 3);
    v40 = sub_19BF8E6F8(v39, (uint64_t)"cmmap_->begin()", 15);
    v41 = sub_19BF8E6F8(v40, (uint64_t)"] ", 2);
    sub_19BF8E6F8(v41, (uint64_t)"matrix is NULL", 14);
    longjmp((int *)a1 + 86, 1);
  }
  return 0;
}

void sub_19BFB2850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFB28DC(uint64_t a1, char *a2, const char *a3)
{
  void **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  off_t st_size;
  void *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  size_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  size_t v46;
  stat v47;

  sub_19BFB318C(a1);
  sub_19BF8E43C(&v47, a2);
  v6 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v47.st_dev;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v47.st_uid;
  if (!strcmp(a3, "r"))
  {
    *(_DWORD *)(a1 + 532) = 0;
    v14 = open(a2, 0);
    *(_DWORD *)(a1 + 528) = v14;
    if (v14 < 0)
    {
      if (setjmp((int *)(a1 + 336)) != 1)
      {
        std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
        v15 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/mmap.h", 65);
        sub_19BF8E6F8(v15, (uint64_t)"(", 1);
        v16 = (_QWORD *)std::ostream::operator<<();
        v17 = sub_19BF8E6F8(v16, (uint64_t)") [", 3);
        v18 = sub_19BF8E6F8(v17, (uint64_t)"(fd = ::open(filename, flag | O_BINARY)) >= 0", 45);
        v19 = sub_19BF8E6F8(v18, (uint64_t)"] ", 2);
        v20 = sub_19BF8E6F8(v19, (uint64_t)"open failed: ", 13);
        v21 = strlen(a2);
        sub_19BF8E6F8(v20, (uint64_t)a2, v21);
        longjmp((int *)(a1 + 336), 1);
      }
      goto LABEL_22;
    }
    goto LABEL_11;
  }
  if (!strcmp(a3, "r+"))
  {
    *(_DWORD *)(a1 + 532) = 514;
    v14 = open(a2, 514, 384);
    *(_DWORD *)(a1 + 528) = v14;
    if (v14 < 0)
    {
      if (setjmp((int *)(a1 + 336)) != 1)
      {
        std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
        v33 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/mmap.h", 65);
        sub_19BF8E6F8(v33, (uint64_t)"(", 1);
        v34 = (_QWORD *)std::ostream::operator<<();
        v35 = sub_19BF8E6F8(v34, (uint64_t)") [", 3);
        v36 = sub_19BF8E6F8(v35, (uint64_t)"(fd = ::open(filename, flag | O_BINARY, S_IRUSR | S_IWUSR)) >= 0", 64);
        v37 = sub_19BF8E6F8(v36, (uint64_t)"] ", 2);
        v38 = sub_19BF8E6F8(v37, (uint64_t)"open failed: ", 13);
        v39 = strlen(a2);
        sub_19BF8E6F8(v38, (uint64_t)a2, v39);
        longjmp((int *)(a1 + 336), 1);
      }
      goto LABEL_22;
    }
LABEL_11:
    if (fstat(v14, &v47) < 0)
    {
      if (setjmp((int *)(a1 + 336)) != 1)
      {
        std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
        v25 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/mmap.h", 65);
        sub_19BF8E6F8(v25, (uint64_t)"(", 1);
        v26 = (_QWORD *)std::ostream::operator<<();
        v27 = sub_19BF8E6F8(v26, (uint64_t)") [", 3);
        v28 = sub_19BF8E6F8(v27, (uint64_t)"fstat(fd, &st) >= 0", 19);
        v29 = sub_19BF8E6F8(v28, (uint64_t)"] ", 2);
        v30 = sub_19BF8E6F8(v29, (uint64_t)"failed to get file size: ", 25);
        v31 = strlen(a2);
        sub_19BF8E6F8(v30, (uint64_t)a2, v31);
        longjmp((int *)(a1 + 336), 1);
      }
      goto LABEL_22;
    }
    st_size = v47.st_size;
    *(_QWORD *)(a1 + 16) = v47.st_size;
    if (st_size)
    {
      v23 = mmap(0, st_size, *(_DWORD *)(a1 + 532) & 2 | 1u, 1, *(_DWORD *)(a1 + 528), 0);
      if (v23 == (void *)-1)
      {
        if (setjmp((int *)(a1 + 336)) != 1)
        {
          std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
          v40 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/mmap.h", 65);
          sub_19BF8E6F8(v40, (uint64_t)"(", 1);
          v41 = (_QWORD *)std::ostream::operator<<();
          v42 = sub_19BF8E6F8(v41, (uint64_t)") [", 3);
          v43 = sub_19BF8E6F8(v42, (uint64_t)"(p = reinterpret_cast<char*>(mmap(0, length, prot, MAP_SHARED, fd, 0))) != MAP_FAILED", 85);
          v44 = sub_19BF8E6F8(v43, (uint64_t)"] ", 2);
          v45 = sub_19BF8E6F8(v44, (uint64_t)"mmap() failed: ", 15);
          v46 = strlen(a2);
          sub_19BF8E6F8(v45, (uint64_t)a2, v46);
          longjmp((int *)(a1 + 336), 1);
        }
        goto LABEL_22;
      }
      v24 = v23;
      madvise(v23, *(_QWORD *)(a1 + 16), 1);
    }
    else
    {
      v24 = 0;
    }
    *(_QWORD *)(a1 + 8) = v24;
    close(*(_DWORD *)(a1 + 528));
    *(_DWORD *)(a1 + 528) = -1;
    return 1;
  }
  if (setjmp((int *)(a1 + 336)) != 1)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
    v7 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/mmap.h", 65);
    sub_19BF8E6F8(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_19BF8E6F8(v8, (uint64_t)") [", 3);
    v10 = sub_19BF8E6F8(v9, (uint64_t)"false", 5);
    v11 = sub_19BF8E6F8(v10, (uint64_t)"] ", 2);
    v12 = sub_19BF8E6F8(v11, (uint64_t)"unknown open mode: ", 19);
    v13 = strlen(a2);
    sub_19BF8E6F8(v12, (uint64_t)a2, v13);
    longjmp((int *)(a1 + 336), 1);
  }
LABEL_22:
  sub_19BFB318C(a1);
  return 0;
}

void sub_19BFB2EA8()
{
  uint64_t v0;

  sub_19BFAA53C(v0);
}

uint64_t sub_19BFB2EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;

  v3 = *(unsigned __int16 *)(a2 + 8);
  *(_WORD *)(a1 + 32) = v3;
  v4 = *(unsigned __int16 *)(a2 + 10);
  *(_WORD *)(a1 + 34) = v4;
  if (v3)
  {
    if (v4)
    {
      v5 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v5)
      {
        v6 = a2 + 16 + 4 * v3 + 4;
        *(_QWORD *)(a1 + 8) = a2 + 16;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v6 + 2 * v5;
        return 1;
      }
      v24 = (int *)(a1 + 344);
      if (setjmp((int *)(a1 + 344)) != 1)
      {
        v26 = *(_QWORD *)(a1 + 56);
        v25 = (_QWORD *)(a1 + 56);
        std::ios_base::clear((std::ios_base *)((char *)v25 + *(_QWORD *)(v26 - 24)), 0);
        v27 = sub_19BF8E6F8(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/compressed_connector.cpp", 83);
        sub_19BF8E6F8(v27, (uint64_t)"(", 1);
        v28 = (_QWORD *)std::ostream::operator<<();
        v29 = sub_19BF8E6F8(v28, (uint64_t)") [", 3);
        v30 = sub_19BF8E6F8(v29, (uint64_t)"num_elements > 0", 16);
        v31 = sub_19BF8E6F8(v30, (uint64_t)"] ", 2);
        sub_19BF8E6F8(v31, (uint64_t)"number of elements is invalid", 29);
        longjmp(v24, 1);
      }
    }
    else
    {
      v16 = (int *)(a1 + 344);
      if (setjmp((int *)(a1 + 344)) != 1)
      {
        v18 = *(_QWORD *)(a1 + 56);
        v17 = (_QWORD *)(a1 + 56);
        std::ios_base::clear((std::ios_base *)((char *)v17 + *(_QWORD *)(v18 - 24)), 0);
        v19 = sub_19BF8E6F8(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/compressed_connector.cpp", 83);
        sub_19BF8E6F8(v19, (uint64_t)"(", 1);
        v20 = (_QWORD *)std::ostream::operator<<();
        v21 = sub_19BF8E6F8(v20, (uint64_t)") [", 3);
        v22 = sub_19BF8E6F8(v21, (uint64_t)"rsize_ > 0", 10);
        v23 = sub_19BF8E6F8(v22, (uint64_t)"] ", 2);
        sub_19BF8E6F8(v23, (uint64_t)"left size is invalid", 20);
        longjmp(v16, 1);
      }
    }
  }
  else
  {
    v8 = (int *)(a1 + 344);
    if (setjmp((int *)(a1 + 344)) != 1)
    {
      v10 = *(_QWORD *)(a1 + 56);
      v9 = (_QWORD *)(a1 + 56);
      std::ios_base::clear((std::ios_base *)((char *)v9 + *(_QWORD *)(v10 - 24)), 0);
      v11 = sub_19BF8E6F8(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/compressed_connector.cpp", 83);
      sub_19BF8E6F8(v11, (uint64_t)"(", 1);
      v12 = (_QWORD *)std::ostream::operator<<();
      v13 = sub_19BF8E6F8(v12, (uint64_t)") [", 3);
      v14 = sub_19BF8E6F8(v13, (uint64_t)"lsize_ > 0", 10);
      v15 = sub_19BF8E6F8(v14, (uint64_t)"] ", 2);
      sub_19BF8E6F8(v15, (uint64_t)"left size is invalid", 20);
      longjmp(v8, 1);
    }
  }
  return 0;
}

void sub_19BFB317C()
{
  uint64_t v0;

  sub_19BFAA53C(v0);
}

void *sub_19BFB318C(uint64_t a1)
{
  int v2;
  void *result;

  v2 = *(_DWORD *)(a1 + 528);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 528) = -1;
  }
  result = *(void **)(a1 + 8);
  if (result)
    result = (void *)munmap(result, *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

char *sub_19BFB31D0(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  char *v5;
  uint64_t **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_QWORD *)v5 + 4);
        if (v8 <= a2)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x48uLL);
    *((_QWORD *)v7 + 4) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_19BFA96D8(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_19BFB32A8(uint64_t a1)
{
  sub_19BFB32CC(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFB32CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E3D141F8;
  sub_19BFB318C(a1);
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 56) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 160);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

_QWORD *sub_19BFB3388(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1A1AD0A84](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_19BFB345C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1A1AD0C7C](v1 + 424);
  _Unwind_Resume(a1);
}

void sub_19BFB3494()
{
  const std::locale::facet *v0;
  std::locale v1;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A50] + *(_QWORD *)(*MEMORY[0x1E0DE4A50] - 24)));
  v0 = std::locale::use_facet(&v1, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v0->__vftable[2].~facet_0)(v0, 10);
  std::locale::~locale(&v1);
  std::ostream::put();
  std::ostream::flush();
  exit(-1);
}

void sub_19BFB3514(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  sub_19BF8E3F8(a1);
}

_QWORD *sub_19BFB3530(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1A1AD0A90](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1A1AD0C7C](a1 + 53);
  return a1;
}

void *sub_19BFB3588(unint64_t a1)
{
  if (a1 >> 62)
    sub_19BF8E6D0();
  return operator new(4 * a1);
}

double sub_19BFB35BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v1 = *(_QWORD **)(a1 + 200);
  v2 = v1[2];
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  v3 = v1[4];
  if (v3)
  {
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0;
  }
  v4 = v1[6];
  if (v4)
  {
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
  }
  v5 = *(_QWORD *)(a1 + 184);
  if (v5)
    *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  result = 0.75;
  *(_OWORD *)(a1 + 24) = xmmword_19C072170;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  return result;
}

BOOL sub_19BFB3624(_QWORD *a1)
{
  return a1[1] && a1[12] != a1[13] && a1[9] != a1[10];
}

uint64_t sub_19BFB3650(uint64_t a1)
{
  return **(_QWORD **)(a1 + 72);
}

uint64_t sub_19BFB365C(_QWORD *a1)
{
  return *(_QWORD *)(a1[12] + 8 * (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1));
}

uint64_t sub_19BFB368C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t sub_19BFB3694(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_19BFB369C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * a2);
}

uint64_t sub_19BFB36A8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * a2);
}

uint64_t sub_19BFB36B4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_19BFB36BC(uint64_t a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return (*(uint64_t (**)(uint64_t, char *, size_t))(*(_QWORD *)a1 + 80))(a1, __s, v4);
}

void sub_19BFB36F8(char **a1, const void *a2, size_t a3)
{
  size_t v6;
  uint64_t v7;
  void *v8;

  (*(void (**)(char **))*a1)(a1);
  v6 = a3 + 4;
  sub_19BFB567C(a1 + 9, a3 + 4);
  sub_19BFB567C(a1 + 12, a3 + 4);
  if (((*((uint64_t (**)(char **, uint64_t))*a1 + 21))(a1, 64) & 1) != 0
    || (*((unsigned int (**)(char **, uint64_t))*a1 + 21))(a1, 4))
  {
    v7 = (*((uint64_t (**)(char **))*a1 + 25))(a1);
    v8 = (void *)sub_19BFB4CDC(v7, a3);
    memcpy(v8, a2, a3);
    a2 = v8;
  }
  a1[1] = (char *)a2;
  a1[2] = (char *)a3;
  bzero(a1[9], 8 * v6);
  bzero(a1[12], 8 * v6);
}

uint64_t sub_19BFB37CC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_19BFB37D4(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

double sub_19BFB37DC(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double sub_19BFB37E4(uint64_t a1, float a2)
{
  double result;

  result = a2;
  *(double *)(a1 + 24) = result;
  return result;
}

float sub_19BFB37F0(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t sub_19BFB37FC()
{
  return 1;
}

uint64_t sub_19BFB3804(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;

  if (!a1[26])
    return 0;
  v1 = (*(uint64_t (**)(_QWORD *))(*a1 + 200))(a1);
  v2 = (_QWORD *)sub_19BFB54C8(v1);
  v3 = (_QWORD *)v2[2];
  v4 = v2[3];
  if (v3 == (_QWORD *)v4)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = (_QWORD *)*v3;
    if (v4 - (uint64_t)v3 >= 9)
    {
      v7 = 0;
      v8 = (unint64_t)(v4 - (_QWORD)v3) >> 3;
      v9 = v8 - 2;
      if (v8 < 2)
        v9 = v8 - 1;
      v10 = v9 >> 1;
      v11 = v3;
      do
      {
        v12 = &v11[v7];
        v15 = v12[1];
        v13 = v12 + 1;
        v14 = v15;
        v16 = (2 * v7) | 1;
        v17 = 2 * v7 + 2;
        if (v17 < (uint64_t)v8 && *(_QWORD *)(v14 + 16) > *(_QWORD *)(v13[1] + 16))
        {
          v14 = v13[1];
          ++v13;
          v16 = v17;
        }
        *v11 = v14;
        v11 = v13;
        v7 = v16;
      }
      while (v16 <= v10);
      v18 = (_QWORD *)(v4 - 8);
      if (v18 == v13)
      {
        *v13 = v6;
      }
      else
      {
        *v13 = *v18;
        *v18 = v6;
        sub_19BFC37D4((uint64_t)v3, (uint64_t)(v13 + 1), v13 + 1 - v3);
      }
    }
    v4 = v2[3] - 8;
    v2[3] = v4;
    result = *v6;
    v20 = v6[1];
    if (*(_BYTE *)(*v6 + 124) == 2)
      break;
    if (v20 && (v21 = *(_QWORD *)(v20 + 32), v22 = v2[1], v21 <= v22))
    {
      if (v21 == v22)
        goto LABEL_44;
      if (v5 > 15)
        return 0;
      ++v5;
    }
    else
    {
      v23 = *(uint64_t **)(result + 40);
      if (v23)
      {
        do
        {
          sub_19BFC3688(v2 + 6);
          v25 = v24;
          v26 = *v23;
          v27 = v6[4] - *(unsigned __int16 *)(*v23 + 96);
          v28 = *((int *)v23 + 4);
          v24[3] = v6[3] + v28;
          v29 = *(_QWORD *)(v26 + 112) + v28 + v6[3];
          v24[1] = v6;
          v24[2] = v29;
          *v24 = v26;
          v24[4] = v27;
          v31 = (_QWORD *)v2[3];
          v30 = v2[4];
          if ((unint64_t)v31 >= v30)
          {
            v33 = v2[2];
            v34 = ((uint64_t)v31 - v33) >> 3;
            if ((unint64_t)(v34 + 1) >> 61)
              sub_19BF8EB40();
            v35 = v30 - v33;
            v36 = v35 >> 2;
            if (v35 >> 2 <= (unint64_t)(v34 + 1))
              v36 = v34 + 1;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v37 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v37 = v36;
            if (v37)
              v37 = (unint64_t)sub_19BFAC524(v37);
            else
              v38 = 0;
            v39 = (_QWORD *)(v37 + 8 * v34);
            *v39 = v25;
            v32 = (uint64_t)(v39 + 1);
            v41 = (char *)v2[2];
            v40 = (char *)v2[3];
            if (v40 != v41)
            {
              do
              {
                v42 = *((_QWORD *)v40 - 1);
                v40 -= 8;
                *--v39 = v42;
              }
              while (v40 != v41);
              v40 = (char *)v2[2];
            }
            v2[2] = v39;
            v2[3] = v32;
            v2[4] = v37 + 8 * v38;
            if (v40)
              operator delete(v40);
          }
          else
          {
            *v31 = v24;
            v32 = (uint64_t)(v31 + 1);
          }
          v2[3] = v32;
          sub_19BFC37D4(v2[2], v32, (v32 - v2[2]) >> 3);
          v23 = (uint64_t *)v23[1];
        }
        while (v23);
        v4 = v2[3];
      }
    }
    v3 = (_QWORD *)v2[2];
    if (v3 == (_QWORD *)v4)
      return 0;
  }
  if (!v20)
    return result;
LABEL_44:
  v43 = (_QWORD *)*v6;
  do
  {
    v44 = *(_QWORD **)v20;
    v43[1] = *(_QWORD *)v20;
    *v44 = v43;
    v20 = *(_QWORD *)(v20 + 8);
    v43 = v44;
  }
  while (v20);
  return result;
}

uint64_t sub_19BFB3AA8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 208) = a2;
  return result;
}

uint64_t sub_19BFB3AB0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 208);
}

uint64_t sub_19BFB3AB8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

BOOL sub_19BFB3AC0(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 40) & a2) != 0;
}

uint64_t sub_19BFB3AD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

uint64_t sub_19BFB3AD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) |= a2;
  return result;
}

uint64_t sub_19BFB3AE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) &= ~a2;
  return result;
}

uint64_t sub_19BFB3AF8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 200);
}

double sub_19BFB3B00(uint64_t a1)
{
  _OWORD *v1;
  double result;

  v1 = (_OWORD *)sub_19BFAC3A8(*(_QWORD **)(*(_QWORD *)(a1 + 200) + 16));
  result = 0.0;
  *v1 = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  v1[3] = 0u;
  v1[4] = 0u;
  v1[5] = 0u;
  v1[6] = 0u;
  v1[7] = 0u;
  return result;
}

uint64_t sub_19BFB3B30(_QWORD *a1)
{
  uint64_t v2;

  v2 = sub_19BFB5454((uint64_t)a1);
  return sub_19BFB537C(a1, v2);
}

uint64_t sub_19BFB3B58(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19BFB5454((uint64_t)a1);
  return sub_19BFB5248(a1, a2, v4);
}

uint64_t sub_19BFB3B88(char ***a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_19BFB5454((uint64_t)a1);
  return sub_19BFB4FA4(a1, a2, v4);
}

uint64_t sub_19BFB3BB8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  __int16 v7;

  v5[0] = &off_1E3D14038;
  v5[1] = 0;
  v5[2] = a3;
  v6 = a2;
  v7 = 0;
  v3 = sub_19BFB537C(a1, (uint64_t)v5);
  v5[0] = &off_1E3D14038;
  if ((_BYTE)v7 && v6)
    MEMORY[0x1A1AD0CB8](v6, 0x1000C8077774924);
  return v3;
}

void sub_19BFB3C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (a13)
      MEMORY[0x1A1AD0CB8](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFB3C58(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  __int16 v8;

  v6[0] = &off_1E3D14038;
  v6[1] = 0;
  v6[2] = a4;
  v7 = a3;
  v8 = 0;
  v4 = sub_19BFB5248(a1, a2, (uint64_t)v6);
  v6[0] = &off_1E3D14038;
  if ((_BYTE)v8 && v7)
    MEMORY[0x1A1AD0CB8](v7, 0x1000C8077774924);
  return v4;
}

void sub_19BFB3CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (a13)
      MEMORY[0x1A1AD0CB8](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFB3CF8(char ***a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  __int16 v8;

  v6[0] = &off_1E3D14038;
  v6[1] = 0;
  v6[2] = a4;
  v7 = a3;
  v8 = 0;
  v4 = sub_19BFB4FA4(a1, a2, (uint64_t)v6);
  v6[0] = &off_1E3D14038;
  if ((_BYTE)v8 && v7)
    MEMORY[0x1A1AD0CB8](v7, 0x1000C8077774924);
  return v4;
}

void sub_19BFB3D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (a13)
      MEMORY[0x1A1AD0CB8](a13, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19BFB3D98(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144) != *(_QWORD *)(a1 + 152);
}

uint64_t sub_19BFB3DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 144);
  if (v2 == *(_QWORD *)(a1 + 152))
    return 0;
  else
    return *(unsigned __int8 *)(v2 + a2);
}

uint64_t sub_19BFB3DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 120);
  if (v2 == *(_QWORD *)(a1 + 128))
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * a2);
}

void sub_19BFB3DE0(unint64_t *a1, uint64_t a2, char a3)
{
  unint64_t *v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char v22;

  v6 = a1[18];
  v5 = a1 + 18;
  if (v6 == a1[19])
  {
    v8 = (*(uint64_t (**)(unint64_t *))(*a1 + 88))(a1);
    v9 = v8 + 4;
    v6 = a1[18];
    v10 = (_BYTE *)a1[19];
    v11 = &v10[-v6];
    v12 = v8 + 4 - (_QWORD)&v10[-v6];
    if (v8 + 4 <= (unint64_t)&v10[-v6])
    {
      if (v8 + 4 < (unint64_t)&v10[-v6])
        a1[19] = v6 + v9;
    }
    else
    {
      v13 = a1[20];
      if (v13 - (unint64_t)v10 >= v12)
      {
        do
        {
          *v10++ = 0;
          --v12;
        }
        while (v12);
        a1[19] = v8 + 4 + v6;
      }
      else
      {
        if ((v9 & 0x8000000000000000) != 0)
          sub_19BF8EB40();
        v14 = v13 - v6;
        v15 = 2 * (v13 - v6);
        if (v15 <= v9)
          v15 = v8 + 4;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        v17 = (unint64_t)operator new(v16);
        v18 = &v11[v17];
        v19 = (char *)(v17 + v9);
        do
          (v11++)[v17] = 0;
        while ((_BYTE *)v9 != v11);
        v20 = (char *)(v17 + v16);
        if (v10 == (_BYTE *)v6)
        {
          v17 = (unint64_t)v18;
        }
        else
        {
          v21 = &v10[~v6];
          do
          {
            v22 = *--v10;
            (v21--)[v17] = v22;
          }
          while (v10 != (_BYTE *)v6);
          v10 = (_BYTE *)*v5;
        }
        a1[18] = v17;
        a1[19] = (unint64_t)v19;
        a1[20] = (unint64_t)v20;
        if (v10)
          operator delete(v10);
      }
      v6 = *v5;
    }
  }
  *(_BYTE *)(v6 + a2) = a3;
}

_QWORD *sub_19BFB3F28(_QWORD *result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  if (a2 < a3 && a4)
  {
    v5 = a3;
    v7 = result;
    if (result[15] == result[16])
    {
      v10 = (*(uint64_t (**)(_QWORD *))(*result + 88))(result);
      v11 = v10 + 4;
      v13 = v7[15];
      v12 = (_QWORD *)v7[16];
      v14 = ((uint64_t)v12 - v13) >> 3;
      if (v10 + 4 <= v14)
      {
        if (v11 < v14)
          v7[16] = v13 + 8 * v11;
      }
      else
      {
        v15 = v10;
        v16 = v7[17];
        if (v11 - v14 <= (v16 - (uint64_t)v12) >> 3)
        {
          v30 = &v12[v11 - v14];
          v31 = 8 * v10 - 8 * v14 + 32;
          do
          {
            *v12++ = 0;
            v31 -= 8;
          }
          while (v31);
          v7[16] = v30;
        }
        else
        {
          if (v11 >> 61)
            sub_19BF8EB40();
          v17 = v16 - v13;
          v18 = (v16 - v13) >> 2;
          if (v18 <= v11)
            v18 = v10 + 4;
          if (v17 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          v20 = (char *)sub_19BFAC524(v19);
          v22 = &v20[8 * v14];
          v23 = &v20[8 * v11];
          v24 = 8 * v15 - 8 * v14 + 32;
          v25 = v22;
          do
          {
            *(_QWORD *)v25 = 0;
            v25 += 8;
            v24 -= 8;
          }
          while (v24);
          v26 = &v20[8 * v21];
          v28 = (char *)v7[15];
          v27 = (char *)v7[16];
          if (v27 != v28)
          {
            do
            {
              v29 = *((_QWORD *)v27 - 1);
              v27 -= 8;
              *((_QWORD *)v22 - 1) = v29;
              v22 -= 8;
            }
            while (v27 != v28);
            v27 = (char *)v7[15];
          }
          v7[15] = v22;
          v7[16] = v23;
          v7[17] = v26;
          if (v27)
            operator delete(v27);
        }
      }
    }
    v8 = (*(uint64_t (**)(_QWORD *))(*v7 + 88))(v7);
    if (v8 < v5)
      v5 = v8;
    (*(void (**)(_QWORD *, unint64_t, uint64_t))(*v7 + 288))(v7, a2, 1);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*v7 + 288))(v7, v5, 1);
    v9 = a2 + 1;
    if (a2 + 1 < v5)
    {
      do
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*v7 + 288))(v7, v9++, 2);
      while (v5 != v9);
    }
    *(_QWORD *)(v7[15] + 8 * a2) = a4;
  }
  return result;
}

void sub_19BFB4104(uint64_t a1, const char *a2)
{
  uint64_t v4;
  size_t v5;
  char *v6;
  size_t v7;
  size_t v8;
  char **v9;
  char **v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char **v19;
  char **v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  char v26;
  const char *v27;
  const char **v28;
  char v29;
  const char *v30;
  char *v31;
  std::string::size_type v32;
  _OWORD *v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void **v38;
  void **v39;
  __int128 v40;
  char *v41;
  _OWORD *v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void **v47;
  void **v48;
  __int128 v49;
  char *v50;
  uint64_t v51;
  std::string::size_type size;
  int v53;
  std::string::size_type v54;
  size_t v55;
  char *v56;
  char *v57;
  std::string *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  size_t v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  size_t v88;
  void *__p[2];
  void *v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  std::string v97;
  void **v98;
  void **v99;
  void **v100;
  void **v101;
  unint64_t *v102;
  char *v103;
  char *v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  v5 = strlen(a2) + 1;
  v6 = (char *)sub_19BFB4CDC(v4, v5);
  strncpy(v6, a2, v5);
  v7 = strlen(a2);
  v8 = strlen(v6);
  v9 = 0;
  v10 = 0;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = &v6[v8];
    v88 = v7;
    while (1)
    {
      v14 = v13;
      if (v6 != v13)
      {
        v14 = v6;
        while (*v14 != 10)
        {
          if (++v14 == v13)
          {
            v14 = v13;
            break;
          }
        }
      }
      *v14 = 0;
      if ((unint64_t)v10 >= v11)
      {
        v15 = v10 - v9;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          sub_19BF8EB40();
        if ((uint64_t)(v11 - (_QWORD)v9) >> 2 > v16)
          v16 = (uint64_t)(v11 - (_QWORD)v9) >> 2;
        if (v11 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v17 = (unint64_t)sub_19BFAC524(v17);
        else
          v18 = 0;
        v19 = (char **)(v17 + 8 * v15);
        *v19 = v6;
        v20 = v19 + 1;
        while (v10 != v9)
        {
          v21 = *--v10;
          *--v19 = v21;
        }
        v11 = v17 + 8 * v18;
        if (v9)
          operator delete(v9);
        v9 = v19;
        v10 = v20;
        v7 = v88;
      }
      else
      {
        *v10++ = v6;
      }
      ++v12;
      if (v14 == v13)
        break;
      v6 = v14 + 1;
      if (v12 == v7)
      {
        v12 = v7;
        break;
      }
    }
  }
  else
  {
    v12 = 0;
  }
  if (v12 != v10 - v9)
  {
    v80 = sub_19BF8E6F8(MEMORY[0x1E0DE4A50], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/lattice_impl.cpp", 75);
    sub_19BF8E6F8(v80, (uint64_t)"(", 1);
    v81 = (_QWORD *)std::ostream::operator<<();
    v82 = sub_19BF8E6F8(v81, (uint64_t)") [", 3);
    v83 = sub_19BF8E6F8(v82, (uint64_t)"lsize == lines.size()", 21);
    sub_19BF8E6F8(v83, (uint64_t)"] ", 2);
    goto LABEL_102;
  }
  memset(&v97, 0, sizeof(v97));
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  if (v10 != v9)
  {
    v22 = 0;
    v23 = v12 <= 1 ? 1 : v12;
    while (2)
    {
      v24 = v9[v22];
      if (strcmp("EOS", v24))
      {
        v103 = 0;
        v104 = 0;
        v25 = strlen(v24);
        v26 = 0;
        v27 = &v24[v25];
        v28 = (const char **)&v103;
        while (1)
        {
          v29 = v26;
          if (v24 == v27)
            break;
          v30 = v24;
          while (*v30 != 9)
          {
            if (++v30 == v27)
              goto LABEL_44;
          }
          *v30 = 0;
          *v28++ = v24;
          v26 = 1;
          v24 = v30 + 1;
          if ((v29 & 1) != 0)
            goto LABEL_45;
        }
        v24 = v27;
LABEL_44:
        *v27 = 0;
        *v28 = v24;
        if ((v26 & 1) == 0)
          break;
LABEL_45:
        v31 = v103;
        v32 = strlen(v103);
        std::string::append(&v97, v103, v32);
        sub_19BF8E43C(__p, v31);
        v33 = v95;
        if ((unint64_t)v95 >= v96)
        {
          v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v95[-v94] >> 3);
          v36 = v35 + 1;
          if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_19BF8EB40();
          if (0x5555555555555556 * ((uint64_t)(v96 - v94) >> 3) > v36)
            v36 = 0x5555555555555556 * ((uint64_t)(v96 - v94) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - v94) >> 3) >= 0x555555555555555)
            v37 = 0xAAAAAAAAAAAAAAALL;
          else
            v37 = v36;
          v102 = &v96;
          if (v37)
            v38 = (void **)sub_19BF8EB54((uint64_t)&v96, v37);
          else
            v38 = 0;
          v39 = &v38[3 * v35];
          v98 = v38;
          v99 = v39;
          v101 = &v38[3 * v37];
          v40 = *(_OWORD *)__p;
          v39[2] = v90;
          *(_OWORD *)v39 = v40;
          __p[1] = 0;
          v90 = 0;
          __p[0] = 0;
          v100 = v39 + 3;
          sub_19BF8EACC(&v94, &v98);
          v41 = v95;
          sub_19BF8ECAC((uint64_t)&v98);
          v95 = v41;
          if (SHIBYTE(v90) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v34 = *(_OWORD *)__p;
          *((_QWORD *)v95 + 2) = v90;
          *v33 = v34;
          v95 = (char *)v33 + 24;
        }
        sub_19BF8E43C(__p, v104);
        v42 = v92;
        if ((unint64_t)v92 >= v93)
        {
          v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v92[-v91] >> 3);
          v45 = v44 + 1;
          if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_19BF8EB40();
          if (0x5555555555555556 * ((uint64_t)(v93 - v91) >> 3) > v45)
            v45 = 0x5555555555555556 * ((uint64_t)(v93 - v91) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - v91) >> 3) >= 0x555555555555555)
            v46 = 0xAAAAAAAAAAAAAAALL;
          else
            v46 = v45;
          v102 = &v93;
          if (v46)
            v47 = (void **)sub_19BF8EB54((uint64_t)&v93, v46);
          else
            v47 = 0;
          v48 = &v47[3 * v44];
          v98 = v47;
          v99 = v48;
          v101 = &v47[3 * v46];
          v49 = *(_OWORD *)__p;
          v48[2] = v90;
          *(_OWORD *)v48 = v49;
          __p[1] = 0;
          v90 = 0;
          __p[0] = 0;
          v100 = v48 + 3;
          sub_19BF8EACC(&v91, &v98);
          v50 = v92;
          sub_19BF8ECAC((uint64_t)&v98);
          v92 = v50;
          if (SHIBYTE(v90) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v43 = *(_OWORD *)__p;
          *((_QWORD *)v92 + 2) = v90;
          *v42 = v43;
          v92 = (char *)v42 + 24;
        }
        if (++v22 != v23)
          continue;
      }
      break;
    }
  }
  if (&v92[-v91] != &v95[-v94])
  {
    v84 = sub_19BF8E6F8(MEMORY[0x1E0DE4A50], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/lattice_impl.cpp", 75);
    sub_19BF8E6F8(v84, (uint64_t)"(", 1);
    v85 = (_QWORD *)std::ostream::operator<<();
    v86 = sub_19BF8E6F8(v85, (uint64_t)") [", 3);
    v87 = sub_19BF8E6F8(v86, (uint64_t)"features.size() == surfaces.size()", 34);
    sub_19BF8E6F8(v87, (uint64_t)"] ", 2);
LABEL_102:
    sub_19BFB3494();
  }
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
  v53 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
  v54 = v97.__r_.__value_.__r.__words[0];
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v97.__r_.__value_.__l.__size_;
  v55 = size + 1;
  v56 = (char *)sub_19BFB4CDC(v51, size + 1);
  v57 = v56;
  if (v53 >= 0)
    v58 = &v97;
  else
    v58 = (std::string *)v54;
  strncpy(v56, (const char *)v58, v55);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 72))(a1, v57);
  v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  v60 = sub_19BFAC3A8(*(_QWORD **)(v59 + 16));
  *(_OWORD *)(v60 + 96) = 0u;
  *(_OWORD *)(v60 + 112) = 0u;
  *(_OWORD *)(v60 + 64) = 0u;
  *(_OWORD *)(v60 + 80) = 0u;
  *(_OWORD *)(v60 + 32) = 0u;
  *(_OWORD *)(v60 + 48) = 0u;
  *(_OWORD *)v60 = 0u;
  *(_OWORD *)(v60 + 16) = 0u;
  *(_QWORD *)(v60 + 48) = "BOS/EOS";
  *(_QWORD *)(v60 + 56) = "BOS/EOS";
  *(_BYTE *)(v60 + 124) = 2;
  v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  v62 = sub_19BFAC3A8(*(_QWORD **)(v61 + 16));
  *(_OWORD *)(v62 + 96) = 0u;
  *(_OWORD *)(v62 + 112) = 0u;
  *(_OWORD *)(v62 + 64) = 0u;
  *(_OWORD *)(v62 + 80) = 0u;
  *(_OWORD *)(v62 + 32) = 0u;
  *(_OWORD *)(v62 + 48) = 0u;
  *(_OWORD *)v62 = 0u;
  *(_OWORD *)(v62 + 16) = 0u;
  *(_QWORD *)(v62 + 48) = "BOS/EOS";
  *(_QWORD *)(v62 + 56) = "BOS/EOS";
  *(_BYTE *)(v62 + 124) = 3;
  *(_QWORD *)(v60 + 48) = *(_QWORD *)(a1 + 8);
  **(_QWORD **)(a1 + 72) = v60;
  if (v95 == (char *)v94)
  {
    v68 = v60;
  }
  else
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    do
    {
      v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      v67 = sub_19BFAC3A8(*(_QWORD **)(v66 + 16));
      v68 = v67;
      *(_QWORD *)(v67 + 120) = 0;
      *(_OWORD *)(v67 + 104) = 0u;
      *(_OWORD *)(v67 + 88) = 0u;
      *(_OWORD *)(v67 + 72) = 0u;
      *(_OWORD *)(v67 + 56) = 0u;
      *(_OWORD *)(v67 + 40) = 0u;
      *(_OWORD *)(v67 + 24) = 0u;
      *(_OWORD *)(v67 + 8) = 0u;
      *(_QWORD *)v67 = v60;
      *(_QWORD *)(v60 + 8) = v67;
      *(_QWORD *)(v67 + 48) = *(_QWORD *)(a1 + 8) + v65;
      v69 = v94;
      v70 = v94 + v63;
      if (*(char *)(v94 + v63 + 23) < 0)
        v71 = *(_QWORD *)(v70 + 8);
      else
        LOWORD(v71) = *(unsigned __int8 *)(v94 + v63 + 23);
      *(_WORD *)(v67 + 96) = v71;
      v72 = *(char *)(v70 + 23);
      if (v72 < 0)
        v73 = *(_QWORD *)(v69 + v63 + 8);
      else
        LOWORD(v73) = v72;
      *(_WORD *)(v67 + 98) = v73;
      *(_BYTE *)(v67 + 124) = 0;
      *(_DWORD *)(v67 + 80) = 0;
      *(_QWORD *)(v67 + 112) = 0;
      v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      v75 = v91 + v63;
      if (*(char *)(v91 + v63 + 23) < 0)
      {
        v77 = *(const char **)v75;
        v76 = *(_QWORD *)(v75 + 8);
      }
      else
      {
        v76 = *(unsigned __int8 *)(v91 + v63 + 23);
        v77 = (const char *)(v91 + v63);
      }
      v78 = v76 + 1;
      v79 = (char *)sub_19BFB4CDC(v74, v76 + 1);
      *(_QWORD *)(v68 + 56) = strncpy(v79, v77, v78);
      *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v65) = v68;
      v65 += *(unsigned __int16 *)(v68 + 96);
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v65) = v68;
      ++v64;
      v63 += 24;
      v60 = v68;
    }
    while (v64 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v95[-v94] >> 3));
  }
  *(_QWORD *)(v68 + 8) = v62;
  *(_QWORD *)v62 = v68;
  v98 = (void **)&v91;
  sub_19BF8EA40(&v98);
  v98 = (void **)&v94;
  sub_19BF8EA40(&v98);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (v9)
    operator delete(v9);
}

void sub_19BFB4920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  void *v28;

  a10 = &a16;
  sub_19BF8EA40((void ***)&a10);
  a16 = &a19;
  sub_19BF8EA40((void ***)&a16);
  if (a27 < 0)
    operator delete(__p);
  if (v28)
    operator delete(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFB49C4(uint64_t a1)
{
  uint64_t result;

  result = a1 + 48;
  if (*(char *)(a1 + 71) < 0)
    return *(_QWORD *)result;
  return result;
}

std::string *sub_19BFB49E0(std::string *a1, char *a2)
{
  return sub_19BFB4BEC(a1 + 2, a2);
}

void sub_19BFB49EC(uint64_t a1)
{
  sub_19BFB4A10(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFB4A10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = off_1E3D13E68;
  *(_QWORD *)(a1 + 192) = &off_1E3D13E28;
  v2 = *(_QWORD *)(a1 + 200);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)(a1 + 176) = &off_1E3D13D68;
  v3 = *(_QWORD *)(a1 + 184);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 144);
  if (v4)
  {
    *(_QWORD *)(a1 + 152) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 120);
  if (v5)
  {
    *(_QWORD *)(a1 + 128) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(_QWORD *)(a1 + 104) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

_QWORD *sub_19BFB4ACC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D13D68;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19BFB4B0C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D13D68;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB4B5C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D13E28;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19BFB4B9C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D13E28;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD0CDCLL);
}

std::string *sub_19BFB4BEC(std::string *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_19BFB4C20(a1, __s, v4);
}

std::string *sub_19BFB4C20(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string::size_type v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = __dst->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    __dst->__r_.__value_.__l.__size_ = __len;
  else
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

uint64_t sub_19BFB4CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t result;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
  }
  else
  {
    v3 = operator new();
    *(_QWORD *)v3 = &off_1E3D14098;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0x2000;
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v4 = 0;
    *(_QWORD *)(a1 + 48) = v3;
  }
  v7 = a2 + 1;
  v8 = *(_QWORD *)(v3 + 16) - v4;
  v9 = *(_QWORD *)(v3 + 40);
  if (v9 >= v8 >> 4)
  {
LABEL_10:
    if (v7 <= *(_QWORD *)(v3 + 48))
      v14 = *(_QWORD *)(v3 + 48);
    else
      v14 = a2 + 1;
    v15 = operator new[]();
    v16 = v15;
    v18 = *(char **)(v3 + 16);
    v17 = *(_QWORD *)(v3 + 24);
    if ((unint64_t)v18 >= v17)
    {
      v20 = *(char **)(v3 + 8);
      v21 = (v18 - v20) >> 4;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60)
        sub_19BF8EB40();
      v23 = v17 - (_QWORD)v20;
      if (v23 >> 3 > v22)
        v22 = v23 >> 3;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 60)
          sub_19BF8E6D0();
        v25 = (char *)operator new(16 * v24);
        v20 = *(char **)(v3 + 8);
        v18 = *(char **)(v3 + 16);
      }
      else
      {
        v25 = 0;
      }
      v27 = &v25[16 * v21];
      v28 = &v25[16 * v24];
      *(_QWORD *)v27 = v14;
      *((_QWORD *)v27 + 1) = v16;
      v19 = v27 + 16;
      if (v18 != v20)
      {
        do
        {
          *((_OWORD *)v27 - 1) = *((_OWORD *)v18 - 1);
          v27 -= 16;
          v18 -= 16;
        }
        while (v18 != v20);
        v20 = *(char **)(v3 + 8);
      }
      *(_QWORD *)(v3 + 8) = v27;
      *(_QWORD *)(v3 + 16) = v19;
      *(_QWORD *)(v3 + 24) = v28;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_QWORD *)v18 = v14;
      *((_QWORD *)v18 + 1) = v15;
      v19 = v18 + 16;
    }
    *(_QWORD *)(v3 + 16) = v19;
    v29 = *(_QWORD *)(v3 + 8);
    v30 = (((uint64_t)v19 - v29) >> 4) - 1;
    *(_QWORD *)(v3 + 32) += v7;
    *(_QWORD *)(v3 + 40) = v30;
    return *(_QWORD *)(v29 + 16 * v30 + 8);
  }
  else
  {
    v10 = v8 >> 4;
    v11 = *(_QWORD *)(v3 + 32);
    v12 = (unint64_t *)(v4 + 16 * v9);
    while (1)
    {
      v13 = *v12;
      v12 += 2;
      if (v11 + v7 < v13)
        break;
      v11 = 0;
      ++v9;
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)(v3 + 40) = v9;
      if (v10 == v9)
        goto LABEL_10;
    }
    result = *(_QWORD *)(v4 + 16 * v9 + 8) + v11;
    *(_QWORD *)(v3 + 32) = v11 + v7;
  }
  return result;
}

void sub_19BFB4EE8(_QWORD *a1)
{
  sub_19BFB4F0C(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB4F0C(_QWORD *a1)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_1E3D14098;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (char *)a1[1];
  v3 = (char *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (*(_QWORD *)&v2[16 * v5 + 8])
    {
      MEMORY[0x1A1AD0CB8](*(_QWORD *)&v2[16 * v5 + 8], 0x1000C8077774924);
      v5 = a1[5];
      v2 = (char *)a1[1];
      v3 = (char *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < (v3 - v2) >> 4);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19BFB4FA4(char ***a1, uint64_t a2, uint64_t a3)
{
  const char *v4;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  _OWORD v13[3];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)(a3 + 8) = 0;
  if ((unint64_t)(a2 - 513) < 0xFFFFFFFFFFFFFE00)
  {
    v4 = "nbest size must be 1 <= nbest <= 512";
LABEL_19:
    ((void (*)(char ***, const char *))(*a1)[40])(a1, v4);
    return 0;
  }
  v6 = a2;
  do
  {
    if (!((unsigned int (*)(char ***))(*a1)[16])(a1))
      break;
    v7 = a1[21];
    if (v7)
    {
      if (!((unsigned int (*)(char ***))(*a1)[1])(a1))
        return 0;
      v8 = v7[71];
      v9 = (uint64_t)v7[72];
      v10 = (char **)((char *)v7 + (v9 >> 1));
      if ((v9 & 1) != 0)
        v8 = *(char **)(*v10 + v8);
      if ((((uint64_t (*)(_QWORD *, char ***, uint64_t))v8)(v10, a1, a3) & 1) == 0)
        return 0;
    }
    else
    {
      sub_19BFB5140((uint64_t)a1, a3);
    }
    --v6;
  }
  while (v6);
  if (a1[21])
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
    memset(v13, 0, sizeof(v13));
    BYTE12(v18) = 4;
    v11 = ((uint64_t (*)(char ***))(*a1)[8])(a1);
    *(_QWORD *)&v14 = v11 + ((uint64_t (*)(char ***))(*a1)[11])(a1);
    if (!sub_19BFBCDD0(a1[21], (uint64_t)a1, (uint64_t)v13, a3))
      return 0;
  }
  if (sub_19BFB959C(a3, 1))
    *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 0;
  if (*(_BYTE *)(a3 + 33) || (result = *(_QWORD *)(a3 + 24)) == 0)
  {
    v4 = "output buffer overflow";
    goto LABEL_19;
  }
  return result;
}

void sub_19BFB5124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_19BFAC558((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFB5140(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 8);
  v4 = (uint64_t *)(v3 + 8);
  if (*(_QWORD *)(v3 + 8))
  {
    do
    {
      v5 = *(const void **)(v3 + 48);
      v6 = *(unsigned __int16 *)(v3 + 96);
      if (sub_19BFB959C(a2, v6))
      {
        memcpy((void *)(*(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 8)), v5, v6);
        *(_QWORD *)(a2 + 8) += v6;
      }
      if (sub_19BFB959C(a2, 1))
        *(_BYTE *)(*(_QWORD *)(a2 + 24) + (*(_QWORD *)(a2 + 8))++) = 9;
      v7 = sub_19BFB967C(a2, *(char **)(v3 + 56));
      if (sub_19BFB959C(v7, 1))
        *(_BYTE *)(*(_QWORD *)(a2 + 24) + (*(_QWORD *)(a2 + 8))++) = 10;
      v3 = *v4;
      v8 = *v4;
      v9 = *(_QWORD *)(v8 + 8);
      v4 = (uint64_t *)(v8 + 8);
    }
    while (v9);
  }
  return sub_19BFB967C(a2, "EOS\n");
}

uint64_t sub_19BFB5248(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char **v6;
  const char *v7;
  const void *v8;
  size_t v9;
  uint64_t result;

  *(_QWORD *)(a3 + 8) = 0;
  if (!a2)
  {
    v7 = "node is NULL";
LABEL_15:
    (*(void (**)(_QWORD *, const char *))(*a1 + 320))(a1, v7);
    return 0;
  }
  v6 = (char **)a1[21];
  if (v6)
  {
    if ((sub_19BFBCDD0(v6, (uint64_t)a1, a2, a3) & 1) == 0)
      return 0;
  }
  else
  {
    v8 = *(const void **)(a2 + 48);
    v9 = *(unsigned __int16 *)(a2 + 96);
    if (sub_19BFB959C(a3, v9))
    {
      memcpy((void *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(a3 + 8)), v8, v9);
      *(_QWORD *)(a3 + 8) += v9;
    }
    if (sub_19BFB959C(a3, 1))
      *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 9;
    sub_19BFB967C(a3, *(char **)(a2 + 56));
  }
  if (sub_19BFB959C(a3, 1))
    *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 0;
  if (*(_BYTE *)(a3 + 33) || (result = *(_QWORD *)(a3 + 24)) == 0)
  {
    v7 = "output buffer overflow";
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_19BFB537C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[21];
  if (v4)
  {
    if (!(*(unsigned int (**)(_QWORD *))(*a1 + 8))(a1))
      return 0;
    v5 = *(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(v4 + 568);
    v6 = *(_QWORD *)(v4 + 576);
    v7 = (_QWORD *)(v4 + (v6 >> 1));
    if ((v6 & 1) != 0)
      v5 = *(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v7 + v5);
    if ((v5(v7, a1, a2) & 1) == 0)
      return 0;
  }
  else
  {
    sub_19BFB5140((uint64_t)a1, a2);
  }
  if (sub_19BFB959C(a2, 1))
    *(_BYTE *)(*(_QWORD *)(a2 + 24) + (*(_QWORD *)(a2 + 8))++) = 0;
  if (*(_BYTE *)(a2 + 33) || (result = *(_QWORD *)(a2 + 24)) == 0)
  {
    (*(void (**)(_QWORD *, const char *))(*a1 + 320))(a1, "output buffer overflow");
    return 0;
  }
  return result;
}

uint64_t sub_19BFB5454(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 184);
  if (!v1)
  {
    v1 = operator new();
    *(_QWORD *)v1 = &off_1E3D14038;
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_WORD *)(v1 + 32) = 1;
    v3 = *(_QWORD *)(a1 + 184);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)(a1 + 184) = v1;
  }
  return v1;
}

uint64_t sub_19BFB54C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 64);
  if (!v1)
  {
    v1 = operator new();
    *(_QWORD *)v1 = &off_1E3D140F8;
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 48) = &off_1E3D142F8;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_QWORD *)(v1 + 88) = 0;
    *(_QWORD *)(v1 + 96) = 512;
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)(a1 + 64) = v1;
  }
  return v1;
}

void sub_19BFB555C(_QWORD *a1)
{
  sub_19BFB5580(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB5580(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_1E3D142F8;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x1A1AD0CB8](v2[v5], 0x1020C80E349F4B1);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19BFB5618(_QWORD *a1)
{
  sub_19BFB563C(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB563C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D140F8;
  sub_19BFB5580(a1 + 6);
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19BFB567C(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    sub_19BF8EB40();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)sub_19BFAC524(v10);
  v12 = &v11[8 * v5];
  v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  v15 = &v12[8 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      *((_QWORD *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

uint64_t sub_19BFB5774(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E3D13E68;
  *(_OWORD *)(a1 + 24) = xmmword_19C072170;
  *(_DWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v3 = a1 + 96;
  v4 = a1 + 72;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a2;
  *(_QWORD *)(a1 + 176) = &off_1E3D13D68;
  *(_QWORD *)(a1 + 184) = 0;
  v5 = operator new();
  *(_QWORD *)v5 = &off_1E3D14318;
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3D14298;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 512;
  *(_QWORD *)(v5 + 8) = &off_1E3D13DE8;
  *(_QWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 24) = &off_1E3D13E08;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = &off_1E3D13D88;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = &off_1E3D13DA8;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  v7 = (_OWORD *)operator new[]();
  *v7 = xmmword_19C072180;
  v8 = v7 + 1;
  do
  {
    *(_BYTE *)v8 = 0;
    *(_QWORD *)((char *)v8 + 12) = 0;
    *(_QWORD *)((char *)v8 + 4) = 0;
    *((_DWORD *)v8 + 5) = 0;
    v8 = (_OWORD *)((char *)v8 + 24);
  }
  while (v8 != v7 + 769);
  *(_QWORD *)(v5 + 96) = &off_1E3D14058;
  *(_QWORD *)(v5 + 104) = v7 + 1;
  *(_QWORD *)(a1 + 192) = &off_1E3D13E28;
  *(_QWORD *)(a1 + 200) = v5;
  *(_QWORD *)(a1 + 208) = 0;
  sub_19BFB5A50(v3);
  sub_19BFB5A50(v4);
  return a1;
}

void sub_19BFB5924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  uint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v20 = (void *)v14[9];
  if (v20)
  {
    v14[10] = v20;
    operator delete(v20);
  }
  v14[7] = v13;
  v21 = v14[8];
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v14[5] = v19;
  v22 = v14[6];
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v14[3] = v18;
  v23 = v14[4];
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v14[1] = v17;
  v24 = v14[2];
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  MEMORY[0x1A1AD0CDC](v14, 0xB1C40E0AC591ALL);
  *(_QWORD *)(v10 + 176) = v16;
  v25 = *(_QWORD *)(v10 + 184);
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(void **)(v10 + 144);
  if (v26)
  {
    *(_QWORD *)(v10 + 152) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(v10 + 120);
  if (v27)
  {
    *(_QWORD *)(v10 + 128) = v27;
    operator delete(v27);
  }
  v28 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 104) = v28;
    operator delete(v28);
  }
  v29 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 80) = v29;
    operator delete(v29);
  }
  if (*(char *)(v10 + 71) < 0)
    operator delete(*v15);
  _Unwind_Resume(a1);
}

void sub_19BFB5A50(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v1 = *(_BYTE **)a1;
  if (!((*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 16))
  {
    v3 = *(_BYTE **)(a1 + 8);
    v4 = (char *)operator new(0x10000uLL);
    v5 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
    v6 = v5;
    if (v3 != v1)
    {
      v6 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v7 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        *((_QWORD *)v6 - 1) = v7;
        v6 -= 8;
      }
      while (v3 != v1);
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4 + 0x10000;
    if (v1)
      operator delete(v1);
  }
}

void sub_19BFB5AE4(_QWORD *a1)
{
  sub_19BFB5B08(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB5B08(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_1E3D14058;
  v2 = a1[1];
  if (v2)
  {
    v5 = *(_QWORD *)(v2 - 8);
    v4 = v2 - 8;
    v3 = v5;
    if (v5)
    {
      v6 = 24 * v3;
      do
      {
        sub_19BFAD520((const void **)(v4 + v6), 0);
        v6 -= 24;
      }
      while (v6);
    }
    MEMORY[0x1A1AD0CB8](v4 - 8, 0x1060C8035ECB431);
  }
  return a1;
}

_QWORD *sub_19BFB5B84(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D13DA8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19BFB5BC4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D13DA8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB5C14(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D13D88;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19BFB5C54(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D13D88;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB5CA4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D13E08;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19BFB5CE4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D13E08;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB5D34(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D13DE8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19BFB5D74(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D13DE8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19BFB5DC8(_QWORD *a1)
{
  sub_19BFB5DEC(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB5DEC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = &off_1E3D14298;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_10;
  }
  v5 = 0;
  do
  {
    v6 = v2[v5];
    if (v6)
    {
      v7 = *(_QWORD *)(v6 - 8);
      if (v7)
      {
        v8 = v7 << 7;
        do
        {
          sub_19BFAC558((const void **)(v6 - 24 + v8), 0);
          v8 -= 128;
        }
        while (v8);
      }
      MEMORY[0x1A1AD0CB8](v6 - 16, 0x1070C80FE750B47);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_10:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19BFB5EB0(_QWORD *a1)
{
  sub_19BFB5ED4(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB5ED4(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_1E3D14318;
  sub_19BFB5B08(a1 + 12);
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  a1[7] = &off_1E3D13DA8;
  v3 = a1[8];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  a1[5] = &off_1E3D13D88;
  v4 = a1[6];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  a1[3] = &off_1E3D13E08;
  v5 = a1[4];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  a1[1] = &off_1E3D13DE8;
  v6 = a1[2];
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

CFStringRef LXAnalyzerCandidateCopySurface(uint64_t a1)
{
  void **v1;
  CFIndex v2;
  CFStringRef v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a1 + 39) < 0)
  {
    sub_19BFB6040(__p, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 32);
  }
  if (v6 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  if (v6 >= 0)
    v2 = HIBYTE(v6);
  else
    v2 = (CFIndex)__p[1];
  v3 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UniChar *)v1, v2);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_19BFB6024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_19BFB6040(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = __dst;
  if (a3 > 0xA)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    v6 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB)
      v6 = a3 | 3;
    v7 = sub_19BFAED5C(v6 + 1);
    v5[1] = a3;
    v5[2] = v8 | 0x8000000000000000;
    *v5 = v7;
    v5 = v7;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, 2 * a3 + 2);
}

double LXAnalyzerCandidateGetScore(uint64_t a1)
{
  return (float)((float)*(int *)(a1 + 40) / -800.0);
}

uint64_t LXAnalyzerCandidateGetMorphemeCount(uint64_t a1)
{
  return (int)((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 4);
}

double LXAnalyzerCandidateGetNodeScore(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

double LXAnalyzerCandidateGetLinguisticScore(uint64_t a1)
{
  return (float)((float)*(int *)(a1 + 56) / -800.0);
}

uint64_t LXAnalyzerCandidateGetFlags(uint64_t a1)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 64); ; i += 16)
  {
    if (i == *(_QWORD *)(a1 + 72))
      return 0;
    if (!*(_QWORD *)i)
      __assert_rtn("LXEntryGetMetaFlags", "LXEntry.cpp", 45, "entry");
    if ((*(_WORD *)(*(_QWORD *)i + 54) & 0x380) != 0)
      break;
  }
  return 1;
}

uint64_t LXAnalyzerCandidateEnumerateMorphemeLexiconEntries(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  BOOL v6;
  char v7;

  v2 = *(_QWORD *)(result + 64);
  v3 = *(_QWORD *)(result + 72);
  if (v2 != v3)
  {
    v5 = v2 + 16;
    do
    {
      v7 = 0;
      result = (*(uint64_t (**)(uint64_t, _QWORD, char *))(a2 + 16))(a2, *(_QWORD *)(v5 - 16), &v7);
      if (v7)
        v6 = 1;
      else
        v6 = v5 == v3;
      v5 += 16;
    }
    while (!v6);
  }
  return result;
}

uint64_t LXAnalyzerCandidateEnumerateMorphemeLexiconEntriesAndLengths(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v5;
  char v6;

  v2 = *(_QWORD *)(result + 64);
  v3 = *(_QWORD *)(result + 72);
  if (v2 != v3)
  {
    do
    {
      v6 = 0;
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, char *))(a2 + 16))(a2, *(_QWORD *)v2, *(unsigned __int16 *)(v2 + 8), &v6);
      v2 += 16;
      if (v6)
        v5 = 1;
      else
        v5 = v2 == v3;
    }
    while (!v5);
  }
  return result;
}

void sub_19BFB6250(uint64_t a1)
{
  sub_19BFB9338(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFB6274(uint64_t a1, char *a2, const char *a3)
{
  _QWORD *v6;
  uint64_t v7;
  pthread_mutex_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  size_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  size_t v35;
  char *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  int64x2_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  int *v58;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  size_t v67;
  unsigned int v68;
  unsigned int v69;
  void *__p[2];
  unsigned __int8 v71;

  v6 = (_QWORD *)(a1 + 72);
  sub_19BFB4BEC((std::string *)(a1 + 72), a2);
  v7 = sub_19BFB6DF0();
  *(_QWORD *)(a1 + 16) = sub_19BFB6F98(v7, (uint64_t)v6);
  v8 = (pthread_mutex_t *)(v7 + 64);
  pthread_mutex_lock(v8);
  v9 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v9 + 8))
  {
    v10 = *(char *)(a1 + 95) < 0 ? (char *)*v6 : (char *)v6;
    if ((sub_19BFB7234(v9, v10, a3) & 1) == 0)
    {
      v36 = (char *)sub_19BFAA4D8(*(_QWORD *)(a1 + 16) + 48);
      v37 = sub_19BF8E43C(__p, v36);
      if ((v71 & 0x80u) == 0)
        v38 = v37;
      else
        v38 = __p[0];
      if ((v71 & 0x80u) == 0)
        v39 = v71;
      else
        v39 = (uint64_t)__p[1];
      sub_19BF8E6F8((_QWORD *)(a1 + 96), (uint64_t)v38, v39);
      if ((char)v71 < 0)
        operator delete(__p[0]);
      pthread_mutex_unlock(v8);
      goto LABEL_50;
    }
  }
  pthread_mutex_unlock(v8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12 <= 0x63)
  {
    if (setjmp((int *)(a1 + 384)) != 1)
    {
      std::ios_base::clear((std::ios_base *)(a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24)), 0);
      v22 = sub_19BF8E6F8((_QWORD *)(a1 + 96), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/dictionary.cpp", 73);
      sub_19BF8E6F8(v22, (uint64_t)"(", 1);
      v23 = (_QWORD *)std::ostream::operator<<();
      v24 = sub_19BF8E6F8(v23, (uint64_t)") [", 3);
      v25 = sub_19BF8E6F8(v24, (uint64_t)"dmmap_->size() >= 100", 21);
      v26 = sub_19BF8E6F8(v25, (uint64_t)"] ", 2);
      v27 = sub_19BF8E6F8(v26, (uint64_t)"dictionary file is broken: ", 27);
      v28 = strlen(a2);
      sub_19BF8E6F8(v27, (uint64_t)a2, v28);
      longjmp((int *)(a1 + 384), 1);
    }
    goto LABEL_50;
  }
  v13 = *(unsigned int **)(v11 + 8);
  if (v12 != (*v13 ^ 0xEF718F77))
  {
    if (setjmp((int *)(a1 + 384)) != 1)
    {
      std::ios_base::clear((std::ios_base *)(a1 + 96 + *(_QWORD *)(*(_QWORD *)(a1 + 96) - 24)), 0);
      v29 = sub_19BF8E6F8((_QWORD *)(a1 + 96), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/dictionary.cpp", 73);
      sub_19BF8E6F8(v29, (uint64_t)"(", 1);
      v30 = (_QWORD *)std::ostream::operator<<();
      v31 = sub_19BF8E6F8(v30, (uint64_t)") [", 3);
      v32 = sub_19BF8E6F8(v31, (uint64_t)"(magic ^ DictionaryMagicID) == dmmap_->size()", 45);
      v33 = sub_19BF8E6F8(v32, (uint64_t)"] ", 2);
      v34 = sub_19BF8E6F8(v33, (uint64_t)"dictionary file is broken: ", 27);
      v35 = strlen(a2);
      sub_19BF8E6F8(v34, (uint64_t)a2, v35);
      longjmp((int *)(a1 + 384), 1);
    }
    goto LABEL_50;
  }
  *(_DWORD *)(a1 + 48) = v13[1];
  *(_DWORD *)(a1 + 52) = v13[2];
  *(_DWORD *)(a1 + 56) = v13[3];
  *(_DWORD *)(a1 + 60) = v13[4];
  *(_DWORD *)(a1 + 64) = v13[5];
  v69 = v13[7];
  v14 = v13[6];
  v15 = v13[9];
  v68 = v13[8];
  if ((v15 & 0x3FFFFF) == 0)
  {
    *(_DWORD *)(a1 + 8) = v15 >> 28;
    *(_BYTE *)(a1 + 12) = (v15 >> 26) & 3;
    *(_BYTE *)(a1 + 13) = HIBYTE(v15) & 3;
    *(_BYTE *)(a1 + 14) = (v15 >> 22) & 3;
  }
  *(_QWORD *)(a1 + 40) = v13 + 10;
  v16 = (uint64_t)(v13 + 18);
  v17 = operator new();
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_QWORD *)v17 = &off_1E3D138D8;
  *(_QWORD *)(v17 + 8) = 0;
  sub_19BFB7818(v17, v16, v14);
  v18 = *(uint64_t **)(a1 + 616);
  v19 = v18;
  v20 = *(_QWORD *)(a1 + 624);
  if ((unint64_t)v18 >= v20)
  {
    v40 = *(uint64_t **)(a1 + 608);
    v41 = v18 - v40;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 61)
      sub_19BF8EB40();
    v43 = v20 - (_QWORD)v40;
    if (v43 >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 61)
        sub_19BF8E6D0();
      v45 = (char *)operator new(8 * v44);
      v46 = v44;
    }
    else
    {
      v46 = 0;
      v45 = 0;
    }
    v47 = (uint64_t *)&v45[8 * v41];
    v48 = &v45[8 * v46];
    *v47 = v17;
    v21 = v47 + 1;
    if (v18 == v40)
    {
      v52 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      v49 = v47;
      do
      {
        v50 = v19 - 1;
        v51 = *(v19 - 1);
        *v50 = 0;
        *--v49 = v51;
        --v19;
      }
      while (v50 != v40);
      v47 = v49;
      v52 = *(int64x2_t *)(a1 + 608);
    }
    *(_QWORD *)(a1 + 608) = v47;
    *(_QWORD *)(a1 + 616) = v21;
    *(_QWORD *)(a1 + 624) = v48;
    v53 = v52.i64[1];
    v54 = (void *)v52.i64[0];
    if (v52.i64[1] != v52.i64[0])
    {
      do
      {
        v56 = (void *)(v53 - 8);
        v55 = *(_QWORD *)(v53 - 8);
        *(_QWORD *)(v53 - 8) = 0;
        if (v55)
          (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
        v53 = (uint64_t)v56;
      }
      while (v56 != v54);
    }
    if (v54)
      operator delete(v54);
  }
  else
  {
    *v18 = v17;
    v21 = v18 + 1;
  }
  *(_QWORD *)(a1 + 616) = v21;
  *(_QWORD *)(a1 + 24) = v16 + v14;
  v57 = v16 + v14 + v69;
  if (v68)
    *(_QWORD *)(a1 + 32) = v57;
  if (v57 + v68 != *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
  {
    v58 = (int *)(a1 + 384);
    if (setjmp((int *)(a1 + 384)) != 1)
    {
      v60 = (_QWORD *)(a1 + 96);
      std::ios_base::clear((std::ios_base *)((char *)v60 + *(_QWORD *)(*v60 - 24)), 0);
      v61 = sub_19BF8E6F8(v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/dictionary.cpp", 73);
      sub_19BF8E6F8(v61, (uint64_t)"(", 1);
      v62 = (_QWORD *)std::ostream::operator<<();
      v63 = sub_19BF8E6F8(v62, (uint64_t)") [", 3);
      v64 = sub_19BF8E6F8(v63, (uint64_t)"ptr == dmmap_->end()", 20);
      v65 = sub_19BF8E6F8(v64, (uint64_t)"] ", 2);
      v66 = sub_19BF8E6F8(v65, (uint64_t)"dictionary file is broken: ", 27);
      v67 = strlen(a2);
      sub_19BF8E6F8(v66, (uint64_t)a2, v67);
      longjmp(v58, 1);
    }
LABEL_50:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    return 0;
  }
  return 1;
}

void sub_19BFB6898(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_19BFAA53C(v15);
}

void sub_19BFB68C0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x19BFB68D4);
}

uint64_t sub_19BFB68E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_19BFB68E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 608);
  v5 = *(_QWORD *)(a1 + 616);
  if (v4 == v5)
    return 0;
  v6 = *(unsigned int *)(a1 + 576);
  if (v6 >= (v5 - v4) >> 3)
    return 0;
  result = *(_QWORD *)(v4 + 8 * v6);
  if (!result)
    return result;
  v10 = 0;
  v11[0] = &off_1E3D14C50;
  v11[1] = a4;
  v11[2] = &v10;
  v12 = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)result + 88))(result, a2, a3, v11);
  v8 = v12;
  if (v12 == v11)
  {
    v9 = 4;
    v8 = v11;
    goto LABEL_9;
  }
  if (v12)
  {
    v9 = 5;
LABEL_9:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v10;
}

void sub_19BFB69C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFB69FC()
{
  return 0;
}

uint64_t sub_19BFB6A04@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int16 v8;
  int v9;

  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 12) = 0;
  *(_QWORD *)(a4 + 4) = 0;
  *(_DWORD *)(a4 + 20) = 0;
  v5 = *(_QWORD *)(result + 608);
  v6 = *(_QWORD *)(result + 616);
  if (v5 != v6)
  {
    v7 = *(unsigned int *)(result + 576);
    if (v7 < (v6 - v5) >> 3)
    {
      result = *(_QWORD *)(v5 + 8 * v7);
      if (result)
      {
        v8 = a3;
        v9 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)result + 80))(result, a2, a3, &v9);
        if ((_DWORD)result)
          *(_DWORD *)(a4 + 8) = v9;
        *(_WORD *)(a4 + 12) = v8;
      }
    }
  }
  return result;
}

void sub_19BFB6A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFAD520((const void **)(v1 + 16), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFB6AA0(uint64_t a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return (*(uint64_t (**)(uint64_t, char *, size_t))(*(_QWORD *)a1 + 56))(a1, __s, v4);
}

void sub_19BFB6AEC(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = 0;
}

uint64_t sub_19BFB6B00()
{
  return 0;
}

uint64_t sub_19BFB6B08()
{
  return 0;
}

uint64_t sub_19BFB6B10()
{
  return 0;
}

void sub_19BFB6B18(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_19BFB6B24(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_19BFB6B30()
{
  return 1;
}

uint64_t sub_19BFB6B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;

  v3 = *(unsigned int *)(a2 + 8);
  if (*(_QWORD *)(a1 + 616) - *(_QWORD *)(a1 + 608) == 8)
    return *(_QWORD *)(a1 + 24) + 12 * (v3 >> 8) + 12 * a3;
  else
    return *(_QWORD *)(a1 + 24)
         + 12
         * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 632) + 8 * *(unsigned int *)(a1 + 576))
                           + 4 * (a3 + (v3 >> 8)));
}

uint64_t sub_19BFB6B8C(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 8);
}

unint64_t sub_19BFB6B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;
  unint64_t i;
  uint64_t v8;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 128))(a1, a2, i);
      sub_19BFB6C44(*(_QWORD *)(a3 + 24), v8, 0);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2);
    }
  }
  return result;
}

uint64_t sub_19BFB6C1C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 32) + *(unsigned int *)(a2 + 8);
}

uint64_t sub_19BFB6C2C()
{
  return 0;
}

_QWORD *sub_19BFB6C34@<X0>(_QWORD *a1@<X8>)
{
  return sub_19BFAEC9C(a1, byte_19C073B72);
}

uint64_t sub_19BFB6C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  if (!a1)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v5, &v4);
}

void sub_19BFB6C80()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFB6C94(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D14C50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19BFB6CCC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D14C50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19BFB6CEC(uint64_t result, int *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = *(_QWORD *)(a3 + 8);
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD **)(result + 16);
  v7 = (*v6)++;
  v8 = v5 + 24 * v7;
  *(_DWORD *)(v8 + 8) = v3;
  *(_WORD *)(v8 + 12) = v4;
  return result;
}

uint64_t sub_19BFB6D18(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D13670))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFB6D54()
{
  return &unk_1E3D13670;
}

uint64_t sub_19BFB6D60(uint64_t result)
{
  unint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)(result + 52) != 3)
  {
    v1 = (unint64_t *)result;
    v2 = *(_QWORD **)(result + 616);
    v3 = *(_QWORD **)(result + 608);
    while (v2 != v3)
    {
      v4 = *--v2;
      result = v4;
      *v2 = 0;
      if (v4)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v1[77] = (unint64_t)v3;
    v1[74] = v1[73];
    v1[80] = v1[79];
    v5 = v1[2];
    if (v5)
    {
      if (*(_QWORD *)(v5 + 16))
      {
        v6 = sub_19BFB6DF0();
        result = sub_19BFB198C(v6, v1[2]);
        v1[2] = 0;
      }
    }
  }
  return result;
}

uint64_t sub_19BFB6DF0()
{
  _QWORD *v0;

  pthread_mutex_lock(&stru_1EE414E68);
  if (!qword_1EE417408)
  {
    v0 = (_QWORD *)operator new();
    v0[2] = 0;
    *v0 = &off_1E3D13BC8;
    v0[1] = v0 + 2;
    v0[6] = 0;
    v0[5] = 0;
    v0[3] = 0;
    v0[4] = v0 + 5;
    sub_19BFB1EAC((uint64_t)(v0 + 7));
    qword_1EE417408 = (uint64_t)v0;
  }
  pthread_mutex_unlock(&stru_1EE414E68);
  return qword_1EE417408;
}

void sub_19BFB6E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFB1F0C(*(char **)(v1 + 40));
  sub_19BFB1F54(*(char **)(v1 + 16));
  MEMORY[0x1A1AD0CDC](v1, 0x10B3C401829B6ABLL);
  _Unwind_Resume(a1);
}

void sub_19BFB6EB4(uint64_t a1)
{
  sub_19BFB6ED8(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFB6ED8(uint64_t a1)
{
  pthread_mutex_t *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  *(_QWORD *)a1 = &off_1E3D13BC8;
  v2 = (pthread_mutex_t *)(a1 + 64);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  v3 = *(_QWORD **)(a1 + 8);
  if (v3 != (_QWORD *)(a1 + 16))
  {
    do
    {
      v4 = v3[7];
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != (_QWORD *)(a1 + 16));
  }
  pthread_mutex_unlock(v2);
  sub_19BFB2058(a1 + 56);
  sub_19BFB1F0C(*(char **)(a1 + 40));
  sub_19BFB1F54(*(char **)(a1 + 16));
  return a1;
}

unint64_t sub_19BFB6F98(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  _QWORD **v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  _QWORD *v13;
  uint64_t **v14;
  _OWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  void **v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = (pthread_mutex_t *)(a1 + 64);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 64));
  v5 = (_QWORD **)(a1 + 8);
  v6 = (uint64_t **)sub_19BFAA740(a1 + 8, (_QWORD *)a2);
  v7 = v6;
  if ((uint64_t **)(a1 + 16) == v6)
  {
    v10 = operator new();
    *(_QWORD *)v10 = &off_1E3D141D8;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    sub_19BFA9BDC(v10 + 48);
    *(_QWORD *)(v10 + 312) = 0;
    *(_QWORD *)(v10 + 320) = 0;
    *(_QWORD *)(v10 + 328) = 0;
    *(_DWORD *)(v10 + 528) = -1;
    v25 = v10;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_19BF8CD70(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v23 = *(_QWORD *)(a2 + 16);
    }
    v24 = v10;
    v11 = *v7;
    if (*v7)
    {
      do
      {
        while (1)
        {
          v12 = (uint64_t **)v11;
          v13 = v11 + 4;
          if ((sub_19BFAAA0C(__p, v11 + 4) & 0x80) == 0)
            break;
          v11 = *v12;
          v14 = v12;
          if (!*v12)
            goto LABEL_14;
        }
        if ((sub_19BFAAA0C(v13, __p) & 0x80) == 0)
          goto LABEL_17;
        v14 = v12 + 1;
        v11 = v12[1];
      }
      while (v11);
    }
    else
    {
      v12 = v7;
      v14 = v7;
    }
LABEL_14:
    v15 = operator new(0x40uLL);
    v15[2] = *(_OWORD *)__p;
    v16 = v23;
    __p[1] = 0;
    v23 = 0;
    __p[0] = 0;
    *((_QWORD *)v15 + 6) = v16;
    *((_QWORD *)v15 + 7) = v10;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v12;
    *v14 = (uint64_t *)v15;
    v17 = (_QWORD *)**v5;
    if (v17)
    {
      *v5 = v17;
      v15 = *v14;
    }
    sub_19BFA96D8(*v7, (uint64_t *)v15);
    ++*(_QWORD *)(a1 + 24);
LABEL_17:
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_19BF8CD70(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v23 = *(_QWORD *)(a2 + 16);
    }
    v24 = 1;
    v8 = v25;
    v18 = sub_19BFB31D0((uint64_t **)(a1 + 32), v25, &v25);
    v19 = (void **)(v18 + 40);
    if (v18[63] < 0)
      operator delete(*v19);
    *(_OWORD *)v19 = *(_OWORD *)__p;
    v20 = v24;
    *((_QWORD *)v18 + 7) = v23;
    *((_QWORD *)v18 + 8) = v20;
  }
  else
  {
    v8 = (unint64_t)v6[7];
    v25 = v8;
    v9 = sub_19BFB31D0((uint64_t **)(a1 + 32), v8, &v25);
    ++*((_QWORD *)v9 + 8);
  }
  pthread_mutex_unlock(v4);
  return v8;
}

void sub_19BFB71E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFB7234(uint64_t a1, char *a2, const char *a3)
{
  void **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  off_t st_size;
  void *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  size_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  size_t v46;
  stat v47;

  sub_19BFB318C(a1);
  sub_19BF8E43C(&v47, a2);
  v6 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v47.st_dev;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v47.st_uid;
  if (!strcmp(a3, "r"))
  {
    *(_DWORD *)(a1 + 532) = 0;
    v14 = open(a2, 0);
    *(_DWORD *)(a1 + 528) = v14;
    if (v14 < 0)
    {
      if (setjmp((int *)(a1 + 336)) != 1)
      {
        std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
        v15 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/mmap.h", 65);
        sub_19BF8E6F8(v15, (uint64_t)"(", 1);
        v16 = (_QWORD *)std::ostream::operator<<();
        v17 = sub_19BF8E6F8(v16, (uint64_t)") [", 3);
        v18 = sub_19BF8E6F8(v17, (uint64_t)"(fd = ::open(filename, flag | O_BINARY)) >= 0", 45);
        v19 = sub_19BF8E6F8(v18, (uint64_t)"] ", 2);
        v20 = sub_19BF8E6F8(v19, (uint64_t)"open failed: ", 13);
        v21 = strlen(a2);
        sub_19BF8E6F8(v20, (uint64_t)a2, v21);
        longjmp((int *)(a1 + 336), 1);
      }
      goto LABEL_22;
    }
    goto LABEL_11;
  }
  if (!strcmp(a3, "r+"))
  {
    *(_DWORD *)(a1 + 532) = 514;
    v14 = open(a2, 514, 384);
    *(_DWORD *)(a1 + 528) = v14;
    if (v14 < 0)
    {
      if (setjmp((int *)(a1 + 336)) != 1)
      {
        std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
        v33 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/mmap.h", 65);
        sub_19BF8E6F8(v33, (uint64_t)"(", 1);
        v34 = (_QWORD *)std::ostream::operator<<();
        v35 = sub_19BF8E6F8(v34, (uint64_t)") [", 3);
        v36 = sub_19BF8E6F8(v35, (uint64_t)"(fd = ::open(filename, flag | O_BINARY, S_IRUSR | S_IWUSR)) >= 0", 64);
        v37 = sub_19BF8E6F8(v36, (uint64_t)"] ", 2);
        v38 = sub_19BF8E6F8(v37, (uint64_t)"open failed: ", 13);
        v39 = strlen(a2);
        sub_19BF8E6F8(v38, (uint64_t)a2, v39);
        longjmp((int *)(a1 + 336), 1);
      }
      goto LABEL_22;
    }
LABEL_11:
    if (fstat(v14, &v47) < 0)
    {
      if (setjmp((int *)(a1 + 336)) != 1)
      {
        std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
        v25 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/mmap.h", 65);
        sub_19BF8E6F8(v25, (uint64_t)"(", 1);
        v26 = (_QWORD *)std::ostream::operator<<();
        v27 = sub_19BF8E6F8(v26, (uint64_t)") [", 3);
        v28 = sub_19BF8E6F8(v27, (uint64_t)"fstat(fd, &st) >= 0", 19);
        v29 = sub_19BF8E6F8(v28, (uint64_t)"] ", 2);
        v30 = sub_19BF8E6F8(v29, (uint64_t)"failed to get file size: ", 25);
        v31 = strlen(a2);
        sub_19BF8E6F8(v30, (uint64_t)a2, v31);
        longjmp((int *)(a1 + 336), 1);
      }
      goto LABEL_22;
    }
    st_size = v47.st_size;
    *(_QWORD *)(a1 + 16) = v47.st_size;
    if (st_size)
    {
      v23 = mmap(0, st_size, *(_DWORD *)(a1 + 532) & 2 | 1u, 1, *(_DWORD *)(a1 + 528), 0);
      if (v23 == (void *)-1)
      {
        if (setjmp((int *)(a1 + 336)) != 1)
        {
          std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
          v40 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/mmap.h", 65);
          sub_19BF8E6F8(v40, (uint64_t)"(", 1);
          v41 = (_QWORD *)std::ostream::operator<<();
          v42 = sub_19BF8E6F8(v41, (uint64_t)") [", 3);
          v43 = sub_19BF8E6F8(v42, (uint64_t)"(p = reinterpret_cast<char*>(mmap(0, length, prot, MAP_SHARED, fd, 0))) != MAP_FAILED", 85);
          v44 = sub_19BF8E6F8(v43, (uint64_t)"] ", 2);
          v45 = sub_19BF8E6F8(v44, (uint64_t)"mmap() failed: ", 15);
          v46 = strlen(a2);
          sub_19BF8E6F8(v45, (uint64_t)a2, v46);
          longjmp((int *)(a1 + 336), 1);
        }
        goto LABEL_22;
      }
      v24 = v23;
      madvise(v23, *(_QWORD *)(a1 + 16), 1);
    }
    else
    {
      v24 = 0;
    }
    *(_QWORD *)(a1 + 8) = v24;
    close(*(_DWORD *)(a1 + 528));
    *(_DWORD *)(a1 + 528) = -1;
    return 1;
  }
  if (setjmp((int *)(a1 + 336)) != 1)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
    v7 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/mmap.h", 65);
    sub_19BF8E6F8(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_19BF8E6F8(v8, (uint64_t)") [", 3);
    v10 = sub_19BF8E6F8(v9, (uint64_t)"false", 5);
    v11 = sub_19BF8E6F8(v10, (uint64_t)"] ", 2);
    v12 = sub_19BF8E6F8(v11, (uint64_t)"unknown open mode: ", 19);
    v13 = strlen(a2);
    sub_19BF8E6F8(v12, (uint64_t)a2, v13);
    longjmp((int *)(a1 + 336), 1);
  }
LABEL_22:
  sub_19BFB318C(a1);
  return 0;
}

void sub_19BFB7800()
{
  uint64_t v0;

  sub_19BFAA53C(v0);
}

uint64_t sub_19BFB7818(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  sub_19BF9C1BC(0, 0, a2, a3);
  v8[0] = &off_1E3D14A40;
  v9 = v8;
  v10 = v4;
  sub_19BFB78E4((uint64_t)v11, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  sub_19BFB7948((uint64_t *)(a1 + 8), &v10);
  sub_19BFB7A04(&v10);
  return 1;
}

uint64_t sub_19BFB78E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t *sub_19BFB7948(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  v4 = *a2;
  *a2 = 0;
  v5 = a2 + 1;
  sub_19BFB7A5C(a1, v4);
  v7 = (uint64_t **)(a1 + 4);
  v6 = (uint64_t *)a1[4];
  a1[4] = 0;
  if (v6 == a1 + 1)
  {
    v8 = 4;
    v6 = a1 + 1;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v8))();
LABEL_6:
  v11 = a2[4];
  v10 = a2 + 4;
  v9 = (uint64_t *)v11;
  if (v11)
  {
    if (v9 == v5)
    {
      *v7 = a1 + 1;
      (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v10 + 24))(*v10, a1 + 1);
      return a1;
    }
    *v7 = v9;
  }
  else
  {
    v10 = a1 + 4;
  }
  *v10 = 0;
  return a1;
}

uint64_t *sub_19BFB7A04(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  sub_19BFB7A5C(a1, 0);
  v2 = (uint64_t *)a1[4];
  if (v2 == a1 + 1)
  {
    v3 = 4;
    v2 = a1 + 1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t *sub_19BFB7A5C(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v4 = v2;
    v3 = result[4];
    if (!v3)
      sub_19BF94AC4();
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

void sub_19BFB7AAC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB7AC0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D14A40;
  return result;
}

void sub_19BFB7AE4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D14A40;
}

void sub_19BFB7AFC(uint64_t a1, void ***a2)
{
  sub_19BF9C24C(*a2);
}

uint64_t sub_19BFB7B04(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D13610))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFB7B40()
{
  return &unk_1E3D13610;
}

_QWORD *sub_19BFB7B4C(_QWORD *a1)
{
  *a1 = &off_1E3D138D8;
  sub_19BFB7A04(a1 + 1);
  return a1;
}

void sub_19BFB7B7C(_QWORD *a1)
{
  *a1 = &off_1E3D138D8;
  sub_19BFB7A04(a1 + 1);
  JUMPOUT(0x1A1AD0CDCLL);
}

BOOL sub_19BFB7BBC(uint64_t *a1, unint64_t a2, unsigned __int8 **a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  unsigned __int8 **v24;
  uint64_t *v25;
  void *__p;
  void *v27;
  unint64_t v28;
  int v29;
  void **p_p;

  (*(void (**)(uint64_t *, _QWORD, _QWORD))(*a1 + 72))(a1, 0, 0);
  __p = 0;
  v27 = 0;
  v28 = 0;
  v24 = a3;
  v25 = a4;
  if (a5)
  {
    p_p = &__p;
    if (a2)
    {
      v10 = 8 * a2;
      do
      {
        v29 = *a5;
        sub_19BFB8F9C((uint64_t *)&p_p, &v29);
        ++a5;
        v10 -= 8;
      }
      while (v10);
    }
  }
  else if (a2)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    LODWORD(v14) = 1;
    do
    {
      if ((unint64_t)v13 >= v12)
      {
        v16 = (v13 - v11) >> 2;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v12 - (_QWORD)v11) >> 1 > v17)
          v17 = (uint64_t)(v12 - (_QWORD)v11) >> 1;
        if (v12 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v18 = (unint64_t)sub_19BFB3588(v18);
        else
          v19 = 0;
        v20 = (_DWORD *)(v18 + 4 * v16);
        *v20 = v14;
        v15 = v20 + 1;
        while (v13 != v11)
        {
          v21 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *--v20 = v21;
        }
        v12 = v18 + 4 * v19;
        __p = v20;
        v28 = v12;
        if (v11)
          operator delete(v11);
        v11 = (char *)v20;
      }
      else
      {
        *(_DWORD *)v13 = v14;
        v15 = v13 + 4;
      }
      v27 = v15;
      v14 = (v14 + 1);
      v13 = (char *)v15;
    }
    while (v14 <= a2);
  }
  v22 = sub_19BFA527C(a1[1], a2, v24, v25, __p);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  return v22 == 0;
}

void sub_19BFB7D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFB7D84(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19BFB7DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D14D58;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19BFB7E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFB7E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D14D00;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19BFB7F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFB7F74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  size_t __len;

  __len = 0;
  v3 = (void *)sub_19BF9C284(*(_QWORD **)(a1 + 8), &__len);
  return sub_19BFA4428(a2, v3, __len);
}

BOOL sub_19BFB7FB8(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t v42;
  char *__p;
  char *v44;
  char *v45;

  v3 = a1;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 72))(a1, 0, 0);
  if (a2[1] == *a2)
  {
    v4 = 0;
    v17 = 0;
    v39 = 0;
    v18 = 0;
    __p = 0;
    v45 = 0;
  }
  else
  {
    v42 = v3;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    LODWORD(v7) = 1;
    do
    {
      if ((unint64_t)v5 >= v6)
      {
        v9 = (v5 - v4) >> 2;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v6 - (_QWORD)v4) >> 1 > v10)
          v10 = (uint64_t)(v6 - (_QWORD)v4) >> 1;
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v11 = (unint64_t)sub_19BFB3588(v11);
        else
          v12 = 0;
        v13 = (char *)(v11 + 4 * v9);
        *(_DWORD *)v13 = v7;
        v8 = v13 + 4;
        while (v5 != v4)
        {
          v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        v6 = v11 + 4 * v12;
        if (v4)
          operator delete(v4);
        v4 = v13;
      }
      else
      {
        *(_DWORD *)v5 = v7;
        v8 = v5 + 4;
      }
      v7 = (v7 + 1);
      v16 = *a2;
      v15 = a2[1];
      v5 = v8;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v15 - *a2) >= v7);
    __p = 0;
    v44 = 0;
    v45 = 0;
    if (v16 == v15)
    {
      v17 = 0;
      v39 = 0;
      v18 = 0;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = v16;
        if (*((char *)v16 + 23) < 0)
          v20 = (uint64_t *)*v16;
        if ((unint64_t)v18 >= v19)
        {
          v21 = (v18 - v17) >> 3;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            sub_19BF8EB40();
          if ((uint64_t)(v19 - (_QWORD)v17) >> 2 > v22)
            v22 = (uint64_t)(v19 - (_QWORD)v17) >> 2;
          if (v19 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
            v23 = (unint64_t)sub_19BFAC524(v23);
          else
            v24 = 0;
          v25 = (char *)(v23 + 8 * v21);
          *(_QWORD *)v25 = v20;
          v26 = v25 + 8;
          while (v18 != v17)
          {
            v27 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *((_QWORD *)v25 - 1) = v27;
            v25 -= 8;
          }
          v19 = v23 + 8 * v24;
          if (v17)
            operator delete(v17);
          v17 = v25;
          v18 = v26;
        }
        else
        {
          *(_QWORD *)v18 = v20;
          v18 += 8;
        }
        if (*((char *)v16 + 23) < 0)
          v28 = v16[1];
        else
          v28 = *((unsigned __int8 *)v16 + 23);
        v29 = v44;
        if (v44 >= v45)
        {
          v31 = __p;
          v32 = (v44 - __p) >> 3;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61)
            sub_19BF8EB40();
          v34 = v45 - __p;
          if ((v45 - __p) >> 2 > v33)
            v33 = v34 >> 2;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            v36 = (char *)sub_19BF965C4((uint64_t)&v45, v35);
            v31 = __p;
            v29 = v44;
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[8 * v32];
          *(_QWORD *)v37 = v28;
          v30 = v37 + 8;
          while (v29 != v31)
          {
            v38 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *((_QWORD *)v37 - 1) = v38;
            v37 -= 8;
          }
          __p = v37;
          v45 = &v36[8 * v35];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *(_QWORD *)v44 = v28;
          v30 = v44 + 8;
        }
        v44 = v30;
        v16 += 3;
      }
      while (v16 != v15);
      v39 = (uint64_t *)__p;
    }
    v3 = v42;
  }
  v40 = sub_19BFA527C(*(_QWORD *)(v3 + 8), (v18 - v17) >> 3, (unsigned __int8 **)v17, v39, v4);
  if (__p)
    operator delete(__p);
  if (v17)
    operator delete(v17);
  if (v4)
    operator delete(v4);
  return v40 == 0;
}

void sub_19BFB8308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;

  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      if (!v13)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  if (!v13)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v13);
  goto LABEL_5;
}

void sub_19BFB8358()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x19BFB8334);
  JUMPOUT(0x19BFB832CLL);
}

BOOL sub_19BFB8368(uint64_t *a1, uint64_t **a2, int **a3)
{
  int *v6;
  int *v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  void *__p;
  char *v36;
  char *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  int v41;

  (*(void (**)(uint64_t *, _QWORD, _QWORD))(*a1 + 72))(a1, 0, 0);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v6 = *a3;
  v7 = a3[1];
  __p = &v38;
  while (v6 != v7)
  {
    v41 = *v6;
    sub_19BFB8F9C((uint64_t *)&__p, &v41);
    ++v6;
  }
  __p = 0;
  v36 = 0;
  v37 = 0;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 == v9)
  {
    v10 = 0;
    v32 = 0;
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = v8;
      if (*((char *)v8 + 23) < 0)
        v13 = (uint64_t *)*v8;
      if ((unint64_t)v11 >= v12)
      {
        v14 = (v11 - v10) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_19BF8EB40();
        if ((uint64_t)(v12 - (_QWORD)v10) >> 2 > v15)
          v15 = (uint64_t)(v12 - (_QWORD)v10) >> 2;
        if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v16 = (unint64_t)sub_19BFAC524(v16);
        else
          v17 = 0;
        v18 = (char *)(v16 + 8 * v14);
        *(_QWORD *)v18 = v13;
        v19 = v18 + 8;
        while (v11 != v10)
        {
          v20 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *((_QWORD *)v18 - 1) = v20;
          v18 -= 8;
        }
        v12 = v16 + 8 * v17;
        if (v10)
          operator delete(v10);
        v10 = v18;
        v11 = v19;
      }
      else
      {
        *(_QWORD *)v11 = v13;
        v11 += 8;
      }
      if (*((char *)v8 + 23) < 0)
        v21 = v8[1];
      else
        v21 = *((unsigned __int8 *)v8 + 23);
      v22 = v36;
      if (v36 >= v37)
      {
        v24 = (char *)__p;
        v25 = (v36 - (_BYTE *)__p) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          sub_19BF8EB40();
        v27 = v37 - (_BYTE *)__p;
        if ((v37 - (_BYTE *)__p) >> 2 > v26)
          v26 = v27 >> 2;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)sub_19BF965C4((uint64_t)&v37, v28);
          v24 = (char *)__p;
          v22 = v36;
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[8 * v25];
        *(_QWORD *)v30 = v21;
        v23 = v30 + 8;
        while (v22 != v24)
        {
          v31 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *((_QWORD *)v30 - 1) = v31;
          v30 -= 8;
        }
        __p = v30;
        v36 = v23;
        v37 = &v29[8 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_QWORD *)v36 = v21;
        v23 = v22 + 8;
      }
      v36 = v23;
      v8 += 3;
    }
    while (v8 != v9);
    v32 = (uint64_t *)__p;
  }
  v33 = sub_19BFA527C(a1[1], (v11 - v10) >> 3, (unsigned __int8 **)v10, v32, v38);
  if (__p)
  {
    v36 = (char *)__p;
    operator delete(__p);
  }
  if (v10)
    operator delete(v10);
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  return v33 == 0;
}

void sub_19BFB8600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  void *v16;

  if (__p)
    operator delete(__p);
  if (v16)
    operator delete(v16);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFB8650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];

  v11[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v11[1] = v8;
  v12[0] = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v11, a2, a3);
  v12[1] = v9;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v12, a4);
}

uint64_t sub_19BFB86D0(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  if (a3)
  {
    v7 = result;
    v17 = 0;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result);
    v16 = v8;
    v14 = 0;
    v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v7 + 120))(v7, &v15, a2, 1);
    v16 = v9;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 112))(v7, &v15);
    if ((_DWORD)result)
    {
      v10 = 0;
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v7 + 128))(v7, &v15, &v14);
        if ((_DWORD)result)
        {
          if (a3 >= v10 + 1)
            v11 = v10 + 1;
          else
            v11 = a3;
          result = sub_19BFB8D60(*(_QWORD *)(a4 + 24), v14, a2, v11, (uint64_t)&v17);
          if (v17)
            v12 = 1;
          else
            v12 = v10 + 1 >= a3;
          ++v10;
          if (v12)
            return result;
        }
        else if (++v10 >= a3)
        {
          return result;
        }
        v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v7 + 120))(v7, &v15, a2 + v10, 1);
        v16 = v13;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 112))(v7, &v15);
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

void sub_19BFB8800(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *__p[2];
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v23 = v10;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t *, const void *, size_t))(*(_QWORD *)a1 + 120))(a1, &v22, a2, a3);
  v23 = v11;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v22))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    if (a3 >= 0x17)
    {
      v13 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v13 = a3 | 7;
      v14 = v13 + 1;
      v12 = operator new(v13 + 1);
      __p[1] = (void *)a3;
      v21 = v14 | 0x8000000000000000;
      __p[0] = v12;
    }
    else
    {
      HIBYTE(v21) = a3;
      v12 = __p;
      if (!a3)
      {
LABEL_10:
        *((_BYTE *)v12 + a3) = 0;
        v15 = operator new(0x28uLL);
        *v15 = &off_1E3D14CA8;
        v15[1] = __p;
        v15[2] = a2;
        v15[3] = a3;
        v15[4] = a4;
        v25 = v15;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, &v22, v24, a5);
        v18 = v25;
        if (v25 == v24)
        {
          v19 = 4;
          v18 = v24;
        }
        else
        {
          if (!v25)
            goto LABEL_15;
          v19 = 5;
        }
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v18 + 8 * v19))(v18, v16, v17);
LABEL_15:
        if (SHIBYTE(v21) < 0)
          operator delete(__p[0]);
        return;
      }
    }
    memmove(v12, a2, a3);
    goto LABEL_10;
  }
}

void sub_19BFB89C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFB8A18(uint64_t a1)
{
  return sub_19BF9B078(*(unsigned int **)(a1 + 8));
}

BOOL sub_19BFB8A20(uint64_t a1, uint64_t a2)
{
  return sub_19BF9B2A8(a2);
}

uint64_t sub_19BFB8A28(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v10 = *a2;
  if (!a4)
    return v10;
  v4 = a4;
  while (1)
  {
    v7 = sub_19BF9B0C8();
    *(_QWORD *)&v10 = sub_19BF9B23C(v7, *(_QWORD *)(a1 + 8), (uint64_t)&v10);
    *((_QWORD *)&v10 + 1) = v8;
    if (!sub_19BF9B2A8((uint64_t)&v10))
      break;
    ++a3;
    if (!--v4)
      return v10;
  }
  return 0;
}

uint64_t sub_19BFB8AAC(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;

  result = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v7 = sub_19BF9B0C8();
    v8 = sub_19BF9B284(v7, a1[1], a2);
    *a3 = v8;
    return v8 != 0;
  }
  return result;
}

void sub_19BFB8B04(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  char v11;
  char v12;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
  {
    if (a4)
    {
      v10[0] = 0;
      v10[1] = v10;
      v10[2] = 0x2000000000;
      v11 = 0;
      sub_19BF9B0C8();
      off_1EE414F10();
      sub_19BF9B254(v9, v8, a2);
      _Block_object_dispose(v10, 8);
    }
    else
    {
      LODWORD(v10[0]) = 0;
      v12 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 128))(a1, a2, v10))
        sub_19BFB8D60(*(_QWORD *)(a3 + 24), v10[0], 0, 0, (uint64_t)&v12);
    }
  }
}

void sub_19BFB8C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BFB8C48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[3];
  char v6;

  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2000000000;
  v6 = 0;
  v4 = sub_19BF9B0C8();
  sub_19BF9B26C(v4, *(_QWORD *)(a1 + 8), a2);
  _Block_object_dispose(v5, 8);
}

void sub_19BFB8CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFB8CFC(uint64_t a1, char a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v10;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v10 = a2;
  v7 = *(_QWORD *)(v5 + 24);
  if (!v7)
    sub_19BF94AC4();
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, &v10, a3, v6 + 24);
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_19BFB8D60(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  _QWORD v7[2];

  v7[0] = a3;
  v7[1] = a4;
  v6 = a2;
  if (!a1)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, int *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 48))(a1, &v6, v7, a5);
}

uint64_t sub_19BFB8DA0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;

  v6 = off_1EE414F10();
  result = sub_19BFB8D60(*(_QWORD *)(v7 + 24), v8, v6, v9, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19BFB8E04()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFB8E18(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D14CA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19BFB8E58(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D14CA8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19BFB8E80(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 + 8);
  v9 = a1[3];
  v10 = v9 + v8;
  v11 = a1[1];
  v12 = *(char *)(v11 + 23);
  if (v12 < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    v11 = a1[1];
    v9 = a1[3];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
  v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  v15 = *(_QWORD *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    v11 = a1[1];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
LABEL_9:
  if ((v12 & 0x80) != 0)
    v11 = *(_QWORD *)v11;
  return sub_19BFB8D60(*(_QWORD *)(a1[4] + 24), *a2, v11, v10, a4);
}

uint64_t sub_19BFB8F54(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D13690))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFB8F90()
{
  return &unk_1E3D13690;
}

uint64_t *sub_19BFB8F9C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  int v17;

  v4 = *a1;
  v6 = *(_DWORD **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v6 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_19BF8EB40();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v10;
    if (v13)
    {
      v13 = (unint64_t)sub_19BFB3588(v13);
      v8 = *(_DWORD **)v4;
      v6 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = (_DWORD *)(v13 + 4 * v9);
    v16 = v13 + 4 * v14;
    *v15 = *a2;
    v7 = v15 + 1;
    while (v6 != v8)
    {
      v17 = *--v6;
      *--v15 = v17;
    }
    *(_QWORD *)v4 = v15;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

void sub_19BFB9080()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB9094(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D14D00;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFB90C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D14D00;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFB90E4(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19BFB9100(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D136A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFB913C()
{
  return &unk_1E3D136A0;
}

uint64_t sub_19BFB9148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = a3;
  v7[1] = a4;
  v6 = a2;
  if (!a1)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 48))(a1, &v6, v7, a5);
}

void sub_19BFB918C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB91A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D14D58;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFB91D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D14D58;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFB91F0(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19BFB920C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D136B0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFB9248()
{
  return &unk_1E3D136B0;
}

void sub_19BFB9258(uint64_t a1)
{
  sub_19BFB927C(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFB927C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E3D141D8;
  sub_19BFB318C(a1);
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 56) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 160);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_19BFB9338(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_1E3D13B08;
  sub_19BFB6D60(a1);
  v2 = *(void **)(a1 + 632);
  if (v2)
  {
    *(_QWORD *)(a1 + 640) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(a1 + 608);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 616);
    v5 = *(void **)(a1 + 608);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 608);
    }
    *(_QWORD *)(a1 + 616) = v3;
    operator delete(v5);
  }
  v8 = *(void **)(a1 + 584);
  if (v8)
  {
    *(_QWORD *)(a1 + 592) = v8;
    operator delete(v8);
  }
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  v9 = MEMORY[0x1E0DE4F60];
  v10 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 96) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 96 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(a1 + 104) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 208);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  return a1;
}

uint64_t sub_19BFB9458(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D13B08;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_19BFA9BDC(a1 + 96);
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 641) = 0u;
  return a1;
}

void sub_19BFB94C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFB94E4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E3D14038;
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_19BFB9538(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E3D14038;
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
    *(_QWORD *)(a1 + 24) = 0;
  }
  JUMPOUT(0x1A1AD0CDCLL);
}

BOOL sub_19BFB959C(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v8;
  void *v9;
  const void *v10;
  _BOOL8 result;
  char v12;

  v3 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5 + a2;
  if (v3)
  {
    if (v6 >= v4)
    {
      if (!v4)
      {
        *(_QWORD *)(a1 + 16) = 0x2000;
        *(_QWORD *)(a1 + 24) = operator new[]();
        v4 = *(_QWORD *)(a1 + 16);
        v6 = *(_QWORD *)(a1 + 8) + a2;
      }
      do
      {
        v8 = v6 >= 2 * v4;
        v4 *= 2;
      }
      while (v8);
      *(_QWORD *)(a1 + 16) = v4;
      v9 = (void *)operator new[]();
      v10 = *(const void **)(a1 + 24);
      memcpy(v9, v10, *(_QWORD *)(a1 + 8));
      if (v10)
        MEMORY[0x1A1AD0CB8](v10, 0x1000C8077774924);
      *(_QWORD *)(a1 + 24) = v9;
    }
    return 1;
  }
  else
  {
    v8 = v6 >= v4;
    result = v6 < v4;
    v12 = v8;
    *(_BYTE *)(a1 + 33) = v12;
  }
  return result;
}

uint64_t sub_19BFB967C(uint64_t a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (sub_19BFB959C(a1, v4))
  {
    memcpy((void *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 8)), __s, v4);
    *(_QWORD *)(a1 + 8) += v4;
  }
  return a1;
}

BOOL sub_19BFB96E8(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

std::string *sub_19BFB975C(std::string *__dst, uint64_t a2, uint64_t a3)
{
  std::string::size_type size;
  std::string *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_19BF8CD70(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    __dst->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst->__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_13;
  }
  else
  {
    if (!*((_BYTE *)&__dst->__r_.__value_.__s + 23))
      goto LABEL_13;
    size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
  }
  if ((__dst->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = __dst;
  else
    v6 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  if (v6->__r_.__value_.__s.__data_[size - 1] != 47)
    std::string::push_back(__dst, 47);
LABEL_13:
  v7 = *(char *)(a3 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)a3;
  else
    v8 = *(const std::string::value_type **)a3;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  return std::string::append(__dst, v8, v9);
}

void sub_19BFB9814(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_19BFB9830(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  uint64_t *v11;
  char v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  void *__p[4];
  void *v17[2];
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  sub_19BF8E43C(v17, a2);
  if ((a4 & 1) != 0)
    goto LABEL_12;
  v7 = *(_QWORD **)(a1 + 16);
  if (!v7)
    goto LABEL_12;
  v8 = (_QWORD *)(a1 + 16);
  do
  {
    v9 = sub_19BFAAA0C(v7 + 4, v17);
    if (v9 >= 0)
      v10 = v7;
    else
      v10 = v7 + 1;
    if (v9 >= 0)
      v8 = v7;
    v7 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v8 == (_QWORD *)(a1 + 16) || (sub_19BFAAA0C(v17, v8 + 4) & 0x80) != 0)
  {
LABEL_12:
    if (*(char *)(a3 + 23) < 0)
    {
      sub_19BF8CD70(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      __p[2] = *(void **)(a3 + 16);
    }
    v11 = (uint64_t *)__p[0];
    v19[0] = __p[1];
    *(void **)((char *)v19 + 7) = *(void **)((char *)&__p[1] + 7);
    v12 = HIBYTE(__p[2]);
    memset(__p, 0, 24);
    v13 = sub_19BFB99D8((uint64_t **)(a1 + 8), v17, (uint64_t)v17);
    v14 = v13;
    if (*((char *)v13 + 79) < 0)
      operator delete(v13[7]);
    v15 = (uint64_t *)v19[0];
    v14[7] = v11;
    v14[8] = v15;
    *(uint64_t **)((char *)v14 + 71) = *(uint64_t **)((char *)v19 + 7);
    *((_BYTE *)v14 + 79) = v12;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_19BFB9990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_19BFB99D8(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if ((sub_19BFAAA0C(a2, v5 + 4) & 0x80) == 0)
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if ((sub_19BFAAA0C(v10, a2) & 0x80) == 0)
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = operator new(0x50uLL);
    v16[0] = v11;
    v16[1] = v6;
    v17 = 0;
    v12 = v11 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_19BF8CD70(v12, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)v12 = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    v11[8] = 0;
    v11[9] = 0;
    v11[7] = 0;
    v17 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *v8 = v11;
    v13 = (uint64_t *)**a1;
    v14 = v11;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    sub_19BFA96D8(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    sub_19BFB9B1C((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_19BFB9B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFB9B1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19BFB9B1C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_19BFB9B60((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void sub_19BFB9B60(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_19BFB9BA4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v1)
    return *(_QWORD *)(v1 + 240);
  else
    return 0;
}

uint64_t sub_19BFB9BC0(uint64_t a1, unsigned int a2, int a3)
{
  return sub_19BFA9CC8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 88), a2, a3);
}

_DWORD *sub_19BFB9BCC(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  double v4;
  char *v5;

  if (!*(_QWORD *)(a1 + 8) || !*(_QWORD *)(a1 + 24))
  {
    sub_19BFC3830("Model is not available");
    return 0;
  }
  v2 = (_DWORD *)operator new();
  sub_19BFC2928((uint64_t)v2);
  if (!*(_QWORD *)(a1 + 8) || !*(_QWORD *)(a1 + 24))
  {
    v5 = (char *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 312))(v2);
    sub_19BFC3830(v5);
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 328))(v2);
    return 0;
  }
  v3 = *((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  *((_QWORD *)v2 + 1) = a1;
  v2[8] = *(_DWORD *)(a1 + 32);
  v4 = *(double *)(a1 + 40);
  *((double *)v2 + 5) = v4;
  *(float *)&v4 = v4;
  (*(void (**)(_DWORD *, float))(*(_QWORD *)v2 + 264))(v2, *(float *)&v4);
  v2[8] = *(_DWORD *)(a1 + 32);
  return v2;
}

void sub_19BFB9CB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CDC](v1, 0x10F3C4078267834);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFB9CD4(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 24))
  {
    v2 = operator new();
    sub_19BFB5774(v2, *(_QWORD *)(a1 + 24));
  }
  else
  {
    sub_19BFC3830("Model is not available");
    return 0;
  }
  return v2;
}

void sub_19BFB9D3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CDC](v1, 0x10F3C40B77F16BFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFB9D60(uint64_t a1, uint64_t a2)
{
  char *v3;

  if (*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 24))
    v3 = "atomic model replacement is not supported";
  else
    v3 = "current model is not available";
  sub_19BFC3830(v3);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  return 0;
}

void sub_19BFB9DBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  _Unwind_Resume(exception_object);
}

void sub_19BFB9DE0(_QWORD *a1)
{
  sub_19BFB9E04(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFB9E04(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E3D14338;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  a1[1] = 0;
  a1[2] = &off_1E3D13DC8;
  v3 = a1[3];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

_QWORD *sub_19BFB9E64(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D13DC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19BFB9EA4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D13DC8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFB9EF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  *(_QWORD *)a1 = &off_1E3D14238;
  v2 = a1 + 128;
  if (*(char *)(a1 + 415) < 0)
    operator delete(*(void **)(a1 + 392));
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 128) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 136) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 240);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v6 = (void **)(a1 + 32);
  sub_19BF8EA40(&v6);
  sub_19BFB9FE8(*(_QWORD **)(a1 + 16));
  return a1;
}

void sub_19BFB9FE8(_QWORD *a1)
{
  if (a1)
  {
    sub_19BFB9FE8(*a1);
    sub_19BFB9FE8(a1[1]);
    sub_19BFB9B60((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_19BFBA02C(uint64_t a1)
{
  sub_19BFB9EF4(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19BFBA050(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_19BF8E574(a1, cf);
  }
}

uint64_t **sub_19BFBA09C(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 328))(v3);
    JUMPOUT(0x1A1AD0CDCLL);
  }
  return result;
}

void sub_19BFBA0FC(uint64_t a1)
{
  sub_19BFBA120(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFBA120(uint64_t a1)
{
  uint64_t **v2;

  *(_QWORD *)a1 = &off_1E3D136D0;
  v2 = (uint64_t **)(a1 + 8);
  sub_19BF8E574((const void **)(a1 + 24), 0);
  sub_19BF8AD20((const void **)(a1 + 16), 0);
  sub_19BFBA09C(v2, 0);
  return a1;
}

__n128 sub_19BFBA174(__int128 *a1)
{
  uint64_t Instance;
  __int128 v3;
  __int128 v4;
  __n128 result;

  if (qword_1EE417328 != -1)
    dispatch_once(&qword_1EE417328, &unk_1E3D14FD0);
  Instance = _CFRuntimeCreateInstance();
  v3 = *a1;
  *(_QWORD *)(Instance + 32) = *((_QWORD *)a1 + 2);
  *(_OWORD *)(Instance + 16) = v3;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  v4 = *(__int128 *)((char *)a1 + 24);
  *(_DWORD *)(Instance + 56) = *((_DWORD *)a1 + 10);
  *(_OWORD *)(Instance + 40) = v4;
  *(_QWORD *)(Instance + 72) = 0;
  *(_QWORD *)(Instance + 80) = 0;
  *(_QWORD *)(Instance + 64) = 0;
  result = (__n128)a1[3];
  *(__n128 *)(Instance + 64) = result;
  *(_QWORD *)(Instance + 80) = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 6) = 0;
  *((_QWORD *)a1 + 7) = 0;
  *((_QWORD *)a1 + 8) = 0;
  return result;
}

void sub_19BFBA224(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
}

void sub_19BFBA254(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_19BFBA2C4(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19BFBA2C4(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 48);
  sub_19BFBA314(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_19BFBA314(void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        sub_19BFAC558(v4, 0);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_19BFBA388()
{
  uint64_t result;

  qword_1EE417330 = 0;
  *(_QWORD *)algn_1EE417338 = "_LXAnalyzerCandidate";
  qword_1EE417340 = 0;
  unk_1EE417348 = 0;
  qword_1EE417350 = (uint64_t)sub_19BFBA3D4;
  unk_1EE417358 = 0u;
  unk_1EE417368 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE417390 = result;
  return result;
}

void sub_19BFBA3D4(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 64);
  sub_19BFBA314(&v2);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

uint64_t LXAnalyzerCreate(const void *a1, CFErrorRef *a2)
{
  uint64_t Instance;
  uint64_t *v5;

  if (qword_1EE417398 != -1)
    dispatch_once(&qword_1EE417398, &unk_1E3D15658);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = &off_1E3D136D0;
  *(_QWORD *)(Instance + 24) = 0;
  *(_QWORD *)(Instance + 40) = 0;
  *(_QWORD *)(Instance + 32) = 0;
  sub_19BFBA050((const void **)(Instance + 40), a1);
  v5 = (uint64_t *)operator new();
  *v5 = 0;
  sub_19BFBA09C((uint64_t **)(Instance + 24), v5);
  if ((sub_19C017560(*(uint64_t **)(Instance + 24), *(CFDictionaryRef *)(Instance + 40), a2) & 1) == 0)
  {
    CFRelease((CFTypeRef)Instance);
    return 0;
  }
  return Instance;
}

void sub_19BFBA51C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t **v2;
  const void **v3;

  sub_19BF8E574(v3, 0);
  sub_19BF8AD20((const void **)(v1 + 32), 0);
  sub_19BFBA09C(v2, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFBA550()
{
  uint64_t result;

  qword_1EE4173A0 = 0;
  *(_QWORD *)algn_1EE4173A8 = "LXAnalyzer";
  qword_1EE4173B0 = 0;
  unk_1EE4173B8 = 0;
  qword_1EE4173C0 = (uint64_t)sub_19BFBA59C;
  *(_OWORD *)algn_1EE4173C8 = 0u;
  *(_OWORD *)&algn_1EE4173C8[16] = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE417400 = result;
  return result;
}

uint64_t sub_19BFBA59C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 16))(a1 + 16);
}

void LXAnalyzerEnumerateCandidates(uint64_t a1, CFStringRef theString, char a3, uint64_t a4)
{
  _QWORD *v7;
  const UniChar *CharactersPtr;
  CFIndex Length;
  CFIndex v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  __n128 v17;
  void **v18;
  void **v19;
  int v20;
  unsigned __int8 v21;
  void *v22[3];
  void **v23;
  CFRange v24;

  v7 = *(_QWORD **)(a1 + 24);
  CharactersPtr = CFStringGetCharactersPtr(theString);
  Length = CFStringGetLength(theString);
  v10 = Length;
  v11 = 2 * Length;
  if (CharactersPtr)
  {
    v12 = 0;
  }
  else
  {
    if (Length < 0)
      v13 = -1;
    else
      v13 = 2 * Length;
    v12 = (void *)operator new[]();
    bzero(v12, v13);
    v24.location = 0;
    v24.length = v10;
    CFStringGetCharacters(theString, v24, (UniChar *)v12);
    CharactersPtr = (const UniChar *)v12;
  }
  if ((a3 & 0x10) != 0)
    v14 = 156;
  else
    v14 = 148;
  (*(void (**)(_QWORD, const UniChar *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)*v7 + 48))(*v7, CharactersPtr, v11, 0, v14);
  sub_19C0195AC(v22, v7, v10);
  if (v12)
    MEMORY[0x1A1AD0CB8](v12, 0x1000C80BDFB0063);
  v15 = (__int128 *)v22[0];
  v16 = (__int128 *)v22[1];
  while (v15 != v16)
  {
    v17 = sub_19BFBA174(v15);
    v19 = v18;
    v23 = v18;
    v21 = 0;
    (*(void (**)(uint64_t, void **, unsigned __int8 *, __n128))(a4 + 16))(a4, v18, &v21, v17);
    v20 = v21;
    if (v19)
      CFRelease(v19);
    if (v20)
      break;
    v15 = (__int128 *)((char *)v15 + 72);
  }
  v23 = v22;
  sub_19BFBA254(&v23);
}

void sub_19BFBA714(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CB8](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

void LXAnalyzerEnumerateCandidatesWithLattice(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int i;
  void *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void **v15;
  void **p_p;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __n128 v20;
  void *v21;
  const void *v22;
  int v23;
  unsigned __int8 v24;
  void *v25[3];
  void *__p;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_QWORD **)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 16);
  __p = 0;
  v27 = 0;
  v28 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  if (v8)
  {
    v9 = 0;
    for (i = 0; i < v8; v9 = i)
    {
      if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v9))
        break;
      v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, v9, 0);
      sub_19C016424(&__p, v11, v12);
      i += (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, v9, 0);
    }
    v13 = HIBYTE(v28);
    v15 = (void **)__p;
    v14 = v27;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v13 = 0;
  }
  if ((v13 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = v15;
  if ((v13 & 0x80u) == 0)
    v14 = v13;
  if ((a3 & 0x10) != 0)
    v17 = 156;
  else
    v17 = 148;
  (*(void (**)(_QWORD, uint64_t, void **, uint64_t, _QWORD, uint64_t))(*(_QWORD *)*v6 + 56))(*v6, v7, p_p, 2 * v14, 0, v17);
  sub_19C0195AC(v25, v6, 0);
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  v18 = (__int128 *)v25[0];
  v19 = (__int128 *)v25[1];
  while (v18 != v19)
  {
    v20 = sub_19BFBA174(v18);
    v22 = v21;
    __p = v21;
    v24 = 0;
    (*(void (**)(uint64_t, void *, unsigned __int8 *, __n128))(a4 + 16))(a4, v21, &v24, v20);
    v23 = v24;
    if (v22)
      CFRelease(v22);
    if (v23)
      break;
    v18 = (__int128 *)((char *)v18 + 72);
  }
  __p = v25;
  sub_19BFBA254((void ***)&__p);
}

void sub_19BFBA92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19BFBA984(uint64_t a1)
{
  sub_19BFBA9A8(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFBA9A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E3D14258;
  v2 = a1 + 88;
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 88) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 96) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 200);
  *(_QWORD *)(a1 + 72) = &off_1E3D14078;
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
    MEMORY[0x1A1AD0CB8](v5, 0x1000C8077774924);
  *(_QWORD *)(a1 + 56) = &off_1E3D14078;
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
    MEMORY[0x1A1AD0CB8](v6, 0x1000C8077774924);
  *(_QWORD *)(a1 + 40) = &off_1E3D14078;
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    MEMORY[0x1A1AD0CB8](v7, 0x1000C8077774924);
  *(_QWORD *)(a1 + 24) = &off_1E3D14078;
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    MEMORY[0x1A1AD0CB8](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 8) = &off_1E3D14078;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
    MEMORY[0x1A1AD0CB8](v9, 0x1000C8077774924);
  return a1;
}

uint64_t sub_19BFBAAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) + 8);
  v5 = (uint64_t *)(v4 + 8);
  if (*(_QWORD *)(v4 + 8))
  {
    do
    {
      v6 = *(const void **)(v4 + 48);
      v7 = *(unsigned __int16 *)(v4 + 96);
      if (sub_19BFB959C(a3, v7))
      {
        memcpy((void *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(a3 + 8)), v6, v7);
        *(_QWORD *)(a3 + 8) += v7;
      }
      if (sub_19BFB959C(a3, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 9;
      v8 = sub_19BFB967C(a3, *(char **)(v4 + 56));
      if (sub_19BFB959C(v8, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 10;
      v4 = *v5;
      v9 = *v5;
      v10 = *(_QWORD *)(v9 + 8);
      v5 = (uint64_t *)(v9 + 8);
    }
    while (v10);
  }
  sub_19BFB967C(a3, "EOS\n");
  return 1;
}

uint64_t sub_19BFBAC08(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4;
  void **v5;
  int v6;
  int v7;
  void *v9;
  void **v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  int v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  int v30;
  uint64_t v31;
  std::string::size_type size;
  std::string::size_type v33;
  std::string::size_type v34;
  int v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  uint64_t v39;
  char v40;
  std::string *v41;
  uint64_t v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string *v45;
  std::string *v46;
  std::string *v47;
  uint64_t v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  uint64_t v56;
  uint64_t v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::string *p_str;
  std::string *v61;
  std::string *v62;
  uint64_t v63;
  std::string::size_type v64;
  std::string::size_type v65;
  std::string *v66;
  std::string *v67;
  std::string *v68;
  uint64_t v69;
  std::string::size_type v70;
  unint64_t v71;
  const std::string *p_p;
  void **v73;
  std::string *v74;
  uint64_t v75;
  std::string::size_type v76;
  std::string::size_type v77;
  std::string *v78;
  std::string *v79;
  uint64_t v80;
  std::string::size_type v81;
  std::string::size_type v82;
  std::string *v83;
  std::string *v84;
  std::string *v85;
  std::string *v86;
  std::string *v87;
  std::string *v88;
  std::string *v89;
  std::string *v90;
  uint64_t v91;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  void **v100;
  uint64_t v101;
  _QWORD *v102;
  std::string v103;
  void *v104[2];
  unsigned __int8 v105;
  std::string v106;
  std::string __str;
  std::string __p;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;
  std::string v113;
  std::string v114;
  std::string v115;
  std::string v116;
  std::string v117;
  std::string v118;
  void **v119;
  std::string::size_type v120;
  unsigned __int8 v121;

  sub_19BFB1144(&v119, a2, "output-format-type");
  *(_QWORD *)(a1 + 568) = sub_19BFBAAF4;
  *(_QWORD *)(a1 + 576) = 0;
  v4 = v121;
  if ((v121 & 0x80u) != 0)
    v4 = v120;
  if (v4 == 4)
  {
    if ((v121 & 0x80u) == 0)
      v10 = (void **)&v119;
    else
      v10 = v119;
    if (*(_DWORD *)v10 == 1701736302)
    {
      v9 = sub_19BFBBC4C;
    }
    else
    {
      if (*(_DWORD *)v10 != 1886221668)
        goto LABEL_18;
      v9 = sub_19BFBBC54;
    }
LABEL_115:
    *(_QWORD *)(a1 + 568) = v9;
    *(_QWORD *)(a1 + 576) = 0;
LABEL_278:
    v91 = 1;
    goto LABEL_281;
  }
  if (v4 == 6)
  {
    v5 = (void **)&v119;
    if ((v121 & 0x80u) != 0)
      v5 = v119;
    v6 = *(_DWORD *)v5;
    v7 = *((unsigned __int16 *)v5 + 2);
    if (v6 == 1634427255 && v7 == 26996)
    {
      v9 = sub_19BFBBB58;
      goto LABEL_115;
    }
  }
LABEL_18:
  sub_19BF8E43C(&v118, "%m\\t%H\\n");
  sub_19BF8E43C(&v117, "%m\\t%H\\n");
  sub_19BF8E43C(&v116, "");
  sub_19BF8E43C(&v115, "EOS\\n");
  sub_19BF8E43C(&v114, "");
  sub_19BF8E43C(&v113, "node-format");
  sub_19BF8E43C(&v112, "bos-format");
  sub_19BF8E43C(&v111, "eos-format");
  sub_19BF8E43C(&v110, "unk-format");
  sub_19BF8E43C(&v109, "eon-format");
  v11 = v121;
  if ((v121 & 0x80u) != 0)
    v11 = v120;
  if (!v11)
  {
LABEL_59:
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v113;
    else
      v25 = (std::string *)v113.__r_.__value_.__r.__words[0];
    sub_19BFB1144(&__p, a2, (char *)v25);
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v112;
    else
      v26 = (std::string *)v112.__r_.__value_.__r.__words[0];
    sub_19BFB1144(&__str, a2, (char *)v26);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v111;
    else
      v27 = (std::string *)v111.__r_.__value_.__r.__words[0];
    sub_19BFB1144(&v106, a2, (char *)v27);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v110;
    else
      v28 = (std::string *)v110.__r_.__value_.__r.__words[0];
    sub_19BFB1144(v104, a2, (char *)v28);
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v109;
    else
      v29 = (std::string *)v109.__r_.__value_.__r.__words[0];
    sub_19BFB1144(&v103, a2, (char *)v29);
    v30 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
    v31 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
    size = v118.__r_.__value_.__l.__size_;
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
    else
      v33 = v118.__r_.__value_.__l.__size_;
    v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v35 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = __p.__r_.__value_.__l.__size_;
    if (v33 != v34)
    {
      *(_QWORD *)(a1 + 568) = sub_19BFBBA88;
      *(_QWORD *)(a1 + 576) = 0;
LABEL_144:
      std::string::operator=(&v118, &__p);
LABEL_145:
      v57 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
      else
        v58 = v116.__r_.__value_.__l.__size_;
      v59 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v59 = __str.__r_.__value_.__l.__size_;
      if (v58 == v59)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v116.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (!memcmp(v116.__r_.__value_.__l.__data_, p_str, v116.__r_.__value_.__l.__size_))
            goto LABEL_162;
        }
        else
        {
          if (!*((_BYTE *)&v116.__r_.__value_.__s + 23))
            goto LABEL_162;
          v61 = &v116;
          v62 = p_str;
          while (v61->__r_.__value_.__s.__data_[0] == v62->__r_.__value_.__s.__data_[0])
          {
            v61 = (std::string *)((char *)v61 + 1);
            v62 = (std::string *)((char *)v62 + 1);
            if (!--v57)
              goto LABEL_162;
          }
        }
      }
      std::string::operator=(&v116, &__str);
LABEL_162:
      v63 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
      if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
      else
        v64 = v115.__r_.__value_.__l.__size_;
      v65 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v65 = v106.__r_.__value_.__l.__size_;
      if (v64 == v65)
      {
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = &v106;
        else
          v66 = (std::string *)v106.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v115.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&v115.__r_.__value_.__s + 23))
          {
            v67 = &v115;
            v68 = v66;
            while (v67->__r_.__value_.__s.__data_[0] == v68->__r_.__value_.__s.__data_[0])
            {
              v67 = (std::string *)((char *)v67 + 1);
              v68 = (std::string *)((char *)v68 + 1);
              if (!--v63)
                goto LABEL_179;
            }
            goto LABEL_178;
          }
LABEL_179:
          v69 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
          if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
          else
            v70 = v117.__r_.__value_.__l.__size_;
          v71 = (unint64_t)v104[1];
          if ((v105 & 0x80u) == 0)
            v71 = v105;
          p_p = (const std::string *)v104;
          if (v70 == v71)
          {
            v73 = (v105 & 0x80u) == 0 ? v104 : (void **)v104[0];
            if ((*((_BYTE *)&v117.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (memcmp(v117.__r_.__value_.__l.__data_, v73, v117.__r_.__value_.__l.__size_))
              {
LABEL_195:
                p_p = (const std::string *)v104;
                goto LABEL_214;
              }
            }
            else if (*((_BYTE *)&v117.__r_.__value_.__s + 23))
            {
              v74 = &v117;
              while (v74->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v73)
              {
                v74 = (std::string *)((char *)v74 + 1);
                v73 = (void **)((char *)v73 + 1);
                if (!--v69)
                  goto LABEL_196;
              }
              goto LABEL_195;
            }
LABEL_196:
            v75 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
            if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v76 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
            else
              v76 = v118.__r_.__value_.__l.__size_;
            v77 = __p.__r_.__value_.__l.__size_;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            p_p = &__p;
            if (v76 == v77)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v78 = &__p;
              else
                v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((*((_BYTE *)&v118.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                if (memcmp(v118.__r_.__value_.__l.__data_, v78, v118.__r_.__value_.__l.__size_))
                {
LABEL_212:
                  p_p = &__p;
                  goto LABEL_214;
                }
              }
              else if (*((_BYTE *)&v118.__r_.__value_.__s + 23))
              {
                v79 = &v118;
                while (v79->__r_.__value_.__s.__data_[0] == v78->__r_.__value_.__s.__data_[0])
                {
                  v79 = (std::string *)((char *)v79 + 1);
                  v78 = (std::string *)((char *)v78 + 1);
                  if (!--v75)
                    goto LABEL_213;
                }
                goto LABEL_212;
              }
LABEL_213:
              p_p = &v118;
            }
          }
LABEL_214:
          std::string::operator=(&v117, p_p);
          v80 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
          if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v81 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
          else
            v81 = v114.__r_.__value_.__l.__size_;
          v82 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
          if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v82 = v103.__r_.__value_.__l.__size_;
          if (v81 == v82)
          {
            if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v83 = &v103;
            else
              v83 = (std::string *)v103.__r_.__value_.__r.__words[0];
            if ((*((_BYTE *)&v114.__r_.__value_.__s + 23) & 0x80) == 0)
            {
              if (*((_BYTE *)&v114.__r_.__value_.__s + 23))
              {
                v84 = &v114;
                v85 = v83;
                while (v84->__r_.__value_.__s.__data_[0] == v85->__r_.__value_.__s.__data_[0])
                {
                  v84 = (std::string *)((char *)v84 + 1);
                  v85 = (std::string *)((char *)v85 + 1);
                  if (!--v80)
                    goto LABEL_231;
                }
                goto LABEL_230;
              }
LABEL_231:
              if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v86 = &v118;
              else
                v86 = (std::string *)v118.__r_.__value_.__r.__words[0];
              sub_19BFACF10(a1 + 8, (char *)v86);
              if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v87 = &v116;
              else
                v87 = (std::string *)v116.__r_.__value_.__r.__words[0];
              sub_19BFACF10(a1 + 24, (char *)v87);
              if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v88 = &v115;
              else
                v88 = (std::string *)v115.__r_.__value_.__r.__words[0];
              sub_19BFACF10(a1 + 40, (char *)v88);
              if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v89 = &v117;
              else
                v89 = (std::string *)v117.__r_.__value_.__r.__words[0];
              sub_19BFACF10(a1 + 56, (char *)v89);
              if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v90 = &v114;
              else
                v90 = (std::string *)v114.__r_.__value_.__r.__words[0];
              sub_19BFACF10(a1 + 72, (char *)v90);
              goto LABEL_247;
            }
            if (!memcmp(v114.__r_.__value_.__l.__data_, v83, v114.__r_.__value_.__l.__size_))
              goto LABEL_231;
          }
LABEL_230:
          std::string::operator=(&v114, &v103);
          goto LABEL_231;
        }
        if (!memcmp(v115.__r_.__value_.__l.__data_, v66, v115.__r_.__value_.__l.__size_))
          goto LABEL_179;
      }
LABEL_178:
      std::string::operator=(&v115, &v106);
      goto LABEL_179;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &__p;
    else
      v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&v118.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v118.__r_.__value_.__l.__data_, v36, v118.__r_.__value_.__l.__size_))
      {
        *(_QWORD *)(a1 + 568) = sub_19BFBBA88;
        *(_QWORD *)(a1 + 576) = 0;
        if (v35 >= 0)
          v41 = &__p;
        else
          v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_143;
      }
    }
    else if (*((_BYTE *)&v118.__r_.__value_.__s + 23))
    {
      v37 = &v118;
      v38 = v36;
      v39 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      while (v37->__r_.__value_.__s.__data_[0] == v38->__r_.__value_.__s.__data_[0])
      {
        v37 = (std::string *)((char *)v37 + 1);
        v38 = (std::string *)((char *)v38 + 1);
        if (!--v39)
          goto LABEL_99;
      }
      goto LABEL_134;
    }
LABEL_99:
    v42 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
    if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
    else
      v43 = v116.__r_.__value_.__l.__size_;
    v44 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v44 = __str.__r_.__value_.__l.__size_;
    if (v43 == v44)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &__str;
      else
        v45 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v116.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(v116.__r_.__value_.__l.__data_, v45, v116.__r_.__value_.__l.__size_))
          goto LABEL_134;
      }
      else if (*((_BYTE *)&v116.__r_.__value_.__s + 23))
      {
        v46 = &v116;
        v47 = v45;
        while (v46->__r_.__value_.__s.__data_[0] == v47->__r_.__value_.__s.__data_[0])
        {
          v46 = (std::string *)((char *)v46 + 1);
          v47 = (std::string *)((char *)v47 + 1);
          if (!--v42)
            goto LABEL_117;
        }
        goto LABEL_134;
      }
LABEL_117:
      v48 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
      if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
      else
        v49 = v115.__r_.__value_.__l.__size_;
      v50 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v50 = v106.__r_.__value_.__l.__size_;
      if (v49 == v50)
      {
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v106;
        else
          v51 = (std::string *)v106.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v115.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&v115.__r_.__value_.__s + 23))
          {
            v52 = &v115;
            v53 = v51;
            while (v52->__r_.__value_.__s.__data_[0] == v53->__r_.__value_.__s.__data_[0])
            {
              v52 = (std::string *)((char *)v52 + 1);
              v53 = (std::string *)((char *)v53 + 1);
              if (!--v48)
                goto LABEL_133;
            }
            goto LABEL_134;
          }
LABEL_133:
          if (sub_19BFBB9E8((unsigned __int8 *)&v117, (unsigned __int8 *)v104))
          {
LABEL_247:
            if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v103.__r_.__value_.__l.__data_);
            if ((char)v105 < 0)
              operator delete(v104[0]);
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v106.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v40 = 1;
            goto LABEL_258;
          }
          goto LABEL_134;
        }
        if (!memcmp(v115.__r_.__value_.__l.__data_, v51, v115.__r_.__value_.__l.__size_))
          goto LABEL_133;
      }
    }
LABEL_134:
    *(_QWORD *)(a1 + 568) = sub_19BFBBA88;
    *(_QWORD *)(a1 + 576) = 0;
    v54 = &__p;
    if (v35 < 0)
      v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v30 & 0x80) == 0)
    {
      if (!v30)
        goto LABEL_145;
      v55 = &v118;
      v56 = v31;
      while (v55->__r_.__value_.__s.__data_[0] == v54->__r_.__value_.__s.__data_[0])
      {
        v55 = (std::string *)((char *)v55 + 1);
        v54 = (std::string *)((char *)v54 + 1);
        if (!--v56)
          goto LABEL_145;
      }
      goto LABEL_144;
    }
    v41 = v54;
LABEL_143:
    if (!memcmp(v118.__r_.__value_.__l.__data_, v41, size))
      goto LABEL_145;
    goto LABEL_144;
  }
  std::string::append(&v113, "-", 1uLL);
  if ((v121 & 0x80u) == 0)
    v12 = (const std::string::value_type *)&v119;
  else
    v12 = (const std::string::value_type *)v119;
  if ((v121 & 0x80u) == 0)
    v13 = v121;
  else
    v13 = v120;
  std::string::append(&v113, v12, v13);
  std::string::append(&v112, "-", 1uLL);
  if ((v121 & 0x80u) == 0)
    v14 = (const std::string::value_type *)&v119;
  else
    v14 = (const std::string::value_type *)v119;
  if ((v121 & 0x80u) == 0)
    v15 = v121;
  else
    v15 = v120;
  std::string::append(&v112, v14, v15);
  std::string::append(&v111, "-", 1uLL);
  if ((v121 & 0x80u) == 0)
    v16 = (const std::string::value_type *)&v119;
  else
    v16 = (const std::string::value_type *)v119;
  if ((v121 & 0x80u) == 0)
    v17 = v121;
  else
    v17 = v120;
  std::string::append(&v111, v16, v17);
  std::string::append(&v110, "-", 1uLL);
  if ((v121 & 0x80u) == 0)
    v18 = (const std::string::value_type *)&v119;
  else
    v18 = (const std::string::value_type *)v119;
  if ((v121 & 0x80u) == 0)
    v19 = v121;
  else
    v19 = v120;
  std::string::append(&v110, v18, v19);
  std::string::append(&v109, "-", 1uLL);
  if ((v121 & 0x80u) == 0)
    v20 = (const std::string::value_type *)&v119;
  else
    v20 = (const std::string::value_type *)v119;
  if ((v121 & 0x80u) == 0)
    v21 = v121;
  else
    v21 = v120;
  std::string::append(&v109, v20, v21);
  if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v113;
  else
    v22 = (std::string *)v113.__r_.__value_.__r.__words[0];
  sub_19BFB1144(&__p, a2, (char *)v22);
  v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = __p.__r_.__value_.__l.__size_;
  if (v23)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_59;
  }
  if (setjmp((int *)(a1 + 376)) != 1)
  {
    v93 = (_QWORD *)(a1 + 88);
    std::ios_base::clear((std::ios_base *)((char *)v93 + *(_QWORD *)(*v93 - 24)), 0);
    v94 = sub_19BF8E6F8(v93, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/writer.cpp", 69);
    sub_19BF8E6F8(v94, (uint64_t)"(", 1);
    v95 = (_QWORD *)std::ostream::operator<<();
    v96 = sub_19BF8E6F8(v95, (uint64_t)") [", 3);
    v97 = sub_19BF8E6F8(v96, (uint64_t)"!tmp.empty()", 12);
    v98 = sub_19BF8E6F8(v97, (uint64_t)"] ", 2);
    v99 = sub_19BF8E6F8(v98, (uint64_t)"unkown format type [", 20);
    if ((v121 & 0x80u) == 0)
      v100 = (void **)&v119;
    else
      v100 = v119;
    if ((v121 & 0x80u) == 0)
      v101 = v121;
    else
      v101 = v120;
    v102 = sub_19BF8E6F8(v99, (uint64_t)v100, v101);
    sub_19BF8E6F8(v102, (uint64_t)"]", 1);
    sub_19BFAA53C((uint64_t)v93);
  }
  if (v24 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v40 = 0;
LABEL_258:
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v118.__r_.__value_.__l.__data_);
    if ((v40 & 1) != 0)
      goto LABEL_278;
  }
  else if ((v40 & 1) != 0)
  {
    goto LABEL_278;
  }
  v91 = 0;
LABEL_281:
  if ((char)v121 < 0)
    operator delete(v119);
  return v91;
}

void sub_19BFBB84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  int v53;
  uint64_t v54;

  if (v53 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  if (a47 < 0)
    operator delete(a42);
  if (a53 < 0)
    operator delete(a48);
  if (*(char *)(v54 - 169) < 0)
    operator delete(*(void **)(v54 - 192));
  if (*(char *)(v54 - 145) < 0)
    operator delete(*(void **)(v54 - 168));
  if (*(char *)(v54 - 121) < 0)
    operator delete(*(void **)(v54 - 144));
  if (*(char *)(v54 - 97) < 0)
    operator delete(*(void **)(v54 - 120));
  if (*(char *)(v54 - 73) < 0)
    operator delete(*(void **)(v54 - 96));
  if (*(char *)(v54 - 49) < 0)
    operator delete(*(void **)(v54 - 72));
  _Unwind_Resume(a1);
}

BOOL sub_19BFBB9E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_19BFBBA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(char **)(a1 + 32);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (!sub_19BFBC1EC(a2, v6, v7, a3))
    return 0;
  v8 = (uint64_t *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) + 8);
  while (1)
  {
    v9 = *v8;
    v10 = *v8;
    v11 = *(_QWORD *)(v10 + 8);
    v8 = (uint64_t *)(v10 + 8);
    if (!v11)
      break;
    if (*(_BYTE *)(v9 + 124) == 1)
      v12 = 64;
    else
      v12 = 16;
    if ((sub_19BFBC1EC(a2, *(char **)(a1 + v12), v9, a3) & 1) == 0)
      return 0;
  }
  return sub_19BFBC1EC(a2, *(char **)(a1 + 48), v9, a3);
}

uint64_t sub_19BFBBB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) + 8);
  v5 = (uint64_t *)(v4 + 8);
  if (*(_QWORD *)(v4 + 8))
  {
    do
    {
      v6 = *(const void **)(v4 + 48);
      v7 = *(unsigned __int16 *)(v4 + 96);
      if (sub_19BFB959C(a3, v7))
      {
        memcpy((void *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(a3 + 8)), v6, v7);
        *(_QWORD *)(a3 + 8) += v7;
      }
      if (sub_19BFB959C(a3, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v4 = *v5;
      v8 = *v5;
      v9 = *(_QWORD *)(v8 + 8);
      v5 = (uint64_t *)(v8 + 8);
    }
    while (v9);
  }
  if (sub_19BFB959C(a3, 1))
    *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 10;
  return 1;
}

uint64_t sub_19BFBBC4C()
{
  return 1;
}

uint64_t sub_19BFBBC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  const void *v18;
  size_t v19;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (v6)
  {
    v7 = v6;
    do
    {
      v8 = *(unsigned __int8 *)(v7 + 124);
      if (v8 == 3)
      {
        v9 = a3;
        v10 = "EOS";
      }
      else
      {
        if (v8 != 2)
        {
          v18 = *(const void **)(v7 + 48);
          v19 = *(unsigned __int16 *)(v7 + 96);
          if (sub_19BFB959C(a3, v19))
          {
            memcpy((void *)(*(_QWORD *)(a3 + 24) + *(_QWORD *)(a3 + 8)), v18, v19);
            *(_QWORD *)(a3 + 8) += v19;
          }
          goto LABEL_8;
        }
        v9 = a3;
        v10 = "BOS";
      }
      sub_19BFB967C(v9, v10);
LABEL_8:
      if (sub_19BFB959C(a3, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v11 = sub_19BFB967C(a3, *(char **)(v7 + 56));
      if (sub_19BFB959C(v11, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v12 = sub_19BFBBF24(a3, *(_DWORD *)(v7 + 48) - v5);
      if (sub_19BFB959C(v12, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v13 = sub_19BFBBF24(a3, *(_DWORD *)(v7 + 48) - v5 + *(unsigned __int16 *)(v7 + 96));
      if (sub_19BFB959C(v13, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v14 = sub_19BFBC018(a3, *(unsigned __int16 *)(v7 + 100));
      if (sub_19BFB959C(v14, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v15 = sub_19BFBC018(a3, *(unsigned __int16 *)(v7 + 102));
      if (sub_19BFB959C(v15, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      v16 = sub_19BFBBF24(a3, *(unsigned __int8 *)(v7 + 124));
      if (sub_19BFB959C(v16, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
      sub_19BFBC0FC(a3, *(_QWORD *)(v7 + 112));
      for (i = *(_QWORD *)(v7 + 40); i; i = *(_QWORD *)(i + 8))
      {
        if (sub_19BFB959C(a3, 1))
          *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 32;
        sub_19BFBBF24(a3, *(_DWORD *)(i + 16));
      }
      if (sub_19BFB959C(a3, 1))
        *(_BYTE *)(*(_QWORD *)(a3 + 24) + (*(_QWORD *)(a3 + 8))++) = 10;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
  }
  return 1;
}

uint64_t sub_19BFBBF24(uint64_t a1, int a2)
{
  char *p_s;
  char *v3;
  unsigned int v4;
  BOOL v5;
  char *v6;
  char *v7;
  char v8;
  char __s;
  _BYTE v12[71];

  *(_QWORD *)&v12[63] = *MEMORY[0x1E0C80C00];
  p_s = &__s;
  if (a2 < 0)
  {
    p_s = v12;
    __s = 45;
    a2 = -a2;
  }
  else if (!a2)
  {
LABEL_8:
    *p_s = 48;
    v3 = p_s + 1;
    goto LABEL_9;
  }
  v3 = p_s;
  do
  {
    *v3++ = (char)a2 % 10 + 48;
    v4 = a2 + 9;
    a2 /= 10;
  }
  while (v4 > 0x12);
  if (p_s == v3)
    goto LABEL_8;
LABEL_9:
  v5 = p_s == v3;
  *v3 = 0;
  v6 = v3 - 1;
  if (!v5 && v6 > p_s)
  {
    v7 = p_s + 1;
    do
    {
      v8 = *(v7 - 1);
      *(v7 - 1) = *v6;
      *v6-- = v8;
    }
    while (v7++ < v6);
  }
  return sub_19BFB967C(a1, &__s);
}

uint64_t sub_19BFBC018(uint64_t a1, int a2)
{
  char *p_s;
  unsigned int v3;
  char *v4;
  char *v5;
  char v6;
  char __s;
  _BYTE v10[71];

  *(_QWORD *)&v10[63] = *MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_5;
  p_s = &__s;
  do
  {
    v3 = (unsigned __int16)a2;
    *p_s++ = ((unsigned __int16)a2 % 0xAu) | 0x30;
    LOWORD(a2) = (unsigned __int16)a2 / 0xAu;
  }
  while (v3 > 9);
  if (p_s == &__s)
  {
LABEL_5:
    p_s = v10;
    __s = 48;
  }
  *p_s = 0;
  v4 = p_s - 1;
  if (p_s != &__s && p_s - 1 > &__s)
  {
    v5 = v10;
    do
    {
      v6 = *(v5 - 1);
      *(v5 - 1) = *v4;
      *v4-- = v6;
    }
    while (v5++ < v4);
  }
  return sub_19BFB967C(a1, &__s);
}

uint64_t sub_19BFBC0FC(uint64_t a1, uint64_t a2)
{
  char *p_s;
  char *v3;
  unint64_t v4;
  BOOL v5;
  char *v6;
  char *v7;
  char v8;
  char __s;
  _BYTE v12[71];

  *(_QWORD *)&v12[63] = *MEMORY[0x1E0C80C00];
  p_s = &__s;
  if (a2 < 0)
  {
    p_s = v12;
    __s = 45;
    a2 = -a2;
  }
  else if (!a2)
  {
LABEL_8:
    *p_s = 48;
    v3 = p_s + 1;
    goto LABEL_9;
  }
  v3 = p_s;
  do
  {
    *v3++ = (char)a2 % 10 + 48;
    v4 = a2 + 9;
    a2 /= 10;
  }
  while (v4 > 0x12);
  if (p_s == v3)
    goto LABEL_8;
LABEL_9:
  v5 = p_s == v3;
  *v3 = 0;
  v6 = v3 - 1;
  if (!v5 && v6 > p_s)
  {
    v7 = p_s + 1;
    do
    {
      v8 = *(v7 - 1);
      *(v7 - 1) = *v6;
      *v6-- = v8;
    }
    while (v7++ < v6);
  }
  return sub_19BFB967C(a1, &__s);
}

uint64_t sub_19BFBC1EC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  char v7;
  unint64_t v8;
  int v9;
  int v10;
  char v11;
  int v12;
  char *v13;
  unsigned int v14;
  std::string *v15;
  BOOL v16;
  char *v17;
  std::string::value_type *v19;
  char v20;
  BOOL v21;
  char v22;
  const char *v23;
  int v24;
  int v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  unint64_t v29;
  std::string *v30;
  char *v31;
  std::string::value_type *v33;
  char v34;
  int v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  int v41;
  char *v42;
  int v43;
  BOOL v44;
  int v45;
  char *v46;
  char *v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  int v53;
  unsigned __int8 *v54;
  char *v55;
  int v56;
  int v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  int v65;
  uint64_t v66;
  int v67;
  char *v68;
  int v69;
  unsigned __int16 *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  const char *v81;
  std::string *v82;
  const char *v83;
  char *__dst;
  uint64_t v86;
  std::string v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v6 = (char *)operator new[]();
  v86 = operator new[]();
  v7 = *a2;
  if (!*a2)
  {
LABEL_188:
    v78 = 1;
    goto LABEL_189;
  }
  v8 = 0;
  v83 = "[iseSCwcnblLh] is required after %p";
  while (1)
  {
    if (v7 != 37)
    {
      if (v7 == 92)
      {
        v10 = *++a2;
        v9 = v10;
        if (v10 <= 101)
        {
          if (v9 == 98)
            v22 = 8;
          else
            v22 = 0;
          if (v9 == 97)
            v22 = 7;
          if (v9 == 92)
            v11 = 92;
          else
            v11 = v22;
        }
        else
        {
          v11 = 0;
          switch(v9)
          {
            case 'n':
              v11 = 10;
              break;
            case 'o':
            case 'p':
            case 'q':
            case 'u':
              break;
            case 'r':
              v11 = 13;
              break;
            case 's':
              v11 = 32;
              break;
            case 't':
              v11 = 9;
              break;
            case 'v':
              v11 = 11;
              break;
            default:
              if (v9 == 102)
                v11 = 12;
              else
                v11 = 0;
              break;
          }
        }
        if (!sub_19BFB959C(a4, 1))
          goto LABEL_41;
        *(_BYTE *)(*(_QWORD *)(a4 + 24) + *(_QWORD *)(a4 + 8)) = v11;
      }
      else
      {
        if (!sub_19BFB959C(a4, 1))
        {
LABEL_41:
          v13 = a2;
          goto LABEL_42;
        }
        *(_BYTE *)(*(_QWORD *)(a4 + 24) + *(_QWORD *)(a4 + 8)) = v7;
      }
      ++*(_QWORD *)(a4 + 8);
      goto LABEL_41;
    }
    v13 = a2 + 1;
    v12 = a2[1];
    if (v12 <= 98)
    {
      switch(a2[1])
      {
        case 'F':
          goto LABEL_46;
        case 'G':
        case 'I':
        case 'J':
        case 'K':
          goto LABEL_200;
        case 'H':
          sub_19BFB967C(a4, *(char **)(a3 + 56));
          goto LABEL_42;
        case 'L':
          v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
          if (!v29)
            goto LABEL_63;
          v30 = &v88;
          do
          {
            v30->__r_.__value_.__s.__data_[0] = (v29 % 0xA) | 0x30;
            v30 = (std::string *)((char *)v30 + 1);
            v16 = v29 > 9;
            v29 /= 0xAuLL;
          }
          while (v16);
          if (v30 == &v88)
          {
LABEL_63:
            v88.__r_.__value_.__s.__data_[0] = 48;
            v30 = (std::string *)((char *)&v88.__r_.__value_.__l.__data_ + 1);
          }
          v30->__r_.__value_.__s.__data_[0] = 0;
          v31 = (char *)&v30[-1].__r_.__value_.__r.__words[2] + 7;
          if (v30 != &v88 && (std::string *)((char *)&v30[-1].__r_.__value_.__r.__words[2] + 7) > &v88)
          {
            v33 = &v88.__r_.__value_.__s.__data_[1];
            do
            {
              v34 = *(v33 - 1);
              *(v33 - 1) = *v31;
              *v31-- = v34;
              v21 = v33++ >= v31;
            }
            while (!v21);
          }
          goto LABEL_29;
        case 'M':
          v28 = *(unsigned __int16 *)(a3 + 98);
          v27 = (const void *)(*(_QWORD *)(a3 + 48) - v28 + *(unsigned __int16 *)(a3 + 96));
          goto LABEL_77;
        default:
          if (v12 != 37)
          {
            if (v12 != 83)
              goto LABEL_200;
            v27 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
            v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
            goto LABEL_77;
          }
          if (!sub_19BFB959C(a4, 1))
            goto LABEL_42;
          *(_BYTE *)(*(_QWORD *)(a4 + 24) + *(_QWORD *)(a4 + 8)) = 37;
          v38 = *(_QWORD *)(a4 + 8) + 1;
          break;
      }
      goto LABEL_82;
    }
    if (v12 <= 108)
      break;
    switch(v12)
    {
      case 'm':
        v27 = *(const void **)(a3 + 48);
        v28 = *(unsigned __int16 *)(a3 + 96);
LABEL_77:
        if (sub_19BFB959C(a4, v28))
        {
          memcpy((void *)(*(_QWORD *)(a4 + 24) + *(_QWORD *)(a4 + 8)), v27, v28);
          v38 = *(_QWORD *)(a4 + 8) + v28;
LABEL_82:
          *(_QWORD *)(a4 + 8) = v38;
        }
        break;
      case 'p':
        v13 = a2 + 2;
        v35 = a2[2];
        if (v35 <= 98)
        {
          if (v35 == 67)
          {
            v72 = *(_QWORD *)(*(_QWORD *)a3 + 112);
            v71 = *(_QWORD *)(a3 + 112) - *(int *)(a3 + 80);
LABEL_159:
            v37 = v71 - v72;
LABEL_160:
            sub_19BFBC0FC(a4, v37);
            break;
          }
          v36 = (unsigned __int16 *)(a3 + 98);
          if (v35 == 76)
          {
LABEL_144:
            sub_19BFBC018(a4, *v36);
            break;
          }
          if (v35 != 83)
            goto LABEL_197;
          v61 = *(_QWORD *)(a3 + 48);
          v62 = *(unsigned __int16 *)(a3 + 98);
          v63 = *(unsigned __int16 *)(a3 + 96);
          if (sub_19BFB959C(a4, v62 - v63))
          {
            memcpy((void *)(*(_QWORD *)(a4 + 24) + *(_QWORD *)(a4 + 8)), (const void *)(v61 - v62 + v63), v62 - v63);
            v38 = *(_QWORD *)(a4 + 8) + v62 - v63;
            goto LABEL_82;
          }
        }
        else
        {
          v36 = (unsigned __int16 *)(a3 + 96);
          switch(a2[2])
          {
            case 'c':
              v37 = *(_QWORD *)(a3 + 112);
              goto LABEL_160;
            case 'd':
            case 'f':
            case 'g':
            case 'i':
            case 'j':
            case 'k':
            case 'm':
            case 'o':
            case 'q':
            case 'r':
              goto LABEL_197;
            case 'e':
              v66 = *(_QWORD *)(a3 + 48);
              v65 = v66
                  - (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1)
                  + *(unsigned __int16 *)(a3 + 96);
              goto LABEL_157;
            case 'h':
              v69 = a2[3];
              v68 = a2 + 3;
              v67 = v69;
              v70 = (unsigned __int16 *)(a3 + 100);
              if (v69 != 114)
              {
                v70 = (unsigned __int16 *)(a3 + 102);
                if (v67 != 108)
                {
                  v81 = "lr is required after %ph";
                  goto LABEL_196;
                }
              }
              sub_19BFBC018(a4, *v70);
              v13 = v68;
              break;
            case 'l':
              goto LABEL_144;
            case 'n':
              v71 = *(_QWORD *)(a3 + 112);
              v72 = *(_QWORD *)(*(_QWORD *)a3 + 112);
              goto LABEL_159;
            case 'p':
              v13 = a2 + 4;
              v73 = a2[4];
              v74 = a2[3];
              if (v73 == 92)
              {
                LOBYTE(v73) = 0;
                v75 = a2[5];
                v13 = a2 + 5;
                if (v75 <= 101)
                {
                  v26 = v86;
                  switch(v75)
                  {
                    case '\\':
                      LOBYTE(v73) = 92;
                      break;
                    case 'a':
                      LOBYTE(v73) = 7;
                      break;
                    case 'b':
                      LOBYTE(v73) = 8;
                      break;
                  }
                }
                else
                {
                  v26 = v86;
                  switch(v75)
                  {
                    case 'n':
                      LOBYTE(v73) = 10;
                      break;
                    case 'o':
                    case 'p':
                    case 'q':
                    case 'u':
                      break;
                    case 'r':
                      LOBYTE(v73) = 13;
                      break;
                    case 's':
                      LOBYTE(v73) = 32;
                      break;
                    case 't':
                      LOBYTE(v73) = 9;
                      break;
                    case 'v':
                      LOBYTE(v73) = 11;
                      break;
                    default:
                      if (v75 == 102)
                        LOBYTE(v73) = 12;
                      break;
                  }
                }
              }
              else
              {
                v26 = v86;
              }
              v77 = *(_QWORD *)(a3 + 40);
              if (v77)
              {
                while (1)
                {
                  if (v77 != *(_QWORD *)(a3 + 40) && sub_19BFB959C(a4, 1))
                    *(_BYTE *)(*(_QWORD *)(a4 + 24) + (*(_QWORD *)(a4 + 8))++) = v73;
                  if (v74 != 99)
                    break;
                  sub_19BFBBF24(a4, *(_DWORD *)(v77 + 16));
                  v77 = *(_QWORD *)(v77 + 8);
                  if (!v77)
                    goto LABEL_42;
                }
                (*(void (**)(uint64_t, const char *, ...))(*(_QWORD *)a1 + 320))(a1, "[icP] is required after %pp", (const void *)(a3 + 102));
              }
              else
              {
                (*(void (**)(uint64_t, const char *))(*(_QWORD *)a1 + 320))(a1, "no path information is available");
              }
              goto LABEL_193;
            case 's':
              v76 = *(_QWORD *)(a3 + 48);
              v65 = v76 - (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
              goto LABEL_157;
            default:
              if (v35 != 119)
                goto LABEL_197;
              v65 = *(_DWORD *)(a3 + 80);
LABEL_157:
              sub_19BFBBF24(a4, v65);
              goto LABEL_42;
          }
        }
        break;
      case 's':
        v14 = *(unsigned __int8 *)(a3 + 124);
        if (!*(_BYTE *)(a3 + 124))
          goto LABEL_21;
        v15 = &v88;
        do
        {
          v15->__r_.__value_.__s.__data_[0] = (v14 % 0xA) | 0x30;
          v15 = (std::string *)((char *)v15 + 1);
          v16 = v14 > 9;
          v14 /= 0xAu;
        }
        while (v16);
        if (v15 == &v88)
        {
LABEL_21:
          v88.__r_.__value_.__s.__data_[0] = 48;
          v15 = (std::string *)((char *)&v88.__r_.__value_.__l.__data_ + 1);
        }
        v15->__r_.__value_.__s.__data_[0] = 0;
        v17 = (char *)&v15[-1].__r_.__value_.__r.__words[2] + 7;
        if (v15 != &v88 && (std::string *)((char *)&v15[-1].__r_.__value_.__r.__words[2] + 7) > &v88)
        {
          v19 = &v88.__r_.__value_.__s.__data_[1];
          do
          {
            v20 = *(v19 - 1);
            *(v19 - 1) = *v17;
            *v17-- = v20;
            v21 = v19++ >= v17;
          }
          while (!v21);
        }
LABEL_29:
        sub_19BFB967C(a4, (char *)&v88);
        break;
      default:
        goto LABEL_200;
    }
LABEL_42:
    v7 = v13[1];
    a2 = v13 + 1;
    if (!v7)
      goto LABEL_188;
  }
  if (v12 == 99)
  {
    sub_19BFBBF24(a4, *(_DWORD *)(a3 + 80));
    goto LABEL_42;
  }
  if (v12 != 102)
  {
LABEL_200:
    v26 = v86;
    sub_19BF8E43C(&v88, "unknown meta char: ");
    std::string::append(&v88, v13, 1uLL);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = &v88;
    else
      v82 = (std::string *)v88.__r_.__value_.__r.__words[0];
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 320))(a1, v82);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    goto LABEL_193;
  }
LABEL_46:
  v23 = *(const char **)(a3 + 56);
  if (!*v23)
  {
    v81 = "no feature information available";
LABEL_196:
    v83 = v81;
LABEL_197:
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)a1 + 320))(a1, v83);
    v78 = 0;
LABEL_189:
    v26 = v86;
    goto LABEL_194;
  }
  __dst = v6;
  if (!v8)
  {
    v46 = v6;
    v47 = strncpy(v6, v23, 0x2000uLL);
    v48 = strlen(v47);
    if (v48 < 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v49 = (unint64_t)&v6[v48];
      v50 = 64;
      v51 = (_QWORD *)v86;
      do
      {
        v52 = v50;
        while (1)
        {
          v53 = *v46;
          if (v53 != 9 && v53 != 32)
            break;
          ++v46;
        }
        if (v53 == 34)
        {
          v54 = (unsigned __int8 *)++v46;
          v55 = v46;
          if ((unint64_t)v46 < v49)
          {
            v54 = (unsigned __int8 *)v46;
            v55 = v46;
            do
            {
              v56 = *v55;
              if (v56 == 34)
              {
                v57 = *++v55;
                if (v57 != 34)
                  break;
              }
              *v54++ = v56;
              ++v55;
            }
            while ((unint64_t)v55 < v49);
          }
          v58 = memchr(v55, 44, v49 - (_QWORD)v55);
          if (v58)
            v59 = v58;
          else
            v59 = (_BYTE *)v49;
        }
        else
        {
          v60 = memchr(v46, 44, v49 - (_QWORD)v46);
          if (v60)
            v59 = v60;
          else
            v59 = (_BYTE *)v49;
          v54 = v59;
        }
        v50 = v52 - 1;
        if (v52 < 2)
        {
          *v51 = v46;
          ++v8;
          if (v52 == 1)
            break;
        }
        else
        {
          *v54 = 0;
          *v51 = v46;
          ++v8;
        }
        ++v51;
        v46 = v59 + 1;
      }
      while ((unint64_t)(v59 + 1) < v49);
    }
  }
  if (*v13 != 70)
  {
    LOBYTE(v24) = 9;
    v6 = __dst;
    goto LABEL_84;
  }
  v13 = a2 + 2;
  v24 = a2[2];
  v6 = __dst;
  if (v24 != 92)
  {
LABEL_84:
    v26 = v86;
    goto LABEL_85;
  }
  v25 = a2[3];
  v13 = a2 + 3;
  if (v25 <= 101)
  {
    if (v25 == 98)
      v64 = 8;
    else
      v64 = 0;
    if (v25 == 97)
      v64 = 7;
    if (v25 == 92)
      LOBYTE(v24) = 92;
    else
      LOBYTE(v24) = v64;
    goto LABEL_84;
  }
  v26 = v86;
  LOBYTE(v24) = 0;
  switch(v25)
  {
    case 'n':
      LOBYTE(v24) = 10;
      break;
    case 'o':
    case 'p':
    case 'q':
    case 'u':
      break;
    case 'r':
      LOBYTE(v24) = 13;
      break;
    case 's':
      LOBYTE(v24) = 32;
      break;
    case 't':
      LOBYTE(v24) = 9;
      break;
    case 'v':
      LOBYTE(v24) = 11;
      break;
    default:
      if (v25 == 102)
        LOBYTE(v24) = 12;
      else
        LOBYTE(v24) = 0;
      break;
  }
LABEL_85:
  if (v13[1] != 91)
  {
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)a1 + 320))(a1, "cannot find '['");
    goto LABEL_193;
  }
  v39 = 0;
  v40 = 0;
  v13 += 2;
  while (2)
  {
    v41 = *v13;
    if ((v41 - 48) < 0xA)
    {
      v39 = *v13 + 10 * v39 - 48;
LABEL_89:
      ++v13;
      continue;
    }
    break;
  }
  if (v41 == 44 || v41 == 93)
  {
    if (v39 >= v8)
    {
      v79 = "given index is out of range";
      goto LABEL_192;
    }
    v42 = *(char **)(v26 + 8 * v39);
    v43 = *v42;
    v44 = v43 != 42;
    if (v43 == 42)
    {
      v45 = *v13;
    }
    else
    {
      if (v40)
      {
        if (sub_19BFB959C(a4, 1))
          *(_BYTE *)(*(_QWORD *)(a4 + 24) + (*(_QWORD *)(a4 + 8))++) = v24;
        v42 = *(char **)(v26 + 8 * v39);
      }
      sub_19BFB967C(a4, v42);
      v45 = *v13;
    }
    if (v45 == 93)
      goto LABEL_42;
    v39 = 0;
    v40 = v44;
    goto LABEL_89;
  }
  v79 = "cannot find ']'";
LABEL_192:
  (*(void (**)(uint64_t, const char *))(*(_QWORD *)a1 + 320))(a1, v79);
LABEL_193:
  v78 = 0;
LABEL_194:
  MEMORY[0x1A1AD0CB8](v26, 0x10C80436913F5);
  MEMORY[0x1A1AD0CB8](v6, 0x1000C8077774924);
  return v78;
}

void sub_19BFBCD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  MEMORY[0x1A1AD0CB8](a17, 0x10C80436913F5);
  MEMORY[0x1A1AD0CB8](v24, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFBCDD0(char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char **v4;
  uint64_t result;

  switch(*(_BYTE *)(a3 + 124))
  {
    case 0:
      v4 = a1 + 2;
      goto LABEL_8;
    case 1:
      v4 = a1 + 8;
      goto LABEL_8;
    case 2:
      v4 = a1 + 4;
      goto LABEL_8;
    case 3:
      v4 = a1 + 6;
      goto LABEL_8;
    case 4:
      v4 = a1 + 10;
LABEL_8:
      result = sub_19BFBC1EC(a2, *v4, a3, a4);
      break;
    default:
      result = 1;
      break;
  }
  return result;
}

uint64_t sub_19BFBCE30(uint64_t a1, char *a2)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v11;
  int *v12;
  int v13;
  _DWORD *v14;
  _QWORD *v15;
  int v16;
  _DWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  uint64_t result;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  size_t v42;
  char *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *__p[2];
  unsigned __int8 v49;

  v4 = sub_19BFB6DF0();
  sub_19BF8E43C(__p, a2);
  *(_QWORD *)(a1 + 8) = sub_19BFB6F98(v4, (uint64_t)__p);
  if ((char)v49 < 0)
    operator delete(__p[0]);
  v5 = (pthread_mutex_t *)(v4 + 64);
  pthread_mutex_lock(v5);
  v6 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v6 + 8))
  {
    v7 = (char *)sub_19BF8E43C(__p, a2);
    if ((v49 & 0x80u) == 0)
      v8 = v7;
    else
      v8 = (char *)__p[0];
    v9 = sub_19BFB7234(v6, v8, "r");
    v10 = v9;
    if (((char)v49 & 0x80000000) == 0)
    {
      if ((v9 & 1) != 0)
        goto LABEL_9;
LABEL_35:
      v43 = (char *)sub_19BFAA4D8(*(_QWORD *)(a1 + 8) + 48);
      v44 = sub_19BF8E43C(__p, v43);
      if ((v49 & 0x80u) == 0)
        v45 = v44;
      else
        v45 = __p[0];
      if ((v49 & 0x80u) == 0)
        v46 = v49;
      else
        v46 = (uint64_t)__p[1];
      sub_19BF8E6F8((_QWORD *)(a1 + 56), (uint64_t)v45, v46);
      if ((char)v49 < 0)
        operator delete(__p[0]);
      pthread_mutex_unlock(v5);
      goto LABEL_44;
    }
    operator delete(__p[0]);
    if ((v10 & 1) == 0)
      goto LABEL_35;
  }
LABEL_9:
  pthread_mutex_unlock(v5);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(int **)(v11 + 8);
  v13 = *v12;
  if (((32 * *v12) | 4u) + 262140 != *(_QWORD *)(v11 + 16))
  {
    if (setjmp((int *)(a1 + 344)) != 1)
    {
      std::ios_base::clear((std::ios_base *)(a1 + 56 + *(_QWORD *)(*(_QWORD *)(a1 + 56) - 24)), 0);
      v36 = sub_19BF8E6F8((_QWORD *)(a1 + 56), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/char_property.cpp", 76);
      sub_19BF8E6F8(v36, (uint64_t)"(", 1);
      v37 = (_QWORD *)std::ostream::operator<<();
      v38 = sub_19BF8E6F8(v37, (uint64_t)") [", 3);
      v39 = sub_19BF8E6F8(v38, (uint64_t)"fsize == cmmap_->size()", 23);
      v40 = sub_19BF8E6F8(v39, (uint64_t)"] ", 2);
      v41 = sub_19BF8E6F8(v40, (uint64_t)"invalid file size: ", 19);
      v42 = strlen(a2);
      sub_19BF8E6F8(v41, (uint64_t)a2, v42);
      longjmp((int *)(a1 + 344), 1);
    }
LABEL_44:
    v47 = sub_19BFB6DF0();
    sub_19BFB198C(v47, *(_QWORD *)(a1 + 8));
    result = 0;
    *(_QWORD *)(a1 + 8) = 0;
    return result;
  }
  v14 = v12 + 1;
  v15 = *(_QWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v15;
  if (v13)
  {
    v16 = 0;
    v17 = v14;
    do
    {
      v18 = v15;
      v19 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v18 >= v19)
      {
        v21 = *(_QWORD *)(a1 + 16);
        v22 = ((uint64_t)v18 - v21) >> 3;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61)
          sub_19BF8EB40();
        v24 = v19 - v21;
        if (v24 >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)sub_19BFAC524(v25);
          v28 = v27;
        }
        else
        {
          v28 = 0;
          v26 = 0;
        }
        v29 = &v26[8 * v22];
        *(_QWORD *)v29 = v17;
        v30 = v29 + 8;
        v31 = *(_QWORD *)(a1 + 16);
        v32 = *(_QWORD *)(a1 + 24);
        if (v32 == v31)
        {
          v34 = *(void **)(a1 + 24);
        }
        else
        {
          v33 = &v26[8 * v22];
          do
          {
            *((_QWORD *)v33 - 1) = *(_QWORD *)(v32 - 8);
            v33 -= 8;
            v32 -= 8;
          }
          while (v32 != v31);
          v29 = v33;
          v34 = *(void **)(a1 + 16);
        }
        v20 = v30;
        *(_QWORD *)(a1 + 16) = v29;
        *(_QWORD *)(a1 + 24) = v30;
        *(_QWORD *)(a1 + 32) = &v26[8 * v28];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *v18 = v17;
        v20 = v18 + 1;
      }
      v15 = v20;
      *(_QWORD *)(a1 + 24) = v20;
      ++v16;
      v17 += 8;
      v14 = v17;
    }
    while (v16 != v13);
  }
  *(_QWORD *)(a1 + 40) = v14;
  return 1;
}

void sub_19BFBD1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LXLexiconRepositoryCreateView(const __CFString *a1)
{
  uint64_t Instance;
  char *v3;
  void **v4;
  void **v5;
  NSObject *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 **v43;
  unsigned __int8 *i;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  __int128 v60;
  void *__p[2];
  unsigned __int8 v62;
  uint64_t v63[2];

  if (qword_1ED024410 != -1)
    dispatch_once(&qword_1ED024410, &unk_1E3D12B68);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = off_1E3D14618;
  v3 = (char *)operator new(0x78uLL);
  *(_OWORD *)(v3 + 8) = 0u;
  *(_QWORD *)v3 = &off_1E3D14E70;
  *((_QWORD *)v3 + 3) = &off_1E3D145F0;
  *((_OWORD *)v3 + 2) = 0u;
  sub_19BF87140(a1, __p);
  if ((v62 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  *((_QWORD *)v3 + 6) = os_log_create("com.apple.Lexicon", (const char *)v4);
  if ((char)v62 < 0)
    operator delete(__p[0]);
  *((_QWORD *)v3 + 7) = 850045863;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  *(_QWORD *)(Instance + 24) = v3 + 24;
  *(_QWORD *)(Instance + 32) = v3;
  sub_19BF87864(__p, "root");
  *(_OWORD *)(Instance + 40) = *(_OWORD *)__p;
  sub_19BF87140(a1, (_QWORD *)(Instance + 56));
  sub_19BF87140(a1, __p);
  if ((v62 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = os_log_create("com.apple.Lexicon", (const char *)v5);
  *(_QWORD *)(Instance + 80) = v6;
  if ((char)v62 < 0)
  {
    operator delete(__p[0]);
    v6 = *(NSObject **)(Instance + 80);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0]) = 0;
    _os_log_debug_impl(&dword_19BF85000, v6, OS_LOG_TYPE_DEBUG, "created a lexicon view", (uint8_t *)__p, 2u);
  }
  v7 = *(_OWORD *)(Instance + 24);
  v60 = v7;
  v8 = *(std::__shared_weak_count **)(Instance + 32);
  if (*((_QWORD *)&v7 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_19BFBD85C();
  sub_19BF87140(a1, __p);
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }
  std::mutex::lock((std::mutex *)&qword_1ED024150);
  v13 = (_QWORD *)sub_19BFE8590((uint64_t)__p, (uint64_t)__p);
  v14 = v13;
  v15 = (_OWORD *)v13[6];
  v16 = v13[7];
  if ((unint64_t)v15 < v16)
  {
    *v15 = v60;
    if (v8)
    {
      v17 = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = v15 + 1;
    v13[6] = v15 + 1;
    goto LABEL_45;
  }
  v20 = v13[5];
  v21 = ((uint64_t)v15 - v20) >> 4;
  v22 = v21 + 1;
  if ((unint64_t)(v21 + 1) >> 60)
    sub_19BF8EB40();
  v23 = v16 - v20;
  if (v23 >> 3 > v22)
    v22 = v23 >> 3;
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
    v24 = 0xFFFFFFFFFFFFFFFLL;
  else
    v24 = v22;
  if (v24 >> 60)
    sub_19BF8E6D0();
  v25 = (char *)operator new(16 * v24);
  v26 = &v25[16 * v21];
  *(_OWORD *)v26 = v60;
  if (v8)
  {
    v27 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = &v25[16 * v24];
  v19 = v26 + 16;
  v30 = (_QWORD *)v14[5];
  v31 = (_QWORD *)v14[6];
  if (v31 == v30)
  {
    v14[5] = v26;
    v14[6] = v19;
    v14[7] = v29;
    if (!v31)
      goto LABEL_45;
    goto LABEL_44;
  }
  do
  {
    v32 = *((_OWORD *)v31 - 1);
    v31 -= 2;
    *((_OWORD *)v26 - 1) = v32;
    v26 -= 16;
    *v31 = 0;
    v31[1] = 0;
  }
  while (v31 != v30);
  v33 = (_QWORD *)v14[5];
  v31 = (_QWORD *)v14[6];
  v14[5] = v26;
  v14[6] = v19;
  v14[7] = v29;
  if (v31 != v33)
  {
    do
    {
      v34 = (std::__shared_weak_count *)*(v31 - 1);
      if (v34)
        std::__shared_weak_count::__release_weak(v34);
      v31 -= 2;
    }
    while (v31 != v33);
    v31 = v33;
  }
  if (v31)
LABEL_44:
    operator delete(v31);
LABEL_45:
  v14[6] = v19;
  if ((v62 & 0x80u) == 0)
    v35 = (uint64_t *)__p;
  else
    v35 = (uint64_t *)__p[0];
  if ((v62 & 0x80u) == 0)
    v36 = v62;
  else
    v36 = (unint64_t)__p[1];
  v37 = sub_19BFCF130(v35, v36);
  v38 = *((_QWORD *)&xmmword_1ED024100 + 1);
  if (*((_QWORD *)&xmmword_1ED024100 + 1))
  {
    v39 = v37;
    v40 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1ED024100 + 8));
    v40.i16[0] = vaddlv_u8(v40);
    v41 = v40.u32[0];
    if (v40.u32[0] > 1uLL)
    {
      v42 = v37;
      if (v37 >= *((_QWORD *)&xmmword_1ED024100 + 1))
        v42 = v37 % *((_QWORD *)&xmmword_1ED024100 + 1);
    }
    else
    {
      v42 = (*((_QWORD *)&xmmword_1ED024100 + 1) - 1) & v37;
    }
    v43 = *(unsigned __int8 ***)(xmmword_1ED024100 + 8 * v42);
    if (v43)
    {
      for (i = *v43; i; i = *(unsigned __int8 **)i)
      {
        v45 = *((_QWORD *)i + 1);
        if (v39 == v45)
        {
          if (sub_19BFBB9E8(i + 16, (unsigned __int8 *)__p))
          {
            v46 = sub_19BFE7F20((uint64_t)__p, (uint64_t)__p);
            v47 = *(std::__shared_weak_count **)(v46 + 48);
            v63[0] = *(_QWORD *)(v46 + 40);
            v63[1] = (uint64_t)v47;
            if (v47)
            {
              v48 = (unint64_t *)&v47->__shared_weak_owners_;
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            sub_19BFE83B0((uint64_t)__p, v63);
            if (v47)
              std::__shared_weak_count::__release_weak(v47);
            break;
          }
        }
        else
        {
          if (v41 > 1)
          {
            if (v45 >= v38)
              v45 %= v38;
          }
          else
          {
            v45 &= v38 - 1;
          }
          if (v45 != v42)
            break;
        }
      }
    }
  }
  v50 = (_QWORD *)qword_1ED024138;
  if (qword_1ED024138)
  {
    do
    {
      v51 = (uint64_t *)v50[5];
      v52 = (uint64_t *)v50[6];
      while (v51 != v52)
      {
        v53 = v51[1];
        if (!v53 || *(_QWORD *)(v53 + 8) == -1)
        {
          if (v51 != v52)
          {
            v54 = v51 + 2;
            if (v51 + 2 != v52)
            {
              do
              {
                v55 = v54[1];
                if (v55 && *(_QWORD *)(v55 + 8) != -1)
                {
                  v56 = *v54;
                  *v54 = 0;
                  v54[1] = 0;
                  v57 = (std::__shared_weak_count *)v51[1];
                  *v51 = v56;
                  v51[1] = v55;
                  if (v57)
                    std::__shared_weak_count::__release_weak(v57);
                  v51 += 2;
                }
                v54 += 2;
              }
              while (v54 != v52);
              v52 = (uint64_t *)v50[6];
            }
          }
          if (v51 != v52)
          {
            while (v52 != v51)
            {
              v58 = (std::__shared_weak_count *)*(v52 - 1);
              if (v58)
                std::__shared_weak_count::__release_weak(v58);
              v52 -= 2;
            }
            v50[6] = v51;
          }
          break;
        }
        v51 += 2;
      }
      v50 = (_QWORD *)*v50;
    }
    while (v50);
  }
  std::mutex::unlock((std::mutex *)&qword_1ED024150);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  if ((char)v62 < 0)
    operator delete(__p[0]);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return Instance;
}

void sub_19BFBD7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;

  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::mutex::unlock((std::mutex *)&qword_1ED024150);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  if (a16 < 0)
    operator delete(__p);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void sub_19BFBD85C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)qword_1ED0240F0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(qword_1ED0240F0))
    {
      xmmword_1ED024120 = 0u;
      xmmword_1ED024140 = 0u;
      xmmword_1ED024100 = 0u;
      *(_OWORD *)&qword_1ED024110 = 0u;
      LODWORD(xmmword_1ED024120) = 1065353216;
      *(__int128 *)((char *)&xmmword_1ED024120 + 8) = 0u;
      *(_OWORD *)&qword_1ED024138 = 0u;
      DWORD2(xmmword_1ED024140) = 1065353216;
      qword_1ED024150 = 850045863;
      unk_1ED024158 = 0u;
      unk_1ED024168 = 0u;
      unk_1ED024178 = 0u;
      qword_1ED024188 = 0;
      __cxa_guard_release(qword_1ED0240F0);
    }
  }
}

uint64_t sub_19BFBD8E4()
{
  uint64_t result;

  qword_1ED024318 = 0;
  unk_1ED024320 = "LXLexicon";
  qword_1ED024328 = 0;
  unk_1ED024330 = 0;
  qword_1ED024338 = (uint64_t)sub_19BFBD930;
  unk_1ED024340 = 0u;
  unk_1ED024350 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED024378 = result;
  return result;
}

uint64_t sub_19BFBD930(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 16))(a1 + 16);
}

void LXLexiconRepositoryAddOrUpdate(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  const __CFString *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[2];
  char v27;
  const __CFString *v28;
  uint64_t v29[2];
  uint64_t v30[2];
  char v31;

  v2 = a1[3];
  v1 = (std::__shared_weak_count *)a1[4];
  if (v1)
  {
    p_shared_weak_owners = (unint64_t *)&v1->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
  }
  v5 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(a1[2] + 64))(a1 + 2);
  v28 = v5;
  sub_19BFBD85C();
  sub_19BF87140(v5, __p);
  if (v1)
  {
    v6 = (unint64_t *)&v1->__shared_weak_owners_;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::mutex::lock((std::mutex *)&qword_1ED024150);
  v8 = sub_19BFE7F20((uint64_t)__p, (uint64_t)__p);
  if (v1)
  {
    v9 = (unint64_t *)&v1->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(std::__shared_weak_count **)(v8 + 48);
  *(_QWORD *)(v8 + 40) = v2;
  *(_QWORD *)(v8 + 48) = v1;
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = (uint64_t *)qword_1ED024110;
  if (qword_1ED024110)
  {
    while (1)
    {
      v13 = v12[6];
      if (!v13 || *(_QWORD *)(v13 + 8) == -1)
        break;
      v14 = (uint64_t *)*v12;
LABEL_43:
      v12 = v14;
      if (!v14)
        goto LABEL_44;
    }
    v15 = *((_QWORD *)&xmmword_1ED024100 + 1);
    v16 = v12[1];
    v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1ED024100 + 8));
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      if (v16 >= *((_QWORD *)&xmmword_1ED024100 + 1))
        v16 %= *((_QWORD *)&xmmword_1ED024100 + 1);
    }
    else
    {
      v16 &= *((_QWORD *)&xmmword_1ED024100 + 1) - 1;
    }
    v14 = (uint64_t *)*v12;
    v18 = *(uint64_t **)(xmmword_1ED024100 + 8 * v16);
    do
    {
      v19 = v18;
      v18 = (uint64_t *)*v18;
    }
    while (v18 != v12);
    if (v19 == &qword_1ED024110)
      goto LABEL_59;
    v20 = v19[1];
    if (v17.u32[0] > 1uLL)
    {
      if (v20 >= *((_QWORD *)&xmmword_1ED024100 + 1))
        v20 %= *((_QWORD *)&xmmword_1ED024100 + 1);
    }
    else
    {
      v20 &= *((_QWORD *)&xmmword_1ED024100 + 1) - 1;
    }
    v21 = *v12;
    if (v20 != v16)
    {
LABEL_59:
      if (v14)
      {
        v22 = v14[1];
        if (v17.u32[0] > 1uLL)
        {
          if (v22 >= *((_QWORD *)&xmmword_1ED024100 + 1))
            v22 %= *((_QWORD *)&xmmword_1ED024100 + 1);
        }
        else
        {
          v22 &= *((_QWORD *)&xmmword_1ED024100 + 1) - 1;
        }
        v21 = *v12;
        if (v22 == v16)
          goto LABEL_36;
      }
      *(_QWORD *)(xmmword_1ED024100 + 8 * v16) = 0;
      v21 = *v12;
    }
    if (!v21)
    {
LABEL_42:
      *v19 = v21;
      *v12 = 0;
      --qword_1ED024118;
      v30[0] = (uint64_t)v12;
      v30[1] = (uint64_t)&qword_1ED024110;
      v31 = 1;
      sub_19BFE8AB8(v30);
      goto LABEL_43;
    }
LABEL_36:
    v23 = *(_QWORD *)(v21 + 8);
    if (v17.u32[0] > 1uLL)
    {
      if (v23 >= v15)
        v23 %= v15;
    }
    else
    {
      v23 &= v15 - 1;
    }
    if (v23 != v16)
    {
      *(_QWORD *)(xmmword_1ED024100 + 8 * v23) = v19;
      v21 = *v12;
    }
    goto LABEL_42;
  }
LABEL_44:
  v29[0] = v2;
  v29[1] = (uint64_t)v1;
  if (v1)
  {
    v24 = (unint64_t *)&v1->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_19BFE83B0((uint64_t)__p, v29);
  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    std::mutex::unlock((std::mutex *)&qword_1ED024150);
    std::__shared_weak_count::__release_weak(v1);
  }
  else
  {
    std::mutex::unlock((std::mutex *)&qword_1ED024150);
  }
  if (v27 < 0)
  {
    operator delete(__p[0]);
    if (!v5)
      goto LABEL_55;
    goto LABEL_54;
  }
  if (v5)
LABEL_54:
    CFRelease(v5);
LABEL_55:
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_19BFBDC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16)
{
  std::__shared_weak_count *v16;

  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  std::mutex::unlock((std::mutex *)&qword_1ED024150);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  if (a15 < 0)
    operator delete(__p);
  sub_19BF8AD20(&a16, 0);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

uint64_t LXCompileUnigramsFile(const __CFString *a1, const __CFDictionary *a2, uint64_t a3)
{
  return LXCompileUnigramsFileWithError(a1, a2, a3, 0);
}

uint64_t LXCompileUnigramsFileWithError(const __CFString *a1, const __CFDictionary *a2, uint64_t a3, CFErrorRef *a4)
{
  char *v8;
  char *v9;
  BOOL v10;
  int v11;
  CFErrorRef v12;
  uint64_t result;
  char *v14;
  char *v15;
  char *v16;
  const char *v17;
  int v18;
  int v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  NSObject *v22;
  _BYTE *v23;
  char *v24;
  _BYTE *v25;
  const char *v26;
  char *v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  NSObject *v52;
  const __CFString *Value;
  const __CFString *v54;
  CFTypeID v55;
  const __CFString *v56;
  const __CFString *v57;
  CFTypeID v58;
  _QWORD *v59;
  std::string::size_type v60;
  uint64_t v61;
  const __CFNumber *v62;
  const __CFNumber *v63;
  CFTypeID v64;
  _QWORD *exception;
  const void *v66;
  _QWORD *v67;
  std::string::size_type v68;
  std::string *p_dst;
  uint64_t v70;
  uint64_t v71;
  std::string *v72;
  void *v73[2];
  int v74;
  __int16 v75;
  char v76;
  void *v77;
  char v78;
  int v79;
  __int16 v80;
  char v81;
  void *v82;
  char v83;
  int v84;
  __int16 v85;
  char v86;
  void *v87;
  char v88;
  void *v89[4];
  int v90;
  __int16 v91;
  char v92;
  void *v93;
  char v94;
  int v95;
  __int16 v96;
  char v97;
  void *v98;
  _BYTE v99[16];
  int v100;
  __int16 v101;
  char v102;
  void *v103;
  char v104;
  unint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  int v112;
  _QWORD v113[168];
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  int v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  int v122;
  __int128 v123;
  __int128 v124;
  int v125;
  void *v126[2];
  __int128 v127;
  int v128;
  int v129;
  __int16 v130;
  char v131;
  void *v132;
  char v133;
  int v134;
  __int16 v135;
  char v136;
  void *v137;
  char v138;
  int v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  void *v143[2];
  void *__p[2];
  __int128 v145;
  unsigned __int16 v146[3];
  char v147;
  void *v148;
  unsigned __int16 v149[3];
  char v150;
  void *v151;
  uint64_t v152;
  void *v153;
  uint8_t buf[4];
  _BYTE v155[18];
  __int16 v156;
  int v157;
  unsigned __int16 **v158;
  void *v159;
  unsigned __int16 *v160;
  void *v161;
  unsigned __int16 v162[3];
  char v163;
  void *v164;
  std::string __dst;
  std::string v166;
  uint8_t valuePtr[16];
  _QWORD v168[6];

  v168[3] = *MEMORY[0x1E0C80C00];
  if (a1 && CFStringGetLength(a1))
  {
    atomic_store((a3 & 0x100000) != 0, byte_1EE417890);
    atomic_store((a3 & 0x80000) == 0, byte_1EE414EA8);
    v74 = 0x100000;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0x100000;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v84 = 0x100000;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    LODWORD(v89[0]) = 0x100000;
    WORD2(v89[0]) = 0;
    BYTE6(v89[0]) = 1;
    v89[1] = 0;
    sub_19BF8CA04(v89, (uint64_t)"Unigrams", 0, 8u);
    v90 = 0x100000;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0x100000;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v99[0] = 0;
    v100 = 0x100000;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    v8 = getenv("BUILT_PRODUCTS_DIR");
    sub_19BFF68B0((uint64_t)valuePtr, v8);
    v9 = getenv("WRAPPER_NAME");
    sub_19BFF68B0((uint64_t)&v166, v9);
    if (*(_WORD *)valuePtr)
      v10 = LOWORD(v166.__r_.__value_.__l.__data_) == 0;
    else
      v10 = 1;
    v11 = !v10;
    if (v10)
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0x100000;
      WORD2(__dst.__r_.__value_.__r.__words[0]) = 0;
      __dst.__r_.__value_.__s.__data_[6] = 1;
      __dst.__r_.__value_.__l.__size_ = 0;
      sub_19BF8CA04(&__dst, (uint64_t)"Output", 0, 6u);
    }
    else
    {
      sub_19BFF787C((uint64_t)v162, (unsigned __int16 *)valuePtr, "/");
      sub_19BFF78D0((uint64_t)&__dst, v162, (uint64_t)&v166);
    }
    sub_19BF8A370((uint64_t)&v90, (unsigned __int16 *)&__dst);
    if (__dst.__r_.__value_.__l.__size_ && __dst.__r_.__value_.__s.__data_[6] == 1)
      free((void *)__dst.__r_.__value_.__l.__size_);
    if (v11 && v164 && v163 == 1)
      free(v164);
    v14 = getenv("SRCROOT");
    sub_19BFF68B0((uint64_t)&__dst, v14);
    v15 = getenv("TEXTINPUT_LANGUAGE");
    sub_19BFF68B0((uint64_t)&v160, v15);
    v16 = getenv("PRECOMPILED_DATA");
    sub_19BFF68B0((uint64_t)&v158, v16);
    sub_19BFF787C((uint64_t)v146, (unsigned __int16 *)&__dst, "/");
    sub_19BFF78D0((uint64_t)v149, v146, (uint64_t)&v158);
    sub_19BFF787C((uint64_t)&v152, v149, "/");
    sub_19BFF78D0((uint64_t)buf, (unsigned __int16 *)&v152, (uint64_t)&v160);
    sub_19BF8A370((uint64_t)&v95, (unsigned __int16 *)buf);
    if (*(_QWORD *)&v155[4] && v155[2] == 1)
      free(*(void **)&v155[4]);
    if (v153 && BYTE6(v152) == 1)
      free(v153);
    if (v151 && v150 == 1)
      free(v151);
    if (v148 && v147 == 1)
      free(v148);
    if (v98)
      v17 = (const char *)v98;
    else
      v17 = v99;
    v18 = mkpath_np(v17, 0x1EDu);
    v19 = v18;
    if (v18)
    {
      if (v18 != 17)
      {
        v20 = atomic_load(byte_1EE414EA8);
        if ((v20 & 1) != 0)
        {
          v21 = atomic_load(byte_1EE417890);
          if ((v21 & 1) != 0)
          {
            v26 = (const char *)v98;
            v27 = strerror(v18);
            if (v26)
              v28 = v26;
            else
              v28 = v99;
            printf("couldn't create directory '%s': %s (%d)", v28, v27, v19);
            putchar(10);
          }
          else
          {
            v22 = sub_19BFD3F34();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              v23 = v98;
              v24 = strerror(v19);
              if (v23)
                v25 = v23;
              else
                v25 = v99;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)v155 = v25;
              *(_WORD *)&v155[8] = 2080;
              *(_QWORD *)&v155[10] = v24;
              v156 = 1024;
              v157 = v19;
              _os_log_impl(&dword_19BF85000, v22, OS_LOG_TYPE_ERROR, "couldn't create directory '%s': %s (%d)", buf, 0x1Cu);
            }
          }
        }
      }
    }
    v29 = getenv("DERIVED_SOURCES_DIR");
    sub_19BFF68B0((uint64_t)buf, v29);
    if (*(_WORD *)buf)
    {
      sub_19BF86B60((uint64_t)&v152, (unsigned __int16 *)buf);
    }
    else
    {
      LODWORD(v152) = 0x100000;
      WORD2(v152) = 0;
      BYTE6(v152) = 1;
      v153 = 0;
      sub_19BF8CA04(&v152, (uint64_t)"Deps", 0, 4u);
    }
    sub_19BF8A370((uint64_t)&v100, (unsigned __int16 *)&v152);
    if (v153 && BYTE6(v152) == 1)
      free(v153);
    if (*(_QWORD *)&v155[4] && v155[2] == 1)
      free(*(void **)&v155[4]);
    if (v159 && BYTE6(v158) == 1)
      free(v159);
    if (v161 && BYTE6(v160) == 1)
      free(v161);
    if (__dst.__r_.__value_.__l.__size_ && __dst.__r_.__value_.__s.__data_[6] == 1)
      free((void *)__dst.__r_.__value_.__l.__size_);
    if (v166.__r_.__value_.__l.__size_ && v166.__r_.__value_.__s.__data_[6] == 1)
      free((void *)v166.__r_.__value_.__l.__size_);
    if (*(_QWORD *)&valuePtr[8] && valuePtr[6] == 1)
      free(*(void **)&valuePtr[8]);
    v106 = 0uLL;
    v105 = a3 | 0x10;
    v30 = operator new();
    *(_QWORD *)v30 = &off_1E3D143F0;
    *(_OWORD *)(v30 + 8) = 0u;
    *(_OWORD *)(v30 + 24) = 0u;
    *(_OWORD *)(v30 + 40) = 0u;
    v107 = v30;
    v31 = operator new();
    *(_QWORD *)valuePtr = 0;
    sub_19C034794(v31, 0, (unsigned int **)valuePtr);
    v108 = v31;
    v32 = operator new();
    *(_QWORD *)v32 = 0;
    *(_QWORD *)(v32 + 8) = 0;
    *(_QWORD *)(v32 + 16) = 0;
    *(_DWORD *)(v32 + 24) = 1;
    v109 = v32;
    v110 = 0u;
    v111 = 0u;
    v112 = 1065353216;
    sub_19BF875B8((uint64_t)v113);
    v113[0] = &off_1E3D147F0;
    v115 = 0u;
    v116 = 0u;
    v117 = 0u;
    v118 = 1065353216;
    sub_19BF8761C((uint64_t)v113);
    v119 = 0u;
    if (*((_QWORD *)&v117 + 1))
    {
      sub_19BF876D4((_QWORD *)v117);
      *(_QWORD *)&v117 = 0;
      v33 = *((_QWORD *)&v116 + 1);
      if (*((_QWORD *)&v116 + 1))
      {
        v34 = 0;
        do
          *(_QWORD *)(v116 + 8 * v34++) = 0;
        while (v33 != v34);
      }
      *((_QWORD *)&v117 + 1) = 0;
    }
    v121 = 0u;
    v120 = 0u;
    v122 = 1065353216;
    v123 = 0u;
    v124 = 0u;
    v125 = 1065353216;
    *(_OWORD *)v126 = 0u;
    v127 = 0u;
    v128 = 0;
    v129 = 0x100000;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v133 = 0;
    v134 = 0x100000;
    v135 = 0;
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v139 = 5;
    v140 = 0;
    v141 = 0x3F66666600000000;
    v142 = 700;
    v145 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v143 = 0u;
    sub_19BF8C4B0((uint64_t)valuePtr, a1);
    sub_19BF8A370((uint64_t)&v129, (unsigned __int16 *)valuePtr);
    if (*(_QWORD *)&valuePtr[8] && valuePtr[6] == 1)
      free(*(void **)&valuePtr[8]);
    *(_DWORD *)valuePtr = 0x100000;
    *(_WORD *)&valuePtr[4] = 0;
    valuePtr[6] = 1;
    *(_QWORD *)&valuePtr[8] = 0;
    sub_19BF8CA04(valuePtr, (uint64_t)"/", 0, 1u);
    sub_19C020DC8(&__dst, (unsigned __int16 *)&v129, (unsigned __int16 *)valuePtr);
    if (*(_QWORD *)&valuePtr[8] && valuePtr[6] == 1)
      free(*(void **)&valuePtr[8]);
    sub_19BF86B60((uint64_t)valuePtr, (unsigned __int16 *)(__dst.__r_.__value_.__l.__size_ - 32));
    LODWORD(v166.__r_.__value_.__l.__data_) = 0x100000;
    WORD2(v166.__r_.__value_.__r.__words[0]) = 0;
    v166.__r_.__value_.__s.__data_[6] = 1;
    v166.__r_.__value_.__l.__size_ = 0;
    sub_19BF8CA04(&v166, (uint64_t)".", 0, 1u);
    sub_19C020DC8(&v160, (unsigned __int16 *)valuePtr, (unsigned __int16 *)&v166);
    sub_19BF8A1F4((uint64_t)valuePtr, v160);
    v158 = &v160;
    sub_19BFBF780((void ***)&v158);
    if (v166.__r_.__value_.__l.__size_ && v166.__r_.__value_.__s.__data_[6] == 1)
      free((void *)v166.__r_.__value_.__l.__size_);
    LODWORD(v166.__r_.__value_.__l.__data_) = 0x100000;
    WORD2(v166.__r_.__value_.__r.__words[0]) = 0;
    v166.__r_.__value_.__s.__data_[6] = 1;
    v166.__r_.__value_.__l.__size_ = 0;
    sub_19BF8CA04(&v166, (uint64_t)"-", 0, 1u);
    sub_19C020DC8(&v160, (unsigned __int16 *)valuePtr, (unsigned __int16 *)&v166);
    if (v166.__r_.__value_.__l.__size_ && v166.__r_.__value_.__s.__data_[6] == 1)
      free((void *)v166.__r_.__value_.__l.__size_);
    if ((unint64_t)((_BYTE *)v161 - (_BYTE *)v160) <= 0x3F)
      __assert_rtn("extract_locale_from_path", "DictCompiler.cpp", 86, "filename_parts.size() >= 2");
    sub_19BF8A1F4((uint64_t)&v74, v160 + 16);
    LODWORD(v166.__r_.__value_.__l.__data_) = 0x100000;
    WORD2(v166.__r_.__value_.__r.__words[0]) = 0;
    v166.__r_.__value_.__s.__data_[6] = 1;
    v166.__r_.__value_.__l.__size_ = 0;
    sub_19BF8CA04(&v166, (uint64_t)"_", 0, 1u);
    sub_19C020DC8(&v158, (unsigned __int16 *)&v74, (unsigned __int16 *)&v166);
    if (v166.__r_.__value_.__l.__size_ && v166.__r_.__value_.__s.__data_[6] == 1)
      free((void *)v166.__r_.__value_.__l.__size_);
    if ((unint64_t)((((_BYTE *)v159 - (_BYTE *)v158) >> 5) - 1) >= 2)
      __assert_rtn("extract_locale_from_path", "DictCompiler.cpp", 89, "lang_region_split.size() == 1 || lang_region_split.size() == 2");
    sub_19BF8A1F4((uint64_t)&v79, (unsigned __int16 *)v158);
    if ((unint64_t)((_BYTE *)v159 - (_BYTE *)v158) < 0x21)
    {
      if (v87 && v86 == 1)
        free(v87);
      v87 = 0;
      v86 = 1;
      v88 = 0;
      v84 = 0x100000;
      v85 = 0;
    }
    else
    {
      sub_19BF8A1F4((uint64_t)&v84, (unsigned __int16 *)v158 + 16);
    }
    v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158;
    sub_19BFBF780((void ***)&v166);
    v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
    sub_19BFBF780((void ***)&v166);
    if (*(_QWORD *)&valuePtr[8] && valuePtr[6] == 1)
      free(*(void **)&valuePtr[8]);
    *(_QWORD *)valuePtr = &__dst;
    sub_19BFBF780((void ***)valuePtr);
    if (v82)
      v35 = (char *)v82;
    else
      v35 = &v83;
    sub_19BF87864(valuePtr, v35);
    v36 = *(_OWORD *)valuePtr;
    memset(valuePtr, 0, sizeof(valuePtr));
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
    v106 = v36;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = *(std::__shared_weak_count **)&valuePtr[8];
    if (*(_QWORD *)&valuePtr[8])
    {
      v41 = (unint64_t *)(*(_QWORD *)&valuePtr[8] + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v106;
    if (*((_QWORD *)&v106 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
    v115 = v43;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    sub_19BF8A1F4((uint64_t)&v114, (unsigned __int16 *)&v74);
    if ((a3 & 0x10000) != 0)
      v105 |= 0x8000uLL;
    if ((a3 & 0x20) != 0 && (v105 & 0x100) == 0)
      v105 |= 0x30uLL;
    if ((a3 & 0x100) != 0)
    {
      v105 = v105 & 0xFFFFFFFFFFFFFEDFLL | 0x100;
      if ((a3 & 0x200) == 0)
      {
LABEL_132:
        if ((a3 & 0x200000) == 0)
          goto LABEL_133;
        goto LABEL_139;
      }
    }
    else if ((a3 & 0x200) == 0)
    {
      goto LABEL_132;
    }
    v49 = 1152;
    if ((v105 & 0x100) == 0)
      v49 = 1200;
    v105 |= v49 | 1;
    if ((a3 & 0x200000) == 0)
    {
LABEL_133:
      if ((a3 & 0x40000) == 0)
        goto LABEL_145;
      goto LABEL_140;
    }
LABEL_139:
    v105 |= 0x200000uLL;
    if ((a3 & 0x40000) == 0)
      goto LABEL_145;
LABEL_140:
    HIDWORD(v141) = 1045220557;
    v50 = atomic_load(byte_1EE414EA8);
    if ((v50 & 1) != 0)
    {
      v51 = atomic_load(byte_1EE417890);
      if ((v51 & 1) != 0)
      {
        printf("OVERRIDE: frequency similarity ratio: %f", *((float *)&v141 + 1));
        putchar(10);
      }
      else
      {
        v52 = sub_19BFD3F34();
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)valuePtr = 134217984;
          *(double *)&valuePtr[4] = *((float *)&v141 + 1);
          _os_log_impl(&dword_19BF85000, v52, OS_LOG_TYPE_DEFAULT, "OVERRIDE: frequency similarity ratio: %f", valuePtr, 0xCu);
        }
      }
    }
LABEL_145:
    if (!a2)
    {
LABEL_168:
      sub_19BFD85AC((uint64_t)v73);
      sub_19BFBF1A4((uint64_t)v73);
      return 1;
    }
    Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("OutputPath"));
    v54 = Value;
    if (Value)
    {
      v55 = CFGetTypeID(Value);
      if (v55 == CFStringGetTypeID())
      {
        sub_19BF8C4B0((uint64_t)valuePtr, v54);
        sub_19BF8A370((uint64_t)&v134, (unsigned __int16 *)valuePtr);
        if (*(_QWORD *)&valuePtr[8])
        {
          if (valuePtr[6] == 1)
            free(*(void **)&valuePtr[8]);
        }
      }
    }
    v56 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("TrieTypeName"));
    v57 = v56;
    if (!v56 || (v58 = CFGetTypeID(v56), v58 != CFStringGetTypeID()))
    {
      v139 = 5;
      if ((a3 & 0x800) == 0)
      {
LABEL_164:
        v62 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("CostFactor"));
        v63 = v62;
        if (v62)
        {
          v64 = CFGetTypeID(v62);
          if (v64 == CFNumberGetTypeID())
          {
            *(_DWORD *)valuePtr = 0;
            if (CFNumberGetValue(v63, kCFNumberSInt32Type, valuePtr))
              v142 = *(_WORD *)valuePtr;
          }
        }
        goto LABEL_168;
      }
LABEL_163:
      if (v139 == 5)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_19BF8E43C(valuePtr, "To use deterministic Lexicon, please specify trie type other than PatriciaTrie.");
        sub_19BFD48D0(exception, (__int128 *)valuePtr);
        __cxa_throw(exception, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
      }
      goto LABEL_164;
    }
    sub_19BF8C4B0((uint64_t)valuePtr, v57);
    if (*(_QWORD *)&valuePtr[8])
      v59 = *(_QWORD **)&valuePtr[8];
    else
      v59 = v168;
    v60 = *(unsigned __int16 *)valuePtr;
    v61 = sub_19BFA62FC(v59, *(unsigned __int16 *)valuePtr);
    if ((v61 & 0xFF00000000) != 0)
    {
      v139 = v61;
      if (*(_QWORD *)&valuePtr[8] && valuePtr[6] == 1)
        free(*(void **)&valuePtr[8]);
      if ((a3 & 0x800) == 0)
        goto LABEL_164;
      goto LABEL_163;
    }
    v66 = v59;
    v67 = __cxa_allocate_exception(0x20uLL);
    v68 = v60;
    if (v60 >= 0x17)
    {
      v70 = v60 | 7;
      if ((v60 | 7) == 0x17)
        v70 = ((unsigned __int16)v60 & 0xFFF8) + 8;
      v71 = v70 + 1;
      p_dst = (std::string *)operator new(v70 + 1);
      __dst.__r_.__value_.__l.__size_ = v68;
      __dst.__r_.__value_.__r.__words[2] = v71 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v60;
      p_dst = &__dst;
      if (!(_DWORD)v60)
      {
LABEL_179:
        p_dst->__r_.__value_.__s.__data_[v68] = 0;
        v72 = std::string::insert(&__dst, 0, "Unknown trie type: ", 0x13uLL);
        v166 = *v72;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        sub_19BFD48D0(v67, (__int128 *)&v166);
        __cxa_throw(v67, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
      }
    }
    memmove(p_dst, v66, v68);
    goto LABEL_179;
  }
  if (!a4)
    return 0;
  v12 = sub_19BFEA6B4(CFSTR("missing source path"));
  result = 0;
  *a4 = v12;
  return result;
}

void sub_19BFBF150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  sub_19BF8AD20((const void **)(v18 - 176), 0);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_19BFBF188(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19BF8E3F8(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFBF1A4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v2 = *(void **)(a1 + 2008);
  if (v2)
  {
    *(_QWORD *)(a1 + 2016) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 1984);
  if (v3)
  {
    *(_QWORD *)(a1 + 1992) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 1936);
  if (v4 && *(_BYTE *)(a1 + 1934) == 1)
    free(v4);
  v5 = *(void **)(a1 + 1904);
  if (v5 && *(_BYTE *)(a1 + 1902) == 1)
    free(v5);
  v6 = *(void **)(a1 + 1856);
  if (v6)
  {
    *(_QWORD *)(a1 + 1864) = v6;
    operator delete(v6);
  }
  sub_19BFBF36C(a1 + 1816);
  sub_19BFBF3CC(a1 + 1776);
  *(_QWORD *)(a1 + 328) = &off_1E3D147F0;
  sub_19BF8769C(a1 + 1720);
  sub_19BFACCEC(a1 + 1704);
  *(_QWORD *)(a1 + 328) = &off_1E3D146F0;
  v7 = *(void **)(a1 + 1680);
  if (v7 && *(_BYTE *)(a1 + 1678) == 1)
    free(v7);
  sub_19BF8769C(a1 + 1624);
  sub_19BFBF414(a1 + 288);
  v8 = *(_QWORD *)(a1 + 280);
  if (v8)
    sub_19BFBF44C((unsigned int *)(v8 + 24));
  v9 = *(_QWORD *)(a1 + 272);
  if (v9)
    sub_19BFBF4E8(v9);
  v10 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_19BFACCEC(a1 + 248);
  v11 = *(void **)(a1 + 216);
  if (v11 && *(_BYTE *)(a1 + 214) == 1)
    free(v11);
  v12 = *(void **)(a1 + 184);
  if (v12 && *(_BYTE *)(a1 + 182) == 1)
    free(v12);
  v13 = *(void **)(a1 + 152);
  if (v13 && *(_BYTE *)(a1 + 150) == 1)
    free(v13);
  v14 = *(void **)(a1 + 120);
  if (v14 && *(_BYTE *)(a1 + 118) == 1)
    free(v14);
  v15 = *(void **)(a1 + 88);
  if (v15 && *(_BYTE *)(a1 + 86) == 1)
    free(v15);
  v16 = *(void **)(a1 + 56);
  if (v16 && *(_BYTE *)(a1 + 54) == 1)
    free(v16);
  v17 = *(void **)(a1 + 24);
  if (v17 && *(_BYTE *)(a1 + 22) == 1)
    free(v17);
  return a1;
}

uint64_t sub_19BFBF36C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
        operator delete(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t sub_19BFBF3CC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_19BFBF414(uint64_t a1)
{
  void *v2;

  sub_19BFBF800(*(unsigned int **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

unsigned int *sub_19BFBF44C(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    v4 = (void **)(result - 6);
    v5 = *((_QWORD *)result - 3);
    if (v5)
    {
      v6 = *((_QWORD *)result - 2);
      v7 = (void *)*((_QWORD *)result - 3);
      if (v6 != v5)
      {
        do
        {
          v9 = *(_QWORD *)(v6 - 8);
          v6 -= 8;
          v8 = v9;
          if (v9)
            sub_19BFBF614((unsigned int *)(v8 + 84));
        }
        while (v6 != v5);
        v7 = *v4;
      }
      *((_QWORD *)v1 - 2) = v5;
      operator delete(v7);
    }
    JUMPOUT(0x1A1AD0CDCLL);
  }
  return result;
}

uint64_t sub_19BFBF4E8(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v1 = result;
  do
    v2 = __ldaxr((unsigned int *)result);
  while (__stlxr(v2 - 1, (unsigned int *)result));
  if (result && v2 == 1)
  {
    v5 = (void **)(result + 72);
    sub_19BFBF5A4(&v5);
    if (*(unsigned __int16 *)(v1 + 48) >= 0xFu)
    {
      v3 = *(_QWORD *)(v1 + 56);
      if (v3)
        MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
    }
    v4 = *(_QWORD *)(v1 + 32);
    if (v4)
      sub_19BFBF44C(v4 + 24);
    v5 = (void **)(v1 + 8);
    sub_19BFBF5A4(&v5);
    JUMPOUT(0x1A1AD0CDCLL);
  }
  return result;
}

void sub_19BFBF5A4(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v4 - 1);
        v4 -= 8;
        if (v6)
          sub_19BFBF4E8();
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned int *sub_19BFBF614(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void **v13;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    sub_19BFACCEC((uint64_t)(result + 57));
    v13 = (void **)(v1 + 49);
    sub_19BFBF780(&v13);
    v13 = (void **)(v1 + 43);
    sub_19BFBF780(&v13);
    v4 = *(_QWORD *)(v1 + 39);
    if (v4)
      sub_19BFBF44C(v4 + 24);
    v5 = *(_QWORD *)(v1 + 37);
    if (v5)
      sub_19BFBF44C(v5 + 24);
    v6 = *(_QWORD *)(v1 + 35);
    if (v6)
      sub_19BFBF4E8(v6);
    v7 = *(void **)(v1 + 29);
    if (v7)
    {
      *(_QWORD *)(v1 + 31) = v7;
      operator delete(v7);
    }
    if (*((unsigned __int16 *)v1 + 46) >= 0xFu)
    {
      v8 = *(_QWORD *)(v1 + 25);
      if (v8)
        MEMORY[0x1A1AD0CB8](v8, 0x1000C8077774924);
    }
    if (*((unsigned __int16 *)v1 + 34) >= 0xFu)
    {
      v9 = *(_QWORD *)(v1 + 19);
      if (v9)
        MEMORY[0x1A1AD0CB8](v9, 0x1000C8077774924);
    }
    if (*((unsigned __int16 *)v1 + 26) >= 0xFu)
    {
      v10 = *(_QWORD *)(v1 + 15);
      if (v10)
        MEMORY[0x1A1AD0CB8](v10, 0x1000C8077774924);
    }
    v11 = *(void **)(v1 + 7);
    if (v11 && *((_BYTE *)v1 + 26) == 1)
      free(v11);
    v12 = *(void **)(v1 - 19);
    if (v12)
    {
      if (*((_BYTE *)v1 - 78) == 1)
        free(v12);
    }
    JUMPOUT(0x1A1AD0CDCLL);
  }
  return result;
}

void sub_19BFBF780(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          if (*(v4 - 26) == 1)
            free(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19BFBF800(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = *(unsigned int **)v1;
      sub_19BFBF83C(v1 + 4);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

unsigned int *sub_19BFBF83C(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  if (v2)
    result = sub_19BFBF44C((unsigned int *)(v2 + 24));
  if (*(unsigned __int16 *)v1 >= 0xFu)
  {
    result = (unsigned int *)*((_QWORD *)v1 + 1);
    if (result)
      JUMPOUT(0x1A1AD0CB8);
  }
  return result;
}

uint64_t sub_19BFBF898(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E3D147F0;
  sub_19BF8769C(a1 + 1392);
  sub_19BFACCEC(a1 + 1376);
  *(_QWORD *)a1 = &off_1E3D146F0;
  v2 = *(void **)(a1 + 1352);
  if (v2 && *(_BYTE *)(a1 + 1350) == 1)
    free(v2);
  sub_19BF8769C(a1 + 1296);
  return a1;
}

void sub_19BFBF900(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E3D147F0;
  sub_19BF8769C(a1 + 1392);
  sub_19BFACCEC(a1 + 1376);
  *(_QWORD *)a1 = &off_1E3D146F0;
  v2 = *(void **)(a1 + 1352);
  if (v2 && *(_BYTE *)(a1 + 1350) == 1)
    free(v2);
  sub_19BF8769C(a1 + 1296);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19BFBF978(uint64_t a1)
{
  sub_19BF8761C(a1);
  *(_OWORD *)(a1 + 1432) = 0u;
  sub_19BFBF9A8(a1 + 1392);
}

void sub_19BFBF9A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_19BF876D4(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void LXCompileStemSuffixTokenIDConversionMap(const __CFURL *a1, const __CFURL *a2)
{
  const __CFDictionary *v3;
  uint64_t v4;
  unsigned int *v5;
  _QWORD *v6;
  const __CFArray *Value;
  const __CFString *v8;
  const char *v9;
  unint64_t v10;
  const __CFDictionary *ValueAtIndex;
  const __CFString *v12;
  const __CFString *v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  __CFError *v17;
  _QWORD *exception;
  void *v19;
  const __CFDictionary *v20;
  const __CFURL *v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (const __CFDictionary *)sub_19BF8E010(a1, 0);
  v4 = operator new();
  v5 = (unsigned int *)v4;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_QWORD *)(v4 + 136) = 0;
  *(_OWORD *)(v4 + 120) = 0u;
  v6 = (_QWORD *)(v4 + 128);
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  if (v3 && (sub_19BFE8B10((unsigned int *)v4, v3) & 1) != 0)
  {
    v21 = a2;
    Value = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("StemSuffixClasses"));
    if (*v6)
    {
      v8 = (const __CFString *)MEMORY[0x1A1AD064C]();
      sub_19BF87140(v8, __p);
      v9 = v23 >= 0 ? (const char *)__p : (const char *)__p[0];
      printf("locale %s\n", v9);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    v20 = v3;
    printf("non-stem/suffix ID range 0-%u\n", **((_DWORD **)v5 + 1) - 1);
    printf("%u stem/suffix classes:\n", *v5);
    if (*v5)
    {
      v10 = 0;
      do
      {
        if (Value)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v10);
          v12 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Name"));
          v13 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Abbreviation"));
          sub_19BF87140(v12, __p);
          sub_19BF87140(v13, v24);
          if (v23 >= 0)
            v14 = __p;
          else
            v14 = (void **)__p[0];
          if (v25 >= 0)
            v15 = v24;
          else
            v15 = (void **)v24[0];
          printf("  %s (%s): ", (const char *)v14, (const char *)v15);
          if (v25 < 0)
            operator delete(v24[0]);
          if (v23 < 0)
            operator delete(__p[0]);
        }
        else
        {
          printf("  %u: ", v10);
        }
        printf("class ID %u; stem ID range %u-%u; suffix ID range %u-%u; stem/suffix ID range %u-%u\n",
          v5[1] + v10,
          *(_DWORD *)(*((_QWORD *)v5 + 1) + 4 * v10),
          *(_DWORD *)(*((_QWORD *)v5 + 1) + 4 * v10 + 4) - 1,
          *(_DWORD *)(*((_QWORD *)v5 + 4) + 4 * v10),
          *(_DWORD *)(*((_QWORD *)v5 + 4) + 4 * v10 + 4) - 1,
          *(_DWORD *)(*((_QWORD *)v5 + 7) + 4 * v10),
          *(_DWORD *)(*((_QWORD *)v5 + 7) + 4 * v10 + 4) - 1);
        ++v10;
      }
      while (v10 < *v5);
    }
    v24[0] = 0;
    if (sub_19BF8DCDC(v20, v21, kCFPropertyListBinaryFormat_v1_0, 1, (CFErrorRef *)v24))
      sub_19BFC42E0((uint64_t)v5);
    v17 = (__CFError *)v24[0];
    if (!v24[0])
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19BF8E43C(__p, "write of stem suffix data failed: unspecified error");
      sub_19BFE98CC(exception, (__int128 *)__p);
      __cxa_throw(exception, (struct type_info *)&unk_1E3D12D50, (void (*)(void *))sub_19BFE9934);
    }
    v19 = __cxa_allocate_exception(0x20uLL);
    sub_19BF8E43C(__p, "write of stem suffix data failed:");
    sub_19BFE9BEC((uint64_t)v19, (const void **)__p, v17);
    __cxa_throw(v19, (struct type_info *)&unk_1E3D12D50, (void (*)(void *))sub_19BFE9934);
  }
  v16 = __cxa_allocate_exception(0x20uLL);
  sub_19BF8E43C(__p, "invalid stem suffix lexicon ID converter plist");
  sub_19BFE98CC(v16, (__int128 *)__p);
  __cxa_throw(v16, (struct type_info *)&unk_1E3D12D50, (void (*)(void *))sub_19BFE9934);
}

void sub_19BFBFDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  void *v26;
  int v27;

  if (a25 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v27)
  {
LABEL_6:
    sub_19BFE9DFC(&a18);
    sub_19BFC42E0(v25);
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void sub_19BFC003C()
{
  JUMPOUT(0x19BFBFE5CLL);
}

os_log_t sub_19BFC0044()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "StemSuffixTokenIDConverter");
  qword_1EE417428 = (uint64_t)result;
  return result;
}

CFStringRef LXUnigramsCompilerCopyVersion()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  CFStringRef v4;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;
  _QWORD v10[3];
  _QWORD v11[10];
  char v12;
  uint64_t v13;
  _BYTE v14[8];
  char *v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  sub_19BFA0144((uint64_t)v10);
  v0 = (_QWORD *)std::ostream::operator<<();
  sub_19BF8E6F8(v0, (uint64_t)".", 1);
  std::ostream::operator<<();
  sub_19BFAAA88(__p, (uint64_t)v11);
  if (v9 >= 0)
    v1 = (char *)__p;
  else
    v1 = (char *)__p[0];
  sub_19BFF68B0((uint64_t)v14, v1);
  if (v9 < 0)
    operator delete(__p[0]);
  v10[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[2] = v2;
  v11[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD0C7C](&v13);
  if (v15)
    v3 = v15;
  else
    v3 = (char *)v16;
  sub_19BF8E43C(v6, v3);
  v4 = sub_19BF8DBF4((uint64_t)v6);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v15 && v14[6] == 1)
    free(v15);
  return v4;
}

void sub_19BFC01E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;

  if (a14 < 0)
    operator delete(__p);
  v23 = *(void **)(v21 - 64);
  if (v23)
  {
    if (*(_BYTE *)(v21 - 66) == 1)
      free(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LXUnigramsCompilerGetSupportedTries()
{
  if (qword_1EE417420 != -1)
    dispatch_once(&qword_1EE417420, &unk_1E3D156B8);
  return qword_1EE417418;
}

void sub_19BFC0294()
{
  _OWORD *v0;
  uint64_t v1;
  _OWORD *v2;
  __int128 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void **v7;
  void **v8;
  __int128 v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __CFArray *v13;
  CFStringRef v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  void *__p[2];
  void *v19;
  int v20;
  void **v21[5];

  qword_1EE417418 = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v0 = operator new(0x20uLL);
  v1 = 0;
  *v0 = xmmword_19C066E9C;
  v0[1] = unk_19C066EAC;
  do
  {
    v20 = *(_DWORD *)((char *)v0 + v1);
    sub_19BFA62E0(&v20, __p);
    v2 = v16;
    if ((unint64_t)v16 >= v17)
    {
      v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v16[-v15] >> 3);
      v5 = v4 + 1;
      if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_19BF8EB40();
      if (0x5555555555555556 * ((uint64_t)(v17 - v15) >> 3) > v5)
        v5 = 0x5555555555555556 * ((uint64_t)(v17 - v15) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v15) >> 3) >= 0x555555555555555)
        v6 = 0xAAAAAAAAAAAAAAALL;
      else
        v6 = v5;
      v21[4] = (void **)&v17;
      if (v6)
        v7 = (void **)sub_19BF8EB54((uint64_t)&v17, v6);
      else
        v7 = 0;
      v8 = &v7[3 * v4];
      v21[0] = v7;
      v21[1] = v8;
      v21[3] = &v7[3 * v6];
      v9 = *(_OWORD *)__p;
      v8[2] = v19;
      *(_OWORD *)v8 = v9;
      __p[1] = 0;
      v19 = 0;
      __p[0] = 0;
      v21[2] = v8 + 3;
      sub_19BF8EACC(&v15, v21);
      v10 = v16;
      sub_19BF8ECAC((uint64_t)v21);
      v16 = v10;
      if (SHIBYTE(v19) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v3 = *(_OWORD *)__p;
      *((_QWORD *)v16 + 2) = v19;
      *v2 = v3;
      v16 = (char *)v2 + 24;
    }
    v1 += 4;
  }
  while (v1 != 32);
  operator delete(v0);
  v11 = v15;
  v12 = v16;
  while ((char *)v11 != v12)
  {
    v13 = (__CFArray *)qword_1EE417418;
    v14 = sub_19BF8DBF4(v11);
    CFArrayAppendValue(v13, v14);
    v11 += 24;
  }
  v21[0] = (void **)&v15;
  sub_19BF8EA40(v21);
}

void sub_19BFC0488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  __p = &a9;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t LXCreateWordModerationLexicon(CFDictionaryRef theDict, CFErrorRef *a2)
{
  const __CFString *Value;
  const __CFAllocator *v5;
  const __CFString *Copy;
  const __CFLocale *v7;
  CFTypeRef *v8;
  uint64_t v9;
  const __CFString *v10;
  __CFDictionary *Mutable;
  const void *v12;
  uint64_t Instance;
  CFTypeRef cf;
  const __CFString *v16;
  CFTypeRef v17[3];
  CFTypeRef *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (theDict)
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("dataFile"));
    if (Value)
    {
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Value);
      v16 = Copy;
      v17[0] = 0;
      cf = 0;
LABEL_12:
      v10 = sub_19BF8723C(theDict);
      v17[0] = v10;
      if (v10)
      {
        Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v12 = (const void *)MEMORY[0x1A1AD064C](v10);
        CFDictionaryAddValue(Mutable, CFSTR("locale"), v12);
        cf = (CFTypeRef)LXLexiconCreate(Mutable, a2);
        if (Mutable)
          CFRelease(Mutable);
      }
      goto LABEL_15;
    }
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("root"));
  v17[0] = &off_1E3D10BE0;
  v18 = v17;
  Copy = (const __CFString *)sub_19C0372B8(0, v7);
  v8 = v18;
  if (v18 == v17)
  {
    v9 = 4;
    v8 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_9;
    v9 = 5;
  }
  (*((void (**)(void))*v8 + v9))();
LABEL_9:
  if (v7)
    CFRelease(v7);
  v16 = Copy;
  v17[0] = 0;
  cf = 0;
  if (theDict)
    goto LABEL_12;
LABEL_15:
  if (!Copy || !CFStringGetLength(Copy))
  {
    if (a2)
    {
      Instance = 0;
      *a2 = sub_19BFEA6B4(CFSTR("Could not determine the location of the word moderation lexicon file, or one was not provided."));
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (qword_1ED024410 != -1)
    dispatch_once(&qword_1ED024410, &unk_1E3D12B88);
  Instance = _CFRuntimeCreateInstance();
  sub_19BFEBB34((char *)(Instance + 16), (uint64_t)v17[0], v16, 0, 0);
  *(_QWORD *)(Instance + 16) = &off_1E3D10950;
  *(_QWORD *)(Instance + 30280) = &off_1E3D10930;
  *(_QWORD *)(Instance + 30288) = uspoof_open();
  *(_QWORD *)(Instance + 30296) = 0;
  if (cf)
  {
    CFRetain(cf);
    sub_19BFC08F4((const void **)(Instance + 30296), cf);
  }
  if (((*(uint64_t (**)(uint64_t, CFErrorRef *))(*(_QWORD *)(Instance + 16) + 16))(Instance + 16, a2) & 1) == 0)
  {
    CFRelease((CFTypeRef)Instance);
LABEL_25:
    Instance = 0;
  }
LABEL_26:
  if (cf)
    CFRelease(cf);
  if (v17[0])
    CFRelease(v17[0]);
  if (v16)
    CFRelease(v16);
  return Instance;
}

void sub_19BFC07C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19BFC08F4(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_19BFC0928(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t sub_19BFC095C()
{
  uint64_t result;

  qword_1ED024318 = 0;
  unk_1ED024320 = "LXLexicon";
  qword_1ED024328 = 0;
  unk_1ED024330 = 0;
  qword_1ED024338 = (uint64_t)sub_19BFBD930;
  unk_1ED024340 = 0u;
  unk_1ED024350 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED024378 = result;
  return result;
}

uint64_t sub_19BFC09A8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v3 = (_QWORD *)*v2;
  if (*v2)
  {
    do
    {
      v3[1] = v2;
      v2 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  return 1;
}

uint64_t sub_19BFC09E4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  int *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  if (a2)
  {
    v8 = sub_19BFC2854(a1);
    sub_19BFC28E0(a1);
    if ((a4 & 2) == 0)
      (**(void (***)(uint64_t))v8)(v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 80))(v8, a2, a3);
    if (sub_19BFAAB60(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v8, a4, 0, 0))
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  else
  {
    v10 = (int *)(a1 + 336);
    if (setjmp((int *)(a1 + 336)) != 1)
    {
      std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
      v11 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tagger.cpp", 69);
      sub_19BF8E6F8(v11, (uint64_t)"(", 1);
      v12 = (_QWORD *)std::ostream::operator<<();
      v13 = sub_19BF8E6F8(v12, (uint64_t)") [", 3);
      v14 = sub_19BF8E6F8(v13, (uint64_t)"str", 3);
      v15 = sub_19BF8E6F8(v14, (uint64_t)"] ", 2);
      sub_19BF8E6F8(v15, (uint64_t)"NULL pointer is given", 21);
      longjmp(v10, 1);
    }
  }
  return 0;
}

void sub_19BFC0B60()
{
  uint64_t v0;

  sub_19BFAA53C(v0);
}

uint64_t sub_19BFC0B68(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, __int16 a5, unsigned int a6)
{
  uint64_t v12;
  int *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  if (a2)
  {
    v12 = sub_19BFC2854(a1);
    sub_19BFC28E0(a1);
    if ((a4 & 2) == 0)
      (**(void (***)(uint64_t))v12)(v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a2, a3);
    if (sub_19BFAAB60(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), v12, a4, a5, a6))
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  }
  else
  {
    v14 = (int *)(a1 + 336);
    if (setjmp((int *)(a1 + 336)) != 1)
    {
      std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
      v15 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tagger.cpp", 69);
      sub_19BF8E6F8(v15, (uint64_t)"(", 1);
      v16 = (_QWORD *)std::ostream::operator<<();
      v17 = sub_19BF8E6F8(v16, (uint64_t)") [", 3);
      v18 = sub_19BF8E6F8(v17, (uint64_t)"str", 3);
      v19 = sub_19BF8E6F8(v18, (uint64_t)"] ", 2);
      sub_19BF8E6F8(v19, (uint64_t)"NULL pointer is given", 21);
      longjmp(v14, 1);
    }
  }
  return 0;
}

void sub_19BFC0CF4()
{
  uint64_t v0;

  sub_19BFAA53C(v0);
}

uint64_t sub_19BFC0CFC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;

  if (!a2)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if (result)
  {
    v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    v11 = *(_QWORD *)(v5 + 80);
    v12 = sub_19BFAC3A8(*(_QWORD **)(v8 + 16));
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_BYTE *)(v12 + 124) = 2;
    *(_OWORD *)v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    v13 = *(_QWORD *)(v11 + 136);
    *(_QWORD *)(v12 + 48) = v10;
    *(_QWORD *)(v12 + 56) = v13;
    *v7 = v12;
    result = sub_19BFAE97C(*(_QWORD *)(v5 + 80), v10, (unsigned __int8 *)(v10 + v9), v8, a3);
    if (result)
    {
      v7[2] = result;
      v14 = *(_QWORD *)(v5 + 80);
      v15 = sub_19BFAC3A8(*(_QWORD **)(v8 + 16));
      *(_OWORD *)(v15 + 96) = 0u;
      *(_OWORD *)(v15 + 112) = 0u;
      *(_BYTE *)(v15 + 124) = 3;
      *(_OWORD *)v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 64) = 0u;
      *(_OWORD *)(v15 + 80) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)(v15 + 48) = 0u;
      v16 = *(_QWORD *)(v14 + 136);
      *(_QWORD *)(v15 + 48) = v10 + v9;
      *(_QWORD *)(v15 + 56) = v16;
      v7[v9 + 2] = v15;
      *(_QWORD *)(v12 + 8) = v7[2];
      for (i = v7[2]; i; i = *(_QWORD *)(i + 24))
        *(_QWORD *)(i + 8) = v7[*(unsigned __int16 *)(i + 96) + 2];
      return 1;
    }
  }
  return result;
}

uint64_t sub_19BFC0E74()
{
  return 0;
}

uint64_t sub_19BFC0E7C()
{
  return 0;
}

uint64_t sub_19BFC0E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1) < 1)
    return 0;
  if (a4)
  {
    v10 = sub_19BFC2854(a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 152))(v10);
  }
  else
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, a2, a3, a5);
  }
  v12 = v11;
  if (!v11)
    return 0;
  v13 = sub_19BFC2854(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 144))(v13, v12);
  v14 = sub_19BFC2854(a1);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 200))(v14);
  v16 = (_QWORD *)sub_19BFB54C8(v15);
  sub_19BFC3548(v16, v12, a4, a3);
  return 1;
}

uint64_t sub_19BFC0F60(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(_QWORD *, unint64_t);
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(_QWORD *, unint64_t, uint64_t, uint64_t *, uint64_t, uint64_t);
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD v48[2];
  void (*v49)(uint64_t);
  void *v50;
  uint64_t v51;

  if ((*(int (**)(_QWORD *))(*a1 + 272))(a1) < 1)
    return 0;
  v12 = sub_19BFC2854((uint64_t)a1);
  if (a5)
  {
    v13 = 19;
    goto LABEL_47;
  }
  sub_19BFC28E0((uint64_t)a1);
  if ((a6 & 2) == 0)
    (**(void (***)(uint64_t))v12)(v12);
  if (!a4)
    a4 = 2 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, a3, a4);
  v14 = *(_QWORD *)(a1[1] + 8);
  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 0x40000000;
  v49 = sub_19BFAC89C;
  v50 = &unk_1E3D150A0;
  v51 = v14;
  std::mutex::lock((std::mutex *)(v14 + 16));
  *(_DWORD *)(v14 + 8) = 1;
  std::mutex::unlock((std::mutex *)(v14 + 16));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 168))(v12, 2) & 1) != 0
    || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 168))(v12, 8))
  {
    *(_QWORD *)(v14 + 120) = sub_19BFAB80C;
    *(_QWORD *)(v14 + 128) = 0;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 168))(v12, 4)
    && !sub_19BFAB9D8(v12, 0, 0))
  {
    goto LABEL_41;
  }
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 64))(v12);
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  v15 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  v47 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 200))(v12);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v18 = *(_QWORD *)(v14 + 80);
  v19 = sub_19BFAC3A8(*(_QWORD **)(v16 + 16));
  *(_OWORD *)(v19 + 96) = 0u;
  *(_OWORD *)(v19 + 112) = 0u;
  *(_OWORD *)(v19 + 64) = 0u;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_QWORD *)(v19 + 48) = "BOS/EOS";
  *(_QWORD *)(v19 + 56) = *(_QWORD *)(v18 + 136);
  *(_BYTE *)(v19 + 124) = 2;
  *v15 = v19;
  v20 = sub_19BFAC2E0(v19);
  *(_DWORD *)(v14 + 112) = v20;
  if (v20 != -1)
  {
    if (!v20)
      goto LABEL_41;
    v20 = 0;
  }
  v21 = 2 * v17;
  *(_DWORD *)(v14 + 116) = v20;
  if (!v21)
  {
LABEL_35:
    v30 = *(_QWORD *)(v14 + 80);
    a5 = 0;
    v31 = sub_19BFAC3A8(*(_QWORD **)(v16 + 16));
    *(_OWORD *)(v31 + 96) = 0u;
    *(_OWORD *)(v31 + 112) = 0u;
    *(_OWORD *)(v31 + 64) = 0u;
    *(_OWORD *)(v31 + 80) = 0u;
    *(_OWORD *)(v31 + 32) = 0u;
    *(_OWORD *)(v31 + 48) = 0u;
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)(v31 + 16) = 0u;
    *(_QWORD *)(v31 + 48) = "BOS/EOS";
    *(_QWORD *)(v31 + 56) = *(_QWORD *)(v30 + 136);
    *(_BYTE *)(v31 + 124) = 3;
    v47[v21] = v31;
    if (!v15[v21])
      goto LABEL_52;
    v32 = *(unsigned int (**)(_QWORD *, unint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v14 + 120);
    v33 = *(_QWORD *)(v14 + 128);
    v34 = (_QWORD *)(v14 + (v33 >> 1));
    if ((v33 & 1) != 0)
      v32 = *(unsigned int (**)(_QWORD *, unint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*v34 + v32);
    if (v32(v34, v21, v31, v15, v16, v14 + 116))
    {
LABEL_52:
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 168))(v12, 32, v31))
      {
        sub_19BFAC228(v12);
      }
      else
      {
        v35 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        v36 = (_QWORD *)*v35;
        if (*v35)
        {
          do
          {
            v36[1] = v35;
            v35 = v36;
            v36 = (_QWORD *)*v36;
          }
          while (v36);
        }
      }
      v29 = 1;
      goto LABEL_45;
    }
LABEL_41:
    v29 = 0;
    goto LABEL_45;
  }
  if (*(_DWORD *)(v14 + 8) != 2)
  {
    v22 = 0;
    v45 = v46 + v44;
    do
    {
      if (v15[v22])
      {
        if (v22 || !*v47)
        {
          v23 = *(_QWORD *)(v14 + 80);
          if (v46)
            v24 = sub_19BFADD9C(v23, a2, v22, (unsigned __int16 *)(v46 + v22), v45, v16, a6);
          else
            v24 = sub_19BFADD9C(v23, a2, v22, 0, 0, v16, a6);
          v47[v22] = v24;
        }
        v25 = *(unsigned int (**)(_QWORD *, unint64_t))(v14 + 120);
        v26 = *(_QWORD *)(v14 + 128);
        v27 = (_QWORD *)(v14 + (v26 >> 1));
        if ((v26 & 1) != 0)
          v25 = *(unsigned int (**)(_QWORD *, unint64_t))(*v27 + v25);
        if (!v25(v27, v22))
          break;
        v28 = *(_DWORD *)(v14 + 116);
        if (v28 != -1 && v28 >= *(_DWORD *)(v14 + 112))
          goto LABEL_35;
      }
      v22 += 2;
      if (v21 <= v22)
        goto LABEL_35;
    }
    while (*(_DWORD *)(v14 + 8) != 2);
  }
  v29 = 0;
  a5 = 0;
LABEL_45:
  v49((uint64_t)v48);
  if (!v29)
    return 0;
  v13 = 2;
LABEL_47:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8 * v13))(v12);
  if (result)
  {
    v38 = result;
    v39 = sub_19BFC2854((uint64_t)a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 144))(v39, v38);
    v40 = sub_19BFC2854((uint64_t)a1);
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 200))(v40);
    v42 = (_QWORD *)sub_19BFB54C8(v41);
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    sub_19BFC3548(v42, v38, a5, 2 * v43);
    return 1;
  }
  return result;
}

void sub_19BFC143C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void (*a16)(char *))
{
  a16(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFC145C(uint64_t a1, const UChar *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  UChar *First;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1) <= 0)
  {
    if (setjmp((int *)(a1 + 336)) != 1)
    {
      std::ios_base::clear((std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24)), 0);
      v16 = sub_19BF8E6F8((_QWORD *)(a1 + 48), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/tagger.cpp", 69);
      sub_19BF8E6F8(v16, (uint64_t)"(", 1);
      v17 = (_QWORD *)std::ostream::operator<<();
      v18 = sub_19BF8E6F8(v17, (uint64_t)") [", 3);
      v19 = sub_19BF8E6F8(v18, (uint64_t)"lattice_level() >= 1", 20);
      v20 = sub_19BF8E6F8(v19, (uint64_t)"] ", 2);
      sub_19BF8E6F8(v20, (uint64_t)"use -l option to obtain N-Best results. e.g., mecab -N10 -l1", 60);
      longjmp((int *)(a1 + 336), 1);
    }
    return 0;
  }
  if (a4)
  {
    v14 = sub_19BFC2854(a1);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 152))(v14);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t, const UChar *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a3, a5, a6, a7);
  }
  v21 = v15;
  if (!v15)
    return 0;
  v22 = sub_19BFC2854(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 144))(v22, v21);
  First = u_strFindFirst(a2, (unint64_t)(int)a3 >> 1, (const UChar *)"\t", 1);
  v24 = 0;
  if (First)
    v24 = (char *)First - (char *)a2;
  v25 = v24 + a4;
  v26 = -16;
  if (!First)
    v26 = -8;
  v27 = v26 + a3;
  v28 = sub_19BFC2854(a1);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 200))(v28);
  v30 = (_QWORD *)sub_19BFB54C8(v29);
  sub_19BFC3548(v30, v21, v25, v27);
  return 1;
}

void sub_19BFC1660()
{
  uint64_t v0;

  sub_19BFAA53C(v0);
}

uint64_t sub_19BFC1668(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  return sub_19BFA9CC8(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 88), a2, a3);
}

uint64_t sub_19BFC1680(uint64_t a1)
{
  void (***v2)(_QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (void (***)(_QWORD))sub_19BFC2854(a1);
  (**v2)(v2);
  v3 = sub_19BFC2854(a1);
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 200))(v3);
  v5 = (_QWORD *)v4[2];
  v5[4] = 0;
  v5[5] = 0;
  v7 = v5[1];
  v6 = v5[2];
  if (v6 == v7)
  {
    v7 = v5[2];
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 - 8);
        if (v10)
        {
          v11 = v10 << 7;
          do
          {
            sub_19BFAC558((const void **)(v9 - 24 + v11), 0);
            v11 -= 128;
          }
          while (v11);
        }
        MEMORY[0x1A1AD0CB8](v9 - 16, 0x1070C80FE750B47);
        v7 = v5[1];
        v6 = v5[2];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  v5[2] = v7;
  v12 = (_QWORD *)v4[4];
  if (v12)
  {
    v12[4] = 0;
    v12[5] = 0;
    v14 = v12[1];
    v13 = v12[2];
    if (v13 == v14)
    {
      v14 = v12[2];
    }
    else
    {
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(v14 + 8 * v15);
        if (v16)
        {
          MEMORY[0x1A1AD0CB8](v16, 0x1020C80EDCEB4C7);
          v14 = v12[1];
          v13 = v12[2];
        }
        ++v15;
      }
      while (v15 < (v13 - v14) >> 3);
    }
    v12[2] = v14;
  }
  v17 = v4[6];
  if (v17)
  {
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = 0;
  }
  v18 = v4[8];
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v4[8] = 0;
  return 0;
}

uint64_t sub_19BFC17D0(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_19BFC2854(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 200))(v1);
  return 0;
}

unint64_t sub_19BFC17F4(uint64_t a1, void *__src, size_t __n, int a4, int a5, unsigned int a6, void *__dst, unint64_t a8)
{
  unint64_t result;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  result = 0;
  if (__n && a4)
  {
    if (a6)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80);
      v13 = *(_QWORD **)(v12 + 8);
      v14 = *(_QWORD **)(v12 + 16);
      if (v13 == v14)
      {
LABEL_7:
        result = 0;
      }
      else
      {
        while (*(unsigned __int8 *)(*v13 + 656) != a5)
        {
          v13 += 2;
          if (v13 == v14)
            goto LABEL_7;
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD, void *, size_t, _QWORD, void *))(*(_QWORD *)*v13 + 96))(*v13, (a6 >> 4) & 8 | (a6 >> 2) & 4 | (a6 >> 15) & 0x10 | 1, __src, __n, a4 & 0xFFFFFFF, __dst);
      }
      if ((result > a8) | result & 1)
        return 0;
      else
        return result;
    }
    else if (a8 >= __n)
    {
      memcpy(__dst, __src, __n);
      return __n;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19BFC18E4(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD v14[2];
  unsigned __int8 v15;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  if (v6 != v7)
  {
    while (*(unsigned __int8 *)(*(_QWORD *)v6 + 656) != *(unsigned __int8 *)(a2 + 123))
    {
      v6 += 16;
      if (v6 == v7)
        return *a4;
    }
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v6 + 168))(v14);
    v9 = (char)v15;
    v11 = (void *)v14[0];
    v10 = v14[1];
    if ((v15 & 0x80u) == 0)
      v12 = v14;
    else
      v12 = (_QWORD *)v14[0];
    if ((v15 & 0x80u) == 0)
      v10 = v15;
    memcpy(&unk_1EE4172A0, v12, 2 * v10);
    *a3 = &unk_1EE4172A0;
    *a4 *= 2;
    if (v9 < 0)
      operator delete(v11);
  }
  return *a4;
}

_QWORD *sub_19BFC19C8@<X0>(_QWORD *a1@<X8>)
{
  return sub_19BFAEC9C(a1, byte_19C073B72);
}

uint64_t sub_19BFC19D8()
{
  return 1;
}

uint64_t sub_19BFC19E0()
{
  return 0;
}

uint64_t sub_19BFC19E8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80);
  v3 = *(uint64_t **)(v2 + 8);
  for (i = *(uint64_t **)(v2 + 16); v3 != i; *(_DWORD *)(v5 + 576) = v7)
  {
    v6 = *v3;
    v3 += 2;
    v5 = v6;
    if (a2 >= (unint64_t)((uint64_t)(*(_QWORD *)(v6 + 616) - *(_QWORD *)(v6 + 608)) >> 3))
      v7 = 0;
    else
      v7 = a2;
  }
  return 0;
}

uint64_t sub_19BFC1A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80);
  v2 = *(uint64_t **)(v1 + 8);
  v3 = *(uint64_t **)(v1 + 16);
  result = 0xFFFFFFFFLL;
  while (v2 != v3)
  {
    v5 = *v2;
    v2 += 2;
    v6 = *(_DWORD *)(v5 + 576);
    if ((_DWORD)result == v6)
      v7 = result;
    else
      v7 = -1;
    if ((_DWORD)result == -1)
      v7 = v6;
    if (v6 == -1)
      result = result;
    else
      result = v7;
  }
  return result;
}

void sub_19BFC1A74(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  std::mutex::lock((std::mutex *)(v1 + 16));
  if (*(_DWORD *)(v1 + 8))
    *(_DWORD *)(v1 + 8) = 2;
  std::mutex::unlock((std::mutex *)(v1 + 16));
}

uint64_t sub_19BFC1AB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;

  v1 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80);
  v3 = (__int128 *)v1[1];
  v2 = v1[2];
  while (v3 != (__int128 *)v2)
  {
    v4 = (uint64_t *)v1[4];
    v5 = (uint64_t *)v1[5];
    if (v4 == v5)
      goto LABEL_24;
    do
    {
      v7 = *v4;
      v6 = (std::__shared_weak_count *)v4[1];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = *(_QWORD *)v3;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        if (v10 == v7)
          goto LABEL_16;
      }
      else if (*(_QWORD *)v3 == v7)
      {
        goto LABEL_16;
      }
      v4 += 2;
    }
    while (v4 != v5);
    v4 = v5;
LABEL_16:
    v2 = v1[2];
    if (v4 == (uint64_t *)v1[5])
    {
LABEL_24:
      ++v3;
    }
    else
    {
      v12 = v3;
      if (v3 + 1 != (__int128 *)v2)
      {
        v12 = v3;
        do
          v13 = (uint64_t)v12++;
        while (sub_19BFAED8C(v13, v12) + 32 != v2);
        v2 = v1[2];
      }
      while ((__int128 *)v2 != v12)
      {
        v2 -= 16;
        sub_19BFACCEC(v2);
      }
      v1[2] = v12;
      v2 = (uint64_t)v12;
    }
  }
  v15 = v1[4];
  for (i = v1[5]; i != v15; i = sub_19BFACCEC(i - 16))
    ;
  v1[5] = v15;
  return 1;
}

uint64_t sub_19BFC1C0C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  __int128 v38;
  int64x2_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  int64x2_t v44;
  uint64_t v45;
  _QWORD *v46;

  v3 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80);
  v4 = (uint64_t *)v3[1];
  v5 = (uint64_t *)v3[2];
  if (v4 == v5)
    goto LABEL_13;
  while (1)
  {
    v7 = *v4;
    v6 = (std::__shared_weak_count *)v4[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v7 == a2)
      break;
    v4 += 2;
    if (v4 == v5)
    {
      v4 = v5;
      break;
    }
  }
  if (v4 != (uint64_t *)v3[2])
    return 0;
LABEL_13:
  v12 = (std::__shared_weak_count *)operator new();
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D12B10;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v14 = v3[174];
  if (v14)
  {
    v15 = v3[170];
    v16 = v3[171];
    v17 = ((v16 - v15) << 9) - 1;
    if (v16 == v15)
      v17 = 0;
    v18 = v14 - 1;
    v19 = v3[173] + v18;
    v20 = *(_BYTE *)(*(_QWORD *)(v15 + ((v19 >> 9) & 0x7FFFFFFFFFFFF8)) + (v19 & 0xFFF));
    v3[174] = v18;
    if (v17 - v19 >= 0x2000)
    {
      operator delete(*(void **)(v16 - 8));
      v3[171] -= 8;
    }
    *(_BYTE *)(a2 + 656) = v20;
    v21 = v3[3];
    v22 = (_QWORD *)v3[2];
    if ((unint64_t)v22 >= v21)
    {
      v25 = v3[1];
      v26 = ((uint64_t)v22 - v25) >> 4;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60)
        sub_19BF8EB40();
      v28 = v21 - v25;
      if (v28 >> 3 > v27)
        v27 = v28 >> 3;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
        v29 = 0xFFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      v46 = v3 + 3;
      v30 = (char *)sub_19BFAEDF0(v29);
      *(_QWORD *)&v32 = a2;
      *((_QWORD *)&v32 + 1) = v12;
      v33 = &v30[16 * v26];
      *(_OWORD *)v33 = v32;
      do
        v34 = __ldxr(v13);
      while (__stxr(v34 + 1, v13));
      v36 = (_QWORD *)v3[1];
      v35 = (_QWORD *)v3[2];
      if (v35 == v36)
      {
        v39 = vdupq_n_s64((unint64_t)v35);
        v37 = &v30[16 * v26];
      }
      else
      {
        v37 = &v30[16 * v26];
        do
        {
          v38 = *((_OWORD *)v35 - 1);
          v35 -= 2;
          *((_OWORD *)v37 - 1) = v38;
          v37 -= 16;
          *v35 = 0;
          v35[1] = 0;
        }
        while (v35 != v36);
        v39 = *(int64x2_t *)(v3 + 1);
      }
      v24 = v33 + 16;
      v3[1] = v37;
      v3[2] = v33 + 16;
      v44 = v39;
      v40 = v3[3];
      v3[3] = &v30[16 * v31];
      v45 = v40;
      v43 = v39.i64[0];
      sub_19BFAEE24((uint64_t)&v43);
    }
    else
    {
      *v22 = a2;
      v22[1] = v12;
      do
        v23 = __ldxr(v13);
      while (__stxr(v23 + 1, v13));
      v24 = v22 + 2;
    }
    v3[2] = v24;
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  do
    v41 = __ldaxr(v13);
  while (__stlxr(v41 - 1, v13));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return v11;
}

void sub_19BFC1EA0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFC1EF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  __int128 *v3;
  __int128 *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int64_t v31;
  char *v32;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  void *v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int64_t v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t i;
  _QWORD *v90;
  char *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  void *v118;
  void **v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;

  v2 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80);
  v3 = (__int128 *)v2[1];
  v4 = (__int128 *)v2[2];
  if (v3 == v4)
    return 0;
  v6 = v2 + 169;
  while (1)
  {
    v8 = *(_QWORD *)v3;
    v7 = (std::__shared_weak_count *)*((_QWORD *)v3 + 1);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v8 == a2)
      break;
    if (++v3 == v4)
    {
      v3 = v4;
      break;
    }
  }
  v12 = v2[2];
  if (v3 == (__int128 *)v12)
    return 0;
  v13 = *(unsigned __int8 *)(*(_QWORD *)v3 + 656);
  if (v13 != 255)
  {
    v14 = (char *)v2[171];
    v15 = (char *)v2[170];
    v16 = v14 - v15;
    if (v14 == v15)
      v17 = 0;
    else
      v17 = ((v14 - v15) << 9) - 1;
    v18 = v2[173];
    v19 = v2[174] + v18;
    if (v17 == v19)
    {
      if (v18 < 0x1000)
      {
        v119 = (void **)(v2 + 169);
        v34 = v16 >> 3;
        v35 = (char *)v2[172];
        v36 = (char *)v2[169];
        v37 = v35 - v36;
        if (v16 >> 3 >= (unint64_t)((v35 - v36) >> 3))
        {
          if (v35 == v36)
            v40 = 1;
          else
            v40 = v37 >> 2;
          v41 = (char *)sub_19BFAC524(v40);
          v43 = v42;
          v44 = &v41[8 * v34];
          *(_QWORD *)&v45 = v41;
          *((_QWORD *)&v45 + 1) = v44;
          v123 = v45;
          v46 = operator new(0x1000uLL);
          *(_QWORD *)&v47 = v44;
          *((_QWORD *)&v47 + 1) = &v41[8 * v43];
          if (v34 == v43)
          {
            v48 = 8 * v34;
            *(_QWORD *)&v49 = v123;
            if (v16 < 1)
            {
              v84 = v46;
              v85 = v48 >> 2;
              if (v14 == v15)
                v86 = 1;
              else
                v86 = v85;
              v87 = (char *)sub_19BFAC524(v86);
              v44 = &v87[8 * (v86 >> 2)];
              *(_QWORD *)&v49 = v87;
              *((_QWORD *)&v49 + 1) = v44;
              *(_QWORD *)&v47 = v44;
              *((_QWORD *)&v47 + 1) = &v87[8 * v88];
              if (v41)
              {
                v120 = v47;
                v124 = v49;
                operator delete(v41);
                v47 = v120;
                v49 = v124;
              }
              v46 = v84;
            }
            else
            {
              v50 = v48 >> 3;
              if (v50 >= -1)
                v51 = v50 + 1;
              else
                v51 = v50 + 2;
              v44 -= 8 * (v51 >> 1);
              *(_QWORD *)&v47 = v44;
              *((_QWORD *)&v49 + 1) = v44;
            }
          }
          else
          {
            v49 = v123;
          }
          *(_QWORD *)v44 = v46;
          *(_QWORD *)&v47 = v47 + 8;
          for (i = v2[171]; i != v2[170]; i -= 8)
          {
            v90 = (_QWORD *)*((_QWORD *)&v49 + 1);
            if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
            {
              v92 = (_BYTE *)v47;
              if ((unint64_t)v47 >= *((_QWORD *)&v47 + 1))
              {
                if (*((_QWORD *)&v47 + 1) == *((_QWORD *)&v49 + 1))
                  v97 = 1;
                else
                  v97 = (uint64_t)(*((_QWORD *)&v47 + 1) - *((_QWORD *)&v49 + 1)) >> 2;
                v98 = (char *)sub_19BFAC524(v97);
                v91 = &v98[(2 * v97 + 6) & 0xFFFFFFFFFFFFFFF8];
                v100 = v91;
                v101 = v92 - (_BYTE *)v90;
                if (v92 != (_BYTE *)v90)
                {
                  v100 = &v91[v101 & 0xFFFFFFFFFFFFFFF8];
                  v102 = 8 * (v101 >> 3);
                  v103 = v91;
                  v104 = v90;
                  do
                  {
                    v105 = *v104++;
                    *(_QWORD *)v103 = v105;
                    v103 += 8;
                    v102 -= 8;
                  }
                  while (v102);
                }
                *(_QWORD *)&v49 = v98;
                *((_QWORD *)&v49 + 1) = v91;
                *(_QWORD *)&v47 = v100;
                *((_QWORD *)&v47 + 1) = &v98[8 * v99];
                if (v90)
                {
                  v121 = v47;
                  v126 = v49;
                  operator delete(v90);
                  v47 = v121;
                  v49 = v126;
                }
              }
              else
              {
                v93 = (uint64_t)(*((_QWORD *)&v47 + 1) - v47) >> 3;
                if (v93 >= -1)
                  v94 = v93 + 1;
                else
                  v94 = v93 + 2;
                v95 = v94 >> 1;
                v96 = v47 + 8 * (v94 >> 1);
                v91 = (char *)(v96 - (v47 - *((_QWORD *)&v49 + 1)));
                if ((_QWORD)v47 == *((_QWORD *)&v49 + 1))
                {
                  v92 = (_BYTE *)*((_QWORD *)&v49 + 1);
                }
                else
                {
                  v122 = *((_QWORD *)&v47 + 1);
                  v125 = v49;
                  memmove((void *)(v96 - (v47 - *((_QWORD *)&v49 + 1))), *((const void **)&v49 + 1), v47 - *((_QWORD *)&v49 + 1));
                  *((_QWORD *)&v47 + 1) = v122;
                  *(_QWORD *)&v49 = v125;
                }
                *((_QWORD *)&v49 + 1) = v91;
                *(_QWORD *)&v47 = &v92[8 * v95];
              }
            }
            else
            {
              v91 = (char *)*((_QWORD *)&v49 + 1);
            }
            v106 = *(_QWORD *)(i - 8);
            *((_QWORD *)v91 - 1) = v106;
            *((_QWORD *)&v49 + 1) -= 8;
          }
          v107 = *v119;
          *(_OWORD *)v119 = v49;
          *(_OWORD *)(v2 + 171) = v47;
          if (v107)
            operator delete(v107);
        }
        else
        {
          v38 = operator new(0x1000uLL);
          v39 = v38;
          if (v35 == v14)
          {
            if (v36 == v15)
            {
              if (v14 == v15)
                v62 = 1;
              else
                v62 = v37 >> 2;
              v63 = 2 * v62;
              v64 = (char *)sub_19BFAC524(v62);
              v15 = &v64[(v63 + 6) & 0xFFFFFFFFFFFFFFF8];
              v66 = (uint64_t *)v2[170];
              v67 = v15;
              v68 = v2[171] - (_QWORD)v66;
              if (v68)
              {
                v67 = &v15[v68 & 0xFFFFFFFFFFFFFFF8];
                v69 = 8 * (v68 >> 3);
                v70 = v15;
                do
                {
                  v71 = *v66++;
                  *(_QWORD *)v70 = v71;
                  v70 += 8;
                  v69 -= 8;
                }
                while (v69);
              }
              v72 = (void *)v2[169];
              v2[169] = v64;
              v2[170] = v15;
              v2[171] = v67;
              v2[172] = &v64[8 * v65];
              if (v72)
              {
                operator delete(v72);
                v15 = (char *)v2[170];
              }
            }
            *((_QWORD *)v15 - 1) = v39;
            v73 = (char *)v2[170];
            v2[170] = v73 - 8;
            v74 = *((_QWORD *)v73 - 1);
            v2[170] = v73;
            v75 = (char *)v2[171];
            if (v75 == (char *)v2[172])
            {
              v76 = v73 - (_BYTE *)*v119;
              if (v73 <= *v119)
              {
                if (v75 == *v119)
                  v109 = 1;
                else
                  v109 = (v75 - (_BYTE *)*v119) >> 2;
                v110 = (char *)sub_19BFAC524(v109);
                v112 = &v110[8 * (v109 >> 2)];
                v113 = (uint64_t *)v2[170];
                v75 = v112;
                v114 = v2[171] - (_QWORD)v113;
                if (v114)
                {
                  v75 = &v112[v114 & 0xFFFFFFFFFFFFFFF8];
                  v115 = 8 * (v114 >> 3);
                  v116 = &v110[8 * (v109 >> 2)];
                  do
                  {
                    v117 = *v113++;
                    *(_QWORD *)v116 = v117;
                    v116 += 8;
                    v115 -= 8;
                  }
                  while (v115);
                }
                v118 = (void *)v2[169];
                v2[169] = v110;
                v2[170] = v112;
                v2[171] = v75;
                v2[172] = &v110[8 * v111];
                if (v118)
                {
                  operator delete(v118);
                  v75 = (char *)v2[171];
                }
              }
              else
              {
                v77 = v76 >> 3;
                v25 = v76 >> 3 < -1;
                v78 = (v76 >> 3) + 2;
                if (v25)
                  v79 = v78;
                else
                  v79 = v77 + 1;
                v80 = -(v79 >> 1);
                v81 = v79 >> 1;
                v82 = &v73[-8 * v81];
                v83 = v75 - v73;
                if (v75 != v73)
                {
                  memmove(&v73[-8 * v81], v73, v75 - v73);
                  v73 = (char *)v2[170];
                }
                v75 = &v82[v83];
                v2[171] = &v82[v83];
                v2[170] = &v73[8 * v80];
              }
            }
            *(_QWORD *)v75 = v74;
            v2[171] += 8;
          }
          else
          {
            *(_QWORD *)v14 = v38;
            v2[171] += 8;
          }
        }
      }
      else
      {
        v2[173] = v18 - 4096;
        v22 = *(_QWORD *)v15;
        v20 = v15 + 8;
        v21 = v22;
        v2[170] = v20;
        if ((char *)v2[172] == v14)
        {
          v23 = (uint64_t)&v20[-*v6];
          if ((unint64_t)v20 <= *v6)
          {
            if (v14 == (char *)*v6)
              v52 = 1;
            else
              v52 = (uint64_t)&v14[-*v6] >> 2;
            v53 = (char *)sub_19BFAC524(v52);
            v55 = &v53[8 * (v52 >> 2)];
            v56 = (uint64_t *)v2[170];
            v14 = v55;
            v57 = v2[171] - (_QWORD)v56;
            if (v57)
            {
              v14 = &v55[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = 8 * (v57 >> 3);
              v59 = &v53[8 * (v52 >> 2)];
              do
              {
                v60 = *v56++;
                *(_QWORD *)v59 = v60;
                v59 += 8;
                v58 -= 8;
              }
              while (v58);
            }
            v61 = (void *)v2[169];
            v2[169] = v53;
            v2[170] = v55;
            v2[171] = v14;
            v2[172] = &v53[8 * v54];
            if (v61)
            {
              operator delete(v61);
              v14 = (char *)v2[171];
            }
          }
          else
          {
            v24 = v23 >> 3;
            v25 = v23 >> 3 < -1;
            v26 = (v23 >> 3) + 2;
            if (v25)
              v27 = v26;
            else
              v27 = v24 + 1;
            v28 = -(v27 >> 1);
            v29 = v27 >> 1;
            v30 = &v20[-8 * v29];
            v31 = v14 - v20;
            if (v14 == v20)
            {
              v32 = v14;
            }
            else
            {
              memmove(&v20[-8 * v29], v20, v14 - v20);
              v32 = (char *)v2[170];
            }
            v14 = &v30[v31];
            v2[171] = &v30[v31];
            v2[170] = &v32[8 * v28];
          }
        }
        *(_QWORD *)v14 = v21;
        v2[171] += 8;
      }
      v15 = (char *)v2[170];
      v19 = v2[174] + v2[173];
    }
    *(_BYTE *)(*(_QWORD *)&v15[(v19 >> 9) & 0x7FFFFFFFFFFFF8] + (v19 & 0xFFF)) = v13;
    ++v2[174];
    v12 = v2[2];
  }
  if (v3 + 1 != (__int128 *)v12)
  {
    do
      v108 = (uint64_t)v3++;
    while (sub_19BFAED8C(v108, v3) + 32 != v12);
    v12 = v2[2];
  }
  while ((__int128 *)v12 != v3)
  {
    v12 -= 16;
    sub_19BFACCEC(v12);
  }
  v2[2] = v3;
  return 1;
}

void sub_19BFC2598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13)
{
  void *v13;

  operator delete(v13);
  if ((_QWORD)a13)
    operator delete((void *)a13);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFC25C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 80) + 112) = a2;
  return result;
}

uint64_t sub_19BFC25DC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 80) + 120) = a2;
  return result;
}

uint64_t sub_19BFC25F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 80) + 1288) = a2;
  return result;
}

uint64_t sub_19BFC2604(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 8) + 80) + 1296) = a2;
  return result;
}

BOOL sub_19BFC2618(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80) + 1296) != 0;
}

BOOL sub_19BFC2634(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 v2;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(_DWORD *)(v1 + 20) == 9;
    if (*(_DWORD *)(v1 + 20) == 9)
      break;
    v1 = *(_QWORD *)(v1 + 40);
    if (!v1)
      return 0;
  }
  return v2;
}

uint64_t sub_19BFC2674(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_19BFC2854(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136))(v1);
}

uint64_t sub_19BFC2690(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 32) >> 2) & 1;
}

uint64_t sub_19BFC269C(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 4;
  else
    v2 = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFFFFB | v2;
  return result;
}

float sub_19BFC26BC(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

double sub_19BFC26C8(uint64_t a1, float a2)
{
  double result;

  result = a2;
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t sub_19BFC26D4(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 32);
  if ((v1 & 8) != 0)
    return 2;
  else
    return (v1 >> 1) & 1;
}

uint64_t sub_19BFC26EC(uint64_t result, unsigned int a2)
{
  if (a2 <= 2)
    *(_DWORD *)(result + 32) |= dword_19C065F70[a2];
  return result;
}

uint64_t sub_19BFC2710(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 32) >> 5) & 1;
}

uint64_t sub_19BFC271C(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 32;
  else
    v2 = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t sub_19BFC273C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80) + 240);
}

void **sub_19BFC2750(uint64_t a1)
{
  return sub_19BFAA4D8(a1 + 48);
}

void sub_19BFC275C(uint64_t a1)
{
  sub_19BFC2780(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFC2780(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1E3D13C08;
  v2 = a1 + 48;
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  v3 = MEMORY[0x1E0DE4F60];
  v4 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(v2 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a1 + 56) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 160);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 336))(v5);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  return a1;
}

uint64_t sub_19BFC2854(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v1 = operator new();
    sub_19BFB5774(v1, 0);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v1;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 336))(v3);
      return *(_QWORD *)(a1 + 24);
    }
  }
  return v1;
}

void sub_19BFC28BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CDC](v1, 0x10F3C40B77F16BFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFC28E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;

  v2 = sub_19BFC2854(a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 176))(v2, *(unsigned int *)(a1 + 32));
  v3 = sub_19BFC2854(a1);
  v4 = *(double *)(a1 + 40);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v3 + 112))(v3, v4);
}

uint64_t sub_19BFC2928(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3D13C08;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0x3FE8000000000000;
  sub_19BFA9BDC(a1 + 48);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  return a1;
}

void sub_19BFC2978(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 336))(v3);
  v4 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  _Unwind_Resume(exception_object);
}

BOOL sub_19BFC29B4(uint64_t a1, const char *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  const std::locale::facet *v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  std::string::value_type *v12;
  std::string::value_type v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  _BOOL8 v18;
  int v19;
  std::string::size_type size;
  std::string *v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string *v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type v33;
  std::string *v34;
  unsigned int v35;
  int v36;
  int v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string *p_p;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  size_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  std::string *v55;
  std::string::size_type v56;
  std::string __p;
  std::string v59;
  std::string v60;
  char v61;
  _QWORD v62[2];
  _BYTE v63[408];
  _QWORD v64[21];

  v64[19] = *MEMORY[0x1E0C80C00];
  v3 = sub_19BFB3388(v62);
  v4 = *(_QWORD *)(v62[0] - 24);
  if ((*((_BYTE *)v3 + v4 + 32) & 5) != 0)
  {
    if (setjmp((int *)(a1 + 416)) != 1)
    {
      std::ios_base::clear((std::ios_base *)(a1 + 128 + *(_QWORD *)(*(_QWORD *)(a1 + 128) - 24)), 0);
      v42 = sub_19BF8E6F8((_QWORD *)(a1 + 128), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/param.cpp", 68);
      sub_19BF8E6F8(v42, (uint64_t)"(", 1);
      v43 = (_QWORD *)std::ostream::operator<<();
      v44 = sub_19BF8E6F8(v43, (uint64_t)") [", 3);
      v45 = sub_19BF8E6F8(v44, (uint64_t)"ifs", 3);
      v46 = sub_19BF8E6F8(v45, (uint64_t)"] ", 2);
      v47 = sub_19BF8E6F8(v46, (uint64_t)"no such file or directory: ", 27);
      v48 = strlen(a2);
      sub_19BF8E6F8(v47, (uint64_t)a2, v48);
      longjmp((int *)(a1 + 416), 1);
    }
    v5 = 0;
    goto LABEL_76;
  }
  memset(&v60, 0, sizeof(v60));
  v6 = MEMORY[0x1E0C80978];
  v7 = v4;
  while (1)
  {
LABEL_5:
    std::ios_base::getloc((const std::ios_base *)((char *)v62 + v7));
    v8 = std::locale::use_facet((const std::locale *)&v59, MEMORY[0x1E0DE4A90]);
    v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale((std::locale *)&v59);
    MEMORY[0x1A1AD0AA8]();
    if (!v59.__r_.__value_.__s.__data_[0])
      goto LABEL_22;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      *v60.__r_.__value_.__l.__data_ = 0;
      v60.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v60.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v60.__r_.__value_.__s + 23) = 0;
    }
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD **)&v63[*(_QWORD *)(v62[0] - 24) + 24];
      v12 = (std::string::value_type *)v11[3];
      if (v12 != (std::string::value_type *)v11[4])
      {
        v11[3] = v12 + 1;
        v13 = *v12;
        goto LABEL_13;
      }
      v14 = (*(uint64_t (**)(_QWORD *))(*v11 + 80))(v11);
      v13 = v14;
      if (v14 == -1)
        break;
LABEL_13:
      if (v9 == v13)
      {
        v16 = 0;
        goto LABEL_21;
      }
      std::string::push_back(&v60, v13);
      v15 = ++v10;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      {
        v10 = v15;
        if (v60.__r_.__value_.__l.__size_ == 0x7FFFFFFFFFFFFFF7)
        {
          v16 = 4;
          goto LABEL_21;
        }
      }
    }
    if (v10)
      v16 = 2;
    else
      v16 = 6;
LABEL_21:
    std::ios_base::clear((std::ios_base *)((char *)v62 + *(_QWORD *)(v62[0] - 24)), *(_DWORD *)&v63[*(_QWORD *)(v62[0] - 24) + 16] | v16);
LABEL_22:
    v17 = *(_DWORD *)&v63[*(_QWORD *)(v62[0] - 24) + 16] & 5;
    v18 = v17 != 0;
    if (v17)
      goto LABEL_73;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      v7 = *(_QWORD *)(v62[0] - 24);
      if (v60.__r_.__value_.__l.__size_)
      {
        v19 = *v60.__r_.__value_.__l.__data_;
        goto LABEL_28;
      }
      continue;
    }
    v7 = *(_QWORD *)(v62[0] - 24);
    if (*((_BYTE *)&v60.__r_.__value_.__s + 23))
    {
      v19 = v60.__r_.__value_.__s.__data_[0];
LABEL_28:
      v7 = *(_QWORD *)(v62[0] - 24);
      if (v19 != 59)
      {
        v7 = *(_QWORD *)(v62[0] - 24);
        if (v19 != 35)
          break;
      }
    }
  }
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  else
    size = v60.__r_.__value_.__l.__size_;
  if (size)
  {
    v21 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v60
        : (std::string *)v60.__r_.__value_.__r.__words[0];
    v22 = memchr(v21, 61, size);
    if (v22)
    {
      v23 = v22;
      if (v22 - (_BYTE *)v21 != -1)
      {
        v24 = v22 - (_BYTE *)v21 + 1;
        do
        {
          v25 = v24;
          v26 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v26 = v60.__r_.__value_.__l.__size_;
          if (v24 >= v26)
            break;
          v27 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v60
              : (std::string *)v60.__r_.__value_.__r.__words[0];
          v28 = v27->__r_.__value_.__s.__data_[v25];
          v29 = (v28 & 0x80000000) != 0 ? __maskrune(v28, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v28 + 60) & 0x4000;
          v30 = v29;
          v24 = v25 + 1;
        }
        while (v30);
        v31 = (uint64_t)&v23[~(unint64_t)v21];
        while (1)
        {
          v32 = v31;
          v33 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          if (v31 < 0)
            break;
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = &v60;
          else
            v34 = (std::string *)v60.__r_.__value_.__r.__words[0];
          v35 = v34->__r_.__value_.__s.__data_[v32];
          if ((v35 & 0x80000000) != 0)
            v36 = __maskrune(v35, 0x4000uLL);
          else
            v36 = *(_DWORD *)(v6 + 4 * v35 + 60) & 0x4000;
          v37 = v36;
          v31 = v32 - 1;
          if (!v37)
          {
            v38 = v32 + 1;
            v33 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
            goto LABEL_61;
          }
        }
        v38 = v31 + 1;
LABEL_61:
        if ((v33 & 0x80u) == 0)
          v39 = v33;
        else
          v39 = v60.__r_.__value_.__l.__size_;
        std::string::basic_string(&v59, &v60, v25, v39 - v25, (std::allocator<char> *)&__p);
        std::string::basic_string(&__p, &v60, 0, v38, (std::allocator<char> *)&v61);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        sub_19BFB9830(a1, (char *)p_p, (uint64_t)&v59, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
        v7 = *(_QWORD *)(v62[0] - 24);
        goto LABEL_5;
      }
    }
  }
  if (setjmp((int *)(a1 + 416)) != 1)
  {
    std::ios_base::clear((std::ios_base *)(a1 + 128 + *(_QWORD *)(*(_QWORD *)(a1 + 128) - 24)), 0);
    v49 = sub_19BF8E6F8((_QWORD *)(a1 + 128), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Lexicon/Source/MeCab/param.cpp", 68);
    sub_19BF8E6F8(v49, (uint64_t)"(", 1);
    v50 = (_QWORD *)std::ostream::operator<<();
    v51 = sub_19BF8E6F8(v50, (uint64_t)") [", 3);
    v52 = sub_19BF8E6F8(v51, (uint64_t)"pos != std::string::npos", 24);
    v53 = sub_19BF8E6F8(v52, (uint64_t)"] ", 2);
    v54 = sub_19BF8E6F8(v53, (uint64_t)"format error: ", 14);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = &v60;
    else
      v55 = (std::string *)v60.__r_.__value_.__r.__words[0];
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    else
      v56 = v60.__r_.__value_.__l.__size_;
    sub_19BF8E6F8(v54, (uint64_t)v55, v56);
    longjmp((int *)(a1 + 416), 1);
  }
LABEL_73:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  v5 = v18;
LABEL_76:
  v62[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v62 + *(_QWORD *)(v62[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1A1AD0A90](v63);
  std::istream::~istream();
  MEMORY[0x1A1AD0C7C](v64);
  return v5;
}

void sub_19BFC3074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  __cxa_end_catch();
  if (a24 < 0)
    operator delete(__p);
  sub_19BFB3530(&a26);
  _Unwind_Resume(a1);
}

void sub_19BFC3080(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19BF8E3F8(a1);
  _Unwind_Resume(a1);
}

void sub_19BFC3094()
{
  uint64_t v0;

  sub_19BFAA53C(v0);
}

void sub_19BFC30A8()
{
  JUMPOUT(0x19BFC3118);
}

void sub_19BFC30B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  sub_19BFB3530(&a32);
  _Unwind_Resume(a1);
}

void sub_19BFC30F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  std::locale::~locale(&a16);
  if (a24 < 0)
    operator delete(a19);
  sub_19BFB3530(&a26);
  _Unwind_Resume(a1);
}

void sub_19BFC3128(uint64_t a1, char *a2)
{
  _QWORD *v3;
  const std::ios_base *v4;
  uint64_t width;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  std::strstreambuf_vtbl *v16;
  _QWORD *v17;
  std::string::size_type v18;
  char v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t *v22;
  void *__p[2];
  char v24;
  std::locale v25;
  _QWORD *v26;
  std::string v27;
  std::strstream v28;
  char v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  sub_19BF8E43C(__p, a2);
  sub_19BFAA7BC((uint64_t)&v28);
  memset(&v27, 0, sizeof(v27));
  v3 = (_QWORD *)std::ostream::operator<<();
  if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
    goto LABEL_29;
  MEMORY[0x1A1AD0AA8](&v29, &v28, 0);
  if (!v29)
    goto LABEL_27;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    *v27.__r_.__value_.__l.__data_ = 0;
    v27.__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    v27.__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&v27.__r_.__value_.__s + 23) = 0;
  }
  v4 = (const std::ios_base *)((char *)&v28 + (unint64_t)v28.__sb_.__vftable[-1].pbackfail);
  width = v4->__width_;
  if (width <= 1)
    v6 = 1;
  else
    v6 = v4->__width_;
  std::ios_base::getloc(v4);
  v7 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v25);
  v8 = 0;
  if (width >= 1)
    v9 = v6;
  else
    v9 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v10 = *(std::streambuf::char_type **)((char *)&v28.__sb_.__bout_
                                        + (unint64_t)v28.__sb_.__vftable[-1].pbackfail);
    v11 = (_BYTE *)v10[3];
    if (v11 == (_BYTE *)v10[4])
      break;
    LOBYTE(v12) = *v11;
LABEL_15:
    if ((v12 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v12) & 0x4000) != 0)
    {
      v15 = 0;
      goto LABEL_24;
    }
    std::string::push_back(&v27, v12);
    v13 = *(std::streambuf::char_type **)((char *)&v28.__sb_.__bout_
                                        + (unint64_t)v28.__sb_.__vftable[-1].pbackfail);
    v14 = v13[3];
    if (v14 == v13[4])
      (*(void (**)(_QWORD *))(*v13 + 80))(v13);
    else
      v13[3] = v14 + 1;
    if (v9 == ++v8)
    {
      v15 = 0;
      v16 = v28.__sb_.__vftable;
      *(std::streambuf::char_type **)((char *)&v28.__sb_.__ninp_ + (unint64_t)v28.__sb_.__vftable[-1].pbackfail) = 0;
      goto LABEL_26;
    }
  }
  v12 = (*(uint64_t (**)(_QWORD *))(*v10 + 72))(v10);
  if (v12 != -1)
    goto LABEL_15;
  v15 = 2;
LABEL_24:
  v16 = v28.__sb_.__vftable;
  *(std::streambuf::char_type **)((char *)&v28.__sb_.__ninp_ + (unint64_t)v28.__sb_.__vftable[-1].pbackfail) = 0;
  if (!v8)
    v15 |= 4u;
LABEL_26:
  std::ios_base::clear((std::ios_base *)((char *)&v28 + (unint64_t)v16[-1].pbackfail), *(_DWORD *)((char *)&v28.__sb_.__einp_ + (unint64_t)v16[-1].pbackfail) | v15);
LABEL_27:
  if ((*((_BYTE *)&v28.__sb_.__einp_ + (unint64_t)v28.__sb_.__vftable[-1].pbackfail) & 5) == 0
    && (sub_19BFAA880(&v28),
        (*((_BYTE *)&v28.__sb_.__einp_ + (unint64_t)v28.__sb_.__vftable[-1].pbackfail) & 2) != 0))
  {
    v30[0] = v27.__r_.__value_.__l.__size_;
    v18 = v27.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 7);
    v19 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  }
  else
  {
LABEL_29:
    v17 = (_QWORD *)operator new();
    *v17 = 0;
    v17[1] = 0;
    v17[2] = 0;
    v25.__locale_ = (std::locale::__imp *)&off_1E3D13E48;
    v26 = v17;
    v30[0] = 0;
    *(_QWORD *)((char *)v30 + 7) = 0;
    sub_19BFB1770(&v25);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v18 = 0;
    v19 = 0;
  }
  std::strstream::~strstream(&v28);
  v20 = sub_19BFB99D8((uint64_t **)(a1 + 8), __p, (uint64_t)__p);
  v21 = v20;
  if (*((char *)v20 + 79) < 0)
    operator delete(v20[7]);
  v22 = (uint64_t *)v30[0];
  v21[7] = (uint64_t *)v18;
  v21[8] = v22;
  *(uint64_t **)((char *)v21 + 71) = *(uint64_t **)((char *)v30 + 7);
  *((_BYTE *)v21 + 79) = v19;
  if (v24 < 0)
    operator delete(__p[0]);
}

void sub_19BFC3460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,std::strstream *a23)
{
  std::strstream *v24;

  if (a2)
  {
    std::locale::~locale(&a15);
    __cxa_begin_catch(exception_object);
    v24 = a23;
    *(_DWORD *)((char *)&a23 + a23[-1].__sb_.__alsize_ + 32) |= 1u;
    if ((*((_BYTE *)&a23 + v24[-1].__sb_.__alsize_ + 36) & 1) == 0)
    {
      __cxa_end_catch();
      JUMPOUT(0x19BFC3314);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFC3548(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  char **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v9 = (char **)(a1 + 2);
  v8 = (void *)a1[2];
  v9[8] = 0;
  v9[9] = 0;
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  do
  {
    v10 = a2;
    a2 = *(_QWORD *)(a2 + 8);
  }
  while (a2);
  sub_19BFC3688(v9 + 4);
  v12 = v11;
  *v11 = v10;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = a4;
  a1[1] = a3;
  v14 = (char *)a1[3];
  v13 = a1[4];
  if ((unint64_t)v14 >= v13)
  {
    v16 = (v14 - *v9) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_19BF8EB40();
    v17 = v13 - (_QWORD)*v9;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v19 = (unint64_t)sub_19BFAC524(v19);
    else
      v20 = 0;
    v21 = (_QWORD *)(v19 + 8 * v16);
    v22 = v19 + 8 * v20;
    *v21 = v12;
    v15 = (uint64_t)(v21 + 1);
    v24 = (char *)a1[2];
    v23 = (char *)a1[3];
    if (v23 != v24)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *--v21 = v25;
      }
      while (v23 != v24);
      v23 = *v9;
    }
    a1[2] = v21;
    a1[3] = v15;
    a1[4] = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *(_QWORD *)v14 = v11;
    v15 = (uint64_t)(v14 + 8);
  }
  a1[3] = v15;
  return sub_19BFC37D4(a1[2], v15, (v15 - a1[2]) >> 3);
}

double sub_19BFC3688(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 == v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x28uLL);
    v6 = operator new[]();
    v7 = v6;
    v9 = (uint64_t *)a1[2];
    v8 = a1[3];
    if ((unint64_t)v9 >= v8)
    {
      v11 = a1[1];
      v12 = ((uint64_t)v9 - v11) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        sub_19BF8EB40();
      v13 = v8 - v11;
      v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v15 = (unint64_t)sub_19BFAC524(v15);
      else
        v16 = 0;
      v17 = (uint64_t *)(v15 + 8 * v12);
      v18 = v15 + 8 * v16;
      *v17 = v7;
      v10 = v17 + 1;
      v20 = (char *)a1[1];
      v19 = (char *)a1[2];
      if (v19 != v20)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *--v17 = v21;
        }
        while (v19 != v20);
        v19 = (char *)a1[1];
      }
      a1[1] = v17;
      a1[2] = v10;
      a1[3] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v9 = v6;
      v10 = v9 + 1;
    }
    a1[2] = v10;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  v22 = *(_QWORD *)(v5 + 8 * v2);
  a1[4] = v4 + 1;
  v23 = v22 + 40 * v4;
  *(_QWORD *)(v23 + 32) = 0;
  result = 0.0;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  return result;
}

uint64_t sub_19BFC37D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = (_QWORD *)(result + 8 * v3);
    v5 = *v4;
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *(_QWORD *)(v8 + 16);
    if (*(_QWORD *)(*v4 + 16) > v9)
    {
      do
      {
        v10 = v4;
        *v6 = v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
        v4 = (_QWORD *)(result + 8 * v3);
        v5 = *v4;
        v6 = v10;
      }
      while (*(_QWORD *)(*v4 + 16) > v9);
      *v10 = v7;
    }
  }
  return result;
}

uint64_t sub_19BFC3830(char *a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;

  v2 = atomic_load((unsigned __int8 *)&qword_1EE417680);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EE417680))
  {
    sub_19BFB1EAC((uint64_t)&unk_1EE417458);
    __cxa_atexit((void (*)(void *))sub_19BFB2030, &unk_1EE417458, &dword_19BF85000);
    __cxa_guard_release(&qword_1EE417680);
  }
  pthread_mutex_lock((pthread_mutex_t *)&unk_1EE417460);
  v3 = atomic_load((unsigned __int8 *)&qword_1EE417450);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EE417450))
  {
    __cxa_atexit(MEMORY[0x1E0DE44D0], &stru_1EE417438, &dword_19BF85000);
    __cxa_guard_release(&qword_1EE417450);
  }
  sub_19BFB4BEC(&stru_1EE417438, a1);
  return pthread_mutex_unlock((pthread_mutex_t *)&unk_1EE417460);
}

void sub_19BFC3914(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE417680);
  _Unwind_Resume(a1);
}

void sub_19BFC392C(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _WORD *a4@<X8>)
{
  int32_t v5;
  UErrorCode v8;
  uint64_t v9;
  UChar *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  UChar *v15;
  UChar *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int16 v20;
  size_t v21;
  char *v22;
  unsigned int SortKey;
  unint64_t v24;
  NSObject *v25;
  const char *v26;
  int v27;
  void *__p;
  void *v29;
  uint64_t v30;
  UErrorCode pErrorCode[2];
  UChar *dest;
  UChar *v33;
  char *v34;
  uint8_t buf[4];
  UErrorCode v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    *a4 = 0;
    return;
  }
  v5 = a3;
  sub_19BFC4130(&dest, a3);
  *(_QWORD *)pErrorCode = 0;
  u_strFromUTF8(dest, (unint64_t)((char *)v33 - (char *)dest) >> 1, (int32_t *)pErrorCode, a2, v5, &pErrorCode[1]);
  v8 = pErrorCode[1];
  if (pErrorCode[1] == U_BUFFER_OVERFLOW_ERROR)
  {
    v9 = pErrorCode[0];
    v10 = v33;
    v11 = v33 - dest;
    if ((int)pErrorCode[0] <= v11)
    {
      if ((int)pErrorCode[0] >= v11)
      {
LABEL_21:
        pErrorCode[1] = U_ZERO_ERROR;
        u_strFromUTF8(dest, (unint64_t)((char *)v10 - (char *)dest) >> 1, (int32_t *)pErrorCode, a2, v5, &pErrorCode[1]);
        v8 = pErrorCode[1];
        goto LABEL_22;
      }
      v10 = &dest[pErrorCode[0]];
    }
    else
    {
      v12 = (int)pErrorCode[0] - v11;
      if (v12 > (v34 - (char *)v33) >> 1)
      {
        if (pErrorCode[0] < 0)
          sub_19BF8EB40();
        if (v34 - (char *)dest > (unint64_t)(int)pErrorCode[0])
          v9 = v34 - (char *)dest;
        if ((unint64_t)(v34 - (char *)dest) >= 0x7FFFFFFFFFFFFFFELL)
          v13 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v13 = v9;
        v14 = (char *)sub_19BFAED5C(v13);
        v15 = dest;
        v16 = v33;
        v17 = &v14[2 * v11];
        v19 = &v14[2 * v18];
        bzero(v17, 2 * v12);
        v10 = (UChar *)&v17[2 * v12];
        while (v16 != v15)
        {
          v20 = *--v16;
          *((_WORD *)v17 - 1) = v20;
          v17 -= 2;
        }
        dest = (UChar *)v17;
        v33 = v10;
        v34 = v19;
        if (v15)
        {
          operator delete(v15);
          v10 = v33;
        }
        goto LABEL_21;
      }
      bzero(v33, 2 * v12);
      v10 += v12;
    }
    v33 = v10;
    goto LABEL_21;
  }
LABEL_22:
  if (v8 < U_ILLEGAL_ARGUMENT_ERROR)
  {
    if ((int)pErrorCode[0] > (unint64_t)(v33 - dest))
      __assert_rtn("computeSortKey", "ICUCollatorWrapper.cpp", 40, "ustr_len <= ustr.size()");
    if (*(_QWORD *)(a1 + 8))
    {
      __p = 0;
      v29 = 0;
      v30 = 0;
      if (pErrorCode[0])
      {
        v21 = 3 * (int)pErrorCode[0];
        sub_19BFA7588(&__p, v21);
        v22 = (char *)v29 + v21;
        bzero(v29, v21);
        v29 = v22;
      }
      SortKey = ucol_getSortKey();
      if (SortKey > (unint64_t)((_BYTE *)v29 - (_BYTE *)__p))
      {
        sub_19BFC41B8((unint64_t *)&__p, SortKey - ((_BYTE *)v29 - (_BYTE *)__p));
        SortKey = ucol_getSortKey();
      }
      if (SortKey)
      {
        if ((_BYTE *)v29 - (_BYTE *)__p < (unint64_t)SortKey)
        {
          v26 = "key_len <= key.size()";
          v27 = 60;
        }
        else
        {
          v24 = SortKey - 1;
          if (!*((_BYTE *)__p + v24))
          {
            sub_19BF8BC44((uint64_t)a4, v24, __p, v24);
LABEL_42:
            if (__p)
            {
              v29 = __p;
              operator delete(__p);
            }
            goto LABEL_24;
          }
          v26 = "key[key_len - 1] == 0";
          v27 = 61;
        }
        __assert_rtn("computeSortKey", "ICUCollatorWrapper.cpp", v27, v26);
      }
      if (qword_1EE417778 != -1)
        dispatch_once(&qword_1EE417778, &unk_1E3D16ED8);
      v25 = qword_1EE417770;
      if (os_log_type_enabled((os_log_t)qword_1EE417770, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v36 = pErrorCode[0];
        _os_log_error_impl(&dword_19BF85000, v25, OS_LOG_TYPE_ERROR, "ucol_getSortKey failed compute collation key of string (len=%d)", buf, 8u);
      }
      *a4 = 0;
      goto LABEL_42;
    }
  }
  *a4 = 0;
LABEL_24:
  if (dest)
  {
    v33 = dest;
    operator delete(dest);
  }
}

void sub_19BFC3CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFC3D08(uint64_t (***a1)(_QWORD, unsigned __int16 *, _QWORD), unsigned __int16 *a2)
{
  unsigned __int16 *v2;

  v2 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
  if (!v2)
    v2 = a2 + 8;
  return (**a1)(a1, v2, *a2);
}

void sub_19BFC3D2C(uint64_t a1@<X0>, UChar32 a2@<W1>, _WORD *a3@<X8>)
{
  NSObject *v6;
  unsigned int SortKey;
  unsigned int v8;
  void *v9;
  uint8_t *v10;
  NSObject *v11;
  unint64_t v12;
  const char *v13;
  UErrorCode pErrorCode[2];
  UChar dest[2];
  UChar32 src;
  uint8_t v17[4];
  UErrorCode v18;
  uint8_t buf[4];
  UChar32 v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a2)
    __assert_rtn("computeSortKey", "ICUCollatorWrapper.cpp", 73, "c != 0");
  src = a2;
  *(_QWORD *)pErrorCode = 0;
  u_strFromUTF32(dest, 2, (int32_t *)pErrorCode, &src, 1, &pErrorCode[1]);
  if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (qword_1EE417778 != -1)
      dispatch_once(&qword_1EE417778, &unk_1E3D16ED8);
    v6 = qword_1EE417770;
    if (os_log_type_enabled((os_log_t)qword_1EE417770, OS_LOG_TYPE_ERROR))
    {
      v13 = u_errorName(pErrorCode[1]);
      *(_DWORD *)buf = 67109378;
      v20 = a2;
      v21 = 2080;
      v22 = v13;
      _os_log_error_impl(&dword_19BF85000, v6, OS_LOG_TYPE_ERROR, "u_strFromUTF32 failed to convert %u (%s)", buf, 0x12u);
    }
    goto LABEL_7;
  }
  if (!*(_QWORD *)(a1 + 8))
  {
LABEL_7:
    *a3 = 0;
    return;
  }
  SortKey = ucol_getSortKey();
  v8 = SortKey;
  if (SortKey < 9)
  {
    v9 = 0;
    v10 = buf;
    if (!SortKey)
      goto LABEL_12;
LABEL_18:
    v12 = v8 - 1;
    if (v10[v12])
      __assert_rtn("computeSortKey", "ICUCollatorWrapper.cpp", 110, "keyBuffer[key_len - 1] == 0");
    sub_19BF8BC44((uint64_t)a3, v12, v10, v8 - 1);
    goto LABEL_20;
  }
  v9 = (void *)operator new[]();
  bzero(v9, v8);
  v8 = ucol_getSortKey();
  v10 = (uint8_t *)v9;
  if (v8)
    goto LABEL_18;
LABEL_12:
  if (qword_1EE417778 != -1)
    dispatch_once(&qword_1EE417778, &unk_1E3D16ED8);
  v11 = qword_1EE417770;
  if (os_log_type_enabled((os_log_t)qword_1EE417770, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v17 = 67109120;
    v18 = pErrorCode[0];
    _os_log_error_impl(&dword_19BF85000, v11, OS_LOG_TYPE_ERROR, "ucol_getSortKey failed compute collation key of string (len=%d)", v17, 8u);
  }
  *a3 = 0;
LABEL_20:
  if (v9)
    MEMORY[0x1A1AD0CB8](v9, 0x1000C8077774924);
}

void sub_19BFC3FD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CB8](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFC4010()
{
  uint64_t result;

  result = ucol_strcollUTF8();
  if ((result + 1) >= 3)
    __assert_rtn("compareInCollation", "ICUCollatorWrapper.cpp", 128, "false && \"invalid return value from ucol_strcollUTF8()\"");
  return result;
}

_QWORD *sub_19BFC40C0(_QWORD *a1)
{
  *a1 = off_1E3D11C28;
  sub_19BFACCEC((uint64_t)(a1 + 1));
  return a1;
}

void sub_19BFC40F0(_QWORD *a1)
{
  *a1 = off_1E3D11C28;
  sub_19BFACCEC((uint64_t)(a1 + 1));
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFC4130(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 < 0)
      sub_19BF8EB40();
    v4 = (char *)sub_19BFAED5C(a2);
    *a1 = v4;
    a1[2] = &v4[2 * v5];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_19BFC419C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19BFC41B8(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_19BF8EB40();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void sub_19BFC42E0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  sub_19BFC4DD4((const void **)(a1 + 136), 0);
  sub_19BFC0928((const void **)(a1 + 128), 0);
  v5 = (void **)(a1 + 104);
  sub_19BFC4E08(&v5);
  v5 = (void **)(a1 + 80);
  sub_19BFBF780(&v5);
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFC4380(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 14352);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3D18FC0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 14352) = -1;
  return a1;
}

uint64_t sub_19BFC43D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  sub_19BF87730(a2);
  sub_19BFACCEC(a2 + 14336);
  v3 = *(_QWORD *)(a2 + 14320);
  *(_QWORD *)(a2 + 14320) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 14312);
  *(_QWORD *)(a2 + 14312) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 12920) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 14272);
  if (v5 && *(_BYTE *)(a2 + 14270) == 1)
    free(v5);
  sub_19BF8769C(a2 + 14216);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v6)
    sub_19C014608(v6);
  result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t sub_19BFC448C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  sub_19C03F690(a2);
  sub_19BFACCEC(a2 + 1504);
  v3 = *(_QWORD *)(a2 + 1496);
  *(_QWORD *)(a2 + 1496) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 1488);
  *(_QWORD *)(a2 + 1488) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 112) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 1464);
  if (v5 && *(_BYTE *)(a2 + 1462) == 1)
    free(v5);
  sub_19BF8769C(a2 + 1408);
  *(_QWORD *)(a2 + 40) = &off_1E3D195E0;
  sub_19BFB1F54(*(char **)(a2 + 96));
  *(_QWORD *)(a2 + 48) = &off_1E3D196B8;
  *(_QWORD *)(a2 + 56) = &off_1E3D13868;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v6 = *(_QWORD *)(a2 + 80);
  if (v6)
  {
    MEMORY[0x1A1AD0CB8](v6, 0x1000C8052888210);
    *(_QWORD *)(a2 + 80) = 0;
  }
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v7)
    sub_19C014608(v7);
  result = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t sub_19BFC4580(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  sub_19C03F690(a2);
  sub_19BFACCEC(a2 + 1568);
  v3 = *(_QWORD *)(a2 + 1560);
  *(_QWORD *)(a2 + 1560) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 1552);
  *(_QWORD *)(a2 + 1552) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 176) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 1528);
  if (v5 && *(_BYTE *)(a2 + 1526) == 1)
    free(v5);
  sub_19BF8769C(a2 + 1472);
  *(_QWORD *)(a2 + 40) = &off_1E3D190A0;
  sub_19BFB1F54(*(char **)(a2 + 160));
  *(_QWORD *)(a2 + 48) = &off_1E3D19178;
  sub_19C00EC40(a2 + 56);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v6)
    sub_19C014608(v6);
  result = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t sub_19BFC4650(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  sub_19C03F690(a2);
  sub_19BFACCEC(a2 + 2072);
  v3 = *(_QWORD *)(a2 + 2064);
  *(_QWORD *)(a2 + 2064) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 2056);
  *(_QWORD *)(a2 + 2056) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 680) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 2032);
  if (v5 && *(_BYTE *)(a2 + 2030) == 1)
    free(v5);
  sub_19BF8769C(a2 + 1976);
  *(_QWORD *)(a2 + 40) = &off_1E3D19B20;
  sub_19BFB1F54(*(char **)(a2 + 664));
  sub_19BFFC558((_QWORD *)(a2 + 48));
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v6)
    sub_19C014608(v6);
  result = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t sub_19BFC4714(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  sub_19C03F690(a2);
  sub_19BFACCEC(a2 + 1528);
  v3 = *(_QWORD *)(a2 + 1520);
  *(_QWORD *)(a2 + 1520) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 1512);
  *(_QWORD *)(a2 + 1512) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 136) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 1488);
  if (v5 && *(_BYTE *)(a2 + 1486) == 1)
    free(v5);
  sub_19BF8769C(a2 + 1432);
  *(_QWORD *)(a2 + 40) = &off_1E3D11B60;
  sub_19BFB1F54(*(char **)(a2 + 120));
  sub_19BFF9220((_QWORD *)(a2 + 48));
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v6)
    sub_19C014608(v6);
  result = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t sub_19BFC47D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  sub_19C03F690(a2);
  sub_19BFACCEC(a2 + 1528);
  v3 = *(_QWORD *)(a2 + 1520);
  *(_QWORD *)(a2 + 1520) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 1512);
  *(_QWORD *)(a2 + 1512) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 136) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 1488);
  if (v5 && *(_BYTE *)(a2 + 1486) == 1)
    free(v5);
  sub_19BF8769C(a2 + 1432);
  *(_QWORD *)(a2 + 40) = &off_1E3D1A000;
  sub_19BFB1F54(*(char **)(a2 + 120));
  sub_19C007578((_QWORD *)(a2 + 48));
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v6)
    sub_19C014608(v6);
  result = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t sub_19BFC489C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  sub_19C03F690(a2);
  sub_19BFACCEC(a2 + 1512);
  v3 = *(_QWORD *)(a2 + 1504);
  *(_QWORD *)(a2 + 1504) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 1496);
  *(_QWORD *)(a2 + 1496) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 120) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 1472);
  if (v5 && *(_BYTE *)(a2 + 1470) == 1)
    free(v5);
  sub_19BF8769C(a2 + 1416);
  *(_QWORD *)(a2 + 40) = &off_1E3D1A280;
  sub_19BFB1F54(*(char **)(a2 + 104));
  *(_QWORD *)(a2 + 48) = &off_1E3D138D8;
  sub_19BFB7A04((uint64_t *)(a2 + 56));
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v6)
    sub_19C014608(v6);
  result = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t sub_19BFC496C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  sub_19C03F690(a2);
  sub_19BFACCEC(a2 + 1536);
  v3 = *(_QWORD *)(a2 + 1528);
  *(_QWORD *)(a2 + 1528) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 1520);
  *(_QWORD *)(a2 + 1520) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 144) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 1496);
  if (v5 && *(_BYTE *)(a2 + 1494) == 1)
    free(v5);
  sub_19BF8769C(a2 + 1440);
  *(_QWORD *)(a2 + 40) = &off_1E3D1A4D8;
  sub_19C00EC40(a2 + 48);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v6)
    sub_19C014608(v6);
  result = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t sub_19BFC4A28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  sub_19C03F690(a2);
  sub_19BFACCEC(a2 + 1472);
  v3 = *(_QWORD *)(a2 + 1464);
  *(_QWORD *)(a2 + 1464) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 1456);
  *(_QWORD *)(a2 + 1456) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 80) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 1432);
  if (v5 && *(_BYTE *)(a2 + 1430) == 1)
    free(v5);
  sub_19BF8769C(a2 + 1376);
  *(_QWORD *)(a2 + 40) = &off_1E3D1A698;
  *(_QWORD *)(a2 + 48) = &off_1E3D13868;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v6 = *(_QWORD *)(a2 + 72);
  if (v6)
  {
    MEMORY[0x1A1AD0CB8](v6, 0x1000C8052888210);
    *(_QWORD *)(a2 + 72) = 0;
  }
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v7)
    sub_19C014608(v7);
  result = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t sub_19BFC4B08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  sub_19C03F690(a2);
  sub_19BFACCEC(a2 + 2040);
  v3 = *(_QWORD *)(a2 + 2032);
  *(_QWORD *)(a2 + 2032) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 2024);
  *(_QWORD *)(a2 + 2024) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 648) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 2000);
  if (v5 && *(_BYTE *)(a2 + 1998) == 1)
    free(v5);
  sub_19BF8769C(a2 + 1944);
  sub_19C042ECC((_QWORD *)(a2 + 40));
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v6)
    sub_19C014608(v6);
  result = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t sub_19BFC4BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  sub_19C03F690(a2);
  sub_19BFACCEC(a2 + 1496);
  v3 = *(_QWORD *)(a2 + 1488);
  *(_QWORD *)(a2 + 1488) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 1480);
  *(_QWORD *)(a2 + 1480) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 104) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 1456);
  if (v5 && *(_BYTE *)(a2 + 1454) == 1)
    free(v5);
  sub_19BF8769C(a2 + 1400);
  sub_19C044FB4((_QWORD *)(a2 + 40));
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v6)
    sub_19C014608(v6);
  result = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t sub_19BFC4C68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  sub_19C03F690(a2);
  sub_19BFACCEC(a2 + 1496);
  v3 = *(_QWORD *)(a2 + 1488);
  *(_QWORD *)(a2 + 1488) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 1480);
  *(_QWORD *)(a2 + 1480) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 104) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 1456);
  if (v5 && *(_BYTE *)(a2 + 1454) == 1)
    free(v5);
  sub_19BF8769C(a2 + 1400);
  sub_19C045BD0((_QWORD *)(a2 + 40));
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v6)
    sub_19C014608(v6);
  result = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t sub_19BFC4D18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;

  sub_19C03F690(a2);
  sub_19BFACCEC(a2 + 1480);
  v3 = *(_QWORD *)(a2 + 1472);
  *(_QWORD *)(a2 + 1472) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a2 + 1464);
  *(_QWORD *)(a2 + 1464) = 0;
  if (v4)
    sub_19C022A84(v4);
  *(_QWORD *)(a2 + 88) = &off_1E3D146F0;
  v5 = *(void **)(a2 + 1440);
  if (v5 && *(_BYTE *)(a2 + 1438) == 1)
    free(v5);
  sub_19BF8769C(a2 + 1384);
  *(_QWORD *)(a2 + 40) = &off_1E3D17F58;
  sub_19BFB7A04((uint64_t *)(a2 + 48));
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v6)
    sub_19C014608(v6);
  result = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

void sub_19BFC4DD4(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_19BFC4E08(void ***a1)
{
  void **v1;
  unsigned __int16 *v2;
  unsigned __int16 *v4;
  void *v5;
  unsigned __int16 *v6;
  unsigned int v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (unsigned __int16 *)**a1;
  if (v2)
  {
    v4 = (unsigned __int16 *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (unsigned __int16 *)v1[1];
      do
      {
        v7 = *(v6 - 8);
        v6 -= 8;
        if (v7 >= 0xF)
        {
          v8 = *((_QWORD *)v4 - 1);
          if (v8)
            MEMORY[0x1A1AD0CB8](v8, 0x1000C8077774924);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19BFC4E9C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::exception::~exception);
}

double sub_19BFC4ED0(uint64_t a1, uint64_t a2)
{
  return sub_19BF87730(a2);
}

uint64_t sub_19BFC4ED8(uint64_t a1, uint64_t a2)
{
  return sub_19C03F690(a2);
}

uint64_t sub_19BFC4EE0(uint64_t a1, uint64_t a2)
{
  return sub_19C03F690(a2);
}

uint64_t sub_19BFC4EE8(uint64_t a1, uint64_t a2)
{
  return sub_19C03F690(a2);
}

uint64_t sub_19BFC4EF0(uint64_t a1, uint64_t a2)
{
  return sub_19C03F690(a2);
}

uint64_t sub_19BFC4EF8(uint64_t a1, uint64_t a2)
{
  return sub_19C03F690(a2);
}

uint64_t sub_19BFC4F00(uint64_t a1, uint64_t a2)
{
  return sub_19C03F690(a2);
}

uint64_t sub_19BFC4F08(uint64_t a1, uint64_t a2)
{
  return sub_19C03F690(a2);
}

uint64_t sub_19BFC4F10(uint64_t a1, uint64_t a2)
{
  return sub_19C03F690(a2);
}

uint64_t sub_19BFC4F18(uint64_t a1, uint64_t a2)
{
  return sub_19C03F690(a2);
}

uint64_t sub_19BFC4F20(uint64_t a1, uint64_t a2)
{
  return sub_19C03F690(a2);
}

uint64_t sub_19BFC4F28(uint64_t a1, uint64_t a2)
{
  return sub_19C03F690(a2);
}

uint64_t sub_19BFC4F30(uint64_t a1, uint64_t a2)
{
  return sub_19C03F690(a2);
}

uint64_t sub_19BFC4F3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v11;
  char *v12;

  v1 = *(unsigned int *)(a1 + 14352);
  if ((_DWORD)v1 == -1
    || (v12 = &v11,
        ((void (*)(char **, uint64_t))off_1E3D158F8[v1])(&v12, a1),
        v3 = *(unsigned int *)(a1 + 28712),
        (_DWORD)v3 == -1))
  {
    sub_19BFC4E9C();
  }
  v12 = &v11;
  ((void (*)(char **, uint64_t))off_1E3D158F8[v3])(&v12, a1 + 14360);
  sub_19BF8761C(a1 + 28744);
  v4 = *(std::__shared_weak_count **)(a1 + 28728);
  *(_OWORD *)(a1 + 28720) = 0u;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(_QWORD *)(a1 + 30120);
  *(_QWORD *)(a1 + 30120) = 0;
  if (v7)
    sub_19BFC42E0(v7);
  *(_QWORD *)(a1 + 30120) = 0;
  *(_QWORD *)(a1 + 28744) = &off_1E3D146F0;
  v8 = *(void **)(a1 + 30096);
  if (v8 && *(_BYTE *)(a1 + 30094) == 1)
    free(v8);
  sub_19BF8769C(a1 + 30040);
  v9 = *(_QWORD *)(a1 + 28736);
  *(_QWORD *)(a1 + 28736) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  sub_19BFACCEC(a1 + 28720);
  sub_19BFC4380(a1 + 14360);
  return sub_19BFC4380(a1);
}

uint64_t sub_19BFC50B4(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 14352);
  if ((_DWORD)v1 == -1)
    sub_19BFC4E9C();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_1E3D17560[v1])(&v4, a1);
}

double sub_19BFC50FC@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)(a2 + 20))
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 12904);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 14304);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 14308) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 14300);
  if (!v8)
    __assert_rtn("word_with_id", "TIWordTrie.cpp", 878, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 8);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  sub_19C02297C(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "TIWordTrie.cpp", 893, "result.word_id() == word_id");
  return result;
}

void sub_19BFC5298(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_19BFC52BC@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)a2)
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 20) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 654, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  result = sub_19C03AF24(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 670, "result.word_id() == word_id");
  return result;
}

void sub_19BFC5458(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_19BFC547C@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)a2)
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 20) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 654, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  result = sub_19C03B508(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 670, "result.word_id() == word_id");
  return result;
}

void sub_19BFC5618(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_19BFC563C@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)a2)
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 20) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 654, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  result = sub_19C03BAEC(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 670, "result.word_id() == word_id");
  return result;
}

void sub_19BFC57D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_19BFC57FC@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)a2)
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 20) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 654, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  result = sub_19C03C208(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 670, "result.word_id() == word_id");
  return result;
}

void sub_19BFC5998(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_19BFC59BC@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)a2)
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 20) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 654, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  result = sub_19C03C208(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 670, "result.word_id() == word_id");
  return result;
}

void sub_19BFC5B58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_19BFC5B7C@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)a2)
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 20) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 654, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  result = sub_19C03CBE0(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 670, "result.word_id() == word_id");
  return result;
}

void sub_19BFC5D18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_19BFC5D3C@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)a2)
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 20) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 654, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  result = sub_19C03D260(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 670, "result.word_id() == word_id");
  return result;
}

void sub_19BFC5ED8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_19BFC5EFC@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)a2)
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 20) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 654, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  result = sub_19C03D8D4(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 670, "result.word_id() == word_id");
  return result;
}

void sub_19BFC6098(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_19BFC60BC@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)a2)
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 20) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 654, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  result = sub_19C03DFF8(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 670, "result.word_id() == word_id");
  return result;
}

void sub_19BFC6258(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_19BFC627C@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)a2)
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 20) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 654, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  result = sub_19C03E9BC(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 670, "result.word_id() == word_id");
  return result;
}

void sub_19BFC6418(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_19BFC643C@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)a2)
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 20) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 654, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  result = sub_19C03E9BC(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 670, "result.word_id() == word_id");
  return result;
}

void sub_19BFC65D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_19BFC65FC@<D0>(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v16;
  double result;
  unsigned __int16 v20[10];
  int v21;

  if (!*(_BYTE *)a2)
    goto LABEL_31;
  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x10000) == 0)
    goto LABEL_31;
  v5 = **a1;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = v5 - v6;
  if (v5 < v6 || *(_DWORD *)(a2 + 20) + v6 <= v5)
    goto LABEL_31;
  v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 654, "m_word_id_map_offset > 0");
  if ((v4 & 0x20000) != 0)
    v9 = 4;
  else
    v9 = 3;
  v10 = (v8 + v7 * v9);
  v11 = *(uint64_t **)(a2 + 24);
  v12 = *v11;
  v13 = v11[1];
  if ((v4 & 0x20000) != 0)
  {
    if (v13 >= v10)
    {
      if (v10 + 4 > v13 && v13 != 0 || v12 == 0)
        goto LABEL_31;
      v16 = bswap32(*(_DWORD *)(v12 + v10));
      goto LABEL_28;
    }
LABEL_34:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
  if (v13 < v10)
    goto LABEL_34;
  if (v10 + 3 > v13 && v13 != 0 || v12 == 0)
    goto LABEL_31;
  v16 = (*(unsigned __int8 *)(v12 + v10) << 16) | (*(unsigned __int8 *)(v12 + v10 + 1) << 8) | *(unsigned __int8 *)(v12 + v10 + 2);
LABEL_28:
  if (!v16)
  {
LABEL_31:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_WORD *)(a3 + 2) = 16;
    *(_BYTE *)(a3 + 6) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 37) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a3 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a3 + 76) = 0;
    return result;
  }
  v20[0] = 0;
  result = sub_19C03F5C0(a3, a2, v16, &v21, v20);
  if (*(_DWORD *)(a3 + 60) != v5)
    __assert_rtn("word_with_id", "LXWordTrie.cpp", 670, "result.word_id() == word_id");
  return result;
}

void sub_19BFC6798(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFC67BC(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 20);
}

uint64_t sub_19BFC67C4(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_19BFC67CC(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_19BFC67D4(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_19BFC67DC(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_19BFC67E4(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_19BFC67EC(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_19BFC67F4(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_19BFC67FC(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_19BFC6804(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_19BFC680C(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_19BFC6814(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_19BFC681C(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t sub_19BFC6824(unsigned __int16 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v11;
  unsigned __int8 *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void ***v30;
  uint64_t v31;
  __int128 v32;
  uint64_t j;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[2];
  void *v61[2];
  int v62;
  int v63;
  void **v64;
  void ***v65;
  _BYTE v66[24];
  _OWORD *v67;
  uint64_t v68;

  v5 = a4;
  v68 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    v46 = *(unsigned int *)(a4 + 14352);
    if ((_DWORD)v46 != -1)
    {
      v61[0] = v60;
      ((void (*)(void ****__return_ptr, void **, uint64_t))off_1E3D174F8[v46])(&v65, v61, a4);
      v61[0] = &v65;
      v61[1] = a2;
      v62 = 0;
      v47 = *(unsigned int *)(v5 + 14352);
      if ((_DWORD)v47 == -1
        || (*(_QWORD *)&v60[0] = v61,
            ((void (*)(_OWORD *, uint64_t))off_1E3D17030[v47])(v60, v5),
            (_DWORD)v67 == -1))
      {
        sub_19BFC4E9C();
      }
      v61[0] = v60;
      if (((unsigned int (*)(void **, void ****))off_1E3D179D8[v67])(v61, &v65))
        v39 = sub_19BFC7120(a1, (void **)&v65, a2, v5);
      else
        v39 = 0;
      v48 = (void **)&v65;
      goto LABEL_88;
    }
LABEL_93:
    sub_19BFC4E9C();
  }
  v8 = *(unsigned int *)(a4 + 14352);
  if ((_DWORD)v8 == -1)
    goto LABEL_93;
  v65 = (void ***)v60;
  ((void (*)(void **__return_ptr, void ****, uint64_t))off_1E3D174F8[v8])(v61, &v65, a4);
  v50 = (unsigned __int16 *)a2;
  v51 = a1;
  memset(v60, 0, 24);
  v11 = *(unsigned __int16 *)a2;
  if (v11 <= 0xE)
    v12 = a2 + 2;
  else
    v12 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if (*(_WORD *)a2)
  {
    v13 = 0;
    v52 = &v12[v11];
    v53 = v5;
    do
    {
      v14 = *v12;
      v15 = *((_QWORD *)&v60[0] + 1);
      v16 = *(_QWORD *)&v60[0];
      if (*(_QWORD *)&v60[0] != *((_QWORD *)&v60[0] + 1))
      {
        do
        {
          sub_19C01D9B8(v16, a3, v14);
          v16 += 96;
        }
        while (v16 != v15);
        v17 = *((_QWORD *)&v60[0] + 1);
        v16 = *(_QWORD *)&v60[0];
        if (*(_QWORD *)&v60[0] != *((_QWORD *)&v60[0] + 1))
        {
          while (sub_19C01DA50(v16))
          {
            v16 += 96;
            if (v16 == v17)
            {
              v16 = v17;
              goto LABEL_20;
            }
          }
          if (v16 != v17)
          {
            for (i = v16 + 96; i != v17; i += 96)
            {
              if (sub_19C01DA50(i))
              {
                sub_19C01C134(v16, i);
                v16 += 96;
              }
            }
          }
        }
      }
LABEL_20:
      v19 = *((_QWORD *)&v60[0] + 1);
      if (v16 != *((_QWORD *)&v60[0] + 1))
      {
        while (v19 != v16)
        {
          v19 -= 96;
          sub_19BFC7E54(v19);
        }
        *((_QWORD *)&v60[0] + 1) = v16;
      }
      v5 = v53;
      if (v63 == -1)
        goto LABEL_89;
      v65 = &v56;
      if (((unsigned int (*)(void ****, void **))off_1E3D179D8[v63])(&v65, v61))
      {
        v65 = (void ***)v61;
        v66[0] = v14;
        v20 = *(unsigned int *)(v53 + 14352);
        if ((_DWORD)v20 == -1)
          goto LABEL_89;
        v56 = (void **)&v65;
        ((void (*)(void ***, uint64_t))off_1E3D178A0[v20])(&v56, v53);
      }
      v56 = v61;
      v21 = *(unsigned int *)(v53 + 14352);
      if ((_DWORD)v21 == -1)
LABEL_89:
        sub_19BFC4E9C();
      v65 = &v56;
      ++v13;
      if (((unsigned int (*)(void ****, uint64_t))off_1E3D177D0[v21])(&v65, v53))
      {
        LOWORD(v56) = 1;
        BYTE2(v56) = 32;
        v65 = (void ***)v61;
        *(_QWORD *)v66 = &v56;
        v22 = *(unsigned int *)(v53 + 14352);
        if ((_DWORD)v22 == -1)
          sub_19BFC4E9C();
        v64 = (void **)&v65;
        ((void (*)(uint64_t *__return_ptr, void ***, uint64_t))off_1E3D17838[v22])(&v58, &v64, v53);
        if ((unsigned __int16)v56 >= 0xFu && v57)
          MEMORY[0x1A1AD0CB8](v57, 0x1000C8077774924);
        v24 = v58;
        v23 = v59;
        if (v58 != v59)
        {
          v54 = v59;
          do
          {
            LODWORD(v64) = 0;
            if (sub_19BFE99DC(a5, *(_DWORD *)(v24 + 60), &v64, 0))
            {
              sub_19BFE9B58((uint64_t)&v56, (uint64_t)a5, (int)v64);
              if ((_WORD)v56)
              {
                v25 = *((_QWORD *)&v60[0] + 1);
                if (*((_QWORD *)&v60[0] + 1) >= *(_QWORD *)&v60[1])
                {
                  v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v60[0] + 1) - *(_QWORD *)&v60[0]) >> 5);
                  v28 = v27 + 1;
                  if (v27 + 1 > 0x2AAAAAAAAAAAAAALL)
                    sub_19BF8EB40();
                  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v60[1] - *(_QWORD *)&v60[0]) >> 5) > v28)
                    v28 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v60[1] - *(_QWORD *)&v60[0]) >> 5);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v60[1] - *(_QWORD *)&v60[0]) >> 5) >= 0x155555555555555)
                    v29 = 0x2AAAAAAAAAAAAAALL;
                  else
                    v29 = v28;
                  v67 = &v60[1];
                  if (v29)
                  {
                    if (v29 > 0x2AAAAAAAAAAAAAALL)
                      sub_19BF8E6D0();
                    v30 = (void ***)operator new(96 * v29);
                  }
                  else
                  {
                    v30 = 0;
                  }
                  v65 = v30;
                  *(_QWORD *)v66 = &v30[12 * v27];
                  *(_QWORD *)&v66[8] = *(_QWORD *)v66;
                  *(_QWORD *)&v66[16] = &v30[12 * v29];
                  sub_19C01BF14(*(uint64_t *)v66, a3, (uint64_t)v61, v13, 0, (uint64_t)&v56, 0.0);
                  v31 = *(_QWORD *)v66;
                  *(_QWORD *)&v66[8] += 96;
                  v32 = v60[0];
                  for (j = 96; ; j -= 96)
                  {
                    v34 = v31 + j;
                    if (*((_QWORD *)&v32 + 1) + j - 96 == (_QWORD)v32)
                      break;
                    v35 = *((_QWORD *)&v32 + 1) + j - 192;
                    sub_19C01C034(v34 - 192, v35);
                  }
                  v36 = *(_QWORD *)&v60[1];
                  v55 = *(_QWORD *)&v66[8];
                  v37 = *(_OWORD *)&v66[8];
                  v38 = v60[0];
                  *(_QWORD *)&v60[0] = v34 - 96;
                  *(_OWORD *)v66 = v38;
                  *(_OWORD *)((char *)v60 + 8) = v37;
                  *(_QWORD *)&v66[16] = v36;
                  v65 = (void ***)v38;
                  sub_19BFC7EE4((uint64_t)&v65);
                  v26 = v55;
                  v23 = v54;
                }
                else
                {
                  sub_19C01BF14(*((uint64_t *)&v60[0] + 1), a3, (uint64_t)v61, v13, 0, (uint64_t)&v56, 0.0);
                  v26 = v25 + 96;
                }
                *((_QWORD *)&v60[0] + 1) = v26;
                if ((unsigned __int16)v56 >= 0xFu && v57)
                  MEMORY[0x1A1AD0CB8](v57, 0x1000C8077774924);
              }
            }
            v24 += 88;
          }
          while (v24 != v23);
        }
        v65 = (void ***)&v58;
        sub_19BFC70A0((void ***)&v65);
        v5 = v53;
      }
      ++v12;
    }
    while (v12 != v52);
  }
  if (v63 == -1)
    sub_19BFC4E9C();
  v65 = &v56;
  if (!((unsigned int (*)(void ****, void **))off_1E3D179D8[v63])(&v65, v61)
    || (v39 = sub_19BFC7120(v51, v61, v50, v5), !(_DWORD)v39))
  {
    v40 = *((_QWORD *)&v60[0] + 1);
    v41 = *(_QWORD *)&v60[0];
    if (*(_QWORD *)&v60[0] == *((_QWORD *)&v60[0] + 1))
    {
LABEL_78:
      v39 = 0;
    }
    else
    {
      while ((sub_19C01DA50(v41) & 1) == 0)
      {
LABEL_77:
        v41 += 96;
        if (v41 == v40)
          goto LABEL_78;
      }
      sub_19C01F780(&v58, v41, a3, v50);
      v42 = v58;
      v43 = v59;
      while (1)
      {
        if (v42 == v43)
        {
          v65 = (void ***)&v58;
          sub_19BFC70A0((void ***)&v65);
          goto LABEL_77;
        }
        sub_19BFD54EC((uint64_t)&v65, (unsigned __int16 *)v42);
        v44 = sub_19BFF7920((unsigned __int16 *)&v65, v51);
        if (*(_QWORD *)v66 && BYTE6(v65) == 1)
          free(*(void **)v66);
        if (v44)
          break;
        v42 += 88;
      }
      v39 = *(unsigned int *)(v42 + 60);
      v65 = (void ***)&v58;
      sub_19BFC70A0((void ***)&v65);
    }
  }
  v65 = (void ***)v60;
  sub_19BFC7240((void ***)&v65);
  v48 = v61;
LABEL_88:
  sub_19BFC72B0((uint64_t)v48);
  return v39;
}

void sub_19BFC6F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  a20 = (void **)&a23;
  sub_19BFC7240(&a20);
  sub_19BFC72B0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_19BFC70A0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 10);
        if (v6)
        {
          if (*(v4 - 82) == 1)
            free(v6);
        }
        v4 -= 88;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_19BFC7120(unsigned __int16 *a1, void **a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v10;
  _QWORD v12[3];
  void ***v13;
  void **v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v15 = a3;
  v4 = *(unsigned int *)(a4 + 14352);
  if ((_DWORD)v4 == -1)
    sub_19BFC4E9C();
  v13 = &v14;
  ((void (*)(_QWORD *__return_ptr, void ****, uint64_t))off_1E3D17838[v4])(v12, &v13, a4);
  v6 = v12[0];
  v7 = v12[1];
  while (1)
  {
    if (v6 == v7)
    {
      v10 = 0;
      goto LABEL_14;
    }
    sub_19BFD54EC((uint64_t)&v14, (unsigned __int16 *)v6);
    v8 = sub_19BFF7920((unsigned __int16 *)&v14, a1);
    if (v15 && BYTE6(v14) == 1)
      free(v15);
    if (v8)
      break;
    v6 += 88;
  }
  v10 = *(unsigned int *)(v6 + 60);
LABEL_14:
  v14 = (void **)v12;
  sub_19BFC70A0(&v14);
  return v10;
}

void sub_19BFC721C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

void sub_19BFC7240(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_19BFC7E54(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_19BFC72B0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3D18DB8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

float sub_19BFC7308(unsigned int ***a1, uint64_t **a2)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  unsigned __int16 *v9;
  float v10;

  v2 = *a1;
  v3 = **a1;
  if (v3[8])
    sub_19BFC4E9C();
  v4 = v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *(unsigned __int16 *)v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "TIWordTrie.cpp", 220, "from_depth <= to_depth");
  v7 = 1.0;
  if ((*(char *)v3 & 0x80000000) == 0 && (int)v5 < (int)v6)
  {
    do
    {
      if (*(unsigned __int16 *)v4 <= 0xEu)
        v9 = (unsigned __int16 *)v4 + 1;
      else
        v9 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      sub_19C022208(v3, a2, *((unsigned __int8 *)v9 + v5));
      v7 = v7 * v10;
      if (*(char *)v3 < 0)
        break;
      ++v5;
    }
    while (v5 < v6);
  }
  return v7;
}

float sub_19BFC73D8(unsigned int ***a1, uint64_t a2)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  float i;
  unsigned __int16 *v10;
  float v11;

  v2 = *a1;
  v3 = **a1;
  if (v3[8] != 1)
    sub_19BFC4E9C();
  v4 = v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *(unsigned __int16 *)v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "LXWordTrie.cpp", 71, "from_depth <= to_depth");
  for (i = 1.0; *(_QWORD *)v3 != -1 && v5 < v6; ++v5)
  {
    if (*(unsigned __int16 *)v4 <= 0xEu)
      v10 = (unsigned __int16 *)v4 + 1;
    else
      v10 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
    sub_19C03AC44(v3, a2, *((unsigned __int8 *)v10 + v5));
    i = i * v11;
  }
  return i;
}

float sub_19BFC74AC(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  float i;
  unsigned __int16 *v10;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 2)
    sub_19BFC4E9C();
  v4 = (unsigned __int16 *)v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "LXWordTrie.cpp", 71, "from_depth <= to_depth");
  for (i = 1.0; *(_QWORD *)v3 != -1 && v5 < v6; i = i * sub_19C03B210((uint64_t *)v3, a2, *((_BYTE *)v10 + v5++)))
  {
    if (*v4 <= 0xEu)
      v10 = v4 + 1;
    else
      v10 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
  }
  return i;
}

float sub_19BFC7580(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  float i;
  unsigned __int16 *v10;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 3)
    sub_19BFC4E9C();
  v4 = (unsigned __int16 *)v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "LXWordTrie.cpp", 71, "from_depth <= to_depth");
  for (i = 1.0; *(_QWORD *)v3 != -1 && v5 < v6; i = i
                                                     * sub_19C03B7F4((unint64_t *)v3, a2, *((_BYTE *)v10 + v5++)))
  {
    if (*v4 <= 0xEu)
      v10 = v4 + 1;
    else
      v10 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
  }
  return i;
}

float sub_19BFC7654(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  float i;
  unsigned __int16 *v10;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 4)
    sub_19BFC4E9C();
  v4 = (unsigned __int16 *)v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "LXWordTrie.cpp", 71, "from_depth <= to_depth");
  for (i = 1.0; *(_QWORD *)v3 != 0xFFFFFFFFLL && v5 < v6; i = i * sub_19C03BD64(v3, a2, *((_BYTE *)v10 + v5++)))
  {
    if (*v4 <= 0xEu)
      v10 = v4 + 1;
    else
      v10 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
  }
  return i;
}

float sub_19BFC7738(unsigned int ***a1, uint64_t a2)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  float i;
  unsigned __int16 *v10;
  float v11;

  v2 = *a1;
  v3 = **a1;
  if (v3[8] != 5)
    sub_19BFC4E9C();
  v4 = v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *(unsigned __int16 *)v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "LXWordTrie.cpp", 71, "from_depth <= to_depth");
  for (i = 1.0; *(_QWORD *)v3 != -1 && v5 < v6; ++v5)
  {
    if (*(unsigned __int16 *)v4 <= 0xEu)
      v10 = (unsigned __int16 *)v4 + 1;
    else
      v10 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
    sub_19C03AC44(v3, a2, *((unsigned __int8 *)v10 + v5));
    i = i * v11;
  }
  return i;
}

float sub_19BFC780C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  float i;
  unsigned __int16 *v10;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 6)
    sub_19BFC4E9C();
  v4 = (unsigned __int16 *)v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "LXWordTrie.cpp", 71, "from_depth <= to_depth");
  for (i = 1.0; *(_DWORD *)(v3 + 12) != -1 && v5 < v6; i = i * sub_19C03C8E4(v3, a2, *((_BYTE *)v10 + v5++)))
  {
    if (*v4 <= 0xEu)
      v10 = v4 + 1;
    else
      v10 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
  }
  return i;
}

float sub_19BFC78E0(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  float i;
  unsigned __int16 *v10;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 7)
    sub_19BFC4E9C();
  v4 = (unsigned __int16 *)v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "LXWordTrie.cpp", 71, "from_depth <= to_depth");
  for (i = 1.0; *(_QWORD *)v3 != -1 && v5 < v6; ++v5)
  {
    if (*v4 <= 0xEu)
      v10 = v4 + 1;
    else
      v10 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
    sub_19C03CECC((uint64_t *)v3, a2, *((_BYTE *)v10 + v5));
    i = i * 0.0;
  }
  return i;
}

float sub_19BFC79B8(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  float i;
  unsigned __int16 *v10;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 8)
    sub_19BFC4E9C();
  v4 = (unsigned __int16 *)v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "LXWordTrie.cpp", 71, "from_depth <= to_depth");
  for (i = 1.0; *(_QWORD *)v3 != -1 && v5 < v6; ++v5)
  {
    if (*v4 <= 0xEu)
      v10 = v4 + 1;
    else
      v10 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
    sub_19C03D554((_QWORD *)v3, *(_QWORD *)(a2 + 64), *((unsigned __int8 *)v10 + v5));
    i = i * 0.0;
  }
  return i;
}

float sub_19BFC7A90(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  float i;
  unsigned __int16 *v10;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 9)
    sub_19BFC4E9C();
  v4 = (unsigned __int16 *)v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "LXWordTrie.cpp", 71, "from_depth <= to_depth");
  for (i = 1.0; *(_QWORD *)v3 != -1 && v5 < v6; ++v5)
  {
    if (*v4 <= 0xEu)
      v10 = v4 + 1;
    else
      v10 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
    sub_19C03DBC0((unint64_t *)v3, a2, *((_BYTE *)v10 + v5));
    i = i * 0.0;
  }
  return i;
}

float sub_19BFC7B68(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  float i;
  unsigned __int16 *v10;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 10)
    sub_19BFC4E9C();
  v4 = (unsigned __int16 *)v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "LXWordTrie.cpp", 71, "from_depth <= to_depth");
  for (i = 1.0; *(_QWORD *)v3 != 0xFFFFFFFFLL && v5 < v6; ++v5)
  {
    if (*v4 <= 0xEu)
      v10 = v4 + 1;
    else
      v10 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
    sub_19C03E364((uint64_t *)v3, a2, *((_BYTE *)v10 + v5));
    i = i * 0.0;
  }
  return i;
}

float sub_19BFC7C50(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  float i;
  unsigned __int16 *v10;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 11)
    sub_19BFC4E9C();
  v4 = (unsigned __int16 *)v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "LXWordTrie.cpp", 71, "from_depth <= to_depth");
  for (i = 1.0; *(_QWORD *)v3 != -1 && v5 < v6; ++v5)
  {
    if (*v4 <= 0xEu)
      v10 = v4 + 1;
    else
      v10 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
    sub_19C03D554((_QWORD *)v3, *(_QWORD *)(a2 + 64), *((unsigned __int8 *)v10 + v5));
    i = i * 0.0;
  }
  return i;
}

float sub_19BFC7D28(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  float i;
  unsigned __int16 *v10;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 12)
    sub_19BFC4E9C();
  v4 = (unsigned __int16 *)v2[1];
  v5 = *((int *)v2 + 4);
  v6 = *v4;
  if ((int)v5 > (int)v6)
    __assert_rtn("advance_to_sort_key", "LXWordTrie.cpp", 71, "from_depth <= to_depth");
  for (i = 1.0; *(_DWORD *)(v3 + 12) != -1 && v5 < v6; ++v5)
  {
    if (*v4 <= 0xEu)
      v10 = v4 + 1;
    else
      v10 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
    sub_19C03F14C(v3, a2, *((_BYTE *)v10 + v5));
    i = i * 0.0;
  }
  return i;
}

void sub_19BFC7E10(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void sub_19BFC7E38(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

uint64_t sub_19BFC7E54(uint64_t a1)
{
  sub_19BFC7E88((uint64_t *)(a1 + 80), 0);
  sub_19BFC72B0(a1 + 40);
  return sub_19BFC72B0(a1);
}

uint64_t *sub_19BFC7E88(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_19BFC7E88(v2 + 80, 0);
    sub_19BFC72B0(v2 + 40);
    sub_19BFC72B0(v2);
    JUMPOUT(0x1A1AD0CDCLL);
  }
  return result;
}

uint64_t sub_19BFC7EE4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    sub_19BFC7E54(i - 96);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19BFC7F30(char ***a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char *v4;
  unsigned __int16 *v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  float v11;
  float v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  unsigned int v28;
  char v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  unsigned __int16 v35[3];
  char v36;
  void *v37;
  unsigned __int16 v38[3];
  char v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (*((_DWORD *)v4 + 8))
    sub_19BFC4E9C();
  if (!*(_BYTE *)(a2 + 20))
    goto LABEL_6;
  if (*v4 < 0)
    goto LABEL_6;
  v6 = (unsigned __int16 *)(*a1)[1];
  if (!*v6)
    goto LABEL_6;
  v7 = *((_DWORD *)v4 + 2);
  if ((HIBYTE(v7) & 3) > *v4)
    goto LABEL_6;
  if (*v4)
    v8 = 0;
  else
    v8 = v7 == 0;
  if (v8)
  {
    if (!v4[24])
      __assert_rtn("derive_words_at_cursor", "TIWordTrie.cpp", 788, "!cursor.is_root()");
  }
  else
  {
    if ((v7 & 0x20000000) != 0)
    {
      v9 = *((_DWORD *)v4 + 4) & 0x7FFFFFFF;
      if (v9)
      {
        v10 = 0;
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        v28 = v9;
        v11 = 0.0;
        do
        {
          sub_19C02297C((uint64_t)v38, a2, v9, (int *)&v28, v6);
          v12 = *(float *)&v41;
          if (v38[0])
          {
            v13 = a3[1];
            if (v13 >= a3[2])
            {
              v17 = sub_19BFCE284(a3, (uint64_t)v38);
            }
            else
            {
              sub_19BF86B60(a3[1], v38);
              v15 = v42;
              v14 = v43;
              v16 = v41;
              *(_WORD *)(v13 + 80) = v44;
              *(_OWORD *)(v13 + 48) = v15;
              *(_OWORD *)(v13 + 64) = v14;
              *(_OWORD *)(v13 + 32) = v16;
              v17 = v13 + 88;
              a3[1] = v13 + 88;
            }
            a3[1] = v17;
          }
          if (v40)
            v18 = v39 == 1;
          else
            v18 = 0;
          if (v18)
            free(v40);
          v11 = v11 + v12;
          v9 = v28;
          if (!v28)
            break;
        }
        while (v10++ < 0xFF);
        v20 = *a3;
        v21 = a3[1];
        v22 = v21 - *a3;
        if (v22 == 88)
        {
          *(_DWORD *)(v20 + 32) = 1065353216;
        }
        else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v22 >> 3)) >= 2)
        {
          if (v11 <= 0.0)
            __assert_rtn("derive_words_at_offset", "TIWordTrie.cpp", 855, "termination_prob > 0");
          while (v20 != v21)
          {
            *(float *)(v20 + 32) = *(float *)(v20 + 32) / v11;
            v20 += 88;
          }
        }
        return;
      }
    }
    if ((v7 & 0x10000000) != 0)
      goto LABEL_37;
    if ((v7 & 0xFFFFFF) != 0)
    {
LABEL_6:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
  }
  if (!v4[20])
    goto LABEL_6;
LABEL_37:
  sub_19C016B04((uint64_t)v35, a2 + 12920, v6);
  if (!v35[0])
    __assert_rtn("derive_words_at_cursor", "TIWordTrie.cpp", 798, "!derived_base_form.is_empty()");
  sub_19BF86B60((uint64_t)v38, v35);
  BYTE4(v41) = 0;
  *(_QWORD *)((char *)&v41 + 5) = 0;
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0xFFFFFFFFLL;
  BYTE8(v43) = 0;
  HIDWORD(v43) = 0;
  v44 = 0;
  LODWORD(v41) = 1065353216;
  if ((*(_BYTE *)(a2 + 12906) & 1) == 0)
    goto LABEL_56;
  v23 = *((_DWORD *)v4 + 2);
  if ((v23 & 0xFFFFFF) == 0)
  {
    v25 = *((_QWORD *)v4 + 2);
    if ((v23 & 0x10000000) == 0)
    {
      v24 = 0;
      if ((v25 & 0xFF00000000) == 0)
        goto LABEL_55;
    }
    goto LABEL_46;
  }
  if ((v23 & 0x10000000) != 0)
  {
    LODWORD(v25) = *((_DWORD *)v4 + 4);
LABEL_46:
    if ((v25 & 0x8000) != 0)
      v24 = v25 & 0x7F00 | BYTE2(v25);
    else
      v24 = BYTE1(v25);
    goto LABEL_55;
  }
  v24 = 0;
LABEL_55:
  HIDWORD(v42) = v24;
LABEL_56:
  sub_19BF86B60((uint64_t)&v28, v38);
  v31 = v41;
  v32 = v42;
  v33 = v43;
  v34 = v44;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v26 = operator new(0x58uLL);
  *a3 = (uint64_t)v26;
  a3[1] = (uint64_t)v26;
  a3[2] = (uint64_t)v26 + 88;
  sub_19BF86B60((uint64_t)v26, (unsigned __int16 *)&v28);
  v27 = v32;
  v26[2] = v31;
  v26[3] = v27;
  v26[4] = v33;
  *((_WORD *)v26 + 40) = v34;
  a3[1] = (uint64_t)v26 + 88;
  if (v30 && v29 == 1)
    free(v30);
  if (v40 && v39 == 1)
    free(v40);
  if (v37 && v36 == 1)
    free(v37);
}

void sub_19BFC8328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)(v32 + 8) = v33;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  if (a32 && BYTE6(a31) == 1)
    free(a32);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

void sub_19BFC83F0(unsigned int ***a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v4;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v9;
  int v10;
  unsigned int v11;
  float v12;
  float v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  unsigned int v26;
  char v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;
  unsigned __int16 v33[3];
  char v34;
  void *v35;
  int v36;
  char v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (v4[8] != 1)
    sub_19BFC4E9C();
  v6 = (unsigned __int16 *)(*a1)[1];
  if (*a2)
    v7 = *(_QWORD *)v4 == -1;
  else
    v7 = 1;
  if (v7 || *v6 == 0)
    goto LABEL_11;
  v36 = 0;
  if (!sub_19C008564((_QWORD *)a2 + 6, v4, &v36) || (~v36 & 0x7FFFFF) == 0)
    goto LABEL_11;
  if (!*(_QWORD *)v4)
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 531, "!cursor.is_root()");
  if ((v36 & 0x400000) != 0 || (v9 = v36 & 0x1FFFFF, (v36 & 0x1FFFFF) == 0))
  {
    if ((v36 & 0x400000) == 0 && (sub_19C03AA9C((uint64_t)(a2 + 40), (uint64_t)v4) & 1) != 0)
    {
LABEL_11:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    sub_19C016B04((uint64_t)v33, (uint64_t)(a2 + 112), v6);
    if (!v33[0])
      __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 542, "!derived_base_form.is_empty()");
    sub_19BF86B60((uint64_t)&v36, v33);
    BYTE4(v39) = 0;
    *(_QWORD *)((char *)&v39 + 5) = 0;
    v40 = 0uLL;
    *(_QWORD *)&v41 = 0xFFFFFFFFLL;
    BYTE8(v41) = 0;
    HIDWORD(v41) = 0;
    v42 = 0;
    LODWORD(v39) = 1065353216;
    if ((a2[6] & 1) != 0)
      HIDWORD(v40) = -1;
    sub_19BF86B60((uint64_t)&v26, (unsigned __int16 *)&v36);
    v29 = v39;
    v30 = v40;
    v31 = v41;
    v32 = v42;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v24 = operator new(0x58uLL);
    *a3 = (uint64_t)v24;
    a3[1] = (uint64_t)v24;
    a3[2] = (uint64_t)v24 + 88;
    sub_19BF86B60((uint64_t)v24, (unsigned __int16 *)&v26);
    v25 = v30;
    v24[2] = v29;
    v24[3] = v25;
    v24[4] = v31;
    *((_WORD *)v24 + 40) = v32;
    a3[1] = (uint64_t)v24 + 88;
    if (v28 && v27 == 1)
      free(v28);
    if (v38 && v37 == 1)
      free(v38);
    if (v35 && v34 == 1)
      free(v35);
  }
  else
  {
    v10 = *a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v10)
    {
      v11 = 0;
      v26 = v9;
      v12 = 0.0;
      do
      {
        sub_19C03AF24((uint64_t)&v36, (uint64_t)a2, v9, (int *)&v26, v6);
        v13 = *(float *)&v39;
        if ((_WORD)v36)
        {
          v14 = a3[1];
          if (v14 >= a3[2])
          {
            v18 = sub_19BFCE284(a3, (uint64_t)&v36);
          }
          else
          {
            sub_19BF86B60(a3[1], (unsigned __int16 *)&v36);
            v16 = v40;
            v15 = v41;
            v17 = v39;
            *(_WORD *)(v14 + 80) = v42;
            *(_OWORD *)(v14 + 48) = v16;
            *(_OWORD *)(v14 + 64) = v15;
            *(_OWORD *)(v14 + 32) = v17;
            v18 = v14 + 88;
            a3[1] = v14 + 88;
          }
          a3[1] = v18;
        }
        if (v38)
          v19 = v37 == 1;
        else
          v19 = 0;
        if (v19)
          free(v38);
        v12 = v12 + v13;
        v9 = v26;
        if (!v26)
          break;
      }
      while (v11++ < 0xFF);
      v21 = *a3;
      v22 = a3[1];
      v23 = v22 - *a3;
      if (v23 == 88)
      {
        *(_DWORD *)(v21 + 32) = 1065353216;
      }
      else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v23 >> 3)) >= 2)
      {
        if (v12 <= 0.0)
          __assert_rtn("derive_words_at_offset", "LXWordTrie.cpp", 616, "termination_prob > 0");
        while (v21 != v22)
        {
          *(float *)(v21 + 32) = *(float *)(v21 + 32) / v12;
          v21 += 88;
        }
      }
    }
  }
}

void sub_19BFC87AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)(v32 + 8) = v33;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  if (a32 && BYTE6(a31) == 1)
    free(a32);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

void sub_19BFC8874(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v9;
  int v10;
  unsigned int v11;
  float v12;
  float v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  unsigned int v26;
  char v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;
  unsigned __int16 v33[3];
  char v34;
  void *v35;
  unsigned __int16 v36[3];
  char v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (*(_DWORD *)(v4 + 32) != 2)
    sub_19BFC4E9C();
  v6 = (unsigned __int16 *)(*a1)[1];
  if (*(_BYTE *)a2)
    v7 = *(_QWORD *)v4 == -1;
  else
    v7 = 1;
  if (v7 || *v6 == 0)
    goto LABEL_11;
  *(_DWORD *)v36 = 0;
  if (!sub_19C00FBB0(a2 + 6, (uint64_t *)v4, v36) || (~*(_DWORD *)v36 & 0x7FFFFF) == 0)
    goto LABEL_11;
  if (!*(_QWORD *)v4)
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 531, "!cursor.is_root()");
  if ((*(_DWORD *)v36 & 0x400000) != 0 || (v9 = *(_DWORD *)v36 & 0x1FFFFF, (*(_DWORD *)v36 & 0x1FFFFF) == 0))
  {
    if ((*(_DWORD *)v36 & 0x400000) == 0 && (sub_19C03B068((uint64_t)(a2 + 5), v4) & 1) != 0)
    {
LABEL_11:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    sub_19C016B04((uint64_t)v33, (uint64_t)(a2 + 22), v6);
    if (!v33[0])
      __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 542, "!derived_base_form.is_empty()");
    sub_19BF86B60((uint64_t)v36, v33);
    BYTE4(v39) = 0;
    *(_QWORD *)((char *)&v39 + 5) = 0;
    v40 = 0uLL;
    *(_QWORD *)&v41 = 0xFFFFFFFFLL;
    BYTE8(v41) = 0;
    HIDWORD(v41) = 0;
    v42 = 0;
    LODWORD(v39) = 1065353216;
    if ((*((_BYTE *)a2 + 6) & 1) != 0)
      HIDWORD(v40) = -1;
    sub_19BF86B60((uint64_t)&v26, v36);
    v29 = v39;
    v30 = v40;
    v31 = v41;
    v32 = v42;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v24 = operator new(0x58uLL);
    *a3 = (uint64_t)v24;
    a3[1] = (uint64_t)v24;
    a3[2] = (uint64_t)v24 + 88;
    sub_19BF86B60((uint64_t)v24, (unsigned __int16 *)&v26);
    v25 = v30;
    v24[2] = v29;
    v24[3] = v25;
    v24[4] = v31;
    *((_WORD *)v24 + 40) = v32;
    a3[1] = (uint64_t)v24 + 88;
    if (v28 && v27 == 1)
      free(v28);
    if (v38 && v37 == 1)
      free(v38);
    if (v35 && v34 == 1)
      free(v35);
  }
  else
  {
    v10 = *(unsigned __int8 *)a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v10)
    {
      v11 = 0;
      v26 = v9;
      v12 = 0.0;
      do
      {
        sub_19C03B508((uint64_t)v36, (uint64_t)a2, v9, (int *)&v26, v6);
        v13 = *(float *)&v39;
        if (v36[0])
        {
          v14 = a3[1];
          if (v14 >= a3[2])
          {
            v18 = sub_19BFCE284(a3, (uint64_t)v36);
          }
          else
          {
            sub_19BF86B60(a3[1], v36);
            v16 = v40;
            v15 = v41;
            v17 = v39;
            *(_WORD *)(v14 + 80) = v42;
            *(_OWORD *)(v14 + 48) = v16;
            *(_OWORD *)(v14 + 64) = v15;
            *(_OWORD *)(v14 + 32) = v17;
            v18 = v14 + 88;
            a3[1] = v14 + 88;
          }
          a3[1] = v18;
        }
        if (v38)
          v19 = v37 == 1;
        else
          v19 = 0;
        if (v19)
          free(v38);
        v12 = v12 + v13;
        v9 = v26;
        if (!v26)
          break;
      }
      while (v11++ < 0xFF);
      v21 = *a3;
      v22 = a3[1];
      v23 = v22 - *a3;
      if (v23 == 88)
      {
        *(_DWORD *)(v21 + 32) = 1065353216;
      }
      else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v23 >> 3)) >= 2)
      {
        if (v12 <= 0.0)
          __assert_rtn("derive_words_at_offset", "LXWordTrie.cpp", 616, "termination_prob > 0");
        while (v21 != v22)
        {
          *(float *)(v21 + 32) = *(float *)(v21 + 32) / v12;
          v21 += 88;
        }
      }
    }
  }
}

void sub_19BFC8C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)(v32 + 8) = v33;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  if (a32 && BYTE6(a31) == 1)
    free(a32);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

void sub_19BFC8CF8(uint64_t **a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v9;
  int v10;
  unsigned int v11;
  float v12;
  float v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  unsigned int v26;
  char v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;
  unsigned __int16 v33[3];
  char v34;
  void *v35;
  unsigned __int16 v36[3];
  char v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (*(_DWORD *)(v4 + 32) != 3)
    sub_19BFC4E9C();
  v6 = (unsigned __int16 *)(*a1)[1];
  if (*a2)
    v7 = *(_QWORD *)v4 == -1;
  else
    v7 = 1;
  if (v7 || *v6 == 0)
    goto LABEL_11;
  *(_DWORD *)v36 = 0;
  if (!sub_19BFFD5C0((uint64_t)(a2 + 48), (unint64_t *)v4, v36)
    || (~*(_DWORD *)v36 & 0x7FFFFF) == 0)
  {
    goto LABEL_11;
  }
  if (!*(_QWORD *)v4)
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 531, "!cursor.is_root()");
  if ((*(_DWORD *)v36 & 0x400000) != 0 || (v9 = *(_DWORD *)v36 & 0x1FFFFF, (*(_DWORD *)v36 & 0x1FFFFF) == 0))
  {
    if ((*(_DWORD *)v36 & 0x400000) == 0 && (sub_19C03B64C((uint64_t)(a2 + 40), v4) & 1) != 0)
    {
LABEL_11:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    sub_19C016B04((uint64_t)v33, (uint64_t)(a2 + 680), v6);
    if (!v33[0])
      __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 542, "!derived_base_form.is_empty()");
    sub_19BF86B60((uint64_t)v36, v33);
    BYTE4(v39) = 0;
    *(_QWORD *)((char *)&v39 + 5) = 0;
    v40 = 0uLL;
    *(_QWORD *)&v41 = 0xFFFFFFFFLL;
    BYTE8(v41) = 0;
    HIDWORD(v41) = 0;
    v42 = 0;
    LODWORD(v39) = 1065353216;
    if ((a2[6] & 1) != 0)
      HIDWORD(v40) = -1;
    sub_19BF86B60((uint64_t)&v26, v36);
    v29 = v39;
    v30 = v40;
    v31 = v41;
    v32 = v42;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v24 = operator new(0x58uLL);
    *a3 = (uint64_t)v24;
    a3[1] = (uint64_t)v24;
    a3[2] = (uint64_t)v24 + 88;
    sub_19BF86B60((uint64_t)v24, (unsigned __int16 *)&v26);
    v25 = v30;
    v24[2] = v29;
    v24[3] = v25;
    v24[4] = v31;
    *((_WORD *)v24 + 40) = v32;
    a3[1] = (uint64_t)v24 + 88;
    if (v28 && v27 == 1)
      free(v28);
    if (v38 && v37 == 1)
      free(v38);
    if (v35 && v34 == 1)
      free(v35);
  }
  else
  {
    v10 = *a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v10)
    {
      v11 = 0;
      v26 = v9;
      v12 = 0.0;
      do
      {
        sub_19C03BAEC((uint64_t)v36, (uint64_t)a2, v9, (int *)&v26, v6);
        v13 = *(float *)&v39;
        if (v36[0])
        {
          v14 = a3[1];
          if (v14 >= a3[2])
          {
            v18 = sub_19BFCE284(a3, (uint64_t)v36);
          }
          else
          {
            sub_19BF86B60(a3[1], v36);
            v16 = v40;
            v15 = v41;
            v17 = v39;
            *(_WORD *)(v14 + 80) = v42;
            *(_OWORD *)(v14 + 48) = v16;
            *(_OWORD *)(v14 + 64) = v15;
            *(_OWORD *)(v14 + 32) = v17;
            v18 = v14 + 88;
            a3[1] = v14 + 88;
          }
          a3[1] = v18;
        }
        if (v38)
          v19 = v37 == 1;
        else
          v19 = 0;
        if (v19)
          free(v38);
        v12 = v12 + v13;
        v9 = v26;
        if (!v26)
          break;
      }
      while (v11++ < 0xFF);
      v21 = *a3;
      v22 = a3[1];
      v23 = v22 - *a3;
      if (v23 == 88)
      {
        *(_DWORD *)(v21 + 32) = 1065353216;
      }
      else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v23 >> 3)) >= 2)
      {
        if (v12 <= 0.0)
          __assert_rtn("derive_words_at_offset", "LXWordTrie.cpp", 616, "termination_prob > 0");
        while (v21 != v22)
        {
          *(float *)(v21 + 32) = *(float *)(v21 + 32) / v12;
          v21 += 88;
        }
      }
    }
  }
}

void sub_19BFC90B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)(v32 + 8) = v33;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  if (a32 && BYTE6(a31) == 1)
    free(a32);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

void sub_19BFC917C(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v9;
  int v10;
  unsigned int v11;
  float v12;
  float v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  unsigned int v26;
  char v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;
  unsigned __int16 v33[3];
  char v34;
  void *v35;
  unsigned __int16 v36[3];
  char v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (*(_DWORD *)(v4 + 32) != 4)
    sub_19BFC4E9C();
  v6 = (unsigned __int16 *)(*a1)[1];
  if (*(_BYTE *)a2)
    v7 = *(_QWORD *)v4 == 0xFFFFFFFFLL;
  else
    v7 = 1;
  if (v7 || *v6 == 0)
    goto LABEL_11;
  *(_DWORD *)v36 = 0;
  if (!sub_19BFF9DF8(a2 + 6, v4, v36) || (~*(_DWORD *)v36 & 0xFFFFFF) == 0)
    goto LABEL_11;
  if (!*(_QWORD *)v4)
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 531, "!cursor.is_root()");
  if ((*(_DWORD *)v36 & 0x400000) != 0 || (v9 = *(_DWORD *)v36 & 0x1FFFFF, (*(_DWORD *)v36 & 0x1FFFFF) == 0))
  {
    if ((*(_DWORD *)v36 & 0x400000) == 0 && (sub_19C03BBBC((uint64_t)(a2 + 5), v4) & 1) != 0)
    {
LABEL_11:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    sub_19C016B04((uint64_t)v33, (uint64_t)(a2 + 17), v6);
    if (!v33[0])
      __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 542, "!derived_base_form.is_empty()");
    sub_19BF86B60((uint64_t)v36, v33);
    BYTE4(v39) = 0;
    *(_QWORD *)((char *)&v39 + 5) = 0;
    v40 = 0uLL;
    *(_QWORD *)&v41 = 0xFFFFFFFFLL;
    BYTE8(v41) = 0;
    HIDWORD(v41) = 0;
    v42 = 0;
    LODWORD(v39) = 1065353216;
    if ((*((_BYTE *)a2 + 6) & 1) != 0)
      HIDWORD(v40) = -1;
    sub_19BF86B60((uint64_t)&v26, v36);
    v29 = v39;
    v30 = v40;
    v31 = v41;
    v32 = v42;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v24 = operator new(0x58uLL);
    *a3 = (uint64_t)v24;
    a3[1] = (uint64_t)v24;
    a3[2] = (uint64_t)v24 + 88;
    sub_19BF86B60((uint64_t)v24, (unsigned __int16 *)&v26);
    v25 = v30;
    v24[2] = v29;
    v24[3] = v25;
    v24[4] = v31;
    *((_WORD *)v24 + 40) = v32;
    a3[1] = (uint64_t)v24 + 88;
    if (v28 && v27 == 1)
      free(v28);
    if (v38 && v37 == 1)
      free(v38);
    if (v35 && v34 == 1)
      free(v35);
  }
  else
  {
    v10 = *(unsigned __int8 *)a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v10)
    {
      v11 = 0;
      v26 = v9;
      v12 = 0.0;
      do
      {
        sub_19C03C208((uint64_t)v36, (uint64_t)a2, v9, (int *)&v26, v6);
        v13 = *(float *)&v39;
        if (v36[0])
        {
          v14 = a3[1];
          if (v14 >= a3[2])
          {
            v18 = sub_19BFCE284(a3, (uint64_t)v36);
          }
          else
          {
            sub_19BF86B60(a3[1], v36);
            v16 = v40;
            v15 = v41;
            v17 = v39;
            *(_WORD *)(v14 + 80) = v42;
            *(_OWORD *)(v14 + 48) = v16;
            *(_OWORD *)(v14 + 64) = v15;
            *(_OWORD *)(v14 + 32) = v17;
            v18 = v14 + 88;
            a3[1] = v14 + 88;
          }
          a3[1] = v18;
        }
        if (v38)
          v19 = v37 == 1;
        else
          v19 = 0;
        if (v19)
          free(v38);
        v12 = v12 + v13;
        v9 = v26;
        if (!v26)
          break;
      }
      while (v11++ < 0xFF);
      v21 = *a3;
      v22 = a3[1];
      v23 = v22 - *a3;
      if (v23 == 88)
      {
        *(_DWORD *)(v21 + 32) = 1065353216;
      }
      else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v23 >> 3)) >= 2)
      {
        if (v12 <= 0.0)
          __assert_rtn("derive_words_at_offset", "LXWordTrie.cpp", 616, "termination_prob > 0");
        while (v21 != v22)
        {
          *(float *)(v21 + 32) = *(float *)(v21 + 32) / v12;
          v21 += 88;
        }
      }
    }
  }
}

void sub_19BFC953C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)(v32 + 8) = v33;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  if (a32 && BYTE6(a31) == 1)
    free(a32);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

void sub_19BFC9604(unsigned int ***a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v4;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v9;
  int v10;
  unsigned int v11;
  float v12;
  float v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  unsigned int v26;
  char v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;
  unsigned __int16 v33[3];
  char v34;
  void *v35;
  int v36;
  char v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (v4[8] != 5)
    sub_19BFC4E9C();
  v6 = (unsigned __int16 *)(*a1)[1];
  if (*a2)
    v7 = *(_QWORD *)v4 == -1;
  else
    v7 = 1;
  if (v7 || *v6 == 0)
    goto LABEL_11;
  v36 = 0;
  if (!sub_19C008564((_QWORD *)a2 + 6, v4, &v36) || (~v36 & 0x7FFFFF) == 0)
    goto LABEL_11;
  if (!*(_QWORD *)v4)
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 531, "!cursor.is_root()");
  if ((v36 & 0x400000) != 0 || (v9 = v36 & 0x1FFFFF, (v36 & 0x1FFFFF) == 0))
  {
    if ((v36 & 0x400000) == 0 && (sub_19C03C2D8((uint64_t)(a2 + 40), (uint64_t)v4) & 1) != 0)
    {
LABEL_11:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    sub_19C016B04((uint64_t)v33, (uint64_t)(a2 + 136), v6);
    if (!v33[0])
      __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 542, "!derived_base_form.is_empty()");
    sub_19BF86B60((uint64_t)&v36, v33);
    BYTE4(v39) = 0;
    *(_QWORD *)((char *)&v39 + 5) = 0;
    v40 = 0uLL;
    *(_QWORD *)&v41 = 0xFFFFFFFFLL;
    BYTE8(v41) = 0;
    HIDWORD(v41) = 0;
    v42 = 0;
    LODWORD(v39) = 1065353216;
    if ((a2[6] & 1) != 0)
      HIDWORD(v40) = -1;
    sub_19BF86B60((uint64_t)&v26, (unsigned __int16 *)&v36);
    v29 = v39;
    v30 = v40;
    v31 = v41;
    v32 = v42;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v24 = operator new(0x58uLL);
    *a3 = (uint64_t)v24;
    a3[1] = (uint64_t)v24;
    a3[2] = (uint64_t)v24 + 88;
    sub_19BF86B60((uint64_t)v24, (unsigned __int16 *)&v26);
    v25 = v30;
    v24[2] = v29;
    v24[3] = v25;
    v24[4] = v31;
    *((_WORD *)v24 + 40) = v32;
    a3[1] = (uint64_t)v24 + 88;
    if (v28 && v27 == 1)
      free(v28);
    if (v38 && v37 == 1)
      free(v38);
    if (v35 && v34 == 1)
      free(v35);
  }
  else
  {
    v10 = *a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v10)
    {
      v11 = 0;
      v26 = v9;
      v12 = 0.0;
      do
      {
        sub_19C03C208((uint64_t)&v36, (uint64_t)a2, v9, (int *)&v26, v6);
        v13 = *(float *)&v39;
        if ((_WORD)v36)
        {
          v14 = a3[1];
          if (v14 >= a3[2])
          {
            v18 = sub_19BFCE284(a3, (uint64_t)&v36);
          }
          else
          {
            sub_19BF86B60(a3[1], (unsigned __int16 *)&v36);
            v16 = v40;
            v15 = v41;
            v17 = v39;
            *(_WORD *)(v14 + 80) = v42;
            *(_OWORD *)(v14 + 48) = v16;
            *(_OWORD *)(v14 + 64) = v15;
            *(_OWORD *)(v14 + 32) = v17;
            v18 = v14 + 88;
            a3[1] = v14 + 88;
          }
          a3[1] = v18;
        }
        if (v38)
          v19 = v37 == 1;
        else
          v19 = 0;
        if (v19)
          free(v38);
        v12 = v12 + v13;
        v9 = v26;
        if (!v26)
          break;
      }
      while (v11++ < 0xFF);
      v21 = *a3;
      v22 = a3[1];
      v23 = v22 - *a3;
      if (v23 == 88)
      {
        *(_DWORD *)(v21 + 32) = 1065353216;
      }
      else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v23 >> 3)) >= 2)
      {
        if (v12 <= 0.0)
          __assert_rtn("derive_words_at_offset", "LXWordTrie.cpp", 616, "termination_prob > 0");
        while (v21 != v22)
        {
          *(float *)(v21 + 32) = *(float *)(v21 + 32) / v12;
          v21 += 88;
        }
      }
    }
  }
}

void sub_19BFC99C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)(v32 + 8) = v33;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  if (a32 && BYTE6(a31) == 1)
    free(a32);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

void sub_19BFC9A88(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v9;
  int v10;
  unsigned int v11;
  float v12;
  float v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  unsigned int v26;
  char v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;
  unsigned __int16 v33[3];
  char v34;
  void *v35;
  unsigned __int16 v36[3];
  char v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (*(_DWORD *)(v4 + 32) != 6)
    sub_19BFC4E9C();
  v6 = (unsigned __int16 *)(*a1)[1];
  if (*(_BYTE *)a2)
    v7 = *(_DWORD *)(v4 + 12) == -1;
  else
    v7 = 1;
  if (v7 || *v6 == 0)
    goto LABEL_11;
  *(_DWORD *)v36 = 0;
  if (!sub_19BFB8AAC(a2 + 6, v4, v36) || (~*(_DWORD *)v36 & 0x7FFFFF) == 0)
    goto LABEL_11;
  if (*(_BYTE *)(v4 + 9))
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 531, "!cursor.is_root()");
  if ((*(_DWORD *)v36 & 0x400000) != 0 || (v9 = *(_DWORD *)v36 & 0x1FFFFF, (*(_DWORD *)v36 & 0x1FFFFF) == 0))
  {
    if ((*(_DWORD *)v36 & 0x400000) == 0 && (sub_19C03C73C((uint64_t)(a2 + 5), v4) & 1) != 0)
    {
LABEL_11:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    sub_19C016B04((uint64_t)v33, (uint64_t)(a2 + 15), v6);
    if (!v33[0])
      __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 542, "!derived_base_form.is_empty()");
    sub_19BF86B60((uint64_t)v36, v33);
    BYTE4(v39) = 0;
    *(_QWORD *)((char *)&v39 + 5) = 0;
    v40 = 0uLL;
    *(_QWORD *)&v41 = 0xFFFFFFFFLL;
    BYTE8(v41) = 0;
    HIDWORD(v41) = 0;
    v42 = 0;
    LODWORD(v39) = 1065353216;
    if ((*((_BYTE *)a2 + 6) & 1) != 0)
      HIDWORD(v40) = -1;
    sub_19BF86B60((uint64_t)&v26, v36);
    v29 = v39;
    v30 = v40;
    v31 = v41;
    v32 = v42;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v24 = operator new(0x58uLL);
    *a3 = (uint64_t)v24;
    a3[1] = (uint64_t)v24;
    a3[2] = (uint64_t)v24 + 88;
    sub_19BF86B60((uint64_t)v24, (unsigned __int16 *)&v26);
    v25 = v30;
    v24[2] = v29;
    v24[3] = v25;
    v24[4] = v31;
    *((_WORD *)v24 + 40) = v32;
    a3[1] = (uint64_t)v24 + 88;
    if (v28 && v27 == 1)
      free(v28);
    if (v38 && v37 == 1)
      free(v38);
    if (v35 && v34 == 1)
      free(v35);
  }
  else
  {
    v10 = *(unsigned __int8 *)a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v10)
    {
      v11 = 0;
      v26 = v9;
      v12 = 0.0;
      do
      {
        sub_19C03CBE0((uint64_t)v36, (uint64_t)a2, v9, (int *)&v26, v6);
        v13 = *(float *)&v39;
        if (v36[0])
        {
          v14 = a3[1];
          if (v14 >= a3[2])
          {
            v18 = sub_19BFCE284(a3, (uint64_t)v36);
          }
          else
          {
            sub_19BF86B60(a3[1], v36);
            v16 = v40;
            v15 = v41;
            v17 = v39;
            *(_WORD *)(v14 + 80) = v42;
            *(_OWORD *)(v14 + 48) = v16;
            *(_OWORD *)(v14 + 64) = v15;
            *(_OWORD *)(v14 + 32) = v17;
            v18 = v14 + 88;
            a3[1] = v14 + 88;
          }
          a3[1] = v18;
        }
        if (v38)
          v19 = v37 == 1;
        else
          v19 = 0;
        if (v19)
          free(v38);
        v12 = v12 + v13;
        v9 = v26;
        if (!v26)
          break;
      }
      while (v11++ < 0xFF);
      v21 = *a3;
      v22 = a3[1];
      v23 = v22 - *a3;
      if (v23 == 88)
      {
        *(_DWORD *)(v21 + 32) = 1065353216;
      }
      else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v23 >> 3)) >= 2)
      {
        if (v12 <= 0.0)
          __assert_rtn("derive_words_at_offset", "LXWordTrie.cpp", 616, "termination_prob > 0");
        while (v21 != v22)
        {
          *(float *)(v21 + 32) = *(float *)(v21 + 32) / v12;
          v21 += 88;
        }
      }
    }
  }
}

void sub_19BFC9E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)(v32 + 8) = v33;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  if (a32 && BYTE6(a31) == 1)
    free(a32);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

void sub_19BFC9F0C(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  float v11;
  float v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  int v25;
  uint64_t *v26;
  char v27;
  unsigned int v28;
  char v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  unsigned __int16 v35[3];
  char v36;
  void *v37;
  unsigned __int16 v38[3];
  char v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (*(_DWORD *)(v4 + 32) != 7)
    sub_19BFC4E9C();
  v6 = (unsigned __int16 *)(*a1)[1];
  v25 = 0;
  if (!*(_BYTE *)a2)
    goto LABEL_29;
  v7 = *(_QWORD *)v4 == -1 || *v6 == 0;
  if (v7 || (sub_19C03CCB0(a2 + 5, (uint64_t *)v4, &v25) & 1) == 0)
    goto LABEL_29;
  if (!*(_QWORD *)v4)
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 531, "!cursor.is_root()");
  v8 = v25 & 0x3FFFFFFF;
  if ((v25 & 0x3FFFFFFF) != 0)
  {
    v9 = *(unsigned __int8 *)a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v9)
    {
      v10 = 0;
      v28 = v8;
      v11 = 0.0;
      do
      {
        sub_19C03D260((uint64_t)v38, (uint64_t)a2, v8, (int *)&v28, v6);
        v12 = *(float *)&v41;
        if (v38[0])
        {
          v13 = a3[1];
          if (v13 >= a3[2])
          {
            v17 = sub_19BFCE284(a3, (uint64_t)v38);
          }
          else
          {
            sub_19BF86B60(a3[1], v38);
            v15 = v42;
            v14 = v43;
            v16 = v41;
            *(_WORD *)(v13 + 80) = v44;
            *(_OWORD *)(v13 + 48) = v15;
            *(_OWORD *)(v13 + 64) = v14;
            *(_OWORD *)(v13 + 32) = v16;
            v17 = v13 + 88;
            a3[1] = v13 + 88;
          }
          a3[1] = v17;
        }
        if (v40)
          v18 = v39 == 1;
        else
          v18 = 0;
        if (v18)
          free(v40);
        v11 = v11 + v12;
        v8 = v28;
        if (!v28)
          break;
      }
      while (v10++ < 0xFF);
      v20 = *a3;
      v21 = a3[1];
      v22 = v21 - *a3;
      if (v22 == 88)
      {
        *(_DWORD *)(v20 + 32) = 1065353216;
      }
      else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v22 >> 3)) >= 2)
      {
        if (v11 <= 0.0)
          __assert_rtn("derive_words_at_offset", "LXWordTrie.cpp", 616, "termination_prob > 0");
        while (v20 != v21)
        {
          *(float *)(v20 + 32) = *(float *)(v20 + 32) / v11;
          v20 += 88;
        }
      }
    }
    return;
  }
  if ((sub_19C03CD24((uint64_t)(a2 + 5), v4) & 1) != 0)
  {
LABEL_29:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  sub_19C016B04((uint64_t)v35, (uint64_t)(a2 + 18), v6);
  if (!v35[0])
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 542, "!derived_base_form.is_empty()");
  sub_19BF86B60((uint64_t)v38, v35);
  BYTE4(v41) = 0;
  *(_QWORD *)((char *)&v41 + 5) = 0;
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0xFFFFFFFFLL;
  BYTE8(v43) = 0;
  HIDWORD(v43) = 0;
  v44 = 0;
  LODWORD(v41) = 1065353216;
  if ((*((_BYTE *)a2 + 6) & 1) != 0)
    HIDWORD(v42) = -1;
  sub_19BF86B60((uint64_t)&v28, v38);
  v31 = v41;
  v32 = v42;
  v33 = v43;
  v34 = v44;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v26 = a3;
  v27 = 0;
  v23 = operator new(0x58uLL);
  *a3 = (uint64_t)v23;
  a3[1] = (uint64_t)v23;
  a3[2] = (uint64_t)v23 + 88;
  sub_19BF86B60((uint64_t)v23, (unsigned __int16 *)&v28);
  v24 = v32;
  v23[2] = v31;
  v23[3] = v24;
  v23[4] = v33;
  *((_WORD *)v23 + 40) = v34;
  a3[1] = (uint64_t)v23 + 88;
  if (v30 && v29 == 1)
    free(v30);
  if (v40 && v39 == 1)
    free(v40);
  if (v37 && v36 == 1)
    free(v37);
}

void sub_19BFCA2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,char a31,int a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v38;

  *(_QWORD *)(v34 + 8) = v35;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  v38 = *(void **)(v36 + 8);
  if (v38 && BYTE2(a32) == 1)
    free(v38);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

void sub_19BFCA384(unsigned int ***a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v4;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  float v11;
  float v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  int v25;
  uint64_t *v26;
  char v27;
  unsigned int v28;
  char v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  unsigned __int16 v35[3];
  char v36;
  void *v37;
  unsigned __int16 v38[3];
  char v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (v4[8] != 8)
    sub_19BFC4E9C();
  v6 = (unsigned __int16 *)(*a1)[1];
  v25 = 0;
  if (!*a2)
    goto LABEL_29;
  v7 = *(_QWORD *)v4 == -1 || *v6 == 0;
  if (v7 || (sub_19C03D330((_QWORD *)a2 + 5, v4, &v25) & 1) == 0)
    goto LABEL_29;
  if (!*(_QWORD *)v4)
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 531, "!cursor.is_root()");
  v8 = v25 & 0x3FFFFFFF;
  if ((v25 & 0x3FFFFFFF) != 0)
  {
    v9 = *a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v9)
    {
      v10 = 0;
      v28 = v8;
      v11 = 0.0;
      do
      {
        sub_19C03D8D4((uint64_t)v38, (uint64_t)a2, v8, (int *)&v28, v6);
        v12 = *(float *)&v41;
        if (v38[0])
        {
          v13 = a3[1];
          if (v13 >= a3[2])
          {
            v17 = sub_19BFCE284(a3, (uint64_t)v38);
          }
          else
          {
            sub_19BF86B60(a3[1], v38);
            v15 = v42;
            v14 = v43;
            v16 = v41;
            *(_WORD *)(v13 + 80) = v44;
            *(_OWORD *)(v13 + 48) = v15;
            *(_OWORD *)(v13 + 64) = v14;
            *(_OWORD *)(v13 + 32) = v16;
            v17 = v13 + 88;
            a3[1] = v13 + 88;
          }
          a3[1] = v17;
        }
        if (v40)
          v18 = v39 == 1;
        else
          v18 = 0;
        if (v18)
          free(v40);
        v11 = v11 + v12;
        v8 = v28;
        if (!v28)
          break;
      }
      while (v10++ < 0xFF);
      v20 = *a3;
      v21 = a3[1];
      v22 = v21 - *a3;
      if (v22 == 88)
      {
        *(_DWORD *)(v20 + 32) = 1065353216;
      }
      else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v22 >> 3)) >= 2)
      {
        if (v11 <= 0.0)
          __assert_rtn("derive_words_at_offset", "LXWordTrie.cpp", 616, "termination_prob > 0");
        while (v20 != v21)
        {
          *(float *)(v20 + 32) = *(float *)(v20 + 32) / v11;
          v20 += 88;
        }
      }
    }
    return;
  }
  if ((sub_19C03D3AC((uint64_t)(a2 + 40), (uint64_t)v4) & 1) != 0)
  {
LABEL_29:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  sub_19C016B04((uint64_t)v35, (uint64_t)(a2 + 80), v6);
  if (!v35[0])
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 542, "!derived_base_form.is_empty()");
  sub_19BF86B60((uint64_t)v38, v35);
  BYTE4(v41) = 0;
  *(_QWORD *)((char *)&v41 + 5) = 0;
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0xFFFFFFFFLL;
  BYTE8(v43) = 0;
  HIDWORD(v43) = 0;
  v44 = 0;
  LODWORD(v41) = 1065353216;
  if ((a2[6] & 1) != 0)
    HIDWORD(v42) = -1;
  sub_19BF86B60((uint64_t)&v28, v38);
  v31 = v41;
  v32 = v42;
  v33 = v43;
  v34 = v44;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v26 = a3;
  v27 = 0;
  v23 = operator new(0x58uLL);
  *a3 = (uint64_t)v23;
  a3[1] = (uint64_t)v23;
  a3[2] = (uint64_t)v23 + 88;
  sub_19BF86B60((uint64_t)v23, (unsigned __int16 *)&v28);
  v24 = v32;
  v23[2] = v31;
  v23[3] = v24;
  v23[4] = v33;
  *((_WORD *)v23 + 40) = v34;
  a3[1] = (uint64_t)v23 + 88;
  if (v30 && v29 == 1)
    free(v30);
  if (v40 && v39 == 1)
    free(v40);
  if (v37 && v36 == 1)
    free(v37);
}

void sub_19BFCA734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,char a31,int a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v38;

  *(_QWORD *)(v34 + 8) = v35;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  v38 = *(void **)(v36 + 8);
  if (v38 && BYTE2(a32) == 1)
    free(v38);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

void sub_19BFCA7FC(uint64_t **a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  float v11;
  float v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  int v25;
  uint64_t *v26;
  char v27;
  unsigned int v28;
  char v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  unsigned __int16 v35[3];
  char v36;
  void *v37;
  unsigned __int16 v38[3];
  char v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (*(_DWORD *)(v4 + 32) != 9)
    sub_19BFC4E9C();
  v6 = (unsigned __int16 *)(*a1)[1];
  v25 = 0;
  if (!*a2)
    goto LABEL_29;
  v7 = *(_QWORD *)v4 == -1 || *v6 == 0;
  if (v7 || (sub_19C03D9A4((uint64_t)(a2 + 40), (unint64_t *)v4, &v25) & 1) == 0)
    goto LABEL_29;
  if (!*(_QWORD *)v4)
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 531, "!cursor.is_root()");
  v8 = v25 & 0x3FFFFFFF;
  if ((v25 & 0x3FFFFFFF) != 0)
  {
    v9 = *a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v9)
    {
      v10 = 0;
      v28 = v8;
      v11 = 0.0;
      do
      {
        sub_19C03DFF8((uint64_t)v38, (uint64_t)a2, v8, (int *)&v28, v6);
        v12 = *(float *)&v41;
        if (v38[0])
        {
          v13 = a3[1];
          if (v13 >= a3[2])
          {
            v17 = sub_19BFCE284(a3, (uint64_t)v38);
          }
          else
          {
            sub_19BF86B60(a3[1], v38);
            v15 = v42;
            v14 = v43;
            v16 = v41;
            *(_WORD *)(v13 + 80) = v44;
            *(_OWORD *)(v13 + 48) = v15;
            *(_OWORD *)(v13 + 64) = v14;
            *(_OWORD *)(v13 + 32) = v16;
            v17 = v13 + 88;
            a3[1] = v13 + 88;
          }
          a3[1] = v17;
        }
        if (v40)
          v18 = v39 == 1;
        else
          v18 = 0;
        if (v18)
          free(v40);
        v11 = v11 + v12;
        v8 = v28;
        if (!v28)
          break;
      }
      while (v10++ < 0xFF);
      v20 = *a3;
      v21 = a3[1];
      v22 = v21 - *a3;
      if (v22 == 88)
      {
        *(_DWORD *)(v20 + 32) = 1065353216;
      }
      else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v22 >> 3)) >= 2)
      {
        if (v11 <= 0.0)
          __assert_rtn("derive_words_at_offset", "LXWordTrie.cpp", 616, "termination_prob > 0");
        while (v20 != v21)
        {
          *(float *)(v20 + 32) = *(float *)(v20 + 32) / v11;
          v20 += 88;
        }
      }
    }
    return;
  }
  if ((sub_19C03DA18((uint64_t)(a2 + 40), v4) & 1) != 0)
  {
LABEL_29:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  sub_19C016B04((uint64_t)v35, (uint64_t)(a2 + 648), v6);
  if (!v35[0])
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 542, "!derived_base_form.is_empty()");
  sub_19BF86B60((uint64_t)v38, v35);
  BYTE4(v41) = 0;
  *(_QWORD *)((char *)&v41 + 5) = 0;
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0xFFFFFFFFLL;
  BYTE8(v43) = 0;
  HIDWORD(v43) = 0;
  v44 = 0;
  LODWORD(v41) = 1065353216;
  if ((a2[6] & 1) != 0)
    HIDWORD(v42) = -1;
  sub_19BF86B60((uint64_t)&v28, v38);
  v31 = v41;
  v32 = v42;
  v33 = v43;
  v34 = v44;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v26 = a3;
  v27 = 0;
  v23 = operator new(0x58uLL);
  *a3 = (uint64_t)v23;
  a3[1] = (uint64_t)v23;
  a3[2] = (uint64_t)v23 + 88;
  sub_19BF86B60((uint64_t)v23, (unsigned __int16 *)&v28);
  v24 = v32;
  v23[2] = v31;
  v23[3] = v24;
  v23[4] = v33;
  *((_WORD *)v23 + 40) = v34;
  a3[1] = (uint64_t)v23 + 88;
  if (v30 && v29 == 1)
    free(v30);
  if (v40 && v39 == 1)
    free(v40);
  if (v37 && v36 == 1)
    free(v37);
}

void sub_19BFCABAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,char a31,int a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v38;

  *(_QWORD *)(v34 + 8) = v35;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  v38 = *(void **)(v36 + 8);
  if (v38 && BYTE2(a32) == 1)
    free(v38);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

void sub_19BFCAC74(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  float v11;
  float v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  int v25;
  uint64_t *v26;
  char v27;
  unsigned int v28;
  char v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  unsigned __int16 v35[3];
  char v36;
  void *v37;
  unsigned __int16 v38[3];
  char v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (*(_DWORD *)(v4 + 32) != 10)
    sub_19BFC4E9C();
  v6 = (unsigned __int16 *)(*a1)[1];
  v25 = 0;
  if (!*(_BYTE *)a2)
    goto LABEL_29;
  v7 = *(_QWORD *)v4 == 0xFFFFFFFFLL || *v6 == 0;
  if (v7 || (sub_19C03E0C8(a2 + 5, v4, &v25) & 1) == 0)
    goto LABEL_29;
  if (!*(_QWORD *)v4)
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 531, "!cursor.is_root()");
  v8 = v25 & 0x3FFFFFFF;
  if ((v25 & 0x3FFFFFFF) != 0)
  {
    v9 = *(unsigned __int8 *)a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v9)
    {
      v10 = 0;
      v28 = v8;
      v11 = 0.0;
      do
      {
        sub_19C03E9BC((uint64_t)v38, (uint64_t)a2, v8, (int *)&v28, v6);
        v12 = *(float *)&v41;
        if (v38[0])
        {
          v13 = a3[1];
          if (v13 >= a3[2])
          {
            v17 = sub_19BFCE284(a3, (uint64_t)v38);
          }
          else
          {
            sub_19BF86B60(a3[1], v38);
            v15 = v42;
            v14 = v43;
            v16 = v41;
            *(_WORD *)(v13 + 80) = v44;
            *(_OWORD *)(v13 + 48) = v15;
            *(_OWORD *)(v13 + 64) = v14;
            *(_OWORD *)(v13 + 32) = v16;
            v17 = v13 + 88;
            a3[1] = v13 + 88;
          }
          a3[1] = v17;
        }
        if (v40)
          v18 = v39 == 1;
        else
          v18 = 0;
        if (v18)
          free(v40);
        v11 = v11 + v12;
        v8 = v28;
        if (!v28)
          break;
      }
      while (v10++ < 0xFF);
      v20 = *a3;
      v21 = a3[1];
      v22 = v21 - *a3;
      if (v22 == 88)
      {
        *(_DWORD *)(v20 + 32) = 1065353216;
      }
      else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v22 >> 3)) >= 2)
      {
        if (v11 <= 0.0)
          __assert_rtn("derive_words_at_offset", "LXWordTrie.cpp", 616, "termination_prob > 0");
        while (v20 != v21)
        {
          *(float *)(v20 + 32) = *(float *)(v20 + 32) / v11;
          v20 += 88;
        }
      }
    }
    return;
  }
  if ((sub_19C03E144((uint64_t)(a2 + 5), v4) & 1) != 0)
  {
LABEL_29:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  sub_19C016B04((uint64_t)v35, (uint64_t)(a2 + 13), v6);
  if (!v35[0])
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 542, "!derived_base_form.is_empty()");
  sub_19BF86B60((uint64_t)v38, v35);
  BYTE4(v41) = 0;
  *(_QWORD *)((char *)&v41 + 5) = 0;
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0xFFFFFFFFLL;
  BYTE8(v43) = 0;
  HIDWORD(v43) = 0;
  v44 = 0;
  LODWORD(v41) = 1065353216;
  if ((*((_BYTE *)a2 + 6) & 1) != 0)
    HIDWORD(v42) = -1;
  sub_19BF86B60((uint64_t)&v28, v38);
  v31 = v41;
  v32 = v42;
  v33 = v43;
  v34 = v44;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v26 = a3;
  v27 = 0;
  v23 = operator new(0x58uLL);
  *a3 = (uint64_t)v23;
  a3[1] = (uint64_t)v23;
  a3[2] = (uint64_t)v23 + 88;
  sub_19BF86B60((uint64_t)v23, (unsigned __int16 *)&v28);
  v24 = v32;
  v23[2] = v31;
  v23[3] = v24;
  v23[4] = v33;
  *((_WORD *)v23 + 40) = v34;
  a3[1] = (uint64_t)v23 + 88;
  if (v30 && v29 == 1)
    free(v30);
  if (v40 && v39 == 1)
    free(v40);
  if (v37 && v36 == 1)
    free(v37);
}

void sub_19BFCB028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,char a31,int a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v38;

  *(_QWORD *)(v34 + 8) = v35;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  v38 = *(void **)(v36 + 8);
  if (v38 && BYTE2(a32) == 1)
    free(v38);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

void sub_19BFCB0F0(unsigned int ***a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v4;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  float v11;
  float v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  int v25;
  uint64_t *v26;
  char v27;
  unsigned int v28;
  char v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  unsigned __int16 v35[3];
  char v36;
  void *v37;
  unsigned __int16 v38[3];
  char v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (v4[8] != 11)
    sub_19BFC4E9C();
  v6 = (unsigned __int16 *)(*a1)[1];
  v25 = 0;
  if (!*a2)
    goto LABEL_29;
  v7 = *(_QWORD *)v4 == -1 || *v6 == 0;
  if (v7 || (sub_19C03D330((_QWORD *)a2 + 5, v4, &v25) & 1) == 0)
    goto LABEL_29;
  if (!*(_QWORD *)v4)
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 531, "!cursor.is_root()");
  v8 = v25 & 0x3FFFFFFF;
  if ((v25 & 0x3FFFFFFF) != 0)
  {
    v9 = *a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v9)
    {
      v10 = 0;
      v28 = v8;
      v11 = 0.0;
      do
      {
        sub_19C03E9BC((uint64_t)v38, (uint64_t)a2, v8, (int *)&v28, v6);
        v12 = *(float *)&v41;
        if (v38[0])
        {
          v13 = a3[1];
          if (v13 >= a3[2])
          {
            v17 = sub_19BFCE284(a3, (uint64_t)v38);
          }
          else
          {
            sub_19BF86B60(a3[1], v38);
            v15 = v42;
            v14 = v43;
            v16 = v41;
            *(_WORD *)(v13 + 80) = v44;
            *(_OWORD *)(v13 + 48) = v15;
            *(_OWORD *)(v13 + 64) = v14;
            *(_OWORD *)(v13 + 32) = v16;
            v17 = v13 + 88;
            a3[1] = v13 + 88;
          }
          a3[1] = v17;
        }
        if (v40)
          v18 = v39 == 1;
        else
          v18 = 0;
        if (v18)
          free(v40);
        v11 = v11 + v12;
        v8 = v28;
        if (!v28)
          break;
      }
      while (v10++ < 0xFF);
      v20 = *a3;
      v21 = a3[1];
      v22 = v21 - *a3;
      if (v22 == 88)
      {
        *(_DWORD *)(v20 + 32) = 1065353216;
      }
      else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v22 >> 3)) >= 2)
      {
        if (v11 <= 0.0)
          __assert_rtn("derive_words_at_offset", "LXWordTrie.cpp", 616, "termination_prob > 0");
        while (v20 != v21)
        {
          *(float *)(v20 + 32) = *(float *)(v20 + 32) / v11;
          v20 += 88;
        }
      }
    }
    return;
  }
  if ((sub_19C03EA8C((uint64_t)(a2 + 40), (uint64_t)v4) & 1) != 0)
  {
LABEL_29:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  sub_19C016B04((uint64_t)v35, (uint64_t)(a2 + 104), v6);
  if (!v35[0])
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 542, "!derived_base_form.is_empty()");
  sub_19BF86B60((uint64_t)v38, v35);
  BYTE4(v41) = 0;
  *(_QWORD *)((char *)&v41 + 5) = 0;
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0xFFFFFFFFLL;
  BYTE8(v43) = 0;
  HIDWORD(v43) = 0;
  v44 = 0;
  LODWORD(v41) = 1065353216;
  if ((a2[6] & 1) != 0)
    HIDWORD(v42) = -1;
  sub_19BF86B60((uint64_t)&v28, v38);
  v31 = v41;
  v32 = v42;
  v33 = v43;
  v34 = v44;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v26 = a3;
  v27 = 0;
  v23 = operator new(0x58uLL);
  *a3 = (uint64_t)v23;
  a3[1] = (uint64_t)v23;
  a3[2] = (uint64_t)v23 + 88;
  sub_19BF86B60((uint64_t)v23, (unsigned __int16 *)&v28);
  v24 = v32;
  v23[2] = v31;
  v23[3] = v24;
  v23[4] = v33;
  *((_WORD *)v23 + 40) = v34;
  a3[1] = (uint64_t)v23 + 88;
  if (v30 && v29 == 1)
    free(v30);
  if (v40 && v39 == 1)
    free(v40);
  if (v37 && v36 == 1)
    free(v37);
}

void sub_19BFCB4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,char a31,int a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v38;

  *(_QWORD *)(v34 + 8) = v35;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  v38 = *(void **)(v36 + 8);
  if (v38 && BYTE2(a32) == 1)
    free(v38);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

void sub_19BFCB568(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unsigned __int16 *v6;
  BOOL v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  float v11;
  float v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  int v25;
  uint64_t *v26;
  char v27;
  unsigned int v28;
  char v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  unsigned __int16 v35[3];
  char v36;
  void *v37;
  unsigned __int16 v38[3];
  char v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (*(_DWORD *)(v4 + 32) != 12)
    sub_19BFC4E9C();
  v6 = (unsigned __int16 *)(*a1)[1];
  v25 = 0;
  if (!*(_BYTE *)a2)
    goto LABEL_29;
  v7 = *(_DWORD *)(v4 + 12) == -1 || *v6 == 0;
  if (v7 || (sub_19C03EF4C(a2 + 5, v4, &v25) & 1) == 0)
    goto LABEL_29;
  if (*(_BYTE *)(v4 + 9))
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 531, "!cursor.is_root()");
  v8 = v25 & 0x3FFFFFFF;
  if ((v25 & 0x3FFFFFFF) != 0)
  {
    v9 = *(unsigned __int8 *)a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v9)
    {
      v10 = 0;
      v28 = v8;
      v11 = 0.0;
      do
      {
        sub_19C03F5C0((uint64_t)v38, (uint64_t)a2, v8, (int *)&v28, v6);
        v12 = *(float *)&v41;
        if (v38[0])
        {
          v13 = a3[1];
          if (v13 >= a3[2])
          {
            v17 = sub_19BFCE284(a3, (uint64_t)v38);
          }
          else
          {
            sub_19BF86B60(a3[1], v38);
            v15 = v42;
            v14 = v43;
            v16 = v41;
            *(_WORD *)(v13 + 80) = v44;
            *(_OWORD *)(v13 + 48) = v15;
            *(_OWORD *)(v13 + 64) = v14;
            *(_OWORD *)(v13 + 32) = v16;
            v17 = v13 + 88;
            a3[1] = v13 + 88;
          }
          a3[1] = v17;
        }
        if (v40)
          v18 = v39 == 1;
        else
          v18 = 0;
        if (v18)
          free(v40);
        v11 = v11 + v12;
        v8 = v28;
        if (!v28)
          break;
      }
      while (v10++ < 0xFF);
      v20 = *a3;
      v21 = a3[1];
      v22 = v21 - *a3;
      if (v22 == 88)
      {
        *(_DWORD *)(v20 + 32) = 1065353216;
      }
      else if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v22 >> 3)) >= 2)
      {
        if (v11 <= 0.0)
          __assert_rtn("derive_words_at_offset", "LXWordTrie.cpp", 616, "termination_prob > 0");
        while (v20 != v21)
        {
          *(float *)(v20 + 32) = *(float *)(v20 + 32) / v11;
          v20 += 88;
        }
      }
    }
    return;
  }
  if ((sub_19C03EFA4((uint64_t)(a2 + 5), v4) & 1) != 0)
  {
LABEL_29:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  sub_19C016B04((uint64_t)v35, (uint64_t)(a2 + 11), v6);
  if (!v35[0])
    __assert_rtn("derive_words_at_cursor", "LXWordTrie.cpp", 542, "!derived_base_form.is_empty()");
  sub_19BF86B60((uint64_t)v38, v35);
  BYTE4(v41) = 0;
  *(_QWORD *)((char *)&v41 + 5) = 0;
  v42 = 0uLL;
  *(_QWORD *)&v43 = 0xFFFFFFFFLL;
  BYTE8(v43) = 0;
  HIDWORD(v43) = 0;
  v44 = 0;
  LODWORD(v41) = 1065353216;
  if ((*((_BYTE *)a2 + 6) & 1) != 0)
    HIDWORD(v42) = -1;
  sub_19BF86B60((uint64_t)&v28, v38);
  v31 = v41;
  v32 = v42;
  v33 = v43;
  v34 = v44;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v26 = a3;
  v27 = 0;
  v23 = operator new(0x58uLL);
  *a3 = (uint64_t)v23;
  a3[1] = (uint64_t)v23;
  a3[2] = (uint64_t)v23 + 88;
  sub_19BF86B60((uint64_t)v23, (unsigned __int16 *)&v28);
  v24 = v32;
  v23[2] = v31;
  v23[3] = v24;
  v23[4] = v33;
  *((_WORD *)v23 + 40) = v34;
  a3[1] = (uint64_t)v23 + 88;
  if (v30 && v29 == 1)
    free(v30);
  if (v40 && v39 == 1)
    free(v40);
  if (v37 && v36 == 1)
    free(v37);
}

void sub_19BFCB918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28,uint64_t a29,uint64_t a30,char a31,int a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v38;

  *(_QWORD *)(v34 + 8) = v35;
  sub_19BFC70A0(&a10);
  if (a15 && a14 == 1)
    free(a15);
  v38 = *(void **)(v36 + 8);
  if (v38 && BYTE2(a32) == 1)
    free(v38);
  if (a28)
  {
    if (a27 == 1)
      free(a28);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCB9E0(char ***a1)
{
  char *v1;
  unsigned int v2;

  v1 = **a1;
  if (*((_DWORD *)v1 + 8))
    sub_19BFC4E9C();
  if (*v1 < 0)
    return 0;
  v2 = *((_DWORD *)v1 + 2);
  if (!*v1 && v2 == 0)
  {
    v2 = 0;
    if (!v1[24])
      return 0;
  }
  if ((HIBYTE(v2) & 3) > *v1)
    return 0;
  else
    return v1[19] >> 7;
}

BOOL sub_19BFCBA48(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v3;
  int v5;

  v3 = **a1;
  if (v3[8] != 1)
    sub_19BFC4E9C();
  if ((unint64_t)(*(_QWORD *)v3 + 1) >= 2
    && (v5 = 0, sub_19C008564((_QWORD *)(a2 + 48), v3, &v5))
    && (~v5 & 0x7FFFFF) != 0)
  {
    return (v5 & 0x600000) == 0x200000;
  }
  else
  {
    return 0;
  }
}

BOOL sub_19BFCBAC4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  int v5;

  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 2)
    sub_19BFC4E9C();
  if ((unint64_t)(*(_QWORD *)v3 + 1) >= 2
    && (v5 = 0, sub_19C00FBB0((uint64_t *)(a2 + 48), (uint64_t *)v3, &v5))
    && (~v5 & 0x7FFFFF) != 0)
  {
    return (v5 & 0x600000) == 0x200000;
  }
  else
  {
    return 0;
  }
}

BOOL sub_19BFCBB40(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  int v5;

  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 3)
    sub_19BFC4E9C();
  if ((unint64_t)(*(_QWORD *)v3 + 1) >= 2
    && (v5 = 0, sub_19BFFD5C0(a2 + 48, (unint64_t *)v3, &v5))
    && (~v5 & 0x7FFFFF) != 0)
  {
    return (v5 & 0x600000) == 0x200000;
  }
  else
  {
    return 0;
  }
}

BOOL sub_19BFCBBBC(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  int v6;
  int v7;

  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 4)
    sub_19BFC4E9C();
  if (*(_QWORD *)v3)
    v4 = *(_QWORD *)v3 == 0xFFFFFFFFLL;
  else
    v4 = 1;
  if (!v4 && (v7 = 0, v6 = sub_19BFF9DF8((uint64_t *)(a2 + 48), v3, &v7), v6 && (~v7 & 0xFFFFFF) != 0))
    return (v7 & 0x600000) == 0x200000;
  else
    return 0;
}

BOOL sub_19BFCBC3C(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v3;
  int v5;

  v3 = **a1;
  if (v3[8] != 5)
    sub_19BFC4E9C();
  if ((unint64_t)(*(_QWORD *)v3 + 1) >= 2
    && (v5 = 0, sub_19C008564((_QWORD *)(a2 + 48), v3, &v5))
    && (~v5 & 0x7FFFFF) != 0)
  {
    return (v5 & 0x600000) == 0x200000;
  }
  else
  {
    return 0;
  }
}

BOOL sub_19BFCBCB8(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  int v5;

  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 6)
    sub_19BFC4E9C();
  if (*(_DWORD *)(v3 + 12) != -1
    && !*(_BYTE *)(v3 + 9)
    && (v5 = 0, sub_19BFB8AAC((uint64_t *)(a2 + 48), v3, &v5))
    && (~v5 & 0x7FFFFF) != 0)
  {
    return (v5 & 0x600000) == 0x200000;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19BFCBD38(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;

  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 7)
    sub_19BFC4E9C();
  result = 0;
  v5 = 0;
  if ((unint64_t)(*(_QWORD *)v3 + 1) >= 2)
  {
    result = sub_19C03CCB0((uint64_t *)(a2 + 40), (uint64_t *)v3, &v5);
    if ((_DWORD)result)
      return (HIBYTE(v5) >> 6) & 1;
  }
  return result;
}

uint64_t sub_19BFCBDA0(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t result;
  int v5;

  v3 = **a1;
  if (v3[8] != 8)
    sub_19BFC4E9C();
  result = 0;
  v5 = 0;
  if ((unint64_t)(*(_QWORD *)v3 + 1) >= 2)
  {
    result = sub_19C03D330((_QWORD *)(a2 + 40), v3, &v5);
    if ((_DWORD)result)
      return (HIBYTE(v5) >> 6) & 1;
  }
  return result;
}

uint64_t sub_19BFCBE08(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;

  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 9)
    sub_19BFC4E9C();
  result = 0;
  v5 = 0;
  if ((unint64_t)(*(_QWORD *)v3 + 1) >= 2)
  {
    result = sub_19C03D9A4(a2 + 40, (unint64_t *)v3, &v5);
    if ((_DWORD)result)
      return (HIBYTE(v5) >> 6) & 1;
  }
  return result;
}

uint64_t sub_19BFCBE70(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  BOOL v5;
  int v6;

  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 10)
    sub_19BFC4E9C();
  result = 0;
  v6 = 0;
  if (*(_QWORD *)v3)
    v5 = *(_QWORD *)v3 == 0xFFFFFFFFLL;
  else
    v5 = 1;
  if (!v5)
  {
    result = sub_19C03E0C8((uint64_t *)(a2 + 40), v3, &v6);
    if ((_DWORD)result)
      return (HIBYTE(v6) >> 6) & 1;
  }
  return result;
}

uint64_t sub_19BFCBEDC(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t result;
  int v5;

  v3 = **a1;
  if (v3[8] != 11)
    sub_19BFC4E9C();
  result = 0;
  v5 = 0;
  if ((unint64_t)(*(_QWORD *)v3 + 1) >= 2)
  {
    result = sub_19C03D330((_QWORD *)(a2 + 40), v3, &v5);
    if ((_DWORD)result)
      return (HIBYTE(v5) >> 6) & 1;
  }
  return result;
}

uint64_t sub_19BFCBF44(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;

  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 12)
    sub_19BFC4E9C();
  v5 = 0;
  if (*(_DWORD *)(v3 + 12) == -1 || *(_BYTE *)(v3 + 9))
    return 0;
  result = sub_19C03EF4C((uint64_t *)(a2 + 40), v3, &v5);
  if ((_DWORD)result)
    return (HIBYTE(v5) >> 6) & 1;
  return result;
}

unsigned int *sub_19BFCBFB0(unsigned int ***a1, uint64_t **a2)
{
  unsigned int **v2;
  unsigned int *v3;

  v2 = *a1;
  v3 = **a1;
  if (v3[8])
    sub_19BFC4E9C();
  return sub_19C022208(v3, a2, *((unsigned __int8 *)v2 + 8));
}

void sub_19BFCBFD8(unsigned int ***a1, uint64_t a2)
{
  unsigned int **v2;
  unsigned int *v3;

  v2 = *a1;
  v3 = **a1;
  if (v3[8] != 1)
    sub_19BFC4E9C();
  sub_19C03AC44(v3, a2, *((unsigned __int8 *)v2 + 8));
}

float sub_19BFCC004(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 2)
    sub_19BFC4E9C();
  return sub_19C03B210((uint64_t *)v3, a2, *((_BYTE *)v2 + 8));
}

float sub_19BFCC030(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 3)
    sub_19BFC4E9C();
  return sub_19C03B7F4((unint64_t *)v3, a2, *((_BYTE *)v2 + 8));
}

float sub_19BFCC05C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 4)
    sub_19BFC4E9C();
  return sub_19C03BD64(v3, a2, *((_BYTE *)v2 + 8));
}

void sub_19BFCC088(unsigned int ***a1, uint64_t a2)
{
  unsigned int **v2;
  unsigned int *v3;

  v2 = *a1;
  v3 = **a1;
  if (v3[8] != 5)
    sub_19BFC4E9C();
  sub_19C03AC44(v3, a2, *((unsigned __int8 *)v2 + 8));
}

float sub_19BFCC0B4(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 6)
    sub_19BFC4E9C();
  return sub_19C03C8E4(v3, a2, *((_BYTE *)v2 + 8));
}

float sub_19BFCC0E0(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 7)
    sub_19BFC4E9C();
  sub_19C03CECC((uint64_t *)v3, a2, *((_BYTE *)v2 + 8));
  return 0.0;
}

float sub_19BFCC114(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 8)
    sub_19BFC4E9C();
  sub_19C03D554((_QWORD *)v3, *(_QWORD *)(a2 + 64), *((unsigned __int8 *)v2 + 8));
  return 0.0;
}

float sub_19BFCC14C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 9)
    sub_19BFC4E9C();
  sub_19C03DBC0((unint64_t *)v3, a2, *((_BYTE *)v2 + 8));
  return 0.0;
}

float sub_19BFCC180(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 10)
    sub_19BFC4E9C();
  sub_19C03E364((uint64_t *)v3, a2, *((_BYTE *)v2 + 8));
  return 0.0;
}

float sub_19BFCC1B4(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 11)
    sub_19BFC4E9C();
  sub_19C03D554((_QWORD *)v3, *(_QWORD *)(a2 + 64), *((unsigned __int8 *)v2 + 8));
  return 0.0;
}

float sub_19BFCC1EC(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 12)
    sub_19BFC4E9C();
  sub_19C03F14C(v3, a2, *((_BYTE *)v2 + 8));
  return 0.0;
}

uint64_t sub_19BFCC220(uint64_t a1, unsigned __int8 *a2)
{
  return (*a2 >> 7) ^ 1u;
}

BOOL sub_19BFCC230(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

BOOL sub_19BFCC240(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

BOOL sub_19BFCC250(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

BOOL sub_19BFCC260(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

BOOL sub_19BFCC274(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

BOOL sub_19BFCC284(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 12) != -1;
}

BOOL sub_19BFCC294(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

BOOL sub_19BFCC2A4(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

BOOL sub_19BFCC2B4(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

BOOL sub_19BFCC2C4(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

BOOL sub_19BFCC2D8(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

BOOL sub_19BFCC2E8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 12) != -1;
}

uint64_t sub_19BFCC2F8@<X0>(uint64_t a1@<X8>)
{
  _BYTE v2[8];
  int v3;
  uint64_t v4;
  int v5;
  int v6;

  v2[0] = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  sub_19C0477E0(a1, (uint64_t)v2);
  return sub_19BFC72B0((uint64_t)v2);
}

void sub_19BFCC340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCC354@<X0>(uint64_t a1@<X8>)
{
  _QWORD v2[4];
  int v3;

  v2[0] = 0;
  v3 = 1;
  sub_19C0477E0(a1, (uint64_t)v2);
  return sub_19BFC72B0((uint64_t)v2);
}

void sub_19BFCC394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCC3A8@<X0>(uint64_t a1@<X8>)
{
  _QWORD v2[4];
  int v3;

  v2[0] = 0;
  v3 = 2;
  sub_19C0477E0(a1, (uint64_t)v2);
  return sub_19BFC72B0((uint64_t)v2);
}

void sub_19BFCC3E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCC3FC@<X0>(uint64_t a1@<X8>)
{
  _QWORD v2[4];
  int v3;

  v2[0] = 0;
  v3 = 3;
  sub_19C0477E0(a1, (uint64_t)v2);
  return sub_19BFC72B0((uint64_t)v2);
}

void sub_19BFCC43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCC450@<X0>(uint64_t a1@<X8>)
{
  _OWORD v2[2];
  int v3;

  memset(v2, 0, sizeof(v2));
  v3 = 4;
  sub_19C0477E0(a1, (uint64_t)v2);
  return sub_19BFC72B0((uint64_t)v2);
}

void sub_19BFCC494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFC72B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCC4A8@<X0>(uint64_t a1@<X8>)
{
  _QWORD v2[4];
  int v3;

  v2[0] = 0;
  v3 = 5;
  sub_19C0477E0(a1, (uint64_t)v2);
  return sub_19BFC72B0((uint64_t)v2);
}

void sub_19BFCC4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCC4FC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD v5[4];
  int v6;

  v5[0] = sub_19BF9B078(*(unsigned int **)(a1 + 56));
  v5[1] = v3;
  v6 = 6;
  sub_19C0477E0(a2, (uint64_t)v5);
  return sub_19BFC72B0((uint64_t)v5);
}

void sub_19BFCC548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCC55C@<X0>(uint64_t a1@<X8>)
{
  _QWORD v2[4];
  int v3;

  v2[0] = 0;
  v3 = 7;
  sub_19C0477E0(a1, (uint64_t)v2);
  return sub_19BFC72B0((uint64_t)v2);
}

void sub_19BFCC59C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCC5B0@<X0>(uint64_t a1@<X8>)
{
  _QWORD v2[4];
  int v3;

  v2[0] = 0;
  v3 = 8;
  sub_19C0477E0(a1, (uint64_t)v2);
  return sub_19BFC72B0((uint64_t)v2);
}

void sub_19BFCC5F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCC604@<X0>(uint64_t a1@<X8>)
{
  _QWORD v2[4];
  int v3;

  v2[0] = 0;
  v3 = 9;
  sub_19C0477E0(a1, (uint64_t)v2);
  return sub_19BFC72B0((uint64_t)v2);
}

void sub_19BFCC644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCC658@<X0>(uint64_t a1@<X8>)
{
  _OWORD v2[2];
  int v3;

  memset(v2, 0, sizeof(v2));
  v3 = 10;
  sub_19C0477E0(a1, (uint64_t)v2);
  return sub_19BFC72B0((uint64_t)v2);
}

void sub_19BFCC69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFC72B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCC6B0@<X0>(uint64_t a1@<X8>)
{
  _QWORD v2[4];
  int v3;

  v2[0] = 0;
  v3 = 11;
  sub_19C0477E0(a1, (uint64_t)v2);
  return sub_19BFC72B0((uint64_t)v2);
}

void sub_19BFCC6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCC704@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD v5[4];
  int v6;

  v5[0] = sub_19BF9B078(*(unsigned int **)(a1 + 48));
  v5[1] = v3;
  v6 = 12;
  sub_19C0477E0(a2, (uint64_t)v5);
  return sub_19BFC72B0((uint64_t)v5);
}

void sub_19BFCC750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19BFCC764(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 14344);
  *a2 = *(_QWORD *)(a1 + 14336);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_19BFCC78C(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 1512);
  *a2 = *(_QWORD *)(a1 + 1504);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_19BFCC7B4(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 1576);
  *a2 = *(_QWORD *)(a1 + 1568);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_19BFCC7DC(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 2080);
  *a2 = *(_QWORD *)(a1 + 2072);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_19BFCC804(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 1536);
  *a2 = *(_QWORD *)(a1 + 1528);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_19BFCC82C(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 1536);
  *a2 = *(_QWORD *)(a1 + 1528);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_19BFCC854(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 1520);
  *a2 = *(_QWORD *)(a1 + 1512);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_19BFCC87C(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 1544);
  *a2 = *(_QWORD *)(a1 + 1536);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_19BFCC8A4(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 1480);
  *a2 = *(_QWORD *)(a1 + 1472);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_19BFCC8CC(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 2048);
  *a2 = *(_QWORD *)(a1 + 2040);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_19BFCC8F4(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 1504);
  *a2 = *(_QWORD *)(a1 + 1496);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_19BFCC91C(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 1504);
  *a2 = *(_QWORD *)(a1 + 1496);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

void sub_19BFCC944(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 1488);
  *a2 = *(_QWORD *)(a1 + 1480);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

BOOL sub_19BFCC96C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 14336) != 0;
}

BOOL sub_19BFCC97C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 1504) != 0;
}

BOOL sub_19BFCC98C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 1568) != 0;
}

BOOL sub_19BFCC99C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 2072) != 0;
}

BOOL sub_19BFCC9AC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 1528) != 0;
}

BOOL sub_19BFCC9BC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 1528) != 0;
}

BOOL sub_19BFCC9CC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 1512) != 0;
}

BOOL sub_19BFCC9DC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 1536) != 0;
}

BOOL sub_19BFCC9EC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 1472) != 0;
}

BOOL sub_19BFCC9FC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 2040) != 0;
}

BOOL sub_19BFCCA0C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 1496) != 0;
}

BOOL sub_19BFCCA1C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 1496) != 0;
}

BOOL sub_19BFCCA2C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 1480) != 0;
}

os_log_t sub_19BFCCA3C()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "StaticDictionaryImpl");
  qword_1ED024248 = (uint64_t)result;
  return result;
}

void sub_19BFCCA68(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  float v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  int8x8_t prime;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint8x8_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  int v35;
  unsigned __int16 *v36;
  unint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;

  v2 = (_QWORD *)a2;
  v5 = a2 + 16;
  v4 = *(unsigned __int16 *)(a2 + 16);
  if (v4 <= 0xE)
    v6 = (unsigned __int8 *)(v5 + 2);
  else
    v6 = *(unsigned __int8 **)(v5 + 8);
  v45 = sub_19BFF79A0(v6, v4);
  *(_QWORD *)(v5 - 8) = v45;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v9 = *(float *)(a1 + 32);
  if (!v7 || (float)(v9 * (float)v7) < v8)
  {
    v10 = 1;
    if (v7 >= 3)
      v10 = (v7 & (v7 - 1)) != 0;
    v11 = v10 | (2 * v7);
    v12 = vcvtps_u32_f32(v8 / v9);
    if (v11 <= v12)
      prime = (int8x8_t)v12;
    else
      prime = (int8x8_t)v11;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_102;
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_63;
    v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
    {
      v21 = std::__next_prime(v21);
    }
    else
    {
      v23 = 1 << -(char)__clz(v21 - 1);
      if (v21 >= 2)
        v21 = v23;
    }
    if (*(_QWORD *)&prime <= v21)
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *(_QWORD *)(a1 + 8);
      goto LABEL_63;
    }
    if (prime)
    {
LABEL_102:
      if (*(_QWORD *)&prime >> 61)
        sub_19BF8E6D0();
      v14 = operator new(8 * *(_QWORD *)&prime);
      v15 = *(void **)a1;
      *(_QWORD *)a1 = v14;
      if (v15)
        operator delete(v15);
      v43 = v5;
      v16 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v16++) = 0;
      while (*(_QWORD *)&prime != v16);
      v17 = *(uint64_t **)(a1 + 16);
      if (v17)
      {
        v18 = v17[1];
        v19 = (uint8x8_t)vcnt_s8(prime);
        v19.i16[0] = vaddlv_u8(v19);
        v20 = v19.u32[0];
        v42 = v2;
        if (v19.u32[0] > 1uLL)
        {
          if (v18 >= *(_QWORD *)&prime)
            v18 %= *(_QWORD *)&prime;
        }
        else
        {
          v18 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = a1 + 16;
        v24 = *v17;
        if (*v17)
        {
          v44 = v19.u32[0];
          do
          {
            v25 = *(_QWORD *)(v24 + 8);
            if (v20 > 1)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            if (v25 == v18)
            {
              v17 = (uint64_t *)v24;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v25))
            {
              v26 = *(_QWORD **)v24;
              if (*(_QWORD *)v24)
              {
                v27 = (_QWORD *)v24;
                while (1)
                {
                  v28 = v26;
                  if (!sub_19BFED000((unsigned __int16 *)(v24 + 16), (unsigned __int16 *)v26 + 8))
                    break;
                  v26 = (_QWORD *)*v28;
                  v27 = v28;
                  if (!*v28)
                    goto LABEL_50;
                }
                v26 = v28;
                v28 = v27;
LABEL_50:
                v20 = v44;
              }
              else
              {
                v28 = (_QWORD *)v24;
              }
              *v17 = (uint64_t)v26;
              *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v25);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v25) = v24;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v17;
              v17 = (uint64_t *)v24;
              v18 = v25;
            }
            v24 = *v17;
          }
          while (*v17);
        }
        v7 = (unint64_t)prime;
        v2 = v42;
        v5 = v43;
      }
      else
      {
        v7 = (unint64_t)prime;
        v5 = v43;
      }
    }
    else
    {
      v29 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v29)
        operator delete(v29);
      v7 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_63:
  v30 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v30.i16[0] = vaddlv_u8(v30);
  v31 = v30.u32[0];
  if (v30.u32[0] > 1uLL)
  {
    v32 = v45;
    if (v7 <= v45)
      v32 = v45 % v7;
  }
  else
  {
    v32 = ((_DWORD)v7 - 1) & v45;
  }
  v33 = *(unsigned __int16 **)(*(_QWORD *)a1 + 8 * v32);
  if (v33)
  {
    v34 = *(unsigned __int16 **)v33;
    if (*(_QWORD *)v33)
    {
      v35 = 0;
      do
      {
        v36 = v34;
        v37 = *((_QWORD *)v34 + 1);
        if (v31 > 1)
        {
          v38 = v37;
          if (v37 >= v7)
            v38 = v37 % v7;
        }
        else
        {
          v38 = v37 & (v7 - 1);
        }
        if (v38 != v32)
          break;
        v39 = v37 == v45 && sub_19BFED000(v36 + 8, (unsigned __int16 *)v5);
        if ((v35 & !v39 & 1) != 0)
          break;
        v35 |= v39;
        v34 = *(unsigned __int16 **)v36;
        v33 = v36;
      }
      while (*(_QWORD *)v36);
    }
  }
  v40 = v2[1];
  if (v31 > 1)
  {
    if (v40 >= v7)
      v40 %= v7;
  }
  else
  {
    v40 &= v7 - 1;
  }
  if (!v33)
  {
    *v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = a1 + 16;
    if (!*v2)
      goto LABEL_98;
    v41 = *(_QWORD *)(*v2 + 8);
    if (v31 > 1)
    {
      if (v41 >= v7)
        v41 %= v7;
    }
    else
    {
      v41 &= v7 - 1;
    }
LABEL_97:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v2;
    goto LABEL_98;
  }
  *v2 = *(_QWORD *)v33;
  *(_QWORD *)v33 = v2;
  if (*v2)
  {
    v41 = *(_QWORD *)(*v2 + 8);
    if (v31 > 1)
    {
      if (v41 >= v7)
        v41 %= v7;
    }
    else
    {
      v41 &= v7 - 1;
    }
    if (v41 != v40)
      goto LABEL_97;
  }
LABEL_98:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19BFCCF10(char a1, _QWORD *__p)
{
  uint64_t v3;

  if (a1)
  {
    if (*((unsigned __int16 *)__p + 8) >= 0xFu)
    {
      v3 = __p[3];
      if (v3)
        MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_19BFCCF74(uint64_t a1, uint64_t a2)
{
  return a2 + 12920;
}

uint64_t sub_19BFCCF80(uint64_t a1, uint64_t a2)
{
  return a2 + 112;
}

uint64_t sub_19BFCCF88(uint64_t a1, uint64_t a2)
{
  return a2 + 176;
}

uint64_t sub_19BFCCF90(uint64_t a1, uint64_t a2)
{
  return a2 + 680;
}

uint64_t sub_19BFCCF98(uint64_t a1, uint64_t a2)
{
  return a2 + 136;
}

uint64_t sub_19BFCCFA0(uint64_t a1, uint64_t a2)
{
  return a2 + 136;
}

uint64_t sub_19BFCCFA8(uint64_t a1, uint64_t a2)
{
  return a2 + 120;
}

uint64_t sub_19BFCCFB0(uint64_t a1, uint64_t a2)
{
  return a2 + 144;
}

uint64_t sub_19BFCCFB8(uint64_t a1, uint64_t a2)
{
  return a2 + 80;
}

uint64_t sub_19BFCCFC0(uint64_t a1, uint64_t a2)
{
  return a2 + 648;
}

uint64_t sub_19BFCCFC8(uint64_t a1, uint64_t a2)
{
  return a2 + 104;
}

uint64_t sub_19BFCCFD0(uint64_t a1, uint64_t a2)
{
  return a2 + 104;
}

uint64_t sub_19BFCCFD8(uint64_t a1, uint64_t a2)
{
  return a2 + 88;
}

void sub_19BFCCFE0(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  void *__p[2];
  char v5;

  if (*(_BYTE *)(a2 + 20))
  {
    v3 = (_BYTE *)(a2 + 14328);
    sub_19BF8E43C(__p, "words");
    sub_19BF8A9B8(v3, *(_QWORD *)(a2 + 8), (uint64_t)__p);
    if (v5 < 0)
      operator delete(__p[0]);
    sub_19BF8E43C(__p, "index");
    sub_19BF8A9B8((_BYTE *)(a2 + 14329), *(_QWORD *)a2, (uint64_t)__p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_19BFCD07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19BFCD09C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (mlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for words file");
    if (mlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for index file");
  }
}

void sub_19BFCD148(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (mlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for words file");
    if (mlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for index file");
  }
}

void sub_19BFCD1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (mlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for words file");
    if (mlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for index file");
  }
}

void sub_19BFCD2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (mlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for words file");
    if (mlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for index file");
  }
}

void sub_19BFCD34C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (mlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for words file");
    if (mlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for index file");
  }
}

void sub_19BFCD3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (mlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for words file");
    if (mlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for index file");
  }
}

void sub_19BFCD4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (mlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for words file");
    if (mlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for index file");
  }
}

void sub_19BFCD550(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (mlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for words file");
    if (mlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for index file");
  }
}

void sub_19BFCD5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (mlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for words file");
    if (mlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for index file");
  }
}

void sub_19BFCD6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (mlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for words file");
    if (mlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for index file");
  }
}

void sub_19BFCD754(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (mlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for words file");
    if (mlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for index file");
  }
}

void sub_19BFCD800(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (mlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for words file");
    if (mlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"mlock() failed for index file");
  }
}

void sub_19BFCD8AC(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  std::string __p;

  if (*(_BYTE *)(a2 + 20))
  {
    v3 = (_BYTE *)(a2 + 14328);
    sub_19BF8E43C(&__p, "words");
    sub_19C0234D8(v3, *(_QWORD *)(a2 + 8), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_19BF8E43C(&__p, "index");
    sub_19C0234D8((_BYTE *)(a2 + 14329), *(_QWORD *)a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19BFCD948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19BFCD968(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (munlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for words file");
    if (munlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for index file");
  }
}

void sub_19BFCDA14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (munlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for words file");
    if (munlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for index file");
  }
}

void sub_19BFCDAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (munlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for words file");
    if (munlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for index file");
  }
}

void sub_19BFCDB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (munlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for words file");
    if (munlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for index file");
  }
}

void sub_19BFCDC18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (munlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for words file");
    if (munlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for index file");
  }
}

void sub_19BFCDCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (munlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for words file");
    if (munlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for index file");
  }
}

void sub_19BFCDD70(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (munlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for words file");
    if (munlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for index file");
  }
}

void sub_19BFCDE1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (munlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for words file");
    if (munlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for index file");
  }
}

void sub_19BFCDEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (munlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for words file");
    if (munlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for index file");
  }
}

void sub_19BFCDF74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (munlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for words file");
    if (munlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for index file");
  }
}

void sub_19BFCE020(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (munlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for words file");
    if (munlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for index file");
  }
}

void sub_19BFCE0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const std::error_category *v4;
  uint64_t v5;
  const std::error_category *v6;
  std::error_code v7;

  if (*(_BYTE *)a2)
  {
    if (munlock(**(const void ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)))
    {
      v3 = *__error();
      v4 = std::generic_category();
    }
    else
    {
      v4 = std::system_category();
      v3 = 0;
    }
    *(_QWORD *)&v7.__val_ = v3;
    v7.__cat_ = v4;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for words file");
    if (munlock(**(const void ***)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8)))
    {
      v5 = *__error();
      v6 = std::generic_category();
    }
    else
    {
      v6 = std::system_category();
      v5 = 0;
    }
    *(_QWORD *)&v7.__val_ = v5;
    v7.__cat_ = v6;
    sub_19C03FDF4(&v7, (uint64_t)"munlock() failed for index file");
  }
}

uint64_t sub_19BFCE178(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t *)result;
    v6 = *(_QWORD *)(result + 8);
    do
    {
      for (i = *v5; i != v6; i += 88)
      {
        if (i != v4)
        {
          result = sub_19BFF7920((unsigned __int16 *)i, (unsigned __int16 *)v4);
          if (!(_DWORD)result)
            continue;
        }
        if (*(_DWORD *)(i + 40) == *(_DWORD *)(v4 + 40))
        {
          if (i != v6)
          {
            *(float *)(i + 32) = *(float *)(i + 32) + *(float *)(v4 + 32);
            *(_DWORD *)(i + 36) = *(_DWORD *)(v4 + 36);
            *(_DWORD *)(i + 56) = *(_DWORD *)(v4 + 56);
            goto LABEL_15;
          }
          break;
        }
      }
      if (v6 >= v5[2])
      {
        result = sub_19BFCE284(v5, v4);
        v6 = result;
      }
      else
      {
        result = sub_19BF86B60(v6, (unsigned __int16 *)v4);
        v8 = *(_OWORD *)(v4 + 32);
        v9 = *(_OWORD *)(v4 + 48);
        v10 = *(_OWORD *)(v4 + 64);
        *(_WORD *)(v6 + 80) = *(_WORD *)(v4 + 80);
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 64) = v10;
        *(_OWORD *)(v6 + 32) = v8;
        v6 += 88;
        v5[1] = v6;
      }
      v5[1] = v6;
LABEL_15:
      v4 += 88;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_19BFCE27C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCE284(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;
  uint64_t v14;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_19BF8EB40();
  v6 = a1 + 2;
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v7 = 0x2E8BA2E8BA2E8BALL;
  else
    v7 = v3;
  v20 = v6;
  if (v7)
  {
    v9 = (char *)sub_19BFCE3C0(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v16 = v9;
  v17 = &v9[88 * v2];
  v18 = (uint64_t)v17;
  v19 = &v9[88 * v8];
  sub_19BF86B60((uint64_t)v17, (unsigned __int16 *)a2);
  v10 = (uint64_t)v17;
  v12 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  v13 = *(_WORD *)(a2 + 80);
  *((_OWORD *)v17 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v10 + 48) = v12;
  *(_WORD *)(v10 + 80) = v13;
  *(_OWORD *)(v10 + 64) = v11;
  v18 += 88;
  sub_19BFCE408(a1, &v16);
  v14 = a1[1];
  sub_19BFCE50C((uint64_t)&v16);
  return v14;
}

void sub_19BFCE3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFCE50C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19BFCE3C0(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL)
    sub_19BF8E6D0();
  return operator new(88 * a1);
}

uint64_t *sub_19BFCE408(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      result = (uint64_t *)sub_19BF86B60(v6 + v7 - 88, (unsigned __int16 *)(v4 + v7 - 88));
      v9 = *(_OWORD *)(v4 + v7 - 56);
      v10 = *(_OWORD *)(v4 + v7 - 40);
      v11 = *(_OWORD *)(v4 + v7 - 24);
      *(_WORD *)(v8 - 8) = *(_WORD *)(v4 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v11;
      *(_OWORD *)(v8 - 40) = v10;
      *(_OWORD *)(v8 - 56) = v9;
      v7 -= 88;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v12 = *v3;
  *v3 = v6;
  a2[1] = v12;
  v13 = v3[1];
  v3[1] = a2[2];
  a2[2] = v13;
  v14 = v3[2];
  v3[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19BFCE50C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 88;
      *(_QWORD *)(a1 + 16) = v2 - 88;
      v5 = *(void **)(v2 - 80);
      if (v5 && *(_BYTE *)(v2 - 82) == 1)
      {
        free(v5);
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19BFCE574(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E3D136F0;
  if (*(unsigned __int16 *)(a1 + 176) >= 0xFu)
  {
    v2 = *(_QWORD *)(a1 + 184);
    if (v2)
      MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  }
  if (*(unsigned __int16 *)(a1 + 152) >= 0xFu)
  {
    v3 = *(_QWORD *)(a1 + 160);
    if (v3)
      MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  }
  v4 = *(void **)(a1 + 128);
  if (v4 && *(_BYTE *)(a1 + 126) == 1)
    free(v4);
  sub_19BFC7E88((uint64_t *)(a1 + 112), 0);
  sub_19BFC72B0(a1 + 56);
  sub_19BFC72B0(a1 + 16);
  return a1;
}

void sub_19BFCE628(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E3D136F0;
  if (*(unsigned __int16 *)(a1 + 176) >= 0xFu)
  {
    v2 = *(_QWORD *)(a1 + 184);
    if (v2)
      MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  }
  if (*(unsigned __int16 *)(a1 + 152) >= 0xFu)
  {
    v3 = *(_QWORD *)(a1 + 160);
    if (v3)
      MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  }
  v4 = *(void **)(a1 + 128);
  if (v4 && *(_BYTE *)(a1 + 126) == 1)
    free(v4);
  sub_19BFC7E88((uint64_t *)(a1 + 112), 0);
  sub_19BFC72B0(a1 + 56);
  sub_19BFC72B0(a1 + 16);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFCE6EC(uint64_t a1, unsigned __int16 *a2)
{
  size_t v4;
  size_t v5;
  uint64_t v6;
  int v7;
  double v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  float v15;
  int v16;
  double v17;
  uint64_t Instance;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  __int128 v30;
  char v31;
  __int128 v32;
  int v33;
  _BYTE v34[40];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  __int128 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  sub_19C028E38((uint64_t)v34, a1 + 16);
  v4 = *(unsigned __int16 *)(a1 + 152);
  if (v4 < 0xF)
  {
    v30 = *(_OWORD *)(a1 + 152);
  }
  else
  {
    LOWORD(v30) = *(_WORD *)(a1 + 152);
    *((_QWORD *)&v30 + 1) = operator new[]();
    memcpy(*((void **)&v30 + 1), *(const void **)(a1 + 160), v4);
  }
  v5 = *(unsigned __int16 *)(a1 + 176);
  v31 = *(_BYTE *)(a1 + 168);
  if (v5 < 0xF)
  {
    v32 = *(_OWORD *)(a1 + 176);
  }
  else
  {
    LOWORD(v32) = v5;
    *((_QWORD *)&v32 + 1) = operator new[]();
    memcpy(*((void **)&v32 + 1), *(const void **)(a1 + 184), v5);
  }
  v33 = *(_DWORD *)(a1 + 192);
  if (*((_QWORD *)a2 + 1))
    v6 = *((_QWORD *)a2 + 1);
  else
    v6 = (uint64_t)(a2 + 8);
  v26 = v6;
  v7 = *a2;
  v27 = 0;
  v28 = v7;
  v29 = 0;
  sub_19BF8BB80(&v26);
  v22 = v6;
  v23 = v7;
  v24 = v7;
  v25 = 0;
  sub_19BF8BB80(&v22);
  v8 = 0.0;
  while (1)
  {
    if (v26 != v22)
      __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
    if (v27 == v23)
      break;
    v9 = v29;
    sub_19BF8CC94((uint64_t)&v37, *(_QWORD *)(a1 + 8) + 8);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v37 + 16))(&v20, v37, v9);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (unsigned __int16)v30;
    sub_19BF8BF40((uint64_t)&v37, *(_QWORD *)(a1 + 8) + 28752, (uint64_t)&v30, v9, (unsigned __int16 *)&v20);
    if (v13 >= 0xF && *((_QWORD *)&v30 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v30 + 1), 0x1000C8077774924);
    v30 = v37;
    if ((unsigned __int16)v37 >= 0xFu)
      LOWORD(v37) = 0;
    v31 = v38;
    if ((unsigned __int16)v32 >= 0xFu && *((_QWORD *)&v32 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v32 + 1), 0x1000C8077774924);
    v32 = v39;
    if ((unsigned __int16)v39 >= 0xFu)
      LOWORD(v39) = 0;
    v33 = v40;
    if ((unsigned __int16)v37 >= 0xFu && *((_QWORD *)&v37 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v37 + 1), 0x1000C8077774924);
    while (sub_19C0281B8((uint64_t)v34) && v13 < (unsigned __int16)v30)
    {
      if ((unsigned __int16)v30 <= 0xEu)
        v14 = (char *)&v30 + 2;
      else
        v14 = (char *)*((_QWORD *)&v30 + 1);
      v15 = sub_19C02824C((uint64_t)v34, *(_QWORD *)(a1 + 8) + 8, v14[v13]);
      v8 = v8 + log10f(v15);
      ++v13;
    }
    v16 = sub_19C0281B8((uint64_t)v34);
    if ((unsigned __int16)v20 >= 0xFu && v21)
      MEMORY[0x1A1AD0CB8](v21, 0x1000C8077774924);
    if (!v16)
    {
      Instance = 0;
      goto LABEL_49;
    }
    sub_19BF8BB80(&v26);
  }
  if ((sub_19C0281B8((uint64_t)v34) & 1) == 0)
    __assert_rtn("create_child", "LXCursor.cpp", 170, "impl.valid()");
  sub_19BFF78D0((uint64_t)&v37, (unsigned __int16 *)(a1 + 120), (uint64_t)a2);
  v17 = *(double *)(a1 + 208);
  if (qword_1ED024388 != -1)
    dispatch_once(&qword_1ED024388, &unk_1E3D15BD0);
  Instance = _CFRuntimeCreateInstance();
  sub_19BFCF948(Instance + 16, *(_QWORD *)(a1 + 8), (uint64_t)v34, (unsigned __int16 *)&v37, (unsigned __int16 *)&v30, v8, v17 + v8);
  if (*((_QWORD *)&v37 + 1) && BYTE6(v37) == 1)
    free(*((void **)&v37 + 1));
LABEL_49:
  if ((unsigned __int16)v32 >= 0xFu && *((_QWORD *)&v32 + 1))
    MEMORY[0x1A1AD0CB8](*((_QWORD *)&v32 + 1), 0x1000C8077774924);
  if ((unsigned __int16)v30 >= 0xFu && *((_QWORD *)&v30 + 1))
    MEMORY[0x1A1AD0CB8](*((_QWORD *)&v30 + 1), 0x1000C8077774924);
  sub_19BFC7E88(&v36, 0);
  sub_19BFC72B0((uint64_t)&v35);
  sub_19BFC72B0((uint64_t)v34);
  return Instance;
}

void sub_19BFCEBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  if (a10 >= 0xFu)
  {
    if (a11)
      MEMORY[0x1A1AD0CB8](a11, 0x1000C8077774924);
  }
  sub_19BFCFAB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_19BFCEC94(uint64_t a1, uint64_t a2)
{
  return a2 + 16 == a1;
}

uint64_t sub_19BFCECA4(uint64_t a1)
{
  return sub_19C028884(a1 + 16);
}

uint64_t sub_19BFCECAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = v2 + 8;
  v4 = *(_DWORD *)(a1 + 104);
  if (v4 < 1)
  {
    v8 = a1 + 16;
    v6 = *(unsigned int *)(v2 + 14360);
    if ((_DWORD)v6 != -1)
    {
      v9 = &v8;
      if ((((uint64_t (*)(uint64_t **, uint64_t))off_1E3D17768[v6])(&v9, v3) & 1) != 0)
        return 1;
      v8 = a1 + 56;
      v7 = *(unsigned int *)(v2 + 28720);
      if ((_DWORD)v7 != -1)
      {
        v9 = &v8;
        return ((uint64_t (*)(uint64_t **, uint64_t))off_1E3D17768[v7])(&v9, v2 + 14368);
      }
    }
    sub_19BFC4E9C();
  }
  if (v4 == 2)
    return 1;
  result = *(_QWORD *)(a1 + 112);
  if (result)
    return sub_19C02058C(result, v3);
  return result;
}

void sub_19BFCED84(uint64_t a1, uint64_t a2)
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = sub_19BFCFB40;
  v2[3] = &unk_1E3D15B00;
  v2[4] = a2;
  sub_19BFCFBC8(a1, (uint64_t)v2);
}

uint64_t sub_19BFCEDD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 112);
  if (v3 && (sub_19C01F29C(v3, v2 + 8) & 1) != 0)
    return 1;
  v7 = a1 + 16;
  v4 = *(unsigned int *)(v2 + 14360);
  if ((_DWORD)v4 == -1)
    goto LABEL_9;
  v8 = &v7;
  if ((((uint64_t (*)(uint64_t **, uint64_t))off_1E3D17970[v4])(&v8, v2 + 8) & 1) != 0)
    return 1;
  v7 = a1 + 56;
  v6 = *(unsigned int *)(v2 + 28720);
  if ((_DWORD)v6 == -1)
LABEL_9:
    sub_19BFC4E9C();
  v8 = &v7;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1E3D17970[v6])(&v8, v2 + 14368);
}

void sub_19BFCEE94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[6];
  char v4;
  _QWORD v5[10];

  v4 = 0;
  v2 = *(_QWORD *)(a1 + 8) + 8;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = sub_19BFCF564;
  v3[3] = &unk_1E3D15AD8;
  v3[4] = a2;
  v3[5] = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = sub_19BFCF648;
  v5[3] = &unk_1E3D15B50;
  v5[6] = a1 + 152;
  v5[7] = a1 + 120;
  v5[8] = 0;
  v5[9] = &v4;
  v5[4] = v3;
  v5[5] = v2;
  sub_19C029024((int *)(a1 + 16), v2, (uint64_t)v5);
}

double sub_19BFCEF34(uint64_t a1)
{
  return *(double *)(a1 + 200);
}

double sub_19BFCEF3C(uint64_t a1)
{
  return *(double *)(a1 + 208);
}

double sub_19BFCEF44(uint64_t a1)
{
  float v1;

  v1 = sub_19C028F40(a1 + 16, *(_QWORD *)(a1 + 8) + 8);
  return log10f(v1);
}

uint64_t sub_19BFCEF70()
{
  return 0;
}

uint64_t sub_19BFCEF78()
{
  return 0;
}

const void *sub_19BFCEF80(uint64_t a1)
{
  const void *v1;
  const void *v3;

  sub_19BF8CFAC((CFStringRef *)&v3, (unsigned __int16 *)(a1 + 120));
  v1 = v3;
  v3 = 0;
  sub_19BF8DAB8(&v3);
  return v1;
}

uint64_t sub_19BFCEFC0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 192);
}

uint64_t sub_19BFCEFC8(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (*(int *)(a1 + 104) > 0)
    return 0;
  v3 = *(_QWORD *)(a1 + 8);
  v6 = a1 + 16;
  v4 = *(unsigned int *)(v3 + 14360);
  if ((_DWORD)v4 == -1)
    goto LABEL_9;
  v7 = &v6;
  if ((((uint64_t (*)(uint64_t **, uint64_t))off_1E3D177D0[v4])(&v7, v3 + 8) & 1) != 0)
    return 1;
  v6 = a1 + 56;
  v5 = *(unsigned int *)(v3 + 28720);
  if ((_DWORD)v5 == -1)
LABEL_9:
    sub_19BFC4E9C();
  v7 = &v6;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1E3D177D0[v5])(&v7, v3 + 14368);
}

unint64_t sub_19BFCF084(uint64_t a1)
{
  size_t v2;
  void *v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v10;

  v2 = *(unsigned __int16 *)(a1 + 152);
  if (v2 < 0xF)
    v3 = (void *)(a1 + 154);
  else
    v3 = *(void **)(a1 + 160);
  sub_19BFA4428(__p, v3, v2);
  if ((v10 & 0x80u) == 0)
    v4 = (uint64_t *)__p;
  else
    v4 = (uint64_t *)__p[0];
  if ((v10 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (unint64_t)__p[1];
  v6 = sub_19BFCF130(v4, v5);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
  if ((char)v10 < 0)
    operator delete(__p[0]);
  return v7 ^ v6;
}

void sub_19BFCF114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_19BFCF130(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v72;
  unint64_t v73;

  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      v8 = a1[2];
      v7 = a1[3];
      v9 = __ROR8__(v6 + v7, 52);
      v10 = v6 + a1[1];
      v11 = __ROR8__(v10, 7);
      v12 = v10 + v8;
      v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      v15 = __ROR8__(v14 + v13, 52);
      v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      v17 = __ROR8__(v13, 37);
      v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      v19 = __ROR8__(v18, 7);
      v20 = v16 + __ROR8__(v12, 31);
      v21 = v18 + v5;
      v22 = v21 + v14;
      v23 = 0x9AE16A3B2F90404FLL;
      v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    v4 = 0x9DDFEA08EB382D69;
    v32 = *(uint64_t *)((char *)a1 + a2 - 48);
    v33 = *(uint64_t *)((char *)a1 + a2 - 40);
    v34 = *(uint64_t *)((char *)a1 + a2 - 24);
    v36 = *(uint64_t *)((char *)a1 + a2 - 64);
    v35 = *(uint64_t *)((char *)a1 + a2 - 56);
    v37 = *(uint64_t *)((char *)a1 + a2 - 16);
    v38 = *(uint64_t *)((char *)a1 + a2 - 8);
    v39 = v35 + v37;
    v40 = 0x9DDFEA08EB382D69
        * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))));
    v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
    v42 = v36 + a2 + v35 + v32;
    v43 = v42 + v33;
    v44 = __ROR8__(v42, 44) + v36 + a2 + __ROR8__(v33 + v36 + a2 - 0x622015F714C7D297 * (v40 ^ (v40 >> 47)), 21);
    v45 = v35 + v37 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    v46 = v45 + v34 + v37;
    v47 = __ROR8__(v46, 44);
    v48 = v46 + v38;
    v49 = v47 + v45 + __ROR8__(v45 + v33 + v38, 21);
    v51 = *a1;
    v50 = a1 + 4;
    v52 = v51 - 0x4B6D499041670D8DLL * v33;
    v53 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v54 = *(v50 - 3);
      v55 = v52 + v43 + v39 + v54;
      v56 = v50[2];
      v57 = v50[3];
      v58 = v50[1];
      v39 = v58 + v43 - 0x4B6D499041670D8DLL * __ROR8__(v39 + v44 + v56, 42);
      v59 = v41 + v48;
      v60 = *(v50 - 2);
      v61 = *(v50 - 1);
      v62 = *(v50 - 4) - 0x4B6D499041670D8DLL * v44;
      v63 = v62 + v48 + v61;
      v64 = v62 + v54 + v60;
      v43 = v64 + v61;
      v65 = __ROR8__(v64, 44) + v62;
      v66 = (0xB492B66FBE98F273 * __ROR8__(v55, 37)) ^ v49;
      v52 = 0xB492B66FBE98F273 * __ROR8__(v59, 33);
      v44 = v65 + __ROR8__(v63 + v66, 21);
      v67 = v52 + v49 + *v50;
      v48 = v67 + v58 + v56 + v57;
      v49 = __ROR8__(v67 + v58 + v56, 44) + v67 + __ROR8__(v39 + v60 + v67 + v57, 21);
      v50 += 8;
      v41 = v66;
      v53 += 64;
    }
    while (v53);
    v68 = v52
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47));
    v69 = 0x9DDFEA08EB382D69
        * (v68 ^ (v66
                - 0x4B6D499041670D8DLL * (v39 ^ (v39 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) ^ ((0x9DDFEA08EB382D69 * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) >> 47))));
    v70 = 0x9DDFEA08EB382D69 * (v68 ^ (v69 >> 47) ^ v69);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    v26 = a1[1];
    v27 = 0xB492B66FBE98F273 * *a1;
    v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    v23 = 0x9DDFEA08EB382D69;
    v30 = 0x9DDFEA08EB382D69 * (v29 ^ (v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)));
    v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 < 9)
  {
    if (a2 >= 4)
    {
      v72 = *(unsigned int *)((char *)a1 + a2 - 4);
      v23 = 0x9DDFEA08EB382D69;
      v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
      v31 = v72 ^ (v73 >> 47) ^ v73;
      goto LABEL_8;
    }
    v4 = 0x9AE16A3B2F90404FLL;
    if (!a2)
      return v4;
    v70 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v4 *= v70 ^ (v70 >> 47);
    return v4;
  }
  v2 = *(uint64_t *)((char *)a1 + a2 - 8);
  v3 = __ROR8__(v2 + a2, a2);
  return (0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
}

void sub_19BFCF564(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, double a5)
{
  uint64_t v10;
  double v11;
  const void *Instance;

  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(double *)(v10 + 208);
  if (qword_1ED024388 != -1)
    dispatch_once(&qword_1ED024388, &unk_1E3D15BD0);
  Instance = (const void *)_CFRuntimeCreateInstance();
  sub_19BFCF948((uint64_t)Instance + 16, *(_QWORD *)(v10 + 8), a2, a3, a4, a5, v11 + a5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  CFRelease(Instance);
}

void sub_19BFCF648(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float v15;
  float v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  uint64_t (*v24)();
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  sub_19C0166CC(&v17, *(_QWORD *)(a1 + 40) + 28744, *(unsigned __int16 **)(a1 + 48), *(unsigned __int8 *)(a2 + 84));
  if (v21 == -1)
  {
    sub_19C0166CC((unsigned __int16 *)&v22, *(_QWORD *)(a1 + 40) + 28744, *(unsigned __int16 **)(a1 + 48), *(unsigned __int8 *)(a2 + 84));
    if ((unsigned __int16)v25 >= 0xFu && v26)
      MEMORY[0x1A1AD0CB8](v26, 0x1000C8077774924);
    if ((unsigned __int16)v22 >= 0xFu && v23)
      MEMORY[0x1A1AD0CB8](v23, 0x1000C8077774924);
  }
  else if (v21 == -2)
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(double *)(a1 + 64);
    v9 = sub_19C0287A8(a2, v6);
    v10 = log10f(v9);
    v11 = *(_QWORD *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 32);
    v22 = MEMORY[0x1E0C809B0];
    v23 = (void *)0x40000000;
    v24 = sub_19BFCF648;
    v25 = &unk_1E3D15B50;
    v28 = &v17;
    v29 = v7;
    v30 = v8 + v10;
    v31 = v11;
    v26 = v12;
    v27 = v6;
    sub_19C029024((int *)a2, v6, (uint64_t)&v22);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 32);
    sub_19BFF782C((uint64_t)&v22, *(unsigned __int16 **)(a1 + 56), v21);
    v14 = *(double *)(a1 + 64);
    v15 = sub_19C0287A8(a2, *(_QWORD *)(a1 + 40));
    v16 = log10f(v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, unsigned __int16 *, _QWORD, double))(v13 + 16))(v13, a2, &v22, &v17, *(_QWORD *)(a1 + 72), v14 + v16);
    if (v23 && BYTE6(v22) == 1)
      free(v23);
  }
  *a3 = **(_BYTE **)(a1 + 72) != 0;
  if (v19 >= 0xFu && v20)
    MEMORY[0x1A1AD0CB8](v20, 0x1000C8077774924);
  if (v17 >= 0xFu)
  {
    if (v18)
      MEMORY[0x1A1AD0CB8](v18, 0x1000C8077774924);
  }
}

void sub_19BFCF894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  sub_19BFCF8D8(&a10);
  _Unwind_Resume(a1);
}

unsigned __int16 *sub_19BFCF8D8(unsigned __int16 *a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1[12] >= 0xFu)
  {
    v2 = *((_QWORD *)a1 + 4);
    if (v2)
      MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  }
  if (*a1 >= 0xFu)
  {
    v3 = *((_QWORD *)a1 + 1);
    if (v3)
      MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  }
  return a1;
}

uint64_t sub_19BFCF948(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5, double a6, double a7)
{
  _OWORD *v12;
  unint64_t v13;
  void *v14;
  _OWORD *v15;
  unint64_t v16;
  void *v17;

  *(_QWORD *)a1 = &off_1E3D136F0;
  *(_QWORD *)(a1 + 8) = a2;
  sub_19C028E38(a1 + 16, a3);
  sub_19BF86B60(a1 + 120, a4);
  v12 = (_OWORD *)(a1 + 152);
  v13 = *a5;
  if (v13 < 0xF)
  {
    *v12 = *(_OWORD *)a5;
  }
  else
  {
    *(_WORD *)v12 = v13;
    v14 = (void *)operator new[]();
    *(_QWORD *)(a1 + 160) = v14;
    memcpy(v14, *((const void **)a5 + 1), *(unsigned __int16 *)(a1 + 152));
  }
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a5 + 16);
  v15 = (_OWORD *)(a1 + 176);
  v16 = a5[12];
  if (v16 < 0xF)
  {
    *v15 = *(_OWORD *)(a5 + 12);
  }
  else
  {
    *(_WORD *)v15 = v16;
    v17 = (void *)operator new[]();
    *(_QWORD *)(a1 + 184) = v17;
    memcpy(v17, *((const void **)a5 + 4), *(unsigned __int16 *)(a1 + 176));
  }
  *(_DWORD *)(a1 + 192) = *((_DWORD *)a5 + 10);
  *(double *)(a1 + 200) = a6;
  *(double *)(a1 + 208) = a7;
  return a1;
}

void sub_19BFCFA50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v5;
  void *v6;

  if (*v3 >= 0xFu)
  {
    v5 = *(_QWORD *)(v1 + 160);
    if (v5)
      MEMORY[0x1A1AD0CB8](v5, 0x1000C8077774924);
  }
  v6 = *(void **)(v1 + 128);
  if (v6)
  {
    if (*(_BYTE *)(v1 + 126) == 1)
      free(v6);
  }
  sub_19BFCFAB4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFCFAB4(uint64_t a1)
{
  sub_19BFC7E88((uint64_t *)(a1 + 96), 0);
  sub_19BFC72B0(a1 + 40);
  return sub_19BFC72B0(a1);
}

uint64_t sub_19BFCFAE8()
{
  uint64_t result;

  qword_1ED024390 = 0;
  *(_QWORD *)algn_1ED024398 = "LXCursor";
  qword_1ED0243A0 = 0;
  unk_1ED0243A8 = 0;
  qword_1ED0243B0 = (uint64_t)sub_19BFCFB34;
  unk_1ED0243B8 = 0u;
  unk_1ED0243C8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0243F0 = result;
  return result;
}

uint64_t sub_19BFCFB34(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 16))(a1 + 16);
}

void sub_19BFCFB40(uint64_t a1, uint64_t a2, double a3)
{
  const void *v4;
  double v5;

  v5 = a3;
  v4 = (const void *)sub_19BFD0030(a2, (uint64_t *)&v5);
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  if (v4)
    CFRelease(v4);
}

void sub_19BFCFBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_19BFAC558(&a9, 0);
  _Unwind_Resume(a1);
}

void sub_19BFCFBC8(uint64_t a1, uint64_t a2)
{
  void **v2;
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void **v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  void ***v34;
  unsigned __int16 *v35;
  void **v36;
  void **v37;
  void ***v38;
  void ***v39;

  v2 = (void **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (unsigned __int16 *)(a1 + 152);
  v36 = (void **)(a1 + 16);
  v37 = (void **)(a1 + 152);
  v5 = *(unsigned int *)(v3 + 14360);
  if ((_DWORD)v5 == -1)
    sub_19BFC4E9C();
  v8 = v3 + 8;
  v34 = &v36;
  ((void (*)(uint64_t *__return_ptr, void ****, uint64_t))off_1E3D17838[v5])(&v32, &v34, v3 + 8);
  v9 = sub_19C028F40((uint64_t)v2, v3 + 8);
  v10 = sub_19C02837C((uint64_t)v2, v3 + 8);
  if (v9 > 0.0)
  {
    v34 = (void ***)v2;
    v11 = *(unsigned int *)(v3 + 14360);
    if ((_DWORD)v11 == -1)
      sub_19BFC4E9C();
    v36 = (void **)&v34;
    v10 = (float)(v10 * ((float (*)(void ***, uint64_t))off_1E3D17700[v11])(&v36, v3 + 8)) / v9;
  }
  if ((LODWORD(v10) & 0x7FFFFFFFu) >= 0x7F800000)
    __assert_rtn("probability_of_baseline_given_termination", "TIStaticDictionaryImplCursor.cpp", 124, "isfinite(result)");
  v12 = v32;
  v13 = v33;
  while (v12 != v13)
  {
    *(float *)(v12 + 32) = v10 * *(float *)(v12 + 32);
    v12 += 88;
  }
  v34 = (void ***)(a1 + 56);
  v35 = v4;
  v14 = *(unsigned int *)(v3 + 28720);
  if ((_DWORD)v14 == -1)
    sub_19BFC4E9C();
  v38 = (void ***)&v34;
  ((void (*)(void ***__return_ptr, void ****, uint64_t))off_1E3D17838[v14])(&v36, &v38, v3 + 14368);
  v15 = v36;
  v16 = (uint64_t)v37;
  if (v36 != v37)
  {
    v17 = v36;
    do
    {
      *((float *)v17 + 8) = (float)(1.0 - v10) * *((float *)v17 + 8);
      v17 += 11;
    }
    while (v17 != (void **)v16);
  }
  sub_19BFCE178((uint64_t)&v32, (uint64_t)v15, v16);
  if (*(int *)(a1 + 104) > 0)
  {
    v18 = *(unsigned int **)(v3 + 30128);
    if (!v18)
      __assert_rtn("derive_words", "TIStaticDictionaryImplCursor.cpp", 347, "converter");
    v19 = v32;
    v20 = v33;
    while (v19 != v20)
    {
      if ((*(_BYTE *)(v19 + 59) & 0x20) != 0 || (sub_19BFE9A7C(v18, *(_DWORD *)(v19 + 60), 0, 0) & 1) != 0)
      {
        if (v19 != v20)
        {
          v21 = v19 + 88;
          if (v19 + 88 != v20)
          {
            do
            {
              if ((*(_BYTE *)(v21 + 59) & 0x20) == 0 && (sub_19BFE9A7C(v18, *(_DWORD *)(v21 + 60), 0, 0) & 1) == 0)
              {
                sub_19BF8A370(v19, (unsigned __int16 *)v21);
                v22 = *(_OWORD *)(v21 + 32);
                v23 = *(_OWORD *)(v21 + 48);
                v24 = *(_OWORD *)(v21 + 64);
                *(_WORD *)(v19 + 80) = *(_WORD *)(v21 + 80);
                *(_OWORD *)(v19 + 48) = v23;
                *(_OWORD *)(v19 + 64) = v24;
                *(_OWORD *)(v19 + 32) = v22;
                v19 += 88;
              }
              v21 += 88;
            }
            while (v21 != v20);
            v20 = v33;
          }
        }
        if (v19 != v20)
        {
          while (v20 != v19)
          {
            v25 = *(void **)(v20 - 80);
            if (v25 && *(_BYTE *)(v20 - 82) == 1)
              free(v25);
            v20 -= 88;
          }
          v33 = v19;
        }
        break;
      }
      v19 += 88;
    }
    v26 = *(_QWORD *)(a1 + 112);
    if (v26)
    {
      sub_19C01F780(&v34, v26, v8, v4);
      sub_19BFCE178((uint64_t)&v32, (uint64_t)v34, (uint64_t)v35);
      v39 = (void ***)&v34;
      sub_19BFC70A0((void ***)&v39);
    }
  }
  v34 = &v36;
  sub_19BFC70A0((void ***)&v34);
  LOBYTE(v36) = 0;
  v27 = v32;
  v28 = v33;
  while (v27 != v28)
  {
    v29 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    v30 = v29 + (*(double (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v31 = log10f(*(float *)(v27 + 32));
    (*(void (**)(uint64_t, uint64_t, void ***, double))(a2 + 16))(a2, v27, &v36, v30 + v31);
    if ((_BYTE)v36)
      break;
    v27 += 88;
  }
  v36 = (void **)&v32;
  sub_19BFC70A0(&v36);
}

void sub_19BFCFFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void ***a20)
{
  a20 = &a13;
  sub_19BFC70A0((void ***)&a20);
  a13 = (void **)&a16;
  sub_19BFC70A0(&a13);
  a20 = (void ***)&a10;
  sub_19BFC70A0((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFD0030(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (qword_1ED024268 != -1)
    dispatch_once(&qword_1ED024268, &unk_1E3D15C10);
  Instance = _CFRuntimeCreateInstance();
  v5 = *a2;
  sub_19BF86B60(Instance + 16, (unsigned __int16 *)a1);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  v8 = *(_OWORD *)(a1 + 64);
  *(_WORD *)(Instance + 96) = *(_WORD *)(a1 + 80);
  *(_OWORD *)(Instance + 64) = v7;
  *(_OWORD *)(Instance + 80) = v8;
  *(_OWORD *)(Instance + 48) = v6;
  *(_QWORD *)(Instance + 104) = v5;
  *(_QWORD *)(Instance + 112) = 0;
  *(_DWORD *)(Instance + 120) = 0;
  return Instance;
}

uint64_t sub_19BFD00F8()
{
  uint64_t result;

  qword_1ED024270 = 0;
  *(_QWORD *)algn_1ED024278 = "LXEntry";
  qword_1ED024280 = 0;
  unk_1ED024288 = 0;
  qword_1ED024290 = (uint64_t)sub_19BFD0144;
  unk_1ED024298 = 0u;
  unk_1ED0242A8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0242D0 = result;
  return result;
}

void sub_19BFD0144(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 22) == 1)
      free(v2);
  }
}

uint64_t sub_19BFD0164(uint64_t result, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[6];
  _QWORD v8[6];

  v5 = result;
  v6 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = sub_19BFD0228;
  v8[3] = &unk_1E3D15A38;
  v8[4] = a3;
  v8[5] = a2;
  if (result)
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(result + 16) + 48))(result + 16, v8);
  if (!*a2)
  {
    v7[0] = v6;
    v7[1] = 0x40000000;
    v7[2] = sub_19BFD0260;
    v7[3] = &unk_1E3D15A60;
    v7[4] = a3;
    v7[5] = a2;
    if (v5)
      return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(v5 + 16) + 64))(v5 + 16, v7);
  }
  return result;
}

uint64_t sub_19BFD0228(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  **(_BYTE **)(a1 + 40) = *a3;
  return result;
}

uint64_t sub_19BFD0260(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = sub_19BFD0164(a2, a3, *(_QWORD *)(a1 + 32));
  **(_BYTE **)(a1 + 40) = *a3;
  return result;
}

uint64_t LXCursorEnumerateEntries(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 48))(result + 16);
  return result;
}

uint64_t LXCursorEnumerateChildren(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 64))(result + 16);
  return result;
}

void sub_19BFD02C4(const void *a1, uint64_t a2)
{
  CFTypeRef v3;
  CFTypeRef v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  CFTypeRef *v17;
  CFTypeRef *v18;
  _QWORD *v19;
  uint64_t v20;
  CFTypeRef v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  double v30;
  double v31;
  CFTypeRef *v32;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  const void *v48;
  int v49;
  CFTypeRef *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  CFTypeRef *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  _QWORD *v77;
  uint64_t v78;
  CFTypeRef v79;
  uint64_t v80;
  CFTypeRef *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, CFTypeRef);
  void *v86;
  uint64_t *v87;
  _QWORD v88[5];
  CFTypeRef cf;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  __n128 (*v94)(_QWORD *, uint64_t);
  void (*v95)(uint64_t);
  void *__p;
  void *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  __n128 (*v103)(_QWORD *, uint64_t);
  void (*v104)(uint64_t);
  char *v105;
  char *v106;
  unint64_t v107;
  void *v108;
  const void *v109;

  v100 = 0;
  v101 = &v100;
  v102 = 0x4802000000;
  v103 = sub_19BFD0AA4;
  v104 = sub_19BFD0AD0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = &unk_19C066017;
  v91 = 0;
  v92 = &v91;
  v93 = 0x4802000000;
  v94 = sub_19BFD0AE8;
  v95 = sub_19BFD0B14;
  __p = 0;
  v97 = 0;
  v98 = 0;
  v99 = &unk_19C066018;
  v3 = CFRetain(a1);
  v4 = v3;
  v5 = v106;
  if ((unint64_t)v106 >= v107)
  {
    v7 = (v106 - v105) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_19BF8EB40();
    v8 = (uint64_t)(v107 - (_QWORD)v105) >> 2;
    if (v8 <= v7 + 1)
      v8 = v7 + 1;
    if (v107 - (unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
      v9 = (unint64_t)sub_19BFAC524(v9);
    else
      v10 = 0;
    v11 = (char *)(v9 + 8 * v7);
    v12 = v9 + 8 * v10;
    *(_QWORD *)v11 = v4;
    v6 = (uint64_t)(v11 + 8);
    v14 = v105;
    v13 = v106;
    if (v106 != v105)
    {
      do
      {
        v15 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *((_QWORD *)v11 - 1) = v15;
        v11 -= 8;
      }
      while (v13 != v14);
      v13 = v105;
    }
    v105 = v11;
    v106 = (char *)v6;
    v107 = v12;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *(_QWORD *)v106 = v3;
    v6 = (uint64_t)(v5 + 8);
  }
  v106 = (char *)v6;
  sub_19BFD0B2C((uint64_t)v105, v6, (v6 - (uint64_t)v105) >> 3);
  v90 = 0;
  v16 = v101;
  v17 = (CFTypeRef *)v101[5];
  v19 = v101 + 6;
  v18 = (CFTypeRef *)v101[6];
  if (v17 != v18)
  {
    v20 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v21 = *v17;
      cf = *v17;
      v22 = (char *)v18 - (char *)v17;
      if ((char *)v18 - (char *)v17 >= 9)
        break;
LABEL_34:
      *v19 -= 8;
      v88[0] = v20;
      v88[1] = 0x40000000;
      v88[2] = sub_19BFD0C44;
      v88[3] = &unk_1E3D15A88;
      v88[4] = &v91;
      if (cf)
      {
        v33 = (char *)cf + 16;
        (*(void (**)(char *, _QWORD *))(*((_QWORD *)cf + 2) + 48))((char *)cf + 16, v88);
        v83 = v20;
        v84 = 0x40000000;
        v85 = sub_19BFD0D48;
        v86 = &unk_1E3D15AB0;
        v87 = &v100;
        (*(void (**)(char *, uint64_t *))(*(_QWORD *)v33 + 64))(v33, &v83);
      }
      else
      {
        v83 = v20;
        v84 = 0x40000000;
        v85 = sub_19BFD0D48;
        v86 = &unk_1E3D15AB0;
        v87 = &v100;
      }
      v34 = v92;
      v35 = v101;
      do
      {
        v36 = v34[5];
        v37 = v34[6];
        if (v36 == v37)
          break;
        v38 = v35[5];
        if (v38 != v35[6])
        {
          v39 = *(double *)(*(_QWORD *)v36 + 104);
          if (v39 >= (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)v38 + 16) + 80))(*(_QWORD *)v38 + 16))
          {
            v36 = v34[5];
            v37 = v34[6];
          }
          else
          {
            if ((unint64_t)(v35[6] - v35[5]) < 0x27101)
              break;
            v36 = v34[5];
            v37 = v34[6];
            if ((unint64_t)(v37 - v36) < 0x3E81)
              break;
          }
        }
        v40 = *(_QWORD *)v36;
        v109 = *(const void **)v36;
        if (v37 - v36 >= 9)
        {
          v41 = 0;
          v42 = (v37 - v36) >> 3;
          v43 = (_QWORD *)v36;
          do
          {
            v44 = v43;
            v43 += v41 + 1;
            v45 = 2 * v41;
            v41 = (2 * v41) | 1;
            v46 = v45 + 2;
            if (v46 < v42 && *(double *)(*v43 + 104) < *(double *)(v43[1] + 104))
            {
              ++v43;
              v41 = v46;
            }
            *v44 = *v43;
          }
          while (v41 <= (uint64_t)((unint64_t)(v42 - 2) >> 1));
          v47 = (_QWORD *)(v37 - 8);
          if (v43 == v47)
          {
            *v43 = v40;
          }
          else
          {
            *v43 = *v47;
            *v47 = v40;
            sub_19BFD0E30(v36, (uint64_t)(v43 + 1), ((uint64_t)v43 - v36 + 8) >> 3);
          }
        }
        v34[6] -= 8;
        v48 = v109;
        (*(void (**)(uint64_t, const void *, unsigned __int8 *))(a2 + 16))(a2, v109, &v90);
        v49 = v90;
        if (v48)
          CFRelease(v48);
      }
      while (!v49);
      if (cf)
        CFRelease(cf);
      v16 = v101;
      v17 = (CFTypeRef *)v101[5];
      v19 = v101 + 6;
      v18 = (CFTypeRef *)v101[6];
      if (v17 == v18 || v90 != 0)
        goto LABEL_63;
    }
    v79 = v21;
    v81 = v18;
    v23 = 0;
    v24 = v22 >> 3;
    v25 = (unint64_t)((v22 >> 3) - 2) >> 1;
    v78 = (uint64_t)v17;
    while (1)
    {
      v26 = (uint64_t)&v17[v23 + 1];
      v27 = (2 * v23) | 1;
      v28 = 2 * v23 + 2;
      if (v28 < v24)
        break;
LABEL_29:
      *v17 = *(CFTypeRef *)v26;
      v17 = (CFTypeRef *)v26;
      v23 = v27;
      if (v27 > v25)
      {
        v32 = v81 - 1;
        if ((CFTypeRef *)v26 == v81 - 1)
        {
          *(_QWORD *)v26 = v79;
        }
        else
        {
          *(_QWORD *)v26 = *v32;
          *v32 = v79;
          sub_19BFD0B2C(v78, v26 + 8, (v26 + 8 - v78) >> 3);
        }
        v20 = MEMORY[0x1E0C809B0];
        goto LABEL_34;
      }
    }
    v29 = v17[v23 + 2];
    if (*(_QWORD *)v26)
    {
      v30 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)v26 + 16) + 80))(*(_QWORD *)v26 + 16);
      if (v29)
      {
LABEL_24:
        (*(void (**)(_QWORD *))(v29[2] + 80))(v29 + 2);
        goto LABEL_27;
      }
    }
    else
    {
      v30 = -INFINITY;
      if (v29)
        goto LABEL_24;
    }
    v31 = -INFINITY;
LABEL_27:
    if (v30 < v31)
    {
      v26 += 8;
      v27 = v28;
    }
    goto LABEL_29;
  }
LABEL_63:
  v51 = (CFTypeRef *)v92[5];
  if (v51 != (CFTypeRef *)v92[6])
  {
    do
    {
      CFRelease(*v51);
      v52 = v92;
      v53 = (uint64_t *)v92[5];
      v54 = v92[6];
      if (v54 - (uint64_t)v53 >= 9)
      {
        v55 = 0;
        v56 = (v54 - (uint64_t)v53) >> 3;
        v57 = *v53;
        v58 = (_QWORD *)v92[5];
        do
        {
          v59 = v58;
          v58 += v55 + 1;
          v60 = 2 * v55;
          v55 = (2 * v55) | 1;
          v61 = v60 + 2;
          if (v61 < v56 && *(double *)(*v58 + 104) < *(double *)(v58[1] + 104))
          {
            ++v58;
            v55 = v61;
          }
          *v59 = *v58;
        }
        while (v55 <= (uint64_t)((unint64_t)(v56 - 2) >> 1));
        v62 = (_QWORD *)(v54 - 8);
        if (v58 == v62)
        {
          *v58 = v57;
        }
        else
        {
          *v58 = *v62;
          *v62 = v57;
          sub_19BFD0E30((uint64_t)v53, (uint64_t)(v58 + 1), v58 + 1 - v53);
        }
      }
      v52[6] -= 8;
      v51 = (CFTypeRef *)v92[5];
    }
    while (v51 != (CFTypeRef *)v92[6]);
    goto LABEL_76;
  }
LABEL_77:
  v63 = (CFTypeRef *)v16[5];
  if (v63 != (CFTypeRef *)v16[6])
  {
    CFRelease(*v63);
    v64 = v101;
    v65 = (uint64_t *)v101[5];
    v66 = v101[6] - (_QWORD)v65;
    if (v66 < 9)
      goto LABEL_92;
    v80 = v101[6];
    v67 = 0;
    v68 = v66 >> 3;
    v82 = *v65;
    v69 = (unint64_t)((v66 >> 3) - 2) >> 1;
    v70 = (_QWORD *)v101[5];
    while (1)
    {
      v71 = (uint64_t)&v70[v67 + 1];
      v72 = (2 * v67) | 1;
      v73 = 2 * v67 + 2;
      if (v73 < v68)
        break;
LABEL_88:
      *v70 = *(_QWORD *)v71;
      v70 = (_QWORD *)v71;
      v67 = v72;
      if (v72 > v69)
      {
        v77 = (_QWORD *)(v80 - 8);
        if (v71 == v80 - 8)
        {
          *(_QWORD *)v71 = v82;
        }
        else
        {
          *(_QWORD *)v71 = *v77;
          *v77 = v82;
          sub_19BFD0B2C((uint64_t)v65, v71 + 8, (v71 + 8 - (uint64_t)v65) >> 3);
        }
LABEL_92:
        v64[6] -= 8;
LABEL_76:
        v16 = v101;
        goto LABEL_77;
      }
    }
    v74 = v70[v67 + 2];
    if (*(_QWORD *)v71)
    {
      v75 = (*(double (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)v71 + 16) + 80))(*(_QWORD *)v71 + 16);
      if (v74)
      {
LABEL_83:
        (*(void (**)(uint64_t))(*(_QWORD *)(v74 + 16) + 80))(v74 + 16);
        goto LABEL_86;
      }
    }
    else
    {
      v75 = -INFINITY;
      if (v74)
        goto LABEL_83;
    }
    v76 = -INFINITY;
LABEL_86:
    if (v75 < v76)
    {
      v71 += 8;
      v72 = v73;
    }
    goto LABEL_88;
  }
  _Block_object_dispose(&v91, 8);
  if (__p)
  {
    v97 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v100, 8);
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
}

__n128 sub_19BFD0AA4(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  a1[8] = *(_QWORD *)(a2 + 64);
  return result;
}

void sub_19BFD0AD0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 sub_19BFD0AE8(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  a1[8] = *(_QWORD *)(a2 + 64);
  return result;
}

void sub_19BFD0B14(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_19BFD0B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  double v14;
  double v15;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = v3 >> 1;
    v6 = (uint64_t *)(a1 + 8 * (v3 >> 1));
    v7 = (uint64_t *)(a2 - 8);
    v8 = *(_QWORD *)(a2 - 8);
    if (*v6)
    {
      v9 = (*(double (**)(uint64_t))(*(_QWORD *)(*v6 + 16) + 80))(*v6 + 16);
      if (v8)
      {
LABEL_4:
        (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 16) + 80))(v8 + 16);
LABEL_7:
        if (v9 >= v10)
          return;
        v11 = *v7;
        v12 = *v7 + 16;
        while (1)
        {
          v13 = v6;
          *v7 = *v6;
          if (!v5)
          {
LABEL_16:
            *v13 = v11;
            return;
          }
          v5 = (v5 - 1) >> 1;
          v6 = (uint64_t *)(a1 + 8 * v5);
          if (*v6)
          {
            v14 = (*(double (**)(uint64_t))(*(_QWORD *)(*v6 + 16) + 80))(*v6 + 16);
            if (!v11)
              goto LABEL_14;
          }
          else
          {
            v14 = -INFINITY;
            if (!v11)
            {
LABEL_14:
              v15 = -INFINITY;
              goto LABEL_15;
            }
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12);
LABEL_15:
          v7 = v13;
          if (v14 >= v15)
            goto LABEL_16;
        }
      }
    }
    else
    {
      v9 = -INFINITY;
      if (v8)
        goto LABEL_4;
    }
    v10 = -INFINITY;
    goto LABEL_7;
  }
}

uint64_t sub_19BFD0C44(uint64_t a1, CFTypeRef cf)
{
  uint64_t *v2;
  CFTypeRef v3;
  CFTypeRef v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = CFRetain(cf);
  v4 = v3;
  v6 = (_QWORD *)v2[6];
  v5 = v2[7];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (_QWORD *)v2[5];
    v9 = v6 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_19BF8EB40();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_19BF8E6D0();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    *(_QWORD *)v14 = v4;
    v7 = (uint64_t)(v14 + 8);
    if (v6 != v8)
    {
      do
      {
        v15 = *--v6;
        *((_QWORD *)v14 - 1) = v15;
        v14 -= 8;
      }
      while (v6 != v8);
      v6 = (_QWORD *)v2[5];
    }
    v2[5] = (uint64_t)v14;
    v2[6] = v7;
    v2[7] = (uint64_t)&v13[8 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = v3;
    v7 = (uint64_t)(v6 + 1);
  }
  v2[6] = v7;
  return sub_19BFD0E30(v2[5], v7, (v7 - v2[5]) >> 3);
}

void sub_19BFD0D48(uint64_t a1, CFTypeRef cf)
{
  uint64_t *v2;
  CFTypeRef v3;
  CFTypeRef v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = CFRetain(cf);
  v4 = v3;
  v6 = (_QWORD *)v2[6];
  v5 = v2[7];
  if ((unint64_t)v6 >= v5)
  {
    v8 = v2[5];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_19BF8EB40();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)sub_19BFAC524(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    *v14 = v4;
    v7 = (uint64_t)(v14 + 1);
    v17 = (char *)v2[5];
    v16 = (char *)v2[6];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)v2[5];
    }
    v2[5] = (uint64_t)v14;
    v2[6] = v7;
    v2[7] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v3;
    v7 = (uint64_t)(v6 + 1);
  }
  v2[6] = v7;
  sub_19BFD0B2C(v2[5], v7, (v7 - v2[5]) >> 3);
}

uint64_t sub_19BFD0E30(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _QWORD *v10;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = (_QWORD *)(result + 8 * v3);
    v5 = *v4;
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *(double *)(v8 + 104);
    if (*(double *)(*v4 + 104) < v9)
    {
      do
      {
        v10 = v4;
        *v6 = v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
        v4 = (_QWORD *)(result + 8 * v3);
        v5 = *v4;
        v6 = v10;
      }
      while (*(double *)(*v4 + 104) < v9);
      *v10 = v7;
    }
  }
  return result;
}

uint64_t LXCursorIsRoot(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 32))(result + 16);
  return result;
}

uint64_t LXCursorCopyTraversedCharacters(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 112))(result + 16);
  return result;
}

uint64_t LXCursorLastTraversedCharacter(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 120))(result + 16);
  return result;
}

double LXCursorConditionalProbability(uint64_t a1)
{
  double result;

  if (!a1)
    return -INFINITY;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 72))(a1 + 16);
  return result;
}

double LXCursorPrefixProbability(uint64_t a1)
{
  double result;

  if (!a1)
    return -INFINITY;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 80))(a1 + 16);
  return result;
}

uint64_t LXCursorUsageCount(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 96))(result + 16);
  return result;
}

uint64_t LXCursorUsageCountRecursive(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 104))(result + 16);
  return result;
}

double LXCursorTerminationProbability(uint64_t a1)
{
  double result;

  if (!a1)
    return -INFINITY;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 88))(a1 + 16);
  return result;
}

uint64_t LXCursorTerminatesWordStem(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 128))(result + 16);
  return result;
}

uint64_t LXCursorCreateByAdvancing(uint64_t a1, const __CFString *a2)
{
  uint64_t v2;
  _BYTE v4[8];
  void *v5;
  uint64_t v6;

  v2 = a1;
  v6 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    sub_19BF8C4B0((uint64_t)v4, a2);
    v2 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)(v2 + 16) + 16))(v2 + 16, v4);
    if (v5)
    {
      if (v4[6] == 1)
        free(v5);
    }
  }
  return v2;
}

void sub_19BFD1000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  if (a13)
  {
    if (a12 == 1)
      free(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LXCursorCreateByAdvancingWithUTF8(uint64_t a1, char *a2, unsigned __int16 a3)
{
  uint64_t v4;
  NSObject *v5;
  int v7;
  _BYTE v8[12];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    sub_19BFF6914((uint64_t)&v7, a2, a3);
    v4 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, &v7);
    if (*(_QWORD *)&v8[4] && v8[2] == 1)
      free(*(void **)&v8[4]);
  }
  else
  {
    if (qword_1EE417690 != -1)
      dispatch_once(&qword_1EE417690, &unk_1E3D15B90);
    v5 = qword_1EE417688;
    if (os_log_type_enabled((os_log_t)qword_1EE417688, OS_LOG_TYPE_FAULT))
    {
      v7 = 136315138;
      *(_QWORD *)v8 = "LXCursorCreateByAdvancingWithUTF8";
      _os_log_fault_impl(&dword_19BF85000, v5, OS_LOG_TYPE_FAULT, "%s: Missing cursor", (uint8_t *)&v7, 0xCu);
    }
    return 0;
  }
  return v4;
}

void sub_19BFD1148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, void *a12)
{
  if (a12)
  {
    if (a11 == 1)
      free(a12);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_19BFD1174()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "Cursor");
  qword_1EE417688 = (uint64_t)result;
  return result;
}

uint64_t LXCursorCreateByAdvancingWithUTF16(uint64_t a1, UChar *a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  __int16 v7;
  char v8;
  void *v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1)
    __assert_rtn("LXCursorCreateByAdvancingWithUTF16", "LXCursor.cpp", 391, "false && \"missing cursor\"");
  v6 = 0x100000;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_19BFF7470((unsigned __int16 *)&v6, a2, a3);
  v4 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, &v6);
  if (v9 && v8 == 1)
    free(v9);
  return v4;
}

void sub_19BFD1268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  BOOL v14;

  if (a13)
    v14 = a12 == 1;
  else
    v14 = 0;
  if (v14)
    free(a13);
  _Unwind_Resume(exception_object);
}

uint64_t LXCursorCreateByAdvancingWithUTF32(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v6;
  uint64_t v7;
  int v9;
  __int16 v10;
  char v11;
  void *v12;
  char i;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1)
    __assert_rtn("LXCursorCreateByAdvancingWithUTF32", "LXCursor.cpp", 402, "false && \"missing cursor\"");
  v3 = a3;
  v9 = 0x100000;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  for (i = 0; v3; --v3)
  {
    v6 = *a2++;
    sub_19BFF6A20((unsigned __int16 *)&v9, v6);
  }
  v7 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, &v9);
  if (v12 && v11 == 1)
    free(v12);
  return v7;
}

void sub_19BFD1374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  BOOL v14;

  if (a13)
    v14 = a12 == 1;
  else
    v14 = 0;
  if (v14)
    free(a13);
  _Unwind_Resume(exception_object);
}

uint64_t LXCursorHasChildren(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 56))(result + 16);
  return result;
}

void LXCursorEnumerateEntriesRecursively(const void *a1, uint64_t a2)
{
  if (a1)
    sub_19BFD02C4(a1, a2);
}

void LXCursorEnumerateEntriesRecursivelyWithPolicy(const void *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint8_t buf[4];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2 == 1)
    {
      sub_19BFD02C4(a1, a3);
    }
    else
    {
      if (a2)
      {
        if (qword_1EE417690 != -1)
          dispatch_once(&qword_1EE417690, &unk_1E3D15B90);
        v3 = qword_1EE417688;
        if (os_log_type_enabled((os_log_t)qword_1EE417688, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v6 = a2;
          _os_log_error_impl(&dword_19BF85000, v3, OS_LOG_TYPE_ERROR, "Unsupported enumeration policy: %ld", buf, 0xCu);
        }
        __assert_rtn("LXCursorEnumerateEntriesRecursivelyWithPolicy", "LXCursor.cpp", 450, "false && \"unsupported enumeration policy\"");
      }
      buf[0] = 0;
      sub_19BFD0164((uint64_t)a1, buf, a3);
    }
  }
}

uint64_t LXCursorHasEntries(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 40))(result + 16);
  return result;
}

void LXCursorsAreEqual()
{
  __assert_rtn("LXCursorsAreEqual", "LXCursor.cpp", 475, "false && \"LXCursorsAreEqual not implemented yet\"");
}

uint64_t LXCursorCopyFirstEntry(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = sub_19BFD15F4;
  v3[3] = &unk_1E3D15B28;
  v3[4] = &v4;
  if (a1)
  {
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 16) + 48))(a1 + 16, v3);
    v1 = v5[3];
  }
  else
  {
    v1 = 0;
  }
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19BFD15DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef sub_19BFD15F4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  CFTypeRef result;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  result = CFRetain(*(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  *a3 = 1;
  return result;
}

uint64_t LXCursorHash(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 136))(result + 16);
  return result;
}

void sub_19BFD1648(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    sub_19BF8E6D0();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t sub_19BFD1840(uint64_t a1, int a2, int a3)
{
  _DWORD *v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = operator new(8uLL);
  *v6 = a2;
  v6[1] = 0;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v6 + 2;
  *(_QWORD *)(a1 + 16) = v6 + 2;
  *(_DWORD *)(a1 + 24) = a3;
  return a1;
}

void *sub_19BFD1894(unint64_t a1)
{
  if (a1 >> 59)
    sub_19BF8E6D0();
  return operator new(32 * a1);
}

uint64_t *sub_19BFD18C8(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19BFD195C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v4)
    {
      *(_QWORD *)(v2 - 24) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_19BFD19BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __n128 result;
  __n128 v12;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = v3 >> 1;
    v6 = *(_DWORD *)(a2 - 8);
    if (*(_DWORD *)(a1 + 32 * (v3 >> 1) + 24) > v6)
    {
      v7 = a2 - 32;
      v12 = *(__n128 *)(a2 - 32);
      v8 = *(_QWORD *)(a2 - 16);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      while (1)
      {
        v9 = a1 + 32 * v5;
        *(_OWORD *)v7 = *(_OWORD *)v9;
        *(_QWORD *)(v7 + 16) = *(_QWORD *)(v9 + 16);
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v7 + 24) = *(_DWORD *)(v9 + 24);
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        if (*(_DWORD *)(a1 + 32 * v5 + 24) <= v6)
          break;
        v10 = *(void **)v9;
        v7 = v9;
        if (*(_QWORD *)v9)
        {
          *(_QWORD *)(v9 + 8) = v10;
          operator delete(v10);
          *(_QWORD *)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
        }
      }
      result = v12;
      *(__n128 *)v9 = v12;
      *(_QWORD *)(v9 + 16) = v8;
      *(_DWORD *)(v9 + 24) = v6;
    }
  }
  return result;
}

char *sub_19BFD1AA4(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_19BFD2DC8(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_19BFD1AF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19BFD1B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;

  if (a3 >= 2)
  {
    v3 = 0;
    v4 = *(_QWORD *)a1;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v7 = a1;
    v8 = *(_DWORD *)(a1 + 24);
    do
    {
      v9 = v7 + 32 * (v3 + 1);
      v10 = (2 * v3) | 1;
      v11 = 2 * v3 + 2;
      if (v11 < a3)
      {
        v12 = *(_DWORD *)(v9 + 24);
        v13 = *(_DWORD *)(v9 + 56);
        v9 += 32 * (v12 > v13);
        if (v12 > v13)
          v10 = v11;
      }
      v14 = *(_DWORD *)(v9 + 24);
      *(_OWORD *)v7 = *(_OWORD *)v9;
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v9 + 16);
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v7 + 24) = v14;
      v7 = v9;
      v3 = v10;
    }
    while (v10 <= (uint64_t)((unint64_t)(a3 - 2) >> 1));
    if (a2 - 32 == v9)
    {
      *(_QWORD *)v9 = v4;
      *(_QWORD *)(v9 + 8) = v5;
      *(_QWORD *)(v9 + 16) = v6;
      *(_DWORD *)(v9 + 24) = v8;
    }
    else
    {
      v15 = *(_DWORD *)(a2 - 8);
      *(_OWORD *)v9 = *(_OWORD *)(a2 - 32);
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 - 16);
      *(_DWORD *)(v9 + 24) = v15;
      *(_QWORD *)(a2 - 32) = v4;
      *(_QWORD *)(a2 - 24) = v5;
      *(_QWORD *)(a2 - 16) = v6;
      *(_DWORD *)(a2 - 8) = v8;
      sub_19BFD19BC(a1, v9 + 32, (v9 + 32 - a1) >> 5);
    }
  }
}

char *sub_19BFD1BF8(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      v25 = result;
      while (v6 != a3)
      {
        v26 = *v6++;
        *(_QWORD *)v25 = v26;
        v25 += 8;
      }
      v17 = (char *)(v25 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        v21 = 8 * v19;
        do
        {
          v22 = *v6++;
          *(_QWORD *)result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      v23 = v12;
      while (v20 != a3)
      {
        v24 = *v20++;
        *(_QWORD *)v23 = v24;
        v23 += 8;
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      sub_19BF8EB40();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_19BFD2DC8(a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_QWORD *)v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

uint64_t sub_19BFD1D2C(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int v20;
  int v21;
  BOOL v22;
  int *v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  int v34;
  int *v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  int *v39;
  int *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int *v56;
  int *v57;
  int *v59;
  int *v60;
  int *v61;
  int *v62;
  int v63;
  int *v64;
  int *v65;
  int *v66;
  int *v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v9 = (int *)result;
LABEL_2:
  v10 = a2 - 2;
  v65 = a2;
  v67 = a2 - 4;
  v64 = a2 - 6;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = ((char *)a2 - (char *)v11) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
        if ((_DWORD)result)
        {
          v27 = *v9;
          *v9 = *(a2 - 2);
          *(a2 - 2) = v27;
          v28 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v28;
        }
        return result;
      case 3uLL:
        return sub_19BFD288C(v9, v9 + 2, v10, a3);
      case 4uLL:
        return sub_19BFD29C4(v9, v9 + 2, v9 + 4, v10, a3);
      case 5uLL:
        return sub_19BFD2AB0(v9, v9 + 2, v9 + 4, v9 + 6, v10, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (v9 != a2)
            {
              v29 = v9 + 2;
              if (v9 + 2 != a2)
              {
                v30 = 0;
                do
                {
                  v31 = v29;
                  result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                  if ((_DWORD)result)
                  {
                    v71 = *(_QWORD *)v31;
                    v32 = v30;
                    while (1)
                    {
                      v33 = (char *)v9 + v32;
                      v34 = *(int *)((char *)v9 + v32 + 4);
                      *((_DWORD *)v33 + 2) = *(int *)((char *)v9 + v32);
                      *((_DWORD *)v33 + 3) = v34;
                      if (!v32)
                        break;
                      v32 -= 8;
                      result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                      if ((result & 1) == 0)
                      {
                        v35 = (int *)((char *)v9 + v32 + 8);
                        goto LABEL_67;
                      }
                    }
                    v35 = v9;
LABEL_67:
                    *(_QWORD *)v35 = v71;
                  }
                  v29 = v31 + 2;
                  v30 += 8;
                }
                while (v31 + 2 != a2);
              }
            }
          }
          else if (v9 != a2)
          {
            v59 = v9 + 2;
            if (v9 + 2 != a2)
            {
              v60 = v9 - 2;
              do
              {
                v61 = v59;
                result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                if ((_DWORD)result)
                {
                  v74 = *(_QWORD *)v61;
                  v62 = v60;
                  do
                  {
                    v63 = v62[3];
                    v62[4] = v62[2];
                    v62[5] = v63;
                    result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                    v62 -= 2;
                  }
                  while ((result & 1) != 0);
                  *((_QWORD *)v62 + 2) = v74;
                }
                v59 = v61 + 2;
                v60 += 2;
              }
              while (v61 + 2 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v36 = (v13 - 2) >> 1;
            v68 = v36;
            do
            {
              v37 = v36;
              if (v68 >= v36)
              {
                v38 = (2 * v36) | 1;
                v39 = &v9[2 * v38];
                if (2 * v36 + 2 < (uint64_t)v13 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                {
                  v39 += 2;
                  v38 = 2 * v37 + 2;
                }
                v40 = &v9[2 * v37];
                result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                if ((result & 1) == 0)
                {
                  v72 = *(_QWORD *)v40;
                  do
                  {
                    v41 = v39;
                    *v40 = *v39;
                    v40[1] = v39[1];
                    if (v68 < v38)
                      break;
                    v42 = (2 * v38) | 1;
                    v39 = &v9[2 * v42];
                    v43 = 2 * v38 + 2;
                    if (v43 < (uint64_t)v13 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                    {
                      v39 += 2;
                      v42 = v43;
                    }
                    result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                    v40 = v41;
                    v38 = v42;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v41 = v72;
                }
              }
              v36 = v37 - 1;
            }
            while (v37);
            v44 = (unint64_t)v12 >> 3;
            v45 = v65;
            do
            {
              v46 = 0;
              v47 = *(_QWORD *)v9;
              v48 = v44 - 2;
              v66 = v45;
              if (v44 < 2)
                v48 = v44 - 1;
              v49 = v48 >> 1;
              v50 = v9;
              do
              {
                v51 = &v50[2 * v46 + 2];
                v52 = (2 * v46) | 1;
                v53 = 2 * v46 + 2;
                if (v53 < v44)
                {
                  result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                  if ((_DWORD)result)
                  {
                    v51 += 2;
                    v52 = v53;
                  }
                }
                *v50 = *v51;
                v50[1] = v51[1];
                v50 = v51;
                v46 = v52;
              }
              while (v52 <= v49);
              v45 = v66 - 2;
              if (v51 == v66 - 2)
              {
                *(_QWORD *)v51 = v47;
              }
              else
              {
                *v51 = *(v66 - 2);
                v51[1] = *(v66 - 1);
                *((_QWORD *)v66 - 1) = v47;
                v54 = (char *)v51 - (char *)v9 + 8;
                if (v54 >= 9)
                {
                  v55 = (unint64_t)((v54 >> 3) - 2) >> 1;
                  v56 = &v9[2 * v55];
                  result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                  if ((_DWORD)result)
                  {
                    v73 = *(_QWORD *)v51;
                    do
                    {
                      v57 = v56;
                      *v51 = *v56;
                      v51[1] = v56[1];
                      if (!v55)
                        break;
                      v55 = (v55 - 1) >> 1;
                      v56 = &v9[2 * v55];
                      result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                      v51 = v57;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v57 = v73;
                  }
                }
              }
            }
            while (v44-- > 2);
          }
          return result;
        }
        v14 = &v9[2 * (v13 >> 1)];
        if ((unint64_t)v12 < 0x401)
        {
          sub_19BFD288C(&v9[2 * (v13 >> 1)], v9, v10, a3);
        }
        else
        {
          sub_19BFD288C(v9, &v9[2 * (v13 >> 1)], v10, a3);
          sub_19BFD288C(v9 + 2, v14 - 2, v67, a3);
          sub_19BFD288C(v9 + 4, &v9[2 * (v13 >> 1) + 2], v64, a3);
          sub_19BFD288C(v14 - 2, &v9[2 * (v13 >> 1)], &v9[2 * (v13 >> 1) + 2], a3);
          v15 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(_QWORD *)v14;
          *(_QWORD *)v14 = v15;
        }
        --a4;
        a2 = v65;
        if ((a5 & 1) == 0 && ((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
        {
          v70 = *(_QWORD *)v9;
          result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
          if ((result & 1) != 0)
          {
            v11 = v9;
            do
            {
              v11 += 2;
              result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
            }
            while ((result & 1) == 0);
          }
          else
          {
            v23 = v9 + 2;
            do
            {
              v11 = v23;
              if (v23 >= v65)
                break;
              result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
              v23 = v11 + 2;
            }
            while (!(_DWORD)result);
          }
          v24 = v65;
          if (v11 < v65)
          {
            v24 = v65;
            do
            {
              v24 -= 2;
              result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
            }
            while ((result & 1) != 0);
          }
          while (v11 < v24)
          {
            v25 = *v11;
            *v11 = *v24;
            *v24 = v25;
            v26 = v11[1];
            v11[1] = v24[1];
            v24[1] = v26;
            do
              v11 += 2;
            while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
            do
            {
              v24 -= 2;
              result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
            }
            while ((result & 1) != 0);
          }
          if (v11 - 2 != v9)
          {
            *v9 = *(v11 - 2);
            v9[1] = *(v11 - 1);
          }
          a5 = 0;
          *((_QWORD *)v11 - 1) = v70;
          continue;
        }
        v69 = *(_QWORD *)v9;
        v16 = v9;
        do
        {
          v17 = v16;
          v16 += 2;
        }
        while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
        v18 = v65;
        if (v17 == v9)
        {
          v18 = v65;
          do
          {
            if (v16 >= v18)
              break;
            v18 -= 2;
          }
          while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
        }
        else
        {
          do
            v18 -= 2;
          while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
        }
        v11 = v16;
        if (v16 < v18)
        {
          v19 = v18;
          do
          {
            v20 = *v11;
            *v11 = *v19;
            *v19 = v20;
            v21 = v11[1];
            v11[1] = v19[1];
            v19[1] = v21;
            do
              v11 += 2;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
            do
              v19 -= 2;
            while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
          }
          while (v11 < v19);
        }
        if (v11 - 2 != v9)
        {
          *v9 = *(v11 - 2);
          v9[1] = *(v11 - 1);
        }
        *((_QWORD *)v11 - 1) = v69;
        if (v16 < v18)
        {
LABEL_30:
          result = sub_19BFD1D2C(v9, v11 - 2, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v22 = sub_19BFD2BD8(v9, v11 - 2, a3);
        result = sub_19BFD2BD8(v11, v65, a3);
        if (!(_DWORD)result)
        {
          if (v22)
            continue;
          goto LABEL_30;
        }
        a2 = v11 - 2;
        if (!v22)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_19BFD25BC(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 != v5 << 6)
    goto LABEL_37;
  if ((uint64_t)(v4 + 1) < 0)
    goto LABEL_9;
  if (v4 > 0x3FFFFFFFFFFFFFFELL)
  {
    v7 = 0x7FFFFFFFFFFFFFFFLL;
    if (v4 < 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_11;
  }
  else
  {
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v7 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    else
      v7 = v6;
    if (v4 < v7)
    {
      if ((v7 & 0x8000000000000000) != 0)
LABEL_9:
        sub_19BF8EB40();
LABEL_11:
      v29 = 0;
      v30 = 0uLL;
      sub_19BFD284C(&v29, v7);
      v8 = *(_QWORD **)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = v30;
      v11 = v30 + v9;
      *(_QWORD *)&v30 = v30 + v9;
      if (v10)
      {
        v12 = v11 - 1;
        if (((v11 - 1) ^ (v10 - 1)) < 0x40)
        {
LABEL_19:
          v15 = v9 & 0x3F;
          v16 = v29;
          if (v9 > 0x3F || (v9 & 0x3F) != 0)
          {
            v17 = 0;
            v18 = &v8[v9 >> 6];
            v19 = v10 & 0x3F;
            v20 = &v29[v10 >> 6];
            do
            {
              v21 = 1 << v19;
              if (((*v8 >> v17) & 1) != 0)
                v22 = *v20 | v21;
              else
                v22 = *v20 & ~v21;
              *v20 = v22;
              v8 += v17 == 63;
              if (v17 == 63)
                v17 = 0;
              else
                ++v17;
              v20 += v19 == 63;
              if (v19 == 63)
                v19 = 0;
              else
                ++v19;
            }
            while (v8 != v18 || v17 != v15);
            v16 = v29;
          }
          v23 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v16;
          v29 = v23;
          v24 = *(_OWORD *)(a1 + 8);
          *(_OWORD *)(a1 + 8) = v30;
          v30 = v24;
          if (v23)
            operator delete(v23);
          goto LABEL_36;
        }
      }
      else
      {
        v12 = v11 - 1;
      }
      v13 = v12 >> 6;
      if (v11 >= 0x41)
        v14 = v13;
      else
        v14 = 0;
      v29[v14] = 0;
      goto LABEL_19;
    }
  }
LABEL_36:
  v4 = *(_QWORD *)(a1 + 8);
LABEL_37:
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v25 = *(_QWORD **)a1;
  v26 = v4 >> 6;
  v27 = 1 << v4;
  if (*a2)
    v28 = v25[v26] | v27;
  else
    v28 = v25[v26] & ~v27;
  v25[v26] = v28;
}

void sub_19BFD2774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFD278C(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v2 = a2 - 1;
    while (1)
    {
      v3 = v2 >> 6;
      v4 = 1 << v2;
      v5 = *(_QWORD *)(result + 8 * (v2 >> 6));
      if ((v5 & (1 << v2)) == 0)
        break;
      *(_QWORD *)(result + 8 * v3) = v5 & ~v4;
      if (--v2 == -1)
        return result;
    }
    *(_QWORD *)(result + 8 * v3) = v5 | v4;
  }
  return result;
}

void sub_19BFD27D0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 4);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 3) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_19BFD284C(_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    sub_19BF8EB40();
  result = sub_19BF965C4((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

uint64_t sub_19BFD288C(int *a1, int *a2, int *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  int v10;
  int *v11;
  int *v12;
  int v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v8 = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
  result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v11 = a3 + 1;
      v12 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      v17 = a2[1];
      *a2 = v10;
      v18 = a1[1];
      a1[1] = v17;
      a2[1] = v18;
      result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
      if (!(_DWORD)result)
        return result;
      v19 = *a2;
      *a2 = *a3;
      *a3 = v19;
      v11 = a3 + 1;
      v12 = a2 + 1;
    }
    v15 = v11;
    goto LABEL_10;
  }
  if ((_DWORD)result)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v15 = a2 + 1;
    v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
    if ((_DWORD)result)
    {
      v16 = *a1;
      *a1 = *a2;
      v12 = a1 + 1;
      *a2 = v16;
LABEL_10:
      v20 = *v12;
      *v12 = *v15;
      *v15 = v20;
    }
  }
  return result;
}

uint64_t sub_19BFD29C4(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  sub_19BFD288C(a1, a2, a3, a5);
  result = (*(uint64_t (**)(void))(*(_QWORD *)a5 + 16))();
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    result = (*(uint64_t (**)(void))(*(_QWORD *)a5 + 16))();
    if ((_DWORD)result)
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      result = (*(uint64_t (**)(void))(*(_QWORD *)a5 + 16))();
      if ((_DWORD)result)
      {
        v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t sub_19BFD2AB0(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  uint64_t result;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  sub_19BFD29C4(a1, a2, a3, a4, a6);
  result = (*(uint64_t (**)(void))(*(_QWORD *)a6 + 16))();
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    result = (*(uint64_t (**)(void))(*(_QWORD *)a6 + 16))();
    if ((_DWORD)result)
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      result = (*(uint64_t (**)(void))(*(_QWORD *)a6 + 16))();
      if ((_DWORD)result)
      {
        v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        result = (*(uint64_t (**)(void))(*(_QWORD *)a6 + 16))();
        if ((_DWORD)result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
          v20 = a1[1];
          a1[1] = a2[1];
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

BOOL sub_19BFD2BD8(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  int v15;
  int *v16;
  uint64_t v17;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_19BFD288C(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_19BFD29C4(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_19BFD2AB0(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      sub_19BFD288C(a1, a1 + 2, a1 + 4, a3);
      v10 = (uint64_t *)(a1 + 6);
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
    {
      v17 = *v10;
      v13 = v11;
      while (1)
      {
        v14 = (char *)a1 + v13;
        v15 = *(int *)((char *)a1 + v13 + 20);
        *((_DWORD *)v14 + 6) = *(int *)((char *)a1 + v13 + 16);
        *((_DWORD *)v14 + 7) = v15;
        if (v13 == -16)
          break;
        v13 -= 8;
        if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
        {
          v16 = (int *)((char *)a1 + v13 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(_QWORD *)v16 = v17;
      if (++v12 == 8)
        return v10 + 1 == (uint64_t *)a2;
    }
    v11 += 8;
    if (++v10 == (uint64_t *)a2)
      return 1;
  }
}

BOOL sub_19BFD2DA8(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  _BOOL4 v6;

  v3 = a2[1];
  v4 = a3[1];
  v5 = v3 == v4;
  v6 = v3 < v4;
  if (v5)
    return *a2 < *a3;
  else
    return v6;
}

char *sub_19BFD2DC8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_19BF8EB40();
  result = (char *)sub_19BFAC524(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

char **sub_19BFD2E04(char **a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *i;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *j;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a1 == (char **)a2)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    sub_19BFD1BF8(a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    v7 = *a1;
    v6 = a1[1];
  }
  v9 = *(uint64_t **)a3;
  v8 = *(uint64_t **)(a3 + 8);
  v10 = (uint64_t)v8 - *(_QWORD *)a3;
  if (v10 >= 1)
  {
    v11 = v10 >> 3;
    v12 = (v6 - v7) >> 3;
    v13 = &v7[(v6 - v7) & 0xFFFFFFFFFFFFFFF8];
    v14 = a1[2];
    if (v11 <= (v14 - v6) >> 3)
    {
      v19 = (v6 - v13) >> 3;
      if (v19 >= v11)
      {
        v20 = &v9[v11];
        v22 = v6;
      }
      else
      {
        v20 = &v9[v19];
        if (v20 == v8)
        {
          v22 = v6;
        }
        else
        {
          v21 = v20;
          v22 = v6;
          do
          {
            v23 = *v21++;
            *(_QWORD *)v22 = v23;
            v22 += 8;
          }
          while (v21 != v8);
        }
        a1[1] = v22;
        if (v6 - v13 < 1)
        {
          v6 = v22;
          goto LABEL_41;
        }
      }
      v35 = &v13[8 * v11];
      v36 = &v22[-8 * v11];
      v37 = v22;
      if (v36 < v6)
      {
        v37 = v22;
        do
        {
          v38 = *(_QWORD *)v36;
          v36 += 8;
          *(_QWORD *)v37 = v38;
          v37 += 8;
        }
        while (v36 < v6);
      }
      a1[1] = v37;
      if (v22 != v35)
      {
        v39 = 8 * ((v22 - v35) >> 3);
        v40 = v22 - 4;
        v41 = (uint64_t)&v7[8 * v12 - 4];
        do
        {
          *((_DWORD *)v40 - 1) = *(_DWORD *)(v41 + v39 - 4);
          *(_DWORD *)v40 = *(_DWORD *)(v41 + v39);
          v40 -= 8;
          v39 -= 8;
        }
        while (v39);
      }
      for (; v9 != v20; v13 += 8)
      {
        v42 = *v9++;
        *(_QWORD *)v13 = v42;
      }
      v6 = v37;
    }
    else
    {
      v15 = v11 + ((v6 - v7) >> 3);
      if (v15 >> 61)
        sub_19BF8EB40();
      v16 = v14 - v7;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
        v17 = (unint64_t)sub_19BFAC524(v17);
      else
        v18 = 0;
      v24 = (_QWORD *)(v17 + 8 * v12);
      v6 = (char *)&v24[v11];
      v25 = 8 * v11;
      v26 = v24;
      do
      {
        v27 = *v9++;
        *v26++ = v27;
        v25 -= 8;
      }
      while (v25);
      v28 = *a1;
      if (*a1 != v13)
      {
        v29 = v13;
        do
        {
          v30 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *--v24 = v30;
        }
        while (v29 != v28);
      }
      v31 = v17 + 8 * v18;
      for (i = a1[1]; v13 != i; v6 += 8)
      {
        v33 = *(_QWORD *)v13;
        v13 += 8;
        *(_QWORD *)v6 = v33;
      }
      v34 = *a1;
      *a1 = (char *)v24;
      a1[1] = v6;
      a1[2] = (char *)v31;
      if (v34)
      {
        operator delete(v34);
        v6 = a1[1];
      }
    }
  }
LABEL_41:
  for (j = *a1; j != v6; j += 8)
    ++*((_DWORD *)j + 1);
  *((_DWORD *)a1 + 6) = *(_DWORD *)(a3 + 24) + *(_DWORD *)(a2 + 24);
  return a1;
}

void sub_19BFD3080(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19BFD30A0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_19BF8EB40();
  result = (char *)sub_19BFB3588(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

__n128 sub_19BFD30DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

void sub_19BFD3108(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_19BFD3120(uint64_t a1, unsigned int a2)
{
  uint64_t *v3;
  unint64_t v4;
  int v5;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  char v26;
  int v27;
  unint64_t *v28;

  v3 = sub_19BFD34B8((_QWORD *)(*(_QWORD *)(a1 + 40) + 40), a2);
  if (!v3)
    __assert_rtn("encode_block_invoke", "TIHuffmanCoder.cpp", 207, "it != m_dictionary.end()");
  v4 = v3[4];
  v5 = v4 & 0x3F;
  if (v4 > 0x3F || v5 != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v28 = (unint64_t *)(v9 + 40);
    v10 = (uint64_t *)v3[3];
    v11 = &v10[v4 >> 6];
    v12 = *(_DWORD *)(v9 + 64);
    v27 = v5;
    do
    {
      v13 = *v10;
      if (v12 == 8)
      {
        *(_DWORD *)(v9 + 64) = 0;
        v15 = *(_BYTE **)(v9 + 48);
        v14 = *(_QWORD *)(v9 + 56);
        if ((unint64_t)v15 >= v14)
        {
          v17 = *v28;
          v18 = &v15[-*v28];
          v19 = (unint64_t)(v18 + 1);
          if ((uint64_t)(v18 + 1) < 0)
            sub_19BF8EB40();
          v20 = v14 - v17;
          if (2 * v20 > v19)
            v19 = 2 * v20;
          if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
            v21 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v22 = (char *)operator new(v21);
          else
            v22 = 0;
          v23 = &v18[(_QWORD)v22];
          v24 = &v18[(_QWORD)v22];
          *v24 = 0;
          v16 = v24 + 1;
          if (v15 != (_BYTE *)v17)
          {
            v25 = &v15[~v17];
            do
            {
              v26 = *--v15;
              (v25--)[(_QWORD)v22] = v26;
            }
            while (v15 != (_BYTE *)v17);
            v15 = (_BYTE *)*v28;
            v23 = v22;
          }
          *(_QWORD *)(v9 + 40) = v23;
          *(_QWORD *)(v9 + 48) = v16;
          *(_QWORD *)(v9 + 56) = &v22[v21];
          if (v15)
            operator delete(v15);
          v5 = v27;
        }
        else
        {
          *v15 = 0;
          v16 = v15 + 1;
        }
        *(_QWORD *)(v9 + 48) = v16;
        v12 = *(_DWORD *)(v9 + 64);
      }
      if ((v13 & (1 << v8)) != 0)
      {
        *(_BYTE *)(*(_QWORD *)(v9 + 48) - 1) |= 1 << v12;
        v12 = *(_DWORD *)(v9 + 64);
      }
      *(_DWORD *)(v9 + 64) = ++v12;
      v10 += v7 == 63;
      if (v7 == 63)
        v8 = 0;
      else
        ++v8;
      v7 = v8;
    }
    while (v10 != v11 || v5 != v8);
  }
}

uint64_t sub_19BFD3308(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  _QWORD v17[2];
  uint64_t (*v18)(uint64_t, unsigned int);
  void *v19;
  uint64_t v20;

  if (!*(_QWORD *)(a1 + 64))
    __assert_rtn("encoded_size", "TIHuffmanCoder.cpp", 223, "is_compiled()");
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 0x40000000;
  v18 = sub_19BFD3474;
  v19 = &unk_1E3D15C78;
  v20 = a1;
  if (*((_QWORD *)a2 + 1))
    v2 = *((_QWORD *)a2 + 1);
  else
    v2 = (uint64_t)(a2 + 8);
  v13 = v2;
  v3 = *a2;
  v14 = 0;
  v15 = v3;
  v16 = 0;
  sub_19BF8BB80(&v13);
  v9 = v2;
  v10 = v3;
  v11 = v3;
  v12 = 0;
  sub_19BF8BB80(&v9);
  v4 = v13;
  if (v13 != v9)
LABEL_9:
    __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
  v5 = 0;
  v6 = v10;
  while (v14 != v6)
  {
    v5 += v18((uint64_t)v17, v16);
    sub_19BF8BB80(&v13);
    if (v13 != v4)
      goto LABEL_9;
  }
  v7 = v5 + v18((uint64_t)v17, 0);
  if (!v7)
    __assert_rtn("encoded_size", "TIHuffmanCoder.cpp", 234, "bit_count > 0");
  return ((v7 - 1) >> 3) + 1;
}

uint64_t sub_19BFD3474(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;

  v2 = sub_19BFD34B8((_QWORD *)(*(_QWORD *)(a1 + 32) + 40), a2);
  if (!v2)
    __assert_rtn("encoded_size_block_invoke", "TIHuffmanCoder.cpp", 227, "it != m_dictionary.end()");
  return v2[4];
}

uint64_t *sub_19BFD34B8(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_19BFD356C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return a1;
  sub_19BFD284C(a1, v4);
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = a1[1];
  v8 = v7 + v6;
  a1[1] = v7 + v6;
  if (v7)
  {
    v9 = v8 - 1;
    if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      goto LABEL_10;
  }
  else
  {
    v9 = v8 - 1;
  }
  v10 = v9 >> 6;
  if (v8 >= 0x41)
    v11 = v10;
  else
    v11 = 0;
  *(_QWORD *)(*a1 + 8 * v11) = 0;
LABEL_10:
  v12 = v6 & 0x3F;
  if (v6 > 0x3F || (v6 & 0x3F) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = &v5[v6 >> 6];
    v16 = v7 & 0x3F;
    v17 = (uint64_t *)(*a1 + 8 * (v7 >> 6));
    do
    {
      v18 = 1 << v16;
      if (((*v5 >> v14) & 1) != 0)
        v19 = *v17 | v18;
      else
        v19 = *v17 & ~v18;
      *v17 = v19;
      ++v14;
      v5 += v13 == 63;
      if (v13 == 63)
        v14 = 0;
      v17 += v16 == 63;
      if (v16 == 63)
        v16 = 0;
      else
        ++v16;
      v13 = v14;
    }
    while (v5 != v15 || v12 != v14);
  }
  return a1;
}

void sub_19BFD3680(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19BFD36F8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_19BFD3738((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_19BFD3738(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    v5 = *(void **)(i - 32);
    v4 = v5;
    if (v5)
      operator delete(v4);
  }
  a1[1] = v2;
}

unint64_t sub_19BFD377C(int64x2_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  _DWORD *v45;
  int v46;
  char v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD v63[2];
  uint64_t (*v64)(uint64_t, _QWORD *);
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int v68;
  char *v69;
  int64x2_t v70;
  char *v71;
  int64x2_t *v72;

  if (a2 >= a3
    || (v4 = a3, v6 = a1->i64[1],
                 v56 = a3,
                 a3 > (unint64_t)((a1[1].i64[0] - v6) >> 5)))
  {
    __assert_rtn("build_lookup_tables", "TIHuffmanCoder.cpp", 351, "lo < hi && hi <= m_codebook.size()");
  }
  v7 = *(_QWORD *)(v6 + 32 * (a3 - 1) + 8);
  if (v7 <= a4)
    __assert_rtn("build_lookup_tables", "TIHuffmanCoder.cpp", 354, "longest_codeword_length > depth");
  v8 = a2;
  v62 = a4;
  v9 = a1[3].u64[0];
  if (v7 - a4 >= 8)
    v10 = 8;
  else
    v10 = v7 - a4;
  v11 = a1[2].i64[0];
  v12 = a1[2].u64[1];
  v55 = v12 - v11;
  v13 = (uint64_t)(v12 - v11) >> 5;
  v61 = v10;
  if (v12 >= v9)
  {
    if ((unint64_t)(v13 + 1) >> 59)
      sub_19BF8EB40();
    v15 = v9 - v11;
    v16 = v15 >> 4;
    if (v15 >> 4 <= (unint64_t)(v13 + 1))
      v16 = v13 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
      v17 = 0x7FFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v72 = a1 + 3;
    if (v17)
    {
      if (v17 >> 59)
        sub_19BF8E6D0();
      v18 = v10;
      v19 = (char *)operator new(32 * v17);
      LODWORD(v10) = v18;
    }
    else
    {
      v19 = 0;
    }
    v69 = v19;
    v70.i64[0] = (uint64_t)&v19[32 * v13];
    v71 = &v19[32 * v17];
    sub_19BFD3CB0(v70.i64[0], v10);
    v20 = v70.i64[0];
    v14 = v70.i64[0] + 32;
    v70.i64[1] = v70.i64[0] + 32;
    v22 = a1[2].i64[0];
    v21 = a1[2].u64[1];
    if (v21 == v22)
    {
      v26 = vdupq_n_s64(v21);
    }
    else
    {
      v23 = 0;
      do
      {
        v24 = v20 + v23;
        v25 = v21 + v23;
        *(_DWORD *)(v24 - 32) = *(_DWORD *)(v21 + v23 - 32);
        *(_QWORD *)(v24 - 16) = 0;
        *(_QWORD *)(v24 - 8) = 0;
        *(_QWORD *)(v24 - 24) = 0;
        *(_OWORD *)(v24 - 24) = *(_OWORD *)(v21 + v23 - 24);
        *(_QWORD *)(v24 - 8) = *(_QWORD *)(v21 + v23 - 8);
        *(_QWORD *)(v25 - 24) = 0;
        *(_QWORD *)(v25 - 16) = 0;
        *(_QWORD *)(v25 - 8) = 0;
        v23 -= 32;
      }
      while (v21 + v23 != v22);
      v20 += v23;
      v26 = a1[2];
      v14 = v70.u64[1];
    }
    a1[2].i64[0] = v20;
    a1[2].i64[1] = v14;
    v70 = v26;
    v27 = (char *)a1[3].i64[0];
    a1[3].i64[0] = (uint64_t)v71;
    v71 = v27;
    v69 = (char *)v26.i64[0];
    sub_19BFD3D68((uint64_t)&v69);
  }
  else
  {
    sub_19BFD3CB0(v12, v10);
    v14 = v12 + 32;
    a1[2].i64[1] = v12 + 32;
  }
  a1[2].i64[1] = v14;
  v28 = v61;
  v60 = v62 >> 6;
  v29 = v62 & 0x3F;
  v30 = v61 + (v62 & 0x3F);
  v57 = v30 & 0x3F;
  v58 = v30 >> 6;
  do
  {
    v31 = v4;
    v32 = a1->i64[1];
    v33 = (_QWORD *)(v32 + 32 * v8);
    v34 = v33[1];
    if (v34 <= v62)
      __assert_rtn("build_lookup_tables", "TIHuffmanCoder.cpp", 361, "codeword.size() > depth");
    if (v34 <= v61 + v62)
    {
      v46 = sub_19BFD3DC8(*v33 + 8 * v60, v29, (_QWORD *)(*v33 + 8 * (v34 >> 6)), v34 & 0x3F);
      v28 = v61;
      v47 = v34 - v62;
      v48 = *(_DWORD *)(v32 + 32 * v8 + 24);
      v49 = 1;
      do
      {
        v50 = *(_QWORD *)(a1[2].i64[0] + 32 * v13 + 8) + 12 * (((v49 - 1) << v47) | v46);
        *(_DWORD *)v50 = 0;
        *(_BYTE *)(v50 + 4) = v47;
        *(_DWORD *)(v50 + 8) = v48;
        LODWORD(v50) = v49++ >> (v61 - (v34 - v62));
      }
      while (!(_DWORD)v50);
    }
    else
    {
      v63[0] = MEMORY[0x1E0C809B0];
      v63[1] = 0x40000000;
      v64 = sub_19BFD3E28;
      v65 = &unk_1E3D15C98;
      v68 = a4;
      v35 = (_QWORD *)(v32 + 32 * v8);
      v66 = v35;
      v67 = v28;
      if ((_DWORD)v8 != (_DWORD)v4)
      {
        v36 = (_QWORD *)(v32 + 32 * v56);
        v35 = v33;
        v37 = 32 * v56 - 32 * v8;
        while (v64((uint64_t)v63, v35))
        {
          v35 += 4;
          v37 -= 32;
          if (!v37)
          {
            v35 = v36;
            break;
          }
        }
        v32 = a1->i64[1];
      }
      v38 = ((unint64_t)v35 - v32) >> 5;
      if (v8 >= v38)
        __assert_rtn("build_lookup_tables", "TIHuffmanCoder.cpp", 381, "sub_lo < sub_hi");
      v39 = sub_19BFD3DC8(*v33 + 8 * v60, v29, (_QWORD *)(*v33 + 8 * v60 + 8 * v58), v57);
      v40 = sub_19BFD377C(a1, v8, v38, v61 + a4);
      v41 = *(_QWORD *)(a1[2].i64[0] + 32 * v13 + 8);
      v42 = v41 + 12 * v39;
      v44 = *(unsigned __int8 *)(v42 + 4);
      v43 = (_BYTE *)(v42 + 4);
      if (v44)
        __assert_rtn("build_lookup_tables", "TIHuffmanCoder.cpp", 385, "entry.empty()");
      v45 = (_DWORD *)(v41 + 12 * v39);
      *v45 = 1;
      v45[2] = v40;
      v28 = v61;
      *v43 = v61;
      LODWORD(v8) = v38 - 1;
    }
    v4 = v31;
    v8 = (v8 + 1);
  }
  while (v8 < v31);
  v51 = a1[2].i64[0] + 32 * v13;
  v52 = *(_QWORD *)(v51 + 8);
  v53 = *(_QWORD *)(v51 + 16);
  while (v52 != v53)
  {
    if (!*(_BYTE *)(v52 + 4))
      __assert_rtn("build_lookup_tables", "TIHuffmanCoder.cpp", 392, "std::all_of(m_tables[table_index].entries.begin(), m_tables[table_index].entries.end(), ^(const HuffmanDecoderTableEntry &entry) { return !entry.empty(); })");
    v52 += 12;
  }
  return v55 >> 5;
}

void sub_19BFD3C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_19BFD3D68((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFD3C60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(void **)(v2 - 32);
    v2 -= 32;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19BFD3CB0(uint64_t a1, int a2)
{
  _QWORD *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = operator new(12 << a2);
  *v4 = v5;
  v6 = (char *)&v5[3 * (1 << a2)];
  v7 = 12 * (1 << a2);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  do
  {
    v5[2] = 0;
    *(_QWORD *)v5 = 0;
    v5 += 3;
    v7 -= 12;
  }
  while (v7);
  *(_QWORD *)(a1 + 16) = v6;
  if (!a2)
    __assert_rtn("HuffmanDecoderTable", "TIHuffmanCoder.h", 66, "bl > 0");
  return a1;
}

void sub_19BFD3D4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFD3D68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19BFD3DC8(uint64_t a1, unsigned int a2, _QWORD *a3, unsigned int a4)
{
  uint64_t result;
  unsigned int i;
  _QWORD *v7;
  unsigned int v8;
  int v10;

  result = 0;
  for (i = 0; ; ++i)
  {
    v7 = (_QWORD *)(a1 + (((a2 + (unint64_t)i) >> 3) & 0x3FFFFFF8));
    v8 = ((_BYTE)a2 + (_BYTE)i) & 0x3F;
    if (v7 >= a3 && (v7 != a3 || v8 >= a4))
      break;
    if (((*v7 >> v8) & 1) != 0)
      v10 = 1 << i;
    else
      v10 = 0;
    result = v10 | result;
  }
  return result;
}

uint64_t sub_19BFD3E28(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  v2 = *(unsigned int *)(a1 + 48);
  v3 = v2 & 0x3F;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = v3 + v4;
  v6 = v3 + v4 - 63;
  if (v6 < 0)
    v6 = (v2 & 0x3F) + v4;
  v7 = v6 >> 6;
  if (v4 >= 0)
    v8 = v5 >> 6;
  else
    v8 = v7;
  v9 = (v5 & 0x3F) - v3 + (v8 << 6);
  if (v9 >= 1)
  {
    v10 = (v2 >> 3) & 0x1FFFFFF8;
    v11 = (_QWORD *)(**(_QWORD **)(a1 + 32) + v10);
    v12 = (_QWORD *)(*a2 + v10);
    if (v3)
    {
      if (v9 >= (unint64_t)(64 - v3))
        v13 = 64 - v3;
      else
        v13 = v9;
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v13)) & (-1 << v3) & (*v11 ^ *v12)) != 0)
        return 0;
      v9 -= v13;
      ++v12;
      ++v11;
    }
    if (v9 >= 64)
    {
      while (*v12 == *v11)
      {
        v14 = v9 - 64;
        ++v11;
        ++v12;
        v15 = v9 <= 127;
        v9 -= 64;
        if (v15)
          goto LABEL_19;
      }
      return 0;
    }
    v14 = v9;
LABEL_19:
    if (v14 >= 1 && (*v11 ^ *v12) << -(char)v14)
      return 0;
  }
  return 1;
}

uint64_t sub_19BFD3F34()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EE4178A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EE4178A0))
  {
    sub_19BFD3FA0();
    __cxa_guard_release(&qword_1EE4178A0);
  }
  return qword_1EE417898;
}

void sub_19BFD3F88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE4178A0);
  _Unwind_Resume(a1);
}

void sub_19BFD3FA0()
{
  void **v0;
  void *__p[2];
  char v2;

  sub_19BF8E43C(__p, "DefaultLogger");
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  qword_1EE417898 = (uint64_t)os_log_create("com.apple.Lexicon", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

uint64_t sub_19BFD4008(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    if (*((unsigned __int16 *)v3 + 8) >= 0xFu)
    {
      v4 = v3[3];
      if (v4)
        MEMORY[0x1A1AD0CB8](v4, 0x1000C8077774924);
    }
    operator delete(v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void sub_19BFD4084(const void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned __int8 v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t **v18;
  uint64_t *i;
  unint64_t v20;
  char *v21;
  _OWORD *v22;
  unint64_t v23;
  void *v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  void **v34;
  unsigned __int16 *v35;
  unint64_t v36;
  float v37;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;

  v7 = atomic_load((unsigned __int8 *)&qword_1EE4176C0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EE4176C0))
  {
    xmmword_1EE417698 = 0u;
    *(_OWORD *)&qword_1EE4176A8 = 0u;
    dword_1EE4176B8 = 1065353216;
    __cxa_guard_release(&qword_1EE4176C0);
  }
  v8 = *((_QWORD *)&xmmword_1EE417698 + 1);
  if (!*((_QWORD *)&xmmword_1EE417698 + 1))
    goto LABEL_19;
  v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EE417698 + 8));
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = a3;
    if (*((_QWORD *)&xmmword_1EE417698 + 1) <= (unint64_t)a3)
      v11 = (unint64_t)a3 % *((_QWORD *)&xmmword_1EE417698 + 1);
  }
  else
  {
    v11 = (DWORD2(xmmword_1EE417698) - 1) & a3;
  }
  v12 = *(uint64_t ***)(xmmword_1EE417698 + 8 * v11);
  if (!v12 || (v13 = *v12) == 0)
  {
LABEL_19:
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 1376) + 16))(*(_QWORD *)(a2 + 1376), a3);
    v16 = *((_QWORD *)&xmmword_1EE417698 + 1);
    if (*((_QWORD *)&xmmword_1EE417698 + 1))
    {
      v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EE417698 + 8));
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v3 = a3;
        if (*((_QWORD *)&xmmword_1EE417698 + 1) <= (unint64_t)a3)
          v3 = (unint64_t)a3 % *((_QWORD *)&xmmword_1EE417698 + 1);
      }
      else
      {
        v3 = (DWORD2(xmmword_1EE417698) - 1) & a3;
      }
      v18 = *(uint64_t ***)(xmmword_1EE417698 + 8 * v3);
      if (v18)
      {
        for (i = *v18; i; i = (uint64_t *)*i)
        {
          v20 = i[1];
          if (v20 == a3)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)a3)
              goto LABEL_61;
          }
          else
          {
            if (v17.u32[0] > 1uLL)
            {
              if (v20 >= *((_QWORD *)&xmmword_1EE417698 + 1))
                v20 %= *((_QWORD *)&xmmword_1EE417698 + 1);
            }
            else
            {
              v20 &= *((_QWORD *)&xmmword_1EE417698 + 1) - 1;
            }
            if (v20 != v3)
              break;
          }
        }
      }
    }
    v21 = (char *)operator new(0x28uLL);
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = a3;
    *((_DWORD *)v21 + 4) = a3;
    v22 = v21 + 24;
    v23 = *(unsigned __int16 *)a1;
    if (v23 < 0xF)
    {
      *v22 = *(_OWORD *)a1;
    }
    else
    {
      *(_WORD *)v22 = v23;
      v24 = (void *)operator new[]();
      *((_QWORD *)v21 + 4) = v24;
      memcpy(v24, a1[1], *((unsigned __int16 *)v21 + 12));
    }
    v25 = (float)(unint64_t)(qword_1EE4176B0 + 1);
    if (!v16 || (float)(*(float *)&dword_1EE4176B8 * (float)v16) < v25)
    {
      v26 = 1;
      if (v16 >= 3)
        v26 = (v16 & (v16 - 1)) != 0;
      v27 = v26 | (2 * v16);
      v28 = vcvtps_u32_f32(v25 / *(float *)&dword_1EE4176B8);
      if (v27 <= v28)
        v29 = v28;
      else
        v29 = v27;
      sub_19BFD465C(v29);
      v16 = *((_QWORD *)&xmmword_1EE417698 + 1);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (*((_QWORD *)&xmmword_1EE417698 + 1) <= (unint64_t)a3)
          v3 = (unint64_t)a3 % *((_QWORD *)&xmmword_1EE417698 + 1);
        else
          v3 = a3;
      }
      else
      {
        v3 = (DWORD2(xmmword_1EE417698) - 1) & a3;
      }
    }
    v30 = xmmword_1EE417698;
    v31 = *(_QWORD **)(xmmword_1EE417698 + 8 * v3);
    if (v31)
    {
      *(_QWORD *)v21 = *v31;
    }
    else
    {
      *(_QWORD *)v21 = qword_1EE4176A8;
      qword_1EE4176A8 = (uint64_t)v21;
      *(_QWORD *)(v30 + 8 * v3) = &qword_1EE4176A8;
      if (!*(_QWORD *)v21)
        goto LABEL_60;
      v32 = *(_QWORD *)(*(_QWORD *)v21 + 8);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v32 >= v16)
          v32 %= v16;
      }
      else
      {
        v32 &= v16 - 1;
      }
      v31 = (_QWORD *)(xmmword_1EE417698 + 8 * v32);
    }
    *v31 = v21;
LABEL_60:
    ++qword_1EE4176B0;
LABEL_61:
    if (*(unsigned __int16 *)a1 >= 3u)
      ++*(_DWORD *)(a2 + 8);
    return;
  }
  v14 = *((_QWORD *)&xmmword_1EE417698 + 1) - 1;
  while (1)
  {
    v15 = v13[1];
    if (v15 == a3)
      break;
    if (v9.u32[0] > 1uLL)
    {
      if (v15 >= *((_QWORD *)&xmmword_1EE417698 + 1))
        v15 %= *((_QWORD *)&xmmword_1EE417698 + 1);
    }
    else
    {
      v15 &= v14;
    }
    if (v15 != v11)
      goto LABEL_19;
LABEL_18:
    v13 = (uint64_t *)*v13;
    if (!v13)
      goto LABEL_19;
  }
  if (*((_DWORD *)v13 + 4) != (_DWORD)a3)
    goto LABEL_18;
  if (v9.u32[0] > 1uLL)
  {
    v33 = a3;
    if (*((_QWORD *)&xmmword_1EE417698 + 1) <= (unint64_t)a3)
      v33 = (unint64_t)a3 % *((_QWORD *)&xmmword_1EE417698 + 1);
  }
  else
  {
    v33 = (DWORD2(xmmword_1EE417698) - 1) & a3;
  }
  v34 = *(void ***)(xmmword_1EE417698 + 8 * v33);
  if (v34)
  {
    v35 = (unsigned __int16 *)*v34;
    if (*v34)
    {
      do
      {
        v36 = *((_QWORD *)v35 + 1);
        if (v36 == a3)
        {
          if (*((_DWORD *)v35 + 4) == (_DWORD)a3)
            goto LABEL_104;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v36 >= *((_QWORD *)&xmmword_1EE417698 + 1))
              v36 %= *((_QWORD *)&xmmword_1EE417698 + 1);
          }
          else
          {
            v36 &= v14;
          }
          if (v36 != v33)
            break;
        }
        v35 = *(unsigned __int16 **)v35;
      }
      while (v35);
    }
  }
  v35 = (unsigned __int16 *)operator new(0x28uLL);
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 1) = a3;
  *((_DWORD *)v35 + 4) = a3;
  v37 = (float)(unint64_t)(qword_1EE4176B0 + 1);
  v35[12] = 0;
  if ((float)(*(float *)&dword_1EE4176B8 * (float)v8) < v37)
  {
    v39 = v8 < 3 || v10 > 1;
    v40 = v39 | (2 * v8);
    v41 = vcvtps_u32_f32(v37 / *(float *)&dword_1EE4176B8);
    if (v40 <= v41)
      v42 = v41;
    else
      v42 = v40;
    sub_19BFD465C(v42);
    v8 = *((_QWORD *)&xmmword_1EE417698 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (*((_QWORD *)&xmmword_1EE417698 + 1) <= (unint64_t)a3)
        v33 = (unint64_t)a3 % *((_QWORD *)&xmmword_1EE417698 + 1);
      else
        v33 = a3;
    }
    else
    {
      v33 = (DWORD2(xmmword_1EE417698) - 1) & a3;
    }
  }
  v43 = xmmword_1EE417698;
  v44 = *(_QWORD **)(xmmword_1EE417698 + 8 * v33);
  if (v44)
  {
    *(_QWORD *)v35 = *v44;
    goto LABEL_102;
  }
  *(_QWORD *)v35 = qword_1EE4176A8;
  qword_1EE4176A8 = (uint64_t)v35;
  *(_QWORD *)(v43 + 8 * v33) = &qword_1EE4176A8;
  if (*(_QWORD *)v35)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v35 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v45 >= v8)
        v45 %= v8;
    }
    else
    {
      v45 &= v8 - 1;
    }
    v44 = (_QWORD *)(xmmword_1EE417698 + 8 * v45);
LABEL_102:
    *v44 = v35;
  }
  ++qword_1EE4176B0;
LABEL_104:
  v46 = v35[12];
  if (v46 < 0xF)
  {
    *(_OWORD *)a1 = *(_OWORD *)(v35 + 12);
  }
  else
  {
    *(_WORD *)a1 = v46;
    v47 = (void *)operator new[]();
    a1[1] = v47;
    memcpy(v47, *((const void **)v35 + 4), *(unsigned __int16 *)a1);
  }
}

void sub_19BFD45F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_19BFD486C(1, v1);
  _Unwind_Resume(a1);
}

void sub_19BFD465C(size_t __n)
{
  size_t prime;
  size_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  size_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;
  size_t v13;
  void *v14;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v2 = *((_QWORD *)&xmmword_1EE417698 + 1);
  if (prime <= *((_QWORD *)&xmmword_1EE417698 + 1))
  {
    if (prime >= *((_QWORD *)&xmmword_1EE417698 + 1))
      return;
    v9 = vcvtps_u32_f32((float)(unint64_t)qword_1EE4176B0 / *(float *)&dword_1EE4176B8);
    if (*((_QWORD *)&xmmword_1EE417698 + 1) < 3uLL
      || (v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EE417698 + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= v2)
      return;
    if (!prime)
    {
      v14 = (void *)xmmword_1EE417698;
      *(_QWORD *)&xmmword_1EE417698 = 0;
      if (v14)
        operator delete(v14);
      *((_QWORD *)&xmmword_1EE417698 + 1) = 0;
      return;
    }
  }
  if (prime >> 61)
    sub_19BF8E6D0();
  v3 = operator new(8 * prime);
  v4 = (void *)xmmword_1EE417698;
  *(_QWORD *)&xmmword_1EE417698 = v3;
  if (v4)
    operator delete(v4);
  v5 = 0;
  *((_QWORD *)&xmmword_1EE417698 + 1) = prime;
  do
    *(_QWORD *)(xmmword_1EE417698 + 8 * v5++) = 0;
  while (prime != v5);
  v6 = (_QWORD **)qword_1EE4176A8;
  if (qword_1EE4176A8)
  {
    v7 = *(_QWORD *)(qword_1EE4176A8 + 8);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime)
        v7 %= prime;
    }
    else
    {
      v7 &= prime - 1;
    }
    *(_QWORD *)(xmmword_1EE417698 + 8 * v7) = &qword_1EE4176A8;
    for (i = *v6; i; v7 = v13)
    {
      v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime)
          v13 %= prime;
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(_QWORD *)(xmmword_1EE417698 + 8 * v13))
        {
          *(_QWORD *)(xmmword_1EE417698 + 8 * v13) = v6;
          goto LABEL_31;
        }
        *v6 = (_QWORD *)*i;
        *i = **(_QWORD **)(xmmword_1EE417698 + 8 * v13);
        **(_QWORD **)(xmmword_1EE417698 + 8 * v13) = i;
        i = v6;
      }
      v13 = v7;
LABEL_31:
      v6 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

void sub_19BFD486C(char a1, _QWORD *__p)
{
  uint64_t v3;

  if (a1)
  {
    if (*((unsigned __int16 *)__p + 12) >= 0xFu)
    {
      v3 = __p[4];
      if (v3)
        MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *sub_19BFD48D0(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = off_1E3D14948;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19BF8CD70(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_19BFD4924(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_19BFD4938(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E3D14948;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

void sub_19BFD4974(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    sub_19BFD4974(*a1);
    sub_19BFD4974(a1[1]);
    if (*((unsigned __int16 *)a1 + 20) >= 0xFu)
    {
      v2 = a1[6];
      if (v2)
        MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
    }
    operator delete(a1);
  }
}

void sub_19BFD49D4(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E3D14948;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFD4A24(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_19BFD4A40(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v20;
  unint64_t v21;
  float v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *p_p;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  _BYTE *v55;
  unsigned int v56;
  BOOL v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  char v65;
  char *v66;
  _BYTE *v67;
  unsigned int v68;
  unsigned int v69;
  BOOL v70;
  _BYTE *v71;
  int v72;
  BOOL v73;
  void *v74;
  int v75;
  void *v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  const char *v87;
  int v88;
  _BYTE *v89;
  int v90;
  int v91;
  int v92;
  void *v93[2];
  uint64_t v94;
  _BYTE *v95;
  int v96;
  int v97;
  unsigned int v98;
  unsigned __int16 v99[2];
  unsigned __int16 v100;
  unsigned __int8 v101;
  void *v102;
  _BYTE v103[16];
  void *__p;
  void *v105;
  uint64_t v106;
  int v107;
  __int16 v108;
  unsigned __int8 v109;
  void *v110;
  char v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 37) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  HIDWORD(v13) = 0;
  *(_QWORD *)(a1 + 64) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  *(_WORD *)(a1 + 80) = 0;
  v14 = a2[1];
  v15 = a2[2];
  v16 = v15 + 1;
  if (v14 && v16 > v14)
    return a1;
  v17 = *a2;
  a2[2] = v16;
  if (!v17)
    return a1;
  v18 = v15 + 2;
  if (v14)
  {
    if (v18 > v14)
      return a1;
  }
  a2[2] = v18;
  v20 = *(_BYTE *)(v17 + v16);
  *(_BYTE *)(a1 + 44) = v20;
  LODWORD(v13) = 1.0;
  if ((v20 & 4) != 0)
  {
    v21 = v15 + 3;
    if (v14 && v21 > v14)
      return a1;
    a2[2] = v21;
    LOBYTE(v13) = *(_BYTE *)(v17 + v18);
    v22 = (double)v13 * 0.00392156863;
    *(float *)&v13 = v22 * v22;
    v18 = v21;
  }
  *(_DWORD *)(a1 + 32) = v13;
  if ((v20 & 0x20) != 0)
  {
    v24 = v18 + 1;
    if (v14 && v24 > v14)
      return a1;
    a2[2] = v24;
    v23 = *(unsigned __int8 *)(v17 + v18);
  }
  else
  {
    v23 = 0;
  }
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 16))(a6, v23);
  *(_DWORD *)(a1 + 36) = v25;
  if ((v25 & 1) != 0)
    *(_DWORD *)(a1 + 40) = 1;
  v26 = *(_BYTE *)(a1 + 44);
  if ((v26 & 1) != 0)
  {
    v28 = a2[1];
    v27 = a2[2];
    v29 = v27 + 4;
    if (v28 && v29 > v28)
      return a1;
    v30 = *a2;
    a2[2] = v29;
    if (!v30)
      return a1;
    v31 = bswap32(*(_DWORD *)(v30 + v27));
    *(_DWORD *)(a1 + 36) = v25 | 0x200000;
    *(_DWORD *)(a1 + 40) = v31;
  }
  if ((v26 & 0x40) != 0)
  {
    v33 = a2[1];
    v32 = a2[2];
    v34 = v32 + 4;
    if (v33 && v34 > v33)
      return a1;
    v35 = *a2;
    a2[2] = v34;
    if (!v35)
      return a1;
    *(_DWORD *)(a1 + 56) = bswap32(*(_DWORD *)(v35 + v32));
  }
  if ((v26 & 0x10) == 0)
  {
    if (*a3)
    {
      sub_19C016B04((uint64_t)v99, a4, a3);
      if (!v99[0])
        __assert_rtn("Word", "TIWord.cpp", 157, "!common_letter_base.is_empty()");
      if ((*(_BYTE *)(a1 + 44) & 8) != 0)
      {
        v107 = 0x100000;
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v111 = 0;
        v55 = v102;
        if (!v102)
          v55 = v103;
        v95 = v55;
        v96 = 0;
        v97 = v99[0];
        v98 = 0;
        sub_19BF8BB80((uint64_t *)&v95);
        v56 = 0;
        v57 = 1;
        while (1)
        {
          v58 = v57;
          if (!v57)
            break;
          v60 = a2[1];
          v59 = a2[2];
          v61 = v59 + 1;
          if (v60)
            v62 = v61 > v60;
          else
            v62 = 0;
          if (!v62)
          {
            v63 = *a2;
            a2[2] = v61;
            if (v63)
            {
              v64 = *(_BYTE *)(v63 + v59);
              v93[0] = 0;
              v93[1] = 0;
              v94 = 0;
              v65 = sub_19C03427C(a2, (uint64_t)v93);
              if ((v65 & 1) != 0)
              {
                if (v94 >= 0)
                  v66 = (char *)v93;
                else
                  v66 = (char *)v93[0];
                sub_19BFF68B0((uint64_t)&__p, v66);
                if (v56 < (v64 & 0x1Fu))
                {
                  while (1)
                  {
                    v67 = v102;
                    if (!v102)
                      v67 = v103;
                    v89 = v67;
                    v90 = v99[0];
                    v91 = v99[0];
                    v92 = 0;
                    sub_19BF8BB80((uint64_t *)&v89);
                    if (v95 != v89)
                      __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
                    if (v96 == v90)
                      break;
                    sub_19BFF6A20((unsigned __int16 *)&v107, v98);
                    sub_19BF8BB80((uint64_t *)&v95);
                    if ((v64 & 0x1F) == ++v56)
                    {
                      v56 = v64 & 0x1F;
                      break;
                    }
                  }
                }
                sub_19BFF7414((unsigned __int16 *)&v107, (uint64_t)&__p);
                if ((v64 & 0x20) != 0)
                {
                  sub_19BF8BB80((uint64_t *)&v95);
                  sub_19BF8BB80((uint64_t *)&v95);
                  v56 += 2;
                }
                else if ((v64 & 0x40) != 0)
                {
                  *(_DWORD *)(a1 + 36) |= 0x400000u;
                }
                else
                {
                  v68 = 0;
                  v69 = WORD2(__p);
                  if (WORD2(__p))
                    goto LABEL_90;
LABEL_89:
                  sub_19BF86BF8((unsigned __int16 *)&__p);
                  v69 = WORD2(__p);
LABEL_90:
                  while (v68 < v69)
                  {
                    sub_19BF8BB80((uint64_t *)&v95);
                    ++v68;
                    if (!v69)
                      goto LABEL_89;
                  }
                  v56 += v68;
                }
                v57 = v64 < 0;
                if (v105)
                  v70 = BYTE6(__p) == 1;
                else
                  v70 = 0;
                if (v70)
                  free(v105);
              }
              else
              {
                v57 = 1;
              }
              if (SHIBYTE(v94) < 0)
                operator delete(v93[0]);
              if ((v65 & 1) != 0)
                continue;
            }
          }
          goto LABEL_114;
        }
        while (1)
        {
          v71 = v102;
          if (!v102)
            v71 = v103;
          __p = v71;
          LODWORD(v105) = v99[0];
          HIDWORD(v105) = v99[0];
          LODWORD(v106) = 0;
          sub_19BF8BB80((uint64_t *)&__p);
          if (v95 != __p)
            __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
          if (v96 == (_DWORD)v105)
            break;
          sub_19BFF6A20((unsigned __int16 *)&v107, v98);
          sub_19BF8BB80((uint64_t *)&v95);
          ++v56;
        }
        v72 = v100;
        if (!v100)
        {
          sub_19BF86BF8(v99);
          v72 = v100;
        }
        if (v56 != v72)
          __assert_rtn("parse_substitution_list", "TIWord.cpp", 79, "count == base_surface_form.length()");
        sub_19BF8A1F4(a1, (unsigned __int16 *)&v107);
LABEL_114:
        if (v110)
          v73 = v109 == 1;
        else
          v73 = 0;
        if (v73)
          free(v110);
        if (v58)
        {
          v74 = v102;
          if (v102)
          {
            v75 = v101;
LABEL_147:
            if (v75 == 1)
              free(v74);
          }
          return a1;
        }
      }
      else
      {
        sub_19BF8A1F4(a1, v99);
      }
      v76 = v102;
      if (v102)
      {
        v77 = v101;
LABEL_125:
        if (v77 == 1)
          free(v76);
      }
      goto LABEL_127;
    }
    v87 = "!sort_key_for_derivation.empty()";
    v88 = 155;
LABEL_160:
    __assert_rtn("Word", "TIWord.cpp", v88, v87);
  }
  if ((a7 & 0x40000) == 0)
  {
    __p = 0;
    v105 = 0;
    v106 = 0;
    if ((sub_19C03427C(a2, (uint64_t)&__p) & 1) != 0)
    {
      if (v106 >= 0)
        p_p = (char *)&__p;
      else
        p_p = (char *)__p;
      sub_19BFF68B0((uint64_t)&v107, p_p);
      sub_19BF8A1F4(a1, (unsigned __int16 *)&v107);
      if (v110 && v109 == 1)
        free(v110);
      if (SHIBYTE(v106) < 0)
        operator delete(__p);
      goto LABEL_127;
    }
    if (SHIBYTE(v106) < 0)
      operator delete(__p);
    return a1;
  }
  if (!a5)
  {
    v87 = "huffman_decoder";
    v88 = 143;
    goto LABEL_160;
  }
  v107 = 0x100000;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v37 = *(unsigned int **)(a5 + 32);
  if (v37 == *(unsigned int **)(a5 + 40))
  {
    v42 = "valid()";
    v54 = 399;
    goto LABEL_63;
  }
  v38 = *v37;
  if (!*v37)
  {
    v42 = "table.bit_length >= 1";
LABEL_62:
    v54 = 407;
LABEL_63:
    __assert_rtn("decode", "TIHuffmanCoder.cpp", v54, v42);
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = "table.bit_length >= 1";
  while (1)
  {
    if (v40 >= v38)
    {
LABEL_54:
      v46 = v40;
      v45 = v41;
    }
    else
    {
      v44 = *a2;
      v43 = a2[1];
      v45 = v41;
      v46 = v40;
      v47 = a2[2];
      do
      {
        v48 = v47 + 1;
        if (v43 && v48 > v43)
          break;
        a2[2] = v48;
        if (!v44)
          goto LABEL_54;
        v45 |= *(unsigned __int8 *)(v44 + v47) << v46;
        v46 += 8;
        ++v47;
      }
      while (v46 < v38);
    }
    v49 = v45 & ~(-1 << v38);
    v50 = *(_QWORD *)&v37[8 * v39 + 2];
    v51 = *(unsigned __int8 *)(v50 + 12 * v49 + 4);
    v40 = v46 - v51;
    if (v46 < v51)
    {
      v74 = v110;
      if (!v110)
        return a1;
      v75 = v109;
      goto LABEL_147;
    }
    v52 = *(_DWORD *)(v50 + 12 * v49);
    if (v52 == 1)
    {
      v39 = *(unsigned int *)(v50 + 12 * v49 + 8);
      goto LABEL_61;
    }
    if (!v52)
      break;
LABEL_61:
    v41 = v45 >> v51;
    v38 = v37[8 * v39];
    if (!v38)
      goto LABEL_62;
  }
  v53 = *(_DWORD *)(v50 + 12 * v49 + 8);
  if (v53)
  {
    sub_19BFF6A20((unsigned __int16 *)&v107, v53);
    v39 = 0;
    v37 = *(unsigned int **)(a5 + 32);
    goto LABEL_61;
  }
  if (v40 >= 8)
    a2[2] -= v40 >> 3;
  sub_19BF8A1F4(a1, (unsigned __int16 *)&v107);
  v76 = v110;
  if (v110)
  {
    v77 = v109;
    goto LABEL_125;
  }
LABEL_127:
  if ((a7 & 0x10000) != 0)
  {
    v107 = 0;
    if ((sub_19C034378(a2, &v107) & 1) != 0)
    {
      *(_DWORD *)(a1 + 60) = v107;
      goto LABEL_130;
    }
LABEL_144:
    sub_19BF8A320(a1);
    return a1;
  }
LABEL_130:
  if ((a7 & 0x200000) == 0)
  {
    if ((a7 & 0x80000) == 0)
      return a1;
    v78 = a2[1];
    v79 = a2[2];
    goto LABEL_137;
  }
  v78 = a2[1];
  v80 = a2[2];
  v79 = v80 + 4;
  if (v78 && v79 > v78)
    goto LABEL_144;
  v81 = *a2;
  a2[2] = v79;
  if (!v81)
    goto LABEL_144;
  *(_DWORD *)(a1 + 64) = bswap32(*(_DWORD *)(v81 + v80));
  if ((a7 & 0x80000) != 0)
  {
LABEL_137:
    *(_BYTE *)(a1 + 72) = 1;
    v82 = v79 + 4;
    if (!v78 || v82 <= v78)
    {
      v83 = *a2;
      a2[2] = v82;
      if (v83)
      {
        v84 = bswap32(*(_DWORD *)(v83 + v79));
        *(_BYTE *)(a1 + 72) = 1;
        *(_DWORD *)(a1 + 76) = v84;
        v85 = v79 + 6;
        if (!v78 || v85 <= v78)
        {
          v86 = *a2;
          a2[2] = v85;
          if (v86)
            *(_WORD *)(a1 + 80) = bswap32(*(unsigned __int16 *)(v86 + v82)) >> 16;
        }
      }
    }
  }
  return a1;
}

void sub_19BFD52C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,void *a25,uint64_t a26,uint64_t a27,void *__p,void *a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  void *v36;
  void *v37;

  v36 = *(void **)(v34 - 120);
  if (v36 && *(_BYTE *)(v34 - 122) == 1)
    free(v36);
  if (a33 < 0)
    operator delete(__p);
  v37 = *(void **)(v33 + 8);
  if (v37)
  {
    if (*(_BYTE *)(v33 + 6) == 1)
      free(v37);
  }
  _Unwind_Resume(exception_object);
}

void sub_19BFD53CC(uint64_t a1, float *a2, unsigned int a3, int a4)
{
  BOOL v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(float *)(a1 + 32) = *(float *)(a1 + 32) * a2[8];
  sub_19BF8CE58(&v9, (unsigned __int16 *)a2, a3, *(unsigned __int16 *)a2);
  sub_19BFF7414((unsigned __int16 *)a1, (uint64_t)&v9);
  if (v10)
    v7 = BYTE6(v9) == 1;
  else
    v7 = 0;
  if (v7)
    free(v10);
  *(_DWORD *)(a1 + 56) &= ~0x20000000u;
  *(_DWORD *)(a1 + 60) = a4;
  v8 = *((_DWORD *)a2 + 9);
  if ((v8 & 2) != 0)
  {
    *(_DWORD *)(a1 + 36) |= 2u;
    v8 = *((_DWORD *)a2 + 9);
    if ((v8 & 0x80) == 0)
    {
LABEL_9:
      if ((v8 & 4) == 0)
        return;
      goto LABEL_10;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_9;
  }
  *(_DWORD *)(a1 + 36) |= 0x80u;
  if (((_DWORD)a2[9] & 4) == 0)
    return;
LABEL_10:
  *(_DWORD *)(a1 + 36) |= 4u;
}

void sub_19BFD54C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  BOOL v14;

  if (a13)
    v14 = a12 == 1;
  else
    v14 = 0;
  if (v14)
    free(a13);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19BFD54EC(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *result;
  unsigned int v7;
  uint64_t v8;
  int v9;
  UChar32 v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  UChar32 c;
  _BYTE v19[8];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)a2 + 10))
    return (uint64_t *)sub_19BF86B60(a1, a2);
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*((_QWORD *)a2 + 1))
    v4 = *((_QWORD *)a2 + 1);
  else
    v4 = (uint64_t)(a2 + 8);
  v15 = v4;
  v5 = *a2;
  v16 = 0;
  v17 = v5;
  c = 0;
  sub_19BF8BB80(&v15);
  v11 = v4;
  v12 = v5;
  v13 = v5;
  v14 = 0;
  result = sub_19BF8BB80(&v11);
  v7 = 0;
  v8 = v11;
  v9 = v12;
  while (1)
  {
    if (v15 != v8)
      __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
    if (v16 == v9)
      break;
    v10 = c;
    if (v7 <= 0x1F && ((*((_DWORD *)a2 + 10) >> v7) & 1) != 0 && !u_istitle(c))
    {
      sub_19C020FEC((uint64_t)v19, v10, 0);
      sub_19BFF7414((unsigned __int16 *)a1, (uint64_t)v19);
      if (v20)
      {
        if (v19[6] == 1)
          free(v20);
      }
    }
    else
    {
      sub_19BFF6A20((unsigned __int16 *)a1, v10);
    }
    ++v7;
    result = sub_19BF8BB80(&v15);
  }
  return result;
}

void sub_19BFD56A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  uint64_t v19;
  void *v21;

  if (a19 && a18 == 1)
    free(a19);
  v21 = *(void **)(v19 + 8);
  if (v21)
  {
    if (*(_BYTE *)(v19 + 6) == 1)
      free(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LXLatticeCreateMutable(unint64_t a1)
{
  uint64_t Instance;
  _QWORD *v3;
  uint64_t v4;

  if (qword_1EE4176C8 != -1)
    dispatch_once(&qword_1EE4176C8, &unk_1E3D15CD8);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = 0;
  v3 = (_QWORD *)operator new();
  *v3 = &off_1E3D13FF0;
  v3[1] = 0;
  v3[2] = 0;
  v3[3] = 0;
  v4 = *(_QWORD *)(Instance + 16);
  *(_QWORD *)(Instance + 16) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (a1)
    sub_19C016224(*(_QWORD *)(Instance + 16), a1);
  return Instance;
}

void sub_19BFD57B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFD57E0()
{
  uint64_t result;

  qword_1EE4176D0 = 0;
  *(_QWORD *)algn_1EE4176D8 = "LXLattice";
  qword_1EE4176E0 = 0;
  unk_1EE4176E8 = 0;
  qword_1EE4176F0 = (uint64_t)sub_19BFD582C;
  unk_1EE4176F8 = 0u;
  unk_1EE417708 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE417730 = result;
  return result;
}

uint64_t sub_19BFD582C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t LXLatticeAddNode(uint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, double a5)
{
  CFIndex Length;
  const UniChar *CharactersPtr;
  UniChar *v12;
  void *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double **v19;
  unint64_t v20;
  double *v21;
  char **v22;
  double *v23;
  uint64_t v24;
  double **v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double *v31;
  double *v32;
  double *v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  __int128 v38;
  double *v39;
  double *v40;
  char *v41;
  double *v42;
  double *v43;
  double *v44;
  char *v45;
  _QWORD *v46;
  _QWORD v47[3];
  char v48;
  __int128 v49;
  __int128 v50;
  CFRange v51;

  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16)) <= a2)
    sub_19C016224(*(_QWORD *)(a1 + 16), a2 + 1);
  Length = CFStringGetLength(a3);
  CharactersPtr = CFStringGetCharactersPtr(a3);
  if (CharactersPtr)
  {
    v12 = (UniChar *)CharactersPtr;
    v13 = 0;
  }
  else
  {
    if (Length < 0)
      v14 = -1;
    else
      v14 = 2 * Length;
    v13 = (void *)operator new[]();
    bzero(v13, v14);
    v51.location = 0;
    v51.length = Length;
    CFStringGetCharacters(a3, v51, (UniChar *)v13);
    v12 = (UniChar *)v13;
  }
  if ((*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2))
    v15 = 1;
  else
    v15 = Length == a4;
  if (v15)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v17 = v16 + 24 * a2;
    v20 = *(_QWORD *)(v17 + 8);
    v19 = (double **)(v17 + 8);
    v18 = v20;
    v22 = (char **)(v19 + 1);
    v21 = v19[1];
    if (v20 >= (unint64_t)v21)
    {
      v26 = (double **)(v16 + 24 * a2);
      v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (_QWORD)*v26) >> 3);
      if (v27 + 1 > 0x666666666666666)
        sub_19BF8EB40();
      v28 = 0xCCCCCCCCCCCCCCCDLL * (v21 - *v26);
      v29 = 2 * v28;
      if (2 * v28 <= v27 + 1)
        v29 = v27 + 1;
      if (v28 >= 0x333333333333333)
        v30 = 0x666666666666666;
      else
        v30 = v29;
      v46 = v19 + 1;
      if (v30)
      {
        if (v30 > 0x666666666666666)
          sub_19BF8E6D0();
        v31 = (double *)operator new(40 * v30);
      }
      else
      {
        v31 = 0;
      }
      v42 = v31;
      v43 = &v31[5 * v27];
      v44 = v43;
      v45 = (char *)&v31[5 * v30];
      sub_19C01618C(v43, v12, Length);
      v32 = v43;
      v43[3] = a5;
      *((_QWORD *)v32 + 4) = a4;
      v33 = v43;
      v44 += 5;
      v34 = *v19;
      v35 = *v26;
      *(_QWORD *)&v50 = v43;
      *((_QWORD *)&v50 + 1) = v43;
      v49 = v50;
      v47[0] = v19 + 1;
      v47[1] = &v49;
      v47[2] = &v50;
      v48 = 0;
      if (v34 != v35)
      {
        do
        {
          v36 = v33 - 5;
          v37 = v34 - 5;
          if (*((char *)v34 - 17) < 0)
          {
            sub_19BFB6040(v36, *((void **)v34 - 5), *((_QWORD *)v34 - 4));
          }
          else
          {
            v38 = *(_OWORD *)v37;
            *(v33 - 3) = *(v34 - 3);
            *(_OWORD *)v36 = v38;
          }
          *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
          v33 = (double *)(*((_QWORD *)&v50 + 1) - 40);
          *((_QWORD *)&v50 + 1) -= 40;
          v34 -= 5;
        }
        while (v37 != v35);
      }
      v48 = 1;
      sub_19BFD5C24((uint64_t)v47);
      v39 = *v26;
      *v26 = v33;
      v43 = v39;
      v40 = *v19;
      v23 = v44;
      *v19 = v44;
      v44 = v40;
      v41 = *v22;
      *v22 = v45;
      v45 = v41;
      v42 = v39;
      sub_19BFD5BC4((uint64_t)&v42);
    }
    else
    {
      sub_19C01618C((_QWORD *)v18, v12, Length);
      *(double *)(v18 + 24) = a5;
      *(_QWORD *)(v18 + 32) = a4;
      v23 = (double *)(v18 + 40);
      *v19 = (double *)(v18 + 40);
    }
    *v19 = v23;
    v24 = 1;
    if (v13)
      goto LABEL_17;
  }
  else
  {
    v24 = 0;
    if (v13)
LABEL_17:
      MEMORY[0x1A1AD0CB8](v13, 0x1000C80BDFB0063);
  }
  return v24;
}

void sub_19BFD5B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_19BFD5BC4((uint64_t)va);
  if (v2)
    MEMORY[0x1A1AD0CB8](v2, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFD5BC4(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19BFD5C24(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      v3 += 40;
    }
  }
  return a1;
}

void sub_19BFD5C80(uint64_t a1, char *a2, unsigned __int16 a3)
{
  BOOL v4;
  _BYTE v5[8];
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  sub_19BFF6914((uint64_t)v5, a2, a3);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 8))(a1, v5);
  if (v6)
    v4 = v5[6] == 1;
  else
    v4 = 0;
  if (v4)
    free(v6);
}

void sub_19BFD5D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  BOOL v14;

  if (a13)
    v14 = a12 == 1;
  else
    v14 = 0;
  if (v14)
    free(a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFD5D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 8))(&v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(&v7, a1, a3);
  if ((sub_19BFECF90((unsigned __int16 *)&v9, (unsigned __int16 *)&v7) & 1) != 0)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = !sub_19BFED000((unsigned __int16 *)&v9, (unsigned __int16 *)&v7);
  if ((unsigned __int16)v7 >= 0xFu && v8)
    MEMORY[0x1A1AD0CB8](v8, 0x1000C8077774924);
  if ((unsigned __int16)v9 >= 0xFu && v10)
    MEMORY[0x1A1AD0CB8](v10, 0x1000C8077774924);
  return v5;
}

void sub_19BFD5E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, uint64_t a12)
{
  if (a11 >= 0xFu)
  {
    if (a12)
      MEMORY[0x1A1AD0CB8](a12, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void sub_19BFD5E40()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFD5E54(uint64_t result)
{
  uint64_t v1;
  int v2;
  void *v3;

  v1 = result;
  do
    v2 = __ldaxr((unsigned int *)result);
  while (__stlxr(v2 - 1, (unsigned int *)result));
  if (v2 <= 0)
    __assert_rtn("derefBase", "WTFRefCounted.h", 70, "new_count >= 0");
  if (result && v2 == 1)
  {
    v3 = *(void **)(result + 16);
    if (v3)
    {
      if (*(_BYTE *)(v1 + 14) == 1)
        free(v3);
    }
    JUMPOUT(0x1A1AD0CDCLL);
  }
  return result;
}

unsigned int *sub_19BFD5EEC(unsigned int *result)
{
  unsigned int *v1;
  int v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;

  v1 = result;
  do
    v2 = __ldaxr(result);
  while (__stlxr(v2 - 1, result));
  if (v2 <= 0)
    __assert_rtn("derefBase", "WTFRefCounted.h", 70, "new_count >= 0");
  if (v2 == 1)
  {
    v3 = result + 6;
    v4 = result[4];
    if ((_DWORD)v4)
    {
      v5 = 8 * v4;
      v6 = (uint64_t *)(result + 6);
      do
      {
        if (*v6)
          sub_19BFD5E54(*v6);
        ++v6;
        v5 -= 8;
      }
      while (v5);
      v7 = v1[4];
    }
    else
    {
      v7 = 0;
    }
    v8 = v1[5];
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      v10 = &v3[2 * v7];
      do
      {
        if (*(_QWORD *)v10)
          sub_19BFD5EEC();
        v10 += 2;
        v9 -= 8;
      }
      while (v9);
    }
    JUMPOUT(0x1A1AD0CDCLL);
  }
  return result;
}

void sub_19BFD5FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  char v18;

  if (a2)
  {
    v14 = 0;
    v15 = &v14;
    v16 = 0x2000000000;
    v17 = 0;
    v4 = a1 + 24;
    v5 = *(unsigned int *)(a1 + 16);
    v6 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      v8 = MEMORY[0x1E0C809B0];
      v9 = (uint64_t *)(v4 + 8 * v5);
      while (1)
      {
        v10 = *v9;
        v13[0] = v8;
        v13[1] = 0x40000000;
        v13[2] = sub_19BFD6118;
        v13[3] = &unk_1E3D15D00;
        v13[4] = a2;
        v13[5] = &v14;
        sub_19BFD5FDC(v10, v13);
        if (*((_BYTE *)v15 + 24))
          break;
        ++v9;
        v7 -= 8;
        if (!v7)
        {
          v5 = *(unsigned int *)(a1 + 16);
          goto LABEL_7;
        }
      }
    }
    else
    {
LABEL_7:
      v18 = 0;
      if ((_DWORD)v5)
      {
        v11 = 8 * v5 - 8;
        do
        {
          (*(void (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, v4, &v18);
          v4 += 8;
          if (v18)
            v12 = 1;
          else
            v12 = v11 == 0;
          v11 -= 8;
        }
        while (!v12);
      }
    }
    _Block_object_dispose(&v14, 8);
  }
}

void sub_19BFD60FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFD6118(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (a3)
  {
    if (*a3)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  return result;
}

void sub_19BFD6160(unsigned int **a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, size_t a6)
{
  char *v10;
  unint64_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int **v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t i;
  unsigned int *v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  void ***v30;
  void ***v31;
  uint64_t v32;
  unsigned int *v33;
  int v34;
  void **v35;
  int v36;
  const char *v37;
  char *v38;
  unint64_t v39;
  unsigned int **v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  size_t v47;
  unint64_t v48;
  uint64_t v49;
  void **v50;
  unsigned int *v51;
  unsigned int *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int **v57;
  unsigned int **v58;
  unsigned int **v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int **v80;
  uint64_t v81;
  unsigned int **v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  void ***v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  int64x2_t v108;
  _QWORD *v109;
  void ***v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int **v113;
  void **v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int **v117;
  unsigned int **v118;
  uint64_t v119;
  unsigned int **v120;
  unsigned int **v121;
  unsigned int *v122;
  unsigned int *v123;
  int v124;
  unsigned int **v125;
  uint64_t v126;
  unsigned int **v127;
  unsigned int *v128;
  int v129;
  unsigned int *v130;
  unsigned int *v131;
  size_t v132;
  unint64_t v133;
  unint64_t v134;
  __int128 v137;
  unsigned int *v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  unsigned int *v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  unsigned int *v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int *v167;
  void **v168;
  int64x2_t v169;
  unint64_t v170;
  unsigned int **v171;
  unsigned int *v172;
  void **v173;
  __int128 v174;
  unsigned int *v175;
  unsigned int **v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v10 = (char *)(a2 + 8);
  v11 = *(unsigned __int8 *)(a2 + 15);
  v12 = v11 - a6;
  v13 = 0;
  if (v11 >= a6)
    v14 = a6;
  else
    v14 = *(unsigned __int8 *)(a2 + 15);
  if (v14)
  {
    while (v10[v13] == *(_BYTE *)(a5 + v13))
    {
      if (v14 == ++v13)
      {
        v13 = v14;
        break;
      }
    }
  }
  if (*(_BYTE *)(a2 + 15))
    v15 = v13 == 0;
  else
    v15 = 0;
  if (v15)
    __assert_rtn("merge", "TIDynamicTrie.cpp", 123, "is_root() || lcp_size > 0");
  v166 = 0;
  if (a6 > v13 && v11 > v13)
  {
    v16 = *(unsigned int *)(a2 + 16);
    v165 = 0;
    v164 = 0uLL;
    sub_19BFD7158(&v164, (unsigned int **)(a2 + 24), (unsigned int **)(a2 + 24 + 8 * v16), v16);
    v17 = *(unsigned int *)(a2 + 20);
    v18 = (unsigned int **)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16));
    v163 = 0;
    v162 = 0uLL;
    sub_19BFD7268((unsigned int **)&v162, v18, &v18[v17], v17);
    sub_19BFD72F4(&v141, &v10[v13], v11 - v13, &v164, &v162);
    v168 = (void **)&v162;
    sub_19BFD7574(&v168);
    v168 = (void **)&v164;
    sub_19BFD75E0(&v168);
    sub_19BFD764C(&v167, *(_QWORD *)(a4 + 24), (char *)(a5 + v13), a6 - v13);
    v19 = v10[v13];
    v20 = *(unsigned __int8 *)(a5 + v13);
    v21 = v19 > v20;
    if (v19 == v20)
      __assert_rtn("merge", "TIDynamicTrie.cpp", 133, "child1_key[0] != child2_key[0]");
    v22 = (unsigned int *)v141;
    if (v21)
      v23 = (unsigned int *)v141;
    else
      v23 = v167;
    if (v21)
      v22 = v167;
    v160 = 0;
    v158 = 0;
    v159 = 0uLL;
    *(_QWORD *)&v141 = 0;
    v173 = (void **)v22;
    *(_QWORD *)&v174 = v23;
    v157 = 0uLL;
    v167 = 0;
    v168 = (void **)&v157;
    v169.i8[0] = 0;
    *(_QWORD *)&v157 = operator new(0x10uLL);
    *((_QWORD *)&v157 + 1) = v157;
    v158 = v157 + 16;
    *((_QWORD *)&v157 + 1) = sub_19BFD7844((unsigned int **)&v173, (unsigned int **)&v174 + 1, (unsigned int **)v157);
    sub_19BFD72F4(&v161, v10, v13, &v159, &v157);
    v24 = v161;
    v161 = 0;
    v166 = v24;
    v168 = (void **)&v157;
    sub_19BFD7574(&v168);
    for (i = 1; i != -1; --i)
    {
      v26 = (unsigned int *)(&v173)[i];
      if (v26)
        sub_19BFD5EEC(v26);
    }
    v168 = (void **)&v159;
    sub_19BFD75E0(&v168);
    if (v167)
      sub_19BFD5EEC(v167);
    v27 = (unsigned int *)v141;
    if (!(_QWORD)v141)
      goto LABEL_172;
    goto LABEL_27;
  }
  if (a6 != v13)
  {
    if (v11 == v13)
      v36 = 156;
    else
      v36 = 155;
    if (v11 == v13)
      v37 = "lcp_size < new_key.size()";
    else
      v37 = "lcp_size == m_key_size";
    if (v11 != v13 || a6 <= v13)
LABEL_178:
      __assert_rtn("merge", "TIDynamicTrie.cpp", v36, v37);
    v38 = (char *)(a5 + v11);
    v39 = *(unsigned int *)(a2 + 20);
    v40 = (unsigned int **)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16));
    v41 = (uint64_t)&v40[v39];
    if ((_DWORD)v39)
    {
      v41 = a2 + 24 + 8 * *(unsigned int *)(a2 + 16);
      v42 = *(unsigned int *)(a2 + 20);
      do
      {
        v43 = v42 >> 1;
        v44 = (uint64_t *)(v41 + 8 * (v42 >> 1));
        v46 = *v44;
        v45 = v44 + 1;
        v42 += ~(v42 >> 1);
        if (*(unsigned __int8 *)(v46 + 8) < *v38)
          v41 = (uint64_t)v45;
        else
          v42 = v43;
      }
      while (v42);
    }
    v141 = 0uLL;
    v142 = 0;
    sub_19BFD7268((unsigned int **)&v141, v40, &v40[v39], v39);
    v47 = a6 - v11;
    v48 = (v41 - (uint64_t)v40) >> 3;
    v49 = v141;
    if (v48 < (uint64_t)(*((_QWORD *)&v141 + 1) - v141) >> 3
      && *(unsigned __int8 *)(*(_QWORD *)(v141 + 8 * v48) + 8) == *v38)
    {
      sub_19BFD6160(&v168);
      v50 = v168;
      if (*((_DWORD *)v168 + 4) || *((_DWORD *)v168 + 5))
      {
        v168 = 0;
        v51 = *(unsigned int **)(v141 + 8 * v48);
        *(_QWORD *)(v141 + 8 * v48) = v50;
        if (v51)
          sub_19BFD5EEC(v51);
      }
      else
      {
        sub_19BFD7AAC((uint64_t)&v141, (unsigned int **)(v141 + 8 * v48));
      }
      v52 = (unsigned int *)v168;
      if (!v168)
        goto LABEL_171;
    }
    else
    {
      sub_19BFD764C(&v167, *(_QWORD *)(a4 + 24), v38, v47);
      v53 = v49 + 8 * v48;
      v54 = v141;
      v55 = v53 - v141;
      v56 = (v53 - (uint64_t)v141) >> 3;
      v57 = (unsigned int **)(v141 + ((v53 - v141) & 0xFFFFFFFFFFFFFFF8));
      if (*((_QWORD *)&v141 + 1) >= (unint64_t)v142)
      {
        v69 = ((uint64_t)(*((_QWORD *)&v141 + 1) - v141) >> 3) + 1;
        if (v69 >> 61)
          sub_19BF8EB40();
        v70 = (uint64_t)v142 - v141;
        if ((uint64_t)((uint64_t)v142 - v141) >> 2 > v69)
          v69 = v70 >> 2;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
          v71 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        v176 = &v142;
        if (v71)
          v71 = (unint64_t)sub_19BFAC524(v71);
        else
          v72 = 0;
        v80 = (unsigned int **)(v71 + 8 * v56);
        v173 = (void **)v71;
        *(_QWORD *)&v174 = v80;
        *((_QWORD *)&v174 + 1) = v80;
        v175 = (unsigned int *)(v71 + 8 * v72);
        if (v56 == v72)
        {
          if (v55 < 1)
          {
            if (v53 == (_QWORD)v54)
              v98 = 1;
            else
              v98 = v55 >> 2;
            v171 = v176;
            v99 = (unsigned int *)sub_19BFAC524(v98);
            v101 = (uint64_t *)v174;
            v102 = *((_QWORD *)&v174 + 1) - v174;
            if (*((_QWORD *)&v174 + 1) == (_QWORD)v174)
            {
              v108 = vdupq_n_s64(v174);
              v104 = (unint64_t)&v99[2 * (v98 >> 2)];
            }
            else
            {
              v103 = v102 >> 3;
              v104 = (unint64_t)&v99[2 * (v98 >> 2)] + (v102 & 0xFFFFFFFFFFFFFFF8);
              v105 = 8 * v103;
              v106 = &v99[2 * (v98 >> 2)];
              do
              {
                v107 = *v101;
                *v101++ = 0;
                *(_QWORD *)v106 = v107;
                v106 += 2;
                v105 -= 8;
              }
              while (v105);
              v108 = (int64x2_t)v174;
            }
            v114 = v173;
            v115 = v175;
            v173 = (void **)v99;
            *(_QWORD *)&v174 = &v99[2 * (v98 >> 2)];
            v169 = v108;
            *((_QWORD *)&v174 + 1) = v104;
            v175 = &v99[2 * v100];
            v168 = v114;
            v170 = (unint64_t)v115;
            sub_19BFD7B04((uint64_t)&v168);
            v82 = (unsigned int **)*((_QWORD *)&v174 + 1);
            v80 = (unsigned int **)v174;
          }
          else
          {
            if (v56 >= -1)
              v81 = v56 + 1;
            else
              v81 = v56 + 2;
            v82 = sub_19BFD7B6C((unsigned int **)(v71 + 8 * v56), v80, &v80[-(v81 >> 1)]);
            v80 = (unsigned int **)(v174 - 8 * (v81 >> 1));
            *(_QWORD *)&v174 = v80;
          }
        }
        else
        {
          v82 = (unsigned int **)(v71 + 8 * v56);
        }
        v116 = v167;
        v167 = 0;
        *v82 = v116;
        v117 = v82 + 1;
        *((_QWORD *)&v174 + 1) = v117;
        v118 = (unsigned int **)v141;
        if (v57 != (unsigned int **)v141)
        {
          v119 = 0;
          v120 = v57;
          v121 = v80;
          do
          {
            v123 = *--v120;
            v122 = v123;
            *--v121 = v123;
            if (v123)
            {
              do
                v124 = __ldaxr(v122);
              while (__stlxr(v124 + 1, v122));
              if (v124 <= 0)
                __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
            }
            v119 -= 8;
          }
          while (v120 != v118);
          v117 = (unsigned int **)*((_QWORD *)&v174 + 1);
          v80 = v121;
        }
        *(_QWORD *)&v174 = v80;
        v125 = (unsigned int **)*((_QWORD *)&v141 + 1);
        if (v57 == *((unsigned int ***)&v141 + 1))
        {
          v127 = v117;
        }
        else
        {
          v126 = 0;
          v127 = v117;
          do
          {
            v128 = *v57;
            *v127 = *v57;
            if (v128)
            {
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 + 1, v128));
              if (v129 <= 0)
                __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
            }
            ++v57;
            ++v127;
            v126 += 8;
          }
          while (v57 != v125);
          v80 = (unsigned int **)v174;
          v57 = (unsigned int **)*((_QWORD *)&v141 + 1);
        }
        v130 = (unsigned int *)v141;
        v131 = v142;
        *(_QWORD *)&v141 = v80;
        *((_QWORD *)&v141 + 1) = v127;
        v142 = v175;
        *((_QWORD *)&v174 + 1) = v57;
        v175 = v131;
        v173 = (void **)v130;
        *(_QWORD *)&v174 = v130;
        sub_19BFD7B04((uint64_t)&v173);
      }
      else if (v57 == *((unsigned int ***)&v141 + 1))
      {
        v79 = v167;
        v167 = 0;
        *v57 = v79;
        *((_QWORD *)&v141 + 1) = v57 + 1;
      }
      else
      {
        v58 = v57 + 1;
        v59 = (unsigned int **)(*((_QWORD *)&v141 + 1) - 8);
        if (*((_QWORD *)&v141 + 1) < 8uLL)
        {
          v61 = (_QWORD *)*((_QWORD *)&v141 + 1);
        }
        else
        {
          v60 = (uint64_t *)(*((_QWORD *)&v141 + 1) - 8);
          v61 = (_QWORD *)*((_QWORD *)&v141 + 1);
          do
          {
            v62 = *v60;
            *v60++ = 0;
            *v61++ = v62;
          }
          while ((unint64_t)v60 < *((_QWORD *)&v54 + 1));
        }
        *((_QWORD *)&v141 + 1) = v61;
        if (*((unsigned int ***)&v54 + 1) != v58)
        {
          v83 = 8 * ((uint64_t)(*((_QWORD *)&v54 + 1) - (_QWORD)v58) >> 3);
          v84 = v54 + 8 * v56 - 8;
          do
          {
            v85 = *(unsigned int **)(v84 + v83);
            *(_QWORD *)(v84 + v83) = 0;
            v86 = *v59;
            *v59 = v85;
            if (v86)
              sub_19BFD5EEC(v86);
            --v59;
            v83 -= 8;
          }
          while (v83);
        }
        v87 = v167;
        v167 = 0;
        v88 = *v57;
        *v57 = v87;
        if (v88)
          sub_19BFD5EEC(v88);
      }
      v52 = v167;
      if (!v167)
        goto LABEL_171;
    }
    sub_19BFD5EEC(v52);
LABEL_171:
    v132 = *(unsigned __int8 *)(a2 + 15);
    v133 = *(unsigned int *)(a2 + 16);
    v140 = 0;
    v139 = 0uLL;
    sub_19BFD7158(&v139, (unsigned int **)(a2 + 24), (unsigned int **)(a2 + 24 + 8 * v133), v133);
    v137 = v141;
    v138 = v142;
    v142 = 0;
    v141 = 0uLL;
    sub_19BFD72F4(&v173, v10, v132, &v139, &v137);
    v24 = (unsigned int *)v173;
    v173 = 0;
    v168 = (void **)&v137;
    sub_19BFD7574(&v168);
    v168 = (void **)&v139;
    sub_19BFD75E0(&v168);
    v168 = (void **)&v141;
    sub_19BFD7574(&v168);
    goto LABEL_172;
  }
  if (a6 == v11)
  {
    v28 = *(unsigned int *)(a2 + 16);
    v154 = 0uLL;
    v153 = 0;
    sub_19BFD7158(&v153, (unsigned int **)(a2 + 24), (unsigned int **)(a2 + 24 + 8 * v28), v28);
    v29 = v153;
    v156 = v154;
    v153 = 0;
    v154 = 0uLL;
    v155 = v29;
    v173 = (void **)MEMORY[0x1E0C809B0];
    *(_QWORD *)&v174 = 0x40000000;
    *((_QWORD *)&v174 + 1) = sub_19BFD7BE8;
    v175 = (unsigned int *)&unk_1E3D15D20;
    v134 = *((_QWORD *)&v156 + 1);
    v30 = (void ***)v156;
    v176 = a3;
    if (v29 == (_QWORD)v156)
      goto LABEL_83;
    v31 = (void ***)v29;
    while (((*((uint64_t (**)(void ***, void ***))&v174 + 1))(&v173, v31) & 1) == 0)
    {
      if (++v31 == v30)
      {
        v31 = v30;
        break;
      }
    }
    if (v31 == v30)
    {
LABEL_83:
      v168 = 0;
      v73 = *(_QWORD *)(a4 + 24);
      if (!v73)
        sub_19BF94AC4();
      (*(void (**)(__int128 *__return_ptr, uint64_t, void ***))(*(_QWORD *)v73 + 48))(&v141, v73, &v168);
      v74 = (void **)v141;
      if (!(_QWORD)v141)
        goto LABEL_149;
      if ((unint64_t)v30 < v134)
      {
        *(_QWORD *)&v141 = 0;
        *v30 = v74;
        *(_QWORD *)&v156 = v30 + 1;
LABEL_149:
        v112 = *(unsigned int *)(a2 + 20);
        v113 = (unsigned int **)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16));
        v152 = 0;
        v151 = 0uLL;
        sub_19BFD7268((unsigned int **)&v151, v113, &v113[v112], v112);
        sub_19BFD72F4(a1, v10, a6, (__int128 *)&v155, &v151);
        v168 = (void **)&v151;
        sub_19BFD7574(&v168);
        v168 = (void **)&v155;
        sub_19BFD75E0(&v168);
        v168 = (void **)&v153;
        sub_19BFD75E0(&v168);
        return;
      }
      v89 = ((uint64_t)v30 - v29) >> 3;
      v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 61)
        sub_19BF8EB40();
      v91 = v134 - v29;
      if ((uint64_t)(v134 - v29) >> 2 > v90)
        v90 = v91 >> 2;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
        v92 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      v171 = (unsigned int **)&v156 + 1;
      if (v92)
      {
        v92 = (unint64_t)sub_19BFAC524(v92);
        v74 = (void **)v141;
      }
      else
      {
        v93 = 0;
      }
      v110 = (void ***)(v92 + 8 * v89);
      v168 = (void **)v92;
      v169.i64[0] = (uint64_t)v110;
      v170 = v92 + 8 * v93;
      *(_QWORD *)&v141 = 0;
      *v110 = v74;
      v169.i64[1] = (uint64_t)(v110 + 1);
      sub_19BFD7938(&v155, &v168);
      v111 = v156;
      sub_19BFD7A30((uint64_t)&v168);
      v97 = v141;
      *(_QWORD *)&v156 = v111;
      if (!(_QWORD)v141)
        goto LABEL_149;
    }
    else
    {
      v168 = *v31;
      v32 = *(_QWORD *)(a4 + 24);
      if (!v32)
        sub_19BF94AC4();
      (*(void (**)(__int128 *__return_ptr, uint64_t, void ***))(*(_QWORD *)v32 + 48))(&v141, v32, &v168);
      v33 = (unsigned int *)v141;
      if ((_QWORD)v141)
      {
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 + 1, v33));
        if (v34 <= 0)
          __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
        v35 = *v31;
        *v31 = (void **)v33;
        if (v35)
          sub_19BFD5E54((uint64_t)v35);
      }
      else
      {
        v94 = v31 + 1;
        if (v31 + 1 != v30)
        {
          do
          {
            v95 = (uint64_t)*(v94 - 1);
            *(v94 - 1) = *v94;
            *v94 = 0;
            if (v95)
              sub_19BFD5E54(v95);
            ++v94;
          }
          while (v94 != v30);
          v31 = v94 - 1;
        }
        while (v30 != v31)
        {
          v96 = (uint64_t)*--v30;
          sub_19BFD7BCC(v96);
        }
        *(_QWORD *)&v156 = v31;
      }
      v97 = v141;
      if (!(_QWORD)v141)
        goto LABEL_149;
    }
    sub_19BFD5E54(v97);
    goto LABEL_149;
  }
  if (a6 >= v11)
  {
    v37 = "lcp_size < m_key_size";
    v36 = 143;
    goto LABEL_178;
  }
  v63 = *(unsigned int *)(a2 + 16);
  v150 = 0;
  v149 = 0uLL;
  sub_19BFD7158(&v149, (unsigned int **)(a2 + 24), (unsigned int **)(a2 + 24 + 8 * v63), v63);
  v64 = *(unsigned int *)(a2 + 20);
  v65 = (unsigned int **)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16));
  v148 = 0;
  v147 = 0uLL;
  sub_19BFD7268((unsigned int **)&v147, v65, &v65[v64], v64);
  sub_19BFD72F4(&v167, &v10[a6], v12, &v149, &v147);
  v168 = (void **)&v147;
  sub_19BFD7574(&v168);
  v168 = (void **)&v149;
  sub_19BFD75E0(&v168);
  v173 = 0;
  v174 = 0uLL;
  v168 = 0;
  v66 = *(_QWORD *)(a4 + 24);
  if (!v66)
    sub_19BF94AC4();
  (*(void (**)(__int128 *__return_ptr, uint64_t, void ***))(*(_QWORD *)v66 + 48))(&v141, v66, &v168);
  v67 = v141;
  v68 = v174;
  if ((_QWORD)v141)
  {
    if ((unint64_t)v174 >= *((_QWORD *)&v174 + 1))
    {
      v75 = (uint64_t)(v174 - (_QWORD)v173) >> 3;
      if ((unint64_t)(v75 + 1) >> 61)
        sub_19BF8EB40();
      v76 = (uint64_t)(*((_QWORD *)&v174 + 1) - (_QWORD)v173) >> 2;
      if (v76 <= v75 + 1)
        v76 = v75 + 1;
      if (*((_QWORD *)&v174 + 1) - (_QWORD)v173 >= 0x7FFFFFFFFFFFFFF8uLL)
        v77 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v77 = v76;
      v171 = (unsigned int **)&v174 + 1;
      if (v77)
      {
        v77 = (unint64_t)sub_19BFAC524(v77);
        v67 = v141;
      }
      else
      {
        v78 = 0;
      }
      v109 = (_QWORD *)(v77 + 8 * v75);
      v168 = (void **)v77;
      v169.i64[0] = (uint64_t)v109;
      v170 = v77 + 8 * v78;
      *(_QWORD *)&v141 = 0;
      *v109 = v67;
      v169.i64[1] = (uint64_t)(v109 + 1);
      sub_19BFD7938((uint64_t *)&v173, &v168);
      v68 = v174;
      sub_19BFD7A30((uint64_t)&v168);
    }
    else
    {
      *(_QWORD *)&v141 = 0;
      *(_QWORD *)v174 = v67;
      v68 += 8;
    }
    *(_QWORD *)&v174 = v68;
  }
  *(_QWORD *)&v145 = v173;
  *((_QWORD *)&v145 + 1) = v68;
  v146 = *((_QWORD *)&v174 + 1);
  v174 = 0uLL;
  v172 = v167;
  v173 = 0;
  v144 = 0;
  v143 = 0uLL;
  v167 = 0;
  v168 = (void **)&v143;
  v169.i8[0] = 0;
  *(_QWORD *)&v143 = operator new(8uLL);
  *((_QWORD *)&v143 + 1) = v143;
  v144 = v143 + 8;
  *((_QWORD *)&v143 + 1) = sub_19BFD7844(&v172, (unsigned int **)&v173, (unsigned int **)v143);
  sub_19BFD72F4(&v161, v10, a6, &v145, &v143);
  v24 = v161;
  v161 = 0;
  v166 = v24;
  v168 = (void **)&v143;
  sub_19BFD7574(&v168);
  if (v172)
    sub_19BFD5EEC(v172);
  v168 = (void **)&v145;
  sub_19BFD75E0(&v168);
  if ((_QWORD)v141)
    sub_19BFD5E54(v141);
  v168 = (void **)&v173;
  sub_19BFD75E0(&v168);
  v27 = v167;
  if (!v167)
    goto LABEL_172;
LABEL_27:
  sub_19BFD5EEC(v27);
LABEL_172:
  *a1 = v24;
}

void sub_19BFD6E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  sub_19BFD7908((unsigned int **)(v19 - 192));
  *(_QWORD *)(v19 - 200) = &a19;
  sub_19BFD7574((void ***)(v19 - 200));
  sub_19BFD7908((unsigned int **)(v19 - 208));
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFD7158(_QWORD *result, unsigned int **a2, unsigned int **a3, unint64_t a4)
{
  _QWORD *v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int *v11;
  int v12;

  if (a4)
  {
    v6 = result;
    result = sub_19BFAC524(a4);
    v7 = (unsigned int **)result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v8];
    if (a2 != a3)
    {
      v9 = 0;
      v10 = (unsigned int **)result;
      do
      {
        v11 = *a2;
        *v10 = *a2;
        if (v11)
        {
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
          if (v12 <= 0)
            __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
        }
        ++a2;
        ++v10;
        v9 += 8;
      }
      while (a2 != a3);
      v7 = v10;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_19BFD722C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19BFD75E0(&a9);
  _Unwind_Resume(a1);
}

unsigned int **sub_19BFD7268(unsigned int **result, unsigned int **a2, unsigned int **a3, unint64_t a4)
{
  _QWORD *v6;
  unsigned int **v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    v7 = (unsigned int **)sub_19BFAC524(a4);
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[v8];
    result = sub_19BFD7844(a2, a3, v7);
    v6[1] = result;
  }
  return result;
}

void sub_19BFD72D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_19BFD7574(&a9);
  _Unwind_Resume(a1);
}

void sub_19BFD72F4(_QWORD *a1, char *a2, size_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int **v10;
  _QWORD v11[3];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int ***v22;
  char v23;
  unsigned int *v24;
  unsigned int *v25;

  v25 = (unsigned int *)*MEMORY[0x1E0C80C00];
  *a1 = 0;
  if (a3 <= 7)
  {
    v19 = *a4;
    v20 = *((_QWORD *)a4 + 2);
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    v17 = *a5;
    v18 = *((_QWORD *)a5 + 2);
    *((_QWORD *)a5 + 1) = 0;
    *((_QWORD *)a5 + 2) = 0;
    *(_QWORD *)a5 = 0;
    sub_19BFD7C0C(&v21, a2, a3, &v19, &v17);
    *a1 = v21;
    v22 = (unsigned int ***)&v17;
    sub_19BFD7574((void ***)&v22);
    v22 = (unsigned int ***)&v19;
    sub_19BFD75E0((void ***)&v22);
  }
  else
  {
    v15 = *a4;
    v16 = *((_QWORD *)a4 + 2);
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    v13 = *a5;
    v14 = *((_QWORD *)a5 + 2);
    *((_QWORD *)a5 + 1) = 0;
    *((_QWORD *)a5 + 2) = 0;
    *(_QWORD *)a5 = 0;
    sub_19BFD72F4(&v21, a2 + 7, a3 - 7, &v15, &v13);
    v22 = (unsigned int ***)&v13;
    sub_19BFD7574((void ***)&v22);
    v22 = (unsigned int ***)&v15;
    sub_19BFD75E0((void ***)&v22);
    v10 = 0;
    memset(v11, 0, sizeof(v11));
    v24 = v21;
    v8 = 0;
    v9 = 0;
    v21 = 0;
    v22 = &v8;
    v23 = 0;
    v8 = (unsigned int **)operator new(8uLL);
    v9 = v8;
    v10 = v8 + 1;
    v9 = sub_19BFD7844(&v24, &v25, v8);
    sub_19BFD7C0C(&v12, a2, 7uLL, v11, &v8);
    v7 = v12;
    v12 = 0;
    *a1 = v7;
    v22 = &v8;
    sub_19BFD7574((void ***)&v22);
    if (v24)
      sub_19BFD5EEC(v24);
    v22 = (unsigned int ***)v11;
    sub_19BFD75E0((void ***)&v22);
    if (v21)
      sub_19BFD5EEC(v21);
  }
}

void sub_19BFD74E8(_Unwind_Exception *a1)
{
  unsigned int **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 80) = v3;
  sub_19BFD7574((void ***)(v4 - 80));
  *(_QWORD *)(v4 - 80) = v2;
  sub_19BFD75E0((void ***)(v4 - 80));
  sub_19BFD7908(v1);
  _Unwind_Resume(a1);
}

void sub_19BFD7574(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  unsigned int *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (unsigned int *)*((_QWORD *)v4 - 1);
        v4 -= 8;
        sub_19BFD7B50(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19BFD75E0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v4 - 1);
        v4 -= 8;
        sub_19BFD7BCC(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19BFD764C(_QWORD *a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21[5];
  uint64_t v22;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21[0] = 0;
  if (!a2)
    sub_19BF94AC4();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void ***))(*(_QWORD *)a2 + 48))(&v22, a2, v21);
  v7 = v22;
  v8 = v19;
  if (v22)
  {
    v9 = (v19 - v18) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_19BF8EB40();
    v10 = (v20 - v18) >> 2;
    if (v10 <= v9 + 1)
      v10 = v9 + 1;
    if ((unint64_t)(v20 - v18) >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v21[4] = (void **)&v20;
    if (v11)
    {
      v11 = (unint64_t)sub_19BFAC524(v11);
      v7 = v22;
    }
    else
    {
      v12 = 0;
    }
    v13 = (void **)(v11 + 8 * v9);
    v21[0] = (void **)v11;
    v21[1] = v13;
    v21[3] = (void **)(v11 + 8 * v12);
    v22 = 0;
    *v13 = (void *)v7;
    v21[2] = v13 + 1;
    sub_19BFD7938(&v18, v21);
    v8 = v19;
    sub_19BFD7A30((uint64_t)v21);
    v19 = v8;
  }
  *(_QWORD *)&v16 = v18;
  *((_QWORD *)&v16 + 1) = v8;
  v17 = v20;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v15 = 0;
  v14 = 0uLL;
  sub_19BFD72F4(a1, a3, a4, &v16, &v14);
  v21[0] = (void **)&v14;
  sub_19BFD7574(v21);
  v21[0] = (void **)&v16;
  sub_19BFD75E0(v21);
  if (v22)
    sub_19BFD5E54(v22);
  v21[0] = (void **)&v18;
  sub_19BFD75E0(v21);
}

void sub_19BFD77E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_19BFD7A30((uint64_t)va1);
  sub_19BFD7A7C((uint64_t *)(v8 - 56));
  *(_QWORD *)(v8 - 56) = va;
  sub_19BFD75E0((void ***)(v8 - 56));
  _Unwind_Resume(a1);
}

unsigned int **sub_19BFD7844(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  uint64_t v3;
  unsigned int **v4;
  unsigned int *v5;
  int v6;

  if (a1 == a2)
    return a3;
  v3 = 0;
  v4 = a3;
  do
  {
    v5 = *a1;
    *v4 = *a1;
    if (v5)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      if (v6 <= 0)
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    }
    ++a1;
    ++v4;
    v3 += 8;
  }
  while (a1 != a2);
  return v4;
}

unsigned int **sub_19BFD7908(unsigned int **a1)
{
  unsigned int *v2;

  v2 = *a1;
  if (v2)
    sub_19BFD5EEC(v2);
  return a1;
}

uint64_t *sub_19BFD7938(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  if (v2 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    v4 = 0;
    v5 = a2[1];
    do
    {
      v7 = *(unsigned int **)(v2 - 8);
      v2 -= 8;
      v6 = v7;
      *(_QWORD *)(v5 - 8) = v7;
      v5 -= 8;
      if (v7)
      {
        do
          v8 = __ldaxr(v6);
        while (__stlxr(v8 + 1, v6));
        if (v8 <= 0)
          __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      }
      v4 -= 8;
    }
    while (v2 != v3);
  }
  a2[1] = v5;
  v9 = *result;
  *result = v5;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19BFD7A30(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_19BFD7BCC(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_19BFD7A7C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    sub_19BFD5E54(v2);
  return a1;
}

char *sub_19BFD7AAC(uint64_t a1, unsigned int **a2)
{
  char *result;
  char *v4;
  char *v5;
  unsigned int *v6;

  result = (char *)sub_19BFD7B6C(a2 + 1, *(unsigned int ***)(a1 + 8), a2);
  v4 = result;
  v5 = *(char **)(a1 + 8);
  if (v5 != result)
  {
    do
    {
      v6 = (unsigned int *)*((_QWORD *)v5 - 1);
      v5 -= 8;
      result = (char *)sub_19BFD7B50(v6);
    }
    while (v5 != v4);
  }
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_19BFD7B04(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  unsigned int *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(unsigned int **)(i - 8);
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_19BFD7B50(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned int *sub_19BFD7B50(unsigned int *result)
{
  if (result)
    return sub_19BFD5EEC(result);
  return result;
}

unsigned int **sub_19BFD7B6C(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      v7 = *a3;
      *a3 = v6;
      if (v7)
        sub_19BFD5EEC(v7);
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_19BFD7BCC(uint64_t result)
{
  if (result)
    return sub_19BFD5E54(result);
  return result;
}

BOOL sub_19BFD7BE8(uint64_t a1, _QWORD *a2)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;

  v3 = (unsigned __int16 *)(*a2 + 8);
  v4 = *(unsigned __int16 **)(a1 + 32);
  return v3 == v4 || sub_19BFF7920(v3, v4);
}

void sub_19BFD7C0C(_QWORD *a1, const void *a2, size_t a3, _QWORD *a4, _QWORD *a5)
{
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void **v34;

  if (a3 >= 8)
    __assert_rtn("create_single", "TIDynamicTrie.cpp", 213, "key.size() <= max_key_size()");
  v10 = (char *)operator new(((a4[1] + a5[1] - (*a4 + *a5)) & 0xFFFFFFFFFFFFFFF8) + 24);
  v11 = v10;
  v32 = *(_OWORD *)a4;
  v12 = v32;
  v33 = a4[2];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v30 = *(_OWORD *)a5;
  v13 = v30;
  v31 = a5[2];
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  *(_QWORD *)v10 = 1;
  v10[15] = a3;
  v14 = *((_QWORD *)&v12 + 1);
  v15 = v12;
  v16 = *((_QWORD *)&v12 + 1) - v12;
  v17 = *((_QWORD *)&v13 + 1);
  v18 = v13;
  v19 = *((_QWORD *)&v13 + 1) - v13;
  *((_DWORD *)v10 + 4) = (*((_QWORD *)&v12 + 1) - (_QWORD)v12) >> 3;
  *((_DWORD *)v10 + 5) = (*((_QWORD *)&v13 + 1) - (_QWORD)v13) >> 3;
  if (a3)
    memmove(v10 + 8, a2, a3);
  if (v14 != v15)
  {
    v20 = 0;
    do
    {
      v21 = *(_QWORD *)(v15 + 8 * v20);
      *(_QWORD *)(v15 + 8 * v20) = 0;
      *(_QWORD *)&v11[8 * v20++ + 24] = v21;
    }
    while (v16 >> 3 > (unint64_t)v20);
  }
  v22 = *((unsigned int *)v11 + 4);
  if (v17 == v18)
  {
    v24 = 0;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = *(_QWORD *)(v18 + 8 * v23);
      *(_QWORD *)(v18 + 8 * v23) = 0;
      *(_QWORD *)&v11[8 * v22 + 24 + 8 * v23] = v25;
      v24 += *(_DWORD *)(v25 + 4);
      *((_DWORD *)v11 + 1) = v24;
      ++v23;
    }
    while (v19 >> 3 > (unint64_t)v23);
  }
  v26 = 0;
  if ((_DWORD)v22)
  {
    v27 = (uint64_t *)(v11 + 24);
    v28 = 8 * v22;
    do
    {
      v29 = *v27++;
      v26 += *(_DWORD *)(v29 + 48);
      v28 -= 8;
    }
    while (v28);
  }
  *((_DWORD *)v11 + 1) = v24 + v26;
  v34 = (void **)&v30;
  sub_19BFD7574(&v34);
  v34 = (void **)&v32;
  sub_19BFD75E0(&v34);
  *a1 = v11;
}

void sub_19BFD7DEC(_QWORD *a1)
{
  __int128 v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void **v5;

  v3 = 0uLL;
  v4 = 0;
  v2 = 0;
  v1 = 0uLL;
  sub_19BFD72F4(a1, 0, 0, &v3, &v1);
  v5 = (void **)&v1;
  sub_19BFD7574(&v5);
  v5 = (void **)&v3;
  sub_19BFD75E0(&v5);
}

void sub_19BFD7E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 40) = v13;
  sub_19BFD7574((void ***)(v14 - 40));
  *(_QWORD *)(v14 - 40) = &a13;
  sub_19BFD75E0((void ***)(v14 - 40));
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFD7E80(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;

  *a1 = a2;
  a1[1] = a3;
  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_19BFD7DEC(a1 + 2);
  return a1;
}

void sub_19BFD7EC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFACCEC(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_19BFD7ED8(unsigned int *result, unsigned int **a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;

  if (*(unsigned __int16 *)a2 <= 0x200u)
  {
    v5 = result;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)result + 8))(&v9);
    if ((unsigned __int16)v9 <= 0xEuLL)
      v6 = (unsigned int *)((char *)&v9 + 2);
    else
      v6 = v10;
    sub_19BFD6160(&v8, *((_QWORD *)v5 + 2), a2, a3, (uint64_t)v6, (unsigned __int16)v9);
    v7 = v8;
    v8 = 0;
    result = (unsigned int *)*((_QWORD *)v5 + 2);
    *((_QWORD *)v5 + 2) = v7;
    if (result)
    {
      sub_19BFD5EEC(result);
      result = v8;
      if (v8)
        result = sub_19BFD5EEC(v8);
    }
    if ((unsigned __int16)v9 >= 0xFu)
    {
      result = v10;
      if (v10)
        return (unsigned int *)MEMORY[0x1A1AD0CB8](v10, 0x1000C8077774924);
    }
  }
  return result;
}

void sub_19BFD7FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10, unsigned __int16 a11, uint64_t a12)
{
  sub_19BFD7908(&a10);
  if (a11 >= 0xFu)
  {
    if (a12)
      MEMORY[0x1A1AD0CB8](a12, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

unsigned int *sub_19BFD7FEC(unsigned int *result, uint64_t a2, unsigned int a3)
{
  unsigned int *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;

  v3 = *(unsigned int **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_24;
  v4 = *(unsigned __int8 *)(a2 + 8) + 1;
  if (v4 < *((unsigned __int8 *)v3 + 15))
  {
    if (*((unsigned __int8 *)v3 + v4 + 8) == a3)
    {
      v18 = *(unsigned int **)a2;
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 + 1, v3));
      if (v5 > 0)
      {
        sub_19BFD8198((uint64_t)result, (uint64_t *)&v18, *(_BYTE *)(a2 + 8) + 1);
        result = v18;
        if (v18)
          return sub_19BFD5EEC(v18);
        return result;
      }
LABEL_26:
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    }
LABEL_24:
    *(_QWORD *)result = 0;
    *((_BYTE *)result + 8) = 0;
    return result;
  }
  v6 = v3[5];
  v7 = (uint64_t)&v3[2 * v3[4] + 6];
  if ((_DWORD)v6)
  {
    v8 = v7;
    v9 = v6;
    do
    {
      v10 = v9 >> 1;
      v11 = (uint64_t *)(v8 + 8 * (v9 >> 1));
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (*(unsigned __int8 *)(v13 + 8) < a3)
        v8 = (uint64_t)v12;
      else
        v9 = v10;
    }
    while (v9);
  }
  else
  {
    v8 = v7 + 8 * v6;
  }
  v14 = (v8 - v7) >> 3;
  if (v14 >= v6)
    goto LABEL_24;
  v15 = *(_QWORD *)(v7 + 8 * v14);
  if (*(unsigned __int8 *)(v15 + 8) != a3)
    goto LABEL_24;
  v17 = (unsigned int *)v15;
  do
    v16 = __ldaxr((unsigned int *)v15);
  while (__stlxr(v16 + 1, (unsigned int *)v15));
  if (v16 <= 0)
    goto LABEL_26;
  sub_19BFD8198((uint64_t)result, (uint64_t *)&v17, 0);
  result = v17;
  if (v17)
    return sub_19BFD5EEC(v17);
  return result;
}

void sub_19BFD8144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  sub_19BFD820C(&a9);
  _Unwind_Resume(a1);
}

unsigned int **sub_19BFD8168(unsigned int **a1)
{
  unsigned int *v2;

  v2 = *a1;
  if (v2)
    sub_19BFD5EEC(v2);
  return a1;
}

uint64_t sub_19BFD8198(uint64_t result, uint64_t *a2, unsigned __int8 a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v3;
  *(_BYTE *)(result + 8) = a3;
  if (*(unsigned __int8 *)(v3 + 15) <= (unint64_t)a3)
    __assert_rtn("DynamicTrieCursor", "TIDynamicTrie.h", 211, "m_key_index < m_trie_node->key_size()");
  return result;
}

void sub_19BFD81F8(_Unwind_Exception *a1)
{
  unsigned int **v1;

  sub_19BFD7908(v1);
  _Unwind_Resume(a1);
}

unsigned int **sub_19BFD820C(unsigned int **a1)
{
  unsigned int *v2;

  v2 = *a1;
  if (v2)
    sub_19BFD5EEC(v2);
  return a1;
}

unsigned int *sub_19BFD823C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *result;
  unsigned int *v4;

  sub_19BFD7DEC(&v4);
  v2 = v4;
  v4 = 0;
  result = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v2;
  if (result)
  {
    sub_19BFD5EEC(result);
    result = v4;
    if (v4)
      return sub_19BFD5EEC(v4);
  }
  return result;
}

void sub_19BFD8290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFD7908((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFD82A4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    if (a2)
    {
      if ((unint64_t)*(unsigned __int8 *)(result + 8) + 1 >= *(unsigned __int8 *)(v2 + 15))
      {
        v8 = 0;
        v4 = *(unsigned int *)(v2 + 16);
        if ((_DWORD)v4)
        {
          v5 = v2 + 24;
          v6 = 8 * v4 - 8;
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, v5, &v8);
            v5 += 8;
            if (v8)
              v7 = 1;
            else
              v7 = v6 == 0;
            v6 -= 8;
          }
          while (!v7);
        }
      }
    }
  }
  return result;
}

unsigned int *sub_19BFD8334(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  unsigned int **v6;
  unsigned int **v7;
  unsigned int *v8;
  int v9;
  unsigned int *v10;
  unsigned int *v11[2];
  unsigned int *v12;
  unsigned int *v13[2];
  char v14;

  v2 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
    return result;
  v14 = 0;
  if ((unint64_t)*((unsigned __int8 *)result + 8) + 1 >= *(unsigned __int8 *)(v2 + 15))
  {
    v5 = *(unsigned int *)(v2 + 20);
    if (!(_DWORD)v5)
      return result;
    v6 = (unsigned int **)(v2 + 8 * *(unsigned int *)(v2 + 16) + 24);
    v7 = &v6[v5];
    while (1)
    {
      v8 = *v6;
      v10 = v8;
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        if (v9 <= 0)
          break;
      }
      sub_19BFD8198((uint64_t)v11, (uint64_t *)&v10, 0);
      (*(void (**)(uint64_t, unsigned int **, char *))(a2 + 16))(a2, v11, &v14);
      if (v11[0])
        sub_19BFD5EEC(v11[0]);
      result = v10;
      if (v10)
        result = sub_19BFD5EEC(v10);
      if (!v14 && ++v6 != v7)
        continue;
      return result;
    }
LABEL_22:
    __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  v12 = (unsigned int *)v2;
  do
    v4 = __ldaxr((unsigned int *)v2);
  while (__stlxr(v4 + 1, (unsigned int *)v2));
  if (v4 <= 0)
    goto LABEL_22;
  sub_19BFD8198((uint64_t)v13, (uint64_t *)&v12, *((_BYTE *)result + 8) + 1);
  (*(void (**)(uint64_t, unsigned int **, char *))(a2 + 16))(a2, v13, &v14);
  if (v13[0])
    sub_19BFD5EEC(v13[0]);
  result = v12;
  if (v12)
    return sub_19BFD5EEC(v12);
  return result;
}

void sub_19BFD8494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  unsigned int *v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, unsigned int *);
  sub_19BFD8168((unsigned int **)va1);
  sub_19BFD820C((unsigned int **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFD84DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  const char *v6;
  const char *v7;
  unsigned int v8;
  const char *v9;
  const char *v10;
  unsigned int v12;

  v2 = *a1;
  v3 = *a2;
  v4 = (unsigned __int16 *)(*a1 + 136);
  v5 = (unsigned __int16 *)(*a2 + 136);
  if (!sub_19BFED000(v4, v5))
    return sub_19BFECF90(v4, v5);
  if (*(_QWORD *)(v2 + 112))
    v6 = *(const char **)(v2 + 112);
  else
    v6 = (const char *)(v2 + 120);
  if (*(_QWORD *)(v3 + 112))
    v7 = *(const char **)(v3 + 112);
  else
    v7 = (const char *)(v3 + 120);
  v8 = strcmp(v6, v7);
  if (v8)
    return v8 >> 31;
  v9 = *(_QWORD *)(v2 + 8) ? *(const char **)(v2 + 8) : (const char *)(v2 + 16);
  v10 = *(_QWORD *)(v3 + 8) ? *(const char **)(v3 + 8) : (const char *)(v3 + 16);
  v8 = strcmp(v9, v10);
  if (v8)
    return v8 >> 31;
  v12 = *(_DWORD *)(v2 + 40) - *(_DWORD *)(v3 + 40);
  if (v12)
    return v12 >> 31;
  else
    return *(_DWORD *)(v2 + 56) < *(_DWORD *)(v3 + 56);
}

void sub_19BFD85AC(uint64_t a1)
{
  unsigned __int8 *v1;
  const char *v3;
  char *v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  const char *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  _BOOL4 v35;
  int data_low;
  _BOOL4 v37;
  int v38;
  int v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  NSObject *v42;
  uint8_t *v43;
  unsigned __int8 v44;
  const char *v45;
  uint64_t *v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  NSObject *v53;
  uint32_t v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  NSObject *v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  const char *v61;
  std::string::size_type *p_size;
  uint64_t v63;
  unsigned __int16 *v64;
  char **v65;
  char **v66;
  char *v67;
  _OWORD *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  const char *v72;
  uint64_t i;
  char **v74;
  char **v75;
  char *v76;
  _OWORD *v77;
  void *v78;
  std::string::size_type v79;
  uint64_t v80;
  unsigned int v81;
  std::string::size_type size;
  std::string::size_type *v83;
  std::string::size_type *v84;
  unsigned __int16 *v85;
  int v86;
  std::string::size_type *v87;
  unsigned __int16 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 v122;
  unsigned __int8 v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  size_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  size_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  _BYTE *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  void *v155;
  _BYTE *v156;
  unint64_t v157;
  _BYTE *v158;
  unint64_t v159;
  _BYTE *v160;
  unint64_t v161;
  unint64_t v162;
  size_t v163;
  char *v164;
  char *v165;
  _BYTE *v166;
  _BYTE *v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t **v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t v176;
  BOOL v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unsigned int v190;
  unsigned __int8 v191;
  unsigned __int8 v192;
  NSObject *v193;
  int v194;
  unsigned __int8 v195;
  int v196;
  unsigned __int8 v197;
  NSObject *v198;
  unsigned __int8 v199;
  unsigned __int8 v200;
  NSObject *v201;
  _BYTE *v202;
  const char *v203;
  const char *v204;
  char *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unsigned int v210;
  unint64_t v211;
  unint64_t v212;
  unsigned int v213;
  unsigned __int16 *v214;
  uint64_t v215;
  unsigned int *v217;
  int v218;
  int v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  _BOOL4 v225;
  uint64_t v226;
  double v227;
  double v228;
  uint64_t v229;
  double v230;
  int v231;
  unsigned __int16 *v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  int v237;
  _BOOL4 v238;
  off_t v239;
  _QWORD *v240;
  unint64_t v241;
  char v242;
  char v243;
  int v244;
  char v245;
  std::string::value_type v246;
  std::string::value_type v247;
  unsigned int v248;
  char v249;
  BOOL v250;
  std::string::value_type v251;
  int v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int v258;
  int v259;
  unsigned __int16 *v260;
  char *v261;
  char *v262;
  char *v263;
  char *v264;
  unsigned __int16 *v265;
  int v266;
  unsigned __int16 *v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  int v275;
  off_t v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t v279;
  _BOOL4 v280;
  unint64_t v281;
  off_t v282;
  std::string::size_type v283;
  unsigned int v284;
  unsigned __int8 v285;
  unsigned __int8 v286;
  NSObject *v287;
  int v288;
  unsigned __int8 v289;
  unsigned __int8 v290;
  uint64_t v291;
  unsigned int v292;
  unsigned __int16 ***v293;
  unsigned __int16 **v294;
  unsigned __int16 **v295;
  unsigned int v296;
  unsigned int v297;
  unsigned __int16 *v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint8x8_t v302;
  unsigned __int8 v303;
  unsigned __int8 v304;
  NSObject *v305;
  int v306;
  _QWORD *v307;
  unsigned int *v308;
  std::string::value_type *v309;
  uint64_t **v310;
  uint64_t *j;
  unint64_t v312;
  _QWORD *v313;
  float v314;
  _BOOL8 v315;
  unint64_t v316;
  unint64_t v317;
  size_t v318;
  int v319;
  _QWORD *v320;
  const char *v321;
  const char *v322;
  uint64_t v323;
  _QWORD *v324;
  unint64_t v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  uint64_t v329;
  unsigned int v330;
  _DWORD *v331;
  char *v332;
  uint64_t v333;
  uint64_t k;
  unsigned int m;
  unsigned int v336;
  unsigned int *v337;
  unsigned int *v338;
  unsigned int v339;
  unsigned int v340;
  uint64_t v341;
  unsigned __int8 v342;
  unsigned __int8 v343;
  NSObject *v344;
  uint64_t v345;
  unsigned __int8 v346;
  unsigned __int8 v347;
  NSObject *v348;
  unsigned __int8 v349;
  unsigned __int8 v350;
  NSObject *v351;
  unsigned __int8 v352;
  unsigned __int8 v353;
  NSObject *v354;
  int v355;
  int v356;
  unsigned int v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  _QWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  _QWORD *v364;
  const std::locale::facet *v365;
  unsigned __int8 v366;
  unsigned __int8 v367;
  NSObject *v368;
  std::string *v369;
  std::string *p_md;
  unsigned __int8 v371;
  unsigned __int8 v372;
  NSObject *v373;
  unsigned __int8 v374;
  unsigned __int8 v375;
  NSObject *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unsigned __int8 v396;
  unsigned __int8 v397;
  NSObject *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  std::string::size_type v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  std::string::value_type *v412;
  std::string::value_type *v413;
  std::string::size_type v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  const char *v421;
  const char *v422;
  _QWORD *v423;
  size_t v424;
  _QWORD *v425;
  _QWORD *v426;
  _QWORD *v427;
  _QWORD *v428;
  _QWORD *v429;
  _QWORD *exception;
  unsigned __int8 v431;
  _QWORD *v432;
  char *v433;
  unsigned __int8 v434;
  NSObject *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  std::string::value_type *v442;
  const char *v443;
  size_t v444;
  void *v445;
  std::string::size_type *v446;
  unint64_t *v447;
  uint64_t v448;
  uint64_t __dst;
  unsigned int __dsta;
  uint64_t __dstb;
  unsigned __int8 *__src;
  unsigned int __srca;
  uint64_t __srcb;
  int v455;
  int v456;
  int v457;
  unsigned __int16 *v458;
  unsigned __int16 *v459;
  uint64_t v460;
  uint64_t v461;
  char *v462;
  _BYTE v463[8];
  void *v464;
  _BYTE v465[8];
  void *v466;
  _BYTE v467[12];
  _BYTE v468[10];
  __int16 v469;
  int v470;
  __int128 v471;
  unsigned int v472[4];
  std::string md;
  char v474;
  int v475;
  size_t __n;
  _BYTE v477[10];
  __int16 v478;
  std::string::value_type *v479;
  std::string v480;
  void *v481;
  uint8_t *v482;
  uint64_t v483;
  uint8_t buf[32];
  uint64_t v485;
  char *v486;
  char *v487;
  uint64_t v488;
  CC_LONG len;
  void *v490;
  const void *v491;
  char v492;
  _QWORD v493[22];

  v493[19] = *MEMORY[0x1E0C80C00];
  v3 = (const char *)(a1 + 1912);
  if (*(_QWORD *)(a1 + 1904))
    v4 = *(char **)(a1 + 1904);
  else
    v4 = (char *)(a1 + 1912);
  sub_19BF8E43C(&md, v4);
  sub_19BF86D78((uint64_t)buf, (__int128 *)&md, 0);
  if (SHIBYTE(md.__r_.__value_.__r.__words[2]) < 0)
    operator delete(md.__r_.__value_.__l.__data_);
  *(_OWORD *)&md.__r_.__value_.__l.__data_ = 0uLL;
  if (buf[24])
    CC_MD5(v491, len, (unsigned __int8 *)&md);
  *(_OWORD *)a1 = *(_OWORD *)&md.__r_.__value_.__l.__data_;
  sub_19BF8DA50((uint64_t)buf);
  *(_DWORD *)buf = 0x100000;
  *(_WORD *)&buf[4] = 0;
  buf[6] = 1;
  *(_QWORD *)&buf[8] = 0;
  sub_19BF8CA04(buf, (uint64_t)"dat", 0, 3u);
  sub_19BFDC12C((uint64_t)v465, a1, buf);
  if (*(_QWORD *)&buf[8] && buf[6] == 1)
    free(*(void **)&buf[8]);
  *(_DWORD *)buf = 0x100000;
  *(_WORD *)&buf[4] = 0;
  buf[6] = 1;
  *(_QWORD *)&buf[8] = 0;
  sub_19BF8CA04(buf, (uint64_t)"idx", 0, 3u);
  sub_19BFDC12C((uint64_t)v463, a1, buf);
  if (*(_QWORD *)&buf[8] && buf[6] == 1)
    free(*(void **)&buf[8]);
  v455 = 0;
  v456 = 0;
  ucol_getVersion();
  ucol_getUCAVersion();
  v5 = *(_QWORD *)(a1 + 240);
  if ((v5 & 0x40000) != 0)
    goto LABEL_93;
  if (!*(_BYTE *)(a1 + 1964) && !*(_BYTE *)(a1 + 1965))
  {
    if ((v5 & 0x4000) == 0
      && sub_19C029A18((const uint8_t *)&v456, &v455, (char *)a1, (uint64_t)v465)
      && sub_19C029A18((const uint8_t *)&v456, &v455, (char *)a1, (uint64_t)v463))
    {
      v47 = atomic_load(byte_1EE414EA8);
      if ((v47 & 1) == 0)
        goto LABEL_93;
      v48 = atomic_load(byte_1EE417890);
      if ((v48 & 1) == 0)
      {
        v49 = sub_19BFD3F34();
        if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          goto LABEL_93;
        v50 = *(const char **)(a1 + 1904);
        if (!v50)
          v50 = v3;
        v51 = *(_QWORD *)(a1 + 24);
        if (!v51)
          v51 = a1 + 32;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v50;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v51;
        v52 = "Nothing to be done for %s (%s) ";
        v53 = v49;
        v54 = 22;
LABEL_662:
        _os_log_impl(&dword_19BF85000, v53, OS_LOG_TYPE_DEFAULT, v52, buf, v54);
        goto LABEL_93;
      }
      printf("Nothing to be done for %s (%s) ");
      goto LABEL_665;
    }
    v55 = atomic_load(byte_1EE414EA8);
    if ((v55 & 1) != 0)
    {
      v56 = atomic_load(byte_1EE417890);
      if ((v56 & 1) != 0)
      {
        v60 = *(const char **)(a1 + 1904);
        if (!v60)
          v60 = v3;
        v61 = *(const char **)(a1 + 24);
        if (!v61)
          v61 = (const char *)(a1 + 32);
        printf("Compiling %s (%s) ", v60, v61);
        putchar(10);
      }
      else
      {
        v57 = sub_19BFD3F34();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          v58 = *(const char **)(a1 + 1904);
          if (!v58)
            v58 = v3;
          v59 = *(_QWORD *)(a1 + 24);
          if (!v59)
            v59 = a1 + 32;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v58;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v59;
          _os_log_impl(&dword_19BF85000, v57, OS_LOG_TYPE_DEFAULT, "Compiling %s (%s) ", buf, 0x16u);
        }
      }
    }
    sub_19BFDC6B4(a1);
    if ((*(_BYTE *)(a1 + 243) & 2) == 0)
    {
      *(_QWORD *)(a1 + 1992) = *(_QWORD *)(a1 + 1984);
      p_size = &md.__r_.__value_.__l.__size_;
      *(_OWORD *)&md.__r_.__value_.__r.__words[1] = 0uLL;
      md.__r_.__value_.__r.__words[0] = (std::string::size_type)&md.__r_.__value_.__l.__size_;
      v63 = a1 + 1736;
      while (1)
      {
        v63 = *(_QWORD *)v63;
        if (!v63)
          break;
        v64 = (unsigned __int16 *)(v63 + 16);
        v65 = (char **)sub_19BFE3C9C((uint64_t)&md, buf, (unsigned __int16 *)(v63 + 16));
        if (!*v65)
        {
          v66 = v65;
          v67 = (char *)operator new(0x30uLL);
          v68 = v67 + 32;
          v69 = *v64;
          if (v69 < 0xF)
          {
            *v68 = *(_OWORD *)v64;
          }
          else
          {
            *(_WORD *)v68 = v69;
            v70 = (void *)operator new[]();
            *((_QWORD *)v67 + 5) = v70;
            memcpy(v70, *(const void **)(v63 + 24), *((unsigned __int16 *)v67 + 16));
          }
          v71 = *(_QWORD *)buf;
          *(_QWORD *)v67 = 0;
          *((_QWORD *)v67 + 1) = 0;
          *((_QWORD *)v67 + 2) = v71;
          *v66 = v67;
          if (*(_QWORD *)md.__r_.__value_.__l.__data_)
          {
            md.__r_.__value_.__r.__words[0] = *(_QWORD *)md.__r_.__value_.__l.__data_;
            v67 = *v66;
          }
          sub_19BFA96D8((uint64_t *)md.__r_.__value_.__l.__size_, (uint64_t *)v67);
          ++md.__r_.__value_.__r.__words[2];
        }
      }
      if (*(_QWORD *)(a1 + 24))
        v72 = *(const char **)(a1 + 24);
      else
        v72 = (const char *)(a1 + 32);
      if (!strcmp(v72, "ta"))
      {
        for (i = 0; i != 53; ++i)
        {
          (*(void (**)(uint8_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 248) + 16))(buf, *(_QWORD *)(a1 + 248), dword_19C066054[i]);
          v74 = (char **)sub_19BFE3C9C((uint64_t)&md, &v480, (unsigned __int16 *)buf);
          if (!*v74)
          {
            v75 = v74;
            v76 = (char *)operator new(0x30uLL);
            v77 = v76 + 32;
            if (*(unsigned __int16 *)buf < 0xFuLL)
            {
              *v77 = *(_OWORD *)buf;
            }
            else
            {
              *(_WORD *)v77 = *(_WORD *)buf;
              v78 = (void *)operator new[]();
              *((_QWORD *)v76 + 5) = v78;
              memcpy(v78, *(const void **)&buf[8], *((unsigned __int16 *)v76 + 16));
            }
            v79 = v480.__r_.__value_.__r.__words[0];
            *(_QWORD *)v76 = 0;
            *((_QWORD *)v76 + 1) = 0;
            *((_QWORD *)v76 + 2) = v79;
            *v75 = v76;
            if (*(_QWORD *)md.__r_.__value_.__l.__data_)
            {
              md.__r_.__value_.__r.__words[0] = *(_QWORD *)md.__r_.__value_.__l.__data_;
              v76 = *v75;
            }
            sub_19BFA96D8((uint64_t *)md.__r_.__value_.__l.__size_, (uint64_t *)v76);
            ++md.__r_.__value_.__r.__words[2];
          }
          if (*(unsigned __int16 *)buf >= 0xFu && *(_QWORD *)&buf[8])
            MEMORY[0x1A1AD0CB8](*(_QWORD *)&buf[8], 0x1000C8077774924);
        }
      }
      v447 = (unint64_t *)(a1 + 2008);
      v80 = 1;
      v1 = byte_1EE417890;
      while (1)
      {
        if ((v80 & 0xF800 | 0x400) != 0xDC00)
        {
          (*(void (**)(size_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 248) + 16))(&__n, *(_QWORD *)(a1 + 248), v80);
          v81 = (unsigned __int16)__n;
          if (v80 < 0x10000)
          {
            if ((_WORD)__n)
            {
LABEL_158:
              size = md.__r_.__value_.__l.__size_;
              if (!md.__r_.__value_.__l.__size_)
                goto LABEL_201;
              v83 = p_size;
              do
              {
                v84 = v83;
                v85 = (unsigned __int16 *)(size + 32);
                v86 = sub_19BFECF90((unsigned __int16 *)(size + 32), (unsigned __int16 *)&__n);
                if (v86)
                  v87 = (std::string::size_type *)(size + 8);
                else
                  v87 = (std::string::size_type *)size;
                if (v86)
                  v83 = v84;
                else
                  v83 = (std::string::size_type *)size;
                size = *v87;
              }
              while (*v87);
              if (v83 == p_size
                || (!v86 ? (v88 = v85) : (v88 = (unsigned __int16 *)(v84 + 4)),
                    (sub_19BFECF90((unsigned __int16 *)&__n, v88) & 1) != 0))
              {
LABEL_201:
                if ((unsigned __int16)__n >= 0xFu && *(_QWORD *)v477)
                  MEMORY[0x1A1AD0CB8](*(_QWORD *)v477, 0x1000C8077774924);
                goto LABEL_152;
              }
              v95 = *(_BYTE **)v477;
              if (v81 <= 0xE)
                v95 = (char *)&__n + 2;
              if (*v95 == 2)
              {
                exception = __cxa_allocate_exception(0x20uLL);
                sub_19BF8E43C(buf, "Sort key top byte collides with 0x02!!");
                sub_19BFD48D0(exception, (__int128 *)buf);
                __cxa_throw(exception, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
              }
              if (v81 >= 5)
              {
                v96 = atomic_load(byte_1EE414EA8);
                if ((v96 & 1) != 0)
                {
                  v97 = atomic_load(byte_1EE417890);
                  if ((v97 & 1) != 0)
                  {
                    sub_19BFED050((uint64_t)buf, (unsigned __int16 *)&__n, v89, v90, v91, v92, v93, v94);
                    v119 = *(const char **)&buf[8];
                    if (!*(_QWORD *)&buf[8])
                      v119 = (const char *)&buf[16];
                    printf("U+%04X: long sort key : %s", v80, v119);
                    if (*(_QWORD *)&buf[8] && buf[6] == 1)
                      free(*(void **)&buf[8]);
                    putchar(10);
                  }
                  else
                  {
                    v98 = sub_19BFD3F34();
                    if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
                    {
                      sub_19BFED050((uint64_t)buf, (unsigned __int16 *)&__n, v99, v100, v101, v102, v103, v104);
                      v105 = *(uint8_t **)&buf[8];
                      if (!*(_QWORD *)&buf[8])
                        v105 = &buf[16];
                      LODWORD(v480.__r_.__value_.__l.__data_) = 67109378;
                      HIDWORD(v480.__r_.__value_.__r.__words[0]) = v80;
                      LOWORD(v480.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&v480.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v105;
                      _os_log_impl(&dword_19BF85000, v98, OS_LOG_TYPE_DEFAULT, "U+%04X: long sort key : %s", (uint8_t *)&v480, 0x12u);
                      if (*(_QWORD *)&buf[8] && buf[6] == 1)
                        free(*(void **)&buf[8]);
                    }
                  }
                }
                v120 = *(_QWORD *)(a1 + 2008);
                v121 = *(_QWORD *)(a1 + 2016) - v120;
                v122 = atomic_load(byte_1EE414EA8);
                if ((v122 & 1) != 0)
                {
                  v123 = atomic_load(byte_1EE417890);
                  if ((v123 & 1) != 0)
                  {
                    printf(" offset=%X", *(_DWORD *)(a1 + 2016) - v120);
                    putchar(10);
                  }
                  else
                  {
                    v124 = sub_19BFD3F34();
                    if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 67109120;
                      *(_DWORD *)&buf[4] = v121;
                      _os_log_impl(&dword_19BF85000, v124, OS_LOG_TYPE_DEFAULT, " offset=%X", buf, 8u);
                    }
                  }
                }
                v125 = v80 | 0x1000000;
                v126 = *(uint64_t **)(a1 + 1992);
                v127 = *(_QWORD *)(a1 + 2000);
                v446 = p_size;
                if ((unint64_t)v126 >= v127)
                {
                  v129 = *(_QWORD *)(a1 + 1984);
                  v130 = ((uint64_t)v126 - v129) >> 3;
                  if ((unint64_t)(v130 + 1) >> 61)
                    sub_19BF8EB40();
                  v131 = v127 - v129;
                  v132 = v131 >> 2;
                  if (v131 >> 2 <= (unint64_t)(v130 + 1))
                    v132 = v130 + 1;
                  if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8)
                    v133 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v133 = v132;
                  if (v133)
                    v133 = (unint64_t)sub_19BFAC524(v133);
                  else
                    v134 = 0;
                  v135 = (uint64_t *)(v133 + 8 * v130);
                  *v135 = v125 | (v121 << 32);
                  v128 = v135 + 1;
                  v136 = *(char **)(a1 + 1992);
                  v137 = *(char **)(a1 + 1984);
                  if (v136 != v137)
                  {
                    do
                    {
                      v138 = *((_QWORD *)v136 - 1);
                      v136 -= 8;
                      *--v135 = v138;
                    }
                    while (v136 != v137);
                    v136 = *(char **)(a1 + 1984);
                  }
                  *(_QWORD *)(a1 + 1984) = v135;
                  *(_QWORD *)(a1 + 1992) = v128;
                  *(_QWORD *)(a1 + 2000) = v133 + 8 * v134;
                  if (v136)
                    operator delete(v136);
                }
                else
                {
                  *v126 = v125 | (v121 << 32);
                  v128 = v126 + 1;
                }
                *(_QWORD *)(a1 + 1992) = v128;
                v139 = (unsigned __int16)__n;
                if ((unsigned __int16)__n <= 0xEu)
                  v140 = (char *)&__n + 2;
                else
                  v140 = *(char **)v477;
                if ((_WORD)__n)
                {
                  v141 = *(char **)(a1 + 2016);
                  v142 = *(_QWORD *)(a1 + 2024);
                  if (v142 - (uint64_t)v141 >= (unsigned __int16)__n)
                  {
                    v149 = (unsigned __int16)__n;
                    memmove(*(void **)(a1 + 2016), v140, (unsigned __int16)__n);
                    *(_QWORD *)(a1 + 2016) = &v141[v149];
                    v1 = byte_1EE417890;
                  }
                  else
                  {
                    v445 = v140;
                    v143 = *(char **)(a1 + 2008);
                    v144 = (char *)(v141 - v143);
                    v145 = v141 - v143 + (unsigned __int16)__n;
                    if (v145 < 0)
                      sub_19BF8EB40();
                    v146 = v142 - (_QWORD)v143;
                    if (2 * v146 > v145)
                      v145 = 2 * v146;
                    if (v146 >= 0x3FFFFFFFFFFFFFFFLL)
                      v147 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v147 = v145;
                    v444 = v147;
                    if (v147)
                      v148 = (char *)operator new(v147);
                    else
                      v148 = 0;
                    v150 = &v144[(_QWORD)v148];
                    memcpy(&v144[(_QWORD)v148], v445, v139);
                    if (v143 == v141)
                    {
                      v151 = v141;
                      v152 = &v144[(_QWORD)v148];
                    }
                    else
                    {
                      do
                      {
                        v144[(_QWORD)v148 - 1] = v144[(_QWORD)(v143 - 1)];
                        --v144;
                      }
                      while (v144);
                      v151 = *(_BYTE **)(a1 + 2016);
                      v152 = v148;
                    }
                    v153 = &v150[v139];
                    v154 = v151 - v141;
                    if (v151 != v141)
                      memmove(v153, v141, v151 - v141);
                    v155 = *(void **)(a1 + 2008);
                    *(_QWORD *)(a1 + 2008) = v152;
                    *(_QWORD *)(a1 + 2016) = &v153[v154];
                    *(_QWORD *)(a1 + 2024) = &v148[v444];
                    v1 = byte_1EE417890;
                    if (v155)
                      operator delete(v155);
                  }
                }
                v156 = *(_BYTE **)(a1 + 2016);
                v157 = *(_QWORD *)(a1 + 2024);
                if ((unint64_t)v156 >= v157)
                {
                  v159 = *v447;
                  v160 = &v156[-*v447];
                  v161 = (unint64_t)(v160 + 1);
                  p_size = v446;
                  if ((uint64_t)(v160 + 1) < 0)
                    sub_19BF8EB40();
                  v162 = v157 - v159;
                  if (2 * v162 > v161)
                    v161 = 2 * v162;
                  if (v162 >= 0x3FFFFFFFFFFFFFFFLL)
                    v163 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v163 = v161;
                  if (v163)
                    v164 = (char *)operator new(v163);
                  else
                    v164 = 0;
                  v165 = &v160[(_QWORD)v164];
                  v166 = &v160[(_QWORD)v164];
                  *v166 = 0;
                  v158 = v166 + 1;
                  if (v156 != (_BYTE *)v159)
                  {
                    v167 = &v156[~v159];
                    do
                    {
                      v168 = *--v156;
                      (v167--)[(_QWORD)v164] = v168;
                    }
                    while (v156 != (_BYTE *)v159);
                    v156 = (_BYTE *)*v447;
                    v165 = v164;
                  }
                  *(_QWORD *)(a1 + 2008) = v165;
                  *(_QWORD *)(a1 + 2016) = v158;
                  *(_QWORD *)(a1 + 2024) = &v164[v163];
                  if (v156)
                    operator delete(v156);
                }
                else
                {
                  *v156 = 0;
                  v158 = v156 + 1;
                  p_size = v446;
                }
                *(_QWORD *)(a1 + 2016) = v158;
                goto LABEL_201;
              }
            }
            *(_DWORD *)buf = v80;
            *(_DWORD *)&buf[4] = 0;
            strncpy((char *)&buf[4], (const char *)&__n + 2, v81);
            v106 = *(_QWORD **)(a1 + 1992);
            v107 = *(_QWORD *)(a1 + 2000);
            if ((unint64_t)v106 >= v107)
            {
              v109 = *(_QWORD *)(a1 + 1984);
              v110 = ((uint64_t)v106 - v109) >> 3;
              if ((unint64_t)(v110 + 1) >> 61)
                sub_19BF8EB40();
              v111 = v107 - v109;
              v112 = v111 >> 2;
              if (v111 >> 2 <= (unint64_t)(v110 + 1))
                v112 = v110 + 1;
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
                v113 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v113 = v112;
              if (v113)
                v113 = (unint64_t)sub_19BFAC524(v113);
              else
                v114 = 0;
              v115 = (_QWORD *)(v113 + 8 * v110);
              *v115 = *(_QWORD *)buf;
              v108 = v115 + 1;
              v116 = *(char **)(a1 + 1992);
              v117 = *(char **)(a1 + 1984);
              if (v116 != v117)
              {
                do
                {
                  v118 = *((_QWORD *)v116 - 1);
                  v116 -= 8;
                  *--v115 = v118;
                }
                while (v116 != v117);
                v116 = *(char **)(a1 + 1984);
              }
              *(_QWORD *)(a1 + 1984) = v115;
              *(_QWORD *)(a1 + 1992) = v108;
              *(_QWORD *)(a1 + 2000) = v113 + 8 * v114;
              if (v116)
                operator delete(v116);
            }
            else
            {
              *v106 = *(_QWORD *)buf;
              v108 = v106 + 1;
            }
            *(_QWORD *)(a1 + 1992) = v108;
            goto LABEL_201;
          }
          if ((_WORD)__n)
            goto LABEL_158;
        }
LABEL_152:
        v80 = (v80 + 1);
        if ((_DWORD)v80 == 196608)
        {
          sub_19BFE3C3C((_QWORD *)md.__r_.__value_.__l.__size_);
          v169 = *(_QWORD *)(a1 + 1984);
          v170 = (*(_QWORD *)(a1 + 1992) - v169) >> 3;
          v171 = *(_QWORD *)(a1 + 2008);
          v172 = (char *)(*(_QWORD *)(a1 + 2016) - v171);
          *(_QWORD *)buf = off_1E3D11D40;
          *(_QWORD *)&buf[8] = a1 + 328;
          *(_QWORD *)&buf[16] = v169;
          *(_QWORD *)&buf[24] = v170;
          v485 = v171;
          v486 = v172;
          v173 = *(uint64_t ***)(a1 + 280);
          v175 = *v173;
          v174 = v173[1];
          while (v175 != v174)
          {
            v176 = *v175;
            (*(void (**)(std::string *__return_ptr, uint8_t *, uint64_t))(*(_QWORD *)buf + 8))(&md, buf, *v175 + 104);
            v177 = sub_19BFED000((unsigned __int16 *)&md, (unsigned __int16 *)(v176 + 136));
            if (LOWORD(md.__r_.__value_.__l.__data_) >= 0xFu && md.__r_.__value_.__l.__size_)
              MEMORY[0x1A1AD0CB8](md.__r_.__value_.__l.__size_, 0x1000C8077774924);
            if (!v177)
            {
              v377 = *v175;
              v378 = *(_QWORD *)(*v175 + 112);
              v379 = *v175 + 120;
              if (!v378)
                v378 = *v175 + 120;
              *(_QWORD *)&v471 = v378;
              v380 = *(unsigned __int16 *)(v377 + 104);
              DWORD2(v471) = 0;
              HIDWORD(v471) = v380;
              v472[0] = 0;
              sub_19BF8BB80((uint64_t *)&v471);
              v381 = *(unsigned __int16 *)(v377 + 104);
              v382 = *(_QWORD *)(v377 + 112);
              if (!v382)
                v382 = v379;
              *(_QWORD *)v467 = v382;
              *(_DWORD *)&v467[8] = v381;
              *(_DWORD *)v468 = v381;
              *(_DWORD *)&v468[4] = 0;
              sub_19BF8BB80((uint64_t *)v467);
              while ((_QWORD)v471 == *(_QWORD *)v467)
              {
                if (DWORD2(v471) == *(_DWORD *)&v467[8])
                {
                  v431 = atomic_load(byte_1EE414EA8);
                  if ((v431 & 1) != 0)
                  {
                    v434 = atomic_load(byte_1EE417890);
                    if ((v434 & 1) != 0)
                    {
                      sub_19BFED050((uint64_t)&md, (unsigned __int16 *)(*v175 + 136), v383, v384, v385, v386, v387, v388);
                      v443 = (const char *)md.__r_.__value_.__l.__size_;
                      if (!md.__r_.__value_.__l.__size_)
                        v443 = &md.__r_.__value_.__s.__data_[16];
                      printf("  ICU collator's original sort key: %s", v443);
                      if (md.__r_.__value_.__l.__size_ && md.__r_.__value_.__s.__data_[6] == 1)
                        free((void *)md.__r_.__value_.__l.__size_);
                      putchar(10);
                    }
                    else
                    {
                      v435 = sub_19BFD3F34();
                      if (os_log_type_enabled(v435, OS_LOG_TYPE_DEFAULT))
                      {
                        sub_19BFED050((uint64_t)&md, (unsigned __int16 *)(*v175 + 136), v436, v437, v438, v439, v440, v441);
                        v442 = (std::string::value_type *)md.__r_.__value_.__l.__size_;
                        if (!md.__r_.__value_.__l.__size_)
                          v442 = &md.__r_.__value_.__s.__data_[16];
                        LODWORD(v480.__r_.__value_.__l.__data_) = 136315138;
                        *(std::string::size_type *)((char *)v480.__r_.__value_.__r.__words + 4) = (std::string::size_type)v442;
                        _os_log_impl(&dword_19BF85000, v435, OS_LOG_TYPE_DEFAULT, "  ICU collator's original sort key: %s", (uint8_t *)&v480, 0xCu);
                        if (md.__r_.__value_.__l.__size_ && md.__r_.__value_.__s.__data_[6] == 1)
                          free((void *)md.__r_.__value_.__l.__size_);
                      }
                    }
                  }
                  v432 = __cxa_allocate_exception(0x20uLL);
                  if (*(_QWORD *)(*v175 + 112))
                    v433 = *(char **)(*v175 + 112);
                  else
                    v433 = (char *)(*v175 + 120);
                  sub_19BF8E43C(&v480, v433);
                  sub_19BFE3BDC(&md, "sort key not matching for ", &v480);
                  sub_19BFD48D0(v432, (__int128 *)&md);
                  __cxa_throw(v432, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
                }
                v389 = v472[0];
                sub_19BF8BD94(buf, v472[0], (uint64_t)&v458);
                (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 248) + 16))(&v461, *(_QWORD *)(a1 + 248), v389);
                v396 = atomic_load(byte_1EE414EA8);
                if ((v396 & 1) != 0)
                {
                  v397 = atomic_load(byte_1EE417890);
                  if ((v397 & 1) != 0)
                  {
                    sub_19BFED050((uint64_t)&md, (unsigned __int16 *)&v458, v390, v391, v392, v393, v394, v395);
                    v414 = md.__r_.__value_.__l.__size_;
                    sub_19BFED050((uint64_t)&v480, (unsigned __int16 *)&v461, v415, v416, v417, v418, v419, v420);
                    if (v414)
                      v421 = (const char *)v414;
                    else
                      v421 = &md.__r_.__value_.__s.__data_[16];
                    v422 = (const char *)v480.__r_.__value_.__l.__size_;
                    if (!v480.__r_.__value_.__l.__size_)
                      v422 = &v480.__r_.__value_.__s.__data_[16];
                    printf("  Sort key mapping: U+%04X -> %s : %s", v389, v421, v422);
                    if (v480.__r_.__value_.__l.__size_ && v480.__r_.__value_.__s.__data_[6] == 1)
                      free((void *)v480.__r_.__value_.__l.__size_);
                    if (md.__r_.__value_.__l.__size_ && md.__r_.__value_.__s.__data_[6] == 1)
                      free((void *)md.__r_.__value_.__l.__size_);
                    putchar(10);
                  }
                  else
                  {
                    v398 = sub_19BFD3F34();
                    if (os_log_type_enabled(v398, OS_LOG_TYPE_DEFAULT))
                    {
                      sub_19BFED050((uint64_t)&md, (unsigned __int16 *)&v458, v399, v400, v401, v402, v403, v404);
                      v405 = md.__r_.__value_.__l.__size_;
                      sub_19BFED050((uint64_t)&v480, (unsigned __int16 *)&v461, v406, v407, v408, v409, v410, v411);
                      v412 = (std::string::value_type *)v480.__r_.__value_.__l.__size_;
                      if (v405)
                        v413 = (std::string::value_type *)v405;
                      else
                        v413 = &md.__r_.__value_.__s.__data_[16];
                      LODWORD(__n) = 67109634;
                      if (!v480.__r_.__value_.__l.__size_)
                        v412 = &v480.__r_.__value_.__s.__data_[16];
                      HIDWORD(__n) = v389;
                      *(_WORD *)v477 = 2080;
                      *(_QWORD *)&v477[2] = v413;
                      v478 = 2080;
                      v479 = v412;
                      _os_log_impl(&dword_19BF85000, v398, OS_LOG_TYPE_DEFAULT, "  Sort key mapping: U+%04X -> %s : %s", (uint8_t *)&__n, 0x1Cu);
                      if (v480.__r_.__value_.__l.__size_ && v480.__r_.__value_.__s.__data_[6] == 1)
                        free((void *)v480.__r_.__value_.__l.__size_);
                      if (md.__r_.__value_.__l.__size_ && md.__r_.__value_.__s.__data_[6] == 1)
                        free((void *)md.__r_.__value_.__l.__size_);
                    }
                  }
                }
                if ((unsigned __int16)v461 >= 0xFu && v462)
                  MEMORY[0x1A1AD0CB8](v462, 0x1000C8077774924);
                if ((unsigned __int16)v458 >= 0xFu && v459)
                  MEMORY[0x1A1AD0CB8](v459, 0x1000C8077774924);
                sub_19BF8BB80((uint64_t *)&v471);
              }
              __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
            }
            ++v175;
          }
          break;
        }
      }
    }
    v178 = *(uint64_t **)(a1 + 280);
    v179 = *v178;
    v180 = (uint64_t *)v178[1];
    v181 = 126 - 2 * __clz(((uint64_t)v180 - *v178) >> 3);
    *(_QWORD *)buf = sub_19BFD84DC;
    if (v180 == (uint64_t *)v179)
      v182 = 0;
    else
      v182 = v181;
    sub_19BFE2D94(v179, v180, (uint64_t (**)(uint64_t *, uint64_t *))buf, v182, 1);
    v188 = **(_QWORD **)(a1 + 280);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 280) + 8) != v188)
    {
      v189 = 0;
      v190 = 1;
      do
      {
        sub_19C034C74(*(_QWORD *)(a1 + 272), *(_QWORD *)(v188 + 8 * v189), 0, v183, v184, v185, v186, v187);
        v189 = v190;
        v188 = **(_QWORD **)(a1 + 280);
        ++v190;
      }
      while (v189 < (*(_QWORD *)(*(_QWORD *)(a1 + 280) + 8) - v188) >> 3);
    }
    v191 = atomic_load(byte_1EE414EA8);
    if ((v191 & 1) != 0)
    {
      v192 = atomic_load(byte_1EE417890);
      if ((v192 & 1) != 0)
      {
        printf("\tInserted %d trie nodes.", dword_1EE417868);
        putchar(10);
      }
      else
      {
        v193 = sub_19BFD3F34();
        if (os_log_type_enabled(v193, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = dword_1EE417868;
          _os_log_impl(&dword_19BF85000, v193, OS_LOG_TYPE_DEFAULT, "\tInserted %d trie nodes.", buf, 8u);
        }
      }
    }
    if ((*(_BYTE *)(a1 + 240) & 1) != 0)
    {
      v194 = sub_19C035BC8(*(_QWORD *)(a1 + 272));
      v195 = atomic_load(byte_1EE414EA8);
      if ((v195 & 1) != 0)
      {
        v196 = v194;
        v197 = atomic_load(byte_1EE417890);
        if ((v197 & 1) != 0)
        {
          printf("\tCondensed %d nodes into patricia nodes.", v194);
          putchar(10);
        }
        else
        {
          v198 = sub_19BFD3F34();
          if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v196;
            _os_log_impl(&dword_19BF85000, v198, OS_LOG_TYPE_DEFAULT, "\tCondensed %d nodes into patricia nodes.", buf, 8u);
          }
        }
      }
    }
    *(_DWORD *)buf = 0x100000;
    *(_WORD *)&buf[4] = 0;
    buf[6] = 1;
    *(_QWORD *)&buf[8] = 0;
    sub_19BF8CA04(buf, (uint64_t)"dat", 0, 3u);
    sub_19BFDC12C((uint64_t)&__n, a1, buf);
    if (*(_QWORD *)&buf[8] && buf[6] == 1)
      free(*(void **)&buf[8]);
    v199 = atomic_load(byte_1EE414EA8);
    if ((v199 & 1) != 0)
    {
      v200 = atomic_load(byte_1EE417890);
      if ((v200 & 1) != 0)
      {
        v203 = *(const char **)v477;
        if (!*(_QWORD *)v477)
          v203 = &v477[8];
        printf("writing: %s", v203);
        putchar(10);
      }
      else
      {
        v201 = sub_19BFD3F34();
        if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
        {
          v202 = *(_BYTE **)v477;
          if (!*(_QWORD *)v477)
            v202 = &v477[8];
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v202;
          _os_log_impl(&dword_19BF85000, v201, OS_LOG_TYPE_DEFAULT, "writing: %s", buf, 0xCu);
        }
      }
    }
    v204 = &v477[8];
    if (*(_QWORD *)v477)
      v205 = *(char **)v477;
    else
      v205 = &v477[8];
    sub_19C034464(&md, v205);
    if (!v474)
    {
      sub_19BFA0144((uint64_t)buf);
      v423 = sub_19BF8E6F8(&buf[16], (uint64_t)"Failed to open data file at ", 28);
      if (*(_QWORD *)v477)
        v204 = *(const char **)v477;
      v424 = strlen(v204);
      v425 = sub_19BF8E6F8(v423, (uint64_t)v204, v424);
      sub_19BF8E6F8(v425, (uint64_t)" (errno=", 8);
      v426 = (_QWORD *)std::ostream::operator<<();
      sub_19BF8E6F8(v426, (uint64_t)")", 1);
      v427 = __cxa_allocate_exception(0x20uLL);
      sub_19BFAAA88(&v480, (uint64_t)&buf[24]);
      sub_19BFD48D0(v427, (__int128 *)&v480);
      __cxa_throw(v427, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
    }
    sub_19BFE2244(a1, (ssize_t)&md, 0);
    v206 = *(uint64_t **)(a1 + 280);
    v207 = *v206;
    v208 = v206[1] - *v206;
    if (v208)
    {
      v209 = 0;
      v210 = 0;
      v211 = v208 >> 3;
      __dst = a1 + 328;
      v448 = a1 + 1776;
      while (1)
      {
        v212 = v209;
        v213 = v210 + 1;
        do
        {
          v210 = v213;
          v209 = v213;
          if (v211 <= v213)
            break;
          ++v213;
        }
        while (*(_BYTE *)(*(_QWORD *)(v207 + 8 * v209) + 304));
        v214 = *(unsigned __int16 **)(v207 + 8 * v212);
        if (*((_BYTE *)v214 + 304))
          goto LABEL_450;
        v215 = *((_QWORD *)v214 + 41);
        if ((v215 & 0x20) == 0)
          goto LABEL_345;
        if ((v215 & 0x100) != 0 && (*((_DWORD *)v214 + 15) > 0x3FFEu || *(_DWORD *)(a1 + 1960) != 5))
          goto LABEL_345;
        if ((v215 & 0x200000) != 0 && *((_DWORD *)v214 + 19) || *((_DWORD *)v214 + 16) != -1)
          goto LABEL_345;
        v217 = (unsigned int *)*((_QWORD *)v214 + 28);
        if (v217)
        {
          do
            v218 = __ldaxr(v217);
          while (__stlxr(v218 + 1, v217));
          if (v218 <= 0)
            __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
          v1 = (unsigned __int8 *)*((_QWORD *)v214 + 28);
          do
            v219 = __ldaxr((unsigned int *)v1);
          while (__stlxr(v219 + 1, (unsigned int *)v1));
          if (v219 < 1)
            __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
          v220 = (_QWORD *)*((_QWORD *)v1 + 4);
          if (v220)
          {
            if (((v220[1] - *v220) & 0x7FFFFFFF0) != 0)
            {
              LOBYTE(v221) = 1;
LABEL_341:
              sub_19BFBF4E8((uint64_t)v1);
              sub_19BFBF4E8((uint64_t)v217);
              v206 = *(uint64_t **)(a1 + 280);
              if ((v221 & 1) != 0)
                goto LABEL_344;
              goto LABEL_450;
            }
          }
        }
        if ((*((_DWORD *)v214 + 9) & 1) != 0
          || *(_QWORD *)(v214 + 18)
          || *((_DWORD *)v214 + 14)
          || *((_QWORD *)v214 + 25) == *((_QWORD *)v214 + 26)
          || !*(_DWORD *)(a1 + 1648))
        {
          break;
        }
        LODWORD(v480.__r_.__value_.__l.__data_) = 0x100000;
        WORD2(v480.__r_.__value_.__r.__words[0]) = 0;
        v480.__r_.__value_.__s.__data_[6] = 0;
        v480.__r_.__value_.__l.__size_ = 0;
        v480.__r_.__value_.__s.__data_[16] = 0;
        sub_19BF86B60((uint64_t)buf, v214);
        v277 = 0;
        LODWORD(v485) = 0;
        while (1)
        {
          v278 = *(unsigned __int16 *)&buf[4];
          if (!*(_WORD *)&buf[4])
          {
            sub_19BF86BF8((unsigned __int16 *)buf);
            v278 = *(unsigned __int16 *)&buf[4];
          }
          if (v277 >= v278)
          {
            v280 = sub_19BFF7920((unsigned __int16 *)&v480, v214);
            goto LABEL_471;
          }
          v279 = sub_19C02211C((uint64_t)buf);
          sub_19BFD4084((const void **)&v471, __dst, v279);
          __srca = sub_19C032948(__dst, (unsigned __int16 *)&v471);
          if (sub_19C017308(__dst, (unsigned __int16 *)&v471))
            break;
          if (__srca)
            sub_19BFF6A20((unsigned __int16 *)&v480, __srca);
          if ((unsigned __int16)v471 >= 0xFu && *((_QWORD *)&v471 + 1))
            MEMORY[0x1A1AD0CB8](*((_QWORD *)&v471 + 1), 0x1000C8077774924);
          v277 = WORD1(v485);
        }
        if ((unsigned __int16)v471 >= 0xFu && *((_QWORD *)&v471 + 1))
          MEMORY[0x1A1AD0CB8](*((_QWORD *)&v471 + 1), 0x1000C8077774924);
        v280 = 0;
LABEL_471:
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        if (v480.__r_.__value_.__l.__size_ && v480.__r_.__value_.__s.__data_[6] == 1)
          free((void *)v480.__r_.__value_.__l.__size_);
        if (!v280)
          break;
        v281 = *((_QWORD *)v214 + 41);
        if (v217)
        {
          v221 = (v281 >> 11) & 1;
          if (v1)
            goto LABEL_341;
LABEL_480:
          sub_19BFBF4E8((uint64_t)v217);
          v206 = *(uint64_t **)(a1 + 280);
          if ((_DWORD)v221)
            goto LABEL_344;
          goto LABEL_450;
        }
        v206 = *(uint64_t **)(a1 + 280);
        if ((v281 & 0x800) != 0)
          goto LABEL_344;
LABEL_450:
        v207 = *v206;
        v211 = (v206[1] - *v206) >> 3;
        if (v211 <= v209)
          goto LABEL_484;
      }
      if (!v217)
      {
        v206 = *(uint64_t **)(a1 + 280);
LABEL_344:
        v214 = *(unsigned __int16 **)(v207 + 8 * v212);
        v207 = *v206;
LABEL_345:
        __src = v1;
        if (v209 < (v206[1] - v207) >> 3 && (v222 = *((_QWORD *)v214 + 29)) != 0)
        {
          v224 = *(_QWORD **)v222;
          v223 = *(_QWORD **)(v222 + 8);
          if (v224 != v223)
          {
            while (*v224 != *(_QWORD *)(v207 + 8 * v209))
            {
              if (++v224 == v223)
              {
                v224 = v223;
                break;
              }
            }
          }
          v225 = v224 != v223;
        }
        else
        {
          v225 = 0;
        }
        v226 = *(_QWORD *)(a1 + 264);
        *((_DWORD *)v214 + 62) = sub_19C03467C(v475);
        v227 = *((double *)v214 + 11);
        v228 = 0.0;
        if (v227 != 0.0)
        {
          v229 = *((_QWORD *)v214 + 28);
          if (v229)
          {
            v230 = *(double *)(v229 + 40);
            goto LABEL_358;
          }
          v231 = *((_DWORD *)v214 + 84);
          if (v231)
          {
            v230 = (double)v231;
LABEL_358:
            v228 = v227 / v230;
          }
          else
          {
            v228 = 1.0;
          }
        }
        if (*((_DWORD *)v214 + 10) == 1)
          *((_DWORD *)v214 + 9) |= 1u;
        v458 = 0;
        v459 = 0;
        v460 = 0;
        v457 = 0;
        if ((v214[164] & 0x20) == 0 || !sub_19C03298C((uint64_t)v214, __dst, (uint64_t *)&v458, &v457))
          goto LABEL_371;
        v232 = v458;
        v233 = 0;
        if (v459 != v458)
        {
          v234 = 1;
          do
          {
            v235 = *v232;
            v232 += 20;
            v233 += v235 + 2;
            v33 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v459 - (char *)v458) >> 3) > v234++;
          }
          while (v33);
        }
        v236 = (v214[164] & 8) != 0 ? sub_19BFD3308(v448, v214) : *v214 + 1;
        if (v233 < v236)
        {
          v237 = 0;
          v238 = v458 != v459;
        }
        else
        {
LABEL_371:
          v238 = 0;
          v237 = 1;
        }
        v239 = sub_19C03467C(v475);
        v480.__r_.__value_.__s.__data_[0] = 0;
        sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 1);
        v240 = (_QWORD *)*((_QWORD *)v214 + 29);
        if (v240)
        {
          v241 = v240[1] - *v240;
          if (v225)
            v242 = -126;
          else
            v242 = 2;
          if (v241 <= 8)
            v243 = 0;
          else
            v243 = v242;
        }
        else
        {
          v243 = 0;
        }
        v244 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v226 + 40))(v226, *((unsigned int *)v214 + 9));
        v245 = v243 | 4;
        if (v228 >= 1.0)
          v245 = v243;
        if (v244)
          v245 |= 0x20u;
        v246 = v245 | (*((_DWORD *)v214 + 10) > 1u);
        if (*((_DWORD *)v214 + 14))
          v246 |= 0x40u;
        if (v238)
          v246 |= 8u;
        if (v237)
          v247 = v246 | 0x10;
        else
          v247 = v246;
        v480.__r_.__value_.__s.__data_[0] = v247;
        sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 1);
        *((_BYTE *)v214 + 44) = v247;
        if (v228 < 1.0)
        {
          v248 = (sqrt(v228) * 255.0);
          if (v248 >= 0xFF)
            v249 = -1;
          else
            v249 = v248;
          if (v248)
            v250 = 1;
          else
            v250 = v228 <= 0.0;
          if (v250)
            v251 = v249;
          else
            v251 = 1;
          v480.__r_.__value_.__s.__data_[0] = v251;
          sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 1);
        }
        v252 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v226 + 40))(v226, *((unsigned int *)v214 + 9));
        if (v252)
        {
          v480.__r_.__value_.__s.__data_[0] = v252;
          sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 1);
        }
        v253 = *((_DWORD *)v214 + 10);
        if (v253 >= 2)
        {
          LODWORD(v480.__r_.__value_.__l.__data_) = bswap32(v253);
          sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 4);
        }
        v254 = *((_DWORD *)v214 + 14);
        if (v254)
        {
          LODWORD(v480.__r_.__value_.__l.__data_) = bswap32(v254);
          sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 4);
        }
        if (v238)
        {
          v255 = (uint64_t)v458;
          if (v459 != v458)
          {
            v256 = 0;
            v257 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v459 - (char *)v458) >> 3);
            v258 = 1;
            do
            {
              v259 = *(_DWORD *)(v255 + 40 * v256 + 32);
              if (v257 > v258)
                LOBYTE(v259) = v259 | 0x80;
              v480.__r_.__value_.__s.__data_[0] = v259;
              sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 1);
              v260 = &v458[20 * v256];
              v261 = (char *)*((_QWORD *)v260 + 1);
              v262 = (char *)(v260 + 8);
              if (v261)
                v263 = v261;
              else
                v263 = v262;
              sub_19C03453C((ssize_t)&md, v263);
              v256 = v258;
              v255 = (uint64_t)v458;
              v257 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v459 - (char *)v458) >> 3);
              ++v258;
            }
            while (v257 > v256);
          }
        }
        else if (v237)
        {
          if ((v214[164] & 8) != 0)
          {
            if (!*(_QWORD *)(a1 + 1840))
              __assert_rtn("encode", "TIHuffmanCoder.cpp", 203, "is_compiled()");
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x4802000000;
            *(_QWORD *)&buf[24] = sub_19BFD30DC;
            v485 = (uint64_t)sub_19BFD3108;
            v487 = 0;
            v488 = 0;
            v486 = 0;
            len = 8;
            v480.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
            v480.__r_.__value_.__l.__size_ = 0x40000000;
            v480.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_19BFD3120;
            v481 = &unk_1E3D15C58;
            v482 = buf;
            v483 = a1 + 1776;
            v265 = (unsigned __int16 *)*((_QWORD *)v214 + 1);
            if (!v265)
              v265 = v214 + 8;
            *(_QWORD *)&v471 = v265;
            DWORD2(v471) = 0;
            HIDWORD(v471) = *v214;
            v472[0] = 0;
            sub_19BF8BB80((uint64_t *)&v471);
            v266 = *v214;
            v267 = (unsigned __int16 *)*((_QWORD *)v214 + 1);
            if (!v267)
              v267 = v214 + 8;
            *(_QWORD *)v467 = v267;
            *(_DWORD *)&v467[8] = v266;
            *(_DWORD *)v468 = v266;
            *(_DWORD *)&v468[4] = 0;
            sub_19BF8BB80((uint64_t *)v467);
            v268 = *(_QWORD *)v467;
            v269 = *(_DWORD *)&v467[8];
            while (1)
            {
              if ((_QWORD)v471 != v268)
                __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
              if (DWORD2(v471) == v269)
                break;
              ((void (*)(std::string *, _QWORD))v480.__r_.__value_.__r.__words[2])(&v480, v472[0]);
              sub_19BF8BB80((uint64_t *)&v471);
            }
            ((void (*)(std::string *, _QWORD))v480.__r_.__value_.__r.__words[2])(&v480, 0);
            v270 = *(_QWORD *)&buf[8];
            v272 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
            v271 = *(_QWORD *)(*(_QWORD *)&buf[8] + 48);
            if (v271 - v272 != sub_19BFD3308(v448, v214))
              __assert_rtn("encode", "TIHuffmanCoder.cpp", 215, "bytes.size() == encoded_size(str)");
            sub_19BF8BC44((uint64_t)&v461, *(_QWORD *)(v270 + 48) - *(_QWORD *)(v270 + 40), *(void **)(v270 + 40), *(_QWORD *)(v270 + 48) - *(_QWORD *)(v270 + 40));
            _Block_object_dispose(buf, 8);
            if (v486)
            {
              v487 = v486;
              operator delete(v486);
            }
            if ((unsigned __int16)v461 <= 0xEuLL)
              v273 = (char *)&v461 + 2;
            else
              v273 = v462;
            sub_19C0344E0((ssize_t)&md, (uint64_t)v273, (unsigned __int16)v461);
            if ((unsigned __int16)v461 >= 0xFu && v462)
              MEMORY[0x1A1AD0CB8](v462, 0x1000C8077774924);
          }
          else
          {
            if (*((_QWORD *)v214 + 1))
              v264 = (char *)*((_QWORD *)v214 + 1);
            else
              v264 = (char *)(v214 + 8);
            sub_19C03453C((ssize_t)&md, v264);
          }
        }
        v274 = *((_QWORD *)v214 + 41);
        if ((v274 & 0x100) != 0)
        {
          v275 = *((_DWORD *)v214 + 15);
          v480.__r_.__value_.__s.__data_[0] = BYTE2(v275);
          v480.__r_.__value_.__s.__data_[1] = BYTE1(v275);
          v480.__r_.__value_.__s.__data_[2] = v275;
          sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 3);
          v274 = *((_QWORD *)v214 + 41);
        }
        if ((v274 & 0x1000000) != 0)
        {
          LODWORD(v480.__r_.__value_.__l.__data_) = bswap32(*((_DWORD *)v214 + 16));
          sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 4);
          v274 = *((_QWORD *)v214 + 41);
        }
        if ((v274 & 0x200000) != 0)
        {
          LODWORD(v480.__r_.__value_.__l.__data_) = bswap32(*((_DWORD *)v214 + 19));
          sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 4);
          LOWORD(v480.__r_.__value_.__l.__data_) = bswap32(v214[40]) >> 16;
          sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 2);
        }
        v276 = sub_19C03467C(v475);
        v1 = __src;
        if (((v276 - v239) & 0xFFFFFF00) != 0)
          __assert_rtn("write_unigram_record_v2", "UnigramWord.cpp", 726, "record_length <= 0xff");
        sub_19C0346C0(v475, v239);
        v480.__r_.__value_.__s.__data_[0] = v276 - v239;
        sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 1);
        sub_19C0346C0(v475, v276);
        *(_QWORD *)buf = &v458;
        sub_19BFE6378((void ***)buf);
        ++*(_DWORD *)(a1 + 1888);
        v206 = *(uint64_t **)(a1 + 280);
        goto LABEL_450;
      }
      LODWORD(v221) = 1;
      if (v1)
        goto LABEL_341;
      goto LABEL_480;
    }
LABEL_484:
    *(_DWORD *)buf = 0;
    sub_19C0344E0((ssize_t)&md, (uint64_t)buf, 4);
    v282 = sub_19C03467C(v475);
    v283 = v282;
    if ((*(_BYTE *)(a1 + 241) & 0x10) != 0)
      v284 = 0x80000000;
    else
      v284 = 0x800000;
    if (v284 < v282)
    {
      sub_19BFA0144((uint64_t)buf);
      sub_19BF8E6F8(&buf[16], (uint64_t)"Unigram index length=", 21);
      v428 = (_QWORD *)std::ostream::operator<<();
      sub_19BF8E6F8(v428, (uint64_t)" bytes exceeds trie addressing capacity=", 40);
      std::ostream::operator<<();
      if ((*(_BYTE *)(a1 + 241) & 0x10) == 0)
        sub_19BF8E6F8(&buf[16], (uint64_t)" (try passing the '-4' option when compiling)", 45);
      v429 = __cxa_allocate_exception(0x20uLL);
      sub_19BFAAA88(&v480, (uint64_t)&buf[24]);
      sub_19BFD48D0(v429, (__int128 *)&v480);
      __cxa_throw(v429, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
    }
    v285 = atomic_load(byte_1EE414EA8);
    if ((v285 & 1) != 0)
    {
      v286 = atomic_load(byte_1EE417890);
      if ((v286 & 1) != 0)
      {
        printf("\tWrote %d non-derivable words in %d bytes", *(_DWORD *)(a1 + 1888), v282);
        putchar(10);
      }
      else
      {
        v287 = sub_19BFD3F34();
        if (os_log_type_enabled(v287, OS_LOG_TYPE_DEFAULT))
        {
          v288 = *(_DWORD *)(a1 + 1888);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v288;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v283;
          _os_log_impl(&dword_19BF85000, v287, OS_LOG_TYPE_DEFAULT, "\tWrote %d non-derivable words in %d bytes", buf, 0xEu);
        }
      }
    }
    v289 = atomic_load(byte_1EE414EA8);
    if ((v289 & 1) != 0)
    {
      v290 = atomic_load(byte_1EE417890);
      if ((v290 & 1) != 0)
      {
        putchar(10);
      }
      else
      {
        v283 = sub_19BFD3F34();
        if (os_log_type_enabled((os_log_t)v283, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19BF85000, (os_log_t)v283, OS_LOG_TYPE_DEFAULT, (const char *)&unk_19C0727E2, buf, 2u);
        }
      }
    }
    v291 = *(_QWORD *)(a1 + 240);
    if ((v291 & 0x100) != 0)
    {
      v292 = sub_19C03467C(v475);
      memset(buf, 0, sizeof(buf));
      LODWORD(v485) = 1065353216;
      v293 = *(unsigned __int16 ****)(a1 + 280);
      v294 = *v293;
      v295 = v293[1];
      __dsta = v292;
      v296 = 0;
      if (*v293 != v295)
      {
        v297 = -1;
        while (1)
        {
          v298 = *v294;
          v299 = *((unsigned int *)*v294 + 15);
          LODWORD(v458) = v299;
          if ((_DWORD)v299)
          {
            v301 = *(_QWORD *)buf;
            v300 = *(_QWORD *)&buf[8];
            if (!sub_19BFE2AD4(*(uint64_t *)buf, *(unint64_t *)&buf[8], v299))
            {
              if (v300)
              {
                v302 = (uint8x8_t)vcnt_s8((int8x8_t)v300);
                v302.i16[0] = vaddlv_u8(v302);
                if (v302.u32[0] > 1uLL)
                {
                  v283 = v299;
                  if (v300 <= v299)
                    v283 = v299 % v300;
                }
                else
                {
                  v283 = ((_DWORD)v300 - 1) & v299;
                }
                v310 = *(uint64_t ***)(v301 + 8 * v283);
                if (v310)
                {
                  for (j = *v310; j; j = (uint64_t *)*j)
                  {
                    v312 = j[1];
                    if (v312 == v299)
                    {
                      if (*((_DWORD *)j + 4) == (_DWORD)v299)
                        goto LABEL_567;
                    }
                    else
                    {
                      if (v302.u32[0] > 1uLL)
                      {
                        if (v312 >= v300)
                          v312 %= v300;
                      }
                      else
                      {
                        v312 &= v300 - 1;
                      }
                      if (v312 != v283)
                        break;
                    }
                  }
                }
              }
              v313 = operator new(0x20uLL);
              *v313 = 0;
              v313[1] = v299;
              *((_DWORD *)v313 + 4) = v299;
              v313[3] = v298;
              v314 = (float)(unint64_t)(*(_QWORD *)&buf[24] + 1);
              if (!v300 || (float)(*(float *)&v485 * (float)v300) < v314)
              {
                v315 = (v300 & (v300 - 1)) != 0;
                if (v300 < 3)
                  v315 = 1;
                v316 = v315 | (2 * v300);
                v317 = vcvtps_u32_f32(v314 / *(float *)&v485);
                if (v316 <= v317)
                  v318 = v317;
                else
                  v318 = v316;
                sub_19BFD1648((uint64_t)buf, v318);
                v300 = *(_QWORD *)&buf[8];
                if ((v300 & (v300 - 1)) != 0)
                {
                  if (*(_QWORD *)&buf[8] <= v299)
                    v283 = v299 % *(_QWORD *)&buf[8];
                  else
                    v283 = v299;
                }
                else
                {
                  v283 = (*(_DWORD *)&buf[8] - 1) & v299;
                }
              }
              v323 = *(_QWORD *)buf;
              v324 = *(_QWORD **)(*(_QWORD *)buf + 8 * v283);
              if (v324)
              {
                *v313 = *v324;
                goto LABEL_565;
              }
              *v313 = *(_QWORD *)&buf[16];
              *(_QWORD *)&buf[16] = v313;
              *(_QWORD *)(v323 + 8 * v283) = &buf[16];
              if (*v313)
              {
                v325 = *(_QWORD *)(*v313 + 8);
                if ((v300 & (v300 - 1)) != 0)
                {
                  if (v325 >= v300)
                    v325 %= v300;
                }
                else
                {
                  v325 &= v300 - 1;
                }
                v324 = (_QWORD *)(*(_QWORD *)buf + 8 * v325);
LABEL_565:
                *v324 = v313;
              }
              ++*(_QWORD *)&buf[24];
LABEL_567:
              if (v299 < v297)
                v297 = v299;
              if (v296 <= v299)
                v296 = v299;
              goto LABEL_571;
            }
            if (*((_BYTE *)v298 + 96))
            {
              sub_19BFE2B80((uint64_t)buf, v299, &v458)[3] = v298;
            }
            else
            {
              v303 = atomic_load(byte_1EE414EA8);
              if ((v303 & 1) != 0)
              {
                v304 = atomic_load(byte_1EE417890);
                if ((v304 & 1) != 0)
                {
                  v319 = (int)v458;
                  v320 = sub_19BFE2B80((uint64_t)buf, v458, &v458);
                  sub_19BFD54EC((uint64_t)&v480, (unsigned __int16 *)v320[3]);
                  v283 = v480.__r_.__value_.__l.__size_;
                  sub_19BFD54EC((uint64_t)&v471, *v294);
                  v321 = &v480.__r_.__value_.__s.__data_[16];
                  if (v283)
                    v321 = (const char *)v283;
                  v322 = (const char *)*((_QWORD *)&v471 + 1);
                  if (!*((_QWORD *)&v471 + 1))
                    v322 = (const char *)v472;
                  printf("WARNING: words [%s] and [%s] share word id %u; only former is stored in word id map",
                    v321,
                    v322,
                    v319);
                  if (*((_QWORD *)&v471 + 1) && BYTE6(v471) == 1)
                    free(*((void **)&v471 + 1));
                  if (v480.__r_.__value_.__l.__size_ && v480.__r_.__value_.__s.__data_[6] == 1)
                    free((void *)v480.__r_.__value_.__l.__size_);
                  putchar(10);
                }
                else
                {
                  v305 = sub_19BFD3F34();
                  if (os_log_type_enabled(v305, OS_LOG_TYPE_DEFAULT))
                  {
                    v306 = (int)v458;
                    v307 = sub_19BFE2B80((uint64_t)buf, v458, &v458);
                    sub_19BFD54EC((uint64_t)&v480, (unsigned __int16 *)v307[3]);
                    v283 = v480.__r_.__value_.__l.__size_;
                    sub_19BFD54EC((uint64_t)&v471, *v294);
                    v308 = (unsigned int *)*((_QWORD *)&v471 + 1);
                    v309 = &v480.__r_.__value_.__s.__data_[16];
                    if (v283)
                      v309 = (std::string::value_type *)v283;
                    *(_DWORD *)v467 = 136315650;
                    if (!*((_QWORD *)&v471 + 1))
                      v308 = v472;
                    *(_QWORD *)&v467[4] = v309;
                    *(_WORD *)v468 = 2080;
                    *(_QWORD *)&v468[2] = v308;
                    v469 = 1024;
                    v470 = v306;
                    _os_log_impl(&dword_19BF85000, v305, OS_LOG_TYPE_DEFAULT, "WARNING: words [%s] and [%s] share word id %u; only former is stored in word id map",
                      v467,
                      0x1Cu);
                    if (*((_QWORD *)&v471 + 1) && BYTE6(v471) == 1)
                      free(*((void **)&v471 + 1));
                    if (v480.__r_.__value_.__l.__size_ && v480.__r_.__value_.__s.__data_[6] == 1)
                      free((void *)v480.__r_.__value_.__l.__size_);
                  }
                }
              }
            }
          }
LABEL_571:
          if (++v294 == v295)
            goto LABEL_574;
        }
      }
      v297 = -1;
LABEL_574:
      v480.__r_.__value_.__s.__data_[0] = (v296 - v297 + 1) >> 16;
      v480.__r_.__value_.__s.__data_[1] = (unsigned __int16)(v296 - v297 + 1) >> 8;
      v480.__r_.__value_.__s.__data_[2] = v296 - v297 + 1;
      sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 3);
      v480.__r_.__value_.__s.__data_[0] = BYTE2(v297);
      v480.__r_.__value_.__s.__data_[1] = BYTE1(v297);
      v480.__r_.__value_.__s.__data_[2] = v297;
      sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 3);
      while (1)
      {
        LODWORD(v471) = v297;
        if (v297 > v296)
          break;
        if (sub_19BFE2AD4(*(uint64_t *)buf, *(unint64_t *)&buf[8], v297))
          v326 = *(_DWORD *)(sub_19BFE2B80((uint64_t)buf, v297, &v471)[3] + 248);
        else
          v326 = 0;
        if ((*(_BYTE *)(a1 + 241) & 0x10) != 0)
        {
          LODWORD(v480.__r_.__value_.__l.__data_) = bswap32(v326);
          sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 4);
        }
        else
        {
          v480.__r_.__value_.__s.__data_[0] = BYTE2(v326);
          v480.__r_.__value_.__s.__data_[1] = BYTE1(v326);
          v480.__r_.__value_.__s.__data_[2] = v326;
          sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 3);
        }
        ++v297;
      }
      sub_19C0346C0(v475, 72);
      LODWORD(v480.__r_.__value_.__l.__data_) = bswap32(__dsta);
      sub_19C0344E0((ssize_t)&md, (uint64_t)&v480, 4);
      sub_19C034700(v475);
      sub_19BFBF3CC((uint64_t)buf);
      v291 = *(_QWORD *)(a1 + 240);
    }
    if ((v291 & 8) != 0)
    {
      v327 = sub_19C03467C(v475);
      if (!*(_QWORD *)(a1 + 1840))
        __assert_rtn("write_unigram_data", "UnigramsCompiler.cpp", 1047, "m_huffman_coder.is_compiled()");
      v328 = v327;
      v329 = *(_QWORD *)(a1 + 1864);
      v330 = *(_DWORD *)(v329 - 4);
      if (v330 == -1)
      {
        v331 = 0;
      }
      else
      {
        v332 = (char *)sub_19BFB3588(v330 + 1);
        v331 = v332;
        v333 = 0;
        do
        {
          *(_DWORD *)&v332[v333] = 0;
          v333 += 4;
        }
        while (4 * (v330 + 1) != v333);
        v329 = *(_QWORD *)(a1 + 1864);
      }
      for (k = *(_QWORD *)(a1 + 1856); k != v329; k += 8)
        ++v331[*(unsigned int *)(k + 4)];
      buf[0] = v330;
      sub_19C0344E0((ssize_t)&md, (uint64_t)buf, 1);
      if (v330)
      {
        for (m = 1; m <= v330; ++m)
        {
          v336 = v331[m];
          if (v336 >= 0x10000)
            __assert_rtn("write", "TIHuffmanCoder.cpp", 191, "num_chars_in_depth[depth] <= 0xffff");
          *(_WORD *)buf = bswap32(v336) >> 16;
          sub_19C0344E0((ssize_t)&md, (uint64_t)buf, 2);
        }
      }
      v337 = *(unsigned int **)(a1 + 1856);
      v338 = *(unsigned int **)(a1 + 1864);
      while (v337 != v338)
      {
        *(_DWORD *)buf = bswap32(*v337);
        sub_19C0344E0((ssize_t)&md, (uint64_t)buf, 4);
        v337 += 2;
      }
      if (v331)
        operator delete(v331);
      sub_19C0346C0(v475, 76);
      *(_DWORD *)buf = bswap32(v328);
      sub_19C0344E0((ssize_t)&md, (uint64_t)buf, 4);
      sub_19C034700(v475);
    }
    v339 = sub_19C03467C(v475);
    (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(a1 + 264) + 48))(*(_QWORD *)(a1 + 264), &md);
    sub_19C0346C0(v475, 80);
    *(_DWORD *)buf = bswap32(v339);
    sub_19C0344E0((ssize_t)&md, (uint64_t)buf, 4);
    sub_19C034700(v475);
    if ((*(_BYTE *)(a1 + 243) & 2) == 0)
    {
      while ((uint64_t)(sub_19C03467C(v475) & 0x8000000000000003) >= 1)
      {
        buf[0] = 0;
        sub_19C0344E0((ssize_t)&md, (uint64_t)buf, 1);
      }
      v340 = sub_19C03467C(v475);
      v341 = *(_QWORD *)(a1 + 1992) - *(_QWORD *)(a1 + 1984);
      v342 = atomic_load(byte_1EE414EA8);
      if ((v342 & 1) != 0)
      {
        v343 = atomic_load(byte_1EE417890);
        if ((v343 & 1) != 0)
        {
          printf("sort key mapping table = %d bytes", v341 & 0xFFFFFFF8);
          putchar(10);
        }
        else
        {
          v344 = sub_19BFD3F34();
          if (os_log_type_enabled(v344, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v341 & 0xFFFFFFF8;
            _os_log_impl(&dword_19BF85000, v344, OS_LOG_TYPE_DEFAULT, "sort key mapping table = %d bytes", buf, 8u);
          }
        }
      }
      *(_DWORD *)buf = bswap32(v341 & 0xFFFFFFF8);
      sub_19C0344E0((ssize_t)&md, (uint64_t)buf, 4);
      sub_19C0344E0((ssize_t)&md, *(_QWORD *)(a1 + 1984), v341 & 0xFFFFFFF8);
      *(_DWORD *)buf = bswap32(*(_DWORD *)(a1 + 2016) - *(_DWORD *)(a1 + 2008));
      sub_19C0344E0((ssize_t)&md, (uint64_t)buf, 4);
      sub_19C0344E0((ssize_t)&md, *(_QWORD *)(a1 + 2008), *(_QWORD *)(a1 + 2016) - *(_QWORD *)(a1 + 2008));
      sub_19C0346C0(v475, 64);
      *(_DWORD *)buf = bswap32(v340);
      sub_19C0344E0((ssize_t)&md, (uint64_t)buf, 4);
      sub_19C034700(v475);
    }
    sub_19BF86D24((uint64_t)&md);
    if (*(_QWORD *)v477 && BYTE6(__n) == 1)
      free(*(void **)v477);
    sub_19BFDFC94();
    v345 = *(_QWORD *)(a1 + 240);
    if ((v345 & 0x20000) == 0)
      goto LABEL_93;
    if ((v345 & 0x10000) != 0)
    {
      v346 = atomic_load(byte_1EE414EA8);
      if ((v346 & 1) != 0)
      {
        v347 = atomic_load(byte_1EE417890);
        if ((v347 & 1) != 0)
        {
          printf("Child offset ranges: Zero= %d, UInt24= %d, UInt16= %d, UInt8= %d : SInt24= %d, SInt16= %d, SInt8= %d", 0, 0, 0, 0, 0, 0, 0);
          putchar(10);
        }
        else
        {
          v348 = sub_19BFD3F34();
          if (os_log_type_enabled(v348, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67110656;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = 0;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&buf[16] = 0;
            *(_WORD *)&buf[20] = 1024;
            *(_DWORD *)&buf[22] = 0;
            *(_WORD *)&buf[26] = 1024;
            *(_DWORD *)&buf[28] = 0;
            v485 = 0x400000000000400;
            LODWORD(v486) = 0;
            _os_log_impl(&dword_19BF85000, v348, OS_LOG_TYPE_DEFAULT, "Child offset ranges: Zero= %d, UInt24= %d, UInt16= %d, UInt8= %d : SInt24= %d, SInt16= %d, SInt8= %d", buf, 0x2Cu);
          }
        }
      }
      v349 = atomic_load(byte_1EE414EA8);
      if ((v349 & 1) != 0)
      {
        v350 = atomic_load(byte_1EE417890);
        if ((v350 & 1) != 0)
        {
          printf("Child offset savings: UInt16= %d, UInt8= %d, UInt16^UInt8 = %d : SInt16= %d, SInt8= %d, SInt16^SInt8= %d : SInt16^UInt8= %d", 0, 0, 0, 0, 0, 0, 0);
          putchar(10);
        }
        else
        {
          v351 = sub_19BFD3F34();
          if (os_log_type_enabled(v351, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67110656;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = 0;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&buf[16] = 0;
            *(_WORD *)&buf[20] = 1024;
            *(_DWORD *)&buf[22] = 0;
            *(_WORD *)&buf[26] = 1024;
            *(_DWORD *)&buf[28] = 0;
            v485 = 0x400000000000400;
            LODWORD(v486) = 0;
            _os_log_impl(&dword_19BF85000, v351, OS_LOG_TYPE_DEFAULT, "Child offset savings: UInt16= %d, UInt8= %d, UInt16^UInt8 = %d : SInt16= %d, SInt8= %d, SInt16^SInt8= %d : SInt16^UInt8= %d", buf, 0x2Cu);
          }
        }
      }
    }
    v352 = atomic_load(byte_1EE414EA8);
    if ((v352 & 1) != 0)
    {
      v353 = atomic_load(byte_1EE417890);
      if ((v353 & 1) != 0)
      {
        printf("Non-branching chain histogram [length, count]:");
        putchar(10);
      }
      else
      {
        v354 = sub_19BFD3F34();
        if (os_log_type_enabled(v354, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19BF85000, v354, OS_LOG_TYPE_DEFAULT, "Non-branching chain histogram [length, count]:", buf, 2u);
        }
      }
    }
    v355 = 0;
    v356 = 0;
    v357 = 0;
    v358 = *MEMORY[0x1E0DE4F50];
    __srcb = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    __dstb = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v359 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v360 = v357;
      sub_19C034744();
      if (v360 >= (qword_1EE417878 - qword_1EE417870) >> 2)
        break;
      sub_19BFA0144((uint64_t)buf);
      v361 = sub_19BF8E6F8(&buf[16], (uint64_t)"  [", 3);
      *(_QWORD *)((char *)v361 + *(_QWORD *)(*v361 - 24) + 24) = 2;
      v362 = (_QWORD *)std::ostream::operator<<();
      v363 = sub_19BF8E6F8(v362, (uint64_t)", ", 2);
      *(_QWORD *)((char *)v363 + *(_QWORD *)(*v363 - 24) + 24) = 6;
      sub_19C034744();
      v364 = (_QWORD *)std::ostream::operator<<();
      sub_19BF8E6F8(v364, (uint64_t)"]", 1);
      if ((v360 & 3) != 0
        || (std::ios_base::getloc((const std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)&buf[16] - 24) + 16]),
            v365 = std::locale::use_facet((const std::locale *)&md, MEMORY[0x1E0DE4A90]),
            ((void (*)(const std::locale::facet *, uint64_t))v365->__vftable[2].~facet_0)(v365, 10),
            std::locale::~locale((std::locale *)&md),
            std::ostream::put(),
            std::ostream::flush(),
            (_DWORD)v360))
      {
        sub_19C034744();
        v356 += v355 * *(_DWORD *)(qword_1EE417870 + 4 * v360);
      }
      v366 = atomic_load(byte_1EE414EA8);
      if ((v366 & 1) != 0)
      {
        v367 = atomic_load(byte_1EE417890);
        if ((v367 & 1) != 0)
        {
          sub_19BFAAA88(&md, (uint64_t)&buf[24]);
          p_md = &md;
          if ((md.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_md = (std::string *)md.__r_.__value_.__r.__words[0];
          printf("%s", (const char *)p_md);
          if (SHIBYTE(md.__r_.__value_.__r.__words[2]) < 0)
            operator delete(md.__r_.__value_.__l.__data_);
          putchar(10);
        }
        else
        {
          v368 = sub_19BFD3F34();
          if (os_log_type_enabled(v368, OS_LOG_TYPE_DEFAULT))
          {
            sub_19BFAAA88(&md, (uint64_t)&buf[24]);
            v369 = &md;
            if ((md.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v369 = (std::string *)md.__r_.__value_.__r.__words[0];
            LODWORD(v480.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v480.__r_.__value_.__r.__words + 4) = (std::string::size_type)v369;
            _os_log_impl(&dword_19BF85000, v368, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v480, 0xCu);
            if (SHIBYTE(md.__r_.__value_.__r.__words[2]) < 0)
              operator delete(md.__r_.__value_.__l.__data_);
          }
        }
      }
      *(_QWORD *)buf = v358;
      *(_QWORD *)&buf[*(_QWORD *)(v358 - 24)] = __srcb;
      *(_QWORD *)&buf[16] = __dstb;
      *(_QWORD *)&buf[24] = v359;
      if (v492 < 0)
        operator delete(v490);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD0C7C](v493);
      v357 = v360 + 1;
      v355 += 3;
    }
    v371 = atomic_load(byte_1EE414EA8);
    if ((v371 & 1) != 0)
    {
      v372 = atomic_load(byte_1EE417890);
      if ((v372 & 1) != 0)
      {
        printf("Compression savings: %d bytes", v356);
        putchar(10);
      }
      else
      {
        v373 = sub_19BFD3F34();
        if (os_log_type_enabled(v373, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v356;
          _os_log_impl(&dword_19BF85000, v373, OS_LOG_TYPE_DEFAULT, "Compression savings: %d bytes", buf, 8u);
        }
      }
    }
    v374 = atomic_load(byte_1EE414EA8);
    if ((v374 & 1) == 0)
      goto LABEL_93;
    v375 = atomic_load(byte_1EE417890);
    if ((v375 & 1) == 0)
    {
      v376 = sub_19BFD3F34();
      if (!os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT))
        goto LABEL_93;
      *(_WORD *)buf = 0;
      v52 = ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>";
      v53 = v376;
      v54 = 2;
      goto LABEL_662;
    }
    printf(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
LABEL_665:
    putchar(10);
    goto LABEL_93;
  }
  v6 = atomic_load(byte_1EE414EA8);
  if ((v6 & 1) != 0)
  {
    v7 = atomic_load(byte_1EE417890);
    if ((v7 & 1) != 0)
    {
      v12 = *(const char **)(a1 + 1904);
      if (!v12)
        v12 = v3;
      v13 = *(const char **)(a1 + 24);
      if (!v13)
        v13 = (const char *)(a1 + 32);
      printf("Printing active unigrams from %s (%s) with prefix=%s, length<>%d, suffix=%s", v12, v13, "", *(_DWORD *)(a1 + 1968), "");
      putchar(10);
    }
    else
    {
      v8 = sub_19BFD3F34();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(const char **)(a1 + 1904);
        if (!v9)
          v9 = v3;
        v10 = *(_QWORD *)(a1 + 24);
        if (!v10)
          v10 = a1 + 32;
        v11 = *(_DWORD *)(a1 + 1968);
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v10;
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)&buf[24] = "";
        LOWORD(v485) = 1024;
        *(_DWORD *)((char *)&v485 + 2) = v11;
        HIWORD(v485) = 2080;
        v486 = "";
        _os_log_impl(&dword_19BF85000, v8, OS_LOG_TYPE_DEFAULT, "Printing active unigrams from %s (%s) with prefix=%s, length<>%d, suffix=%s", buf, 0x30u);
      }
    }
  }
  sub_19BFDC6B4(a1);
  LODWORD(md.__r_.__value_.__l.__data_) = 0x100000;
  WORD2(md.__r_.__value_.__r.__words[0]) = 0;
  md.__r_.__value_.__s.__data_[6] = 1;
  md.__r_.__value_.__l.__size_ = 0;
  sub_19BF8CA04(&md, (uint64_t)"", 0, 0);
  v14 = *(_DWORD *)(a1 + 1968);
  LODWORD(v480.__r_.__value_.__l.__data_) = 0x100000;
  WORD2(v480.__r_.__value_.__r.__words[0]) = 0;
  v480.__r_.__value_.__s.__data_[6] = 1;
  v480.__r_.__value_.__l.__size_ = 0;
  sub_19BF8CA04(&v480, (uint64_t)"", 0, 0);
  v15 = *(uint64_t **)(a1 + 280);
  v16 = *v15;
  v17 = (uint64_t *)v15[1];
  v18 = 126 - 2 * __clz(((uint64_t)v17 - *v15) >> 3);
  *(_QWORD *)buf = sub_19BFD84DC;
  if (v17 == (uint64_t *)v16)
    v19 = 0;
  else
    v19 = v18;
  sub_19BFE2D94(v16, v17, (uint64_t (**)(uint64_t *, uint64_t *))buf, v19, 1);
  (*(void (**)(size_t *__return_ptr, _QWORD, std::string *))(**(_QWORD **)(a1 + 248) + 8))(&__n, *(_QWORD *)(a1 + 248), &md);
  v26 = *(uint64_t **)(a1 + 280);
  v27 = *v26;
  if (v26[1] != *v26)
  {
    v28 = 0;
    v29 = 1;
    do
    {
      v30 = *(_QWORD *)(v27 + 8 * v28);
      v31 = *(unsigned __int16 *)(v30 + 4);
      if (!*(_WORD *)(v30 + 4))
      {
        sub_19BF86BF8(*(unsigned __int16 **)(v27 + 8 * v28));
        v31 = *(unsigned __int16 *)(v30 + 4);
      }
      if (v14 < 1 || v14 >= v31)
      {
        v33 = v14 >= 0 || v14 < v31;
        v32 = !v33;
      }
      else
      {
        v32 = 1;
      }
      v34 = (unsigned __int16)__n;
      if ((_WORD)__n)
        v35 = sub_19BFECF34((unsigned __int16 *)(*(_QWORD *)(v27 + 8 * v28) + 136), (unsigned __int16 *)&__n);
      else
        v35 = 0;
      data_low = LOWORD(v480.__r_.__value_.__l.__data_);
      if (LOWORD(v480.__r_.__value_.__l.__data_))
      {
        v37 = sub_19BF8CDFC(*(unsigned __int16 **)(v27 + 8 * v28), (unsigned __int16 *)&v480);
        if (v14)
          goto LABEL_59;
      }
      else
      {
        v37 = 0;
        if (v14)
          goto LABEL_59;
      }
      if (v34)
      {
LABEL_59:
        if ((v32 | v35 | v37) != 1)
          goto LABEL_83;
        goto LABEL_60;
      }
      if (data_low)
        v38 = v32;
      else
        v38 = 1;
      if (((v38 | (v35 || v37)) & 1) == 0)
        goto LABEL_83;
LABEL_60:
      v39 = *(unsigned __int8 *)(a1 + 1965);
      v40 = atomic_load(byte_1EE414EA8);
      if (v39)
      {
        if ((v40 & 1) != 0)
        {
          v41 = atomic_load(byte_1EE417890);
          if ((v41 & 1) != 0)
          {
            sub_19C033608(buf, *(_QWORD *)(v27 + 8 * v28), v20, v21, v22, v23, v24, v25);
LABEL_77:
            v45 = *(const char **)&buf[8];
            if (!*(_QWORD *)&buf[8])
              v45 = (const char *)&buf[16];
            printf("%s", v45);
            if (*(_QWORD *)&buf[8] && buf[6] == 1)
              free(*(void **)&buf[8]);
            putchar(10);
            goto LABEL_83;
          }
          v42 = sub_19BFD3F34();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            sub_19C033608(buf, *(_QWORD *)(v27 + 8 * v28), v20, v21, v22, v23, v24, v25);
            v43 = *(uint8_t **)&buf[8];
            if (!*(_QWORD *)&buf[8])
              v43 = &buf[16];
LABEL_72:
            LODWORD(v471) = 136315138;
            *(_QWORD *)((char *)&v471 + 4) = v43;
            _os_log_impl(&dword_19BF85000, v42, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v471, 0xCu);
            if (*(_QWORD *)&buf[8] && buf[6] == 1)
              free(*(void **)&buf[8]);
          }
        }
      }
      else if ((v40 & 1) != 0)
      {
        v44 = atomic_load(byte_1EE417890);
        if ((v44 & 1) != 0)
        {
          sub_19C03318C(buf, *(_QWORD *)(v27 + 8 * v28));
          goto LABEL_77;
        }
        v42 = sub_19BFD3F34();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          sub_19C03318C(buf, *(_QWORD *)(v27 + 8 * v28));
          v43 = *(uint8_t **)&buf[8];
          if (!*(_QWORD *)&buf[8])
            v43 = &buf[16];
          goto LABEL_72;
        }
      }
LABEL_83:
      v28 = v29;
      v46 = *(uint64_t **)(a1 + 280);
      v27 = *v46;
      ++v29;
    }
    while (v28 < (v46[1] - *v46) >> 3);
  }
  if ((unsigned __int16)__n >= 0xFu && *(_QWORD *)v477)
    MEMORY[0x1A1AD0CB8](*(_QWORD *)v477, 0x1000C8077774924);
  if (v480.__r_.__value_.__l.__size_ && v480.__r_.__value_.__s.__data_[6] == 1)
    free((void *)v480.__r_.__value_.__l.__size_);
  if (md.__r_.__value_.__l.__size_ && md.__r_.__value_.__s.__data_[6] == 1)
    free((void *)md.__r_.__value_.__l.__size_);
LABEL_93:
  if (v464 && v463[6] == 1)
    free(v464);
  if (v466)
  {
    if (v465[6] == 1)
      free(v466);
  }
}

void sub_19BFDBB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned __int16 a34,uint64_t a35,uint64_t a36,unsigned __int16 a37,uint64_t a38,int a39,__int16 a40,char a41,void *a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61)
{
  uint64_t v61;
  void *v63;
  BOOL v64;

  v63 = *(void **)(v61 + 72);
  if (v63 && a61 == 1)
    free(v63);
  if (a37 >= 0xFu && a38)
    MEMORY[0x1A1AD0CB8](a38, 0x1000C8077774924);
  if (a34 >= 0xFu && a35)
    MEMORY[0x1A1AD0CB8](a35, 0x1000C8077774924);
  if (a42)
    v64 = a41 == 1;
  else
    v64 = 0;
  if (v64)
    free(a42);
  if (a48)
  {
    if (a47 == 1)
      free(a48);
  }
  _Unwind_Resume(a1);
}

void sub_19BFDC12C(uint64_t a1, uint64_t a2, _WORD *a3)
{
  char *v6;
  void *v7;
  const char *v8;
  char *v9;
  BOOL v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  __int16 v21;
  unsigned __int16 v22[3];
  char v23;
  void *v24;
  int v25;
  __int16 v26;
  char v27;
  void *v28;
  char v29;
  unsigned __int16 v30[3];
  char v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v25 = 0x100000;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  if (*(_WORD *)(a2 + 1928))
  {
    sub_19BF8A1F4((uint64_t)&v25, (unsigned __int16 *)(a2 + 1928));
    goto LABEL_61;
  }
  LODWORD(v38) = 0x100000;
  WORD2(v38) = 0;
  BYTE6(v38) = 1;
  v39 = 0;
  sub_19BF8CA04(&v38, (uint64_t)"/", 0, 1u);
  if (*(_QWORD *)(a2 + 1904))
    v6 = *(char **)(a2 + 1904);
  else
    v6 = (char *)(a2 + 1912);
  v7 = v39;
  if (v39)
    v8 = (const char *)v39;
  else
    v8 = (const char *)v40;
  v9 = strstr(v6, v8);
  if (v9)
    v10 = (unsigned __int16)((_WORD)v9 - (_WORD)v6) == 0xFFFFLL;
  else
    v10 = 1;
  if (v10)
    __assert_rtn("default_output_path", "UnigramsCompiler.cpp", 1090, "m_unigrams_path.find(String(\"/\")) != String::NotAnIndex");
  if (v7 && BYTE6(v38) == 1)
    free(v7);
  LODWORD(v35) = 0x100000;
  WORD2(v35) = 0;
  BYTE6(v35) = 1;
  v36 = 0;
  sub_19BF8CA04(&v35, (uint64_t)"/", 0, 1u);
  v11 = *(unsigned __int8 **)(a2 + 1904);
  if (!v11)
    v11 = (unsigned __int8 *)(a2 + 1912);
  v12 = *(unsigned __int16 *)(a2 + 1896);
  v13 = &v11[v12];
  v14 = (unsigned __int8 *)&v37;
  if (v36)
    v14 = (unsigned __int8 *)v36;
  if (*(_WORD *)(a2 + 1896) && (_WORD)v35)
  {
    v15 = v11;
    v16 = &v11[v12];
    do
    {
      if (*v15 == *v14)
      {
        v17 = 1;
        while ((unsigned __int16)v35 != v17)
        {
          if (&v15[v17] == v13)
            goto LABEL_34;
          v18 = v15[v17];
          v19 = v14[v17++];
          if (v18 != v19)
            goto LABEL_24;
        }
        v16 = v15;
      }
LABEL_24:
      ++v15;
    }
    while (v15 != v13);
LABEL_34:
    v10 = v16 == v13;
    LOWORD(v13) = (_WORD)v16;
    if (!v10)
      goto LABEL_35;
LABEL_33:
    v20 = -1;
    goto LABEL_36;
  }
  if ((_WORD)v35)
    goto LABEL_33;
LABEL_35:
  v20 = (_WORD)v13 - (_WORD)v11;
LABEL_36:
  sub_19BF8CE58(&v38, (unsigned __int16 *)(a2 + 1896), (unsigned __int16)(v20 + 1), v12);
  if (v36 && BYTE6(v35) == 1)
    free(v36);
  LODWORD(v35) = 0x100000;
  WORD2(v35) = 0;
  BYTE6(v35) = 1;
  v36 = 0;
  sub_19BF8CA04(&v35, (uint64_t)"words", 0, 5u);
  if (!sub_19BF8CDFC((unsigned __int16 *)&v38, (unsigned __int16 *)&v35))
    __assert_rtn("default_output_path", "UnigramsCompiler.cpp", 1092, "input_filename.ends_with(String(\"words\"))");
  if (v36 && BYTE6(v35) == 1)
    free(v36);
  v21 = v38;
  LODWORD(v33) = 0x100000;
  WORD2(v33) = 0;
  BYTE6(v33) = 1;
  v34 = 0;
  sub_19BF8CA04(&v33, (uint64_t)"dat", 0, 3u);
  sub_19BFF7310((uint64_t)&v35, (unsigned __int16 *)&v38, (unsigned __int16)(v21 - 5), 5, &v33);
  if (v34 && BYTE6(v33) == 1)
    free(v34);
  sub_19BF86B60((uint64_t)v30, (unsigned __int16 *)(a2 + 176));
  sub_19BFF787C((uint64_t)&v33, v30, "/");
  sub_19BFF78D0((uint64_t)v22, (unsigned __int16 *)&v33, (uint64_t)&v35);
  if (v34 && BYTE6(v33) == 1)
    free(v34);
  if (v32 && v31 == 1)
    free(v32);
  if (v36 && BYTE6(v35) == 1)
    free(v36);
  if (v39 && BYTE6(v38) == 1)
    free(v39);
  sub_19BF8A370((uint64_t)&v25, v22);
  if (v24 && v23 == 1)
    free(v24);
LABEL_61:
  LODWORD(v38) = 0x100000;
  WORD2(v38) = 0;
  BYTE6(v38) = 1;
  v39 = 0;
  sub_19BF8CA04(&v38, (uint64_t)".dat", 0, 4u);
  if (!sub_19BF8CDFC((unsigned __int16 *)&v25, (unsigned __int16 *)&v38))
    __assert_rtn("output_path", "UnigramsCompiler.cpp", 1107, "dat_path.ends_with(String(\".dat\"))");
  if (v39 && BYTE6(v38) == 1)
    free(v39);
  sub_19BFF7310(a1, (unsigned __int16 *)&v25, (unsigned __int16)(v25 - 3), 3, a3);
  if (v28)
  {
    if (v27 == 1)
      free(v28);
  }
}

void sub_19BFDC5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, void *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,void *a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,void *a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,void *a35)
{
  uint64_t v35;
  void *v37;

  if (a29 && a28 == 1)
    free(a29);
  if (a23 && a22 == 1)
    free(a23);
  if (a35 && a34 == 1)
    free(a35);
  v37 = *(void **)(v35 - 96);
  if (v37 && *(_BYTE *)(v35 - 98) == 1)
    free(v37);
  if (a17)
  {
    if (a16 == 1)
      free(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFDC6B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t j;
  const char *v8;
  FILE *v9;
  FILE *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unint64_t v18;
  __int128 *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  char *v24;
  size_t v25;
  __int128 *v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  NSObject *v45;
  uint64_t v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  NSObject *v49;
  int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int16 **v59;
  unsigned __int16 *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  __int128 v65;
  uint64_t v66;
  _OWORD *v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unsigned int *v74;
  int v75;
  uint64_t v76;
  unsigned int *v77;
  int v78;
  unsigned int *v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  int v83;
  unint64_t v84;
  uint64_t *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  const char *v92;
  const char *v93;
  uint64_t *v94;
  unsigned int *v95;
  int v96;
  uint64_t v97;
  uint64_t *v98;
  int v99;
  unint64_t v100;
  uint64_t *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unsigned int v109;
  unsigned __int8 *v110;
  unint64_t v111;
  uint8x8_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned __int16 **v115;
  unsigned __int16 *k;
  unint64_t v117;
  char *v118;
  _OWORD *v119;
  void *v120;
  unsigned int *v121;
  int v122;
  float v123;
  float v124;
  _BOOL8 v125;
  unint64_t v126;
  unint64_t v127;
  int8x8_t prime;
  void *v129;
  void *v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  uint8x8_t v134;
  unint64_t v135;
  uint8x8_t v136;
  uint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int *v144;
  _QWORD *v145;
  unsigned int *v146;
  signed int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int v152;
  uint64_t v153;
  void *v154;
  double v155;
  double v156;
  const char *v157;
  const char *v158;
  unsigned __int8 v159;
  unsigned __int8 v160;
  NSObject *v161;
  uint64_t v162;
  unsigned __int8 v163;
  unsigned __int8 v164;
  NSObject *v165;
  int v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  NSObject *v169;
  int v170;
  uint64_t **v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  unsigned __int16 *v175;
  unsigned __int16 *v176;
  unsigned __int16 *v177;
  unsigned __int16 *v178;
  unsigned __int16 *v179;
  unint64_t v180;
  _QWORD *v181;
  unint64_t v182;
  unsigned __int16 *v183;
  uint64_t v184;
  unint64_t v185;
  unsigned __int16 *v186;
  unint64_t v187;
  uint64_t v188;
  unsigned __int16 *v189;
  unsigned __int16 *v190;
  unint64_t v191;
  unint64_t v192;
  unsigned __int16 *v193;
  unsigned __int8 *v194;
  unsigned int v195;
  unint64_t v196;
  unint64_t v197;
  uint8x8_t v198;
  unint64_t v199;
  unsigned __int16 **v200;
  unsigned __int16 *m;
  unint64_t v202;
  _QWORD *v203;
  float v204;
  _BOOL8 v205;
  unint64_t v206;
  unint64_t v207;
  size_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t n;
  void *v224;
  void ***v225;
  uint64_t v226;
  unsigned __int8 v227;
  unsigned __int8 v228;
  NSObject *v229;
  unsigned __int8 v230;
  unsigned __int8 v231;
  NSObject *v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  double v237;
  uint64_t **v238;
  double v239;
  uint64_t **v240;
  uint64_t **v241;
  uint64_t *v242;
  uint64_t *v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t **v247;
  uint64_t v248;
  uint64_t **v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  double v255;
  int v256;
  uint64_t **v257;
  uint64_t **v258;
  uint64_t *v259;
  uint64_t *v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v264;
  uint64_t **v265;
  float v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  double v271;
  double v272;
  double v273;
  BOOL v274;
  uint64_t v275;
  double v276;
  uint64_t v277;
  double v278;
  unsigned __int8 v281;
  unsigned __int8 v282;
  NSObject *v283;
  double v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  double v291;
  double v292;
  double v293;
  unsigned __int8 v294;
  double v295;
  unsigned __int8 v296;
  NSObject *v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  void ****v307;
  void **v308;
  unsigned __int16 *v309;
  unsigned __int16 *v310;
  int v311;
  unsigned __int16 *v312;
  uint64_t v313;
  int v314;
  unint64_t v315;
  unint64_t v316;
  uint8x8_t v317;
  void **v318;
  _QWORD *v319;
  unint64_t v320;
  float v321;
  float v322;
  _BOOL8 v323;
  unint64_t v324;
  unint64_t v325;
  size_t v326;
  void ***v327;
  void ***v328;
  unint64_t v329;
  unint64_t v330;
  void **v331;
  _QWORD *v332;
  uint8x8_t v333;
  unint64_t v334;
  float v335;
  float v336;
  _BOOL8 v337;
  unint64_t v338;
  unint64_t v339;
  size_t v340;
  void ***v341;
  void **v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  int v346;
  int v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  char **v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  int *v368;
  unint64_t v369;
  uint64_t v370;
  unsigned int *v371;
  unsigned int *v372;
  unint64_t v373;
  _QWORD *v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint8x8_t v378;
  void **v379;
  char *v380;
  unint64_t v381;
  float v382;
  float v383;
  _BOOL8 v384;
  unint64_t v385;
  unint64_t v386;
  int8x8_t v387;
  void *v388;
  void *v389;
  uint64_t v390;
  _QWORD *v391;
  unint64_t v392;
  uint8x8_t v393;
  unint64_t v394;
  uint8x8_t v395;
  uint64_t v396;
  _QWORD *v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  unint64_t v402;
  void **v403;
  void *v404;
  unint64_t *v405;
  unint64_t v406;
  int v407;
  _QWORD *v410;
  const char *v411;
  size_t v412;
  _QWORD *v413;
  _QWORD *v414;
  _QWORD *exception;
  unsigned __int16 *v416;
  _QWORD *v417;
  int v418;
  unint64_t v419;
  uint64_t v420;
  _QWORD *v421;
  int v422;
  uint64_t v423;
  _QWORD v425[2];
  uint8_t v426[24];
  uint64_t v427;
  _QWORD v428[32];
  __int128 v429;
  __int128 v430;
  float v431;
  uint8_t buf[32];
  uint64_t *v433;
  unsigned __int16 *v434;
  unsigned __int16 *v435;
  char *v436;
  int v437;
  uint64_t v438;

  v438 = *MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(a1 + 280);
  v3 = *v1;
  for (i = v1[1]; i != v3; i -= 8)
  {
    v5 = *(_QWORD *)(i - 8);
    v4 = v5;
    if (v5)
      sub_19BFBF614((unsigned int *)(v4 + 84));
  }
  v1[1] = v3;
  if (*(_QWORD *)(a1 + 312))
  {
    sub_19BFBF800(*(unsigned int **)(a1 + 304));
    *(_QWORD *)(a1 + 304) = 0;
    v6 = *(_QWORD *)(a1 + 296);
    if (v6)
    {
      for (j = 0; j != v6; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 312) = 0;
  }
  if (*(_QWORD *)(a1 + 1904))
    v8 = *(const char **)(a1 + 1904);
  else
    v8 = (const char *)(a1 + 1912);
  v9 = fopen(v8, "r");
  if (!v9)
  {
    sub_19BFA0144((uint64_t)v426);
    v410 = sub_19BF8E6F8(&v426[16], (uint64_t)"Failed to open ", 15);
    if (*(_QWORD *)(a1 + 1904))
      v411 = *(const char **)(a1 + 1904);
    else
      v411 = (const char *)(a1 + 1912);
    v412 = strlen(v411);
    v413 = sub_19BF8E6F8(v410, (uint64_t)v411, v412);
    sub_19BF8E6F8(v413, (uint64_t)" (errno=", 8);
    __error();
    v414 = (_QWORD *)std::ostream::operator<<();
    sub_19BF8E6F8(v414, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19BFAAA88(buf, (uint64_t)&v427);
    sub_19BFD48D0(exception, (__int128 *)buf);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
  }
  v10 = v9;
  v425[0] = &off_1E3D10930;
  *(_DWORD *)v426 = 0;
  v11 = 0;
  v422 = 0;
  v425[1] = uspoof_open();
  v421 = (_QWORD *)(a1 + 304);
  v12 = (unint64_t)byte_1EE414EA8;
  v13 = (uint64_t)byte_1EE417890;
  while (!feof(v10) && !ferror(v10))
  {
    v14 = fgets((char *)v426, 256, v10);
    if (v14)
    {
      v15 = (uint64_t)v14;
      *(_DWORD *)buf = 0x100000;
      *(_WORD *)&buf[4] = 0;
      buf[6] = 1;
      *(_QWORD *)&buf[8] = 0;
      v16 = strlen(v14);
      sub_19BF8CA04(buf, v15, 0, v16);
      LODWORD(v434) = 0x100000;
      WORD2(v434) = 0;
      BYTE6(v434) = 1;
      v435 = 0;
      sub_19BF8CA04(&v434, (uint64_t)" \t\n", 0, 3u);
      sub_19BFF7010(&v429, (unsigned __int16 *)buf, (unsigned __int16 *)&v434);
      if (v435 && BYTE6(v434) == 1)
        free(v435);
      if (*(_QWORD *)&buf[8] && buf[6] == 1)
        free(*(void **)&buf[8]);
      if ((_WORD)v429)
      {
        LODWORD(v434) = 0x100000;
        WORD2(v434) = 0;
        BYTE6(v434) = 1;
        v435 = 0;
        sub_19BF8CA04(&v434, (uint64_t)" \t\n", 0, 3u);
        if ((_WORD)v434)
        {
          *(_DWORD *)buf = 0x100000;
          *(_WORD *)&buf[4] = 0;
          buf[6] = 0;
          *(_QWORD *)&buf[8] = 0;
          buf[16] = 0;
          sub_19BF8CA9C((uint64_t)buf, v429);
          v17 = v429;
          if ((_WORD)v429)
          {
            v18 = 0;
            do
            {
              v19 = (__int128 *)*((_QWORD *)&v429 + 1);
              if (!*((_QWORD *)&v429 + 1))
                v19 = &v430;
              v20 = *((char *)v19 + v18);
              v21 = (unsigned __int16)v434;
              if ((_WORD)v434)
              {
                v22 = (unsigned __int8 *)v435;
                if (!v435)
                  v22 = (unsigned __int8 *)&v436;
                while (1)
                {
                  v23 = *v22++;
                  if (v23 == v20)
                    break;
                  if (!--v21)
                    goto LABEL_35;
                }
              }
              else
              {
LABEL_35:
                sub_19BFF6A20((unsigned __int16 *)buf, v20);
                v17 = v429;
              }
              ++v18;
            }
            while (v18 < v17);
          }
        }
        else
        {
          sub_19BF86B60((uint64_t)buf, (unsigned __int16 *)&v429);
        }
        if (*(_WORD *)buf)
        {
          if (!(_WORD)v429)
          {
            if (BYTE6(v429) || (sub_19BFF6860((unsigned __int16 *)&v429), (unsigned __int16)v429 < 2uLL))
            {
              sub_19BF8CA9C((uint64_t)&v429, 1);
              v26 = (__int128 *)*((_QWORD *)&v429 + 1);
              if (!*((_QWORD *)&v429 + 1))
                v26 = &v430;
              v24 = (char *)v26 + (unsigned __int16)v429;
              v25 = 1 - (unsigned __int16)v429;
            }
            else
            {
              if (*((_QWORD *)&v429 + 1))
                v24 = (char *)(*((_QWORD *)&v429 + 1) + 1);
              else
                v24 = (char *)&v430 + 1;
              v25 = (unsigned __int16)v429 - 1;
            }
            bzero(v24, v25);
            LOWORD(v429) = 1;
            WORD2(v429) = 0;
          }
          v27 = (unsigned __int8 *)*((_QWORD *)&v429 + 1);
          if (!*((_QWORD *)&v429 + 1))
            v27 = (unsigned __int8 *)&v430;
          v28 = *v27;
          if (*(_QWORD *)&buf[8] && buf[6] == 1)
            free(*(void **)&buf[8]);
          if (v435 && BYTE6(v434) == 1)
            free(v435);
          if (v28 != 35)
          {
            v418 = v11;
            v29 = *(_QWORD *)(a1 + 248);
            v30 = *(std::__shared_weak_count **)(a1 + 256);
            if (v30)
            {
              p_shared_owners = (unint64_t *)&v30->__shared_owners_;
              do
                v32 = __ldxr(p_shared_owners);
              while (__stxr(v32 + 1, p_shared_owners));
            }
            v33 = *(_QWORD *)(a1 + 240);
            v420 = operator new();
            *(_QWORD *)buf = v29;
            *(_QWORD *)&buf[8] = v30;
            if (v30)
            {
              v34 = (unint64_t *)&v30->__shared_owners_;
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            sub_19C030CA4(v420, (unsigned __int16 *)&v429, a1 + 16, (uint64_t *)buf, v33);
            v36 = v418;
            if (v30)
            {
              v37 = (unint64_t *)&v30->__shared_owners_;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
              do
                v39 = __ldaxr(v37);
              while (__stlxr(v39 - 1, v37));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            if ((*(_BYTE *)(a1 + 243) & 4) != 0)
            {
              sub_19BFE9F14((uint64_t)buf, (uint64_t)v425);
              sub_19BF8A1F4(v420 + 104, (unsigned __int16 *)buf);
              (*(void (**)(unsigned __int16 **__return_ptr, _QWORD, uint8_t *))(**(_QWORD **)(a1 + 248) + 8))(&v434, *(_QWORD *)(a1 + 248), buf);
              sub_19BFECEA8((unsigned __int16 *)(v420 + 136), (const void **)&v434);
              if ((unsigned __int16)v434 >= 0xFu && v435)
                MEMORY[0x1A1AD0CB8](v435, 0x1000C8077774924);
              if (*(_QWORD *)&buf[8] && buf[6] == 1)
                free(*(void **)&buf[8]);
            }
            v41 = (unsigned __int16 *)(v420 + 136);
            v40 = *(unsigned __int16 *)(v420 + 136);
            if (*(_WORD *)(v420 + 136))
            {
              v42 = *(_QWORD *)(a1 + 240);
              if ((v42 & 0x400) != 0 && *(double *)(v420 + 88) == 0.0)
              {
                if ((v42 & 0x10000) != 0)
                {
                  v43 = atomic_load(byte_1EE414EA8);
                  if ((v43 & 1) != 0)
                  {
                    v44 = atomic_load(byte_1EE417890);
                    if ((v44 & 1) != 0)
                    {
                      v93 = *(const char **)(v420 + 112);
                      if (!v93)
                        v93 = (const char *)(v420 + 120);
                      printf("        Excluding word with 0 freq: %s", v93);
                      putchar(10);
                    }
                    else
                    {
                      v45 = sub_19BFD3F34();
                      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                      {
                        v46 = *(_QWORD *)(v420 + 112);
                        if (!v46)
                          v46 = v420 + 120;
                        *(_DWORD *)buf = 136315138;
                        *(_QWORD *)&buf[4] = v46;
                        _os_log_impl(&dword_19BF85000, v45, OS_LOG_TYPE_DEFAULT, "        Excluding word with 0 freq: %s", buf, 0xCu);
                      }
                    }
                  }
                }
                v50 = 0;
                ++*(_DWORD *)(a1 + 1880);
                goto LABEL_274;
              }
              if (v40 <= 0xE)
                v52 = (unsigned __int8 *)(v420 + 138);
              else
                v52 = *(unsigned __int8 **)(v420 + 144);
              v53 = sub_19BFF79A0(v52, v40);
              v54 = *(_QWORD *)(a1 + 296);
              if (!v54)
                goto LABEL_122;
              v55 = v53;
              v56 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
              v56.i16[0] = vaddlv_u8(v56);
              v57 = v56.u32[0];
              if (v56.u32[0] > 1uLL)
              {
                v58 = v53;
                if (v54 <= v53)
                  v58 = v53 % v54;
              }
              else
              {
                v58 = ((_DWORD)v54 - 1) & v53;
              }
              v59 = *(unsigned __int16 ***)(*(_QWORD *)(a1 + 288) + 8 * v58);
              if (!v59 || (v60 = *v59) == 0)
              {
LABEL_122:
                v62 = operator new();
                *(_QWORD *)v62 = 0;
                *(_QWORD *)(v62 + 8) = 0;
                *(_QWORD *)(v62 + 16) = 0;
                v417 = (_QWORD *)v62;
                *(_DWORD *)(v62 + 24) = 1;
                goto LABEL_123;
              }
              while (2)
              {
                v61 = *((_QWORD *)v60 + 1);
                if (v61 == v55)
                {
                  if (sub_19BFED000(v60 + 8, v41))
                  {
                    v145 = (_QWORD *)*((_QWORD *)v60 + 4);
                    v417 = v145;
                    if (v145)
                    {
                      v146 = (unsigned int *)(v145 + 3);
                      do
                        v147 = __ldaxr(v146);
                      while (__stlxr(v147 + 1, v146));
                      v274 = v147 <= 0;
                      v145 = v417;
                      if (v274)
                        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
                    }
                    v148 = *v145;
                    v149 = v145[1] - *v145;
                    if (v149)
                    {
                      v150 = 0;
                      v151 = v149 >> 3;
                      v152 = 1;
                      while (1)
                      {
                        v153 = *(_QWORD *)(v148 + 8 * v150);
                        if (sub_19BFED000((unsigned __int16 *)(v153 + 136), v41)
                          && (v153 == v420 || sub_19BFF7920((unsigned __int16 *)v153, (unsigned __int16 *)v420))
                          && *(_DWORD *)(v153 + 56) == *(_DWORD *)(v420 + 56)
                          && *(_DWORD *)(v153 + 40) == *(_DWORD *)(v420 + 40)
                          && ((*(_BYTE *)(v153 + 330) & 0x20) == 0 || *(_DWORD *)(v153 + 76) == *(_DWORD *)(v420 + 76)))
                        {
                          break;
                        }
                        v150 = v152;
                        v274 = v151 > v152++;
                        if (!v274)
                          goto LABEL_123;
                      }
                      v155 = *(double *)(v420 + 88);
                      v156 = *(double *)(v153 + 88);
                      if (v155 > v156)
                      {
                        *(_QWORD *)(v153 + 36) = *(_QWORD *)(v420 + 36);
                        goto LABEL_313;
                      }
                      if (v155 == v156)
                      {
                        *(int8x8_t *)(v153 + 36) = vand_s8(*(int8x8_t *)(v420 + 36), *(int8x8_t *)(v153 + 36));
                        if (*(_QWORD *)(v420 + 112))
                          v157 = *(const char **)(v420 + 112);
                        else
                          v157 = (const char *)(v420 + 120);
                        if (*(_QWORD *)(v153 + 112))
                          v158 = *(const char **)(v153 + 112);
                        else
                          v158 = (const char *)(v153 + 120);
                        v13 = (uint64_t)byte_1EE417890;
                        v12 = (unint64_t)byte_1EE414EA8;
                        v144 = (unsigned int *)v417;
                        if (strcmp(v157, v158) < 0)
                        {
                          sub_19BF8A1F4(v153 + 104, (unsigned __int16 *)(v420 + 104));
                          v156 = *(double *)(v153 + 88);
                          v36 = v418;
                          v155 = *(double *)(v420 + 88);
                          goto LABEL_314;
                        }
                      }
                      else
                      {
LABEL_313:
                        v13 = (uint64_t)byte_1EE417890;
                        v12 = (unint64_t)byte_1EE414EA8;
LABEL_314:
                        v144 = (unsigned int *)v417;
                      }
                      v50 = 0;
                      *(double *)(v153 + 88) = v156 + v155;
LABEL_273:
                      sub_19BFBF44C(v144 + 6);
                      goto LABEL_274;
                    }
LABEL_123:
                    v63 = operator new();
                    sub_19BF86B60(v63, (unsigned __int16 *)v420);
                    *(_DWORD *)(v63 + 84) = 1;
                    v64 = (unsigned int *)(v63 + 84);
                    v65 = *(_OWORD *)(v420 + 48);
                    *(_OWORD *)(v63 + 32) = *(_OWORD *)(v420 + 32);
                    *(_OWORD *)(v63 + 48) = v65;
                    *(_OWORD *)(v63 + 64) = *(_OWORD *)(v420 + 64);
                    *(_WORD *)(v63 + 80) = *(_WORD *)(v420 + 80);
                    v66 = *(_QWORD *)(v420 + 88);
                    *(_BYTE *)(v63 + 96) = *(_BYTE *)(v420 + 96);
                    *(_QWORD *)(v63 + 88) = v66;
                    sub_19BF86B60(v63 + 104, (unsigned __int16 *)(v420 + 104));
                    v67 = (_OWORD *)(v63 + 136);
                    v68 = *v41;
                    v69 = (unint64_t)v417;
                    if (v68 < 0xF)
                    {
                      *v67 = *(_OWORD *)v41;
                    }
                    else
                    {
                      *(_WORD *)v67 = v68;
                      v70 = (void *)operator new[]();
                      *(_QWORD *)(v63 + 144) = v70;
                      memcpy(v70, *(const void **)(v420 + 144), *(unsigned __int16 *)(v63 + 136));
                    }
                    v416 = (unsigned __int16 *)(v63 + 136);
                    *(_QWORD *)(v63 + 200) = 0;
                    *(_WORD *)(v63 + 152) = 0;
                    *(_BYTE *)(v63 + 168) = 0;
                    *(_WORD *)(v63 + 176) = 0;
                    *(_DWORD *)(v63 + 192) = 0;
                    *(_QWORD *)(v63 + 208) = 0;
                    *(_QWORD *)(v63 + 216) = 0;
                    sub_19BFA9130((_QWORD *)(v63 + 200), *(const void **)(v420 + 200), *(_QWORD *)(v420 + 208), *(_QWORD *)(v420 + 208) - *(_QWORD *)(v420 + 200));
                    *(_QWORD *)(v63 + 224) = 0;
                    *(_QWORD *)(v63 + 256) = 0;
                    *(_QWORD *)(v63 + 264) = 0;
                    *(_QWORD *)(v63 + 272) = 0;
                    *(_QWORD *)(v63 + 232) = 0;
                    *(_QWORD *)(v63 + 240) = 0;
                    *(_DWORD *)(v63 + 248) = 0;
                    sub_19C0309E4((_QWORD *)(v63 + 256), *(_QWORD *)(v420 + 256), *(_QWORD *)(v420 + 264), (uint64_t)(*(_QWORD *)(v420 + 264) - *(_QWORD *)(v420 + 256)) >> 5);
                    *(_QWORD *)(v63 + 280) = 0;
                    *(_QWORD *)(v63 + 288) = 0;
                    *(_QWORD *)(v63 + 296) = 0;
                    sub_19C0309E4((_QWORD *)(v63 + 280), *(_QWORD *)(v420 + 280), *(_QWORD *)(v420 + 288), (uint64_t)(*(_QWORD *)(v420 + 288) - *(_QWORD *)(v420 + 280)) >> 5);
                    *(_BYTE *)(v63 + 304) = 0;
                    v71 = *(_QWORD *)(v420 + 320);
                    *(_QWORD *)(v63 + 312) = *(_QWORD *)(v420 + 312);
                    *(_QWORD *)(v63 + 320) = v71;
                    if (v71)
                    {
                      v72 = (unint64_t *)(v71 + 8);
                      do
                        v73 = __ldxr(v72);
                      while (__stxr(v73 + 1, v72));
                    }
                    *(_QWORD *)(v63 + 328) = *(_QWORD *)(v420 + 328);
                    *(_DWORD *)(v63 + 336) = 0;
                    v74 = (unsigned int *)(v417 + 3);
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 + 1, v74));
                    if (v75 <= 0)
                      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
                    v76 = *(_QWORD *)(a1 + 280);
                    if (v76)
                    {
                      v77 = (unsigned int *)(v76 + 24);
                      do
                        v78 = __ldaxr(v77);
                      while (__stlxr(v78 + 1, v77));
                      if (v78 <= 0)
                        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
                    }
                    v79 = (unsigned int *)(v417 + 3);
                    do
                      v80 = __ldaxr(v79);
                    while (__stlxr(v80 + 1, v79));
                    if (v80 < 1)
                      goto LABEL_773;
                    v81 = *(_QWORD *)(v63 + 232);
                    *(_QWORD *)(v63 + 232) = v417;
                    v82 = v417;
                    if (v81)
                    {
                      sub_19BFBF44C((unsigned int *)(v81 + 24));
                      v82 = *(uint64_t **)(v63 + 232);
                    }
                    if (v82)
                    {
                      do
                        v83 = __ldaxr(v64);
                      while (__stlxr(v83 + 1, v64));
                      if (v83 >= 1)
                      {
                        v84 = v82[2];
                        v85 = (uint64_t *)v82[1];
                        if ((unint64_t)v85 >= v84)
                        {
                          v87 = ((uint64_t)v85 - *v82) >> 3;
                          if ((unint64_t)(v87 + 1) >> 61)
                            sub_19BF8EB40();
                          v88 = v84 - *v82;
                          v89 = v88 >> 2;
                          if (v88 >> 2 <= (unint64_t)(v87 + 1))
                            v89 = v87 + 1;
                          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
                            v90 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v90 = v89;
                          v433 = v82 + 2;
                          if (v90)
                            v90 = (unint64_t)sub_19BFAC524(v90);
                          else
                            v91 = 0;
                          v94 = (uint64_t *)(v90 + 8 * v87);
                          *(_QWORD *)buf = v90;
                          *(_QWORD *)&buf[8] = v94;
                          *(_QWORD *)&buf[24] = v90 + 8 * v91;
                          *v94 = v63;
                          *(_QWORD *)&buf[16] = v94 + 1;
                          sub_19C0327F0(v82, buf);
                          v86 = (_QWORD *)v82[1];
                          sub_19C0328F4((uint64_t)buf);
                        }
                        else
                        {
                          *v85 = v63;
                          v86 = v85 + 1;
                          v82[1] = (uint64_t)v86;
                        }
                        v82[1] = (uint64_t)v86;
                        v36 = v418;
                        goto LABEL_165;
                      }
LABEL_773:
                      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
                    }
LABEL_165:
                    if (v76)
                    {
                      v95 = (unsigned int *)(v76 + 24);
                      do
                        v96 = __ldaxr(v95);
                      while (__stlxr(v96 + 1, v95));
                      if (v96 < 1)
                        goto LABEL_773;
                    }
                    v97 = *(_QWORD *)(v63 + 240);
                    *(_QWORD *)(v63 + 240) = v76;
                    v98 = (uint64_t *)v76;
                    if (v97)
                    {
                      sub_19BFBF44C((unsigned int *)(v97 + 24));
                      v98 = *(uint64_t **)(v63 + 240);
                    }
                    if (v98)
                    {
                      do
                        v99 = __ldaxr(v64);
                      while (__stlxr(v99 + 1, v64));
                      if (v99 <= 0)
                        goto LABEL_773;
                      v100 = v98[2];
                      v101 = (uint64_t *)v98[1];
                      if ((unint64_t)v101 >= v100)
                      {
                        v103 = ((uint64_t)v101 - *v98) >> 3;
                        if ((unint64_t)(v103 + 1) >> 61)
                          sub_19BF8EB40();
                        v104 = v100 - *v98;
                        v105 = v104 >> 2;
                        if (v104 >> 2 <= (unint64_t)(v103 + 1))
                          v105 = v103 + 1;
                        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
                          v106 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v106 = v105;
                        v433 = v98 + 2;
                        if (v106)
                          v106 = (unint64_t)sub_19BFAC524(v106);
                        else
                          v107 = 0;
                        v108 = (uint64_t *)(v106 + 8 * v103);
                        *(_QWORD *)buf = v106;
                        *(_QWORD *)&buf[8] = v108;
                        *(_QWORD *)&buf[24] = v106 + 8 * v107;
                        *v108 = v63;
                        *(_QWORD *)&buf[16] = v108 + 1;
                        sub_19C0327F0(v98, buf);
                        v102 = (_QWORD *)v98[1];
                        sub_19C0328F4((uint64_t)buf);
                      }
                      else
                      {
                        *v101 = v63;
                        v102 = v101 + 1;
                        v98[1] = (uint64_t)v102;
                      }
                      v98[1] = (uint64_t)v102;
                      v36 = v418;
                    }
                    if (v76)
                      sub_19BFBF44C((unsigned int *)(v76 + 24));
                    sub_19BFBF44C((unsigned int *)v417 + 6);
                    v109 = *(unsigned __int16 *)(v63 + 136);
                    if (v109 <= 0xE)
                      v110 = (unsigned __int8 *)(v63 + 138);
                    else
                      v110 = *(unsigned __int8 **)(v63 + 144);
                    v419 = sub_19BFF79A0(v110, *(unsigned __int16 *)(v63 + 136));
                    v111 = *(_QWORD *)(a1 + 296);
                    if (v111)
                    {
                      v112 = (uint8x8_t)vcnt_s8((int8x8_t)v111);
                      v112.i16[0] = vaddlv_u8(v112);
                      v113 = v112.u32[0];
                      if (v112.u32[0] > 1uLL)
                      {
                        v114 = v419;
                        if (v111 <= v419)
                          v114 = v419 % v111;
                      }
                      else
                      {
                        v114 = ((_DWORD)v111 - 1) & v419;
                      }
                      v69 = v114;
                      v115 = *(unsigned __int16 ***)(*(_QWORD *)(a1 + 288) + 8 * v114);
                      if (v115)
                      {
                        for (k = *v115; k; k = *(unsigned __int16 **)k)
                        {
                          v117 = *((_QWORD *)k + 1);
                          if (v117 == v419)
                          {
                            if (sub_19BFED000(k + 8, v416))
                              goto LABEL_270;
                          }
                          else
                          {
                            if (v113 > 1)
                            {
                              if (v117 >= v111)
                                v117 %= v111;
                            }
                            else
                            {
                              v117 &= v111 - 1;
                            }
                            if (v117 != v69)
                              break;
                          }
                        }
                      }
                    }
                    v118 = (char *)operator new(0x28uLL);
                    *(_QWORD *)buf = v118;
                    *(_QWORD *)&buf[8] = a1 + 304;
                    buf[16] = 0;
                    v119 = v118 + 16;
                    *(_QWORD *)v118 = 0;
                    *((_QWORD *)v118 + 1) = v419;
                    if (v109 < 0xF)
                    {
                      *v119 = *(_OWORD *)v416;
                    }
                    else
                    {
                      *(_WORD *)v119 = v109;
                      v120 = (void *)operator new[]();
                      *((_QWORD *)v118 + 3) = v120;
                      memcpy(v120, *(const void **)(v63 + 144), *((unsigned __int16 *)v118 + 8));
                    }
                    *((_QWORD *)v118 + 4) = v417;
                    v121 = (unsigned int *)(v417 + 3);
                    do
                      v122 = __ldaxr(v121);
                    while (__stlxr(v122 + 1, v121));
                    if (v122 <= 0)
                      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
                    buf[16] = 1;
                    v123 = (float)(unint64_t)(*(_QWORD *)(a1 + 312) + 1);
                    v124 = *(float *)(a1 + 320);
                    if (!v111 || (float)(v124 * (float)v111) < v123)
                    {
                      v125 = (v111 & (v111 - 1)) != 0;
                      if (v111 < 3)
                        v125 = 1;
                      v126 = v125 | (2 * v111);
                      v127 = vcvtps_u32_f32(v123 / v124);
                      if (v126 <= v127)
                        prime = (int8x8_t)v127;
                      else
                        prime = (int8x8_t)v126;
                      if (*(_QWORD *)&prime == 1)
                      {
                        prime = (int8x8_t)2;
                      }
                      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                      {
                        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                      }
                      v111 = *(_QWORD *)(a1 + 296);
                      if (*(_QWORD *)&prime <= v111)
                      {
                        if (*(_QWORD *)&prime >= v111)
                          goto LABEL_255;
                        v135 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 312) / *(float *)(a1 + 320));
                        if (v111 < 3
                          || (v136 = (uint8x8_t)vcnt_s8((int8x8_t)v111),
                              v136.i16[0] = vaddlv_u8(v136),
                              v136.u32[0] > 1uLL))
                        {
                          v135 = std::__next_prime(v135);
                        }
                        else
                        {
                          v137 = 1 << -(char)__clz(v135 - 1);
                          if (v135 >= 2)
                            v135 = v137;
                        }
                        if (*(_QWORD *)&prime <= v135)
                          prime = (int8x8_t)v135;
                        if (*(_QWORD *)&prime >= v111)
                        {
                          v111 = *(_QWORD *)(a1 + 296);
                          goto LABEL_255;
                        }
                        if (prime)
                          goto LABEL_226;
                        v154 = *(void **)(a1 + 288);
                        *(_QWORD *)(a1 + 288) = 0;
                        v69 = v419;
                        if (v154)
                          operator delete(v154);
                        v111 = 0;
                        *(_QWORD *)(a1 + 296) = 0;
                      }
                      else
                      {
LABEL_226:
                        if (*(_QWORD *)&prime >> 61)
                          sub_19BF8E6D0();
                        v129 = operator new(8 * *(_QWORD *)&prime);
                        v130 = *(void **)(a1 + 288);
                        *(_QWORD *)(a1 + 288) = v129;
                        if (v130)
                          operator delete(v130);
                        v131 = 0;
                        *(int8x8_t *)(a1 + 296) = prime;
                        do
                          *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v131++) = 0;
                        while (*(_QWORD *)&prime != v131);
                        v132 = (_QWORD *)*v421;
                        if (*v421)
                        {
                          v133 = v132[1];
                          v134 = (uint8x8_t)vcnt_s8(prime);
                          v134.i16[0] = vaddlv_u8(v134);
                          if (v134.u32[0] > 1uLL)
                          {
                            if (v133 >= *(_QWORD *)&prime)
                              v133 %= *(_QWORD *)&prime;
                          }
                          else
                          {
                            v133 &= *(_QWORD *)&prime - 1;
                          }
                          *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v133) = v421;
                          v138 = (_QWORD *)*v132;
                          if (*v132)
                          {
                            do
                            {
                              v139 = v138[1];
                              if (v134.u32[0] > 1uLL)
                              {
                                if (v139 >= *(_QWORD *)&prime)
                                  v139 %= *(_QWORD *)&prime;
                              }
                              else
                              {
                                v139 &= *(_QWORD *)&prime - 1;
                              }
                              if (v139 != v133)
                              {
                                v140 = *(_QWORD *)(a1 + 288);
                                if (!*(_QWORD *)(v140 + 8 * v139))
                                {
                                  *(_QWORD *)(v140 + 8 * v139) = v132;
                                  goto LABEL_251;
                                }
                                *v132 = *v138;
                                *v138 = **(_QWORD **)(*(_QWORD *)(a1 + 288) + 8 * v139);
                                **(_QWORD **)(*(_QWORD *)(a1 + 288) + 8 * v139) = v138;
                                v138 = v132;
                              }
                              v139 = v133;
LABEL_251:
                              v132 = v138;
                              v138 = (_QWORD *)*v138;
                              v133 = v139;
                            }
                            while (v138);
                          }
                        }
                        v111 = (unint64_t)prime;
LABEL_255:
                        v69 = v419;
                      }
                      if ((v111 & (v111 - 1)) != 0)
                      {
                        if (v111 <= v69)
                          v69 %= v111;
                      }
                      else
                      {
                        v69 = ((_DWORD)v111 - 1) & v69;
                      }
                    }
                    v141 = *(_QWORD **)(*(_QWORD *)(a1 + 288) + 8 * v69);
                    v142 = *(_QWORD *)buf;
                    if (v141)
                    {
                      **(_QWORD **)buf = *v141;
                      goto LABEL_268;
                    }
                    **(_QWORD **)buf = *(_QWORD *)(a1 + 304);
                    *(_QWORD *)(a1 + 304) = v142;
                    *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v69) = v421;
                    if (*(_QWORD *)v142)
                    {
                      v143 = *(_QWORD *)(*(_QWORD *)v142 + 8);
                      if ((v111 & (v111 - 1)) != 0)
                      {
                        if (v143 >= v111)
                          v143 %= v111;
                      }
                      else
                      {
                        v143 &= v111 - 1;
                      }
                      v141 = (_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v143);
LABEL_268:
                      *v141 = v142;
                    }
                    *(_QWORD *)buf = 0;
                    ++*(_QWORD *)(a1 + 312);
                    sub_19BFE7EDC((uint64_t)buf);
LABEL_270:
                    v144 = (unsigned int *)v417;
                    if (v417[1] - *v417 == 16)
                      ++*(_DWORD *)(a1 + 1884);
                    sub_19BFBF614((unsigned int *)(v63 + 84));
                    v50 = 1;
                    v13 = (uint64_t)byte_1EE417890;
                    v12 = (unint64_t)byte_1EE414EA8;
                    goto LABEL_273;
                  }
                }
                else
                {
                  if (v57 > 1)
                  {
                    if (v61 >= v54)
                      v61 %= v54;
                  }
                  else
                  {
                    v61 &= v54 - 1;
                  }
                  if (v61 != v58)
                    goto LABEL_122;
                }
                v60 = *(unsigned __int16 **)v60;
                if (!v60)
                  goto LABEL_122;
                continue;
              }
            }
            v47 = atomic_load(byte_1EE414EA8);
            if ((v47 & 1) != 0)
            {
              v48 = atomic_load(byte_1EE417890);
              if ((v48 & 1) != 0)
              {
                v92 = *(const char **)(v420 + 112);
                if (!v92)
                  v92 = (const char *)(v420 + 120);
                printf("WARNING: Excluding word with null sortkey: %s", v92);
                putchar(10);
              }
              else
              {
                v49 = sub_19BFD3F34();
                v50 = 0;
                if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_274;
                v51 = *(_QWORD *)(v420 + 112);
                if (!v51)
                  v51 = v420 + 120;
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = v51;
                _os_log_impl(&dword_19BF85000, v49, OS_LOG_TYPE_DEFAULT, "WARNING: Excluding word with null sortkey: %s", buf, 0xCu);
              }
            }
            v50 = 0;
LABEL_274:
            ++v422;
            sub_19BFBF614((unsigned int *)(v420 + 84));
            v11 = v36 + (v50 ^ 1);
          }
        }
        else
        {
          if (*(_QWORD *)&buf[8] && buf[6] == 1)
            free(*(void **)&buf[8]);
          if (v435 && BYTE6(v434) == 1)
            free(v435);
        }
      }
      if (*((_QWORD *)&v429 + 1) && BYTE6(v429) == 1)
        free(*((void **)&v429 + 1));
    }
  }
  v159 = atomic_load(byte_1EE414EA8);
  if ((v159 & 1) != 0)
  {
    v160 = atomic_load(byte_1EE417890);
    if ((v160 & 1) != 0)
    {
      printf("    Read %d unigrams.  Registered %lu words.", v422, (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 8) - **(_QWORD **)(a1 + 280)) >> 3);
      putchar(10);
    }
    else
    {
      v161 = sub_19BFD3F34();
      if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
      {
        v162 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 8) - **(_QWORD **)(a1 + 280)) >> 3;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v422;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = v162;
        _os_log_impl(&dword_19BF85000, v161, OS_LOG_TYPE_DEFAULT, "    Read %d unigrams.  Registered %lu words.", buf, 0x12u);
      }
    }
  }
  if (*(_DWORD *)(a1 + 1880))
  {
    v163 = atomic_load(byte_1EE414EA8);
    if ((v163 & 1) != 0)
    {
      v164 = atomic_load(byte_1EE417890);
      if ((v164 & 1) != 0)
      {
        printf("        Excluded %d 0-frequency neighbor-key macros.", *(_DWORD *)(a1 + 1880));
        putchar(10);
      }
      else
      {
        v165 = sub_19BFD3F34();
        if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
        {
          v166 = *(_DWORD *)(a1 + 1880);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v166;
          _os_log_impl(&dword_19BF85000, v165, OS_LOG_TYPE_DEFAULT, "        Excluded %d 0-frequency neighbor-key macros.", buf, 8u);
        }
      }
    }
  }
  v167 = atomic_load(byte_1EE414EA8);
  if ((v167 & 1) != 0)
  {
    v168 = atomic_load(byte_1EE417890);
    if ((v168 & 1) != 0)
    {
      printf("        Merged %d duplicate surface forms.  %d shared sort-key strings remain", v11, *(_DWORD *)(a1 + 1884));
      putchar(10);
    }
    else
    {
      v169 = sub_19BFD3F34();
      if (os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT))
      {
        v170 = *(_DWORD *)(a1 + 1884);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v11;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v170;
        _os_log_impl(&dword_19BF85000, v169, OS_LOG_TYPE_DEFAULT, "        Merged %d duplicate surface forms.  %d shared sort-key strings remain", buf, 0xEu);
      }
    }
  }
  sub_19BFE9ED8(v425);
  memset(buf, 0, sizeof(buf));
  LODWORD(v433) = 1065353216;
  v171 = *(uint64_t ***)(a1 + 280);
  v172 = *v171;
  v173 = v171[1];
  if (*v171 != v173)
  {
    do
    {
      v174 = *v172;
      v176 = *(unsigned __int16 **)(*v172 + 256);
      v175 = *(unsigned __int16 **)(*v172 + 264);
      if (v176 != v175)
      {
        do
        {
          sub_19BFE65F0((uint64_t)buf, v176, v176);
          v176 += 16;
        }
        while (v176 != v175);
        v174 = *v172;
      }
      v178 = *(unsigned __int16 **)(v174 + 280);
      v177 = *(unsigned __int16 **)(v174 + 288);
      while (v178 != v177)
      {
        sub_19BFE65F0((uint64_t)buf, v178, v178);
        v178 += 16;
      }
      ++v172;
    }
    while (v172 != v173);
    if (*(_QWORD *)&buf[24])
    {
      if (*(_QWORD *)&buf[24] >= 0xDuLL)
        __assert_rtn("convert_combining_classes_to_bits", "UnigramsCompiler.cpp", 357, "classes.size() <= Word::MaxCombiningClassCount");
      v179 = *(unsigned __int16 **)&buf[16];
      v435 = 0;
      v436 = 0;
      v434 = 0;
      if (*(_QWORD *)&buf[16])
      {
        v180 = -1;
        v181 = *(_QWORD **)&buf[16];
        do
        {
          v182 = v180;
          v181 = (_QWORD *)*v181;
          ++v180;
        }
        while (v181);
        *(_QWORD *)v426 = &v434;
        v426[8] = 0;
        if (v180 >= 0x7FFFFFFFFFFFFFFLL)
          sub_19BF8EB40();
        v183 = (unsigned __int16 *)sub_19BFD1894(v182 + 2);
        v12 = 0;
        v434 = v183;
        v435 = v183;
        v436 = (char *)&v183[16 * v184];
        do
        {
          sub_19BF86B60((uint64_t)v183 + v12, v179 + 8);
          v179 = *(unsigned __int16 **)v179;
          v12 += 32;
        }
        while (v179);
        v185 = (unint64_t)v183 + v12;
        v186 = v434;
        v435 = (unsigned __int16 *)((char *)v183 + v12);
      }
      else
      {
        v185 = 0;
        v186 = 0;
      }
      v187 = 126 - 2 * __clz((uint64_t)(v185 - (_QWORD)v186) >> 5);
      if ((unsigned __int16 *)v185 == v186)
        v188 = 0;
      else
        v188 = v187;
      sub_19BFE6860(v186, v185, v188, 1);
      v429 = 0u;
      v430 = 0u;
      v431 = 1.0;
      v190 = v434;
      v189 = v435;
      if (v435 != v434)
      {
        LODWORD(v191) = 0;
        v192 = 0;
        do
        {
          v193 = &v190[16 * v192];
          if (*((_QWORD *)v193 + 1))
            v194 = (unsigned __int8 *)*((_QWORD *)v193 + 1);
          else
            v194 = (unsigned __int8 *)(v193 + 8);
          v195 = sub_19BFF79A0(v194, *v193);
          v196 = v195;
          v197 = *((_QWORD *)&v429 + 1);
          if (*((_QWORD *)&v429 + 1))
          {
            v198 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v429 + 8));
            v198.i16[0] = vaddlv_u8(v198);
            v199 = v198.u32[0];
            if (v198.u32[0] > 1uLL)
            {
              v12 = v195;
              if (*((_QWORD *)&v429 + 1) <= (unint64_t)v195)
                v12 = (unint64_t)v195 % *((_QWORD *)&v429 + 1);
            }
            else
            {
              v12 = (DWORD2(v429) - 1) & v195;
            }
            v200 = *(unsigned __int16 ***)(v429 + 8 * v12);
            if (v200)
            {
              for (m = *v200; m; m = *(unsigned __int16 **)m)
              {
                v202 = *((_QWORD *)m + 1);
                if (v202 == v196)
                {
                  if (m + 8 == v193 || sub_19BFF7920(m + 8, v193))
                    goto LABEL_397;
                }
                else
                {
                  if (v199 > 1)
                  {
                    if (v202 >= v197)
                      v202 %= v197;
                  }
                  else
                  {
                    v202 &= v197 - 1;
                  }
                  if (v202 != v12)
                    break;
                }
              }
            }
          }
          v203 = operator new(0x38uLL);
          *(_QWORD *)v426 = v203;
          *(_QWORD *)&v426[8] = &v430;
          v426[16] = 0;
          *v203 = 0;
          v203[1] = v196;
          sub_19BF86B60((uint64_t)(v203 + 2), v193);
          *((_DWORD *)v203 + 12) = v191;
          v426[16] = 1;
          v204 = (float)(unint64_t)(*((_QWORD *)&v430 + 1) + 1);
          if (!v197 || (float)(v431 * (float)v197) < v204)
          {
            v205 = (v197 & (v197 - 1)) != 0;
            if (v197 < 3)
              v205 = 1;
            v206 = v205 | (2 * v197);
            v207 = vcvtps_u32_f32(v204 / v431);
            if (v206 <= v207)
              v208 = v207;
            else
              v208 = v206;
            sub_19BFD1648((uint64_t)&v429, v208);
            v197 = *((_QWORD *)&v429 + 1);
            if ((v197 & (v197 - 1)) != 0)
            {
              if (*((_QWORD *)&v429 + 1) <= v196)
                v12 = v196 % *((_QWORD *)&v429 + 1);
              else
                v12 = v196;
            }
            else
            {
              v12 = (DWORD2(v429) - 1) & v196;
            }
          }
          v209 = *(_QWORD **)(v429 + 8 * v12);
          v210 = *(_QWORD *)v426;
          if (v209)
          {
            **(_QWORD **)v426 = *v209;
          }
          else
          {
            **(_QWORD **)v426 = v430;
            *(_QWORD *)&v430 = v210;
            *(_QWORD *)(v429 + 8 * v12) = &v430;
            if (!*(_QWORD *)v210)
              goto LABEL_396;
            v211 = *(_QWORD *)(*(_QWORD *)v210 + 8);
            if ((v197 & (v197 - 1)) != 0)
            {
              if (v211 >= v197)
                v211 %= v197;
            }
            else
            {
              v211 &= v197 - 1;
            }
            v209 = (_QWORD *)(v429 + 8 * v211);
          }
          *v209 = v210;
LABEL_396:
          *(_QWORD *)v426 = 0;
          ++*((_QWORD *)&v430 + 1);
          sub_19BFE7718((uint64_t *)v426);
          v190 = v434;
          v189 = v435;
LABEL_397:
          v191 = (v191 + 1);
          v192 = v191;
        }
        while (v191 < ((char *)v189 - (char *)v190) >> 5);
      }
      *(_QWORD *)v426 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v426[8] = 1174405120;
      *(_QWORD *)&v426[16] = sub_19BFE735C;
      v427 = (uint64_t)&unk_1E3D15D40;
      sub_19BFE73F0((uint64_t)v428, (uint64_t)&v429);
      v212 = *(uint64_t ***)(a1 + 280);
      v213 = *v212;
      v214 = v212[1];
      while (v213 != v214)
      {
        v215 = *v213;
        *(_DWORD *)(v215 + 56) = *(_DWORD *)(v215 + 56) & 0xFFFFF000 | (*(uint64_t (**)(uint8_t *, uint64_t))&v426[16])(v426, *v213 + 256) & 0xFFF;
        v216 = *v213;
        *(_DWORD *)(v216 + 56) = *(_DWORD *)(v216 + 56) & 0xFF000FFF | (((*(uint64_t (**)(uint8_t *, uint64_t))&v426[16])(v426, *v213 + 280) & 0xFFF) << 12);
        v217 = *v213;
        v218 = *(_QWORD *)(*v213 + 256);
        v219 = *(_QWORD *)(*v213 + 264);
        v220 = *v213;
        if (v219 != v218)
        {
          do
          {
            v221 = *(void **)(v219 - 24);
            if (v221 && *(_BYTE *)(v219 - 26) == 1)
              free(v221);
            v219 -= 32;
          }
          while (v219 != v218);
          v220 = *v213;
        }
        *(_QWORD *)(v217 + 264) = v218;
        v222 = *(_QWORD *)(v220 + 280);
        for (n = *(_QWORD *)(v220 + 288); n != v222; n -= 32)
        {
          v224 = *(void **)(n - 24);
          if (v224 && *(_BYTE *)(n - 26) == 1)
            free(v224);
        }
        *(_QWORD *)(v220 + 288) = v222;
        ++v213;
      }
      sub_19BFE76AC((uint64_t)v428);
      v225 = (void ***)sub_19BFE76AC((uint64_t)&v429);
      *(_QWORD *)&v429 = &v434;
      sub_19BFBF780(v225);
      v13 = (uint64_t)byte_1EE417890;
    }
  }
  sub_19BFE76AC((uint64_t)buf);
  v226 = *(_QWORD *)(a1 + 240);
  if ((v226 & 0xC00000) != 0)
  {
    v227 = atomic_load(byte_1EE414EA8);
    if ((v227 & 1) != 0)
    {
      v228 = atomic_load(byte_1EE417890);
      if ((v228 & 1) != 0)
      {
        printf("    Calculating emission cost per each head POS");
        putchar(10);
      }
      else
      {
        v229 = sub_19BFD3F34();
        if (os_log_type_enabled(v229, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v426 = 0;
          _os_log_impl(&dword_19BF85000, v229, OS_LOG_TYPE_DEFAULT, "    Calculating emission cost per each head POS", v426, 2u);
        }
      }
    }
    *(_QWORD *)&v426[8] = 0;
    *(_QWORD *)&v426[16] = 0;
    *(_QWORD *)v426 = &v426[8];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)buf = &buf[8];
    v233 = *(uint64_t **)(a1 + 280);
    v234 = *v233;
    v235 = v233[1];
    if (*v233 != v235)
    {
      do
      {
        if ((v226 & 0x400000) != 0)
        {
          v236 = *(unsigned __int16 *)(*(_QWORD *)v234 + 76);
          v237 = *(double *)(*(_QWORD *)v234 + 88);
          LODWORD(v429) = v236;
          v238 = sub_19BFE63F8((uint64_t **)v426, v236, &v429);
          *((double *)v238 + 5) = v237 + *((double *)v238 + 5);
        }
        if ((v226 & 0x800000) != 0)
        {
          v239 = *(double *)(*(_QWORD *)v234 + 88);
          LODWORD(v429) = HIWORD(*(_DWORD *)(*(_QWORD *)v234 + 76));
          v240 = sub_19BFE63F8((uint64_t **)buf, v429, &v429);
          *((double *)v240 + 5) = v239 + *((double *)v240 + 5);
        }
        v234 += 8;
      }
      while (v234 != v235);
      v241 = *(uint64_t ***)(a1 + 280);
      v242 = *v241;
      v243 = v241[1];
      if (*v241 != v243)
      {
        v13 = -32768;
        while (1)
        {
          v244 = *v242;
          v245 = *(_DWORD *)(*v242 + 76);
          if (((v226 & 0x400000) == 0 || (unsigned __int16)*(_DWORD *)(*v242 + 76))
            && ((v226 & 0x800000) == 0 || v245 >= 0x10000))
          {
            break;
          }
          LOWORD(v246) = 0x7FFF;
LABEL_453:
          *(_WORD *)(v244 + 80) = v246;
          if (++v242 == v243)
            goto LABEL_454;
        }
        if ((v226 & 0x400000) != 0)
        {
          LODWORD(v429) = (unsigned __int16)*(_DWORD *)(*v242 + 76);
          v247 = sub_19BFE63F8((uint64_t **)v426, (unsigned __int16)v245, &v429);
          v244 = *v242;
          v248 = llround((log(*(double *)(*v242 + 88) / *((double *)v247 + 5)) + -0.0001) * (double)-*(__int16 *)(a1 + 1976));
          if ((v226 & 0x800000) == 0)
          {
LABEL_448:
            if (v248 >= 0x7FFF)
              v246 = 0x7FFFLL;
            else
              v246 = v248;
            if (v246 <= -32768)
              LOWORD(v246) = 0x8000;
            goto LABEL_453;
          }
        }
        else
        {
          v248 = 0;
          if ((v226 & 0x800000) == 0)
            goto LABEL_448;
        }
        LODWORD(v429) = HIWORD(v245);
        v249 = sub_19BFE63F8((uint64_t **)buf, HIWORD(v245), &v429);
        v244 = *v242;
        v248 += llround((log(*(double *)(*v242 + 88) / *((double *)v249 + 5)) + -0.0001) * (double)-*(__int16 *)(a1 + 1976));
        if ((v226 & 0xC00000) == 0xC00000)
        {
          if (v248 >= 0)
            v250 = v248;
          else
            v250 = v248 + 1;
          v248 = v250 >> 1;
        }
        goto LABEL_448;
      }
    }
LABEL_454:
    sub_19BFE64C4(*(_QWORD **)&buf[8]);
    sub_19BFE64C4(*(_QWORD **)&v426[8]);
  }
  else
  {
    *(_QWORD *)&v426[8] = 0;
    *(_QWORD *)&v426[16] = 0;
    *(_QWORD *)v426 = &v426[8];
    v230 = atomic_load(byte_1EE414EA8);
    if ((v230 & 1) != 0)
    {
      v231 = atomic_load(byte_1EE417890);
      if ((v231 & 1) != 0)
      {
        printf("    Calculating emission cost per Head/Tail POS");
        putchar(10);
      }
      else
      {
        v232 = sub_19BFD3F34();
        if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19BF85000, v232, OS_LOG_TYPE_DEFAULT, "    Calculating emission cost per Head/Tail POS", buf, 2u);
        }
      }
    }
    v251 = *(uint64_t **)(a1 + 280);
    v252 = *v251;
    v253 = v251[1];
    if (*v251 != v253)
    {
      do
      {
        v254 = HIWORD(*(_DWORD *)(*(_QWORD *)v252 + 76));
        v255 = *(double *)(*(_QWORD *)v252 + 88);
        v256 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)v252 + 76);
        *(_DWORD *)buf = v256;
        *(_DWORD *)&buf[4] = v254;
        v257 = sub_19BFE64FC((uint64_t **)v426, v256, v254, (uint64_t **)buf);
        *((double *)v257 + 5) = v255 + *((double *)v257 + 5);
        v252 += 8;
      }
      while (v252 != v253);
      v258 = *(uint64_t ***)(a1 + 280);
      v259 = *v258;
      v260 = v258[1];
      if (*v258 != v260)
      {
        do
        {
          v261 = *v259;
          v262 = *(_DWORD *)(*v259 + 76);
          if (v262 < 0x10000 || (unsigned __int16)v262 == 0)
          {
            LOWORD(v264) = 0x7FFF;
          }
          else
          {
            *(_DWORD *)buf = (unsigned __int16)*(_DWORD *)(*v259 + 76);
            *(_DWORD *)&buf[4] = HIWORD(v262);
            v265 = sub_19BFE64FC((uint64_t **)v426, (unsigned __int16)v262, HIWORD(v262), (uint64_t **)buf);
            v261 = *v259;
            v266 = *(double *)(*v259 + 88);
            v264 = llround((log(v266 / *((double *)v265 + 5)) + -0.0001) * (double)-*(__int16 *)(a1 + 1976));
            if (v264 <= -32768)
              v264 = -32768;
            if (v264 >= 0x7FFF)
              LOWORD(v264) = 0x7FFF;
          }
          *(_WORD *)(v261 + 80) = v264;
          ++v259;
        }
        while (v259 != v260);
      }
    }
    sub_19BFE64C4(*(_QWORD **)&v426[8]);
  }
  v267 = **(_QWORD **)(a1 + 280);
  v268 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 8) - v267;
  if (v268)
  {
    v269 = 0;
    v270 = v268 >> 3;
    v271 = 0.0;
    v272 = 0.0;
    do
    {
      v273 = *(double *)(*(_QWORD *)(v267 + 8 * v269) + 88);
      if (v273 > 0.0)
      {
        v274 = v273 >= v271 && v271 > 0.0;
        if (!v274)
          v271 = *(double *)(*(_QWORD *)(v267 + 8 * v269) + 88);
        if (v273 > v272)
          v272 = *(double *)(*(_QWORD *)(v267 + 8 * v269) + 88);
      }
      ++v269;
    }
    while (v270 > v269);
    v275 = 0;
    v276 = 0.0;
    do
    {
      v277 = *(_QWORD *)(v267 + 8 * v275);
      v278 = *(double *)(v277 + 88);
      if ((v278 < v276 || v276 <= 0.0) && v278 > v271)
        v276 = *(double *)(v277 + 88);
      ++v275;
    }
    while (v270 > v275);
  }
  else
  {
    v271 = 0.0;
    v272 = 0.0;
    v276 = 0.0;
  }
  v281 = atomic_load(byte_1EE414EA8);
  if ((v281 & 1) != 0)
  {
    v282 = atomic_load(byte_1EE417890);
    if ((v282 & 1) != 0)
    {
      printf("    Frequency distribution:  Lowest=%lf, NextLowest=%lf, Highest=%lf", v271, v276, v272);
      putchar(10);
    }
    else
    {
      v283 = sub_19BFD3F34();
      if (os_log_type_enabled(v283, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v426 = 134218496;
        *(double *)&v426[4] = v271;
        *(_WORD *)&v426[12] = 2048;
        *(double *)&v426[14] = v276;
        *(_WORD *)&v426[22] = 2048;
        v427 = *(_QWORD *)&v272;
        _os_log_impl(&dword_19BF85000, v283, OS_LOG_TYPE_DEFAULT, "    Frequency distribution:  Lowest=%lf, NextLowest=%lf, Highest=%lf", v426, 0x20u);
      }
    }
  }
  if (v271 != 1.0 || v276 != 2.0)
  {
    v284 = 2.0;
    if (v276 > 2.0)
      v284 = 2.0 / v276 + 1.0;
    v285 = **(_QWORD **)(a1 + 280);
    v286 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 8);
    v287 = v286 - v285;
    if (v286 != v285)
    {
      v288 = 0;
      v289 = v287 >> 3;
      while (1)
      {
        v290 = *(_QWORD *)(v285 + 8 * v288);
        v291 = *(double *)(v290 + 88);
        if (v291 == v271)
          break;
        v292 = v284;
        if (v291 == v276)
          goto LABEL_511;
        if (v276 > 0.0)
        {
          v292 = v284 * v291 / v276;
LABEL_511:
          *(double *)(v290 + 88) = v292;
        }
LABEL_512:
        if (v289 <= ++v288)
          goto LABEL_513;
      }
      v292 = 1.0;
      if (v271 == 1.0)
        goto LABEL_512;
      goto LABEL_511;
    }
LABEL_513:
    if (v276 > 0.0)
      v272 = v272 * v284 / v276;
  }
  if (v272 > 65000.0)
  {
    v293 = log(v272);
    v294 = atomic_load(byte_1EE414EA8);
    v295 = 11.0821425 / v293;
    if ((v294 & 1) != 0)
    {
      v296 = atomic_load(byte_1EE417890);
      if ((v296 & 1) != 0)
      {
        printf("Squashing with root power %.3lf to achieve frequency target range %.0f to %.0f", 11.0821425 / v293, 1.0, 65000.0);
        putchar(10);
      }
      else
      {
        v297 = sub_19BFD3F34();
        if (os_log_type_enabled(v297, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v426 = 134218496;
          *(double *)&v426[4] = v295;
          *(_WORD *)&v426[12] = 2048;
          *(_QWORD *)&v426[14] = 0x3FF0000000000000;
          *(_WORD *)&v426[22] = 2048;
          v427 = 0x40EFBD0000000000;
          _os_log_impl(&dword_19BF85000, v297, OS_LOG_TYPE_DEFAULT, "Squashing with root power %.3lf to achieve frequency target range %.0f to %.0f", v426, 0x20u);
        }
      }
    }
    v298 = *(uint64_t **)(a1 + 280);
    v299 = *v298;
    v300 = v298[1] - *v298;
    if (v300)
    {
      v301 = 0;
      v302 = v300 >> 3;
      do
      {
        v303 = *(_QWORD *)(v299 + 8 * v301);
        *(long double *)(v303 + 88) = pow(*(long double *)(v303 + 88), v295);
        ++v301;
      }
      while (v302 > v301);
    }
  }
  sub_19BFE3D90(a1);
  v304 = *(uint64_t **)(a1 + 280);
  v306 = *v304;
  v305 = v304[1];
  if (*v304 == v305)
    goto LABEL_606;
  v307 = (void ****)(a1 + 1776);
  v308 = (void **)(a1 + 1792);
  v423 = v304[1];
  do
  {
    v309 = *(unsigned __int16 **)v306;
    if (*(_BYTE *)(*(_QWORD *)v306 + 304))
      goto LABEL_605;
    if (*(_QWORD *)(a1 + 1840))
      __assert_rtn("train", "TIHuffmanCoder.cpp", 73, "!is_compiled()");
    v310 = (unsigned __int16 *)*((_QWORD *)v309 + 1);
    if (!v310)
      v310 = v309 + 8;
    *(_QWORD *)v426 = v310;
    *(_DWORD *)&v426[8] = 0;
    *(_DWORD *)&v426[12] = *v309;
    *(_DWORD *)&v426[16] = 0;
    sub_19BF8BB80((uint64_t *)v426);
    v311 = *v309;
    v312 = (unsigned __int16 *)*((_QWORD *)v309 + 1);
    if (!v312)
      v312 = v309 + 8;
    *(_QWORD *)buf = v312;
    *(_DWORD *)&buf[8] = v311;
    *(_DWORD *)&buf[12] = v311;
    *(_DWORD *)&buf[16] = 0;
    sub_19BF8BB80((uint64_t *)buf);
    v313 = *(_QWORD *)v426;
    if (*(_QWORD *)v426 != *(_QWORD *)buf)
LABEL_767:
      __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
    v314 = *(_DWORD *)&buf[8];
    while (*(_DWORD *)&v426[8] != v314)
    {
      v315 = *(unsigned int *)&v426[16];
      v316 = *(_QWORD *)(a1 + 1784);
      if (v316)
      {
        v317 = (uint8x8_t)vcnt_s8((int8x8_t)v316);
        v317.i16[0] = vaddlv_u8(v317);
        if (v317.u32[0] > 1uLL)
        {
          v13 = *(unsigned int *)&v426[16];
          if (v316 <= *(unsigned int *)&v426[16])
            v13 = *(unsigned int *)&v426[16] % v316;
        }
        else
        {
          v13 = (v316 - 1) & *(_DWORD *)&v426[16];
        }
        v318 = (*v307)[v13];
        if (v318)
        {
          v319 = *v318;
          if (*v318)
          {
            do
            {
              v320 = v319[1];
              if (v320 == *(unsigned int *)&v426[16])
              {
                if (*((_DWORD *)v319 + 4) == *(_DWORD *)&v426[16])
                  goto LABEL_572;
              }
              else
              {
                if (v317.u32[0] > 1uLL)
                {
                  if (v320 >= v316)
                    v320 %= v316;
                }
                else
                {
                  v320 &= v316 - 1;
                }
                if (v320 != v13)
                  break;
              }
              v319 = (_QWORD *)*v319;
            }
            while (v319);
          }
        }
      }
      v319 = operator new(0x18uLL);
      *v319 = 0;
      v319[1] = v315;
      v321 = (float)(unint64_t)(*(_QWORD *)(a1 + 1800) + 1);
      *((_DWORD *)v319 + 4) = v315;
      *((_DWORD *)v319 + 5) = 0;
      v322 = *(float *)(a1 + 1808);
      if ((((float)(v322 * (float)v316) >= v321) & ~(v316 == 0)) == 0)
      {
        v323 = (v316 & (v316 - 1)) != 0;
        if (v316 < 3)
          v323 = 1;
        v324 = v323 | (2 * v316);
        v325 = vcvtps_u32_f32(v321 / v322);
        if (v324 <= v325)
          v326 = v325;
        else
          v326 = v324;
        sub_19BFD1648((uint64_t)v307, v326);
        v316 = *(_QWORD *)(a1 + 1784);
        if ((v316 & (v316 - 1)) != 0)
        {
          if (v316 <= v315)
            v13 = v315 % v316;
          else
            v13 = v315;
        }
        else
        {
          v13 = ((_DWORD)v316 - 1) & v315;
        }
      }
      v327 = *v307;
      v328 = (void ***)(*v307)[v13];
      if (v328)
      {
        *v319 = *v328;
      }
      else
      {
        *v319 = *v308;
        *v308 = v319;
        v327[v13] = v308;
        if (!*v319)
          goto LABEL_571;
        v329 = *(_QWORD *)(*v319 + 8);
        if ((v316 & (v316 - 1)) != 0)
        {
          if (v329 >= v316)
            v329 %= v316;
        }
        else
        {
          v329 &= v316 - 1;
        }
        v328 = &(*v307)[v329];
      }
      *v328 = (void **)v319;
LABEL_571:
      ++*(_QWORD *)(a1 + 1800);
LABEL_572:
      ++*((_DWORD *)v319 + 5);
      sub_19BF8BB80((uint64_t *)v426);
      if (*(_QWORD *)v426 != v313)
        goto LABEL_767;
    }
    v330 = *(_QWORD *)(a1 + 1784);
    if (v330)
    {
      v331 = **v307;
      if (v331)
      {
        v332 = *v331;
        if (*v331)
        {
          v333 = (uint8x8_t)vcnt_s8((int8x8_t)v330);
          v333.i16[0] = vaddlv_u8(v333);
          do
          {
            v334 = v332[1];
            if (v334)
            {
              if (v333.u32[0] > 1uLL)
              {
                if (v334 < v330 || v334 % v330)
                  break;
              }
              else if ((v334 & (v330 - 1)) != 0)
              {
                break;
              }
            }
            else if (!*((_DWORD *)v332 + 4))
            {
              v344 = a1;
              goto LABEL_604;
            }
            v332 = (_QWORD *)*v332;
          }
          while (v332);
        }
      }
    }
    v332 = operator new(0x18uLL);
    *v332 = 0;
    v332[1] = 0;
    v335 = (float)(unint64_t)(*(_QWORD *)(a1 + 1800) + 1);
    v332[2] = 0;
    v336 = *(float *)(a1 + 1808);
    if ((((float)(v336 * (float)v330) >= v335) & ~(v330 == 0)) == 0)
    {
      v337 = (v330 & (v330 - 1)) != 0;
      if (v330 < 3)
        v337 = 1;
      v338 = v337 | (2 * v330);
      v339 = vcvtps_u32_f32(v335 / v336);
      if (v338 <= v339)
        v340 = v339;
      else
        v340 = v338;
      sub_19BFD1648((uint64_t)v307, v340);
      v330 = *(_QWORD *)(a1 + 1784);
    }
    v341 = *v307;
    v342 = **v307;
    if (v342)
    {
      *v332 = *v342;
      goto LABEL_602;
    }
    *v332 = *v308;
    *v308 = v332;
    *v341 = v308;
    if (*v332)
    {
      v343 = *(_QWORD *)(*v332 + 8);
      if ((v330 & (v330 - 1)) != 0)
      {
        if (v343 >= v330)
          v343 %= v330;
      }
      else
      {
        v343 &= v330 - 1;
      }
      v342 = (void **)&(*v307)[v343];
LABEL_602:
      *v342 = v332;
    }
    v344 = a1;
    ++*(_QWORD *)(a1 + 1800);
LABEL_604:
    ++*((_DWORD *)v332 + 5);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v344 + 264) + 16))(*(_QWORD *)(v344 + 264), *(unsigned int *)(*(_QWORD *)v306 + 36));
    v305 = v423;
LABEL_605:
    v306 += 8;
  }
  while (v306 != v305);
LABEL_606:
  if (*(_QWORD *)(a1 + 1840))
    __assert_rtn("compile", "TIHuffmanCoder.cpp", 128, "!is_compiled()");
  if (*(_QWORD *)(a1 + 1800) <= 1uLL)
    __assert_rtn("compile", "TIHuffmanCoder.cpp", 129, "m_freq_table.size() >= 2");
  memset(buf, 0, 24);
  v345 = *(uint64_t **)(a1 + 1792);
  if (v345)
  {
    do
    {
      v346 = *((_DWORD *)v345 + 4);
      v347 = *((_DWORD *)v345 + 5);
      v306 = *(_QWORD *)&buf[8];
      if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
      {
        v306 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 5;
        if ((unint64_t)(v306 + 1) >> 59)
          sub_19BF8EB40();
        v349 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 4;
        if (v349 <= v306 + 1)
          v349 = v306 + 1;
        if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFE0uLL)
          v350 = 0x7FFFFFFFFFFFFFFLL;
        else
          v350 = v349;
        v428[0] = &buf[16];
        if (v350)
          v350 = (unint64_t)sub_19BFD1894(v350);
        else
          v351 = 0;
        *(_QWORD *)v426 = v350;
        *(_QWORD *)&v426[8] = v350 + 32 * v306;
        *(_QWORD *)&v426[16] = *(_QWORD *)&v426[8];
        v427 = v350 + 32 * v351;
        sub_19BFD1840(*(uint64_t *)&v426[8], v346, v347);
        *(_QWORD *)&v426[16] += 32;
        sub_19BFD18C8((uint64_t *)buf, v426);
        v348 = *(_QWORD *)&buf[8];
        sub_19BFD195C((uint64_t)v426);
      }
      else
      {
        sub_19BFD1840(*(uint64_t *)&buf[8], *((_DWORD *)v345 + 4), *((_DWORD *)v345 + 5));
        v348 = v306 + 32;
      }
      *(_QWORD *)&buf[8] = v348;
      sub_19BFD19BC(*(uint64_t *)buf, v348, (v348 - *(_QWORD *)buf) >> 5);
      v345 = (uint64_t *)*v345;
    }
    while (v345);
    v353 = *(_QWORD *)buf;
    v352 = *(_QWORD *)&buf[8];
  }
  else
  {
    v353 = 0;
    v352 = 0;
  }
  v354 = v352 - v353;
  if ((unint64_t)(v352 - v353) >= 0x21)
  {
    v306 = (uint64_t)&buf[16];
    do
    {
      v429 = 0uLL;
      *(_QWORD *)&v430 = 0;
      sub_19BFD1AA4((char *)&v429, *(uint64_t **)v353, *(uint64_t **)(v353 + 8), (uint64_t)(*(_QWORD *)(v353 + 8) - *(_QWORD *)v353) >> 3);
      DWORD2(v430) = *(_DWORD *)(v353 + 24);
      sub_19BFD1B14(*(uint64_t *)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 5);
      v356 = *(_QWORD *)&buf[8] - 32;
      v355 = *(void **)(*(_QWORD *)&buf[8] - 32);
      if (v355)
      {
        *(_QWORD *)(*(_QWORD *)&buf[8] - 24) = v355;
        operator delete(v355);
      }
      *(_QWORD *)&buf[8] = v356;
      v357 = *(_QWORD *)buf;
      v435 = 0;
      v436 = 0;
      v434 = 0;
      sub_19BFD1AA4((char *)&v434, **(uint64_t ***)buf, *(uint64_t **)(*(_QWORD *)buf + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)buf + 8) - **(_QWORD **)buf) >> 3);
      v437 = *(_DWORD *)(v357 + 24);
      sub_19BFD1B14(*(uint64_t *)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 5);
      v358 = *(_QWORD *)&buf[8];
      v360 = (char **)(*(_QWORD *)&buf[8] - 32);
      v359 = *(void **)(*(_QWORD *)&buf[8] - 32);
      if (v359)
      {
        *(_QWORD *)(*(_QWORD *)&buf[8] - 24) = v359;
        operator delete(v359);
      }
      *(_QWORD *)&buf[8] = v360;
      if ((unint64_t)v360 >= *(_QWORD *)&buf[16])
      {
        v361 = ((uint64_t)v360 - *(_QWORD *)buf) >> 5;
        if ((unint64_t)(v361 + 1) >> 59)
          sub_19BF8EB40();
        v362 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 4;
        if (v362 <= v361 + 1)
          v362 = v361 + 1;
        if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFE0uLL)
          v363 = 0x7FFFFFFFFFFFFFFLL;
        else
          v363 = v362;
        v428[0] = &buf[16];
        if (v363)
          v363 = (unint64_t)sub_19BFD1894(v363);
        else
          v364 = 0;
        *(_QWORD *)v426 = v363;
        *(_QWORD *)&v426[8] = v363 + 32 * v361;
        *(_QWORD *)&v426[16] = *(_QWORD *)&v426[8];
        v427 = v363 + 32 * v364;
        sub_19BFD2E04(*(char ***)&v426[8], (uint64_t)&v429, (uint64_t)&v434);
        *(_QWORD *)&v426[16] += 32;
        sub_19BFD18C8((uint64_t *)buf, v426);
        v358 = *(_QWORD *)&buf[8];
        sub_19BFD195C((uint64_t)v426);
      }
      else
      {
        sub_19BFD2E04(v360, (uint64_t)&v429, (uint64_t)&v434);
      }
      *(_QWORD *)&buf[8] = v358;
      sub_19BFD19BC(*(uint64_t *)buf, v358, (v358 - *(_QWORD *)buf) >> 5);
      if (v434)
        operator delete(v434);
      if ((_QWORD)v429)
      {
        *((_QWORD *)&v429 + 1) = v429;
        operator delete((void *)v429);
      }
      v353 = *(_QWORD *)buf;
      v352 = *(_QWORD *)&buf[8];
      v354 = *(_QWORD *)&buf[8] - *(_QWORD *)buf;
    }
    while (*(_QWORD *)&buf[8] - *(_QWORD *)buf > 0x20uLL);
  }
  if (v354 != 32)
    __assert_rtn("compile", "TIHuffmanCoder.cpp", 145, "queue.size() == 1");
  if (a1 + 1856 != v353)
  {
    sub_19BFD1BF8((_QWORD *)(a1 + 1856), *(uint64_t **)v353, *(uint64_t **)(v353 + 8), (uint64_t)(*(_QWORD *)(v353 + 8) - *(_QWORD *)v353) >> 3);
    v353 = *(_QWORD *)buf;
    v352 = *(_QWORD *)&buf[8];
  }
  sub_19BFD1B14(v353, v352, (v352 - v353) >> 5);
  v366 = *(_QWORD *)&buf[8] - 32;
  v365 = *(void **)(*(_QWORD *)&buf[8] - 32);
  if (v365)
  {
    *(_QWORD *)(*(_QWORD *)&buf[8] - 24) = v365;
    operator delete(v365);
  }
  v367 = *(_QWORD *)(a1 + 1856);
  v368 = *(int **)(a1 + 1864);
  v369 = 126 - 2 * __clz(((uint64_t)v368 - v367) >> 3);
  *(_QWORD *)&buf[8] = v366;
  *(_QWORD *)v426 = &unk_1E3D10590;
  if (v368 == (int *)v367)
    v370 = 0;
  else
    v370 = v369;
  sub_19BFD1D2C(v367, v368, (uint64_t)v426, v370, 1);
  memset(v426, 0, sizeof(v426));
  v371 = *(unsigned int **)(a1 + 1856);
  v372 = *(unsigned int **)(a1 + 1864);
  if (v371 != v372)
  {
    v373 = 0;
    v374 = (_QWORD *)(a1 + 1832);
    while (1)
    {
      v376 = *v371;
      v375 = v371[1];
      while (v373 < v375)
      {
        LOBYTE(v429) = 0;
        sub_19BFD25BC((uint64_t)v426, &v429);
        v373 = *(_QWORD *)&v426[8];
      }
      v377 = *(_QWORD *)(a1 + 1824);
      if (v377)
      {
        v378 = (uint8x8_t)vcnt_s8((int8x8_t)v377);
        v378.i16[0] = vaddlv_u8(v378);
        if (v378.u32[0] > 1uLL)
        {
          v306 = v376;
          if (v377 <= v376)
            v306 = v376 % v377;
        }
        else
        {
          v306 = ((_DWORD)v377 - 1) & v376;
        }
        v379 = *(void ***)(*(_QWORD *)(a1 + 1816) + 8 * v306);
        if (v379)
        {
          v380 = (char *)*v379;
          if (*v379)
          {
            do
            {
              v381 = *((_QWORD *)v380 + 1);
              if (v381 == v376)
              {
                if (*((_DWORD *)v380 + 4) == (_DWORD)v376)
                  goto LABEL_732;
              }
              else
              {
                if (v378.u32[0] > 1uLL)
                {
                  if (v381 >= v377)
                    v381 %= v377;
                }
                else
                {
                  v381 &= v377 - 1;
                }
                if (v381 != v306)
                  break;
              }
              v380 = *(char **)v380;
            }
            while (v380);
          }
        }
      }
      v380 = (char *)operator new(0x30uLL);
      *(_QWORD *)v380 = 0;
      *((_QWORD *)v380 + 1) = v376;
      *((_DWORD *)v380 + 4) = v376;
      *((_QWORD *)v380 + 3) = 0;
      *((_QWORD *)v380 + 4) = 0;
      *((_QWORD *)v380 + 5) = 0;
      v382 = (float)(unint64_t)(*(_QWORD *)(a1 + 1840) + 1);
      v383 = *(float *)(a1 + 1848);
      if (v377 && (float)(v383 * (float)v377) >= v382)
      {
        v376 = v306;
        goto LABEL_722;
      }
      v384 = (v377 & (v377 - 1)) != 0;
      if (v377 < 3)
        v384 = 1;
      v385 = v384 | (2 * v377);
      v386 = vcvtps_u32_f32(v382 / v383);
      if (v385 <= v386)
        v387 = (int8x8_t)v386;
      else
        v387 = (int8x8_t)v385;
      if (*(_QWORD *)&v387 == 1)
      {
        v387 = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&v387 & (*(_QWORD *)&v387 - 1)) != 0)
      {
        v387 = (int8x8_t)std::__next_prime(*(_QWORD *)&v387);
        v377 = *(_QWORD *)(a1 + 1824);
      }
      if (*(_QWORD *)&v387 <= v377)
      {
        if (*(_QWORD *)&v387 >= v377)
          goto LABEL_718;
        v394 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1840) / *(float *)(a1 + 1848));
        if (v377 < 3 || (v395 = (uint8x8_t)vcnt_s8((int8x8_t)v377), v395.i16[0] = vaddlv_u8(v395), v395.u32[0] > 1uLL))
        {
          v394 = std::__next_prime(v394);
        }
        else
        {
          v396 = 1 << -(char)__clz(v394 - 1);
          if (v394 >= 2)
            v394 = v396;
        }
        if (*(_QWORD *)&v387 <= v394)
          v387 = (int8x8_t)v394;
        if (*(_QWORD *)&v387 >= v377)
        {
          v377 = *(_QWORD *)(a1 + 1824);
          goto LABEL_718;
        }
        if (!*(_QWORD *)&v387)
        {
          v404 = *(void **)(a1 + 1816);
          *(_QWORD *)(a1 + 1816) = 0;
          if (v404)
            operator delete(v404);
          v377 = 0;
          *(_QWORD *)(a1 + 1824) = 0;
          goto LABEL_718;
        }
      }
      if (*(_QWORD *)&v387 >> 61)
        sub_19BF8E6D0();
      v388 = operator new(8 * *(_QWORD *)&v387);
      v389 = *(void **)(a1 + 1816);
      *(_QWORD *)(a1 + 1816) = v388;
      if (v389)
        operator delete(v389);
      v390 = 0;
      *(int8x8_t *)(a1 + 1824) = v387;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 1816) + 8 * v390++) = 0;
      while (*(_QWORD *)&v387 != v390);
      v391 = (_QWORD *)*v374;
      if (*v374)
      {
        v392 = v391[1];
        v393 = (uint8x8_t)vcnt_s8(v387);
        v393.i16[0] = vaddlv_u8(v393);
        if (v393.u32[0] > 1uLL)
        {
          if (v392 >= *(_QWORD *)&v387)
            v392 %= *(_QWORD *)&v387;
        }
        else
        {
          v392 &= *(_QWORD *)&v387 - 1;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 1816) + 8 * v392) = v374;
        v397 = (_QWORD *)*v391;
        if (*v391)
        {
          do
          {
            v398 = v397[1];
            if (v393.u32[0] > 1uLL)
            {
              if (v398 >= *(_QWORD *)&v387)
                v398 %= *(_QWORD *)&v387;
            }
            else
            {
              v398 &= *(_QWORD *)&v387 - 1;
            }
            if (v398 != v392)
            {
              v399 = *(_QWORD *)(a1 + 1816);
              if (!*(_QWORD *)(v399 + 8 * v398))
              {
                *(_QWORD *)(v399 + 8 * v398) = v391;
                goto LABEL_714;
              }
              *v391 = *v397;
              *v397 = **(_QWORD **)(*(_QWORD *)(a1 + 1816) + 8 * v398);
              **(_QWORD **)(*(_QWORD *)(a1 + 1816) + 8 * v398) = v397;
              v397 = v391;
            }
            v398 = v392;
LABEL_714:
            v391 = v397;
            v397 = (_QWORD *)*v397;
            v392 = v398;
          }
          while (v397);
        }
      }
      v377 = (unint64_t)v387;
LABEL_718:
      if ((v377 & (v377 - 1)) != 0)
      {
        if (v377 <= v376)
          v376 %= v377;
      }
      else
      {
        v376 = ((_DWORD)v377 - 1) & v376;
      }
LABEL_722:
      v400 = *(_QWORD *)(a1 + 1816);
      v401 = *(_QWORD **)(v400 + 8 * v376);
      if (v401)
      {
        *(_QWORD *)v380 = *v401;
      }
      else
      {
        *(_QWORD *)v380 = *v374;
        *v374 = v380;
        *(_QWORD *)(v400 + 8 * v376) = v374;
        if (!*(_QWORD *)v380)
          goto LABEL_731;
        v402 = *(_QWORD *)(*(_QWORD *)v380 + 8);
        if ((v377 & (v377 - 1)) != 0)
        {
          if (v402 >= v377)
            v402 %= v377;
        }
        else
        {
          v402 &= v377 - 1;
        }
        v401 = (_QWORD *)(*(_QWORD *)(a1 + 1816) + 8 * v402);
      }
      *v401 = v380;
LABEL_731:
      ++*(_QWORD *)(a1 + 1840);
LABEL_732:
      if (v373)
      {
        v403 = (void **)(v380 + 24);
        if (v373 > *((_QWORD *)v380 + 5) << 6)
        {
          if (*v403)
          {
            operator delete(*v403);
            *v403 = 0;
            *((_QWORD *)v380 + 4) = 0;
            *((_QWORD *)v380 + 5) = 0;
          }
          sub_19BFD284C((_QWORD *)v380 + 3, v373);
          v373 = *(_QWORD *)&v426[8];
        }
        v306 = *(_QWORD *)v426;
        memmove(*v403, *(const void **)v426, (((v373 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v306 = *(_QWORD *)v426;
      }
      *((_QWORD *)v380 + 4) = v373;
      sub_19BFD278C(v306, v373);
      v371 += 2;
      if (v371 == v372)
      {
        v405 = (unint64_t *)v306;
        v406 = *(_QWORD *)&v426[8];
        if (*(_QWORD *)&v426[8] < 0x40uLL)
        {
LABEL_754:
          if (v406)
          {
            v407 = __clz(__rbit64(*v405 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v406)));
            if ((*v405 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v406)) != 0)
              LODWORD(v406) = v407;
          }
        }
        else
        {
          v405 = (unint64_t *)v306;
          v406 = *(_QWORD *)&v426[8];
          while (!*v405)
          {
            ++v405;
            v406 -= 64;
            if (v406 <= 0x3F)
              goto LABEL_754;
          }
          LODWORD(v406) = __clz(__rbit64(*v405));
        }
        if (v405 != (unint64_t *)(v306 + 8 * (*(_QWORD *)&v426[8] >> 6)) || (v426[8] & 0x3F) != (_DWORD)v406)
          __assert_rtn("compile", "TIHuffmanCoder.cpp", 169, "std::find(cur_word.begin(), cur_word.end(), true) == cur_word.end()");
        if (v306)
          operator delete((void *)v306);
        break;
      }
    }
  }
  *(_QWORD *)v426 = buf;
  sub_19BFD27D0((void ***)v426);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 264) + 32))(*(_QWORD *)(a1 + 264));
}

void sub_19BFDF630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  void *v45;
  BOOL v46;

  if (a14)
    sub_19BFBF44C((unsigned int *)(a14 + 24));
  sub_19BFBF614((unsigned int *)(a16 + 84));
  v45 = *(void **)(v43 - 248);
  if (v45)
    v46 = *(_BYTE *)(v43 - 250) == 1;
  else
    v46 = 0;
  if (v46)
    free(v45);
  sub_19BFE9ED8(&a25);
  _Unwind_Resume(a1);
}

void sub_19BFDFC94()
{
  uint64_t v0;
  unsigned __int8 v1;
  unsigned __int8 v2;
  NSObject *v3;
  _BYTE *v4;
  const char *v5;
  const char *v6;
  char *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  NSObject *v10;
  uint64_t v11;
  off_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  unsigned __int16 *v19;
  void **v20;
  char *v21;
  void **v22;
  _OWORD *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  char *v48;
  char *v49;
  _BYTE *v50;
  char v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned __int16 *v58;
  void **v59;
  char *v60;
  void **v61;
  _OWORD *v62;
  unint64_t v63;
  void *v64;
  void *v65;
  uint64_t *v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  double v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  double *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned __int16 *v90;
  void **v91;
  char *v92;
  void **v93;
  _OWORD *v94;
  unint64_t v95;
  void *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  double v101;
  uint64_t v102;
  double v103;
  void *v104;
  uint64_t *v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  int v111;
  int v112;
  BOOL v113;
  int v114;
  uint8_t *v115;
  uint64_t v116;
  void **v117;
  char *v118;
  char *v119;
  unint64_t v120;
  char *v121;
  char *v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  _QWORD *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  void **v151;
  void **v152;
  BOOL v153;
  __int128 *v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  __int128 *v160;
  __int128 *v161;
  uint64_t *v162;
  unsigned int v163;
  size_t v164;
  const void *v165;
  char *v166;
  uint64_t *v167;
  uint64_t **v168;
  uint64_t **v169;
  unsigned int v170;
  char *v171;
  off_t v172;
  void *v173;
  void **v174;
  void **v175;
  char *v176;
  char *v177;
  unint64_t v178;
  char *v179;
  char *v180;
  unint64_t v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  _QWORD *v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  void **v209;
  void **v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  size_t v216;
  _QWORD *exception;
  _QWORD *v218;
  _QWORD *v219;
  int v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  _QWORD v226[3];
  char v227;
  int v228;
  uint8_t versionArray[4];
  uint64_t **v230;
  uint64_t *v231;
  uint64_t v232;
  __int128 v233;
  char *v234;
  __int128 __p;
  char *v236;
  void *__dst[2];
  uint64_t v238;
  char v239[20];
  char versionString[20];
  _BYTE v241[8];
  void *v242;
  _BYTE v243[16];
  uint8_t buf[8];
  __int128 v245;
  _QWORD v246[4];
  uint64_t v247;
  int v248;
  BOOL v249;
  char v250;
  int v251;
  _QWORD v252[1613];

  v0 = MEMORY[0x1E0C80A78]();
  v252[1610] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)buf = 0x100000;
  *(_WORD *)&buf[4] = 0;
  buf[6] = 1;
  *(_QWORD *)&v245 = 0;
  sub_19BF8CA04(buf, (uint64_t)"idx", 0, 3u);
  sub_19BFDC12C((uint64_t)v241, v0, buf);
  if ((_QWORD)v245 && buf[6] == 1)
    free((void *)v245);
  *(_DWORD *)versionArray = 0;
  ucol_getVersion();
  u_versionToString(versionArray, versionString);
  ucol_getUCAVersion();
  u_versionToString(versionArray, v239);
  v1 = atomic_load(byte_1EE414EA8);
  if ((v1 & 1) != 0)
  {
    v2 = atomic_load(byte_1EE417890);
    if ((v2 & 1) != 0)
    {
      if (v242)
        v5 = (const char *)v242;
      else
        v5 = v243;
      printf("writing version %x.%x, collator v%s, UCA v%s, %s", 3, 21, versionString, v239, v5);
      putchar(10);
    }
    else
    {
      v3 = sub_19BFD3F34();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v4 = v242;
        if (!v242)
          v4 = v243;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = 3;
        LOWORD(v245) = 1024;
        *(_DWORD *)((char *)&v245 + 2) = 21;
        WORD3(v245) = 2080;
        *((_QWORD *)&v245 + 1) = versionString;
        LOWORD(v246[0]) = 2080;
        *(_QWORD *)((char *)v246 + 2) = v239;
        WORD1(v246[1]) = 2080;
        *(_QWORD *)((char *)&v246[1] + 4) = v4;
        _os_log_impl(&dword_19BF85000, v3, OS_LOG_TYPE_DEFAULT, "writing version %x.%x, collator v%s, UCA v%s, %s", buf, 0x2Cu);
      }
    }
  }
  v6 = v243;
  if (v242)
    v7 = (char *)v242;
  else
    v7 = v243;
  sub_19C034464(v226, v7);
  if (!v227)
  {
    sub_19BFA0144((uint64_t)buf);
    v215 = sub_19BF8E6F8((_QWORD *)&v245 + 1, (uint64_t)"invalid index file at ", 22);
    if (v242)
      v6 = (const char *)v242;
    v216 = strlen(v6);
    sub_19BF8E6F8(v215, (uint64_t)v6, v216);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19BFAAA88(__dst, (uint64_t)v246);
    sub_19BFD48D0(exception, (__int128 *)__dst);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
  }
  v8 = atomic_load(byte_1EE414EA8);
  if ((v8 & 1) != 0)
  {
    v9 = atomic_load(byte_1EE417890);
    if ((v9 & 1) != 0)
    {
      printf("\tAllocating trie slots: magic_number=%u, root_usage_sum=%f", 1, *(double *)(*(_QWORD *)(v0 + 272) + 40));
      putchar(10);
    }
    else
    {
      v10 = sub_19BFD3F34();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v0 + 272) + 40);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = 1;
        LOWORD(v245) = 2048;
        *(_QWORD *)((char *)&v245 + 2) = v11;
        _os_log_impl(&dword_19BF85000, v10, OS_LOG_TYPE_DEFAULT, "\tAllocating trie slots: magic_number=%u, root_usage_sum=%f", buf, 0x12u);
      }
    }
  }
  sub_19BFE2244(v0, (ssize_t)v226, 1);
  v12 = sub_19C03467C(v228);
  v13 = *(_QWORD *)(v0 + 240);
  v14 = (v13 & 0x100) != 0 && *(_DWORD *)(v0 + 1960) == 5;
  sub_19C035EAC(*(_QWORD **)(v0 + 272), v12, (v13 >> 12) & 1, v14);
  sub_19C035DD4(*(_QWORD *)(v0 + 272));
  if (sub_19C035EAC(*(_QWORD **)(v0 + 272), v12, (*(_QWORD *)(v0 + 240) >> 12) & 1, v14) >= 0x1000001)
  {
    sub_19BFA0144((uint64_t)buf);
    sub_19BF8E6F8((_QWORD *)&v245 + 1, (uint64_t)"Trie size=", 10);
    v218 = (_QWORD *)std::ostream::operator<<();
    sub_19BF8E6F8(v218, (uint64_t)" bytes exceeds trie addressing capacity=", 40);
    std::ostream::operator<<();
    v219 = __cxa_allocate_exception(0x20uLL);
    sub_19BFAAA88(__dst, (uint64_t)v246);
    sub_19BFD48D0(v219, (__int128 *)__dst);
    __cxa_throw(v219, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
  }
  v15 = *(uint64_t **)(v0 + 280);
  v223 = *(_QWORD *)(v0 + 248);
  if ((*(_QWORD *)(v0 + 240) & 0x800) != 0)
  {
    v221 = *(_DWORD *)(v0 + 1960);
    __dst[1] = 0;
    v238 = 0;
    __dst[0] = &__dst[1];
    v54 = *v15;
    v55 = v15[1];
    while (1)
    {
      if (v54 == v55)
      {
        if (*(_DWORD *)(v0 + 1768))
        {
          *(_QWORD *)buf = &off_1E3D11FA8;
          *(_QWORD *)&v245 = __dst;
          v246[0] = buf;
          sub_19BFF885C(v15, v223, (uint64_t)buf);
          v72 = (uint8_t *)v246[0];
          if ((uint8_t *)v246[0] == buf)
          {
            v73 = 4;
            v72 = buf;
LABEL_173:
            (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
          }
          else if (v246[0])
          {
            v73 = 5;
            goto LABEL_173;
          }
        }
        __p = 0uLL;
        v236 = 0;
        v117 = (void **)__dst[0];
        if (__dst[0] != &__dst[1])
        {
          v118 = 0;
          v119 = 0;
          v120 = 0;
          v121 = 0;
          v122 = 0;
          v123 = 0;
          do
          {
            if (*((unsigned __int16 *)v117 + 16) < 0xFu)
              v124 = (char *)v117 + 34;
            else
              v124 = (char *)v117[5];
            if ((unint64_t)v119 >= v120)
            {
              v125 = (v119 - v118) >> 3;
              v126 = v125 + 1;
              if ((unint64_t)(v125 + 1) >> 61)
                sub_19BF8EB40();
              if ((uint64_t)(v120 - (_QWORD)v118) >> 2 > v126)
                v126 = (uint64_t)(v120 - (_QWORD)v118) >> 2;
              if (v120 - (unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
                v127 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v127 = v126;
              if (v127)
                v127 = (unint64_t)sub_19BFAC524(v127);
              else
                v128 = 0;
              v129 = (char *)(v127 + 8 * v125);
              *(_QWORD *)v129 = v124;
              v130 = v129 + 8;
              while (v119 != v118)
              {
                v131 = *((_QWORD *)v119 - 1);
                v119 -= 8;
                *((_QWORD *)v129 - 1) = v131;
                v129 -= 8;
              }
              v120 = v127 + 8 * v128;
              if (v118)
                operator delete(v118);
              v118 = v129;
              v119 = v130;
            }
            else
            {
              *(_QWORD *)v119 = v124;
              v119 += 8;
            }
            v132 = *((unsigned __int16 *)v117 + 16);
            v133 = (char *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1) >= (unint64_t)v236)
            {
              v135 = (char *)__p;
              v136 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
              v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 61)
                sub_19BF8EB40();
              v138 = (uint64_t)&v236[-__p];
              if ((uint64_t)&v236[-__p] >> 2 > v137)
                v137 = v138 >> 2;
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
                v139 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v139 = v137;
              if (v139)
              {
                v140 = (char *)sub_19BF965C4((uint64_t)&v236, v139);
                v133 = (char *)*((_QWORD *)&__p + 1);
                v135 = (char *)__p;
              }
              else
              {
                v140 = 0;
              }
              v141 = &v140[8 * v136];
              *(_QWORD *)v141 = v132;
              v134 = v141 + 8;
              while (v133 != v135)
              {
                v142 = *((_QWORD *)v133 - 1);
                v133 -= 8;
                *((_QWORD *)v141 - 1) = v142;
                v141 -= 8;
              }
              *(_QWORD *)&__p = v141;
              *((_QWORD *)&__p + 1) = v134;
              v236 = &v140[8 * v139];
              if (v135)
                operator delete(v135);
            }
            else
            {
              **((_QWORD **)&__p + 1) = v132;
              v134 = v133 + 8;
            }
            *((_QWORD *)&__p + 1) = v134;
            v143 = *((unsigned int *)v117 + 12);
            if ((unint64_t)v122 >= v123)
            {
              v144 = (v122 - v121) >> 3;
              v145 = v144 + 1;
              if ((unint64_t)(v144 + 1) >> 61)
                sub_19BF8EB40();
              if ((uint64_t)(v123 - (_QWORD)v121) >> 2 > v145)
                v145 = (uint64_t)(v123 - (_QWORD)v121) >> 2;
              if (v123 - (unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
                v146 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v146 = v145;
              if (v146)
                v146 = (unint64_t)sub_19BFAC524(v146);
              else
                v147 = 0;
              v148 = (char *)(v146 + 8 * v144);
              *(_QWORD *)v148 = v143;
              v149 = v148 + 8;
              while (v122 != v121)
              {
                v150 = *((_QWORD *)v122 - 1);
                v122 -= 8;
                *((_QWORD *)v148 - 1) = v150;
                v148 -= 8;
              }
              v123 = v146 + 8 * v147;
              if (v121)
                operator delete(v121);
              v121 = v148;
              v122 = v149;
            }
            else
            {
              *(_QWORD *)v122 = v143;
              v122 += 8;
            }
            v151 = (void **)v117[1];
            if (v151)
            {
              do
              {
                v152 = v151;
                v151 = (void **)*v151;
              }
              while (v151);
            }
            else
            {
              do
              {
                v152 = (void **)v117[2];
                v153 = *v152 == v117;
                v117 = v152;
              }
              while (!v153);
            }
            v117 = v152;
          }
          while (v152 != &__dst[1]);
        }
        __asm { BR              X10 }
      }
      v56 = *(_QWORD *)v54;
      v57 = *(_DWORD *)(*(_QWORD *)v54 + 248);
      if (v57 >= 0x200000)
      {
        sub_19BFA0144((uint64_t)buf);
        sub_19BF8E6F8((_QWORD *)&v245 + 1, (uint64_t)"Unigram index length=", 21);
        v211 = (_QWORD *)std::ostream::operator<<();
        sub_19BF8E6F8(v211, (uint64_t)" bytes exceeds trie addressing capacity=", 40);
        std::ostream::operator<<();
        v212 = __cxa_allocate_exception(0x20uLL);
        sub_19BFAAA88(&__p, (uint64_t)v246);
        sub_19BFD48D0(v212, &__p);
        __cxa_throw(v212, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
      }
      v58 = (unsigned __int16 *)(v56 + 136);
      if (&__dst[1] == (void **)sub_19BFF86F8((uint64_t)__dst, (unsigned __int16 *)(v56 + 136)))
      {
        *(_DWORD *)buf = v57 & 0x1FFFFF | (((*(_DWORD *)(v56 + 56) & 0xFFF000) != 0) << 21);
        sub_19BFF8770((uint64_t **)__dst, (unsigned __int16 *)(v56 + 136), (const void **)(v56 + 136), buf);
        goto LABEL_103;
      }
      v59 = (void **)sub_19BFE3C9C((uint64_t)__dst, buf, (unsigned __int16 *)(v56 + 136));
      v60 = (char *)*v59;
      if (!*v59)
      {
        v61 = v59;
        v60 = (char *)operator new(0x38uLL);
        v62 = v60 + 32;
        v63 = *v58;
        if (v63 < 0xF)
        {
          *v62 = *(_OWORD *)v58;
        }
        else
        {
          *(_WORD *)v62 = v63;
          v64 = (void *)operator new[]();
          *((_QWORD *)v60 + 5) = v64;
          memcpy(v64, *(const void **)(v56 + 144), *((unsigned __int16 *)v60 + 16));
        }
        *((_DWORD *)v60 + 12) = 0;
        v65 = *(void **)buf;
        *(_QWORD *)v60 = 0;
        *((_QWORD *)v60 + 1) = 0;
        *((_QWORD *)v60 + 2) = v65;
        *v61 = v60;
        v66 = (uint64_t *)v60;
        if (*(_QWORD *)__dst[0])
        {
          __dst[0] = *(void **)__dst[0];
          v66 = (uint64_t *)*v61;
        }
        sub_19BFA96D8((uint64_t *)__dst[1], v66);
        ++v238;
      }
      v67 = *((_DWORD *)v60 + 12);
      v68 = v67 & 0x3FFFFFFF;
      if (v57 < (v67 & 0x3FFFFFFFu))
        v68 = v57;
      v69 = v68 | v67 & 0xC0000000;
      *((_DWORD *)v60 + 12) = v69;
      if ((v67 & 0x40000000) != 0)
        break;
      v70 = v69 & 0xBFFFFFFF;
      if ((*(_DWORD *)(*(_QWORD *)v54 + 56) & 0xFFF000) != 0)
        goto LABEL_101;
      v71 = 0;
LABEL_102:
      *((_DWORD *)v60 + 12) = v71 | v70;
LABEL_103:
      v54 += 8;
    }
    v70 = v69 & 0xBFFFFFFF;
LABEL_101:
    v71 = 0x40000000;
    goto LABEL_102;
  }
  v224 = v0;
  v225 = *(uint64_t **)(v0 + 280);
  if (*(_DWORD *)(v0 + 1960) != 5)
  {
    v222 = *(_DWORD *)(v0 + 1960);
    __dst[1] = 0;
    v238 = 0;
    v236 = 0;
    __dst[0] = &__dst[1];
    *(_QWORD *)&__p = (char *)&__p + 8;
    *((_QWORD *)&__p + 1) = 0;
    v74 = *v15;
    v75 = v15[1];
    if (*v15 != v75)
    {
      do
      {
        v76 = *(_QWORD *)v74;
        v77 = *(_DWORD *)(*(_QWORD *)v74 + 248);
        if (v77 >= 0x200000)
        {
          sub_19BFA0144((uint64_t)buf);
          sub_19BF8E6F8((_QWORD *)&v245 + 1, (uint64_t)"Unigram index length=", 21);
          v213 = (_QWORD *)std::ostream::operator<<();
          sub_19BF8E6F8(v213, (uint64_t)" bytes exceeds trie addressing capacity=", 40);
          std::ostream::operator<<();
          v214 = __cxa_allocate_exception(0x20uLL);
          sub_19BFAAA88(&v233, (uint64_t)v246);
          sub_19BFD48D0(v214, &v233);
          __cxa_throw(v214, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
        }
        v78 = *(double *)(v76 + 88);
        v79 = *(unsigned __int16 *)(v76 + 136);
        if (v79 < 0xF)
        {
          HIBYTE(v245) = *(_WORD *)(v76 + 136);
          v82 = buf;
          if (!(_DWORD)v79)
          {
            v15 = v225;
            goto LABEL_120;
          }
          v80 = (char *)(v76 + 138);
          v81 = (char *)(v76 + 138 + v79);
        }
        else
        {
          v80 = *(char **)(v76 + 144);
          v81 = &v80[v79];
          if (v79 > 0x16)
          {
            v83 = ((unsigned __int16)v79 & 0xFFF8) + 8;
            if ((v79 | 7) != 0x17)
              v83 = v79 | 7;
            v84 = v83 + 1;
            v82 = operator new(v83 + 1);
            *(_QWORD *)&v245 = v79;
            *((_QWORD *)&v245 + 1) = v84 | 0x8000000000000000;
            *(_QWORD *)buf = v82;
          }
          else
          {
            HIBYTE(v245) = *(_WORD *)(v76 + 136);
            v82 = buf;
          }
        }
        v15 = v225;
        do
        {
          v85 = *v80++;
          *v82++ = v85;
        }
        while (v80 != v81);
LABEL_120:
        *v82 = 0;
        *(_QWORD *)&v233 = buf;
        v86 = (double *)sub_19BFF8F10((uint64_t **)&__p, buf, (_OWORD **)&v233);
        v86[7] = v78 + v86[7];
        if (SHIBYTE(v245) < 0)
          operator delete(*(void **)buf);
        v87 = *(_QWORD *)v74;
        v88 = *(_QWORD *)(*(_QWORD *)v74 + 224);
        if (v88)
        {
          do
            v89 = __ldaxr((unsigned int *)v88);
          while (__stlxr(v89 + 1, (unsigned int *)v88));
          if (v89 < 1)
            __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
          v87 = *(_QWORD *)v74;
        }
        v90 = (unsigned __int16 *)(v76 + 136);
        if (*(_BYTE *)(v87 + 304) || *(_DWORD *)(v87 + 248))
        {
          if (!v88)
            goto LABEL_130;
LABEL_129:
          sub_19BFBF4E8(v88);
          goto LABEL_130;
        }
        if (((*(_QWORD *)(v88 + 16) - *(_QWORD *)(v88 + 8)) & 0x7FFFFFFF8) == 0)
          goto LABEL_129;
        v97 = *(_QWORD **)(v88 + 32);
        if (!v97)
          goto LABEL_129;
        v98 = (v97[1] - *v97) & 0x7FFFFFFF8;
        sub_19BFBF4E8(v88);
        if (v98 == 8)
        {
          v99 = *(_QWORD *)v74;
          v100 = *(double *)(*(_QWORD *)v74 + 88);
          v101 = 0.0;
          v0 = v224;
          if (v100 != 0.0)
          {
            v102 = *(_QWORD *)(v99 + 224);
            if (v102)
            {
              v103 = *(double *)(v102 + 40);
              goto LABEL_160;
            }
            v111 = *(_DWORD *)(v99 + 336);
            if (v111)
            {
              v103 = (double)v111;
LABEL_160:
              v101 = v100 / v103;
            }
            else
            {
              v101 = 1.0;
            }
          }
          v112 = (int)(sqrt(v101) * 255.0);
          if (v112)
            v113 = 1;
          else
            v113 = v101 <= 0.0;
          v114 = v112 | 0x400000;
          if (!v113)
            v114 = 4194305;
          *(_DWORD *)buf = v114;
          sub_19BFF8F9C((uint64_t **)__dst, v90, (const void **)v90, buf);
          goto LABEL_155;
        }
LABEL_130:
        if (&__dst[1] != (void **)sub_19BFF86F8((uint64_t)__dst, (unsigned __int16 *)(v76 + 136)))
        {
          v91 = (void **)sub_19BFE3C9C((uint64_t)__dst, buf, (unsigned __int16 *)(v76 + 136));
          v92 = (char *)*v91;
          if (!*v91)
          {
            v93 = v91;
            v92 = (char *)operator new(0x38uLL);
            v94 = v92 + 32;
            v95 = *v90;
            if (v95 < 0xF)
            {
              *v94 = *(_OWORD *)v90;
            }
            else
            {
              *(_WORD *)v94 = v95;
              v96 = (void *)operator new[]();
              *((_QWORD *)v92 + 5) = v96;
              memcpy(v96, *(const void **)(v76 + 144), *((unsigned __int16 *)v92 + 16));
            }
            *((_DWORD *)v92 + 12) = 0;
            v104 = *(void **)buf;
            *(_QWORD *)v92 = 0;
            *((_QWORD *)v92 + 1) = 0;
            *((_QWORD *)v92 + 2) = v104;
            *v93 = v92;
            v105 = (uint64_t *)v92;
            if (*(_QWORD *)__dst[0])
            {
              __dst[0] = *(void **)__dst[0];
              v105 = (uint64_t *)*v93;
            }
            sub_19BFA96D8((uint64_t *)__dst[1], v105);
            ++v238;
          }
          v106 = *((_DWORD *)v92 + 12);
          v107 = v106 & 0x1FFFFF;
          if ((v106 & 0x400000) != 0)
            v107 = 0;
          if (v77 < v107)
            v107 = v77;
          v108 = v106 & 0xFFE00000 | v107;
          *((_DWORD *)v92 + 12) = v108;
          if ((v106 & 0x600000) == 0x200000)
          {
            v109 = v108 & 0xFFDFFFFF;
            v0 = v224;
            goto LABEL_153;
          }
          v109 = v108 & 0xFFDFFFFF;
          v0 = v224;
          if ((*(_DWORD *)(*(_QWORD *)v74 + 56) & 0xFFF000) != 0)
LABEL_153:
            v110 = 0x200000;
          else
            v110 = 0;
          *((_DWORD *)v92 + 12) = v110 | v109;
          goto LABEL_155;
        }
        *(_DWORD *)buf = v77 & 0x1FFFFF | (((*(_DWORD *)(*(_QWORD *)v74 + 56) & 0xFFF000) != 0) << 21);
        sub_19BFF8F9C((uint64_t **)__dst, (unsigned __int16 *)(v76 + 136), (const void **)(v76 + 136), buf);
        v0 = v224;
LABEL_155:
        v74 += 8;
      }
      while (v74 != v75);
    }
    if (*(_DWORD *)(v0 + 1768))
    {
      *(_QWORD *)buf = &off_1E3D12000;
      *(_QWORD *)&v245 = __dst;
      v246[0] = buf;
      sub_19BFF885C(v15, v223, (uint64_t)buf);
      v115 = (uint8_t *)v246[0];
      if ((uint8_t *)v246[0] == buf)
      {
        v116 = 4;
        v115 = buf;
      }
      else
      {
        if (!v246[0])
          goto LABEL_284;
        v116 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v115 + 8 * v116))();
    }
LABEL_284:
    v233 = 0uLL;
    v234 = 0;
    v175 = (void **)__dst[0];
    if (__dst[0] != &__dst[1])
    {
      v176 = 0;
      v177 = 0;
      v178 = 0;
      v179 = 0;
      v180 = 0;
      v181 = 0;
      do
      {
        if (*((unsigned __int16 *)v175 + 16) < 0xFu)
          v182 = (char *)v175 + 34;
        else
          v182 = (char *)v175[5];
        if ((unint64_t)v177 >= v178)
        {
          v183 = (v177 - v176) >> 3;
          v184 = v183 + 1;
          if ((unint64_t)(v183 + 1) >> 61)
            sub_19BF8EB40();
          if ((uint64_t)(v178 - (_QWORD)v176) >> 2 > v184)
            v184 = (uint64_t)(v178 - (_QWORD)v176) >> 2;
          if (v178 - (unint64_t)v176 >= 0x7FFFFFFFFFFFFFF8)
            v185 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v185 = v184;
          if (v185)
            v185 = (unint64_t)sub_19BFAC524(v185);
          else
            v186 = 0;
          v187 = (char *)(v185 + 8 * v183);
          *(_QWORD *)v187 = v182;
          v188 = v187 + 8;
          while (v177 != v176)
          {
            v189 = *((_QWORD *)v177 - 1);
            v177 -= 8;
            *((_QWORD *)v187 - 1) = v189;
            v187 -= 8;
          }
          v178 = v185 + 8 * v186;
          if (v176)
            operator delete(v176);
          v176 = v187;
          v177 = v188;
        }
        else
        {
          *(_QWORD *)v177 = v182;
          v177 += 8;
        }
        v190 = *((unsigned __int16 *)v175 + 16);
        v191 = (char *)*((_QWORD *)&v233 + 1);
        if (*((_QWORD *)&v233 + 1) >= (unint64_t)v234)
        {
          v193 = (char *)v233;
          v194 = (uint64_t)(*((_QWORD *)&v233 + 1) - v233) >> 3;
          v195 = v194 + 1;
          if ((unint64_t)(v194 + 1) >> 61)
            sub_19BF8EB40();
          v196 = (uint64_t)&v234[-v233];
          if ((uint64_t)&v234[-v233] >> 2 > v195)
            v195 = v196 >> 2;
          if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF8)
            v197 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v197 = v195;
          if (v197)
          {
            v198 = (char *)sub_19BF965C4((uint64_t)&v234, v197);
            v191 = (char *)*((_QWORD *)&v233 + 1);
            v193 = (char *)v233;
          }
          else
          {
            v198 = 0;
          }
          v199 = &v198[8 * v194];
          *(_QWORD *)v199 = v190;
          v192 = v199 + 8;
          while (v191 != v193)
          {
            v200 = *((_QWORD *)v191 - 1);
            v191 -= 8;
            *((_QWORD *)v199 - 1) = v200;
            v199 -= 8;
          }
          *(_QWORD *)&v233 = v199;
          *((_QWORD *)&v233 + 1) = v192;
          v234 = &v198[8 * v197];
          if (v193)
            operator delete(v193);
        }
        else
        {
          **((_QWORD **)&v233 + 1) = v190;
          v192 = v191 + 8;
        }
        *((_QWORD *)&v233 + 1) = v192;
        v201 = *((unsigned int *)v175 + 12);
        if ((unint64_t)v180 >= v181)
        {
          v202 = (v180 - v179) >> 3;
          v203 = v202 + 1;
          if ((unint64_t)(v202 + 1) >> 61)
            sub_19BF8EB40();
          if ((uint64_t)(v181 - (_QWORD)v179) >> 2 > v203)
            v203 = (uint64_t)(v181 - (_QWORD)v179) >> 2;
          if (v181 - (unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8)
            v204 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v204 = v203;
          if (v204)
            v204 = (unint64_t)sub_19BFAC524(v204);
          else
            v205 = 0;
          v206 = (char *)(v204 + 8 * v202);
          *(_QWORD *)v206 = v201;
          v207 = v206 + 8;
          while (v180 != v179)
          {
            v208 = *((_QWORD *)v180 - 1);
            v180 -= 8;
            *((_QWORD *)v206 - 1) = v208;
            v206 -= 8;
          }
          v181 = v204 + 8 * v205;
          if (v179)
            operator delete(v179);
          v179 = v206;
          v180 = v207;
        }
        else
        {
          *(_QWORD *)v180 = v201;
          v180 += 8;
        }
        v209 = (void **)v175[1];
        if (v209)
        {
          do
          {
            v210 = v209;
            v209 = (void **)*v209;
          }
          while (v209);
        }
        else
        {
          do
          {
            v210 = (void **)v175[2];
            v153 = *v210 == v175;
            v175 = v210;
          }
          while (!v153);
        }
        v175 = v210;
      }
      while (v210 != &__dst[1]);
    }
    __asm { BR              X10 }
  }
  v220 = *(_QWORD *)(v0 + 240);
  *((_QWORD *)&__p + 1) = 0;
  v236 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  v16 = *v15;
  if (v15[1] != *v15)
  {
    for (i = 0; i < (v225[1] - *v225) >> 3; ++i)
    {
      v18 = *(_QWORD *)(v16 + 8 * i);
      v19 = (unsigned __int16 *)(v18 + 136);
      if ((__int128 *)((char *)&__p + 8) == (__int128 *)sub_19BFF86F8((uint64_t)&__p, (unsigned __int16 *)(v18 + 136)))
      {
        memset(v246, 0, sizeof(v246));
        v245 = 0u;
        v26 = *(_QWORD *)(v16 + 8 * i);
        v27 = *(_DWORD *)(v26 + 248);
        LODWORD(v26) = *(_DWORD *)(v26 + 60);
        *(_DWORD *)buf = v27;
        *(_DWORD *)&buf[4] = v26;
        v28 = *v19;
        if (v28 < 0xF)
          v29 = (char *)(v18 + 138);
        else
          v29 = *(char **)(v18 + 144);
        sub_19BFA747C(&v245, v29, &v29[v28], v28);
        v30 = *(_QWORD *)(v16 + 8 * i);
        __dst[0] = 0;
        __dst[1] = 0;
        v238 = 0;
        sub_19BFA9130(__dst, *(const void **)(v30 + 200), *(_QWORD *)(v30 + 208), *(_QWORD *)(v30 + 208) - *(_QWORD *)(v30 + 200));
        if (v246[1])
        {
          v246[2] = v246[1];
          operator delete((void *)v246[1]);
        }
        *(_OWORD *)&v246[1] = *(_OWORD *)__dst;
        v246[3] = v238;
        v31 = *(_QWORD *)(v16 + 8 * i);
        v247 = *(_QWORD *)(v31 + 88);
        v248 = 1;
        v249 = (*(_DWORD *)(v31 + 56) & 0xFFF000) != 0;
        sub_19BFF8B98((uint64_t **)&__p, (unsigned __int16 *)(v18 + 136), (const void **)(v18 + 136), (uint64_t)buf);
        if (v246[1])
        {
          v246[2] = v246[1];
          operator delete((void *)v246[1]);
        }
        v32 = (void *)v245;
        if (!(_QWORD)v245)
          goto LABEL_78;
        *((_QWORD *)&v245 + 1) = v245;
      }
      else
      {
        v20 = (void **)sub_19BFE3C9C((uint64_t)&__p, __dst, (unsigned __int16 *)(v18 + 136));
        v21 = (char *)*v20;
        if (!*v20)
        {
          v22 = v20;
          v21 = (char *)operator new(0x78uLL);
          *(_QWORD *)buf = v21;
          *(_QWORD *)&v245 = (char *)&__p + 8;
          BYTE8(v245) = 0;
          v23 = v21 + 32;
          v24 = *v19;
          if (v24 < 0xF)
          {
            *v23 = *(_OWORD *)v19;
          }
          else
          {
            *(_WORD *)v23 = v24;
            v25 = (void *)operator new[]();
            *((_QWORD *)v21 + 5) = v25;
            memcpy(v25, *(const void **)(v18 + 144), *((unsigned __int16 *)v21 + 16));
          }
          *((_QWORD *)v21 + 14) = 0;
          *((_OWORD *)v21 + 5) = 0u;
          *((_OWORD *)v21 + 6) = 0u;
          *((_OWORD *)v21 + 3) = 0u;
          *((_OWORD *)v21 + 4) = 0u;
          BYTE8(v245) = 1;
          v33 = __dst[0];
          *(_QWORD *)v21 = 0;
          *((_QWORD *)v21 + 1) = 0;
          *((_QWORD *)v21 + 2) = v33;
          *v22 = v21;
          v34 = (uint64_t *)v21;
          if (*(_QWORD *)__p)
          {
            *(_QWORD *)&__p = *(_QWORD *)__p;
            v34 = (uint64_t *)*v22;
          }
          sub_19BFA96D8(*((uint64_t **)&__p + 1), v34);
          ++v236;
          *(_QWORD *)buf = 0;
          sub_19C014374((uint64_t)buf);
        }
        v35 = *(_QWORD *)(v16 + 8 * i);
        v36 = *(_DWORD *)(v35 + 248);
        if (v36 >= *((_DWORD *)v21 + 12))
          v36 = *((_DWORD *)v21 + 12);
        *((_DWORD *)v21 + 12) = v36;
        ++*((_DWORD *)v21 + 28);
        v21[116] |= (*(_DWORD *)(v35 + 56) & 0xFFF000) != 0;
        *((double *)v21 + 13) = *(double *)(v35 + 88) + *((double *)v21 + 13);
        *(_QWORD *)buf = 0;
        v245 = 0uLL;
        sub_19BFA9130(buf, *(const void **)(v35 + 200), *(_QWORD *)(v35 + 208), *(_QWORD *)(v35 + 208) - *(_QWORD *)(v35 + 200));
        v37 = (_BYTE *)v245;
        if ((_QWORD)v245 != *(_QWORD *)buf)
        {
          v38 = 0;
          v37 = *(_BYTE **)buf;
          do
          {
            v39 = *((_QWORD *)v21 + 10);
            v40 = (_BYTE *)*((_QWORD *)v21 + 11);
            v41 = &v40[-v39];
            if (v38 >= (unint64_t)&v40[-v39])
            {
              v43 = *((_QWORD *)v21 + 12);
              if ((unint64_t)v40 >= v43)
              {
                v45 = (unint64_t)(v41 + 1);
                if ((uint64_t)(v41 + 1) < 0)
                  sub_19BF8EB40();
                v46 = v43 - v39;
                if (2 * v46 > v45)
                  v45 = 2 * v46;
                if (v46 >= 0x3FFFFFFFFFFFFFFFLL)
                  v47 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v47 = v45;
                if (v47)
                  v48 = (char *)operator new(v47);
                else
                  v48 = 0;
                v49 = &v41[(_QWORD)v48];
                v41[(_QWORD)v48] = v37[v38];
                v44 = (uint64_t)&v41[(_QWORD)v48 + 1];
                if (v40 != (_BYTE *)v39)
                {
                  v50 = &v40[~v39];
                  do
                  {
                    v51 = *--v40;
                    (v50--)[(_QWORD)v48] = v51;
                  }
                  while (v40 != (_BYTE *)v39);
                  v40 = (_BYTE *)*((_QWORD *)v21 + 10);
                  v49 = v48;
                }
                *((_QWORD *)v21 + 10) = v49;
                *((_QWORD *)v21 + 11) = v44;
                *((_QWORD *)v21 + 12) = &v48[v47];
                if (v40)
                  operator delete(v40);
              }
              else
              {
                *v40 = v37[v38];
                v44 = (uint64_t)(v40 + 1);
              }
              *((_QWORD *)v21 + 11) = v44;
            }
            else
            {
              v42 = v37[v38];
              if (v42 >= *(unsigned __int8 *)(v39 + v38))
                LOBYTE(v42) = *(_BYTE *)(v39 + v38);
              *(_BYTE *)(v39 + v38) = v42;
            }
            ++v38;
            v37 = *(_BYTE **)buf;
          }
          while (v38 < (_QWORD)v245 - *(_QWORD *)buf);
        }
        if (!v37)
          goto LABEL_78;
        *(_QWORD *)&v245 = v37;
        v32 = v37;
      }
      operator delete(v32);
LABEL_78:
      v16 = *v225;
    }
  }
  if (*(_DWORD *)(v224 + 1768))
  {
    *(_QWORD *)buf = &off_1E3D11F50;
    *(_QWORD *)&v245 = &__p;
    *((_QWORD *)&v245 + 1) = v224 + 328;
    v246[0] = buf;
    sub_19BFF885C(v225, v223, (uint64_t)buf);
    v52 = (uint8_t *)v246[0];
    if ((uint8_t *)v246[0] == buf)
    {
      v53 = 4;
      v52 = buf;
    }
    else
    {
      if (!v246[0])
        goto LABEL_238;
      v53 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
  }
LABEL_238:
  v233 = 0uLL;
  v234 = 0;
  v154 = (__int128 *)__p;
  if ((__int128 *)__p != (__int128 *)((char *)&__p + 8))
  {
    v155 = 0;
    do
    {
      if (v155 >= v234)
      {
        v156 = 0x8E38E38E38E38E39 * ((uint64_t)&v155[-v233] >> 3);
        v157 = v156 + 1;
        if (v156 + 1 > 0x38E38E38E38E38ELL)
          sub_19BF8EB40();
        if (0x1C71C71C71C71C72 * ((uint64_t)&v234[-v233] >> 3) > v157)
          v157 = 0x1C71C71C71C71C72 * ((uint64_t)&v234[-v233] >> 3);
        if (0x8E38E38E38E38E39 * ((uint64_t)&v234[-v233] >> 3) >= 0x1C71C71C71C71C7)
          v158 = 0x38E38E38E38E38ELL;
        else
          v158 = v157;
        v246[1] = &v234;
        if (v158)
          v159 = (char *)sub_19BFA8FB0((uint64_t)&v234, v158);
        else
          v159 = 0;
        *(_QWORD *)buf = v159;
        *(_QWORD *)&v245 = &v159[72 * v156];
        *((_QWORD *)&v245 + 1) = v245;
        v246[0] = &v159[72 * v158];
        sub_19BFF8CC0((_QWORD *)v245, (uint64_t *)v154 + 6);
        *((_QWORD *)&v245 + 1) += 72;
        sub_19C0021D4((uint64_t *)&v233, buf);
        v155 = (char *)*((_QWORD *)&v233 + 1);
        sub_19C002294((uint64_t)buf);
      }
      else
      {
        sub_19BFF8CC0(v155, (uint64_t *)v154 + 6);
        v155 += 72;
      }
      *((_QWORD *)&v233 + 1) = v155;
      v160 = (__int128 *)*((_QWORD *)v154 + 1);
      if (v160)
      {
        do
        {
          v161 = v160;
          v160 = *(__int128 **)v160;
        }
        while (v160);
      }
      else
      {
        do
        {
          v161 = (__int128 *)*((_QWORD *)v154 + 2);
          v153 = *(_QWORD *)v161 == (_QWORD)v154;
          v154 = v161;
        }
        while (!v153);
      }
      v154 = v161;
    }
    while (v161 != (__int128 *)((char *)&__p + 8));
  }
  v231 = 0;
  v232 = 0;
  v230 = &v231;
  v162 = *(uint64_t **)(v224 + 1640);
  if (v162)
  {
    while (1)
    {
      v163 = *((_DWORD *)v162 + 8);
      v164 = *((unsigned __int16 *)v162 + 8);
      if (v164 >= 0xF)
        break;
      __dst[0] = 0;
      __dst[1] = 0;
      v238 = 0;
      if ((_DWORD)v164)
      {
        v165 = (char *)v162 + 18;
        goto LABEL_263;
      }
LABEL_264:
      v167 = v231;
      v168 = &v231;
      v169 = &v231;
      if (v231)
      {
        while (1)
        {
          while (1)
          {
            v169 = (uint64_t **)v167;
            v170 = *((_DWORD *)v167 + 8);
            if (v163 >= v170)
              break;
            v167 = *v169;
            v168 = v169;
            if (!*v169)
              goto LABEL_271;
          }
          if (v170 >= v163)
            break;
          v167 = v169[1];
          if (!v167)
          {
            v168 = v169 + 1;
            goto LABEL_271;
          }
        }
      }
      else
      {
LABEL_271:
        v171 = (char *)operator new(0x40uLL);
        *((_DWORD *)v171 + 8) = v163;
        *(_OWORD *)(v171 + 40) = *(_OWORD *)__dst;
        *((_QWORD *)v171 + 7) = v238;
        __dst[0] = 0;
        __dst[1] = 0;
        v238 = 0;
        *(_QWORD *)v171 = 0;
        *((_QWORD *)v171 + 1) = 0;
        *((_QWORD *)v171 + 2) = v169;
        *v168 = (uint64_t *)v171;
        if (*v230)
        {
          v230 = (uint64_t **)*v230;
          v171 = (char *)*v168;
        }
        sub_19BFA96D8(v231, (uint64_t *)v171);
        ++v232;
      }
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
      }
      v162 = (uint64_t *)*v162;
      if (!v162)
        goto LABEL_277;
    }
    v165 = (const void *)v162[3];
    __dst[1] = 0;
    v238 = 0;
    __dst[0] = 0;
LABEL_263:
    sub_19BFA7588(__dst, v164);
    v166 = (char *)__dst[1];
    memmove(__dst[1], v165, v164);
    __dst[1] = &v166[v164];
    goto LABEL_264;
  }
LABEL_277:
  v245 = 0u;
  memset(v246, 0, 24);
  *(_QWORD *)buf = &off_1E3D16818;
  LODWORD(v246[3]) = v220 | 1;
  sub_19BFA92F4(&v247, (uint64_t)&v230);
  v250 = 0;
  v251 = 0;
  sub_19C0024BC((uint64_t)v252);
  sub_19BFA98BC((uint64_t)&v230, v231);
  LODWORD(v246[3]) = v246[3] & 0xFFFFFFFE | v220 & 1;
  sub_19BFF8D58((uint64_t)buf, (uint64_t **)&v233);
  sub_19BFF8DF4(buf, (uint64_t)__dst);
  v172 = sub_19C03467C(v228);
  sub_19C0346C0(v228, v172);
  v173 = (void *)HIBYTE(v238);
  v174 = __dst;
  if (v238 < 0)
  {
    v174 = (void **)__dst[0];
    v173 = __dst[1];
  }
  sub_19C0344E0((ssize_t)v226, (uint64_t)v174 + v172, (uint64_t)v173 - v172);
  if (SHIBYTE(v238) < 0)
    operator delete(__dst[0]);
  sub_19BFF8E8C((uint64_t)buf);
  *(_QWORD *)buf = &v233;
  sub_19BFA9270((void ***)buf);
  sub_19BFF8ED0(*((_QWORD **)&__p + 1));
  sub_19BF86D24((uint64_t)v226);
  if (v242)
  {
    if (v241[6] == 1)
      free(v242);
  }
}

void sub_19BFE1B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,void *a51,uint64_t a52,uint64_t a53,void *a54)
{
  void *v54;
  int v55;

  if (a42 < 0)
  {
    operator delete(__p);
    if ((v55 & 1) == 0)
    {
LABEL_6:
      sub_19BFA0270((uint64_t)&a54);
      sub_19BF86D24((uint64_t)&a19);
      if (a51)
      {
        if (a50 == 1)
          free(a51);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v55)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v54);
  goto LABEL_6;
}

void sub_19BFE2244(uint64_t a1, ssize_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  int8x16_t v9;
  int8x8_t v10;
  int v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  NSObject *v15;
  uint64_t *v16;
  const char *v17;
  unsigned int v18;
  uint8_t *v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint8_t *v25;
  uint8_t *v26;
  BOOL v27;
  _QWORD *v28;
  _QWORD *exception;
  int v30;
  __int128 __dst;
  unsigned int v32;
  __int16 v33;
  char v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t buf[24];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v32 = 0x1000000;
  sub_19C0344E0(a2, (uint64_t)&v32, 4);
  v32 = 50331648;
  sub_19C0344E0(a2, (uint64_t)&v32, 4);
  v32 = 352321536;
  sub_19C0344E0(a2, (uint64_t)&v32, 4);
  v30 = 0;
  ucol_getVersion();
  sub_19C0344E0(a2, (uint64_t)&v30, 4);
  ucol_getUCAVersion();
  sub_19C0344E0(a2, (uint64_t)&v30, 4);
  sub_19C0344E0(a2, a1, 16);
  if (a3)
  {
    *(float *)&v6 = *(double *)(*(_QWORD *)(a1 + 272) + 40);
    v32 = bswap32(v6);
  }
  else
  {
    v32 = bswap32((*(_QWORD *)(*(_QWORD *)(a1 + 280) + 8) - **(_QWORD **)(a1 + 280)) >> 3);
  }
  sub_19C0344E0(a2, (uint64_t)&v32, 4);
  v7 = *(_QWORD *)(a1 + 240);
  if ((v7 & 0x20) != 0)
    v8 = 24596;
  else
    v8 = 24580;
  v9 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v7), (uint32x4_t)xmmword_19C072190), (int8x16_t)xmmword_19C0721A0);
  v10 = vorr_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
  v11 = v10.i32[0] | v7 & 0x400 | v10.i32[1] | (v7 >> 3) & 2 | (v7 >> 4) & 8 | v8 & 0xFFFBFFFF | (((v7 >> 3) & 1) << 18);
  if (!*(_DWORD *)(a1 + 1764))
    v11 |= 0x100u;
  if (*(_DWORD *)(a1 + 1768))
    v11 |= 0x1000u;
  if ((v7 & 0x2000000) != 0)
    v12 = (v7 >> 2) & 0x80000 | (((v7 >> 11) & 1) << 20) | v11;
  else
    v12 = (v7 >> 2) & 0x80000 | (((v7 >> 11) & 1) << 20) | v11 | 0x400000;
  v32 = bswap32(v12);
  sub_19C0344E0(a2, (uint64_t)&v32, 4);
  if (!a3)
  {
    v32 = bswap32(*(_DWORD *)(a1 + 1960));
    sub_19C0344E0(a2, (uint64_t)&v32, 4);
    v32 = 0;
    sub_19C0344E0(a2, (uint64_t)&v32, 4);
    v32 = 0;
    sub_19C0344E0(a2, (uint64_t)&v32, 4);
    v32 = 0x80000000;
    sub_19C0344E0(a2, (uint64_t)&v32, 4);
    v32 = 0;
    sub_19C0344E0(a2, (uint64_t)&v32, 4);
LABEL_65:
    v18 = 0;
    goto LABEL_67;
  }
  v32 = 0x100000;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  LOBYTE(v36) = 0;
  if ((v12 & 1) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " DenseKeyCodes,", 0xFFFFuLL);
  if ((v12 & 2) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " CommonLetterForms,", 0xFFFFuLL);
  if ((v12 & 8) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " SubstitutionLists,", 0xFFFFuLL);
  if ((v12 & 4) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " UnigramRecordV2,", 0xFFFFuLL);
  if ((v12 & 0x2000) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " VarByteTrieNodesV2,", 0xFFFFuLL);
  if ((v12 & 0x4000) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " RelativeChildOffsetsV2,", 0xFFFFuLL);
  if ((v12 & 0x10) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " SkipDerivableUnigrams,", 0xFFFFuLL);
  if ((v12 & 0x40) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " PatriciaTrieRuns,", 0xFFFFuLL);
  if ((v12 & 0x80) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " CompressTrieTails,", 0xFFFFuLL);
  if ((v12 & 0x20) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " NonDerivablePrefixUnigrams,", 0xFFFFuLL);
  if ((v12 & 0x400) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " Exclude0FreqWords,", 0xFFFFuLL);
  if ((v12 & 0x100) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " AllSortKeysAreDistributive,", 0xFFFFuLL);
  if ((v12 & 0x1000) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " SortKeysChangeRetroactively", 0xFFFFuLL);
  if ((v12 & 0x10000) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " WriteWordIds", 0xFFFFuLL);
  if ((v12 & 0x20000) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " Write4ByteUnigramOffsets", 0xFFFFuLL);
  if ((v12 & 0x40000) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " HuffmanEncodeSurfaceForms", 0xFFFFuLL);
  if ((v12 & 0x400000) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " CollationMappingTable", 0xFFFFuLL);
  if ((*(_BYTE *)(a1 + 243) & 4) != 0)
    sub_19BF86F84((unsigned __int16 *)&v32, " EnableVisuallyConfusableLookup", 0xFFFFuLL);
  v13 = atomic_load(byte_1EE414EA8);
  if ((v13 & 1) != 0)
  {
    v14 = atomic_load(byte_1EE417890);
    if ((v14 & 1) != 0)
    {
      v17 = (const char *)v35;
      if (!v35)
        v17 = (const char *)&v36;
      printf("    Options: %s", v17);
      putchar(10);
    }
    else
    {
      v15 = sub_19BFD3F34();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = (uint64_t *)v35;
        if (!v35)
          v16 = &v36;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl(&dword_19BF85000, v15, OS_LOG_TYPE_DEFAULT, "    Options: %s", buf, 0xCu);
      }
    }
  }
  if (v35 && v34 == 1)
    free(v35);
  v32 = bswap32(*(_DWORD *)(a1 + 1960));
  sub_19C0344E0(a2, (uint64_t)&v32, 4);
  v32 = 0;
  sub_19C0344E0(a2, (uint64_t)&v32, 4);
  v32 = 0;
  sub_19C0344E0(a2, (uint64_t)&v32, 4);
  v32 = 0x80000000;
  sub_19C0344E0(a2, (uint64_t)&v32, 4);
  v32 = 0;
  sub_19C0344E0(a2, (uint64_t)&v32, 4);
  if ((*(_BYTE *)(a1 + 240) & 0x10) == 0)
    goto LABEL_65;
  v18 = 8 * *(_DWORD *)(a1 + 1648) + 8;
LABEL_67:
  v32 = bswap32(v18);
  sub_19C0344E0(a2, (uint64_t)&v32, 4);
  v32 = bswap32(v18 + 128);
  sub_19C0344E0(a2, (uint64_t)&v32, 4);
  sub_19C0346C0(*(_DWORD *)(a2 + 32), 128);
  if (v18)
  {
    v32 = bswap32(*(_DWORD *)(a1 + 1648));
    sub_19C0344E0(a2, (uint64_t)&v32, 4);
    v32 = 0;
    sub_19C0344E0(a2, (uint64_t)&v32, 4);
    sub_19C0173CC((unsigned __int16 *)buf, a1 + 328);
    v19 = *(uint8_t **)buf;
    if (*(uint8_t **)buf == &buf[8])
    {
      v20 = 0;
    }
    else
    {
      v20 = 0;
      do
      {
        v21 = *((unsigned __int16 *)v19 + 20);
        if (v21 <= 4)
        {
          v22 = *((_DWORD *)v19 + 8);
          sub_19C0344E0(a2, (uint64_t)(v19 + 42), v21);
          v23 = *((unsigned __int16 *)v19 + 20);
          if (v23 <= 3)
          {
            v24 = 5 - v23;
            do
            {
              LOBYTE(v32) = 0;
              sub_19C0344E0(a2, (uint64_t)&v32, 1);
              --v24;
            }
            while (v24 > 1);
          }
          v32 = bswap32(v22);
          sub_19C0344E0(a2, (uint64_t)&v32, 4);
          ++v20;
        }
        v25 = (uint8_t *)*((_QWORD *)v19 + 1);
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = *(uint8_t **)v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (uint8_t *)*((_QWORD *)v19 + 2);
            v27 = *(_QWORD *)v26 == (_QWORD)v19;
            v19 = v26;
          }
          while (!v27);
        }
        v19 = v26;
      }
      while (v26 != &buf[8]);
    }
    if (v20 != *(_DWORD *)(a1 + 1648))
    {
      sub_19BFA0144((uint64_t)&v32);
      sub_19BF8E6F8(&v36, (uint64_t)"Common sort-key letter form table wrote ", 40);
      v28 = (_QWORD *)std::ostream::operator<<();
      sub_19BF8E6F8(v28, (uint64_t)" entries, expected ", 19);
      std::ostream::operator<<();
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19BFAAA88(&__dst, (uint64_t)&v37);
      sub_19BFD48D0(exception, &__dst);
      __cxa_throw(exception, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
    }
    sub_19BFD4974(*(_QWORD **)&buf[8]);
  }
}

void sub_19BFE29F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  void *v36;
  int v37;
  uint64_t v38;
  uint64_t v40;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_6:
      a17 = *MEMORY[0x1E0DE4F50];
      v40 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a19 = v40;
      a20 = MEMORY[0x1E0DE4FB8] + 16;
      if (a33 < 0)
        operator delete(a28);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD0C7C](&a36);
      sub_19BFD4974(*(_QWORD **)(v38 + 8));
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

uint64_t *sub_19BFE2AD4(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_19BFE2B80(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_19BFD1648(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19BFE2D80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFE2D94(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  BOOL v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  int64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;

  v9 = (uint64_t *)result;
LABEL_2:
  v94 = a2 - 2;
  v95 = a2 - 1;
  v93 = a2 - 3;
  v10 = v9;
  v97 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(v95, v9);
        if ((_DWORD)result)
        {
          v36 = *v9;
          *v9 = *v95;
          *v95 = v36;
        }
        return result;
      case 3uLL:
        return sub_19BFE375C(v9, v9 + 1, v95, a3);
      case 4uLL:
        return sub_19BFE383C(v9, v9 + 1, v9 + 2, v95, a3);
      case 5uLL:
        return sub_19BFE38EC(v9, v9 + 1, v9 + 2, v9 + 3, v95, a3);
      default:
        if (v11 <= 191)
        {
          v37 = v9 + 1;
          v39 = v9 == a2 || v37 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v9;
              do
              {
                v42 = v41;
                v41 = v37;
                result = (*a3)(v37, v42);
                if ((_DWORD)result)
                {
                  v43 = 0;
                  v44 = *v41;
                  *v41 = 0;
                  v99 = v44;
                  for (i = v40; ; i -= 8)
                  {
                    v46 = (uint64_t *)((char *)v9 + i);
                    v47 = *(uint64_t *)((char *)v9 + i);
                    *v46 = 0;
                    v46[1] = v47;
                    if (v43)
                      result = (uint64_t)sub_19BFBF614((unsigned int *)(v43 + 84));
                    if (!i)
                    {
                      v48 = v9;
                      goto LABEL_85;
                    }
                    result = (*a3)(&v99, (uint64_t *)((char *)v9 + i - 8));
                    if (!(_DWORD)result)
                      break;
                    v43 = *v46;
                  }
                  v48 = (uint64_t *)((char *)v9 + i);
LABEL_85:
                  a2 = v97;
                  v49 = v99;
                  v99 = 0;
                  v50 = *v48;
                  *v48 = v49;
                  if (v50)
                  {
                    result = (uint64_t)sub_19BFBF614((unsigned int *)(v50 + 84));
                    if (v99)
                      result = (uint64_t)sub_19BFBF614((unsigned int *)(v99 + 84));
                  }
                }
                v37 = v41 + 1;
                v40 += 8;
              }
              while (v41 + 1 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v87 = v37;
              result = (*a3)(v37, v9);
              if ((_DWORD)result)
              {
                v88 = 0;
                v89 = *v87;
                *v87 = 0;
                v99 = v89;
                while (1)
                {
                  v90 = *v9;
                  *v9 = 0;
                  v9[1] = v90;
                  if (v88)
                    sub_19BFBF614((unsigned int *)(v88 + 84));
                  result = (*a3)(&v99, v9 - 1);
                  if (!(_DWORD)result)
                    break;
                  v88 = *v9--;
                }
                v91 = v99;
                v99 = 0;
                v92 = *v9;
                *v9 = v91;
                if (v92)
                {
                  result = (uint64_t)sub_19BFBF614((unsigned int *)(v92 + 84));
                  if (v99)
                    result = (uint64_t)sub_19BFBF614((unsigned int *)(v99 + 84));
                }
              }
              v37 = v87 + 1;
              v9 = v87;
            }
            while (v87 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 == a2)
            return result;
          v51 = (v12 - 2) >> 1;
          v96 = v51;
          do
          {
            v52 = v51;
            if (v96 >= v51)
            {
              v53 = (2 * v51) | 1;
              v54 = &v9[v53];
              if (2 * v51 + 2 < (uint64_t)v12 && (*a3)(&v9[v53], v54 + 1))
              {
                ++v54;
                v53 = 2 * v52 + 2;
              }
              v55 = &v9[v52];
              result = (*a3)(v54, v55);
              a2 = v97;
              if (!(_DWORD)result)
              {
                v56 = *v55;
                *v55 = 0;
                v99 = v56;
                do
                {
                  v57 = v54;
                  v58 = *v54;
                  *v54 = 0;
                  v59 = *v55;
                  *v55 = v58;
                  if (v59)
                    result = (uint64_t)sub_19BFBF614((unsigned int *)(v59 + 84));
                  if (v96 < v53)
                    break;
                  v60 = (2 * v53) | 1;
                  v54 = &v9[v60];
                  v53 = 2 * v53 + 2;
                  if (v53 >= (uint64_t)v12)
                  {
                    v53 = v60;
                  }
                  else if ((*a3)(&v9[v60], v54 + 1))
                  {
                    ++v54;
                  }
                  else
                  {
                    v53 = v60;
                  }
                  result = (*a3)(v54, &v99);
                  v55 = v57;
                }
                while (!(_DWORD)result);
                v61 = v99;
                v99 = 0;
                v62 = *v57;
                *v57 = v61;
                if (v62)
                  result = (uint64_t)sub_19BFBF614((unsigned int *)(v62 + 84));
                a2 = v97;
                if (v99)
                  result = (uint64_t)sub_19BFBF614((unsigned int *)(v99 + 84));
              }
            }
            v51 = v52 - 1;
          }
          while (v52);
          v63 = (unint64_t)v11 >> 3;
          while (2)
          {
            v98 = a2;
            if (v63 >= 2)
            {
              v64 = 0;
              v65 = *v9;
              *v9 = 0;
              v66 = v9;
              do
              {
                v67 = &v66[v64 + 1];
                v68 = 2 * v64;
                v64 = (2 * v64) | 1;
                v69 = v68 + 2;
                if (v68 + 2 < v63)
                {
                  result = (*a3)(v67, v67 + 1);
                  if ((_DWORD)result)
                  {
                    ++v67;
                    v64 = v69;
                  }
                }
                v70 = *v67;
                *v67 = 0;
                v71 = *v66;
                *v66 = v70;
                if (v71)
                  result = (uint64_t)sub_19BFBF614((unsigned int *)(v71 + 84));
                v66 = v67;
              }
              while (v64 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
              v72 = a2 - 1;
              if (v67 == a2 - 1)
              {
                v85 = *v67;
                *v67 = v65;
                if (!v85)
                  goto LABEL_138;
              }
              else
              {
                v73 = *v72;
                *v72 = 0;
                v74 = *v67;
                *v67 = v73;
                if (v74)
                  result = (uint64_t)sub_19BFBF614((unsigned int *)(v74 + 84));
                v75 = *v72;
                *v72 = v65;
                if (v75)
                  result = (uint64_t)sub_19BFBF614((unsigned int *)(v75 + 84));
                v76 = (char *)v67 - (char *)v9 + 8;
                if (v76 < 9)
                  goto LABEL_138;
                v77 = (unint64_t)((v76 >> 3) - 2) >> 1;
                v78 = &v9[v77];
                result = (*a3)(v78, v67);
                if (!(_DWORD)result)
                  goto LABEL_138;
                v79 = *v67;
                *v67 = 0;
                v99 = v79;
                do
                {
                  v80 = v78;
                  v81 = *v78;
                  *v78 = 0;
                  v82 = *v67;
                  *v67 = v81;
                  if (v82)
                    result = (uint64_t)sub_19BFBF614((unsigned int *)(v82 + 84));
                  if (!v77)
                    break;
                  v77 = (v77 - 1) >> 1;
                  v78 = &v9[v77];
                  result = (*a3)(v78, &v99);
                  v67 = v80;
                }
                while ((_DWORD)result);
                v83 = v99;
                v99 = 0;
                v84 = *v80;
                *v80 = v83;
                if (!v84)
                  goto LABEL_138;
                result = (uint64_t)sub_19BFBF614((unsigned int *)(v84 + 84));
                v85 = v99;
                if (!v99)
                  goto LABEL_138;
              }
              result = (uint64_t)sub_19BFBF614((unsigned int *)(v85 + 84));
            }
LABEL_138:
            a2 = v98 - 1;
            if ((unint64_t)v63-- <= 2)
              return result;
            continue;
          }
        }
        v13 = &v9[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_19BFE375C(&v9[v12 >> 1], v9, v95, a3);
        }
        else
        {
          sub_19BFE375C(v9, &v9[v12 >> 1], v95, a3);
          sub_19BFE375C(v9 + 1, v13 - 1, v94, a3);
          sub_19BFE375C(v9 + 2, &v9[(v12 >> 1) + 1], v93, a3);
          sub_19BFE375C(v13 - 1, &v9[v12 >> 1], &v9[(v12 >> 1) + 1], a3);
          v14 = *v9;
          *v9 = *v13;
          *v13 = v14;
        }
        --a4;
        a2 = v97;
        if ((a5 & 1) == 0 && !(*a3)(v9 - 1, v9))
        {
          v27 = *v9;
          *v9 = 0;
          v99 = v27;
          result = (*a3)(&v99, v95);
          v10 = v9;
          if ((_DWORD)result)
          {
            do
              result = (*a3)(&v99, ++v10);
            while (!(_DWORD)result);
          }
          else
          {
            v28 = v9 + 1;
            do
            {
              v10 = v28;
              if (v28 >= v97)
                break;
              result = (*a3)(&v99, v28);
              v28 = v10 + 1;
            }
            while (!(_DWORD)result);
          }
          v29 = v97;
          if (v10 < v97)
          {
            v29 = v97;
            do
              result = (*a3)(&v99, --v29);
            while ((_DWORD)result);
          }
          while (v10 < v29)
          {
            v30 = *v10;
            *v10 = *v29;
            *v29 = v30;
            do
              ++v10;
            while (!(*a3)(&v99, v10));
            do
              result = (*a3)(&v99, --v29);
            while ((_DWORD)result);
          }
          v31 = v10 - 1;
          if (v10 - 1 != v9)
          {
            v32 = *v31;
            *v31 = 0;
            v33 = *v9;
            *v9 = v32;
            if (v33)
              result = (uint64_t)sub_19BFBF614((unsigned int *)(v33 + 84));
          }
          v34 = v99;
          v99 = 0;
          v35 = *v31;
          *v31 = v34;
          if (v35)
            result = (uint64_t)sub_19BFBF614((unsigned int *)(v35 + 84));
          if (v99)
            result = (uint64_t)sub_19BFBF614((unsigned int *)(v99 + 84));
          a5 = 0;
          continue;
        }
        v15 = *v9;
        *v9 = 0;
        v99 = v15;
        v16 = v9;
        do
          ++v16;
        while ((*a3)(v16, &v99));
        v17 = v16 - 1;
        v18 = v97;
        if (v16 - 1 == v9)
        {
          v18 = v97;
          do
          {
            if (v16 >= v18)
              break;
            --v18;
          }
          while (!(*a3)(v18, &v99));
        }
        else
        {
          do
            --v18;
          while (!(*a3)(v18, &v99));
        }
        if (v16 < v18)
        {
          v19 = v16;
          v20 = v18;
          do
          {
            v21 = *v19;
            *v19 = *v20;
            *v20 = v21;
            do
              ++v19;
            while ((*a3)(v19, &v99));
            v17 = v19 - 1;
            do
              --v20;
            while (!(*a3)(v20, &v99));
          }
          while (v19 < v20);
        }
        if (v17 != v9)
        {
          v22 = *v17;
          *v17 = 0;
          v23 = *v9;
          *v9 = v22;
          if (v23)
            sub_19BFBF614((unsigned int *)(v23 + 84));
        }
        v24 = v99;
        v99 = 0;
        v25 = *v17;
        *v17 = v24;
        if (v25)
          sub_19BFBF614((unsigned int *)(v25 + 84));
        if (v99)
          sub_19BFBF614((unsigned int *)(v99 + 84));
        if (v16 < v18)
        {
LABEL_36:
          result = sub_19BFE2D94(v9, v17, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v17 + 1;
          continue;
        }
        v26 = sub_19BFE39C4(v9, v17, a3);
        v10 = v17 + 1;
        result = sub_19BFE39C4(v17 + 1, v97, a3);
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_36;
        }
        a2 = v17;
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_19BFE36F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    sub_19BFBF614((unsigned int *)(a14 + 84));
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFE375C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if (v8)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *a2;
      *a2 = *a3;
    }
    *a3 = v10;
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

uint64_t sub_19BFE383C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_19BFE375C(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_19BFE38EC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_19BFE383C(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL sub_19BFE39C4(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      sub_19BFE375C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_19BFE383C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_19BFE38EC(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_19BFE375C(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v14 = 0;
      v15 = *v11;
      *v11 = 0;
      v22 = v15;
      for (i = v12; ; i -= 8)
      {
        v17 = (char *)a1 + i;
        v18 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = v18;
        if (v14)
          sub_19BFBF614((unsigned int *)(v14 + 84));
        if (i == -16)
        {
          v19 = a1;
          goto LABEL_15;
        }
        if (!(*a3)(&v22, (uint64_t *)((char *)a1 + i + 8)))
          break;
        v14 = *((_QWORD *)v17 + 2);
      }
      v19 = (uint64_t *)((char *)a1 + i + 16);
LABEL_15:
      v20 = v22;
      v22 = 0;
      v21 = *v19;
      *v19 = v20;
      if (v21)
        sub_19BFBF614((unsigned int *)(v21 + 84));
      if (v22)
        sub_19BFBF614((unsigned int *)(v22 + 84));
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

void sub_19BFE3BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_19BFBF614((unsigned int *)(a10 + 84));
  _Unwind_Resume(exception_object);
}

__n128 sub_19BFE3BDC(std::string *a1, char *__s, std::string *a3)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::insert(a3, 0, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void sub_19BFE3C3C(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    sub_19BFE3C3C(*a1);
    sub_19BFE3C3C(a1[1]);
    if (*((unsigned __int16 *)a1 + 16) >= 0xFu)
    {
      v2 = a1[5];
      if (v2)
        MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
    }
    operator delete(a1);
  }
}

_QWORD *sub_19BFE3C9C(uint64_t a1, _QWORD *a2, unsigned __int16 *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  unsigned __int16 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (unsigned __int16 *)(v4 + 32);
        if (!sub_19BFECF90(a3, (unsigned __int16 *)(v4 + 32)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_19BFECF90(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_19BFE3D2C(char a1, _QWORD *__p)
{
  uint64_t v3;

  if (a1)
  {
    if (*((unsigned __int16 *)__p + 16) >= 0xFu)
    {
      v3 = __p[5];
      if (v3)
        MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_19BFE3D90(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _BYTE *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t *v34;
  _QWORD *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  const char *v47;
  const char *v48;
  BOOL v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  char **v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unint64_t v61;
  uint8x8_t v62;
  unint64_t v63;
  void **v64;
  char *v65;
  unint64_t v66;
  _WORD *v67;
  void *v68;
  float v69;
  float v70;
  _BOOL8 v71;
  unint64_t v72;
  unint64_t v73;
  int8x8_t prime;
  void *v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint8x8_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  void *v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned __int16 *v94;
  unsigned __int8 *v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  uint8x8_t v99;
  unint64_t v100;
  void **v101;
  char *v102;
  unint64_t v103;
  _OWORD *v104;
  unint64_t v105;
  void *v106;
  float v107;
  _BOOL8 v108;
  unint64_t v109;
  unint64_t v110;
  int8x8_t v111;
  void *v112;
  void *v113;
  uint64_t v114;
  _QWORD **v115;
  unint64_t v116;
  uint8x8_t v117;
  unint64_t v118;
  uint8x8_t v119;
  uint64_t v120;
  _QWORD *j;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  unint64_t v125;
  unsigned int v126;
  uint64_t v127;
  void *v128;
  uint64_t *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int16 *v134;
  uint64_t v135;
  unsigned int v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned int v139;
  _BYTE *v140;
  _BYTE *v141;
  unsigned int v142;
  __int16 v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  size_t v148;
  _BYTE *v149;
  void *v150;
  _BYTE *v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  unsigned int v157;
  BOOL v158;
  unint64_t *v159;
  _BYTE *v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unint64_t v165;
  unint64_t v166;
  _BYTE *v167;
  unint64_t v168;
  unint64_t v169;
  size_t v170;
  char *v171;
  char *v172;
  _BYTE *v173;
  _BYTE *v174;
  _BYTE *v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  BOOL v182;
  BOOL v183;
  unsigned int v184;
  unsigned __int8 v185;
  unsigned __int8 v186;
  NSObject *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t *v205;
  const char *v206;
  const char *v207;
  double v208;
  uint64_t v209;
  char *v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  const char *v218;
  uint64_t v219;
  _QWORD *v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned __int16 *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  unsigned __int8 v231;
  unsigned __int8 v232;
  NSObject *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  _BYTE *v248;
  char *v249;
  _BYTE *v250;
  _BYTE *v251;
  char *v252;
  const char *v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  const char *v261;
  const char *v262;
  char *v263;
  const char *v264;
  const char *v265;
  const char *v266;
  int v267;
  unsigned __int8 v268;
  uint64_t v269;
  unsigned __int8 v270;
  NSObject *v271;
  int v272;
  const char *v273;
  NSObject *v274;
  uint32_t v275;
  unsigned __int8 v276;
  NSObject *v277;
  unsigned __int8 v278;
  unsigned __int8 v279;
  NSObject *v280;
  int v281;
  unsigned __int8 v282;
  unsigned __int8 v283;
  NSObject *v284;
  int v285;
  int v286;
  unsigned __int8 v287;
  unsigned __int8 v288;
  NSObject *v289;
  unsigned __int8 v290;
  unsigned __int8 v291;
  NSObject *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void **v299;
  uint64_t v300;
  char *v301;
  const char *v302;
  const char *v303;
  const char *v304;
  void **v305;
  void **v306;
  unsigned __int8 v307;
  unsigned __int8 v308;
  NSObject *v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  unsigned int v313;
  unsigned __int8 v314;
  unsigned __int8 v315;
  NSObject *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  const char *v322;
  const char *v323;
  const char *v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  int v328;
  unsigned __int8 v329;
  unsigned __int8 v330;
  NSObject *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  NSObject *v335;
  const char *v336;
  unsigned __int8 v337;
  unsigned __int8 v338;
  NSObject *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unsigned __int8 v343;
  NSObject *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t *v349;
  unsigned __int8 v350;
  unsigned __int8 v351;
  NSObject *v352;
  int v353;
  int v354;
  uint64_t v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  const void *v362;
  char *v363;
  unsigned __int16 v364;
  _BYTE v365[6];
  char *v366;
  uint64_t v367;
  void *v368;
  uint64_t v369;
  void *__p;
  void *v371;
  _QWORD v372[2];
  _BYTE buf[44];
  uint64_t *v374;
  _BYTE v375[22];
  int i;
  __int128 v377;
  _BYTE v378[16];
  char **v379;
  char *v380;
  _DWORD v381[4];
  uint64_t v382;

  v382 = *MEMORY[0x1E0C80C00];
  v3 = **(_QWORD **)(a1 + 280);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 280) + 8) != v3)
  {
    v4 = 0;
    v5 = 0;
    v356 = (_QWORD *)(a1 + 1736);
    v355 = a1 + 328;
    while (1)
    {
      v353 = v5;
      v6 = *(_QWORD *)(v3 + 8 * v4);
      v364 = 0;
      LODWORD(v379) = 0x100000;
      WORD2(v379) = 0;
      BYTE6(v379) = 0;
      v380 = 0;
      LOBYTE(v381[0]) = 0;
      LODWORD(v377) = 0x100000;
      WORD2(v377) = 0;
      BYTE6(v377) = 0;
      *((_QWORD *)&v377 + 1) = 0;
      v378[0] = 0;
      sub_19BF86B60((uint64_t)v375, (unsigned __int16 *)v6);
      v7 = 0;
      for (i = 0; ; v7 = HIWORD(i))
      {
        v8 = *(unsigned __int16 *)&v375[4];
        if (!*(_WORD *)&v375[4])
        {
          sub_19BF86BF8((unsigned __int16 *)v375);
          v8 = *(unsigned __int16 *)&v375[4];
        }
        if (v7 >= v8)
          break;
        v9 = sub_19C02211C((uint64_t)v375);
        sub_19BFF6A20((unsigned __int16 *)&v377, v9);
        (*(void (**)(const void **__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(v6 + 312) + 8))(&v362, *(_QWORD *)(v6 + 312), &v377);
        if (v364 && !sub_19BFECF34((unsigned __int16 *)&v362, &v364))
        {
          if ((*(_BYTE *)(v6 + 329) & 0x80) != 0)
          {
            v15 = atomic_load(byte_1EE414EA8);
            if ((v15 & 1) != 0)
            {
              v16 = atomic_load(byte_1EE417890);
              if ((v16 & 1) != 0)
              {
                if (v380)
                  v36 = v380;
                else
                  v36 = (const char *)v381;
                if (*((_QWORD *)&v377 + 1))
                  v37 = (const char *)*((_QWORD *)&v377 + 1);
                else
                  v37 = v378;
                if (*(_QWORD *)(v6 + 8))
                  v38 = *(const char **)(v6 + 8);
                else
                  v38 = (const char *)(v6 + 16);
                if (v364 <= 0xEu)
                  v39 = v365;
                else
                  v39 = v366;
                sub_19C02114C((uint64_t)buf, v39, v364, v10, v11, v12, v13, v14);
                v45 = *(const char **)&buf[8];
                if ((unsigned __int16)v362 <= 0xEu)
                  v46 = (char *)&v362 + 2;
                else
                  v46 = v363;
                sub_19C02114C((uint64_t)&__p, v46, (unsigned __int16)v362, v40, v41, v42, v43, v44);
                v47 = &buf[16];
                if (v45)
                  v47 = v45;
                v48 = (const char *)v371;
                if (!v371)
                  v48 = (const char *)v372;
                printf("NOTE: Prefix sort-key changed retroactively at %s -> %s for %s:  0x%s -> 0x%s ", v36, v37, v38, v47, v48);
                if (v371 && BYTE6(__p) == 1)
                  free(v371);
                if (*(_QWORD *)&buf[8] && buf[6] == 1)
                  free(*(void **)&buf[8]);
                putchar(10);
              }
              else
              {
                v17 = sub_19BFD3F34();
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                {
                  if (v380)
                    v23 = v380;
                  else
                    v23 = (char *)v381;
                  if (*((_QWORD *)&v377 + 1))
                    v24 = (_BYTE *)*((_QWORD *)&v377 + 1);
                  else
                    v24 = v378;
                  if (*(_QWORD *)(v6 + 8))
                    v25 = *(_QWORD *)(v6 + 8);
                  else
                    v25 = v6 + 16;
                  if (v364 <= 0xEu)
                    v26 = v365;
                  else
                    v26 = v366;
                  sub_19C02114C((uint64_t)&__p, v26, v364, v18, v19, v20, v21, v22);
                  v32 = v371;
                  if ((unsigned __int16)v362 <= 0xEu)
                    v33 = (char *)&v362 + 2;
                  else
                    v33 = v363;
                  sub_19C02114C((uint64_t)&v367, v33, (unsigned __int16)v362, v27, v28, v29, v30, v31);
                  v34 = (uint64_t *)v368;
                  v35 = v372;
                  if (v32)
                    v35 = v32;
                  *(_DWORD *)buf = 136316162;
                  if (!v368)
                    v34 = &v369;
                  *(_QWORD *)&buf[4] = v23;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = v24;
                  *(_WORD *)&buf[22] = 2080;
                  *(_QWORD *)&buf[24] = v25;
                  *(_WORD *)&buf[32] = 2080;
                  *(_QWORD *)&buf[34] = v35;
                  *(_WORD *)&buf[42] = 2080;
                  v374 = v34;
                  _os_log_impl(&dword_19BF85000, v17, OS_LOG_TYPE_DEFAULT, "NOTE: Prefix sort-key changed retroactively at %s -> %s for %s:  0x%s -> 0x%s ", buf, 0x34u);
                  if (v368 && BYTE6(v367) == 1)
                    free(v368);
                  if (v371 && BYTE6(__p) == 1)
                    free(v371);
                }
              }
            }
          }
          if ((unsigned __int16)v362 >= 0xFu && v363)
            MEMORY[0x1A1AD0CB8](v363, 0x1000C8077774924);
          break;
        }
        sub_19BF8A1F4((uint64_t)&v379, (unsigned __int16 *)&v377);
        sub_19BFECEA8(&v364, &v362);
        if ((unsigned __int16)v362 >= 0xFu)
        {
          if (v363)
            MEMORY[0x1A1AD0CB8](v363, 0x1000C8077774924);
        }
      }
      if (*(_QWORD *)&v375[8])
        v49 = v375[6] == 1;
      else
        v49 = 0;
      if (v49)
        free(*(void **)&v375[8]);
      if (*((_QWORD *)&v377 + 1) && BYTE6(v377) == 1)
        free(*((void **)&v377 + 1));
      if (v380 && BYTE6(v379) == 1)
        free(v380);
      if (v364 >= 0xFu && v366)
        MEMORY[0x1A1AD0CB8](v366, 0x1000C8077774924);
      if (v7 < v8)
        ++*(_DWORD *)(a1 + 1768);
      v50 = *(_QWORD *)(v6 + 112);
      v51 = v6 + 120;
      if (!v50)
        v50 = v6 + 120;
      *(_QWORD *)v375 = v50;
      v52 = *(unsigned __int16 *)(v6 + 104);
      *(_DWORD *)&v375[8] = 0;
      *(_QWORD *)&v375[12] = v52;
      sub_19BF8BB80((uint64_t *)v375);
      v53 = *(unsigned __int16 *)(v6 + 104);
      v54 = *(char ***)(v6 + 112);
      if (!v54)
        v54 = (char **)(v6 + 120);
      v379 = v54;
      LODWORD(v380) = v53;
      HIDWORD(v380) = v53;
      v381[0] = 0;
      sub_19BF8BB80((uint64_t *)&v379);
      v359 = *(_QWORD *)v375;
      v55 = v355;
      if (*(char ***)v375 != v379)
        goto LABEL_508;
      v361 = (int)v380;
LABEL_94:
      if (*(_DWORD *)&v375[8] != v361)
        break;
      v4 = (v353 + 1);
      v3 = **(_QWORD **)(a1 + 280);
      v5 = v353 + 1;
      if (v4 >= (*(_QWORD *)(*(_QWORD *)(a1 + 280) + 8) - v3) >> 3)
        goto LABEL_196;
    }
    v56 = *(unsigned int *)&v375[16];
    sub_19BFD4084((const void **)&v377, v55, *(unsigned int *)&v375[16]);
    v57 = (unsigned __int16)v377;
    if ((unsigned __int16)v377 < 0xFu)
    {
      *(_OWORD *)buf = v377;
      LODWORD(v57) = (unsigned __int16)v377;
      v58 = (void *)*((_QWORD *)&v377 + 1);
    }
    else
    {
      *(_WORD *)buf = v377;
      v58 = (void *)operator new[]();
      *(_QWORD *)&buf[8] = v58;
      memcpy(v58, *((const void **)&v377 + 1), v57);
    }
    *(_DWORD *)&buf[16] = v56;
    if (v57 >= 0xF)
      v59 = (unsigned __int8 *)v58;
    else
      v59 = &buf[2];
    v60 = sub_19BFF79A0(v59, v57);
    v1 = v56 + v60;
    v61 = *(_QWORD *)(a1 + 1728);
    if (v61)
    {
      v62 = (uint8x8_t)vcnt_s8((int8x8_t)v61);
      v62.i16[0] = vaddlv_u8(v62);
      v63 = v62.u32[0];
      if (v62.u32[0] > 1uLL)
      {
        v51 = v56 + v60;
        if (v1 >= v61)
          v51 = v1 % v61;
      }
      else
      {
        v51 = (v61 - 1) & v1;
      }
      v64 = *(void ***)(*(_QWORD *)(a1 + 1720) + 8 * v51);
      if (v64)
      {
        v65 = (char *)*v64;
        if (*v64)
        {
          while (1)
          {
            v66 = *((_QWORD *)v65 + 1);
            if (v66 == v1)
            {
              if (sub_19BFED000((unsigned __int16 *)v65 + 8, (unsigned __int16 *)buf)
                && *((_DWORD *)v65 + 8) == (_DWORD)v56)
              {
                v55 = v355;
LABEL_178:
                ++*((_DWORD *)v65 + 10);
                if (v57 >= 0xF && *(_QWORD *)&buf[8])
                  MEMORY[0x1A1AD0CB8](*(_QWORD *)&buf[8], 0x1000C8077774924);
                if ((unsigned __int16)v377 >= 0xFu && *((_QWORD *)&v377 + 1))
                  MEMORY[0x1A1AD0CB8](*((_QWORD *)&v377 + 1), 0x1000C8077774924);
                sub_19BF8BB80((uint64_t *)v375);
                if (*(_QWORD *)v375 != v359)
LABEL_508:
                  __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
                goto LABEL_94;
              }
            }
            else
            {
              if (v63 > 1)
              {
                if (v66 >= v61)
                  v66 %= v61;
              }
              else
              {
                v66 &= v61 - 1;
              }
              if (v66 != v51)
              {
LABEL_118:
                v55 = v355;
                break;
              }
            }
            v65 = *(char **)v65;
            if (!v65)
              goto LABEL_118;
          }
        }
      }
    }
    v65 = (char *)operator new(0x30uLL);
    *(_QWORD *)v65 = 0;
    *((_QWORD *)v65 + 1) = v1;
    v67 = v65 + 16;
    if (v57 >= 0xF)
    {
      *v67 = v57;
      v68 = (void *)operator new[]();
      *((_QWORD *)v65 + 3) = v68;
      memcpy(v68, v58, *((unsigned __int16 *)v65 + 8));
    }
    else
    {
      *(_OWORD *)v67 = *(_OWORD *)buf;
    }
    *((_DWORD *)v65 + 8) = v56;
    *((_DWORD *)v65 + 10) = 0;
    v69 = (float)(unint64_t)(*(_QWORD *)(a1 + 1744) + 1);
    v70 = *(float *)(a1 + 1752);
    if (v61 && (float)(v70 * (float)v61) >= v69)
    {
LABEL_168:
      v87 = *(_QWORD *)(a1 + 1720);
      v88 = *(_QWORD **)(v87 + 8 * v51);
      if (v88)
      {
        *(_QWORD *)v65 = *v88;
      }
      else
      {
        *(_QWORD *)v65 = *v356;
        *v356 = v65;
        *(_QWORD *)(v87 + 8 * v51) = v356;
        if (!*(_QWORD *)v65)
        {
LABEL_177:
          ++*(_QWORD *)(a1 + 1744);
          LODWORD(v57) = *(unsigned __int16 *)buf;
          goto LABEL_178;
        }
        v89 = *(_QWORD *)(*(_QWORD *)v65 + 8);
        if ((v61 & (v61 - 1)) != 0)
        {
          if (v89 >= v61)
            v89 %= v61;
        }
        else
        {
          v89 &= v61 - 1;
        }
        v88 = (_QWORD *)(*(_QWORD *)(a1 + 1720) + 8 * v89);
      }
      *v88 = v65;
      goto LABEL_177;
    }
    v71 = (v61 & (v61 - 1)) != 0;
    if (v61 < 3)
      v71 = 1;
    v72 = v71 | (2 * v61);
    v73 = vcvtps_u32_f32(v69 / v70);
    if (v72 <= v73)
      prime = (int8x8_t)v73;
    else
      prime = (int8x8_t)v72;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v61 = *(_QWORD *)(a1 + 1728);
    if (*(_QWORD *)&prime > v61)
      goto LABEL_134;
    if (*(_QWORD *)&prime < v61)
    {
      v81 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1744) / *(float *)(a1 + 1752));
      if (v61 < 3 || (v82 = (uint8x8_t)vcnt_s8((int8x8_t)v61), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
      {
        v81 = std::__next_prime(v81);
      }
      else
      {
        v83 = 1 << -(char)__clz(v81 - 1);
        if (v81 >= 2)
          v81 = v83;
      }
      if (*(_QWORD *)&prime <= v81)
        prime = (int8x8_t)v81;
      if (*(_QWORD *)&prime >= v61)
      {
        v61 = *(_QWORD *)(a1 + 1728);
      }
      else
      {
        if (prime)
        {
LABEL_134:
          if (*(_QWORD *)&prime >> 61)
            sub_19BF8E6D0();
          v75 = operator new(8 * *(_QWORD *)&prime);
          v76 = *(void **)(a1 + 1720);
          *(_QWORD *)(a1 + 1720) = v75;
          if (v76)
            operator delete(v76);
          v77 = 0;
          *(int8x8_t *)(a1 + 1728) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 1720) + 8 * v77++) = 0;
          while (*(_QWORD *)&prime != v77);
          v78 = (_QWORD *)*v356;
          if (*v356)
          {
            v79 = v78[1];
            v80 = (uint8x8_t)vcnt_s8(prime);
            v80.i16[0] = vaddlv_u8(v80);
            if (v80.u32[0] > 1uLL)
            {
              if (v79 >= *(_QWORD *)&prime)
                v79 %= *(_QWORD *)&prime;
            }
            else
            {
              v79 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 1720) + 8 * v79) = v356;
            v84 = (_QWORD *)*v78;
            if (*v78)
            {
              do
              {
                v85 = v84[1];
                if (v80.u32[0] > 1uLL)
                {
                  if (v85 >= *(_QWORD *)&prime)
                    v85 %= *(_QWORD *)&prime;
                }
                else
                {
                  v85 &= *(_QWORD *)&prime - 1;
                }
                if (v85 != v79)
                {
                  v86 = *(_QWORD *)(a1 + 1720);
                  if (!*(_QWORD *)(v86 + 8 * v85))
                  {
                    *(_QWORD *)(v86 + 8 * v85) = v78;
                    goto LABEL_159;
                  }
                  *v78 = *v84;
                  *v84 = **(_QWORD **)(*(_QWORD *)(a1 + 1720) + 8 * v85);
                  **(_QWORD **)(*(_QWORD *)(a1 + 1720) + 8 * v85) = v84;
                  v84 = v78;
                }
                v85 = v79;
LABEL_159:
                v78 = v84;
                v84 = (_QWORD *)*v84;
                v79 = v85;
              }
              while (v84);
            }
          }
          v61 = (unint64_t)prime;
          goto LABEL_163;
        }
        v90 = *(void **)(a1 + 1720);
        *(_QWORD *)(a1 + 1720) = 0;
        if (v90)
          operator delete(v90);
        v61 = 0;
        *(_QWORD *)(a1 + 1728) = 0;
      }
    }
LABEL_163:
    if ((v61 & (v61 - 1)) != 0)
    {
      if (v1 >= v61)
        v51 = v1 % v61;
      else
        v51 = v1;
    }
    else
    {
      v51 = (v61 - 1) & v1;
    }
    goto LABEL_168;
  }
LABEL_196:
  v360 = a1 + 328;
  memset(buf, 0, 32);
  *(_DWORD *)&buf[32] = 1065353216;
  v91 = *(uint64_t **)(a1 + 1736);
  if (v91)
  {
    v92 = 0;
    while (1)
    {
      v94 = (unsigned __int16 *)(v91 + 2);
      v93 = *((unsigned __int16 *)v91 + 8);
      if (v93 <= 0xE)
        v95 = (unsigned __int8 *)v91 + 18;
      else
        v95 = (unsigned __int8 *)v91[3];
      v96 = sub_19BFF79A0(v95, v93);
      v97 = v96;
      v98 = *(_QWORD *)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v99 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&buf[8]);
        v99.i16[0] = vaddlv_u8(v99);
        v100 = v99.u32[0];
        if (v99.u32[0] > 1uLL)
        {
          v1 = v96;
          if (*(_QWORD *)&buf[8] <= (unint64_t)v96)
            v1 = (unint64_t)v96 % *(_QWORD *)&buf[8];
        }
        else
        {
          v1 = (*(_DWORD *)&buf[8] - 1) & v96;
        }
        v101 = *(void ***)(*(_QWORD *)buf + 8 * v1);
        if (v101)
        {
          v102 = (char *)*v101;
          if (*v101)
          {
            do
            {
              v103 = *((_QWORD *)v102 + 1);
              if (v103 == v97)
              {
                if (sub_19BFED000((unsigned __int16 *)v102 + 8, (unsigned __int16 *)v91 + 8))
                {
                  v127 = a1 + 328;
                  goto LABEL_277;
                }
              }
              else
              {
                if (v100 > 1)
                {
                  if (v103 >= v98)
                    v103 %= v98;
                }
                else
                {
                  v103 &= v98 - 1;
                }
                if (v103 != v1)
                  break;
              }
              v102 = *(char **)v102;
            }
            while (v102);
          }
        }
      }
      v102 = (char *)operator new(0x28uLL);
      *(_QWORD *)v102 = 0;
      *((_QWORD *)v102 + 1) = v97;
      v104 = v102 + 16;
      v105 = *v94;
      if (v105 < 0xF)
      {
        *v104 = *(_OWORD *)v94;
      }
      else
      {
        *(_WORD *)v104 = v105;
        v106 = (void *)operator new[]();
        *((_QWORD *)v102 + 3) = v106;
        memcpy(v106, (const void *)v91[3], *((unsigned __int16 *)v102 + 8));
        v92 = *(_QWORD *)&buf[24];
      }
      v127 = a1 + 328;
      *((_QWORD *)v102 + 4) = 0;
      v107 = (float)(unint64_t)(v92 + 1);
      if (!v98 || (float)(*(float *)&buf[32] * (float)v98) < v107)
        break;
LABEL_267:
      v123 = *(_QWORD *)buf;
      v124 = *(_QWORD **)(*(_QWORD *)buf + 8 * v1);
      if (v124)
      {
        *(_QWORD *)v102 = *v124;
      }
      else
      {
        *(_QWORD *)v102 = *(_QWORD *)&buf[16];
        *(_QWORD *)&buf[16] = v102;
        *(_QWORD *)(v123 + 8 * v1) = &buf[16];
        if (!*(_QWORD *)v102)
          goto LABEL_276;
        v125 = *(_QWORD *)(*(_QWORD *)v102 + 8);
        if ((v98 & (v98 - 1)) != 0)
        {
          if (v125 >= v98)
            v125 %= v98;
        }
        else
        {
          v125 &= v98 - 1;
        }
        v124 = (_QWORD *)(*(_QWORD *)buf + 8 * v125);
      }
      *v124 = v102;
LABEL_276:
      v92 = ++*(_QWORD *)&buf[24];
LABEL_277:
      v126 = *((_DWORD *)v91 + 10);
      if (v126 > *((_DWORD *)v102 + 9))
      {
        *((_DWORD *)v102 + 8) = *((_DWORD *)v91 + 8);
        *((_DWORD *)v102 + 9) = v126;
      }
      v91 = (uint64_t *)*v91;
      if (!v91)
      {
        v129 = *(uint64_t **)&buf[16];
        if (*(_QWORD *)&buf[16])
        {
          do
          {
            sub_19C016E30(v127, (unsigned __int16 *)v129 + 8, *((_DWORD *)v129 + 8));
            v129 = (uint64_t *)*v129;
          }
          while (v129);
        }
        goto LABEL_292;
      }
    }
    v108 = (v98 & (v98 - 1)) != 0;
    if (v98 < 3)
      v108 = 1;
    v109 = v108 | (2 * v98);
    v110 = vcvtps_u32_f32(v107 / *(float *)&buf[32]);
    if (v109 <= v110)
      v111 = (int8x8_t)v110;
    else
      v111 = (int8x8_t)v109;
    if (*(_QWORD *)&v111 == 1)
    {
      v111 = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&v111 & (*(_QWORD *)&v111 - 1)) != 0)
    {
      v111 = (int8x8_t)std::__next_prime(*(_QWORD *)&v111);
    }
    v98 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&v111 > *(_QWORD *)&buf[8])
    {
LABEL_232:
      if (*(_QWORD *)&v111 >> 61)
        sub_19BF8E6D0();
      v112 = operator new(8 * *(_QWORD *)&v111);
      v113 = *(void **)buf;
      *(_QWORD *)buf = v112;
      if (v113)
        operator delete(v113);
      v114 = 0;
      *(int8x8_t *)&buf[8] = v111;
      do
        *(_QWORD *)(*(_QWORD *)buf + 8 * v114++) = 0;
      while (*(_QWORD *)&v111 != v114);
      v115 = *(_QWORD ***)&buf[16];
      if (*(_QWORD *)&buf[16])
      {
        v116 = *(_QWORD *)(*(_QWORD *)&buf[16] + 8);
        v117 = (uint8x8_t)vcnt_s8(v111);
        v117.i16[0] = vaddlv_u8(v117);
        if (v117.u32[0] > 1uLL)
        {
          if (v116 >= *(_QWORD *)&v111)
            v116 %= *(_QWORD *)&v111;
        }
        else
        {
          v116 &= *(_QWORD *)&v111 - 1;
        }
        *(_QWORD *)(*(_QWORD *)buf + 8 * v116) = &buf[16];
        for (j = *v115; j; v116 = v122)
        {
          v122 = j[1];
          if (v117.u32[0] > 1uLL)
          {
            if (v122 >= *(_QWORD *)&v111)
              v122 %= *(_QWORD *)&v111;
          }
          else
          {
            v122 &= *(_QWORD *)&v111 - 1;
          }
          if (v122 != v116)
          {
            if (!*(_QWORD *)(*(_QWORD *)buf + 8 * v122))
            {
              *(_QWORD *)(*(_QWORD *)buf + 8 * v122) = v115;
              goto LABEL_257;
            }
            *v115 = (_QWORD *)*j;
            *j = **(_QWORD **)(*(_QWORD *)buf + 8 * v122);
            **(_QWORD **)(*(_QWORD *)buf + 8 * v122) = j;
            j = v115;
          }
          v122 = v116;
LABEL_257:
          v115 = (_QWORD **)j;
          j = (_QWORD *)*j;
        }
      }
      v98 = (unint64_t)v111;
      goto LABEL_261;
    }
    if (*(_QWORD *)&v111 < *(_QWORD *)&buf[8])
    {
      v118 = vcvtps_u32_f32((float)*(unint64_t *)&buf[24] / *(float *)&buf[32]);
      if (*(_QWORD *)&buf[8] < 3uLL
        || (v119 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&buf[8]), v119.i16[0] = vaddlv_u8(v119), v119.u32[0] > 1uLL))
      {
        v118 = std::__next_prime(v118);
      }
      else
      {
        v120 = 1 << -(char)__clz(v118 - 1);
        if (v118 >= 2)
          v118 = v120;
      }
      if (*(_QWORD *)&v111 <= v118)
        v111 = (int8x8_t)v118;
      if (*(_QWORD *)&v111 < v98)
      {
        if (!*(_QWORD *)&v111)
        {
          v128 = *(void **)buf;
          *(_QWORD *)buf = 0;
          v127 = a1 + 328;
          if (v128)
            operator delete(v128);
          v98 = 0;
          *(_QWORD *)&buf[8] = 0;
          goto LABEL_262;
        }
        goto LABEL_232;
      }
      v98 = *(_QWORD *)&buf[8];
    }
LABEL_261:
    v127 = a1 + 328;
LABEL_262:
    if ((v98 & (v98 - 1)) != 0)
    {
      if (v98 <= v97)
        v1 = v97 % v98;
      else
        v1 = v97;
    }
    else
    {
      v1 = ((_DWORD)v98 - 1) & v97;
    }
    goto LABEL_267;
  }
LABEL_292:
  v354 = *(_DWORD *)(a1 + 1648);
  sub_19BFD4008((uint64_t)buf);
  v130 = *(_QWORD *)(a1 + 280);
  v131 = *(_QWORD **)v130;
  v357 = *(_QWORD **)(v130 + 8);
  if (*(_QWORD **)v130 != v357)
  {
    v132 = a1 + 328;
    do
    {
      v358 = v131;
      v133 = *v131;
      v134 = (unsigned __int16 *)(*v131 + 152);
      if (*v134 >= 0xFu)
      {
        v135 = *(_QWORD *)(v133 + 160);
        if (v135)
          MEMORY[0x1A1AD0CB8](v135, 0x1000C8077774924);
      }
      *(_QWORD *)v134 = 0;
      *((_QWORD *)v134 + 1) = 0;
      v137 = (_QWORD *)(v133 + 176);
      v136 = *(unsigned __int16 *)(v133 + 176);
      *(_BYTE *)(v133 + 168) = 0;
      if (v136 >= 0xF)
      {
        v138 = *(_QWORD *)(v133 + 184);
        if (v138)
          MEMORY[0x1A1AD0CB8](v138, 0x1000C8077774924);
      }
      *v137 = 0;
      *(_QWORD *)(v133 + 184) = 0;
      *(_DWORD *)(v133 + 192) = 0;
      __p = 0;
      v371 = 0;
      v372[0] = 0;
      sub_19BF86B60((uint64_t)v375, (unsigned __int16 *)v133);
      v139 = 0;
      v140 = 0;
      v141 = 0;
      for (i = 0; ; v139 = HIWORD(i))
      {
        v142 = *(unsigned __int16 *)&v375[4];
        if (!*(_WORD *)&v375[4])
        {
          sub_19BF86BF8((unsigned __int16 *)v375);
          v142 = *(unsigned __int16 *)&v375[4];
        }
        if (v139 >= v142)
          break;
        v143 = *v134;
        if ((unint64_t)v141 >= v372[0])
        {
          v144 = (unint64_t)__p;
          v145 = v141 - (_BYTE *)__p;
          v146 = v141 - (_BYTE *)__p + 1;
          if (v146 < 0)
            sub_19BF8EB40();
          v147 = v372[0] - (_QWORD)__p;
          if (2 * (v372[0] - (_QWORD)__p) > (unint64_t)v146)
            v146 = 2 * v147;
          if (v147 >= 0x3FFFFFFFFFFFFFFFLL)
            v148 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v148 = v146;
          if (v148)
            v149 = operator new(v148);
          else
            v149 = 0;
          v140 = &v149[v145];
          *v140 = v143;
          v150 = v140 + 1;
          if (v141 != (_BYTE *)v144)
          {
            v151 = &v141[~v144];
            do
            {
              v152 = *--v141;
              (v151--)[(_QWORD)v149] = v152;
            }
            while (v141 != (_BYTE *)v144);
            v141 = __p;
            v140 = v149;
          }
          __p = v140;
          v371 = v150;
          v372[0] = &v149[v148];
          if (v141)
            operator delete(v141);
          v141 = v150;
          v132 = a1 + 328;
        }
        else
        {
          *v141++ = v143;
        }
        v371 = v141;
        v153 = sub_19C02211C((uint64_t)v375);
        sub_19BFD4084((const void **)&v379, v132, v153);
        sub_19BF8BF40((uint64_t)buf, v132, (uint64_t)v134, v153, (unsigned __int16 *)&v379);
        if (*v134 >= 0xFu)
        {
          v154 = *(_QWORD *)(v133 + 160);
          if (v154)
            MEMORY[0x1A1AD0CB8](v154, 0x1000C8077774924);
        }
        v155 = *(unsigned __int16 *)buf;
        *(_OWORD *)v134 = *(_OWORD *)buf;
        if (v155 >= 0xF)
          *(_WORD *)buf = 0;
        *(_BYTE *)(v133 + 168) = buf[16];
        if (*(unsigned __int16 *)(v133 + 176) >= 0xFu)
        {
          v156 = *(_QWORD *)(v133 + 184);
          if (v156)
            MEMORY[0x1A1AD0CB8](v156, 0x1000C8077774924);
        }
        v157 = *(unsigned __int16 *)&buf[24];
        *(_OWORD *)v137 = *(_OWORD *)&buf[24];
        if (v157 >= 0xF)
          *(_WORD *)&buf[24] = 0;
        *(_DWORD *)(v133 + 192) = *(_DWORD *)&buf[40];
        if (*(unsigned __int16 *)buf >= 0xFu && *(_QWORD *)&buf[8])
          MEMORY[0x1A1AD0CB8](*(_QWORD *)&buf[8], 0x1000C8077774924);
        if ((unsigned __int16)v379 >= 0xFu && v380)
          MEMORY[0x1A1AD0CB8](v380, 0x1000C8077774924);
      }
      v158 = sub_19BFED000((unsigned __int16 *)(v133 + 136), v134);
      v159 = (unint64_t *)(v133 + 200);
      v160 = *(_BYTE **)(v133 + 200);
      *(_QWORD *)(v133 + 208) = v160;
      if (v158)
      {
        if (v141 != v140)
        {
          v161 = 0;
          v162 = 0;
          v163 = 0;
          do
          {
            if (v163 <= v140[v161])
            {
              do
              {
                v164 = v163;
                v165 = *(_QWORD *)(v133 + 216);
                if ((unint64_t)v160 >= v165)
                {
                  v166 = *v159;
                  v167 = &v160[-*v159];
                  v168 = (unint64_t)(v167 + 1);
                  if ((uint64_t)(v167 + 1) < 0)
                    sub_19BF8EB40();
                  v169 = v165 - v166;
                  if (2 * v169 > v168)
                    v168 = 2 * v169;
                  if (v169 >= 0x3FFFFFFFFFFFFFFFLL)
                    v170 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v170 = v168;
                  if (v170)
                    v171 = (char *)operator new(v170);
                  else
                    v171 = 0;
                  v172 = &v167[(_QWORD)v171];
                  v173 = &v167[(_QWORD)v171];
                  *v173 = v162;
                  v174 = v173 + 1;
                  if (v160 != (_BYTE *)v166)
                  {
                    v175 = &v160[~v166];
                    do
                    {
                      v176 = *--v160;
                      (v175--)[(_QWORD)v171] = v176;
                    }
                    while (v160 != (_BYTE *)v166);
                    v160 = (_BYTE *)*v159;
                    v172 = v171;
                  }
                  *(_QWORD *)(v133 + 200) = v172;
                  *(_QWORD *)(v133 + 208) = v174;
                  *(_QWORD *)(v133 + 216) = &v171[v170];
                  if (v160)
                    operator delete(v160);
                  v160 = v174;
                }
                else
                {
                  *v160++ = v162;
                }
                *(_QWORD *)(v133 + 208) = v160;
                v163 = v164 + 1;
                v140 = __p;
              }
              while (v164 < *((unsigned __int8 *)__p + v161));
              v141 = v371;
            }
            v161 = ++v162;
          }
          while (v141 - v140 > (unint64_t)v162);
        }
      }
      else
      {
        ++*(_DWORD *)(a1 + 1760);
        (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v133 + 312) + 8))(buf, *(_QWORD *)(v133 + 312), v133);
        v182 = sub_19BFED000(v134, (unsigned __int16 *)buf);
        if (*(unsigned __int16 *)buf >= 0xFu && *(_QWORD *)&buf[8])
          MEMORY[0x1A1AD0CB8](*(_QWORD *)&buf[8], 0x1000C8077774924);
        if (!v182)
        {
          v184 = *(_DWORD *)(a1 + 1764) + 1;
          *(_DWORD *)(a1 + 1764) = v184;
          if ((*(_BYTE *)(v133 + 329) & 0x80) != 0 && v184 <= 0x13)
          {
            v185 = atomic_load(byte_1EE414EA8);
            if ((v185 & 1) != 0)
            {
              v186 = atomic_load(byte_1EE417890);
              if ((v186 & 1) != 0)
              {
                if (*(_QWORD *)(v133 + 112))
                  v206 = *(const char **)(v133 + 112);
                else
                  v206 = (const char *)(v133 + 120);
                if (*(_QWORD *)(v133 + 8))
                  v207 = *(const char **)(v133 + 8);
                else
                  v207 = (const char *)(v133 + 16);
                v208 = *(double *)(v133 + 88);
                v209 = *(unsigned __int16 *)(v133 + 152);
                if (v209 <= 0xE)
                  v210 = (char *)(v133 + 154);
                else
                  v210 = *(char **)(v133 + 160);
                sub_19C02114C((uint64_t)buf, v210, v209, v177, v178, v179, v180, v181);
                if (*(_QWORD *)&buf[8])
                  v211 = *(const char **)&buf[8];
                else
                  v211 = &buf[16];
                (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v133 + 312) + 8))(&v377, *(_QWORD *)(v133 + 312), v133);
                if ((unsigned __int16)v377 <= 0xEu)
                  v217 = (char *)&v377 + 2;
                else
                  v217 = (char *)*((_QWORD *)&v377 + 1);
                sub_19C02114C((uint64_t)&v379, v217, (unsigned __int16)v377, v212, v213, v214, v215, v216);
                v218 = v380;
                if (!v380)
                  v218 = (const char *)v381;
                printf("NOTE:  Sort key for %s->%s freq=%.1f is not distributive:\n    0x%s / 0x%s", v206, v207, v208, v211, v218);
                if (v380 && BYTE6(v379) == 1)
                  free(v380);
                if ((unsigned __int16)v377 >= 0xFu && *((_QWORD *)&v377 + 1))
                  MEMORY[0x1A1AD0CB8](*((_QWORD *)&v377 + 1), 0x1000C8077774924);
                if (*(_QWORD *)&buf[8] && buf[6] == 1)
                  free(*(void **)&buf[8]);
                putchar(10);
              }
              else
              {
                v187 = sub_19BFD3F34();
                if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
                {
                  if (*(_QWORD *)(v133 + 112))
                    v193 = *(_QWORD *)(v133 + 112);
                  else
                    v193 = v133 + 120;
                  if (*(_QWORD *)(v133 + 8))
                    v194 = *(_QWORD *)(v133 + 8);
                  else
                    v194 = v133 + 16;
                  v195 = *(_QWORD *)(v133 + 88);
                  v196 = *(unsigned __int16 *)(v133 + 152);
                  if (v196 <= 0xE)
                    v197 = (char *)(v133 + 154);
                  else
                    v197 = *(char **)(v133 + 160);
                  sub_19C02114C((uint64_t)&v379, v197, v196, v188, v189, v190, v191, v192);
                  if (v380)
                    v198 = v380;
                  else
                    v198 = (char *)v381;
                  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v133 + 312) + 8))(&v367, *(_QWORD *)(v133 + 312), v133);
                  if ((unsigned __int16)v367 <= 0xEu)
                    v204 = (char *)&v367 + 2;
                  else
                    v204 = (char *)v368;
                  sub_19C02114C((uint64_t)&v377, v204, (unsigned __int16)v367, v199, v200, v201, v202, v203);
                  v205 = (uint64_t *)*((_QWORD *)&v377 + 1);
                  if (!*((_QWORD *)&v377 + 1))
                    v205 = (uint64_t *)v378;
                  *(_DWORD *)buf = 136316162;
                  *(_QWORD *)&buf[4] = v193;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = v194;
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = v195;
                  *(_WORD *)&buf[32] = 2080;
                  *(_QWORD *)&buf[34] = v198;
                  *(_WORD *)&buf[42] = 2080;
                  v374 = v205;
                  _os_log_impl(&dword_19BF85000, v187, OS_LOG_TYPE_DEFAULT, "NOTE:  Sort key for %s->%s freq=%.1f is not distributive:\n    0x%s / 0x%s", buf, 0x34u);
                  if (*((_QWORD *)&v377 + 1) && BYTE6(v377) == 1)
                    free(*((void **)&v377 + 1));
                  if ((unsigned __int16)v367 >= 0xFu && v368)
                    MEMORY[0x1A1AD0CB8](v368, 0x1000C8077774924);
                  if (v380 && BYTE6(v379) == 1)
                    free(v380);
                }
              }
            }
          }
        }
      }
      if (*(_QWORD *)&v375[8])
        v183 = v375[6] == 1;
      else
        v183 = 0;
      if (v183)
        free(*(void **)&v375[8]);
      if (__p)
        operator delete(__p);
      v131 = v358 + 1;
      v132 = a1 + 328;
    }
    while (v358 + 1 != v357);
    v219 = *(_QWORD *)(a1 + 280);
    v220 = *(_QWORD **)v219;
    v221 = *(_QWORD **)(v219 + 8);
    if (*(_QWORD **)v219 != v221)
    {
      do
      {
        v222 = *v220;
        v223 = *(_QWORD *)(a1 + 240);
        v224 = (unsigned __int16 *)(*v220 + 136);
        sub_19C016B04((uint64_t)v375, v360, v224);
        (*(void (**)(void **__return_ptr, _QWORD, _BYTE *))(**(_QWORD **)(a1 + 1704) + 8))(&__p, *(_QWORD *)(a1 + 1704), v375);
        if (!sub_19BFED000(v224, (unsigned __int16 *)&__p))
        {
          v230 = *(_DWORD *)(a1 + 1772) + 1;
          *(_DWORD *)(a1 + 1772) = v230;
          if ((v223 & 0x8000) != 0 && v230 <= 0x13)
          {
            v231 = atomic_load(byte_1EE414EA8);
            if ((v231 & 1) != 0)
            {
              v232 = atomic_load(byte_1EE417890);
              if ((v232 & 1) != 0)
              {
                if (*(_QWORD *)(v222 + 112))
                  v253 = *(const char **)(v222 + 112);
                else
                  v253 = (const char *)(v222 + 120);
                v254 = *(unsigned __int16 *)(v222 + 136);
                if (v254 <= 0xE)
                  v255 = (char *)(v222 + 138);
                else
                  v255 = *(char **)(v222 + 144);
                sub_19C02114C((uint64_t)buf, v255, v254, v225, v226, v227, v228, v229);
                v261 = *(const char **)&buf[8];
                v262 = *(const char **)&v375[8];
                if ((unsigned __int16)__p <= 0xEu)
                  v263 = (char *)&__p + 2;
                else
                  v263 = (char *)v371;
                sub_19C02114C((uint64_t)&v379, v263, (unsigned __int16)__p, v256, v257, v258, v259, v260);
                if (v262)
                  v264 = v262;
                else
                  v264 = &v375[16];
                v265 = &buf[16];
                if (v261)
                  v265 = v261;
                v266 = v380;
                if (!v380)
                  v266 = (const char *)v381;
                printf("WARNING:  Derivation of base form failed.  Expected %s (0x%s).  Got %s (0x%s).  ", v253, v265, v264, v266);
                if (v380 && BYTE6(v379) == 1)
                  free(v380);
                if (*(_QWORD *)&buf[8] && buf[6] == 1)
                  free(*(void **)&buf[8]);
                putchar(10);
              }
              else
              {
                v233 = sub_19BFD3F34();
                if (os_log_type_enabled(v233, OS_LOG_TYPE_DEFAULT))
                {
                  if (*(_QWORD *)(v222 + 112))
                    v239 = *(_QWORD *)(v222 + 112);
                  else
                    v239 = v222 + 120;
                  v240 = *(unsigned __int16 *)(v222 + 136);
                  if (v240 <= 0xE)
                    v241 = (char *)(v222 + 138);
                  else
                    v241 = *(char **)(v222 + 144);
                  sub_19C02114C((uint64_t)&v379, v241, v240, v234, v235, v236, v237, v238);
                  v247 = v380;
                  v248 = *(_BYTE **)&v375[8];
                  if ((unsigned __int16)__p <= 0xEu)
                    v249 = (char *)&__p + 2;
                  else
                    v249 = (char *)v371;
                  sub_19C02114C((uint64_t)&v377, v249, (unsigned __int16)__p, v242, v243, v244, v245, v246);
                  v250 = (_BYTE *)*((_QWORD *)&v377 + 1);
                  if (v248)
                    v251 = v248;
                  else
                    v251 = &v375[16];
                  *(_DWORD *)buf = 136315906;
                  if (v247)
                    v252 = v247;
                  else
                    v252 = (char *)v381;
                  *(_QWORD *)&buf[4] = v239;
                  if (!*((_QWORD *)&v377 + 1))
                    v250 = v378;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = v252;
                  *(_WORD *)&buf[22] = 2080;
                  *(_QWORD *)&buf[24] = v251;
                  *(_WORD *)&buf[32] = 2080;
                  *(_QWORD *)&buf[34] = v250;
                  _os_log_impl(&dword_19BF85000, v233, OS_LOG_TYPE_DEFAULT, "WARNING:  Derivation of base form failed.  Expected %s (0x%s).  Got %s (0x%s).  ", buf, 0x2Au);
                  if (*((_QWORD *)&v377 + 1) && BYTE6(v377) == 1)
                    free(*((void **)&v377 + 1));
                  if (v380 && BYTE6(v379) == 1)
                    free(v380);
                }
              }
            }
          }
        }
        if ((unsigned __int16)__p >= 0xFu && v371)
          MEMORY[0x1A1AD0CB8](v371, 0x1000C8077774924);
        if (*(_QWORD *)&v375[8] && v375[6] == 1)
          free(*(void **)&v375[8]);
        ++v220;
      }
      while (v220 != v221);
    }
  }
  v267 = *(_DWORD *)(a1 + 1764);
  v268 = atomic_load(byte_1EE414EA8);
  if (v267)
  {
    v269 = a1 + 328;
    if ((v268 & 1) == 0)
      goto LABEL_512;
    v270 = atomic_load(byte_1EE417890);
    if ((v270 & 1) == 0)
    {
      v271 = sub_19BFD3F34();
      if (os_log_type_enabled(v271, OS_LOG_TYPE_DEFAULT))
      {
        v272 = *(_DWORD *)(a1 + 1764);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v272;
        v273 = "    %d surface-forms sort-keys are non-distributive.";
        v274 = v271;
        v275 = 8;
LABEL_507:
        _os_log_impl(&dword_19BF85000, v274, OS_LOG_TYPE_DEFAULT, v273, buf, v275);
        goto LABEL_512;
      }
      goto LABEL_512;
    }
    printf("    %d surface-forms sort-keys are non-distributive.");
LABEL_511:
    putchar(10);
    goto LABEL_512;
  }
  v269 = a1 + 328;
  if ((v268 & 1) == 0)
    goto LABEL_512;
  v276 = atomic_load(byte_1EE417890);
  if ((v276 & 1) != 0)
  {
    printf("    ALL surface-form sort-keys are distributive!");
    goto LABEL_511;
  }
  v277 = sub_19BFD3F34();
  if (os_log_type_enabled(v277, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v273 = "    ALL surface-form sort-keys are distributive!";
    v274 = v277;
    v275 = 2;
    goto LABEL_507;
  }
LABEL_512:
  if (*(_DWORD *)(a1 + 1768))
  {
    v278 = atomic_load(byte_1EE414EA8);
    if ((v278 & 1) != 0)
    {
      v279 = atomic_load(byte_1EE417890);
      if ((v279 & 1) != 0)
      {
        printf("    %d unigram sort-keys do not build cumulatively. They change retroactively!", *(_DWORD *)(a1 + 1768));
        putchar(10);
      }
      else
      {
        v280 = sub_19BFD3F34();
        v269 = a1 + 328;
        if (os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT))
        {
          v281 = *(_DWORD *)(a1 + 1768);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v281;
          _os_log_impl(&dword_19BF85000, v280, OS_LOG_TYPE_DEFAULT, "    %d unigram sort-keys do not build cumulatively. They change retroactively!", buf, 8u);
        }
      }
    }
  }
  if (*(_DWORD *)(a1 + 1772))
  {
    v282 = atomic_load(byte_1EE414EA8);
    if ((v282 & 1) != 0)
    {
      v283 = atomic_load(byte_1EE417890);
      if ((v283 & 1) != 0)
      {
        printf("    %d unigram base forms are not derivable from their sort-keys!", *(_DWORD *)(a1 + 1772));
        putchar(10);
      }
      else
      {
        v284 = sub_19BFD3F34();
        v269 = a1 + 328;
        if (os_log_type_enabled(v284, OS_LOG_TYPE_DEFAULT))
        {
          v285 = *(_DWORD *)(a1 + 1772);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v285;
          _os_log_impl(&dword_19BF85000, v284, OS_LOG_TYPE_DEFAULT, "    %d unigram base forms are not derivable from their sort-keys!", buf, 8u);
        }
      }
    }
  }
  v286 = *(_DWORD *)(a1 + 1760) - *(_DWORD *)(a1 + 1764);
  if (v286 >= 1)
  {
    v287 = atomic_load(byte_1EE414EA8);
    if ((v287 & 1) != 0)
    {
      v288 = atomic_load(byte_1EE417890);
      if ((v288 & 1) != 0)
      {
        printf("    %d surface forms don't align with their dict/sort keys.", v286);
        putchar(10);
      }
      else
      {
        v289 = sub_19BFD3F34();
        v269 = a1 + 328;
        if (os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v286;
          _os_log_impl(&dword_19BF85000, v289, OS_LOG_TYPE_DEFAULT, "    %d surface forms don't align with their dict/sort keys.", buf, 8u);
        }
      }
    }
  }
  v290 = atomic_load(byte_1EE414EA8);
  if ((v290 & 1) != 0)
  {
    v291 = atomic_load(byte_1EE417890);
    if ((v291 & 1) != 0)
    {
      printf("Mapped %d sort key units to letter forms.", v354);
      putchar(10);
    }
    else
    {
      v292 = sub_19BFD3F34();
      v269 = a1 + 328;
      if (os_log_type_enabled(v292, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v354;
        _os_log_impl(&dword_19BF85000, v292, OS_LOG_TYPE_DEFAULT, "Mapped %d sort key units to letter forms.", buf, 8u);
      }
    }
  }
  v293 = *(_QWORD *)(a1 + 240);
  if ((v293 & 0x28000) != 0)
  {
    sub_19C0173CC((unsigned __int16 *)&v379, v269);
    v299 = (void **)v379;
    if (v379 != &v380)
    {
      do
      {
        v300 = *((unsigned __int16 *)v299 + 20);
        if (v300 <= 0xE)
          v301 = (char *)v299 + 42;
        else
          v301 = (char *)v299[6];
        sub_19C02114C((uint64_t)buf, v301, v300, v294, v295, v296, v297, v298);
        v302 = *(const char **)&buf[8];
        sub_19BF8D914((uint64_t)v375, *((_DWORD *)v299 + 8));
        if (v302)
          v303 = v302;
        else
          v303 = &buf[16];
        v304 = *(const char **)&v375[8];
        if (!*(_QWORD *)&v375[8])
          v304 = &v375[16];
        printf("\tSK=0x%s: %s\n", v303, v304);
        if (*(_QWORD *)&v375[8] && v375[6] == 1)
          free(*(void **)&v375[8]);
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        v305 = (void **)v299[1];
        if (v305)
        {
          do
          {
            v306 = v305;
            v305 = (void **)*v305;
          }
          while (v305);
        }
        else
        {
          do
          {
            v306 = (void **)v299[2];
            v49 = *v306 == v299;
            v299 = v306;
          }
          while (!v49);
        }
        v299 = v306;
      }
      while (v306 != (void **)&v380);
    }
    sub_19BFD4974(v380);
    v293 = *(_QWORD *)(a1 + 240);
  }
  if ((v293 & 0x28080) != 0)
  {
    v307 = atomic_load(byte_1EE414EA8);
    if ((v307 & 1) != 0)
    {
      v308 = atomic_load(byte_1EE417890);
      if ((v308 & 1) != 0)
      {
        printf("Non-empty surface-form substitution lists:");
        putchar(10);
      }
      else
      {
        v309 = sub_19BFD3F34();
        if (os_log_type_enabled(v309, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19BF85000, v309, OS_LOG_TYPE_DEFAULT, "Non-empty surface-form substitution lists:", buf, 2u);
        }
      }
    }
    v310 = *(uint64_t **)(a1 + 280);
    v311 = *v310;
    if (v310[1] != *v310)
    {
      v312 = 0;
      v313 = 0;
      while (1)
      {
        memset(buf, 0, 24);
        LODWORD(v379) = 0;
        sub_19C03298C(*(_QWORD *)(v311 + 8 * v312), v360, (uint64_t *)buf, &v379);
        if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
        {
          v314 = atomic_load(byte_1EE414EA8);
          if ((v314 & 1) != 0)
          {
            v315 = atomic_load(byte_1EE417890);
            if ((v315 & 1) != 0)
            {
              v321 = *(_QWORD *)(v311 + 8 * v312);
              v322 = *(const char **)(v321 + 112);
              if (!v322)
                v322 = (const char *)(v321 + 120);
              v323 = *(const char **)(v321 + 8);
              v324 = (const char *)(v321 + 16);
              if (v323)
                v324 = v323;
              printf("    %s -> %s            ", v322, v324);
              putchar(10);
            }
            else
            {
              v316 = sub_19BFD3F34();
              if (os_log_type_enabled(v316, OS_LOG_TYPE_DEFAULT))
              {
                v317 = *(_QWORD *)(v311 + 8 * v312);
                v318 = *(_QWORD *)(v317 + 112);
                if (!v318)
                  v318 = v317 + 120;
                v319 = *(_QWORD *)(v317 + 8);
                v320 = v317 + 16;
                if (v319)
                  v320 = v319;
                *(_DWORD *)v375 = 136315394;
                *(_QWORD *)&v375[4] = v318;
                *(_WORD *)&v375[12] = 2080;
                *(_QWORD *)&v375[14] = v320;
                _os_log_impl(&dword_19BF85000, v316, OS_LOG_TYPE_DEFAULT, "    %s -> %s            ", v375, 0x16u);
              }
            }
          }
          v325 = *(_QWORD *)buf;
          if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
            break;
        }
LABEL_608:
        *(_QWORD *)v375 = buf;
        sub_19BFE6378((void ***)v375);
        v349 = *(uint64_t **)(a1 + 280);
        v311 = *v349;
        v312 = ++v313;
        if (v313 >= (unint64_t)((v349[1] - *v349) >> 3))
          goto LABEL_609;
      }
      v326 = 0;
      v327 = 1;
      while (1)
      {
        v328 = *(_DWORD *)(v325 + 40 * v326 + 32);
        if ((v328 & 0x20) != 0)
        {
          v337 = atomic_load(byte_1EE414EA8);
          if ((v337 & 1) != 0)
          {
            v338 = atomic_load(byte_1EE417890);
            if ((v338 & 1) != 0)
            {
              printf("<%d: %s  ");
LABEL_606:
              putchar(10);
              goto LABEL_607;
            }
            v339 = sub_19BFD3F34();
            if (os_log_type_enabled(v339, OS_LOG_TYPE_DEFAULT))
            {
              v340 = *(_QWORD *)buf + 40 * v326;
              v341 = *(_QWORD *)(v340 + 8);
              v342 = v340 + 16;
              if (v341)
                v342 = v341;
              *(_DWORD *)v375 = 67109378;
              *(_DWORD *)&v375[4] = v328 & 0xFFFFFFDF;
              *(_WORD *)&v375[8] = 2080;
              *(_QWORD *)&v375[10] = v342;
              v335 = v339;
              v336 = "<%d: %s  ";
              goto LABEL_602;
            }
          }
        }
        else
        {
          v329 = atomic_load(byte_1EE414EA8);
          if ((v328 & 0x40) != 0)
          {
            if ((v329 & 1) != 0)
            {
              v343 = atomic_load(byte_1EE417890);
              if ((v343 & 1) != 0)
              {
                printf("^%d: %s  ");
                goto LABEL_606;
              }
              v344 = sub_19BFD3F34();
              if (os_log_type_enabled(v344, OS_LOG_TYPE_DEFAULT))
              {
                v345 = *(_QWORD *)buf + 40 * v326;
                v346 = *(_QWORD *)(v345 + 8);
                v347 = v345 + 16;
                if (v346)
                  v347 = v346;
                *(_DWORD *)v375 = 67109378;
                *(_DWORD *)&v375[4] = v328 & 0xFFFFFFBF;
                *(_WORD *)&v375[8] = 2080;
                *(_QWORD *)&v375[10] = v347;
                v335 = v344;
                v336 = "^%d: %s  ";
                goto LABEL_602;
              }
            }
          }
          else if ((v329 & 1) != 0)
          {
            v330 = atomic_load(byte_1EE417890);
            if ((v330 & 1) != 0)
            {
              printf("@%d: %s  ");
              goto LABEL_606;
            }
            v331 = sub_19BFD3F34();
            if (os_log_type_enabled(v331, OS_LOG_TYPE_DEFAULT))
            {
              v332 = *(_QWORD *)buf + 40 * v326;
              v333 = *(_QWORD *)(v332 + 8);
              v334 = v332 + 16;
              if (v333)
                v334 = v333;
              *(_DWORD *)v375 = 67109378;
              *(_DWORD *)&v375[4] = v328;
              *(_WORD *)&v375[8] = 2080;
              *(_QWORD *)&v375[10] = v334;
              v335 = v331;
              v336 = "@%d: %s  ";
LABEL_602:
              _os_log_impl(&dword_19BF85000, v335, OS_LOG_TYPE_DEFAULT, v336, v375, 0x12u);
            }
          }
        }
LABEL_607:
        v326 = v327;
        v325 = *(_QWORD *)buf;
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3) <= v327++)
          goto LABEL_608;
      }
    }
LABEL_609:
    v350 = atomic_load(byte_1EE414EA8);
    if ((v350 & 1) != 0)
    {
      v351 = atomic_load(byte_1EE417890);
      if ((v351 & 1) != 0)
      {
        putchar(10);
      }
      else
      {
        v352 = sub_19BFD3F34();
        if (os_log_type_enabled(v352, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19BF85000, v352, OS_LOG_TYPE_DEFAULT, (const char *)&unk_19C0727E2, buf, 2u);
        }
      }
    }
  }
}

void sub_19BFE6000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,__int16 a35,uint64_t a36,__int16 a37,uint64_t a38,unsigned __int16 a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,void *a44,uint64_t a45,uint64_t a46,char a47,int a48,char a49,char a50,uint64_t a51)
{
  uint64_t v51;
  void *v53;
  void *v54;

  if (a39 >= 0xFu && a40)
    MEMORY[0x1A1AD0CB8](a40, 0x1000C8077774924);
  v53 = *(void **)(v51 - 144);
  if (v53 && *(_BYTE *)(v51 - 146) == 1)
    free(v53);
  v54 = *(void **)(v51 - 216);
  if (v54 && *(_BYTE *)(v51 - 218) == 1)
    free(v54);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19BFE6378(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 4);
        if (v6)
        {
          if (*(v4 - 34) == 1)
            free(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t **sub_19BFE63F8(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_19BFA96D8(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_19BFE64C4(_QWORD *a1)
{
  if (a1)
  {
    sub_19BFE64C4(*a1);
    sub_19BFE64C4(a1[1]);
    operator delete(a1);
  }
}

uint64_t **sub_19BFE64FC(uint64_t **a1, int a2, int a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  int v9;
  BOOL v10;
  char v11;
  uint64_t **v12;
  char v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v6;
        v8 = *((_DWORD *)v6 + 8);
        if (v8 == a2)
          break;
        if (v8 <= a2)
        {
          if (v8 >= a2)
            v13 = 1;
          else
            v13 = -1;
          if ((v13 & 0x80) == 0)
            return v7;
          goto LABEL_18;
        }
LABEL_12:
        v6 = *v7;
        v12 = v7;
        if (!*v7)
          goto LABEL_21;
      }
      v9 = *((_DWORD *)v7 + 9);
      v10 = v9 == a3;
      if (v9 > a3)
        goto LABEL_12;
      if (v9 >= a3)
        v11 = 1;
      else
        v11 = -1;
      if (v10)
        v11 = 0;
      if ((v11 & 0x80) == 0)
        return v7;
LABEL_18:
      v12 = v7 + 1;
      v6 = v7[1];
      if (!v6)
        goto LABEL_21;
    }
  }
  v12 = a1 + 1;
LABEL_21:
  v14 = (uint64_t *)v7;
  v7 = (uint64_t **)operator new(0x30uLL);
  v7[4] = *a4;
  v7[5] = 0;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = v14;
  *v12 = (uint64_t *)v7;
  v15 = (uint64_t *)**a1;
  v16 = (uint64_t *)v7;
  if (v15)
  {
    *a1 = v15;
    v16 = *v12;
  }
  sub_19BFA96D8(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v7;
}

void sub_19BFE65F0(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unint64_t v3;
  unsigned __int8 *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int16 **v13;
  unsigned __int16 *i;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27[2];
  char v28;

  if (*((_QWORD *)a2 + 1))
    v7 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  else
    v7 = (unsigned __int8 *)(a2 + 8);
  v8 = sub_19BFF79A0(v7, *a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v10 <= v8)
        v3 = v8 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v8;
    }
    v13 = *(unsigned __int16 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int16 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (i + 8 == a2 || sub_19BFF7920(i + 8, a2))
            return;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = operator new(0x30uLL);
  v27[0] = (uint64_t)v17;
  v27[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v9;
  sub_19BF86B60((uint64_t)(v17 + 2), a3);
  v28 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_19BFD1648(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *v17 = *v25;
LABEL_42:
    *v25 = v17;
    goto LABEL_43;
  }
  *v17 = *v16;
  *v16 = v17;
  *(_QWORD *)(v24 + 8 * v3) = v16;
  if (*v17)
  {
    v26 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_42;
  }
LABEL_43:
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_19BFE7718(v27);
}

void sub_19BFE6848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFE7718((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19BFE6860(unsigned __int16 *a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  int v19;
  unsigned __int16 *v20;
  const char *v21;
  unint64_t v22;
  unsigned __int16 *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  int v27;
  unint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  int v32;
  unint64_t v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  const char *v36;
  unsigned __int16 *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  int v41;
  const char *v42;
  const char *v43;
  const char *v44;
  char v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  unsigned __int16 *v51;
  unint64_t v52;
  const char *v53;
  const char *v54;
  const char *v55;
  int v56;
  const char *v57;
  unsigned __int16 *v58;
  const char *v59;
  const char *v60;
  const char *v61;
  int v62;
  const char *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  const char *v72;
  const char *v73;
  const char *v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  BOOL v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  const char *v89;
  int v90;
  const char *v91;
  uint64_t v92;
  const char *v93;
  const char *v94;
  const char *v95;
  unsigned __int16 *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  const char *v100;
  int v101;
  const char *v102;
  const char *v103;
  BOOL v104;
  uint64_t v105;
  unsigned __int16 *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  const char *v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  const char *v122;
  const char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  const char *v128;
  const char *v129;
  unsigned __int16 *v132;
  unsigned __int16 *v133;
  const char *v134;
  const char *v135;
  uint64_t v136;
  const char *v137;
  const char *v138;
  const char *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int16 *v143;
  unsigned __int16 *v145;
  uint64_t v146;
  int v147;
  __int16 v148;
  char v149;
  void *v150;
  int v151;
  __int16 v152;
  char v153;
  void *v154;
  _QWORD v155[3];

  v155[2] = *MEMORY[0x1E0C80C00];
LABEL_2:
  v7 = (uint64_t)a1;
  v141 = (uint64_t)(a1 + 32);
  v142 = (uint64_t)(a1 + 16);
  v139 = (const char *)(a1 + 8);
  v140 = (const char *)(a1 - 8);
  v143 = a1 + 24;
  while (2)
  {
    v8 = a2 - v7;
    v9 = (uint64_t)(a2 - v7) >> 5;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_QWORD *)(a2 - 24))
          v66 = *(const char **)(a2 - 24);
        else
          v66 = (const char *)(a2 - 16);
        if (*(_QWORD *)(v7 + 8))
          v67 = *(const char **)(v7 + 8);
        else
          v67 = (const char *)(v7 + 16);
        if (strcmp(v66, v67) < 0)
          sub_19BFE7890((unsigned __int16 *)v7, (unsigned __int16 *)(a2 - 32));
        return;
      case 3:
        sub_19BFE7934(v7, v7 + 32, a2 - 32);
        return;
      case 4:
        sub_19BFE7A4C(v7, v7 + 32, v7 + 64, a2 - 32);
        return;
      case 5:
        sub_19BFE7B2C(v7, v7 + 32, v7 + 64, v7 + 96, a2 - 32);
        return;
      default:
        if (v8 > 767)
        {
          if (!a3)
          {
            if (v7 != a2)
            {
              v83 = (unint64_t)(v9 - 2) >> 1;
              v145 = (unsigned __int16 *)a2;
              v84 = v83;
              do
              {
                v85 = v84;
                if (v83 >= v84)
                {
                  v86 = (2 * v84) | 1;
                  v87 = v7 + 32 * v86;
                  if (2 * v84 + 2 < v9)
                  {
                    v88 = *(_QWORD *)(v87 + 8) ? *(const char **)(v87 + 8) : (const char *)(v87 + 16);
                    v89 = *(_QWORD *)(v87 + 40) ? *(const char **)(v87 + 40) : (const char *)(v87 + 48);
                    v90 = strcmp(v88, v89);
                    v87 += 32 * (v90 >> 31);
                    if (v90 < 0)
                      v86 = 2 * v85 + 2;
                  }
                  if (*(_QWORD *)(v87 + 8))
                    v91 = *(const char **)(v87 + 8);
                  else
                    v91 = (const char *)(v87 + 16);
                  v92 = v7 + 32 * v85;
                  v93 = *(const char **)(v92 + 8);
                  v94 = (const char *)(v92 + 16);
                  if (v93)
                    v95 = v93;
                  else
                    v95 = v94;
                  if ((strcmp(v91, v95) & 0x80000000) == 0)
                  {
                    v151 = 0x100000;
                    v152 = 0;
                    v96 = (unsigned __int16 *)(v7 + 32 * v85);
                    v153 = 0;
                    v154 = 0;
                    sub_19BF8A370((uint64_t)&v151, v96);
                    do
                    {
                      v97 = v87;
                      sub_19BF8A370((uint64_t)v96, (unsigned __int16 *)v87);
                      if (v83 < v86)
                        break;
                      v98 = (2 * v86) | 1;
                      v87 = v7 + 32 * v98;
                      if (2 * v86 + 2 < v9)
                      {
                        v99 = *(_QWORD *)(v87 + 8) ? *(const char **)(v87 + 8) : (const char *)(v87 + 16);
                        v100 = *(_QWORD *)(v87 + 40) ? *(const char **)(v87 + 40) : (const char *)(v87 + 48);
                        v101 = strcmp(v99, v100);
                        v87 += 32 * (v101 >> 31);
                        if (v101 < 0)
                          v98 = 2 * v86 + 2;
                      }
                      v102 = *(_QWORD *)(v87 + 8) ? *(const char **)(v87 + 8) : (const char *)(v87 + 16);
                      v103 = (const char *)(v154 ? v154 : v155);
                      v96 = (unsigned __int16 *)v97;
                      v86 = v98;
                    }
                    while ((strcmp(v102, v103) & 0x80000000) == 0);
                    sub_19BF8A370(v97, (unsigned __int16 *)&v151);
                    if (v154)
                      v104 = v153 == 1;
                    else
                      v104 = 0;
                    if (v104)
                      free(v154);
                  }
                }
                v84 = v85 - 1;
              }
              while (v85);
              v105 = (unint64_t)v8 >> 5;
              v106 = v145;
              do
              {
                v147 = 0x100000;
                v148 = 0;
                v149 = 0;
                v150 = 0;
                sub_19BF8A370((uint64_t)&v147, (unsigned __int16 *)v7);
                v107 = 0;
                v108 = v105 - 2;
                if (v105 < 2)
                  v108 = v105 - 1;
                v109 = v108 >> 1;
                v110 = v7;
                do
                {
                  v111 = v110 + 32 * (v107 + 1);
                  v112 = (2 * v107) | 1;
                  v113 = 2 * v107 + 2;
                  if (v113 < v105)
                  {
                    v114 = *(_QWORD *)(v111 + 8) ? *(const char **)(v111 + 8) : (const char *)(v111 + 16);
                    v115 = *(_QWORD *)(v111 + 40) ? *(const char **)(v111 + 40) : (const char *)(v111 + 48);
                    v116 = strcmp(v114, v115);
                    v111 += 32 * (v116 >> 31);
                    if (v116 < 0)
                      v112 = v113;
                  }
                  sub_19BF8A370(v110, (unsigned __int16 *)v111);
                  v110 = v111;
                  v107 = v112;
                }
                while (v112 <= v109);
                v106 -= 16;
                if ((unsigned __int16 *)v111 == v106)
                {
                  sub_19BF8A370(v111, (unsigned __int16 *)&v147);
                }
                else
                {
                  sub_19BF8A370(v111, v106);
                  sub_19BF8A370((uint64_t)v106, (unsigned __int16 *)&v147);
                  v117 = v111 - v7 + 32;
                  if (v117 >= 33)
                  {
                    v118 = (unint64_t)((v117 >> 5) - 2) >> 1;
                    v119 = v7 + 32 * v118;
                    v120 = *(_QWORD *)(v119 + 8);
                    v121 = v119 + 16;
                    v122 = (const char *)(v120 ? v120 : v121);
                    v123 = *(_QWORD *)(v111 + 8) ? *(const char **)(v111 + 8) : (const char *)(v111 + 16);
                    if (strcmp(v122, v123) < 0)
                    {
                      v151 = 0x100000;
                      v152 = 0;
                      v153 = 0;
                      v154 = 0;
                      sub_19BF8A370((uint64_t)&v151, (unsigned __int16 *)v111);
                      do
                      {
                        v124 = v111;
                        v111 = v7 + 32 * v118;
                        sub_19BF8A370(v124, (unsigned __int16 *)v111);
                        if (!v118)
                          break;
                        v118 = (v118 - 1) >> 1;
                        v125 = v7 + 32 * v118;
                        v126 = *(_QWORD *)(v125 + 8);
                        v127 = v125 + 16;
                        v128 = (const char *)(v126 ? v126 : v127);
                        v129 = (const char *)(v154 ? v154 : v155);
                      }
                      while (strcmp(v128, v129) < 0);
                      sub_19BF8A370(v111, (unsigned __int16 *)&v151);
                      if (v154 && v153 == 1)
                        free(v154);
                    }
                  }
                }
                if (v150 && v149 == 1)
                  free(v150);
              }
              while (v105-- > 2);
            }
            return;
          }
          v10 = (unsigned __int16 *)(v7 + 32 * ((unint64_t)v9 >> 1));
          v11 = a2 - 32;
          if ((unint64_t)v8 <= 0x1000)
          {
            sub_19BFE7934((uint64_t)v10, v7, v11);
          }
          else
          {
            sub_19BFE7934(v7, (uint64_t)v10, v11);
            sub_19BFE7934(v142, (uint64_t)(v10 - 16), a2 - 64);
            sub_19BFE7934(v141, (uint64_t)(v10 + 16), a2 - 96);
            sub_19BFE7934((uint64_t)(v10 - 16), (uint64_t)v10, (uint64_t)(v10 + 16));
            v151 = 0x100000;
            v152 = 0;
            v153 = 0;
            v154 = 0;
            sub_19BF8A370((uint64_t)&v151, (unsigned __int16 *)v7);
            sub_19BF8A370(v7, v10);
            sub_19BF8A370((uint64_t)v10, (unsigned __int16 *)&v151);
            if (v154 && v153 == 1)
              free(v154);
          }
          --a3;
          if ((a4 & 1) != 0
            || (*(_QWORD *)(v7 - 24) ? (v12 = *(const char **)(v7 - 24)) : (v12 = v140),
                *(_QWORD *)(v7 + 8) ? (v13 = *(const char **)(v7 + 8)) : (v13 = v139),
                strcmp(v12, v13) < 0))
          {
            v151 = 0x100000;
            v152 = 0;
            v153 = 0;
            v154 = 0;
            sub_19BF8A370((uint64_t)&v151, (unsigned __int16 *)v7);
            if (v154)
              v14 = (const char *)v154;
            else
              v14 = (const char *)v155;
            v15 = (const char *)v143;
            do
            {
              v16 = v15;
              v17 = (const char *)*((_QWORD *)v15 - 1);
              if (v17)
                v18 = v17;
              else
                v18 = v16;
              v19 = strcmp(v18, v14);
              v15 = v16 + 32;
            }
            while (v19 < 0);
            v20 = (unsigned __int16 *)(v16 - 48);
            v21 = v16 - 16;
            v22 = a2;
            if (v16 - 48 == (const char *)v7)
            {
              v28 = a2;
              while ((unint64_t)v21 < v28)
              {
                v23 = (unsigned __int16 *)(v28 - 32);
                v29 = *(const char **)(v28 - 24);
                v30 = (const char *)(v28 - 16);
                if (v29)
                  v31 = v29;
                else
                  v31 = v30;
                v32 = strcmp(v31, v14);
                v28 = (unint64_t)v23;
                if (v32 < 0)
                  goto LABEL_41;
              }
              v23 = (unsigned __int16 *)v28;
            }
            else
            {
              do
              {
                v23 = (unsigned __int16 *)(v22 - 32);
                v24 = *(const char **)(v22 - 24);
                v25 = (const char *)(v22 - 16);
                if (v24)
                  v26 = v24;
                else
                  v26 = v25;
                v27 = strcmp(v26, v14);
                v22 = (unint64_t)v23;
              }
              while ((v27 & 0x80000000) == 0);
            }
LABEL_41:
            v146 = a3;
            v33 = a2;
            if (v21 < (const char *)v23)
            {
              v34 = (unsigned __int16 *)(v16 - 16);
              v35 = v23;
              do
              {
                sub_19BFE7890(v34, v35);
                if (v154)
                  v36 = (const char *)v154;
                else
                  v36 = (const char *)v155;
                v37 = v34 + 24;
                do
                {
                  v38 = (const char *)v37;
                  v39 = (const char *)*((_QWORD *)v37 - 1);
                  if (v39)
                    v40 = v39;
                  else
                    v40 = v38;
                  v41 = strcmp(v40, v36);
                  v37 = (unsigned __int16 *)(v38 + 32);
                }
                while (v41 < 0);
                v20 = (unsigned __int16 *)(v38 - 48);
                v34 = (unsigned __int16 *)(v38 - 16);
                do
                {
                  v42 = (const char *)*((_QWORD *)v35 - 3);
                  v43 = (const char *)(v35 - 8);
                  v35 -= 16;
                  if (v42)
                    v44 = v42;
                  else
                    v44 = v43;
                }
                while ((strcmp(v44, v36) & 0x80000000) == 0);
              }
              while (v34 < v35);
            }
            if (v20 != (unsigned __int16 *)v7)
              sub_19BF8A370(v7, v20);
            sub_19BF8A370((uint64_t)v20, (unsigned __int16 *)&v151);
            a2 = v33;
            if (v154 && v153 == 1)
              free(v154);
            a3 = v146;
            if (v21 >= (const char *)v23)
            {
              v45 = sub_19BFE7C40(v7, (uint64_t)v20);
              a1 = v20 + 16;
              if (sub_19BFE7C40((uint64_t)(v20 + 16), a2))
              {
                a2 = (unint64_t)v20;
                if ((v45 & 1) == 0)
                  continue;
                return;
              }
              if ((v45 & 1) != 0)
                goto LABEL_2;
            }
            sub_19BFE6860(v7, v20, v146, a4 & 1);
            a4 = 0;
            a1 = v20 + 16;
            goto LABEL_2;
          }
          v151 = 0x100000;
          v152 = 0;
          v153 = 0;
          v154 = 0;
          sub_19BF8A370((uint64_t)&v151, (unsigned __int16 *)v7);
          if (v154)
            v46 = (const char *)v154;
          else
            v46 = (const char *)v155;
          if (*(_QWORD *)(a2 - 24))
            v47 = *(const char **)(a2 - 24);
          else
            v47 = (const char *)(a2 - 16);
          v48 = (const char *)(v7 + 48);
          if (strcmp(v46, v47) < 0)
          {
            do
            {
              if (*((_QWORD *)v48 - 1))
                v49 = (const char *)*((_QWORD *)v48 - 1);
              else
                v49 = v48;
              v48 += 32;
            }
            while ((strcmp(v46, v49) & 0x80000000) == 0);
            a1 = (unsigned __int16 *)(v48 - 48);
          }
          else
          {
            do
            {
              a1 = (unsigned __int16 *)(v48 - 16);
              if ((unint64_t)(v48 - 16) >= a2)
                break;
              v50 = *((_QWORD *)v48 - 1) ? (const char *)*((_QWORD *)v48 - 1) : v48;
              v48 += 32;
            }
            while ((strcmp(v46, v50) & 0x80000000) == 0);
          }
          v51 = (unsigned __int16 *)a2;
          if ((unint64_t)a1 < a2)
          {
            v52 = a2;
            do
            {
              v51 = (unsigned __int16 *)(v52 - 32);
              v53 = *(const char **)(v52 - 24);
              v54 = (const char *)(v52 - 16);
              if (v53)
                v55 = v53;
              else
                v55 = v54;
              v56 = strcmp(v46, v55);
              v52 = (unint64_t)v51;
            }
            while (v56 < 0);
          }
          while (a1 < v51)
          {
            sub_19BFE7890(a1, v51);
            if (v154)
              v57 = (const char *)v154;
            else
              v57 = (const char *)v155;
            v58 = a1 + 24;
            do
            {
              v59 = (const char *)v58;
              v60 = (const char *)*((_QWORD *)v58 - 1);
              if (v60)
                v61 = v60;
              else
                v61 = v59;
              v62 = strcmp(v57, v61);
              v58 = (unsigned __int16 *)(v59 + 32);
            }
            while ((v62 & 0x80000000) == 0);
            a1 = (unsigned __int16 *)(v59 - 16);
            do
            {
              v63 = (const char *)*((_QWORD *)v51 - 3);
              v64 = (const char *)(v51 - 8);
              v51 -= 16;
              if (v63)
                v65 = v63;
              else
                v65 = v64;
            }
            while (strcmp(v57, v65) < 0);
          }
          if (a1 - 16 != (unsigned __int16 *)v7)
            sub_19BF8A370(v7, a1 - 16);
          sub_19BF8A370((uint64_t)(a1 - 16), (unsigned __int16 *)&v151);
          if (v154 && v153 == 1)
            free(v154);
          a4 = 0;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if (v7 != a2)
          {
            v68 = v7 + 32;
            if (v7 + 32 != a2)
            {
              v69 = 0;
              v70 = v7;
              do
              {
                v71 = *(const char **)(v70 + 40);
                v72 = (const char *)(v70 + 48);
                v73 = *(const char **)(v70 + 8);
                v74 = (const char *)(v70 + 16);
                v70 = v68;
                if (v71)
                  v75 = v71;
                else
                  v75 = v72;
                if (v73)
                  v76 = v73;
                else
                  v76 = v74;
                if (strcmp(v75, v76) < 0)
                {
                  v151 = 0x100000;
                  v152 = 0;
                  v153 = 0;
                  v154 = 0;
                  sub_19BF8A370((uint64_t)&v151, (unsigned __int16 *)v70);
                  v77 = v69;
                  while (1)
                  {
                    v78 = v7 + v77;
                    sub_19BF8A370(v7 + v77 + 32, (unsigned __int16 *)(v7 + v77));
                    if (!v77)
                      break;
                    if (v154)
                      v79 = (const char *)v154;
                    else
                      v79 = (const char *)v155;
                    if (*(_QWORD *)(v78 - 24))
                      v80 = *(const char **)(v78 - 24);
                    else
                      v80 = (const char *)(v78 - 16);
                    v77 -= 32;
                    if ((strcmp(v79, v80) & 0x80000000) == 0)
                    {
                      v81 = v7 + v77 + 32;
                      goto LABEL_146;
                    }
                  }
                  v81 = v7;
LABEL_146:
                  sub_19BF8A370(v81, (unsigned __int16 *)&v151);
                  if (v154)
                    v82 = v153 == 1;
                  else
                    v82 = 0;
                  if (v82)
                    free(v154);
                }
                v68 = v70 + 32;
                v69 += 32;
              }
              while (v70 + 32 != a2);
            }
          }
        }
        else if (v7 != a2)
        {
          v132 = (unsigned __int16 *)(v7 + 32);
          if (v7 + 32 != a2)
          {
            do
            {
              v133 = v132;
              if (*(_QWORD *)(v7 + 40))
                v134 = *(const char **)(v7 + 40);
              else
                v134 = (const char *)(v7 + 48);
              if (*(_QWORD *)(v7 + 8))
                v135 = *(const char **)(v7 + 8);
              else
                v135 = (const char *)(v7 + 16);
              if (strcmp(v134, v135) < 0)
              {
                v151 = 0x100000;
                v152 = 0;
                v153 = 0;
                v154 = 0;
                sub_19BF8A370((uint64_t)&v151, v133);
                do
                {
                  v136 = v7;
                  sub_19BF8A370(v7 + 32, (unsigned __int16 *)v7);
                  v7 -= 32;
                  if (v154)
                    v137 = (const char *)v154;
                  else
                    v137 = (const char *)v155;
                  if (*(_QWORD *)(v136 - 24))
                    v138 = *(const char **)(v136 - 24);
                  else
                    v138 = (const char *)(v136 - 16);
                }
                while (strcmp(v137, v138) < 0);
                sub_19BF8A370(v136, (unsigned __int16 *)&v151);
                if (v154)
                {
                  if (v153 == 1)
                    free(v154);
                }
              }
              v132 = v133 + 16;
              v7 = (uint64_t)v133;
            }
            while (v133 + 16 != (unsigned __int16 *)a2);
          }
        }
        return;
    }
  }
}

uint64_t sub_19BFE735C(uint64_t a1, unsigned __int16 **a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned __int16 *v6;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  LODWORD(v4) = 0;
  v5 = (_QWORD *)(a1 + 32);
  do
  {
    v6 = sub_19BFE7780(v5, v2);
    if (!v6)
      __assert_rtn("convert_combining_classes_to_bits_block_invoke", "UnigramsCompiler.cpp", 370, "class_ids.count(class_name)");
    v4 = (1 << *((_DWORD *)v6 + 12)) | v4;
    v2 += 16;
  }
  while (v2 != v3);
  return v4;
}

uint64_t sub_19BFE73F0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int16 *i;
  unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int16 **v12;
  unsigned __int16 *j;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26[2];
  char v27;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_19BFD1648(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int16 **)(a2 + 16); i; i = *(unsigned __int16 **)i)
  {
    if (*((_QWORD *)i + 3))
      v6 = (unsigned __int8 *)*((_QWORD *)i + 3);
    else
      v6 = (unsigned __int8 *)(i + 16);
    v7 = sub_19BFF79A0(v6, i[8]);
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (v9)
    {
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
      v10.i16[0] = vaddlv_u8(v10);
      v11 = v10.u32[0];
      if (v10.u32[0] > 1uLL)
      {
        v2 = v7;
        if (v9 <= v7)
          v2 = v7 % v9;
      }
      else
      {
        v2 = ((_DWORD)v9 - 1) & v7;
      }
      v12 = *(unsigned __int16 ***)(*(_QWORD *)a1 + 8 * v2);
      if (v12)
      {
        for (j = *v12; j; j = *(unsigned __int16 **)j)
        {
          v14 = *((_QWORD *)j + 1);
          if (v14 == v8)
          {
            if (j == i || sub_19BFF7920(j + 8, i + 8))
              goto LABEL_44;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v2)
              break;
          }
        }
      }
    }
    v15 = operator new(0x38uLL);
    v26[0] = (uint64_t)v15;
    v26[1] = a1 + 16;
    v27 = 0;
    *v15 = 0;
    v15[1] = v8;
    sub_19BF86B60((uint64_t)(v15 + 2), i + 8);
    *((_DWORD *)v15 + 12) = *((_DWORD *)i + 12);
    v27 = 1;
    v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v17 = *(float *)(a1 + 32);
    if (!v9 || (float)(v17 * (float)v9) < v16)
    {
      v18 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3)
        v18 = 1;
      v19 = v18 | (2 * v9);
      v20 = vcvtps_u32_f32(v16 / v17);
      if (v19 <= v20)
        v21 = v20;
      else
        v21 = v19;
      sub_19BFD1648(a1, v21);
      v9 = *(_QWORD *)(a1 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v9 <= v8)
          v2 = v8 % v9;
        else
          v2 = v8;
      }
      else
      {
        v2 = ((_DWORD)v9 - 1) & v8;
      }
    }
    v22 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v2);
    v23 = v26[0];
    if (v22)
    {
      *(_QWORD *)v26[0] = *v22;
    }
    else
    {
      *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v23;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
      if (!*(_QWORD *)v23)
        goto LABEL_43;
      v24 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9)
          v24 %= v9;
      }
      else
      {
        v24 &= v9 - 1;
      }
      v22 = (uint64_t *)(*(_QWORD *)a1 + 8 * v24);
    }
    *v22 = v23;
LABEL_43:
    v26[0] = 0;
    ++*(_QWORD *)(a1 + 24);
    sub_19BFE7718(v26);
LABEL_44:
    ;
  }
  return a1;
}

void sub_19BFE7680(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFE76AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFE76AC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    v4 = (void *)v3[3];
    if (v4 && *((_BYTE *)v3 + 22) == 1)
      free(v4);
    operator delete(v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void sub_19BFE7718(uint64_t *a1)
{
  uint64_t v1;
  void *v2;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v2 = *(void **)(v1 + 24);
      if (v2)
      {
        if (*(_BYTE *)(v1 + 22) == 1)
          free(v2);
      }
    }
    operator delete((void *)v1);
  }
}

uint64_t sub_19BFE776C(uint64_t a1, uint64_t a2)
{
  return sub_19BFE73F0(a1 + 32, a2 + 32);
}

uint64_t sub_19BFE7778(uint64_t a1)
{
  return sub_19BFE76AC(a1 + 32);
}

unsigned __int16 *sub_19BFE7780(_QWORD *a1, unsigned __int16 *a2)
{
  unsigned __int8 *v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 **v11;
  unsigned __int16 *i;
  unint64_t v13;

  if (*((_QWORD *)a2 + 1))
    v4 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  else
    v4 = (unsigned __int8 *)(a2 + 8);
  v5 = sub_19BFF79A0(v4, *a2);
  v6 = a1[1];
  if (!v6)
    return 0;
  v7 = v5;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v5;
    if (v6 <= v5)
      v10 = v5 % v6;
  }
  else
  {
    v10 = ((_DWORD)v6 - 1) & v5;
  }
  v11 = *(unsigned __int16 ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  for (i = *v11; i; i = *(unsigned __int16 **)i)
  {
    v13 = *((_QWORD *)i + 1);
    if (v13 == v7)
    {
      if (i + 8 == a2 || sub_19BFF7920(i + 8, a2))
        return i;
    }
    else
    {
      if (v9 > 1)
      {
        if (v13 >= v6)
          v13 %= v6;
      }
      else
      {
        v13 &= v6 - 1;
      }
      if (v13 != v10)
        return 0;
    }
  }
  return i;
}

void sub_19BFE7890(unsigned __int16 *a1, unsigned __int16 *a2)
{
  BOOL v4;
  int v5;
  __int16 v6;
  char v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = 0x100000;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_19BF8A370((uint64_t)&v5, a1);
  sub_19BF8A370((uint64_t)a1, a2);
  sub_19BF8A370((uint64_t)a2, (unsigned __int16 *)&v5);
  if (v8)
    v4 = v7 == 1;
  else
    v4 = 0;
  if (v4)
    free(v8);
}

void sub_19BFE7934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  int v10;
  const char *v11;
  int v12;
  unsigned __int16 *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;

  v6 = (const char *)(a2 + 16);
  if (*(_QWORD *)(a2 + 8))
    v7 = *(const char **)(a2 + 8);
  else
    v7 = (const char *)(a2 + 16);
  v8 = a1 + 16;
  if (*(_QWORD *)(a1 + 8))
    v9 = *(const char **)(a1 + 8);
  else
    v9 = (const char *)(a1 + 16);
  v10 = strcmp(v7, v9);
  if (*(_QWORD *)(a3 + 8))
    v11 = *(const char **)(a3 + 8);
  else
    v11 = (const char *)(a3 + 16);
  v12 = strcmp(v11, v7);
  if (v10 < 0)
  {
    if (v12 < 0)
    {
      v13 = (unsigned __int16 *)a1;
LABEL_30:
      sub_19BFE7890(v13, (unsigned __int16 *)a3);
      return;
    }
    sub_19BFE7890((unsigned __int16 *)a1, (unsigned __int16 *)a2);
    if (*(_QWORD *)(a3 + 8))
      v16 = *(const char **)(a3 + 8);
    else
      v16 = (const char *)(a3 + 16);
    if (*(_QWORD *)(a2 + 8))
      v17 = *(const char **)(a2 + 8);
    else
      v17 = v6;
    if (strcmp(v16, v17) < 0)
    {
      v13 = (unsigned __int16 *)a2;
      goto LABEL_30;
    }
  }
  else if (v12 < 0)
  {
    sub_19BFE7890((unsigned __int16 *)a2, (unsigned __int16 *)a3);
    v14 = *(_QWORD *)(a2 + 8) ? *(const char **)(a2 + 8) : v6;
    v15 = *(_QWORD *)(a1 + 8) ? *(const char **)(a1 + 8) : (const char *)v8;
    if (strcmp(v14, v15) < 0)
      sub_19BFE7890((unsigned __int16 *)a1, (unsigned __int16 *)a2);
  }
}

void sub_19BFE7A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;

  sub_19BFE7934(a1, a2, a3);
  if (*(_QWORD *)(a4 + 8))
    v8 = *(const char **)(a4 + 8);
  else
    v8 = (const char *)(a4 + 16);
  if (*(_QWORD *)(a3 + 8))
    v9 = *(const char **)(a3 + 8);
  else
    v9 = (const char *)(a3 + 16);
  if (strcmp(v8, v9) < 0)
  {
    sub_19BFE7890((unsigned __int16 *)a3, (unsigned __int16 *)a4);
    v10 = *(_QWORD *)(a3 + 8) ? *(const char **)(a3 + 8) : (const char *)(a3 + 16);
    v11 = *(_QWORD *)(a2 + 8) ? *(const char **)(a2 + 8) : (const char *)(a2 + 16);
    if (strcmp(v10, v11) < 0)
    {
      sub_19BFE7890((unsigned __int16 *)a2, (unsigned __int16 *)a3);
      if (*(_QWORD *)(a2 + 8))
        v12 = *(const char **)(a2 + 8);
      else
        v12 = (const char *)(a2 + 16);
      if (*(_QWORD *)(a1 + 8))
        v13 = *(const char **)(a1 + 8);
      else
        v13 = (const char *)(a1 + 16);
      if (strcmp(v12, v13) < 0)
        sub_19BFE7890((unsigned __int16 *)a1, (unsigned __int16 *)a2);
    }
  }
}

void sub_19BFE7B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;

  sub_19BFE7A4C(a1, a2, a3, a4);
  if (*(_QWORD *)(a5 + 8))
    v10 = *(const char **)(a5 + 8);
  else
    v10 = (const char *)(a5 + 16);
  if (*(_QWORD *)(a4 + 8))
    v11 = *(const char **)(a4 + 8);
  else
    v11 = (const char *)(a4 + 16);
  if (strcmp(v10, v11) < 0)
  {
    sub_19BFE7890((unsigned __int16 *)a4, (unsigned __int16 *)a5);
    v12 = *(_QWORD *)(a4 + 8) ? *(const char **)(a4 + 8) : (const char *)(a4 + 16);
    v13 = *(_QWORD *)(a3 + 8) ? *(const char **)(a3 + 8) : (const char *)(a3 + 16);
    if (strcmp(v12, v13) < 0)
    {
      sub_19BFE7890((unsigned __int16 *)a3, (unsigned __int16 *)a4);
      v14 = *(_QWORD *)(a3 + 8) ? *(const char **)(a3 + 8) : (const char *)(a3 + 16);
      v15 = *(_QWORD *)(a2 + 8) ? *(const char **)(a2 + 8) : (const char *)(a2 + 16);
      if (strcmp(v14, v15) < 0)
      {
        sub_19BFE7890((unsigned __int16 *)a2, (unsigned __int16 *)a3);
        if (*(_QWORD *)(a2 + 8))
          v16 = *(const char **)(a2 + 8);
        else
          v16 = (const char *)(a2 + 16);
        if (*(_QWORD *)(a1 + 8))
          v17 = *(const char **)(a1 + 8);
        else
          v17 = (const char *)(a1 + 16);
        if (strcmp(v16, v17) < 0)
          sub_19BFE7890((unsigned __int16 *)a1, (unsigned __int16 *)a2);
      }
    }
  }
}

uint64_t sub_19BFE7C40(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  int v19;
  __int16 v20;
  char v21;
  void *v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v4 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*(_QWORD *)(a2 - 24))
        v5 = *(const char **)(a2 - 24);
      else
        v5 = (const char *)(a2 - 16);
      if (*(_QWORD *)(a1 + 8))
        v6 = *(const char **)(a1 + 8);
      else
        v6 = (const char *)(a1 + 16);
      if (strcmp(v5, v6) < 0)
        sub_19BFE7890((unsigned __int16 *)a1, (unsigned __int16 *)(a2 - 32));
      return v4;
    case 3:
      sub_19BFE7934(a1, a1 + 32, a2 - 32);
      return v4;
    case 4:
      sub_19BFE7A4C(a1, a1 + 32, a1 + 64, a2 - 32);
      return v4;
    case 5:
      sub_19BFE7B2C(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return v4;
    default:
      v7 = a1 + 64;
      sub_19BFE7934(a1, a1 + 32, a1 + 64);
      v8 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_QWORD *)(v8 + 8) ? *(const char **)(v8 + 8) : (const char *)(v8 + 16);
    v12 = *(_QWORD *)(v7 + 8) ? *(const char **)(v7 + 8) : (const char *)(v7 + 16);
    if (strcmp(v11, v12) < 0)
      break;
LABEL_34:
    v7 = v8;
    v9 += 32;
    v8 += 32;
    if (v8 == a2)
      return 1;
  }
  v19 = 0x100000;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_19BF8A370((uint64_t)&v19, (unsigned __int16 *)v8);
  v13 = v9;
  while (1)
  {
    v14 = a1 + v13;
    sub_19BF8A370(a1 + v13 + 96, (unsigned __int16 *)(a1 + v13 + 64));
    if (v13 == -64)
      break;
    if (v22)
      v15 = (const char *)v22;
    else
      v15 = (const char *)v23;
    if (*(_QWORD *)(v14 + 40))
      v16 = *(const char **)(v14 + 40);
    else
      v16 = (const char *)(v14 + 48);
    v13 -= 32;
    if ((strcmp(v15, v16) & 0x80000000) == 0)
    {
      v17 = a1 + v13 + 96;
      goto LABEL_30;
    }
  }
  v17 = a1;
LABEL_30:
  sub_19BF8A370(v17, (unsigned __int16 *)&v19);
  if (++v10 != 8)
  {
    if (v22 && v21 == 1)
      free(v22);
    goto LABEL_34;
  }
  v4 = v8 + 32 == a2;
  if (v22 && v21 == 1)
    free(v22);
  return v4;
}

char *sub_19BFE7EA0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_19BF8EB40();
  result = (char *)sub_19BFD1894(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void sub_19BFE7EDC(uint64_t a1)
{
  unsigned int *v1;

  v1 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_19BFBF83C(v1 + 4);
    operator delete(v1);
  }
}

uint64_t sub_19BFE7F20(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t i;
  unint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD **v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *j;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  void *v36;
  uint64_t v37[2];
  char v38;

  v4 = (unsigned __int8 *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v6 = v5;
  }
  v7 = sub_19BFCF130((uint64_t *)a1, v6);
  v8 = v7;
  v9 = *((_QWORD *)&xmmword_1ED024100 + 1);
  if (*((_QWORD *)&xmmword_1ED024100 + 1))
  {
    v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1ED024100 + 8));
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= *((_QWORD *)&xmmword_1ED024100 + 1))
        v2 = v7 % *((_QWORD *)&xmmword_1ED024100 + 1);
    }
    else
    {
      v2 = (*((_QWORD *)&xmmword_1ED024100 + 1) - 1) & v7;
    }
    v12 = *(uint64_t **)(xmmword_1ED024100 + 8 * v2);
    if (v12)
    {
      for (i = *v12; i; i = *(_QWORD *)i)
      {
        v14 = *(_QWORD *)(i + 8);
        if (v14 == v8)
        {
          if (sub_19BFBB9E8((unsigned __int8 *)(i + 16), v4))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v2)
            break;
        }
      }
    }
  }
  v15 = operator new(0x38uLL);
  v37[0] = (uint64_t)v15;
  v37[1] = (uint64_t)&qword_1ED024110;
  v38 = 0;
  *v15 = 0;
  v15[1] = v8;
  v16 = v15 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19BF8CD70(v16, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)a2;
    v15[4] = *(_QWORD *)(a2 + 16);
  }
  v15[5] = 0;
  v15[6] = 0;
  v38 = 1;
  v17 = (float)(unint64_t)(qword_1ED024118 + 1);
  if (!v9 || (float)(*(float *)&xmmword_1ED024120 * (float)v9) < v17)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v17 / *(float *)&xmmword_1ED024120);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *((_QWORD *)&xmmword_1ED024100 + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&xmmword_1ED024100 + 1))
      goto LABEL_36;
    if (*(_QWORD *)&prime < *((_QWORD *)&xmmword_1ED024100 + 1))
    {
      v28 = vcvtps_u32_f32((float)(unint64_t)qword_1ED024118 / *(float *)&xmmword_1ED024120);
      if (*((_QWORD *)&xmmword_1ED024100 + 1) < 3uLL
        || (v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1ED024100 + 8)),
            v29.i16[0] = vaddlv_u8(v29),
            v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)&xmmword_1ED024100 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(_QWORD *)&prime >> 61)
            sub_19BF8E6D0();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = (void *)xmmword_1ED024100;
          *(_QWORD *)&xmmword_1ED024100 = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)&xmmword_1ED024100 + 1) = prime;
          do
            *(_QWORD *)(xmmword_1ED024100 + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD **)qword_1ED024110;
          if (qword_1ED024110)
          {
            v26 = *(_QWORD *)(qword_1ED024110 + 8);
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(xmmword_1ED024100 + 8 * v26) = &qword_1ED024110;
            for (j = *v25; j; v26 = v32)
            {
              v32 = j[1];
              if (v27.u32[0] > 1uLL)
              {
                if (v32 >= *(_QWORD *)&prime)
                  v32 %= *(_QWORD *)&prime;
              }
              else
              {
                v32 &= *(_QWORD *)&prime - 1;
              }
              if (v32 != v26)
              {
                if (!*(_QWORD *)(xmmword_1ED024100 + 8 * v32))
                {
                  *(_QWORD *)(xmmword_1ED024100 + 8 * v32) = v25;
                  goto LABEL_61;
                }
                *v25 = (_QWORD *)*j;
                *j = **(_QWORD **)(xmmword_1ED024100 + 8 * v32);
                **(_QWORD **)(xmmword_1ED024100 + 8 * v32) = j;
                j = v25;
              }
              v32 = v26;
LABEL_61:
              v25 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_65;
        }
        v36 = (void *)xmmword_1ED024100;
        *(_QWORD *)&xmmword_1ED024100 = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        *((_QWORD *)&xmmword_1ED024100 + 1) = 0;
      }
    }
LABEL_65:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v33 = *(uint64_t **)(xmmword_1ED024100 + 8 * v2);
  i = v37[0];
  if (v33)
  {
    *(_QWORD *)v37[0] = *v33;
LABEL_78:
    *v33 = i;
    goto LABEL_79;
  }
  *(_QWORD *)v37[0] = qword_1ED024110;
  qword_1ED024110 = i;
  *(_QWORD *)(xmmword_1ED024100 + 8 * v2) = &qword_1ED024110;
  if (*(_QWORD *)i)
  {
    v34 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (uint64_t *)(xmmword_1ED024100 + 8 * v34);
    goto LABEL_78;
  }
LABEL_79:
  v37[0] = 0;
  ++qword_1ED024118;
  sub_19BFE8AB8(v37);
  return i;
}

void sub_19BFE8398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFE8AB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19BFE83B0(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v3 = (unsigned __int8 *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v5 = v4;
  }
  v6 = sub_19BFCF130((uint64_t *)a1, v5);
  v7 = qword_1ED024130;
  if (qword_1ED024130)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1ED024130);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= qword_1ED024130)
        v11 = v6 % qword_1ED024130;
    }
    else
    {
      v11 = (qword_1ED024130 - 1) & v6;
    }
    v12 = *(unsigned __int8 ***)(*((_QWORD *)&xmmword_1ED024120 + 1) + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v8 == v14)
        {
          if (sub_19BFBB9E8(i + 16, v3))
          {
            v15 = sub_19BFE8590((uint64_t)v3, (uint64_t)v3);
            v16 = *(uint64_t **)(v15 + 40);
            v17 = *(uint64_t **)(v15 + 48);
            while (v16 != v17)
            {
              v18 = (std::__shared_weak_count *)v16[1];
              if (v18)
              {
                v19 = std::__shared_weak_count::lock(v18);
                v30 = v19;
                if (v19)
                {
                  v20 = v19;
                  v21 = *v16;
                  v29 = v21;
                  if (v21)
                  {
                    v22 = (std::__shared_weak_count *)a2[1];
                    v27 = *a2;
                    v28 = v22;
                    if (v22)
                    {
                      p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
                      do
                        v24 = __ldxr(p_shared_weak_owners);
                      while (__stxr(v24 + 1, p_shared_weak_owners));
                    }
                    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 16))(v21, &v27);
                    if (v28)
                      std::__shared_weak_count::__release_weak(v28);
                  }
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v26 = __ldaxr(p_shared_owners);
                  while (__stlxr(v26 - 1, p_shared_owners));
                  if (!v26)
                  {
                    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                    std::__shared_weak_count::__release_weak(v20);
                  }
                }
              }
              v16 += 2;
            }
            return;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v7)
              v14 %= v7;
          }
          else
          {
            v14 &= v7 - 1;
          }
          if (v14 != v11)
            return;
        }
      }
    }
  }
}

void sub_19BFE8570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  sub_19BFACCEC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFE8590(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t i;
  unint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD **v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *j;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  void *v36;
  uint64_t v37[2];
  char v38;

  v4 = (unsigned __int8 *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v6 = v5;
  }
  v7 = sub_19BFCF130((uint64_t *)a1, v6);
  v8 = v7;
  v9 = qword_1ED024130;
  if (qword_1ED024130)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1ED024130);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= qword_1ED024130)
        v2 = v7 % qword_1ED024130;
    }
    else
    {
      v2 = (qword_1ED024130 - 1) & v7;
    }
    v12 = *(uint64_t **)(*((_QWORD *)&xmmword_1ED024120 + 1) + 8 * v2);
    if (v12)
    {
      for (i = *v12; i; i = *(_QWORD *)i)
      {
        v14 = *(_QWORD *)(i + 8);
        if (v14 == v8)
        {
          if (sub_19BFBB9E8((unsigned __int8 *)(i + 16), v4))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v2)
            break;
        }
      }
    }
  }
  v15 = operator new(0x40uLL);
  v37[0] = (uint64_t)v15;
  v37[1] = (uint64_t)&qword_1ED024138;
  v38 = 0;
  *v15 = 0;
  v15[1] = v8;
  v16 = v15 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19BF8CD70(v16, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)a2;
    v15[4] = *(_QWORD *)(a2 + 16);
  }
  v15[5] = 0;
  v15[6] = 0;
  v15[7] = 0;
  v38 = 1;
  v17 = (float)(unint64_t)(xmmword_1ED024140 + 1);
  if (!v9 || (float)(*((float *)&xmmword_1ED024140 + 2) * (float)v9) < v17)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v17 / *((float *)&xmmword_1ED024140 + 2));
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v9 = qword_1ED024130;
    if (prime > qword_1ED024130)
      goto LABEL_36;
    if (prime < qword_1ED024130)
    {
      v28 = vcvtps_u32_f32((float)(unint64_t)xmmword_1ED024140 / *((float *)&xmmword_1ED024140 + 2));
      if ((unint64_t)qword_1ED024130 < 3
        || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1ED024130), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime >= v9)
      {
        v9 = qword_1ED024130;
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (prime >> 61)
            sub_19BF8E6D0();
          v22 = operator new(8 * prime);
          v23 = (void *)*((_QWORD *)&xmmword_1ED024120 + 1);
          *((_QWORD *)&xmmword_1ED024120 + 1) = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          qword_1ED024130 = prime;
          do
            *(_QWORD *)(*((_QWORD *)&xmmword_1ED024120 + 1) + 8 * v24++) = 0;
          while (prime != v24);
          v25 = (_QWORD **)qword_1ED024138;
          if (qword_1ED024138)
          {
            v26 = *(_QWORD *)(qword_1ED024138 + 8);
            v27 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= prime)
                v26 %= prime;
            }
            else
            {
              v26 &= prime - 1;
            }
            *(_QWORD *)(*((_QWORD *)&xmmword_1ED024120 + 1) + 8 * v26) = &qword_1ED024138;
            for (j = *v25; j; v26 = v32)
            {
              v32 = j[1];
              if (v27.u32[0] > 1uLL)
              {
                if (v32 >= prime)
                  v32 %= prime;
              }
              else
              {
                v32 &= prime - 1;
              }
              if (v32 != v26)
              {
                if (!*(_QWORD *)(*((_QWORD *)&xmmword_1ED024120 + 1) + 8 * v32))
                {
                  *(_QWORD *)(*((_QWORD *)&xmmword_1ED024120 + 1) + 8 * v32) = v25;
                  goto LABEL_61;
                }
                *v25 = (_QWORD *)*j;
                *j = **(_QWORD **)(*((_QWORD *)&xmmword_1ED024120 + 1) + 8 * v32);
                **(_QWORD **)(*((_QWORD *)&xmmword_1ED024120 + 1) + 8 * v32) = j;
                j = v25;
              }
              v32 = v26;
LABEL_61:
              v25 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v9 = prime;
          goto LABEL_65;
        }
        v36 = (void *)*((_QWORD *)&xmmword_1ED024120 + 1);
        *((_QWORD *)&xmmword_1ED024120 + 1) = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        qword_1ED024130 = 0;
      }
    }
LABEL_65:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v33 = *(uint64_t **)(*((_QWORD *)&xmmword_1ED024120 + 1) + 8 * v2);
  i = v37[0];
  if (v33)
  {
    *(_QWORD *)v37[0] = *v33;
LABEL_78:
    *v33 = i;
    goto LABEL_79;
  }
  *(_QWORD *)v37[0] = qword_1ED024138;
  qword_1ED024138 = i;
  *(_QWORD *)(*((_QWORD *)&xmmword_1ED024120 + 1) + 8 * v2) = &qword_1ED024138;
  if (*(_QWORD *)i)
  {
    v34 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (uint64_t *)(*((_QWORD *)&xmmword_1ED024120 + 1) + 8 * v34);
    goto LABEL_78;
  }
LABEL_79:
  v37[0] = 0;
  *(_QWORD *)&xmmword_1ED024140 = xmmword_1ED024140 + 1;
  sub_19BFE8A24(v37);
  return i;
}

void sub_19BFE8A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFE8A24((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19BFE8A24(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v2 = *(_QWORD *)(v1 + 40);
      if (v2)
      {
        v3 = *(_QWORD *)(v1 + 48);
        v4 = *(void **)(v1 + 40);
        if (v3 != v2)
        {
          do
          {
            v5 = *(std::__shared_weak_count **)(v3 - 8);
            if (v5)
              std::__shared_weak_count::__release_weak(v5);
            v3 -= 16;
          }
          while (v3 != v2);
          v4 = *(void **)(v1 + 40);
        }
        *(_QWORD *)(v1 + 48) = v2;
        operator delete(v4);
      }
      if (*(char *)(v1 + 39) < 0)
        operator delete(*(void **)(v1 + 16));
    }
    operator delete((void *)v1);
  }
}

void sub_19BFE8AB8(uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v2 = *(std::__shared_weak_count **)(v1 + 48);
      if (v2)
        std::__shared_weak_count::__release_weak(v2);
      if (*(char *)(v1 + 39) < 0)
        operator delete(*(void **)(v1 + 16));
    }
    operator delete((void *)v1);
  }
}

uint64_t sub_19BFE8B10(unsigned int *a1, CFDictionaryRef theDict)
{
  const __CFString *Value;
  const __CFNumber *v5;
  const __CFNumber *v6;
  CFTypeID v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFTypeID v10;
  CFLocaleRef v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  unint64_t v49;
  int v50;
  char *v51;
  int v52;
  int v53;
  CFIndex v54;
  const void *ValueAtIndex;
  CFTypeID v56;
  const __CFString *v57;
  const __CFString *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  CFTypeID v62;
  CFTypeID v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  char *v68;
  _DWORD *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  int v77;
  int v78;
  unint64_t v79;
  char *v80;
  _DWORD *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  int v89;
  int v90;
  unint64_t v91;
  char *v92;
  _DWORD *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  int v101;
  unint64_t v102;
  _OWORD *v103;
  unsigned int v104;
  _OWORD *v105;
  _OWORD *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  unsigned int v113;
  _OWORD *v114;
  char *v115;
  __int16 v116;
  unsigned int v117;
  void *v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *p_shared_owners;
  unint64_t v133;
  _OWORD *v134;
  int v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  void *__p[2];
  char v141;
  int valuePtr;
  char *v143;
  _BYTE v144[24];
  unsigned int *v145;
  _QWORD v146[3];
  char v147;
  __int128 v148;
  __int128 v149;
  unsigned __int16 v150[3];
  char v151;
  void *v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("Locale"));
  if (!sub_19BFE9590(Value))
    return 0;
  v5 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NonStemSuffixCount"));
  if (!v5)
    return 0;
  v6 = v5;
  v7 = CFGetTypeID(v5);
  if (v7 != CFNumberGetTypeID())
    return 0;
  v8 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("StemSuffixClasses"));
  if (!v8)
    return 0;
  v9 = v8;
  v10 = CFGetTypeID(v8);
  if (v10 != CFArrayGetTypeID())
    return 0;
  valuePtr = 0;
  CFNumberGetValue(v6, kCFNumberSInt32Type, &valuePtr);
  if (valuePtr < 1)
    return 0;
  v11 = CFLocaleCreate(0, Value);
  sub_19BFC0928((const void **)a1 + 16, v11);
  *a1 = CFArrayGetCount(v9);
  v13 = (char *)*((_QWORD *)a1 + 2);
  v12 = *((_QWORD *)a1 + 3);
  if ((unint64_t)v13 >= v12)
  {
    v17 = (char *)*((_QWORD *)a1 + 1);
    v18 = (v13 - v17) >> 2;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62)
      sub_19BF8EB40();
    v20 = v12 - (_QWORD)v17;
    if (v20 >> 1 > v19)
      v19 = v20 >> 1;
    v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL;
    v22 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v21)
      v22 = v19;
    if (v22)
    {
      v22 = (unint64_t)sub_19BFB3588(v22);
      v17 = (char *)*((_QWORD *)a1 + 1);
      v13 = (char *)*((_QWORD *)a1 + 2);
    }
    else
    {
      v23 = 0;
    }
    v24 = (_DWORD *)(v22 + 4 * v18);
    v25 = v22 + 4 * v23;
    *v24 = 0;
    v14 = v24 + 1;
    while (v13 != v17)
    {
      v26 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *--v24 = v26;
    }
    *((_QWORD *)a1 + 1) = v24;
    *((_QWORD *)a1 + 2) = v14;
    *((_QWORD *)a1 + 3) = v25;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *(_DWORD *)v13 = 0;
    v14 = v13 + 4;
  }
  *((_QWORD *)a1 + 2) = v14;
  v28 = (char *)*((_QWORD *)a1 + 5);
  v27 = *((_QWORD *)a1 + 6);
  if ((unint64_t)v28 >= v27)
  {
    v30 = (char *)*((_QWORD *)a1 + 4);
    v31 = (v28 - v30) >> 2;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62)
      sub_19BF8EB40();
    v33 = v27 - (_QWORD)v30;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    v21 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL;
    v34 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v21)
      v34 = v32;
    if (v34)
    {
      v34 = (unint64_t)sub_19BFB3588(v34);
      v30 = (char *)*((_QWORD *)a1 + 4);
      v28 = (char *)*((_QWORD *)a1 + 5);
    }
    else
    {
      v35 = 0;
    }
    v36 = (_DWORD *)(v34 + 4 * v31);
    v37 = v34 + 4 * v35;
    *v36 = 0;
    v29 = v36 + 1;
    while (v28 != v30)
    {
      v38 = *((_DWORD *)v28 - 1);
      v28 -= 4;
      *--v36 = v38;
    }
    *((_QWORD *)a1 + 4) = v36;
    *((_QWORD *)a1 + 5) = v29;
    *((_QWORD *)a1 + 6) = v37;
    if (v30)
      operator delete(v30);
  }
  else
  {
    *(_DWORD *)v28 = 0;
    v29 = v28 + 4;
  }
  *((_QWORD *)a1 + 5) = v29;
  v40 = (char *)*((_QWORD *)a1 + 8);
  v39 = *((_QWORD *)a1 + 9);
  if ((unint64_t)v40 >= v39)
  {
    v42 = (char *)*((_QWORD *)a1 + 7);
    v43 = (v40 - v42) >> 2;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 62)
      sub_19BF8EB40();
    v45 = v39 - (_QWORD)v42;
    if (v45 >> 1 > v44)
      v44 = v45 >> 1;
    v21 = (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL;
    v46 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v21)
      v46 = v44;
    if (v46)
    {
      v46 = (unint64_t)sub_19BFB3588(v46);
      v42 = (char *)*((_QWORD *)a1 + 7);
      v40 = (char *)*((_QWORD *)a1 + 8);
    }
    else
    {
      v47 = 0;
    }
    v48 = (_DWORD *)(v46 + 4 * v43);
    v49 = v46 + 4 * v47;
    *v48 = 0;
    v41 = v48 + 1;
    while (v40 != v42)
    {
      v50 = *((_DWORD *)v40 - 1);
      v40 -= 4;
      *--v48 = v50;
    }
    *((_QWORD *)a1 + 7) = v48;
    *((_QWORD *)a1 + 8) = v41;
    *((_QWORD *)a1 + 9) = v49;
    if (v42)
      operator delete(v42);
  }
  else
  {
    *(_DWORD *)v40 = 0;
    v41 = v40 + 4;
  }
  *((_QWORD *)a1 + 8) = v41;
  sub_19BF87140(Value, __p);
  if (v141 >= 0)
    v51 = (char *)__p;
  else
    v51 = (char *)__p[0];
  sub_19BF87864(&v138, v51);
  if (*a1)
  {
    v135 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v9, v54);
      v56 = CFGetTypeID(ValueAtIndex);
      if (v56 != CFDictionaryGetTypeID())
        break;
      v57 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("Name"));
      v58 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("Abbreviation"));
      if (!sub_19BFE9590(v57))
        break;
      if ((sub_19BFE9590(v58) & 1) == 0)
        break;
      v59 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("StemCount"));
      v60 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("SuffixCount"));
      if (!v59)
        break;
      v61 = v60;
      v62 = CFGetTypeID(v59);
      v15 = 0;
      if (v62 != CFNumberGetTypeID() || !v61)
        goto LABEL_154;
      v63 = CFGetTypeID(v61);
      if (v63 != CFNumberGetTypeID())
        break;
      v137 = 0;
      CFNumberGetValue((CFNumberRef)v59, kCFNumberSInt32Type, (char *)&v137 + 4);
      CFNumberGetValue((CFNumberRef)v61, kCFNumberSInt32Type, &v137);
      v64 = HIDWORD(v137);
      if (SHIDWORD(v137) < 1)
        break;
      v65 = v137;
      if ((int)v137 < 1)
        break;
      v66 = v135 + HIDWORD(v137);
      v68 = (char *)*((_QWORD *)a1 + 2);
      v67 = *((_QWORD *)a1 + 3);
      v135 += HIDWORD(v137);
      if ((unint64_t)v68 >= v67)
      {
        v70 = (char *)*((_QWORD *)a1 + 1);
        v71 = (v68 - v70) >> 2;
        v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 62)
          goto LABEL_161;
        v73 = v67 - (_QWORD)v70;
        if (v73 >> 1 > v72)
          v72 = v73 >> 1;
        v21 = (unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL;
        v74 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v21)
          v74 = v72;
        if (v74)
        {
          v74 = (unint64_t)sub_19BFB3588(v74);
          v70 = (char *)*((_QWORD *)a1 + 1);
          v68 = (char *)*((_QWORD *)a1 + 2);
        }
        else
        {
          v75 = 0;
        }
        v76 = (_DWORD *)(v74 + 4 * v71);
        *v76 = v135;
        v69 = v76 + 1;
        while (v68 != v70)
        {
          v77 = *((_DWORD *)v68 - 1);
          v68 -= 4;
          *--v76 = v77;
        }
        *((_QWORD *)a1 + 1) = v76;
        *((_QWORD *)a1 + 2) = v69;
        *((_QWORD *)a1 + 3) = v74 + 4 * v75;
        if (v70)
          operator delete(v70);
      }
      else
      {
        *(_DWORD *)v68 = v66;
        v69 = v68 + 4;
      }
      v78 = v52 + v65;
      *((_QWORD *)a1 + 2) = v69;
      v80 = (char *)*((_QWORD *)a1 + 5);
      v79 = *((_QWORD *)a1 + 6);
      if ((unint64_t)v80 >= v79)
      {
        v52 += v65;
        v82 = (char *)*((_QWORD *)a1 + 4);
        v83 = (v80 - v82) >> 2;
        v84 = v83 + 1;
        if ((unint64_t)(v83 + 1) >> 62)
          goto LABEL_161;
        v85 = v79 - (_QWORD)v82;
        if (v85 >> 1 > v84)
          v84 = v85 >> 1;
        v21 = (unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL;
        v86 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v21)
          v86 = v84;
        if (v86)
        {
          v86 = (unint64_t)sub_19BFB3588(v86);
          v82 = (char *)*((_QWORD *)a1 + 4);
          v80 = (char *)*((_QWORD *)a1 + 5);
        }
        else
        {
          v87 = 0;
        }
        v88 = (_DWORD *)(v86 + 4 * v83);
        *v88 = v52;
        v81 = v88 + 1;
        while (v80 != v82)
        {
          v89 = *((_DWORD *)v80 - 1);
          v80 -= 4;
          *--v88 = v89;
        }
        *((_QWORD *)a1 + 4) = v88;
        *((_QWORD *)a1 + 5) = v81;
        *((_QWORD *)a1 + 6) = v86 + 4 * v87;
        if (v82)
          operator delete(v82);
      }
      else
      {
        v52 += v65;
        *(_DWORD *)v80 = v78;
        v81 = v80 + 4;
      }
      v90 = v53 + v65 * v64;
      *((_QWORD *)a1 + 5) = v81;
      v92 = (char *)*((_QWORD *)a1 + 8);
      v91 = *((_QWORD *)a1 + 9);
      if ((unint64_t)v92 >= v91)
      {
        v53 += v65 * v64;
        v94 = (char *)*((_QWORD *)a1 + 7);
        v95 = (v92 - v94) >> 2;
        v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 62)
LABEL_161:
          sub_19BF8EB40();
        v97 = v91 - (_QWORD)v94;
        if (v97 >> 1 > v96)
          v96 = v97 >> 1;
        v21 = (unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL;
        v98 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v21)
          v98 = v96;
        if (v98)
        {
          v98 = (unint64_t)sub_19BFB3588(v98);
          v94 = (char *)*((_QWORD *)a1 + 7);
          v92 = (char *)*((_QWORD *)a1 + 8);
        }
        else
        {
          v99 = 0;
        }
        v100 = (_DWORD *)(v98 + 4 * v95);
        *v100 = v53;
        v93 = v100 + 1;
        while (v92 != v94)
        {
          v101 = *((_DWORD *)v92 - 1);
          v92 -= 4;
          *--v100 = v101;
        }
        *((_QWORD *)a1 + 7) = v100;
        *((_QWORD *)a1 + 8) = v93;
        *((_QWORD *)a1 + 9) = v98 + 4 * v99;
        if (v94)
          operator delete(v94);
      }
      else
      {
        v53 += v65 * v64;
        *(_DWORD *)v92 = v90;
        v93 = v92 + 4;
      }
      *((_QWORD *)a1 + 8) = v93;
      sub_19BF8C4B0((uint64_t)v150, v58);
      sub_19BFE95DC((_QWORD *)a1 + 10, v150);
      (*(void (**)(__int128 *__return_ptr, uint64_t, unsigned __int16 *))(*(_QWORD *)v138 + 8))(&v136, v138, v150);
      v103 = (_OWORD *)*((_QWORD *)a1 + 14);
      v102 = *((_QWORD *)a1 + 15);
      if ((unint64_t)v103 >= v102)
      {
        v106 = (_OWORD *)*((_QWORD *)a1 + 13);
        v107 = v103 - v106;
        v108 = v107 + 1;
        if ((unint64_t)(v107 + 1) >> 60)
          sub_19BF8EB40();
        v109 = v102 - (_QWORD)v106;
        if (v109 >> 3 > v108)
          v108 = v109 >> 3;
        if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0)
          v110 = 0xFFFFFFFFFFFFFFFLL;
        else
          v110 = v108;
        v145 = a1 + 30;
        if (v110)
        {
          if (v110 >> 60)
            sub_19BF8E6D0();
          v111 = (char *)operator new(16 * v110);
        }
        else
        {
          v111 = 0;
        }
        v112 = &v111[16 * v107];
        v143 = v111;
        *(_QWORD *)v144 = v112;
        *(_QWORD *)&v144[16] = &v111[16 * v110];
        v113 = (unsigned __int16)v136;
        *(_OWORD *)v112 = v136;
        if (v113 >= 0xF)
          LOWORD(v136) = 0;
        *(_QWORD *)&v144[8] = v112 + 16;
        *(_QWORD *)&v149 = v112;
        *((_QWORD *)&v149 + 1) = v112;
        v148 = v149;
        v146[0] = a1 + 30;
        v146[1] = &v148;
        v146[2] = &v149;
        v147 = 0;
        if (v103 != v106)
        {
          v114 = v103;
          do
          {
            v115 = v112 - 16;
            v117 = *((unsigned __int16 *)v114-- - 8);
            v116 = v117;
            if (v117 < 0xFuLL)
            {
              *(_OWORD *)v115 = *v114;
            }
            else
            {
              *(_WORD *)v115 = v116;
              v118 = (void *)operator new[]();
              *((_QWORD *)v112 - 1) = v118;
              memcpy(v118, *((const void **)v103 - 1), *((unsigned __int16 *)v112 - 8));
            }
            v112 = (char *)(*((_QWORD *)&v149 + 1) - 16);
            *((_QWORD *)&v149 + 1) -= 16;
            v103 = v114;
          }
          while (v114 != v106);
        }
        v147 = 1;
        sub_19BFE97F0((uint64_t)v146);
        v119 = *((_QWORD *)a1 + 15);
        v120 = *(_OWORD *)&v144[8];
        v134 = *(_OWORD **)&v144[8];
        v121 = *(_OWORD *)(a1 + 26);
        *((_QWORD *)a1 + 13) = v112;
        *(_OWORD *)v144 = v121;
        *((_OWORD *)a1 + 7) = v120;
        *(_QWORD *)&v144[16] = v119;
        v143 = (char *)v121;
        sub_19BFE9778((uint64_t)&v143);
        v105 = v134;
      }
      else
      {
        v104 = (unsigned __int16)v136;
        *v103 = v136;
        if (v104 >= 0xF)
          LOWORD(v136) = 0;
        v105 = v103 + 1;
        *((_QWORD *)a1 + 14) = v103 + 1;
      }
      *((_QWORD *)a1 + 14) = v105;
      if ((unsigned __int16)v136 >= 0xFu && *((_QWORD *)&v136 + 1))
        MEMORY[0x1A1AD0CB8](*((_QWORD *)&v136 + 1), 0x1000C8077774924);
      if (v152 && v151 == 1)
        free(v152);
      if (++v54 >= (unint64_t)*a1)
        goto LABEL_143;
    }
    v15 = 0;
  }
  else
  {
LABEL_143:
    v122 = 0;
    v123 = *((_QWORD *)a1 + 1);
    do
    {
      *(_DWORD *)(v123 + 4 * v122) += valuePtr;
      v124 = *a1;
      v21 = v122++ >= v124;
    }
    while (!v21);
    v125 = 0;
    a1[1] = *(_DWORD *)(*((_QWORD *)a1 + 1) + 4 * v124);
    v126 = *((_QWORD *)a1 + 4);
    LODWORD(v127) = v124;
    do
    {
      *(_DWORD *)(v126 + 4 * v125) += a1[1] + v127;
      v127 = *a1;
      v21 = v125++ >= v127;
    }
    while (!v21);
    v128 = 0;
    v129 = *((_QWORD *)a1 + 4);
    v130 = *((_QWORD *)a1 + 7);
    do
    {
      *(_DWORD *)(v130 + 4 * v128) += *(_DWORD *)(v129 + 4 * v127);
      v127 = *a1;
      v21 = v128++ >= v127;
    }
    while (!v21);
    v15 = 1;
  }
LABEL_154:
  v131 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(p_shared_owners);
    while (__stlxr(v133 - 1, p_shared_owners));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  if (v141 < 0)
    operator delete(__p[0]);
  return v15;
}

void sub_19BFE94D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int16 a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  void *v34;

  if (a15 >= 0xFu && a16)
    MEMORY[0x1A1AD0CB8](a16, 0x1000C8077774924);
  v34 = *(void **)(v32 - 120);
  if (v34 && *(_BYTE *)(v32 - 122) == 1)
    free(v34);
  sub_19BFACCEC((uint64_t)&a18);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

const __CFString *sub_19BFE9590(const __CFString *result)
{
  const __CFString *v1;
  CFTypeID v2;

  if (result)
  {
    v1 = result;
    v2 = CFGetTypeID(result);
    if (v2 == CFStringGetTypeID())
      return (const __CFString *)(CFStringGetLength(v1) > 0);
    else
      return 0;
  }
  return result;
}

uint64_t sub_19BFE95DC(_QWORD *a1, unsigned __int16 *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE v22[24];
  _QWORD *v23;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59)
      sub_19BF8EB40();
    v10 = v5 - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v23 = v4;
    if (v12)
      v12 = (unint64_t)sub_19BFD1894(v12);
    else
      v13 = 0;
    v21 = v12;
    *(_QWORD *)v22 = v12 + 32 * v9;
    *(_QWORD *)&v22[16] = v12 + 32 * v13;
    sub_19BF86B60(*(uint64_t *)v22, a2);
    v14 = 0;
    *(_QWORD *)&v22[8] = *(_QWORD *)v22 + 32;
    v16 = *a1;
    for (i = a1[1]; i + v14 != v16; sub_19BF86B60(*(_QWORD *)v22 + v14, (unsigned __int16 *)(v14 + i)))
      v14 -= 32;
    v17 = a1[2];
    v18 = *(_OWORD *)&v22[8];
    v20 = *(_QWORD *)&v22[8];
    v19 = *(_OWORD *)a1;
    *a1 = *(_QWORD *)v22 + v14;
    *(_OWORD *)v22 = v19;
    *(_OWORD *)(a1 + 1) = v18;
    *(_QWORD *)&v22[16] = v17;
    v21 = v19;
    result = sub_19BFE9864((uint64_t)&v21);
    v8 = v20;
  }
  else
  {
    result = sub_19BF86B60(a1[1], a2);
    v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_19BFE9720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19BFE9864((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFE9778(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 16;
      *(_QWORD *)(a1 + 16) = v2 - 16;
      if (*(unsigned __int16 *)(v2 - 16) >= 0xFu)
      {
        v5 = *(_QWORD *)(v2 - 8);
        if (v5)
        {
          MEMORY[0x1A1AD0CB8](v5, 0x1000C8077774924);
          v4 = *(_QWORD *)(a1 + 16);
        }
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19BFE97F0(uint64_t a1)
{
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(unsigned __int16 **)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(unsigned __int16 **)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*v3 >= 0xFu)
      {
        v5 = *((_QWORD *)v3 + 1);
        if (v5)
          MEMORY[0x1A1AD0CB8](v5, 0x1000C8077774924);
      }
      v3 += 8;
    }
  }
  return a1;
}

uint64_t sub_19BFE9864(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      v5 = *(void **)(v2 - 24);
      if (v5 && *(_BYTE *)(v2 - 26) == 1)
      {
        free(v5);
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_19BFE98CC(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = off_1E3D138B0;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19BF8CD70(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_19BFE9920(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_19BFE9934(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E3D138B0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

void sub_19BFE9970(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E3D138B0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFE99C0(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_19BFE99DC(unsigned int *a1, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  char *v13;

  v4 = (char *)*((_QWORD *)a1 + 1);
  if (*(_DWORD *)v4 > a2 || *(_DWORD *)&v4[4 * *a1] <= a2)
    return 0;
  v5 = *((_QWORD *)a1 + 2) - (_QWORD)v4;
  if (v5)
  {
    v6 = v5 >> 2;
    v7 = (_DWORD *)*((_QWORD *)a1 + 1);
    do
    {
      v8 = v6 >> 1;
      v9 = &v7[v6 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v6 += ~(v6 >> 1);
      if (v11 > a2)
        v6 = v8;
      else
        v7 = v10;
    }
    while (v6);
  }
  else
  {
    v7 = (_DWORD *)*((_QWORD *)a1 + 1);
  }
  v13 = (char *)(v7 - 1);
  if (a3)
    *a3 = a1[1] + ((unint64_t)(v13 - v4) >> 2);
  if (a4)
    *a4 = a2 - *(_DWORD *)v13;
  return 1;
}

uint64_t sub_19BFE9A7C(unsigned int *a1, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  char *v13;

  v4 = (char *)*((_QWORD *)a1 + 4);
  if (*(_DWORD *)v4 > a2 || *(_DWORD *)&v4[4 * *a1] <= a2)
    return 0;
  v5 = *((_QWORD *)a1 + 5) - (_QWORD)v4;
  if (v5)
  {
    v6 = v5 >> 2;
    v7 = (_DWORD *)*((_QWORD *)a1 + 4);
    do
    {
      v8 = v6 >> 1;
      v9 = &v7[v6 >> 1];
      v11 = *v9;
      v10 = v9 + 1;
      v6 += ~(v6 >> 1);
      if (v11 > a2)
        v6 = v8;
      else
        v7 = v10;
    }
    while (v6);
  }
  else
  {
    v7 = (_DWORD *)*((_QWORD *)a1 + 4);
  }
  v13 = (char *)(v7 - 1);
  if (a3)
    *a3 = a1[1] + ((unint64_t)(v13 - v4) >> 2);
  if (a4)
    *a4 = a2 - *(_DWORD *)v13;
  return 1;
}

uint64_t sub_19BFE9B1C(uint64_t result, uint64_t a2, int a3)
{
  unint64_t v3;
  uint64_t v4;

  v3 = (a3 - *(_DWORD *)(a2 + 4));
  v4 = *(_QWORD *)(a2 + 80);
  if (v3 < (*(_QWORD *)(a2 + 88) - v4) >> 5)
    return sub_19BF86B60(result, (unsigned __int16 *)(v4 + 32 * v3));
  *(_DWORD *)result = 0x100000;
  *(_WORD *)(result + 4) = 0;
  *(_BYTE *)(result + 6) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  return result;
}

__n128 sub_19BFE9B58(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v4;
  uint64_t v5;
  const void **v6;
  size_t v7;
  void *v8;
  __n128 result;

  v4 = (a3 - *(_DWORD *)(a2 + 4));
  v5 = *(_QWORD *)(a2 + 104);
  if (v4 >= (*(_QWORD *)(a2 + 112) - v5) >> 4)
  {
    *(_WORD *)a1 = 0;
  }
  else
  {
    v6 = (const void **)(v5 + 16 * v4);
    v7 = *(unsigned __int16 *)v6;
    if (v7 < 0xF)
    {
      result = *(__n128 *)v6;
      *(_OWORD *)a1 = *(_OWORD *)v6;
    }
    else
    {
      *(_WORD *)a1 = v7;
      v8 = (void *)operator new[]();
      *(_QWORD *)(a1 + 8) = v8;
      memcpy(v8, v6[1], v7);
    }
  }
  return result;
}

uint64_t sub_19BFE9BEC(uint64_t a1, const void **a2, CFErrorRef err)
{
  void **v5;
  const __CFString *v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  char v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;
  std::string v19;
  const __CFString *v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E3D138B0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = CFErrorCopyDescription(err);
  v20 = v6;
  if (*((char *)a2 + 23) >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  v8 = &v19;
  sub_19BFE9E2C((uint64_t)&v19, v7 + 2);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, ": ");
  sub_19BF87140(v6, __p);
  if ((v18 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v11 = v18;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  v13 = v12->__r_.__value_.__r.__words[0];
  v21[0] = v12->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v5);
  v15 = v21[0];
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v21 + 7);
  *(_BYTE *)(a1 + 31) = v14;
  if ((char)v18 < 0)
    operator delete(__p[0]);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v6)
      return a1;
    goto LABEL_25;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  if (v6)
LABEL_25:
    CFRelease(v6);
  return a1;
}

void sub_19BFE9D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19BFE9DFC(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
}

uint64_t sub_19BFE9E2C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_19BFE9EB4(_QWORD *a1)
{
  sub_19BFE9ED8(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFE9ED8(_QWORD *a1)
{
  *a1 = &off_1E3D10930;
  if (a1[1])
    uspoof_close();
  return a1;
}

void sub_19BFE9F14(uint64_t a1, uint64_t a2)
{
  int SkeletonUTF8;
  std::string *v4;
  unsigned __int16 v5;
  std::string v6;
  std::string __p;
  int v8;

  if (*(_QWORD *)(a2 + 8))
  {
    v8 = 0;
    SkeletonUTF8 = uspoof_getSkeletonUTF8();
    sub_19BF8E998(&__p, SkeletonUTF8 + 1, 32);
    v8 = 0;
    uspoof_getSkeletonUTF8();
    if (v8)
    {
      sub_19BF8E43C(&v6, "");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::resize(&__p, SkeletonUTF8, 0);
      v6 = __p;
    }
  }
  else
  {
    sub_19BF8E43C(&v6, "");
  }
  if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v6;
  else
    v4 = (std::string *)v6.__r_.__value_.__r.__words[0];
  v5 = HIBYTE(v6.__r_.__value_.__r.__words[2]);
  if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = v6.__r_.__value_.__r.__words[1];
  sub_19BFF6914(a1, (char *)v4, v5);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_19BFEA078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFEA0A8(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  int v5;
  uint64_t v6;
  _BYTE v8[8];
  void *v9;
  _BYTE v10[8];
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  sub_19BF8C4B0((uint64_t)v10, a2);
  sub_19BF8C4B0((uint64_t)v8, a3);
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 24))(a1, v10, v8);
  if (v9 && v8[6] == 1)
    free(v9);
  if (v11 && v10[6] == 1)
    free(v11);
  v6 = -1;
  if (v5 >= 0)
    v6 = 1;
  if (v5)
    return v6;
  else
    return 0;
}

void sub_19BFEA16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  if (a13 && a12 == 1)
    free(a13);
  if (a19)
  {
    if (a18 == 1)
      free(a19);
  }
  _Unwind_Resume(exception_object);
}

const __CFString *sub_19BFEA1B8(const __CFDictionary *a1, const __CFLocale *a2)
{
  const __CFString *Value;
  const __CFString *Copy;
  const __CFString *v6;
  CFStringRef v7;
  const __CFAllocator *v8;
  const __CFURL *v9;
  const __CFURL *v10;
  const __CFURL *PathComponent;
  const __CFURL *v12;
  int IsReachable;

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("type"));
  if (Value)
  {
    Copy = 0;
    if (CFStringCompare(Value, CFSTR("morphemes"), 0))
      return Copy;
  }
  v6 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("dataFile"));
  if (v6)
  {
    Copy = v6;
    v7 = 0;
  }
  else
  {
    v7 = sub_19C037870(a1, a2);
    Copy = v7;
    if (!v7)
      return Copy;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Copy, kCFURLPOSIXPathStyle, 0);
  v10 = v9;
  if (!v9)
  {
    Copy = 0;
    if (!v7)
      return Copy;
LABEL_18:
    CFRelease(v7);
    return Copy;
  }
  if (!CFURLResourceIsReachable(v9, 0))
    goto LABEL_14;
  PathComponent = CFURLCreateCopyDeletingLastPathComponent(v8, v10);
  v12 = CFURLCreateCopyAppendingPathComponent(v8, PathComponent, CFSTR("transition_trie.dat"), 0);
  IsReachable = CFURLResourceIsReachable(v12, 0);
  if (v12)
    CFRelease(v12);
  if (PathComponent)
    CFRelease(PathComponent);
  if (IsReachable)
    Copy = CFStringCreateCopy(v8, Copy);
  else
LABEL_14:
    Copy = 0;
  CFRelease(v10);
  if (v7)
    goto LABEL_18;
  return Copy;
}

void sub_19BFEA33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11, const void *a12)
{
  sub_19BFC4DD4(&a11, 0);
  sub_19BFC4DD4(&a12, 0);
  sub_19BFC4DD4(&a9, 0);
  sub_19BF8AD20(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFEA39C(const __CFDictionary *a1, const __CFLocale *a2)
{
  const __CFString *Value;
  const __CFString *v5;
  const __CFAllocator *v6;
  const __CFURL *v7;
  const __CFURL *v8;
  const __CFString *PathComponent;
  const __CFString *v10;
  uint64_t Copy;
  const __CFString *v12;
  const __CFString *v13;
  const __CFLocale *v14;
  const __CFString *v15;
  CFLocaleRef v16;
  _QWORD *v17;
  uint64_t v18;
  const __CFLocale *cf;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("dataFile"));
  if (!Value)
  {
    v12 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
    v13 = v12;
    cf = 0;
    if (a2)
    {
      CFRetain(a2);
      cf = a2;
      v14 = a2;
      if (!v13)
        goto LABEL_17;
    }
    else
    {
      v14 = 0;
      if (!v12)
        goto LABEL_17;
    }
    if (CFStringCompare(v13, CFSTR("Latn"), 0) == kCFCompareEqualTo)
    {
      v15 = (const __CFString *)CFLocaleGetValue(a2, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
      v16 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v15);
      if (v14)
        CFRelease(v14);
      cf = v16;
      v14 = v16;
    }
LABEL_17:
    v21[0] = &off_1E3D10C38;
    v22 = v21;
    Copy = sub_19C0372B8(a1, v14);
    v17 = v22;
    if (v22 == v21)
    {
      v18 = 4;
      v17 = v21;
    }
    else
    {
      if (!v22)
        goto LABEL_22;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_22:
    if (cf)
      CFRelease(cf);
    return Copy;
  }
  v5 = Value;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Value, kCFURLPOSIXPathStyle, 0);
  v21[0] = v7;
  if (v7)
  {
    v8 = v7;
    PathComponent = CFURLCopyLastPathComponent(v7);
    v10 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("type"));
    if (v10 && CFStringCompare(v10, CFSTR("unified_transliteration"), 0) == kCFCompareEqualTo
      || CFStringHasPrefix(PathComponent, CFSTR("UnifiedTransliteration")))
    {
      Copy = (uint64_t)CFStringCreateCopy(v6, v5);
      if (!PathComponent)
        goto LABEL_26;
    }
    else
    {
      Copy = 0;
      if (!PathComponent)
      {
LABEL_26:
        CFRelease(v8);
        return Copy;
      }
    }
    CFRelease(PathComponent);
    goto LABEL_26;
  }
  return 0;
}

void sub_19BFEA5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_19BFEA658(int a1, int a2)
{
  if (a1 < 0 || a1 > a2)
    __assert_rtn("safe_probability", "LXUtils.cpp", 192, "0 <= numerator && numerator <= denominator && \"invalid probability calculation\"");
  if (!a1)
    return 0.0;
  if (a2)
    return (double)a1 / (double)a2;
  return 1.0;
}

CFErrorRef sub_19BFEA6B4(const void *a1)
{
  __CFDictionary *Mutable;
  CFErrorRef v3;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0C9AFE0], a1);
  v3 = CFErrorCreate(0, CFSTR("com.apple.Lexicon.ErrorDomain"), 0, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v3;
}

void sub_19BFEA740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BF8E3C4((const void **)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFEA758(_QWORD *a1)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)a1 + 30142;
  *a1 = &off_1E3D13790;
  v3 = (void *)a1[3780];
  if (v3 && v2[96] == 1)
    free(v3);
  v4 = (void *)a1[3776];
  if (v4 && v2[64] == 1)
    free(v4);
  v5 = (void *)a1[3772];
  if (v5 && v2[32] == 1)
    free(v5);
  v6 = (void *)a1[3768];
  if (v6 && *v2 == 1)
    free(v6);
  sub_19BFC4F3C((uint64_t)(a1 + 1));
  return a1;
}

void sub_19BFEA7F4(_QWORD *a1)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)a1 + 30142;
  *a1 = &off_1E3D13790;
  v3 = (void *)a1[3780];
  if (v3 && v2[96] == 1)
    free(v3);
  v4 = (void *)a1[3776];
  if (v4 && v2[64] == 1)
    free(v4);
  v5 = (void *)a1[3772];
  if (v5 && v2[32] == 1)
    free(v5);
  v6 = (void *)a1[3768];
  if (v6 && *v2 == 1)
    free(v6);
  sub_19BFC4F3C((uint64_t)(a1 + 1));
  JUMPOUT(0x1A1AD0CDCLL);
}

BOOL sub_19BFEA8A0(unsigned __int16 *a1, CFErrorRef *a2)
{
  _BOOL8 v4;
  char v5;
  _BYTE v7[8];
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  int v19;
  __int16 v20;
  char v21;
  void *v22;
  char v23;
  int v24;
  __int16 v25;
  char v26;
  void *v27;
  char v28;
  int v29;
  __int16 v30;
  char v31;
  void *v32;
  char v33;
  int v34;
  __int16 v35;
  char v36;
  void *v37;
  char v38;
  int v39;
  __int16 v40;
  char v41;
  void *v42;
  char v43;
  int v44;
  __int16 v45;
  char v46;
  void *v47;
  char v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v19 = 0x100000;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0x100000;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0x100000;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0x100000;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0x100000;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0x100000;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  sub_19BF8A1F4((uint64_t)&v19, a1 + 15068);
  sub_19BF8A1F4((uint64_t)&v24, a1 + 15084);
  sub_19BF8A1F4((uint64_t)&v29, a1 + 15100);
  sub_19BF8A1F4((uint64_t)&v44, a1 + 15116);
  v49 = 1065353216;
  sub_19BF86A50((uint64_t)v7, (uint64_t)&v19);
  v4 = sub_19BF860D8((uint64_t)(a1 + 4), (uint64_t)v7);
  if (v18 && v17 == 1)
    free(v18);
  if (v16 && v15 == 1)
    free(v16);
  if (v14 && v13 == 1)
    free(v14);
  if (v12 && v11 == 1)
    free(v12);
  if (v10 && v9 == 1)
    free(v10);
  if (v8 && v7[6] == 1)
    free(v8);
  if (a2)
    v5 = v4;
  else
    v5 = 1;
  if ((v5 & 1) == 0)
    *a2 = sub_19BFEA6B4(CFSTR("Failed to load the immutable lexicon"));
  if (v47 && v46 == 1)
    free(v47);
  if (v42 && v41 == 1)
    free(v42);
  if (v37 && v36 == 1)
    free(v37);
  if (v32 && v31 == 1)
    free(v32);
  if (v27 && v26 == 1)
    free(v27);
  if (v22 && v21 == 1)
    free(v22);
  return v4;
}

void sub_19BFEAB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_19BFEBA34((uint64_t)&a10);
  sub_19BFEBA34((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_19BFEAB4C()
{
  __assert_rtn("serialized_size", "LXLexicon.cpp", 153, "false && \"serialized_size() not yet supported for static lexicons\"");
}

uint64_t sub_19BFEAB74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v5;
  char *v6;

  v1 = *(unsigned int *)(a1 + 14360);
  if ((_DWORD)v1 == -1
    || (v6 = &v5,
        ((void (*)(char **, uint64_t))off_1E3D159C8[v1])(&v6, a1 + 8),
        v3 = *(unsigned int *)(a1 + 28720),
        (_DWORD)v3 == -1))
  {
    sub_19BFC4E9C();
  }
  v6 = &v5;
  return ((uint64_t (*)(char **, uint64_t))off_1E3D159C8[v3])(&v6, a1 + 14368);
}

uint64_t sub_19BFEABF8(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t Instance;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  unsigned int *v19;
  _DWORD *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int *v38;
  void *v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  int **v45;
  void *v46;
  int ***v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int16 v52;
  uint64_t v53;
  void *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int16 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 8;
  if ((sub_19BFC50B4(a1 + 8) & 1) != 0)
  {
    LODWORD(v45) = a2;
    v5 = *(unsigned int *)(a1 + 28720);
    if ((_DWORD)v5 == -1)
      sub_19BFC4E9C();
    v47 = &v45;
    ((void (*)(uint64_t *__return_ptr, int ****, uint64_t))off_1E3D15718[v5])(&v53, &v47, a1 + 14368);
    if ((_WORD)v53)
      goto LABEL_9;
    LODWORD(v38) = a2;
    v6 = *(unsigned int *)(a1 + 14360);
    if ((_DWORD)v6 == -1)
      sub_19BFC4E9C();
    v45 = &v38;
    ((void (*)(int ****__return_ptr, int ***, uint64_t))off_1E3D15718[v6])(&v47, &v45, v4);
    sub_19BF8A370((uint64_t)&v53, (unsigned __int16 *)&v47);
    v55 = v49;
    v56 = v50;
    v57 = v51;
    v58 = v52;
    if (v48 && BYTE6(v47) == 1)
      free(v48);
    if ((_WORD)v53)
    {
LABEL_9:
      LODWORD(v39[0]) = 0x100000;
      WORD2(v39[0]) = 0;
      BYTE6(v39[0]) = 0;
      v39[1] = 0;
      sub_19BF8A370((uint64_t)v39, (unsigned __int16 *)&v53);
      v41 = v55;
      v42 = v56;
      v43 = v57;
      LOWORD(v44) = v58;
    }
    else
    {
      v13 = *(unsigned int **)(a1 + 30128);
      if (v13 && (v14 = (unsigned int *)*((_QWORD *)v13 + 7), *v14 <= a2) && v14[*v13] > a2)
      {
        v15 = *((_QWORD *)v13 + 8) - (_QWORD)v14;
        if (v15)
        {
          v16 = v15 >> 2;
          v17 = (_DWORD *)*((_QWORD *)v13 + 7);
          do
          {
            v18 = v16 >> 1;
            v19 = &v17[v16 >> 1];
            v21 = *v19;
            v20 = v19 + 1;
            v16 += ~(v16 >> 1);
            if (v21 > a2)
              v16 = v18;
            else
              v17 = v20;
          }
          while (v16);
        }
        else
        {
          v17 = (_DWORD *)*((_QWORD *)v13 + 7);
        }
        v35 = *(v17 - 1);
        v22 = (char *)(v17 - 1) - (char *)v14;
        v23 = v22 >> 2;
        v24 = *((_QWORD *)v13 + 4);
        v25 = *(_DWORD *)(v24 + 4 * ((v22 >> 2) + 1));
        v22 &= 0x3FFFFFFFCuLL;
        v26 = *(_DWORD *)(v24 + v22);
        v27 = *(_DWORD *)(*((_QWORD *)v13 + 1) + v22);
        sub_19BFE9B1C((uint64_t)&v45, (uint64_t)v13, v13[1] + v23);
        v28 = a2 - v35;
        v34 = v26;
        v36 = v25 - v26;
        v33 = v28;
        v29 = v28 / (v25 - v26);
        v37 = v29 + v27;
        v30 = *(unsigned int *)(a1 + 28720);
        if ((_DWORD)v30 == -1)
          sub_19BFC4E9C();
        v38 = &v37;
        ((void (*)(int ****__return_ptr, int **, uint64_t))off_1E3D15718[v30])(&v47, &v38, a1 + 14368);
        sub_19BF8A370((uint64_t)&v53, (unsigned __int16 *)&v47);
        v55 = v49;
        v56 = v50;
        v57 = v51;
        v58 = v52;
        if (v48 && BYTE6(v47) == 1)
          free(v48);
        if ((_WORD)v53)
          goto LABEL_45;
        v37 = v29 + v27;
        v31 = *(unsigned int *)(a1 + 14360);
        if ((_DWORD)v31 == -1)
          sub_19BFC4E9C();
        v38 = &v37;
        ((void (*)(int ****__return_ptr, int **, uint64_t))off_1E3D15718[v31])(&v47, &v38, v4);
        sub_19BF8A370((uint64_t)&v53, (unsigned __int16 *)&v47);
        v55 = v49;
        v56 = v50;
        v57 = v51;
        v58 = v52;
        if (v48 && BYTE6(v47) == 1)
          free(v48);
        if ((_WORD)v53)
        {
LABEL_45:
          v37 = v33 - v29 * v36 + v34;
          v32 = *(unsigned int *)(a1 + 14360);
          if ((_DWORD)v32 == -1)
            sub_19BFC4E9C();
          v38 = &v37;
          ((void (*)(int ****__return_ptr, int **, uint64_t))off_1E3D15718[v32])(&v47, &v38, v4);
          if ((unsigned __int16)v47 >= (unsigned __int16)v45)
            sub_19BFD53CC((uint64_t)&v53, (float *)&v47, (unsigned __int16)v45, a2);
          LODWORD(v39[0]) = 0x100000;
          WORD2(v39[0]) = 0;
          BYTE6(v39[0]) = 0;
          v39[1] = 0;
          sub_19BF8A370((uint64_t)v39, (unsigned __int16 *)&v53);
          v41 = v55;
          v42 = v56;
          v43 = v57;
          LOWORD(v44) = v58;
          if (v48 && BYTE6(v47) == 1)
            free(v48);
        }
        else
        {
          *(_OWORD *)v39 = 0u;
          v40 = 0u;
          HIDWORD(v41) = 0;
          v44 = 0;
          WORD1(v39[0]) = 16;
          BYTE6(v39[0]) = 0;
          *(_QWORD *)&v41 = 0;
          *(_QWORD *)((char *)&v41 + 5) = 0;
          v42 = 0uLL;
          v43 = 0xFFFFFFFFuLL;
        }
        if (v46 && BYTE6(v45) == 1)
          free(v46);
      }
      else
      {
        *(_OWORD *)v39 = 0u;
        v40 = 0u;
        HIDWORD(v41) = 0;
        v44 = 0;
        WORD1(v39[0]) = 16;
        BYTE6(v39[0]) = 0;
        *(_QWORD *)&v41 = 0;
        *(_QWORD *)((char *)&v41 + 5) = 0;
        v42 = 0uLL;
        v43 = 0xFFFFFFFFuLL;
      }
    }
    if (v54 && BYTE6(v53) == 1)
      free(v54);
    if (LOWORD(v39[0]))
    {
      v7 = log10f(*(float *)&v41);
      if (qword_1ED024268 != -1)
        dispatch_once(&qword_1ED024268, &unk_1E3D15E58);
      Instance = _CFRuntimeCreateInstance();
      sub_19BF86B60(Instance + 16, (unsigned __int16 *)v39);
      v9 = v44;
      v11 = v42;
      v10 = v43;
      *(_OWORD *)(Instance + 48) = v41;
      *(_OWORD *)(Instance + 64) = v11;
      *(_OWORD *)(Instance + 80) = v10;
      *(_WORD *)(Instance + 96) = v9;
      *(double *)(Instance + 104) = v7;
      *(_QWORD *)(Instance + 112) = 0;
      *(_DWORD *)(Instance + 120) = 0;
    }
    else
    {
      Instance = 0;
    }
  }
  else
  {
    Instance = 0;
    *(_OWORD *)v39 = 0u;
    v40 = 0u;
    WORD1(v39[0]) = 16;
    HIDWORD(v41) = 0;
    v44 = 0;
    BYTE6(v39[0]) = 0;
    *(_QWORD *)&v41 = 0;
    *(_QWORD *)((char *)&v41 + 5) = 0;
    v42 = 0uLL;
    v43 = 0xFFFFFFFFuLL;
  }
  if (v39[1] && BYTE6(v39[0]) == 1)
    free(v39[1]);
  return Instance;
}

void sub_19BFEB1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,void *a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  void *v37;
  void *v38;

  v37 = *(void **)(v34 + 8);
  if (v37 && a34 == 1)
    free(v37);
  if (a29 && a28 == 1)
    free(a29);
  v38 = *(void **)(v34 + 96);
  if (v38)
  {
    if (*(_BYTE *)(v35 - 202) == 1)
      free(v38);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_19BFEB25C(uint64_t a1)
{
  const char *v2;
  std::string::size_type v3;
  std::string *v4;
  __int128 v5;
  CFStringRef v6;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  sub_19BF8E43C(&v8, "Static-");
  if (*(_QWORD *)(a1 + 30144))
    v2 = *(const char **)(a1 + 30144);
  else
    v2 = (const char *)(a1 + 30152);
  v3 = strlen(v2);
  v4 = std::string::append(&v8, v2, v3);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v10 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v6 = sub_19BF8DBF4((uint64_t)__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_19BFEB304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFEB334(uint64_t a1)
{
  uint64_t Instance;

  if (qword_1ED024388 != -1)
    dispatch_once(&qword_1ED024388, &unk_1E3D15E98);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = &off_1E3D136F0;
  *(_QWORD *)(Instance + 24) = a1;
  sub_19C028A90(Instance + 32, a1 + 8);
  *(_DWORD *)(Instance + 136) = 0x100000;
  *(_WORD *)(Instance + 140) = 0;
  *(_BYTE *)(Instance + 142) = 0;
  *(_QWORD *)(Instance + 144) = 0;
  *(_BYTE *)(Instance + 152) = 0;
  *(_OWORD *)(Instance + 168) = 0u;
  *(_OWORD *)(Instance + 184) = 0u;
  *(_OWORD *)(Instance + 200) = 0u;
  *(_OWORD *)(Instance + 216) = 0u;
  return Instance;
}

void sub_19BFEB3E8(uint64_t a1, uint64_t a2)
{
  _QWORD **v3;
  char *v4;
  _QWORD *v5;
  _QWORD **v6;
  BOOL v7;
  _QWORD **v8;
  _QWORD *v9[2];

  sub_19C0173CC((unsigned __int16 *)&v8, a1 + 28752);
  v3 = v8;
  if (v8 != v9)
  {
    do
    {
      if (*((unsigned __int16 *)v3 + 20) < 0xFu)
        v4 = (char *)v3 + 42;
      else
        v4 = (char *)v3[6];
      (*(void (**)(uint64_t, _QWORD, char *))(a2 + 16))(a2, *((unsigned int *)v3 + 8), v4);
      v5 = v3[1];
      if (v5)
      {
        do
        {
          v6 = (_QWORD **)v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD **)v3[2];
          v7 = *v6 == v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v9);
  }
  sub_19BFD4974(v9[0]);
}

void sub_19BFEB4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  sub_19BFD4974(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFEB4B4(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_19BF8CC94((uint64_t)&v10, a1 + 8);
  v5 = sub_19BFEA0A8(v10, a2, a3);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_19BFEB538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFACCEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFEB54C(uint64_t a1, char *a2, unsigned __int16 a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned __int16 v15[3];
  char v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  sub_19BFF6914((uint64_t)v15, a2, a3);
  sub_19BF8CC94((uint64_t)&v10, a1 + 8);
  (*(void (**)(uint64_t *__return_ptr, char *, unsigned __int16 *))(*(_QWORD *)v10 + 8))(&v12, v10, v15);
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = sub_19BFC6824(v15, (unsigned __int8 *)&v12, a1 + 8, a1 + 8, *(unsigned int **)(a1 + 30128));
  if (!(_DWORD)v7)
  {
    v8 = *(unsigned int *)(a1 + 28720);
    if ((_DWORD)v8 == -1)
      sub_19BFC4E9C();
    v10 = &v14;
    if (((unsigned int (*)(char **, uint64_t))off_1E3D17560[v8])(&v10, a1 + 14368))
      v7 = sub_19BFC6824(v15, (unsigned __int8 *)&v12, a1 + 8, a1 + 14368, *(unsigned int **)(a1 + 30128));
    else
      v7 = 0;
  }
  if ((unsigned __int16)v12 >= 0xFu && v13)
    MEMORY[0x1A1AD0CB8](v13, 0x1000C8077774924);
  if (v17 && v16 == 1)
    free(v17);
  return v7;
}

void sub_19BFEB6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, void *a17)
{
  BOOL v18;

  sub_19BFACCEC((uint64_t)&a9);
  if (a17)
    v18 = a16 == 1;
  else
    v18 = 0;
  if (v18)
    free(a17);
  _Unwind_Resume(a1);
}

unint64_t sub_19BFEB744(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;

  v1 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
  v2 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v1 >> 47) ^ v1);
  return 0x9DDFEA08EB382D69 * (v2 ^ (v2 >> 47));
}

void sub_19BFEB780()
{
  __assert_rtn("add_entry_with_creation_time", "LXLexicon.cpp", 58, "false && \"cannot add entries to non-mutable dictionary\"");
}

void sub_19BFEB7A8()
{
  __assert_rtn("add_entry", "LXLexicon.cpp", 64, "false && \"cannot add entries to non-mutable dictionary\"");
}

void sub_19BFEB7D0()
{
  __assert_rtn("migrate_entry", "LXLexicon.cpp", 90, "false && \"cannot migrate entries to non-mutable dictionary\"");
}

void sub_19BFEB7F8()
{
  __assert_rtn("increment_usage_count", "LXLexicon.cpp", 70, "false && \"cannot update entries in non-mutable dictionary\"");
}

void sub_19BFEB820()
{
  __assert_rtn("increment_penalty_count", "LXLexicon.cpp", 75, "false && \"cannot update entries in non-mutable dictionary\"");
}

void sub_19BFEB848()
{
  __assert_rtn("update_meta_flags", "LXLexicon.cpp", 80, "false && \"cannot update entries in non-mutable dictionary\"");
}

void sub_19BFEB870()
{
  __assert_rtn("set_user_bitfield", "LXLexicon.cpp", 85, "false && \"cannot update entries in non-mutable dictionary\"");
}

void sub_19BFEB898()
{
  __assert_rtn("remove_entry", "LXLexicon.cpp", 95, "false && \"cannot remove entries from non-mutable dictionary\"");
}

void sub_19BFEB8C0()
{
  __assert_rtn("clear", "LXLexicon.cpp", 101, "false && \"cannot clear non-mutable dictionary\"");
}

void sub_19BFEB8E8(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  const void *v7;

  v5 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = LXCursorCreateByAdvancing((uint64_t)v5, a2);
  v7 = (const void *)v6;
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 + 16) + 48))(v6 + 16, a3);
    CFRelease(v7);
  }
  if (v5)
    CFRelease(v5);
}

void sub_19BFEB970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_19BFAD520(&a9, 0);
  sub_19BFAD520(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFEB99C()
{
  uint64_t result;

  qword_1ED024390 = 0;
  *(_QWORD *)algn_1ED024398 = "LXCursor";
  qword_1ED0243A0 = 0;
  unk_1ED0243A8 = 0;
  qword_1ED0243B0 = (uint64_t)sub_19BFCFB34;
  unk_1ED0243B8 = 0u;
  unk_1ED0243C8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0243F0 = result;
  return result;
}

uint64_t sub_19BFEB9E8()
{
  uint64_t result;

  qword_1ED024270 = 0;
  *(_QWORD *)algn_1ED024278 = "LXEntry";
  qword_1ED024280 = 0;
  unk_1ED024288 = 0;
  qword_1ED024290 = (uint64_t)sub_19BFD0144;
  unk_1ED024298 = 0u;
  unk_1ED0242A8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0242D0 = result;
  return result;
}

uint64_t sub_19BFEBA34(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 168);
  if (v2 && *(_BYTE *)(a1 + 166) == 1)
    free(v2);
  v3 = *(void **)(a1 + 136);
  if (v3 && *(_BYTE *)(a1 + 134) == 1)
    free(v3);
  v4 = *(void **)(a1 + 104);
  if (v4 && *(_BYTE *)(a1 + 102) == 1)
    free(v4);
  v5 = *(void **)(a1 + 72);
  if (v5 && *(_BYTE *)(a1 + 70) == 1)
    free(v5);
  v6 = *(void **)(a1 + 40);
  if (v6 && *(_BYTE *)(a1 + 38) == 1)
    free(v6);
  v7 = *(void **)(a1 + 8);
  if (v7 && *(_BYTE *)(a1 + 6) == 1)
    free(v7);
  return a1;
}

void sub_19BFEBAE4()
{
  __assert_rtn("mlock", "LXLexicon.cpp", 41, "false && \"memory locking is not supported for this type\"");
}

void sub_19BFEBB0C()
{
  __assert_rtn("munlock", "LXLexicon.cpp", 46, "false && \"memory locking is not supported for this type\"");
}

char *sub_19BFEBB34(char *a1, uint64_t a2, const __CFString *a3, const __CFString *a4, const __CFString *a5)
{
  uint64_t v10;
  const __CFString *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  size_t v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  _QWORD *v22;
  const char *v23;
  size_t v24;
  NSObject *v25;
  void **v26;
  uint64_t v27;
  void *__p[2];
  char v30;
  _QWORD v31[2];
  uint64_t v32;
  _QWORD v33[10];
  char v34;
  uint64_t v35;
  uint8_t buf[4];
  void **v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v10 = (uint64_t)(a1 + 30136);
  *(_QWORD *)a1 = &off_1E3D13790;
  sub_19BF87310((uint64_t)(a1 + 8));
  if (a2)
  {
    v11 = (const __CFString *)MEMORY[0x1A1AD064C](a2);
    sub_19BF8C4B0(v10, v11);
  }
  else
  {
    *(_DWORD *)v10 = 0x100000;
    *(_WORD *)(v10 + 4) = 0;
    *(_BYTE *)(v10 + 6) = 0;
    *((_QWORD *)a1 + 3768) = 0;
    *(_BYTE *)(v10 + 16) = 0;
  }
  sub_19BF8C4B0((uint64_t)(a1 + 30168), a3);
  if (a4)
  {
    sub_19BF8C4B0(v10 + 64, a4);
  }
  else
  {
    *(_DWORD *)(v10 + 64) = 0x100000;
    *(_WORD *)(v10 + 68) = 0;
    *(_BYTE *)(v10 + 70) = 0;
    *((_QWORD *)a1 + 3776) = 0;
    *(_BYTE *)(v10 + 80) = 0;
  }
  if (a5)
  {
    sub_19BF8C4B0(v10 + 96, a5);
  }
  else
  {
    *(_DWORD *)(v10 + 96) = 0x100000;
    *(_WORD *)(v10 + 100) = 0;
    *(_BYTE *)(v10 + 102) = 0;
    *((_QWORD *)a1 + 3780) = 0;
    *(_BYTE *)(v10 + 112) = 0;
  }
  sub_19BFA0144((uint64_t)v31);
  v12 = sub_19BF8E6F8(&v32, (uint64_t)"creating static lexicon with locale=", 36);
  if (*((_QWORD *)a1 + 3768))
    v13 = (const char *)*((_QWORD *)a1 + 3768);
  else
    v13 = a1 + 30152;
  v14 = strlen(v13);
  v15 = sub_19BF8E6F8(v12, (uint64_t)v13, v14);
  v16 = sub_19BF8E6F8(v15, (uint64_t)", baseline_path=", 16);
  if (*((_QWORD *)a1 + 3772))
    v17 = (const char *)*((_QWORD *)a1 + 3772);
  else
    v17 = a1 + 30184;
  v18 = strlen(v17);
  sub_19BF8E6F8(v16, (uint64_t)v17, v18);
  if (*(_WORD *)(v10 + 64))
  {
    v19 = sub_19BF8E6F8(&v32, (uint64_t)", delta_path=", 13);
    if (*((_QWORD *)a1 + 3776))
      v20 = (const char *)*((_QWORD *)a1 + 3776);
    else
      v20 = a1 + 30216;
    v21 = strlen(v20);
    sub_19BF8E6F8(v19, (uint64_t)v20, v21);
  }
  if (*(_WORD *)(v10 + 96))
  {
    v22 = sub_19BF8E6F8(&v32, (uint64_t)", stem_suffix_id_map_path=", 26);
    if (*((_QWORD *)a1 + 3780))
      v23 = (const char *)*((_QWORD *)a1 + 3780);
    else
      v23 = a1 + 30248;
    v24 = strlen(v23);
    sub_19BF8E6F8(v22, (uint64_t)v23, v24);
  }
  if (qword_1ED024310 != -1)
    dispatch_once(&qword_1ED024310, &unk_1E3D15DF0);
  v25 = qword_1ED024308;
  if (os_log_type_enabled((os_log_t)qword_1ED024308, OS_LOG_TYPE_INFO))
  {
    sub_19BFAAA88(__p, (uint64_t)v33);
    v26 = v30 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v37 = v26;
    _os_log_impl(&dword_19BF85000, v25, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
    if (v30 < 0)
      operator delete(__p[0]);
  }
  v31[0] = *MEMORY[0x1E0DE4F50];
  v27 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v32 = v27;
  v33[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v34 < 0)
    operator delete((void *)v33[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD0C7C](&v35);
  return a1;
}

void sub_19BFEBEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a4);
  sub_19BFA0270((uint64_t)va);
  v8 = (void *)v4[3780];
  if (v8 && v6[102] == 1)
    free(v8);
  v9 = (void *)v4[3776];
  if (v9 && v6[70] == 1)
    free(v9);
  v10 = (void *)v4[3772];
  if (v10 && v6[38] == 1)
    free(v10);
  v11 = (void *)v4[3768];
  if (v11)
  {
    if (v6[6] == 1)
      free(v11);
  }
  sub_19BFC4F3C(v5);
  _Unwind_Resume(a1);
}

os_log_t sub_19BFEBF58()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "Immutable");
  qword_1ED024308 = (uint64_t)result;
  return result;
}

uint64_t sub_19BFEBF84()
{
  uint64_t result;

  qword_1ED024318 = 0;
  unk_1ED024320 = "LXLexicon";
  qword_1ED024328 = 0;
  unk_1ED024330 = 0;
  qword_1ED024338 = (uint64_t)sub_19BFBD930;
  unk_1ED024340 = 0u;
  unk_1ED024350 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED024378 = result;
  return result;
}

const void *LXLexiconCreateMutable(const __CFDictionary *a1, CFErrorRef *a2)
{
  const __CFString *Value;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFBoolean *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  const void *v12;
  uint64_t Instance;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("name"));
  if (Value && (v5 = Value, CFStringGetLength(Value)))
  {
    v6 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("dataFile"));
    v7 = sub_19BF8723C(a1);
    v8 = (const __CFBoolean *)CFDictionaryGetValue(a1, CFSTR("threadSafeTokenSpace"));
    if (v8 && CFBooleanGetValue(v8))
    {
      v9 = (_QWORD *)operator new();
      sub_19C034110(v9, 0xFFFFFF00C00000uLL);
      v10 = (std::__shared_weak_count *)operator new(0x68uLL);
      v10->__shared_owners_ = 0;
      v10->__shared_weak_owners_ = 0;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D10F50;
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D14860;
      v11 = (uint64_t)&v10[1];
      v10[1].__shared_owners_ = (uint64_t)v9;
      v10[1].__shared_weak_owners_ = 850045863;
      v10[2].std::__shared_count = 0u;
      *(_OWORD *)&v10[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v10[3].__shared_owners_ = 0u;
      v10[4].__vftable = 0;
    }
    else
    {
      v10 = (std::__shared_weak_count *)operator new(0x58uLL);
      v10->__shared_owners_ = 0;
      v10->__shared_weak_owners_ = 0;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D14EA8;
      v11 = (uint64_t)&v10[1];
      sub_19C034110(&v10[1].__vftable, 0xFFFFFF00C00000uLL);
    }
    if (qword_1ED024410 != -1)
      dispatch_once(&qword_1ED024410, &unk_1E3D15ED8);
    Instance = _CFRuntimeCreateInstance();
    v12 = (const void *)Instance;
    v14 = Instance + 16;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    sub_19C020844((_QWORD *)(Instance + 16), v5, v6, v11, v10, (uint64_t)v7, a1);
    if (v10)
    {
      v17 = (unint64_t *)&v10->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (((*(uint64_t (**)(uint64_t, CFErrorRef *))(*(_QWORD *)v14 + 16))(v14, a2) & 1) == 0)
    {
      CFRelease(v12);
      v12 = 0;
    }
    if (v10)
    {
      v19 = (unint64_t *)&v10->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v7)
      CFRelease(v7);
  }
  else
  {
    v12 = 0;
    if (a2)
      *a2 = sub_19BFEA6B4(CFSTR("A name is required when creating a mutable lexicon"));
  }
  return v12;
}

void sub_19BFEC27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  sub_19BFACCEC((uint64_t)&a9);
  sub_19BFC0928(&a12, 0);
  _Unwind_Resume(a1);
}

void sub_19BFEC30C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D14EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19BFEC31C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D14EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFEC34C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19BFEC35C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D10F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19BFEC36C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D10F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFEC39C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_19BFEC3AC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)operator new();
  result = sub_19C034110(v2, 0xBFFFFFFF80000000);
  *a1 = v2;
  return result;
}

void sub_19BFEC3F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CDC](v1, 0x10A1C40D4518434);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFEC418(uint64_t a1)
{
  _QWORD *result;

  qword_1ED024198 = a1;
  result = (_QWORD *)operator new();
  *result = &off_1E3D14F88;
  result[1] = 0;
  result[2] = 0;
  result[3] = a1;
  qword_1ED024210 = (uint64_t)result;
  return result;
}

void sub_19BFEC46C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_19BFEC490(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFEC4B4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19BFEC4CC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D13460))
    return a1 + 24;
  else
    return 0;
}

uint64_t LXLexiconCopyEntryForTokenID(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 56))(result + 16);
  return result;
}

uint64_t LXLexiconCopyName(uint64_t a1)
{
  if (!a1)
    __assert_rtn("LXLexiconCopyName", "LXLexicon.cpp", 421, "lexicon && \"Missing lexicon\"");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
}

uint64_t LXLexiconCreateRootCursor(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 72))(result + 16);
  return result;
}

uint64_t LXLexiconEnumerateEntriesForString(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 192))(result + 16);
  return result;
}

uint64_t LXLexiconGetFirstTokenIDForString(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = sub_19BFEC638;
  v4[3] = &unk_1E3D15DB0;
  v4[4] = &v5;
  if (a1)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(a1 + 16) + 192))(a1 + 16, a2, v4);
    v2 = *((unsigned int *)v6 + 6);
  }
  else
  {
    v2 = 0;
  }
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_19BFEC620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFEC638(uint64_t result, uint64_t a2, _BYTE *a3)
{
  if (!a2)
    __assert_rtn("LXEntryGetTokenID", "LXEntry.cpp", 71, "entry");
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_DWORD *)(a2 + 76);
  *a3 = 1;
  return result;
}

uint64_t LXLexiconGetTokenIDForUTF8String(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 104))(a1 + 16);
}

uint64_t LXLexiconAddWithCreationTime(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 120))(a1 + 16);
}

uint64_t LXLexiconAddEntryWithTokenID(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 136))(a1 + 16);
}

uint64_t LXLexiconUpdateMetaFlags(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 160))(a1 + 16);
}

uint64_t LXLexiconIncrementPenaltyCount(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 152))(a1 + 16);
}

uint64_t LXLexiconSetUserBitfield(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 168))(a1 + 16);
}

uint64_t LXLexiconRemoveEntry(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 176))(a1 + 16);
}

uint64_t LXLexiconCompareStrings(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 88))(a1 + 16);
}

uint64_t LXLexiconWrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16);
}

void LXLexiconWriteDebugDump(uint64_t a1, const __CFURL *a2)
{
  const void *v4;
  const void *v5;
  _QWORD v6[6];
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  CFMutableDictionaryRef Mutable;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  Mutable = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = 0;
  if (a1)
    v4 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 72))(a1 + 16);
  else
    v4 = 0;
  v6[4] = &v8;
  v6[5] = v4;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = sub_19BFEC84C;
  v6[3] = &unk_1E3D15E18;
  sub_19BFD0164((uint64_t)v4, &v7, (uint64_t)v6);
  v5 = (const void *)v9[3];
  if (v4)
    CFRelease(v4);
  _Block_object_dispose(&v8, 8);
  sub_19BF8DCDC(v5, a2, kCFPropertyListXMLFormat_v1_0, 1, 0);
  if (v5)
    CFRelease(v5);
}

void sub_19BFEC80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19BFEC84C(uint64_t a1, uint64_t a2)
{
  __CFDictionary *v3;
  int v4;
  int v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  const __CFDate *v10;
  const __CFLocale *v11;
  __CFDateFormatter *v12;
  CFStringRef StringWithDate;
  __CFDictionary *Mutable;
  const void *v15;
  int v16;
  int v17;
  int v18;
  int valuePtr;

  if (!a2)
    __assert_rtn("LXEntryGetTokenID", "LXEntry.cpp", 71, "entry");
  v3 = *(__CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v4 = *(_DWORD *)(a2 + 76);
  v18 = *(_DWORD *)(a2 + 52) & 0x3FA000EF;
  valuePtr = v4;
  v5 = *(_DWORD *)(a2 + 64);
  v16 = *(_DWORD *)(a2 + 68);
  v17 = v5;
  v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberIntType, &v18);
  v8 = CFNumberCreate(0, kCFNumberIntType, &v17);
  v9 = CFNumberCreate(0, kCFNumberIntType, &v16);
  v10 = CFDateCreate(0, *(CFAbsoluteTime *)(a2 + 112));
  v11 = CFLocaleCreate(0, CFSTR("en_US"));
  v12 = CFDateFormatterCreate(0, v11, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
  CFDateFormatterSetFormat(v12, CFSTR("yyyy-MM-dd HH:mm:ss zzz"));
  StringWithDate = CFDateFormatterCreateStringWithDate(0, v12, v10);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("ID"), v6);
  CFDictionarySetValue(Mutable, CFSTR("flags"), v7);
  CFDictionarySetValue(Mutable, CFSTR("usageCount"), v8);
  CFDictionarySetValue(Mutable, CFSTR("penaltyCount"), v9);
  CFDictionarySetValue(Mutable, CFSTR("timestamp"), StringWithDate);
  v15 = LXEntryCopyString(a2);
  CFDictionarySetValue(v3, v15, Mutable);
  if (v15)
    CFRelease(v15);
  if (Mutable)
    CFRelease(Mutable);
  if (StringWithDate)
    CFRelease(StringWithDate);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
}

void sub_19BFECAC8(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (v5)
    CFRelease(v5);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t LXLexiconClear(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 184))(a1 + 16);
}

uint64_t LXLexiconSerializedSize(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 32))(a1 + 16);
}

uint64_t LXLexiconUnlockMemory(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 48))(a1 + 16);
}

os_log_t sub_19BFECBE4()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "Validation");
  qword_1EE417740 = (uint64_t)result;
  return result;
}

const void **sub_19BFECC10(CFStringRef *a1, const UInt8 *a2)
{
  const __CFAllocator *v3;
  CFIndex v4;
  CFIndex v5;
  const void *v7;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v5 = v4;
  }
  v7 = 0;
  *a1 = CFStringCreateWithBytes(v3, a2, v5, 0x8000100u, 1u);
  return sub_19BF8DAB8(&v7);
}

const void **sub_19BFECC78(uint64_t a1, unsigned __int16 *a2, const __CFLocale *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t i;
  unsigned __int16 *v12;
  const char *v13;
  unsigned __int16 v14;
  CFMutableStringRef Mutable;
  const char *v17;
  const void *v18[2];

  v18[1] = *(const void **)MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = a2[2];
  if (a2[2])
  {
    if (a3)
      goto LABEL_16;
  }
  else
  {
    sub_19BF86BF8(a2);
    v7 = a2[2];
    if (a3)
    {
LABEL_16:
      Mutable = CFStringCreateMutable(0, 0);
      v18[0] = Mutable;
      if (*((_QWORD *)a2 + 1))
        v17 = (const char *)*((_QWORD *)a2 + 1);
      else
        v17 = (const char *)(a2 + 8);
      CFStringAppendCString(Mutable, v17, 0x8000100u);
      CFStringLowercase((CFMutableStringRef)v18[0], a3);
      sub_19BF8C4B0(a1, (CFStringRef)v18[0]);
      return sub_19BFECE48(v18);
    }
  }
  if (v6 != v7)
    goto LABEL_16;
  v8 = *a2;
  MEMORY[0x1E0C80A78]();
  v10 = (char *)v18 - v9;
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      v12 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
      if (!v12)
        v12 = a2 + 8;
      v10[i] = __tolower(*((char *)v12 + i));
    }
  }
  v10[v8] = 0;
  if (*((_QWORD *)a2 + 1))
    v13 = (const char *)*((_QWORD *)a2 + 1);
  else
    v13 = (const char *)(a2 + 8);
  if (!strcmp(v13, v10))
    return (const void **)sub_19BF86B60(a1, a2);
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v14 = strlen(v10);
  return (const void **)sub_19BF8CA04((_QWORD *)a1, (uint64_t)v10, 0, v14);
}

void sub_19BFECE28(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

const void **sub_19BFECE48(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

os_log_t sub_19BFECE7C()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "ByteString");
  qword_1EE417750 = (uint64_t)result;
  return result;
}

unsigned __int16 *sub_19BFECEA8(unsigned __int16 *a1, const void **a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;

  if (*a1 >= 0xFu)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      MEMORY[0x1A1AD0CB8](v4, 0x1000C8077774924);
  }
  v5 = *(unsigned __int16 *)a2;
  if (v5 < 0xF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *a1 = v5;
    v6 = (void *)operator new[]();
    *((_QWORD *)a1 + 1) = v6;
    memcpy(v6, a2[1], *a1);
  }
  return a1;
}

BOOL sub_19BFECF34(unsigned __int16 *a1, unsigned __int16 *a2)
{
  size_t v2;
  unsigned int v3;
  const void *v5;
  const void *v6;

  v2 = *a2;
  v3 = *a1;
  if (v2 > v3)
    return 0;
  v5 = (const void *)*((_QWORD *)a2 + 1);
  if (v2 <= 0xE)
    v5 = a2 + 1;
  if (v3 < 0xF)
    v6 = a1 + 1;
  else
    v6 = (const void *)*((_QWORD *)a1 + 1);
  return memcmp(v5, v6, v2) == 0;
}

uint64_t sub_19BFECF90(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t i;
  unsigned int v7;
  unsigned int v8;

  v2 = *a1;
  v3 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
  if (v2 <= 0xE)
    v3 = (unsigned __int8 *)(a1 + 1);
  v4 = *a2;
  v5 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if (v4 <= 0xE)
    v5 = (unsigned __int8 *)(a2 + 1);
  if (!*a2)
    return 0;
  for (i = v4 - 1; v2; --i)
  {
    v7 = *v3;
    v8 = *v5;
    if (v7 < v8)
      break;
    ++v3;
    ++v5;
    --v2;
    if (v8 < v7 || i == 0)
      return 0;
  }
  return 1;
}

BOOL sub_19BFED000(unsigned __int16 *a1, unsigned __int16 *a2)
{
  size_t v2;
  const void *v3;
  const void *v4;

  v2 = *a1;
  if ((_DWORD)v2 != *a2)
    return 0;
  if (v2 <= 0xE)
    v3 = a1 + 1;
  else
    v3 = (const void *)*((_QWORD *)a1 + 1);
  if (v2 <= 0xE)
    v4 = a2 + 1;
  else
    v4 = (const void *)*((_QWORD *)a2 + 1);
  return memcmp(v3, v4, v2) == 0;
}

uint64_t sub_19BFED050(uint64_t result, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  const void *v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;

  *(_DWORD *)result = 0x100000;
  *(_WORD *)(result + 4) = 0;
  *(_BYTE *)(result + 6) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  LODWORD(v8) = *a2;
  if (*a2)
  {
    v10 = (const void *)result;
    v11 = 0;
    v12 = a2 + 1;
    do
    {
      v13 = v12;
      if (v8 >= 0xF)
        v13 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
      result = sub_19BFF769C(v10, "%02x", a3, a4, a5, a6, a7, a8, *((_BYTE *)v13 + v11++));
      v8 = *a2;
    }
    while (v11 < v8);
  }
  return result;
}

void sub_19BFED0EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFED110(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D14118;
  sub_19BFC08F4((const void **)(a1 + 664), 0);
  return sub_19BFB9338(a1);
}

void sub_19BFED148(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D14118;
  sub_19BFC08F4((const void **)(a1 + 664), 0);
  sub_19BFB9338(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

const char *sub_19BFED198()
{
  return "utf-16le";
}

uint64_t sub_19BFED1A4()
{
  return 0;
}

unint64_t sub_19BFED1AC(uint64_t a1, char a2, UChar *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  CFTypeRef cf;
  unint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v29 = a8;
  v10 = *(_QWORD *)(a1 + 664);
  if (!v10)
    return 0;
  v28 = 0;
  v14 = 0;
  cf = (CFTypeRef)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 + 16) + 72))(v10 + 16);
  v15 = a4 >> 1;
  while (v15)
  {
    if (!*a3 || !cf)
    {
      v15 = 1;
      break;
    }
    v16 = (_QWORD *)LXCursorCreateByAdvancingWithUTF16((uint64_t)cf, a3, 1);
    if (!v16)
      goto LABEL_33;
    ++v14;
    ++a3;
    if ((a2 & 4) != 0)
    {
      --v15;
      sub_19BFEDC0C(&cf, v16);
LABEL_12:
      v18 = v28;
      if (v28 >= a9)
      {
        v17 = 3;
      }
      else if ((*(unsigned int (**)(_QWORD *))(v16[2] + 40))(v16 + 2))
      {
        v28 = v18 + 1;
        v19 = v29 + 24 * v18;
        sub_19BFEDC0C((const void **)(v19 + 16), v16);
        v17 = 0;
        *(_WORD *)(v19 + 12) = 2 * v14;
        *(_WORD *)(v19 + 14) = 0;
      }
      else
      {
        v17 = 0;
      }
      goto LABEL_18;
    }
    sub_19BFEDC0C(&cf, v16);
    v17 = 0;
    if ((a2 & 1) != 0 && v15 == 1)
    {
      v15 = 0;
      goto LABEL_12;
    }
    --v15;
LABEL_18:
    CFRelease(v16);
    if (v17)
      break;
  }
  if ((a2 & 2) != 0 && v28 < a9 && v15 == 0)
  {
    v22 = cf;
    v31 = 0;
    v23 = operator new(0x20uLL);
    *v23 = &off_1E3D11EA0;
    v23[1] = a9;
    v23[2] = &v28;
    v23[3] = &v29;
    v31 = v23;
    sub_19BFEE1F8(a1, v22, v14, (uint64_t)v30, 0.0);
    v24 = v31;
    if (v31 == v30)
    {
      v25 = 4;
      v24 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_33;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
LABEL_33:
  v20 = v28;
  if (cf)
    CFRelease(cf);
  return v20;
}

void sub_19BFED3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  sub_19BFAD520(&a11, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFED464(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, const void *a6)
{
  CFTypeRef *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  CFTypeRef *v16;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  UChar *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  double v29;
  const void *v30;
  uint64_t v31;
  char *v32;
  const void *v33;
  uint64_t v34;
  CFTypeRef *v35;
  CFTypeRef *v36;
  CFTypeRef *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CFTypeRef cf[4];
  const void *v42[3];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD v46[3];
  CFTypeRef *v47;
  CFTypeRef v48[3];
  CFTypeRef *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v40 = a5;
  if (!*(_QWORD *)(a1 + 664))
    return 0;
  v39 = 0;
  v11 = (CFTypeRef *)operator new(0x20uLL);
  *v11 = &off_1E3D11EF8;
  v11[1] = a6;
  v11[2] = &v39;
  v11[3] = &v40;
  v47 = v11;
  v44 = 0u;
  v45 = 0u;
  v43 = 0u;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3) > (unint64_t)a4)
  {
    v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, a4);
    v13 = *(_QWORD *)(a1 + 664);
    if (v13)
      v14 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 16) + 72))(v13 + 16);
    else
      v14 = 0;
    v42[2] = v14;
    if (v12)
    {
      v16 = (CFTypeRef *)(v12 - 1);
      do
      {
        cf[0] = 0;
        sub_19BFEDC0C(cf, v14);
        v17 = cf[0];
        cf[0] = 0;
        v48[0] = v17;
        v48[1] = 0;
        v48[2] = (CFTypeRef)a4;
        v49 = v16;
        sub_19BFEDC58((uint64_t)&v43, (uint64_t *)v48);
        if (v48[0])
          CFRelease(v48[0]);
        v16 = (CFTypeRef *)((char *)v16 - 1);
      }
      while (v16 != (CFTypeRef *)-1);
    }
    v18 = *((_QWORD *)&v45 + 1);
    while (*((_QWORD *)&v45 + 1))
    {
      v19 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + (((unint64_t)(v18 + v45 - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
          + 32 * ((v18 + v45 - 1) & 0x7F);
      v20 = *(_QWORD *)(v19 + 16);
      v21 = *(double *)(v19 + 8);
      v22 = (*(double (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, v20, *(_QWORD *)(v19 + 24));
      v23 = (UChar *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, *(_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 24));
      v25 = (_QWORD *)LXCursorCreateByAdvancingWithUTF16(*(_QWORD *)v19, v23, v24);
      v42[1] = v25;
      v26 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v20, *(_QWORD *)(v19 + 24));
      sub_19BFAD520((const void **)(*(_QWORD *)(*((_QWORD *)&v43 + 1)+ (((unint64_t)(*((_QWORD *)&v45 + 1) + v45 - 1) >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * ((*((_QWORD *)&v45 + 1) + v45 - 1) & 0x7F)), 0);
      v27 = v45;
      --*((_QWORD *)&v45 + 1);
      v28 = 16 * (v44 - *((_QWORD *)&v43 + 1)) - 1;
      if ((_QWORD)v44 == *((_QWORD *)&v43 + 1))
        v28 = 0;
      if ((unint64_t)(v28 - (*((_QWORD *)&v27 + 1) + v27) - 255) <= 0xFFFFFFFFFFFFFEFFLL)
      {
        operator delete(*(void **)(v44 - 8));
        *(_QWORD *)&v44 = v44 - 8;
      }
      if (!v25)
        goto LABEL_45;
      v29 = v21 + v22;
      v30 = (const void *)(v26 + v20);
      if ((a2 & 5) == 1)
      {
        if (v30 != (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
          goto LABEL_23;
      }
      else if ((a2 & 4) == 0)
      {
        goto LABEL_23;
      }
      if ((sub_19BFEE1B0((uint64_t)v47, (uint64_t)v25, (uint64_t)v30 - a4, 0, v29) & 1) == 0)
      {
        LODWORD(v34) = 1;
        goto LABEL_43;
      }
LABEL_23:
      if ((unint64_t)v30 >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
      {
        if ((a2 & 2) != 0)
        {
          v35 = v47;
          if (!v47)
            goto LABEL_34;
          if (v47 == v46)
          {
            v49 = v48;
            (*(void (**)(_QWORD *, CFTypeRef *))(v46[0] + 24))(v46, v48);
          }
          else
          {
            v35 = (CFTypeRef *)(*((uint64_t (**)(void))*v47 + 2))();
LABEL_34:
            v49 = v35;
          }
          sub_19BFEE1F8(a1, v25, (uint64_t)v30 - a4, (uint64_t)v48, v29);
          v36 = v49;
          if (v49 == v48)
          {
            v36 = v48;
            v34 = 4;
          }
          else
          {
            v34 = 5;
            if (!v49)
              goto LABEL_43;
          }
          (*((void (**)(void))*v36 + v34))();
        }
        LODWORD(v34) = 5;
        goto LABEL_43;
      }
      v31 = (*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)a3 + 16))(a3, v30);
      if (v31)
      {
        v32 = (char *)(v31 - 1);
        do
        {
          v42[0] = 0;
          sub_19BFEDC0C(v42, v25);
          v33 = v42[0];
          cf[3] = v32;
          v42[0] = 0;
          cf[0] = v33;
          cf[1] = *(CFTypeRef *)&v29;
          cf[2] = v30;
          sub_19BFEDC58((uint64_t)&v43, (uint64_t *)cf);
          if (cf[0])
            CFRelease(cf[0]);
          --v32;
        }
        while (v32 != (char *)-1);
      }
      LODWORD(v34) = 0;
LABEL_43:
      CFRelease(v25);
      if ((_DWORD)v34 != 5 && (_DWORD)v34)
        break;
LABEL_45:
      v18 = *((_QWORD *)&v45 + 1);
    }
    if (v14)
      CFRelease(v14);
  }
  sub_19BFEE50C((uint64_t)&v43);
  v37 = v47;
  if (v47 == v46)
  {
    v38 = 4;
    v37 = (CFTypeRef *)v46;
    goto LABEL_52;
  }
  if (v47)
  {
    v38 = 5;
LABEL_52:
    (*((void (**)(void))*v37 + v38))();
  }
  return v39;
}

void sub_19BFED8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFED9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 1174405120;
    v7[2] = sub_19BFEDB18;
    v7[3] = &unk_1E3D12B38;
    v7[4] = a2;
    v4 = v8;
    sub_19BFA2418((uint64_t)v8, a3);
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(v3 + 16) + 48))(v3 + 16, v7);
    if (v9 == v8)
    {
      v6 = 4;
    }
    else
    {
      if (!v9)
        return result;
      v6 = 5;
      v4 = v9;
    }
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v6))(v4);
  }
  return result;
}

void sub_19BFEDAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t v19;

  if (a17 == v17)
  {
    v19 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v19))(v17);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFEDB08()
{
  return 0;
}

uint64_t sub_19BFEDB10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 672);
}

uint64_t sub_19BFEDB18(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned __int16 v3;
  unsigned int v4;
  __int16 v5;
  _WORD v7[3];
  __int16 v8;
  int v9;

  v9 = 0;
  if (!a2)
    __assert_rtn("LXEntryGetEmissionCost", "LXEntry.cpp", 119, "entry");
  LOWORD(v2) = *(unsigned __int8 *)(a2 + 88);
  if (*(_BYTE *)(a2 + 88))
  {
    v3 = *(_WORD *)(a2 + 96);
    if (v3 >= 0x7FFFu)
      v3 = 0x7FFF;
    v8 = v3;
    v2 = *(_DWORD *)(a2 + 92);
    v4 = HIWORD(v2);
  }
  else
  {
    LOWORD(v4) = 0;
    v8 = 0x7FFF;
  }
  v7[0] = v2;
  v7[1] = v4;
  if (*(_WORD *)(*(_QWORD *)(a1 + 32) + 14))
    v5 = 11;
  else
    v5 = 9;
  v7[2] = v5;
  return sub_19BFB6C44(*(_QWORD *)(a1 + 64), (uint64_t)v7, a2);
}

uint64_t sub_19BFEDBCC(uint64_t a1, uint64_t a2)
{
  return sub_19BFA2418(a1 + 40, a2 + 40);
}

_QWORD *sub_19BFEDBD8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_19BFEDC0C(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    sub_19BFAD520(a1, cf);
  }
}

__n128 sub_19BFEDC58(uint64_t a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  void *v31;
  char *v32;
  char *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 result;
  char *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  size_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v4 = *(char **)(a1 + 16);
  v5 = *(char **)(a1 + 8);
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = 16 * (v4 - v5) - 1;
  v8 = *(_QWORD *)(a1 + 32);
  if (v7 == *(_QWORD *)(a1 + 40) + v8)
  {
    v9 = v8 >= 0x80;
    v10 = v8 - 128;
    if (v9)
    {
      *(_QWORD *)(a1 + 32) = v10;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      *(_QWORD *)(a1 + 8) = v11;
      if (v4 == *(char **)(a1 + 24))
      {
        v14 = *(char **)a1;
        if ((unint64_t)v11 <= *(_QWORD *)a1)
        {
          if (v4 == v14)
            v36 = 1;
          else
            v36 = (v4 - v14) >> 2;
          if (v36 >> 61)
            goto LABEL_98;
          v37 = (char *)operator new(8 * v36);
          v38 = &v37[8 * (v36 >> 2)];
          v40 = v4 - v11;
          v39 = v4 == v11;
          v4 = v38;
          if (!v39)
          {
            v4 = &v38[v40 & 0xFFFFFFFFFFFFFFF8];
            v41 = 8 * (v40 >> 3);
            v42 = &v37[8 * (v36 >> 2)];
            do
            {
              v43 = *(_QWORD *)v11;
              v11 += 8;
              *(_QWORD *)v42 = v43;
              v42 += 8;
              v41 -= 8;
            }
            while (v41);
          }
          *(_QWORD *)a1 = v37;
          *(_QWORD *)(a1 + 8) = v38;
          *(_QWORD *)(a1 + 16) = v4;
          *(_QWORD *)(a1 + 24) = &v37[8 * v36];
          if (v14)
          {
            operator delete(v14);
            v4 = *(char **)(a1 + 16);
          }
        }
        else
        {
          v15 = (uint64_t)&v11[-*(_QWORD *)a1] >> 3;
          if (v15 >= -1)
            v16 = v15 + 1;
          else
            v16 = v15 + 2;
          v17 = -(v16 >> 1);
          v18 = v16 >> 1;
          v19 = &v11[-8 * v18];
          v20 = v4 - v11;
          if (v4 != v11)
          {
            memmove(&v11[-8 * v18], v11, v4 - v11);
            v4 = *(char **)(a1 + 8);
          }
          v21 = &v4[8 * v17];
          v4 = &v19[v20];
          *(_QWORD *)(a1 + 8) = v21;
          *(_QWORD *)(a1 + 16) = &v19[v20];
        }
      }
      *(_QWORD *)v4 = v12;
      goto LABEL_37;
    }
    v22 = v6 >> 3;
    v23 = *(char **)(a1 + 24);
    v24 = *(char **)a1;
    v25 = (uint64_t)&v23[-*(_QWORD *)a1];
    if (v6 >> 3 < (unint64_t)(v25 >> 3))
    {
      v26 = operator new(0x1000uLL);
      v27 = v26;
      if (v23 != v4)
      {
        *(_QWORD *)v4 = v26;
LABEL_37:
        *(_QWORD *)(a1 + 16) += 8;
        goto LABEL_38;
      }
      if (v5 == v24)
      {
        if (v4 == v5)
          v65 = 1;
        else
          v65 = (v23 - v5) >> 2;
        if (v65 >> 61)
          goto LABEL_98;
        v66 = (char *)operator new(8 * v65);
        v48 = &v66[(2 * v65 + 6) & 0xFFFFFFFFFFFFFFF8];
        v67 = v48;
        if (v4 != v5)
        {
          v68 = 8 * v22;
          v69 = &v66[(2 * v65 + 6) & 0xFFFFFFFFFFFFFFF8];
          v70 = v5;
          v67 = &v48[8 * v22];
          do
          {
            v71 = *(_QWORD *)v70;
            v70 += 8;
            *(_QWORD *)v69 = v71;
            v69 += 8;
            v68 -= 8;
          }
          while (v68);
        }
        *(_QWORD *)a1 = v66;
        *(_QWORD *)(a1 + 8) = v48;
        *(_QWORD *)(a1 + 16) = v67;
        *(_QWORD *)(a1 + 24) = &v66[8 * v65];
        if (v5)
        {
          operator delete(v5);
          v48 = *(char **)(a1 + 8);
        }
      }
      else
      {
        v48 = v5;
      }
      *((_QWORD *)v48 - 1) = v27;
      v72 = *(char **)(a1 + 8);
      v73 = *(char **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v72 - 8;
      v74 = *((_QWORD *)v72 - 1);
      *(_QWORD *)(a1 + 8) = v72;
      if (v73 != *(char **)(a1 + 24))
      {
LABEL_96:
        *(_QWORD *)v73 = v74;
        goto LABEL_37;
      }
      v75 = *(char **)a1;
      if ((unint64_t)v72 > *(_QWORD *)a1)
      {
        v76 = (uint64_t)&v72[-*(_QWORD *)a1] >> 3;
        if (v76 >= -1)
          v77 = v76 + 1;
        else
          v77 = v76 + 2;
        v78 = -(v77 >> 1);
        v79 = v77 >> 1;
        v80 = &v72[-8 * v79];
        v81 = v73 - v72;
        if (v81)
        {
          memmove(&v72[-8 * v79], v72, v81);
          v72 = *(char **)(a1 + 8);
        }
        v73 = &v80[v81];
        *(_QWORD *)(a1 + 8) = &v72[8 * v78];
        *(_QWORD *)(a1 + 16) = v73;
        goto LABEL_96;
      }
      if (v73 == v75)
        v82 = 1;
      else
        v82 = (v73 - v75) >> 2;
      if (!(v82 >> 61))
      {
        v83 = (char *)operator new(8 * v82);
        v84 = &v83[8 * (v82 >> 2)];
        v85 = v73 - v72;
        v39 = v73 == v72;
        v73 = v84;
        if (!v39)
        {
          v73 = &v84[v85 & 0xFFFFFFFFFFFFFFF8];
          v86 = 8 * (v85 >> 3);
          v87 = &v83[8 * (v82 >> 2)];
          do
          {
            v88 = *(_QWORD *)v72;
            v72 += 8;
            *(_QWORD *)v87 = v88;
            v87 += 8;
            v86 -= 8;
          }
          while (v86);
        }
        *(_QWORD *)a1 = v83;
        *(_QWORD *)(a1 + 8) = v84;
        *(_QWORD *)(a1 + 16) = v73;
        *(_QWORD *)(a1 + 24) = &v83[8 * v82];
        if (v75)
        {
          operator delete(v75);
          v73 = *(char **)(a1 + 16);
        }
        goto LABEL_96;
      }
LABEL_98:
      sub_19BF8E6D0();
    }
    v28 = v25 >> 2;
    if (v23 == v24)
      v29 = 1;
    else
      v29 = v28;
    if (v29 >> 61)
      goto LABEL_98;
    v30 = (char *)operator new(8 * v29);
    v31 = operator new(0x1000uLL);
    v32 = &v30[8 * v22];
    v33 = &v30[8 * v29];
    if (v22 == v29)
    {
      v34 = v31;
      if (v6 < 1)
      {
        if (v4 == v5)
          v49 = 1;
        else
          v49 = v6 >> 2;
        if (v49 >> 61)
          sub_19BF8E6D0();
        v32 = (char *)operator new(8 * v49);
        v33 = &v32[8 * v49];
        operator delete(v30);
        v5 = *(char **)(a1 + 8);
        v4 = *(char **)(a1 + 16);
        v30 = v32;
      }
      else
      {
        v35 = v22 + 2;
        if (v22 >= -1)
          v35 = v22 + 1;
        v32 -= 8 * (v35 >> 1);
      }
      v31 = v34;
    }
    *(_QWORD *)v32 = v31;
    v50 = v32 + 8;
    if (v4 == v5)
    {
      v63 = v32;
      v52 = v32 + 8;
    }
    else
    {
      do
      {
        if (v32 == v30)
        {
          if (v50 >= v33)
          {
            if (v33 == v32)
              v55 = 1;
            else
              v55 = (v33 - v32) >> 2;
            if (v55 >> 61)
              sub_19BF8E6D0();
            v56 = (char *)operator new(8 * v55);
            v30 = v56;
            v51 = &v56[(2 * v55 + 6) & 0xFFFFFFFFFFFFFFF8];
            v52 = v51;
            v57 = v50 - v32;
            if (v50 != v32)
            {
              v52 = &v51[v57 & 0xFFFFFFFFFFFFFFF8];
              v58 = 8 * (v57 >> 3);
              v59 = &v56[(2 * v55 + 6) & 0xFFFFFFFFFFFFFFF8];
              v60 = v32;
              do
              {
                v61 = *(_QWORD *)v60;
                v60 += 8;
                *(_QWORD *)v59 = v61;
                v59 += 8;
                v58 -= 8;
              }
              while (v58);
            }
            v33 = &v56[8 * v55];
            operator delete(v32);
          }
          else
          {
            v53 = (v33 - v50) >> 3;
            if (v53 >= -1)
              v54 = v53 + 1;
            else
              v54 = v53 + 2;
            v52 = &v50[8 * (v54 >> 1)];
            v51 = &v32[8 * (v54 >> 1)];
            if (v50 == v32)
            {
              v30 = v50;
            }
            else
            {
              memmove(&v32[8 * (v54 >> 1)], v32, v50 - v32);
              v30 = v32;
            }
          }
        }
        else
        {
          v51 = v32;
          v52 = v50;
        }
        v62 = *((_QWORD *)v4 - 1);
        v4 -= 8;
        *((_QWORD *)v51 - 1) = v62;
        v63 = v51 - 8;
        v50 = v52;
        v32 = v63;
      }
      while (v4 != *(char **)(a1 + 8));
    }
    v64 = *(char **)a1;
    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = v63;
    *(_QWORD *)(a1 + 16) = v52;
    *(_QWORD *)(a1 + 24) = v33;
    if (v64)
      operator delete(v64);
  }
LABEL_38:
  v44 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32);
  v45 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v44 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v44 & 0x7F);
  v46 = *a2;
  *a2 = 0;
  *(_QWORD *)v45 = v46;
  result = *(__n128 *)(a2 + 1);
  *(_QWORD *)(v45 + 24) = a2[3];
  *(__n128 *)(v45 + 8) = result;
  ++*(_QWORD *)(a1 + 40);
  return result;
}

void sub_19BFEE17C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFEE1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  v9 = a2;
  v8 = a5;
  v6 = a4;
  v7 = a3;
  if (!a1)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, uint64_t *, double *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v9, &v8, &v7, &v6);
}

uint64_t sub_19BFEE1F8(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v9;
  const __CFString *v10;
  CFIndex Length;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];
  _QWORD v30[2];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  double (*v34)(_QWORD *, _QWORD *);
  uint64_t (*v35)(uint64_t);
  _OWORD v36[3];

  if (a2)
  {
    v9 = result;
    v31 = 0;
    v32 = &v31;
    v33 = 0x5802000000;
    v34 = sub_19BFEE664;
    v35 = sub_19BFEE6A8;
    memset(v36, 0, sizeof(v36));
    v10 = (const __CFString *)(*(uint64_t (**)(_QWORD *))(a2[2] + 112))(a2 + 2);
    v30[1] = v10;
    Length = CFStringGetLength(v10);
    v12 = v32;
    v30[0] = CFRetain(a2);
    sub_19BFEE6B0(v12 + 5, v30);
    v13 = v32;
    v14 = v32[10];
    if (v14)
    {
      while (1)
      {
        v15 = v14 + v13[9] - 1;
        v16 = *(_QWORD *)(v13[6] + ((v15 >> 6) & 0x3FFFFFFFFFFFFF8));
        v17 = v15 & 0x1FF;
        v18 = *(_QWORD **)(v16 + 8 * v17);
        *(_QWORD *)(v16 + 8 * v17) = 0;
        v30[0] = v18;
        v19 = v32;
        v20 = v32[10] + v32[9] - 1;
        sub_19BFAD520((const void **)(*(_QWORD *)(v32[6] + ((v20 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v20 & 0x1FF)), 0);
        v22 = v19[6];
        v21 = v19[7];
        if (v21 == v22)
          v23 = 0;
        else
          v23 = ((v21 - v22) << 6) - 1;
        v24 = v19[9];
        v25 = v19[10] - 1;
        v19[10] = v25;
        if ((unint64_t)(v23 - (v25 + v24)) >= 0x400)
        {
          operator delete(*(void **)(v21 - 8));
          v19[7] -= 8;
        }
        v26 = v18 ? (const __CFString *)(*(uint64_t (**)(_QWORD *))(v18[2] + 112))(v18 + 2) : 0;
        v29[5] = v26;
        v27 = CFStringGetLength(v26) - Length;
        if (v27 >= 1 && (sub_19BFEE1B0(*(_QWORD *)(a4 + 24), (uint64_t)v18, a3, v27, a5) & 1) == 0)
          break;
        v28 = *(unsigned int *)(v9 + 676);
        if ((v28 & 0x80000000) != 0 || v27 < v28)
        {
          v29[0] = MEMORY[0x1E0C809B0];
          v29[1] = 0x40000000;
          v29[2] = sub_19BFEEC30;
          v29[3] = &unk_1E3D15F88;
          v29[4] = &v31;
          if (v18)
            (*(void (**)(_QWORD *, _QWORD *))(v18[2] + 64))(v18 + 2, v29);
        }
        if (v26)
          CFRelease(v26);
        if (v18)
          CFRelease(v18);
        v13 = v32;
        v14 = v32[10];
        if (!v14)
          goto LABEL_27;
      }
      if (v26)
        CFRelease(v26);
      if (v18)
        CFRelease(v18);
    }
LABEL_27:
    if (v10)
      CFRelease(v10);
    _Block_object_dispose(&v31, 8);
    return sub_19BFEEC74((uint64_t)v36);
  }
  return result;
}

void sub_19BFEE4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  const void *v11;
  va_list va;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, const void *);
  sub_19BF8AD20((const void **)va, 0);
  _Block_object_dispose(va1, 8);
  sub_19BFEEC74(a3);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFEE50C(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  const void **v7;
  uint64_t v8;
  const void **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 7];
    v7 = (const void **)((char *)*v6 + 32 * (v5 & 0x7F));
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(_QWORD *)(a1 + 40) + v5) & 0x7F);
    if (v7 != (const void **)v8)
    {
      do
      {
        sub_19BFAD520(v7, 0);
        v7 += 4;
        if ((char *)v7 - (_BYTE *)*v6 == 4096)
        {
          v9 = (const void **)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (const void **)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 64;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 128;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

