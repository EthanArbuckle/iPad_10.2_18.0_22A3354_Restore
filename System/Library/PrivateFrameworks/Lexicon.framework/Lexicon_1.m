double sub_19BFEE664(_QWORD *a1, _QWORD *a2)
{
  double result;

  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  result = 0.0;
  *(_OWORD *)(a2 + 7) = 0u;
  *(_OWORD *)(a2 + 5) = 0u;
  a1[9] = a2[9];
  a1[10] = a2[10];
  a2[9] = 0;
  a2[10] = 0;
  return result;
}

uint64_t sub_19BFEE6A8(uint64_t a1)
{
  return sub_19BFEEC74(a1 + 40);
}

void sub_19BFEE6B0(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)sub_19BFAC524(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v8 = a1[5];
      v5 = (char *)a1[1];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)sub_19BFAC524(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)sub_19BFAC524(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)sub_19BFAC524(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v110 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v110;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)sub_19BFAC524(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v107 = v37;
      v110 = v39;
      operator delete(v31);
      v37 = v107;
    }
    v39 = v110;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)sub_19BFAC524(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v108 = v37;
            v112 = v39;
            operator delete(v79);
            v37 = v108;
            v39 = v112;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v37 + 1);
            v111 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v109;
            *(_QWORD *)&v39 = v111;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_19BFEEC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void sub_19BFEEC30(uint64_t a1, CFTypeRef cf)
{
  _QWORD *v2;
  CFTypeRef v3;

  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v3 = CFRetain(cf);
  sub_19BFEE6B0(v2, &v3);
}

uint64_t sub_19BFEEC74(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  const void **v7;
  uint64_t v8;
  const void **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 9];
    v7 = (const void **)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(_QWORD *)(a1 + 40) + v5) & 0x1FF);
    if (v7 != (const void **)v8)
    {
      do
      {
        sub_19BFAD520(v7++, 0);
        if ((char *)v7 - (_BYTE *)*v6 == 4096)
        {
          v9 = (const void **)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (const void **)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 256;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 512;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19BFEEDD0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFEEDE4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D11EF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19BFEEE24(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D11EF8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_19BFEEE4C(uint64_t a1, _QWORD **a2, double *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = **(_QWORD **)(a1 + 16);
  if (v7 < v6 && v5 != 0)
  {
    v10 = *a3;
    v11 = *a4;
    v12 = *a5;
    if ((*(unsigned int (**)(_QWORD *))(v5[2] + 40))(v5 + 2))
    {
      v13 = *(_QWORD **)(a1 + 16);
      v14 = **(_QWORD **)(a1 + 24);
      v15 = (*v13)++;
      v16 = v14 + 24 * v15;
      sub_19BFEDC0C((const void **)(v16 + 16), v5);
      *(_WORD *)(v16 + 12) = 2 * v11;
      *(_BYTE *)v16 = v10 < -0.0000001;
      v17 = v10;
      *(float *)(v16 + 4) = v17;
      *(_WORD *)(v16 + 14) = 2 * v12;
    }
  }
  return v7 < v6;
}

uint64_t sub_19BFEEF14(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D115C0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFEEF50()
{
  return &unk_1E3D115C0;
}

void sub_19BFEEF60()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFEEF74(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D11EA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19BFEEFB4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D11EA0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_19BFEEFDC(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = **(_QWORD **)(a1 + 16);
  if (v7 < v6 && v5 != 0)
  {
    v10 = *a4;
    v11 = *a5;
    if ((*(unsigned int (**)(_QWORD *))(v5[2] + 40))(v5 + 2))
    {
      v12 = *(_QWORD **)(a1 + 16);
      v13 = **(_QWORD **)(a1 + 24);
      v14 = (*v12)++;
      v15 = v13 + 24 * v14;
      sub_19BFEDC0C((const void **)(v15 + 16), v5);
      *(_WORD *)(v15 + 12) = 2 * v10;
      *(_WORD *)(v15 + 14) = 2 * v11;
    }
  }
  return v7 < v6;
}

uint64_t sub_19BFEF07C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D13680))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFEF0B8()
{
  return &unk_1E3D13680;
}

BOOL sub_19BFEF0C4(uint64_t a1, char *a2, unsigned __int16 a3, const char *a4)
{
  CFMutableDictionaryRef Mutable;
  CFStringRef v9;
  const void *v10;
  CFTypeRef v11;
  void *value[2];
  CFTypeRef cf;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  value[1] = Mutable;
  sub_19BFF6914((uint64_t)&cf, a2, a3);
  sub_19BF8CFAC((CFStringRef *)value, (unsigned __int16 *)&cf);
  if (v15 && BYTE6(cf) == 1)
    free(v15);
  CFDictionaryAddValue(Mutable, CFSTR("locale"), value[0]);
  if (a4)
  {
    v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4, 0x8000100u);
    cf = v9;
    CFDictionaryAddValue(Mutable, CFSTR("dataFile"), v9);
    if (v9)
      CFRelease(v9);
  }
  cf = 0;
  v10 = (const void *)LXLexiconCreate(Mutable, (CFErrorRef *)&cf);
  sub_19BFC08F4((const void **)(a1 + 664), v10);
  v11 = cf;
  if (cf)
    CFRelease(cf);
  else
    *(_DWORD *)(a1 + 52) = 0;
  sub_19BF8DAB8((const void **)value);
  if (Mutable)
    CFRelease(Mutable);
  return v11 == 0;
}

void sub_19BFEF234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, char a20,char a21,void *a22)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFEF2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2;
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

uint64_t sub_19BFEF2E4(uint64_t a1, uint64_t a2)
{
  return sub_19BFA2418(a1 + 32, a2 + 32);
}

_QWORD *sub_19BFEF2F0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *sub_19BFEF324(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D143C8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19BFEF360(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D143C8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFEF3AC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 16) - v2) >> 2))
    __assert_rtn("decode", "LXCodebookCoder.cpp", 81, "false && \"Invalid index for meta flags codebook\"");
  return *(unsigned int *)(v2 + 4 * a2);
}

_QWORD *sub_19BFEF3F4(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E3D143F0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_19BFEF440(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E3D143F0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19BFEF49C(_QWORD *a1, int a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD *exception;
  __int128 v17;

  if (a1[4] != a1[5])
    __assert_rtn("train", "LXCodebookCoder.cpp", 19, "false && \"Metaflags codebook has already been compiled\"");
  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (char *)a1[1];
    while (*(_DWORD *)v6 != a2)
    {
      v6 += 16;
      if (v6 == v5)
        goto LABEL_9;
    }
  }
  if (v6 == v5)
  {
LABEL_9:
    v7 = a1[3];
    if ((unint64_t)v5 >= v7)
    {
      v9 = (v5 - v4) >> 4;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60)
        sub_19BF8EB40();
      v11 = v7 - (_QWORD)v4;
      if (v11 >> 3 > v10)
        v10 = v11 >> 3;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12 >> 60)
        sub_19BF8E6D0();
      v13 = (char *)operator new(16 * v12);
      v14 = &v13[16 * v9];
      *(_DWORD *)v14 = a2;
      *((_QWORD *)v14 + 1) = 1;
      v8 = v14 + 16;
      if (v4 == v5)
      {
        v15 = &v13[16 * v9];
      }
      else
      {
        do
        {
          v15 = v14 - 16;
          *((_OWORD *)v14 - 1) = *((_OWORD *)v5 - 1);
          v5 -= 16;
          v14 -= 16;
        }
        while (v5 != v4);
      }
      a1[1] = v15;
      a1[2] = v8;
      a1[3] = &v13[16 * v12];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_DWORD *)v5 = a2;
      *((_QWORD *)v5 + 1) = 1;
      v8 = v5 + 16;
    }
    a1[2] = v8;
    v5 = v8;
  }
  else
  {
    ++*((_QWORD *)v6 + 1);
  }
  if ((unint64_t)&v5[-a1[1]] >= 0xFF1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19BF8E43C(&v17, "Too many metadata flag combinations to encode as an 8-bit integer");
    sub_19BFD48D0(exception, &v17);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D13288, (void (*)(void *))sub_19BFD4938);
  }
}

void sub_19BFEF674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_19BFEF6AC(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4;
}

void sub_19BFEF6BC(_QWORD *a1)
{
  char **v1;
  unsigned __int8 v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  char *v13;
  int v14;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = (char **)(a1 + 4);
  if (a1[4] != a1[5])
    __assert_rtn("compile", "LXCodebookCoder.cpp", 36, "m_flagsCodebook.empty()");
  v3 = atomic_load(byte_1EE414EA8);
  if ((v3 & 1) != 0)
  {
    v4 = atomic_load(byte_1EE417890);
    if ((v4 & 1) != 0)
    {
      printf("Compiling %lu distinct metadata flags values", (uint64_t)(a1[2] - a1[1]) >> 4);
      putchar(10);
    }
    else
    {
      v5 = sub_19BFD3F34();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = (uint64_t)(a1[2] - a1[1]) >> 4;
        *(_DWORD *)buf = 134217984;
        v16 = v6;
        _os_log_impl(&dword_19BF85000, v5, OS_LOG_TYPE_DEFAULT, "Compiling %lu distinct metadata flags values", buf, 0xCu);
      }
    }
  }
  v7 = a1[1];
  v8 = a1[2];
  v9 = 126 - 2 * __clz((uint64_t)(v8 - v7) >> 4);
  if (v8 == v7)
    v10 = 0;
  else
    v10 = v9;
  sub_19BFEF930(v7, v8, v10, 1);
  sub_19BFF00C4(v1, (uint64_t)(a1[2] - a1[1]) >> 4);
  v11 = (int *)a1[1];
  v12 = (int *)a1[2];
  if (v11 != v12)
  {
    v13 = *v1;
    do
    {
      v14 = *v11;
      v11 += 4;
      *(_DWORD *)v13 = v14;
      v13 += 4;
    }
    while (v11 != v12);
  }
}

uint64_t sub_19BFEF83C(uint64_t a1, __int32 a2)
{
  __int32 *v3;
  __int32 *v4;
  __int32 *v5;
  __int32 *v6;

  v3 = *(__int32 **)(a1 + 32);
  v4 = *(__int32 **)(a1 + 40);
  if (v3 == v4)
    __assert_rtn("encode", "LXCodebookCoder.cpp", 48, "!m_flagsCodebook.empty()");
  v5 = wmemchr(v3, a2, v4 - v3);
  if (v5)
    v6 = v5;
  else
    v6 = v4;
  if (v6 == *(__int32 **)(a1 + 40))
    __assert_rtn("encode", "LXCodebookCoder.cpp", 51, "false && \"Unknown LXMetaFlags value\"");
  return (((_DWORD)v6 - *(_DWORD *)(a1 + 32)) >> 2);
}

ssize_t sub_19BFEF8D4(uint64_t a1, ssize_t a2)
{
  uint64_t v4;
  unsigned int v6;

  v4 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  v6 = bswap32(v4);
  sub_19C0344E0(a2, (uint64_t)&v6, 4);
  return sub_19C0344E0(a2, *(_QWORD *)(a1 + 32), v4);
}

uint64_t sub_19BFEF930(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  int v55;
  _DWORD *v56;
  BOOL v58;
  uint64_t v59;
  _DWORD *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  BOOL v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(_QWORD *)(a2 - 8);
        v43 = *(_QWORD *)(v8 + 8);
        if (v42 > v43)
        {
          v44 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v44;
          *(_QWORD *)(v8 + 8) = v42;
          *(_QWORD *)(a2 - 8) = v43;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_19BFF01C4((int *)v8, (int *)(v8 + 16), (int *)(a2 - 16));
      case 4uLL:
        return (uint64_t)sub_19BFF027C(v8, v8 + 16, v8 + 32, a2 - 16);
      case 5uLL:
        result = (uint64_t)sub_19BFF027C(v8, v8 + 16, v8 + 32, v8 + 48);
        v45 = *(_QWORD *)(a2 - 8);
        v46 = *(_QWORD *)(v8 + 56);
        if (v45 > v46)
        {
          v47 = *(_DWORD *)(v8 + 48);
          *(_DWORD *)(v8 + 48) = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v47;
          *(_QWORD *)(v8 + 56) = v45;
          *(_QWORD *)(a2 - 8) = v46;
          v48 = *(_QWORD *)(v8 + 56);
          v49 = *(_QWORD *)(v8 + 40);
          if (v48 > v49)
          {
            v50 = *(_DWORD *)(v8 + 32);
            v51 = *(_DWORD *)(v8 + 48);
            *(_DWORD *)(v8 + 32) = v51;
            *(_DWORD *)(v8 + 48) = v50;
            *(_QWORD *)(v8 + 40) = v48;
            *(_QWORD *)(v8 + 56) = v49;
            v52 = *(_QWORD *)(v8 + 24);
            if (v48 > v52)
            {
              v53 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = v51;
              *(_DWORD *)(v8 + 32) = v53;
              *(_QWORD *)(v8 + 24) = v48;
              *(_QWORD *)(v8 + 40) = v52;
              v54 = *(_QWORD *)(v8 + 8);
              if (v48 > v54)
              {
                v55 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v51;
                *(_DWORD *)(v8 + 16) = v55;
                *(_QWORD *)(v8 + 8) = v48;
                *(_QWORD *)(v8 + 24) = v54;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v56 = (_DWORD *)(v8 + 16);
          v58 = v8 == a2 || v56 == (_DWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = (_DWORD *)v8;
              do
              {
                v61 = *((_QWORD *)v60 + 3);
                v62 = *((_QWORD *)v60 + 1);
                v60 = v56;
                if (v61 > v62)
                {
                  v63 = *v56;
                  v64 = v59;
                  while (1)
                  {
                    v65 = v8 + v64;
                    *(_DWORD *)(v65 + 16) = *(_DWORD *)(v8 + v64);
                    *(_QWORD *)(v65 + 24) = *(_QWORD *)(v8 + v64 + 8);
                    if (!v64)
                      break;
                    v64 -= 16;
                    if (v61 <= *(_QWORD *)(v65 - 8))
                    {
                      v66 = v8 + v64 + 16;
                      goto LABEL_80;
                    }
                  }
                  v66 = v8;
LABEL_80:
                  *(_DWORD *)v66 = v63;
                  *(_QWORD *)(v66 + 8) = v61;
                }
                v56 = v60 + 4;
                v59 += 16;
              }
              while (v60 + 4 != (_DWORD *)a2);
            }
          }
          else if (!v58)
          {
            v93 = v8 + 8;
            do
            {
              v94 = *(_QWORD *)(v7 + 24);
              v95 = *(_QWORD *)(v7 + 8);
              v7 = (uint64_t)v56;
              if (v94 > v95)
              {
                v96 = *v56;
                v97 = v93;
                do
                {
                  *(_DWORD *)(v97 + 8) = *(_DWORD *)(v97 - 8);
                  *(_QWORD *)(v97 + 16) = *(_QWORD *)v97;
                  v98 = *(_QWORD *)(v97 - 16);
                  v97 -= 16;
                }
                while (v94 > v98);
                *(_DWORD *)(v97 + 8) = v96;
                *(_QWORD *)(v97 + 16) = v94;
              }
              v56 = (_DWORD *)(v7 + 16);
              v93 += 16;
            }
            while (v7 + 16 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v67 = (v10 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = v8 + 16 * v70;
                if (2 * v69 + 2 < (uint64_t)v10)
                {
                  v72 = *(_QWORD *)(v71 + 8) > *(_QWORD *)(v71 + 24);
                  v71 += 16 * v72;
                  if (v72)
                    v70 = 2 * v69 + 2;
                }
                v73 = *(_QWORD *)(v71 + 8);
                v74 = *(_QWORD *)(v8 + 16 * v69 + 8);
                if (v73 <= v74)
                {
                  v75 = v8 + 16 * v69;
                  v76 = *(_DWORD *)v75;
                  do
                  {
                    result = v75;
                    v75 = v71;
                    *(_DWORD *)result = *(_DWORD *)v71;
                    *(_QWORD *)(result + 8) = v73;
                    if (v67 < v70)
                      break;
                    result = (2 * v70) | 1;
                    v71 = v8 + 16 * result;
                    v77 = 2 * v70 + 2;
                    if (v77 < (uint64_t)v10)
                    {
                      v72 = *(_QWORD *)(v71 + 8) > *(_QWORD *)(v71 + 24);
                      v71 += 16 * v72;
                      if (v72)
                        result = v77;
                    }
                    v73 = *(_QWORD *)(v71 + 8);
                    v70 = result;
                  }
                  while (v73 <= v74);
                  *(_DWORD *)v75 = v76;
                  *(_QWORD *)(v75 + 8) = v74;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v78 = (unint64_t)v9 >> 4;
            do
            {
              v79 = 0;
              v80 = *(_DWORD *)v8;
              v81 = *(_QWORD *)(v8 + 8);
              v82 = v8;
              do
              {
                v83 = v82 + 16 * (v79 + 1);
                v84 = (2 * v79) | 1;
                v85 = 2 * v79 + 2;
                if (v85 < v78)
                {
                  v72 = *(_QWORD *)(v83 + 8) > *(_QWORD *)(v83 + 24);
                  v83 += 16 * v72;
                  if (v72)
                    v84 = v85;
                }
                *(_DWORD *)v82 = *(_DWORD *)v83;
                *(_QWORD *)(v82 + 8) = *(_QWORD *)(v83 + 8);
                v82 = v83;
                v79 = v84;
              }
              while (v84 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
              if (v83 == a2 - 16)
              {
                *(_DWORD *)v83 = v80;
                *(_QWORD *)(v83 + 8) = v81;
              }
              else
              {
                *(_DWORD *)v83 = *(_DWORD *)(a2 - 16);
                *(_QWORD *)(v83 + 8) = *(_QWORD *)(a2 - 8);
                *(_DWORD *)(a2 - 16) = v80;
                *(_QWORD *)(a2 - 8) = v81;
                v86 = v83 - v8 + 16;
                if (v86 >= 17)
                {
                  v87 = (((unint64_t)v86 >> 4) - 2) >> 1;
                  v88 = *(_QWORD *)(v8 + 16 * v87 + 8);
                  v89 = *(_QWORD *)(v83 + 8);
                  if (v88 > v89)
                  {
                    v90 = *(_DWORD *)v83;
                    do
                    {
                      v91 = v87;
                      v92 = v83;
                      v83 = v8 + 16 * v91;
                      *(_DWORD *)v92 = *(_DWORD *)v83;
                      *(_QWORD *)(v92 + 8) = v88;
                      if (!v91)
                        break;
                      v87 = (v91 - 1) >> 1;
                      v88 = *(_QWORD *)(v8 + 16 * v87 + 8);
                    }
                    while (v88 > v89);
                    *(_DWORD *)v83 = v90;
                    *(_QWORD *)(v8 + 16 * v91 + 8) = v89;
                  }
                }
              }
              a2 -= 16;
              v72 = v78-- <= 2;
            }
            while (!v72);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = v8 + 16 * (v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
          result = (uint64_t)sub_19BFF01C4((int *)(v7 + 16 * (v10 >> 1)), (int *)v7, (int *)(a2 - 16));
        }
        else
        {
          sub_19BFF01C4((int *)v7, (int *)(v7 + 16 * (v10 >> 1)), (int *)(a2 - 16));
          sub_19BFF01C4((int *)(v7 + 16), (int *)(v12 - 16), (int *)(a2 - 32));
          sub_19BFF01C4((int *)(v7 + 32), (int *)(v7 + 16 + 16 * v11), (int *)(a2 - 48));
          result = (uint64_t)sub_19BFF01C4((int *)(v12 - 16), (int *)v12, (int *)(v7 + 16 + 16 * v11));
          v13 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v13;
          v14 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v7 + 8);
          if (*(_QWORD *)(v7 - 8) > v15)
            goto LABEL_12;
          if (v15 <= *(_QWORD *)(a2 - 8))
          {
            v32 = v7 + 16;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              v33 = *(_QWORD *)(v32 + 8);
              v32 += 16;
            }
            while (v15 <= v33);
          }
          else
          {
            v30 = v7;
            do
            {
              v8 = v30 + 16;
              v31 = *(_QWORD *)(v30 + 24);
              v30 += 16;
            }
            while (v15 <= v31);
          }
          v34 = a2;
          if (v8 < a2)
          {
            v35 = a2;
            do
            {
              v34 = v35 - 16;
              v36 = *(_QWORD *)(v35 - 8);
              v35 -= 16;
            }
            while (v15 > v36);
          }
          v37 = *(_DWORD *)v7;
          while (v8 < v34)
          {
            v38 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v34;
            *(_DWORD *)v34 = v38;
            v39 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v34 + 8);
            *(_QWORD *)(v34 + 8) = v39;
            do
            {
              v40 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v15 <= v40);
            do
            {
              v41 = *(_QWORD *)(v34 - 8);
              v34 -= 16;
            }
            while (v15 > v41);
          }
          if (v8 - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v37;
          *(_QWORD *)(v8 - 8) = v15;
          continue;
        }
        v15 = *(_QWORD *)(v7 + 8);
LABEL_12:
        v16 = *(_DWORD *)v7;
        v17 = v7;
        do
        {
          v18 = v17;
          v17 += 16;
        }
        while (*(_QWORD *)(v18 + 24) > v15);
        v19 = a2;
        if (v18 == v7)
        {
          v22 = a2;
          while (v17 < v22)
          {
            v20 = v22 - 16;
            v23 = *(_QWORD *)(v22 - 8);
            v22 -= 16;
            if (v23 > v15)
              goto LABEL_22;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 16;
            v21 = *(_QWORD *)(v19 - 8);
            v19 -= 16;
          }
          while (v21 <= v15);
        }
LABEL_22:
        v8 = v17;
        if (v17 < v20)
        {
          v24 = v20;
          do
          {
            v25 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v24;
            *(_DWORD *)v24 = v25;
            v26 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v24 + 8);
            *(_QWORD *)(v24 + 8) = v26;
            do
            {
              v27 = *(_QWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v27 > v15);
            do
            {
              v28 = *(_QWORD *)(v24 - 8);
              v24 -= 16;
            }
            while (v28 <= v15);
          }
          while (v8 < v24);
        }
        if (v8 - 16 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 16) = v16;
        *(_QWORD *)(v8 - 8) = v15;
        if (v17 < v20)
        {
LABEL_33:
          result = sub_19BFEF930(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_19BFF0328(v7, v8 - 16);
        result = sub_19BFF0328(v8, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_19BFF00C4(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[4 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62)
    sub_19BF8EB40();
  v8 = v7 - v3;
  v9 = v8 >> 1;
  if (v8 >> 1 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)sub_19BFB3588(v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = &v11[4 * v5];
  v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
    operator delete(v12);
}

int *sub_19BFF01C4(int *result, int *a2, int *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)a3 + 1);
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      *((_QWORD *)a2 + 1) = v5;
      *((_QWORD *)a3 + 1) = v3;
      v8 = *((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)result + 1);
      if (v8 > v9)
      {
        v10 = *result;
        *result = *a2;
        *a2 = v10;
        *((_QWORD *)result + 1) = v8;
        *((_QWORD *)a2 + 1) = v9;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 <= v3)
    {
      *result = *a2;
      *a2 = v6;
      *((_QWORD *)result + 1) = v3;
      *((_QWORD *)a2 + 1) = v4;
      v11 = *((_QWORD *)a3 + 1);
      if (v11 <= v4)
        return result;
      *a2 = *a3;
      *a3 = v6;
      *((_QWORD *)a2 + 1) = v11;
    }
    else
    {
      *result = *a3;
      *a3 = v6;
      *((_QWORD *)result + 1) = v5;
    }
    *((_QWORD *)a3 + 1) = v4;
  }
  return result;
}

int *sub_19BFF027C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *result;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;

  result = sub_19BFF01C4((int *)a1, (int *)a2, (int *)a3);
  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a3 + 8);
  if (v9 > v10)
  {
    v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    *(_QWORD *)(a3 + 8) = v9;
    *(_QWORD *)(a4 + 8) = v10;
    v12 = *(_QWORD *)(a3 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v12 > v13)
    {
      v14 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v14;
      *(_QWORD *)(a2 + 8) = v12;
      *(_QWORD *)(a3 + 8) = v13;
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(_QWORD *)(a1 + 8);
      if (v15 > v16)
      {
        v17 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v17;
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a2 + 8) = v16;
      }
    }
  }
  return result;
}

BOOL sub_19BFF0328(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 8);
      v7 = *(_QWORD *)(a1 + 8);
      if (v6 > v7)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        *(_QWORD *)(a1 + 8) = v6;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      sub_19BFF01C4((int *)a1, (int *)(a1 + 16), (int *)(a2 - 16));
      return 1;
    case 4:
      sub_19BFF027C(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_19BFF027C(a1, a1 + 16, a1 + 32, a1 + 48);
      v18 = *(_QWORD *)(a2 - 8);
      v19 = *(_QWORD *)(a1 + 56);
      if (v18 > v19)
      {
        v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v20;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a2 - 8) = v19;
        v21 = *(_QWORD *)(a1 + 56);
        v22 = *(_QWORD *)(a1 + 40);
        if (v21 > v22)
        {
          v23 = *(_DWORD *)(a1 + 32);
          v24 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 32) = v24;
          *(_DWORD *)(a1 + 48) = v23;
          *(_QWORD *)(a1 + 40) = v21;
          *(_QWORD *)(a1 + 56) = v22;
          v25 = *(_QWORD *)(a1 + 24);
          if (v21 > v25)
          {
            v26 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v24;
            *(_DWORD *)(a1 + 32) = v26;
            *(_QWORD *)(a1 + 24) = v21;
            *(_QWORD *)(a1 + 40) = v25;
            v27 = *(_QWORD *)(a1 + 8);
            if (v21 > v27)
            {
              v28 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24;
              *(_DWORD *)(a1 + 16) = v28;
              *(_QWORD *)(a1 + 8) = v21;
              *(_QWORD *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 32;
      sub_19BFF01C4((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_QWORD *)(v10 + 8);
    if (v13 > *(_QWORD *)(v9 + 8))
    {
      v14 = *(_DWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_DWORD *)(v16 + 48) = *(_DWORD *)(a1 + v15 + 32);
        *(_QWORD *)(v16 + 56) = *(_QWORD *)(a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 <= *(_QWORD *)(v16 + 24))
        {
          v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_DWORD *)v17 = v14;
      *(_QWORD *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

_QWORD *sub_19BFF0538(_QWORD *a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *exception;
  _QWORD *v13;
  __int128 v14;

  *a1 = &off_1E3D143C8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v3 = a2[1];
  v4 = a2[2];
  v5 = v4 + 4;
  if (v3)
    v6 = v5 > v3;
  else
    v6 = 0;
  if (v6 || (v7 = *a2, a2[2] = v5, !v7))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19BF8E43C(&v14, "Corrupt input stream: failed to read meta flags codebook length");
    sub_19BFE98CC(exception, &v14);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D12D50, (void (*)(void *))sub_19BFE9934);
  }
  v8 = bswap32(*(_DWORD *)(v7 + v4));
  if (v3 && v5 + v8 > v3)
  {
    v13 = __cxa_allocate_exception(0x20uLL);
    sub_19BF8E43C(&v14, "Corrupt input stream: cannot read meta flags codebook");
    sub_19BFE98CC(v13, &v14);
    __cxa_throw(v13, (struct type_info *)&unk_1E3D12D50, (void (*)(void *))sub_19BFE9934);
  }
  v9 = v8 >> 2;
  if (v8 > 3)
  {
    sub_19BFD30A0(a1 + 1, v8 >> 2);
    v10 = (char *)a1[2];
    memmove(v10, (const void *)(v7 + v5), 4 * v9);
  }
  else
  {
    v10 = 0;
  }
  a1[2] = &v10[4 * v9];
  return a1;
}

void sub_19BFF0694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  void *v18;

  v18 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v15 + 16) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_19BFF06F0(uint64_t a1)
{
  sub_19BFF5018(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFF0714(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  const UInt8 *v9;
  unsigned int v10;
  const __CFURL *v11;
  unsigned __int16 *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int *v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  const __CFURL *PathComponent;
  CFErrorRef err;
  __int128 v26;
  uint64_t v27;
  int v28;
  _DWORD bufLen[3];
  uint64_t v30;
  char v31;
  uint8_t buf[24];
  unsigned __int16 v33[3];
  char v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = (std::mutex *)(a1 + 1600);
  std::mutex::lock((std::mutex *)(a1 + 1600));
  v3 = *(_QWORD *)(a1 + 120);
  if (!*(_BYTE *)(v3 + 16) || (v4 = *(_QWORD **)(v3 + 56)) == 0 || *(_BYTE *)(v3 + 17))
  {
LABEL_4:
    LOBYTE(v26) = 0;
    v31 = 0;
    goto LABEL_5;
  }
  v13 = (unsigned __int16 *)(v3 + 24);
  if (!*(_WORD *)(v3 + 24))
  {
    if (qword_1EE417788[0] != -1)
      dispatch_once(qword_1EE417788, &unk_1E3D16FD0);
    v23 = qword_1EE417780;
    if (os_log_type_enabled((os_log_t)qword_1EE417780, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19BF85000, v23, OS_LOG_TYPE_ERROR, "cannot store dynamic dictionary: empty path", buf, 2u);
    }
    goto LABEL_4;
  }
  *(_WORD *)(v3 + 16) = 256;
  v14 = v4[1];
  *(_QWORD *)buf = *v4;
  *(_QWORD *)&buf[8] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (unsigned int *)v4[2];
  *(_QWORD *)&buf[16] = v17;
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    if (v18 <= 0)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  sub_19BF86B60((uint64_t)v33, v13);
  v26 = *(_OWORD *)buf;
  v19 = *(_QWORD *)&buf[16];
  memset(buf, 0, sizeof(buf));
  v27 = v19;
  v28 = 0x100000;
  LOWORD(bufLen[0]) = 0;
  BYTE2(bufLen[0]) = 0;
  *(_QWORD *)&bufLen[1] = 0;
  sub_19BF8A370((uint64_t)&v28, v33);
  v31 = 1;
  if (v35 && v34 == 1)
    free(v35);
  if (*(_QWORD *)&buf[16])
    sub_19BFD5EEC(*(unsigned int **)&buf[16]);
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_5:
  std::mutex::unlock(v2);
  if (v31)
  {
    sub_19BF8CF44();
    v5 = qword_1ED024230;
    if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 80);
      if (!v6)
        v6 = a1 + 88;
      v7 = *(_QWORD *)(a1 + 1584);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v7;
      _os_log_impl(&dword_19BF85000, v5, OS_LOG_TYPE_INFO, "%s: storing %lu entries", buf, 0x16u);
    }
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (*(_QWORD *)&bufLen[1])
      v9 = *(const UInt8 **)&bufLen[1];
    else
      v9 = (const UInt8 *)&v30;
    v10 = LOWORD(bufLen[0]);
    if (!LOWORD(bufLen[0]))
    {
      sub_19BF86BF8((unsigned __int16 *)&v28);
      v10 = LOWORD(bufLen[0]);
    }
    v11 = CFURLCreateFromFileSystemRepresentation(v8, v9, v10, 0);
    PathComponent = CFURLCreateCopyDeletingLastPathComponent(v8, v11);
    sub_19BF8DC40(PathComponent, &err);
  }
  return sub_19BFF44B4((uint64_t)&v26);
}

void sub_19BFF1158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, CFTypeRef *a13, CFTypeRef a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,void *a35,uint64_t a36,uint64_t a37,void *__p,void *a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  const void *v47;
  const void *v48;
  const void *v49;

  if (a43 < 0)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  if (v49)
    CFRelease(v49);
  if (v48)
    CFRelease(v48);
  sub_19C01ABA4(&a13);
  if (a35 && a34 == 1)
    free(a35);
  if (a14)
    CFRelease(a14);
  if (v47)
    CFRelease(v47);
  sub_19BFF44B4((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF1364(std::mutex *a1)
{
  std::mutex *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];
  _BYTE v6[408];
  _QWORD v7[20];

  v7[19] = *MEMORY[0x1E0C80C00];
  v1 = a1 + 25;
  std::mutex::lock(a1 + 25);
  sub_19BFB3388(v5);
  if ((v6[*(_QWORD *)(v5[0] - 24) + 16] & 5) != 0)
  {
    v2 = 0;
  }
  else
  {
    std::istream::tellg();
    v2 = v4;
  }
  v5[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1A1AD0A90](v6);
  std::istream::~istream();
  MEMORY[0x1A1AD0C7C](v7);
  std::mutex::unlock(v1);
  return v2;
}

void sub_19BFF1470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::mutex *v26;

  sub_19BFB3530(&a26);
  std::mutex::unlock(v26);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF1494(uint64_t a1, unsigned int a2)
{
  std::mutex *v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  const __CFString *v13;
  const void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t *v17;
  const __CFString *v18;
  const void *v19[6];
  CFTypeRef cf;
  _BYTE buf[24];
  uint64_t (*v22)(uint64_t, uint64_t);
  const void **(*v23)(uint64_t);
  const void *v24[3];

  v24[2] = *(const void **)MEMORY[0x1E0C80C00];
  v4 = (std::mutex *)(a1 + 1600);
  std::mutex::lock((std::mutex *)(a1 + 1600));
  v5 = *(_QWORD *)(a1 + 1568);
  if (!v5)
    goto LABEL_17;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a2;
    if (v5 <= a2)
      v7 = a2 % v5;
  }
  else
  {
    v7 = ((_DWORD)v5 - 1) & a2;
  }
  v8 = *(uint64_t ***)(*(_QWORD *)(a1 + 1560) + 8 * v7);
  if (!v8 || (v9 = *v8) == 0)
  {
LABEL_17:
    v11 = 0;
    goto LABEL_18;
  }
  while (1)
  {
    v10 = v9[1];
    if (v10 == a2)
      break;
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= v5)
        v10 %= v5;
    }
    else
    {
      v10 &= v5 - 1;
    }
    if (v10 != v7)
      goto LABEL_17;
LABEL_16:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_17;
  }
  if (*((_DWORD *)v9 + 4) != a2)
    goto LABEL_16;
  sub_19BF8CFAC(&v18, (unsigned __int16 *)v9 + 12);
  v13 = v18;
  if (v18)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3002000000;
    v22 = sub_19BFF438C;
    v23 = sub_19BFF439C;
    v24[0] = 0;
    cf = sub_19BFF4104((_QWORD *)a1);
    v14 = (const void *)LXCursorCreateByAdvancing((uint64_t)cf, v13);
    v19[0] = v14;
    if (cf)
    {
      CFRelease(cf);
      v14 = v19[0];
    }
    v19[0] = 0;
    cf = v14;
    sub_19BFF43A4(v19);
    v19[0] = (const void *)MEMORY[0x1E0C809B0];
    v19[1] = (const void *)0x40000000;
    v19[2] = sub_19BFF43D8;
    v19[3] = &unk_1E3D16010;
    v19[4] = buf;
    v19[5] = v13;
    if (cf)
      (*(void (**)(char *, const void **))(*((_QWORD *)cf + 2) + 48))((char *)cf + 16, v19);
    v11 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
    *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = 0;
    sub_19BFF43A4(&cf);
    _Block_object_dispose(buf, 8);
    sub_19BFF4480(v24);
  }
  else
  {
    sub_19BF8CF44();
    v15 = qword_1ED024230;
    if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 80);
      if (!v16)
        v16 = a1 + 88;
      v17 = (uint64_t *)v9[4];
      if (!v17)
        v17 = v9 + 5;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v16;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v17;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v22) = a2;
      _os_log_error_impl(&dword_19BF85000, v15, OS_LOG_TYPE_ERROR, "%s: could not create CFString for string='%s' and token_id=%d", buf, 0x1Cu);
    }
    v11 = 0;
  }
  sub_19BF8DAB8((const void **)&v18);
LABEL_18:
  std::mutex::unlock(v4);
  return v11;
}

void sub_19BFF1750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  std::mutex *v9;

  sub_19BF8DAB8(&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

CFStringRef sub_19BFF17B4(uint64_t a1)
{
  char *v1;
  CFStringRef v2;
  void *__p[2];
  char v5;

  if (*(_QWORD *)(a1 + 80))
    v1 = *(char **)(a1 + 80);
  else
    v1 = (char *)(a1 + 88);
  sub_19BF8E43C(__p, v1);
  v2 = sub_19BF8DBF4((uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_19BFF180C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFF1828(std::mutex *a1)
{
  std::mutex *v2;
  _QWORD *v3;

  v2 = a1 + 25;
  std::mutex::lock(a1 + 25);
  v3 = sub_19BFF4104(a1);
  std::mutex::unlock(v2);
  return v3;
}

void sub_19BFF1868(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BFF187C(std::mutex *a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD **v5;
  char *v6;
  _QWORD *v7;
  _QWORD **v8;
  BOOL v9;
  _QWORD **v10;
  _QWORD *v11[2];

  v4 = a1 + 25;
  std::mutex::lock(a1 + 25);
  sub_19C0173CC((unsigned __int16 *)&v10, (uint64_t)a1[2].__m_.__opaque);
  v5 = v10;
  if (v10 != v11)
  {
    do
    {
      if (*((unsigned __int16 *)v5 + 20) < 0xFu)
        v6 = (char *)v5 + 42;
      else
        v6 = (char *)v5[6];
      (*(void (**)(uint64_t, _QWORD, char *))(a2 + 16))(a2, *((unsigned int *)v5 + 8), v6);
      v7 = v5[1];
      if (v7)
      {
        do
        {
          v8 = (_QWORD **)v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD **)v5[2];
          v9 = *v8 == v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v11);
  }
  sub_19BFD4974(v11[0]);
  std::mutex::unlock(v4);
}

void sub_19BFF1948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::mutex *v11;

  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF196C(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  return sub_19BFEA0A8(*(_QWORD *)(a1 + 1512), a2, a3);
}

void sub_19BFF1974(uint64_t a1@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  sub_19BF8B7D8(a3, *(_QWORD *)(a1 + 1512), a2);
}

uint64_t sub_19BFF1984(uint64_t a1, char *a2, unsigned __int16 a3)
{
  std::mutex *v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int **v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  char v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _QWORD v22[5];
  _BYTE v23[8];
  void *v24;
  unsigned __int16 v25[3];
  char v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = (std::mutex *)(a1 + 1600);
  std::mutex::lock((std::mutex *)(a1 + 1600));
  sub_19BFF6914((uint64_t)v25, a2, a3);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, unsigned __int16 *))(**(_QWORD **)(a1 + 1512) + 8))(&v20, *(_QWORD *)(a1 + 1512), v25);
  v7 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 56) + 16);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (v8 <= 0)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  v18 = v7;
  v19 = 0;
  v9 = (unsigned __int16)v20;
  if ((unsigned __int16)v20 <= 0xEu)
    v10 = (unsigned __int8 *)&v20 + 2;
  else
    v10 = v21;
  if ((_WORD)v20)
  {
    do
    {
      sub_19BFD7FEC((unsigned int *)&v14, (uint64_t)&v18, *v10);
      v11 = v14;
      v14 = 0;
      v18 = v11;
      if (v7)
      {
        sub_19BFD5EEC(v7);
        v19 = (char)v15;
        if (v14)
          sub_19BFD5EEC(v14);
        v7 = v18;
        if (!v18)
        {
LABEL_15:
          v12 = 0;
          goto LABEL_21;
        }
      }
      else
      {
        v19 = (char)v15;
        v7 = v11;
        if (!v11)
          goto LABEL_15;
      }
      ++v10;
      --v9;
    }
    while (v9);
  }
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 1174405120;
  v22[2] = sub_19BFF407C;
  v22[3] = &unk_1E3D16038;
  sub_19BF86B60((uint64_t)v23, v25);
  v22[4] = &v14;
  sub_19BFD82A4((uint64_t)&v18, (uint64_t)v22);
  v12 = *((unsigned int *)v15 + 6);
  if (v24 && v23[6] == 1)
    free(v24);
  _Block_object_dispose(&v14, 8);
  if (v7)
    sub_19BFD5EEC(v7);
LABEL_21:
  if ((unsigned __int16)v20 >= 0xFu && v21)
    MEMORY[0x1A1AD0CB8](v21, 0x1000C8077774924);
  if (v27 && v26 == 1)
    free(v27);
  std::mutex::unlock(v6);
  return v12;
}

void sub_19BFF1BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,void *a25)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFF1CA8(uint64_t a1, const __CFString *a2, int a3, double a4)
{
  std::mutex *v6;
  uint64_t v7;
  uint8_t *v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  uint64_t v13;
  const __CFString *v14;
  const char *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  const __CFString *v21;
  char v22;
  unsigned int v23;
  int v24;
  double v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  const __CFString *v29;
  __int16 v30;
  uint8_t *v31;
  unsigned int *v32;
  void *v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v25 = a4;
  v24 = a3;
  v6 = (std::mutex *)(a1 + 1600);
  std::mutex::lock((std::mutex *)(a1 + 1600));
  v23 = 0;
  v22 = 1;
  sub_19BF8C4B0((uint64_t)&v32, a2);
  v7 = *(_QWORD *)(a1 + 120);
  v8 = (uint8_t *)operator new(0x38uLL);
  *(_QWORD *)v8 = &off_1E3D12C00;
  *((_QWORD *)v8 + 1) = &v22;
  *((_QWORD *)v8 + 2) = a1;
  *((_QWORD *)v8 + 3) = &v32;
  *((_QWORD *)v8 + 4) = &v24;
  *((_QWORD *)v8 + 5) = &v25;
  *((_QWORD *)v8 + 6) = &v23;
  v31 = v8;
  v9 = *(unsigned int **)(v7 + 56);
  if (v9)
  {
    *(_BYTE *)(v7 + 16) = 1;
    sub_19BFD7ED8(v9, &v32, (uint64_t)buf);
    v8 = v31;
    if (v31 == buf)
    {
      v10 = 4;
      v8 = buf;
      goto LABEL_6;
    }
    if (!v31)
      goto LABEL_7;
  }
  v10 = 5;
LABEL_6:
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v10))();
LABEL_7:
  if (v23)
  {
    v11 = sub_19BFF2D54(a1 + 1560, v23, &v23);
    sub_19BF8A1F4((uint64_t)(v11 + 3), (unsigned __int16 *)&v32);
    if (v22)
    {
      sub_19BF8CF44();
      v12 = qword_1ED024230;
      if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEBUG))
      {
        v13 = *(_QWORD *)(a1 + 80);
        if (!v13)
          v13 = a1 + 88;
        v14 = (const __CFString *)v33;
        if (!v33)
          v14 = (const __CFString *)v34;
        *(_DWORD *)buf = 136315650;
        v27 = v13;
        v28 = 2080;
        v29 = v14;
        v30 = 1024;
        LODWORD(v31) = v23;
        v15 = "%s: added new entry '%s' with tokenID=%u";
LABEL_31:
        _os_log_debug_impl(&dword_19BF85000, v12, OS_LOG_TYPE_DEBUG, v15, buf, 0x1Cu);
      }
    }
    else
    {
      sub_19BF8CF44();
      v12 = qword_1ED024230;
      if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEBUG))
      {
        v20 = *(_QWORD *)(a1 + 80);
        if (!v20)
          v20 = a1 + 88;
        v21 = (const __CFString *)v33;
        if (!v33)
          v21 = (const __CFString *)v34;
        *(_DWORD *)buf = 136315650;
        v27 = v20;
        v28 = 2080;
        v29 = v21;
        v30 = 1024;
        LODWORD(v31) = v23;
        v15 = "%s: entry '%s' already exists with tokenID=%u";
        goto LABEL_31;
      }
    }
    v18 = v23;
    goto LABEL_22;
  }
  sub_19BF8CF44();
  v16 = qword_1ED024230;
  if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_QWORD *)(a1 + 80);
    if (!v17)
      v17 = a1 + 88;
    *(_DWORD *)buf = 136315394;
    v27 = v17;
    v28 = 2112;
    v29 = a2;
    _os_log_impl(&dword_19BF85000, v16, OS_LOG_TYPE_DEFAULT, "%s: failed to add '%@' to the lexicon", buf, 0x16u);
  }
  sub_19BFF2FA4(*(_QWORD *)(a1 + 120), &v32);
  v18 = 0;
LABEL_22:
  if (v33 && BYTE6(v32) == 1)
    free(v33);
  std::mutex::unlock(v6);
  return v18;
}

void sub_19BFF1FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,void *a21)
{
  std::mutex *v21;

  if (a21)
  {
    if (a20 == 1)
      free(a21);
  }
  std::mutex::unlock(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF2018(uint64_t a1, const __CFString *a2, int a3)
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  return sub_19BFF1CA8(a1, a2, a3, Current);
}

uint64_t sub_19BFF2054(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  std::mutex *v7;
  uint64_t v8;
  const __CFString *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int *v13;
  uint64_t v14;
  double v16;
  int v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  unsigned int *v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v18 = a2;
  v17 = a3;
  v16 = a4;
  v7 = (std::mutex *)(a1 + 1600);
  std::mutex::lock((std::mutex *)(a1 + 1600));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 64) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 64), a3);
  if ((v8 & 1) == 0)
    goto LABEL_13;
  v9 = (const __CFString *)LXEntryCopyString(a2);
  sub_19BF8C4B0((uint64_t)&v21, v9);
  v10 = sub_19BFF2D54(a1 + 1560, a3, &v17);
  sub_19BF8A1F4((uint64_t)(v10 + 3), (unsigned __int16 *)&v21);
  v11 = *(_QWORD *)(a1 + 120);
  v12 = operator new(0x28uLL);
  *v12 = &off_1E3D12058;
  v12[1] = &v21;
  v12[2] = &v17;
  v12[3] = &v18;
  v12[4] = &v16;
  v20 = v12;
  v13 = *(unsigned int **)(v11 + 56);
  if (v13)
  {
    *(_BYTE *)(v11 + 16) = 1;
    sub_19BFD7ED8(v13, &v21, (uint64_t)v19);
    v12 = v20;
    if (v20 == v19)
    {
      v14 = 4;
      v12 = v19;
      goto LABEL_7;
    }
    if (!v20)
      goto LABEL_8;
  }
  v14 = 5;
LABEL_7:
  (*(void (**)(void))(*v12 + 8 * v14))();
LABEL_8:
  if (v22 && BYTE6(v21) == 1)
    free(v22);
  if (v9)
    CFRelease(v9);
LABEL_13:
  std::mutex::unlock(v7);
  return v8;
}

void sub_19BFF21E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,void *a21)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19BFF2274(uint64_t a1, const __CFString *a2, int a3)
{
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _BYTE v19[12];
  unsigned int *v20;
  void *v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v5 = (std::mutex *)(a1 + 1600);
  std::mutex::lock((std::mutex *)(a1 + 1600));
  sub_19BF8C4B0((uint64_t)&v20, a2);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = operator new(0x20uLL);
  *v7 = &off_1E3D12160;
  v7[1] = &v13;
  v7[2] = a1;
  v7[3] = &v20;
  *(_QWORD *)&v19[4] = v7;
  v8 = *(unsigned int **)(v6 + 56);
  if (v8)
  {
    *(_BYTE *)(v6 + 16) = 1;
    sub_19BFD7ED8(v8, &v20, (uint64_t)buf);
    v7 = *(_QWORD **)&v19[4];
    if (*(uint8_t **)&v19[4] == buf)
    {
      v9 = 4;
      v7 = buf;
      goto LABEL_6;
    }
    if (!*(_QWORD *)&v19[4])
      goto LABEL_7;
  }
  v9 = 5;
LABEL_6:
  (*(void (**)(void))(*v7 + 8 * v9))();
LABEL_7:
  sub_19BF8CF44();
  v10 = qword_1ED024230;
  if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_QWORD *)(a1 + 80);
    if (!v11)
      v11 = a1 + 88;
    v12 = v21;
    if (!v21)
      v12 = v22;
    *(_DWORD *)buf = 136315650;
    v15 = v11;
    v16 = 1024;
    v17 = v13;
    v18 = 2080;
    *(_QWORD *)v19 = v12;
    _os_log_debug_impl(&dword_19BF85000, v10, OS_LOG_TYPE_DEBUG, "%s: incremented usage count by %d for '%s'", buf, 0x1Cu);
  }
  if (v21 && BYTE6(v20) == 1)
    free(v21);
  std::mutex::unlock(v5);
}

void sub_19BFF2418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  std::mutex *v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a14;
  if (a14 == v20)
  {
    v23 = 4;
    v22 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a19)
  {
    if (a18 == 1)
      free(a19);
  }
  std::mutex::unlock(v19);
  _Unwind_Resume(a1);
}

void sub_19BFF2484(uint64_t a1, const __CFString *a2, int a3)
{
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _BYTE v19[12];
  unsigned int *v20;
  void *v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v5 = (std::mutex *)(a1 + 1600);
  std::mutex::lock((std::mutex *)(a1 + 1600));
  sub_19BF8C4B0((uint64_t)&v20, a2);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = operator new(0x20uLL);
  *v7 = &off_1E3D121B8;
  v7[1] = &v13;
  v7[2] = a1;
  v7[3] = &v20;
  *(_QWORD *)&v19[4] = v7;
  v8 = *(unsigned int **)(v6 + 56);
  if (v8)
  {
    *(_BYTE *)(v6 + 16) = 1;
    sub_19BFD7ED8(v8, &v20, (uint64_t)buf);
    v7 = *(_QWORD **)&v19[4];
    if (*(uint8_t **)&v19[4] == buf)
    {
      v9 = 4;
      v7 = buf;
      goto LABEL_6;
    }
    if (!*(_QWORD *)&v19[4])
      goto LABEL_7;
  }
  v9 = 5;
LABEL_6:
  (*(void (**)(void))(*v7 + 8 * v9))();
LABEL_7:
  sub_19BF8CF44();
  v10 = qword_1ED024230;
  if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_QWORD *)(a1 + 80);
    if (!v11)
      v11 = a1 + 88;
    v12 = v21;
    if (!v21)
      v12 = v22;
    *(_DWORD *)buf = 136315650;
    v15 = v11;
    v16 = 1024;
    v17 = v13;
    v18 = 2080;
    *(_QWORD *)v19 = v12;
    _os_log_debug_impl(&dword_19BF85000, v10, OS_LOG_TYPE_DEBUG, "%s: incremented penalty count by %d for '%s'", buf, 0x1Cu);
  }
  if (v21 && BYTE6(v20) == 1)
    free(v21);
  std::mutex::unlock(v5);
}

void sub_19BFF2628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  std::mutex *v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a14;
  if (a14 == v20)
  {
    v23 = 4;
    v22 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a19)
  {
    if (a18 == 1)
      free(a19);
  }
  std::mutex::unlock(v19);
  _Unwind_Resume(a1);
}

void sub_19BFF2694(uint64_t a1, const __CFString *a2, int a3)
{
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _BYTE v19[12];
  unsigned int *v20;
  void *v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v5 = (std::mutex *)(a1 + 1600);
  std::mutex::lock((std::mutex *)(a1 + 1600));
  sub_19BF8C4B0((uint64_t)&v20, a2);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = operator new(0x20uLL);
  *v7 = &off_1E3D12108;
  v7[1] = &v13;
  v7[2] = a1;
  v7[3] = &v20;
  *(_QWORD *)&v19[4] = v7;
  v8 = *(unsigned int **)(v6 + 56);
  if (v8)
  {
    *(_BYTE *)(v6 + 16) = 1;
    sub_19BFD7ED8(v8, &v20, (uint64_t)buf);
    v7 = *(_QWORD **)&v19[4];
    if (*(uint8_t **)&v19[4] == buf)
    {
      v9 = 4;
      v7 = buf;
      goto LABEL_6;
    }
    if (!*(_QWORD *)&v19[4])
      goto LABEL_7;
  }
  v9 = 5;
LABEL_6:
  (*(void (**)(void))(*v7 + 8 * v9))();
LABEL_7:
  sub_19BF8CF44();
  v10 = qword_1ED024230;
  if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_QWORD *)(a1 + 80);
    if (!v11)
      v11 = a1 + 88;
    v12 = v21;
    if (!v21)
      v12 = v22;
    *(_DWORD *)buf = 136315650;
    v15 = v11;
    v16 = 1024;
    v17 = v13;
    v18 = 2080;
    *(_QWORD *)v19 = v12;
    _os_log_debug_impl(&dword_19BF85000, v10, OS_LOG_TYPE_DEBUG, "%s: updated meta flags to %u for '%s'", buf, 0x1Cu);
  }
  if (v21 && BYTE6(v20) == 1)
    free(v21);
  std::mutex::unlock(v5);
}

void sub_19BFF2838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  std::mutex *v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a14;
  if (a14 == v20)
  {
    v23 = 4;
    v22 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a19)
  {
    if (a18 == 1)
      free(a19);
  }
  std::mutex::unlock(v19);
  _Unwind_Resume(a1);
}

void sub_19BFF28A4(uint64_t a1, const __CFString *a2, int a3)
{
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _BYTE v19[12];
  unsigned int *v20;
  void *v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v13 = a3;
  v5 = (std::mutex *)(a1 + 1600);
  std::mutex::lock((std::mutex *)(a1 + 1600));
  sub_19BF8C4B0((uint64_t)&v20, a2);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = operator new(0x20uLL);
  *v7 = &off_1E3D120B0;
  v7[1] = &v13;
  v7[2] = a1;
  v7[3] = &v20;
  *(_QWORD *)&v19[4] = v7;
  v8 = *(unsigned int **)(v6 + 56);
  if (v8)
  {
    *(_BYTE *)(v6 + 16) = 1;
    sub_19BFD7ED8(v8, &v20, (uint64_t)buf);
    v7 = *(_QWORD **)&v19[4];
    if (*(uint8_t **)&v19[4] == buf)
    {
      v9 = 4;
      v7 = buf;
      goto LABEL_6;
    }
    if (!*(_QWORD *)&v19[4])
      goto LABEL_7;
  }
  v9 = 5;
LABEL_6:
  (*(void (**)(void))(*v7 + 8 * v9))();
LABEL_7:
  sub_19BF8CF44();
  v10 = qword_1ED024230;
  if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_QWORD *)(a1 + 80);
    if (!v11)
      v11 = a1 + 88;
    v12 = v21;
    if (!v21)
      v12 = v22;
    *(_DWORD *)buf = 136315650;
    v15 = v11;
    v16 = 1024;
    v17 = v13;
    v18 = 2080;
    *(_QWORD *)v19 = v12;
    _os_log_debug_impl(&dword_19BF85000, v10, OS_LOG_TYPE_DEBUG, "%s: updated user bitfield to %u for '%s'", buf, 0x1Cu);
  }
  if (v21 && BYTE6(v20) == 1)
    free(v21);
  std::mutex::unlock(v5);
}

void sub_19BFF2A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  std::mutex *v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a14;
  if (a14 == v20)
  {
    v23 = 4;
    v22 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a19)
  {
    if (a18 == 1)
      free(a19);
  }
  std::mutex::unlock(v19);
  _Unwind_Resume(a1);
}

BOOL sub_19BFF2AB4(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  unsigned int **v6;
  NSObject *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v4 = (std::mutex *)(a1 + 1600);
  std::mutex::lock((std::mutex *)(a1 + 1600));
  v5 = sub_19BFD34B8((_QWORD *)(a1 + 1560), a2);
  if (v5)
  {
    v6 = (unsigned int **)sub_19BFF2D54(a1 + 1560, a2, &v13);
    sub_19BFF2FA4(*(_QWORD *)(a1 + 120), v6 + 3);
    sub_19BF8CF44();
    v7 = qword_1ED024230;
    if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 80);
      v10 = sub_19BFF2D54(a1 + 1560, a2, &v13);
      v11 = a1 + 88;
      if (v9)
        v11 = v9;
      v12 = (_QWORD *)v10[4];
      if (!v12)
        v12 = v10 + 5;
      *(_DWORD *)buf = 136315394;
      v15 = v11;
      v16 = 2080;
      v17 = v12;
      _os_log_debug_impl(&dword_19BF85000, v7, OS_LOG_TYPE_DEBUG, "%s: removed '%s'", buf, 0x16u);
    }
    sub_19BFF3098((_QWORD *)(a1 + 1560), a2);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 120) + 64) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 64), a2);
  }
  std::mutex::unlock(v4);
  return v5 != 0;
}

void sub_19BFF2C2C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BFF2C48(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  std::error_code *v4;
  const std::__fs::filesystem::path *v5;
  uint64_t v6;
  uint64_t i;

  v2 = (std::mutex *)(a1 + 1600);
  std::mutex::lock((std::mutex *)(a1 + 1600));
  v3 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(v3 + 56))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 64) + 40))(*(_QWORD *)(v3 + 64));
    sub_19BFD823C(*(_QWORD *)(v3 + 56));
    if (*(_QWORD *)(v3 + 32))
      v5 = *(const std::__fs::filesystem::path **)(v3 + 32);
    else
      v5 = (const std::__fs::filesystem::path *)(v3 + 40);
    remove(v5, v4);
    *(_BYTE *)(v3 + 16) = 1;
  }
  if (*(_QWORD *)(a1 + 1584))
  {
    sub_19BFF2D08(*(_QWORD **)(a1 + 1576));
    *(_QWORD *)(a1 + 1576) = 0;
    v6 = *(_QWORD *)(a1 + 1568);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 1560) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 1584) = 0;
  }
  std::mutex::unlock(v2);
}

void sub_19BFF2CF4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19BFF2D08(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = v1;
      v1 = (_QWORD *)*v1;
      v3 = (void *)v2[4];
      if (v3)
      {
        if (*((_BYTE *)v2 + 30) == 1)
          free(v3);
      }
      operator delete(v2);
    }
    while (v1);
  }
}

_QWORD *sub_19BFF2D54(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v23[2];
  char v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x38uLL);
  v23[0] = (uint64_t)v10;
  v23[1] = a1 + 16;
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 6) = 0x100000;
  *((_WORD *)v10 + 14) = 0;
  *((_BYTE *)v10 + 30) = 0;
  v10[4] = 0;
  *((_BYTE *)v10 + 40) = 0;
  v24 = 1;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_19BFD1648(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v19 + 8 * v3) = v12;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_19BFF31FC(v23);
  return v10;
}

void sub_19BFF2F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFF31FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFF2FA4(uint64_t a1, unsigned int **a2)
{
  _QWORD *result;
  unsigned int *v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = v6;
  v6[0] = &off_1E3D12210;
  v7 = v6;
  v4 = *(unsigned int **)(a1 + 56);
  if (v4)
  {
    *(_BYTE *)(a1 + 16) = 1;
    sub_19BFD7ED8(v4, a2, (uint64_t)v6);
    result = v7;
    if (v7 == v6)
    {
      v5 = 4;
      result = v6;
    }
    else
    {
      if (!v7)
        return result;
      v5 = 5;
    }
  }
  else
  {
    v5 = 4;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19BFF305C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19BFF3098(_QWORD *a1, unsigned int a2)
{
  uint64_t *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13[2];
  char v14;

  v3 = sub_19BFD34B8(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = v3[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(uint64_t **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (uint64_t *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2)
      goto LABEL_19;
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_19:
      if (!*v3)
        goto LABEL_20;
      v10 = *(_QWORD *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_20:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *v8 = v11;
    *v3 = 0;
    --a1[3];
    v13[0] = (uint64_t)v3;
    v13[1] = (uint64_t)(a1 + 2);
    v14 = 1;
    sub_19BFF31FC(v13);
  }
}

void sub_19BFF31FC(uint64_t *a1)
{
  uint64_t v1;
  void *v2;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v2 = *(void **)(v1 + 32);
      if (v2)
      {
        if (*(_BYTE *)(v1 + 30) == 1)
          free(v2);
      }
    }
    operator delete((void *)v1);
  }
}

void sub_19BFF3250()
{
  void **v0;
  void *__p[2];
  char v2;

  sub_19BF8E43C(__p, "Mutable");
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  qword_1ED024230 = (uint64_t)os_log_create("com.apple.Lexicon", (const char *)v0);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_19BFF32BC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFF32D0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D12210;
  return result;
}

void sub_19BFF32F4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D12210;
}

void sub_19BFF330C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_19BFF3314(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11650))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFF3350()
{
  return &unk_1E3D11650;
}

void sub_19BFF3360()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFF3374(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D120B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19BFF33B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D120B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19BFF33DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  double Current;
  unsigned __int16 *v10;
  _QWORD *v11;
  unsigned int v12;

  if (*(_QWORD *)a2)
  {
    sub_19BFF3524(a3, (unsigned __int16 *)(*(_QWORD *)a2 + 8), *(_DWORD *)(*(_QWORD *)a2 + 40), *(_DWORD *)(*(_QWORD *)a2 + 44), *(_DWORD *)(*(_QWORD *)a2 + 48), *(_DWORD *)(*(_QWORD *)a2 + 52), **(_DWORD **)(a1 + 8), *(double *)(*(_QWORD *)a2 + 56));
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(unsigned __int16 **)(a1 + 24);
    v7 = **(_DWORD **)(a1 + 8);
    v8 = (*(uint64_t (**)(_QWORD, unsigned __int16 *))(**(_QWORD **)(*(_QWORD *)(v5 + 120) + 64) + 16))(*(_QWORD *)(*(_QWORD *)(v5 + 120) + 64), v6);
    Current = CFAbsoluteTimeGetCurrent();
    sub_19BFF3524(a3, v6, v8, 0, 0, 0, v7, Current);
    v10 = *(unsigned __int16 **)(a1 + 24);
    v12 = *(_DWORD *)(*a3 + 40);
    v11 = sub_19BFF35EC(v5 + 1560, v12, &v12);
    sub_19BF8A1F4((uint64_t)(v11 + 3), v10);
  }
}

void sub_19BFF34C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFD5E54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF34DC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11610))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFF3518()
{
  return &unk_1E3D11610;
}

int32x2_t sub_19BFF3524(uint64_t *a1, unsigned __int16 *a2, int a3, int a4, unsigned int a5, unsigned int a6, int a7, double a8)
{
  uint64_t v16;
  int32x2_t result;

  v16 = operator new();
  *(_DWORD *)v16 = 1;
  sub_19BF86B60(v16 + 8, a2);
  *(_DWORD *)(v16 + 40) = a3;
  *(_DWORD *)(v16 + 44) = a4;
  result = vmax_s32((int32x2_t)__PAIR64__(a6, a5), 0);
  *(int32x2_t *)(v16 + 48) = result;
  *(double *)(v16 + 56) = a8;
  *(_DWORD *)(v16 + 64) = a7;
  *a1 = v16;
  return result;
}

void sub_19BFF35C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CDC](v1, 0x1010C403B695573);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFF35EC(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v23[2];
  char v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x38uLL);
  v23[0] = (uint64_t)v10;
  v23[1] = a1 + 16;
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 6) = 0x100000;
  *((_WORD *)v10 + 14) = 0;
  *((_BYTE *)v10 + 30) = 0;
  v10[4] = 0;
  *((_BYTE *)v10 + 40) = 0;
  v24 = 1;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_19BFD1648(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v19 + 8 * v3) = v12;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_19BFF31FC(v23);
  return v10;
}

void sub_19BFF3828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFF31FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19BFF3840()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFF3854(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D12108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19BFF3894(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D12108;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19BFF38BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unsigned __int16 *v6;
  _QWORD *v7;
  unsigned int v8;

  if (*(_QWORD *)a2)
  {
    sub_19BFF3524(a3, (unsigned __int16 *)(*(_QWORD *)a2 + 8), *(_DWORD *)(*(_QWORD *)a2 + 40), **(_DWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)a2 + 48), *(_DWORD *)(*(_QWORD *)a2 + 52), *(_DWORD *)(*(_QWORD *)a2 + 64), *(double *)(*(_QWORD *)a2 + 56));
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    sub_19C01B454(a3, *(_QWORD *)(*(_QWORD *)(v5 + 120) + 64), *(unsigned __int16 **)(a1 + 24), **(_DWORD **)(a1 + 8), 0);
    v6 = *(unsigned __int16 **)(a1 + 24);
    v8 = *(_DWORD *)(*a3 + 40);
    v7 = sub_19BFF35EC(v5 + 1560, v8, &v8);
    sub_19BF8A1F4((uint64_t)(v7 + 3), v6);
  }
}

void sub_19BFF3970(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFD5E54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF3988(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11620))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFF39C4()
{
  return &unk_1E3D11620;
}

void sub_19BFF39D4()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFF39E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D121B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19BFF3A28(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D121B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19BFF3A50(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  int v9;
  int v10;
  double Current;
  unsigned __int16 *v12;
  _QWORD *v13;
  unsigned int v14;

  if (*a2)
  {
    v5 = *a2;
    sub_19BFF3524(a3, (unsigned __int16 *)(v5 + 8), *(_DWORD *)(v5 + 40), *(_DWORD *)(v5 + 44), *(_DWORD *)(v5 + 48), **(_DWORD **)(a1 + 8) + *(_DWORD *)(v5 + 52), *(_DWORD *)(v5 + 64), *(double *)(v5 + 56));
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(unsigned __int16 **)(a1 + 24);
    v8 = **(_DWORD **)(a1 + 8);
    v9 = (*(uint64_t (**)(_QWORD, unsigned __int16 *))(**(_QWORD **)(*(_QWORD *)(v6 + 120) + 64) + 16))(*(_QWORD *)(*(_QWORD *)(v6 + 120) + 64), v7);
    if (!v9)
      __assert_rtn("make_entry", "TIDynamicDictionaryImpl.cpp", 635, "tokenID != kLXTokenIDUNK && \"generated an invalid tokenID\"");
    v10 = v9;
    Current = CFAbsoluteTimeGetCurrent();
    sub_19BFF3524(a3, v7, v10, 0, 0, v8, 0, Current);
    v12 = *(unsigned __int16 **)(a1 + 24);
    v14 = *(_DWORD *)(*a3 + 40);
    v13 = sub_19BFF35EC(v6 + 1560, v14, &v14);
    sub_19BF8A1F4((uint64_t)(v13 + 3), v12);
  }
}

void sub_19BFF3B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFD5E54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF3B7C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11640))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFF3BB8()
{
  return &unk_1E3D11640;
}

void sub_19BFF3BC8()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFF3BDC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D12160;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19BFF3C1C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D12160;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19BFF3C44(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  _QWORD *v8;
  unsigned int v9;

  if (*a2)
  {
    v5 = *a2;
    sub_19BFF3524(a3, (unsigned __int16 *)(v5 + 8), *(_DWORD *)(v5 + 40), *(_DWORD *)(v5 + 44), **(_DWORD **)(a1 + 8) + *(_DWORD *)(v5 + 48), *(_DWORD *)(v5 + 52), *(_DWORD *)(v5 + 64), *(double *)(v5 + 56));
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16);
    sub_19C01B454(a3, *(_QWORD *)(*(_QWORD *)(v6 + 120) + 64), *(unsigned __int16 **)(a1 + 24), 0, **(_DWORD **)(a1 + 8));
    v7 = *(unsigned __int16 **)(a1 + 24);
    v9 = *(_DWORD *)(*a3 + 40);
    v8 = sub_19BFF35EC(v6 + 1560, v9, &v9);
    sub_19BF8A1F4((uint64_t)(v8 + 3), v7);
  }
}

void sub_19BFF3CFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFD5E54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF3D14(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11630))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFF3D50()
{
  return &unk_1E3D11630;
}

void sub_19BFF3D60()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFF3D74(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D12058;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19BFF3DB4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D12058;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

int32x2_t sub_19BFF3DDC@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *v2;

  v2 = **(_DWORD ***)(a1 + 24);
  if (!v2)
    __assert_rtn("LXEntryGetMetaFlags", "LXEntry.cpp", 45, "entry");
  return sub_19BFF3524(a2, *(unsigned __int16 **)(a1 + 8), **(_DWORD **)(a1 + 16), v2[13] & 0x3FA000EF, v2[16], v2[17], v2[30], **(double **)(a1 + 32));
}

uint64_t sub_19BFF3E44(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11600))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFF3E80()
{
  return &unk_1E3D11600;
}

void sub_19BFF3E90()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFF3EA4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E3D12C00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_19BFF3EEC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3D12C00;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19BFF3F1C(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int16 *v9;
  int v10;
  double v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 16);
  *a3 = 0;
  if (v5)
  {
    **(_BYTE **)(a1 + 8) = 0;
    sub_19BFF3524(&v14, (unsigned __int16 *)(v5 + 8), *(_DWORD *)(v5 + 40), *(_DWORD *)(v5 + 44), *(_DWORD *)(v5 + 48), *(_DWORD *)(v5 + 52), *(_DWORD *)(v5 + 64), *(double *)(v5 + 56));
    v7 = v14;
    *a3 = v14;
    v8 = *(_DWORD *)(v7 + 40);
    if (!v8)
      __assert_rtn("operator()", "LXMutableLexiconImpl.cpp", 401, "new_entry->token_id() != kLXTokenIDUNK && \"invalid tokenID for existing entry\"");
  }
  else
  {
    v9 = *(unsigned __int16 **)(a1 + 24);
    v10 = **(_DWORD **)(a1 + 32);
    v11 = **(double **)(a1 + 40);
    v12 = (*(uint64_t (**)(_QWORD, unsigned __int16 *))(**(_QWORD **)(*(_QWORD *)(v6 + 120) + 64) + 16))(*(_QWORD *)(*(_QWORD *)(v6 + 120) + 64), v9);
    sub_19BFF3524(&v14, v9, v12, v10, 0, 0, 0, v11);
    v13 = v14;
    *a3 = v14;
    v8 = *(_DWORD *)(v13 + 40);
  }
  **(_DWORD **)(a1 + 48) = v8;
}

void sub_19BFF401C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFD5E54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF4034(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D12BE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFF4070()
{
  return &unk_1E3D12BE0;
}

unsigned __int16 *sub_19BFF407C(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  unsigned __int16 *result;

  v5 = *a2;
  result = (unsigned __int16 *)(*a2 + 8);
  if (result == (unsigned __int16 *)(a1 + 40)
    || (result = (unsigned __int16 *)sub_19BFF7920(result, (unsigned __int16 *)(a1 + 40)), (_DWORD)result))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(v5 + 40);
    *a3 = 1;
  }
  return result;
}

uint64_t sub_19BFF40D8(uint64_t a1, uint64_t a2)
{
  return sub_19BF86B60(a1 + 40, (unsigned __int16 *)(a2 + 40));
}

void sub_19BFF40E4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 46) == 1)
      free(v2);
  }
}

_QWORD *sub_19BFF4104(_QWORD *a1)
{
  unsigned int *v2;
  int v3;
  _QWORD *Instance;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int *v15;

  v2 = *(unsigned int **)(*(_QWORD *)(a1[15] + 56) + 16);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
    if (v3 <= 0)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  if (qword_1ED024388 != -1)
    dispatch_once(&qword_1ED024388, &unk_1E3D16110);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  v5 = Instance;
  v6 = a1[193];
  v7 = (std::__shared_weak_count *)a1[194];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v15 = v2;
    Instance[4] = v7;
    Instance[2] = &off_1E3D148A8;
    Instance[3] = v6;
    v10 = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  else
  {
    v15 = v2;
    Instance[4] = 0;
    Instance[2] = &off_1E3D148A8;
    Instance[3] = v6;
  }
  Instance[5] = v2;
  if (v2)
  {
    do
      v12 = __ldaxr(v2);
    while (__stlxr(v12 + 1, v2));
    if (v12 < 1)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    v13 = v15;
  }
  else
  {
    v13 = 0;
  }
  *((_BYTE *)v5 + 48) = 0;
  *((_DWORD *)v5 + 14) = 0x100000;
  *((_WORD *)v5 + 30) = 0;
  *((_BYTE *)v5 + 62) = 0;
  v5[8] = 0;
  *((_BYTE *)v5 + 72) = 0;
  *((_WORD *)v5 + 44) = 0;
  *((_BYTE *)v5 + 104) = 0;
  *((_WORD *)v5 + 56) = 0;
  *((_DWORD *)v5 + 32) = 0;
  v5[17] = 0;
  v5[18] = 0;
  *((_BYTE *)v5 + 152) = 1;
  if (v13)
    sub_19BFD5EEC(v13);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  return v5;
}

void sub_19BFF4304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  sub_19BFD8168(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF4340()
{
  uint64_t result;

  qword_1ED024390 = 0;
  *(_QWORD *)algn_1ED024398 = "LXCursor";
  qword_1ED0243A0 = 0;
  unk_1ED0243A8 = 0;
  qword_1ED0243B0 = (uint64_t)sub_19BFCFB34;
  unk_1ED0243B8 = 0u;
  unk_1ED0243C8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0243F0 = result;
  return result;
}

uint64_t sub_19BFF438C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

const void **sub_19BFF439C(uint64_t a1)
{
  return sub_19BFF4480((const void **)(a1 + 40));
}

const void **sub_19BFF43A4(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

const void **sub_19BFF43D8(uint64_t a1, const void *a2, _BYTE *a3)
{
  const __CFString *v6;
  uint64_t v7;
  const void *v8;
  const __CFString *v10;

  v6 = (const __CFString *)LXEntryCopyString((uint64_t)a2);
  v10 = v6;
  if (v6 && CFStringCompare(v6, *(CFStringRef *)(a1 + 40), 0) == kCFCompareEqualTo)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(const void **)(v7 + 40);
    if (v8 != a2)
    {
      if (a2)
      {
        CFRetain(a2);
        v8 = *(const void **)(v7 + 40);
      }
      if (v8)
        CFRelease(v8);
      *(_QWORD *)(v7 + 40) = a2;
    }
    *a3 = 1;
  }
  return sub_19BF8DAB8((const void **)&v10);
}

void sub_19BFF446C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BF8DAB8((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_19BFF4480(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

uint64_t sub_19BFF44B4(uint64_t a1)
{
  void *v2;
  unsigned int *v3;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(void **)(a1 + 32);
    if (v2 && *(_BYTE *)(a1 + 30) == 1)
      free(v2);
    v3 = *(unsigned int **)(a1 + 16);
    if (v3)
      sub_19BFD5EEC(v3);
    sub_19BFACCEC(a1);
  }
  return a1;
}

__n128 sub_19BFF450C(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_19BFF4530(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_19BFF480C(&v1);
}

void sub_19BFF4558(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 *v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  int v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __int16 v24;
  _QWORD *v25;
  __int16 v26;
  uint64_t *v27;
  __int16 v28;
  int v29;
  unsigned __int16 v30[3];
  char v31;
  void *v32;
  uint64_t v33;
  unsigned __int16 v34[3];
  char v35;
  void *v36;
  _QWORD v37[3];

  v37[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *a2;
  v6 = *(_DWORD *)(*a2 + 40);
  if (sub_19BFD34B8((_QWORD *)(v4 + 1560), v6))
  {
    sub_19BF86B60((uint64_t)v34, (unsigned __int16 *)(v5 + 8));
    v22 = *(_DWORD *)(*a2 + 40);
    v7 = (unsigned __int16 *)sub_19BFF35EC(v4 + 1560, v22, &v22);
    sub_19BF86B60((uint64_t)v30, v7 + 12);
    sub_19BF8CF44();
    v8 = qword_1ED024230;
    if (os_log_type_enabled((os_log_t)qword_1ED024230, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(v4 + 80);
      if (!v9)
        v9 = v4 + 88;
      v10 = v36;
      if (!v36)
        v10 = v37;
      v11 = (uint64_t *)v32;
      v12 = *(_DWORD *)(*a2 + 40);
      if (!v32)
        v11 = &v33;
      v22 = 136315906;
      v23 = v9;
      v24 = 2080;
      v25 = v10;
      v26 = 2080;
      v27 = v11;
      v28 = 1024;
      v29 = v12;
      _os_log_impl(&dword_19BF85000, v8, OS_LOG_TYPE_DEFAULT, "%s: collision for strings '%s' and '%s': tokenID=%u", (uint8_t *)&v22, 0x26u);
    }
    v13 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v14 = *(_DWORD *)(*a2 + 40);
    v15 = (int *)v13[6];
    if ((unint64_t)v15 >= v13[7])
    {
      v16 = sub_19BFF488C(v13 + 5, v14, v34);
    }
    else
    {
      *v15 = v14;
      sub_19BF86B60((uint64_t)(v15 + 2), v34);
      v16 = (uint64_t)(v15 + 10);
      v13[6] = v15 + 10;
    }
    v13[6] = v16;
    v18 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v19 = *(_DWORD *)(*a2 + 40);
    v20 = (int *)v18[6];
    if ((unint64_t)v20 >= v18[7])
    {
      v21 = sub_19BFF488C(v18 + 5, v19, v30);
    }
    else
    {
      *v20 = v19;
      sub_19BF86B60((uint64_t)(v20 + 2), v30);
      v21 = (uint64_t)(v20 + 10);
      v18[6] = v20 + 10;
    }
    v18[6] = v21;
    if (v32 && v31 == 1)
      free(v32);
    if (v36)
    {
      if (v35 == 1)
        free(v36);
    }
  }
  else
  {
    v22 = v6;
    v17 = sub_19BFF35EC(v4 + 1560, v6, &v22);
    sub_19BF8A1F4((uint64_t)(v17 + 3), (unsigned __int16 *)(v5 + 8));
  }
}

void sub_19BFF47A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, void *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,void *a23)
{
  if (a17 && a16 == 1)
    free(a17);
  if (a23)
  {
    if (a22 == 1)
      free(a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_19BFF480C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          if (*(v4 - 26) == 1)
            free(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_19BFF488C(_QWORD *a1, int a2, unsigned __int16 *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  char *v22;
  _BYTE v23[24];
  _QWORD *v24;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    sub_19BF8EB40();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v4)
    v4 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v4;
  v24 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_19BF8E6D0();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v3];
  v22 = v9;
  *(_QWORD *)v23 = v10;
  *(_QWORD *)&v23[8] = v10;
  *(_QWORD *)&v23[16] = &v9[40 * v8];
  *(_DWORD *)v10 = a2;
  sub_19BF86B60((uint64_t)(v10 + 8), a3);
  v11 = 0;
  v12 = *(_QWORD *)v23;
  *(_QWORD *)&v23[8] += 40;
  v14 = *a1;
  v13 = a1[1];
  while (1)
  {
    v15 = v12 + v11;
    v16 = v13 + v11;
    if (v13 + v11 == v14)
      break;
    *(_DWORD *)(v15 - 40) = *(_DWORD *)(v16 - 40);
    v11 -= 40;
    sub_19BF86B60(v15 - 32, (unsigned __int16 *)(v16 - 32));
  }
  v17 = a1[2];
  v18 = *(_OWORD *)&v23[8];
  v21 = *(_QWORD *)&v23[8];
  v19 = *(_OWORD *)a1;
  *a1 = v15;
  *(_OWORD *)v23 = v19;
  *(_OWORD *)(a1 + 1) = v18;
  *(_QWORD *)&v23[16] = v17;
  v22 = (char *)v19;
  sub_19BFF4A3C((uint64_t)&v22);
  return v21;
}

void sub_19BFF49F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19BFF4A3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF4A3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      v5 = *(void **)(v2 - 24);
      if (v5 && *(_BYTE *)(v2 - 26) == 1)
      {
        free(v5);
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19BFF4AA4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16[2];

  if (*(_QWORD *)(a1 + 8))
    v7 = *(char **)(a1 + 8);
  else
    v7 = (char *)(a1 + 16);
  if (!*v7 || !strcmp(v7, "root"))
  {
    v9 = uset_openEmpty();
    v15 = MEMORY[0x1E0DE6988];
    if (!v9)
      __assert_rtn("quicktype_exemplars", "LXMutableLexiconImpl.cpp", 304, "quicktype_exemplars");
    for (i = 0; i != 17; ++i)
    {
      sub_19BFF4E30(v16, off_1E3D16068[i], a4);
      v11 = v16[0];
      if (v16[0])
      {
        MEMORY[0x1A1AD136C](v9, v16[0]);
        ((void (*)(uint64_t))v16[1])(v11);
      }
    }
    result = MEMORY[0x1A1AD1390](v9);
  }
  else
  {
    result = sub_19BFF4E30(&v14, v7, a4);
    v9 = v14;
  }
  if (v9)
  {
    for (j = 0; (int)j < (int)MEMORY[0x1A1AD13B4](v9); j = (j + 1))
    {
      v13 = MEMORY[0x1A1AD1378](v9, j);
      if ((v13 & 0x80000000) == 0)
        sub_19BFF4C5C(a2, a3, v13);
    }
    return ((uint64_t (*)(uint64_t))v15)(v9);
  }
  return result;
}

void sub_19BFF4C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t))
{
  uint64_t v12;
  uint64_t v13;

  a12(v13);
  if (v12)
    uset_close();
  _Unwind_Resume(a1);
}

void sub_19BFF4C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(&v6, a2, a3);
  v5 = (unsigned __int16)v6;
  if ((_WORD)v6)
  {
    if (!sub_19BFF4D28((_QWORD *)(a1 + 1296), (unsigned __int16 *)&v6))
    {
      sub_19C016E30(a1, (unsigned __int16 *)&v6, v3);
      v5 = (unsigned __int16)v6;
    }
    if (v5 >= 0xF)
    {
      if (v7)
        MEMORY[0x1A1AD0CB8](v7, 0x1000C8077774924);
    }
  }
}

void sub_19BFF4CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9, uint64_t a10)
{
  if (a9 >= 0xFu)
  {
    if (a10)
      MEMORY[0x1A1AD0CB8](a10, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_19BFF4D28(_QWORD *a1, unsigned __int16 *a2)
{
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 **v12;
  unsigned __int16 *i;
  unint64_t v14;

  v4 = *a2;
  if (v4 <= 0xE)
    v5 = (unsigned __int8 *)(a2 + 1);
  else
    v5 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v6 = sub_19BFF79A0(v5, v4);
  v7 = a1[1];
  if (!v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v7 <= v6)
      v11 = v6 % v7;
  }
  else
  {
    v11 = ((_DWORD)v7 - 1) & v6;
  }
  v12 = *(unsigned __int16 ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  for (i = *v12; i; i = *(unsigned __int16 **)i)
  {
    v14 = *((_QWORD *)i + 1);
    if (v14 == v8)
    {
      if (sub_19BFED000(i + 8, a2))
        return i;
    }
    else
    {
      if (v10 > 1)
      {
        if (v14 >= v7)
          v14 %= v7;
      }
      else
      {
        v14 &= v7 - 1;
      }
      if (v14 != v11)
        return 0;
    }
  }
  return i;
}

uint64_t sub_19BFF4E30(uint64_t *a1, char *__s1, int a3)
{
  uint64_t ExemplarSet;
  uint64_t (*v5)(void);
  uint64_t result;
  uint64_t (*v7)(void);

  if (!a3 && !strncmp(__s1, "ko", 2uLL))
  {
    result = uset_open();
    v7 = MEMORY[0x1E0DE6988];
    *a1 = result;
    a1[1] = (uint64_t)v7;
  }
  else
  {
    if (!ulocdata_open())
      __assert_rtn("icu_exemplars", "LXMutableLexiconImpl.cpp", 261, "ulocdata");
    ExemplarSet = ulocdata_getExemplarSet();
    v5 = MEMORY[0x1E0DE6988];
    *a1 = ExemplarSet;
    a1[1] = (uint64_t)v5;
    if (!ExemplarSet)
      __assert_rtn("icu_exemplars", "LXMutableLexiconImpl.cpp", 270, "exemplar_set");
    return ulocdata_close();
  }
  return result;
}

void sub_19BFF4F90(_Unwind_Exception *a1)
{
  ulocdata_close();
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF4FDC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_19BFC4F3C(result);
    JUMPOUT(0x1A1AD0CDCLL);
  }
  return result;
}

uint64_t sub_19BFF5018(uint64_t a1)
{
  std::__shared_weak_count *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &off_1E3D14518;
  std::mutex::~mutex((std::mutex *)(a1 + 1600));
  sub_19BFF50F8(a1 + 1560);
  v2 = *(std::__shared_weak_count **)(a1 + 1552);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  sub_19BFACCEC(a1 + 1528);
  sub_19BFACCEC(a1 + 1512);
  *(_QWORD *)(a1 + 136) = &off_1E3D146F0;
  v3 = *(void **)(a1 + 1488);
  if (v3 && *(_BYTE *)(a1 + 1486) == 1)
    free(v3);
  sub_19BF8769C(a1 + 1432);
  sub_19BFACCEC(a1 + 120);
  sub_19BFF4FDC((uint64_t *)(a1 + 112), 0);
  v4 = *(void **)(a1 + 80);
  if (v4 && *(_BYTE *)(a1 + 78) == 1)
    free(v4);
  v5 = *(void **)(a1 + 48);
  if (v5 && *(_BYTE *)(a1 + 46) == 1)
    free(v5);
  v6 = *(void **)(a1 + 16);
  if (v6 && *(_BYTE *)(a1 + 14) == 1)
    free(v6);
  return a1;
}

uint64_t sub_19BFF50F8(uint64_t a1)
{
  void *v2;

  sub_19BFF2D08(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_19BFF5134(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFF5158(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19BFF5170(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D13478))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_19BFF51B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E3D11898;
  if (*(unsigned __int16 *)(a1 + 104) >= 0xFu)
  {
    v2 = *(_QWORD *)(a1 + 112);
    if (v2)
      MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  }
  if (*(unsigned __int16 *)(a1 + 80) >= 0xFu)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  }
  v4 = *(void **)(a1 + 56);
  if (v4 && *(_BYTE *)(a1 + 54) == 1)
    free(v4);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_19BFF5254(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E3D11898;
  if (*(unsigned __int16 *)(a1 + 104) >= 0xFu)
  {
    v2 = *(_QWORD *)(a1 + 112);
    if (v2)
      MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  }
  if (*(unsigned __int16 *)(a1 + 80) >= 0xFu)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  }
  v4 = *(void **)(a1 + 56);
  if (v4 && *(_BYTE *)(a1 + 54) == 1)
    free(v4);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFF5308(uint64_t a1, unsigned __int16 *a2)
{
  size_t v4;
  size_t v5;
  __int128 *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  __int128 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  float v21;
  double v22;
  uint64_t Instance;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  __int128 v38;
  char v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  std::string __p;
  char v44;
  __int128 v45;
  char v46;
  __int128 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v42 = *(_QWORD *)(a1 + 16);
  if (*(char *)(a1 + 47) < 0)
    sub_19BF8CD70(&__p, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  else
    __p = *(std::string *)(a1 + 24);
  v4 = *(unsigned __int16 *)(a1 + 80);
  if (v4 < 0xF)
  {
    v38 = *(_OWORD *)(a1 + 80);
  }
  else
  {
    LOWORD(v38) = *(_WORD *)(a1 + 80);
    *((_QWORD *)&v38 + 1) = operator new[]();
    memcpy(*((void **)&v38 + 1), *(const void **)(a1 + 88), v4);
  }
  v5 = *(unsigned __int16 *)(a1 + 104);
  v39 = *(_BYTE *)(a1 + 96);
  v6 = &v40;
  if (v5 < 0xF)
  {
    v40 = *(_OWORD *)(a1 + 104);
  }
  else
  {
    LOWORD(v40) = v5;
    *((_QWORD *)&v40 + 1) = operator new[]();
    memcpy(*((void **)&v40 + 1), *(const void **)(a1 + 112), v5);
  }
  v41 = *(_DWORD *)(a1 + 120);
  if (*((_QWORD *)a2 + 1))
    v7 = *((_QWORD *)a2 + 1);
  else
    v7 = (uint64_t)(a2 + 8);
  v34 = v7;
  v25 = (uint64_t)a2;
  v8 = *a2;
  v35 = 0;
  v36 = v8;
  v37 = 0;
  sub_19BF8BB80(&v34);
  v30 = v7;
  v31 = v8;
  v32 = v8;
  v33 = 0;
  sub_19BF8BB80(&v30);
  v9 = v30;
  v27 = v31;
  v10 = 0.0;
  v26 = v30;
  while (1)
  {
    if (v34 != v9)
      __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
    if (v35 == v27)
      break;
    v11 = v37;
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 1480);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(&v28, v12, v37);
    v13 = (unsigned __int16)v38;
    sub_19BF8BF40((uint64_t)&v45, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 88, (uint64_t)&v38, v11, (unsigned __int16 *)&v28);
    if (v13 >= 0xF && *((_QWORD *)&v38 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v38 + 1), 0x1000C8077774924);
    v38 = v45;
    if ((unsigned __int16)v45 >= 0xFu)
      LOWORD(v45) = 0;
    v39 = v46;
    if ((unsigned __int16)v40 >= 0xFu && *((_QWORD *)&v40 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v40 + 1), 0x1000C8077774924);
    v14 = (unsigned __int16)v47;
    *v6 = v47;
    if (v14 >= 0xF)
      LOWORD(v47) = 0;
    v41 = v48;
    if ((unsigned __int16)v45 >= 0xFu && *((_QWORD *)&v45 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v45 + 1), 0x1000C8077774924);
    if (v42 == 0xFFFFFFFFLL)
    {
      v15 = 1;
    }
    else
    {
      v16 = v6;
      v17 = (unsigned __int16)v38;
      if (v13 <= (unsigned __int16)v38)
        v18 = (unsigned __int16)v38;
      else
        v18 = v13;
      while (1)
      {
        v15 = v18 != v13;
        if (v18 == v13)
          break;
        v19 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)
                          + 8 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 84));
        v20 = (char *)*((_QWORD *)&v38 + 1);
        if (v17 <= 0xE)
          v20 = (char *)&v38 + 2;
        v44 = v20[v13];
        (*(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t *, char *, uint64_t))(*v19 + 120))(&v45, v19, &v42, &v44, 1);
        v42 = v45;
        std::string::operator=(&__p, (const std::string *)((char *)&v45 + 8));
        if (SBYTE7(v47) < 0)
          operator delete(*((void **)&v45 + 1));
        v21 = sub_19C039400(v19, (uint64_t)&v42);
        v10 = v10 + log10f(v21);
        ++v13;
        if (v42 == 0xFFFFFFFFLL)
        {
          v15 = 1;
          break;
        }
      }
      v6 = v16;
      v9 = v26;
    }
    if ((unsigned __int16)v28 >= 0xFu && v29)
      MEMORY[0x1A1AD0CB8](v29, 0x1000C8077774924);
    if (v15)
    {
      Instance = 0;
      goto LABEL_54;
    }
    sub_19BF8BB80(&v34);
  }
  if (v42 == 0xFFFFFFFFLL)
    __assert_rtn("create_child", "TransliterationCursorImpl.cpp", 60, "impl.valid()");
  sub_19BFF78D0((uint64_t)&v45, (unsigned __int16 *)(a1 + 48), v25);
  v22 = *(double *)(a1 + 136);
  if (qword_1ED024388 != -1)
    dispatch_once(&qword_1ED024388, &unk_1E3D16178);
  Instance = _CFRuntimeCreateInstance();
  sub_19BFF6678(Instance + 16, *(_QWORD *)(a1 + 8), (uint64_t)&v42, (unsigned __int16 *)&v45, (unsigned __int16 *)&v38, v10, v22 + v10);
  if (*((_QWORD *)&v45 + 1) && BYTE6(v45) == 1)
    free(*((void **)&v45 + 1));
LABEL_54:
  if ((unsigned __int16)v40 >= 0xFu && *((_QWORD *)&v40 + 1))
    MEMORY[0x1A1AD0CB8](*((_QWORD *)&v40 + 1), 0x1000C8077774924);
  if ((unsigned __int16)v38 >= 0xFu && *((_QWORD *)&v38 + 1))
    MEMORY[0x1A1AD0CB8](*((_QWORD *)&v38 + 1), 0x1000C8077774924);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return Instance;
}

void sub_19BFF5854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int16 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_19BFF5930(uint64_t a1, uint64_t a2)
{
  return a2 + 16 == a1;
}

BOOL sub_19BFF5940(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == 0;
}

uint64_t sub_19BFF5950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  int v6;

  v1 = a1 + 16;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    v3 = v2 == 0xFFFFFFFFLL;
  else
    v3 = 1;
  if (v3)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)
                 + 8 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 84));
  v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v4 + 128))(v4, v1, &v6);
}

void sub_19BFF59AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  double v31;
  double v32;
  const void *v33;
  uint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  _QWORD v39[2];
  uint64_t v40;
  char *v41;
  unint64_t *v42;
  double v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int16 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 16;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v35 = 0;
  v36 = 0;
  v34 = 0;
  if (*(_BYTE *)(v5 + 84))
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = (uint64_t *)v5;
  v7 = *v6;
  v38 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v7 + 128))(v7, v4, &v38))
  {
    v8 = 0.0;
    while (1)
    {
      v37 = 0;
      v9 = *(_BYTE *)(v5 + 84) ? 20 : 16;
      sub_19C039980((uint64_t)&v43, v5, *(_DWORD *)(v5 + v9) + v38, (int *)&v37, (unsigned __int16 *)(a1 + 80));
      if (v37)
      {
        v10 = *(_DWORD *)(v5 + v9);
        v11 = v37 >= v10 ? v37 - v10 : 0;
        v37 = v11;
      }
      else
      {
        v11 = 0;
      }
      v12 = *(float *)&v45;
      v13 = (uint64_t)v35;
      if ((unint64_t)v35 >= v36)
      {
        v19 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v35 - v34) >> 3);
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) > 0x2E8BA2E8BA2E8BALL)
          sub_19BF8EB40();
        if (0x5D1745D1745D1746 * ((uint64_t)(v36 - v34) >> 3) > v20)
          v20 = 0x5D1745D1745D1746 * ((uint64_t)(v36 - v34) >> 3);
        v21 = (char *)((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v36 - v34) >> 3)) >= 0x1745D1745D1745DLL
                     ? 0x2E8BA2E8BA2E8BALL
                     : v20);
        v42 = &v36;
        if (v21)
          v21 = (char *)sub_19BFCE3C0((unint64_t)v21);
        else
          v22 = 0;
        v23 = (uint64_t)&v21[88 * v19];
        v39[0] = v21;
        v39[1] = v23;
        v40 = v23;
        v41 = &v21[88 * v22];
        *(_DWORD *)v23 = 0x100000;
        *(_WORD *)(v23 + 4) = 0;
        *(_BYTE *)(v23 + 6) = 0;
        *(_QWORD *)(v23 + 8) = 0;
        sub_19BF8A370(v23, (unsigned __int16 *)&v43);
        v25 = v46;
        v24 = v47;
        v26 = v48;
        *(_OWORD *)(v23 + 32) = v45;
        *(_OWORD *)(v23 + 48) = v25;
        *(_WORD *)(v23 + 80) = v26;
        *(_OWORD *)(v23 + 64) = v24;
        v40 += 88;
        sub_19BFCE408(&v34, v39);
        v18 = v35;
        sub_19BFCE50C((uint64_t)v39);
        v11 = v37;
      }
      else
      {
        *v35 = 0x100000;
        *(_WORD *)(v13 + 4) = 0;
        *(_BYTE *)(v13 + 6) = 0;
        *(_QWORD *)(v13 + 8) = 0;
        v14 = sub_19BF8A370(v13, (unsigned __int16 *)&v43);
        v15 = v45;
        v16 = v46;
        v17 = v47;
        *(_WORD *)(v14 + 80) = v48;
        *(_OWORD *)(v14 + 48) = v16;
        *(_OWORD *)(v14 + 64) = v17;
        *(_OWORD *)(v14 + 32) = v15;
        v18 = (_DWORD *)(v14 + 88);
      }
      v8 = v8 + v12;
      v35 = v18;
      if (!v11)
        break;
      v38 = v11;
      if (v44)
      {
        if (BYTE6(v43) == 1)
          free(v44);
      }
    }
    if (v44 && BYTE6(v43) == 1)
    {
      free(v44);
      v18 = v35;
    }
    v27 = v34;
  }
  else
  {
    v27 = 0;
    v18 = 0;
    v8 = 0.0;
  }
  v28 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v18 - v27) >> 3);
  if (v28)
  {
    if (v28 == 1)
    {
      *(_DWORD *)(v27 + 32) = 1065353216;
    }
    else
    {
      if (v8 <= 0.0)
        __assert_rtn("derive_words", "CombinedTransliterationLexicon.cpp", 70, "terminationProb > 0");
      while ((_DWORD *)v27 != v18)
      {
        *(float *)(v27 + 32) = *(float *)(v27 + 32) / v8;
        v27 += 88;
      }
    }
  }
  LOBYTE(v39[0]) = 0;
  v29 = v34;
  v30 = v35;
  while ((_DWORD *)v29 != v30)
  {
    v31 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    v32 = v31 + (*(double (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v43 = v32 + log10f(*(float *)(v29 + 32));
    v33 = (const void *)sub_19BFD0030(v29, (uint64_t *)&v43);
    (*(void (**)(uint64_t, const void *, _QWORD *))(a2 + 16))(a2, v33, v39);
    CFRelease(v33);
    if (LOBYTE(v39[0]))
      break;
    v29 += 88;
  }
  v43 = COERCE_DOUBLE(&v34);
  sub_19BFC70A0((void ***)&v43);
}

void sub_19BFF5DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *a20,void *a21)
{
  if (a21)
  {
    if (BYTE6(a20) == 1)
      free(a21);
  }
  a20 = &a11;
  sub_19BFC70A0((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF5DFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1 + 16;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)
                 + 8 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 84));
  v6 = 0;
  v7[0] = &off_1E3D17ED8;
  v7[1] = &v6;
  v8 = v7;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v2 + 144))(v2, v1, v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v6;
}

void sub_19BFF5EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19BFF5EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[6];
  char v4;

  v4 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = sub_19BFF61E4;
  v3[3] = &unk_1E3D16138;
  v3[4] = a2;
  v3[5] = a1;
  sub_19BFF62C8(v2, (_QWORD *)(a1 + 16), (unsigned __int16 *)(a1 + 48), (unsigned __int16 *)(a1 + 80), &v4, (uint64_t)v3, 0.0);
}

double sub_19BFF5F6C(uint64_t a1)
{
  return *(double *)(a1 + 128);
}

double sub_19BFF5F74(uint64_t a1)
{
  return *(double *)(a1 + 136);
}

double sub_19BFF5F7C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  float v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  int v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  int v22;

  v1 = (_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v22 = 0;
  v3 = *(_QWORD *)(v2 + 8 * *(unsigned __int8 *)(v2 + 84));
  v4 = (*(uint64_t (**)(uint64_t, _QWORD *, int *))(*(_QWORD *)v3 + 128))(v3, v1, &v22);
  v5 = 0.0;
  if (v4)
  {
    if (*v1 && *v1 != 0xFFFFFFFFLL)
    {
      v7 = 20;
      if (!*(_BYTE *)(v2 + 84))
        v7 = 16;
      v8 = *(_DWORD *)(v2 + v7) + v22;
      if (v8)
      {
        v9 = 0;
        v10 = *(uint64_t **)(v2 + 64);
        v11 = *v10;
        v12 = v10[1];
        v13 = v12 - 1;
        while (1)
        {
          if (v12 < v8)
LABEL_32:
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          if (v13 < v8 || v11 == 0)
            break;
          v15 = v8 + 1;
          v16 = v10[1];
          if (v16 < v15)
            goto LABEL_32;
          if (v16 - 1 < v15)
            break;
          v17 = *(unsigned __int8 *)(v11 + v8);
          v18 = *(_BYTE *)(v11 + v15);
          if ((v18 & 4) != 0)
          {
            v19 = v8 + 2;
            if (v12 < v19)
              goto LABEL_32;
            if (v13 < v19)
              return log10f(v5);
            v9 += *(unsigned __int8 *)(v11 + v19) * *(unsigned __int8 *)(v11 + v19);
            if ((v18 & 0x80) == 0)
              goto LABEL_30;
          }
          else
          {
            v9 = 65025;
            if ((v18 & 0x80) == 0)
              goto LABEL_30;
          }
          v8 += v17;
          if (v8)
            v20 = v17 == 0;
          else
            v20 = 1;
          if (v20)
            goto LABEL_30;
        }
      }
      else
      {
        v9 = 0;
LABEL_30:
        v5 = (double)v9 * 0.0000153787005;
      }
    }
  }
  return log10f(v5);
}

uint64_t sub_19BFF60D8()
{
  return 0;
}

uint64_t sub_19BFF60E0()
{
  return 0;
}

const void *sub_19BFF60E8(uint64_t a1)
{
  const void *v1;
  const void *v3;

  sub_19BF8CFAC((CFStringRef *)&v3, (unsigned __int16 *)(a1 + 48));
  v1 = v3;
  v3 = 0;
  sub_19BF8DAB8(&v3);
  return v1;
}

uint64_t sub_19BFF6128(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t sub_19BFF6130()
{
  return 0;
}

unint64_t sub_19BFF6138(uint64_t a1)
{
  size_t v2;
  void *v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v10;

  v2 = *(unsigned __int16 *)(a1 + 80);
  if (v2 < 0xF)
    v3 = (void *)(a1 + 82);
  else
    v3 = *(void **)(a1 + 88);
  sub_19BFA4428(__p, v3, v2);
  if ((v10 & 0x80u) == 0)
    v4 = (uint64_t *)__p;
  else
    v4 = (uint64_t *)__p[0];
  if ((v10 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (unint64_t)__p[1];
  v6 = sub_19BFCF130(v4, v5);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
  if ((char)v10 < 0)
    operator delete(__p[0]);
  return v7 ^ v6;
}

void sub_19BFF61C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19BFF61E4(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, double a5)
{
  uint64_t v10;
  double v11;
  const void *Instance;

  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(double *)(v10 + 136);
  if (qword_1ED024388 != -1)
    dispatch_once(&qword_1ED024388, &unk_1E3D16178);
  Instance = (const void *)_CFRuntimeCreateInstance();
  sub_19BFF6678((uint64_t)Instance + 16, *(_QWORD *)(v10 + 8), a2, a3, a4, a5, v11 + a5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  CFRelease(Instance);
}

void sub_19BFF62C8(uint64_t a1, _QWORD *a2, unsigned __int16 *a3, unsigned __int16 *a4, _BYTE *a5, uint64_t a6, double a7)
{
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v16;
  void ***v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t **v20;
  float v21;
  float v22;
  uint64_t **v23;
  float v24;
  float v25;
  __int128 v26;
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  void **v30;
  void **v31;
  void ***v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int8 *)(a1 + 84);
  v8 = *(uint64_t **)a1;
  v9 = *(uint64_t **)(a1 + 8);
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  if (*a2 == 0xFFFFFFFFLL)
  {
    v26 = 0uLL;
    v27 = 0;
    v30 = v28;
    sub_19BFF6600(&v30);
    goto LABEL_31;
  }
  if (v7)
    v16 = v9;
  else
    v16 = v8;
  v30 = (void **)&off_1E3D129A0;
  v31 = v28;
  v32 = &v30;
  (*(void (**)(uint64_t *))(*v16 + 144))(v16);
  v17 = v32;
  if (v32 == &v30)
  {
    v18 = 4;
    v17 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v18 = 5;
  }
  ((void (*)(void))(*v17)[v18])();
LABEL_11:
  v26 = *(_OWORD *)v28;
  v27 = v29;
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  v19 = (unsigned __int8 *)v26;
  v30 = v28;
  sub_19BFF6600(&v30);
  if ((_QWORD)v26 != *((_QWORD *)&v26 + 1))
  {
    do
    {
      if (*a5)
        break;
      sub_19C0166CC((unsigned __int16 *)&v30, a1 + 88, a4, *v19);
      if (v34 == -2)
      {
        v20 = (uint64_t **)(*(_BYTE *)(a1 + 84) ? a1 + 8 : a1);
        v21 = sub_19C039400(*v20, (uint64_t)(v19 + 8));
        v22 = log10f(v21);
        sub_19BFF62C8(a1, v19 + 8, a3, &v30, a5, a6, v22 + a7);
      }
      else
      {
        sub_19BFF782C((uint64_t)v28, a3, v34);
        if (*(_BYTE *)(a1 + 84))
          v23 = (uint64_t **)(a1 + 8);
        else
          v23 = (uint64_t **)a1;
        v24 = sub_19C039400(*v23, (uint64_t)(v19 + 8));
        v25 = log10f(v24);
        (*(void (**)(uint64_t, unsigned __int8 *, void **, void ***, _BYTE *, double))(a6 + 16))(a6, v19 + 8, v28, &v30, a5, v25 + a7);
        if (v28[1] && BYTE6(v28[0]) == 1)
          free(v28[1]);
      }
      if ((unsigned __int16)v32 >= 0xFu && v33)
        MEMORY[0x1A1AD0CB8](v33, 0x1000C8077774924);
      if ((unsigned __int16)v30 >= 0xFu && v31)
        MEMORY[0x1A1AD0CB8](v31, 0x1000C8077774924);
      v19 += 40;
    }
    while (v19 != *((unsigned __int8 **)&v26 + 1));
  }
LABEL_31:
  v30 = (void **)&v26;
  sub_19BFF6600(&v30);
}

void sub_19BFF6578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, char *a20,uint64_t a21,uint64_t a22,char **a23,uint64_t a24)
{
  char **v24;
  char **v26;
  uint64_t v27;

  v26 = a23;
  if (a23 == v24)
  {
    v27 = 4;
    v26 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))&(*v26)[8 * v27])();
LABEL_6:
  a20 = &a13;
  sub_19BFF6600((void ***)&a20);
  _Unwind_Resume(a1);
}

void sub_19BFF6600(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 5;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_19BFF6678(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5, double a6, double a7)
{
  __int128 v12;
  _OWORD *v13;
  unint64_t v14;
  void *v15;
  _OWORD *v16;
  unint64_t v17;
  void *v18;

  *(_QWORD *)a1 = off_1E3D11898;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_19BF8CD70((_BYTE *)(a1 + 24), *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v12 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a1 + 24) = v12;
  }
  sub_19BF86B60(a1 + 48, a4);
  v13 = (_OWORD *)(a1 + 80);
  v14 = *a5;
  if (v14 < 0xF)
  {
    *v13 = *(_OWORD *)a5;
  }
  else
  {
    *(_WORD *)v13 = v14;
    v15 = (void *)operator new[]();
    *(_QWORD *)(a1 + 88) = v15;
    memcpy(v15, *((const void **)a5 + 1), *(unsigned __int16 *)(a1 + 80));
  }
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a5 + 16);
  v16 = (_OWORD *)(a1 + 104);
  v17 = a5[12];
  if (v17 < 0xF)
  {
    *v16 = *(_OWORD *)(a5 + 12);
  }
  else
  {
    *(_WORD *)v16 = v17;
    v18 = (void *)operator new[]();
    *(_QWORD *)(a1 + 112) = v18;
    memcpy(v18, *((const void **)a5 + 4), *(unsigned __int16 *)(a1 + 104));
  }
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a5 + 10);
  *(double *)(a1 + 128) = a6;
  *(double *)(a1 + 136) = a7;
  return a1;
}

void sub_19BFF67A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  unsigned __int16 *v3;
  uint64_t v5;
  void *v6;

  if (*v3 >= 0xFu)
  {
    v5 = *(_QWORD *)(v1 + 88);
    if (v5)
      MEMORY[0x1A1AD0CB8](v5, 0x1000C8077774924);
  }
  v6 = *(void **)(v1 + 56);
  if (v6 && *(_BYTE *)(v1 + 54) == 1)
    free(v6);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFF6814()
{
  uint64_t result;

  qword_1ED024390 = 0;
  *(_QWORD *)algn_1ED024398 = "LXCursor";
  qword_1ED0243A0 = 0;
  unk_1ED0243A8 = 0;
  qword_1ED0243B0 = (uint64_t)sub_19BFCFB34;
  unk_1ED0243B8 = 0u;
  unk_1ED0243C8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0243F0 = result;
  return result;
}

uint64_t sub_19BFF6860(unsigned __int16 *a1)
{
  uint64_t v1;

  if (*((_BYTE *)a1 + 6))
    __assert_rtn("internalize_buffer", "TIString.cpp", 240, "m_buffer_type == External");
  *((_BYTE *)a1 + 6) = 1;
  v1 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  return sub_19BF8CA04(a1, v1, 0, *a1);
}

uint64_t sub_19BFF68B0(uint64_t a1, char *__s)
{
  unsigned __int16 v4;

  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  if (__s)
  {
    v4 = strlen(__s);
    sub_19BF8CA04((_QWORD *)a1, (uint64_t)__s, 0, v4);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_19BFF6914(uint64_t a1, char *__s1, size_t __n)
{
  unsigned int v3;
  size_t v6;

  v3 = __n;
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  if (!__s1)
  {
    if (!(_DWORD)__n)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      return a1;
    }
LABEL_8:
    __assert_rtn("String", "TIString.cpp", 88, "str && len <= strnlen(str, len) || len == 0");
  }
  v6 = strnlen(__s1, __n);
  if (v3 && v6 < v3)
    goto LABEL_8;
  sub_19BF8CA04((_QWORD *)a1, (uint64_t)__s1, 0, v3);
  return a1;
}

uint64_t sub_19BFF69BC(_DWORD *a1)
{
  uint64_t result;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v3 = a1[2];
  result = a1[3];
  if (v3 <= (int)result)
  {
    v4 = a1[4];
    if (v4 >= 0x10000)
      v5 = -4;
    else
      v5 = -3;
    if (v4 - 1114112 >= 0xFFEFE000)
      v6 = v5;
    else
      v6 = 0;
    if (v4 >> 11 >= 0x1B)
      v7 = v6;
    else
      v7 = -3;
    if (v4 >= 0x800)
      v8 = v7;
    else
      v8 = -2;
    if (v4 >= 0x80)
      v9 = v8;
    else
      v9 = -1;
    return (v9 + v3);
  }
  return result;
}

void sub_19BFF6A20(unsigned __int16 *a1, unsigned int a2)
{
  unsigned __int16 v4;
  unsigned __int16 v5;
  unsigned __int16 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!*((_BYTE *)a1 + 6))
    sub_19BFF6860(a1);
  v4 = *a1;
  if (a2 > 0x7F)
  {
    sub_19BF8CA9C((uint64_t)a1, v4 + 4);
    v6 = (unsigned __int16 *)*((_QWORD *)a1 + 1);
    if (!v6)
      v6 = a1 + 8;
    if (a2 > 0x7FF)
    {
      v8 = *a1;
      *a1 = v8 + 1;
      if (HIWORD(a2))
      {
        *((_BYTE *)v6 + v8) = (a2 >> 18) | 0xF0;
        v9 = *a1;
        *a1 = v9 + 1;
        *((_BYTE *)v6 + v9) = (a2 >> 12) & 0x3F | 0x80;
      }
      else
      {
        *((_BYTE *)v6 + v8) = (a2 >> 12) | 0xE0;
      }
      v7 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    }
    else
    {
      v7 = (a2 >> 6) | 0xFFFFFFC0;
    }
    v10 = *a1;
    *a1 = v10 + 1;
    *((_BYTE *)v6 + v10) = v7;
    v11 = *a1;
    *a1 = v11 + 1;
    *((_BYTE *)v6 + v11) = a2 & 0x3F | 0x80;
  }
  else
  {
    v5 = v4 + 1;
    sub_19BF8CA9C((uint64_t)a1, v4 + 1);
    v6 = (unsigned __int16 *)*((_QWORD *)a1 + 1);
    if (!v6)
      v6 = a1 + 8;
    *a1 = v5;
    *((_BYTE *)v6 + v5 - 1) = a2;
  }
  *((_BYTE *)v6 + *a1) = 0;
  a1[2] = 0;
}

_DWORD *sub_19BFF6B48(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  char v8;
  char v9;
  unsigned int v10;
  char v11;
  char v12;

  v2 = sub_19BFF69BC(a1);
  if (v2)
  {
    a1[2] = v2;
    v3 = *(_QWORD *)a1;
    v4 = *(char *)(*(_QWORD *)a1 + (v2 - 1));
    v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + (v2 - 1));
    a1[4] = v5;
    if (v4 <= -65)
    {
      v6 = v5 & 0x3F;
      a1[4] = v6;
      v7 = *(unsigned __int8 *)(v3 + (v2 - 2));
      if (v7 <= 0xBF)
      {
        v10 = v2 - 3;
        v11 = 1;
        v12 = 6;
        do
        {
          v6 |= (v7 & 0x3F) << v12;
          a1[4] = v6;
          ++v11;
          v12 += 6;
          v7 = *(unsigned __int8 *)(v3 + v10--);
        }
        while (v7 <= 0xBF);
        v9 = 6 - v11;
        v8 = v12;
      }
      else
      {
        v8 = 6;
        v9 = 5;
      }
      a1[4] = v6 | ((v7 & ~(-1 << v9)) << v8);
    }
  }
  return a1;
}

uint64_t sub_19BFF6C0C(unsigned __int16 *a1, unsigned __int16 *a2, unsigned int a3)
{
  unsigned int v3;
  unsigned __int16 v5;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;

  v3 = *a1;
  if (v3 > a3 && *a2 != 0)
  {
    v9 = *((_QWORD *)a1 + 1);
    v10 = a1 + 8;
    if (v9)
      v11 = *((_QWORD *)a1 + 1);
    else
      v11 = (uint64_t)(a1 + 8);
    v22 = v11;
    v23 = a3;
    v24 = v3;
    v25 = 0;
    sub_19BF8BB80(&v22);
    while (1)
    {
      if (v9)
        v12 = v9;
      else
        v12 = (uint64_t)v10;
      v18 = v12;
      v19 = v3;
      v20 = v3;
      v21 = 0;
      sub_19BF8BB80(&v18);
      if (v22 != v18)
        __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
      if (v23 == v19)
        break;
      if (sub_19BFF6D64(a2, v25))
      {
        v5 = v24;
        if (v23 <= v24)
        {
          if (v25 >= 0x10000)
            v13 = -4;
          else
            v13 = -3;
          if (v25 - 1114112 >= 0xFFEFE000)
            v14 = v13;
          else
            v14 = 0;
          if (v25 >> 11 >= 0x1B)
            v15 = v14;
          else
            v15 = -3;
          if (v25 >= 0x800)
            v16 = v15;
          else
            v16 = -2;
          if (v25 >= 0x80)
            v17 = v16;
          else
            v17 = -1;
          return (unsigned __int16)(v17 + v23);
        }
        return v5;
      }
      sub_19BF8BB80(&v22);
      v3 = *a1;
      v9 = *((_QWORD *)a1 + 1);
    }
  }
  return (unsigned __int16)-1;
}

BOOL sub_19BFF6D64(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v12;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  if (*((_QWORD *)a1 + 1))
    v3 = *((_QWORD *)a1 + 1);
  else
    v3 = (uint64_t)(a1 + 8);
  if (a2 > 0x7F)
  {
    *(_QWORD *)&v18 = v3;
    v7 = *a1;
    DWORD2(v18) = 0;
    HIDWORD(v18) = v7;
    LODWORD(v19) = 0;
    sub_19BF8BB80((uint64_t *)&v18);
    v14 = v3;
    v15 = v7;
    v16 = v7;
    v17 = 0;
    sub_19BF8BB80(&v14);
    v20 = v18;
    v21 = v19;
    v8 = v14;
    if ((_QWORD)v18 != v14)
      goto LABEL_17;
    v9 = v15;
    while (1)
    {
      v10 = DWORD2(v20);
      if (DWORD2(v20) == v9 || (_DWORD)v21 == a2)
        break;
      sub_19BF8BB80((uint64_t *)&v20);
      if ((_QWORD)v20 != v8)
        goto LABEL_17;
    }
    *(_QWORD *)&v20 = v3;
    DWORD2(v20) = v7;
    HIDWORD(v20) = v7;
    LODWORD(v21) = 0;
    sub_19BF8BB80((uint64_t *)&v20);
    if (v8 != (_QWORD)v20)
LABEL_17:
      __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
    v12 = v10 == DWORD2(v20);
  }
  else
  {
    v4 = (char *)*a1;
    if (*a1)
    {
      v5 = *a1;
      v6 = (char *)v3;
      while (*v6 != a2)
      {
        ++v6;
        if (!--v5)
        {
          v6 = &v4[v3];
          break;
        }
      }
    }
    else
    {
      v6 = (char *)v3;
    }
    v12 = &v6[-v3] == v4;
  }
  return !v12;
}

uint64_t sub_19BFF6EB8(unsigned __int16 *a1, unsigned __int16 *a2, unsigned int a3)
{
  unsigned int v3;
  unsigned __int16 v5;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;

  v3 = *a1;
  if (v3 > a3 && *a2 != 0)
  {
    v9 = *((_QWORD *)a1 + 1);
    v10 = a1 + 8;
    if (v9)
      v11 = *((_QWORD *)a1 + 1);
    else
      v11 = (uint64_t)(a1 + 8);
    v22 = v11;
    v23 = a3;
    v24 = v3;
    v25 = 0;
    sub_19BF8BB80(&v22);
    while (1)
    {
      if (v9)
        v12 = v9;
      else
        v12 = (uint64_t)v10;
      v18 = v12;
      v19 = v3;
      v20 = v3;
      v21 = 0;
      sub_19BF8BB80(&v18);
      if (v22 != v18)
        __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
      if (v23 == v19)
        break;
      if (!sub_19BFF6D64(a2, v25))
      {
        v5 = v24;
        if (v23 <= v24)
        {
          if (v25 >= 0x10000)
            v13 = -4;
          else
            v13 = -3;
          if (v25 - 1114112 >= 0xFFEFE000)
            v14 = v13;
          else
            v14 = 0;
          if (v25 >> 11 >= 0x1B)
            v15 = v14;
          else
            v15 = -3;
          if (v25 >= 0x800)
            v16 = v15;
          else
            v16 = -2;
          if (v25 >= 0x80)
            v17 = v16;
          else
            v17 = -1;
          return (unsigned __int16)(v17 + v23);
        }
        return v5;
      }
      sub_19BF8BB80(&v22);
      v3 = *a1;
      v9 = *((_QWORD *)a1 + 1);
    }
  }
  return (unsigned __int16)-1;
}

_QWORD *sub_19BFF7010(_QWORD *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3;
  int v6;
  unsigned int v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 *v19;
  unsigned __int16 v20;
  __int16 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v3 = (uint64_t)result;
  if (!*a2 || (result = (_QWORD *)sub_19BFF6EB8(a2, a3, 0), (_DWORD)result == 0xFFFF))
  {
    *(_DWORD *)v3 = 0x100000;
    *(_WORD *)(v3 + 4) = 0;
    *(_BYTE *)(v3 + 6) = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    v6 = *a2;
    if (!*a2 || !*a3)
      goto LABEL_58;
    v7 = result;
    v8 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
    v9 = v8 ? (unsigned __int16 *)*((_QWORD *)a2 + 1) : a2 + 8;
    *(_QWORD *)&v24 = v9;
    DWORD2(v24) = v6;
    HIDWORD(v24) = v6;
    LODWORD(v25) = 0;
    sub_19BF8BB80((uint64_t *)&v24);
    while (1)
    {
      if (v8)
        v10 = v8;
      else
        v10 = a2 + 8;
      *(_QWORD *)&v22 = v10;
      DWORD2(v22) = 0;
      HIDWORD(v22) = v6;
      LODWORD(v23) = 0;
      sub_19BF8BB80((uint64_t *)&v22);
      if ((_QWORD)v24 != (_QWORD)v22)
        __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
      if (DWORD2(v24) == DWORD2(v22))
        goto LABEL_58;
      v22 = v24;
      v23 = v25;
      sub_19BFF6B48(&v22);
      if (!sub_19BFF6D64(a3, v23))
        break;
      sub_19BFF6B48(&v24);
      v8 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
      v6 = *a2;
    }
    v22 = v24;
    v23 = v25;
    sub_19BFF6B48(&v22);
    v11 = WORD6(v22);
    if (SDWORD2(v22) <= SHIDWORD(v22))
    {
      if (v23 >= 0x10000)
        v12 = -4;
      else
        v12 = -3;
      if ((v23 - 1114112) >= 0xFFEFE000)
        v13 = v12;
      else
        v13 = 0;
      if (v23 >> 11 >= 0x1B)
        v14 = v13;
      else
        v14 = -3;
      if (v23 >= 0x800)
        v15 = v14;
      else
        v15 = -2;
      if (v23 >= 0x80)
        v16 = v15;
      else
        v16 = -1;
      v11 = v16 + WORD4(v22);
    }
    v17 = v11;
    if (v11 == 0xFFFF)
LABEL_58:
      __assert_rtn("trim", "TIString.cpp", 559, "e != NotAnIndex");
    v18 = *a2;
    if (v18 <= v11)
      __assert_rtn("trim", "TIString.cpp", 560, "e < size()");
    v19 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
    if (!v19)
      v19 = a2 + 8;
    *(_QWORD *)&v22 = v19;
    *((_QWORD *)&v22 + 1) = __PAIR64__(v18, v17);
    LODWORD(v23) = 0;
    sub_19BF8BB80((uint64_t *)&v22);
    v24 = v22;
    v25 = v23;
    sub_19BF8BB80((uint64_t *)&v24);
    v20 = WORD6(v24);
    if (SDWORD2(v24) <= SHIDWORD(v24))
    {
      if (v25 >= 0x80)
      {
        if (v25 >= 0x800)
        {
          if (v25 >> 11 >= 0x1B)
          {
            if ((v25 - 1114112) >= 0xFFEFE000)
            {
              if (v25 >= 0x10000)
                v21 = -4;
              else
                v21 = -3;
            }
            else
            {
              v21 = 0;
            }
          }
          else
          {
            v21 = -3;
          }
        }
        else
        {
          v21 = -2;
        }
      }
      else
      {
        v21 = -1;
      }
      v20 = v21 + WORD4(v24);
    }
    if (v7 || v18 != v20)
      return sub_19BF8CE58((_QWORD *)v3, a2, v7, (unsigned __int16)(v20 - v7));
    else
      return (_QWORD *)sub_19BF86B60(v3, a2);
  }
  return result;
}

unsigned __int16 *sub_19BFF7310(uint64_t a1, unsigned __int16 *a2, size_t a3, int a4, _WORD *a5)
{
  unsigned int v5;
  char *v11;
  unsigned __int16 *v12;

  v5 = *a2;
  if (a4 + (int)a3 > v5)
    __assert_rtn("replace", "TIString.cpp", 596, "pos + size_replaced <= size()");
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  sub_19BF8CA9C(a1, v5 - a4 + *a5);
  if (*((_QWORD *)a2 + 1))
    v11 = (char *)*((_QWORD *)a2 + 1);
  else
    v11 = (char *)(a2 + 8);
  sub_19BF86F84((unsigned __int16 *)a1, v11, a3);
  sub_19BFF7414((unsigned __int16 *)a1, (uint64_t)a5);
  v12 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
  if (!v12)
    v12 = a2 + 8;
  return sub_19BF86F84((unsigned __int16 *)a1, (char *)v12 + a3 + a4, 0xFFFFuLL);
}

void sub_19BFF73F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_19BFF7414(unsigned __int16 *result, uint64_t a2)
{
  unsigned __int16 *v3;
  char *v4;

  if (*(_WORD *)a2)
  {
    v3 = result;
    if (!*((_BYTE *)result + 6))
      sub_19BFF6860(result);
    if (*(_QWORD *)(a2 + 8))
      v4 = *(char **)(a2 + 8);
    else
      v4 = (char *)(a2 + 16);
    return sub_19BF86F84(v3, v4, 0xFFFFuLL);
  }
  return result;
}

void sub_19BFF7470(unsigned __int16 *a1, UChar *src, uint64_t srcLength)
{
  int32_t v3;
  unsigned __int16 *v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  UErrorCode pErrorCode[2];
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (src)
  {
    v3 = srcLength;
    if (srcLength)
    {
      *(_QWORD *)pErrorCode = 0;
      u_strToUTF8(0, 0, (int32_t *)&pErrorCode[1], src, srcLength, pErrorCode);
      if (pErrorCode[0] < U_ILLEGAL_ARGUMENT_ERROR || pErrorCode[0] == U_BUFFER_OVERFLOW_ERROR)
      {
        pErrorCode[0] = U_ZERO_ERROR;
        if (!*((_BYTE *)a1 + 6))
          sub_19BFF6860(a1);
        sub_19BF8CA9C((uint64_t)a1, *a1 + LOWORD(pErrorCode[1]));
        v7 = (unsigned __int16 *)*((_QWORD *)a1 + 1);
        if (!v7)
          v7 = a1 + 8;
        u_strToUTF8((char *)v7 + *a1, pErrorCode[1] + 1, 0, src, v3, pErrorCode);
        if (pErrorCode[0] < U_ILLEGAL_ARGUMENT_ERROR)
        {
          *a1 += LOWORD(pErrorCode[1]);
          a1[2] = 0;
        }
        else
        {
          if (qword_1EE417778 != -1)
            dispatch_once(&qword_1EE417778, &unk_1E3D16ED8);
          v8 = qword_1EE417770;
          if (os_log_type_enabled((os_log_t)qword_1EE417770, OS_LOG_TYPE_ERROR))
          {
            v9 = u_errorName(pErrorCode[0]);
            *(_DWORD *)buf = 136315394;
            v14 = "append";
            v15 = 2080;
            v16 = v9;
            v10 = "%s: u_strToUTF8() failed with '%s'";
LABEL_21:
            _os_log_error_impl(&dword_19BF85000, v8, OS_LOG_TYPE_ERROR, v10, buf, 0x16u);
          }
        }
      }
      else
      {
        if (qword_1EE417778 != -1)
          dispatch_once(&qword_1EE417778, &unk_1E3D16ED8);
        v8 = qword_1EE417770;
        if (os_log_type_enabled((os_log_t)qword_1EE417770, OS_LOG_TYPE_ERROR))
        {
          v11 = u_errorName(pErrorCode[0]);
          *(_DWORD *)buf = 136315394;
          v14 = "append";
          v15 = 2080;
          v16 = v11;
          v10 = "%s: u_strToUTF8() (length preflight) failed with '%s'";
          goto LABEL_21;
        }
      }
    }
  }
}

uint64_t sub_19BFF769C(const void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_19BFF76C4(a1, a2, &a9);
}

uint64_t sub_19BFF76C4(const void *a1, const char *a2, va_list a3)
{
  FILE *v5;
  FILE *v6;
  uint64_t result;

  v5 = funopen(a1, 0, (int (__cdecl *)(void *, const char *, int))sub_19BFF7788, 0, 0);
  if (!v5)
    __assert_rtn("append_format", "TIString.cpp", 744, "string_pseudofile");
  v6 = v5;
  if (vfprintf(v5, a2, a3) < 0)
    __assert_rtn("append_format", "TIString.cpp", 746, "status >= 0");
  result = fclose(v6);
  if ((_DWORD)result)
    __assert_rtn("append_format", "TIString.cpp", 748, "status == 0");
  return result;
}

uint64_t sub_19BFF7788(unsigned __int16 *a1, char *a2, uint64_t a3)
{
  sub_19BF86F84(a1, a2, (unsigned __int16)a3);
  return a3;
}

uint64_t sub_19BFF77B0@<X0>(_WORD *a1@<X8>, char a2)
{
  *(_DWORD *)a1 = 0x100000;
  a1[2] = 0;
  *((_BYTE *)a1 + 6) = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_BYTE *)a1 + 16) = 0;
  return sub_19BFF76C4(a1, "%s%d", &a2);
}

void sub_19BFF7808(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  BOOL v4;

  v3 = *(void **)(v1 + 8);
  if (v3)
    v4 = *(_BYTE *)(v1 + 6) == 1;
  else
    v4 = 0;
  if (v4)
    free(v3);
  _Unwind_Resume(exception_object);
}

void sub_19BFF782C(uint64_t a1, unsigned __int16 *a2, unsigned int a3)
{
  unsigned __int16 *v4;

  v4 = (unsigned __int16 *)sub_19BF86B60(a1, a2);
  sub_19BFF6A20(v4, a3);
}

void sub_19BFF7858(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  BOOL v4;

  v3 = *(void **)(v1 + 8);
  if (v3)
    v4 = *(_BYTE *)(v1 + 6) == 1;
  else
    v4 = 0;
  if (v4)
    free(v3);
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_19BFF787C(uint64_t a1, unsigned __int16 *a2, char *a3)
{
  unsigned __int16 *v4;

  v4 = (unsigned __int16 *)sub_19BF86B60(a1, a2);
  return sub_19BF86F84(v4, a3, 0xFFFFuLL);
}

void sub_19BFF78AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  BOOL v4;

  v3 = *(void **)(v1 + 8);
  if (v3)
    v4 = *(_BYTE *)(v1 + 6) == 1;
  else
    v4 = 0;
  if (v4)
    free(v3);
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_19BFF78D0(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 *v4;

  v4 = (unsigned __int16 *)sub_19BF86B60(a1, a2);
  return sub_19BFF7414(v4, a3);
}

void sub_19BFF78FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  BOOL v4;

  v3 = *(void **)(v1 + 8);
  if (v3)
    v4 = *(_BYTE *)(v1 + 6) == 1;
  else
    v4 = 0;
  if (v4)
    free(v3);
  _Unwind_Resume(exception_object);
}

BOOL sub_19BFF7920(unsigned __int16 *a1, unsigned __int16 *a2)
{
  const char *v2;
  const char *v3;

  if (!(*((unsigned __int8 *)a1 + 6) | *((unsigned __int8 *)a2 + 6)) && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1))
    return 1;
  if (*a1 != *a2)
    return 0;
  if (!*a1)
    return 1;
  if (*((_QWORD *)a1 + 1))
    v2 = (const char *)*((_QWORD *)a1 + 1);
  else
    v2 = (const char *)(a1 + 8);
  if (*((_QWORD *)a2 + 1))
    v3 = (const char *)*((_QWORD *)a2 + 1);
  else
    v3 = (const char *)(a2 + 8);
  return strcmp(v2, v3) == 0;
}

uint64_t sub_19BFF79A0(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  v2 = -1640531527;
  if (a2 >= 2)
  {
    v3 = a2 >> 1;
    v4 = a1;
    do
    {
      v5 = v2 + *v4;
      v6 = (v5 << 16) ^ (v4[1] << 11);
      v4 += 2;
      v2 = (v6 ^ v5) + ((v6 ^ v5) >> 11);
      --v3;
    }
    while (v3);
    a1 += 2 * (a2 >> 1);
  }
  if ((a2 & 1) != 0)
    v2 = ((v2 + *a1) ^ ((v2 + *a1) << 11)) + (((v2 + *a1) ^ ((v2 + *a1) << 11)) >> 17);
  v7 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v8 = (v7 ^ (4 * v7)) + ((v7 ^ (4 * v7)) >> 15);
  return v8 ^ (v8 << 10);
}

void *sub_19BFF7A1C(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (qword_1ED0240D8)
  {
    v2 = (void *)qword_1ED0240D8;
  }
  else
  {
    qword_1ED0240D8 = _sl_dlopen();
    v2 = (void *)qword_1ED0240D8;
    if (!qword_1ED0240D8)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "MKBDeviceUnlockedSinceBoot");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  off_1ED0240E0 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19BFF7B0C(uint64_t a1, CFDictionaryRef theDict)
{
  const __CFString *Value;

  if (theDict)
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("wordReading"));
    sub_19BF8C4B0(a1, Value);
  }
  else
  {
    *(_DWORD *)a1 = 0x100000;
    *(_WORD *)(a1 + 4) = 0;
    *(_BYTE *)(a1 + 6) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
}

void sub_19BFF7B6C(unsigned int a1, CFStringRef theString, CFErrorRef *a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  NSObject *v8;
  _QWORD *v9;
  const char *v10;
  __CFDictionary *Mutable;
  CFIndex v12;
  uint8_t buf[4];
  _QWORD *v14;
  __CFDictionary *v15;
  void *v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v6 = atomic_load(byte_1EE414EA8);
  if ((v6 & 1) != 0)
  {
    v7 = atomic_load(byte_1EE417890);
    if ((v7 & 1) != 0)
    {
      sub_19BF8C4B0((uint64_t)&v15, theString);
      v10 = (const char *)v16;
      if (!v16)
        v10 = (const char *)v17;
      printf("%s", v10);
      if (v16 && BYTE6(v15) == 1)
        free(v16);
      putchar(10);
    }
    else
    {
      v8 = sub_19BFD3F34();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        sub_19BF8C4B0((uint64_t)&v15, theString);
        v9 = v16;
        if (!v16)
          v9 = v17;
        *(_DWORD *)buf = 136315138;
        v14 = v9;
        _os_log_impl(&dword_19BF85000, v8, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
        if (v16 && BYTE6(v15) == 1)
          free(v16);
      }
    }
  }
  if (a3)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    v15 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("errorMessageKey"), theString);
    v12 = a1;
    switch(a1)
    {
      case 0u:
        break;
      case 1u:
      case 2u:
      case 0x10u:
        v12 = 2;
        break;
      case 3u:
      case 5u:
      case 6u:
      case 8u:
      case 0xEu:
      case 0x17u:
      case 0x1Au:
        v12 = 3;
        break;
      case 4u:
      case 9u:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xFu:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x18u:
      case 0x19u:
      case 0x1Bu:
      case 0x1Cu:
        goto LABEL_17;
      case 7u:
      case 0xAu:
        v12 = 5;
        break;
      default:
        if (a1 - 100 < 2)
LABEL_17:
          v12 = 4;
        else
          v12 = 6;
        break;
    }
    *a3 = CFErrorCreate(0, CFSTR("com.apple.LXVulgarWordUsageDatabase"), v12, Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
}

void sub_19BFF7D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFF7DA8(sqlite3 **a1, int a2, const char *a3, const char *a4, const char *a5, uint64_t a6, char a7, CFDictionaryRef theDict, CFErrorRef *a9)
{
  uint64_t v15;
  unsigned int v16;
  CFStringRef v17;
  uint64_t v18;
  sqlite3_stmt *v19;
  int v20;
  sqlite3_stmt *v21;
  int v22;
  sqlite3_stmt *v23;
  int v24;
  sqlite3_stmt *v25;
  int v26;
  const char *v27;
  uint64_t v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  sqlite3_stmt *v32;
  int v33;
  sqlite3_stmt *v34;
  int v35;
  sqlite3_stmt *v36;
  int v37;
  sqlite3_stmt *v38;
  int v39;
  const char *v40;
  uint64_t v41;
  std::string *v42;
  sqlite3_stmt *v43;
  int v44;
  sqlite3_stmt *v45;
  int v46;
  sqlite3_stmt *v47;
  int v48;
  sqlite3_stmt *v49;
  int v50;
  sqlite3_stmt *v51;
  int v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  const __CFString *v57;
  CFStringRef v58;
  const __CFString *v59;
  const __CFString *v60;
  std::string v62;
  void *__p[2];
  int64_t v64;
  sqlite3_stmt *ppStmt;
  _BYTE v66[8];
  void *v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x1E0C80C00];
  sub_19BFF7B0C((uint64_t)v66, theDict);
  v15 = sqlite3_exec(*a1, "BEGIN TRANSACTION", 0, 0, 0);
  v16 = v15;
  if ((_DWORD)v15)
  {
    v17 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error beginning a transaction: %d"), v15);
    __p[0] = (void *)v17;
    sub_19BFF7B6C(v16, v17, a9);
    if (v17)
      CFRelease(v17);
LABEL_4:
    v18 = 0;
    goto LABEL_46;
  }
  ppStmt = 0;
  if (!sqlite3_prepare_v2(*a1, "INSERT OR IGNORE INTO vword_usage (app, recipient, vword, word_reading, usage_count) VALUES (:app, :recipient, :vword, :word_reading, 0)", -1, &ppStmt, 0))
  {
    v19 = ppStmt;
    v20 = sqlite3_bind_parameter_index(ppStmt, ":app");
    sqlite3_bind_text(v19, v20, a4, -1, 0);
    v21 = ppStmt;
    v22 = sqlite3_bind_parameter_index(ppStmt, ":recipient");
    sqlite3_bind_text(v21, v22, a5, -1, 0);
    v23 = ppStmt;
    v24 = sqlite3_bind_parameter_index(ppStmt, ":vword");
    sqlite3_bind_text(v23, v24, a3, -1, 0);
    v25 = ppStmt;
    v26 = sqlite3_bind_parameter_index(ppStmt, ":word_reading");
    v27 = (const char *)(v67 ? v67 : v68);
    sqlite3_bind_text(v25, v26, v27, -1, 0);
    v28 = sqlite3_step(ppStmt);
    sqlite3_finalize(ppStmt);
    if ((_DWORD)v28 != 101)
    {
      v58 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error evaluating an INSERT OR IGNORE statement: %d"), v28);
      __p[0] = (void *)v58;
      sub_19BFF7B6C(v28, v58, a9);
      if (v58)
        CFRelease(v58);
      goto LABEL_4;
    }
  }
  std::operator+<char>();
  v29 = std::string::append(&v62, " WHERE app = :app AND recipient = :recipient AND vword = :vword AND word_reading = :word_reading", 0x60uLL);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v64 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (v64 >= 0)
    v31 = __p;
  else
    v31 = (void **)__p[0];
  if (!sqlite3_prepare_v2(*a1, (const char *)v31, -1, &ppStmt, 0))
  {
    v32 = ppStmt;
    v33 = sqlite3_bind_parameter_index(ppStmt, ":app");
    sqlite3_bind_text(v32, v33, a4, -1, 0);
    v34 = ppStmt;
    v35 = sqlite3_bind_parameter_index(ppStmt, ":recipient");
    sqlite3_bind_text(v34, v35, a5, -1, 0);
    v36 = ppStmt;
    v37 = sqlite3_bind_parameter_index(ppStmt, ":vword");
    sqlite3_bind_text(v36, v37, a3, -1, 0);
    v38 = ppStmt;
    v39 = sqlite3_bind_parameter_index(ppStmt, ":word_reading");
    v40 = (const char *)(v67 ? v67 : v68);
    sqlite3_bind_text(v38, v39, v40, -1, 0);
    v41 = sqlite3_step(ppStmt);
    sqlite3_finalize(ppStmt);
    if ((_DWORD)v41 != 101)
    {
      v59 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error evaluating an UPDATE usage_count statement: %d"), v41);
      v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
      sub_19BFF7B6C(v41, v59, a9);
      if (v59)
        CFRelease(v59);
      goto LABEL_43;
    }
  }
  if (a7)
  {
    sub_19BF8E43C(&v62, "UPDATE vword_usage SET last_use_timestamp = :last_use_timestamp WHERE app = :app AND recipient = :recipient AND vword = :vword AND word_reading = :word_reading");
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v62;
    else
      v42 = (std::string *)v62.__r_.__value_.__r.__words[0];
    if (!sqlite3_prepare_v2(*a1, (const char *)v42, -1, &ppStmt, 0))
    {
      v43 = ppStmt;
      v44 = sqlite3_bind_parameter_index(ppStmt, ":last_use_timestamp");
      sqlite3_bind_double(v43, v44, *(double *)&a6);
      v45 = ppStmt;
      v46 = sqlite3_bind_parameter_index(ppStmt, ":app");
      sqlite3_bind_text(v45, v46, a4, -1, 0);
      v47 = ppStmt;
      v48 = sqlite3_bind_parameter_index(ppStmt, ":recipient");
      sqlite3_bind_text(v47, v48, a5, -1, 0);
      v49 = ppStmt;
      v50 = sqlite3_bind_parameter_index(ppStmt, ":vword");
      sqlite3_bind_text(v49, v50, a3, -1, 0);
      v51 = ppStmt;
      v52 = sqlite3_bind_parameter_index(ppStmt, ":word_reading");
      v53 = (const char *)(v67 ? v67 : v68);
      sqlite3_bind_text(v51, v52, v53, -1, 0);
      v54 = sqlite3_step(ppStmt);
      sqlite3_finalize(ppStmt);
      if ((_DWORD)v54 != 101)
      {
        v60 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error evaluating an UPDATE last_use_timestamp statement: %d"), v54);
        sub_19BFF7B6C(v54, v60, a9);
        if (v60)
          CFRelease(v60);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        goto LABEL_43;
      }
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
  }
  v55 = sqlite3_exec(*a1, "COMMIT", 0, 0, 0);
  v56 = v55;
  if (!(_DWORD)v55)
  {
    v18 = 1;
    goto LABEL_44;
  }
  v57 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error committing a transaction: %d"), v55);
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
  sub_19BFF7B6C(v56, v57, a9);
  if (v57)
    CFRelease(v57);
LABEL_43:
  v18 = 0;
LABEL_44:
  if (SHIBYTE(v64) < 0)
    operator delete(__p[0]);
LABEL_46:
  if (v67 && v66[6] == 1)
    free(v67);
  return v18;
}

void sub_19BFF83BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,void *a29)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_19BFF84BC()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  qword_1ED024060 = v0;
  return result;
}

BOOL sub_19BFF850C(sqlite3 *a1, const char *a2, CFDictionaryRef theDict, CFErrorRef *a4)
{
  uint64_t v7;
  unsigned int v8;
  const __CFString *v9;
  _BOOL8 v10;
  sqlite3_stmt *v11;
  int v12;
  sqlite3_stmt *v13;
  int v14;
  const char *v15;
  int v16;
  sqlite3_stmt *ppStmt;
  _BYTE v19[8];
  void *v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  sub_19BFF7B0C((uint64_t)v19, theDict);
  ppStmt = 0;
  v7 = sqlite3_prepare_v2(a1, "SELECT COUNT(*) FROM vword_usage WHERE vword = :vword AND word_reading = :word_reading AND usage_count >= 3", -1, &ppStmt, 0);
  v8 = v7;
  if ((_DWORD)v7)
  {
    v9 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error compiling the SELECT COUNT(*) statement: %d"), v7);
    sub_19BFF7B6C(v8, v9, a4);
    if (v9)
      CFRelease(v9);
    v10 = 0;
  }
  else
  {
    v11 = ppStmt;
    v12 = sqlite3_bind_parameter_index(ppStmt, ":vword");
    sqlite3_bind_text(v11, v12, a2, -1, 0);
    v13 = ppStmt;
    v14 = sqlite3_bind_parameter_index(ppStmt, ":word_reading");
    if (v20)
      v15 = (const char *)v20;
    else
      v15 = (const char *)v21;
    sqlite3_bind_text(v13, v14, v15, -1, 0);
    if (sqlite3_step(ppStmt) == 100)
      v16 = sqlite3_column_int(ppStmt, 0);
    else
      v16 = 0;
    sqlite3_finalize(ppStmt);
    v10 = v16 > 0;
  }
  if (v20 && v19[6] == 1)
    free(v20);
  return v10;
}

void sub_19BFF86A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFF86F8(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = sub_19BFECF90((unsigned __int16 *)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || sub_19BFECF90(a2, (unsigned __int16 *)(v5 + 32)))
    return v2;
  return v5;
}

uint64_t *sub_19BFF8770(uint64_t **a1, unsigned __int16 *a2, const void **a3, _DWORD *a4)
{
  uint64_t *result;
  uint64_t **v8;
  char *v9;
  _OWORD *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;

  result = sub_19BFE3C9C((uint64_t)a1, &v13, a2);
  if (!*result)
  {
    v8 = (uint64_t **)result;
    v9 = (char *)operator new(0x38uLL);
    v10 = v9 + 32;
    v11 = *(unsigned __int16 *)a3;
    if (v11 < 0xF)
    {
      *v10 = *(_OWORD *)a3;
    }
    else
    {
      *(_WORD *)v10 = v11;
      v12 = (void *)operator new[]();
      *((_QWORD *)v9 + 5) = v12;
      memcpy(v12, a3[1], *((unsigned __int16 *)v9 + 16));
    }
    *((_DWORD *)v9 + 12) = *a4;
    return sub_19BFA9684(a1, v13, v8, (uint64_t *)v9);
  }
  return result;
}

void sub_19BFF8844(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_19BFE3D2C(0, v1);
  _Unwind_Resume(a1);
}

void sub_19BFF885C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  const void *v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint8_t buf[2];
  unsigned __int16 v21;
  char v22;
  void *v23;
  int i;
  int v25;
  __int16 v26;
  char v27;
  void *v28;
  char v29;
  int v30;
  __int16 v31;
  char v32;
  void *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = atomic_load(byte_1EE414EA8);
  if ((v6 & 1) != 0)
  {
    v7 = atomic_load(byte_1EE417890);
    if ((v7 & 1) != 0)
    {
      printf("\tAdding retro-active sort-key change hints!");
      putchar(10);
    }
    else
    {
      v8 = sub_19BFD3F34();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19BF85000, v8, OS_LOG_TYPE_DEFAULT, "\tAdding retro-active sort-key change hints!", buf, 2u);
      }
    }
  }
  v9 = *a1;
  if (a1[1] != *a1)
  {
    v10 = 0;
    do
    {
      v18 = 0;
      v30 = 0x100000;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v25 = 0x100000;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      sub_19BF86B60((uint64_t)buf, *(unsigned __int16 **)(v9 + 8 * v10));
      v11 = 0;
      for (i = 0; ; v11 = HIWORD(i))
      {
        v12 = v21;
        if (!v21)
        {
          sub_19BF86BF8((unsigned __int16 *)buf);
          v12 = v21;
        }
        if (v11 >= v12)
          break;
        v13 = sub_19C02211C((uint64_t)buf);
        sub_19BFF6A20((unsigned __int16 *)&v25, v13);
        (*(void (**)(const void **__return_ptr, uint64_t, int *))(*(_QWORD *)a2 + 8))(&v16, a2, &v25);
        if (v18 && !sub_19BFECF34((unsigned __int16 *)&v16, &v18))
        {
          v14 = *(_QWORD *)(a3 + 24);
          if (!v14)
            sub_19BF94AC4();
          (*(void (**)(uint64_t, unsigned __int16 *, int *))(*(_QWORD *)v14 + 48))(v14, &v18, &v30);
        }
        sub_19BF8A1F4((uint64_t)&v30, (unsigned __int16 *)&v25);
        sub_19BFECEA8(&v18, &v16);
        if ((unsigned __int16)v16 >= 0xFu)
        {
          if (v17)
            MEMORY[0x1A1AD0CB8](v17, 0x1000C8077774924);
        }
      }
      if (v23)
        v15 = v22 == 1;
      else
        v15 = 0;
      if (v15)
        free(v23);
      if (v28 && v27 == 1)
        free(v28);
      if (v33 && v32 == 1)
        free(v33);
      if (v18 >= 0xFu && v19)
        MEMORY[0x1A1AD0CB8](v19, 0x1000C8077774924);
      ++v10;
      v9 = *a1;
    }
    while (v10 < (a1[1] - *a1) >> 3);
  }
}

void sub_19BFF8ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9, uint64_t a10, unsigned __int16 a11, uint64_t a12, int a13, __int16 a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,void *a23)
{
  uint64_t v23;
  void *v25;

  if (a23 && a22 == 1)
    free(a23);
  v25 = *(void **)(v23 - 80);
  if (v25 && *(_BYTE *)(v23 - 82) == 1)
    free(v25);
  if (a11 >= 0xFu)
  {
    if (a12)
      MEMORY[0x1A1AD0CB8](a12, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void sub_19BFF8B98(uint64_t **a1, unsigned __int16 *a2, const void **a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t **v8;
  char *v9;
  _OWORD *v10;
  unint64_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  char v17;
  uint64_t v18;

  v7 = (uint64_t **)sub_19BFE3C9C((uint64_t)a1, &v18, a2);
  if (!*v7)
  {
    v8 = v7;
    v9 = (char *)operator new(0x78uLL);
    v16[0] = v9;
    v16[1] = a1 + 1;
    v17 = 0;
    v10 = v9 + 32;
    v11 = *(unsigned __int16 *)a3;
    if (v11 < 0xF)
    {
      *v10 = *(_OWORD *)a3;
    }
    else
    {
      *(_WORD *)v10 = v11;
      v12 = (void *)operator new[]();
      *((_QWORD *)v9 + 5) = v12;
      memcpy(v12, a3[1], *((unsigned __int16 *)v9 + 16));
    }
    *((_QWORD *)v9 + 6) = *(_QWORD *)a4;
    *(_OWORD *)(v9 + 56) = *(_OWORD *)(a4 + 8);
    *((_QWORD *)v9 + 9) = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v13 = *(_OWORD *)(a4 + 32);
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    v14 = *(_QWORD *)(a4 + 48);
    v15 = *(_QWORD *)(a4 + 56);
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(v9 + 109) = *(_QWORD *)(a4 + 61);
    *((_OWORD *)v9 + 5) = v13;
    *((_QWORD *)v9 + 12) = v14;
    *((_QWORD *)v9 + 13) = v15;
    v17 = 1;
    sub_19BFA9684(a1, v18, v8, (uint64_t *)v9);
    v16[0] = 0;
    sub_19C014374((uint64_t)v16);
  }
}

void sub_19BFF8CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C014374((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFF8CC0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  a1[1] = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  sub_19BFA9130(a1 + 1, (const void *)a2[1], a2[2], a2[2] - a2[1]);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  sub_19BFA9130(a1 + 4, (const void *)a2[4], a2[5], a2[5] - a2[4]);
  v5 = a2[7];
  *(_QWORD *)((char *)a1 + 61) = *(uint64_t *)((char *)a2 + 61);
  a1[7] = v5;
  return a1;
}

void sub_19BFF8D3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFF8D58(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[9];

  sub_19BFA7B80((uint64_t)v7, a2, a1 + 56, *(_DWORD *)(a1 + 48));
  v3 = a1 + 8;
  if ((sub_19BFA8A4C((uint64_t)v7, a1 + 8) & 1) != 0)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      v3 = *(_QWORD *)(a1 + 8);
      v4 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v4 = *(unsigned __int8 *)(a1 + 31);
    }
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v3, v4);
  }
  else
  {
    v5 = 0;
  }
  sub_19BFA7BE4(v7);
  return v5;
}

void sub_19BFF8DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFA7BE4((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFF8DF4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  size_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (_QWORD *)a2;
  v3 = result[5];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  v4 = (const void *)result[4];
  if (v3 >= 0x17)
  {
    v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v5 = v3 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = v7;
    v2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v3;
    if (!v3)
      goto LABEL_9;
  }
  result = memmove(v2, v4, v3);
LABEL_9:
  *((_BYTE *)v2 + v3) = 0;
  return result;
}

uint64_t sub_19BFF8E8C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D16818;
  sub_19BFA98BC(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_19BFF8ED0(_QWORD *a1)
{
  if (a1)
  {
    sub_19BFF8ED0(*a1);
    sub_19BFF8ED0(a1[1]);
    sub_19C012900(a1 + 4);
    operator delete(a1);
  }
}

_OWORD *sub_19BFF8F10(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = (void **)sub_19BFF9264((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 7) = 0;
    sub_19BFA9684(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *sub_19BFF8F9C(uint64_t **a1, unsigned __int16 *a2, const void **a3, _DWORD *a4)
{
  uint64_t *result;
  uint64_t **v8;
  char *v9;
  _OWORD *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;

  result = sub_19BFE3C9C((uint64_t)a1, &v13, a2);
  if (!*result)
  {
    v8 = (uint64_t **)result;
    v9 = (char *)operator new(0x38uLL);
    v10 = v9 + 32;
    v11 = *(unsigned __int16 *)a3;
    if (v11 < 0xF)
    {
      *v10 = *(_OWORD *)a3;
    }
    else
    {
      *(_WORD *)v10 = v11;
      v12 = (void *)operator new[]();
      *((_QWORD *)v9 + 5) = v12;
      memcpy(v12, a3[1], *((unsigned __int16 *)v9 + 16));
    }
    *((_DWORD *)v9 + 12) = *a4;
    return sub_19BFA9684(a1, v13, v8, (uint64_t *)v9);
  }
  return result;
}

void sub_19BFF9070(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_19BFE3D2C(0, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF9088(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  uint64_t *v12;
  _BYTE *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v18;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (_QWORD *)v3;
      if (*(_QWORD *)a1 == v3)
        goto LABEL_9;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = (_QWORD *)v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if ((sub_19BFAAA0C(v7 + 4, v5 + 4) & 0x80) != 0)
      {
LABEL_9:
        if (!v6)
        {
          v18 = (_QWORD *)v3;
          v11 = (uint64_t **)v3;
LABEL_14:
          v12 = (uint64_t *)operator new(0x40uLL);
          v13 = v12 + 4;
          if (*((char *)v5 + 55) < 0)
          {
            sub_19BF8CD70(v13, (void *)v5[4], v5[5]);
          }
          else
          {
            v14 = *((_OWORD *)v5 + 2);
            v12[6] = v5[6];
            *(_OWORD *)v13 = v14;
          }
          v12[7] = v5[7];
          sub_19BFA9684((uint64_t **)a1, (uint64_t)v18, v11, v12);
          goto LABEL_18;
        }
        v18 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)sub_19BFF9264(a1, &v18, v5 + 4);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_18:
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v10 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v10);
      }
      v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_19BFF91FC(_Unwind_Exception *a1)
{
  void *v1;
  char **v2;

  operator delete(v1);
  sub_19BFB1F54(*v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_19BFF9220(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D11A10;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_19BF8EFC8(a1 + 2);
  return a1;
}

_QWORD *sub_19BFF9264(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((sub_19BFAAA0C(a3, v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((sub_19BFAAA0C(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_19BFF92F8(_QWORD *a1)
{
  sub_19BFF9220(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFF931C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v38;
  void *v39;
  void *__p;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (a2)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      v13 = *(void **)(a3 + 8 * i);
      v14 = *(_QWORD *)(a4 + 8 * i);
      v38 = v14;
      v39 = v13;
      v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v16 = (_QWORD *)sub_19BFFA830(&v43, &v39, &v38);
      }
      else
      {
        sub_19BFA4428(v44, v13, v14);
        v16 = v15 + 3;
      }
      v44 = v16;
      if (a5)
      {
        v17 = *(_QWORD *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          v19 = v10;
          v20 = a5;
          v21 = v8;
          v22 = a3;
          v23 = a4;
          v24 = (v11 - v9) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_19BF8EB40();
          v26 = v19 - (_QWORD)v9;
          v27 = (uint64_t)(v19 - (_QWORD)v9) >> 1;
          if (v27 > v25)
            v25 = v27;
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v25;
          if (v28)
            v28 = (unint64_t)sub_19BFB3588(v28);
          else
            v29 = 0;
          v30 = (_DWORD *)(v28 + 4 * v24);
          *v30 = v17;
          v18 = v30 + 1;
          while (v11 != v9)
          {
            v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v41 = v18;
          v32 = v28 + 4 * v29;
          v42 = v32;
          if (v9)
            operator delete(v9);
          v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          v8 = v21;
          a5 = v20;
          v10 = v32;
        }
        else
        {
          *(_DWORD *)v11 = v17;
          v18 = v11 + 4;
        }
        v41 = v18;
        v11 = (char *)v18;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19BF8EA40((void ***)&__p);
  return v35;
}

void sub_19BFF9508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF954C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19BFF958C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D12688;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19BFF9628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFF9664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D12630;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19BFF9700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFF973C@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  int v5;
  const std::string::value_type *v6;
  void **v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string::value_type __s[4];
  void *__p[2];
  int64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  sub_19BFA0144((uint64_t)v14);
  sub_19BF8F250(a1 + 2, (uint64_t)&v15);
  sub_19BFAAA88(__p, (uint64_t)v16);
  v4 = a1[4];
  if (v4)
  {
    v5 = HIBYTE(v13);
    if (v13 < 0)
      v5 = (int)__p[1];
    *(_DWORD *)__s = v5;
    v6 = (const std::string::value_type *)a1[3];
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    std::string::append(a2, __s, 4uLL);
    if (v13 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (v13 >= 0)
      v8 = HIBYTE(v13);
    else
      v8 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v7, v8);
    std::string::append(a2, v6, 4 * v4);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v13;
  }
  v14[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15 = v9;
  v16[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD0C7C](&v18);
}

void sub_19BFF988C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_19BFA0270((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFF98CC(uint64_t a1, uint64_t **a2)
{
  return sub_19BFFA4EC(a1, *a2, a2[1], 0);
}

uint64_t sub_19BFF98DC(uint64_t a1, uint64_t **a2, int **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *__p;
  void *v38;
  uint64_t v39;

  __p = 0;
  v38 = 0;
  v39 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (v6 - v5) != a3[1] - *a3)
    __assert_rtn("build", "MarisaTrie.h", 61, "keys.size() == values.size()");
  v9 = sub_19BFFA4EC(a1, v5, v6, &__p);
  if ((_DWORD)v9)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
    v11 = *(_QWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 48);
    v13 = (v12 - v11) >> 2;
    if (v10 <= v13)
    {
      if (v10 >= v13)
      {
LABEL_20:
        v27 = *(_QWORD *)(a1 + 40);
        v28 = (char *)a2[1] - (char *)*a2;
        if (v28)
        {
          v29 = v28 / 24;
          v30 = *a3;
          v31 = (uint64_t *)__p;
          if (v29 <= 1)
            v29 = 1;
          do
          {
            v33 = *v30++;
            v32 = v33;
            v34 = *v31++;
            *(_DWORD *)(v27 + 4 * v34) = v32;
            --v29;
          }
          while (v29);
        }
        v35 = (*(_QWORD *)(a1 + 48) - v27) >> 2;
        *(_QWORD *)(a1 + 24) = v27;
        *(_QWORD *)(a1 + 32) = v35;
        goto LABEL_25;
      }
      v26 = v11 - 0x5555555555555554 * (a2[1] - *a2);
    }
    else
    {
      v14 = v10 - v13;
      v15 = *(_QWORD *)(a1 + 56);
      if (v10 - v13 > (v15 - v12) >> 2)
      {
        if (v10 >> 62)
          sub_19BF8EB40();
        v16 = v15 - v11;
        if (v16 >> 1 > v10)
          v10 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v10;
        v18 = (char *)sub_19BFB3588(v17);
        v19 = *(char **)(a1 + 40);
        v20 = *(char **)(a1 + 48);
        v21 = &v18[4 * v13];
        v23 = &v18[4 * v22];
        bzero(v21, 4 * v14);
        v24 = &v21[4 * v14];
        while (v20 != v19)
        {
          v25 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          *((_DWORD *)v21 - 1) = v25;
          v21 -= 4;
        }
        *(_QWORD *)(a1 + 40) = v21;
        *(_QWORD *)(a1 + 48) = v24;
        *(_QWORD *)(a1 + 56) = v23;
        if (v19)
          operator delete(v19);
        goto LABEL_20;
      }
      bzero(*(void **)(a1 + 48), 4 * v14);
      v26 = v12 + 4 * v14;
    }
    *(_QWORD *)(a1 + 48) = v26;
    goto LABEL_20;
  }
LABEL_25:
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_19BFF9AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFF9AFC(uint64_t *a1, _QWORD *a2, unint64_t a3)
{
  char *v7;
  uint64_t v8;

  if (a3 >= 0xF)
  {
    if (*a2 == 0x2065766F6C206557 && *(_QWORD *)((char *)a2 + 7) == 0x2E61736972614D20)
    {
      sub_19BF8F0D8(a1 + 2, (uint64_t)a2, a3);
      return 1;
    }
  }
  else if (a3 < 4)
  {
    return 0;
  }
  v7 = (char *)a2 + 4;
  v8 = *(unsigned int *)a2;
  sub_19BF8F0D8(a1 + 2, (uint64_t)a2 + 4, v8);
  a1[3] = (uint64_t)&v7[v8];
  a1[4] = (a3 - v8 - 4) >> 2;
  return 1;
}

uint64_t sub_19BFF9BB4(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  unint64_t v8;

  v8 = 0;
  v6 = sub_19BF8F364((uint64_t *)(a1 + 16), a2, a3, (uint64_t *)&v8);
  if ((_DWORD)v6)
    *a4 = sub_19BFFA264(a1, v8);
  return v6;
}

_QWORD *sub_19BFF9C10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D12420;
  v6[1] = a1;
  v6[2] = a4;
  v7 = v6;
  sub_19BF8F424((uint64_t *)(a1 + 16), a2, a3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19BFF9CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFF9CE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E3D123C8;
  v7[1] = a1;
  v7[2] = a4;
  v8 = v7;
  sub_19BF8F484((unint64_t *)(a1 + 16), a2, a3, (uint64_t)v7, a5);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_19BFF9D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_19BFF9DC0@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL sub_19BFF9DCC(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

void sub_19BFF9DE0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  sub_19BF8F4E4((uint64_t *)(a1 + 16), a3, a4, a2, a5);
}

uint64_t sub_19BFF9DF8(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v8;

  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 112))(a1))
    return 0;
  v8 = 0;
  v6 = sub_19BF8F304(a1 + 2, a2, (uint64_t *)&v8);
  if ((_DWORD)v6)
    *a3 = sub_19BFFA264((uint64_t)a1, v8);
  return v6;
}

_QWORD *sub_19BFF9E74(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)(*(uint64_t (**)(unint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v10[0] = &off_1E3D12318;
    v10[1] = a1;
    v10[2] = a3;
    v11 = v10;
    sub_19BF8F544(a1 + 2, a2, (uint64_t)v10, a4);
    result = v11;
    if (v11 == v10)
    {
      v9 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  return result;
}

void sub_19BFF9F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFF9F74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v8[0] = &off_1E3D12370;
    v8[1] = a3;
    v9 = v8;
    sub_19BF8F5A4(a1 + 2, a2, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  return result;
}

void sub_19BFFA034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19BFFA070()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFFA084(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D12370;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFFA0B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D12370;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFFA0D4(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

uint64_t sub_19BFFA114(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11690))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFA150()
{
  return &unk_1E3D11690;
}

void sub_19BFFA160()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFFA174(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D12318;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19BFFA1AC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D12318;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19BFFA1CC(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *a3;
  v7 = a3[1];
  v8 = sub_19BFFA264(*(_QWORD *)(a1 + 8), *a2);
  return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8, v6, v7, a4);
}

uint64_t sub_19BFFA21C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11680))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFA258()
{
  return &unk_1E3D11680;
}

unint64_t sub_19BFFA264(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  std::logic_error *exception;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (v2 <= a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_19BFADD78(exception, "Marisa Payload");
      __cxa_throw(exception, (struct type_info *)off_1E3D0FF68, MEMORY[0x1E0DE42E0]);
    }
    return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * a2);
  }
  return a2;
}

void sub_19BFFA2C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19BFFA2E0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFFA2F4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D123C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19BFFA32C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D123C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19BFFA34C(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *a3;
  v7 = a3[1];
  v8 = sub_19BFFA264(*(_QWORD *)(a1 + 8), *a2);
  return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8, v6, v7, a4);
}

uint64_t sub_19BFFA39C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D116A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFA3D8()
{
  return &unk_1E3D116A0;
}

void sub_19BFFA3E8()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFFA3FC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D12420;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19BFFA434(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D12420;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19BFFA454(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *a3;
  v7 = a3[1];
  v8 = sub_19BFFA264(*(_QWORD *)(a1 + 8), *a2);
  return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8, v6, v7, a4);
}

uint64_t sub_19BFFA4A4(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D116B0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFA4E0()
{
  return &unk_1E3D116B0;
}

uint64_t sub_19BFFA4EC(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *__p;
  void *v23;
  char *v24;

  __p = 0;
  v23 = 0;
  v24 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = 0;
    v8 = 0;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        v10 = (uint64_t *)*v6;
        v9 = v6[1];
      }
      else
      {
        v9 = *((unsigned __int8 *)v6 + 23);
        v10 = v6;
      }
      if (v8 >= v24)
      {
        v12 = (v8 - v7) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          sub_19BF8EB40();
        v14 = v24 - v7;
        if ((v24 - v7) >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        v16 = (char *)sub_19BFAEDF0(v15);
        v18 = &v16[16 * v12];
        *(_QWORD *)v18 = v10;
        *((_QWORD *)v18 + 1) = v9;
        v19 = (char *)__p;
        v7 = v18;
        if (v8 != __p)
        {
          do
          {
            *((_OWORD *)v7 - 1) = *((_OWORD *)v8 - 1);
            v7 -= 16;
            v8 -= 16;
          }
          while (v8 != v19);
          v8 = v19;
        }
        v11 = v18 + 16;
        __p = v7;
        v24 = &v16[16 * v17];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_QWORD *)v8 = v10;
        *((_QWORD *)v8 + 1) = v9;
        v11 = v8 + 16;
      }
      v23 = v11;
      v6 += 3;
      v8 = (char *)v11;
    }
    while (v6 != a3);
  }
  sub_19BF8EFCC((uint64_t *)(a1 + 16), (uint64_t *)&__p, a4, *(_DWORD *)(a1 + 8));
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_19BFFA69C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFFA6B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D12630;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFFA6E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D12630;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFFA700(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19BFFA71C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11710))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFA758()
{
  return &unk_1E3D11710;
}

void sub_19BFFA768()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFFA77C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D12688;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFFA7B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D12688;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFFA7CC(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19BFFA7E8(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11720))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFA824()
{
  return &unk_1E3D11720;
}

uint64_t sub_19BFFA830(uint64_t *a1, void **a2, size_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19BF8EB40();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_19BF8EB54(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[24 * v5];
  v17 = v16;
  v18 = &v12[24 * v11];
  sub_19BFA4428(v16, *a2, *a3);
  v17 = v16 + 24;
  sub_19BF8EACC(a1, &v15);
  v13 = a1[1];
  sub_19BF8ECAC((uint64_t)&v15);
  return v13;
}

void sub_19BFFA928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BF8ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFFA93C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D11B60;
  sub_19BFB1F54(*(char **)(a1 + 80));
  sub_19BFF9220((_QWORD *)(a1 + 8));
  return a1;
}

void sub_19BFFA978(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D11B60;
  sub_19BFB1F54(*(char **)(a1 + 80));
  sub_19BFF9220((_QWORD *)(a1 + 8));
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFFA9C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v38;
  void *v39;
  void *__p;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (a2)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      v13 = *(void **)(a3 + 8 * i);
      v14 = *(_QWORD *)(a4 + 8 * i);
      v38 = v14;
      v39 = v13;
      v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v16 = (_QWORD *)sub_19BFFA830(&v43, &v39, &v38);
      }
      else
      {
        sub_19BFA4428(v44, v13, v14);
        v16 = v15 + 3;
      }
      v44 = v16;
      if (a5)
      {
        v17 = *(_QWORD *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          v19 = v10;
          v20 = a5;
          v21 = v8;
          v22 = a3;
          v23 = a4;
          v24 = (v11 - v9) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_19BF8EB40();
          v26 = v19 - (_QWORD)v9;
          v27 = (uint64_t)(v19 - (_QWORD)v9) >> 1;
          if (v27 > v25)
            v25 = v27;
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v25;
          if (v28)
            v28 = (unint64_t)sub_19BFB3588(v28);
          else
            v29 = 0;
          v30 = (_DWORD *)(v28 + 4 * v24);
          *v30 = v17;
          v18 = v30 + 1;
          while (v11 != v9)
          {
            v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v41 = v18;
          v32 = v28 + 4 * v29;
          v42 = v32;
          if (v9)
            operator delete(v9);
          v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          v8 = v21;
          a5 = v20;
          v10 = v32;
        }
        else
        {
          *(_DWORD *)v11 = v17;
          v18 = v11 + 4;
        }
        v41 = v18;
        v11 = (char *)v18;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19BF8EA40((void ***)&__p);
  return v35;
}

void sub_19BFFABB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFFABF4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19BFFAC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D127E8;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19BFFACD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFFAD0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D12790;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19BFFADA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFFADE4@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return sub_19BFF973C((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_19BFFADEC(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  void *__p;
  void *v18;
  unint64_t v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v19 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v18 = v7;
      ++v6;
      v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  v14 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19BFFAF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFFAF70(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  uint64_t v10;
  std::string::size_type v11;
  double v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t **v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  std::string::size_type v29;
  const std::string *v30;
  std::string::size_type v31;
  const std::string *v32;
  char *v33;
  char **v34;
  char **v35;
  char *v36;
  int v37;
  char *v38;
  char *v39;
  double v40;
  double v41;
  std::string::size_type size;
  double v43;
  uint64_t **v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  std::string::size_type v52;
  __int128 *v53;
  _OWORD *v54;
  __int128 v55;
  std::string::size_type v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  std::string::size_type v62;
  int v63;
  char *v64;
  char **v65;
  BOOL v66;
  uint64_t v67;
  std::string __str;
  std::string v72;
  std::string *v73;
  char *v74;
  uint64_t v75;
  char **v76;
  char *v77[2];
  std::string v78;
  char v79[9];

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  v5 = a1;
  v77[0] = 0;
  v77[1] = 0;
  v76 = v77;
  if (v4 == v3)
  {
    v74 = 0;
    v75 = 0;
    v73 = (std::string *)&v74;
  }
  else
  {
    v7 = 0;
    v8 = a1 + 72;
    do
    {
      v9 = 0;
      v10 = v3 + 24 * v7;
      while (1)
      {
        v11 = *(char *)(v10 + 23) < 0 ? *(_QWORD *)(v10 + 8) : *(unsigned __int8 *)(v10 + 23);
        if (v9 > v11)
          break;
        v12 = *(double *)sub_19BFFBFC0(v8, (_QWORD *)v10);
        std::string::basic_string(&v78, (const std::string *)v10, 0, v9, (std::allocator<char> *)&v73);
        v73 = &v78;
        v13 = (double *)sub_19BFF8F10((uint64_t **)&v76, &v78, (_OWORD **)&v73);
        v13[7] = v12 + v13[7];
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v78.__r_.__value_.__l.__data_);
        ++v9;
      }
      if (*(_DWORD *)(*a3 + 4 * v7) == 0xFFFFFF)
      {
        v67 = 0;
        goto LABEL_109;
      }
      ++v7;
      v3 = *a2;
      v14 = a2[1];
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((v14 - *a2) >> 3));
    v74 = 0;
    v75 = 0;
    v73 = (std::string *)&v74;
    if (v14 != v3)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = v3 + v15;
        v18 = *(_DWORD *)(*a3 + 4 * v16);
        v19 = *(double *)sub_19BFFBFC0((uint64_t)&v76, (_QWORD *)(v3 + v15));
        v20 = *(unsigned __int8 *)(v17 + 23);
        if ((v20 & 0x80u) != 0)
          v20 = *(_QWORD *)(v17 + 8);
        std::string::basic_string(&v78, (const std::string *)v17, 0, v20 - 1, (std::allocator<char> *)&v72);
        v21 = *(double *)sub_19BFFBFC0((uint64_t)&v76, &v78);
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v78.__r_.__value_.__l.__data_);
        v22 = sub_19BFFBFFC((uint64_t **)&v73, (_QWORD *)v17, v17);
        v23 = (int)(sqrt(v19 / v21) * 255.0);
        if (v23 >= 255)
          v24 = 255;
        else
          v24 = v23;
        if (v23)
          v25 = 1;
        else
          v25 = v19 / v21 <= 0.0;
        v26 = v24 << 24;
        if (!v25)
          v26 = 0x1000000;
        *((_DWORD *)v22 + 14) = v26 & 0xFF000000 | v18 & 0xFFFFFF;
        ++v16;
        v3 = *a2;
        v27 = a2[1];
        v15 += 24;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((v27 - *a2) >> 3));
      if (v27 != v3)
      {
        v28 = 0;
        do
        {
          v29 = 0;
          v30 = (const std::string *)(v3 + 24 * v28);
          while (1)
          {
            v31 = SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0
                ? v30->__r_.__value_.__l.__size_
                : HIBYTE(v30->__r_.__value_.__r.__words[2]);
            if (v29 >= v31 - 1)
              break;
            std::string::basic_string(&v72, v30, 0, v29, (std::allocator<char> *)&v78);
            v32 = v30;
            if (SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0)
              v32 = (const std::string *)v30->__r_.__value_.__r.__words[0];
            sub_19BFFC118((uint64_t)&__str, (const void **)&v72.__r_.__value_.__l.__data_, v32->__r_.__value_.__s.__data_[v29]);
            v33 = v74;
            if (!v74)
              goto LABEL_114;
            v34 = &v74;
            do
            {
              v35 = v34;
              v36 = v33 + 32;
              v37 = (char)sub_19BFAAA0C((_QWORD *)v33 + 4, &__str);
              if (v37 >= 0)
                v38 = v33;
              else
                v38 = v33 + 8;
              if (v37 >= 0)
                v34 = (char **)v33;
              else
                v34 = v35;
              v33 = *(char **)v38;
            }
            while (*(_QWORD *)v38);
            if (v34 == &v74
              || (v37 >= 0 ? (v39 = v36) : (v39 = (char *)(v35 + 4)), (sub_19BFAAA0C(&__str, v39) & 0x80) != 0))
            {
LABEL_114:
              v40 = *(double *)sub_19BFFBFC0((uint64_t)&v76, &v72);
              if (v40 > *(double *)sub_19BFFBFC0((uint64_t)&v76, &__str))
              {
                v41 = *(double *)sub_19BFFBFC0((uint64_t)&v76, &__str);
                size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = __str.__r_.__value_.__l.__size_;
                std::string::basic_string(&v78, &__str, 0, size - 1, (std::allocator<char> *)v79);
                v43 = *(double *)sub_19BFFBFC0((uint64_t)&v76, &v78);
                if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v78.__r_.__value_.__l.__data_);
                v44 = sub_19BFFBFFC((uint64_t **)&v73, &__str, (uint64_t)&__str);
                v45 = (int)(sqrt(v41 / v43) * 255.0);
                if (v45 >= 255)
                  v46 = 255;
                else
                  v46 = v45;
                if (v45)
                  v47 = 1;
                else
                  v47 = v41 / v43 <= 0.0;
                v48 = (v46 << 24) | 0xFFFFFF;
                if (!v47)
                  v48 = 0x1FFFFFF;
                *((_DWORD *)v44 + 14) = v48;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v72.__r_.__value_.__l.__data_);
            ++v29;
          }
          ++v28;
          v3 = *a2;
        }
        while (v28 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    v5 = a1;
  }
  memset(&v78, 0, sizeof(v78));
  memset(&v72, 0, sizeof(v72));
  v49 = (uint64_t *)v73;
  if (v73 != (std::string *)&v74)
  {
    v50 = 0;
    v51 = 0;
    v52 = 0;
    do
    {
      v53 = (__int128 *)(v49 + 4);
      v54 = (_OWORD *)v78.__r_.__value_.__l.__size_;
      if (v78.__r_.__value_.__l.__size_ >= v78.__r_.__value_.__r.__words[2])
      {
        v56 = sub_19BFFC198((uint64_t *)&v78, v53);
      }
      else
      {
        if (*((char *)v49 + 55) < 0)
        {
          sub_19BF8CD70((_BYTE *)v78.__r_.__value_.__l.__size_, (void *)v49[4], v49[5]);
        }
        else
        {
          v55 = *v53;
          *(_QWORD *)(v78.__r_.__value_.__l.__size_ + 16) = v49[6];
          *v54 = v55;
        }
        v56 = (std::string::size_type)v54 + 24;
      }
      v78.__r_.__value_.__l.__size_ = v56;
      if ((unint64_t)v50 >= v52)
      {
        v57 = (v50 - v51) >> 2;
        v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v52 - (_QWORD)v51) >> 1 > v58)
          v58 = (uint64_t)(v52 - (_QWORD)v51) >> 1;
        if (v52 - (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
          v59 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v59 = v58;
        if (v59)
          v59 = (unint64_t)sub_19BFB3588(v59);
        else
          v60 = 0;
        v61 = (char *)(v59 + 4 * v57);
        *(_DWORD *)v61 = *((_DWORD *)v49 + 14);
        v62 = (std::string::size_type)(v61 + 4);
        while (v50 != v51)
        {
          v63 = *((_DWORD *)v50 - 1);
          v50 -= 4;
          *((_DWORD *)v61 - 1) = v63;
          v61 -= 4;
        }
        v52 = v59 + 4 * v60;
        v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
        v72.__r_.__value_.__l.__size_ = v62;
        v72.__r_.__value_.__r.__words[2] = v52;
        if (v51)
          operator delete(v51);
        v51 = v61;
        v50 = (char *)v62;
      }
      else
      {
        *(_DWORD *)v50 = *((_DWORD *)v49 + 14);
        v50 += 4;
      }
      v72.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
      v64 = (char *)v49[1];
      if (v64)
      {
        do
        {
          v65 = (char **)v64;
          v64 = *(char **)v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          v65 = (char **)v49[2];
          v66 = *v65 == (char *)v49;
          v49 = (uint64_t *)v65;
        }
        while (!v66);
      }
      v49 = (uint64_t *)v65;
    }
    while (v65 != &v74);
  }
  v67 = sub_19BFF98DC(v5 + 8, (uint64_t **)&v78, (int **)&v72);
  if (v72.__r_.__value_.__r.__words[0])
    operator delete(v72.__r_.__value_.__l.__data_);
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
  sub_19BF8EA40((void ***)&v72);
  sub_19BFB1F54(v74);
LABEL_109:
  sub_19BFB1F54(v77[0]);
  return v67;
}

void sub_19BFFB5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void **__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char *a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (__p)
    operator delete(__p);
  __p = &a30;
  sub_19BF8EA40(&__p);
  sub_19BFB1F54(a25);
  sub_19BFB1F54(a28);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFFB688(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  return sub_19BFF9AFC((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t sub_19BFFB690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v10[3];
  char v11;
  void *v12[3];
  char v13;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 104))(v10);
  (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(v12, a1, v10, a2, a3);
  if (v11 < 0)
    operator delete(v10[1]);
  v8 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 128))(a1, v12, a4);
  if (v13 < 0)
    operator delete(v12[1]);
  return v8;
}

void sub_19BFFB738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFFB768(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D125D8;
  v11[1] = a4;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19BFF9C10(a1 + 8, a2, a3, (uint64_t)v13);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19BFFB85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFFB8CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13[0] = &off_1E3D125D8;
  v13[1] = a4;
  v14 = v13;
  sub_19BFFBC40((uint64_t)v15, v13);
  sub_19BFF9CE8(a1 + 8, a2, a3, (uint64_t)v15, a5);
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_19BFFB9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

double sub_19BFFBA38@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL sub_19BFFBA44(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

void sub_19BFFBA58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  sub_19BF8F4E4((uint64_t *)(a1 + 24), a3, a4, a2, a5);
}

uint64_t sub_19BFFBA70(uint64_t a1, uint64_t a2, int *a3)
{
  int v4;
  uint64_t result;
  int v6;

  v6 = 0;
  v4 = sub_19BFF9DF8((uint64_t *)(a1 + 8), a2, &v6);
  result = 0;
  if (v4)
  {
    if ((v6 & 0xFFFFFF) == 0xFFFFFF)
    {
      return 0;
    }
    else
    {
      *a3 = v6 & 0xFFFFFF;
      return 1;
    }
  }
  return result;
}

_QWORD *sub_19BFFBAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D125D8;
  v11[1] = a3;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19BFF9E74((unint64_t *)(a1 + 8), a2, (uint64_t)v13, a4);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19BFFBBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFFBC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19BFF9F74((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t sub_19BFFBC40(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(a1 + 24) = 0;
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    v5 = operator new(0x28uLL);
    v6 = v5;
    *v5 = &off_1E3D11E48;
    if (v3 == a2)
    {
      v5[4] = v5 + 1;
      (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    }
    else
    {
      v5[4] = v3;
      a2[3] = 0;
    }
    *(_QWORD *)(a1 + 24) = v6;
  }
  return a1;
}

_QWORD *sub_19BFFBCC4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E3D11E48;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_19BFFBD20(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E3D11E48;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFFBD8C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1E3D11E48;
  sub_19BFA2418((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19BFFBDCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFFBDE0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D11E48;
  return sub_19BFA2418((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_19BFFBDFC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_19BFFBE30(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_19BFFBE80(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB8D60(*(_QWORD *)(a1 + 32), *a2, *a3, a3[1], a4);
}

uint64_t sub_19BFFBE98(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11588))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFBED4()
{
  return &unk_1E3D11588;
}

void sub_19BFFBEE4()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFFBEF8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D125D8;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFFBF2C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D125D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFFBF48(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4;

  v4 = *a2 & 0xFFFFFF;
  if (v4 != 0xFFFFFF)
    return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(result + 8) + 24), v4, *a3, a3[1], a4);
  return result;
}

uint64_t sub_19BFFBF78(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11700))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFBFB4()
{
  return &unk_1E3D11700;
}

uint64_t sub_19BFFBFC0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *sub_19BFF9264(a1, &v4, a2);
  if (!v2)
    sub_19BFADD28("map::at:  key not found");
  return v2 + 56;
}

uint64_t **sub_19BFFBFFC(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  char *v10;
  _BYTE *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if ((sub_19BFAAA0C(a2, v5 + 4) & 0x80) == 0)
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if ((sub_19BFAAA0C(v8, a2) & 0x80) == 0)
        return v6;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v10 = (char *)operator new(0x40uLL);
    v11 = v10 + 32;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_19BF8CD70(v11, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)a3;
      *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
    }
    *((_DWORD *)v10 + 14) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v6;
    *v9 = (uint64_t *)v10;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v10;
    if (v12)
    {
      *a1 = v12;
      v13 = *v9;
    }
    sub_19BFA96D8(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

void sub_19BFFC104(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFFC118(uint64_t a1, const void **a2, char a3)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  result = sub_19BFE9E2C(a1, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a3;
  v9[1] = 0;
  return result;
}

uint64_t sub_19BFFC198(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19BF8EB40();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_19BF8EB54(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_19BF8CD70(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_19BF8EACC(a1, v15);
  v13 = a1[1];
  sub_19BF8ECAC((uint64_t)v15);
  return v13;
}

void sub_19BFFC2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BF8ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19BFFC2BC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFFC2D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D12790;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFFC304(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D12790;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFFC320(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19BFFC33C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11750))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFC378()
{
  return &unk_1E3D11750;
}

void sub_19BFFC388()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFFC39C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D127E8;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFFC3D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D127E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFFC3EC(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19BFFC408(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11760))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFC444()
{
  return &unk_1E3D11760;
}

void sub_19BFFC450(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  uint64_t j;

  v2 = (_QWORD *)(a1 + 8);
  sub_19BFFC628((void **)(a1 + 8), 256, 256);
  sub_19BFFC730((void **)(a1 + 16), 4, 0);
  sub_19BFFC7F4((void **)(a1 + 24), 1, 0);
  sub_19BFFC8B8((void **)(a1 + 32), 256, 0);
  sub_19BFFC9BC((void **)(a1 + 40), 1, 0);
  v3 = 0;
  **(_QWORD **)(a1 + 8) = 0xFFFFFFFF00000000;
  v4 = 0xFFFFFFFE00000000;
  for (i = 8; i != 2048; i += 8)
  {
    v6 = v3;
    if (i == 2040)
      v7 = 0xFFFFFFFF00000000;
    else
      v7 = v4;
    if (!v3)
      v6 = 4294967041;
    *(_QWORD *)(*v2 + i) = v7 | v6;
    v4 -= 0x100000000;
    --v3;
  }
  *(_QWORD *)(a1 + 60) = 0x10000000100;
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 16) = 1;
  **(_DWORD **)(a1 + 16) = 4;
  *(_QWORD *)(a1 + 68) = 0x100000004;
  *(_QWORD *)a1 = 0;
  for (j = 40; j != 297; ++j)
    *(_WORD *)(a1 + 2 * j) = j - 39;
}

_QWORD *sub_19BFFC558(_QWORD *a1)
{
  *a1 = &off_1E3D19BF8;
  sub_19BFFC590((uint64_t)(a1 + 1), 0);
  return a1;
}

void sub_19BFFC590(uint64_t a1, int a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = a1 + 8;
  if (*(_DWORD *)(a1 + 76))
  {
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else if (*(_QWORD *)v4)
  {
    free(*(void **)v4);
  }
  v5 = *(void **)(a1 + 16);
  if (v5)
    free(v5);
  v6 = *(void **)(a1 + 24);
  if (v6)
    free(v6);
  v7 = *(void **)(a1 + 32);
  if (v7)
    free(v7);
  v8 = *(void **)(a1 + 40);
  if (v8)
    free(v8);
  *(_DWORD *)(v4 + 64) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  if (a2)
    sub_19BFFC450(a1);
  *(_DWORD *)(a1 + 76) = 0;
}

void sub_19BFFC628(void **a1, int a2, int a3)
{
  void *v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = malloc_type_realloc(*a1, 8 * a2, 0x100004000313F17uLL);
  if (!v6)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v6;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE417940);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EE417940))
  {
    qword_1EE417938 = 0;
    __cxa_guard_release(&qword_1EE417940);
  }
  if (a3 != a2)
  {
    v8 = (uint64_t *)((char *)*a1 + 8 * a3);
    v9 = qword_1EE417938;
    v10 = 8 * a2 - 8 * a3;
    do
    {
      *v8++ = v9;
      v10 -= 8;
    }
    while (v10);
  }
}

void sub_19BFFC730(void **a1, int a2, int a3)
{
  uint64_t v6;
  char *v7;

  v6 = a2;
  v7 = (char *)malloc_type_realloc(*a1, a2, 0x100004077774924uLL);
  if (!v7)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v7;
  if (a3 != a2)
    bzero(&v7[a3], v6 - a3);
}

void sub_19BFFC7F4(void **a1, int a2, int a3)
{
  size_t v6;
  char *v7;

  v6 = 4 * a2;
  v7 = (char *)malloc_type_realloc(*a1, v6, 0x100004052888210uLL);
  if (!v7)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v7;
  if (a3 != a2)
    bzero(&v7[4 * a3], v6 - 4 * a3);
}

void sub_19BFFC8B8(void **a1, int a2, int a3)
{
  void *v6;
  unsigned __int8 v7;
  __int16 *v8;
  __int16 v9;
  uint64_t v10;

  v6 = malloc_type_realloc(*a1, 2 * a2, 0x1000040BDFB0063uLL);
  if (!v6)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v6;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE417950);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EE417950))
  {
    word_1EE417948 = 0;
    __cxa_guard_release(&qword_1EE417950);
  }
  if (a3 != a2)
  {
    v8 = (__int16 *)((char *)*a1 + 2 * a3);
    v9 = word_1EE417948;
    v10 = 2 * a2 - 2 * a3;
    do
    {
      *v8++ = v9;
      v10 -= 2;
    }
    while (v10);
  }
}

__n128 sub_19BFFC9BC(void **a1, int a2, int a3)
{
  void *v6;
  __n128 result;
  unsigned __int8 v8;
  __n128 *v9;
  uint64_t v10;

  v6 = malloc_type_realloc(*a1, 20 * a2, 0x1000040A86A77D5uLL);
  if (!v6)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v6;
  v8 = atomic_load((unsigned __int8 *)&qword_1EE417970);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1EE417970))
  {
    *(_QWORD *)&xmmword_1EE417958 = 0;
    DWORD2(xmmword_1EE417958) = 16843008;
    *(_QWORD *)((char *)&xmmword_1EE417958 + 12) = 0;
    __cxa_guard_release(&qword_1EE417970);
  }
  if (a3 != a2)
  {
    v9 = (__n128 *)((char *)*a1 + 20 * a3);
    v10 = 20 * a2 - 20 * a3;
    do
    {
      result = (__n128)xmmword_1EE417958;
      v9[1].n128_u32[0] = dword_1EE417968;
      *v9 = result;
      v9 = (__n128 *)((char *)v9 + 20);
      v10 -= 20;
    }
    while (v10);
  }
  return result;
}

void sub_19BFFCAF4(_QWORD *a1)
{
  sub_19BFFC558(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFFCB18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v38;
  void *v39;
  void *__p;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (a2)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      v13 = *(void **)(a3 + 8 * i);
      v14 = *(_QWORD *)(a4 + 8 * i);
      v38 = v14;
      v39 = v13;
      v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v16 = (_QWORD *)sub_19BFFA830(&v43, &v39, &v38);
      }
      else
      {
        sub_19BFA4428(v44, v13, v14);
        v16 = v15 + 3;
      }
      v44 = v16;
      if (a5)
      {
        v17 = *(_QWORD *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          v19 = v10;
          v20 = a5;
          v21 = v8;
          v22 = a3;
          v23 = a4;
          v24 = (v11 - v9) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_19BF8EB40();
          v26 = v19 - (_QWORD)v9;
          v27 = (uint64_t)(v19 - (_QWORD)v9) >> 1;
          if (v27 > v25)
            v25 = v27;
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v25;
          if (v28)
            v28 = (unint64_t)sub_19BFB3588(v28);
          else
            v29 = 0;
          v30 = (_DWORD *)(v28 + 4 * v24);
          *v30 = v17;
          v18 = v30 + 1;
          while (v11 != v9)
          {
            v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v41 = v18;
          v32 = v28 + 4 * v29;
          v42 = v32;
          if (v9)
            operator delete(v9);
          v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          v8 = v21;
          a5 = v20;
          v10 = v32;
        }
        else
        {
          *(_DWORD *)v11 = v17;
          v18 = v11 + 4;
        }
        v41 = v18;
        v11 = (char *)v18;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19BF8EA40((void ***)&__p);
  return v35;
}

void sub_19BFFCD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFFCD48(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19BFFCD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D19D00;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19BFFCE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFFCE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D19D80;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19BFFCEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFFCF38@<X0>(_QWORD *a1@<X8>)
{
  return sub_19BFFEEFC(a1);
}

uint64_t sub_19BFFCF44(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v15;
  void *__p;
  void *v19;
  unint64_t v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v20 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v19 = v7;
      v5 = (char *)v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v6++);
  }
  v15 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_19BFFD0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFFD0CC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "CedarMinimalPrefixTrie.h", 78, "keys.size() == values.size()");
  if (v4 == v3)
  {
    v11 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    LODWORD(v11) = 1;
    do
    {
      v12 = (uint64_t **)(v3 + v8);
      if (*((char *)v12 + 23) < 0)
      {
        v14 = *v12;
        v13 = v12[1];
      }
      else
      {
        v13 = (uint64_t *)*((unsigned __int8 *)v12 + 23);
        v14 = (uint64_t *)v12;
      }
      v11 = v11 & (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 152))(a1, v14, v13, *a3 + v9);
      ++v10;
      v3 = *a2;
      v9 += 4;
      v8 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  sub_19BFFDE24(a1 + 8);
  return v11;
}

uint64_t sub_19BFFD1E0(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t v3;

  v3 = a1 + 8;
  sub_19BFFEE88(a1 + 8, a2, a3 >> 3);
  sub_19BFFDE24(v3);
  return 1;
}

BOOL sub_19BFFD214(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v5;
  int v6;
  unint64_t v8;
  unint64_t v9;

  v8 = 0;
  v9 = 0;
  v5 = sub_19BFFEBD4(a1 + 8, a2, &v9, &v8, a3);
  if (v5 == -2)
    v6 = -1;
  else
    v6 = v5;
  *a4 = v6;
  return v6 != -1;
}

uint64_t sub_19BFFD264(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;

  v13 = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v12 = result;
  if (a3)
  {
    v9 = 0;
    do
    {
      v12 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, &v12, a2 + v9, 1);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v12);
      if (!(_DWORD)result)
        break;
      v11 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)a1 + 128))(a1, &v12, &v11);
      if ((result & 1) != 0)
      {
        if (a3 >= v9 + 1)
          v10 = v9 + 1;
        else
          v10 = a3;
        result = sub_19BFB8D60(*(_QWORD *)(a4 + 24), v11, a2, v10, (uint64_t)&v13);
        ++v9;
        if (v13)
          return result;
      }
      else
      {
        ++v9;
      }
    }
    while (v9 != a3);
  }
  return result;
}

void sub_19BFFD354(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  void **v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *__dst[2];
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v19[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v18 = (*(uint64_t (**)(uint64_t, _QWORD *, const void *, size_t))(*(_QWORD *)a1 + 120))(a1, v19, a2, a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v18))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    if (a3 >= 0x17)
    {
      v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v11 = a3 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)a3;
      v17 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v17) = a3;
      v10 = __dst;
      if (!a3)
      {
LABEL_10:
        *((_BYTE *)v10 + a3) = 0;
        v13 = operator new(0x28uLL);
        *v13 = &off_1E3D19E00;
        v13[1] = __dst;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        v20 = v13;
        (*(void (**)(uint64_t, uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, &v18, v19, a5);
        v14 = v20;
        if (v20 == v19)
        {
          v15 = 4;
          v14 = v19;
        }
        else
        {
          if (!v20)
            goto LABEL_15;
          v15 = 5;
        }
        (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_15:
        if (SHIBYTE(v17) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19BFFD508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFFD560()
{
  return 0;
}

BOOL sub_19BFFD568(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

uint64_t sub_19BFFD578(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v6 = 0;
  v7 = v4;
  if (sub_19BFFEBD4(a1 + 8, a3, &v7, &v6, a4) == -2)
    return -1;
  else
    return v7;
}

uint64_t sub_19BFFD5C0(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v7 = *a2;
    v9 = 0;
    v10 = v7;
    v8 = sub_19BFFEBD4(a1 + 8, (uint64_t)"", &v10, &v9, 0);
    *a3 = v8;
    return v8 != -1;
  }
  return result;
}

void sub_19BFFD634(_QWORD *a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::string::size_type size;
  char v16;
  std::string *p_p;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  std::string::size_type v32;
  char v33;
  std::string __p;
  std::string::size_type v35;
  unint64_t v36;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 112))(a1))
  {
    memset(&__p, 0, sizeof(__p));
    v35 = 0;
    v33 = 0;
    v8 = a1 + 1;
    v9 = *a2;
    v36 = *a2;
    v10 = sub_19BFFEAA0(a1 + 1, &v36, &v35);
    if (v10 != -2)
    {
      v11 = HIDWORD(v9);
      v31 = a3;
      v32 = a4;
      while (1)
      {
        v12 = v35;
        v13 = v36;
        v14 = HIDWORD(v36);
        if ((a4 & 0x80000000) != 0 || v35 <= v32)
        {
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __p.__r_.__value_.__l.__size_;
          if (size < v35)
          {
            std::string::resize(&__p, v35, 0);
            v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          if (v16 >= 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          p_p->__r_.__value_.__s.__data_[v12] = 0;
          v18 = v13;
          v19 = v12;
          if (v14)
          {
            v18 = v13;
            v30 = a4;
            v20 = a1[3];
            v21 = strlen((const char *)(v20 - *(int *)(a1[2] + 8 * v13)));
            if (v21 >= v12)
              v22 = v12;
            else
              v22 = v21;
            if (v12 >= v21)
              v19 = v12 - v21;
            else
              v19 = 0;
            v23 = v20 - v22;
            a4 = v30;
            memcpy((char *)p_p + v19, (const void *)(v23 + (v13 >> 32)), v22);
          }
          for (; v19; --v19)
          {
            v24 = a1[2];
            v25 = *(int *)(v24 + 8 * v18 + 4);
            *((_BYTE *)&p_p[-1].__r_.__value_.__r.__words[2] + v19 + 7) = *(_BYTE *)(v24 + 8 * v25) ^ v18;
            v18 = v25;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &__p;
          else
            v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          sub_19BFB8D60(*(_QWORD *)(v31 + 24), v10, (uint64_t)v26, v12, (uint64_t)&v33);
          v11 = HIDWORD(v9);
          v8 = a1 + 1;
        }
        if ((_DWORD)v14)
        {
          if (!v11)
          {
            v13 = v13;
            v27 = a1[2];
            v12 -= *(int *)(v27 + 8 * v13) + (uint64_t)(int)v14;
            break;
          }
          goto LABEL_3;
        }
        v27 = a1[2];
        v29 = *(int *)(v27 + 8 * v13);
        v28 = *(unsigned __int8 *)(a1[5] + 2 * v29);
        if (!*(_BYTE *)(a1[5] + 2 * v29))
          break;
LABEL_37:
        v36 = v29 ^ v28;
        v35 = v12 + 1;
        v10 = sub_19BFFEAA0(v8, &v36, &v35);
        if (v10 == -2)
          goto LABEL_3;
      }
      while (v13 != v9)
      {
        v28 = *(unsigned __int8 *)(a1[5] + 2 * v13);
        v13 = *(int *)(v27 + 8 * v13 + 4);
        --v12;
        if (v28)
        {
          v29 = *(int *)(v27 + 8 * v13);
          goto LABEL_37;
        }
      }
    }
LABEL_3:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19BFFD894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFFD8B4(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  char v23;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  if (!(_DWORD)result)
    return result;
  v21 = 0;
  v7 = a1[5];
  if (!v7)
    __assert_rtn("enumerateChildren", "cedarpp.h", 261, "_ninfo");
  v8 = *a2;
  v9 = HIDWORD(*a2);
  if (v9)
  {
    v10 = -(int)v9;
    if ((v10 & 0x80000000) != 0)
    {
LABEL_5:
      v11 = -v10;
      v12 = *(_BYTE *)(a1[3] + v11);
      if (v12)
      {
        v22 = (v11 << 32) + 0x100000000;
        v23 = v12;
        v13 = *(_QWORD *)(a3 + 24);
        if (v13)
          return (*(uint64_t (**)(uint64_t, char *, uint64_t *, char *))(*(_QWORD *)v13 + 48))(v13, &v23, &v22, &v21);
LABEL_23:
        sub_19BF94AC4();
      }
      return result;
    }
  }
  else
  {
    v10 = *(_DWORD *)(a1[2] + 8 * v8);
    if ((v10 & 0x80000000) != 0)
      goto LABEL_5;
  }
  v14 = v10;
  if (v8 && ((v15 = a1[2], *(int *)(v15 + 8 * v14) < 1) || *(_DWORD *)(v15 + 8 * v14 + 4) != (_DWORD)v8))
    v16 = (unsigned __int8 *)(v7 + 2 * v8 + 1);
  else
    v16 = (unsigned __int8 *)(v7 + 2 * v14);
  v17 = *v16;
  if (v17)
  {
    while (1)
    {
      v18 = v17 ^ v14;
      v22 = v18;
      v23 = v17;
      v19 = *(_QWORD *)(a3 + 24);
      if (!v19)
        break;
      result = (*(uint64_t (**)(uint64_t, char *, uint64_t *, char *))(*(_QWORD *)v19 + 48))(v19, &v23, &v22, &v21);
      v17 = *(unsigned __int8 *)(a1[5] + 2 * v18);
      if (v21)
        v20 = 1;
      else
        v20 = v17 == 0;
      if (v20)
        return result;
    }
    goto LABEL_23;
  }
  return result;
}

BOOL sub_19BFFDA20(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned __int8 v22;
  BOOL v23;
  unint64_t v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int *v37;
  _DWORD **v38;
  int v39;
  int v40;
  int v41;
  int *v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  char *v46;
  char v47;
  _DWORD *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  char v57;

  if (a3)
  {
    v8 = a1 + 8;
    v51 = 0;
    if (!*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 48))
      sub_19BFFDE24(a1 + 8);
    v9 = **(_DWORD **)(a1 + 16);
    if ((v9 & 0x80000000) == 0)
    {
      v10 = 0;
      while (a3 != v10)
      {
        v11 = sub_19BFFE08C(v8, &v51, (unsigned __int8 *)(a2 + v10));
        v12 = v11;
        v51 = v11;
        ++v10;
        v9 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11);
        if (v9 < 0)
          goto LABEL_11;
      }
      v57 = 0;
      v17 = (unsigned __int8 *)&v57;
      goto LABEL_34;
    }
    v12 = 0;
    v10 = 0;
LABEL_11:
    v13 = -v9;
    if (v13 >= 4)
    {
      v14 = (unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v13);
      v50 = &v14[-v10];
      v15 = v10;
      if (v10 < a3)
      {
        v15 = v10;
        while (1)
        {
          v16 = *v14++;
          if (*(unsigned __int8 *)(a2 + v15) != v16)
            break;
          if (a3 == ++v15)
            goto LABEL_19;
        }
      }
      if (v15 == a3)
      {
LABEL_19:
        v15 = a3;
        if (!v50[a3])
        {
          v30 = v50;
          goto LABEL_53;
        }
      }
      v49 = a4;
      if (HIDWORD(v12))
      {
        v51 = v12;
        v18 = -(uint64_t)*(int *)(*(_QWORD *)(a1 + 16) + 8 * v12);
        if (v13 > v18)
        {
          do
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a1 + 24) + v18);
            v51 = (int)sub_19BFFE08C(v8, &v51, &v56);
            ++v18;
          }
          while (v13 != v18);
        }
      }
      v19 = v15 - v10;
      if (v15 > v10)
      {
        v20 = (unsigned __int8 *)(a2 + v10);
        v21 = v19;
        do
        {
          v22 = *v20++;
          v55 = v22;
          v51 = (int)sub_19BFFE08C(v8, &v51, &v55);
          --v21;
        }
        while (v21);
      }
      if (v50[v15])
      {
        v54 = v50[v15];
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8 * (int)sub_19BFFE08C(v8, &v51, &v54)) = v9 + ~(_DWORD)v19;
        v19 -= 4;
      }
      v23 = __CFADD__(v19, v13);
      v24 = v19 + v13;
      a4 = v49;
      if (!v23)
      {
        do
        {
          v25 = *(_DWORD *)(a1 + 80);
          v26 = *(int **)(a1 + 32);
          v27 = *v26 + 1;
          *v26 = v27;
          if (v25 == v27)
          {
            v28 = 2 * *(_DWORD *)(a1 + 80);
            *(_DWORD *)(a1 + 80) = v28;
            sub_19BFFC7F4((void **)(a1 + 32), v28, **(_DWORD **)(a1 + 32));
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * **(int **)(a1 + 32)) = v13;
          v13 += 5;
        }
        while (v13 <= v24);
      }
      if (v15 == a3)
      {
        v53 = 0;
        v17 = &v53;
LABEL_34:
        v29 = (char *)(*(_QWORD *)(a1 + 16) + 8 * (int)sub_19BFFE08C(v8, &v51, v17));
LABEL_54:
        *(_DWORD *)v29 = *a4;
        return a3 != 0;
      }
      if (v50[v15])
      {
        v10 = v15 + 1;
      }
      else
      {
        v53 = 0;
        v31 = sub_19BFFE08C(v8, &v51, &v53);
        v10 = v15 + 1;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8 * v31) += *(_DWORD *)&v50[v15 + 1];
      }
      v52 = *(_BYTE *)(a2 + v15);
      v12 = (int)sub_19BFFE08C(v8, &v51, &v52);
    }
    if (a3 == v10)
    {
      v32 = *(int **)(a1 + 32);
      v33 = *v32;
      if ((_DWORD)v33)
      {
        v34 = v32[v33];
        *(_BYTE *)(*(_QWORD *)(a1 + 24) + v34) = 0;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8 * v12) = -(int)v34;
        --**(_DWORD **)(a1 + 32);
        v35 = v34 + *(_QWORD *)(a1 + 24);
        *(_DWORD *)(v35 + 1) = 0;
        v29 = (char *)(v35 + 1);
        goto LABEL_54;
      }
    }
    v36 = a3 - v10 + 5;
    v38 = (_DWORD **)(a1 + 24);
    v37 = *(int **)(a1 + 24);
    v39 = *(_DWORD *)(a1 + 76);
    v40 = *v37;
    if (v39 < *v37 + v36)
    {
      if (v39 <= v36)
        v41 = a3 - v10 + 5;
      else
        v41 = *(_DWORD *)(a1 + 76);
      *(_DWORD *)(a1 + 76) = v41 + v39;
      sub_19BFFC730((void **)(a1 + 24), v41 + v39, *v37);
      v40 = **(_DWORD **)(a1 + 24);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8 * v12) = -v40;
    v42 = *(int **)(a1 + 24);
    v43 = *v42;
    v44 = (char *)v42 + v43;
    v30 = (unsigned __int8 *)v42 + v43 - v10;
    v45 = a3 - v10;
    if (a3 > v10)
    {
      v46 = (char *)(a2 + v10);
      do
      {
        v47 = *v46++;
        *v44++ = v47;
        --v45;
      }
      while (v45);
      v42 = *v38;
      LODWORD(v43) = **v38;
    }
    *v42 = v43 + v36;
LABEL_53:
    v29 = (char *)&v30[a3 + 1];
    goto LABEL_54;
  }
  return a3 != 0;
}

uint64_t sub_19BFFDE10()
{
  return 0;
}

void sub_19BFFDE18(uint64_t a1)
{
  sub_19BFFC590(a1 + 8, 1);
}

void sub_19BFFDE24(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  BOOL v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int16 *v25;
  __int16 v26;
  uint64_t v27;
  int *v28;
  int v29;
  int *v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  int *v34;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = (void **)(a1 + 40);
  if (!v3)
  {
    sub_19BFFC9BC(v2, *(int *)(a1 + 64) >> 8, 0);
    *(_DWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 52) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    v19 = (int *)(a1 + 48);
    if (*(int *)(a1 + 64) >= 1)
    {
      v20 = 0;
      v21 = 0;
      v22 = *(_QWORD *)(a1 + 40);
      v23 = 256;
      while (1)
      {
        v24 = v22 + 20 * v20;
        *(_WORD *)(v24 + 8) = 0;
        v25 = (__int16 *)(v24 + 8);
        if ((int)v21 >= ((_DWORD)v20 << 8) + 256)
          break;
        v26 = 0;
        v27 = (int)v21;
        v28 = (int *)(*(_QWORD *)(a1 + 8) + 8 * (int)v21 + 4);
        do
        {
          v29 = *v28;
          v28 += 2;
          if (v29 < 0)
          {
            v16 = v26++ == 0;
            *v25 = v26;
            if (v16)
            {
              *(_DWORD *)(v22 + 20 * v20 + 16) = v21;
              v26 = 1;
            }
          }
          ++v27;
          LODWORD(v21) = v21 + 1;
        }
        while (v23 != v27);
        if (v26)
          v30 = (int *)(a1 + 56);
        else
          v30 = (int *)(a1 + 48);
        if (v26 == 1)
          v30 = (int *)(a1 + 52);
        v31 = *v30;
        if (*v30)
          goto LABEL_42;
        v32 = (_DWORD *)(v22 + 20 * v20);
        if (!v26)
        {
          v31 = 0;
          goto LABEL_43;
        }
        v33 = v20;
LABEL_46:
        *(_DWORD *)(v22 + 20 * v33 + 4) = v20;
        *v32 = v20;
        *v30 = v20++;
        v23 += 256;
        v21 = v27;
        if ((int)v27 >= *(_DWORD *)(a1 + 64))
          goto LABEL_2;
      }
      v31 = *v19;
      if (*v19)
      {
        v30 = (int *)(a1 + 48);
        v27 = v21;
LABEL_42:
        v32 = (_DWORD *)(v22 + 20 * v20);
LABEL_43:
        v21 = v27;
      }
      else
      {
        v32 = (_DWORD *)(v22 + 20 * v20);
        v30 = (int *)(a1 + 48);
      }
      v34 = (int *)(v22 + 20 * v31);
      *v32 = *v34;
      *(_DWORD *)(v22 + 20 * v20 + 4) = *v30;
      v33 = *v34;
      v27 = v21;
      v32 = v34;
      goto LABEL_46;
    }
  }
LABEL_2:
  v4 = (uint64_t *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 64);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_19BFFC8B8((void **)(a1 + 32), v5, 0);
    v5 = *(_DWORD *)(a1 + 64);
    if (v5 >= 1)
    {
      for (i = 0; i < v5; ++i)
      {
        v7 = *(_QWORD *)(a1 + 8);
        v8 = *(unsigned int *)(v7 + 8 * i + 4);
        if ((v8 & 0x80000000) == 0)
        {
          v9 = *(int *)(v7 + 8 * v8);
          v10 = (v9 ^ i);
          if (v9 != i)
          {
            v11 = *v4;
            v12 = *v4 + 2 * v8;
            v15 = *(unsigned __int8 *)(v12 + 1);
            v14 = (_BYTE *)(v12 + 1);
            v13 = v15;
            if ((_DWORD)v8)
              v16 = v13 == 0;
            else
              v16 = 0;
            if (!v16 || (v13 = 0, *(_DWORD *)(v7 + 8 * v9 + 4) == (_DWORD)v8))
            {
              if (v13 < v10)
              {
                do
                {
                  v17 = v9 ^ v13;
                  v13 = *(unsigned __int8 *)(v11 + 2 * (int)(v9 ^ v13));
                  if (*(_BYTE *)(v11 + 2 * v17))
                    v18 = v13 >= v10;
                  else
                    v18 = 1;
                }
                while (!v18);
                v14 = (_BYTE *)(v11 + 2 * v17);
              }
            }
            *(_BYTE *)(v11 + 2 * (int)((v9 ^ i) ^ v9)) = v13;
            *v14 = v10;
            v5 = *(_DWORD *)(a1 + 64);
          }
        }
      }
    }
  }
  *(_DWORD *)(a1 + 60) = v5;
  *(_DWORD *)(a1 + 68) = **(_DWORD **)(a1 + 16);
  *(_DWORD *)(a1 + 72) = 1;
}

uint64_t sub_19BFFE08C(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  signed int *v39;
  signed int v40;
  signed int v41;
  uint64_t v42;
  signed int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  uint64_t v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unsigned __int8 *v56;
  int v57;
  unsigned __int8 v58;
  int v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  int *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE *v74;
  unsigned int v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  __int16 *v81;
  int v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _WORD *v88;
  int v89;
  int v90;
  int *v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  _QWORD *v99;
  int v100;
  _BYTE v101[256];
  uint64_t v102;

  v4 = a2;
  v102 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *a2;
  v8 = *(_DWORD *)(v6 + 8 * *a2);
  v9 = *a3;
  if (v8 < 0 || (v10 = v8 ^ v9, v11 = *(int *)(v6 + 8 * v10 + 4), (v11 & 0x80000000) != 0))
  {
    result = sub_19BFFE6A0(a1, *(_DWORD *)(v6 + 8 * *a2), *a3, v7);
    v22 = *a3;
    v23 = *(_QWORD *)(a1 + 32);
    v24 = v23 + 2 * *v4;
    v27 = *(unsigned __int8 *)(v24 + 1);
    v26 = (_BYTE *)(v24 + 1);
    v25 = v27;
    if ((v8 & 0x80000000) == 0 && v25 < v22)
    {
      do
      {
        v28 = result ^ v25 ^ v22;
        v25 = *(unsigned __int8 *)(v23 + 2 * v28);
        if (*(_BYTE *)(v23 + 2 * v28))
          v29 = v25 >= v22;
        else
          v29 = 1;
      }
      while (!v29);
      v26 = (_BYTE *)(v23 + 2 * v28);
    }
    *(_BYTE *)(v23 + 2 * (int)result) = v25;
    *v26 = v22;
  }
  else
  {
    result = v8 ^ v9;
    if ((_DWORD)v11 != (_DWORD)v7)
    {
      v13 = *(_DWORD *)(v6 + 8 * v11);
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(unsigned __int8 *)(v14 + 2 * v7 + 1);
      LOBYTE(v16) = v15;
      LOBYTE(v17) = *(_BYTE *)(v14 + 2 * v11 + 1);
      while (1)
      {
        v18 = 2 * (v13 ^ v17);
        v17 = *(unsigned __int8 *)(v14 + v18);
        if (!*(_BYTE *)(v14 + v18))
          break;
        v16 = *(unsigned __int8 *)(v14 + 2 * (v8 ^ v16));
        if (!v16)
        {
          v19 = a1;
          v20 = *(_DWORD *)(v6 + 8 * *a2);
          v21 = v9;
          goto LABEL_18;
        }
      }
      v19 = a1;
      v20 = *(_DWORD *)(v6 + 8 * v11);
      v15 = *(unsigned __int8 *)(v14 + 2 * v11 + 1);
      v21 = -1;
LABEL_18:
      v30 = sub_19BFFE7E4(v19, v101, v20, v15, v21);
      v31 = v30;
      if (v101 == v30)
      {
        v43 = sub_19BFFE860(a1);
      }
      else
      {
        v99 = v4;
        v32 = *(_DWORD *)(a1 + 56);
        if (v32)
        {
          v33 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 20 * v32);
          v34 = (__int16)((_WORD)v30 - (unsigned __int16)v101 + 1);
          v97 = v33;
          v95 = v34;
          do
          {
            v35 = *(_QWORD *)(a1 + 40);
            v36 = v32;
            v37 = *(__int16 *)(v35 + 20 * v32 + 8);
            if (v37 >= v34 && v34 < *(__int16 *)(v35 + 20 * v32 + 10))
            {
              v38 = v35 + 20 * v32;
              v41 = *(_DWORD *)(v38 + 16);
              v39 = (signed int *)(v38 + 16);
              v40 = v41;
              v42 = *(_QWORD *)(a1 + 8);
              v43 = v41;
              do
              {
                v44 = v101;
                v4 = v99;
                while (1)
                {
                  v45 = *++v44;
                  if ((*(_DWORD *)(v42 + 8 * (v43 ^ v101[0] ^ v45) + 4) & 0x80000000) == 0)
                    break;
                  if (v44 == v31)
                  {
                    *v39 = v43;
                    goto LABEL_36;
                  }
                }
                v46 = *(_DWORD *)(v42 + 8 * v43 + 4);
                v43 = -v46;
              }
              while (v40 + v46);
            }
            *(_WORD *)(v35 + 20 * v36 + 10) = v34;
            v47 = a1 + 2 * v37;
            v49 = *(__int16 *)(v47 + 80);
            v48 = (_WORD *)(v47 + 80);
            if (v34 < v49)
              *v48 = v34;
            v50 = v35 + 20 * v36;
            v32 = *(_DWORD *)(v50 + 4);
            v51 = *(_DWORD *)(v50 + 12);
            *(_DWORD *)(v50 + 12) = v51 + 1;
            if (!v51)
            {
              sub_19BFFE89C(v35, v36, (_DWORD *)(a1 + 56), (int *)(a1 + 52));
              v34 = v95;
              v33 = v97;
            }
          }
          while (v36 != v33);
        }
        v43 = sub_19BFFE948(a1) << 8;
        v4 = v99;
LABEL_36:
        v10 = v8 ^ v9;
      }
      v94 = v43 ^ v101[0];
      LODWORD(v52) = *(_DWORD *)v4;
      if (v17)
        v53 = v8;
      else
        v53 = v13;
      if (!v17)
        LODWORD(v52) = v11;
      v100 = v52;
      if (v17 && v101[0] == v9)
      {
        v52 = (int)v52;
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 2 * (int)v52 + 1) = v9;
      }
      else
      {
        v52 = (int)v52;
      }
      v54 = v94;
      *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v52) = v94;
      if (v101 <= v31)
      {
        if (v9)
          v55 = -1;
        else
          v55 = 0;
        v93 = v55;
        v96 = v53;
        v98 = (uint64_t)v53 >> 8;
        v91 = (int *)(a1 + 52);
        v56 = v101;
        v92 = 2 * v10;
        while (1)
        {
          v57 = sub_19BFFE6A0(a1, v54, *v56, v100);
          if (v56 == v31)
            v58 = 0;
          else
            v58 = v56[1];
          v59 = v53 ^ *v56;
          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 2 * v57) = v58;
          if (v17 && v59 == (_DWORD)v10)
            goto LABEL_88;
          v60 = *(_QWORD *)(a1 + 8);
          v61 = (int *)(v60 + 8 * v57);
          v62 = v59;
          v63 = (int *)(v60 + 8 * v59);
          v64 = *v63;
          *v61 = *v63;
          if (v64 >= 1 && *v56)
          {
            v65 = *(_QWORD *)(a1 + 32);
            v66 = *(unsigned __int8 *)(v65 + 2 * v59 + 1);
            *(_BYTE *)(v65 + 2 * v57 + 1) = v66;
            v67 = *(_QWORD *)(a1 + 8);
            v68 = *v61;
            do
            {
              *(_DWORD *)(v67 + 8 * (v68 ^ v66) + 4) = v57;
              v68 = *v61;
              v66 = *(unsigned __int8 *)(v65 + 2 * (*v61 ^ v66));
            }
            while (v66);
          }
          v69 = *v4;
          if (!v17 && v59 == (_DWORD)v69)
          {
            *v4 = v57;
            v69 = v57;
          }
          v70 = v17 == 0;
          if (v59 != (_DWORD)v10)
            v70 = 0;
          if (!v70)
            break;
          v71 = *(_QWORD *)(a1 + 32);
          v72 = v71 + 2 * v69;
          v75 = *(unsigned __int8 *)(v72 + 1);
          v74 = (_BYTE *)(v72 + 1);
          LOBYTE(v73) = v75;
          if (v75 < v9)
          {
            do
            {
              v76 = v8 ^ v73;
              v73 = *(unsigned __int8 *)(v71 + 2 * v76);
              if (*(_BYTE *)(v71 + 2 * v76))
                v77 = v73 >= v9;
              else
                v77 = 1;
            }
            while (!v77);
            v74 = (_BYTE *)(v71 + 2 * v76);
          }
          *(_BYTE *)(v71 + v92) = v73;
          *v74 = v9;
          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 2 * v62 + 1) = 0;
          *v63 = v93;
          *(_DWORD *)(v60 + 8 * v62 + 4) = *v4;
LABEL_87:
          v53 = v96;
LABEL_88:
          if (++v56 > v31)
            goto LABEL_89;
        }
        v10 = (unint64_t)v4;
        v78 = *(_QWORD *)(a1 + 40);
        v79 = v98;
        v80 = v78 + 20 * (int)v98;
        v82 = *(unsigned __int16 *)(v80 + 8);
        v81 = (__int16 *)(v80 + 8);
        *v81 = v82 + 1;
        v83 = (int *)(v81 + 4);
        if (!v82)
        {
          *v83 = v59;
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v59) = -v59 | ((unint64_t)-v59 << 32);
          if (v59 >= 0x100)
          {
            sub_19BFFE89C(*(_QWORD *)(a1 + 40), v98, (_DWORD *)(a1 + 48), v91);
            v79 = v98;
          }
          goto LABEL_84;
        }
        v84 = *v83;
        v85 = *(_QWORD *)(a1 + 8);
        v86 = *(unsigned int *)(v85 + 8 * v84 + 4);
        *(_QWORD *)(v85 + 8 * v59) = -(int)v84 | (unint64_t)(v86 << 32);
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * -(int)v86) = -v59;
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v84 + 4) = -v59;
        if (*v81 == 2)
        {
          v79 = v98;
          if (v59 < 0x100)
            goto LABEL_83;
        }
        else
        {
          v79 = v98;
          if (v59 < 0x100 || *(_DWORD *)(v78 + 20 * (int)v98 + 12) != 1)
            goto LABEL_83;
        }
        sub_19BFFE89C(*(_QWORD *)(a1 + 40), v79, v91, (int *)(a1 + 56));
        v79 = v98;
LABEL_83:
        *(_DWORD *)(v78 + 20 * v79 + 12) = 0;
LABEL_84:
        v87 = v78 + 20 * v79;
        v89 = *(__int16 *)(v87 + 10);
        v88 = (_WORD *)(v87 + 10);
        v90 = *(__int16 *)(a1 + 2 * *v81 + 80);
        if (v89 < v90)
          *v88 = v90;
        *(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v62) = 0;
        v4 = (_QWORD *)v10;
        LODWORD(v10) = v8 ^ v9;
        v54 = v94;
        goto LABEL_87;
      }
LABEL_89:
      if (v17)
        return v54 ^ v9;
      else
        return v10;
    }
  }
  return result;
}

uint64_t sub_19BFFE6A0(uint64_t a1, int a2, int a3, int a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  __int16 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int *v24;
  int v25;

  if (a2 < 0)
    v8 = sub_19BFFE860(a1);
  else
    v8 = a3 ^ a2;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = v8;
  v11 = (int *)(v9 + 8 * v8);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = (uint64_t)v8 >> 8;
  v14 = v12 + 20 * (v8 >> 8);
  v16 = *(_WORD *)(v14 + 8);
  v15 = (_WORD *)(v14 + 8);
  *v15 = v16 - 1;
  if (v16 == 1)
  {
    if (v10 < 0x100)
      goto LABEL_14;
    v23 = (_DWORD *)(a1 + 52);
    v24 = (int *)(a1 + 48);
    goto LABEL_13;
  }
  v17 = v9 + 8 * v10;
  v18 = *v11;
  *(_DWORD *)(v9 + 8 * -*v11 + 4) = *(_DWORD *)(v17 + 4);
  v19 = *(int *)(v17 + 4);
  *(_DWORD *)(v9 - 8 * v19) = v18;
  v20 = v12 + 20 * (int)v13;
  v22 = *(_DWORD *)(v20 + 16);
  v21 = (_DWORD *)(v20 + 16);
  if ((_DWORD)v10 == v22)
    *v21 = -(int)v19;
  if (v10 >= 0x100 && *v15 == 1 && *(_DWORD *)(v12 + 20 * (int)v13 + 12) != 1)
  {
    v23 = (_DWORD *)(a1 + 56);
    v24 = (int *)(a1 + 52);
    v12 = *(_QWORD *)(a1 + 40);
LABEL_13:
    sub_19BFFE89C(v12, v13, v23, v24);
  }
LABEL_14:
  if (a3)
    v25 = -1;
  else
    v25 = 0;
  *v11 = v25;
  *(_DWORD *)(v9 + 8 * v10 + 4) = a4;
  if (a2 < 0)
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * a4) = v10 ^ a3;
  return v10;
}

_BYTE *sub_19BFFE7E4(uint64_t a1, _BYTE *a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  if (a4)
  {
    --a2;
  }
  else
  {
    *a2 = 0;
    v5 = *(_QWORD *)(a1 + 32);
    v6 = 2 * a3;
    a4 = *(unsigned __int8 *)(v5 + v6);
    if (!*(_BYTE *)(v5 + v6))
      goto LABEL_9;
  }
  if (a4 < a5)
  {
    do
    {
      *++a2 = a4;
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 2 * (a4 ^ a3);
      a4 = *(unsigned __int8 *)(v7 + v8);
      if (*(_BYTE *)(v7 + v8))
        v9 = a4 < a5;
      else
        v9 = 0;
    }
    while (v9);
  }
LABEL_9:
  if (a5 != -1)
    *++a2 = a5;
  if (a4)
  {
    do
    {
      *++a2 = a4;
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 2 * (a4 ^ a3);
      a4 = *(unsigned __int8 *)(v10 + v11);
    }
    while (*(_BYTE *)(v10 + v11));
  }
  return a2;
}

uint64_t sub_19BFFE860(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 52);
  if (v1)
    return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 20 * v1 + 16);
  v1 = *(_DWORD *)(a1 + 56);
  if (v1)
    return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 20 * v1 + 16);
  else
    return sub_19BFFE948(a1) << 8;
}

uint64_t sub_19BFFE89C(uint64_t result, int a2, _DWORD *a3, int *a4)
{
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  int *v12;

  v4 = a2;
  v5 = result + 20 * a2;
  v8 = *(_DWORD *)(v5 + 4);
  v6 = (int *)(v5 + 4);
  v7 = v8;
  if (v8 == a2)
  {
    v9 = 0;
  }
  else
  {
    v10 = *(_DWORD *)(result + 20 * a2);
    *(_DWORD *)(result + 20 * v10 + 4) = v7;
    v9 = *v6;
    *(_DWORD *)(result + 20 * *v6) = v10;
    if (*a3 != a2)
      goto LABEL_5;
  }
  *a3 = v9;
LABEL_5:
  if (*a4)
  {
    v11 = (int *)(result + 20 * a2);
LABEL_8:
    v12 = (int *)(result + 20 * *a4);
    *v11 = *v12;
    *v6 = *a4;
    v4 = *v12;
    v11 = v12;
    goto LABEL_9;
  }
  v11 = (int *)(result + 20 * a2);
  if (!*((_WORD *)v11 + 4))
    goto LABEL_8;
LABEL_9:
  *(_DWORD *)(result + 20 * v4 + 4) = a2;
  *v11 = a2;
  *a4 = a2;
  return result;
}

uint64_t sub_19BFFE948(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int v16;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == *(_DWORD *)(a1 + 60))
  {
    *(_DWORD *)(a1 + 60) = 2 * v2;
    sub_19BFFC628((void **)(a1 + 8), 2 * v2, 2 * v2);
    sub_19BFFC8B8((void **)(a1 + 32), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 64));
    sub_19BFFC9BC((void **)(a1 + 40), *(int *)(a1 + 60) >> 8, *(int *)(a1 + 64) >> 8);
    v2 = *(_DWORD *)(a1 + 64);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 20 * (v2 >> 8) + 16) = v2;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v2) = (-255 - v2) | ((unint64_t)~v2 << 32);
  v3 = *(int *)(a1 + 64);
  v4 = v3 + 1;
  v5 = 0xFFFFFFFE00000000 - (v3 << 32);
  v6 = -(int)v3;
  do
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = v5 + v6;
    v7 = *(int *)(a1 + 64);
    v8 = v4++ - 1;
    v5 -= 0x100000000;
    --v6;
  }
  while (v8 < v7 + 253);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((int)v7 + 255)) = (-254 - v7) | ((unint64_t)-(int)v7 << 32);
  v9 = *(_DWORD *)(a1 + 64);
  v10 = v9 >> 8;
  v11 = *(_DWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = (uint64_t)v9 >> 8;
  v14 = (int *)(v12 + 20 * v10);
  if (v11)
  {
    v15 = (int *)(v12 + 20 * v11);
    *v14 = *v15;
    *(_DWORD *)(v12 + 20 * (int)v13 + 4) = *(_DWORD *)(a1 + 56);
    LODWORD(v13) = *v15;
    v14 = v15;
  }
  *(_DWORD *)(v12 + 20 * (int)v13 + 4) = v10;
  *v14 = v10;
  *(_DWORD *)(a1 + 56) = v10;
  v16 = *(_DWORD *)(a1 + 64) + 256;
  *(_DWORD *)(a1 + 64) = v16;
  return ((v16 >> 8) - 1);
}

uint64_t sub_19BFFEAA0(_QWORD *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  size_t v15;

  v3 = a1[4];
  if (!v3)
    __assert_rtn("begin", "cedarpp.h", 690, "_ninfo");
  v7 = *a2;
  v8 = HIDWORD(*a2);
  if (v8)
  {
    v9 = -(int)v8;
    if (-(int)v8 < 0)
      goto LABEL_16;
  }
  else
  {
    v9 = *(_DWORD *)(a1[1] + 8 * v7);
    if (v9 < 0)
      goto LABEL_16;
  }
  v10 = *(unsigned __int8 *)(v3 + 2 * v7 + 1);
  if (v7)
  {
    if (!*(_BYTE *)(v3 + 2 * v7 + 1))
    {
      v11 = a1[1];
LABEL_14:
      v13 = (unsigned int *)(v11 + 8 * (v9 ^ v10));
      return *v13;
    }
    goto LABEL_10;
  }
  v10 = *(unsigned __int8 *)(v3 + 2 * (v9 ^ v10));
  if (v10)
  {
LABEL_10:
    v11 = a1[1];
    do
    {
      v12 = v9 ^ v10;
      *a2 = v12;
      v9 = *(_DWORD *)(v11 + 8 * v12);
      v10 = *(unsigned __int8 *)(v3 + 2 * v12 + 1);
      ++*a3;
    }
    while (v10 && (v9 & 0x80000000) == 0);
    if ((v9 & 0x80000000) == 0)
      goto LABEL_14;
    LODWORD(v7) = *(_DWORD *)a2;
LABEL_16:
    v14 = -v9;
    v15 = strlen((const char *)(a1[2] + v14));
    *a2 = v7 | ((unint64_t)(v15 - v9) << 32);
    *a3 += v15;
    v13 = (unsigned int *)(a1[2] + v14 + v15 + 1);
    return *v13;
  }
  return 4294967294;
}

uint64_t sub_19BFFEBD4(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v18;
  unsigned int *v19;

  v5 = *a3;
  v6 = HIDWORD(*a3);
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(v7 + 8 * v5);
    if ((v8 & 0x80000000) == 0)
    {
      while (1)
      {
        v9 = *a4;
        if (*a4 == a5)
          break;
        v10 = v8 ^ *(unsigned __int8 *)(a2 + v9);
        if (*(_DWORD *)(v7 + 8 * v10 + 4) != (_DWORD)v5)
          return 4294967294;
        *a4 = v9 + 1;
        *a3 = v10;
        v8 = *(_DWORD *)(v7 + 8 * v10);
        LODWORD(v5) = v10;
        if ((v8 & 0x80000000) != 0)
          goto LABEL_6;
      }
      if (*(_DWORD *)(v7 + 8 * v8 + 4) == (_DWORD)v5)
      {
        v19 = (unsigned int *)(v7 + 8 * v8);
        return *v19;
      }
      return 0xFFFFFFFFLL;
    }
LABEL_6:
    v6 = -v8;
  }
  v11 = *a4;
  v12 = *(_QWORD *)(a1 + 16) + v6;
  if (*a4 >= a5)
  {
    v16 = *a4;
  }
  else
  {
    v13 = (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v6);
    v14 = *a4;
    while (1)
    {
      v15 = *v13++;
      if (*(unsigned __int8 *)(a2 + v14) != v15)
        break;
      *a4 = ++v14;
      if (a5 == v14)
      {
        v14 = a5;
        break;
      }
    }
    if (v14 == v11)
    {
      v16 = v11;
    }
    else
    {
      *((_DWORD *)a3 + 1) = v6 - v11 + v14;
      v16 = *a4;
    }
    if (v16 < a5)
      return 4294967294;
  }
  v18 = v12 - v11;
  if (*(_BYTE *)(v18 + v16))
    return 0xFFFFFFFFLL;
  v19 = (unsigned int *)(a5 + v18 + 1);
  return *v19;
}

void sub_19BFFECF0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19BFFED04(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D19E00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19BFFED44(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D19E00;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19BFFED6C(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 + 8);
  v9 = a1[3];
  v10 = v9 + v8;
  v11 = a1[1];
  v12 = *(char *)(v11 + 23);
  if (v12 < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    v11 = a1[1];
    v9 = a1[3];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
  v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  v15 = *(_QWORD *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    v11 = a1[1];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
LABEL_9:
  if ((v12 & 0x80) != 0)
    v11 = *(_QWORD *)v11;
  return sub_19BFB8D60(*(_QWORD *)(a1[4] + 24), *a2, v11, v10, a4);
}

uint64_t sub_19BFFEE40(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19E60))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFEE7C()
{
  return &unk_1E3D19E60;
}

void sub_19BFFEE88(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6;
  int v7;

  sub_19BFFC590(a1, 0);
  if (a3)
    v6 = 8 * a3 - *a2;
  else
    v6 = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 8) = (char *)a2 + *a2;
  if ((v6 & 7) != 0)
    v7 = (v6 >> 3) + 1;
  else
    v7 = v6 >> 3;
  *(_DWORD *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 76) = 1;
}

uint64_t sub_19BFFEEFC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];
  _QWORD v5[10];
  char v6;
  uint64_t v7;

  sub_19BFA0144((uint64_t)v4);
  std::ostream::write();
  std::ostream::write();
  sub_19BFAAA88(a1, (uint64_t)v5);
  v4[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v4[2] = v2;
  v5[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD0C7C](&v7);
}

void sub_19BFFEFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFA0270((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19BFFEFE8()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFFEFFC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D19D80;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFFF030(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D19D80;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFFF04C(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19BFFF068(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19DE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFF0A4()
{
  return &unk_1E3D19DE0;
}

void sub_19BFFF0B4()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19BFFF0C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D19D00;
  result[1] = v3;
  return result;
}

uint64_t sub_19BFFF0FC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D19D00;
  a2[1] = v2;
  return result;
}

uint64_t sub_19BFFF118(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19BFFF134(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19D60))
    return a1 + 8;
  else
    return 0;
}

void *sub_19BFFF170()
{
  return &unk_1E3D19D60;
}

uint64_t sub_19BFFF17C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D19B20;
  sub_19BFB1F54(*(char **)(a1 + 624));
  sub_19BFFC558((_QWORD *)(a1 + 8));
  return a1;
}

void sub_19BFFF1B8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D19B20;
  sub_19BFB1F54(*(char **)(a1 + 624));
  sub_19BFFC558((_QWORD *)(a1 + 8));
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19BFFF204(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v38;
  void *v39;
  void *__p;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (a2)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      v13 = *(void **)(a3 + 8 * i);
      v14 = *(_QWORD *)(a4 + 8 * i);
      v38 = v14;
      v39 = v13;
      v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v16 = (_QWORD *)sub_19BFFA830(&v43, &v39, &v38);
      }
      else
      {
        sub_19BFA4428(v44, v13, v14);
        v16 = v15 + 3;
      }
      v44 = v16;
      if (a5)
      {
        v17 = *(_QWORD *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          v19 = v10;
          v20 = a5;
          v21 = v8;
          v22 = a3;
          v23 = a4;
          v24 = (v11 - v9) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_19BF8EB40();
          v26 = v19 - (_QWORD)v9;
          v27 = (uint64_t)(v19 - (_QWORD)v9) >> 1;
          if (v27 > v25)
            v25 = v27;
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v25;
          if (v28)
            v28 = (unint64_t)sub_19BFB3588(v28);
          else
            v29 = 0;
          v30 = (_DWORD *)(v28 + 4 * v24);
          *v30 = v17;
          v18 = v30 + 1;
          while (v11 != v9)
          {
            v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v41 = v18;
          v32 = v28 + 4 * v29;
          v42 = v32;
          if (v9)
            operator delete(v9);
          v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          v8 = v21;
          a5 = v20;
          v10 = v32;
        }
        else
        {
          *(_DWORD *)v11 = v17;
          v18 = v11 + 4;
        }
        v41 = v18;
        v11 = (char *)v18;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19BF8EA40((void ***)&__p);
  return v35;
}

void sub_19BFFF3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFFF434(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19BFFF474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D19E80;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19BFFF510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19BFFF54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D19F00;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19BFFF5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFFF624@<X0>(_QWORD *a1@<X8>)
{
  return sub_19BFFEEFC(a1);
}

uint64_t sub_19BFFF630(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  void *__p;
  void *v18;
  unint64_t v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v19 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v18 = v7;
      ++v6;
      v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  v14 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19BFFF790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19BFFF7B4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  std::string::size_type v12;
  double v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t **v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  const std::string *v31;
  std::string::size_type v32;
  const std::string *v33;
  double v34;
  double v35;
  std::string::size_type size;
  double v37;
  uint64_t **v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  std::string::size_type v46;
  __int128 *v47;
  _OWORD *v48;
  __int128 v49;
  std::string::size_type v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  std::string::size_type v56;
  int v57;
  char *v58;
  char **v59;
  BOOL v60;
  uint64_t v61;
  std::string __str;
  std::string v65;
  std::string *v66;
  char *v67;
  uint64_t v68;
  char **v69;
  char *v70[2];
  std::string v71;
  char v72[9];

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  v5 = a1;
  v70[0] = 0;
  v70[1] = 0;
  v69 = v70;
  if (v4 == v3)
  {
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
  }
  else
  {
    v8 = 0;
    v9 = a1 + 616;
    do
    {
      v10 = 0;
      v11 = v3 + 24 * v8;
      while (1)
      {
        v12 = *(char *)(v11 + 23) < 0 ? *(_QWORD *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
        if (v10 > v12)
          break;
        v13 = *(double *)sub_19BFFBFC0(v9, (_QWORD *)v11);
        std::string::basic_string(&v71, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v66);
        v66 = &v71;
        v14 = (double *)sub_19BFF8F10((uint64_t **)&v69, &v71, (_OWORD **)&v66);
        v14[7] = v13 + v14[7];
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        ++v10;
      }
      if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF)
      {
        v61 = 0;
        goto LABEL_96;
      }
      ++v8;
      v3 = *a2;
      v15 = a2[1];
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3));
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
    if (v15 != v3)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = v3 + v16;
        v19 = *(_DWORD *)(*a3 + 4 * v17);
        v20 = *(double *)sub_19BFFBFC0((uint64_t)&v69, (_QWORD *)(v3 + v16));
        v21 = *(unsigned __int8 *)(v18 + 23);
        if ((v21 & 0x80u) != 0)
          v21 = *(_QWORD *)(v18 + 8);
        std::string::basic_string(&v71, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v65);
        v22 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        v23 = sub_19C00050C((uint64_t **)&v66, (_QWORD *)v18, v18);
        v24 = (int)(sqrt(v20 / v22) * 255.0);
        if (v24 >= 255)
          v25 = 255;
        else
          v25 = v24;
        if (v24)
          v26 = 1;
        else
          v26 = v20 / v22 <= 0.0;
        v27 = v25 << 23;
        if (!v26)
          v27 = 0x800000;
        *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
        ++v17;
        v3 = *a2;
        v28 = a2[1];
        v16 += 24;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
      if (v28 != v3)
      {
        v29 = 0;
        do
        {
          v30 = 0;
          v31 = (const std::string *)(v3 + 24 * v29);
          while (1)
          {
            v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                ? v31->__r_.__value_.__l.__size_
                : HIBYTE(v31->__r_.__value_.__r.__words[2]);
            if (v30 >= v32 - 1)
              break;
            std::string::basic_string(&v65, v31, 0, v30, (std::allocator<char> *)&v71);
            v33 = v31;
            if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0)
              v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
            sub_19BFFC118((uint64_t)&__str, (const void **)&v65.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
            if (&v67 == sub_19BFAA740((uint64_t)&v66, &__str))
            {
              v34 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v65);
              if (v34 > *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str))
              {
                v35 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str);
                size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = __str.__r_.__value_.__l.__size_;
                std::string::basic_string(&v71, &__str, 0, size - 1, (std::allocator<char> *)v72);
                v37 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v71.__r_.__value_.__l.__data_);
                v38 = sub_19C00050C((uint64_t **)&v66, &__str, (uint64_t)&__str);
                v39 = (int)(sqrt(v35 / v37) * 255.0);
                if (v39 >= 255)
                  v40 = 255;
                else
                  v40 = v39;
                if (v39)
                  v41 = 1;
                else
                  v41 = v35 / v37 <= 0.0;
                v42 = (v40 << 23) | 0x7FFFFF;
                if (!v41)
                  v42 = 0xFFFFFF;
                *((_DWORD *)v38 + 14) = v42;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            ++v30;
          }
          ++v29;
          v3 = *a2;
        }
        while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    v5 = a1;
  }
  memset(&v71, 0, sizeof(v71));
  memset(&v65, 0, sizeof(v65));
  v43 = (uint64_t *)v66;
  if (v66 != (std::string *)&v67)
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = (__int128 *)(v43 + 4);
      v48 = (_OWORD *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_ >= v71.__r_.__value_.__r.__words[2])
      {
        v50 = sub_19BFFC198((uint64_t *)&v71, v47);
      }
      else
      {
        if (*((char *)v43 + 55) < 0)
        {
          sub_19BF8CD70((_BYTE *)v71.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
        }
        else
        {
          v49 = *v47;
          *(_QWORD *)(v71.__r_.__value_.__l.__size_ + 16) = v43[6];
          *v48 = v49;
        }
        v50 = (std::string::size_type)v48 + 24;
      }
      v71.__r_.__value_.__l.__size_ = v50;
      if ((unint64_t)v44 >= v46)
      {
        v51 = (v44 - v45) >> 2;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v46 - (_QWORD)v45) >> 1 > v52)
          v52 = (uint64_t)(v46 - (_QWORD)v45) >> 1;
        if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v53 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
          v53 = (unint64_t)sub_19BFB3588(v53);
        else
          v54 = 0;
        v55 = (char *)(v53 + 4 * v51);
        *(_DWORD *)v55 = *((_DWORD *)v43 + 14);
        v56 = (std::string::size_type)(v55 + 4);
        while (v44 != v45)
        {
          v57 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v55 - 1) = v57;
          v55 -= 4;
        }
        v46 = v53 + 4 * v54;
        v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v65.__r_.__value_.__l.__size_ = v56;
        v65.__r_.__value_.__r.__words[2] = v46;
        if (v45)
          operator delete(v45);
        v45 = v55;
        v44 = (char *)v56;
      }
      else
      {
        *(_DWORD *)v44 = *((_DWORD *)v43 + 14);
        v44 += 4;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      v58 = (char *)v43[1];
      if (v58)
      {
        do
        {
          v59 = (char **)v58;
          v58 = *(char **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (char **)v43[2];
          v60 = *v59 == (char *)v43;
          v43 = (uint64_t *)v59;
        }
        while (!v60);
      }
      v43 = (uint64_t *)v59;
    }
    while (v59 != &v67);
  }
  v61 = sub_19BFFD0CC(v5 + 8, (uint64_t *)&v71, &v65);
  if (v65.__r_.__value_.__r.__words[0])
    operator delete(v65.__r_.__value_.__l.__data_);
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  sub_19BF8EA40((void ***)&v65);
  sub_19BFB1F54(v67);
LABEL_96:
  sub_19BFB1F54(v70[0]);
  return v61;
}

void sub_19BFFFD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p)
    operator delete(__p);
  __p = &a28;
  sub_19BF8EA40(&__p);
  sub_19BFB1F54(a23);
  sub_19BFB1F54(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19BFFFE78(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t v3;

  v3 = a1 + 16;
  sub_19BFFEE88(a1 + 16, a2, a3 >> 3);
  sub_19BFFDE24(v3);
  return 1;
}

uint64_t sub_19BFFFEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  uint64_t v10;

  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, &v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 128))(a1, &v10, a4);
}

_QWORD *sub_19BFFFF2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D19F80;
  v11[1] = a4;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19BFFD264(a1 + 8, a2, a3, (uint64_t)v13);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C000020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C000090(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13[0] = &off_1E3D19F80;
  v13[1] = a4;
  v14 = v13;
  sub_19BFFBC40((uint64_t)v15, v13);
  sub_19BFFD354(a1 + 8, a2, a3, (uint64_t)v15, a5);
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_19C00018C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0001FC()
{
  return 0;
}

BOOL sub_19C000204(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

uint64_t sub_19C000214(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v6 = 0;
  v7 = v4;
  if (sub_19BFFEBD4(a1 + 16, a3, &v7, &v6, a4) == -2)
    return -1;
  else
    return v7;
}

uint64_t sub_19C00025C(uint64_t a1, unint64_t *a2, int *a3)
{
  int v4;
  uint64_t result;
  int v6;

  v6 = 0;
  v4 = sub_19BFFD5C0(a1 + 8, a2, &v6);
  result = 0;
  if (v4)
  {
    if ((v6 & 0x7FFFFF) == 0x7FFFFF)
    {
      return 0;
    }
    else
    {
      *a3 = v6 & 0x7FFFFF;
      return 1;
    }
  }
  return result;
}

_QWORD *sub_19C0002C0(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D19F80;
  v11[1] = a3;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19BFFD634((_QWORD *)(a1 + 8), a2, (uint64_t)v13, a4);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C0003B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C000424(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_19BFFD8B4((_QWORD *)(a1 + 8), a2, a3);
}

void sub_19C000430()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C000444(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D19F80;
  result[1] = v3;
  return result;
}

uint64_t sub_19C000478(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D19F80;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C000494(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4;

  v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF)
    return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(result + 8) + 24), v4, *a3, a3[1], a4);
  return result;
}

uint64_t sub_19C0004C4(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19FE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C000500()
{
  return &unk_1E3D19FE0;
}

uint64_t **sub_19C00050C(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  char *v10;
  _BYTE *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if ((sub_19BFAAA0C(a2, v5 + 4) & 0x80) == 0)
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if ((sub_19BFAAA0C(v8, a2) & 0x80) == 0)
        return v6;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v10 = (char *)operator new(0x40uLL);
    v11 = v10 + 32;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_19BF8CD70(v11, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)a3;
      *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
    }
    *((_DWORD *)v10 + 14) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v6;
    *v9 = (uint64_t *)v10;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v10;
    if (v12)
    {
      *a1 = v12;
      v13 = *v9;
    }
    sub_19BFA96D8(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

void sub_19C000614(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C00062C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C000640(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D19F00;
  result[1] = v3;
  return result;
}

uint64_t sub_19C000674(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D19F00;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C000690(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C0006AC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19F60))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0006E8()
{
  return &unk_1E3D19F60;
}

void sub_19C0006F8()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C00070C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D19E80;
  result[1] = v3;
  return result;
}

uint64_t sub_19C000740(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D19E80;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C00075C(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C000778(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19EE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0007B4()
{
  return &unk_1E3D19EE0;
}

uint64_t sub_19C0007C0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_1E3D16530;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 1;
  sub_19BFA92F4((uint64_t *)(a1 + 56), a2);
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  sub_19C0024BC(a1 + 88);
  return a1;
}

void sub_19C000828(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C000844(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D16530;
  sub_19BFA98BC(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_19C00088C(uint64_t a1)
{
  sub_19C000844(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C0008B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v38;
  void *v39;
  void *__p;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (a2)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      v13 = *(void **)(a3 + 8 * i);
      v14 = *(_QWORD *)(a4 + 8 * i);
      v38 = v14;
      v39 = v13;
      v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v16 = (_QWORD *)sub_19BFFA830(&v43, &v39, &v38);
      }
      else
      {
        sub_19BFA4428(v44, v13, v14);
        v16 = v15 + 3;
      }
      v44 = v16;
      if (a5)
      {
        v17 = *(_QWORD *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          v19 = v10;
          v20 = a5;
          v21 = v8;
          v22 = a3;
          v23 = a4;
          v24 = (v11 - v9) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_19BF8EB40();
          v26 = v19 - (_QWORD)v9;
          v27 = (uint64_t)(v19 - (_QWORD)v9) >> 1;
          if (v27 > v25)
            v25 = v27;
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v25;
          if (v28)
            v28 = (unint64_t)sub_19BFB3588(v28);
          else
            v29 = 0;
          v30 = (_DWORD *)(v28 + 4 * v24);
          *v30 = v17;
          v18 = v30 + 1;
          while (v11 != v9)
          {
            v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v41 = v18;
          v32 = v28 + 4 * v29;
          v42 = v32;
          if (v9)
            operator delete(v9);
          v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          v8 = v21;
          a5 = v20;
          v10 = v32;
        }
        else
        {
          *(_DWORD *)v11 = v17;
          v18 = v11 + 4;
        }
        v41 = v18;
        v11 = (char *)v18;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19BF8EA40((void ***)&__p);
  return v35;
}

void sub_19C000A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C000AE0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19C000B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D16608;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C000BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C000BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D16688;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C000C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C000CD0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  size_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (_QWORD *)a2;
  v3 = result[5];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  v4 = (const void *)result[4];
  if (v3 >= 0x17)
  {
    v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v5 = v3 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = v7;
    v2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v3;
    if (!v3)
      goto LABEL_9;
  }
  result = memmove(v2, v4, v3);
LABEL_9:
  *((_BYTE *)v2 + v3) = 0;
  return result;
}

uint64_t sub_19C000D68(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v15;
  void *__p;
  void *v19;
  unint64_t v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v20 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v19 = v7;
      v5 = (char *)v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v6++);
  }
  v15 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_19C000ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C000EF0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD v30[5];
  void **v31;
  void *v32[2];
  _QWORD v33[4];
  _BYTE v34[13];

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "PatriciaTrie.h", 140, "keys.size() == values.size()");
  v27 = 0;
  v28 = 0;
  v29 = 0;
  if (v4 != v3)
  {
    v7 = 0;
    do
    {
      memset(v33, 0, sizeof(v33));
      *(_OWORD *)v32 = 0u;
      LODWORD(v31) = *(_DWORD *)(*a3 + 4 * v7);
      HIDWORD(v31) = v7;
      v8 = (char *)(v3 + 24 * v7);
      if (v8[23] < 0)
      {
        v8 = *(char **)v8;
        v9 = *(_QWORD *)(v3 + 24 * v7 + 8);
      }
      else
      {
        v9 = v8[23];
      }
      sub_19BFA747C(v32, v8, &v8[v9], v9);
      v10 = v33[1];
      v11 = v33[2];
      if (v9 <= v33[2] - v33[1])
      {
        if (v9 < v33[2] - v33[1])
        {
          v11 = v33[1] + v9;
          v33[2] = v33[1] + v9;
        }
      }
      else
      {
        sub_19BFC41B8(&v33[1], v9 - (v33[2] - v33[1]));
        v10 = v33[1];
        v11 = v33[2];
      }
      if (v10 != v11)
      {
        v12 = 0;
        do
        {
          *(_BYTE *)(v10 + v12) = v12;
          ++v12;
        }
        while (v10 + v12 != v11);
      }
      *(_QWORD *)v34 = 0x3FF0000000000000;
      *(_DWORD *)&v34[8] = 1;
      v34[12] = 0;
      v13 = v28;
      if ((unint64_t)v28 >= v29)
      {
        v15 = 0x8E38E38E38E38E39 * (v28 - v27);
        v16 = v15 + 1;
        if (v15 + 1 > 0x38E38E38E38E38ELL)
          sub_19BF8EB40();
        if (0x1C71C71C71C71C72 * ((uint64_t)(v29 - (_QWORD)v27) >> 3) > v16)
          v16 = 0x1C71C71C71C71C72 * ((uint64_t)(v29 - (_QWORD)v27) >> 3);
        if (0x8E38E38E38E38E39 * ((uint64_t)(v29 - (_QWORD)v27) >> 3) >= 0x1C71C71C71C71C7)
          v17 = 0x38E38E38E38E38ELL;
        else
          v17 = v16;
        v30[4] = &v29;
        if (v17)
          v18 = (char *)sub_19BFA8FB0((uint64_t)&v29, v17);
        else
          v18 = 0;
        v19 = &v18[72 * v15];
        v30[0] = v18;
        v30[1] = v19;
        v30[3] = &v18[72 * v17];
        *(_QWORD *)v19 = v31;
        *((_QWORD *)v19 + 1) = 0;
        *((_QWORD *)v19 + 2) = 0;
        *((_QWORD *)v19 + 3) = 0;
        *(_OWORD *)(v19 + 8) = *(_OWORD *)v32;
        *((_QWORD *)v19 + 3) = v33[0];
        v32[0] = 0;
        v32[1] = 0;
        v33[0] = 0;
        *((_QWORD *)v19 + 4) = 0;
        *((_QWORD *)v19 + 5) = 0;
        *((_QWORD *)v19 + 6) = 0;
        *((_OWORD *)v19 + 2) = *(_OWORD *)&v33[1];
        *((_QWORD *)v19 + 6) = v33[3];
        memset(&v33[1], 0, 24);
        v20 = *(_QWORD *)v34;
        *(_QWORD *)(v19 + 61) = *(_QWORD *)&v34[5];
        *((_QWORD *)v19 + 7) = v20;
        v30[2] = v19 + 72;
        sub_19C0021D4((uint64_t *)&v27, v30);
        v21 = v28;
        sub_19C002294((uint64_t)v30);
        v28 = v21;
        if (v33[1])
        {
          v33[2] = v33[1];
          operator delete((void *)v33[1]);
        }
      }
      else
      {
        *v28 = v31;
        v13[1] = 0;
        v13[3] = 0;
        v13[4] = 0;
        v13[2] = 0;
        *(_OWORD *)(v13 + 1) = *(_OWORD *)v32;
        v13[3] = v33[0];
        v32[0] = 0;
        v32[1] = 0;
        v33[0] = 0;
        v13[5] = 0;
        v13[6] = 0;
        *((_OWORD *)v13 + 2) = *(_OWORD *)&v33[1];
        v13[6] = v33[3];
        memset(&v33[1], 0, 24);
        v14 = *(_QWORD *)v34;
        *(_QWORD *)((char *)v13 + 61) = *(_QWORD *)&v34[5];
        v13[7] = v14;
        v28 = v13 + 9;
      }
      if (v32[0])
      {
        v32[1] = v32[0];
        operator delete(v32[0]);
      }
      ++v7;
      v3 = *a2;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  sub_19BFA7B80((uint64_t)&v31, &v27, a1 + 56, *(_DWORD *)(a1 + 48));
  v22 = a1 + 8;
  if ((sub_19BFA8A4C((uint64_t)&v31, a1 + 8) & 1) != 0)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      v22 = *(_QWORD *)(a1 + 8);
      v23 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v23 = *(unsigned __int8 *)(a1 + 31);
    }
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v22, v23);
  }
  else
  {
    v24 = 0;
  }
  sub_19BFA7BE4((uint64_t *)&v31);
  v31 = (void **)&v27;
  sub_19BFA9270(&v31);
  return v24;
}

void sub_19C001298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  sub_19BFA9270(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0012E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  result = sub_19BFA8BBC(a2, a3, 68, (_DWORD *)(a1 + 84));
  if ((_DWORD)result)
  {
    v8 = 0;
    result = sub_19BFA8BBC(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 40, &v8);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 40);
      v7 = v8;
      *(_DWORD *)(a1 + 6504) = v8;
      *(_QWORD *)(a1 + 6512) = v5;
      *(_QWORD *)(a1 + 6520) = v6;
      *(_DWORD *)(a1 + 12944) = v7;
      *(_QWORD *)(a1 + 12952) = v5;
      *(_QWORD *)(a1 + 12960) = v6;
      *(_BYTE *)(a1 + 80) = 1;
    }
  }
  return result;
}

uint64_t sub_19C001364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[4];
  _QWORD v10[4];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 104))(v9);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(v10, a1, v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10, a4);
}

_QWORD *sub_19C0013E4(_QWORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  unsigned __int8 v13;
  int v14;
  _QWORD v15[2];
  int v16;
  unsigned __int8 v17;
  char v18;

  if (a3)
  {
    v7 = result;
    v18 = 0;
    (*(void (**)(_QWORD *__return_ptr))(*result + 104))(v15);
    v8 = 0;
    v14 = 0;
    while (1)
    {
      result = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t))(*v7 + 120))(v11, v7, v15, a2 + v8, 1);
      LODWORD(v15[0]) = v11[0];
      v15[1] = v11[1];
      v16 = v12;
      v17 = v13;
      if (v13 == 255)
        break;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, int *))(*v7 + 128))(v7, v15, &v14);
      if ((_DWORD)result)
      {
        v9 = v8 + 1;
        if (a3 >= v8 + 1)
          v10 = v8 + 1;
        else
          v10 = a3;
        result = (_QWORD *)sub_19BFB8D60(*(_QWORD *)(a4 + 24), v14, a2, v10, (uint64_t)&v18);
        if (v18)
          return result;
        ++v8;
        if (v9 >= a3)
          return result;
      }
      else if (++v8 >= a3)
      {
        return result;
      }
    }
  }
  return result;
}

void sub_19C0014EC(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *__p[2];
  unint64_t v23;
  _QWORD v24[2];
  int v25;
  char v26;
  _QWORD v27[2];
  int v28;
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 104))(v24);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *, const void *, size_t))(*(_QWORD *)a1 + 120))(v27, a1, v24, a2, a3);
  LODWORD(v24[0]) = v27[0];
  v24[1] = v27[1];
  v25 = v28;
  v26 = (char)v29;
  if (v29 != 255)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    if (a3 >= 0x17)
    {
      v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v11 = a3 | 7;
      v12 = v11 + 1;
      v10 = operator new(v11 + 1);
      __p[1] = (void *)a3;
      v23 = v12 | 0x8000000000000000;
      __p[0] = v10;
    }
    else
    {
      HIBYTE(v23) = a3;
      v10 = __p;
      if (!a3)
      {
LABEL_10:
        *((_BYTE *)v10 + a3) = 0;
        v13 = operator new(0x28uLL);
        *v13 = &off_1E3D16708;
        v13[1] = __p;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        v29 = v13;
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v24, v27, a5);
        v20 = v29;
        if (v29 == v27)
        {
          v21 = 4;
          v20 = v27;
        }
        else
        {
          if (!v29)
            goto LABEL_15;
          v21 = 5;
        }
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v20 + 8 * v21))(v20, v14, v15, v16, v17, v18, v19);
LABEL_15:
        if (SHIBYTE(v23) < 0)
          operator delete(__p[0]);
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19C0016B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a22;
  if (a22 == v22)
  {
    v25 = 4;
    v24 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C001708(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

BOOL sub_19C00171C(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a1 + 80))
    v2 = *(unsigned __int8 *)(a2 + 24) == 255;
  else
    v2 = 1;
  return !v2;
}

uint64_t sub_19C001738@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v7 = *(_DWORD *)a2;
  *(_DWORD *)a5 = *(_DWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a5 + 8) = v8;
  v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a5 + 16) = v9;
  v10 = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a5 + 24) = v10;
  if (a4)
  {
    v11 = a4;
    v13 = result;
    do
    {
      if (v10 == -1)
        goto LABEL_17;
      v14 = *a3;
      if (v10 + 1 <= (HIBYTE(v7) & 3))
      {
        result = sub_19C001FE8(a5);
        if ((_DWORD)result != v14)
          goto LABEL_16;
        v7 = *(_DWORD *)a5;
        v8 = *(_QWORD *)(a5 + 8);
        v9 = *(_DWORD *)(a5 + 16);
        v10 = *(_BYTE *)(a5 + 24) + 1;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 112))(v13, a5);
        if (!(_DWORD)result)
          goto LABEL_16;
        v15 = *(_DWORD *)a5;
        if (*(char *)(a5 + 24) + 1 <= (HIBYTE(*(_DWORD *)a5) & 3u))
          __assert_rtn("advanceCursorToChildNode", "PatriciaTrie.h", 378, "!cursor.hasMorePatriciaKeyBytes()");
        v9 = v15 & 0xFFFFFF;
        if ((v15 & 0xFFFFFF) != 0)
          goto LABEL_11;
        v8 = 0;
        v10 = -1;
        if (*(_BYTE *)(a5 + 24) || v15)
        {
          v7 = v15 & 0xFFFFFF;
          goto LABEL_18;
        }
        v7 = 0;
        if (!*(_BYTE *)(a5 + 16))
        {
LABEL_11:
          result = (uint64_t)sub_19C001C20(v13, v9);
          v7 = *(_DWORD *)(result + 24 * v14 + 272);
          if (!v7 && !*(_BYTE *)(result + 24 * v14 + 288))
          {
LABEL_16:
            v9 = 0;
            v8 = 0;
            v7 = 0;
LABEL_17:
            v10 = -1;
            goto LABEL_18;
          }
          v10 = 0;
          v16 = result + 24 * v14;
          v8 = *(_QWORD *)(v16 + 280);
          v9 = *(_DWORD *)(v16 + 288);
        }
      }
LABEL_18:
      *(_DWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v8;
      *(_DWORD *)(a5 + 16) = v9;
      ++a3;
      *(_BYTE *)(a5 + 24) = v10;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_19C0018CC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  int v6;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if ((_DWORD)result)
  {
    if (*(char *)(a2 + 24) + 1 <= (*(_BYTE *)(a2 + 3) & 3u))
    {
      return 0;
    }
    else
    {
      v6 = *(_DWORD *)(a2 + 8);
      *a3 = v6;
      return v6 != 0;
    }
  }
  return result;
}

void sub_19C00192C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  std::string v8;

  memset(&v8, 0, sizeof(v8));
  std::string::reserve(&v8, 0x40uLL);
  sub_19C001CD4(a1, a2, (uint64_t)&v8, a3, a4);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_19C0019A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_19C0019BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  void *result;
  char v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;
  char v30;
  _QWORD __dst[802];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v34 = *MEMORY[0x1E0C80C00];
  result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 112))(v0);
  if ((_DWORD)result)
  {
    v29 = 0;
    v7 = *((_BYTE *)v4 + 24);
    v8 = *v4;
    v9 = HIBYTE(*v4) & 3;
    if (v7 + 1 <= v9)
    {
      LODWORD(__dst[0]) = *v4;
      __dst[1] = *((_QWORD *)v4 + 1);
      LODWORD(__dst[2]) = v4[4];
      v11 = v7 + 1;
      LOBYTE(__dst[3]) = v11;
      if (v9 >= v11)
        v12 = *((_BYTE *)&__dst[2] + v11);
      else
        v12 = 0;
      LOBYTE(v25) = v12;
      v13 = *(_QWORD *)(v2 + 24);
      if (!v13)
LABEL_27:
        sub_19BF94AC4();
      return (void *)(*(uint64_t (**)(uint64_t, int *, _QWORD *, char *))(*(_QWORD *)v13 + 48))(v13, &v25, __dst, &v29);
    }
    else
    {
      v10 = v8 & 0xFFFFFF;
      if ((v8 & 0xFFFFFF) != 0)
      {
        if (v10 < *(_DWORD *)(v5 + 84))
          __assert_rtn("enumerateChildren", "PatriciaTrie.h", 275, "cursor.isRoot() || firstChildOffset >= m_trieRootOffset");
      }
      else
      {
        if (*((_BYTE *)v4 + 24) || v8 || *((_BYTE *)v4 + 16))
          return result;
        v10 = 0;
      }
      v14 = sub_19C001C20(v5, v10);
      result = memcpy(__dst, v14, 0x10CuLL);
      v15 = 0x1FFFFFFFFFFFFD00;
      do
      {
        v16 = &__dst[v15];
        *((_DWORD *)v16 + 1604) = v14[v15 + 802];
        v16[803] = v14[v15 + 803];
        *((_DWORD *)v16 + 1608) = v14[v15 + 804];
        v15 += 3;
      }
      while (v15 * 8);
      v32 = *((_OWORD *)v14 + 401);
      v33 = v14[804];
      v17 = __dst[1];
      if (LODWORD(__dst[1]))
      {
        v18 = 0;
        do
        {
          v19 = *((unsigned __int8 *)&__dst[1] + (int)v18 + 4);
          v20 = &__dst[3 * *((unsigned __int8 *)&__dst[1] + (int)v18 + 4)];
          v21 = *((_DWORD *)v20 + 68);
          v22 = v20[35];
          if ((v21 & 0x10FFFFFF) != 0x10000000 || (v22 & 0xFF00000000) != 0)
          {
            v25 = v21;
            v26 = v22;
            v27 = __dst[3 * v19 + 36];
            v28 = 0;
            v30 = v27;
            v24 = *(_QWORD *)(v2 + 24);
            if (!v24)
              goto LABEL_27;
            result = (void *)(*(uint64_t (**)(uint64_t, char *, int *, char *))(*(_QWORD *)v24 + 48))(v24, &v30, &v25, &v29);
            if (v29)
              break;
          }
          ++v18;
        }
        while (v18 < v17);
      }
    }
  }
  return result;
}

_QWORD *sub_19C001C20(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 80))
    __assert_rtn("getTrieArrayCache", "PatriciaTrie.h", 361, "m_valid");
  v2 = *(_QWORD *)(a1 + 32);
  if (a2)
    v3 = v2 + a2;
  else
    v3 = 0;
  return sub_19C001C74((_QWORD *)(a1 + 88), v3, v2 + *(unsigned int *)(a1 + 84));
}

_QWORD *sub_19C001C74(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  if (a2)
  {
    v4 = a1 + 805;
    if (a1[805] != a2)
      sub_19BFA614C((uint64_t)(a1 + 805), a2);
  }
  else
  {
    if (*a1 != a3)
      sub_19BFA614C((uint64_t)a1, a3);
    return a1;
  }
  return v4;
}

_QWORD *sub_19C001CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _QWORD *result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v19 = a5;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v18 = 0;
    v17 = 0;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 128))(a1, a2, &v18);
    if (!(_DWORD)result
      || ((v11 = *(char *)(a3 + 23), v11 >= 0) ? (v12 = a3) : (v12 = *(_QWORD *)a3),
          v11 >= 0 ? (v13 = *(unsigned __int8 *)(a3 + 23)) : (v13 = *(_QWORD *)(a3 + 8)),
          result = (_QWORD *)sub_19BFB8D60(*(_QWORD *)(a4 + 24), v18, v12, v13, (uint64_t)&v17),
          !v17))
    {
      if ((a5 & 0x80000000) != 0)
        goto LABEL_14;
      v14 = *(unsigned __int8 *)(a3 + 23);
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a3 + 8);
      if (v14 < a5)
      {
LABEL_14:
        v15 = operator new(0x28uLL);
        *v15 = &off_1E3D16788;
        v15[1] = a3;
        v15[2] = a1;
        v15[3] = a4;
        v15[4] = &v19;
        v21 = v15;
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 144))(a1, a2, v20);
        result = v21;
        if (v21 == v20)
        {
          v16 = 4;
          result = v20;
        }
        else
        {
          if (!v21)
            return result;
          v16 = 5;
        }
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
      }
    }
  }
  return result;
}

void sub_19C001E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C001E80()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C001E94(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D16788;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C001ED4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D16788;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_19C001EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  std::string::value_type v9;
  _QWORD *result;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 8;
  v5 = *(std::string **)(a1 + 8);
  v6 = *(_QWORD *)(v7 + 8);
  v8 = *(char *)(a3 + 24);
  if ((*(_BYTE *)(a3 + 3) & 3u) >= v8)
    v9 = *(_BYTE *)(a3 + v8 + 16);
  else
    v9 = 0;
  std::string::push_back(v5, v9);
  result = sub_19C001CD4(v6, a3, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), **(_DWORD **)(a1 + 32));
  v11 = *(uint64_t **)(a1 + 8);
  if (*((char *)v11 + 23) < 0)
  {
    v12 = v11[1] - 1;
    v11[1] = v12;
    v11 = (uint64_t *)*v11;
  }
  else
  {
    v12 = *((unsigned __int8 *)v11 + 23) - 1;
    *((_BYTE *)v11 + 23) = v12 & 0x7F;
  }
  *((_BYTE *)v11 + v12) = 0;
  return result;
}

uint64_t sub_19C001FA0(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D167F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C001FDC()
{
  return &unk_1E3D167F8;
}

uint64_t sub_19C001FE8(uint64_t a1)
{
  unsigned int v1;

  v1 = *(char *)(a1 + 24) + 1;
  if (v1 > (*(_BYTE *)(a1 + 3) & 3u))
    __assert_rtn("peekNextByte", "PatriciaTrie.h", 53, "hasMorePatriciaKeyBytes()");
  return *(unsigned __int8 *)(a1 + v1 + 16);
}

void sub_19C00203C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C002050(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D16708;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C002090(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D16708;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C0020B8(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 + 8);
  v9 = a1[3];
  v10 = v9 + v8;
  v11 = a1[1];
  v12 = *(char *)(v11 + 23);
  if (v12 < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    v11 = a1[1];
    v9 = a1[3];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
  v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  v15 = *(_QWORD *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    v11 = a1[1];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
LABEL_9:
  if ((v12 & 0x80) != 0)
    v11 = *(_QWORD *)v11;
  return sub_19BFB8D60(*(_QWORD *)(a1[4] + 24), *a2, v11, v10, a4);
}

uint64_t sub_19C00218C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16768))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0021C8()
{
  return &unk_1E3D16768;
}

uint64_t *sub_19C0021D4(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 72) = *(_QWORD *)(v2 + v5 - 72);
      *(_QWORD *)(v6 - 64) = 0;
      *(_QWORD *)(v6 - 56) = 0;
      *(_QWORD *)(v6 - 48) = 0;
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v6 - 40) = 0;
      *(_QWORD *)(v6 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      v8 = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v6 - 11) = *(_QWORD *)(v2 + v5 - 11);
      *(_QWORD *)(v6 - 16) = v8;
      v5 -= 72;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19C002294(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    sub_19C0022E0((_QWORD *)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C0022E0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_19C002328()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C00233C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D16688;
  result[1] = v3;
  return result;
}

uint64_t sub_19C002370(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D16688;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C00238C(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C0023A8(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D166E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0023E4()
{
  return &unk_1E3D166E8;
}

void sub_19C0023F4()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C002408(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D16608;
  result[1] = v3;
  return result;
}

uint64_t sub_19C00243C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D16608;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C002458(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C002474(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16668))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0024B0()
{
  return &unk_1E3D16668;
}

double sub_19C0024BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v1 = 272;
  do
  {
    v2 = a1 + v1;
    *(_DWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    v1 += 24;
  }
  while (v2 + 24 != a1 + 6416);
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v3 = -6144;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  do
  {
    v4 = a1 + v3;
    *(_DWORD *)(v4 + 6416) = 0;
    *(_QWORD *)(v4 + 6424) = 0;
    *(_DWORD *)(v4 + 6432) = 0;
    v3 += 24;
  }
  while (v3);
  *(_DWORD *)(a1 + 6416) = 0;
  *(_OWORD *)(a1 + 6424) = 0u;
  v5 = 6712;
  do
  {
    v6 = a1 + v5;
    *(_DWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    v5 += 24;
  }
  while (v6 + 24 != a1 + 12856);
  *(_OWORD *)(a1 + 6692) = 0u;
  *(_OWORD *)(a1 + 6664) = 0u;
  *(_OWORD *)(a1 + 6680) = 0u;
  *(_OWORD *)(a1 + 6632) = 0u;
  *(_OWORD *)(a1 + 6648) = 0u;
  *(_OWORD *)(a1 + 6600) = 0u;
  *(_OWORD *)(a1 + 6616) = 0u;
  *(_OWORD *)(a1 + 6568) = 0u;
  *(_OWORD *)(a1 + 6584) = 0u;
  *(_OWORD *)(a1 + 6536) = 0u;
  *(_OWORD *)(a1 + 6552) = 0u;
  *(_OWORD *)(a1 + 6504) = 0u;
  *(_OWORD *)(a1 + 6520) = 0u;
  *(_OWORD *)(a1 + 6472) = 0u;
  *(_OWORD *)(a1 + 6488) = 0u;
  *(_OWORD *)(a1 + 6440) = 0u;
  *(_OWORD *)(a1 + 6456) = 0u;
  v7 = -6144;
  do
  {
    v8 = a1 + v7;
    *(_DWORD *)(v8 + 12856) = 0;
    *(_QWORD *)(v8 + 12864) = 0;
    *(_DWORD *)(v8 + 12872) = 0;
    v7 += 24;
  }
  while (v7);
  *(_DWORD *)(a1 + 12856) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 12864) = 0u;
  return result;
}

uint64_t sub_19C0025C4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D16D48;
  sub_19BFB1F54(*(char **)(a1 + 12984));
  sub_19C000844(a1 + 8);
  return a1;
}

void sub_19C002600(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D16D48;
  sub_19BFB1F54(*(char **)(a1 + 12984));
  sub_19C000844(a1 + 8);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C00264C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v38;
  void *v39;
  void *__p;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (a2)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      v13 = *(void **)(a3 + 8 * i);
      v14 = *(_QWORD *)(a4 + 8 * i);
      v38 = v14;
      v39 = v13;
      v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v16 = (_QWORD *)sub_19BFFA830(&v43, &v39, &v38);
      }
      else
      {
        sub_19BFA4428(v44, v13, v14);
        v16 = v15 + 3;
      }
      v44 = v16;
      if (a5)
      {
        v17 = *(_QWORD *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          v19 = v10;
          v20 = a5;
          v21 = v8;
          v22 = a3;
          v23 = a4;
          v24 = (v11 - v9) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_19BF8EB40();
          v26 = v19 - (_QWORD)v9;
          v27 = (uint64_t)(v19 - (_QWORD)v9) >> 1;
          if (v27 > v25)
            v25 = v27;
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v25;
          if (v28)
            v28 = (unint64_t)sub_19BFB3588(v28);
          else
            v29 = 0;
          v30 = (_DWORD *)(v28 + 4 * v24);
          *v30 = v17;
          v18 = v30 + 1;
          while (v11 != v9)
          {
            v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v41 = v18;
          v32 = v28 + 4 * v29;
          v42 = v32;
          if (v9)
            operator delete(v9);
          v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          v8 = v21;
          a5 = v20;
          v10 = v32;
        }
        else
        {
          *(_DWORD *)v11 = v17;
          v18 = v11 + 4;
        }
        v41 = v18;
        v11 = (char *)v18;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19BF8EA40((void ***)&__p);
  return v35;
}

void sub_19C002838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C00287C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19C0028BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D168F0;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C002958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C002994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D16970;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C002A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C002A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_19C000CD0((_QWORD *)(a1 + 8), a2);
}

uint64_t sub_19C002A74(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  void *__p;
  void *v18;
  unint64_t v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v19 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v18 = v7;
      ++v6;
      v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  v14 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19C002BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C002BF8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  std::string::size_type v12;
  double v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t **v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  const std::string *v31;
  std::string::size_type v32;
  const std::string *v33;
  double v34;
  double v35;
  std::string::size_type size;
  double v37;
  uint64_t **v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  std::string::size_type v46;
  __int128 *v47;
  _OWORD *v48;
  __int128 v49;
  std::string::size_type v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  std::string::size_type v56;
  int v57;
  char *v58;
  char **v59;
  BOOL v60;
  uint64_t v61;
  std::string __str;
  std::string v65;
  std::string *v66;
  char *v67;
  uint64_t v68;
  char **v69;
  char *v70[2];
  std::string v71;
  char v72[9];

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  v5 = a1;
  v70[0] = 0;
  v70[1] = 0;
  v69 = v70;
  if (v4 == v3)
  {
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
  }
  else
  {
    v8 = 0;
    v9 = a1 + 12976;
    do
    {
      v10 = 0;
      v11 = v3 + 24 * v8;
      while (1)
      {
        v12 = *(char *)(v11 + 23) < 0 ? *(_QWORD *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
        if (v10 > v12)
          break;
        v13 = *(double *)sub_19BFFBFC0(v9, (_QWORD *)v11);
        std::string::basic_string(&v71, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v66);
        v66 = &v71;
        v14 = (double *)sub_19BFF8F10((uint64_t **)&v69, &v71, (_OWORD **)&v66);
        v14[7] = v13 + v14[7];
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        ++v10;
      }
      if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF)
      {
        v61 = 0;
        goto LABEL_96;
      }
      ++v8;
      v3 = *a2;
      v15 = a2[1];
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3));
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
    if (v15 != v3)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = v3 + v16;
        v19 = *(_DWORD *)(*a3 + 4 * v17);
        v20 = *(double *)sub_19BFFBFC0((uint64_t)&v69, (_QWORD *)(v3 + v16));
        v21 = *(unsigned __int8 *)(v18 + 23);
        if ((v21 & 0x80u) != 0)
          v21 = *(_QWORD *)(v18 + 8);
        std::string::basic_string(&v71, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v65);
        v22 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        v23 = sub_19C00050C((uint64_t **)&v66, (_QWORD *)v18, v18);
        v24 = (int)(sqrt(v20 / v22) * 255.0);
        if (v24 >= 255)
          v25 = 255;
        else
          v25 = v24;
        if (v24)
          v26 = 1;
        else
          v26 = v20 / v22 <= 0.0;
        v27 = v25 << 23;
        if (!v26)
          v27 = 0x800000;
        *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
        ++v17;
        v3 = *a2;
        v28 = a2[1];
        v16 += 24;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
      if (v28 != v3)
      {
        v29 = 0;
        do
        {
          v30 = 0;
          v31 = (const std::string *)(v3 + 24 * v29);
          while (1)
          {
            v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                ? v31->__r_.__value_.__l.__size_
                : HIBYTE(v31->__r_.__value_.__r.__words[2]);
            if (v30 >= v32 - 1)
              break;
            std::string::basic_string(&v65, v31, 0, v30, (std::allocator<char> *)&v71);
            v33 = v31;
            if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0)
              v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
            sub_19BFFC118((uint64_t)&__str, (const void **)&v65.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
            if (&v67 == sub_19BFAA740((uint64_t)&v66, &__str))
            {
              v34 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v65);
              if (v34 > *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str))
              {
                v35 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str);
                size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = __str.__r_.__value_.__l.__size_;
                std::string::basic_string(&v71, &__str, 0, size - 1, (std::allocator<char> *)v72);
                v37 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v71.__r_.__value_.__l.__data_);
                v38 = sub_19C00050C((uint64_t **)&v66, &__str, (uint64_t)&__str);
                v39 = (int)(sqrt(v35 / v37) * 255.0);
                if (v39 >= 255)
                  v40 = 255;
                else
                  v40 = v39;
                if (v39)
                  v41 = 1;
                else
                  v41 = v35 / v37 <= 0.0;
                v42 = (v40 << 23) | 0x7FFFFF;
                if (!v41)
                  v42 = 0xFFFFFF;
                *((_DWORD *)v38 + 14) = v42;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            ++v30;
          }
          ++v29;
          v3 = *a2;
        }
        while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    v5 = a1;
  }
  memset(&v71, 0, sizeof(v71));
  memset(&v65, 0, sizeof(v65));
  v43 = (uint64_t *)v66;
  if (v66 != (std::string *)&v67)
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = (__int128 *)(v43 + 4);
      v48 = (_OWORD *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_ >= v71.__r_.__value_.__r.__words[2])
      {
        v50 = sub_19BFFC198((uint64_t *)&v71, v47);
      }
      else
      {
        if (*((char *)v43 + 55) < 0)
        {
          sub_19BF8CD70((_BYTE *)v71.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
        }
        else
        {
          v49 = *v47;
          *(_QWORD *)(v71.__r_.__value_.__l.__size_ + 16) = v43[6];
          *v48 = v49;
        }
        v50 = (std::string::size_type)v48 + 24;
      }
      v71.__r_.__value_.__l.__size_ = v50;
      if ((unint64_t)v44 >= v46)
      {
        v51 = (v44 - v45) >> 2;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v46 - (_QWORD)v45) >> 1 > v52)
          v52 = (uint64_t)(v46 - (_QWORD)v45) >> 1;
        if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v53 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
          v53 = (unint64_t)sub_19BFB3588(v53);
        else
          v54 = 0;
        v55 = (char *)(v53 + 4 * v51);
        *(_DWORD *)v55 = *((_DWORD *)v43 + 14);
        v56 = (std::string::size_type)(v55 + 4);
        while (v44 != v45)
        {
          v57 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v55 - 1) = v57;
          v55 -= 4;
        }
        v46 = v53 + 4 * v54;
        v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v65.__r_.__value_.__l.__size_ = v56;
        v65.__r_.__value_.__r.__words[2] = v46;
        if (v45)
          operator delete(v45);
        v45 = v55;
        v44 = (char *)v56;
      }
      else
      {
        *(_DWORD *)v44 = *((_DWORD *)v43 + 14);
        v44 += 4;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      v58 = (char *)v43[1];
      if (v58)
      {
        do
        {
          v59 = (char **)v58;
          v58 = *(char **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (char **)v43[2];
          v60 = *v59 == (char *)v43;
          v43 = (uint64_t *)v59;
        }
        while (!v60);
      }
      v43 = (uint64_t *)v59;
    }
    while (v59 != &v67);
  }
  v61 = sub_19C000EF0(v5 + 8, (uint64_t *)&v71, &v65);
  if (v65.__r_.__value_.__r.__words[0])
    operator delete(v65.__r_.__value_.__l.__data_);
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  sub_19BF8EA40((void ***)&v65);
  sub_19BFB1F54(v67);
LABEL_96:
  sub_19BFB1F54(v70[0]);
  return v61;
}

void sub_19C0031E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p)
    operator delete(__p);
  __p = &a28;
  sub_19BF8EA40(&__p);
  sub_19BFB1F54(a23);
  sub_19BFB1F54(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0032C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19C0012E4(a1 + 8, a2, a3);
}

uint64_t sub_19C0032C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[4];
  _QWORD v10[4];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 104))(v9);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(v10, a1, v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10, a4);
}

_QWORD *sub_19C003348(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D16E08;
  v11[1] = a4;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19C0013E4((_QWORD *)(a1 + 8), a2, a3, (uint64_t)v13);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C00343C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C0034AC(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13[0] = &off_1E3D16E08;
  v13[1] = a4;
  v14 = v13;
  sub_19BFFBC40((uint64_t)v15, v13);
  sub_19C0014EC(a1 + 8, a2, a3, (uint64_t)v15, a5);
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_19C0035A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_19C003618(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

BOOL sub_19C00362C(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a1 + 88))
    v2 = *(unsigned __int8 *)(a2 + 24) == 255;
  else
    v2 = 1;
  return !v2;
}

uint64_t sub_19C003648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_19C001738(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_19C003650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v6;
  int v7;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 112))(a1 + 8);
  if ((_DWORD)result)
  {
    if (*(char *)(a2 + 24) + 1 > (*(_BYTE *)(a2 + 3) & 3u)
      && (v6 = *(_DWORD *)(a2 + 8)) != 0
      && (v7 = v6 & 0x7FFFFF, v7 != 0x7FFFFF))
    {
      *a3 = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *sub_19C0036C0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D16E08;
  v11[1] = a3;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19C00192C(a1 + 8, a2, (uint64_t)v13, a4);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C0037B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void *sub_19C003824()
{
  return sub_19C0019BC();
}

void sub_19C003830()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C003844(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D16E08;
  result[1] = v3;
  return result;
}

uint64_t sub_19C003878(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D16E08;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C003894(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4;

  v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF)
    return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(result + 8) + 24), v4, *a3, a3[1], a4);
  return result;
}

uint64_t sub_19C0038C4(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16E68))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C003900()
{
  return &unk_1E3D16E68;
}

void sub_19C003910()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C003924(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D16970;
  result[1] = v3;
  return result;
}

uint64_t sub_19C003958(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D16970;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C003974(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C003990(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D169D0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0039CC()
{
  return &unk_1E3D169D0;
}

void sub_19C0039DC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C0039F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D168F0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C003A24(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D168F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C003A40(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C003A5C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16950))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C003A98()
{
  return &unk_1E3D16950;
}

void sub_19C003AA4(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = *(char **)(a1 + 8);
  if (v2)
    sub_19BF9C85C(v2);
  sub_19BF9C72C(*(_DWORD *)(a1 + 16), 0);
  *(_QWORD *)(a1 + 8) = v3;
  if (!v3)
    __assert_rtn("init", "MutableBurstTrie.h", 302, "m_trie");
}

uint64_t sub_19C003B00(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D16228;
  sub_19BF9C85C(*(char **)(a1 + 8));
  return a1;
}

void sub_19C003B3C(uint64_t a1)
{
  sub_19C003B00(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C003B60(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v38;
  void *v39;
  void *__p;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (a2)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      v13 = *(void **)(a3 + 8 * i);
      v14 = *(_QWORD *)(a4 + 8 * i);
      v38 = v14;
      v39 = v13;
      v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v16 = (_QWORD *)sub_19BFFA830(&v43, &v39, &v38);
      }
      else
      {
        sub_19BFA4428(v44, v13, v14);
        v16 = v15 + 3;
      }
      v44 = v16;
      if (a5)
      {
        v17 = *(_QWORD *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          v19 = v10;
          v20 = a5;
          v21 = v8;
          v22 = a3;
          v23 = a4;
          v24 = (v11 - v9) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_19BF8EB40();
          v26 = v19 - (_QWORD)v9;
          v27 = (uint64_t)(v19 - (_QWORD)v9) >> 1;
          if (v27 > v25)
            v25 = v27;
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v25;
          if (v28)
            v28 = (unint64_t)sub_19BFB3588(v28);
          else
            v29 = 0;
          v30 = (_DWORD *)(v28 + 4 * v24);
          *v30 = v17;
          v18 = v30 + 1;
          while (v11 != v9)
          {
            v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v41 = v18;
          v32 = v28 + 4 * v29;
          v42 = v32;
          if (v9)
            operator delete(v9);
          v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          v8 = v21;
          a5 = v20;
          v10 = v32;
        }
        else
        {
          *(_DWORD *)v11 = v17;
          v18 = v11 + 4;
        }
        v41 = v18;
        v11 = (char *)v18;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19BF8EA40((void ***)&__p);
  return v35;
}

void sub_19C003D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C003D90(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19C003DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D16330;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C003E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C003EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D163B0;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C003F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C003F80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_19BF9FCE0(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_19C003F88(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v15;
  void *__p;
  void *v19;
  unint64_t v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v20 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v19 = v7;
      v5 = (char *)v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v6++);
  }
  v15 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_19C0040EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C004110(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "MutableBurstTrie.h", 150, "keys.size() == values.size()");
  if (v4 == v3)
    return 1;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  LODWORD(v11) = 1;
  do
  {
    v12 = (uint64_t **)(v3 + v8);
    if (*((char *)v12 + 23) < 0)
    {
      v14 = *v12;
      v13 = v12[1];
    }
    else
    {
      v13 = (uint64_t *)*((unsigned __int8 *)v12 + 23);
      v14 = (uint64_t *)v12;
    }
    v11 = v11 & (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 152))(a1, v14, v13, *a3 + v9);
    ++v10;
    v3 = *a2;
    v9 += 4;
    v8 += 24;
  }
  while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  return v11;
}

BOOL sub_19C00421C(uint64_t a1, char *a2)
{
  char *v4;
  char *v5;

  v4 = *(char **)(a1 + 8);
  if (v4)
    sub_19BF9C85C(v4);
  v5 = sub_19BF9C8D8(a2);
  *(_QWORD *)(a1 + 8) = v5;
  return v5 != 0;
}

uint64_t sub_19C00425C(uint64_t a1, const void *a2, uint64_t a3, _DWORD *a4)
{
  if (a3)
    return sub_19BF9DB04(*(_QWORD **)(a1 + 8), a2, a3, a4, 0);
  else
    return 0;
}

void **sub_19C004274(void **result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void **v7;
  unint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  char v15;

  if (a3)
  {
    v7 = result;
    v15 = 0;
    (*((void (**)(void **__return_ptr))*result + 13))(&v14);
    v8 = 0;
    v9 = 0;
    v13 = 0;
    do
    {
      (*((void (**)(void **__return_ptr, void **, void **, unint64_t, uint64_t))*v7 + 15))(&v12, v7, &v14, a2 + v8, 1);
      v10 = v14;
      v14 = v12;
      v12 = v10;
      sub_19C004744(&v12);
      if (((*((uint64_t (**)(void **, void **))*v7 + 14))(v7, &v14) & 1) == 0)
        break;
      if ((*((unsigned int (**)(void **, void **, int *))*v7 + 16))(v7, &v14, &v13))
      {
        v8 = (v9 + 1);
        if (a3 >= v8)
          v11 = (v9 + 1);
        else
          v11 = a3;
        sub_19BFB8D60(*(_QWORD *)(a4 + 24), v13, a2, v11, (uint64_t)&v15);
        if (v15)
          return sub_19C004744(&v14);
      }
      else
      {
        v8 = (v9 + 1);
      }
      v9 = v8;
    }
    while (a3 > v8);
    return sub_19C004744(&v14);
  }
  return result;
}

void sub_19C004388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C004744((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C0043A0(_QWORD *result, unsigned __int8 *a2, size_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = (_QWORD *)result[1];
    v7[0] = &off_1E3D16430;
    v7[1] = a4;
    v8 = v7;
    sub_19BF9CA9C(v5, a2, a3, 0, (uint64_t)v7, a5);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  return result;
}

void sub_19C004444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void **sub_19C004480@<X0>(uint64_t a1@<X0>, void **a2@<X8>)
{
  return sub_19C004844(a2, *(_QWORD *)(a1 + 8));
}

BOOL sub_19C00448C(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

void **sub_19C00449C@<X0>(_QWORD **a1@<X1>, unsigned __int8 *a2@<X2>, size_t a3@<X3>, _QWORD *a4@<X8>)
{
  return sub_19C0046C4(a4, *a1, a2, a3);
}

uint64_t sub_19C0044A8(uint64_t a1, _DWORD **a2, _DWORD *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if ((_DWORD)result)
    return sub_19BF9FCA8(*a2, a3);
  return result;
}

_QWORD *sub_19C0044EC(uint64_t a1, _BYTE **a2, uint64_t a3, int a4)
{
  _BYTE *v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v7[0] = &off_1E3D164B0;
  v7[1] = a3;
  v8 = v7;
  sub_19BF9DF38(v4, 0, (uint64_t)v7, a4);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_19C004588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void **sub_19C0045C4(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  void **result;
  void *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;

  v6 = 0;
  v13 = 0;
  do
  {
    v12 = v6;
    sub_19C0046C4(&v11, *a2, &v12, 1uLL);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a1 + 112))(a1, &v11))
    {
      v14 = v12;
      v7 = *(_QWORD *)(a3 + 24);
      if (!v7)
        sub_19BF94AC4();
      (*(void (**)(uint64_t, unsigned __int8 *, void **, unsigned __int8 *))(*(_QWORD *)v7 + 48))(v7, &v14, &v11, &v13);
    }
    v8 = v13;
    result = sub_19C004744(&v11);
    if (v8)
      break;
  }
  while (v6++ < 0xFF);
  return result;
}

void sub_19C004688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19C004744(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_19C0046A0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  return a3 && sub_19BF9C2EC(*(_QWORD *)(a1 + 8), a2, a3, *a4);
}

uint64_t sub_19C0046B8(uint64_t a1, char *a2, int a3)
{
  return sub_19BF9CFD4(*(_DWORD **)(a1 + 8), a2, a3);
}

void **sub_19C0046C4(_QWORD *a1, _QWORD *a2, unsigned __int8 *a3, size_t a4)
{
  __n128 v7;
  __n128 v8;
  _QWORD *v9;
  _QWORD *v11;

  v11 = sub_19BF9FC1C(a2);
  if (sub_19BF9EE38((uint64_t)v11, a3, a4, v7, v8))
  {
    v9 = v11;
    v11 = 0;
  }
  else
  {
    v9 = 0;
  }
  *a1 = v9;
  return sub_19C004744((void **)&v11);
}

void sub_19C004730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C004744((void **)va);
  _Unwind_Resume(a1);
}

void **sub_19C004744(void **a1)
{
  void *v2;

  v2 = *a1;
  if (v2)
    sub_19BF9E10C(v2);
  *a1 = 0;
  return a1;
}

void sub_19C00477C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C004790(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D164B0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C0047C4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D164B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C0047E0(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, int *a5, uint64_t a6, uint64_t *a7)
{
  return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a5, *a3, *a4, *a7);
}

uint64_t sub_19C0047FC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16510))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C004838()
{
  return &unk_1E3D16510;
}

void **sub_19C004844(void **a1, uint64_t a2)
{
  void *v3;

  *a1 = 0;
  v3 = sub_19BF9DEC8(a2, 0, 0);
  if (*a1)
    sub_19BF9E10C(*a1);
  *a1 = v3;
  return a1;
}

void sub_19C004890()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C0048A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D16430;
  result[1] = v3;
  return result;
}

uint64_t sub_19C0048D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D16430;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C0048F4(uint64_t result, uint64_t a2, uint64_t *a3, _BYTE **a4)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = *a4;
  if (!**a4)
  {
    v5 = result;
    v6 = *a3;
    v7 = sub_19BF9C498(*a3);
    v8 = sub_19BF9C4A4(v6);
    v9 = *(_QWORD *)(v5 + 8);
    v10 = sub_19BF9C4B0(v6);
    return sub_19BFB8D60(*(_QWORD *)(v9 + 24), v10, v7, v8, (uint64_t)v4);
  }
  return result;
}

uint64_t sub_19C00497C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16490))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0049B8()
{
  return &unk_1E3D16490;
}

void sub_19C0049C8()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C0049DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D163B0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C004A10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D163B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C004A2C(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C004A48(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16410))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C004A84()
{
  return &unk_1E3D16410;
}

void sub_19C004A94()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C004AA8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D16330;
  result[1] = v3;
  return result;
}

uint64_t sub_19C004ADC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D16330;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C004AF8(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C004B14(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16390))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C004B50()
{
  return &unk_1E3D16390;
}

uint64_t sub_19C004B5C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D16AF0;
  sub_19BFB1F54(*(char **)(a1 + 40));
  sub_19C003B00(a1 + 8);
  return a1;
}

void sub_19C004B98(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D16AF0;
  sub_19BFB1F54(*(char **)(a1 + 40));
  sub_19C003B00(a1 + 8);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C004BE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v38;
  void *v39;
  void *__p;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (a2)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      v13 = *(void **)(a3 + 8 * i);
      v14 = *(_QWORD *)(a4 + 8 * i);
      v38 = v14;
      v39 = v13;
      v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v16 = (_QWORD *)sub_19BFFA830(&v43, &v39, &v38);
      }
      else
      {
        sub_19BFA4428(v44, v13, v14);
        v16 = v15 + 3;
      }
      v44 = v16;
      if (a5)
      {
        v17 = *(_QWORD *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          v19 = v10;
          v20 = a5;
          v21 = v8;
          v22 = a3;
          v23 = a4;
          v24 = (v11 - v9) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_19BF8EB40();
          v26 = v19 - (_QWORD)v9;
          v27 = (uint64_t)(v19 - (_QWORD)v9) >> 1;
          if (v27 > v25)
            v25 = v27;
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v25;
          if (v28)
            v28 = (unint64_t)sub_19BFB3588(v28);
          else
            v29 = 0;
          v30 = (_DWORD *)(v28 + 4 * v24);
          *v30 = v17;
          v18 = v30 + 1;
          while (v11 != v9)
          {
            v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v41 = v18;
          v32 = v28 + 4 * v29;
          v42 = v32;
          if (v9)
            operator delete(v9);
          v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          v8 = v21;
          a5 = v20;
          v10 = v32;
        }
        else
        {
          *(_DWORD *)v11 = v17;
          v18 = v11 + 4;
        }
        v41 = v18;
        v11 = (char *)v18;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19BF8EA40((void ***)&__p);
  return v35;
}

void sub_19C004DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C004E14(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19C004E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D16BC8;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C004EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C004F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D16C48;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C004FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C005004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_19BF9FCE0(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_19C00500C(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  void *__p;
  void *v18;
  unint64_t v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v19 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v18 = v7;
      ++v6;
      v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  v14 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19C00516C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C005190(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  std::string::size_type v12;
  double v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t **v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  const std::string *v31;
  std::string::size_type v32;
  const std::string *v33;
  double v34;
  double v35;
  std::string::size_type size;
  double v37;
  uint64_t **v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  std::string::size_type v46;
  __int128 *v47;
  _OWORD *v48;
  __int128 v49;
  std::string::size_type v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  std::string::size_type v56;
  int v57;
  char *v58;
  char **v59;
  BOOL v60;
  uint64_t v61;
  std::string __str;
  std::string v65;
  std::string *v66;
  char *v67;
  uint64_t v68;
  char **v69;
  char *v70[2];
  std::string v71;
  char v72[9];

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  v5 = a1;
  v70[0] = 0;
  v70[1] = 0;
  v69 = v70;
  if (v4 == v3)
  {
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
  }
  else
  {
    v8 = 0;
    v9 = a1 + 32;
    do
    {
      v10 = 0;
      v11 = v3 + 24 * v8;
      while (1)
      {
        v12 = *(char *)(v11 + 23) < 0 ? *(_QWORD *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
        if (v10 > v12)
          break;
        v13 = *(double *)sub_19BFFBFC0(v9, (_QWORD *)v11);
        std::string::basic_string(&v71, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v66);
        v66 = &v71;
        v14 = (double *)sub_19BFF8F10((uint64_t **)&v69, &v71, (_OWORD **)&v66);
        v14[7] = v13 + v14[7];
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        ++v10;
      }
      if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF)
      {
        v61 = 0;
        goto LABEL_96;
      }
      ++v8;
      v3 = *a2;
      v15 = a2[1];
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3));
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
    if (v15 != v3)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = v3 + v16;
        v19 = *(_DWORD *)(*a3 + 4 * v17);
        v20 = *(double *)sub_19BFFBFC0((uint64_t)&v69, (_QWORD *)(v3 + v16));
        v21 = *(unsigned __int8 *)(v18 + 23);
        if ((v21 & 0x80u) != 0)
          v21 = *(_QWORD *)(v18 + 8);
        std::string::basic_string(&v71, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v65);
        v22 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        v23 = sub_19C00050C((uint64_t **)&v66, (_QWORD *)v18, v18);
        v24 = (int)(sqrt(v20 / v22) * 255.0);
        if (v24 >= 255)
          v25 = 255;
        else
          v25 = v24;
        if (v24)
          v26 = 1;
        else
          v26 = v20 / v22 <= 0.0;
        v27 = v25 << 23;
        if (!v26)
          v27 = 0x800000;
        *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
        ++v17;
        v3 = *a2;
        v28 = a2[1];
        v16 += 24;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
      if (v28 != v3)
      {
        v29 = 0;
        do
        {
          v30 = 0;
          v31 = (const std::string *)(v3 + 24 * v29);
          while (1)
          {
            v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                ? v31->__r_.__value_.__l.__size_
                : HIBYTE(v31->__r_.__value_.__r.__words[2]);
            if (v30 >= v32 - 1)
              break;
            std::string::basic_string(&v65, v31, 0, v30, (std::allocator<char> *)&v71);
            v33 = v31;
            if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0)
              v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
            sub_19BFFC118((uint64_t)&__str, (const void **)&v65.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
            if (&v67 == sub_19BFAA740((uint64_t)&v66, &__str))
            {
              v34 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v65);
              if (v34 > *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str))
              {
                v35 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str);
                size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = __str.__r_.__value_.__l.__size_;
                std::string::basic_string(&v71, &__str, 0, size - 1, (std::allocator<char> *)v72);
                v37 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v71.__r_.__value_.__l.__data_);
                v38 = sub_19C00050C((uint64_t **)&v66, &__str, (uint64_t)&__str);
                v39 = (int)(sqrt(v35 / v37) * 255.0);
                if (v39 >= 255)
                  v40 = 255;
                else
                  v40 = v39;
                if (v39)
                  v41 = 1;
                else
                  v41 = v35 / v37 <= 0.0;
                v42 = (v40 << 23) | 0x7FFFFF;
                if (!v41)
                  v42 = 0xFFFFFF;
                *((_DWORD *)v38 + 14) = v42;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            ++v30;
          }
          ++v29;
          v3 = *a2;
        }
        while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    v5 = a1;
  }
  memset(&v71, 0, sizeof(v71));
  memset(&v65, 0, sizeof(v65));
  v43 = (uint64_t *)v66;
  if (v66 != (std::string *)&v67)
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = (__int128 *)(v43 + 4);
      v48 = (_OWORD *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_ >= v71.__r_.__value_.__r.__words[2])
      {
        v50 = sub_19BFFC198((uint64_t *)&v71, v47);
      }
      else
      {
        if (*((char *)v43 + 55) < 0)
        {
          sub_19BF8CD70((_BYTE *)v71.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
        }
        else
        {
          v49 = *v47;
          *(_QWORD *)(v71.__r_.__value_.__l.__size_ + 16) = v43[6];
          *v48 = v49;
        }
        v50 = (std::string::size_type)v48 + 24;
      }
      v71.__r_.__value_.__l.__size_ = v50;
      if ((unint64_t)v44 >= v46)
      {
        v51 = (v44 - v45) >> 2;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v46 - (_QWORD)v45) >> 1 > v52)
          v52 = (uint64_t)(v46 - (_QWORD)v45) >> 1;
        if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v53 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
          v53 = (unint64_t)sub_19BFB3588(v53);
        else
          v54 = 0;
        v55 = (char *)(v53 + 4 * v51);
        *(_DWORD *)v55 = *((_DWORD *)v43 + 14);
        v56 = (std::string::size_type)(v55 + 4);
        while (v44 != v45)
        {
          v57 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v55 - 1) = v57;
          v55 -= 4;
        }
        v46 = v53 + 4 * v54;
        v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v65.__r_.__value_.__l.__size_ = v56;
        v65.__r_.__value_.__r.__words[2] = v46;
        if (v45)
          operator delete(v45);
        v45 = v55;
        v44 = (char *)v56;
      }
      else
      {
        *(_DWORD *)v44 = *((_DWORD *)v43 + 14);
        v44 += 4;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      v58 = (char *)v43[1];
      if (v58)
      {
        do
        {
          v59 = (char **)v58;
          v58 = *(char **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (char **)v43[2];
          v60 = *v59 == (char *)v43;
          v43 = (uint64_t *)v59;
        }
        while (!v60);
      }
      v43 = (uint64_t *)v59;
    }
    while (v59 != &v67);
  }
  v61 = sub_19C004110(v5 + 8, (uint64_t *)&v71, &v65);
  if (v65.__r_.__value_.__r.__words[0])
    operator delete(v65.__r_.__value_.__l.__data_);
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  sub_19BF8EA40((void ***)&v65);
  sub_19BFB1F54(v67);
LABEL_96:
  sub_19BFB1F54(v70[0]);
  return v61;
}

void sub_19C005778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p)
    operator delete(__p);
  __p = &a28;
  sub_19BF8EA40(&__p);
  sub_19BFB1F54(a23);
  sub_19BFB1F54(a26);
  _Unwind_Resume(a1);
}

BOOL sub_19C005854(uint64_t a1, char *a2)
{
  return sub_19C00421C(a1 + 8, a2);
}

uint64_t sub_19C00585C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v10;
  void *v11;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 104))(&v10);
  (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(&v11, a1, &v10, a2, a3);
  sub_19C004744(&v10);
  v8 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 128))(a1, &v11, a4);
  sub_19C004744(&v11);
  return v8;
}

void sub_19C0058F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C004744((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C005914(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D16CC8;
  v11[1] = a4;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19C004274((void **)(a1 + 8), a2, a3, (uint64_t)v13);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C005A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C005A78(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13[0] = &off_1E3D16CC8;
  v13[1] = a4;
  v14 = v13;
  sub_19BFFBC40((uint64_t)v15, v13);
  sub_19C0043A0((_QWORD *)(a1 + 8), a2, a3, (uint64_t)v15, a5);
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_19C005B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void **sub_19C005BE4@<X0>(uint64_t a1@<X0>, void **a2@<X8>)
{
  return sub_19C004844(a2, *(_QWORD *)(a1 + 16));
}

BOOL sub_19C005BF0(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0;
}

void **sub_19C005C00@<X0>(_QWORD **a1@<X1>, unsigned __int8 *a2@<X2>, size_t a3@<X3>, _QWORD *a4@<X8>)
{
  return sub_19C0046C4(a4, *a1, a2, a3);
}

uint64_t sub_19C005C0C(uint64_t a1, _DWORD **a2, int *a3)
{
  int v5;
  uint64_t result;
  int v7;

  v7 = 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 112))(a1 + 8);
  result = 0;
  if (v5)
  {
    result = sub_19BF9FCA8(*a2, &v7);
    if ((_DWORD)result)
    {
      if ((v7 & 0x7FFFFF) == 0x7FFFFF)
      {
        return 0;
      }
      else
      {
        *a3 = v7 & 0x7FFFFF;
        return 1;
      }
    }
  }
  return result;
}

_QWORD *sub_19C005C84(uint64_t a1, _BYTE **a2, uint64_t a3, int a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D16CC8;
  v11[1] = a3;
  v12 = v11;
  v6 = sub_19BFFBC40((uint64_t)v13, v11);
  sub_19C0044EC(v6, a2, (uint64_t)v13, a4);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C005D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void **sub_19C005DE0(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  return sub_19C0045C4(a1 + 8, a2, a3);
}

void sub_19C005DEC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C005E00(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D16CC8;
  result[1] = v3;
  return result;
}

uint64_t sub_19C005E34(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D16CC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C005E50(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4;

  v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF)
    return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(result + 8) + 24), v4, *a3, a3[1], a4);
  return result;
}

uint64_t sub_19C005E80(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16D28))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C005EBC()
{
  return &unk_1E3D16D28;
}

void sub_19C005ECC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C005EE0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D16C48;
  result[1] = v3;
  return result;
}

uint64_t sub_19C005F14(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D16C48;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C005F30(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C005F4C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16CA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C005F88()
{
  return &unk_1E3D16CA8;
}

void sub_19C005F98()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C005FAC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D16BC8;
  result[1] = v3;
  return result;
}

uint64_t sub_19C005FE0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D16BC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C005FFC(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C006018(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16C28))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C006054()
{
  return &unk_1E3D16C28;
}

uint64_t sub_19C006060(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D1A280;
  sub_19BFB1F54(*(char **)(a1 + 64));
  *(_QWORD *)(a1 + 8) = &off_1E3D138D8;
  sub_19BFB7A04((uint64_t *)(a1 + 16));
  return a1;
}

void sub_19C0060A8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D1A280;
  sub_19BFB1F54(*(char **)(a1 + 64));
  *(_QWORD *)(a1 + 8) = &off_1E3D138D8;
  sub_19BFB7A04((uint64_t *)(a1 + 16));
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C006100(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v38;
  void *v39;
  void *__p;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (a2)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      v13 = *(void **)(a3 + 8 * i);
      v14 = *(_QWORD *)(a4 + 8 * i);
      v38 = v14;
      v39 = v13;
      v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v16 = (_QWORD *)sub_19BFFA830(&v43, &v39, &v38);
      }
      else
      {
        sub_19BFA4428(v44, v13, v14);
        v16 = v15 + 3;
      }
      v44 = v16;
      if (a5)
      {
        v17 = *(_QWORD *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          v19 = v10;
          v20 = a5;
          v21 = v8;
          v22 = a3;
          v23 = a4;
          v24 = (v11 - v9) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_19BF8EB40();
          v26 = v19 - (_QWORD)v9;
          v27 = (uint64_t)(v19 - (_QWORD)v9) >> 1;
          if (v27 > v25)
            v25 = v27;
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v25;
          if (v28)
            v28 = (unint64_t)sub_19BFB3588(v28);
          else
            v29 = 0;
          v30 = (_DWORD *)(v28 + 4 * v24);
          *v30 = v17;
          v18 = v30 + 1;
          while (v11 != v9)
          {
            v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v41 = v18;
          v32 = v28 + 4 * v29;
          v42 = v32;
          if (v9)
            operator delete(v9);
          v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          v8 = v21;
          a5 = v20;
          v10 = v32;
        }
        else
        {
          *(_DWORD *)v11 = v17;
          v18 = v11 + 4;
        }
        v41 = v18;
        v11 = (char *)v18;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19BF8EA40((void ***)&__p);
  return v35;
}

void sub_19C0062EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C006330(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19C006370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D1A358;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C00640C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C006448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D1A3D8;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C0064E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C006520@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  size_t __len;

  __len = 0;
  v3 = (void *)sub_19BF9C284(*(_QWORD **)(a1 + 16), &__len);
  return sub_19BFA4428(a2, v3, __len);
}

uint64_t sub_19C006564(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  void *__p;
  void *v18;
  unint64_t v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v19 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v18 = v7;
      ++v6;
      v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  v14 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19C0066C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C0066E8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  std::string::size_type v12;
  double v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t **v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  const std::string *v31;
  std::string::size_type v32;
  const std::string *v33;
  double v34;
  double v35;
  std::string::size_type size;
  double v37;
  uint64_t **v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  std::string::size_type v46;
  __int128 *v47;
  _OWORD *v48;
  __int128 v49;
  std::string::size_type v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  std::string::size_type v56;
  int v57;
  char *v58;
  char **v59;
  BOOL v60;
  _BOOL8 v61;
  std::string __str;
  std::string v65;
  std::string *v66;
  char *v67;
  uint64_t v68;
  char **v69;
  char *v70[2];
  std::string v71;
  char v72[9];

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  v5 = a1;
  v70[0] = 0;
  v70[1] = 0;
  v69 = v70;
  if (v4 == v3)
  {
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
  }
  else
  {
    v8 = 0;
    v9 = a1 + 56;
    do
    {
      v10 = 0;
      v11 = v3 + 24 * v8;
      while (1)
      {
        v12 = *(char *)(v11 + 23) < 0 ? *(_QWORD *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
        if (v10 > v12)
          break;
        v13 = *(double *)sub_19BFFBFC0(v9, (_QWORD *)v11);
        std::string::basic_string(&v71, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v66);
        v66 = &v71;
        v14 = (double *)sub_19BFF8F10((uint64_t **)&v69, &v71, (_OWORD **)&v66);
        v14[7] = v13 + v14[7];
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        ++v10;
      }
      if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF)
      {
        v61 = 0;
        goto LABEL_96;
      }
      ++v8;
      v3 = *a2;
      v15 = a2[1];
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3));
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
    if (v15 != v3)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = v3 + v16;
        v19 = *(_DWORD *)(*a3 + 4 * v17);
        v20 = *(double *)sub_19BFFBFC0((uint64_t)&v69, (_QWORD *)(v3 + v16));
        v21 = *(unsigned __int8 *)(v18 + 23);
        if ((v21 & 0x80u) != 0)
          v21 = *(_QWORD *)(v18 + 8);
        std::string::basic_string(&v71, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v65);
        v22 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        v23 = sub_19C00050C((uint64_t **)&v66, (_QWORD *)v18, v18);
        v24 = (int)(sqrt(v20 / v22) * 255.0);
        if (v24 >= 255)
          v25 = 255;
        else
          v25 = v24;
        if (v24)
          v26 = 1;
        else
          v26 = v20 / v22 <= 0.0;
        v27 = v25 << 23;
        if (!v26)
          v27 = 0x800000;
        *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
        ++v17;
        v3 = *a2;
        v28 = a2[1];
        v16 += 24;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
      if (v28 != v3)
      {
        v29 = 0;
        do
        {
          v30 = 0;
          v31 = (const std::string *)(v3 + 24 * v29);
          while (1)
          {
            v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                ? v31->__r_.__value_.__l.__size_
                : HIBYTE(v31->__r_.__value_.__r.__words[2]);
            if (v30 >= v32 - 1)
              break;
            std::string::basic_string(&v65, v31, 0, v30, (std::allocator<char> *)&v71);
            v33 = v31;
            if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0)
              v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
            sub_19BFFC118((uint64_t)&__str, (const void **)&v65.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
            if (&v67 == sub_19BFAA740((uint64_t)&v66, &__str))
            {
              v34 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v65);
              if (v34 > *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str))
              {
                v35 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str);
                size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = __str.__r_.__value_.__l.__size_;
                std::string::basic_string(&v71, &__str, 0, size - 1, (std::allocator<char> *)v72);
                v37 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v71.__r_.__value_.__l.__data_);
                v38 = sub_19C00050C((uint64_t **)&v66, &__str, (uint64_t)&__str);
                v39 = (int)(sqrt(v35 / v37) * 255.0);
                if (v39 >= 255)
                  v40 = 255;
                else
                  v40 = v39;
                if (v39)
                  v41 = 1;
                else
                  v41 = v35 / v37 <= 0.0;
                v42 = (v40 << 23) | 0x7FFFFF;
                if (!v41)
                  v42 = 0xFFFFFF;
                *((_DWORD *)v38 + 14) = v42;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            ++v30;
          }
          ++v29;
          v3 = *a2;
        }
        while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    v5 = a1;
  }
  memset(&v71, 0, sizeof(v71));
  memset(&v65, 0, sizeof(v65));
  v43 = (uint64_t *)v66;
  if (v66 != (std::string *)&v67)
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = (__int128 *)(v43 + 4);
      v48 = (_OWORD *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_ >= v71.__r_.__value_.__r.__words[2])
      {
        v50 = sub_19BFFC198((uint64_t *)&v71, v47);
      }
      else
      {
        if (*((char *)v43 + 55) < 0)
        {
          sub_19BF8CD70((_BYTE *)v71.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
        }
        else
        {
          v49 = *v47;
          *(_QWORD *)(v71.__r_.__value_.__l.__size_ + 16) = v43[6];
          *v48 = v49;
        }
        v50 = (std::string::size_type)v48 + 24;
      }
      v71.__r_.__value_.__l.__size_ = v50;
      if ((unint64_t)v44 >= v46)
      {
        v51 = (v44 - v45) >> 2;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v46 - (_QWORD)v45) >> 1 > v52)
          v52 = (uint64_t)(v46 - (_QWORD)v45) >> 1;
        if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v53 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
          v53 = (unint64_t)sub_19BFB3588(v53);
        else
          v54 = 0;
        v55 = (char *)(v53 + 4 * v51);
        *(_DWORD *)v55 = *((_DWORD *)v43 + 14);
        v56 = (std::string::size_type)(v55 + 4);
        while (v44 != v45)
        {
          v57 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v55 - 1) = v57;
          v55 -= 4;
        }
        v46 = v53 + 4 * v54;
        v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v65.__r_.__value_.__l.__size_ = v56;
        v65.__r_.__value_.__r.__words[2] = v46;
        if (v45)
          operator delete(v45);
        v45 = v55;
        v44 = (char *)v56;
      }
      else
      {
        *(_DWORD *)v44 = *((_DWORD *)v43 + 14);
        v44 += 4;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      v58 = (char *)v43[1];
      if (v58)
      {
        do
        {
          v59 = (char **)v58;
          v58 = *(char **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (char **)v43[2];
          v60 = *v59 == (char *)v43;
          v43 = (uint64_t *)v59;
        }
        while (!v60);
      }
      v43 = (uint64_t *)v59;
    }
    while (v59 != &v67);
  }
  v61 = sub_19BFB8368((uint64_t *)(v5 + 8), (uint64_t **)&v71, (int **)&v65);
  if (v65.__r_.__value_.__r.__words[0])
    operator delete(v65.__r_.__value_.__l.__data_);
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  sub_19BF8EA40((void ***)&v65);
  sub_19BFB1F54(v67);
LABEL_96:
  sub_19BFB1F54(v70[0]);
  return v61;
}

void sub_19C006CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p)
    operator delete(__p);
  __p = &a28;
  sub_19BF8EA40(&__p);
  sub_19BFB1F54(a23);
  sub_19BFB1F54(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19C006DAC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_19BFB7818(a1 + 8, a2, a3);
  return 1;
}

uint64_t sub_19C006DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];

  v11[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v11[1] = v8;
  v12[0] = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v11, a2, a3);
  v12[1] = v9;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v12, a4);
}

_QWORD *sub_19C006E48(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D1A458;
  v11[1] = a4;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19BFB86D0(a1 + 8, a2, a3, (uint64_t)v13);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C006F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C006FAC(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13[0] = &off_1E3D1A458;
  v13[1] = a4;
  v14 = v13;
  sub_19BFFBC40((uint64_t)v15, v13);
  sub_19BFB8800(a1 + 8, a2, a3, (uint64_t)v15, a5);
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_19C0070A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C007118(uint64_t a1)
{
  return sub_19BF9B078(*(unsigned int **)(a1 + 16));
}

BOOL sub_19C007120(uint64_t a1, uint64_t a2)
{
  return sub_19BF9B2A8(a2);
}

uint64_t sub_19C007128(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_19BFB8A28(a1 + 8, a2, a3, a4);
}

uint64_t sub_19C007130(uint64_t a1, uint64_t a2, int *a3)
{
  int v4;
  uint64_t result;
  int v6;

  v6 = 0;
  v4 = sub_19BFB8AAC((uint64_t *)(a1 + 8), a2, &v6);
  result = 0;
  if (v4)
  {
    if ((v6 & 0x7FFFFF) == 0x7FFFFF)
    {
      return 0;
    }
    else
    {
      *a3 = v6 & 0x7FFFFF;
      return 1;
    }
  }
  return result;
}

_QWORD *sub_19C007194(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D1A458;
  v11[1] = a3;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19BFB8B04(a1 + 8, a2, (uint64_t)v13, a4);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C007288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_19C0072F8(uint64_t a1, uint64_t a2)
{
  sub_19BFB8C48(a1 + 8, a2);
}

void sub_19C007304()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C007318(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D1A458;
  result[1] = v3;
  return result;
}

uint64_t sub_19C00734C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D1A458;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C007368(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4;

  v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF)
    return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(result + 8) + 24), v4, *a3, a3[1], a4);
  return result;
}

uint64_t sub_19C007398(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1A4B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0073D4()
{
  return &unk_1E3D1A4B8;
}

void sub_19C0073E4()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C0073F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D1A3D8;
  result[1] = v3;
  return result;
}

uint64_t sub_19C00742C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D1A3D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C007448(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C007464(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1A438))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0074A0()
{
  return &unk_1E3D1A438;
}

void sub_19C0074B0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C0074C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D1A358;
  result[1] = v3;
  return result;
}

uint64_t sub_19C0074F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D1A358;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C007514(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C007530(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1A3B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C00756C()
{
  return &unk_1E3D1A3B8;
}

_QWORD *sub_19C007578(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  *a1 = &off_1E3D1A0C0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  *a1 = &off_1E3D196B8;
  a1[1] = &off_1E3D13868;
  a1[2] = 0;
  a1[3] = 0;
  v3 = a1[4];
  if (v3)
  {
    MEMORY[0x1A1AD0CB8](v3, 0x1000C8052888210);
    a1[4] = 0;
  }
  return a1;
}

_QWORD *sub_19C0075EC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D196B8;
  a1[1] = &off_1E3D13868;
  a1[2] = 0;
  a1[3] = 0;
  v2 = a1[4];
  if (v2)
  {
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8052888210);
    a1[4] = 0;
  }
  return a1;
}

void sub_19C007644(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D196B8;
  a1[1] = &off_1E3D13868;
  a1[2] = 0;
  a1[3] = 0;
  v2 = a1[4];
  if (v2)
  {
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8052888210);
    a1[4] = 0;
  }
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C0076AC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  char *v27;
  unint64_t v28;

  v5 = a4;
  v6 = a3;
  v8 = a1;
  if (a5)
  {
    __p = 0;
    v27 = 0;
    v28 = 0;
    sub_19C009510(&__p, a2);
    v10 = (char *)__p;
    if (a2)
    {
      v23 = v8;
      v24 = v6;
      v25 = v5;
      v11 = 0;
      v13 = v27;
      v12 = v28;
      do
      {
        v14 = *(_QWORD *)(a5 + 8 * v11);
        if ((unint64_t)v13 >= v12)
        {
          v15 = (v13 - v10) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
          {
            v27 = v13;
            sub_19BF8EB40();
          }
          if ((uint64_t)(v12 - (_QWORD)v10) >> 1 > v16)
            v16 = (uint64_t)(v12 - (_QWORD)v10) >> 1;
          if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v17 = (unint64_t)sub_19BFB3588(v17);
          else
            v18 = 0;
          v19 = (char *)(v17 + 4 * v15);
          *(_DWORD *)v19 = v14;
          v20 = v19 + 4;
          while (v13 != v10)
          {
            v21 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v19 - 1) = v21;
            v19 -= 4;
          }
          v12 = v17 + 4 * v18;
          if (v10)
            operator delete(v10);
          v10 = v19;
          v13 = v20;
        }
        else
        {
          *(_DWORD *)v13 = v14;
          v13 += 4;
        }
        ++v11;
      }
      while (v11 != a2);
      v27 = v13;
      v28 = v12;
      __p = v10;
      v6 = v24;
      v5 = v25;
      v8 = v23;
    }
    sub_19C0095A4((_QWORD *)(v8 + 8), a2, v6, v5, (uint64_t)v10);
    if (__p)
      operator delete(__p);
  }
  else
  {
    sub_19C0095A4((_QWORD *)(a1 + 8), a2, a3, a4, 0);
  }
  return 1;
}

void sub_19C007828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C007858(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19C007898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D19790;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C007934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C007970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D19810;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C007A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C007A48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19BFA4428(a2, *(void **)(a1 + 24), 4 * *(_QWORD *)(a1 + 16));
}

uint64_t sub_19C007A58(uint64_t a1, uint64_t **a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *__p;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;

  __p = 0;
  v3 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v32 = 0;
  v33 = 0;
  sub_19C0093E8((void **)&v34, v3);
  sub_19C00947C(&__p, v3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = v4;
      if (*((char *)v4 + 23) < 0)
        v6 = (uint64_t *)*v4;
      v7 = v35;
      if ((unint64_t)v35 >= v36)
      {
        v9 = v34;
        v10 = (uint64_t)&v35[-v34] >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          sub_19BF8EB40();
        v12 = v36 - v34;
        if ((uint64_t)(v36 - v34) >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)sub_19BFAC524(v13);
        else
          v14 = 0;
        v15 = (_QWORD *)(v13 + 8 * v10);
        *v15 = v6;
        v8 = (char *)(v15 + 1);
        if (v7 != (char *)v9)
        {
          do
          {
            v16 = *((_QWORD *)v7 - 1);
            v7 -= 8;
            *--v15 = v16;
          }
          while (v7 != (char *)v9);
          v7 = (char *)v34;
        }
        v34 = (uint64_t)v15;
        v36 = v13 + 8 * v14;
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_QWORD *)v35 = v6;
        v8 = v7 + 8;
      }
      v35 = v8;
      if (*((char *)v4 + 23) < 0)
        v17 = v4[1];
      else
        v17 = *((unsigned __int8 *)v4 + 23);
      v18 = v32;
      if (v32 >= v33)
      {
        v20 = (char *)__p;
        v21 = (v32 - (_BYTE *)__p) >> 3;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          sub_19BF8EB40();
        v23 = v33 - (_BYTE *)__p;
        if ((v33 - (_BYTE *)__p) >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)sub_19BF965C4((uint64_t)&v33, v24);
          v20 = (char *)__p;
          v18 = v32;
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        *(_QWORD *)v26 = v17;
        v19 = v26 + 8;
        while (v18 != v20)
        {
          v27 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *((_QWORD *)v26 - 1) = v27;
          v26 -= 8;
        }
        __p = v26;
        v32 = v19;
        v33 = &v25[8 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v32 = v17;
        v19 = v18 + 8;
      }
      v32 = v19;
      v4 += 3;
    }
    while (v4 != v5);
  }
  v28 = (void *)v34;
  sub_19C0095A4((_QWORD *)(a1 + 8), v3, v34, (uint64_t)__p, 0);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
  if (v28)
    operator delete(v28);
  return 1;
}

void sub_19C007CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C007CE8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  void *v44;
  void *v45;
  unint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  void *__p;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;

  v6 = *a2;
  v5 = a2[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  __p = 0;
  v53 = 0;
  v54 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  sub_19C0093E8((void **)&v55, v7);
  sub_19C00947C(&__p, v7);
  sub_19C009510((void **)&v49, v7);
  v48 = v7;
  if (v5 != v6)
  {
    v8 = 0;
    if (v7 <= 1)
      v9 = 1;
    else
      v9 = v7;
    do
    {
      v10 = *a2 + 24 * v8;
      if (*(char *)(v10 + 23) < 0)
        v10 = *(_QWORD *)v10;
      v11 = (char *)v56;
      if ((unint64_t)v56 >= v57)
      {
        v13 = v55;
        v14 = ((uint64_t)v56 - v55) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_19BF8EB40();
        v16 = v57 - v55;
        if ((uint64_t)(v57 - v55) >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v17 = (unint64_t)sub_19BFAC524(v17);
        else
          v18 = 0;
        v19 = (uint64_t *)(v17 + 8 * v14);
        *v19 = v10;
        v12 = v19 + 1;
        if (v11 != (char *)v13)
        {
          do
          {
            v20 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *--v19 = v20;
          }
          while (v11 != (char *)v13);
          v11 = (char *)v55;
        }
        v55 = (uint64_t)v19;
        v57 = v17 + 8 * v18;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v56 = v10;
        v12 = (uint64_t *)(v11 + 8);
      }
      v56 = v12;
      v21 = *a2 + 24 * v8;
      if (*(char *)(v21 + 23) < 0)
        v22 = *(_QWORD *)(v21 + 8);
      else
        v22 = *(unsigned __int8 *)(v21 + 23);
      v23 = v53;
      if (v53 >= v54)
      {
        v25 = (char *)__p;
        v26 = (v53 - (_BYTE *)__p) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          sub_19BF8EB40();
        v28 = v54 - (_BYTE *)__p;
        if ((v54 - (_BYTE *)__p) >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)sub_19BF965C4((uint64_t)&v54, v29);
          v25 = (char *)__p;
          v23 = v53;
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[8 * v26];
        *(_QWORD *)v31 = v22;
        v24 = v31 + 8;
        while (v23 != v25)
        {
          v32 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *((_QWORD *)v31 - 1) = v32;
          v31 -= 8;
        }
        __p = v31;
        v53 = v24;
        v54 = &v30[8 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)v53 = v22;
        v24 = v23 + 8;
      }
      v53 = v24;
      v33 = *(_DWORD *)(*a3 + 4 * v8);
      v34 = v50;
      if ((unint64_t)v50 >= v51)
      {
        v36 = (_DWORD *)v49;
        v37 = ((uint64_t)v50 - v49) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          sub_19BF8EB40();
        v39 = v51 - v49;
        if ((uint64_t)(v51 - v49) >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
          v40 = (unint64_t)sub_19BFB3588(v40);
        else
          v41 = 0;
        v42 = (_DWORD *)(v40 + 4 * v37);
        *v42 = v33;
        v35 = v42 + 1;
        while (v34 != v36)
        {
          v43 = *--v34;
          *--v42 = v43;
        }
        v49 = (uint64_t)v42;
        v51 = v40 + 4 * v41;
        if (v36)
          operator delete(v36);
      }
      else
      {
        *v50 = v33;
        v35 = v34 + 1;
      }
      v50 = v35;
      ++v8;
    }
    while (v8 != v9);
  }
  v44 = (void *)v55;
  v45 = (void *)v49;
  sub_19C0095A4((_QWORD *)(a1 + 8), v48, v55, (uint64_t)__p, v49);
  if (v45)
    operator delete(v45);
  if (__p)
  {
    v53 = (char *)__p;
    operator delete(__p);
  }
  if (v44)
    operator delete(v44);
  return 1;
}

void sub_19C008040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C00808C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  a1[2] = 0;
  a1[3] = 0;
  v6 = a1[4];
  if (v6)
  {
    MEMORY[0x1A1AD0CB8](v6, 0x1000C8052888210);
    a1[4] = 0;
  }
  a1[2] = a3;
  a1[3] = a2;
  return 1;
}

BOOL sub_19C0080E4(uint64_t a1, _BYTE *a2, uint64_t a3, int *a4)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  v4 = *(unsigned int **)(a1 + 24);
  v5 = *v4;
  if (a3)
  {
    v6 = 0;
    while (1)
    {
      v7 = *a2++;
      v6 ^= (v5 >> 10 << ((v5 >> 6) & 8)) ^ v7;
      v5 = v4[v6];
      if ((v5 & 0x800000FF) != v7)
        break;
      if (!--a3)
        goto LABEL_10;
    }
  }
  else
  {
    v8 = *a2;
    if (*a2)
    {
      v6 = 0;
      v9 = a2 + 1;
      while (1)
      {
        v6 ^= (v5 >> 10 << ((v5 >> 6) & 8)) ^ v8;
        v5 = v4[v6];
        if ((v5 & 0x800000FF) != v8)
          break;
        v10 = *v9++;
        v8 = v10;
        if (!v10)
        {
LABEL_10:
          if ((v5 & 0x100) != 0)
            goto LABEL_13;
          break;
        }
      }
    }
    else
    {
      v6 = 0;
      if ((v5 & 0x100) != 0)
      {
LABEL_13:
        v11 = v4[v6 ^ (v5 >> 10 << ((v5 >> 6) & 8))] & 0x7FFFFFFF;
        goto LABEL_14;
      }
    }
  }
  v11 = -1;
LABEL_14:
  *a4 = v11;
  return v11 != -1;
}

uint64_t sub_19C0081AC(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;

  result = off_1EE414EF8();
  v9 = *(_DWORD **)(v8 + 24);
  v10 = (*v9 >> 10 << ((*v9 >> 6) & 8));
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = a2[v12];
      v15 = v10 ^ v14;
      v16 = v9[v15];
      if ((v16 & 0x800000FF) != (_DWORD)v14)
        break;
      v10 = v15 ^ (v16 >> 10 << ((v16 >> 6) & 8));
      if ((v16 & 0x100) != 0)
      {
        if (v13 <= 0x7F)
        {
          v17 = result + 16 * v13;
          *(_DWORD *)v17 = v9[v10] & 0x7FFFFFFF;
          *(_QWORD *)(v17 + 8) = v12 + 1;
        }
        ++v13;
      }
      ++v12;
    }
    while (a3 != v12);
  }
  else
  {
    v18 = *a2;
    if (!*a2)
      return result;
    v13 = 0;
    v19 = 1;
    do
    {
      v20 = v10 ^ v18;
      v21 = v9[v20];
      if ((v21 & 0x800000FF) != v18)
        break;
      v10 = v20 ^ (v21 >> 10 << ((v21 >> 6) & 8));
      if ((v21 & 0x100) != 0)
      {
        if (v13 <= 0x7F)
        {
          v22 = result + 16 * v13;
          *(_DWORD *)v22 = v9[v10] & 0x7FFFFFFF;
          *(_QWORD *)(v22 + 8) = v19;
        }
        ++v13;
      }
      v18 = a2[v19++];
    }
    while (v18);
  }
  v30 = 0;
  if (v13)
  {
    v23 = v13 - 1;
    v24 = (_QWORD *)(result + 8);
    do
    {
      v25 = *((_DWORD *)v24 - 2);
      v27 = *v24;
      v24 += 2;
      v26 = v27;
      if (a3 >= v27)
        v28 = v26;
      else
        v28 = a3;
      result = sub_19BFB8D60(*(_QWORD *)(a4 + 24), v25, (uint64_t)a2, v28, (uint64_t)&v30);
      if (v30)
        v29 = 1;
      else
        v29 = v23 == 0;
      --v23;
    }
    while (!v29);
  }
  return result;
}

void sub_19C008334(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  void **v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *__dst[2];
  unint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t *, const void *, size_t))(*(_QWORD *)a1 + 120))(a1, &v18, a2, a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v18))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    if (a3 >= 0x17)
    {
      v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v11 = a3 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)a3;
      v17 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v17) = a3;
      v10 = __dst;
      if (!a3)
      {
LABEL_10:
        *((_BYTE *)v10 + a3) = 0;
        v13 = operator new(0x28uLL);
        *v13 = &off_1E3D19890;
        v13[1] = __dst;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        v20 = v13;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, &v18, v19, a5);
        v14 = v20;
        if (v20 == v19)
        {
          v15 = 4;
          v14 = v19;
        }
        else
        {
          if (!v20)
            goto LABEL_15;
          v15 = 5;
        }
        (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_15:
        if (SHIBYTE(v17) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19C0084E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C008540()
{
  return 0;
}

BOOL sub_19C008548(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

uint64_t sub_19C008558(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t a4)
{
  return sub_19C0091C0(*(_QWORD *)(a1 + 24), *a2, a3, a4);
}

uint64_t sub_19C008564(_QWORD *a1, unsigned int *a2, int *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v7 = *a2;
    v8 = a1[3];
    v9 = *(_DWORD *)(v8 + 4 * v7);
    if ((v9 & 0x100) != 0)
      v10 = *(_DWORD *)(v8 + 4 * ((v9 >> 10 << ((v9 >> 6) & 8)) ^ v7)) & 0x7FFFFFFF;
    else
      v10 = -1;
    *a3 = v10;
    return v10 != -1;
  }
  return result;
}

uint64_t sub_19C0085E0(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  void **v17;
  void *v18;
  char v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  void *__p[2];
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  unsigned __int128 v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2 != -1)
  {
    v7 = result;
    v30 = 0u;
    memset(v29, 0, sizeof(v29));
    __p[0] = 0;
    __p[1] = 0;
    v27 = 0;
    v28 = v4;
    sub_19C008994(v29, (__n128 *)__p);
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
    v25 = 0;
    if (*((_QWORD *)&v30 + 1))
    {
      while (1)
      {
        v8 = *((_QWORD *)&v29[0] + 1);
        v9 = v30;
        v10 = (unint64_t)v30 >> 7;
        v11 = *(_QWORD *)(*((_QWORD *)&v29[0] + 1) + 8 * ((unint64_t)v30 >> 7));
        v12 = v30 & 0x7F;
        v13 = (__int128 *)(v11 + 32 * v12);
        if (*((char *)v13 + 23) < 0)
        {
          sub_19BF8CD70(__p, *(void **)v13, *((_QWORD *)v13 + 1));
          v8 = *((_QWORD *)&v29[0] + 1);
          v9 = v30;
          v10 = (unint64_t)v30 >> 7;
        }
        else
        {
          v14 = *v13;
          v27 = *((_QWORD *)v13 + 2);
          *(_OWORD *)__p = v14;
        }
        v28 = *(_QWORD *)(v11 + 32 * v12 + 24);
        v15 = *(_QWORD *)(v8 + 8 * v10) + 32 * (v30 & 0x7F);
        if (*(char *)(v15 + 23) < 0)
        {
          operator delete(*(void **)v15);
          v9 = v30;
        }
        v16 = v9 + 1;
        v30 = __PAIR128__(*((unint64_t *)&v30 + 1), v16) + __PAIR128__(-1, 0);
        if (v16 >= 0x100)
        {
          operator delete(**((void ***)&v29[0] + 1));
          *((_QWORD *)&v29[0] + 1) += 8;
          *(_QWORD *)&v30 = v30 - 128;
        }
        v24 = 0;
        if (!(*(unsigned int (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v7 + 128))(v7, &v28, &v24))
          break;
        v17 = v27 >= 0 ? __p : (void **)__p[0];
        v18 = v27 >= 0 ? (void *)HIBYTE(v27) : __p[1];
        sub_19BFB8D60(*(_QWORD *)(a3 + 24), v24, (uint64_t)v17, (uint64_t)v18, (uint64_t)&v25);
        if (!v25)
          break;
        v19 = 1;
LABEL_31:
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
        if (*((_QWORD *)&v30 + 1))
          v23 = v19;
        else
          v23 = 1;
        if ((v23 & 1) != 0)
          return sub_19C008F34((uint64_t)v29);
      }
      if ((a4 & 0x80000000) != 0)
        goto LABEL_25;
      v20 = HIBYTE(v27);
      if (v27 < 0)
        v20 = (unint64_t)__p[1];
      if (v20 < a4)
      {
LABEL_25:
        v31[0] = &off_1E3D19910;
        v31[1] = v29;
        v31[2] = __p;
        v32 = v31;
        (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v7 + 144))(v7, &v28, v31);
        v21 = v32;
        if (v32 == v31)
        {
          v21 = v31;
          v22 = 4;
          goto LABEL_29;
        }
        if (v32)
        {
          v22 = 5;
LABEL_29:
          (*(void (**)(void))(*v21 + 8 * v22))();
        }
      }
      v19 = 0;
      goto LABEL_31;
    }
    return sub_19C008F34((uint64_t)v29);
  }
  return result;
}

void sub_19C008868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a16 < 0)
    operator delete(__p);
  sub_19C008F34((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0088D4(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  v5 = result;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v7 = *(_QWORD *)(v5 + 24);
    v8 = *(_DWORD *)(v7 + 4 * *a2);
    if (i == (*(_DWORD *)(v7 + 4 * ((v8 >> 10 << ((v8 >> 6) & 8)) ^ *a2 ^ i)) & 0x800000FF))
      break;
    if (i > 0xFE)
      return result;
LABEL_8:
    ;
  }
  v10 = (v8 >> 10 << ((v8 >> 6) & 8)) ^ *a2 ^ i;
  v12 = i;
  v9 = *(_QWORD *)(a3 + 24);
  if (!v9)
    sub_19BF94AC4();
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t *, char *))(*(_QWORD *)v9 + 48))(v9, &v12, &v10, &v11);
  if (!v11 && i < 0xFF)
    goto LABEL_8;
  return result;
}

__n128 sub_19C008994(_QWORD *a1, __n128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __n128 *v96;
  __n128 result;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = 16 * (v4 - v5) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x80)
    {
      a1[4] = v8 - 128;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)sub_19BFAC524(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)sub_19BFAC524(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v98 = 1;
            else
              v98 = (uint64_t)&v63[-*a1] >> 2;
            v99 = (char *)sub_19BFAC524(v98);
            v101 = &v99[8 * (v98 >> 2)];
            v102 = (uint64_t *)a1[1];
            v63 = v101;
            v103 = a1[2] - (_QWORD)v102;
            if (v103)
            {
              v63 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              v104 = 8 * (v103 >> 3);
              v105 = &v99[8 * (v98 >> 2)];
              do
              {
                v106 = *v102++;
                *(_QWORD *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v63;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)sub_19BFAC524(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v111 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v111;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)sub_19BFAC524(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v108 = v36;
      v111 = v38;
      operator delete(v30);
      v36 = v108;
    }
    v38 = v111;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)sub_19BFAC524(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v109 = v36;
            v113 = v38;
            operator delete(v78);
            v36 = v109;
            v38 = v113;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v110 = *((_QWORD *)&v36 + 1);
            v112 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v110;
            *(_QWORD *)&v38 = v112;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  v96 = (__n128 *)(*(_QWORD *)&v5[(v9 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v9 & 0x7F));
  result = *a2;
  v96[1].n128_u64[0] = a2[1].n128_u64[0];
  *v96 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  v96[1].n128_u64[1] = a2[1].n128_u64[1];
  ++a1[5];
  return result;
}

void sub_19C008F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

uint64_t sub_19C008F34(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 7];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    v9 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(_QWORD *)(a1 + 40) + v5) & 0x7F);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (uint64_t)*v6;
        }
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          v10 = (uint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 64;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    v13 = 128;
LABEL_16:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C009098()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C0090AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D19910;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C0090E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D19910;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19C009104(uint64_t a1, char *a2, uint64_t *a3)
{
  _QWORD *v4;
  __n128 __p;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD **)(a1 + 8);
  sub_19BFFC118((uint64_t)&__p, *(const void ***)(a1 + 16), *a2);
  v7 = *a3;
  sub_19C008994(v4, &__p);
  if (v6 < 0)
    operator delete((void *)__p.n128_u64[0]);
}

void sub_19C00915C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C009178(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19980))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0091B4()
{
  return &unk_1E3D19980;
}

uint64_t sub_19C0091C0(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  unsigned int v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  int v8;

  v4 = *(_DWORD *)(a1 + 4 * a2);
  if (a4)
  {
    while (1)
    {
      v5 = *a3++;
      a2 = a2 ^ (v4 >> 10 << ((v4 >> 6) & 8)) ^ v5;
      v4 = *(_DWORD *)(a1 + 4 * a2);
      if ((v4 & 0x800000FF) != v5)
        break;
      if (!--a4)
        return a2;
    }
    return -1;
  }
  v6 = *a3;
  if (*a3)
  {
    v7 = a3 + 1;
    while (1)
    {
      a2 = a2 ^ v6 ^ (v4 >> 10 << ((v4 >> 6) & 8));
      v4 = *(_DWORD *)(a1 + 4 * a2);
      if ((v4 & 0x800000FF) != v6)
        break;
      v8 = *v7++;
      v6 = v8;
      if (!v8)
        return a2;
    }
    return -1;
  }
  return a2;
}

void sub_19C009250()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C009264(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D19890;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C0092A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D19890;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C0092CC(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 + 8);
  v9 = a1[3];
  v10 = v9 + v8;
  v11 = a1[1];
  v12 = *(char *)(v11 + 23);
  if (v12 < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    v11 = a1[1];
    v9 = a1[3];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
  v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  v15 = *(_QWORD *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    v11 = a1[1];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
LABEL_9:
  if ((v12 & 0x80) != 0)
    v11 = *(_QWORD *)v11;
  return sub_19BFB8D60(*(_QWORD *)(a1[4] + 24), *a2, v11, v10, a4);
}

uint64_t sub_19C0093A0(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D198F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0093DC()
{
  return &unk_1E3D198F0;
}

void sub_19C0093E8(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_19BF8EB40();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)sub_19BFAC524(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void sub_19C00947C(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_19BF8EB40();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_19BF965C4(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_19C009510(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_19BF8EB40();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)sub_19BFB3588(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = &v4[4 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_19C0095A4(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  char v24;
  int j;
  unint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  int v54;
  int v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t k;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unint64_t v79;
  char v80;
  int m;
  unint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  size_t v89;
  _DWORD *v90;
  _DWORD *v91;
  uint64_t v92;
  int *v93;
  _DWORD *v94;
  int v95;
  uint64_t v96;
  const char *v98;
  _QWORD *exception;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  __int128 v106;
  __int128 v107;
  _QWORD v108[4];
  _QWORD v109[4];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  _DWORD v119[3];

  v5 = a2;
  v109[0] = a2;
  v109[1] = a3;
  v109[2] = a4;
  v109[3] = a5;
  v107 = 0u;
  memset(v108, 0, 28);
  v106 = 0u;
  if (!a5)
  {
    v9 = 1;
    do
    {
      v10 = v9;
      v11 = v9;
      v9 *= 2;
    }
    while (v11 < v5);
    if (v10)
      sub_19C00A524((uint64_t *)&v106 + 1, v10);
    v12 = operator new[]();
    v13 = v12;
    for (i = 0; i != 49152; i += 12)
    {
      v15 = v12 + i;
      *(_WORD *)(v15 + 8) = 0;
      *(_QWORD *)v15 = 0;
    }
    v16 = *((_QWORD *)&v107 + 1);
    *((_QWORD *)&v107 + 1) = v13;
    if (v16)
      MEMORY[0x1A1AD0CB8](v16, 0x1000C80CBA68D63);
    if (!(_DWORD)v107)
    {
      sub_19C00A7A4((uint64_t)&v106);
      v13 = *((_QWORD *)&v107 + 1);
    }
    v17 = *(_DWORD *)(v13 + 4);
    if (!LODWORD(v108[3]))
    {
      LODWORD(v108[3]) = *(_DWORD *)(v13 + 4);
      if (!v17)
        LODWORD(v108[3]) = v107;
    }
    v18 = *(_DWORD *)v13;
    *(_DWORD *)(v13 + 12 * (*(_DWORD *)v13 & 0xFFF) + 4) = v17;
    *(_DWORD *)(v13 + 12 * (*(_DWORD *)(v13 + 4) & 0xFFF)) = v18;
    *(_WORD *)(v13 + 8) = 257;
    **((_DWORD **)&v106 + 1) = **((_DWORD **)&v106 + 1) & 0x80000100 | 0x400;
    if (v5)
    {
      sub_19C00A9B4((uint64_t)&v106, v109, 0, v5, 0, 0);
      v13 = *((_QWORD *)&v107 + 1);
    }
    v19 = v107 >> 8;
    if (v107 >> 8 <= 0x10)
      v20 = 0;
    else
      v20 = (v107 >> 8) - 16;
    if (v20 != v107 >> 8)
    {
      v21 = v20 << 8;
      do
      {
        v22 = 0;
        v23 = v20 << 8;
        do
        {
          v24 = v21 + v22;
          if (!*(_BYTE *)(v13 + 12 * ((v21 + v22) & 0xFFF) + 9))
            goto LABEL_28;
          ++v22;
        }
        while (v22 != 256);
        v24 = 0;
LABEL_28:
        for (j = 0; j != 256; ++j)
        {
          if (!*(_BYTE *)(v13 + 12 * (v23 & 0xFFF) + 8))
          {
            if (v23 >= v107)
            {
              sub_19C00A7A4((uint64_t)&v106);
              v13 = *((_QWORD *)&v107 + 1);
            }
            v26 = v13 + 12 * (v23 & 0xFFF);
            v29 = *(_DWORD *)(v26 + 4);
            v27 = (_DWORD *)(v26 + 4);
            v28 = v29;
            if (v23 == LODWORD(v108[3]))
            {
              LODWORD(v108[3]) = v28;
              if (v23 == v28)
                LODWORD(v108[3]) = v107;
            }
            v30 = v13 + 12 * (v23 & 0xFFF);
            v31 = *(_DWORD *)v30;
            *(_DWORD *)(v13 + 12 * (v31 & 0xFFF) + 4) = v28;
            *(_DWORD *)(v13 + 12 * (*v27 & 0xFFF)) = v31;
            *(_BYTE *)(v30 + 8) = 1;
            *(_BYTE *)(*((_QWORD *)&v106 + 1) + 4 * v23) = v24 ^ (v21 + j);
          }
          ++v23;
        }
        ++v20;
        v21 += 256;
      }
      while (v20 != v19);
    }
    if (v13)
    {
      MEMORY[0x1A1AD0CB8](v13, 0x1000C80CBA68D63);
      *((_QWORD *)&v107 + 1) = 0;
    }
    v32 = a1;
    if (v108[0])
    {
      MEMORY[0x1A1AD0CB8](v108[0], 0x1000C8077774924);
      v108[0] = 0;
    }
    v108[1] = 0;
    goto LABEL_152;
  }
  v6 = a4;
  v118 = 0;
  v116 = 0uLL;
  v117 = 0uLL;
  v114 = 0uLL;
  v115 = 0uLL;
  v112 = 0uLL;
  v113 = 0uLL;
  v110 = 0uLL;
  v111 = 0uLL;
  v119[0] = 0;
  sub_19C00BC24((uint64_t)&v115, 0x400u, v119);
  v7 = DWORD2(v117);
  if (DWORD2(v117))
  {
    v8 = v110 + 12 * *(unsigned int *)(v117 + 4 * DWORD2(v117) - 4);
    *(_DWORD *)(v8 + 7) = 0;
    *(_QWORD *)v8 = 0;
    DWORD2(v117) = v7 - 1;
  }
  else
  {
    sub_19C00B8FC((uint64_t)&v110);
  }
  sub_19C00BAA4((uint64_t)&v113);
  sub_19C00BAF0((uint64_t)&v111);
  v33 = DWORD2(v112);
  if (DWORD2(v112) == HIDWORD(v112))
  {
    sub_19C00A358((uint64_t *)&v112, DWORD2(v112) + 1);
    v33 = DWORD2(v112);
  }
  DWORD2(v112) = v33 + 1;
  v118 = 1;
  *(_BYTE *)(v110 + 8) = -1;
  v119[0] = 0;
  sub_19C00BA54((uint64_t)&v116, v119);
  if (!v5)
    goto LABEL_79;
  v34 = 0;
  v101 = v5 + 1;
  v102 = v6;
  v103 = v5;
  do
  {
    v35 = *(_QWORD *)(a3 + 8 * v34);
    if (v6)
    {
      v36 = *(_QWORD *)(v6 + 8 * v34);
    }
    else
    {
      v37 = 0;
      while (*(unsigned __int8 *)(v35 + v37++))
        ;
      v36 = v37 - 1;
    }
    v39 = *(_DWORD *)(a5 + 4 * v34);
    if (v39 < 0)
    {
      v98 = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Devel"
            "oper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/darts_clone"
            ".h:1146: exception: failed to insert key: negative value";
      goto LABEL_162;
    }
    if (!v36)
    {
      v98 = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Devel"
            "oper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/darts_clone"
            ".h:1148: exception: failed to insert key: zero-length key";
LABEL_162:
      exception = __cxa_allocate_exception(0x10uLL);
      *exception = &off_1E3D13888;
      exception[1] = v98;
      __cxa_throw(exception, (struct type_info *)&unk_1E3D12D38, (void (*)(void *))std::exception::~exception);
    }
    v40 = 0;
    v41 = 0;
    while (1)
    {
      v42 = *(_DWORD *)(v110 + 12 * v41);
      if (!v42)
        goto LABEL_64;
      v43 = *(unsigned __int8 *)(v35 + v40);
      if (v40 < v36 && !*(_BYTE *)(v35 + v40))
      {
        v98 = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Dev"
              "eloper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/darts_c"
              "lone.h:1162: exception: failed to insert key: invalid null character";
        goto LABEL_162;
      }
      v44 = *(unsigned __int8 *)(v110 + 12 * v42 + 8);
      if (v43 < v44)
      {
        v98 = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Dev"
              "eloper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/darts_c"
              "lone.h:1167: exception: failed to insert key: wrong key order";
        goto LABEL_162;
      }
      if (v43 > v44)
        break;
      ++v40;
      v41 = *(_DWORD *)(v110 + 12 * v41);
      if (v40 > v36)
        goto LABEL_76;
    }
    *(_BYTE *)(v110 + 12 * v42 + 10) = 1;
    sub_19C00B458((uint64_t)&v110, v42);
LABEL_64:
    if (v40 <= v36)
    {
      do
      {
        if (v40 >= v36)
          v46 = 0;
        else
          v46 = *(_BYTE *)(v35 + v40);
        v47 = DWORD2(v117);
        if (DWORD2(v117))
        {
          v48 = v110;
          v45 = *(_DWORD *)(v117 + 4 * DWORD2(v117) - 4);
          v49 = v110 + 12 * v45;
          *(_DWORD *)(v49 + 7) = 0;
          *(_QWORD *)v49 = 0;
          DWORD2(v117) = v47 - 1;
        }
        else
        {
          v45 = DWORD2(v110);
          sub_19C00B8FC((uint64_t)&v110);
          v48 = v110;
        }
        v119[0] = v45;
        v50 = (unsigned int *)(v48 + 12 * v41);
        v51 = *v50;
        if (!*v50)
          *(_BYTE *)(v48 + 12 * v45 + 9) = 1;
        v52 = v48 + 12 * v45;
        *(_DWORD *)(v52 + 4) = v51;
        *(_BYTE *)(v52 + 8) = v46;
        *v50 = v45;
        sub_19C00BA54((uint64_t)&v116, v119);
        ++v40;
        v41 = v45;
      }
      while (v40 <= v36);
    }
    else
    {
      v45 = v41;
    }
    *(_DWORD *)(v110 + 12 * v45) = v39;
    v6 = v102;
    v5 = v103;
LABEL_76:
    ++v34;
    if ((_QWORD)v106)
      ((void (*)(uint64_t, unint64_t))v106)(v34, v101);
  }
  while (v34 != v5);
LABEL_79:
  sub_19C00B458((uint64_t)&v110, 0);
  v53 = *(_BYTE *)(v110 + 8);
  v54 = *(_DWORD *)v110;
  if (v53)
    v55 = (2 * *(unsigned __int8 *)(v110 + 9)) | (4 * v54);
  else
    v55 = 2 * v54;
  *(_DWORD *)v111 = v55 | *(unsigned __int8 *)(v110 + 10);
  *(_BYTE *)v112 = v53;
  if ((_QWORD)v110)
  {
    MEMORY[0x1A1AD0CB8](v110, 0x1000C8077774924);
    *(_QWORD *)&v110 = 0;
  }
  *((_QWORD *)&v110 + 1) = 0;
  if ((_QWORD)v115)
  {
    MEMORY[0x1A1AD0CB8](v115, 0x1000C8077774924);
    *(_QWORD *)&v115 = 0;
  }
  *((_QWORD *)&v115 + 1) = 0;
  if ((_QWORD)v116)
  {
    MEMORY[0x1A1AD0CB8](v116, 0x1000C8077774924);
    *(_QWORD *)&v116 = 0;
  }
  *((_QWORD *)&v116 + 1) = 0;
  if ((_QWORD)v117)
  {
    MEMORY[0x1A1AD0CB8](v117, 0x1000C8077774924);
    *(_QWORD *)&v117 = 0;
  }
  *((_QWORD *)&v117 + 1) = 0;
  v56 = (_DWORD *)operator new[]();
  v57 = v114;
  *(_QWORD *)&v114 = v56;
  if (v57)
    MEMORY[0x1A1AD0CB8](v57, 0x1000C8052888210);
  DWORD2(v114) = 0;
  v58 = DWORD2(v113);
  if (DWORD2(v113))
  {
    v59 = 0;
    v60 = (unsigned int *)v113;
    do
    {
      *v56++ = v59;
      v61 = *v60++;
      v62 = ((((((v61 >> 1) & 0x55555555) + (v61 & 0x55555555)) >> 2) & 0x33333333)
           + ((((v61 >> 1) & 0x55555555) + (v61 & 0x55555555)) & 0x33333333)
           + (((((((v61 >> 1) & 0x55555555) + (v61 & 0x55555555)) >> 2) & 0x33333333)
             + ((((v61 >> 1) & 0x55555555) + (v61 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
      v59 += ((_BYTE)v62 + BYTE1(v62) + ((v62 + (v62 >> 8)) >> 16)) & 0x3F;
      DWORD2(v114) = v59;
      --v58;
    }
    while (v58);
  }
  v63 = 1;
  do
  {
    v64 = v63;
    v63 *= 2;
  }
  while (DWORD2(v111) > v64);
  if (DWORD1(v107) < v64)
    sub_19C00A524((uint64_t *)&v106 + 1, v64);
  v65 = (_DWORD *)operator new[]();
  v66 = v108[2];
  v108[2] = v65;
  if (v66)
    MEMORY[0x1A1AD0CB8](v66, 0x1000C8052888210);
  v67 = DWORD2(v114);
  if (DWORD2(v114))
  {
    do
    {
      *v65++ = 0;
      --v67;
    }
    while (v67);
  }
  v68 = operator new[]();
  v69 = v68;
  for (k = 0; k != 49152; k += 12)
  {
    v71 = v68 + k;
    *(_WORD *)(v71 + 8) = 0;
    *(_QWORD *)v71 = 0;
  }
  v72 = *((_QWORD *)&v107 + 1);
  *((_QWORD *)&v107 + 1) = v69;
  if (v72)
    MEMORY[0x1A1AD0CB8](v72, 0x1000C80CBA68D63);
  if (!(_DWORD)v107)
  {
    sub_19C00A7A4((uint64_t)&v106);
    v69 = *((_QWORD *)&v107 + 1);
  }
  v73 = *(_DWORD *)(v69 + 4);
  if (!LODWORD(v108[3]))
  {
    LODWORD(v108[3]) = *(_DWORD *)(v69 + 4);
    if (!v73)
      LODWORD(v108[3]) = v107;
  }
  v74 = *(_DWORD *)v69;
  *(_DWORD *)(v69 + 12 * (*(_DWORD *)v69 & 0xFFF) + 4) = v73;
  *(_DWORD *)(v69 + 12 * (*(_DWORD *)(v69 + 4) & 0xFFF)) = v74;
  *(_WORD *)(v69 + 8) = 257;
  **((_DWORD **)&v106 + 1) = **((_DWORD **)&v106 + 1) & 0x80000100 | 0x400;
  if (*(_DWORD *)v111 >= 4u)
  {
    sub_19C00B038((uint64_t)&v106, &v110, 0, 0);
    v69 = *((_QWORD *)&v107 + 1);
  }
  v75 = v107 >> 8;
  if (v107 >> 8 <= 0x10)
    v76 = 0;
  else
    v76 = (v107 >> 8) - 16;
  if (v76 != v107 >> 8)
  {
    v77 = v76 << 8;
    do
    {
      v78 = 0;
      v79 = v76 << 8;
      while (1)
      {
        v80 = v77 + v78;
        if (!*(_BYTE *)(v69 + 12 * ((v77 + v78) & 0xFFF) + 9))
          break;
        if (++v78 == 256)
        {
          v80 = 0;
          break;
        }
      }
      for (m = 0; m != 256; ++m)
      {
        if (!*(_BYTE *)(v69 + 12 * (v79 & 0xFFF) + 8))
        {
          if (v79 >= v107)
          {
            sub_19C00A7A4((uint64_t)&v106);
            v69 = *((_QWORD *)&v107 + 1);
          }
          v82 = v69 + 12 * (v79 & 0xFFF);
          v85 = *(_DWORD *)(v82 + 4);
          v83 = (_DWORD *)(v82 + 4);
          v84 = v85;
          if (v79 == LODWORD(v108[3]))
          {
            LODWORD(v108[3]) = v84;
            if (v79 == v84)
              LODWORD(v108[3]) = v107;
          }
          v86 = v69 + 12 * (v79 & 0xFFF);
          v87 = *(_DWORD *)v86;
          *(_DWORD *)(v69 + 12 * (v87 & 0xFFF) + 4) = v84;
          *(_DWORD *)(v69 + 12 * (*v83 & 0xFFF)) = v87;
          *(_BYTE *)(v86 + 8) = 1;
          *(_BYTE *)(*((_QWORD *)&v106 + 1) + 4 * v79) = v80 ^ (v77 + m);
        }
        ++v79;
      }
      ++v76;
      v77 += 256;
    }
    while (v76 != v75);
  }
  if (v69)
  {
    MEMORY[0x1A1AD0CB8](v69, 0x1000C80CBA68D63);
    *((_QWORD *)&v107 + 1) = 0;
  }
  v32 = a1;
  if (v108[0])
  {
    MEMORY[0x1A1AD0CB8](v108[0], 0x1000C8077774924);
    v108[0] = 0;
  }
  v108[1] = 0;
  if (v108[2])
  {
    MEMORY[0x1A1AD0CB8](v108[2], 0x1000C8052888210);
    v108[2] = 0;
  }
  if ((_QWORD)v110)
  {
    MEMORY[0x1A1AD0CB8](v110, 0x1000C8077774924);
    *(_QWORD *)&v110 = 0;
  }
  *((_QWORD *)&v110 + 1) = 0;
  if ((_QWORD)v111)
  {
    MEMORY[0x1A1AD0CB8](v111, 0x1000C8077774924);
    *(_QWORD *)&v111 = 0;
  }
  *((_QWORD *)&v111 + 1) = 0;
  if ((_QWORD)v112)
  {
    MEMORY[0x1A1AD0CB8](v112, 0x1000C8077774924);
    *(_QWORD *)&v112 = 0;
  }
  *((_QWORD *)&v112 + 1) = 0;
  sub_19C00A63C((uint64_t)&v113);
  if ((_QWORD)v115)
  {
    MEMORY[0x1A1AD0CB8](v115, 0x1000C8077774924);
    *(_QWORD *)&v115 = 0;
  }
  *((_QWORD *)&v115 + 1) = 0;
  if ((_QWORD)v116)
  {
    MEMORY[0x1A1AD0CB8](v116, 0x1000C8077774924);
    *(_QWORD *)&v116 = 0;
  }
  *((_QWORD *)&v116 + 1) = 0;
  if ((_QWORD)v117)
  {
    MEMORY[0x1A1AD0CB8](v117, 0x1000C8077774924);
    *(_QWORD *)&v117 = 0;
  }
  *((_QWORD *)&v117 + 1) = 0;
  v118 = 0;
  sub_19C00A67C(&v110);
LABEL_152:
  v88 = v107;
  v89 = 4 * v107;
  v90 = (_DWORD *)operator new[]();
  v91 = v90;
  if ((_DWORD)v88)
    bzero(v90, v89);
  v92 = v107;
  if ((_DWORD)v107)
  {
    v93 = (int *)*((_QWORD *)&v106 + 1);
    v94 = v91;
    do
    {
      v95 = *v93++;
      *v94++ = v95;
      --v92;
    }
    while (v92);
  }
  v32[1] = 0;
  v32[2] = 0;
  v96 = v32[3];
  if (v96)
  {
    MEMORY[0x1A1AD0CB8](v96, 0x1000C8052888210);
    v32[3] = 0;
  }
  v32[1] = v88;
  v32[2] = v91;
  v32[3] = v91;
  return sub_19C00A1A4((uint64_t)&v106);
}

void sub_19C00A15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  __cxa_end_catch();
  sub_19C00A67C(&a29);
  sub_19C00A1A4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_19C00A1A4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  sub_19C00A280((uint64_t *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    MEMORY[0x1A1AD0CB8](v3, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 24) = 0;
  }
  sub_19C00A2C8(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    MEMORY[0x1A1AD0CB8](v4, 0x1000C8052888210);
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_DWORD *)(a1 + 56) = 0;
  sub_19C00A314((_QWORD *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    MEMORY[0x1A1AD0CB8](v5, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 24) = 0;
  }
  sub_19C00A280(v2);
  if (*v2)
  {
    MEMORY[0x1A1AD0CB8](*v2, 0x1000C8077774924);
    *v2 = 0;
  }
  return a1;
}

uint64_t sub_19C00A280(uint64_t *a1)
{
  uint64_t result;

  sub_19C00A4AC((uint64_t)a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1A1AD0CB8](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  return result;
}

uint64_t sub_19C00A2C8(uint64_t a1)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8))
    *(_DWORD *)(a1 + 8) = 0;
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    result = MEMORY[0x1A1AD0CB8]();
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

_QWORD *sub_19C00A314(_QWORD *a1)
{
  sub_19C00A2C8((uint64_t)a1);
  if (*a1)
  {
    MEMORY[0x1A1AD0CB8](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_19C00A358(uint64_t *a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t i;

  if (a2 >= 2 * *((_DWORD *)a1 + 3))
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  v6 = *((unsigned int *)a1 + 2);
  result = *a1;
  if ((_DWORD)v6)
  {
    for (i = 0; i != v6; ++i)
      *(_BYTE *)(v5 + i) = *(_BYTE *)(result + i);
    *a1 = v5;
    *((_DWORD *)a1 + 3) = v4;
LABEL_11:
    JUMPOUT(0x1A1AD0CB8);
  }
  *a1 = v5;
  *((_DWORD *)a1 + 3) = v4;
  if (result)
    goto LABEL_11;
  return result;
}

void sub_19C00A470(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

const char *sub_19C00A494(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(const char **)(a1 + 8);
  else
    return "";
}

void sub_19C00A4AC(uint64_t a1, unsigned int a2)
{
  unsigned int v4;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 > a2)
  {
    *(_DWORD *)(a1 + 8) = a2;
    v4 = a2;
  }
  if (*(_DWORD *)(a1 + 12) < a2)
  {
    sub_19C00A524((uint64_t *)a1, a2);
    v4 = *(_DWORD *)(a1 + 8);
  }
  if (v4 < a2)
  {
    bzero((void *)(*(_QWORD *)a1 + 4 * v4), 4 * (~v4 + a2) + 4);
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_19C00A524(uint64_t *a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (a2 >= 2 * *((_DWORD *)a1 + 3))
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  v6 = *((unsigned int *)a1 + 2);
  result = *a1;
  if ((_DWORD)v6)
  {
    v8 = 0;
    v9 = 4 * v6;
    do
    {
      *(_DWORD *)(v5 + v8) = *(_DWORD *)(result + v8);
      v8 += 4;
    }
    while (v9 != v8);
    *a1 = v5;
    *((_DWORD *)a1 + 3) = v4;
LABEL_11:
    JUMPOUT(0x1A1AD0CB8);
  }
  *a1 = v5;
  *((_DWORD *)a1 + 3) = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t sub_19C00A63C(uint64_t a1)
{
  uint64_t result;

  sub_19C00A2C8(a1);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = MEMORY[0x1A1AD0CB8](result, 0x1000C8052888210);
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

_QWORD *sub_19C00A67C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  sub_19C00A2C8((uint64_t)a1);
  v2 = a1 + 2;
  sub_19C00A2C8((uint64_t)(a1 + 2));
  sub_19C00A2C8((uint64_t)(a1 + 4));
  sub_19C00A63C((uint64_t)(a1 + 6));
  sub_19C00A2C8((uint64_t)(a1 + 10));
  sub_19C00A2C8((uint64_t)(a1 + 12));
  sub_19C00A2C8((uint64_t)(a1 + 14));
  a1[16] = 0;
  sub_19C00AEFC(a1 + 14);
  sub_19C00AEFC(a1 + 12);
  sub_19C00A314(a1 + 10);
  sub_19C00A63C((uint64_t)(a1 + 6));
  v3 = a1[8];
  if (v3)
  {
    MEMORY[0x1A1AD0CB8](v3, 0x1000C8052888210);
    a1[8] = 0;
  }
  sub_19C00A314(a1 + 6);
  sub_19C00A314(a1 + 4);
  sub_19C00A2C8((uint64_t)(a1 + 2));
  if (*v2)
  {
    MEMORY[0x1A1AD0CB8](*v2, 0x1000C8077774924);
    *v2 = 0;
  }
  sub_19C00A2C8((uint64_t)a1);
  if (*a1)
  {
    MEMORY[0x1A1AD0CB8](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

void sub_19C00A7A4(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unsigned int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 16);
  v4 = v3 + 256;
  if ((v3 >> 8) - 16 > 0xFFFFFFEE)
  {
    sub_19C00A4AC(a1 + 8, v3 + 256);
  }
  else
  {
    v5 = 0;
    v6 = ((v3 >> 8) - 16) << 8;
    v7 = *(_QWORD *)(a1 + 24);
    while (1)
    {
      v8 = v5;
      if (!*(_BYTE *)(v7 + 12 * (((_DWORD)v6 + v5) & 0xFFF) + 9))
        break;
      if (++v5 == 256)
      {
        v8 = 0;
        break;
      }
    }
    v9 = 0;
    v10 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(_BYTE *)(v7 + v10 + v9 + 8))
      {
        if (v6 >= *(unsigned int *)(a1 + 16))
        {
          sub_19C00A7A4(a1);
          v7 = *(_QWORD *)(a1 + 24);
        }
        v11 = (int *)(v7 + v10 + v9);
        v12 = v11[1];
        if (v6 == *(_DWORD *)(a1 + 56))
        {
          *(_DWORD *)(a1 + 56) = v12;
          if (v6 == v12)
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 16);
        }
        v13 = *v11;
        *(_DWORD *)(v7 + 12 * (*v11 & 0xFFF) + 4) = v12;
        *(_DWORD *)(v7 + 12 * (v11[1] & 0xFFF)) = v13;
        *((_BYTE *)v11 + 8) = 1;
        *(_BYTE *)(*v2 + 4 * v6) = v8 ^ v6;
      }
      ++v6;
      v9 += 12;
    }
    while ((_DWORD)v9 != 3072);
    sub_19C00A4AC((uint64_t)v2, v3 + 256);
    if (v3 <= 0xFFFFFEFF)
    {
      v14 = *(_QWORD *)(a1 + 24);
      v15 = v3;
      do
        *(_WORD *)(v14 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v15 < v4);
    }
  }
  v16 = *(_QWORD *)(a1 + 24);
  if ((int)v3 + 1 < v4)
  {
    v17 = v3;
    do
    {
      *(_DWORD *)(v16 + 12 * (v17 & 0xFFF) + 4) = v17 + 1;
      *(_DWORD *)(v16 + 12 * ((v17 + 1) & 0xFFF)) = v17;
      v18 = v17 + 2;
      ++v17;
    }
    while (v18 != v4);
  }
  v19 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v16 + v19) = v3 + 255;
  v20 = *(_DWORD *)(a1 + 56);
  v21 = 12 * (v20 & 0xFFF);
  *(_DWORD *)(v16 + v19) = *(_DWORD *)(v16 + v21);
  LOWORD(v19) = *(_DWORD *)(v16 + v21);
  *(_DWORD *)(v16 + 12 * (((_DWORD)v3 + 255) & 0xFFF) + 4) = v20;
  *(_DWORD *)(v16 + 12 * (v19 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v16 + v21) = v3 + 255;
}

void sub_19C00A9B4(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unint64_t v8;
  uint64_t *v12;
  int v13;
  unint64_t i;
  uint64_t v15;
  void (*v16)(unint64_t, uint64_t);
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  _QWORD *exception;
  const char *v50;
  unsigned int v52;
  unsigned __int8 v53;

  v8 = a4;
  v12 = (uint64_t *)(a1 + 32);
  while (1)
  {
    if (*(_DWORD *)(a1 + 40))
      *(_DWORD *)(a1 + 40) = 0;
    v13 = -1;
    if (a3 < v8)
    {
      for (i = a3; v8 != i; ++i)
      {
        v53 = 0;
        v15 = a2[2];
        if (v15)
        {
          if (*(_QWORD *)(v15 + 8 * i) > a5)
          {
            v53 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * i) + a5);
            LODWORD(v16) = v53;
            if (!v53)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              v50 = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Conten"
                    "ts/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/"
                    "trie/darts_clone.h:1731: exception: failed to build double-array: invalid null character";
              goto LABEL_81;
            }
            goto LABEL_21;
          }
        }
        else
        {
          v53 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * i) + a5);
          LODWORD(v16) = v53;
          if (v53)
            goto LABEL_21;
        }
        v17 = a2[3];
        if (v17)
        {
          if ((*(_DWORD *)(v17 + 4 * i) & 0x80000000) != 0)
            goto LABEL_80;
        }
        else if ((i & 0x80000000) != 0)
        {
LABEL_80:
          exception = __cxa_allocate_exception(0x10uLL);
          v50 = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/D"
                "eveloper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/dar"
                "ts_clone.h:1733: exception: failed to build double-array: negative value";
LABEL_81:
          *exception = &off_1E3D13888;
          exception[1] = v50;
          __cxa_throw(exception, (struct type_info *)&unk_1E3D12D38, (void (*)(void *))std::exception::~exception);
        }
        if (v13 == -1)
        {
          if (v17)
            v13 = *(_DWORD *)(v17 + 4 * i);
          else
            v13 = i;
        }
        v16 = *(void (**)(unint64_t, uint64_t))a1;
        if (*(_QWORD *)a1)
        {
          v16(i + 1, *a2 + 1);
          LODWORD(v16) = 0;
        }
LABEL_21:
        v18 = *(_DWORD *)(a1 + 40);
        if (!v18)
          goto LABEL_25;
        v19 = *(unsigned __int8 *)(*v12 + (v18 - 1));
        if ((_DWORD)v16 != v19)
        {
          if (v16 < v19)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v50 = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents"
                  "/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie"
                  "/darts_clone.h:1748: exception: failed to build double-array: wrong key order";
            goto LABEL_81;
          }
LABEL_25:
          sub_19C00AEAC((uint64_t)v12, &v53);
        }
      }
    }
    v20 = *(_DWORD *)(a1 + 56);
    v21 = *(_DWORD *)(a1 + 16);
    if (v20 >= v21)
    {
LABEL_39:
      v26 = v21 | a6;
    }
    else
    {
      v23 = *(_QWORD *)(a1 + 24);
      v22 = *(unsigned __int8 **)(a1 + 32);
      v24 = *v22;
      v25 = *(_DWORD *)(a1 + 56);
      while (1)
      {
        v26 = v25 ^ v24;
        v27 = (v25 ^ v24) & 0xFFF;
        if (!*(_BYTE *)(v23 + 12 * v27 + 9)
          && (v26 == a6 || ((v26 ^ a6) & 0x1FE00000) == 0))
        {
          v28 = *(unsigned int *)(a1 + 40);
          if (v28 < 2)
            goto LABEL_40;
          if (!*(_BYTE *)(v23 + 12 * (v27 ^ v22[1]) + 8))
            break;
        }
LABEL_38:
        v25 = *(_DWORD *)(v23 + 12 * (v25 & 0xFFF) + 4);
        if (v25 == v20)
          goto LABEL_39;
      }
      v29 = 2;
      while (v28 != v29)
      {
        v30 = v29;
        if (*(unsigned __int8 *)(v23 + 12 * (v27 ^ v22[v29++]) + 8))
        {
          if (v30 >= v28)
            break;
          goto LABEL_38;
        }
      }
    }
LABEL_40:
    sub_19C00AE40((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a6), v26 ^ a6);
    if (*(_DWORD *)(a1 + 40))
    {
      v32 = a6;
      v33 = 0;
      v34 = v13;
      v35 = v32;
      v52 = v34 | 0x80000000;
      v36 = *v12;
      do
      {
        v37 = v26 ^ *(unsigned __int8 *)(v36 + v33);
        if (*(_DWORD *)(a1 + 16) <= v37)
          sub_19C00A7A4(a1);
        if (*(_DWORD *)(a1 + 56) == v37)
        {
          v38 = v37 & 0xFFF;
          v39 = *(_QWORD *)(a1 + 24);
          v40 = *(_DWORD *)(v39 + 12 * (v37 & 0xFFF) + 4);
          *(_DWORD *)(a1 + 56) = v40;
          if (v40 == v37)
          {
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 16);
            v40 = v37;
          }
        }
        else
        {
          v39 = *(_QWORD *)(a1 + 24);
          v38 = v37 & 0xFFF;
          v40 = *(_DWORD *)(v39 + 12 * (v37 & 0xFFF) + 4);
        }
        v41 = (int *)(v39 + 12 * v38);
        v42 = *v41;
        *(_DWORD *)(v39 + 12 * (v42 & 0xFFF) + 4) = v40;
        *(_DWORD *)(v39 + 12 * (v41[1] & 0xFFF)) = v42;
        *((_BYTE *)v41 + 8) = 1;
        v36 = *v12;
        if (*(_BYTE *)(*v12 + v33))
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 8) + 4 * v37) = *(_BYTE *)(*v12 + v33);
        }
        else
        {
          v43 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)(v43 + 4 * v35) |= 0x100u;
          *(_DWORD *)(v43 + 4 * v37) = v52;
        }
        ++v33;
      }
      while (v33 < *(unsigned int *)(a1 + 40));
    }
    else
    {
      v39 = *(_QWORD *)(a1 + 24);
    }
    *(_BYTE *)(v39 + 12 * (v26 & 0xFFF) + 9) = 1;
    v8 = a4;
    if (a3 < a4)
    {
      v44 = a2[2];
      while (v44 && *(_QWORD *)(v44 + 8 * a3) <= a5 || !*(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3)
          return;
      }
    }
    if (a3 == a4)
      break;
    v45 = a2[2];
    if (v45 && *(_QWORD *)(v45 + 8 * a3) <= a5)
      v46 = 0;
    else
      v46 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
    v47 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v45 && *(_QWORD *)(v45 + 8 * v47) <= a5)
          v48 = 0;
        else
          v48 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v47) + a5);
        if (v48 != v46)
        {
          sub_19C00A9B4(a1, a2, a3, v47, a5 + 1, v26 ^ v46);
          v45 = a2[2];
          if (v45 && *(_QWORD *)(v45 + 8 * v47) <= a5)
            v46 = 0;
          else
            v46 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v47) + a5);
          a3 = v47;
        }
        ++v47;
      }
      while (a4 != v47);
    }
    a6 = v26 ^ v46;
    ++a5;
  }
}

unsigned int *sub_19C00AE40(unsigned int *result, unsigned int a2)
{
  int v2;
  _QWORD *exception;

  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = &off_1E3D13888;
    exception[1] = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Content"
                   "s/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/tr"
                   "ie/darts_clone.h:1385: exception: failed to modify unit: too large offset";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D12D38, (void (*)(void *))std::exception::~exception);
  }
  v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000)
    v2 = a2 << 10;
  *result = *result & 0x800001FF | v2;
  return result;
}

uint64_t sub_19C00AEAC(uint64_t result, _BYTE *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 == *(_DWORD *)(result + 12))
  {
    result = sub_19C00A358((uint64_t *)result, v4 + 1);
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(v3 + 8) = v4 + 1;
  *(_BYTE *)(*(_QWORD *)v3 + v4) = *a2;
  return result;
}

_QWORD *sub_19C00AEFC(_QWORD *a1)
{
  sub_19C00A2C8((uint64_t)a1);
  return sub_19C00A314(a1);
}

uint64_t sub_19C00AF20(uint64_t *a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (a2 >= 2 * *((_DWORD *)a1 + 3))
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  v6 = *((unsigned int *)a1 + 2);
  result = *a1;
  if ((_DWORD)v6)
  {
    v8 = 0;
    v9 = 4 * v6;
    do
    {
      *(_DWORD *)(v5 + v8) = *(_DWORD *)(result + v8);
      v8 += 4;
    }
    while (v9 != v8);
    *a1 = v5;
    *((_DWORD *)a1 + 3) = v4;
LABEL_11:
    JUMPOUT(0x1A1AD0CB8);
  }
  *a1 = v5;
  *((_DWORD *)a1 + 3) = v4;
  if (result)
    goto LABEL_11;
  return result;
}

unsigned int *sub_19C00B038(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  int *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *result;
  int v45;
  int v46;
  unint64_t v47;
  char v48;

  v8 = *(unsigned int *)(a2[2] + 4 * a3);
  v9 = v8 >> 2;
  v10 = v8 >> 7;
  v11 = a2[6];
  v12 = 1 << (v8 >> 2);
  if ((v12 & *(_DWORD *)(v11 + 4 * (v8 >> 7))) != 0
    && (v13 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * (sub_19C00B3FC(v11, a2[8], v8 >> 2) - 1))) != 0
    && ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(_BYTE *)(a2[4] + v9))
    {
      v16 = *(_QWORD *)(a1 + 8);
      v17 = a4;
    }
    else
    {
      v17 = a4;
      v16 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return sub_19C00AE40((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    if (*(_DWORD *)(a1 + 40))
      *(_DWORD *)(a1 + 40) = 0;
    if (v8 >= 4)
    {
      v18 = v8 >> 2;
      do
      {
        v48 = *(_BYTE *)(a2[4] + v18);
        sub_19C00AEAC(a1 + 32, &v48);
        v19 = *(_DWORD *)(a2[2] + 4 * v18);
        v20 = __CFADD__((_DWORD)v18, 1);
        LODWORD(v18) = v18 + 1;
        v21 = v20;
      }
      while ((v19 & 1) != 0 && !v21);
    }
    v22 = *(_DWORD *)(a1 + 56);
    v23 = *(_DWORD *)(a1 + 16);
    if (v22 >= v23)
    {
LABEL_31:
      v28 = v23 | a4;
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 24);
      v24 = *(unsigned __int8 **)(a1 + 32);
      v26 = *v24;
      v27 = *(_DWORD *)(a1 + 56);
      while (1)
      {
        v28 = v27 ^ v26;
        v29 = (v27 ^ v26) & 0xFFF;
        if (!*(_BYTE *)(v25 + 12 * v29 + 9)
          && (v28 == a4 || ((v28 ^ a4) & 0x1FE00000) == 0))
        {
          v30 = *(unsigned int *)(a1 + 40);
          if (v30 < 2)
            goto LABEL_32;
          if (!*(_BYTE *)(v25 + 12 * (v29 ^ v24[1]) + 8))
            break;
        }
LABEL_30:
        v27 = *(_DWORD *)(v25 + 12 * (v27 & 0xFFF) + 4);
        if (v27 == v22)
          goto LABEL_31;
      }
      v31 = 2;
      while (v30 != v31)
      {
        v32 = v31;
        if (*(unsigned __int8 *)(v25 + 12 * (v29 ^ v24[v31++]) + 8))
        {
          if (v32 >= v30)
            break;
          goto LABEL_30;
        }
      }
    }
LABEL_32:
    sub_19C00AE40((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a4), v28 ^ a4);
    v47 = v10;
    v46 = v12;
    if (*(_DWORD *)(a1 + 40))
    {
      v34 = 0;
      v35 = *(_DWORD *)(a2[2] + 4 * a3) >> 2;
      do
      {
        v36 = v28 ^ *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + v34);
        if (*(_DWORD *)(a1 + 16) <= v36)
          sub_19C00A7A4(a1);
        if (*(_DWORD *)(a1 + 56) == v36)
        {
          v37 = v36 & 0xFFF;
          v38 = *(_QWORD *)(a1 + 24);
          v39 = *(_DWORD *)(v38 + 12 * (v36 & 0xFFF) + 4);
          *(_DWORD *)(a1 + 56) = v39;
          if (v39 == v36)
          {
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 16);
            v39 = v36;
          }
        }
        else
        {
          v38 = *(_QWORD *)(a1 + 24);
          v37 = v36 & 0xFFF;
          v39 = *(_DWORD *)(v38 + 12 * (v36 & 0xFFF) + 4);
        }
        v40 = (int *)(v38 + 12 * v37);
        v41 = *v40;
        *(_DWORD *)(v38 + 12 * (v41 & 0xFFF) + 4) = v39;
        *(_DWORD *)(v38 + 12 * (v40[1] & 0xFFF)) = v41;
        *((_BYTE *)v40 + 8) = 1;
        if (*(_BYTE *)(a2[4] + v35))
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 8) + 4 * v36) = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v34);
          v42 = *(_DWORD *)(a2[2] + 4 * v35);
        }
        else
        {
          v43 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)(v43 + 4 * a4) |= 0x100u;
          v42 = *(_DWORD *)(a2[2] + 4 * v35);
          *(_DWORD *)(v43 + 4 * v36) = (v42 >> 1) | 0x80000000;
        }
        v35 = ((int)(v42 << 31) >> 31) & (v35 + 1);
        ++v34;
      }
      while (v34 < *(unsigned int *)(a1 + 40));
    }
    else
    {
      v38 = *(_QWORD *)(a1 + 24);
    }
    *(_BYTE *)(v38 + 12 * (v28 & 0xFFF) + 9) = 1;
    result = (unsigned int *)a2[6];
    if ((result[v47] & v46) != 0)
    {
      result = (unsigned int *)sub_19C00B3FC((uint64_t)result, a2[8], v9);
      *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * ((_DWORD)result - 1)) = v28;
    }
    do
    {
      if (*(_BYTE *)(a2[4] + v9))
        result = (unsigned int *)sub_19C00B038(a1, a2, v9, v28 ^ *(unsigned __int8 *)(a2[4] + v9));
      if ((_DWORD)v9 == -1)
        break;
      v45 = *(_DWORD *)(a2[2] + 4 * v9);
      LODWORD(v9) = v9 + 1;
    }
    while ((v45 & 1) != 0);
  }
  return result;
}

uint64_t sub_19C00B3FC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = (a3 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  v4 = *(_DWORD *)(a2 + v3);
  LODWORD(v3) = *(_DWORD *)(a1 + v3) & (0xFFFFFFFF >> ~(_BYTE)a3);
  LODWORD(v3) = ((((unint64_t)(((v3 >> 1) & 0x55555555) + (v3 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v3 >> 1) & 0x55555555) + (v3 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v3 >> 1) & 0x55555555) + (v3 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v3 >> 1) & 0x55555555) + (v3 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v3 + BYTE1(v3) + ((v3 + (v3 >> 8)) >> 16)) & 0x3Fu) + v4;
}

uint64_t sub_19C00B458(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int *v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unsigned int **v58;
  uint64_t v59;
  int v60;
  int v61;

  v2 = result;
  v3 = *(unsigned int *)(result + 104);
  v4 = *(unsigned int *)(*(_QWORD *)(result + 96) + 4 * v3 - 4);
  if (v4 != a2)
  {
    v57 = (_QWORD *)(result + 48);
    v58 = (unsigned int **)(result + 80);
    v5 = (uint64_t *)(result + 16);
    v6 = (uint64_t *)(result + 32);
    v59 = a2;
    while (1)
    {
      *(_DWORD *)(v2 + 104) = v3 - 1;
      v7 = *(_DWORD *)(v2 + 88);
      if (*(_QWORD *)(v2 + 128) >= (unint64_t)(v7 - (v7 >> 2)))
      {
        v8 = 2 * v7;
        sub_19C00A2C8((uint64_t)v58);
        v61 = 0;
        result = sub_19C00BC24((uint64_t)v58, v8, &v61);
        v9 = *(unsigned int *)(v2 + 24);
        if (v9 >= 2)
        {
          v10 = *v6;
          for (i = 1; i < v9; ++i)
          {
            if (!*(_BYTE *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              v12 = 0;
              if ((_DWORD)i)
              {
                v13 = i;
                do
                {
                  v14 = *(_DWORD *)(*v5 + 4 * v13);
                  v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              v18 = *(_DWORD *)(v2 + 88);
              v19 = v12 % v18;
              v20 = *(_QWORD *)(v2 + 80);
              while (*(_DWORD *)(v20 + 4 * v19))
              {
                if ((_DWORD)v19 + 1 == v18)
                  v19 = 0;
                else
                  v19 = (v19 + 1);
              }
              *(_DWORD *)(v20 + 4 * v19) = i;
              v9 = *(unsigned int *)(v2 + 24);
            }
          }
        }
      }
      if (!v4)
      {
        v36 = **v58;
        if (v36)
        {
          v34 = 0;
          v44 = *(_QWORD *)(v2 + 16);
          while (1)
          {
            v45 = v36;
            if (*(_DWORD *)(*(_QWORD *)v2 + 4))
            {
              v45 = v36;
              while ((*(_DWORD *)(v44 + 4 * v45) & 1) != 0)
              {
                ++v45;
                if (!*(_DWORD *)(*(_QWORD *)v2 + 12 * *(unsigned int *)(*(_QWORD *)v2 + 4) + 4))
                  goto LABEL_53;
              }
            }
            else
            {
LABEL_53:
              if ((*(_DWORD *)(v44 + 4 * v45) & 1) == 0)
              {
LABEL_57:
                *(_DWORD *)(*v57 + 4 * (v36 >> 5)) |= 1 << v36;
                if (!v4)
                  goto LABEL_72;
                goto LABEL_71;
              }
            }
            v34 = (v34 + 1) % *(_DWORD *)(v2 + 88);
            v36 = (*v58)[v34];
            if (!v36)
              goto LABEL_64;
          }
        }
        v34 = 0;
        v46 = 0;
        goto LABEL_70;
      }
      v21 = 0;
      v22 = *(_QWORD *)v2;
      v23 = v4;
      do
      {
        ++v21;
        LODWORD(v23) = *(_DWORD *)(v22 + 12 * v23 + 4);
      }
      while ((_DWORD)v23);
      v24 = 0;
      v25 = v4;
      do
      {
        v26 = (int *)(v22 + 12 * v25);
        v27 = *((unsigned __int8 *)v26 + 8);
        v28 = *v26;
        if (v27)
          v29 = (2 * *(unsigned __int8 *)(v22 + 12 * v25 + 9)) | (4 * v28);
        else
          v29 = 2 * v28;
        v30 = v22 + 12 * v25;
        v31 = ((v29 | *(unsigned __int8 *)(v30 + 10)) ^ ~(v27 << 24)) + ((v29 | *(unsigned __int8 *)(v30 + 10)) << 15);
        v32 = 2057 * ((5 * (v31 ^ (v31 >> 12))) ^ ((5 * (v31 ^ (v31 >> 12))) >> 4));
        v24 ^= HIWORD(v32) ^ v32;
        v25 = *(unsigned int *)(v30 + 4);
      }
      while ((_DWORD)v25);
      v33 = *(_DWORD *)(v2 + 88);
      v34 = v24 % v33;
      v35 = *(_QWORD *)(v2 + 80);
      v36 = *(_DWORD *)(v35 + 4 * v34);
      if (v36)
      {
        v37 = *v5;
        do
        {
          v38 = v36;
          if (*(_DWORD *)(v22 + 12 * v4 + 4))
          {
            v38 = v36;
            while ((*(_DWORD *)(v37 + 4 * v38) & 1) != 0)
            {
              ++v38;
              if (!*(_DWORD *)(v22 + 12 * *(unsigned int *)(v22 + 12 * v4 + 4) + 4))
                goto LABEL_33;
            }
          }
          else
          {
LABEL_33:
            if ((*(_DWORD *)(v37 + 4 * v38) & 1) == 0)
            {
              v39 = v4;
              while (1)
              {
                v40 = (int *)(v22 + 12 * v39);
                v41 = *((unsigned __int8 *)v40 + 8);
                v42 = *v40;
                v43 = v41 ? (2 * *(unsigned __int8 *)(v22 + 12 * v39 + 9)) | (4 * v42) : 2 * v42;
                if ((v43 | *(unsigned __int8 *)(v22 + 12 * v39 + 10)) != *(_DWORD *)(v37 + 4 * v38)
                  || v41 != *(unsigned __int8 *)(*v6 + v38))
                {
                  break;
                }
                v39 = *(unsigned int *)(v22 + 12 * v39 + 4);
                --v38;
                if (!(_DWORD)v39)
                  goto LABEL_57;
              }
            }
          }
          if (v34 + 1 == v33)
            v34 = 0;
          else
            ++v34;
          v36 = *(_DWORD *)(v35 + 4 * v34);
        }
        while (v36);
      }
      if (v21)
        break;
LABEL_64:
      v46 = 0;
      if (v4)
        goto LABEL_65;
LABEL_70:
      v36 = v46 + 1;
      *(_DWORD *)(*(_QWORD *)(v2 + 80) + 4 * v34) = v46 + 1;
      ++*(_QWORD *)(v2 + 128);
      if (!v4)
        goto LABEL_72;
      do
      {
LABEL_71:
        v55 = *(unsigned int *)(*(_QWORD *)v2 + 12 * v4 + 4);
        v60 = v4;
        result = sub_19C00BA54(v2 + 112, &v60);
        v4 = v55;
      }
      while ((_DWORD)v55);
LABEL_72:
      v3 = *(unsigned int *)(v2 + 104);
      v56 = *(_QWORD *)(v2 + 96) + 4 * v3;
      *(_DWORD *)(*(_QWORD *)v2 + 12 * *(unsigned int *)(v56 - 4)) = v36;
      v4 = *(unsigned int *)(v56 - 4);
      if (v4 == v59)
        goto LABEL_73;
    }
    do
    {
      sub_19C00BAA4((uint64_t)v57);
      result = sub_19C00BAF0(v2 + 16);
      v47 = *(_DWORD *)(v2 + 40);
      if (v47 == *(_DWORD *)(v2 + 44))
      {
        result = sub_19C00A358((uint64_t *)(v2 + 32), v47 + 1);
        v47 = *(_DWORD *)(v2 + 40);
      }
      *(_DWORD *)(v2 + 40) = v47 + 1;
      --v21;
    }
    while (v21);
    v46 = *(_DWORD *)(v2 + 76) - 1;
LABEL_65:
    v48 = *(_QWORD *)v2;
    v49 = v4;
    do
    {
      v50 = (int *)(v48 + 12 * v49);
      v51 = *((unsigned __int8 *)v50 + 8);
      v52 = *v50;
      if (v51)
        v53 = (2 * *(unsigned __int8 *)(v48 + 12 * v49 + 9)) | (4 * v52);
      else
        v53 = 2 * v52;
      v54 = 3 * v49;
      *(_DWORD *)(*(_QWORD *)(v2 + 16) + 4 * v46) = v53 | *(unsigned __int8 *)(v48 + 4 * v54 + 10);
      *(_BYTE *)(*(_QWORD *)(v2 + 32) + v46--) = v51;
      v48 = *(_QWORD *)v2;
      v49 = *(unsigned int *)(*(_QWORD *)v2 + 4 * v54 + 4);
    }
    while ((_DWORD)v49);
    goto LABEL_70;
  }
LABEL_73:
  *(_DWORD *)(v2 + 104) = v3 - 1;
  return result;
}

uint64_t sub_19C00B8FC(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = *(_DWORD *)(result + 8);
  if (v2 == *(_DWORD *)(result + 12))
  {
    v3 = v2 + 1;
    v4 = v2 + 1;
    if (v2 + 1 < 2 * v2)
    {
      v5 = 1;
      do
      {
        v4 = v5;
        v5 *= 2;
      }
      while (v4 < v3);
    }
    v6 = operator new[]();
    v7 = *(unsigned int *)(v1 + 8);
    result = *(_QWORD *)v1;
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 12 * v7;
      do
      {
        v10 = v6 + v8;
        v11 = *(_QWORD *)(result + v8);
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(result + v8 + 8);
        *(_QWORD *)v10 = v11;
        v8 += 12;
      }
      while (v9 != v8);
      *(_QWORD *)v1 = v6;
      *(_DWORD *)(v1 + 12) = v4;
    }
    else
    {
      *(_QWORD *)v1 = v6;
      *(_DWORD *)(v1 + 12) = v4;
      if (!result)
      {
        v2 = 0;
        goto LABEL_11;
      }
    }
    result = MEMORY[0x1A1AD0CB8]();
    v2 = *(_DWORD *)(v1 + 8);
  }
LABEL_11:
  *(_DWORD *)(v1 + 8) = v2 + 1;
  v12 = *(_QWORD *)v1 + 12 * v2;
  *(_DWORD *)(v12 + 7) = 0;
  *(_QWORD *)v12 = 0;
  return result;
}

uint64_t sub_19C00BA54(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  unsigned int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 == *(_DWORD *)(result + 12))
  {
    result = sub_19C00AF20((uint64_t *)result, v4 + 1);
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(v3 + 8) = v4 + 1;
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = *a2;
  return result;
}

uint64_t sub_19C00BAA4(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = result;
  v2 = *(_DWORD *)(result + 28);
  if ((v2 & 0x1F) == 0)
  {
    v3 = 0;
    result = sub_19C00BA54(result, &v3);
    v2 = *(_DWORD *)(v1 + 28);
  }
  *(_DWORD *)(v1 + 28) = v2 + 1;
  return result;
}

uint64_t sub_19C00BAF0(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = result;
  v2 = *(_DWORD *)(result + 8);
  if (v2 == *(_DWORD *)(result + 12))
  {
    v3 = v2 + 1;
    v4 = v2 + 1;
    if (v2 + 1 < 2 * v2)
    {
      v5 = 1;
      do
      {
        v4 = v5;
        v5 *= 2;
      }
      while (v4 < v3);
    }
    v6 = operator new[]();
    v7 = *(unsigned int *)(v1 + 8);
    result = *(_QWORD *)v1;
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 4 * v7;
      do
      {
        *(_DWORD *)(v6 + v8) = *(_DWORD *)(result + v8);
        v8 += 4;
      }
      while (v9 != v8);
      *(_QWORD *)v1 = v6;
      *(_DWORD *)(v1 + 12) = v4;
    }
    else
    {
      *(_QWORD *)v1 = v6;
      *(_DWORD *)(v1 + 12) = v4;
      if (!result)
      {
        v2 = 0;
        goto LABEL_11;
      }
    }
    result = MEMORY[0x1A1AD0CB8]();
    v2 = *(_DWORD *)(v1 + 8);
  }
LABEL_11:
  *(_DWORD *)(v1 + 8) = v2 + 1;
  *(_DWORD *)(*(_QWORD *)v1 + 4 * v2) = 0;
  return result;
}

uint64_t sub_19C00BC24(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 8);
  if (v6 > a2)
  {
    *(_DWORD *)(result + 8) = a2;
    v6 = a2;
  }
  if (*(_DWORD *)(result + 12) < a2)
  {
    result = sub_19C00AF20((uint64_t *)result, a2);
    v6 = *(_DWORD *)(v5 + 8);
  }
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5;
    do
    {
      *(_DWORD *)(v5 + 8) = v6 + 1;
      *(_DWORD *)(v7 + 4 * v6) = *a3;
      v6 = *(_DWORD *)(v5 + 8);
    }
    while (v6 < a2);
  }
  return result;
}

void sub_19C00BCAC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C00BCC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D19810;
  result[1] = v3;
  return result;
}

uint64_t sub_19C00BCF4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D19810;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C00BD10(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C00BD2C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19870))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C00BD68()
{
  return &unk_1E3D19870;
}

void sub_19C00BD78()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C00BD8C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D19790;
  result[1] = v3;
  return result;
}

uint64_t sub_19C00BDC0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D19790;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C00BDDC(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C00BDF8(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D197F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C00BE34()
{
  return &unk_1E3D197F0;
}

void sub_19C00BE44(_QWORD *a1)
{
  sub_19C007578(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C00BE68(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_19C0076AC(a1, a2, a3, a4, a5);
  sub_19C00C398(a1);
  return 1;
}

std::string *sub_19C00BE94@<X0>(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  uint64_t v5;
  const std::string::value_type *v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string *v9;
  std::string *v10;
  std::string::size_type size;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string v18;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = a1[2];
  v4 = (const std::string::value_type *)a1[3];
  v6 = (const std::string::value_type *)a1[5];
  v7 = a1[6];
  memset(&v18, 0, sizeof(v18));
  std::string::resize(&v18, 4uLL, 0);
  v8 = 4 * v5;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v18;
  else
    v9 = (std::string *)v18.__r_.__value_.__r.__words[0];
  LODWORD(v9->__r_.__value_.__l.__data_) = v8;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v18;
  else
    v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    size = v18.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v10, size);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v13 = a1[5];
  v12 = a1[6];
  memset(&v18, 0, sizeof(v18));
  std::string::resize(&v18, 4uLL, 0);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v18;
  else
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
  LODWORD(v14->__r_.__value_.__l.__data_) = (unint64_t)(v12 - v13) >> 1;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v18;
  else
    v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    v16 = v18.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  std::string::append(a2, v4, v8);
  return std::string::append(a2, v6, v7 - (_QWORD)v6);
}

void sub_19C00BFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C00C014(uint64_t a1, uint64_t **a2)
{
  sub_19C007A58(a1, a2);
  sub_19C00C398(a1);
  return 1;
}

uint64_t sub_19C00C040(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  sub_19C007CE8(a1, a2, a3);
  sub_19C00C398(a1);
  return 1;
}

uint64_t sub_19C00C06C(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char **v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  size_t v21;
  unint64_t v22;
  char *v23;

  v3 = a3 <= 3 || (a3 & 0xFFFFFFFFFFFFFFFCLL) == 4;
  v4 = !v3;
  if (!v3)
  {
    v7 = *a2;
    v6 = a2[1];
    v8 = a2 + 2;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      MEMORY[0x1A1AD0CB8](v9, 0x1000C8052888210);
      *(_QWORD *)(a1 + 32) = 0;
    }
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    v10 = (char *)v8 + v7;
    sub_19C00C2A8((char **)(a1 + 40), v6);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(char **)(a1 + 40);
    if (v6 <= (uint64_t)(v11 - (_QWORD)v12) >> 1)
    {
      v20 = *(char **)(a1 + 48);
      v16 = (char **)(a1 + 48);
      v19 = v20;
      v21 = v20 - v12;
      v22 = (v20 - v12) >> 1;
      if (v22 < v6)
      {
        if (v19 != v12)
        {
          memmove(v12, v10, v21);
          v12 = *v16;
        }
        v18 = 2 * v6 - 2 * v22;
        if (v22 == v6)
          goto LABEL_30;
        v15 = v12;
        v23 = &v10[2 * v22];
        goto LABEL_29;
      }
      v18 = 2 * v6;
      if (!(_DWORD)v6)
      {
LABEL_30:
        *v16 = &v12[v18];
        return v4;
      }
      v15 = v12;
    }
    else
    {
      if (v12)
      {
        *(_QWORD *)(a1 + 48) = v12;
        operator delete(v12);
        v11 = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
      if (v11 <= v6)
        v13 = v6;
      else
        v13 = v11;
      if (v11 >= 0x7FFFFFFFFFFFFFFELL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14 < 0)
        sub_19BF8EB40();
      v15 = (char *)sub_19BFAED5C(v14);
      v12 = v15;
      *(_QWORD *)(a1 + 48) = v15;
      v16 = (char **)(a1 + 48);
      *(v16 - 1) = v15;
      v16[1] = &v15[2 * v17];
      v18 = 2 * v6;
    }
    v23 = v10;
LABEL_29:
    memmove(v15, v23, v18);
    goto LABEL_30;
  }
  return v4;
}

uint64_t sub_19C00C1D8(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v3 = *a2;
  if (*a2 != -1)
  {
    v4 = result;
    v14 = 0;
    v5 = *(unsigned __int8 *)(*(_QWORD *)(result + 40) + 2 * v3);
    if (v5)
    {
      do
      {
        v8 = *(_QWORD *)(v4 + 24);
        v9 = *(_DWORD *)(v8 + 4 * *a2);
        v10 = (v9 >> 10 << ((v9 >> 6) & 8)) ^ *a2 ^ v5;
        if ((*(_DWORD *)(v8 + 4 * v10) & 0x800000FF) != v5)
          v10 = -1;
        v13 = v10;
        v15 = v5;
        v11 = *(_QWORD *)(a3 + 24);
        if (!v11)
          sub_19BF94AC4();
        result = (*(uint64_t (**)(uint64_t, char *, uint64_t *, char *))(*(_QWORD *)v11 + 48))(v11, &v15, &v13, &v14);
        if (v14)
          break;
        v12 = *(_QWORD *)(v4 + 40);
        v5 = *(unsigned __int8 *)(v12 + 2 * v13 + 1);
      }
      while (*(_BYTE *)(v12 + 2 * v13 + 1));
    }
  }
  return result;
}

void sub_19C00C2A8(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[2 * a2];
    goto LABEL_18;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    v19 = &v4[2 * v6];
LABEL_18:
    a1[1] = v19;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0)
    sub_19BF8EB40();
  v8 = v7 - v3;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v8 >= 0x7FFFFFFFFFFFFFFELL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)sub_19BFAED5C(v10);
  v12 = &v11[2 * v5];
  v14 = &v11[2 * v13];
  bzero(v12, 2 * v6);
  v15 = &v12[2 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_WORD *)v16 - 1);
      v16 -= 2;
      *((_WORD *)v12 - 1) = v18;
      v12 -= 2;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

void sub_19C00C398(uint64_t a1)
{
  void **v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v2 = (void **)(a1 + 40);
  sub_19C00C2A8((char **)(a1 + 40), *(_QWORD *)(a1 + 16));
  v16 = 0;
  sub_19C00C4C8(a1, &v16);
  v4 = *(char **)(a1 + 40);
  v3 = *(char **)(a1 + 48);
  v5 = v3;
  while (v5 != v4)
  {
    v6 = v5;
    v7 = *(v5 - 2);
    v5 -= 2;
    if (v7 | *(v6 - 1))
      goto LABEL_6;
  }
  v6 = *(char **)(a1 + 40);
LABEL_6:
  if (v6 != v3)
  {
    v3 = v6;
    *(_QWORD *)(a1 + 48) = v6;
  }
  v8 = (v3 - v4) >> 1;
  if (v8 < (uint64_t)(*(_QWORD *)(a1 + 56) - (_QWORD)v4) >> 1)
  {
    if (v3 == v4)
    {
      v13 = 0;
      v11 = 2 * v8;
    }
    else
    {
      v9 = (char *)sub_19BFAED5C((v3 - v4) >> 1);
      v10 = *(char **)(a1 + 40);
      v3 = *(char **)(a1 + 48);
      v11 = (uint64_t)&v9[2 * v8];
      v13 = &v9[2 * v12];
      if (v3 != v10)
      {
        v14 = v11;
        do
        {
          v15 = *((_WORD *)v3 - 1);
          v3 -= 2;
          *(_WORD *)(v14 - 2) = v15;
          v14 -= 2;
        }
        while (v3 != v10);
        v3 = (char *)*v2;
        goto LABEL_16;
      }
    }
    v14 = v11;
LABEL_16:
    *(_QWORD *)(a1 + 40) = v14;
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v13;
    if (v3)
      operator delete(v3);
  }
}

void sub_19C00C4B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C00C4A4);
}

_QWORD *sub_19C00C4C8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v7 = 0;
  v4 = operator new(0x28uLL);
  *v4 = &off_1E3D1A180;
  v4[1] = &v8;
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = &v7;
  v10 = v4;
  sub_19C0088D4(a1, a2, (uint64_t)v9);
  result = v10;
  if (v10 == v9)
  {
    v6 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_19C00C594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C00C5D0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C00C5E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D1A180;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C00C624(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D1A180;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_19C00C64C(uint64_t a1, char *a2, _QWORD *a3)
{
  char v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *result;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE **)(a1 + 8);
  v8 = *(_QWORD *)(v6 + 40);
  if (*v7)
  {
    *(_BYTE *)(v8 + 2 * **(_QWORD **)(a1 + 32) + 1) = v5;
  }
  else
  {
    *(_BYTE *)(v8 + 2 * **(_QWORD **)(a1 + 24)) = v5;
    *v7 = 1;
  }
  result = sub_19C00C4C8(v6, a3);
  **(_QWORD **)(a1 + 32) = *a3;
  return result;
}

uint64_t sub_19C00C6C4(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1A1E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C00C700()
{
  return &unk_1E3D1A1E0;
}

_QWORD *sub_19C00C70C(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E3D13868;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

void sub_19C00C75C(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E3D13868;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C00C7BC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D1A000;
  sub_19BFB1F54(*(char **)(a1 + 80));
  sub_19C007578((_QWORD *)(a1 + 8));
  return a1;
}

void sub_19C00C7F8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D1A000;
  sub_19BFB1F54(*(char **)(a1 + 80));
  sub_19C007578((_QWORD *)(a1 + 8));
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C00C844(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v38;
  void *v39;
  void *__p;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (a2)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      v13 = *(void **)(a3 + 8 * i);
      v14 = *(_QWORD *)(a4 + 8 * i);
      v38 = v14;
      v39 = v13;
      v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v16 = (_QWORD *)sub_19BFFA830(&v43, &v39, &v38);
      }
      else
      {
        sub_19BFA4428(v44, v13, v14);
        v16 = v15 + 3;
      }
      v44 = v16;
      if (a5)
      {
        v17 = *(_QWORD *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          v19 = v10;
          v20 = a5;
          v21 = v8;
          v22 = a3;
          v23 = a4;
          v24 = (v11 - v9) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_19BF8EB40();
          v26 = v19 - (_QWORD)v9;
          v27 = (uint64_t)(v19 - (_QWORD)v9) >> 1;
          if (v27 > v25)
            v25 = v27;
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v25;
          if (v28)
            v28 = (unint64_t)sub_19BFB3588(v28);
          else
            v29 = 0;
          v30 = (_DWORD *)(v28 + 4 * v24);
          *v30 = v17;
          v18 = v30 + 1;
          while (v11 != v9)
          {
            v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v41 = v18;
          v32 = v28 + 4 * v29;
          v42 = v32;
          if (v9)
            operator delete(v9);
          v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          v8 = v21;
          a5 = v20;
          v10 = v32;
        }
        else
        {
          *(_DWORD *)v11 = v17;
          v18 = v11 + 4;
        }
        v41 = v18;
        v11 = (char *)v18;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19BF8EA40((void ***)&__p);
  return v35;
}

void sub_19C00CA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C00CA74(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19C00CAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D199A0;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C00CB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C00CB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D19A20;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C00CC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

std::string *sub_19C00CC64@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return sub_19C00BE94((_QWORD *)(a1 + 8), a2);
}

uint64_t sub_19C00CC6C(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  void *__p;
  void *v18;
  unint64_t v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v19 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v18 = v7;
      ++v6;
      v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  v14 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19C00CDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C00CDF0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  std::string::size_type v12;
  double v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t **v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  const std::string *v31;
  std::string::size_type v32;
  const std::string *v33;
  double v34;
  double v35;
  std::string::size_type size;
  double v37;
  uint64_t **v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  std::string::size_type v46;
  __int128 *v47;
  _OWORD *v48;
  __int128 v49;
  std::string::size_type v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  std::string::size_type v56;
  int v57;
  char *v58;
  char **v59;
  BOOL v60;
  uint64_t v61;
  std::string __str;
  std::string v65;
  std::string *v66;
  char *v67;
  uint64_t v68;
  char **v69;
  char *v70[2];
  std::string v71;
  char v72[9];

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  v5 = a1;
  v70[0] = 0;
  v70[1] = 0;
  v69 = v70;
  if (v4 == v3)
  {
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
  }
  else
  {
    v8 = 0;
    v9 = a1 + 72;
    do
    {
      v10 = 0;
      v11 = v3 + 24 * v8;
      while (1)
      {
        v12 = *(char *)(v11 + 23) < 0 ? *(_QWORD *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
        if (v10 > v12)
          break;
        v13 = *(double *)sub_19BFFBFC0(v9, (_QWORD *)v11);
        std::string::basic_string(&v71, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v66);
        v66 = &v71;
        v14 = (double *)sub_19BFF8F10((uint64_t **)&v69, &v71, (_OWORD **)&v66);
        v14[7] = v13 + v14[7];
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        ++v10;
      }
      if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF)
      {
        v61 = 0;
        goto LABEL_96;
      }
      ++v8;
      v3 = *a2;
      v15 = a2[1];
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3));
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
    if (v15 != v3)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = v3 + v16;
        v19 = *(_DWORD *)(*a3 + 4 * v17);
        v20 = *(double *)sub_19BFFBFC0((uint64_t)&v69, (_QWORD *)(v3 + v16));
        v21 = *(unsigned __int8 *)(v18 + 23);
        if ((v21 & 0x80u) != 0)
          v21 = *(_QWORD *)(v18 + 8);
        std::string::basic_string(&v71, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v65);
        v22 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        v23 = sub_19C00050C((uint64_t **)&v66, (_QWORD *)v18, v18);
        v24 = (int)(sqrt(v20 / v22) * 255.0);
        if (v24 >= 255)
          v25 = 255;
        else
          v25 = v24;
        if (v24)
          v26 = 1;
        else
          v26 = v20 / v22 <= 0.0;
        v27 = v25 << 23;
        if (!v26)
          v27 = 0x800000;
        *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
        ++v17;
        v3 = *a2;
        v28 = a2[1];
        v16 += 24;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
      if (v28 != v3)
      {
        v29 = 0;
        do
        {
          v30 = 0;
          v31 = (const std::string *)(v3 + 24 * v29);
          while (1)
          {
            v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                ? v31->__r_.__value_.__l.__size_
                : HIBYTE(v31->__r_.__value_.__r.__words[2]);
            if (v30 >= v32 - 1)
              break;
            std::string::basic_string(&v65, v31, 0, v30, (std::allocator<char> *)&v71);
            v33 = v31;
            if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0)
              v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
            sub_19BFFC118((uint64_t)&__str, (const void **)&v65.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
            if (&v67 == sub_19BFAA740((uint64_t)&v66, &__str))
            {
              v34 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v65);
              if (v34 > *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str))
              {
                v35 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str);
                size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = __str.__r_.__value_.__l.__size_;
                std::string::basic_string(&v71, &__str, 0, size - 1, (std::allocator<char> *)v72);
                v37 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v71.__r_.__value_.__l.__data_);
                v38 = sub_19C00050C((uint64_t **)&v66, &__str, (uint64_t)&__str);
                v39 = (int)(sqrt(v35 / v37) * 255.0);
                if (v39 >= 255)
                  v40 = 255;
                else
                  v40 = v39;
                if (v39)
                  v41 = 1;
                else
                  v41 = v35 / v37 <= 0.0;
                v42 = (v40 << 23) | 0x7FFFFF;
                if (!v41)
                  v42 = 0xFFFFFF;
                *((_DWORD *)v38 + 14) = v42;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            ++v30;
          }
          ++v29;
          v3 = *a2;
        }
        while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    v5 = a1;
  }
  memset(&v71, 0, sizeof(v71));
  memset(&v65, 0, sizeof(v65));
  v43 = (uint64_t *)v66;
  if (v66 != (std::string *)&v67)
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = (__int128 *)(v43 + 4);
      v48 = (_OWORD *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_ >= v71.__r_.__value_.__r.__words[2])
      {
        v50 = sub_19BFFC198((uint64_t *)&v71, v47);
      }
      else
      {
        if (*((char *)v43 + 55) < 0)
        {
          sub_19BF8CD70((_BYTE *)v71.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
        }
        else
        {
          v49 = *v47;
          *(_QWORD *)(v71.__r_.__value_.__l.__size_ + 16) = v43[6];
          *v48 = v49;
        }
        v50 = (std::string::size_type)v48 + 24;
      }
      v71.__r_.__value_.__l.__size_ = v50;
      if ((unint64_t)v44 >= v46)
      {
        v51 = (v44 - v45) >> 2;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v46 - (_QWORD)v45) >> 1 > v52)
          v52 = (uint64_t)(v46 - (_QWORD)v45) >> 1;
        if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v53 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
          v53 = (unint64_t)sub_19BFB3588(v53);
        else
          v54 = 0;
        v55 = (char *)(v53 + 4 * v51);
        *(_DWORD *)v55 = *((_DWORD *)v43 + 14);
        v56 = (std::string::size_type)(v55 + 4);
        while (v44 != v45)
        {
          v57 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v55 - 1) = v57;
          v55 -= 4;
        }
        v46 = v53 + 4 * v54;
        v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v65.__r_.__value_.__l.__size_ = v56;
        v65.__r_.__value_.__r.__words[2] = v46;
        if (v45)
          operator delete(v45);
        v45 = v55;
        v44 = (char *)v56;
      }
      else
      {
        *(_DWORD *)v44 = *((_DWORD *)v43 + 14);
        v44 += 4;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      v58 = (char *)v43[1];
      if (v58)
      {
        do
        {
          v59 = (char **)v58;
          v58 = *(char **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (char **)v43[2];
          v60 = *v59 == (char *)v43;
          v43 = (uint64_t *)v59;
        }
        while (!v60);
      }
      v43 = (uint64_t *)v59;
    }
    while (v59 != &v67);
  }
  sub_19C007CE8(v5 + 8, (uint64_t *)&v71, &v65);
  sub_19C00C398(v5 + 8);
  if (v65.__r_.__value_.__r.__words[0])
    operator delete(v65.__r_.__value_.__l.__data_);
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  sub_19BF8EA40((void ***)&v65);
  sub_19BFB1F54(v67);
  v61 = 1;
LABEL_96:
  sub_19BFB1F54(v70[0]);
  return v61;
}

void sub_19C00D3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p)
    operator delete(__p);
  __p = &a28;
  sub_19BF8EA40(&__p);
  sub_19BFB1F54(a23);
  sub_19BFB1F54(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19C00D4C0(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  return sub_19C00C06C(a1 + 8, a2, a3);
}

uint64_t sub_19C00D4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  uint64_t v10;

  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, &v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 128))(a1, &v10, a4);
}

_QWORD *sub_19C00D548(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D1A200;
  v11[1] = a4;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19C0081AC(a1 + 8, a2, a3, (uint64_t)v13);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C00D63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C00D6AC(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13[0] = &off_1E3D1A200;
  v13[1] = a4;
  v14 = v13;
  sub_19BFFBC40((uint64_t)v15, v13);
  sub_19C008334(a1 + 8, a2, a3, (uint64_t)v15, a5);
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_19C00D7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C00D818()
{
  return 0;
}

BOOL sub_19C00D820(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

uint64_t sub_19C00D830(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t a4)
{
  return sub_19C0091C0(*(_QWORD *)(a1 + 32), *a2, a3, a4);
}

uint64_t sub_19C00D83C(uint64_t a1, unsigned int *a2, int *a3)
{
  int v4;
  uint64_t result;
  int v6;

  v6 = 0;
  v4 = sub_19C008564((_QWORD *)(a1 + 8), a2, &v6);
  result = 0;
  if (v4)
  {
    if ((v6 & 0x7FFFFF) == 0x7FFFFF)
    {
      return 0;
    }
    else
    {
      *a3 = v6 & 0x7FFFFF;
      return 1;
    }
  }
  return result;
}

_QWORD *sub_19C00D8A0(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D1A200;
  v11[1] = a3;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19C0085E0(a1 + 8, a2, (uint64_t)v13, a4);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C00D994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C00DA04(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_19C00C1D8(a1 + 8, a2, a3);
}

void sub_19C00DA10()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C00DA24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D1A200;
  result[1] = v3;
  return result;
}

uint64_t sub_19C00DA58(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D1A200;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C00DA74(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4;

  v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF)
    return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(result + 8) + 24), v4, *a3, a3[1], a4);
  return result;
}

uint64_t sub_19C00DAA4(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1A260))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C00DAE0()
{
  return &unk_1E3D1A260;
}

void sub_19C00DAF0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C00DB04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D19A20;
  result[1] = v3;
  return result;
}

uint64_t sub_19C00DB38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D19A20;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C00DB54(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C00DB70(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19A80))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C00DBAC()
{
  return &unk_1E3D19A80;
}

void sub_19C00DBBC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C00DBD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D199A0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C00DC04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D199A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C00DC20(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C00DC3C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19A00))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C00DC78()
{
  return &unk_1E3D19A00;
}

uint64_t sub_19C00DC84(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E3D195E0;
  sub_19BFB1F54(*(char **)(a1 + 56));
  *(_QWORD *)(a1 + 8) = &off_1E3D196B8;
  *(_QWORD *)(a1 + 16) = &off_1E3D13868;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8052888210);
    *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

void sub_19C00DCF0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E3D195E0;
  sub_19BFB1F54(*(char **)(a1 + 56));
  *(_QWORD *)(a1 + 8) = &off_1E3D196B8;
  *(_QWORD *)(a1 + 16) = &off_1E3D13868;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8052888210);
    *(_QWORD *)(a1 + 40) = 0;
  }
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C00DD6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19BFA4428(a2, *(void **)(a1 + 32), 4 * *(_QWORD *)(a1 + 24));
}

uint64_t sub_19C00DD7C(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  void *__p;
  void *v18;
  unint64_t v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v19 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v18 = v7;
      ++v6;
      v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  v14 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19C00DEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C00DF00(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  std::string::size_type v12;
  double v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t **v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  const std::string *v31;
  std::string::size_type v32;
  const std::string *v33;
  double v34;
  double v35;
  std::string::size_type size;
  double v37;
  uint64_t **v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  std::string::size_type v46;
  __int128 *v47;
  _OWORD *v48;
  __int128 v49;
  std::string::size_type v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  std::string::size_type v56;
  int v57;
  char *v58;
  char **v59;
  BOOL v60;
  uint64_t v61;
  std::string __str;
  std::string v65;
  std::string *v66;
  char *v67;
  uint64_t v68;
  char **v69;
  char *v70[2];
  std::string v71;
  char v72[9];

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  v5 = a1;
  v70[0] = 0;
  v70[1] = 0;
  v69 = v70;
  if (v4 == v3)
  {
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
  }
  else
  {
    v8 = 0;
    v9 = a1 + 48;
    do
    {
      v10 = 0;
      v11 = v3 + 24 * v8;
      while (1)
      {
        v12 = *(char *)(v11 + 23) < 0 ? *(_QWORD *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
        if (v10 > v12)
          break;
        v13 = *(double *)sub_19BFFBFC0(v9, (_QWORD *)v11);
        std::string::basic_string(&v71, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v66);
        v66 = &v71;
        v14 = (double *)sub_19BFF8F10((uint64_t **)&v69, &v71, (_OWORD **)&v66);
        v14[7] = v13 + v14[7];
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        ++v10;
      }
      if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF)
      {
        v61 = 0;
        goto LABEL_96;
      }
      ++v8;
      v3 = *a2;
      v15 = a2[1];
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3));
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
    if (v15 != v3)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = v3 + v16;
        v19 = *(_DWORD *)(*a3 + 4 * v17);
        v20 = *(double *)sub_19BFFBFC0((uint64_t)&v69, (_QWORD *)(v3 + v16));
        v21 = *(unsigned __int8 *)(v18 + 23);
        if ((v21 & 0x80u) != 0)
          v21 = *(_QWORD *)(v18 + 8);
        std::string::basic_string(&v71, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v65);
        v22 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        v23 = sub_19C00050C((uint64_t **)&v66, (_QWORD *)v18, v18);
        v24 = (int)(sqrt(v20 / v22) * 255.0);
        if (v24 >= 255)
          v25 = 255;
        else
          v25 = v24;
        if (v24)
          v26 = 1;
        else
          v26 = v20 / v22 <= 0.0;
        v27 = v25 << 23;
        if (!v26)
          v27 = 0x800000;
        *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
        ++v17;
        v3 = *a2;
        v28 = a2[1];
        v16 += 24;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
      if (v28 != v3)
      {
        v29 = 0;
        do
        {
          v30 = 0;
          v31 = (const std::string *)(v3 + 24 * v29);
          while (1)
          {
            v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                ? v31->__r_.__value_.__l.__size_
                : HIBYTE(v31->__r_.__value_.__r.__words[2]);
            if (v30 >= v32 - 1)
              break;
            std::string::basic_string(&v65, v31, 0, v30, (std::allocator<char> *)&v71);
            v33 = v31;
            if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0)
              v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
            sub_19BFFC118((uint64_t)&__str, (const void **)&v65.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
            if (&v67 == sub_19BFAA740((uint64_t)&v66, &__str))
            {
              v34 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v65);
              if (v34 > *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str))
              {
                v35 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str);
                size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = __str.__r_.__value_.__l.__size_;
                std::string::basic_string(&v71, &__str, 0, size - 1, (std::allocator<char> *)v72);
                v37 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v71.__r_.__value_.__l.__data_);
                v38 = sub_19C00050C((uint64_t **)&v66, &__str, (uint64_t)&__str);
                v39 = (int)(sqrt(v35 / v37) * 255.0);
                if (v39 >= 255)
                  v40 = 255;
                else
                  v40 = v39;
                if (v39)
                  v41 = 1;
                else
                  v41 = v35 / v37 <= 0.0;
                v42 = (v40 << 23) | 0x7FFFFF;
                if (!v41)
                  v42 = 0xFFFFFF;
                *((_DWORD *)v38 + 14) = v42;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            ++v30;
          }
          ++v29;
          v3 = *a2;
        }
        while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    v5 = a1;
  }
  memset(&v71, 0, sizeof(v71));
  memset(&v65, 0, sizeof(v65));
  v43 = (uint64_t *)v66;
  if (v66 != (std::string *)&v67)
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = (__int128 *)(v43 + 4);
      v48 = (_OWORD *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_ >= v71.__r_.__value_.__r.__words[2])
      {
        v50 = sub_19BFFC198((uint64_t *)&v71, v47);
      }
      else
      {
        if (*((char *)v43 + 55) < 0)
        {
          sub_19BF8CD70((_BYTE *)v71.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
        }
        else
        {
          v49 = *v47;
          *(_QWORD *)(v71.__r_.__value_.__l.__size_ + 16) = v43[6];
          *v48 = v49;
        }
        v50 = (std::string::size_type)v48 + 24;
      }
      v71.__r_.__value_.__l.__size_ = v50;
      if ((unint64_t)v44 >= v46)
      {
        v51 = (v44 - v45) >> 2;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v46 - (_QWORD)v45) >> 1 > v52)
          v52 = (uint64_t)(v46 - (_QWORD)v45) >> 1;
        if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v53 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
          v53 = (unint64_t)sub_19BFB3588(v53);
        else
          v54 = 0;
        v55 = (char *)(v53 + 4 * v51);
        *(_DWORD *)v55 = *((_DWORD *)v43 + 14);
        v56 = (std::string::size_type)(v55 + 4);
        while (v44 != v45)
        {
          v57 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v55 - 1) = v57;
          v55 -= 4;
        }
        v46 = v53 + 4 * v54;
        v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v65.__r_.__value_.__l.__size_ = v56;
        v65.__r_.__value_.__r.__words[2] = v46;
        if (v45)
          operator delete(v45);
        v45 = v55;
        v44 = (char *)v56;
      }
      else
      {
        *(_DWORD *)v44 = *((_DWORD *)v43 + 14);
        v44 += 4;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      v58 = (char *)v43[1];
      if (v58)
      {
        do
        {
          v59 = (char **)v58;
          v58 = *(char **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (char **)v43[2];
          v60 = *v59 == (char *)v43;
          v43 = (uint64_t *)v59;
        }
        while (!v60);
      }
      v43 = (uint64_t *)v59;
    }
    while (v59 != &v67);
  }
  sub_19C007CE8(v5 + 8, (uint64_t *)&v71, &v65);
  if (v65.__r_.__value_.__r.__words[0])
    operator delete(v65.__r_.__value_.__l.__data_);
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  sub_19BF8EA40((void ***)&v65);
  sub_19BFB1F54(v67);
  v61 = 1;
LABEL_96:
  sub_19BFB1F54(v70[0]);
  return v61;
}

void sub_19C00E4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p)
    operator delete(__p);
  __p = &a28;
  sub_19BF8EA40(&__p);
  sub_19BFB1F54(a23);
  sub_19BFB1F54(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19C00E5C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  a1[3] = 0;
  a1[4] = 0;
  v6 = a1[5];
  if (v6)
  {
    MEMORY[0x1A1AD0CB8](v6, 0x1000C8052888210);
    a1[5] = 0;
  }
  a1[3] = a3;
  a1[4] = a2;
  return 1;
}

uint64_t sub_19C00E61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  uint64_t v10;

  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, &v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 128))(a1, &v10, a4);
}

_QWORD *sub_19C00E69C(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D19AA0;
  v11[1] = a4;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19C0081AC(a1 + 8, a2, a3, (uint64_t)v13);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C00E790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C00E800(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13[0] = &off_1E3D19AA0;
  v13[1] = a4;
  v14 = v13;
  sub_19BFFBC40((uint64_t)v15, v13);
  sub_19C008334(a1 + 8, a2, a3, (uint64_t)v15, a5);
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_19C00E8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C00E96C()
{
  return 0;
}

BOOL sub_19C00E974(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

uint64_t sub_19C00E984(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t a4)
{
  return sub_19C0091C0(*(_QWORD *)(a1 + 32), *a2, a3, a4);
}

uint64_t sub_19C00E990(uint64_t a1, unsigned int *a2, int *a3)
{
  int v4;
  uint64_t result;
  int v6;

  v6 = 0;
  v4 = sub_19C008564((_QWORD *)(a1 + 8), a2, &v6);
  result = 0;
  if (v4)
  {
    if ((v6 & 0x7FFFFF) == 0x7FFFFF)
    {
      return 0;
    }
    else
    {
      *a3 = v6 & 0x7FFFFF;
      return 1;
    }
  }
  return result;
}

_QWORD *sub_19C00E9F4(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D19AA0;
  v11[1] = a3;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19C0085E0(a1 + 8, a2, (uint64_t)v13, a4);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C00EAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C00EB58(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_19C0088D4(a1 + 8, a2, a3);
}

void sub_19C00EB64()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C00EB78(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D19AA0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C00EBAC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D19AA0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C00EBC8(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4;

  v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF)
    return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(result + 8) + 24), v4, *a3, a3[1], a4);
  return result;
}

uint64_t sub_19C00EBF8(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19B00))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C00EC34()
{
  return &unk_1E3D19B00;
}

double sub_19C00EC40(uint64_t a1)
{
  uint64_t v2;
  double result;

  if (!*(_BYTE *)(a1 + 80) && *(_QWORD *)a1)
    MEMORY[0x1A1AD0CB8]();
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  *(_BYTE *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

_QWORD *sub_19C00ECA8(_QWORD *a1)
{
  *a1 = &off_1E3D19178;
  sub_19C00EC40((uint64_t)(a1 + 1));
  return a1;
}

void sub_19C00ECD8(_QWORD *a1)
{
  *a1 = &off_1E3D19178;
  sub_19C00EC40((uint64_t)(a1 + 1));
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C00ED18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v38;
  void *v39;
  void *__p;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (a2)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      v13 = *(void **)(a3 + 8 * i);
      v14 = *(_QWORD *)(a4 + 8 * i);
      v38 = v14;
      v39 = v13;
      v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v16 = (_QWORD *)sub_19BFFA830(&v43, &v39, &v38);
      }
      else
      {
        sub_19BFA4428(v44, v13, v14);
        v16 = v15 + 3;
      }
      v44 = v16;
      if (a5)
      {
        v17 = *(_QWORD *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          v19 = v10;
          v20 = a5;
          v21 = v8;
          v22 = a3;
          v23 = a4;
          v24 = (v11 - v9) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_19BF8EB40();
          v26 = v19 - (_QWORD)v9;
          v27 = (uint64_t)(v19 - (_QWORD)v9) >> 1;
          if (v27 > v25)
            v25 = v27;
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v25;
          if (v28)
            v28 = (unint64_t)sub_19BFB3588(v28);
          else
            v29 = 0;
          v30 = (_DWORD *)(v28 + 4 * v24);
          *v30 = v17;
          v18 = v30 + 1;
          while (v11 != v9)
          {
            v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v41 = v18;
          v32 = v28 + 4 * v29;
          v42 = v32;
          if (v9)
            operator delete(v9);
          v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          v8 = v21;
          a5 = v20;
          v10 = v32;
        }
        else
        {
          *(_DWORD *)v11 = v17;
          v18 = v11 + 4;
        }
        v41 = v18;
        v11 = (char *)v18;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19BF8EA40((void ***)&__p);
  return v35;
}

void sub_19C00EF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C00EF48(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19C00EF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D19250;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C00F024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C00F060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D192D0;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C00F0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C00F138@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19BFA4428(a2, *(void **)(a1 + 8), 8 * *(_QWORD *)(a1 + 24));
}

BOOL sub_19C00F14C(uint64_t a1, uint64_t **a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  int v29;
  void *__p;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;

  __p = 0;
  v3 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v33 = 0;
  v34 = 0;
  sub_19C0093E8((void **)&v35, v3);
  sub_19C00947C(&__p, v3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = v4;
      if (*((char *)v4 + 23) < 0)
        v6 = (uint64_t *)*v4;
      v7 = v36;
      if ((unint64_t)v36 >= v37)
      {
        v9 = v35;
        v10 = (uint64_t)&v36[-v35] >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          sub_19BF8EB40();
        v12 = v37 - v35;
        if ((uint64_t)(v37 - v35) >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)sub_19BFAC524(v13);
        else
          v14 = 0;
        v15 = (_QWORD *)(v13 + 8 * v10);
        *v15 = v6;
        v8 = (char *)(v15 + 1);
        if (v7 != (char *)v9)
        {
          do
          {
            v16 = *((_QWORD *)v7 - 1);
            v7 -= 8;
            *--v15 = v16;
          }
          while (v7 != (char *)v9);
          v7 = (char *)v35;
        }
        v35 = (uint64_t)v15;
        v37 = v13 + 8 * v14;
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_QWORD *)v36 = v6;
        v8 = v7 + 8;
      }
      v36 = v8;
      if (*((char *)v4 + 23) < 0)
        v17 = v4[1];
      else
        v17 = *((unsigned __int8 *)v4 + 23);
      v18 = v33;
      if (v33 >= v34)
      {
        v20 = (char *)__p;
        v21 = (v33 - (_BYTE *)__p) >> 3;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          sub_19BF8EB40();
        v23 = v34 - (_BYTE *)__p;
        if ((v34 - (_BYTE *)__p) >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)sub_19BF965C4((uint64_t)&v34, v24);
          v20 = (char *)__p;
          v18 = v33;
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        *(_QWORD *)v26 = v17;
        v19 = v26 + 8;
        while (v18 != v20)
        {
          v27 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *((_QWORD *)v26 - 1) = v27;
          v26 -= 8;
        }
        __p = v26;
        v33 = v19;
        v34 = &v25[8 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v33 = v17;
        v19 = v18 + 8;
      }
      v33 = v19;
      v4 += 3;
    }
    while (v4 != v5);
  }
  v28 = (void *)v35;
  v29 = sub_19C0109F0(a1 + 8, v3, v35, (uint64_t)__p, 0);
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
  if (v28)
    operator delete(v28);
  return v29 == 0;
}

void sub_19C00F3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C00F3E4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  void *v44;
  _BOOL8 v45;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  void *__p;
  char *v53;
  char *v54;
  void *v55;
  uint64_t *v56;
  unint64_t v57;

  v6 = *a2;
  v5 = a2[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  __p = 0;
  v53 = 0;
  v54 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  sub_19C0093E8(&v55, v7);
  sub_19C00947C(&__p, v7);
  sub_19C009510((void **)&v49, v7);
  v48 = v7;
  if (v5 == v6)
  {
LABEL_60:
    v44 = (void *)v49;
    v45 = sub_19C0109F0(a1 + 8, v48, (uint64_t)v55, (uint64_t)__p, v49) == 0;
    if (!v44)
      goto LABEL_62;
    goto LABEL_61;
  }
  v8 = 0;
  if (v7 <= 1)
    v9 = 1;
  else
    v9 = v7;
  while (1)
  {
    v10 = *a2 + 24 * v8;
    if (*(char *)(v10 + 23) < 0)
      v10 = *(_QWORD *)v10;
    v11 = (char *)v56;
    if ((unint64_t)v56 >= v57)
    {
      v13 = (char *)v55;
      v14 = ((char *)v56 - (_BYTE *)v55) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_19BF8EB40();
      v16 = v57 - (_QWORD)v55;
      if ((uint64_t)(v57 - (_QWORD)v55) >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
        v17 = (unint64_t)sub_19BFAC524(v17);
      else
        v18 = 0;
      v19 = (uint64_t *)(v17 + 8 * v14);
      *v19 = v10;
      v12 = v19 + 1;
      if (v11 != v13)
      {
        do
        {
          v20 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *--v19 = v20;
        }
        while (v11 != v13);
        v11 = (char *)v55;
      }
      v55 = v19;
      v57 = v17 + 8 * v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v56 = v10;
      v12 = (uint64_t *)(v11 + 8);
    }
    v56 = v12;
    v21 = *a2 + 24 * v8;
    v22 = *(char *)(v21 + 23) < 0 ? *(_QWORD *)(v21 + 8) : *(unsigned __int8 *)(v21 + 23);
    v23 = v53;
    if (v53 >= v54)
    {
      v25 = (char *)__p;
      v26 = (v53 - (_BYTE *)__p) >> 3;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
        sub_19BF8EB40();
      v28 = v54 - (_BYTE *)__p;
      if ((v54 - (_BYTE *)__p) >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        v30 = (char *)sub_19BF965C4((uint64_t)&v54, v29);
        v25 = (char *)__p;
        v23 = v53;
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[8 * v26];
      *(_QWORD *)v31 = v22;
      v24 = v31 + 8;
      while (v23 != v25)
      {
        v32 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v31 - 1) = v32;
        v31 -= 8;
      }
      __p = v31;
      v53 = v24;
      v54 = &v30[8 * v29];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_QWORD *)v53 = v22;
      v24 = v23 + 8;
    }
    v53 = v24;
    v33 = *(_DWORD *)(*a3 + 4 * v8);
    if (v33 < 0)
      break;
    v34 = v50;
    if ((unint64_t)v50 >= v51)
    {
      v36 = (_DWORD *)v49;
      v37 = ((uint64_t)v50 - v49) >> 2;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 62)
        sub_19BF8EB40();
      v39 = v51 - v49;
      if ((uint64_t)(v51 - v49) >> 1 > v38)
        v38 = v39 >> 1;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
        v40 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v40 = (unint64_t)sub_19BFB3588(v40);
      else
        v41 = 0;
      v42 = (_DWORD *)(v40 + 4 * v37);
      *v42 = v33;
      v35 = v42 + 1;
      while (v34 != v36)
      {
        v43 = *--v34;
        *--v42 = v43;
      }
      v49 = (uint64_t)v42;
      v51 = v40 + 4 * v41;
      if (v36)
        operator delete(v36);
    }
    else
    {
      *v50 = v33;
      v35 = v34 + 1;
    }
    v50 = v35;
    if (++v8 == v9)
      goto LABEL_60;
  }
  v45 = 0;
  v44 = (void *)v49;
  if (v49)
LABEL_61:
    operator delete(v44);
LABEL_62:
  if (__p)
  {
    v53 = (char *)__p;
    operator delete(__p);
  }
  if (v55)
    operator delete(v55);
  return v45;
}

void sub_19C00F754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C00F7A0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;

  v5 = a3 >> 3;
  sub_19C00EC40(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 24) = v5;
  return 1;
}

uint64_t sub_19C00F7E8(uint64_t a1, char *__s, size_t a3, int *a4)
{
  char *v5;
  int *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  int *v12;
  int v13;

  v5 = __s;
  if (a3)
  {
    v7 = *(int **)(a1 + 8);
    v8 = *v7;
    goto LABEL_4;
  }
  a3 = strlen(__s);
  v7 = *(int **)(a1 + 8);
  v8 = *v7;
  if (a3)
  {
LABEL_4:
    while (1)
    {
      v9 = *v5++;
      v10 = (v8 + v9 + 1);
      if (v8 != v7[2 * v10 + 1])
        return 0;
      v8 = v7[2 * v10];
      if (!--a3)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    result = 0;
    v12 = &v7[2 * v8];
    if (v8 == v12[1])
    {
      v13 = *v12;
      if (v13 < 0)
      {
        if (v13)
        {
          *a4 = ~v13;
          return 1;
        }
      }
    }
  }
  return result;
}

size_t sub_19C00F89C(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  int **v9;
  size_t result;
  size_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;

  v7 = off_1EE414EE0();
  result = sub_19C0108FC(v9, v8, v7, a3);
  v18 = 0;
  if (result)
  {
    v11 = result - 1;
    v12 = (_QWORD *)(v7 + 8);
    do
    {
      v13 = *((_DWORD *)v12 - 2);
      v15 = *v12;
      v12 += 2;
      v14 = v15;
      if (a3 >= v15)
        v16 = v14;
      else
        v16 = a3;
      result = sub_19BFB8D60(*(_QWORD *)(a4 + 24), v13, a2, v16, (uint64_t)&v18);
      if (v18)
        v17 = 1;
      else
        v17 = v11 == 0;
      --v11;
    }
    while (!v17);
  }
  return result;
}

void sub_19C00F944(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  void **v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *__dst[2];
  unint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t *, const void *, size_t))(*(_QWORD *)a1 + 120))(a1, &v18, a2, a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v18))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    if (a3 >= 0x17)
    {
      v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v11 = a3 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)a3;
      v17 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v17) = a3;
      v10 = __dst;
      if (!a3)
      {
LABEL_10:
        *((_BYTE *)v10 + a3) = 0;
        v13 = operator new(0x28uLL);
        *v13 = &off_1E3D19350;
        v13[1] = __dst;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        v20 = v13;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, &v18, v19, a5);
        v14 = v20;
        if (v20 == v19)
        {
          v15 = 4;
          v14 = v19;
        }
        else
        {
          if (!v20)
            goto LABEL_15;
          v15 = 5;
        }
        (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_15:
        if (SHIBYTE(v17) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19C00FAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C00FB50()
{
  return 0;
}

BOOL sub_19C00FB58(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

uint64_t sub_19C00FB68(uint64_t a1, uint64_t *a2, char *__s, size_t a4)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v6 = 0;
  v7 = v4;
  if (sub_19C00FFE0((uint64_t *)(a1 + 8), __s, &v7, &v6, a4) == -2)
    return -1;
  else
    return v7;
}

uint64_t sub_19C00FBB0(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v7 = *a2;
    v9 = 0;
    v10 = v7;
    v8 = sub_19C00FFE0(a1 + 1, "", &v10, &v9, 0);
    *a3 = v8;
    return v8 != -1;
  }
  return result;
}

uint64_t sub_19C00FC24(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  void **v17;
  void *v18;
  char v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  void *__p[2];
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  unsigned __int128 v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2 != -1)
  {
    v7 = result;
    v30 = 0u;
    memset(v29, 0, sizeof(v29));
    __p[0] = 0;
    __p[1] = 0;
    v27 = 0;
    v28 = v4;
    sub_19C010094(v29, (__n128 *)__p);
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
    v25 = 0;
    if (*((_QWORD *)&v30 + 1))
    {
      while (1)
      {
        v8 = *((_QWORD *)&v29[0] + 1);
        v9 = v30;
        v10 = (unint64_t)v30 >> 7;
        v11 = *(_QWORD *)(*((_QWORD *)&v29[0] + 1) + 8 * ((unint64_t)v30 >> 7));
        v12 = v30 & 0x7F;
        v13 = (__int128 *)(v11 + 32 * v12);
        if (*((char *)v13 + 23) < 0)
        {
          sub_19BF8CD70(__p, *(void **)v13, *((_QWORD *)v13 + 1));
          v8 = *((_QWORD *)&v29[0] + 1);
          v9 = v30;
          v10 = (unint64_t)v30 >> 7;
        }
        else
        {
          v14 = *v13;
          v27 = *((_QWORD *)v13 + 2);
          *(_OWORD *)__p = v14;
        }
        v28 = *(_QWORD *)(v11 + 32 * v12 + 24);
        v15 = *(_QWORD *)(v8 + 8 * v10) + 32 * (v30 & 0x7F);
        if (*(char *)(v15 + 23) < 0)
        {
          operator delete(*(void **)v15);
          v9 = v30;
        }
        v16 = v9 + 1;
        v30 = __PAIR128__(*((unint64_t *)&v30 + 1), v16) + __PAIR128__(-1, 0);
        if (v16 >= 0x100)
        {
          operator delete(**((void ***)&v29[0] + 1));
          *((_QWORD *)&v29[0] + 1) += 8;
          *(_QWORD *)&v30 = v30 - 128;
        }
        v24 = 0;
        if (!(*(unsigned int (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v7 + 128))(v7, &v28, &v24))
          break;
        v17 = v27 >= 0 ? __p : (void **)__p[0];
        v18 = v27 >= 0 ? (void *)HIBYTE(v27) : __p[1];
        sub_19BFB8D60(*(_QWORD *)(a3 + 24), v24, (uint64_t)v17, (uint64_t)v18, (uint64_t)&v25);
        if (!v25)
          break;
        v19 = 1;
LABEL_31:
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
        if (*((_QWORD *)&v30 + 1))
          v23 = v19;
        else
          v23 = 1;
        if ((v23 & 1) != 0)
          return sub_19C008F34((uint64_t)v29);
      }
      if ((a4 & 0x80000000) != 0)
        goto LABEL_25;
      v20 = HIBYTE(v27);
      if (v27 < 0)
        v20 = (unint64_t)__p[1];
      if (v20 < a4)
      {
LABEL_25:
        v31[0] = &off_1E3D193D0;
        v31[1] = v29;
        v31[2] = __p;
        v32 = v31;
        (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v7 + 144))(v7, &v28, v31);
        v21 = v32;
        if (v32 == v31)
        {
          v21 = v31;
          v22 = 4;
          goto LABEL_29;
        }
        if (v32)
        {
          v22 = 5;
LABEL_29:
          (*(void (**)(void))(*v21 + 8 * v22))();
        }
      }
      v19 = 0;
      goto LABEL_31;
    }
    return sub_19C008F34((uint64_t)v29);
  }
  return result;
}

void sub_19C00FEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a16 < 0)
    operator delete(__p);
  sub_19C008F34((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_19C00FF18(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char __s;
  char v13;
  unint64_t v14;
  uint64_t v15;

  v5 = 0;
  v13 = 0;
  v6 = (uint64_t *)(a1 + 8);
  do
  {
    __s = v5;
    v7 = *a2;
    v14 = 0;
    v15 = v7;
    result = sub_19C00FFE0(v6, &__s, &v15, &v14, 1uLL);
    v9 = v15;
    if ((_DWORD)result == -2)
      v9 = -1;
    v15 = v9;
    if (v9 != -1)
    {
      LOBYTE(v14) = v5;
      v10 = *(_QWORD *)(a3 + 24);
      if (!v10)
        sub_19BF94AC4();
      result = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, char *))(*(_QWORD *)v10 + 48))(v10, &v14, &v15, &v13);
      if (v13)
        break;
    }
  }
  while (v5++ < 0xFF);
  return result;
}

uint64_t sub_19C00FFE0(uint64_t *a1, char *__s, _QWORD *a3, unint64_t *a4, size_t a5)
{
  uint64_t v9;
  unsigned int v10;
  unint64_t i;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;

  if (!a5)
    a5 = strlen(__s);
  v9 = *a1;
  v10 = *(_DWORD *)(*a1 + 8 * *a3);
  for (i = *a4; i < a5; *a4 = i)
  {
    v12 = v10 + __s[i] + 1;
    if (v10 != *(_DWORD *)(v9 + 8 * v12 + 4))
      return 4294967294;
    *a3 = v12;
    v10 = *(_DWORD *)(v9 + 8 * v12);
    i = *a4 + 1;
  }
  v13 = (int *)(v9 + 8 * v10);
  v15 = *v13;
  v14 = v13[1];
  if (v15 < 0 && v10 == v14)
    return ~v15;
  else
    return 0xFFFFFFFFLL;
}

__n128 sub_19C010094(_QWORD *a1, __n128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __n128 *v96;
  __n128 result;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = 16 * (v4 - v5) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x80)
    {
      a1[4] = v8 - 128;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)sub_19BFAC524(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)sub_19BFAC524(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v98 = 1;
            else
              v98 = (uint64_t)&v63[-*a1] >> 2;
            v99 = (char *)sub_19BFAC524(v98);
            v101 = &v99[8 * (v98 >> 2)];
            v102 = (uint64_t *)a1[1];
            v63 = v101;
            v103 = a1[2] - (_QWORD)v102;
            if (v103)
            {
              v63 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              v104 = 8 * (v103 >> 3);
              v105 = &v99[8 * (v98 >> 2)];
              do
              {
                v106 = *v102++;
                *(_QWORD *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v63;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)sub_19BFAC524(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v111 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v111;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)sub_19BFAC524(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v108 = v36;
      v111 = v38;
      operator delete(v30);
      v36 = v108;
    }
    v38 = v111;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)sub_19BFAC524(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v109 = v36;
            v113 = v38;
            operator delete(v78);
            v36 = v109;
            v38 = v113;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v110 = *((_QWORD *)&v36 + 1);
            v112 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v110;
            *(_QWORD *)&v38 = v112;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  v96 = (__n128 *)(*(_QWORD *)&v5[(v9 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v9 & 0x7F));
  result = *a2;
  v96[1].n128_u64[0] = a2[1].n128_u64[0];
  *v96 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  v96[1].n128_u64[1] = a2[1].n128_u64[1];
  ++a1[5];
  return result;
}

void sub_19C010604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void sub_19C010638()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C01064C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D193D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C010684(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D193D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19C0106A4(uint64_t a1, char *a2, uint64_t *a3)
{
  _QWORD *v4;
  __n128 __p;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD **)(a1 + 8);
  sub_19BFFC118((uint64_t)&__p, *(const void ***)(a1 + 16), *a2);
  v7 = *a3;
  sub_19C010094(v4, &__p);
  if (v6 < 0)
    operator delete((void *)__p.n128_u64[0]);
}

void sub_19C0106FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C010718(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19440))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C010754()
{
  return &unk_1E3D19440;
}

void sub_19C010764()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C010778(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D19350;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C0107B8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D19350;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C0107E0(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 + 8);
  v9 = a1[3];
  v10 = v9 + v8;
  v11 = a1[1];
  v12 = *(char *)(v11 + 23);
  if (v12 < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    v11 = a1[1];
    v9 = a1[3];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
  v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  v15 = *(_QWORD *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    v11 = a1[1];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
LABEL_9:
  if ((v12 & 0x80) != 0)
    v11 = *(_QWORD *)v11;
  return sub_19BFB8D60(*(_QWORD *)(a1[4] + 24), *a2, v11, v10, a4);
}

uint64_t sub_19C0108B4(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D193B0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0108F0()
{
  return &unk_1E3D193B0;
}

size_t sub_19C0108FC(int **a1, char *__s, uint64_t a3, size_t a4)
{
  int *v7;
  int v8;
  size_t result;
  uint64_t v10;
  int *v11;
  int v12;
  size_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  size_t v17;

  if (a4)
  {
    v7 = *a1;
    v8 = **a1;
  }
  else
  {
    result = strlen(__s);
    a4 = result;
    v7 = *a1;
    v8 = **a1;
    if (!result)
    {
LABEL_12:
      v15 = &v7[2 * v8];
      if (v8 == v15[1])
      {
        v16 = *v15;
        if (v16 < 0)
        {
          if (result <= 0x7F)
          {
            v17 = a3 + 16 * result;
            *(_DWORD *)v17 = ~v16;
            *(_QWORD *)(v17 + 8) = a4;
          }
          ++result;
        }
      }
      return result;
    }
  }
  v10 = 0;
  result = 0;
  while (1)
  {
    v11 = &v7[2 * v8];
    if (v8 == v11[1])
    {
      v12 = *v11;
      if (v12 < 0)
      {
        if (result <= 0x7F)
        {
          v13 = a3 + 16 * result;
          *(_DWORD *)v13 = ~v12;
          *(_QWORD *)(v13 + 8) = v10;
        }
        ++result;
      }
    }
    v14 = v8 + __s[v10] + 1;
    if (v8 != v7[2 * v14 + 1])
      return result;
    ++v10;
    v8 = v7[2 * v14];
    if (a4 == v10)
      goto LABEL_12;
  }
}

uint64_t sub_19C0109F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v5 = 0;
  if (a2 && a3)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 32) = a3;
    *(_QWORD *)(a1 + 40) = a2;
    *(_QWORD *)(a1 + 48) = a4;
    *(_QWORD *)(a1 + 56) = a5;
    *(_QWORD *)(a1 + 64) = 0;
    sub_19C010AEC(a1, 0x2000uLL);
    **(_DWORD **)a1 = 1;
    *(_QWORD *)(a1 + 72) = 0;
    v16 = a2;
    v15 = 0u;
    v13 = 0;
    *(_OWORD *)__p = 0u;
    sub_19C010C04(a1, &v14, (uint64_t)__p);
    sub_19C010DF0(a1, (unsigned int **)__p);
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 16) + 257;
    *(_QWORD *)(a1 + 16) = v9;
    if (v9 >= v8)
      sub_19C010AEC(a1, v9);
    v10 = *(_QWORD *)(a1 + 8);
    if (v10)
      MEMORY[0x1A1AD0CB8](v10, 0x1000C8077774924);
    *(_QWORD *)(a1 + 8) = 0;
    v5 = *(unsigned int *)(a1 + 84);
    if (__p[0])
      operator delete(__p[0]);
  }
  return v5;
}

void sub_19C010AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_19C010AEC(uint64_t a1, unint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  const void *v9;
  size_t v10;
  char *v11;
  char *v12;

  v4 = *(const void **)a1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = 8 * a2;
  v7 = (char *)operator new[]();
  v8 = v7;
  if (v5)
    memcpy(v7, v4, 8 * v5);
  if (v5 < a2)
    bzero(&v8[8 * v5], v6 - 8 * v5);
  if (v4)
    MEMORY[0x1A1AD0CB8](v4, 0x1000C8000313F17);
  *(_QWORD *)a1 = v8;
  v9 = *(const void **)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (char *)operator new[]();
  v12 = v11;
  if (v10)
    memcpy(v11, v9, v10);
  if (a2 > v10)
    bzero(&v12[v10], a2 - v10);
  if (v9)
    MEMORY[0x1A1AD0CB8](v9, 0x1000C8077774924);
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 24) = a2;
  return a2;
}

uint64_t sub_19C010C04(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  const char *v12;
  unsigned int v13;
  char *v14;
  char *v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t result;

  if ((*(_DWORD *)(a1 + 84) & 0x80000000) != 0)
    return 0;
  v5 = a2[2];
  v6 = a2[3];
  if (v5 < v6)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a1 + 48);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8 * v5);
        v11 = a2[1];
        if (v10 < v11)
          goto LABEL_34;
        v12 = *(const char **)(*(_QWORD *)(a1 + 32) + 8 * v5);
      }
      else
      {
        v12 = *(const char **)(*(_QWORD *)(a1 + 32) + 8 * v5);
        v10 = strlen(v12);
        v11 = a2[1];
        if (v10 < v11)
          goto LABEL_34;
      }
      if (v10 == v11)
        v13 = 0;
      else
        v13 = v12[v11] + 1;
      if (v8 > v13)
      {
        result = 0;
        *(_DWORD *)(a1 + 84) = -3;
        return result;
      }
      v14 = *(char **)a3;
      v15 = *(char **)(a3 + 8);
      if (v13 != v8 || v14 == v15)
      {
        if (v14 != v15)
          *((_QWORD *)v15 - 1) = v5;
        v16 = v11 + 1;
        v17 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v15 >= v17)
        {
          v19 = (v15 - v14) >> 5;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 59)
            sub_19BF8EB40();
          v21 = v17 - (_QWORD)v14;
          if (v21 >> 4 > v20)
            v20 = v21 >> 4;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
            v22 = 0x7FFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            if (v22 >> 59)
              sub_19BF8E6D0();
            v23 = (char *)operator new(32 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[32 * v19];
          *(_DWORD *)v24 = v13;
          *((_QWORD *)v24 + 1) = v16;
          *((_QWORD *)v24 + 2) = v5;
          v25 = v24;
          if (v14 != v15)
          {
            do
            {
              v26 = *((_OWORD *)v15 - 1);
              *((_OWORD *)v25 - 2) = *((_OWORD *)v15 - 2);
              *((_OWORD *)v25 - 1) = v26;
              v25 -= 32;
              v15 -= 32;
            }
            while (v15 != v14);
            v14 = *(char **)a3;
          }
          v18 = v24 + 32;
          *(_QWORD *)a3 = v25;
          *(_QWORD *)(a3 + 8) = v24 + 32;
          *(_QWORD *)(a3 + 16) = &v23[32 * v22];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v15 = v13;
          v18 = v15 + 32;
          *((_QWORD *)v15 + 1) = v16;
          *((_QWORD *)v15 + 2) = v5;
        }
        *(_QWORD *)(a3 + 8) = v18;
        v6 = a2[3];
        v8 = v13;
      }
LABEL_34:
      ++v5;
    }
    while (v5 < v6);
  }
  v27 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  result = v27 >> 5;
  if (v27)
    *(_QWORD *)(*(_QWORD *)a3 + 32 * result - 8) = v6;
  return result;
}

unint64_t sub_19C010DF0(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int i;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void);
  void *__p[3];

  if ((*(_DWORD *)(a1 + 84) & 0x80000000) != 0)
    return 0;
  v4 = **a2;
  if ((unint64_t)(v4 + 1) > *(_QWORD *)(a1 + 72))
    v5 = v4 + 1;
  else
    v5 = *(_QWORD *)(a1 + 72);
  v6 = v5 - 1;
  if (*(_QWORD *)(a1 + 24) <= v5 - 1)
    sub_19C010AEC(a1, v5);
  v7 = 0;
  for (i = 0; ; i = 1)
  {
    do
    {
      while (1)
      {
        v9 = v6++;
        if (*(_QWORD *)(a1 + 24) <= v6)
          sub_19C010AEC(a1, v9 + 2);
        if (!*(_DWORD *)(*(_QWORD *)a1 + 8 * v6 + 4))
          break;
        ++v7;
      }
      if (!i)
        *(_QWORD *)(a1 + 72) = v6;
      v10 = v6 - **a2;
      v11 = *(_QWORD *)(a1 + 24);
      if (v11 <= v10 + *(a2[1] - 8))
      {
        v12 = (double)*(unint64_t *)(a1 + 40) / (double)*(unint64_t *)(a1 + 64);
        if (v12 < 1.05)
          v12 = 1.05;
        sub_19C010AEC(a1, (unint64_t)(v12 * (double)v11));
      }
      v13 = *(_QWORD *)(a1 + 8);
      i = 1;
    }
    while (*(_BYTE *)(v13 + v10));
    v14 = (char *)a2[1] - (char *)*a2;
    if ((unint64_t)v14 < 0x21)
      break;
    v15 = v14 >> 5;
    if ((unint64_t)(v14 >> 5) <= 2)
      v15 = 2;
    v16 = *a2 + 8;
    v17 = v15 - 1;
    while (1)
    {
      v18 = *v16;
      v16 += 8;
      if (*(_DWORD *)(*(_QWORD *)a1 + 8 * (v10 + v18) + 4))
        break;
      if (!--v17)
        goto LABEL_27;
    }
  }
LABEL_27:
  if ((double)v7 / (double)(v9 - *(_QWORD *)(a1 + 72) + 2) >= 0.95)
    *(_QWORD *)(a1 + 72) = v6;
  *(_BYTE *)(v13 + v10) = 1;
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *a2;
  v21 = a2[1];
  if (v19 <= v10 + *(v21 - 8) + 1)
    v19 = v10 + *(v21 - 8) + 1;
  *(_QWORD *)(a1 + 16) = v19;
  if (v21 == v20)
    return v10;
  v22 = ((char *)v21 - (char *)v20) >> 5;
  v23 = *(_QWORD *)a1;
  if (v22 <= 1)
    v22 = 1;
  v24 = v20;
  do
  {
    v25 = *v24;
    v24 += 8;
    *(_DWORD *)(v23 + 8 * (v10 + v25) + 4) = v10;
    --v22;
  }
  while (v22);
  v26 = 0;
  v27 = 0;
  while (1)
  {
    memset(__p, 0, sizeof(__p));
    if (!sub_19C010C04(a1, &v20[v26], (uint64_t)__p))
      break;
    *(_DWORD *)(*(_QWORD *)a1 + 8 * (v10 + (*a2)[v26])) = sub_19C010DF0(a1, __p);
LABEL_46:
    if (__p[0])
      operator delete(__p[0]);
    ++v27;
    v20 = *a2;
    v26 += 8;
    if (v27 >= ((char *)a2[1] - (char *)*a2) >> 5)
      return v10;
  }
  v28 = *(_QWORD *)(a1 + 56);
  v29 = *(_QWORD *)&(*a2)[v26 + 4];
  if (v28)
    LODWORD(v30) = *(_DWORD *)(v28 + 4 * v29);
  else
    v30 = *(_QWORD *)&(*a2)[v26 + 4];
  *(_DWORD *)(*(_QWORD *)a1 + 8 * (v10 + (*a2)[v26])) = ~(_DWORD)v30;
  if (!v28 || (*(_DWORD *)(v28 + 4 * v29) & 0x80000000) == 0)
  {
    ++*(_QWORD *)(a1 + 64);
    v31 = *(void (**)(void))(a1 + 88);
    if (v31)
      v31();
    goto LABEL_46;
  }
  *(_DWORD *)(a1 + 84) = -2;
  if (__p[0])
    operator delete(__p[0]);
  return 0;
}

void sub_19C0110EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C01110C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C011120(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D192D0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C011154(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D192D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C011170(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C01118C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19330))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0111C8()
{
  return &unk_1E3D19330;
}

void sub_19C0111D8()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C0111EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D19250;
  result[1] = v3;
  return result;
}

uint64_t sub_19C011220(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D19250;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C01123C(uint64_t a1, int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C011258(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D192B0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C011294()
{
  return &unk_1E3D192B0;
}

uint64_t sub_19C0112A0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D190A0;
  sub_19BFB1F54(*(char **)(a1 + 120));
  *(_QWORD *)(a1 + 8) = &off_1E3D19178;
  sub_19C00EC40(a1 + 16);
  return a1;
}

void sub_19C0112E8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D190A0;
  sub_19BFB1F54(*(char **)(a1 + 120));
  *(_QWORD *)(a1 + 8) = &off_1E3D19178;
  sub_19C00EC40(a1 + 16);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C011340(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t i;
  void *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v38;
  void *v39;
  void *__p;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v41 = 0;
  v42 = 0;
  if (a2)
  {
    v8 = a2;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      v13 = *(void **)(a3 + 8 * i);
      v14 = *(_QWORD *)(a4 + 8 * i);
      v38 = v14;
      v39 = v13;
      v15 = v44;
      if ((unint64_t)v44 >= v45)
      {
        v16 = (_QWORD *)sub_19BFFA830(&v43, &v39, &v38);
      }
      else
      {
        sub_19BFA4428(v44, v13, v14);
        v16 = v15 + 3;
      }
      v44 = v16;
      if (a5)
      {
        v17 = *(_QWORD *)(a5 + 8 * i);
        if ((unint64_t)v11 >= v10)
        {
          v19 = v10;
          v20 = a5;
          v21 = v8;
          v22 = a3;
          v23 = a4;
          v24 = (v11 - v9) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            sub_19BF8EB40();
          v26 = v19 - (_QWORD)v9;
          v27 = (uint64_t)(v19 - (_QWORD)v9) >> 1;
          if (v27 > v25)
            v25 = v27;
          if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v25;
          if (v28)
            v28 = (unint64_t)sub_19BFB3588(v28);
          else
            v29 = 0;
          v30 = (_DWORD *)(v28 + 4 * v24);
          *v30 = v17;
          v18 = v30 + 1;
          while (v11 != v9)
          {
            v31 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *--v30 = v31;
          }
          __p = v30;
          v41 = v18;
          v32 = v28 + 4 * v29;
          v42 = v32;
          if (v9)
            operator delete(v9);
          v9 = (char *)v30;
          a4 = v23;
          a3 = v22;
          v8 = v21;
          a5 = v20;
          v10 = v32;
        }
        else
        {
          *(_DWORD *)v11 = v17;
          v18 = v11 + 4;
        }
        v41 = v18;
        v11 = (char *)v18;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  __p = &v43;
  sub_19BF8EA40((void ***)&__p);
  return v35;
}

void sub_19C01152C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C011570(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19C0115B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D19460;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C01164C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C011688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D194E0;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C011724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C011760@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19BFA4428(a2, *(void **)(a1 + 16), 8 * *(_QWORD *)(a1 + 32));
}

uint64_t sub_19C011774(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  void *__p;
  void *v18;
  unint64_t v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v19 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v18 = v7;
      ++v6;
      v5 = (char *)v7;
    }
    while (v6 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  }
  v14 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19C0118D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C0118F8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  std::string::size_type v12;
  double v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t **v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  std::string::size_type v30;
  const std::string *v31;
  std::string::size_type v32;
  const std::string *v33;
  double v34;
  double v35;
  std::string::size_type size;
  double v37;
  uint64_t **v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  std::string::size_type v46;
  __int128 *v47;
  _OWORD *v48;
  __int128 v49;
  std::string::size_type v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  std::string::size_type v56;
  int v57;
  char *v58;
  char **v59;
  BOOL v60;
  _BOOL8 v61;
  std::string __str;
  std::string v65;
  std::string *v66;
  char *v67;
  uint64_t v68;
  char **v69;
  char *v70[2];
  std::string v71;
  char v72[9];

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "ProbabilisticTrie.h", 267, "keys.size() == values.size()");
  v5 = a1;
  v70[0] = 0;
  v70[1] = 0;
  v69 = v70;
  if (v4 == v3)
  {
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
  }
  else
  {
    v8 = 0;
    v9 = a1 + 112;
    do
    {
      v10 = 0;
      v11 = v3 + 24 * v8;
      while (1)
      {
        v12 = *(char *)(v11 + 23) < 0 ? *(_QWORD *)(v11 + 8) : *(unsigned __int8 *)(v11 + 23);
        if (v10 > v12)
          break;
        v13 = *(double *)sub_19BFFBFC0(v9, (_QWORD *)v11);
        std::string::basic_string(&v71, (const std::string *)v11, 0, v10, (std::allocator<char> *)&v66);
        v66 = &v71;
        v14 = (double *)sub_19BFF8F10((uint64_t **)&v69, &v71, (_OWORD **)&v66);
        v14[7] = v13 + v14[7];
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        ++v10;
      }
      if (*(_DWORD *)(*a3 + 4 * v8) == 0x7FFFFF)
      {
        v61 = 0;
        goto LABEL_96;
      }
      ++v8;
      v3 = *a2;
      v15 = a2[1];
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v15 - *a2) >> 3));
    v67 = 0;
    v68 = 0;
    v66 = (std::string *)&v67;
    if (v15 != v3)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = v3 + v16;
        v19 = *(_DWORD *)(*a3 + 4 * v17);
        v20 = *(double *)sub_19BFFBFC0((uint64_t)&v69, (_QWORD *)(v3 + v16));
        v21 = *(unsigned __int8 *)(v18 + 23);
        if ((v21 & 0x80u) != 0)
          v21 = *(_QWORD *)(v18 + 8);
        std::string::basic_string(&v71, (const std::string *)v18, 0, v21 - 1, (std::allocator<char> *)&v65);
        v22 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        v23 = sub_19C00050C((uint64_t **)&v66, (_QWORD *)v18, v18);
        v24 = (int)(sqrt(v20 / v22) * 255.0);
        if (v24 >= 255)
          v25 = 255;
        else
          v25 = v24;
        if (v24)
          v26 = 1;
        else
          v26 = v20 / v22 <= 0.0;
        v27 = v25 << 23;
        if (!v26)
          v27 = 0x800000;
        *((_DWORD *)v23 + 14) = v27 & 0xFF800000 | v19 & 0x7FFFFF;
        ++v17;
        v3 = *a2;
        v28 = a2[1];
        v16 += 24;
      }
      while (v17 < 0xAAAAAAAAAAAAAAABLL * ((v28 - *a2) >> 3));
      if (v28 != v3)
      {
        v29 = 0;
        do
        {
          v30 = 0;
          v31 = (const std::string *)(v3 + 24 * v29);
          while (1)
          {
            v32 = SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0
                ? v31->__r_.__value_.__l.__size_
                : HIBYTE(v31->__r_.__value_.__r.__words[2]);
            if (v30 >= v32 - 1)
              break;
            std::string::basic_string(&v65, v31, 0, v30, (std::allocator<char> *)&v71);
            v33 = v31;
            if (SHIBYTE(v31->__r_.__value_.__r.__words[2]) < 0)
              v33 = (const std::string *)v31->__r_.__value_.__r.__words[0];
            sub_19BFFC118((uint64_t)&__str, (const void **)&v65.__r_.__value_.__l.__data_, v33->__r_.__value_.__s.__data_[v30]);
            if (&v67 == sub_19BFAA740((uint64_t)&v66, &__str))
            {
              v34 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v65);
              if (v34 > *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str))
              {
                v35 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &__str);
                size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = __str.__r_.__value_.__l.__size_;
                std::string::basic_string(&v71, &__str, 0, size - 1, (std::allocator<char> *)v72);
                v37 = *(double *)sub_19BFFBFC0((uint64_t)&v69, &v71);
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v71.__r_.__value_.__l.__data_);
                v38 = sub_19C00050C((uint64_t **)&v66, &__str, (uint64_t)&__str);
                v39 = (int)(sqrt(v35 / v37) * 255.0);
                if (v39 >= 255)
                  v40 = 255;
                else
                  v40 = v39;
                if (v39)
                  v41 = 1;
                else
                  v41 = v35 / v37 <= 0.0;
                v42 = (v40 << 23) | 0x7FFFFF;
                if (!v41)
                  v42 = 0xFFFFFF;
                *((_DWORD *)v38 + 14) = v42;
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            ++v30;
          }
          ++v29;
          v3 = *a2;
        }
        while (v29 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      }
    }
    v5 = a1;
  }
  memset(&v71, 0, sizeof(v71));
  memset(&v65, 0, sizeof(v65));
  v43 = (uint64_t *)v66;
  if (v66 != (std::string *)&v67)
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = (__int128 *)(v43 + 4);
      v48 = (_OWORD *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_ >= v71.__r_.__value_.__r.__words[2])
      {
        v50 = sub_19BFFC198((uint64_t *)&v71, v47);
      }
      else
      {
        if (*((char *)v43 + 55) < 0)
        {
          sub_19BF8CD70((_BYTE *)v71.__r_.__value_.__l.__size_, (void *)v43[4], v43[5]);
        }
        else
        {
          v49 = *v47;
          *(_QWORD *)(v71.__r_.__value_.__l.__size_ + 16) = v43[6];
          *v48 = v49;
        }
        v50 = (std::string::size_type)v48 + 24;
      }
      v71.__r_.__value_.__l.__size_ = v50;
      if ((unint64_t)v44 >= v46)
      {
        v51 = (v44 - v45) >> 2;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v46 - (_QWORD)v45) >> 1 > v52)
          v52 = (uint64_t)(v46 - (_QWORD)v45) >> 1;
        if (v46 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v53 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
          v53 = (unint64_t)sub_19BFB3588(v53);
        else
          v54 = 0;
        v55 = (char *)(v53 + 4 * v51);
        *(_DWORD *)v55 = *((_DWORD *)v43 + 14);
        v56 = (std::string::size_type)(v55 + 4);
        while (v44 != v45)
        {
          v57 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v55 - 1) = v57;
          v55 -= 4;
        }
        v46 = v53 + 4 * v54;
        v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v65.__r_.__value_.__l.__size_ = v56;
        v65.__r_.__value_.__r.__words[2] = v46;
        if (v45)
          operator delete(v45);
        v45 = v55;
        v44 = (char *)v56;
      }
      else
      {
        *(_DWORD *)v44 = *((_DWORD *)v43 + 14);
        v44 += 4;
      }
      v65.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
      v58 = (char *)v43[1];
      if (v58)
      {
        do
        {
          v59 = (char **)v58;
          v58 = *(char **)v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (char **)v43[2];
          v60 = *v59 == (char *)v43;
          v43 = (uint64_t *)v59;
        }
        while (!v60);
      }
      v43 = (uint64_t *)v59;
    }
    while (v59 != &v67);
  }
  v61 = sub_19C00F3E4(v5 + 8, (uint64_t *)&v71, &v65);
  if (v65.__r_.__value_.__r.__words[0])
    operator delete(v65.__r_.__value_.__l.__data_);
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  sub_19BF8EA40((void ***)&v65);
  sub_19BFB1F54(v67);
LABEL_96:
  sub_19BFB1F54(v70[0]);
  return v61;
}

void sub_19C011EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p)
    operator delete(__p);
  __p = &a28;
  sub_19BF8EA40(&__p);
  sub_19BFB1F54(a23);
  sub_19BFB1F54(a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19C011FBC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;

  v5 = a3 >> 3;
  sub_19C00EC40(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 32) = v5;
  return 1;
}

uint64_t sub_19C012004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  uint64_t v10;

  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, &v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 128))(a1, &v10, a4);
}

_QWORD *sub_19C012084(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D19560;
  v11[1] = a4;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19C00F89C(a1 + 8, a2, a3, (uint64_t)v13);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C012178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C0121E8(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13[0] = &off_1E3D19560;
  v13[1] = a4;
  v14 = v13;
  sub_19BFFBC40((uint64_t)v15, v13);
  sub_19C00F944(a1 + 8, a2, a3, (uint64_t)v15, a5);
  v9 = v16;
  if (v16 == v15)
  {
    v10 = 4;
    v9 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_19C0122E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C012354()
{
  return 0;
}

BOOL sub_19C01235C(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

uint64_t sub_19C01236C(uint64_t a1, uint64_t *a2, char *__s, size_t a4)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v6 = 0;
  v7 = v4;
  if (sub_19C00FFE0((uint64_t *)(a1 + 16), __s, &v7, &v6, a4) == -2)
    return -1;
  else
    return v7;
}

uint64_t sub_19C0123B4(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t result;
  int v6;

  v6 = 0;
  v4 = sub_19C00FBB0((uint64_t *)(a1 + 8), a2, &v6);
  result = 0;
  if (v4)
  {
    if ((v6 & 0x7FFFFF) == 0x7FFFFF)
    {
      return 0;
    }
    else
    {
      *a3 = v6 & 0x7FFFFF;
      return 1;
    }
  }
  return result;
}

_QWORD *sub_19C012418(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = &off_1E3D19560;
  v11[1] = a3;
  v12 = v11;
  sub_19BFFBC40((uint64_t)v13, v11);
  sub_19C00FC24(a1 + 8, a2, (uint64_t)v13, a4);
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_19C01250C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C01257C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_19C00FF18(a1 + 8, a2, a3);
}

void sub_19C012588()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C01259C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D19560;
  result[1] = v3;
  return result;
}

uint64_t sub_19C0125D0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D19560;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C0125EC(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  int v4;

  v4 = *a2 & 0x7FFFFF;
  if (v4 != 0x7FFFFF)
    return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(result + 8) + 24), v4, *a3, a3[1], a4);
  return result;
}

uint64_t sub_19C01261C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D195C0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C012658()
{
  return &unk_1E3D195C0;
}

void sub_19C012668()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C01267C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D194E0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C0126B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D194E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C0126CC(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C0126E8(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D19540))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C012724()
{
  return &unk_1E3D19540;
}

void sub_19C012734()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C012748(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D19460;
  result[1] = v3;
  return result;
}

uint64_t sub_19C01277C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D19460;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C012798(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C0127B4(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D194C0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0127F0()
{
  return &unk_1E3D194C0;
}

void sub_19C012800()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C012814(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D12000;
  result[1] = v3;
  return result;
}

uint64_t sub_19C012848(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D12000;
  a2[1] = v2;
  return result;
}

uint64_t *sub_19C012864(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t **v3;
  uint64_t *result;
  int v5;

  v3 = *(uint64_t ***)(a1 + 8);
  result = (uint64_t *)sub_19BFF86F8((uint64_t)v3, a2);
  if (v3 + 1 == (uint64_t **)result)
  {
    v5 = 0;
    return sub_19BFF8F9C(v3, a2, (const void **)a2, &v5);
  }
  return result;
}

uint64_t sub_19C0128B8(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D115F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0128F4()
{
  return &unk_1E3D115F0;
}

void sub_19C012900(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  if (*(unsigned __int16 *)a1 >= 0xFu)
  {
    if (a1[1])
      JUMPOUT(0x1A1AD0CB8);
  }
}

void sub_19C012970(uint64_t a1)
{
  sub_19BFF8E8C(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C012994(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  void *__p;
  void *v18;
  unint64_t v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    LODWORD(v6) = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v19 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v18 = v7;
      v6 = (v6 + 1);
      v5 = (char *)v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) >= v6);
  }
  v14 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19C012AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C012B18(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  void **v28;
  void *v29[2];
  _QWORD v30[4];
  _BYTE v31[13];
  _QWORD v32[5];

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "PatriciaTrie.h", 140, "keys.size() == values.size()");
  v25 = 0;
  v26 = 0;
  v27 = 0;
  if (v4 != v3)
  {
    v7 = 0;
    do
    {
      memset(v30, 0, sizeof(v30));
      *(_OWORD *)v29 = 0u;
      LODWORD(v28) = *(_DWORD *)(*a3 + 4 * v7);
      HIDWORD(v28) = v7;
      v8 = (char *)(v3 + 24 * v7);
      if (v8[23] < 0)
      {
        v8 = *(char **)v8;
        v9 = *(_QWORD *)(v3 + 24 * v7 + 8);
      }
      else
      {
        v9 = v8[23];
      }
      sub_19BFA747C(v29, v8, &v8[v9], v9);
      v10 = v30[1];
      v11 = v30[2];
      if (v9 <= v30[2] - v30[1])
      {
        if (v9 < v30[2] - v30[1])
        {
          v11 = v30[1] + v9;
          v30[2] = v30[1] + v9;
        }
      }
      else
      {
        sub_19BFC41B8(&v30[1], v9 - (v30[2] - v30[1]));
        v10 = v30[1];
        v11 = v30[2];
      }
      if (v10 != v11)
      {
        v12 = 0;
        do
        {
          *(_BYTE *)(v10 + v12) = v12;
          ++v12;
        }
        while (v10 + v12 != v11);
      }
      *(_QWORD *)v31 = 0x3FF0000000000000;
      *(_DWORD *)&v31[8] = 1;
      v31[12] = 0;
      v13 = v26;
      if ((unint64_t)v26 >= v27)
      {
        v15 = 0x8E38E38E38E38E39 * (v26 - v25);
        v16 = v15 + 1;
        if (v15 + 1 > 0x38E38E38E38E38ELL)
          sub_19BF8EB40();
        if (0x1C71C71C71C71C72 * ((uint64_t)(v27 - (_QWORD)v25) >> 3) > v16)
          v16 = 0x1C71C71C71C71C72 * ((uint64_t)(v27 - (_QWORD)v25) >> 3);
        if (0x8E38E38E38E38E39 * ((uint64_t)(v27 - (_QWORD)v25) >> 3) >= 0x1C71C71C71C71C7)
          v17 = 0x38E38E38E38E38ELL;
        else
          v17 = v16;
        v32[4] = &v27;
        if (v17)
          v18 = (char *)sub_19BFA8FB0((uint64_t)&v27, v17);
        else
          v18 = 0;
        v19 = &v18[72 * v15];
        v32[0] = v18;
        v32[1] = v19;
        v32[3] = &v18[72 * v17];
        *(_QWORD *)v19 = v28;
        *((_QWORD *)v19 + 1) = 0;
        *((_QWORD *)v19 + 2) = 0;
        *((_QWORD *)v19 + 3) = 0;
        *(_OWORD *)(v19 + 8) = *(_OWORD *)v29;
        *((_QWORD *)v19 + 3) = v30[0];
        v29[0] = 0;
        v29[1] = 0;
        v30[0] = 0;
        *((_QWORD *)v19 + 4) = 0;
        *((_QWORD *)v19 + 5) = 0;
        *((_QWORD *)v19 + 6) = 0;
        *((_OWORD *)v19 + 2) = *(_OWORD *)&v30[1];
        *((_QWORD *)v19 + 6) = v30[3];
        memset(&v30[1], 0, 24);
        v20 = *(_QWORD *)v31;
        *(_QWORD *)(v19 + 61) = *(_QWORD *)&v31[5];
        *((_QWORD *)v19 + 7) = v20;
        v32[2] = v19 + 72;
        sub_19C0021D4((uint64_t *)&v25, v32);
        v21 = v26;
        sub_19C002294((uint64_t)v32);
        v26 = v21;
        if (v30[1])
        {
          v30[2] = v30[1];
          operator delete((void *)v30[1]);
        }
      }
      else
      {
        *v26 = v28;
        v13[1] = 0;
        v13[3] = 0;
        v13[4] = 0;
        v13[2] = 0;
        *(_OWORD *)(v13 + 1) = *(_OWORD *)v29;
        v13[3] = v30[0];
        v29[0] = 0;
        v29[1] = 0;
        v30[0] = 0;
        v13[5] = 0;
        v13[6] = 0;
        *((_OWORD *)v13 + 2) = *(_OWORD *)&v30[1];
        v13[6] = v30[3];
        memset(&v30[1], 0, 24);
        v14 = *(_QWORD *)v31;
        *(_QWORD *)((char *)v13 + 61) = *(_QWORD *)&v31[5];
        v13[7] = v14;
        v26 = v13 + 9;
      }
      if (v29[0])
      {
        v29[1] = v29[0];
        operator delete(v29[0]);
      }
      ++v7;
      v3 = *a2;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  v22 = sub_19BFF8D58(a1, &v25);
  v28 = (void **)&v25;
  sub_19BFA9270(&v28);
  return v22;
}

void sub_19C012E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_19BFA9270((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C012E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  result = sub_19BFA8BBC(a2, a3, 68, (_DWORD *)(a1 + 84));
  if ((_DWORD)result)
  {
    v8 = 0;
    result = sub_19BFA8BBC(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 40, &v8);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 40);
      v7 = v8;
      *(_DWORD *)(a1 + 6504) = v8;
      *(_QWORD *)(a1 + 6512) = v5;
      *(_QWORD *)(a1 + 6520) = v6;
      *(_DWORD *)(a1 + 12944) = v7;
      *(_QWORD *)(a1 + 12952) = v5;
      *(_QWORD *)(a1 + 12960) = v6;
      *(_BYTE *)(a1 + 80) = 1;
    }
  }
  return result;
}

uint64_t sub_19C012F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[4];
  _QWORD v10[4];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 104))(v9);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(v10, a1, v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10, a4);
}

_QWORD *sub_19C012F9C(_QWORD *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  unsigned __int8 v13;
  int v14;
  _QWORD v15[2];
  int v16;
  unsigned __int8 v17;
  char v18;

  if (a3)
  {
    v7 = result;
    v18 = 0;
    (*(void (**)(_QWORD *__return_ptr))(*result + 104))(v15);
    v8 = 0;
    v14 = 0;
    while (1)
    {
      result = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD *, _QWORD *, uint64_t, uint64_t))(*v7 + 120))(v11, v7, v15, a2 + v8, 1);
      LODWORD(v15[0]) = v11[0];
      v15[1] = v11[1];
      v16 = v12;
      v17 = v13;
      if (v13 == 255)
        break;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, int *))(*v7 + 128))(v7, v15, &v14);
      if ((_DWORD)result)
      {
        v9 = v8 + 1;
        if (a3 >= v8 + 1)
          v10 = v8 + 1;
        else
          v10 = a3;
        result = (_QWORD *)sub_19BFB8D60(*(_QWORD *)(a4 + 24), v14, a2, v10, (uint64_t)&v18);
        if (v18)
          return result;
        ++v8;
        if (v9 >= a3)
          return result;
      }
      else if (++v8 >= a3)
      {
        return result;
      }
    }
  }
  return result;
}

void sub_19C0130A4(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *__p[2];
  unint64_t v23;
  _QWORD v24[2];
  int v25;
  char v26;
  _QWORD v27[2];
  int v28;
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 104))(v24);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *, const void *, size_t))(*(_QWORD *)a1 + 120))(v27, a1, v24, a2, a3);
  LODWORD(v24[0]) = v27[0];
  v24[1] = v27[1];
  v25 = v28;
  v26 = (char)v29;
  if (v29 != 255)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    if (a3 >= 0x17)
    {
      v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v11 = a3 | 7;
      v12 = v11 + 1;
      v10 = operator new(v11 + 1);
      __p[1] = (void *)a3;
      v23 = v12 | 0x8000000000000000;
      __p[0] = v10;
    }
    else
    {
      HIBYTE(v23) = a3;
      v10 = __p;
      if (!a3)
      {
LABEL_10:
        *((_BYTE *)v10 + a3) = 0;
        v13 = operator new(0x28uLL);
        *v13 = &off_1E3D169F0;
        v13[1] = __p;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        v29 = v13;
        (*(void (**)(uint64_t, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, v24, v27, a5);
        v20 = v29;
        if (v29 == v27)
        {
          v21 = 4;
          v20 = v27;
        }
        else
        {
          if (!v29)
            goto LABEL_15;
          v21 = 5;
        }
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v20 + 8 * v21))(v20, v14, v15, v16, v17, v18, v19);
LABEL_15:
        if (SHIBYTE(v23) < 0)
          operator delete(__p[0]);
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19C013268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a22;
  if (a22 == v22)
  {
    v25 = 4;
    v24 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C0132C0(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
}

BOOL sub_19C0132D4(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a1 + 80))
    v2 = *(unsigned __int8 *)(a2 + 24) == 255;
  else
    v2 = 1;
  return !v2;
}

uint64_t sub_19C0132F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v7 = *(_DWORD *)a2;
  *(_DWORD *)a5 = *(_DWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a5 + 8) = v8;
  v9 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a5 + 16) = v9;
  v10 = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a5 + 24) = v10;
  if (a4)
  {
    v11 = a4;
    v13 = result;
    do
    {
      if (v10 == -1)
        goto LABEL_17;
      v14 = *a3;
      if (v10 + 1 <= (HIBYTE(v7) & 3))
      {
        result = sub_19C001FE8(a5);
        if ((_DWORD)result != v14)
          goto LABEL_16;
        v7 = *(_DWORD *)a5;
        v8 = *(_QWORD *)(a5 + 8);
        v9 = *(_DWORD *)(a5 + 16);
        v10 = *(_BYTE *)(a5 + 24) + 1;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 112))(v13, a5);
        if (!(_DWORD)result)
          goto LABEL_16;
        v15 = *(_DWORD *)a5;
        if (*(char *)(a5 + 24) + 1 <= (HIBYTE(*(_DWORD *)a5) & 3u))
          __assert_rtn("advanceCursorToChildNode", "PatriciaTrie.h", 378, "!cursor.hasMorePatriciaKeyBytes()");
        v9 = v15 & 0xFFFFFF;
        if ((v15 & 0xFFFFFF) != 0)
          goto LABEL_11;
        v8 = 0;
        v10 = -1;
        if (*(_BYTE *)(a5 + 24) || v15)
        {
          v7 = v15 & 0xFFFFFF;
          goto LABEL_18;
        }
        v7 = 0;
        if (!*(_BYTE *)(a5 + 16))
        {
LABEL_11:
          result = (uint64_t)sub_19C001C20(v13, v9);
          v7 = *(_DWORD *)(result + 24 * v14 + 272);
          if (!v7 && !*(_BYTE *)(result + 24 * v14 + 288))
          {
LABEL_16:
            v9 = 0;
            v8 = 0;
            v7 = 0;
LABEL_17:
            v10 = -1;
            goto LABEL_18;
          }
          v10 = 0;
          v16 = result + 24 * v14;
          v8 = *(_QWORD *)(v16 + 280);
          v9 = *(_DWORD *)(v16 + 288);
        }
      }
LABEL_18:
      *(_DWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v8;
      *(_DWORD *)(a5 + 16) = v9;
      ++a3;
      *(_BYTE *)(a5 + 24) = v10;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_19C013484(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  int v6;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if ((_DWORD)result)
  {
    if (*(char *)(a2 + 24) + 1 <= (*(_BYTE *)(a2 + 3) & 3u))
    {
      return 0;
    }
    else
    {
      v6 = *(_DWORD *)(a2 + 8);
      *a3 = v6;
      return v6 != 0;
    }
  }
  return result;
}

void sub_19C0134E4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  std::string v8;

  memset(&v8, 0, sizeof(v8));
  std::string::reserve(&v8, 0x40uLL);
  sub_19C0137D8(a1, a2, (uint64_t)&v8, a3, a4);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_19C013558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_19C013574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  void *result;
  char v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;
  char v30;
  _QWORD __dst[802];
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v34 = *MEMORY[0x1E0C80C00];
  result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 112))(v0);
  if ((_DWORD)result)
  {
    v29 = 0;
    v7 = *((_BYTE *)v4 + 24);
    v8 = *v4;
    v9 = HIBYTE(*v4) & 3;
    if (v7 + 1 <= v9)
    {
      LODWORD(__dst[0]) = *v4;
      __dst[1] = *((_QWORD *)v4 + 1);
      LODWORD(__dst[2]) = v4[4];
      v11 = v7 + 1;
      LOBYTE(__dst[3]) = v11;
      if (v9 >= v11)
        v12 = *((_BYTE *)&__dst[2] + v11);
      else
        v12 = 0;
      LOBYTE(v25) = v12;
      v13 = *(_QWORD *)(v2 + 24);
      if (!v13)
LABEL_27:
        sub_19BF94AC4();
      return (void *)(*(uint64_t (**)(uint64_t, int *, _QWORD *, char *))(*(_QWORD *)v13 + 48))(v13, &v25, __dst, &v29);
    }
    else
    {
      v10 = v8 & 0xFFFFFF;
      if ((v8 & 0xFFFFFF) != 0)
      {
        if (v10 < *(_DWORD *)(v5 + 84))
          __assert_rtn("enumerateChildren", "PatriciaTrie.h", 275, "cursor.isRoot() || firstChildOffset >= m_trieRootOffset");
      }
      else
      {
        if (*((_BYTE *)v4 + 24) || v8 || *((_BYTE *)v4 + 16))
          return result;
        v10 = 0;
      }
      v14 = sub_19C001C20(v5, v10);
      result = memcpy(__dst, v14, 0x10CuLL);
      v15 = 0x1FFFFFFFFFFFFD00;
      do
      {
        v16 = &__dst[v15];
        *((_DWORD *)v16 + 1604) = v14[v15 + 802];
        v16[803] = v14[v15 + 803];
        *((_DWORD *)v16 + 1608) = v14[v15 + 804];
        v15 += 3;
      }
      while (v15 * 8);
      v32 = *((_OWORD *)v14 + 401);
      v33 = v14[804];
      v17 = __dst[1];
      if (LODWORD(__dst[1]))
      {
        v18 = 0;
        do
        {
          v19 = *((unsigned __int8 *)&__dst[1] + (int)v18 + 4);
          v20 = &__dst[3 * *((unsigned __int8 *)&__dst[1] + (int)v18 + 4)];
          v21 = *((_DWORD *)v20 + 68);
          v22 = v20[35];
          if ((v21 & 0x10FFFFFF) != 0x10000000 || (v22 & 0xFF00000000) != 0)
          {
            v25 = v21;
            v26 = v22;
            v27 = __dst[3 * v19 + 36];
            v28 = 0;
            v30 = v27;
            v24 = *(_QWORD *)(v2 + 24);
            if (!v24)
              goto LABEL_27;
            result = (void *)(*(uint64_t (**)(uint64_t, char *, int *, char *))(*(_QWORD *)v24 + 48))(v24, &v30, &v25, &v29);
            if (v29)
              break;
          }
          ++v18;
        }
        while (v18 < v17);
      }
    }
  }
  return result;
}

_QWORD *sub_19C0137D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _QWORD *result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v19 = a5;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v18 = 0;
    v17 = 0;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 128))(a1, a2, &v18);
    if (!(_DWORD)result
      || ((v11 = *(char *)(a3 + 23), v11 >= 0) ? (v12 = a3) : (v12 = *(_QWORD *)a3),
          v11 >= 0 ? (v13 = *(unsigned __int8 *)(a3 + 23)) : (v13 = *(_QWORD *)(a3 + 8)),
          result = (_QWORD *)sub_19BFB8D60(*(_QWORD *)(a4 + 24), v18, v12, v13, (uint64_t)&v17),
          !v17))
    {
      if ((a5 & 0x80000000) != 0)
        goto LABEL_14;
      v14 = *(unsigned __int8 *)(a3 + 23);
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a3 + 8);
      if (v14 < a5)
      {
LABEL_14:
        v15 = operator new(0x28uLL);
        *v15 = &off_1E3D16A70;
        v15[1] = a3;
        v15[2] = a1;
        v15[3] = a4;
        v15[4] = &v19;
        v21 = v15;
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 144))(a1, a2, v20);
        result = v21;
        if (v21 == v20)
        {
          v16 = 4;
          result = v20;
        }
        else
        {
          if (!v21)
            return result;
          v16 = 5;
        }
        return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
      }
    }
  }
  return result;
}

void sub_19C013940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C013984()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C013998(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D16A70;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C0139D8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D16A70;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_19C013A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  std::string::value_type v9;
  _QWORD *result;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 8;
  v5 = *(std::string **)(a1 + 8);
  v6 = *(_QWORD *)(v7 + 8);
  v8 = *(char *)(a3 + 24);
  if ((*(_BYTE *)(a3 + 3) & 3u) >= v8)
    v9 = *(_BYTE *)(a3 + v8 + 16);
  else
    v9 = 0;
  std::string::push_back(v5, v9);
  result = sub_19C0137D8(v6, a3, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), **(_DWORD **)(a1 + 32));
  v11 = *(uint64_t **)(a1 + 8);
  if (*((char *)v11 + 23) < 0)
  {
    v12 = v11[1] - 1;
    v11[1] = v12;
    v11 = (uint64_t *)*v11;
  }
  else
  {
    v12 = *((unsigned __int8 *)v11 + 23) - 1;
    *((_BYTE *)v11 + 23) = v12 & 0x7F;
  }
  *((_BYTE *)v11 + v12) = 0;
  return result;
}

uint64_t sub_19C013AA4(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16AD0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C013AE0()
{
  return &unk_1E3D16AD0;
}

void sub_19C013AF0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C013B04(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D169F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C013B44(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D169F0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C013B6C(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 + 8);
  v9 = a1[3];
  v10 = v9 + v8;
  v11 = a1[1];
  v12 = *(char *)(v11 + 23);
  if (v12 < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    v11 = a1[1];
    v9 = a1[3];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
  v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  v15 = *(_QWORD *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    v11 = a1[1];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
LABEL_9:
  if ((v12 & 0x80) != 0)
    v11 = *(_QWORD *)v11;
  return sub_19BFB8D60(*(_QWORD *)(a1[4] + 24), *a2, v11, v10, a4);
}

uint64_t sub_19C013C40(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D16A50))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C013C7C()
{
  return &unk_1E3D16A50;
}

void sub_19C013C8C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C013CA0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D11F50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C013CD8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D11F50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19C013CF8(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  char *v12;
  unsigned int v13;
  char v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  char *v37;
  char v38;
  BOOL v39;
  unsigned __int16 *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  __int128 v44;
  char *v45;
  void *v46[2];
  __int128 v47;
  void *__p[2];
  char *v49;
  uint64_t v50;
  int v51;
  char v52;
  __int128 v53;
  char v54;
  __int128 v55;
  int v56;
  const void *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  _OWORD v62[3];
  unsigned __int16 v63[2];
  unsigned __int16 v64;
  char v65;
  void *v66;
  int i;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 + 8 != sub_19BFF86F8(v6, a2))
    return;
  v49 = 0;
  v47 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v46 = 0u;
  v7 = *a2;
  if (v7 <= 0xE)
    v8 = (char *)(a2 + 1);
  else
    v8 = (char *)*((_QWORD *)a2 + 1);
  sub_19BFA747C(&v46[1], v8, &v8[v7], v7);
  v42 = a1;
  v43 = a2;
  v9 = *(_QWORD *)(a1 + 16);
  memset(v62, 0, sizeof(v62));
  v59 = 0;
  v60 = 0;
  v61 = 0;
  sub_19BF86B60((uint64_t)v63, a3);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  for (i = 0; ; v10 = HIWORD(i))
  {
    v13 = v64;
    if (!v64)
    {
      sub_19BF86BF8(v63);
      v13 = v64;
    }
    if (v10 >= v13)
      break;
    v14 = v62[0];
    if (v12 >= v61)
    {
      v15 = (unint64_t)v59;
      v16 = (_BYTE *)(v12 - v59);
      v17 = v12 - v59 + 1;
      if (v17 < 0)
        sub_19BF8EB40();
      v18 = v61 - v59;
      if (2 * (v61 - v59) > (unint64_t)v17)
        v17 = 2 * v18;
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
        v20 = (char *)operator new(v19);
      else
        v20 = 0;
      v11 = &v16[(_QWORD)v20];
      v21 = &v16[(_QWORD)v20];
      *v21 = v14;
      v22 = v21 + 1;
      if (v12 != (char *)v15)
      {
        v23 = &v12[~v15];
        do
        {
          v24 = *--v12;
          (v23--)[(_QWORD)v20] = v24;
        }
        while (v12 != (char *)v15);
        v12 = v59;
        v11 = v20;
      }
      v59 = v11;
      v60 = v22;
      v61 = &v20[v19];
      if (v12)
        operator delete(v12);
      v12 = v22;
    }
    else
    {
      *v12++ = v62[0];
    }
    v60 = v12;
    v25 = sub_19C02211C((uint64_t)v63);
    sub_19BFD4084(&v57, v9, v25);
    sub_19BF8BF40((uint64_t)&v53, v9, (uint64_t)v62, v25, (unsigned __int16 *)&v57);
    if (LOWORD(v62[0]) >= 0xFu && *((_QWORD *)&v62[0] + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v62[0] + 1), 0x1000C8077774924);
    v62[0] = v53;
    if ((unsigned __int16)v53 >= 0xFu)
      LOWORD(v53) = 0;
    LOBYTE(v62[1]) = v54;
    if (WORD4(v62[1]) >= 0xFu && *(_QWORD *)&v62[2])
      MEMORY[0x1A1AD0CB8](*(_QWORD *)&v62[2], 0x1000C8077774924);
    *(_OWORD *)((char *)&v62[1] + 8) = v55;
    if ((unsigned __int16)v55 >= 0xFu)
      LOWORD(v55) = 0;
    DWORD2(v62[2]) = v56;
    if ((unsigned __int16)v53 >= 0xFu && *((_QWORD *)&v53 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v53 + 1), 0x1000C8077774924);
    if ((unsigned __int16)v57 >= 0xFu)
    {
      if (v58)
        MEMORY[0x1A1AD0CB8](v58, 0x1000C8077774924);
    }
  }
  v44 = 0uLL;
  v45 = 0;
  if (v12 == v11)
  {
    if (v66 && v65 == 1)
      free(v66);
    v41 = v42;
    v40 = v43;
    if (!v11)
      goto LABEL_80;
  }
  else
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    do
    {
      if (v31 <= v11[v30])
      {
        do
        {
          v32 = v31;
          if (v29 >= v28)
          {
            v33 = (uint64_t)&v29[-v27 + 1];
            if (v33 < 0)
              sub_19BF8EB40();
            if (2 * (uint64_t)&v28[-v27] > (unint64_t)v33)
              v33 = 2 * (_QWORD)&v28[-v27];
            if ((unint64_t)&v28[-v27] >= 0x3FFFFFFFFFFFFFFFLL)
              v34 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v34 = v33;
            if (v34)
              v35 = (char *)operator new(v34);
            else
              v35 = 0;
            v36 = &v29[(_QWORD)v35 - v27];
            *v36 = v30;
            v26 = v36 + 1;
            if (v29 != (char *)v27)
            {
              v37 = &v29[~v27];
              do
              {
                v38 = *--v29;
                (v37--)[(_QWORD)v35] = v38;
              }
              while (v29 != (char *)v27);
              v36 = v35;
            }
            v28 = &v35[v34];
            if (v27)
              operator delete((void *)v27);
            v27 = (unint64_t)v36;
          }
          else
          {
            *v29 = v30;
            v26 = v29 + 1;
          }
          v31 = v32 + 1;
          v11 = v59;
          v29 = v26;
        }
        while (v32 < v59[v30]);
        v12 = v60;
        v29 = v26;
      }
      ++v30;
    }
    while (v30 < v12 - v11);
    *((_QWORD *)&v44 + 1) = v26;
    v45 = v28;
    *(_QWORD *)&v44 = v27;
    if (v66)
      v39 = v65 == 1;
    else
      v39 = 0;
    if (v39)
      free(v66);
    v41 = v42;
    v40 = v43;
  }
  v60 = v11;
  operator delete(v11);
LABEL_80:
  if (WORD4(v62[1]) >= 0xFu && *(_QWORD *)&v62[2])
    MEMORY[0x1A1AD0CB8](*(_QWORD *)&v62[2], 0x1000C8077774924);
  if (LOWORD(v62[0]) >= 0xFu && *((_QWORD *)&v62[0] + 1))
    MEMORY[0x1A1AD0CB8](*((_QWORD *)&v62[0] + 1), 0x1000C8077774924);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = v44;
  v49 = v45;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  sub_19BFF8B98(*(uint64_t ***)(v41 + 8), v40, (const void **)v40, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v46[1])
  {
    *(void **)&v47 = v46[1];
    operator delete(v46[1]);
  }
}

void sub_19C014214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,__int16 a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  if (*(unsigned __int16 *)(v33 - 168) >= 0xFu)
  {
    v35 = *(_QWORD *)(v33 - 160);
    if (v35)
      MEMORY[0x1A1AD0CB8](v35, 0x1000C8077774924);
  }
  if (*(unsigned __int16 *)(v33 - 192) >= 0xFu)
  {
    v36 = *(_QWORD *)(v33 - 184);
    if (v36)
      MEMORY[0x1A1AD0CB8](v36, 0x1000C8077774924);
  }
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C01432C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D115D0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C014368()
{
  return &unk_1E3D115D0;
}

void sub_19C014374(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_19C012900(v1 + 4);
    operator delete(v1);
  }
}

void sub_19C0143BC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C0143D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D11FA8;
  result[1] = v3;
  return result;
}

uint64_t sub_19C014404(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D11FA8;
  a2[1] = v2;
  return result;
}

uint64_t *sub_19C014420(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t **v3;
  uint64_t *result;
  int v5;

  v3 = *(uint64_t ***)(a1 + 8);
  result = (uint64_t *)sub_19BFF86F8((uint64_t)v3, a2);
  if (v3 + 1 == (uint64_t **)result)
  {
    v5 = 0;
    return sub_19BFF8770(v3, a2, (const void **)a2, &v5);
  }
  return result;
}

uint64_t sub_19C014474(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D115E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0144B0()
{
  return &unk_1E3D115E0;
}

uint64_t sub_19C0144BC(uint64_t *a1, const __CFString *a2, CFErrorRef *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  const __CFString *v9;
  CFErrorRef v10;
  void *__p[2];
  char v12;

  sub_19BF87140(a2, __p);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)__p);
  v6 = (uint64_t *)*a1;
  *a1 = (uint64_t)v5;
  if (v6)
    sub_19C014608((uint64_t)v6);
  if (v12 < 0)
    operator delete(__p[0]);
  if (!*a1)
  {
    if (a3)
    {
      v9 = CFSTR("Failed to load model file");
      goto LABEL_17;
    }
    return 0;
  }
  v7 = *(_QWORD *)*a1;
  if (*(_DWORD *)v7 != 1192228)
  {
    if (a3)
    {
      v9 = CFSTR("Magic number is not valid");
      goto LABEL_17;
    }
    return 0;
  }
  if (*(_DWORD *)(v7 + 4) != 1)
  {
    if (a3)
    {
      v9 = CFSTR("Unsupported version number");
      goto LABEL_17;
    }
    return 0;
  }
  result = sub_19C014650(a1 + 1, (_QWORD *)(v7 + 12), *(unsigned int *)(v7 + 8));
  if (a3 && (result & 1) == 0)
  {
    v9 = CFSTR("Failed to initialize trie");
LABEL_17:
    v10 = sub_19BFEA6B4(v9);
    result = 0;
    *a3 = v10;
  }
  return result;
}

void sub_19C0145CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1A1AD0CDC](v15, 0x1080C40FC6463CFLL);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19C014608(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
    munmap(v2, *(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C014650(uint64_t *a1, _QWORD *a2, unint64_t a3)
{
  char *v7;
  uint64_t v8;

  if (a3 >= 0xF)
  {
    if (*a2 == 0x2065766F6C206557 && *(_QWORD *)((char *)a2 + 7) == 0x2E61736972614D20)
    {
      sub_19BF8F0D8(a1 + 2, (uint64_t)a2, a3);
      return 1;
    }
  }
  else if (a3 < 4)
  {
    return 0;
  }
  v7 = (char *)a2 + 4;
  v8 = *(unsigned int *)a2;
  sub_19BF8F0D8(a1 + 2, (uint64_t)a2 + 4, v8);
  a1[3] = (uint64_t)&v7[v8];
  a1[4] = (a3 - v8 - 4) >> 3;
  return 1;
}

void sub_19C014708(std::ios_base::failure *a1, const void **a2, uint64_t a3, unsigned int a4)
{
  size_t v8;
  std::string *v9;
  const void *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::error_code __ec;
  std::string v19;
  std::string v20;
  std::string __msg;

  if (*((char *)a2 + 23) >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = &v19;
  sub_19BFE9E2C((uint64_t)&v19, v8 + 13);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*((char *)a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = *a2;
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, " failed for '");
  v11 = *(char *)(a3 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a3;
  else
    v12 = *(const std::string::value_type **)a3;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a3 + 23);
  else
    v13 = *(_QWORD *)(a3 + 8);
  v14 = std::string::append(&v19, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v20, "'", 1uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __msg.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)&__ec.__val_ = a4;
  __ec.__cat_ = std::generic_category();
  std::ios_base::failure::failure(a1, &__msg, &__ec);
  if (SHIBYTE(__msg.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__msg.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_19C01486C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C0148B8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)(*(uint64_t (**)(unint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v10[0] = &off_1E3D10D40;
    v10[1] = a1;
    v10[2] = a3;
    v11 = v10;
    sub_19BF8F544(a1 + 2, a2, (uint64_t)v10, a4);
    result = v11;
    if (v11 == v10)
    {
      v9 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  return result;
}

void sub_19C014980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C0149BC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C0149D0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D10D40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C014A08(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D10D40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C014A28(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v6 = *a3;
  v7 = a3[1];
  v8 = sub_19C014ABC(*(_QWORD *)(a1 + 8), *a2);
  return sub_19BF91324(*(_QWORD *)(a1 + 16), v8, v6, v7, a4);
}

uint64_t sub_19C014A74(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D10818))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C014AB0()
{
  return &unk_1E3D10818;
}

unint64_t sub_19C014ABC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  std::logic_error *exception;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (v2 <= a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_19BFADD78(exception, "Marisa Payload");
      __cxa_throw(exception, (struct type_info *)off_1E3D0FF68, MEMORY[0x1E0DE42E0]);
    }
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * a2);
  }
  return a2;
}

void sub_19C014B20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C014B38()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C014B4C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D10CE8;
  result[1] = v3;
  return result;
}

uint64_t sub_19C014B80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D10CE8;
  a2[1] = v2;
  return result;
}

std::string *sub_19C014B9C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  std::string *result;

  result = sub_19BFB4C20(*(std::string **)(a1 + 8), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  *a4 = 1;
  return result;
}

uint64_t sub_19C014BCC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D10808))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C014C08()
{
  return &unk_1E3D10808;
}

void sub_19C014C18()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C014C2C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D10C90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C014C64(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D10C90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const void **sub_19C014C84(uint64_t a1, uint64_t a2, _QWORD *a3, BOOL *a4)
{
  uint64_t v4;
  const void *v8;
  unsigned __int16 v9[3];
  char v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a3[1];
  if (!v4)
    __assert_rtn("operator()", "LXLemmatizerImpl.cpp", 112, "!posAndLemma.empty()");
  sub_19BFF6914((uint64_t)v9, (char *)(*a3 + 1), (unsigned __int16)(v4 - 1));
  sub_19BF8CFAC((CFStringRef *)&v8, v9);
  if (v11 && v10 == 1)
    free(v11);
  (*(void (**)(void))(**(_QWORD **)(a1 + 8) + 16))();
  *a4 = **(_BYTE **)(a1 + 16) != 0;
  return sub_19BF8DAB8(&v8);
}

void sub_19C014D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  sub_19BF8DAB8((const void **)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C014DB4(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D107F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C014DF0()
{
  return &unk_1E3D107F8;
}

uint64_t sub_19C014DFC(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *__p;
  void *v23;
  char *v24;

  __p = 0;
  v23 = 0;
  v24 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = 0;
    v8 = 0;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        v10 = (uint64_t *)*v6;
        v9 = v6[1];
      }
      else
      {
        v9 = *((unsigned __int8 *)v6 + 23);
        v10 = v6;
      }
      if (v8 >= v24)
      {
        v12 = (v8 - v7) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          sub_19BF8EB40();
        v14 = v24 - v7;
        if ((v24 - v7) >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        v16 = (char *)sub_19BFAEDF0(v15);
        v18 = &v16[16 * v12];
        *(_QWORD *)v18 = v10;
        *((_QWORD *)v18 + 1) = v9;
        v19 = (char *)__p;
        v7 = v18;
        if (v8 != __p)
        {
          do
          {
            *((_OWORD *)v7 - 1) = *((_OWORD *)v8 - 1);
            v7 -= 16;
            v8 -= 16;
          }
          while (v8 != v19);
          v8 = v19;
        }
        v11 = v18 + 16;
        __p = v7;
        v24 = &v16[16 * v17];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_QWORD *)v8 = v10;
        *((_QWORD *)v8 + 1) = v9;
        v11 = v8 + 16;
      }
      v23 = v11;
      v6 += 3;
      v8 = (char *)v11;
    }
    while (v6 != a3);
  }
  sub_19BF8EFCC((uint64_t *)(a1 + 16), (uint64_t *)&__p, a4, *(_DWORD *)(a1 + 8));
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  return 1;
}

uint64_t sub_19C014FA8@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  int v5;
  const std::string::value_type *v6;
  void **v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string::value_type __s[4];
  void *__p[2];
  int64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  sub_19BFA0144((uint64_t)v14);
  sub_19BF8F250(a1 + 2, (uint64_t)&v15);
  sub_19BFAAA88(__p, (uint64_t)v16);
  v4 = a1[4];
  if (v4)
  {
    v5 = HIBYTE(v13);
    if (v13 < 0)
      v5 = (int)__p[1];
    *(_DWORD *)__s = v5;
    v6 = (const std::string::value_type *)a1[3];
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    std::string::append(a2, __s, 4uLL);
    if (v13 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (v13 >= 0)
      v8 = HIBYTE(v13);
    else
      v8 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v7, v8);
    std::string::append(a2, v6, 8 * v4);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v13;
  }
  v14[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15 = v9;
  v16[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD0C7C](&v18);
}

void sub_19C0150F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_19BFA0270((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C015138(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D10888;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_19BF8EFC8(a1 + 2);
  return a1;
}

void sub_19C015180(_QWORD *a1)
{
  sub_19C015138(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C0151A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  void *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v30;
  void *v31;
  void *__p;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  __p = 0;
  v33 = 0;
  v34 = 0;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v10 = *(void **)(a3 + 8 * i);
      v11 = *(_QWORD *)(a4 + 8 * i);
      v30 = v11;
      v31 = v10;
      v12 = v36;
      if ((unint64_t)v36 >= v37)
      {
        v13 = (_QWORD *)sub_19BFFA830(&v35, &v31, &v30);
      }
      else
      {
        sub_19BFA4428(v36, v10, v11);
        v13 = v12 + 3;
      }
      v36 = v13;
      if (a5)
      {
        v14 = *(_QWORD *)(a5 + 8 * i);
        v15 = v33;
        if (v33 >= v34)
        {
          v17 = (char *)__p;
          v18 = (v33 - (_BYTE *)__p) >> 3;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
            sub_19BF8EB40();
          v20 = v34 - (_BYTE *)__p;
          if ((v34 - (_BYTE *)__p) >> 2 > v19)
            v19 = v20 >> 2;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)sub_19BF965C4((uint64_t)&v34, v21);
            v17 = (char *)__p;
            v15 = v33;
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[8 * v18];
          *(_QWORD *)v23 = v14;
          v16 = v23 + 8;
          while (v15 != v17)
          {
            v24 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            *((_QWORD *)v23 - 1) = v24;
            v23 -= 8;
          }
          __p = v23;
          v33 = v16;
          v34 = &v22[8 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_QWORD *)v33 = v14;
          v16 = v15 + 8;
        }
        v33 = v16;
      }
    }
  }
  v25 = *a1;
  if (a5)
    v26 = (*(uint64_t (**)(void))(v25 + 64))();
  else
    v26 = (*(uint64_t (**)(void))(v25 + 56))();
  v27 = v26;
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
  __p = &v35;
  sub_19BF8EA40((void ***)&__p);
  return v27;
}

void sub_19C01536C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  sub_19BF8EA40((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0153B0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, a2, a3, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19C0153F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D10EF8;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C01548C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C0154C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D10EA0;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C015564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0155A0(uint64_t a1, uint64_t **a2)
{
  return sub_19C014DFC(a1, *a2, a2[1], 0);
}

uint64_t sub_19C0155B0(_QWORD *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  void *v21;
  uint64_t v22;

  __p = 0;
  v21 = 0;
  v22 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (v6 - v5) != a3[1] - *a3)
    __assert_rtn("build", "MarisaTrie.h", 61, "keys.size() == values.size()");
  v9 = sub_19C014DFC((uint64_t)a1, v5, v6, &__p);
  if ((_DWORD)v9)
  {
    sub_19BF92350((uint64_t)(a1 + 5), 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    v10 = a1[5];
    v11 = (char *)a2[1] - (char *)*a2;
    if (v11)
    {
      v12 = v11 / 24;
      v13 = *a3;
      v14 = (uint64_t *)__p;
      if (v12 <= 1)
        v12 = 1;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        *(_QWORD *)(v10 + 8 * v17) = v15;
        --v12;
      }
      while (v12);
    }
    v18 = (a1[6] - v10) >> 3;
    a1[3] = v10;
    a1[4] = v18;
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_19C0156E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C015700(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  unint64_t v8;

  v8 = 0;
  v6 = sub_19BF8F364((uint64_t *)(a1 + 16), a2, a3, (uint64_t *)&v8);
  if ((_DWORD)v6)
    *a4 = sub_19C014ABC(a1, v8);
  return v6;
}

_QWORD *sub_19C01575C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D10E48;
  v6[1] = a1;
  v6[2] = a4;
  v7 = v6;
  sub_19BF8F424((uint64_t *)(a1 + 16), a2, a3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C0157F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C015834(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E3D10DF0;
  v7[1] = a1;
  v7[2] = a4;
  v8 = v7;
  sub_19BF8F484((unint64_t *)(a1 + 16), a2, a3, (uint64_t)v7, a5);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_19C0158D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_19C01590C@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL sub_19C015918(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

void sub_19C01592C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  sub_19BF8F4E4((uint64_t *)(a1 + 16), a3, a4, a2, a5);
}

uint64_t sub_19C015944(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  unint64_t v8;

  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 112))(a1))
    return 0;
  v8 = 0;
  v6 = sub_19BF8F304(a1 + 2, a2, (uint64_t *)&v8);
  if ((_DWORD)v6)
    *a3 = sub_19C014ABC((uint64_t)a1, v8);
  return v6;
}

_QWORD *sub_19C0159C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v8[0] = &off_1E3D10D98;
    v8[1] = a3;
    v9 = v8;
    sub_19BF8F5A4(a1 + 2, a2, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  return result;
}

void sub_19C015A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C015ABC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C015AD0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D10D98;
  result[1] = v3;
  return result;
}

uint64_t sub_19C015B04(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D10D98;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C015B20(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

uint64_t sub_19C015B60(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D10828))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C015B9C()
{
  return &unk_1E3D10828;
}

void sub_19C015BAC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C015BC0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D10DF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C015BF8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D10DF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C015C18(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v6 = *a3;
  v7 = a3[1];
  v8 = sub_19C014ABC(*(_QWORD *)(a1 + 8), *a2);
  return sub_19BF91324(*(_QWORD *)(a1 + 16), v8, v6, v7, a4);
}

uint64_t sub_19C015C64(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D10838))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C015CA0()
{
  return &unk_1E3D10838;
}

void sub_19C015CB0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C015CC4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D10E48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C015CFC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D10E48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C015D1C(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v6 = *a3;
  v7 = a3[1];
  v8 = sub_19C014ABC(*(_QWORD *)(a1 + 8), *a2);
  return sub_19BF91324(*(_QWORD *)(a1 + 16), v8, v6, v7, a4);
}

uint64_t sub_19C015D68(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D10848))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C015DA4()
{
  return &unk_1E3D10848;
}

void sub_19C015DB4()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C015DC8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D10EA0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C015DFC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D10EA0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C015E18(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C015E34(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D10858))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C015E70()
{
  return &unk_1E3D10858;
}

void sub_19C015E80()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C015E94(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D10EF8;
  result[1] = v3;
  return result;
}

uint64_t sub_19C015EC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D10EF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C015EE4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, a3[1], a4);
}

uint64_t sub_19C015F00(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D10868))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C015F3C()
{
  return &unk_1E3D10868;
}

uint64_t sub_19C015F48(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E3D13FF0;
  v3 = (void **)(a1 + 8);
  sub_19C016094(&v3);
  return a1;
}

void sub_19C015F8C(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_1E3D13FF0;
  v1 = (void **)(a1 + 8);
  sub_19C016094(&v1);
  JUMPOUT(0x1A1AD0CDCLL);
}

unint64_t sub_19C015FE0(uint64_t a1, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2 + 8) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2)) >> 3);
}

unint64_t sub_19C016008(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
}

char *sub_19C016024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *result;

  result = (char *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2) + 40 * a3);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t sub_19C016054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2) + 40 * a3 + 32);
}

double sub_19C016074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2) + 40 * a3 + 24);
}

void sub_19C016094(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_19C016114(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19C016114(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0)
          operator delete(*(v4 - 5));
        v4 -= 5;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_19C01618C(_QWORD *__dst, void *__src, unint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  if (a3 >= 0xB)
  {
    v7 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB)
      v7 = a3 | 3;
    v6 = sub_19BFAED5C(v7 + 1);
    __dst[1] = a3;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = a3;
    v6 = __dst;
    if (!a3)
      goto LABEL_9;
  }
  memmove(v6, __src, 2 * a3);
LABEL_9:
  *((_WORD *)v6 + a3) = 0;
  return __dst;
}

void sub_19C016224(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 16), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 16) = v3 + 24 * ((24 * v6 - 24) / 0x18) + 24;
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      sub_19BF8EB40();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_19BF8E6D0();
    v11 = 3 * v10;
    v12 = (char *)operator new(24 * v10);
    v13 = &v12[8 * ((v3 - v4) >> 3)];
    v14 = &v12[8 * v11];
    v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = v14;
      if (!v3)
        return;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v3 - 24);
        v3 -= 24;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = *(_QWORD *)(v3 + 16);
        *(_QWORD *)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        *(_QWORD *)(v3 + 16) = 0;
      }
      while (v3 != v4);
      v19 = *(_QWORD *)(a1 + 8);
      v3 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = v14;
      if (v3 != v19)
      {
        do
        {
          v3 -= 24;
          v21 = (void **)v3;
          sub_19C016114(&v21);
        }
        while (v3 != v19);
        v3 = v19;
      }
      if (!v3)
        return;
    }
    operator delete((void *)v3);
    return;
  }
  if (a2 < v5)
  {
    v20 = v4 + 24 * a2;
    while (v3 != v20)
    {
      v3 -= 24;
      v21 = (void **)v3;
      sub_19C016114(&v21);
    }
    *(_QWORD *)(a1 + 16) = v20;
  }
}

void **sub_19C016424(void **a1, void *__src, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  _WORD *v8;
  unint64_t v9;

  if (*((char *)a1 + 23) < 0)
  {
    v7 = (uint64_t)a1[1];
    v6 = ((unint64_t)a1[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 10;
    v7 = *((unsigned __int8 *)a1 + 23);
  }
  if (v6 - v7 >= a3)
  {
    if (a3)
    {
      v8 = a1;
      if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
        v8 = *a1;
      memmove(&v8[v7], __src, 2 * a3);
      v9 = v7 + a3;
      if (*((char *)a1 + 23) < 0)
        a1[1] = (void *)v9;
      else
        *((_BYTE *)a1 + 23) = v9 & 0x7F;
      v8[v9] = 0;
    }
  }
  else
  {
    sub_19C0164E8(a1, v6, a3 - v6 + v7, v7, v7, 0, a3, __src);
  }
  return a1;
}

void sub_19C0164E8(void **a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8)
{
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  if (0x7FFFFFFFFFFFFFF6 - a2 < a3)
    sub_19BF8E4EC();
  v15 = (char *)a1;
  if (*((char *)a1 + 23) < 0)
    v15 = (char *)*a1;
  v16 = a3 + a2;
  if (a3 + a2 <= 2 * a2)
    v16 = 2 * a2;
  v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v16 | 3) != 0xB)
    v17 = v16 | 3;
  if (v16 >= 0xB)
    v18 = v17 + 1;
  else
    v18 = 11;
  if (a2 > 0x3FFFFFFFFFFFFFF2)
    v19 = 0x7FFFFFFFFFFFFFF7;
  else
    v19 = v18;
  v20 = (char *)sub_19BFAED5C(v19);
  v21 = v20;
  v23 = v22;
  if (a5)
    memmove(v20, v15, 2 * a5);
  if (a7)
    memmove(&v21[2 * a5], a8, 2 * a7);
  v24 = a4 - (a6 + a5);
  if (v24)
    memmove(&v21[2 * a5 + 2 * a7], &v15[2 * a5 + 2 * a6], 2 * v24);
  if (a2 != 10)
    operator delete(v15);
  v25 = (void *)(a7 + a5 + v24);
  *a1 = v21;
  a1[1] = v25;
  a1[2] = (void *)(v23 | 0x8000000000000000);
  *(_WORD *)&v21[2 * (_QWORD)v25] = 0;
}

uint64_t sub_19C016624(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E3D146F0;
  v2 = *(void **)(a1 + 1352);
  if (v2 && *(_BYTE *)(a1 + 1350) == 1)
    free(v2);
  sub_19BF8769C(a1 + 1296);
  return a1;
}

void sub_19C016670(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E3D146F0;
  v2 = *(void **)(a1 + 1352);
  if (v2 && *(_BYTE *)(a1 + 1350) == 1)
    free(v2);
  sub_19BF8769C(a1 + 1296);
  JUMPOUT(0x1A1AD0CDCLL);
}

unsigned __int16 *sub_19C0166CC(unsigned __int16 *a1, uint64_t a2, unsigned __int16 *a3, unsigned int a4)
{
  size_t v8;
  int v9;
  size_t v10;
  void *v11;
  unsigned __int16 *result;
  const void *v13;
  unsigned __int16 *v14;
  __int128 v15;
  char v16;

  v16 = *((_BYTE *)a3 + 16);
  v8 = a3[12];
  if (v8 < 0xF)
  {
    v15 = *(_OWORD *)(a3 + 12);
  }
  else
  {
    LOWORD(v15) = a3[12];
    *((_QWORD *)&v15 + 1) = operator new[]();
    memcpy(*((void **)&v15 + 1), *((const void **)a3 + 4), v8);
  }
  v9 = sub_19C016868(a2, a4, &v16, (unsigned __int16 *)&v15);
  v10 = *a3;
  if (v10 <= 0xE)
    v11 = a3 + 1;
  else
    v11 = (void *)*((_QWORD *)a3 + 1);
  *(_BYTE *)sub_19BF8BC44((uint64_t)&v13, v10 + 1, v11, v10) = a4;
  result = sub_19BF8C3B0(a1, &v13, v16, (const void **)&v15, v9);
  if ((unsigned __int16)v13 >= 0xFu)
  {
    result = v14;
    if (v14)
      result = (unsigned __int16 *)MEMORY[0x1A1AD0CB8](v14, 0x1000C8077774924);
  }
  if ((unsigned __int16)v15 >= 0xFu)
  {
    result = (unsigned __int16 *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
      return (unsigned __int16 *)MEMORY[0x1A1AD0CB8](*((_QWORD *)&v15 + 1), 0x1000C8077774924);
  }
  return result;
}

void sub_19C016800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9, uint64_t a10, unsigned __int16 a11, uint64_t a12)
{
  if (a9 >= 0xFu && a10)
    MEMORY[0x1A1AD0CB8](a10, 0x1000C8077774924);
  if (a11 >= 0xFu)
  {
    if (a12)
      MEMORY[0x1A1AD0CB8](a12, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C016868(uint64_t a1, unsigned int a2, _BYTE *a3, unsigned __int16 *a4)
{
  size_t v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  BOOL v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = *a4;
  if ((_DWORD)v7)
  {
    if (v7 <= 0xE)
      v8 = a4 + 1;
    else
      v8 = (void *)*((_QWORD *)a4 + 1);
    *(_BYTE *)sub_19BF8BC44((uint64_t)&v23, v7 + 1, v8, v7) = a2;
    if (*a4 >= 0xFu)
    {
      v9 = *((_QWORD *)a4 + 1);
      if (v9)
        MEMORY[0x1A1AD0CB8](v9, 0x1000C8077774924);
    }
    *(_OWORD *)a4 = v23;
    v10 = *a4;
    goto LABEL_9;
  }
  v16 = *a3;
  v17 = (_DWORD)v16 != 254 && (v16 - 95) > 0x1D;
  if (!v17 && (a2 == 255 || a2 == 3))
  {
    *a3 = 0;
    return 4294967294;
  }
  if (!*a3)
  {
    v18 = *(_DWORD *)(a1 + 4 * a2 + 12);
    if (*(_BYTE *)(a1 + a2 + 1036))
      v19 = v18 == 0;
    else
      v19 = 0;
    if (!v19)
    {
      if (v18)
        return v18;
      else
        return 0xFFFFFFFFLL;
    }
    if (a2 == 254 || a2 - 95 <= 0x1D)
    {
      *a3 = a2;
      if (*a4 >= 0xFu)
      {
        v22 = *((_QWORD *)a4 + 1);
        if (v22)
          MEMORY[0x1A1AD0CB8](v22, 0x1000C8077774924);
      }
    }
    *a4 = 1;
    *((_BYTE *)a4 + 2) = a2;
    return 4294967294;
  }
  if (*(_BYTE *)(a1 + v16 + 1036))
  {
    v10 = 2;
    *a4 = 2;
    a4[1] = v16 | ((_WORD)a2 << 8);
LABEL_9:
    v11 = sub_19BFF4D28((_QWORD *)(a1 + 1296), a4);
    if (v11)
    {
      v12 = v11;
      if (v10 >= 0xF)
      {
        v13 = *((_QWORD *)a4 + 1);
        if (v13)
          MEMORY[0x1A1AD0CB8](v13, 0x1000C8077774924);
      }
      *a4 = 0;
      return *((unsigned int *)v12 + 8);
    }
    else if (*(_DWORD *)(a1 + 1336) > v10)
    {
      return 4294967294;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  if (qword_1EE417768 != -1)
    dispatch_once(&qword_1EE417768, &unk_1E3D16E98);
  v20 = qword_1EE417760;
  if (os_log_type_enabled((os_log_t)qword_1EE417760, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *a3;
    LODWORD(v23) = 67109376;
    DWORD1(v23) = v21;
    WORD4(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 10) = a2;
    _os_log_impl(&dword_19BF85000, v20, OS_LOG_TYPE_DEFAULT, "found unknown lead_primary=%u, with sort_key_byte=%u", (uint8_t *)&v23, 0xEu);
  }
  return 0xFFFFFFFFLL;
}

os_log_t sub_19C016AD8()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "SortKeyByteConverter");
  qword_1EE417760 = (uint64_t)result;
  return result;
}

void sub_19C016B04(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unint64_t v4;
  unint64_t v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 v12;
  uint64_t v13;
  char v14;
  int v15;
  __int16 v16;
  char v17;
  void *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0x100000;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v14 = 0;
  v12 = 0;
  LODWORD(v4) = *a3;
  if (*a3)
  {
    v7 = 0;
    v8 = a3 + 1;
    do
    {
      if (v4 <= 0xE)
        v9 = v8;
      else
        v9 = (unsigned __int16 *)*((_QWORD *)a3 + 1);
      v10 = sub_19C016868(a2, *((unsigned __int8 *)v9 + v7), &v14, &v12);
      v11 = v10;
      if (v10 != -2)
      {
        if (v10 == -1)
          goto LABEL_12;
        sub_19BFF6A20((unsigned __int16 *)&v15, v10);
      }
      ++v7;
      v4 = *a3;
    }
    while (v7 < v4);
    if (*a3 && v11 == -2)
    {
LABEL_12:
      *(_DWORD *)a1 = 0x100000;
      *(_WORD *)(a1 + 4) = 0;
      *(_BYTE *)(a1 + 6) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 16) = 0;
      goto LABEL_14;
    }
  }
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_19BF8A370(a1, (unsigned __int16 *)&v15);
LABEL_14:
  if (v12 >= 0xFu && v13)
    MEMORY[0x1A1AD0CB8](v13, 0x1000C8077774924);
  if (v18)
  {
    if (v17 == 1)
      free(v18);
  }
}

void sub_19C016C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15)
{
  BOOL v16;

  if (a9 >= 0xFu && a10)
    MEMORY[0x1A1AD0CB8](a10, 0x1000C8077774924);
  if (a15)
    v16 = a14 == 1;
  else
    v16 = 0;
  if (v16)
    free(a15);
  _Unwind_Resume(exception_object);
}

void sub_19C016CC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v7;
  unint64_t v8;
  unsigned int v10;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned __int16 v25;
  uint64_t v26;
  char __s1[4];

  v3 = a2[1];
  v2 = a2[2];
  v4 = v2 + 4;
  if (v3)
    v5 = v4 > v3;
  else
    v5 = 0;
  if (!v5)
  {
    v7 = *a2;
    a2[2] = v4;
    if (v7)
    {
      v8 = v2 + 8;
      if (!v3 || v8 <= v3)
      {
        v10 = *(_DWORD *)(v7 + v2);
        a2[2] = v8;
        if (v10)
        {
          v12 = bswap32(v10) - 1;
          do
          {
            v14 = a2[1];
            v13 = a2[2];
            v15 = v13 + 4;
            if (v14)
              v16 = v15 > v14;
            else
              v16 = 0;
            if (v16)
              break;
            v17 = *a2;
            a2[2] = v15;
            if (!v17)
              break;
            *(_DWORD *)__s1 = *(_DWORD *)(v17 + v13);
            v18 = strnlen(__s1, 4uLL);
            sub_19BF8BC44((uint64_t)&v25, v18, __s1, v18);
            v20 = a2[1];
            v19 = a2[2];
            v21 = v19 + 4;
            if (v20)
            {
              if (v21 > v20)
                goto LABEL_21;
            }
            v22 = *a2;
            a2[2] = v21;
            if (!v22)
            {
LABEL_21:
              v23 = 1;
            }
            else
            {
              sub_19C016E30(a1, &v25, bswap32(*(_DWORD *)(v22 + v19)));
              v23 = 0;
            }
            if (v25 >= 0xFu && v26)
              MEMORY[0x1A1AD0CB8](v26, 0x1000C8077774924);
            v24 = v12-- ? v23 : 1;
          }
          while (v24 != 1);
        }
      }
    }
  }
}

void sub_19C016DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int16 a10, uint64_t a11)
{
  if (a10 >= 0xFu)
  {
    if (a11)
      MEMORY[0x1A1AD0CB8](a11, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C016E30(uint64_t a1, unsigned __int16 *a2, int a3)
{
  unint64_t v3;
  int v4;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unsigned __int16 **v16;
  unsigned __int16 *i;
  unint64_t v18;
  char *v19;
  _OWORD *v20;
  void *v21;
  _QWORD *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unsigned int v44;
  void *v45;

  v4 = *a2;
  if ((v4 - 1) > 3)
    return;
  if (v4 == 1)
  {
    *(_DWORD *)(a1 + 4 * *((unsigned __int8 *)a2 + 2) + 12) = a3;
  }
  else if (!sub_19C017308(a1, a2))
  {
    if (*a2 <= 0xEu)
      v8 = (unsigned __int8 *)(a2 + 1);
    else
      v8 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    *(_BYTE *)(a1 + *v8 + 1036) = 1;
  }
  v9 = *a2;
  if (v9 <= 0xE)
    v10 = (unsigned __int8 *)(a2 + 1);
  else
    v10 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v11 = sub_19BFF79A0(v10, *a2);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 1304);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v3 = v11;
      if (v13 <= v11)
        v3 = v11 % v13;
    }
    else
    {
      v3 = ((_DWORD)v13 - 1) & v11;
    }
    v16 = *(unsigned __int16 ***)(*(_QWORD *)(a1 + 1296) + 8 * v3);
    if (v16)
    {
      for (i = *v16; i; i = *(unsigned __int16 **)i)
      {
        v18 = *((_QWORD *)i + 1);
        if (v18 == v12)
        {
          if (sub_19BFED000(i + 8, a2))
            goto LABEL_88;
        }
        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13)
              v18 %= v13;
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v3)
            break;
        }
      }
    }
  }
  v19 = (char *)operator new(0x28uLL);
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = v12;
  v20 = v19 + 16;
  if (v9 < 0xF)
  {
    *v20 = *(_OWORD *)a2;
  }
  else
  {
    *(_WORD *)v20 = v9;
    v21 = (void *)operator new[]();
    *((_QWORD *)v19 + 3) = v21;
    memcpy(v21, *((const void **)a2 + 1), *((unsigned __int16 *)v19 + 8));
  }
  v22 = (_QWORD *)(a1 + 1312);
  *((_DWORD *)v19 + 8) = a3;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 1320) + 1);
  v24 = *(float *)(a1 + 1328);
  if (!v13 || (float)(v24 * (float)v13) < v23)
  {
    v25 = 1;
    if (v13 >= 3)
      v25 = (v13 & (v13 - 1)) != 0;
    v26 = v25 | (2 * v13);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = (int8x8_t)v27;
    else
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v13 = *(_QWORD *)(a1 + 1304);
    if (*(_QWORD *)&prime > v13)
      goto LABEL_44;
    if (*(_QWORD *)&prime < v13)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1320) / *(float *)(a1 + 1328));
      if (v13 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (*(_QWORD *)&prime <= v35)
        prime = (int8x8_t)v35;
      if (*(_QWORD *)&prime >= v13)
      {
        v13 = *(_QWORD *)(a1 + 1304);
      }
      else
      {
        if (prime)
        {
LABEL_44:
          if (*(_QWORD *)&prime >> 61)
            sub_19BF8E6D0();
          v29 = operator new(8 * *(_QWORD *)&prime);
          v30 = *(void **)(a1 + 1296);
          *(_QWORD *)(a1 + 1296) = v29;
          if (v30)
            operator delete(v30);
          v31 = 0;
          *(int8x8_t *)(a1 + 1304) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 1296) + 8 * v31++) = 0;
          while (*(_QWORD *)&prime != v31);
          v32 = (_QWORD *)*v22;
          if (*v22)
          {
            v33 = v32[1];
            v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(_QWORD *)&prime)
                v33 %= *(_QWORD *)&prime;
            }
            else
            {
              v33 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 1296) + 8 * v33) = v22;
            v38 = (_QWORD *)*v32;
            if (*v32)
            {
              do
              {
                v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(_QWORD *)&prime)
                    v39 %= *(_QWORD *)&prime;
                }
                else
                {
                  v39 &= *(_QWORD *)&prime - 1;
                }
                if (v39 != v33)
                {
                  v40 = *(_QWORD *)(a1 + 1296);
                  if (!*(_QWORD *)(v40 + 8 * v39))
                  {
                    *(_QWORD *)(v40 + 8 * v39) = v32;
                    goto LABEL_69;
                  }
                  *v32 = *v38;
                  *v38 = **(_QWORD **)(*(_QWORD *)(a1 + 1296) + 8 * v39);
                  **(_QWORD **)(*(_QWORD *)(a1 + 1296) + 8 * v39) = v38;
                  v38 = v32;
                }
                v39 = v33;
LABEL_69:
                v32 = v38;
                v38 = (_QWORD *)*v38;
                v33 = v39;
              }
              while (v38);
            }
          }
          v13 = (unint64_t)prime;
          goto LABEL_73;
        }
        v45 = *(void **)(a1 + 1296);
        *(_QWORD *)(a1 + 1296) = 0;
        if (v45)
          operator delete(v45);
        v13 = 0;
        *(_QWORD *)(a1 + 1304) = 0;
      }
    }
LABEL_73:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v13 <= v12)
        v3 = v12 % v13;
      else
        v3 = v12;
    }
    else
    {
      v3 = ((_DWORD)v13 - 1) & v12;
    }
  }
  v41 = *(_QWORD *)(a1 + 1296);
  v42 = *(_QWORD **)(v41 + 8 * v3);
  if (v42)
  {
    *(_QWORD *)v19 = *v42;
  }
  else
  {
    *(_QWORD *)v19 = *v22;
    *v22 = v19;
    *(_QWORD *)(v41 + 8 * v3) = v22;
    if (!*(_QWORD *)v19)
      goto LABEL_87;
    v43 = *(_QWORD *)(*(_QWORD *)v19 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v43 >= v13)
        v43 %= v13;
    }
    else
    {
      v43 &= v13 - 1;
    }
    v42 = (_QWORD *)(*(_QWORD *)(a1 + 1296) + 8 * v43);
  }
  *v42 = v19;
LABEL_87:
  ++*(_QWORD *)(a1 + 1320);
  v9 = *a2;
LABEL_88:
  v44 = *(_DWORD *)(a1 + 1336);
  if (v44 <= v9)
    v44 = v9;
  *(_DWORD *)(a1 + 1336) = v44;
}

void sub_19C0172E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_19BFCCF10(0, v1);
  _Unwind_Resume(a1);
}

BOOL sub_19C017308(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned __int16 *v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  _BOOL8 v9;
  unsigned __int16 v11;
  uint64_t v12;

  LODWORD(v2) = *a2;
  if (v2 < 2)
    return 0;
  v4 = (_QWORD *)(a1 + 1296);
  v5 = a2 + 1;
  v6 = 1;
  while (1)
  {
    v7 = v2 <= 0xE ? v5 : (unsigned __int16 *)*((_QWORD *)a2 + 1);
    sub_19BF8BC44((uint64_t)&v11, v6, v7, v6);
    v8 = sub_19BFF4D28(v4, &v11);
    v9 = v8 != 0;
    if (v11 >= 0xFu && v12)
      MEMORY[0x1A1AD0CB8](v12, 0x1000C8077774924);
    if (v8)
      break;
    ++v6;
    v2 = *a2;
    if (v6 >= v2)
      return 0;
  }
  return v9;
}

unsigned __int16 *sub_19C0173CC(unsigned __int16 *result, uint64_t a2)
{
  unsigned __int16 *v2;
  uint64_t **v3;
  uint64_t *i;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = result;
  *((_QWORD *)result + 1) = 0;
  v3 = (uint64_t **)(result + 4);
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = result + 4;
  for (i = (uint64_t *)(a2 + 1312); ; result = sub_19BFECEA8(v10 + 20, (const void **)i + 2))
  {
    i = (uint64_t *)*i;
    if (!i)
      break;
    v5 = *v3;
    v6 = v3;
    v7 = v3;
    if (*v3)
    {
      v8 = *((_DWORD *)i + 8);
      while (1)
      {
        while (1)
        {
          v7 = (uint64_t **)v5;
          v9 = *((_DWORD *)v5 + 8);
          if (v8 >= v9)
            break;
          v5 = *v7;
          v6 = v7;
          if (!*v7)
            goto LABEL_11;
        }
        if (v9 >= v8)
          break;
        v5 = v7[1];
        if (!v5)
        {
          v6 = v7 + 1;
          goto LABEL_11;
        }
      }
      v10 = (unsigned __int16 *)v7;
    }
    else
    {
LABEL_11:
      v10 = (unsigned __int16 *)operator new(0x38uLL);
      *((_DWORD *)v10 + 8) = *((_DWORD *)i + 8);
      v10[20] = 0;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = v7;
      *v6 = (uint64_t *)v10;
      v11 = **(_QWORD **)v2;
      v12 = (uint64_t *)v10;
      if (v11)
      {
        *(_QWORD *)v2 = v11;
        v12 = *v6;
      }
      sub_19BFA96D8(*((uint64_t **)v2 + 1), v12);
      ++*((_QWORD *)v2 + 2);
    }
  }
  return result;
}

void sub_19C0174C4(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_19BFD4974(*v1);
  _Unwind_Resume(a1);
}

void sub_19C0174D8(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  _QWORD *v4;

  if (a2)
  {
    v2 = a2;
    v4 = (_QWORD *)(a1 + 1296);
    do
    {
      if (!sub_19BFF4D28(v4, (unsigned __int16 *)v2 + 8))
        sub_19C016E30(a1, (unsigned __int16 *)v2 + 8, *((_DWORD *)v2 + 8));
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

os_log_t sub_19C017534()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "Default");
  qword_1EE417770 = (uint64_t)result;
  return result;
}

uint64_t sub_19C017560(uint64_t *a1, CFDictionaryRef theDict, CFErrorRef *a3)
{
  const __CFString *Value;
  const __CFString *v5;
  const __CFString *v6;
  char v7;
  const __CFNumber *v8;
  uint64_t v9;
  const __CFNumber *v10;
  uint64_t v11;
  const __CFLocale *v12;
  _QWORD *v13;
  std::string *p_str;
  std::string::size_type size;
  _QWORD *v16;
  _QWORD *v17;
  std::string *p_p;
  std::string::size_type v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  void **v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  BOOL v43;
  char v44;
  int v45;
  int v47;
  int v48;
  int v49;
  std::string *v50;
  __int128 v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  std::string::size_type v57;
  char v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string::size_type v63;
  char v64;
  uint64_t v65;
  size_t v66;
  const char *v67;
  size_t v68;
  const char *v69;
  size_t v70;
  uint64_t v71;
  const char *v72;
  char **v73;
  size_t v74;
  char **v75;
  const char *v76;
  const char *v77;
  std::string::size_type v78;
  std::string::size_type v79;
  std::string::size_type v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  char *v90;
  _OWORD *v91;
  __int128 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  char *v97;
  uint64_t i;
  int v99;
  size_t v100;
  uint64_t v101;
  char **v102;
  char *v103;
  char *v104;
  int v105;
  void *v106;
  std::string::size_type v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  size_t v112;
  _QWORD *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  std::string::size_type v117;
  char v118;
  std::string::size_type v119;
  std::string::size_type v120;
  char *v121;
  std::string::size_type v122;
  char *v123;
  std::string::size_type v124;
  std::string *v125;
  uint64_t v126;
  std::string *v127;
  std::string *v128;
  char *v129;
  int v130;
  int64_t v131;
  std::string *v132;
  char v133;
  char *v134;
  int64_t v135;
  std::string::size_type v136;
  std::string *v137;
  std::string::size_type v138;
  std::string *v139;
  BOOL v140;
  _BOOL4 v141;
  _BOOL4 v142;
  _BOOL4 v143;
  _BOOL4 v144;
  int v145;
  int v146;
  _QWORD *v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  void **v152;
  std::string::size_type v153;
  uint64_t v154;
  char *v155;
  char *v157;
  int v158;
  std::string *v159;
  int64_t v160;
  char *v161;
  char *v162;
  std::string::size_type v163;
  _QWORD *v164;
  std::string *v165;
  std::string::size_type v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  size_t v172;
  _QWORD *v173;
  size_t v174;
  uint64_t v175;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  CFStringRef cf;
  void *__dst[2];
  char v183;
  void *v184[2];
  char v185;
  void *v186;
  uint64_t v187;
  unsigned __int8 v188;
  CFStringRef v189;
  void *v190[2];
  uint64_t v191;
  char v192;
  char v193;
  __int128 valuePtr;
  _QWORD v195[2];
  __int128 v196;
  void *v197[4];
  _BYTE v198[32];
  __int128 v199;
  _QWORD v200[60];
  std::string __str;
  char *v202;
  void **v203;
  std::string v204;
  std::string __p;
  _QWORD v206[2];
  _BYTE v207[424];
  _BYTE v208[80];
  uint64_t v209;
  uint64_t v210;

  v210 = *MEMORY[0x1E0C80C00];
  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("locale"));
  v5 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("lexiconDataFile"));
  v6 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("additionalDictionaryLocale"));
  if (v6)
  {
    sub_19BF87140(v6, &valuePtr);
    *(_OWORD *)v190 = valuePtr;
    v191 = v195[0];
    v7 = 1;
  }
  else
  {
    v7 = 0;
    LOBYTE(v190[0]) = 0;
  }
  v192 = v7;
  v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("correctionMatchPenaltyWeight"));
  if (v8)
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
    v9 = valuePtr | 0x100000000;
  }
  else
  {
    v9 = 0;
  }
  v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("completionLookAheadLimit"));
  if (v10)
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
    v11 = valuePtr | 0x100000000;
  }
  else
  {
    v11 = 0;
  }
  cf = 0;
  v189 = 0;
  if (v5)
    goto LABEL_14;
  v12 = (const __CFLocale *)sub_19BF8723C(theDict);
  *(_QWORD *)&valuePtr = v12;
  cf = sub_19C037870(theDict, v12);
  v189 = cf;
  if (v12)
    CFRelease(v12);
  v5 = cf;
  if (cf)
  {
LABEL_14:
    sub_19BF87140(Value, &v186);
    sub_19BF87140(v5, v184);
    sub_19BFA9BDC((uint64_t)&valuePtr);
    sub_19C01933C((std::string *)v207, (char *)v184);
    v13 = sub_19BF8E6F8(&valuePtr, (uint64_t)" -d ", 4);
    sub_19C0193A0((uint64_t)&__str, (std::__fs::filesystem::path *)v207);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    v16 = sub_19BF8E6F8(v13, (uint64_t)p_str, size);
    v17 = sub_19BF8E6F8(v16, (uint64_t)" -s ", 4);
    sub_19C019464((uint64_t)&__p, (std::__fs::filesystem::path *)v207);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v19 = __p.__r_.__value_.__l.__size_;
    sub_19BF8E6F8(v17, (uint64_t)p_p, v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v20 = sub_19BF8E6F8(&valuePtr, (uint64_t)" -S ", 4);
    if ((v188 & 0x80u) == 0)
      v21 = &v186;
    else
      v21 = v186;
    if ((v188 & 0x80u) == 0)
      v22 = v188;
    else
      v22 = v187;
    v23 = sub_19BF8E6F8(v20, (uint64_t)v21, v22);
    v24 = sub_19BF8E6F8(v23, (uint64_t)" -i ", 4);
    if ((v188 & 0x80u) == 0)
      v25 = &v186;
    else
      v25 = v186;
    if ((v188 & 0x80u) == 0)
      v26 = v188;
    else
      v26 = v187;
    sub_19BF8E6F8(v24, (uint64_t)v25, v26);
    if (v192)
    {
      v27 = sub_19BF8E6F8(&valuePtr, (uint64_t)" -A ", 4);
      if (v191 >= 0)
        v28 = v190;
      else
        v28 = (void **)v190[0];
      if (v191 >= 0)
        v29 = HIBYTE(v191);
      else
        v29 = (uint64_t)v190[1];
      sub_19BF8E6F8(v27, (uint64_t)v28, v29);
    }
    if ((v9 & 0x100000000) != 0)
    {
      sub_19BF8E6F8(&valuePtr, (uint64_t)" -c ", 4);
      std::ostream::operator<<();
    }
    if ((v11 & 0x100000000) != 0)
    {
      sub_19BF8E6F8(&valuePtr, (uint64_t)" -L ", 4);
      std::ostream::operator<<();
    }
    sub_19BFAAA88(__dst, (uint64_t)&valuePtr + 8);
    if ((v207[23] & 0x80000000) != 0)
      operator delete(*(void **)v207);
    *(_QWORD *)&valuePtr = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v195[-2] + *(_QWORD *)(valuePtr - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *((_QWORD *)&valuePtr + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if ((v198[15] & 0x80000000) != 0)
      operator delete(v197[3]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD0C7C](&v199);
    if (v183 >= 0)
      v30 = __dst;
    else
      v30 = (void **)__dst[0];
    MEMORY[0x1A1AD0C40](&v193);
    v31 = operator new();
    sub_19BFC2928(v31);
    v32 = operator new();
    *(_QWORD *)v32 = off_1E3D14338;
    v33 = operator new();
    *(_QWORD *)v33 = &off_1E3D14278;
    *(_QWORD *)(v33 + 16) = 850045863;
    *(_DWORD *)(v33 + 8) = 0;
    *(_OWORD *)(v33 + 24) = 0u;
    *(_OWORD *)(v33 + 40) = 0u;
    *(_OWORD *)(v33 + 56) = 0u;
    *(_OWORD *)(v33 + 72) = 0u;
    *(_OWORD *)(v33 + 84) = 0u;
    *(_QWORD *)(v33 + 120) = sub_19BFA9B04;
    *(_QWORD *)(v33 + 128) = 0;
    sub_19BFA9BDC(v33 + 136);
    *(_QWORD *)(v33 + 400) = 0;
    *(_QWORD *)(v33 + 408) = 0;
    *(_QWORD *)(v33 + 416) = 0;
    *(_QWORD *)(v32 + 8) = v33;
    v34 = (_QWORD *)operator new();
    *v34 = &off_1E3D14258;
    sub_19BFACEA4(v34 + 1);
    sub_19BFACEA4(v34 + 3);
    sub_19BFACEA4(v34 + 5);
    sub_19BFACEA4(v34 + 7);
    sub_19BFACEA4(v34 + 9);
    sub_19BFA9BDC((uint64_t)(v34 + 11));
    v34[44] = 0;
    v34[45] = 0;
    v34[46] = 0;
    v34[71] = sub_19BFBAAF4;
    v34[72] = 0;
    *(_QWORD *)(v32 + 16) = &off_1E3D13DC8;
    *(_QWORD *)(v32 + 24) = v34;
    *(_DWORD *)(v32 + 32) = 1;
    *(_QWORD *)(v32 + 40) = 0;
    v35 = *(_QWORD *)(v31 + 16);
    *(_QWORD *)(v31 + 16) = v32;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
      v32 = *(_QWORD *)(v31 + 16);
    }
    v195[0] = 0;
    v195[1] = 0;
    *(_QWORD *)&valuePtr = &off_1E3D14238;
    *((_QWORD *)&valuePtr + 1) = v195;
    v196 = 0u;
    memset(v197, 0, sizeof(v197));
    memset(v198, 0, sizeof(v198));
    v199 = 0u;
    v178 = v32;
    sub_19BFA9BDC((uint64_t)v200);
    memset(&v200[33], 0, 24);
    v179 = operator new[]();
    v36 = (char *)&v197[1];
    memset(v208, 0, sizeof(v208));
    memset(&v207[8], 0, 416);
    v209 = 0;
    *(_QWORD *)v207 = "mecab";
    v37 = *(_BYTE *)v30;
    v177 = v31;
    if (!*(_BYTE *)v30)
    {
      v49 = 1;
      goto LABEL_99;
    }
    v38 = 0;
    v39 = 1;
    v40 = MEMORY[0x1E0C80978];
    v41 = (_BYTE *)v179;
    while (1)
    {
      while (1)
      {
        v42 = v37 < 0 ? __maskrune(v37, 0x4000uLL) : *(_DWORD *)(v40 + 4 * v37 + 60) & 0x4000;
        v43 = v42 && v38 == 0;
        if (!v43)
          break;
        *v41++ = 0;
        v44 = *((_BYTE *)v30 + 1);
        v30 = (void **)((char *)v30 + 1);
        v37 = v44;
      }
      *v41 = *(_BYTE *)v30;
      if (!*(_BYTE *)v30)
        break;
      *(_QWORD *)&v207[8 * v39] = v41;
      if (v39 == 511)
      {
        v49 = 512;
        goto LABEL_99;
      }
      ++v39;
      v37 = *(_BYTE *)v30;
      if (!*(_BYTE *)v30)
        goto LABEL_90;
      while (1)
      {
        if (v37 < 0)
        {
          v45 = __maskrune(v37, 0x4000uLL);
          v37 = *(_BYTE *)v30;
        }
        else
        {
          v45 = *(_DWORD *)(v40 + 4 * v37 + 60) & 0x4000;
        }
        if (v45 && v38 == 0)
          break;
        if (v37 == 92)
        {
          v38 = 1;
        }
        else
        {
          v38 = 0;
          *v41++ = v37;
        }
        v47 = *((unsigned __int8 *)v30 + 1);
        v30 = (void **)((char *)v30 + 1);
        v37 = v47;
        if (!v47)
          goto LABEL_90;
      }
      v38 = 0;
      if (!v37)
      {
LABEL_90:
        *v41 = 0;
        v37 = *(_BYTE *)v30;
      }
      v48 = v39;
      if (!v37)
        goto LABEL_95;
    }
    v48 = v39;
LABEL_95:
    v49 = v48;
    if (v48 <= 0)
    {
      if (SHIBYTE(v197[3]) < 0)
      {
        v197[2] = (void *)7;
        v36 = (char *)v197[1];
      }
      else
      {
        HIBYTE(v197[3]) = 7;
      }
      strcpy(v36, "unknown");
LABEL_206:
      MEMORY[0x1A1AD0CB8](v179, 0x1000C8077774924);
      sub_19BFB1144(&__str, (uint64_t)&valuePtr, "rcfile");
      v117 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v118 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v119 = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v120 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v120 = __str.__r_.__value_.__l.__size_;
      if (!v120)
      {
        v121 = getenv("HOME");
        if (v121)
        {
          sub_19BF8E43C(v207, v121);
          sub_19BF8E43C(&v204, ".mecabrc");
          sub_19BFB975C(&__p, (uint64_t)v207, (uint64_t)&v204);
          if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v204.__r_.__value_.__l.__data_);
          if ((v207[23] & 0x80000000) != 0)
            operator delete(*(void **)v207);
          sub_19BFB3388(v207);
          if ((v207[*(_QWORD *)(*(_QWORD *)v207 - 24) + 32] & 5) == 0)
            std::string::operator=(&__str, &__p);
          *(_QWORD *)v207 = *MEMORY[0x1E0DE4F40];
          *(_QWORD *)&v207[*(_QWORD *)(*(_QWORD *)v207 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
          MEMORY[0x1A1AD0A90](&v207[16]);
          std::istream::~istream();
          MEMORY[0x1A1AD0C7C](v208);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v117 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          v119 = __str.__r_.__value_.__l.__size_;
          v118 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
      }
      if (v118 >= 0)
        v122 = v117;
      else
        v122 = v119;
      if (!v122)
      {
        v123 = getenv("MECABRC");
        if (v123)
          sub_19BFB4BEC(&__str, v123);
      }
      sub_19BFB1144(&__p, (uint64_t)&valuePtr, "dicdir");
      v124 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v124 = __p.__r_.__value_.__l.__size_;
      if (!v124)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          __p.__r_.__value_.__l.__size_ = 1;
          v125 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
          v125 = &__p;
        }
        LOWORD(v125->__r_.__value_.__l.__data_) = 46;
      }
      LODWORD(v126) = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      v127 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        LODWORD(v126) = __str.__r_.__value_.__r.__words[1];
      v126 = v126;
      v128 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v128 = (std::string *)__str.__r_.__value_.__r.__words[0];
      v129 = (char *)&v128[-1].__r_.__value_.__r.__words[2] + 7;
      do
      {
        if ((int)v126 < 1)
        {
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            __str.__r_.__value_.__l.__size_ = 1;
          }
          else
          {
            *((_BYTE *)&__str.__r_.__value_.__s + 23) = 1;
            v127 = &__str;
          }
          LOWORD(v127->__r_.__value_.__l.__data_) = 46;
          goto LABEL_247;
        }
        v130 = v129[v126--];
      }
      while (v130 != 47);
      std::string::basic_string((std::string *)v207, &__str, 0, v126, (std::allocator<char> *)&v204);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = *(std::string *)v207;
LABEL_247:
      sub_19BF8E43C(v207, "$(rcpath)");
      v131 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v132 = &__p;
      else
        v132 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v131 = __p.__r_.__value_.__l.__size_;
      v133 = v207[23];
      if (v207[23] >= 0)
        v134 = v207;
      else
        v134 = *(char **)v207;
      if (v207[23] >= 0)
        v135 = v207[23];
      else
        v135 = *(_QWORD *)&v207[8];
      if (v135)
      {
        if (v131 >= v135)
        {
          v157 = (char *)v132 + v131;
          v158 = *v134;
          v159 = v132;
          do
          {
            v160 = v131 - v135;
            if (v160 == -1)
              break;
            v161 = (char *)memchr(v159, v158, v160 + 1);
            if (!v161)
              break;
            v162 = v161;
            if (!memcmp(v161, v134, v135))
            {
              if (v162 == v157)
                break;
              v136 = v162 - (char *)v132;
              v43 = v162 - (char *)v132 == -1;
              v110 = v177;
              if (v43)
                goto LABEL_269;
              goto LABEL_262;
            }
            v159 = (std::string *)(v162 + 1);
            v131 = v157 - (v162 + 1);
          }
          while (v131 >= v135);
        }
        v110 = v177;
      }
      else
      {
        v136 = 0;
        v110 = v177;
LABEL_262:
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v137 = &__str;
        else
          v137 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v138 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v138 = __str.__r_.__value_.__l.__size_;
        std::string::replace(&__p, v136, v135, (const std::string::value_type *)v137, v138);
        v133 = v207[23];
      }
LABEL_269:
      if (v133 < 0)
        operator delete(*(void **)v207);
      sub_19BFB9830((uint64_t)&valuePtr, "dicdir", (uint64_t)&__p, 1);
      sub_19BF8E43C(&v204, "dicrc");
      sub_19BFB975C((std::string *)v207, (uint64_t)&__p, (uint64_t)&v204);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = *(std::string *)v207;
      v207[23] = 0;
      v207[0] = 0;
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v204.__r_.__value_.__l.__data_);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v139 = &__p;
      else
        v139 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v140 = sub_19BFC29B4((uint64_t)&valuePtr, (const char *)v139);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (!v140)
          goto LABEL_301;
      }
      else if (!v140)
      {
        goto LABEL_301;
      }
      if (!sub_19BFBAC08(*(_QWORD *)(v178 + 24), (uint64_t)&valuePtr)
        || (sub_19BFA9D68(*(_QWORD *)(v178 + 8), (uint64_t)&valuePtr) & 1) == 0)
      {
        v150 = (char *)sub_19BFAA4D8(*(_QWORD *)(v178 + 8) + 136);
        sub_19BF8E43C(v207, v150);
        v151 = v207[23];
        if (v207[23] < 0)
          v151 = *(_QWORD *)&v207[8];
        if (v151)
          std::string::append((std::string *)v207, " ", 1uLL);
        v152 = sub_19BFAA4D8(*(_QWORD *)(v178 + 24) + 88);
        v153 = strlen((const char *)v152);
        std::string::append((std::string *)v207, (const std::string::value_type *)v152, v153);
        if (v207[23] >= 0)
          v149 = v207;
        else
          v149 = *(char **)v207;
        goto LABEL_311;
      }
      v141 = sub_19BFB122C((uint64_t)&valuePtr, "allocate-sentence");
      v142 = sub_19BFB122C((uint64_t)&valuePtr, "partial");
      v143 = sub_19BFB122C((uint64_t)&valuePtr, "all-morphs");
      v144 = sub_19BFB122C((uint64_t)&valuePtr, "marginal");
      v145 = sub_19BFAA558((uint64_t)&valuePtr, "nbest");
      if (v141)
        v146 = 65;
      else
        v146 = 1;
      if (v142)
        v146 |= 4u;
      if (v143)
        v146 |= 0x20u;
      if (v144)
        v146 |= 8u;
      if (v145 > 1)
        v146 |= 2u;
      *(_DWORD *)(v178 + 32) = v146;
      sub_19BF8E43C(v207, "theta");
      v147 = sub_19BFAA740((uint64_t)&valuePtr + 8, v207);
      if ((v207[23] & 0x80000000) != 0)
        operator delete(*(void **)v207);
      if (v195 == v147)
      {
        *(_QWORD *)operator new() = 0;
        MEMORY[0x1A1AD0CDC]();
        v163 = 0;
        v164 = (_QWORD *)v178;
      }
      else
      {
        if (*((char *)v147 + 79) < 0)
          sub_19BF8CD70(&__str, (void *)v147[7], v147[8]);
        else
          __str = *(std::string *)(v147 + 7);
        sub_19BFAA7BC((uint64_t)v207);
        __p.__r_.__value_.__r.__words[0] = 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v165 = &__str;
        else
          v165 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v166 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v166 = __str.__r_.__value_.__l.__size_;
        v167 = sub_19BF8E6F8(&v207[16], (uint64_t)v165, v166);
        v164 = (_QWORD *)v178;
        if ((*((_BYTE *)v167 + *(_QWORD *)(*v167 - 24) + 32) & 5) != 0
          || (v168 = (_QWORD *)MEMORY[0x1A1AD0ACC](v207, &__p),
              (*((_BYTE *)v168 + *(_QWORD *)(*v168 - 24) + 32) & 5) != 0)
          || (sub_19BFAA880(v207), (v207[*(_QWORD *)(*(_QWORD *)v207 - 24) + 32] & 2) == 0))
        {
          *(_QWORD *)operator new() = 0;
          MEMORY[0x1A1AD0CDC]();
          v163 = 0;
        }
        else
        {
          v163 = __p.__r_.__value_.__r.__words[0];
        }
        std::strstream::~strstream((std::strstream *)v207);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      v164[5] = v163;
      if (v164[1])
      {
        v169 = v164[3];
        sub_19BFB9EF4((uint64_t)&valuePtr);
        v154 = *(_QWORD *)(v110 + 16);
        if (v169)
        {
          *(_QWORD *)(v110 + 8) = v154;
          *(_DWORD *)(v110 + 32) = *(_DWORD *)(v154 + 32);
          *(_QWORD *)(v110 + 40) = *(_QWORD *)(v154 + 40);
          std::ios_base::Init::~Init((std::ios_base::Init *)&v193);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 280))(v110, 1);
          v170 = *a1;
          *a1 = v110;
          if (v170)
            (*(void (**)(uint64_t))(*(_QWORD *)v170 + 328))(v170);
          v116 = 1;
LABEL_318:
          if (v183 < 0)
            operator delete(__dst[0]);
          if (v185 < 0)
            operator delete(v184[0]);
          if ((char)v188 < 0)
            operator delete(v186);
          if (cf)
            CFRelease(cf);
          goto LABEL_326;
        }
      }
      else
      {
LABEL_313:
        sub_19BFB9EF4((uint64_t)&valuePtr);
        v154 = *(_QWORD *)(v110 + 16);
      }
      *(_QWORD *)(v110 + 16) = 0;
      if (v154)
        (*(void (**)(uint64_t))(*(_QWORD *)v154 + 48))(v154);
      v155 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 312))(v110);
      sub_19BFC3830(v155);
      (*(void (**)(uint64_t))(*(_QWORD *)v110 + 328))(v110);
      std::ios_base::Init::~Init((std::ios_base::Init *)&v193);
      v116 = 0;
      if (a3)
        *a3 = sub_19BFEA6B4(CFSTR("Tagger creation failed"));
      goto LABEL_318;
    }
LABEL_99:
    sub_19BF8E43C(&__str, *(char **)v207);
    if (SHIBYTE(v197[3]) < 0)
      operator delete(v197[1]);
    *(std::string *)&v197[1] = __str;
    sub_19BF8E43C(&v204, "MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2008 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n");
    v50 = std::string::append(&v204, "\nUsage: ", 8uLL);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v197[3]) >= 0)
      v52 = (const std::string::value_type *)&v197[1];
    else
      v52 = (const std::string::value_type *)v197[1];
    if (SHIBYTE(v197[3]) >= 0)
      v53 = HIBYTE(v197[3]);
    else
      v53 = (std::string::size_type)v197[2];
    v54 = std::string::append(&__p, v52, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = std::string::append(&__str, " [options] files\n", 0x11uLL);
    v57 = v56->__r_.__value_.__r.__words[0];
    v206[0] = v56->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v206 + 7) = *(std::string::size_type *)((char *)&v56->__r_.__value_.__r.__words[1] + 7);
    v58 = HIBYTE(v56->__r_.__value_.__r.__words[2]);
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    if ((v198[23] & 0x80000000) != 0)
      operator delete(*(void **)v198);
    *(_QWORD *)v198 = v57;
    *(_QWORD *)&v198[8] = v206[0];
    *(_QWORD *)&v198[15] = *(_QWORD *)((char *)v206 + 7);
    v198[23] = v58;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v204.__r_.__value_.__l.__data_);
    sub_19BF8E43C(&v204, "mecab");
    v59 = std::string::append(&v204, " of ", 4uLL);
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    v61 = std::string::append(&__p, "0.97", 4uLL);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&__str, 10);
    v206[0] = __str.__r_.__value_.__l.__size_;
    v63 = __str.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v206 + 7) = *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7);
    v64 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    memset(&__str, 0, sizeof(__str));
    if (SHIBYTE(v199) < 0)
    {
      operator delete(*(void **)&v198[24]);
      *(_QWORD *)&v198[24] = v63;
      *(_QWORD *)&v199 = v206[0];
      *(_QWORD *)((char *)&v199 + 7) = *(_QWORD *)((char *)v206 + 7);
      HIBYTE(v199) = v64;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      *(_QWORD *)&v198[24] = v63;
      *(_QWORD *)&v199 = v206[0];
      *(_QWORD *)((char *)&v199 + 7) = *(_QWORD *)((char *)v206 + 7);
      HIBYTE(v199) = v64;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v204.__r_.__value_.__l.__data_);
    v65 = 0;
    v66 = 0;
    v67 = "input-method-language";
    do
    {
      v68 = strlen(v67);
      v69 = (&off_1E3D15110)[v65 + 3];
      if (v69)
        v70 = v68 + strlen(v69) + 2;
      else
        v70 = v68 + 1;
      if (v70 > v66)
        v66 = v70;
      v67 = (&off_1E3D15110)[v65 + 5];
      v65 += 5;
    }
    while (v65 != 150);
    v71 = 0;
    v72 = "input-method-language";
    v73 = &off_1E3D15110;
    do
    {
      v74 = strlen(v72);
      v75 = &(&off_1E3D15110)[5 * v71];
      v76 = v75[3];
      if (v76)
        v74 += strlen(v75[3]) + 1;
      std::string::append((std::string *)v198, " -", 2uLL);
      std::string::push_back((std::string *)v198, (std::string::value_type)(&off_1E3D15110)[5 * v71 + 1]);
      std::string::append((std::string *)v198, ", --", 4uLL);
      v77 = *v73;
      v78 = strlen(v77);
      std::string::append((std::string *)v198, v77, v78);
      if (v76)
      {
        std::string::push_back((std::string *)v198, 61);
        v79 = strlen(v76);
        std::string::append((std::string *)v198, v76, v79);
      }
      while (v74 <= v66)
      {
        std::string::push_back((std::string *)v198, 32);
        ++v74;
      }
      v80 = strlen((&off_1E3D15110)[5 * v71 + 4]);
      std::string::append((std::string *)v198, (&off_1E3D15110)[5 * v71 + 4], v80);
      std::string::push_back((std::string *)v198, 10);
      ++v71;
      v73 = &(&off_1E3D15110)[5 * v71];
      v72 = *v73;
    }
    while (v71 != 30);
    std::string::push_back((std::string *)v198, 10);
    v81 = 0;
    v82 = "input-method-language";
    do
    {
      v83 = (&off_1E3D15110)[v81 + 2];
      if (v83)
      {
        sub_19BF8E43C(&__str, v83);
        sub_19BFB9830((uint64_t)&valuePtr, v82, (uint64_t)&__str, 1);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      v82 = (&off_1E3D15110)[v81 + 5];
      v81 += 5;
    }
    while (v81 != 150);
    if (v49 < 2)
      goto LABEL_206;
    LODWORD(v84) = 1;
    while (1)
    {
      v85 = *(_QWORD *)&v207[8 * (int)v84];
      if (*(_BYTE *)v85 != 45)
      {
        sub_19BF8E43C(&__p, *(char **)&v207[8 * (int)v84]);
        v91 = (_OWORD *)*((_QWORD *)&v196 + 1);
        if ((void *)*((_QWORD *)&v196 + 1) < v197[0])
        {
          v92 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(*((_QWORD *)&v196 + 1) + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *v91 = v92;
          *((_QWORD *)&v196 + 1) = (char *)v91 + 24;
          goto LABEL_185;
        }
        v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v196 + 1) - v196) >> 3);
        v94 = v93 + 1;
        if (v93 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_19BF8EB40();
        if (0x5555555555555556 * ((uint64_t)((uint64_t)v197[0] - v196) >> 3) > v94)
          v94 = 0x5555555555555556 * ((uint64_t)((uint64_t)v197[0] - v196) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v197[0] - v196) >> 3) >= 0x555555555555555)
          v95 = 0xAAAAAAAAAAAAAAALL;
        else
          v95 = v94;
        v203 = v197;
        v96 = v49;
        if (v95)
          v97 = (char *)sub_19BF8EB54((uint64_t)v197, v95);
        else
          v97 = 0;
        v107 = (std::string::size_type)&v97[24 * v93];
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
        __str.__r_.__value_.__l.__size_ = v107;
        v202 = &v97[24 * v95];
        v108 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v107 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v107 = v108;
        memset(&__p, 0, sizeof(__p));
        __str.__r_.__value_.__r.__words[2] = v107 + 24;
        sub_19BF8EACC((uint64_t *)&v196, &__str);
        v109 = *((_QWORD *)&v196 + 1);
        sub_19BF8ECAC((uint64_t)&__str);
        *((_QWORD *)&v196 + 1) = v109;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_186;
        v106 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_182;
      }
      v86 = *(unsigned __int8 *)(v85 + 1);
      if (!*(_BYTE *)(v85 + 1))
        goto LABEL_185;
      v87 = v84;
      v88 = v49;
      if (v86 == 45)
      {
        for (i = 2; ; ++i)
        {
          v99 = *(unsigned __int8 *)(v85 + i);
          if (!*(_BYTE *)(v85 + i) || v99 == 61)
            break;
        }
        v100 = i - 2;
        if (i == 2)
          goto LABEL_206;
        v101 = 0;
        v175 = v85 + i;
        v102 = &off_1E3D15138;
        v90 = "input-method-language";
        while (strlen(v90) != v100 || strncmp((const char *)(v85 + 2), v90, v100))
        {
          ++v101;
          v103 = *v102;
          v102 += 5;
          v90 = v103;
          if (v101 == 30)
            goto LABEL_199;
        }
        if (!(&off_1E3D15110)[5 * v101 + 3])
        {
          if (v99 == 61)
          {
LABEL_359:
            v110 = v177;
            v172 = strlen((const char *)v85);
            v113 = sub_19BF8E6F8(v171, v85, v172);
            v115 = 27;
            goto LABEL_200;
          }
LABEL_184:
          LODWORD(__str.__r_.__value_.__l.__data_) = 1;
          sub_19BFC3128((uint64_t)&valuePtr, v90);
LABEL_185:
          v96 = v49;
          goto LABEL_186;
        }
        if (v99 == 61)
        {
          sub_19BF8E43C(&__str, (char *)(v175 + 1));
          sub_19BFB9830((uint64_t)&valuePtr, v90, (uint64_t)&__str, 1);
        }
        else
        {
          v84 = (int)v84 + 1;
          if (v87 + 1 == v49)
          {
LABEL_360:
            v110 = v177;
            v174 = strlen((const char *)v85);
            v113 = sub_19BF8E6F8(v173, v85, v174);
            v115 = 21;
            goto LABEL_200;
          }
          sub_19BF8E43C(&__str, *(char **)&v207[8 * v84]);
          sub_19BFB9830((uint64_t)&valuePtr, v90, (uint64_t)&__str, 1);
        }
      }
      else
      {
        if (v86 != 105)
        {
          v89 = 0;
          v104 = &byte_1E3D15140;
          while (v89 != 29)
          {
            ++v89;
            v105 = *v104;
            v104 += 40;
            if (v105 == v86)
            {
              v90 = (&off_1E3D15110)[5 * v89];
              v88 = v49;
              goto LABEL_174;
            }
          }
LABEL_199:
          v110 = v177;
          v112 = strlen((const char *)v85);
          v113 = sub_19BF8E6F8(v111, v85, v112);
          v115 = 1;
LABEL_200:
          sub_19BF8E6F8(v113, (uint64_t)v114, v115);
          MEMORY[0x1A1AD0CB8](v179, 0x1000C8077774924);
LABEL_301:
          v148 = (char *)sub_19BFAA4D8((uint64_t)v200);
          sub_19BF8E43C(v207, v148);
          if (v207[23] >= 0)
            v149 = v207;
          else
            v149 = *(char **)v207;
LABEL_311:
          sub_19BFC3830(v149);
          if ((v207[23] & 0x80000000) != 0)
            operator delete(*(void **)v207);
          goto LABEL_313;
        }
        v89 = 0;
        v90 = "input-method-language";
LABEL_174:
        if (!(&off_1E3D15110)[5 * v89 + 3])
        {
          if (*(_BYTE *)(v85 + 2))
            goto LABEL_359;
          goto LABEL_184;
        }
        if (!*(_BYTE *)(v85 + 2))
        {
          v84 = (int)v84 + 1;
          if (v87 + 1 == v88)
            goto LABEL_360;
          sub_19BF8E43C(&__str, *(char **)&v207[8 * v84]);
          sub_19BFB9830((uint64_t)&valuePtr, v90, (uint64_t)&__str, 1);
          v96 = v49;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_186;
        }
        sub_19BF8E43C(&__str, (char *)(v85 + 2));
        sub_19BFB9830((uint64_t)&valuePtr, v90, (uint64_t)&__str, 1);
      }
      v96 = v49;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        v106 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_182:
        operator delete(v106);
      }
LABEL_186:
      LODWORD(v84) = v84 + 1;
      if ((int)v84 >= v96)
        goto LABEL_206;
    }
  }
  v116 = 0;
  if (a3)
    *a3 = sub_19BFEA6B4(CFSTR("Could not determine the location of the morpheme lexicon path, or one was not provided."));
LABEL_326:
  if (v192 && SHIBYTE(v191) < 0)
    operator delete(v190[0]);
  return v116;
}

void sub_19C018E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,const void *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  MEMORY[0x1A1AD0CB8](a17, 0x1000C8077774924);
  sub_19BFB9EF4((uint64_t)&a52);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a51);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  sub_19BF8AD20(&a39, 0);
  if (a46)
  {
    if (a45 < 0)
      operator delete(a40);
  }
  _Unwind_Resume(a1);
}

std::string *sub_19C01933C(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  sub_19BF8ED34(a1, a2, &a2[v3]);
  return a1;
}

void sub_19C019384(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double sub_19C0193A0(uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

double sub_19C019464(uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_19C019528(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD0C7C](a1 + 112);
  return a1;
}

uint64_t sub_19C0195AC(void **a1, _QWORD *a2, uint64_t a3)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  double v11;
  unint64_t v12;
  double v13;
  int v14;
  int v15;
  uint64_t v16;
  const char *v17;
  const void *v18;
  CFTypeRef v19;
  CFTypeRef v20;
  uint64_t v21;
  char *v22;
  UChar *p_p;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int64x2_t v56;
  uint64_t v57;
  int v58;
  int v59;
  void *v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint8x8_t v66;
  uint64_t ***v67;
  uint64_t **i;
  unint64_t v69;
  uint64_t *v70;
  int v71;
  uint64_t **v72;
  char *v73;
  uint64_t *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  BOOL v80;
  _QWORD *v81;
  _BYTE *v82;
  float v83;
  _BOOL8 v84;
  unint64_t v85;
  unint64_t v86;
  int8x8_t prime;
  void *v88;
  void *v89;
  uint64_t v90;
  _QWORD **v91;
  unint64_t v92;
  uint8x8_t v93;
  unint64_t v94;
  uint8x8_t v95;
  uint64_t v96;
  _QWORD *j;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  char *v102;
  __int128 v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  __int128 v112;
  __int128 v113;
  void *v114;
  uint64_t v115;
  void *v116;
  uint64_t v118;
  void *__src;
  char *v121;
  unint64_t v123;
  const char *v124;
  UChar *dest;
  uint64_t v126;
  void *__p;
  unint64_t v128;
  unsigned __int8 v129;
  void *v130[2];
  _OWORD v131[2];
  int64x2_t v132;
  _QWORD v133[2];
  void *v134[2];
  __int128 v135;
  float v136;
  UErrorCode pErrorCode[2];
  int64x2_t v138;
  uint64_t v139;
  _QWORD *v140;
  int64x2_t *v141;
  int64x2_t v142;
  uint64_t v143;
  _QWORD v144[5];
  char v145;
  int v146;
  __int16 v147;
  int32_t pDestLength;
  __int16 v149;
  char v150;
  void *v151;
  char v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)v134 = 0u;
  v135 = 0u;
  v136 = 1.0;
  v118 = 2 * a3;
  dest = (UChar *)off_1EE414EB0();
  v121 = 0;
  v4 = 0;
  v5 = 0;
  v124 = (const char *)(v6 + 16);
  do
  {
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 232))(*a2);
    if (!v7 || v5 > 0x63)
      break;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v133[0] = 0;
    v123 = v5 + 1;
    v132 = 0u;
    v11 = 0.0;
    *(_OWORD *)v130 = 0u;
    memset(v131, 0, sizeof(v131));
    do
    {
      v10 += *(_DWORD *)(v7 + 80);
      v12 = *(unsigned __int16 *)(v7 + 96);
      v13 = *(double *)(v7 + 88);
      v8 += *(_DWORD *)(v7 + 76);
      if (*(_QWORD *)v7)
      {
        v14 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 72))(*a2, *(unsigned __int16 *)(*(_QWORD *)v7 + 100), *(unsigned __int16 *)(v7 + 102));
        v10 += v14;
        v8 += v14;
      }
      v15 = *(unsigned __int8 *)(v7 + 124);
      if ((v15 & 0xFE) != 2)
      {
        if (v15 == 1)
        {
          sub_19C01618C(&__p, *(void **)(v7 + 48), (unint64_t)*(unsigned __int16 *)(v7 + 96) >> 1);
        }
        else
        {
          v16 = *(_QWORD *)(v7 + 104);
          if (v16)
          {
            sub_19BFD54EC((uint64_t)&v141, (unsigned __int16 *)(v16 + 16));
            pErrorCode[0] = U_ZERO_ERROR;
            pDestLength = 0;
            if (v142.i64[0])
              v17 = (const char *)v142.i64[0];
            else
              v17 = v124;
            u_strFromUTF8(dest, 128, &pDestLength, v17, (unsigned __int16)v141, pErrorCode);
            if (pErrorCode[0] < U_ILLEGAL_ARGUMENT_ERROR)
              sub_19C01618C(&__p, dest, pDestLength);
            else
              sub_19BFAEC9C(&__p, byte_19C073B72);
            if (v142.i64[0] && BYTE6(v141) == 1)
              free((void *)v142.i64[0]);
          }
          else
          {
            sub_19BFAEC9C(&__p, byte_19C073B72);
          }
        }
        v18 = *(const void **)(v7 + 104);
        if (v18)
        {
          v19 = CFRetain(v18);
          v20 = v19;
          *(_QWORD *)pErrorCode = v19;
          v21 = v132.i64[1];
          if (v132.i64[1] >= v133[0])
          {
            v30 = (v132.i64[1] - v132.i64[0]) >> 4;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 60)
              sub_19BF8EB40();
            v32 = v133[0] - v132.i64[0];
            if ((v133[0] - v132.i64[0]) >> 3 > v31)
              v31 = v32 >> 3;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
              v33 = 0xFFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            v144[0] = v133;
            v34 = (char *)sub_19BFAEDF0(v33);
            v36 = &v34[16 * v30];
            *(_QWORD *)v36 = v20;
            *((_WORD *)v36 + 4) = *(_WORD *)(v7 + 96);
            v37 = v132.i64[1];
            v38 = v132.i64[0];
            if (v132.i64[1] == v132.i64[0])
            {
              v41 = vdupq_n_s64(v132.u64[1]);
              v39 = &v34[16 * v30];
            }
            else
            {
              v39 = &v34[16 * v30];
              do
              {
                v40 = *(_QWORD *)(v37 - 16);
                v37 -= 16;
                *(_QWORD *)v37 = 0;
                *((_QWORD *)v39 - 2) = v40;
                v39 -= 16;
                *((_WORD *)v39 + 4) = *(_WORD *)(v37 + 8);
              }
              while (v37 != v38);
              v41 = v132;
            }
            v22 = v36 + 16;
            v132.i64[0] = (uint64_t)v39;
            v132.i64[1] = (uint64_t)(v36 + 16);
            v142 = v41;
            v42 = v133[0];
            v133[0] = &v34[16 * v35];
            v143 = v42;
            v141 = (int64x2_t *)v41.i64[0];
            sub_19C01A36C((uint64_t)&v141);
          }
          else
          {
            *(_QWORD *)v132.i64[1] = v19;
            *(_WORD *)(v21 + 8) = *(_WORD *)(v7 + 96);
            v22 = (char *)(v21 + 16);
          }
          v132.i64[1] = (uint64_t)v22;
        }
        else if (*(_BYTE *)(v7 + 124) == 1)
        {
          pDestLength = 0x100000;
          v149 = 0;
          v150 = 0;
          v151 = 0;
          v152 = 0;
          if ((v129 & 0x80u) == 0)
            p_p = (UChar *)&__p;
          else
            p_p = (UChar *)__p;
          if ((v129 & 0x80u) == 0)
            v24 = v129;
          else
            v24 = v128;
          sub_19BFF7470((unsigned __int16 *)&pDestLength, p_p, v24);
          LODWORD(v141) = 0x100000;
          WORD2(v141) = 0;
          BYTE6(v141) = 0;
          v142.i64[0] = 0;
          v142.i8[8] = 0;
          v144[0] = 0;
          *(_QWORD *)((char *)v144 + 5) = 0;
          v144[2] = 0;
          v144[3] = 0;
          v144[4] = 0xFFFFFFFFLL;
          v145 = 0;
          v146 = 0;
          v147 = 0;
          sub_19BF8A1F4((uint64_t)&v141, (unsigned __int16 *)&pDestLength);
          v25 = *(unsigned __int16 *)(v7 + 102) | (*(unsigned __int16 *)(v7 + 100) << 16);
          v145 = 1;
          v146 = v25;
          v147 = *(_DWORD *)(v7 + 80);
          LODWORD(v126) = 0;
          *(_QWORD *)pErrorCode = CFAbsoluteTimeGetCurrent();
          v26 = sub_19C01A3BC((uint64_t)&v141, (int *)&v126, (uint64_t *)pErrorCode);
          v27 = v26;
          v126 = v26;
          v28 = v132.i64[1];
          if (v132.i64[1] >= v133[0])
          {
            v45 = (v132.i64[1] - v132.i64[0]) >> 4;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 60)
              sub_19BF8EB40();
            v47 = v133[0] - v132.i64[0];
            if ((v133[0] - v132.i64[0]) >> 3 > v46)
              v46 = v47 >> 3;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
              v48 = 0xFFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            v140 = v133;
            v49 = (char *)sub_19BFAEDF0(v48);
            v51 = &v49[16 * v45];
            *(_QWORD *)v51 = v27;
            *((_WORD *)v51 + 4) = *(_WORD *)(v7 + 96);
            v52 = v132.i64[1];
            v53 = v132.i64[0];
            if (v132.i64[1] == v132.i64[0])
            {
              v56 = vdupq_n_s64(v132.u64[1]);
              v54 = &v49[16 * v45];
            }
            else
            {
              v54 = &v49[16 * v45];
              do
              {
                v55 = *(_QWORD *)(v52 - 16);
                v52 -= 16;
                *(_QWORD *)v52 = 0;
                *((_QWORD *)v54 - 2) = v55;
                v54 -= 16;
                *((_WORD *)v54 + 4) = *(_WORD *)(v52 + 8);
              }
              while (v52 != v53);
              v56 = v132;
            }
            v29 = v51 + 16;
            v132.i64[0] = (uint64_t)v54;
            v132.i64[1] = (uint64_t)(v51 + 16);
            v138 = v56;
            v57 = v133[0];
            v133[0] = &v49[16 * v50];
            v139 = v57;
            *(_QWORD *)pErrorCode = v56.i64[0];
            sub_19C01A36C((uint64_t)pErrorCode);
          }
          else
          {
            *(_QWORD *)v132.i64[1] = v26;
            *(_WORD *)(v28 + 8) = *(_WORD *)(v7 + 96);
            v29 = (char *)(v28 + 16);
          }
          v132.i64[1] = (uint64_t)v29;
          if (v142.i64[0] && BYTE6(v141) == 1)
            free((void *)v142.i64[0]);
          if (v151 && v150 == 1)
            free(v151);
        }
        if ((v129 & 0x80u) == 0)
          v43 = &__p;
        else
          v43 = __p;
        if ((v129 & 0x80u) == 0)
          v44 = v129;
        else
          v44 = v128;
        sub_19C016424(v130, v43, v44);
        if ((char)v129 < 0)
          operator delete(__p);
      }
      v9 += v12;
      v11 = v11 + v13;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
    *((_QWORD *)&v131[0] + 1) = __PAIR64__(v9, v10);
    *(double *)&v131[1] = v11;
    DWORD2(v131[1]) = v8;
    if (a3 >= 1)
    {
      v58 = 2;
      if (!v9 || v118 != v9)
        goto LABEL_127;
LABEL_79:
      v59 = SBYTE7(v131[0]);
      v60 = v130[1];
      __src = v130[0];
      if ((SBYTE7(v131[0]) & 0x80u) == 0)
        v61 = (uint64_t *)v130;
      else
        v61 = (uint64_t *)v130[0];
      if ((SBYTE7(v131[0]) & 0x80u) == 0)
        v62 = BYTE7(v131[0]);
      else
        v62 = (unint64_t)v130[1];
      v63 = sub_19BFCF130(v61, 2 * v62);
      v64 = v63;
      v65 = (unint64_t)v134[1];
      if (v134[1])
      {
        v66 = (uint8x8_t)vcnt_s8((int8x8_t)v134[1]);
        v66.i16[0] = vaddlv_u8(v66);
        if (v66.u32[0] > 1uLL)
        {
          v12 = v63;
          if ((void *)v63 >= v134[1])
            v12 = v63 % (unint64_t)v134[1];
        }
        else
        {
          v12 = ((unint64_t)v134[1] - 1) & v63;
        }
        v67 = (uint64_t ***)*((_QWORD *)v134[0] + v12);
        if (v67)
        {
          for (i = *v67; i; i = (uint64_t **)*i)
          {
            v69 = (unint64_t)i[1];
            if (v69 == v63)
            {
              v70 = (uint64_t *)*((unsigned __int8 *)i + 39);
              v71 = (char)v70;
              if ((char)v70 < 0)
                v70 = i[3];
              if (v70 == (uint64_t *)v62)
              {
                if (!v62)
                  goto LABEL_126;
                v72 = v71 >= 0 ? i + 2 : (uint64_t **)i[2];
                v73 = (char *)(v62 - 1);
                v74 = v61;
                do
                {
                  v76 = *(unsigned __int16 *)v72;
                  v72 = (uint64_t **)((char *)v72 + 2);
                  v75 = v76;
                  v78 = *(unsigned __int16 *)v74;
                  v74 = (uint64_t *)((char *)v74 + 2);
                  v77 = v78;
                  v80 = v73-- != 0;
                }
                while (v77 == v75 && v80);
                if (v77 == v75)
                  goto LABEL_126;
              }
            }
            else
            {
              if (v66.u32[0] > 1uLL)
              {
                if ((void *)v69 >= v134[1])
                  v69 %= (unint64_t)v134[1];
              }
              else
              {
                v69 &= (unint64_t)v134[1] - 1;
              }
              if (v69 != v12)
                break;
            }
          }
        }
      }
      v81 = operator new(0x28uLL);
      *v81 = 0;
      v81[1] = v64;
      v82 = v81 + 2;
      if (v59 < 0)
      {
        sub_19BFB6040(v82, __src, (unint64_t)v60);
      }
      else
      {
        *(_OWORD *)v82 = *(_OWORD *)v130;
        v81[4] = *(_QWORD *)&v131[0];
      }
      v83 = (float)(unint64_t)(*((_QWORD *)&v135 + 1) + 1);
      if (!v65 || (float)(v136 * (float)v65) < v83)
      {
        v84 = (v65 & (v65 - 1)) != 0;
        if (v65 < 3)
          v84 = 1;
        v85 = v84 | (2 * v65);
        v86 = vcvtps_u32_f32(v83 / v136);
        if (v85 <= v86)
          prime = (int8x8_t)v86;
        else
          prime = (int8x8_t)v85;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v65 = (unint64_t)v134[1];
        if ((void *)*(_QWORD *)&prime <= v134[1])
        {
          if ((void *)*(_QWORD *)&prime < v134[1])
          {
            v94 = vcvtps_u32_f32((float)*((unint64_t *)&v135 + 1) / v136);
            if (v134[1] < (void *)3
              || (v95 = (uint8x8_t)vcnt_s8((int8x8_t)v134[1]), v95.i16[0] = vaddlv_u8(v95), v95.u32[0] > 1uLL))
            {
              v94 = std::__next_prime(v94);
            }
            else
            {
              v96 = 1 << -(char)__clz(v94 - 1);
              if (v94 >= 2)
                v94 = v96;
            }
            if (*(_QWORD *)&prime <= v94)
              prime = (int8x8_t)v94;
            if (*(_QWORD *)&prime >= v65)
            {
              v65 = (unint64_t)v134[1];
            }
            else
            {
              if (prime)
                goto LABEL_131;
              v116 = v134[0];
              v134[0] = 0;
              if (v116)
                operator delete(v116);
              v65 = 0;
              v134[1] = 0;
            }
          }
        }
        else
        {
LABEL_131:
          if (*(_QWORD *)&prime >> 61)
            sub_19BF8E6D0();
          v88 = operator new(8 * *(_QWORD *)&prime);
          v89 = v134[0];
          v134[0] = v88;
          if (v89)
            operator delete(v89);
          v90 = 0;
          v134[1] = (void *)prime;
          do
            *((_QWORD *)v134[0] + v90++) = 0;
          while (*(_QWORD *)&prime != v90);
          v91 = (_QWORD **)v135;
          if ((_QWORD)v135)
          {
            v92 = *(_QWORD *)(v135 + 8);
            v93 = (uint8x8_t)vcnt_s8(prime);
            v93.i16[0] = vaddlv_u8(v93);
            if (v93.u32[0] > 1uLL)
            {
              if (v92 >= *(_QWORD *)&prime)
                v92 %= *(_QWORD *)&prime;
            }
            else
            {
              v92 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)v134[0] + v92) = &v135;
            for (j = *v91; j; v92 = v98)
            {
              v98 = j[1];
              if (v93.u32[0] > 1uLL)
              {
                if (v98 >= *(_QWORD *)&prime)
                  v98 %= *(_QWORD *)&prime;
              }
              else
              {
                v98 &= *(_QWORD *)&prime - 1;
              }
              if (v98 != v92)
              {
                if (!*((_QWORD *)v134[0] + v98))
                {
                  *((_QWORD *)v134[0] + v98) = v91;
                  goto LABEL_156;
                }
                *v91 = (_QWORD *)*j;
                *j = **((_QWORD **)v134[0] + v98);
                **((_QWORD **)v134[0] + v98) = j;
                j = v91;
              }
              v98 = v92;
LABEL_156:
              v91 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v65 = (unint64_t)prime;
        }
        if ((v65 & (v65 - 1)) != 0)
        {
          if (v64 >= v65)
            v12 = v64 % v65;
          else
            v12 = v64;
        }
        else
        {
          v12 = (v65 - 1) & v64;
        }
      }
      v99 = v134[0];
      v100 = (_QWORD *)*((_QWORD *)v134[0] + v12);
      if (v100)
      {
        *v81 = *v100;
        v5 = v123;
        goto LABEL_173;
      }
      *v81 = v135;
      *(_QWORD *)&v135 = v81;
      v99[v12] = &v135;
      v5 = v123;
      if (*v81)
      {
        v101 = *(_QWORD *)(*v81 + 8);
        if ((v65 & (v65 - 1)) != 0)
        {
          if (v101 >= v65)
            v101 %= v65;
        }
        else
        {
          v101 &= v65 - 1;
        }
        v100 = (char *)v134[0] + 8 * v101;
LABEL_173:
        *v100 = v81;
      }
      ++*((_QWORD *)&v135 + 1);
      v102 = (char *)a1[2];
      if (v4 >= v102)
      {
        v105 = 0x8E38E38E38E38E39 * ((v4 - v121) >> 3) + 1;
        if (v105 > 0x38E38E38E38E38ELL)
          sub_19BF8EB40();
        v106 = 0x8E38E38E38E38E39 * ((v102 - v121) >> 3);
        if (2 * v106 > v105)
          v105 = 2 * v106;
        if (v106 >= 0x1C71C71C71C71C7)
          v107 = 0x38E38E38E38E38ELL;
        else
          v107 = v105;
        if (v107 > 0x38E38E38E38E38ELL)
          sub_19BF8E6D0();
        v108 = (char *)operator new(72 * v107);
        v109 = &v108[8 * ((v4 - v121) >> 3)];
        *(_OWORD *)v109 = *(_OWORD *)v130;
        *((_QWORD *)v109 + 2) = *(_QWORD *)&v131[0];
        v130[1] = 0;
        *(_QWORD *)&v131[0] = 0;
        v130[0] = 0;
        *(_OWORD *)(v109 + 24) = *(_OWORD *)((char *)v131 + 8);
        *((_DWORD *)v109 + 10) = DWORD2(v131[1]);
        *((int64x2_t *)v109 + 3) = v132;
        *((_QWORD *)v109 + 8) = v133[0];
        v133[0] = 0;
        v132 = 0uLL;
        if (v4 == v121)
        {
          v111 = &v108[8 * ((v4 - v121) >> 3)];
          v5 = v123;
        }
        else
        {
          v110 = &v108[8 * ((v4 - v121) >> 3)];
          v5 = v123;
          do
          {
            v111 = v110 - 72;
            v112 = *(_OWORD *)(v4 - 72);
            *((_QWORD *)v110 - 7) = *((_QWORD *)v4 - 7);
            *(_OWORD *)(v110 - 72) = v112;
            *((_QWORD *)v4 - 8) = 0;
            *((_QWORD *)v4 - 7) = 0;
            *((_QWORD *)v4 - 9) = 0;
            v113 = *((_OWORD *)v4 - 3);
            *((_DWORD *)v110 - 8) = *((_DWORD *)v4 - 8);
            *((_OWORD *)v110 - 3) = v113;
            *((_QWORD *)v110 - 2) = 0;
            *((_QWORD *)v110 - 1) = 0;
            *((_QWORD *)v110 - 3) = 0;
            *(_OWORD *)(v110 - 24) = *(_OWORD *)(v4 - 24);
            *((_QWORD *)v110 - 1) = *((_QWORD *)v4 - 1);
            *((_QWORD *)v4 - 3) = 0;
            *((_QWORD *)v4 - 2) = 0;
            *((_QWORD *)v4 - 1) = 0;
            v4 -= 72;
            v110 -= 72;
          }
          while (v4 != v121);
        }
        v114 = *a1;
        v115 = (uint64_t)a1[1];
        v4 = v109 + 72;
        *a1 = v111;
        a1[1] = v109 + 72;
        a1[2] = &v108[72 * v107];
        while ((void *)v115 != v114)
        {
          v115 -= 72;
          sub_19BFBA2C4(v115);
        }
        if (v114)
          operator delete(v114);
      }
      else
      {
        v103 = *(_OWORD *)v130;
        *((_QWORD *)v4 + 2) = *(_QWORD *)&v131[0];
        *(_OWORD *)v4 = v103;
        v130[1] = 0;
        *(_QWORD *)&v131[0] = 0;
        v130[0] = 0;
        v104 = DWORD2(v131[1]);
        *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)v131 + 8);
        *((_DWORD *)v4 + 10) = v104;
        *((_QWORD *)v4 + 7) = 0;
        *((_QWORD *)v4 + 8) = 0;
        *((_QWORD *)v4 + 6) = 0;
        *((int64x2_t *)v4 + 3) = v132;
        *((_QWORD *)v4 + 8) = v133[0];
        v132 = 0uLL;
        v133[0] = 0;
        v4 += 72;
      }
      a1[1] = v4;
      v121 = (char *)*a1;
      if (0x8E38E38E38E38E39 * ((v4 - (_BYTE *)*a1) >> 3) <= 0xE)
        v58 = 0;
      else
        v58 = 3;
      goto LABEL_196;
    }
    if (v9)
      goto LABEL_79;
LABEL_126:
    v58 = 2;
LABEL_127:
    v5 = v123;
LABEL_196:
    v141 = &v132;
    sub_19BFBA314((void ***)&v141);
    if (SBYTE7(v131[0]) < 0)
      operator delete(v130[0]);
  }
  while (v58 != 3);
  return sub_19C01A4C4((uint64_t)v134);
}

void sub_19C01A258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void **v45;

  sub_19C01A528(1, v45);
  sub_19C01A47C((uint64_t)&a30);
  sub_19C01A4C4((uint64_t)&a40);
  a30 = a15;
  sub_19BFBA254((void ***)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_19C01A36C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_19BFAC558((const void **)(i - 16), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C01A3BC(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t Instance;
  double v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (qword_1ED024268 != -1)
    dispatch_once(&qword_1ED024268, &unk_1E3D16F40);
  Instance = _CFRuntimeCreateInstance();
  v7 = (double)*a2;
  v8 = *a3;
  sub_19BF86B60(Instance + 16, (unsigned __int16 *)a1);
  v9 = *(_OWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  v11 = *(_OWORD *)(a1 + 64);
  *(_WORD *)(Instance + 96) = *(_WORD *)(a1 + 80);
  *(_OWORD *)(Instance + 64) = v10;
  *(_OWORD *)(Instance + 80) = v11;
  *(_OWORD *)(Instance + 48) = v9;
  *(double *)(Instance + 104) = v7;
  *(_QWORD *)(Instance + 112) = v8;
  *(_DWORD *)(Instance + 120) = 0;
  return Instance;
}

uint64_t sub_19C01A47C(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 48);
  sub_19BFBA314(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C01A4C4(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_19C01A528(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_19C01A574()
{
  uint64_t result;

  qword_1ED024270 = 0;
  *(_QWORD *)algn_1ED024278 = "LXEntry";
  qword_1ED024280 = 0;
  unk_1ED024288 = 0;
  qword_1ED024290 = (uint64_t)sub_19BFD0144;
  unk_1ED024298 = 0u;
  unk_1ED0242A8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0242D0 = result;
  return result;
}

void sub_19C01A5C0(uint64_t a1)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(a1 + 16);
  if (v2)
    sub_19BFD5EEC(v2);
  sub_19BFACCEC(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C01A604(unsigned int *a1, _QWORD *a2)
{
  unsigned int **v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned int **)(*a2 + 8);
  v5[0] = &off_1E3D12268;
  v5[1] = a2;
  v6 = v5;
  sub_19BFD7ED8(a1, v2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_19C01A6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__n128 sub_19C01A6E0(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_19C01A704(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_19BFBF780(&v1);
}

uint64_t sub_19C01A72C(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(*(_QWORD *)a2 + 40))
    return sub_19BFE95DC((_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40), (unsigned __int16 *)(*(_QWORD *)a2 + 8));
  return result;
}

void sub_19C01A754()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C01A768(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D122C0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C01A79C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D122C0;
  a2[1] = v2;
  return result;
}

int32x2_t sub_19C01A7B8@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  int v5;

  v3 = *a2;
  if (!*a2)
    __assert_rtn("operator()", "TIDynamicDictionaryImpl.cpp", 341, "false && \"Unexpectedly missing trie entry\"");
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v3 + 8);
  return sub_19BFF3524(a3, (unsigned __int16 *)(v3 + 8), v5, *(_DWORD *)(v3 + 44), *(_DWORD *)(v3 + 48), *(_DWORD *)(v3 + 52), *(_DWORD *)(v3 + 64), *(double *)(v3 + 56));
}

uint64_t sub_19C01A838(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11670))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C01A874()
{
  return &unk_1E3D11670;
}

void sub_19C01A884()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C01A898(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D12268;
  result[1] = v3;
  return result;
}

uint64_t sub_19C01A8CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D12268;
  a2[1] = v2;
  return result;
}

void sub_19C01A8E8(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v5;
  NSObject *v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (*a2)
  {
    if (qword_1EE417788[0] != -1)
      dispatch_once(qword_1EE417788, &unk_1E3D16FD0);
    v6 = qword_1EE417780;
    if (os_log_type_enabled((os_log_t)qword_1EE417780, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(v5 + 16);
      if (!v9)
        v9 = v5 + 24;
      v10 = 136315138;
      v11 = v9;
      _os_log_error_impl(&dword_19BF85000, v6, OS_LOG_TYPE_ERROR, "found duplicate serialized entry with string='%s'", (uint8_t *)&v10, 0xCu);
    }
  }
  v7 = **(unsigned int ***)(a1 + 8);
  *a3 = v7;
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    if (v8 <= 0)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
}

uint64_t sub_19C01AA1C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11660))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C01AA58()
{
  return &unk_1E3D11660;
}

os_log_t sub_19C01AA64()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "DynamicDictionaryImpl");
  qword_1EE417780 = (uint64_t)result;
  return result;
}

uint64_t sub_19C01AA90(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;

  if (result)
  {
    v1 = result;
    sub_19BFACCEC(result + 64);
    v2 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    if (v2)
      sub_19C01A5C0(v2);
    v3 = *(void **)(v1 + 32);
    if (v3 && *(_BYTE *)(v1 + 30) == 1)
      free(v3);
    v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    JUMPOUT(0x1A1AD0CDCLL);
  }
  return result;
}

void sub_19C01AB08(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C01AB2C(uint64_t a1)
{
  return sub_19C01AA90(*(_QWORD *)(a1 + 24));
}

uint64_t sub_19C01AB34(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D13490))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_19C01AB74(uint64_t a1)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(a1 + 16);
  if (v2)
    sub_19BFD5EEC(v2);
  return sub_19BFACCEC(a1);
}

CFTypeRef **sub_19C01ABA4(CFTypeRef **a1)
{
  CFTypeRef v2;
  CFTypeID v3;
  CFStringRef v4;
  const __CFString *v5;
  CFTypeID v6;
  CFTypeID TypeID;
  char *CStringPtr;
  CFIndex Length;
  void **v10;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__fs::filesystem::directory_entry *v19;
  int v20;
  int v21;
  void *v22;
  std::string *p_dst;
  std::string::size_type size;
  _BOOL4 v25;
  _BOOL4 v26;
  std::__shared_weak_count *cntrl;
  uint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::runtime_error *exception;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::string __dst;
  std::__fs::filesystem::directory_iterator v39;
  std::string maxBufLen;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v41;
  std::__shared_weak_count *v42;
  void *__p[2];
  char v44;
  uint64_t v45;
  CFRange v46;
  CFRange v47;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = **a1;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  CFRetain(**a1);
  v3 = CFGetTypeID(v2);
  if (v3 != CFURLGetTypeID())
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v4 = CFURLCopyFileSystemPath((CFURLRef)v2, kCFURLPOSIXPathStyle);
  v5 = v4;
  if (!v4)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    goto LABEL_60;
  }
  v6 = CFGetTypeID(v4);
  if (v6 != CFStringGetTypeID())
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not convert");
LABEL_60:
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  CStringPtr = (char *)CFStringGetCStringPtr(v5, 0x8000100u);
  if (CStringPtr)
  {
    sub_19BF8E43C(__p, CStringPtr);
  }
  else
  {
    Length = CFStringGetLength(v5);
    maxBufLen.__r_.__value_.__r.__words[0] = 0;
    v46.location = 0;
    v46.length = Length;
    CFStringGetBytes(v5, v46, 0x8000100u, 0, 0, 0, 0, (CFIndex *)&maxBufLen);
    sub_19BF8E998(__p, maxBufLen.__r_.__value_.__r.__words[0], 0);
    if (v44 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    v47.location = 0;
    v47.length = Length;
    CFStringGetBytes(v5, v47, 0x8000100u, 0, 0, (UInt8 *)v10, (CFIndex)maxBufLen.__r_.__value_.__l.__data_, (CFIndex *)&maxBufLen);
  }
  CFRelease(v5);
  sub_19C01933C(&maxBufLen, (char *)__p);
  MEMORY[0x1A1AD0BE0](&v41, &maxBufLen, 0, 0);
  if (SHIBYTE(maxBufLen.__r_.__value_.__r.__words[2]) < 0)
    operator delete(maxBufLen.__r_.__value_.__l.__data_);
  v11 = v41;
  v12 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = v42;
    v39.__imp_.__ptr_ = v11;
    v39.__imp_.__cntrl_ = v12;
    if (v42)
    {
      v16 = (unint64_t *)&v42->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    v39.__imp_.__ptr_ = v41;
    v39.__imp_.__cntrl_ = 0;
  }
  while (v39.__imp_.__ptr_)
  {
    v19 = (std::__fs::filesystem::directory_entry *)std::__fs::filesystem::directory_iterator::__dereference(&v39);
    sub_19C019464((uint64_t)&maxBufLen, &v19->__p_);
    v20 = SHIBYTE(maxBufLen.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(maxBufLen.__r_.__value_.__r.__words[2]) < 0)
      sub_19BF8CD70(&__dst, maxBufLen.__r_.__value_.__l.__data_, maxBufLen.__r_.__value_.__l.__size_);
    else
      __dst = maxBufLen;
    v21 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v22 = (void *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v25 = sub_19BFADCF4(p_dst, size, "nlptemp-", 8uLL);
    v26 = v25;
    if (v21 < 0)
    {
      operator delete(v22);
      if (!v26)
        goto LABEL_39;
LABEL_38:
      std::__fs::filesystem::__remove(&v19->__p_, 0);
      goto LABEL_39;
    }
    if (v25)
      goto LABEL_38;
LABEL_39:
    if (v20 < 0)
      operator delete(maxBufLen.__r_.__value_.__l.__data_);
    std::__fs::filesystem::directory_iterator::__increment(&v39, 0);
  }
  cntrl = v39.__imp_.__cntrl_;
  if (v39.__imp_.__cntrl_)
  {
    v28 = &v39.__imp_.__cntrl_->__shared_owners_;
    do
      v29 = __ldaxr((unint64_t *)v28);
    while (__stlxr(v29 - 1, (unint64_t *)v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v30 = v42;
  if (v42)
  {
    v31 = (unint64_t *)&v42->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v44 < 0)
    operator delete(__p[0]);
  CFRelease(v2);
  return a1;
}

void sub_19C01B014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,__int128 __p,int a25,__int16 a26,char a27,char a28)
{
  const void *v28;
  const void *v29;
  void *v32;
  NSObject *v33;
  uint64_t v34;

  if (a2)
  {
    if (a28 < 0)
      operator delete((void *)__p);
    CFRelease(v29);
    CFRelease(v28);
    if (a2 == 2)
    {
      v32 = __cxa_begin_catch(exception_object);
      if (qword_1EE417788[0] != -1)
        dispatch_once(qword_1EE417788, &unk_1E3D16FD0);
      v33 = qword_1EE417780;
      if (os_log_type_enabled((os_log_t)qword_1EE417780, OS_LOG_TYPE_FAULT))
      {
        v34 = (*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32);
        LODWORD(__p) = 136315394;
        *(_QWORD *)((char *)&__p + 4) = "cleanup_nlp_temp_files";
        WORD6(__p) = 2080;
        *(_QWORD *)((char *)&__p + 14) = v34;
        _os_log_fault_impl(&dword_19BF85000, v33, OS_LOG_TYPE_FAULT, "%s: failed to clean up NLP temporary files: %s", (uint8_t *)&__p, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19C01AEE8);
    }
    sub_19BF8E3F8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_19C01B314(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_19C01B338(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_19C01B350(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v2 = *a2;
  if (*(_DWORD *)(*a2 + 40) && (*(_BYTE *)(v2 + 47) & 8) == 0 && (*(_DWORD *)(v2 + 48) & 0x80000000) == 0)
  {
    v3 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v5 = (_QWORD *)v3[6];
    v4 = v3[7];
    if ((unint64_t)v5 >= v4)
    {
      v7 = (_QWORD *)v3[5];
      v8 = v5 - v7;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        sub_19BF8EB40();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_19BF8E6D0();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      *(_QWORD *)v13 = v2;
      v6 = v13 + 8;
      if (v5 != v7)
      {
        do
        {
          v14 = *--v5;
          *((_QWORD *)v13 - 1) = v14;
          v13 -= 8;
        }
        while (v5 != v7);
        v5 = (_QWORD *)v3[5];
      }
      v3[5] = v13;
      v3[6] = v6;
      v3[7] = &v12[8 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = v2;
      v6 = v5 + 1;
    }
    v3[6] = v6;
  }
}

int32x2_t sub_19C01B454(uint64_t *a1, uint64_t a2, unsigned __int16 *a3, int a4, unsigned int a5)
{
  int v9;
  double Current;

  v9 = (*(uint64_t (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a2 + 16))(a2, a3);
  Current = CFAbsoluteTimeGetCurrent();
  return sub_19BFF3524(a1, a3, v9, a4, a5, 0, 0, Current);
}

uint64_t *LXLemmatizerCreate(const __CFString *a1, CFErrorRef *a2)
{
  uint64_t *v4;
  const __CFLocale *v5;
  const __CFString *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)sub_19C01B674();
  v5 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
  v11[0] = &off_1E3D10A28;
  v12 = v11;
  v6 = (const __CFString *)sub_19C0372B8(0, v5);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  if (v6)
  {
    v9 = sub_19C0144BC(v4 + 2, v6, a2);
    CFRelease(v6);
    if ((v9 & 1) != 0)
    {
      if (!v5)
        return v4;
      goto LABEL_13;
    }
  }
  else if (a2)
  {
    *a2 = sub_19BFEA6B4(CFSTR("Failed to get model path from locale"));
  }
  CFRelease(v4);
  v4 = 0;
  if (v5)
LABEL_13:
    CFRelease(v5);
  return v4;
}

void sub_19C01B600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C01B674()
{
  uint64_t Instance;

  if (qword_1ED024220 != -1)
    dispatch_once(&qword_1ED024220, &unk_1E3D17010);
  Instance = _CFRuntimeCreateInstance();
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_QWORD *)(Instance + 80) = 0;
  *(_QWORD *)(Instance + 24) = &off_1E3D10888;
  sub_19BF8EFC0((_QWORD *)(Instance + 40));
  *(_QWORD *)(Instance + 80) = 0;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  return Instance;
}

void sub_19C01B718(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    sub_19C014608(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C01B734()
{
  uint64_t result;

  qword_1ED0241A8 = 0;
  unk_1ED0241B0 = "LXLemmatizer";
  qword_1ED0241B8 = 0;
  unk_1ED0241C0 = 0;
  qword_1ED0241C8 = (uint64_t)sub_19C01B780;
  unk_1ED0241D0 = 0u;
  unk_1ED0241E0 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED024208 = result;
  return result;
}

uint64_t sub_19C01B780(uint64_t a1)
{
  uint64_t result;

  sub_19C015138((_QWORD *)(a1 + 24));
  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    sub_19C014608(result);
  return result;
}

uint64_t *LXLemmatizerCreateFromFile(const __CFString *a1, CFErrorRef *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_19C01B674();
  if ((sub_19C0144BC(v4 + 2, a1, a2) & 1) == 0)
  {
    CFRelease(v4);
    return 0;
  }
  return v4;
}

uint64_t LXLemmatizerCopyLemmaForStringWithPOS(uint64_t a1, const __CFString *a2, std::string::value_type a3)
{
  uint64_t v3;
  std::string *v6;
  std::string::size_type size;
  unint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  uint64_t v14;
  uint64_t v15;
  std::string v16;
  char v17;
  std::string v18;
  _BYTE v19[32];
  uint64_t v20;

  v3 = 0;
  v20 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2)
    return v3;
  sub_19BF87140(a2, v19);
  std::string::push_back((std::string *)v19, 58);
  v16 = *(std::string *)v19;
  memset(v19, 0, 24);
  std::string::push_back(&v16, a3);
  v18 = v16;
  memset(&v16, 0, sizeof(v16));
  if ((v19[23] & 0x80000000) != 0)
    operator delete(*(void **)v19);
  memset(v19, 0, sizeof(v19));
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v18;
  else
    v6 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    size = v18.__r_.__value_.__l.__size_;
  sub_19BF8F4E4((uint64_t *)(a1 + 40), (uint64_t)v6, size, (uint64_t)v19, &v16);
  v8 = (unint64_t *)(a1 + 24);
  if ((v19[31] & 0x80000000) != 0)
    operator delete(*(void **)&v19[8]);
  __p = 0;
  v14 = 0;
  v15 = 0;
  *(_QWORD *)v19 = &off_1E3D10CE8;
  *(_QWORD *)&v19[8] = &__p;
  *(_QWORD *)&v19[24] = v19;
  sub_19C0148B8(v8, (uint64_t)&v16, (uint64_t)v19, 0xFFFFFFFFLL);
  v9 = *(_QWORD **)&v19[24];
  if (*(_BYTE **)&v19[24] == v19)
  {
    v10 = 4;
    v9 = v19;
  }
  else
  {
    if (!*(_QWORD *)&v19[24])
      goto LABEL_18;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_18:
  v11 = HIBYTE(v15);
  if (v15 < 0)
    v11 = v14;
  if (!v11)
  {
    v3 = 0;
    if ((v15 & 0x8000000000000000) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  sub_19BFECC10((CFStringRef *)v19, (const UInt8 *)&__p);
  v3 = *(_QWORD *)v19;
  *(_QWORD *)v19 = 0;
  sub_19BF8DAB8((const void **)v19);
  if (v15 < 0)
LABEL_22:
    operator delete(__p);
LABEL_23:
  if (v17 < 0)
    operator delete((void *)v16.__r_.__value_.__l.__size_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v3;
}

void sub_19C01B9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a17);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void LXLemmatizerEnumerateLemmasforString(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  std::string *p_p;
  std::string::size_type size;
  unint64_t *v6;
  __int128 *v7;
  uint64_t v8;
  char v9;
  std::string v10;
  char v11;
  std::string __p;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v13 = a3;
  if (!a2)
    return;
  sub_19BF87140(a2, &v10);
  std::string::push_back(&v10, 58);
  __p = v10;
  v14 = 0u;
  v15 = 0u;
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_19BF8F4E4((uint64_t *)(a1 + 40), (uint64_t)p_p, size, (uint64_t)&v14, &v10);
  v6 = (unint64_t *)(a1 + 24);
  if (SHIBYTE(v15) < 0)
    operator delete(*((void **)&v14 + 1));
  v9 = 0;
  *(_QWORD *)&v14 = &off_1E3D10C90;
  *((_QWORD *)&v14 + 1) = &v13;
  *(_QWORD *)&v15 = &v9;
  *((_QWORD *)&v15 + 1) = &v14;
  sub_19C0148B8(v6, (uint64_t)&v10, (uint64_t)&v14, 0xFFFFFFFFLL);
  v7 = (__int128 *)*((_QWORD *)&v15 + 1);
  if (*((__int128 **)&v15 + 1) == &v14)
  {
    v8 = 4;
    v7 = &v14;
    goto LABEL_15;
  }
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  if (v11 < 0)
    operator delete((void *)v10.__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19C01BBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;

  v29 = *(_QWORD **)(v27 - 40);
  if (v29 == v26)
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 64);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t LXLemmatizerGetPartOfSpeechIDForTag(const __CFString *a1)
{
  unsigned __int8 *v1;
  int v2;
  void *v3;
  size_t v4;
  uint64_t v5;
  unsigned int v8;
  int v9;
  _QWORD v11[2];
  unsigned __int8 v12;

  v1 = (unsigned __int8 *)v11;
  sub_19BF87140(a1, v11);
  v2 = (char)v12;
  v3 = (void *)v11[0];
  if ((v12 & 0x80u) == 0)
  {
    v4 = v12;
  }
  else
  {
    v1 = (unsigned __int8 *)v11[0];
    v4 = v11[1];
  }
  v5 = 2;
  if (sub_19BFADCF4(v1, v4, "VB", 2uLL))
    goto LABEL_51;
  if (sub_19BFADCF4(v1, v4, "NN", 2uLL))
  {
    v5 = 1;
    goto LABEL_51;
  }
  if (sub_19BFADCF4(v1, v4, "RB", 2uLL))
  {
    v5 = 4;
    goto LABEL_51;
  }
  if (sub_19BFADCF4(v1, v4, "JJ", 2uLL))
  {
    v5 = 3;
    goto LABEL_51;
  }
  if (sub_19BFADCF4(v1, v4, "PRP", 3uLL))
  {
    v5 = 5;
    goto LABEL_51;
  }
  if (sub_19BFADCF4(v1, v4, "DT", 2uLL))
  {
    v5 = 6;
    goto LABEL_51;
  }
  if (sub_19BFADCF4(v1, v4, "RP", 2uLL))
  {
    v5 = 7;
    goto LABEL_51;
  }
  if (v4 == 3)
  {
    if (*(_WORD *)v1 != 20041 || v1[2] != 84)
    {
      if (*(_WORD *)v1 == 17488 && v1[2] == 84)
      {
        v5 = 12;
      }
      else
      {
        v8 = bswap32(*(unsigned __int16 *)v1) >> 16;
        if (v8 == 20562)
        {
          v9 = v1[2] - 69;
        }
        else if (v8 < 0x5052)
        {
          v9 = -1;
        }
        else
        {
          v9 = 1;
        }
        if (v9)
          v5 = 0;
        else
          v5 = 12;
      }
      goto LABEL_51;
    }
LABEL_41:
    v5 = 11;
    goto LABEL_51;
  }
  if (v4 != 2)
  {
    v5 = 0;
    goto LABEL_51;
  }
  switch(*(_WORD *)v1)
  {
    case 0x4E49:
    case 0x4F54:
      v5 = 8;
      break;
    case 0x4855:
      goto LABEL_41;
    case 0x4343:
    case 0x5343:
      v5 = 10;
      break;
    case 0x4443:
      v5 = 9;
      break;
    default:
      v5 = 12;
      if (*(_WORD *)v1 != 22597)
      {
        if (*(_WORD *)v1 == 22342)
          v5 = 12;
        else
          v5 = 0;
      }
      break;
  }
LABEL_51:
  if (v2 < 0)
    operator delete(v3);
  return v5;
}

uint64_t sub_19C01BF14(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, float a7)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  int v17;
  _QWORD *v18;

  sub_19C047978(a1, a3);
  v13 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v13 == -1)
    sub_19BFC4E9C();
  v16[0] = &v18;
  ((void (*)(_QWORD *, uint64_t))off_1E3D174F8[v13])(v16, a2);
  *(_QWORD *)(a1 + 80) = 0;
  *(float *)(a1 + 88) = a7;
  *(_BYTE *)(a1 + 92) = a4;
  *(_BYTE *)(a1 + 93) = a5;
  v16[0] = a1 + 40;
  v16[1] = a6;
  v17 = 0;
  v14 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v14 == -1)
    sub_19BFC4E9C();
  v18 = v16;
  ((void (*)(_QWORD **, uint64_t))off_1E3D17030[v14])(&v18, a2);
  return a1;
}

void sub_19C01C004(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  sub_19BFC7E88(v3, 0);
  sub_19BFC72B0(v2);
  sub_19BFC72B0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C01C034(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = sub_19C047978(a1, a2);
  sub_19C047978(v4 + 40, a2 + 40);
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 92);
  v5 = *(_QWORD *)(a2 + 80);
  if (v5)
  {
    v6 = operator new();
    sub_19C01C034(v6, v5);
    v8 = 0;
    sub_19BFC7E88((uint64_t *)(a1 + 80), v6);
    sub_19BFC7E88(&v8, 0);
  }
  return a1;
}

void sub_19C01C0E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  MEMORY[0x1A1AD0CDC](v4, 0x1032C40198927B0);
  sub_19BFC7E88(v3, 0);
  sub_19BFC72B0(v2);
  sub_19BFC72B0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C01C134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_19C0479EC(a1, a2);
    sub_19C0479EC(a1 + 40, a2 + 40);
    v4 = *(_QWORD *)(a2 + 80);
    if (v4)
    {
      v5 = operator new();
      sub_19C01C034(v5, v4);
      v7 = 0;
      sub_19BFC7E88((uint64_t *)(a1 + 80), v5);
      sub_19BFC7E88(&v7, 0);
    }
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 92);
  }
  return a1;
}

void sub_19C01C1DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD0CDC](v1, 0x1032C40198927B0);
  _Unwind_Resume(a1);
}

uint64_t sub_19C01C200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v2 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v2 == -1)
    goto LABEL_8;
  v5 = a1 + 40;
  v10 = &v9;
  if ((((uint64_t (*)(uint64_t **, uint64_t))off_1E3D179D8[v2])(&v10, a1 + 40) & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 80);
    if (v6)
      return sub_19C01C200(v6, a2);
  }
  v9 = v5;
  v8 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v8 == -1)
LABEL_8:
    sub_19BFC4E9C();
  v10 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1E3D17698[v8])(&v10, a2);
}

float sub_19C01C2AC(_QWORD **a1)
{
  char *v1;
  float result;
  float v3;

  v1 = (char *)**a1;
  if (*((_DWORD *)v1 + 8))
    sub_19BFC4E9C();
  result = 0.0;
  if ((*v1 & 0x80000000) == 0)
  {
    result = 1.0;
    if (!*v1)
    {
      if (*((_DWORD *)v1 + 2) || (result = 0.0, v1[24]))
      {
        v3 = (double)v1[20] * 0.00392156863;
        return v3 * v3;
      }
    }
  }
  return result;
}

float sub_19C01C314(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v2;
  float result;

  v2 = **a1;
  if (v2[8] != 1)
    sub_19BFC4E9C();
  result = 0.0;
  if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2)
    return sub_19C03AA28((_QWORD *)(a2 + 40), v2);
  return result;
}

float sub_19C01C360(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  float result;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 2)
    sub_19BFC4E9C();
  result = 0.0;
  if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2)
    return sub_19C03AFF4((uint64_t *)(a2 + 40), (uint64_t *)v2);
  return result;
}

float sub_19C01C3AC(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  float result;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 3)
    sub_19BFC4E9C();
  result = 0.0;
  if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2)
    return sub_19C03B5D8(a2 + 40, (unint64_t *)v2);
  return result;
}

float sub_19C01C3F8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  float result;
  BOOL v4;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 4)
    sub_19BFC4E9C();
  result = 0.0;
  if (*(_QWORD *)v2)
    v4 = *(_QWORD *)v2 == 0xFFFFFFFFLL;
  else
    v4 = 1;
  if (!v4)
    return sub_19C039400((uint64_t *)(a2 + 40), v2);
  return result;
}

float sub_19C01C448(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v2;
  float result;

  v2 = **a1;
  if (v2[8] != 5)
    sub_19BFC4E9C();
  result = 0.0;
  if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2)
    return sub_19C03AA28((_QWORD *)(a2 + 40), v2);
  return result;
}

float sub_19C01C494(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  float result;

  v3 = **a1;
  if (*(_DWORD *)(v3 + 32) != 6)
    sub_19BFC4E9C();
  result = 0.0;
  if (*(_DWORD *)(v3 + 12) != -1 && !*(_BYTE *)(v3 + 9))
    return sub_19C03C6C8((uint64_t *)(a2 + 40), v3);
  return result;
}

float sub_19C01C4E4(uint64_t a1)
{
  if (*(_DWORD *)(**(_QWORD **)a1 + 32) != 7)
    sub_19BFC4E9C();
  return 0.0;
}

float sub_19C01C510(uint64_t a1)
{
  if (*(_DWORD *)(**(_QWORD **)a1 + 32) != 8)
    sub_19BFC4E9C();
  return 0.0;
}

float sub_19C01C53C(uint64_t a1)
{
  if (*(_DWORD *)(**(_QWORD **)a1 + 32) != 9)
    sub_19BFC4E9C();
  return 0.0;
}

float sub_19C01C568(uint64_t a1)
{
  if (*(_DWORD *)(**(_QWORD **)a1 + 32) != 10)
    sub_19BFC4E9C();
  return 0.0;
}

float sub_19C01C594(uint64_t a1)
{
  if (*(_DWORD *)(**(_QWORD **)a1 + 32) != 11)
    sub_19BFC4E9C();
  return 0.0;
}

float sub_19C01C5C0(uint64_t a1)
{
  if (*(_DWORD *)(**(_QWORD **)a1 + 32) != 12)
    sub_19BFC4E9C();
  return 0.0;
}

uint64_t sub_19C01C5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v2 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v2 == -1)
    goto LABEL_8;
  v5 = a1 + 40;
  v10 = &v9;
  if ((((uint64_t (*)(uint64_t **, uint64_t))off_1E3D179D8[v2])(&v10, a1 + 40) & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 80);
    if (v6)
      return sub_19C01C5EC(v6, a2);
  }
  v9 = v5;
  v8 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v8 == -1)
LABEL_8:
    sub_19BFC4E9C();
  v10 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1E3D17700[v8])(&v10, a2);
}

float sub_19C01C698(unsigned __int8 ***a1, uint64_t a2)
{
  unsigned __int8 *v2;
  float result;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  char v15;
  unint64_t v16;
  float v18;

  v2 = **a1;
  if (*((_DWORD *)v2 + 8))
    sub_19BFC4E9C();
  result = 0.0;
  if (*(_BYTE *)(a2 + 20) && ((char)*v2 & 0x80000000) == 0)
  {
    v4 = *((_DWORD *)v2 + 2);
    v5 = !*v2 && v4 == 0;
    v6 = v5 && v2[24] == 0;
    if (!v6 && (HIBYTE(v4) & 3) <= *v2)
    {
      if ((v4 & 0x20000000) != 0 && (v7 = *((_DWORD *)v2 + 4) & 0x7FFFFFFF) != 0)
      {
        v8 = 0;
        v9 = *(uint64_t **)(a2 + 8);
        v10 = v9[1];
        v11 = v10 - 1;
        do
        {
          if ((uint64_t)v10 <= v7)
            break;
          if (v10 < v7)
            goto LABEL_40;
          if (v11 < v7)
            return result;
          v12 = *v9;
          if (!*v9)
            return result;
          v13 = v7 + 1;
          if (v10 < v13)
            goto LABEL_40;
          if (v11 < v13)
            return result;
          v14 = *(unsigned __int8 *)(v12 + v7);
          v15 = *(_BYTE *)(v12 + v13);
          if ((v15 & 4) != 0)
          {
            v16 = v7 + 2;
            if (v10 < v16)
LABEL_40:
              __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
            if (v11 < v16)
              return result;
            v8 += *(unsigned __int8 *)(v12 + v16) * *(unsigned __int8 *)(v12 + v16);
          }
          else
          {
            v8 = 65025;
          }
          if ((v15 & 0x80) == 0)
            break;
          v7 += v14;
        }
        while (v7 && v14 != 0);
        return (double)v8 * 0.0000153787005;
      }
      else if ((v4 & 0x10000000) != 0)
      {
        v18 = (double)v2[16] * 0.00392156863;
        return v18 * v18;
      }
      else if ((v4 & 0xFFFFFF) == 0)
      {
        result = 1.0;
        if ((*((_QWORD *)v2 + 2) & 0xFF00000000) == 0)
          return 0.0;
      }
    }
  }
  return result;
}

float sub_19C01C80C(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v2;
  float v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  float v16;
  int v17;

  v2 = **a1;
  if (v2[8] != 1)
    sub_19BFC4E9C();
  v4 = 0.0;
  if (*(_BYTE *)a2)
  {
    if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2)
    {
      v17 = 0;
      if (sub_19C008564((_QWORD *)(a2 + 48), v2, &v17))
      {
        if ((~v17 & 0x7FFFFF) != 0)
        {
          if ((v17 & 0x400000) != 0 || (v6 = v17 & 0x1FFFFF, (v17 & 0x1FFFFF) == 0))
          {
            if ((v17 & 0x400000) != 0)
            {
              v16 = (double)v17 * 0.00392156863;
              return v16 * v16;
            }
            else if (sub_19C03AA9C(a2 + 40, (uint64_t)v2))
            {
              return 0.0;
            }
            else
            {
              return 1.0;
            }
          }
          else if (*(_BYTE *)a2)
          {
            v7 = 0;
            v8 = *(uint64_t **)(a2 + 24);
            v9 = v8[1];
            do
            {
              if (v9 <= v6)
                break;
              v10 = *v8;
              if (!*v8)
                return v4;
              v11 = v6 + 1;
              if (v9 < v11)
LABEL_32:
                __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
              if (v9 <= v11)
                return v4;
              v12 = *(unsigned __int8 *)(v10 + v6);
              v13 = *(_BYTE *)(v10 + v11);
              if ((v13 & 4) != 0)
              {
                v14 = v6 + 2;
                if (v9 < v14)
                  goto LABEL_32;
                if (v9 <= v14)
                  return v4;
                v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
              }
              else
              {
                v7 = 65025;
              }
              if ((v13 & 0x80) == 0)
                break;
              v6 += v12;
            }
            while (v6 && v12 != 0);
            return (double)v7 * 0.0000153787005;
          }
        }
      }
    }
  }
  return v4;
}

float sub_19C01C998(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  float v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  float v16;
  int v17;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 2)
    sub_19BFC4E9C();
  v4 = 0.0;
  if (*(_BYTE *)a2)
  {
    if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2)
    {
      v17 = 0;
      if (sub_19C00FBB0((uint64_t *)(a2 + 48), (uint64_t *)v2, &v17))
      {
        if ((~v17 & 0x7FFFFF) != 0)
        {
          if ((v17 & 0x400000) != 0 || (v6 = v17 & 0x1FFFFF, (v17 & 0x1FFFFF) == 0))
          {
            if ((v17 & 0x400000) != 0)
            {
              v16 = (double)v17 * 0.00392156863;
              return v16 * v16;
            }
            else if (sub_19C03B068(a2 + 40, v2))
            {
              return 0.0;
            }
            else
            {
              return 1.0;
            }
          }
          else if (*(_BYTE *)a2)
          {
            v7 = 0;
            v8 = *(uint64_t **)(a2 + 24);
            v9 = v8[1];
            do
            {
              if (v9 <= v6)
                break;
              v10 = *v8;
              if (!*v8)
                return v4;
              v11 = v6 + 1;
              if (v9 < v11)
LABEL_32:
                __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
              if (v9 <= v11)
                return v4;
              v12 = *(unsigned __int8 *)(v10 + v6);
              v13 = *(_BYTE *)(v10 + v11);
              if ((v13 & 4) != 0)
              {
                v14 = v6 + 2;
                if (v9 < v14)
                  goto LABEL_32;
                if (v9 <= v14)
                  return v4;
                v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
              }
              else
              {
                v7 = 65025;
              }
              if ((v13 & 0x80) == 0)
                break;
              v6 += v12;
            }
            while (v6 && v12 != 0);
            return (double)v7 * 0.0000153787005;
          }
        }
      }
    }
  }
  return v4;
}

float sub_19C01CB24(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  float v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  float v16;
  int v17;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 3)
    sub_19BFC4E9C();
  v4 = 0.0;
  if (*(_BYTE *)a2)
  {
    if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2)
    {
      v17 = 0;
      if (sub_19BFFD5C0(a2 + 48, (unint64_t *)v2, &v17))
      {
        if ((~v17 & 0x7FFFFF) != 0)
        {
          if ((v17 & 0x400000) != 0 || (v6 = v17 & 0x1FFFFF, (v17 & 0x1FFFFF) == 0))
          {
            if ((v17 & 0x400000) != 0)
            {
              v16 = (double)v17 * 0.00392156863;
              return v16 * v16;
            }
            else if (sub_19C03B64C(a2 + 40, v2))
            {
              return 0.0;
            }
            else
            {
              return 1.0;
            }
          }
          else if (*(_BYTE *)a2)
          {
            v7 = 0;
            v8 = *(uint64_t **)(a2 + 24);
            v9 = v8[1];
            do
            {
              if (v9 <= v6)
                break;
              v10 = *v8;
              if (!*v8)
                return v4;
              v11 = v6 + 1;
              if (v9 < v11)
LABEL_32:
                __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
              if (v9 <= v11)
                return v4;
              v12 = *(unsigned __int8 *)(v10 + v6);
              v13 = *(_BYTE *)(v10 + v11);
              if ((v13 & 4) != 0)
              {
                v14 = v6 + 2;
                if (v9 < v14)
                  goto LABEL_32;
                if (v9 <= v14)
                  return v4;
                v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
              }
              else
              {
                v7 = 65025;
              }
              if ((v13 & 0x80) == 0)
                break;
              v6 += v12;
            }
            while (v6 && v12 != 0);
            return (double)v7 * 0.0000153787005;
          }
        }
      }
    }
  }
  return v4;
}

float sub_19C01CCB0(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  float v4;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  char v15;
  unint64_t v16;
  float v18;
  int v19;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 4)
    sub_19BFC4E9C();
  v4 = 0.0;
  if (*(_BYTE *)a2)
  {
    if (*(_QWORD *)v2 && *(_QWORD *)v2 != 0xFFFFFFFFLL)
    {
      v19 = 0;
      v7 = sub_19BFF9DF8((uint64_t *)(a2 + 48), v2, &v19);
      if (v7 && (~v19 & 0xFFFFFF) != 0)
      {
        if ((v19 & 0x400000) != 0 || (v8 = v19 & 0x1FFFFF, (v19 & 0x1FFFFF) == 0))
        {
          if ((v19 & 0x400000) != 0)
          {
            v18 = (double)v19 * 0.00392156863;
            return v18 * v18;
          }
          else if (sub_19C03BBBC(a2 + 40, v2))
          {
            return 0.0;
          }
          else
          {
            return 1.0;
          }
        }
        else if (*(_BYTE *)a2)
        {
          v9 = 0;
          v10 = *(uint64_t **)(a2 + 24);
          v11 = v10[1];
          do
          {
            if (v11 <= v8)
              break;
            v12 = *v10;
            if (!*v10)
              return v4;
            v13 = v8 + 1;
            if (v11 < v13)
LABEL_36:
              __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
            if (v11 <= v13)
              return v4;
            v14 = *(unsigned __int8 *)(v12 + v8);
            v15 = *(_BYTE *)(v12 + v13);
            if ((v15 & 4) != 0)
            {
              v16 = v8 + 2;
              if (v11 < v16)
                goto LABEL_36;
              if (v11 <= v16)
                return v4;
              v9 += *(unsigned __int8 *)(v12 + v16) * *(unsigned __int8 *)(v12 + v16);
            }
            else
            {
              v9 = 65025;
            }
            if ((v15 & 0x80) == 0)
              break;
            v8 += v14;
          }
          while (v8 && v14 != 0);
          return (double)v9 * 0.0000153787005;
        }
      }
    }
  }
  return v4;
}

float sub_19C01CE40(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v2;
  float v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  float v16;
  int v17;

  v2 = **a1;
  if (v2[8] != 5)
    sub_19BFC4E9C();
  v4 = 0.0;
  if (*(_BYTE *)a2)
  {
    if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2)
    {
      v17 = 0;
      if (sub_19C008564((_QWORD *)(a2 + 48), v2, &v17))
      {
        if ((~v17 & 0x7FFFFF) != 0)
        {
          if ((v17 & 0x400000) != 0 || (v6 = v17 & 0x1FFFFF, (v17 & 0x1FFFFF) == 0))
          {
            if ((v17 & 0x400000) != 0)
            {
              v16 = (double)v17 * 0.00392156863;
              return v16 * v16;
            }
            else if (sub_19C03C2D8(a2 + 40, (uint64_t)v2))
            {
              return 0.0;
            }
            else
            {
              return 1.0;
            }
          }
          else if (*(_BYTE *)a2)
          {
            v7 = 0;
            v8 = *(uint64_t **)(a2 + 24);
            v9 = v8[1];
            do
            {
              if (v9 <= v6)
                break;
              v10 = *v8;
              if (!*v8)
                return v4;
              v11 = v6 + 1;
              if (v9 < v11)
LABEL_32:
                __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
              if (v9 <= v11)
                return v4;
              v12 = *(unsigned __int8 *)(v10 + v6);
              v13 = *(_BYTE *)(v10 + v11);
              if ((v13 & 4) != 0)
              {
                v14 = v6 + 2;
                if (v9 < v14)
                  goto LABEL_32;
                if (v9 <= v14)
                  return v4;
                v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
              }
              else
              {
                v7 = 65025;
              }
              if ((v13 & 0x80) == 0)
                break;
              v6 += v12;
            }
            while (v6 && v12 != 0);
            return (double)v7 * 0.0000153787005;
          }
        }
      }
    }
  }
  return v4;
}

float sub_19C01CFCC(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  float v4;
  BOOL v5;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  char v15;
  unint64_t v16;
  float v18;
  int v19;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 6)
    sub_19BFC4E9C();
  v4 = 0.0;
  if (*(_BYTE *)a2)
    v5 = *(_DWORD *)(v2 + 12) == -1;
  else
    v5 = 1;
  if (!v5 && *(_BYTE *)(v2 + 9) == 0)
  {
    v19 = 0;
    if (sub_19BFB8AAC((uint64_t *)(a2 + 48), v2, &v19))
    {
      if ((~v19 & 0x7FFFFF) != 0)
      {
        if ((v19 & 0x400000) != 0 || (v8 = v19 & 0x1FFFFF, (v19 & 0x1FFFFF) == 0))
        {
          if ((v19 & 0x400000) != 0)
          {
            v18 = (double)v19 * 0.00392156863;
            return v18 * v18;
          }
          else if (sub_19C03C73C(a2 + 40, v2))
          {
            return 0.0;
          }
          else
          {
            return 1.0;
          }
        }
        else if (*(_BYTE *)a2)
        {
          v9 = 0;
          v10 = *(uint64_t **)(a2 + 24);
          v11 = v10[1];
          do
          {
            if (v11 <= v8)
              break;
            v12 = *v10;
            if (!*v10)
              return v4;
            v13 = v8 + 1;
            if (v11 < v13)
LABEL_38:
              __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
            if (v11 <= v13)
              return v4;
            v14 = *(unsigned __int8 *)(v12 + v8);
            v15 = *(_BYTE *)(v12 + v13);
            if ((v15 & 4) != 0)
            {
              v16 = v8 + 2;
              if (v11 < v16)
                goto LABEL_38;
              if (v11 <= v16)
                return v4;
              v9 += *(unsigned __int8 *)(v12 + v16) * *(unsigned __int8 *)(v12 + v16);
            }
            else
            {
              v9 = 65025;
            }
            if ((v15 & 0x80) == 0)
              break;
            v8 += v14;
          }
          while (v8 && v14 != 0);
          return (double)v9 * 0.0000153787005;
        }
      }
    }
  }
  return v4;
}

float sub_19C01D15C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  float v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  int v16;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 7)
    sub_19BFC4E9C();
  v16 = 0;
  v4 = 0.0;
  if (*(_BYTE *)a2
    && (unint64_t)(*(_QWORD *)v2 + 1) >= 2
    && sub_19C03CCB0((uint64_t *)(a2 + 40), (uint64_t *)v2, &v16))
  {
    v6 = v16 & 0x3FFFFFFF;
    if ((v16 & 0x3FFFFFFF) != 0)
    {
      if (*(_BYTE *)a2)
      {
        v7 = 0;
        v8 = *(uint64_t **)(a2 + 24);
        v9 = v8[1];
        do
        {
          if (v9 <= v6)
            break;
          v10 = *v8;
          if (!*v8)
            return v4;
          v11 = v6 + 1;
          if (v9 < v11)
LABEL_28:
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          if (v9 <= v11)
            return v4;
          v12 = *(unsigned __int8 *)(v10 + v6);
          v13 = *(_BYTE *)(v10 + v11);
          if ((v13 & 4) != 0)
          {
            v14 = v6 + 2;
            if (v9 < v14)
              goto LABEL_28;
            if (v9 <= v14)
              return v4;
            v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
          }
          else
          {
            v7 = 65025;
          }
          if ((v13 & 0x80) == 0)
            break;
          v6 += v12;
        }
        while (v6 && v12 != 0);
        return (double)v7 * 0.0000153787005;
      }
    }
    else if (sub_19C03CD24(a2 + 40, v2))
    {
      return 0.0;
    }
    else
    {
      return 1.0;
    }
  }
  return v4;
}

float sub_19C01D2C0(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v2;
  float v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  int v16;

  v2 = **a1;
  if (v2[8] != 8)
    sub_19BFC4E9C();
  v16 = 0;
  v4 = 0.0;
  if (*(_BYTE *)a2
    && (unint64_t)(*(_QWORD *)v2 + 1) >= 2
    && sub_19C03D330((_QWORD *)(a2 + 40), v2, &v16))
  {
    v6 = v16 & 0x3FFFFFFF;
    if ((v16 & 0x3FFFFFFF) != 0)
    {
      if (*(_BYTE *)a2)
      {
        v7 = 0;
        v8 = *(uint64_t **)(a2 + 24);
        v9 = v8[1];
        do
        {
          if (v9 <= v6)
            break;
          v10 = *v8;
          if (!*v8)
            return v4;
          v11 = v6 + 1;
          if (v9 < v11)
LABEL_28:
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          if (v9 <= v11)
            return v4;
          v12 = *(unsigned __int8 *)(v10 + v6);
          v13 = *(_BYTE *)(v10 + v11);
          if ((v13 & 4) != 0)
          {
            v14 = v6 + 2;
            if (v9 < v14)
              goto LABEL_28;
            if (v9 <= v14)
              return v4;
            v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
          }
          else
          {
            v7 = 65025;
          }
          if ((v13 & 0x80) == 0)
            break;
          v6 += v12;
        }
        while (v6 && v12 != 0);
        return (double)v7 * 0.0000153787005;
      }
    }
    else if (sub_19C03D3AC(a2 + 40, (uint64_t)v2))
    {
      return 0.0;
    }
    else
    {
      return 1.0;
    }
  }
  return v4;
}

float sub_19C01D424(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  float v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  int v16;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 9)
    sub_19BFC4E9C();
  v16 = 0;
  v4 = 0.0;
  if (*(_BYTE *)a2
    && (unint64_t)(*(_QWORD *)v2 + 1) >= 2
    && sub_19C03D9A4(a2 + 40, (unint64_t *)v2, &v16))
  {
    v6 = v16 & 0x3FFFFFFF;
    if ((v16 & 0x3FFFFFFF) != 0)
    {
      if (*(_BYTE *)a2)
      {
        v7 = 0;
        v8 = *(uint64_t **)(a2 + 24);
        v9 = v8[1];
        do
        {
          if (v9 <= v6)
            break;
          v10 = *v8;
          if (!*v8)
            return v4;
          v11 = v6 + 1;
          if (v9 < v11)
LABEL_28:
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          if (v9 <= v11)
            return v4;
          v12 = *(unsigned __int8 *)(v10 + v6);
          v13 = *(_BYTE *)(v10 + v11);
          if ((v13 & 4) != 0)
          {
            v14 = v6 + 2;
            if (v9 < v14)
              goto LABEL_28;
            if (v9 <= v14)
              return v4;
            v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
          }
          else
          {
            v7 = 65025;
          }
          if ((v13 & 0x80) == 0)
            break;
          v6 += v12;
        }
        while (v6 && v12 != 0);
        return (double)v7 * 0.0000153787005;
      }
    }
    else if (sub_19C03DA18(a2 + 40, v2))
    {
      return 0.0;
    }
    else
    {
      return 1.0;
    }
  }
  return v4;
}

float sub_19C01D588(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  float v4;
  BOOL v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  char v14;
  unint64_t v15;
  int v17;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 10)
    sub_19BFC4E9C();
  v17 = 0;
  v4 = 0.0;
  if (*(_BYTE *)a2)
  {
    v5 = !*(_QWORD *)v2 || *(_QWORD *)v2 == 0xFFFFFFFFLL;
    if (!v5 && sub_19C03E0C8((uint64_t *)(a2 + 40), v2, &v17))
    {
      v7 = v17 & 0x3FFFFFFF;
      if ((v17 & 0x3FFFFFFF) != 0)
      {
        if (*(_BYTE *)a2)
        {
          v8 = 0;
          v9 = *(uint64_t **)(a2 + 24);
          v10 = v9[1];
          do
          {
            if (v10 <= v7)
              break;
            v11 = *v9;
            if (!*v9)
              return v4;
            v12 = v7 + 1;
            if (v10 < v12)
LABEL_32:
              __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
            if (v10 <= v12)
              return v4;
            v13 = *(unsigned __int8 *)(v11 + v7);
            v14 = *(_BYTE *)(v11 + v12);
            if ((v14 & 4) != 0)
            {
              v15 = v7 + 2;
              if (v10 < v15)
                goto LABEL_32;
              if (v10 <= v15)
                return v4;
              v8 += *(unsigned __int8 *)(v11 + v15) * *(unsigned __int8 *)(v11 + v15);
            }
            else
            {
              v8 = 65025;
            }
            if ((v14 & 0x80) == 0)
              break;
            v7 += v13;
          }
          while (v7 && v13 != 0);
          return (double)v8 * 0.0000153787005;
        }
      }
      else if (sub_19C03E144(a2 + 40, v2))
      {
        return 0.0;
      }
      else
      {
        return 1.0;
      }
    }
  }
  return v4;
}

float sub_19C01D6F0(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v2;
  float v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  int v16;

  v2 = **a1;
  if (v2[8] != 11)
    sub_19BFC4E9C();
  v16 = 0;
  v4 = 0.0;
  if (*(_BYTE *)a2
    && (unint64_t)(*(_QWORD *)v2 + 1) >= 2
    && sub_19C03D330((_QWORD *)(a2 + 40), v2, &v16))
  {
    v6 = v16 & 0x3FFFFFFF;
    if ((v16 & 0x3FFFFFFF) != 0)
    {
      if (*(_BYTE *)a2)
      {
        v7 = 0;
        v8 = *(uint64_t **)(a2 + 24);
        v9 = v8[1];
        do
        {
          if (v9 <= v6)
            break;
          v10 = *v8;
          if (!*v8)
            return v4;
          v11 = v6 + 1;
          if (v9 < v11)
LABEL_28:
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          if (v9 <= v11)
            return v4;
          v12 = *(unsigned __int8 *)(v10 + v6);
          v13 = *(_BYTE *)(v10 + v11);
          if ((v13 & 4) != 0)
          {
            v14 = v6 + 2;
            if (v9 < v14)
              goto LABEL_28;
            if (v9 <= v14)
              return v4;
            v7 += *(unsigned __int8 *)(v10 + v14) * *(unsigned __int8 *)(v10 + v14);
          }
          else
          {
            v7 = 65025;
          }
          if ((v13 & 0x80) == 0)
            break;
          v6 += v12;
        }
        while (v6 && v12 != 0);
        return (double)v7 * 0.0000153787005;
      }
    }
    else if (sub_19C03EA8C(a2 + 40, (uint64_t)v2))
    {
      return 0.0;
    }
    else
    {
      return 1.0;
    }
  }
  return v4;
}

float sub_19C01D854(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  float v4;
  BOOL v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  char v14;
  unint64_t v15;
  int v18;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 12)
    sub_19BFC4E9C();
  v18 = 0;
  v4 = 0.0;
  if (*(_BYTE *)a2)
    v5 = *(_DWORD *)(v2 + 12) == -1;
  else
    v5 = 1;
  v6 = !v5 && *(_BYTE *)(v2 + 9) == 0;
  if (v6 && sub_19C03EF4C((uint64_t *)(a2 + 40), v2, &v18))
  {
    v7 = v18 & 0x3FFFFFFF;
    if ((v18 & 0x3FFFFFFF) != 0)
    {
      if (*(_BYTE *)a2)
      {
        v8 = 0;
        v9 = *(uint64_t **)(a2 + 24);
        v10 = v9[1];
        do
        {
          if (v10 <= v7)
            break;
          v11 = *v9;
          if (!*v9)
            return v4;
          v12 = v7 + 1;
          if (v10 < v12)
LABEL_34:
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          if (v10 <= v12)
            return v4;
          v13 = *(unsigned __int8 *)(v11 + v7);
          v14 = *(_BYTE *)(v11 + v12);
          if ((v14 & 4) != 0)
          {
            v15 = v7 + 2;
            if (v10 < v15)
              goto LABEL_34;
            if (v10 <= v15)
              return v4;
            v8 += *(unsigned __int8 *)(v11 + v15) * *(unsigned __int8 *)(v11 + v15);
          }
          else
          {
            v8 = 65025;
          }
          if ((v14 & 0x80) == 0)
            break;
          v7 += v13;
        }
        while (v7 && v13 != 0);
        return (double)v8 * 0.0000153787005;
      }
    }
    else if (sub_19C03EFA4(a2 + 40, v2))
    {
      return 0.0;
    }
    else
    {
      return 1.0;
    }
  }
  return v4;
}

uint64_t sub_19C01D9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;

  v10 = a1 + 40;
  v11 = a3;
  v3 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v3 == -1)
    sub_19BFC4E9C();
  v12 = &v10;
  ((void (*)(uint64_t **))off_1E3D178A0[v3])(&v12);
  v9 = *(_QWORD *)(a1 + 80);
  v8 = (uint64_t *)(a1 + 80);
  result = v9;
  if (v9)
  {
    sub_19C01D9B8(result, a2, a3);
    result = sub_19C01DA50(*v8);
    if ((result & 1) == 0)
      return (uint64_t)sub_19BFC7E88(v8, 0);
  }
  return result;
}

uint64_t sub_19C01DA50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  char v5;
  char *v6;

  v1 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v1 == -1)
    goto LABEL_9;
  v6 = &v5;
  if (!((unsigned int (*)(char **, uint64_t))off_1E3D179D8[v1])(&v6, a1))
    goto LABEL_6;
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 == -1)
LABEL_9:
    sub_19BFC4E9C();
  v6 = &v5;
  if ((((uint64_t (*)(char **, uint64_t))off_1E3D179D8[v3])(&v6, a1 + 40) & 1) != 0)
    return 1;
LABEL_6:
  result = *(_QWORD *)(a1 + 80);
  if (result)
    return sub_19C01DA50();
  return result;
}

void sub_19C01DAE4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  unsigned __int8 *v8;
  _BYTE *v9;
  size_t v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  unint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  unint64_t v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  _BYTE *v43;
  _BYTE *v44;
  char v45;
  char *v46;
  _BYTE *v47;
  _BYTE *v48;
  char v49;
  char *v50;
  _BYTE *v51;
  _BYTE *v52;
  char v53;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  _BYTE *v57;
  unint64_t v58;
  _BYTE *v59;
  unint64_t v60;
  _BYTE *v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  char *v65;
  char *v66;
  unsigned __int8 *v67;
  _BYTE *v68;
  char v69;
  void *__p;
  _BYTE *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v74 = a2 + 40;
  v4 = *(unsigned int *)(a3 + 14352);
  if ((_DWORD)v4 == -1)
    sub_19BFC4E9C();
  __p = &v74;
  ((void (*)(unsigned __int8 **__return_ptr, void **, uint64_t))off_1E3D17908[v4])(&v72, &__p, a3);
  v7 = *(_QWORD *)(a2 + 80);
  if (v7)
  {
    sub_19C01DAE4(&__p, v7, a3);
    v8 = v72;
    v9 = __p;
    if ((unint64_t)(v71 - (_BYTE *)__p - 0x5555555555555555 * ((v73 - v72) >> 4)) >= 0x100)
      v10 = 256;
    else
      v10 = v71 - (_BYTE *)__p - 0x5555555555555555 * ((v73 - v72) >> 4);
    sub_19C01DFF4(a1, v10);
    v11 = v73;
    v12 = v71;
    if (v8 != v73 || v9 != v71)
    {
      while (v8 != v11)
      {
        v13 = *v8;
        if (v9 == v12)
          goto LABEL_16;
        v14 = *v9;
        if (v13 != v14)
        {
          if (v13 < v14)
          {
LABEL_16:
            v19 = (_BYTE *)a1[1];
            v18 = a1[2];
            if ((unint64_t)v19 >= v18)
            {
              v30 = *a1;
              v31 = &v19[-*a1];
              v32 = (unint64_t)(v31 + 1);
              if ((uint64_t)(v31 + 1) < 0)
                sub_19BF8EB40();
              v33 = v18 - v30;
              if (2 * v33 > v32)
                v32 = 2 * v33;
              if (v33 >= 0x3FFFFFFFFFFFFFFFLL)
                v34 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
                v35 = (char *)operator new(v34);
              else
                v35 = 0;
              v46 = &v31[(_QWORD)v35];
              v47 = &v31[(_QWORD)v35];
              *v47 = v13;
              v20 = v47 + 1;
              if (v19 != (_BYTE *)v30)
              {
                v48 = &v19[~v30];
                do
                {
                  v49 = *--v19;
                  (v48--)[(_QWORD)v35] = v49;
                }
                while (v19 != (_BYTE *)v30);
                v19 = (_BYTE *)*a1;
                v46 = v35;
              }
              *a1 = (unint64_t)v46;
              a1[1] = (unint64_t)v20;
              a1[2] = (unint64_t)&v35[v34];
              if (v19)
                operator delete(v19);
            }
            else
            {
              *v19 = v13;
              v20 = v19 + 1;
            }
            a1[1] = (unint64_t)v20;
            v8 += 48;
            goto LABEL_69;
          }
          goto LABEL_18;
        }
        v16 = (_BYTE *)a1[1];
        v15 = a1[2];
        if ((unint64_t)v16 >= v15)
        {
          v36 = *a1;
          v37 = &v16[-*a1];
          v38 = (unint64_t)(v37 + 1);
          if ((uint64_t)(v37 + 1) < 0)
            sub_19BF8EB40();
          v39 = v15 - v36;
          if (2 * v39 > v38)
            v38 = 2 * v39;
          if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
            v40 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
            v41 = (char *)operator new(v40);
          else
            v41 = 0;
          v50 = &v37[(_QWORD)v41];
          v51 = &v37[(_QWORD)v41];
          *v51 = v13;
          v17 = v51 + 1;
          if (v16 != (_BYTE *)v36)
          {
            v52 = &v16[~v36];
            do
            {
              v53 = *--v16;
              (v52--)[(_QWORD)v41] = v53;
            }
            while (v16 != (_BYTE *)v36);
            v16 = (_BYTE *)*a1;
            v50 = v41;
          }
          *a1 = (unint64_t)v50;
          a1[1] = (unint64_t)v17;
          a1[2] = (unint64_t)&v41[v40];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v16 = v13;
          v17 = v16 + 1;
        }
        a1[1] = (unint64_t)v17;
        v8 += 48;
LABEL_68:
        ++v9;
LABEL_69:
        v11 = v73;
        v12 = v71;
        if (v8 == v73 && v9 == v71)
          goto LABEL_74;
      }
      if (v9 == v12)
        __assert_rtn("child_bytes", "TIStemSuffixDictionaryCursor.cpp", 107, "suffix_byte < 0x100 || subcursor_byte < 0x100");
      LOBYTE(v14) = *v9;
LABEL_18:
      v22 = (_BYTE *)a1[1];
      v21 = a1[2];
      if ((unint64_t)v22 >= v21)
      {
        v24 = *a1;
        v25 = &v22[-*a1];
        v26 = (unint64_t)(v25 + 1);
        if ((uint64_t)(v25 + 1) < 0)
          sub_19BF8EB40();
        v27 = v21 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v29 = (char *)operator new(v28);
        else
          v29 = 0;
        v42 = &v25[(_QWORD)v29];
        v43 = &v25[(_QWORD)v29];
        *v43 = v14;
        v23 = v43 + 1;
        if (v22 != (_BYTE *)v24)
        {
          v44 = &v22[~v24];
          do
          {
            v45 = *--v22;
            (v44--)[(_QWORD)v29] = v45;
          }
          while (v22 != (_BYTE *)v24);
          v22 = (_BYTE *)*a1;
          v42 = v29;
        }
        *a1 = (unint64_t)v42;
        a1[1] = (unint64_t)v23;
        a1[2] = (unint64_t)&v29[v28];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v22 = v14;
        v23 = v22 + 1;
      }
      a1[1] = (unint64_t)v23;
      goto LABEL_68;
    }
LABEL_74:
    if (__p)
    {
      v71 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v55 = v72;
    v56 = v73;
    if (v72 != v73)
    {
      v57 = (_BYTE *)a1[1];
      do
      {
        v58 = a1[2];
        if ((unint64_t)v57 >= v58)
        {
          v60 = *a1;
          v61 = &v57[-*a1];
          v62 = (unint64_t)(v61 + 1);
          if ((uint64_t)(v61 + 1) < 0)
            sub_19BF8EB40();
          v63 = v58 - v60;
          if (2 * v63 > v62)
            v62 = 2 * v63;
          if (v63 >= 0x3FFFFFFFFFFFFFFFLL)
            v64 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v64 = v62;
          if (v64)
            v65 = (char *)operator new(v64);
          else
            v65 = 0;
          v66 = &v61[(_QWORD)v65];
          v67 = &v61[(_QWORD)v65];
          *v67 = *v55;
          v59 = v67 + 1;
          if (v57 != (_BYTE *)v60)
          {
            v68 = &v57[~v60];
            do
            {
              v69 = *--v57;
              (v68--)[(_QWORD)v65] = v69;
            }
            while (v57 != (_BYTE *)v60);
            v57 = (_BYTE *)*a1;
            v66 = v65;
          }
          *a1 = (unint64_t)v66;
          a1[1] = (unint64_t)v59;
          a1[2] = (unint64_t)&v65[v64];
          if (v57)
            operator delete(v57);
        }
        else
        {
          *v57 = *v55;
          v59 = v57 + 1;
        }
        a1[1] = (unint64_t)v59;
        v55 += 48;
        v57 = v59;
      }
      while (v55 != v56);
    }
  }
  __p = &v72;
  sub_19C01E090((void ***)&__p);
}

void sub_19C01DF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  __p = &a13;
  sub_19C01E090((void ***)&__p);
  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void sub_19C01DFF4(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

void sub_19C01E090(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 48;
        sub_19BFC72B0((uint64_t)(v4 - 40));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19C01E104(char ***a1@<X0>, uint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  char *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  signed int v29;
  unsigned int *v30;
  int *v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  _BYTE *v43;
  _DWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  _BYTE *v49;
  _BYTE *v50;
  uint64_t *v51;
  void **v52;
  _BYTE *v53;
  _BYTE *v54;
  void **v55;
  uint64_t *v56;

  v4 = **a1;
  if (*((_DWORD *)v4 + 8))
    sub_19BFC4E9C();
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v5 = *v4;
  if (v5 < 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_42;
  }
  v6 = *v4;
  v7 = *((_DWORD *)v4 + 2);
  v8 = HIBYTE(v7) & 3;
  if (v8 <= v6)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (!*((_BYTE *)a2 + 20))
      goto LABEL_42;
    v17 = *(_QWORD *)&v7 & 0xFFFFFFLL;
    if ((v7 & 0xFFFFFF) != 0)
    {
      v18 = *((_DWORD *)a2 + 3228);
      if (v17 < v18)
        __assert_rtn("children", "TIWordTrie.cpp", 743, "cursor.is_root() || first_child_offset >= m_trie_root_offset");
      v19 = **a2;
      v20 = v19 + v17;
    }
    else
    {
      v21 = v4[24];
      if (v6)
        v22 = 0;
      else
        v22 = v7 == 0;
      if (!v22 || v21 != 0)
        goto LABEL_42;
      v20 = 0;
      v18 = *((_DWORD *)a2 + 3228);
      v19 = **a2;
    }
    v24 = sub_19C0223C4((unsigned int *)a2 + 6, v20, v19 + v18);
    v25 = v24[2];
    v26 = *a3;
    if (0xAAAAAAAAAAAAAAABLL * ((a3[2] - *a3) >> 4) < v25)
    {
      v27 = a3[1];
      v56 = a3 + 2;
      v52 = (void **)sub_19C022808(v25);
      v53 = (char *)v52 + v27 - v26;
      v54 = v53;
      v55 = &v52[6 * v28];
      sub_19C02284C(a3, &v52);
      sub_19C02292C((uint64_t)&v52);
      LODWORD(v25) = v24[2];
    }
    if ((_DWORD)v25)
    {
      v29 = 0;
      do
      {
        v30 = &v24[6 * *((unsigned __int8 *)v24 + v29 + 12)];
        if ((v30[68] & 0x10FFFFFF) != 0x10000000 || LOBYTE(v24[6 * *((unsigned __int8 *)v24 + v29 + 12) + 71]))
        {
          v31 = (int *)(v30 + 68);
          v32 = v24[6 * *((unsigned __int8 *)v24 + v29 + 12) + 72];
          v34 = a3[1];
          v33 = a3[2];
          if (v34 >= v33)
          {
            v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *a3) >> 4);
            v37 = v36 + 1;
            if (v36 + 1 > 0x555555555555555)
              sub_19BF8EB40();
            v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *a3) >> 4);
            if (2 * v38 > v37)
              v37 = 2 * v38;
            if (v38 >= 0x2AAAAAAAAAAAAAALL)
              v39 = 0x555555555555555;
            else
              v39 = v37;
            v56 = a3 + 2;
            if (v39)
              v39 = (unint64_t)sub_19C022808(v39);
            else
              v40 = 0;
            v52 = (void **)v39;
            v53 = (_BYTE *)(v39 + 48 * v36);
            v54 = v53;
            v55 = (void **)(v39 + 48 * v40);
            sub_19C022798(v53, v32, v31);
            v54 += 48;
            sub_19C02284C(a3, &v52);
            v35 = a3[1];
            sub_19C02292C((uint64_t)&v52);
          }
          else
          {
            sub_19C022798((_BYTE *)a3[1], v32, (int *)v30 + 68);
            v35 = v34 + 48;
            a3[1] = v34 + 48;
          }
          a3[1] = v35;
          LODWORD(v25) = v24[2];
        }
        ++v29;
      }
      while (v29 < v25);
    }
  }
  else
  {
    v9 = 0;
    v42 = *((_DWORD *)v4 + 2);
    v10 = (_BYTE *)*((_QWORD *)v4 + 2);
    v43 = v10;
    v11 = *((_DWORD *)v4 + 6);
    v44[0] = v11;
    v12 = v5 + 1;
    v41 = v5 + 1;
    if ((v12 & 0x80) == 0 && v8 >= v12)
      v9 = *((_BYTE *)v44 + v12);
    v51 = &v47;
    v13 = sub_19C022808(1uLL);
    v48[0] = v13;
    v48[1] = v13;
    v49 = v13;
    v50 = &v13[48 * v14];
    *v13 = v9;
    LOBYTE(v52) = v12;
    LODWORD(v53) = v7;
    v54 = v10;
    LODWORD(v55) = v11;
    LODWORD(v56) = 0;
    sub_19C0477E0((uint64_t)(v13 + 8), (uint64_t)&v52);
    sub_19BFC72B0((uint64_t)&v52);
    v49 += 48;
    sub_19C02284C(&v45, v48);
    v15 = v46;
    sub_19C02292C((uint64_t)v48);
    v16 = v47;
    *a3 = v45;
    a3[1] = v15;
    a3[2] = v16;
    v46 = 0;
    v47 = 0;
    v45 = 0;
  }
LABEL_42:
  v52 = (void **)&v45;
  sub_19C01E090(&v52);
}

void sub_19C01E498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, void **);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_19C02292C((uint64_t)va3);
  sub_19C01E090((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_19C01E090((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C01E514@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 1)
    sub_19BFC4E9C();
  if (*(_QWORD *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6[0] = &off_1E3D18720;
  v6[1] = a3;
  v7 = (uint64_t **)v6;
  sub_19C0088D4(a2 + 48, (_QWORD *)v4, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = (uint64_t **)v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (uint64_t **)((uint64_t (*)(void))(*result)[v5])();
}

void sub_19C01E5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_19C01E090(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C01E634@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 2)
    sub_19BFC4E9C();
  if (*(_QWORD *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6[0] = &off_1E3D187A0;
  v6[1] = a3;
  v7 = (uint64_t **)v6;
  sub_19C00FF18(a2 + 48, (uint64_t *)v4, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = (uint64_t **)v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (uint64_t **)((uint64_t (*)(void))(*result)[v5])();
}

void sub_19C01E70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_19C01E090(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C01E754@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 3)
    sub_19BFC4E9C();
  if (*(_QWORD *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6[0] = &off_1E3D18820;
  v6[1] = a3;
  v7 = (uint64_t **)v6;
  sub_19BFFD8B4((_QWORD *)(a2 + 48), (uint64_t *)v4, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = (uint64_t **)v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (uint64_t **)((uint64_t (*)(void))(*result)[v5])();
}

void sub_19C01E82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_19C01E090(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C01E874@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 4)
    sub_19BFC4E9C();
  if (*(_QWORD *)v4 == 0xFFFFFFFFLL)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6[0] = &off_1E3D188A0;
  v6[1] = a3;
  v7 = (uint64_t **)v6;
  sub_19BFF9F74((uint64_t *)(a2 + 48), v4, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = (uint64_t **)v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (uint64_t **)((uint64_t (*)(void))(*result)[v5])();
}

void sub_19C01E950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_19C01E090(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C01E998@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 5)
    sub_19BFC4E9C();
  if (*(_QWORD *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6[0] = &off_1E3D18920;
  v6[1] = a3;
  v7 = (uint64_t **)v6;
  sub_19C00C1D8(a2 + 48, (uint64_t *)v4, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = (uint64_t **)v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (uint64_t **)((uint64_t (*)(void))(*result)[v5])();
}

void sub_19C01EA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_19C01E090(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C01EAB8@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 6)
    sub_19BFC4E9C();
  if (*(_DWORD *)(v4 + 12) == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6[0] = &off_1E3D189A0;
  v6[1] = a3;
  v7 = (uint64_t **)v6;
  sub_19BFB8C48(a2 + 48, v4);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = (uint64_t **)v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (uint64_t **)((uint64_t (*)(void))(*result)[v5])();
}

void sub_19C01EB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_19C01E090(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C01EBD8@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 7)
    sub_19BFC4E9C();
  if (*(_QWORD *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6[0] = &off_1E3D18A20;
  v6[1] = a3;
  v7 = (uint64_t **)v6;
  sub_19C03CF50(a2 + 40, (uint64_t *)v4, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = (uint64_t **)v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (uint64_t **)((uint64_t (*)(void))(*result)[v5])();
}

void sub_19C01ECB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_19C01E090(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C01ECF8@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 8)
    sub_19BFC4E9C();
  if (*(_QWORD *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6[0] = &off_1E3D18AA0;
  v6[1] = a3;
  v7 = (uint64_t **)v6;
  sub_19C03D5CC(a2 + 40, (_QWORD *)v4, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = (uint64_t **)v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (uint64_t **)((uint64_t (*)(void))(*result)[v5])();
}

void sub_19C01EDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_19C01E090(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C01EE18@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 9)
    sub_19BFC4E9C();
  if (*(_QWORD *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6[0] = &off_1E3D18B20;
  v6[1] = a3;
  v7 = (uint64_t **)v6;
  sub_19C03DC44((_QWORD *)(a2 + 40), (uint64_t *)v4, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = (uint64_t **)v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (uint64_t **)((uint64_t (*)(void))(*result)[v5])();
}

void sub_19C01EEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_19C01E090(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C01EF38@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 10)
    sub_19BFC4E9C();
  if (*(_QWORD *)v4 == 0xFFFFFFFFLL)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6[0] = &off_1E3D18BA0;
  v6[1] = a3;
  v7 = (uint64_t **)v6;
  sub_19C03E4F0((uint64_t *)(a2 + 40), v4, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = (uint64_t **)v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (uint64_t **)((uint64_t (*)(void))(*result)[v5])();
}

void sub_19C01F014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_19C01E090(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C01F05C@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 11)
    sub_19BFC4E9C();
  if (*(_QWORD *)v4 == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6[0] = &off_1E3D18C20;
  v6[1] = a3;
  v7 = (uint64_t **)v6;
  sub_19C03EC34(a2 + 40, (uint64_t *)v4, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = (uint64_t **)v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (uint64_t **)((uint64_t (*)(void))(*result)[v5])();
}

void sub_19C01F134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_19C01E090(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C01F17C@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t **v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = **result;
  if (*(_DWORD *)(v4 + 32) != 12)
    sub_19BFC4E9C();
  if (*(_DWORD *)(v4 + 12) == -1)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6[0] = &off_1E3D18D48;
  v6[1] = a3;
  v7 = (uint64_t **)v6;
  sub_19C03F258(a2 + 40, v4);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = (uint64_t **)v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (uint64_t **)((uint64_t (*)(void))(*result)[v5])();
}

void sub_19C01F254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_19C01E090(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19C01F29C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;

  v6 = a1 + 40;
  v2 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v2 == -1)
    sub_19BFC4E9C();
  v7 = &v6;
  if ((((uint64_t (*)(uint64_t **))off_1E3D17970[v2])(&v7) & 1) != 0)
    return 1;
  result = *(_QWORD *)(a1 + 80);
  if (result)
    return sub_19C01F29C(result, a2);
  return result;
}

BOOL sub_19C01F314(char ***a1)
{
  char *v1;
  unsigned int v2;
  BOOL v4;

  v1 = **a1;
  if (*((_DWORD *)v1 + 8))
    sub_19BFC4E9C();
  if (*v1 < 0)
    return 0;
  v2 = *((_DWORD *)v1 + 2);
  if ((HIBYTE(v2) & 3) > *v1)
    return 1;
  v4 = !*v1 && v2 == 0;
  return v4 && !v1[24] || (v2 & 0xFFFFFF) != 0;
}

uint64_t sub_19C01F380(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 1)
    sub_19BFC4E9C();
  if (*(_QWORD *)v2 == -1)
    return 0;
  if (*(_QWORD *)v2)
    return sub_19C03AA9C(a2 + 40, v2);
  return 1;
}

uint64_t sub_19C01F3D4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 2)
    sub_19BFC4E9C();
  if (*(_QWORD *)v2 == -1)
    return 0;
  if (*(_QWORD *)v2)
    return sub_19C03B068(a2 + 40, v2);
  return 1;
}

uint64_t sub_19C01F428(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 3)
    sub_19BFC4E9C();
  if (*(_QWORD *)v2 == -1)
    return 0;
  if (*(_QWORD *)v2)
    return sub_19C03B64C(a2 + 40, v2);
  return 1;
}

uint64_t sub_19C01F47C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 4)
    sub_19BFC4E9C();
  if (!*(_QWORD *)v2)
    return 1;
  if (*(_QWORD *)v2 == 0xFFFFFFFFLL)
    return 0;
  return sub_19C03BBBC(a2 + 40, v2);
}

uint64_t sub_19C01F4D4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 5)
    sub_19BFC4E9C();
  if (*(_QWORD *)v2 == -1)
    return 0;
  if (*(_QWORD *)v2)
    return sub_19C03C2D8(a2 + 40, v2);
  return 1;
}

uint64_t sub_19C01F528(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 6)
    sub_19BFC4E9C();
  if (*(_DWORD *)(v2 + 12) == -1)
    return 0;
  if (*(_BYTE *)(v2 + 9))
    return 1;
  return sub_19C03C73C(a2 + 40, v2);
}

uint64_t sub_19C01F580(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 7)
    sub_19BFC4E9C();
  if (*(_QWORD *)v2 == -1)
    return 0;
  if (*(_QWORD *)v2)
    return sub_19C03CD24(a2 + 40, v2);
  return 1;
}

uint64_t sub_19C01F5D4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 8)
    sub_19BFC4E9C();
  if (*(_QWORD *)v2 == -1)
    return 0;
  if (*(_QWORD *)v2)
    return sub_19C03D3AC(a2 + 40, v2);
  return 1;
}

uint64_t sub_19C01F628(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 9)
    sub_19BFC4E9C();
  if (*(_QWORD *)v2 == -1)
    return 0;
  if (*(_QWORD *)v2)
    return sub_19C03DA18(a2 + 40, v2);
  return 1;
}

uint64_t sub_19C01F67C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 10)
    sub_19BFC4E9C();
  if (!*(_QWORD *)v2)
    return 1;
  if (*(_QWORD *)v2 == 0xFFFFFFFFLL)
    return 0;
  return sub_19C03E144(a2 + 40, v2);
}

uint64_t sub_19C01F6D4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 11)
    sub_19BFC4E9C();
  if (*(_QWORD *)v2 == -1)
    return 0;
  if (*(_QWORD *)v2)
    return sub_19C03EA8C(a2 + 40, v2);
  return 1;
}

uint64_t sub_19C01F728(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 12)
    sub_19BFC4E9C();
  if (*(_DWORD *)(v2 + 12) == -1)
    return 0;
  if (*(_BYTE *)(v2 + 9))
    return 1;
  return sub_19C03EFA4(a2 + 40, v2);
}

void sub_19C01F780(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unsigned int v18;
  unint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  size_t *p_len_2;
  void *v25;
  uint64_t v26;
  unsigned __int16 *v27;
  void ***v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  void **v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  void ***v48;
  void ***v49;
  unsigned __int16 __len;
  size_t __len_2;
  size_t *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void ***v56;
  int v57;
  void ****v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int16 v63;
  void ***v64;
  void *v65;
  uint64_t v66;

  v4 = (uint64_t)a1;
  v66 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v44 = (void **)(a2 + 40);
  v54 = a2 + 40;
  v5 = *(unsigned int *)(a3 + 14352);
  if ((_DWORD)v5 == -1)
    sub_19BFC4E9C();
  v8 = a2;
  v58 = (void ****)&v54;
  if (((unsigned int (*)(void *****, uint64_t))off_1E3D17768[v5])(&v58, a3))
  {
    v9 = *(unsigned __int8 *)(v8 + 92);
    v10 = *a4;
    if (v10 >= v9)
    {
      if (*(_BYTE *)(v8 + 93))
        v11 = a3 + 14360;
      else
        v11 = a3;
      v12 = *(_QWORD *)(a3 + 30120);
      if (!v12)
        __assert_rtn("derive_words", "TIStemSuffixDictionaryCursor.cpp", 141, "converter");
      v43 = a4 + 1;
      if (v10 <= 0xE)
        v13 = a4 + 1;
      else
        v13 = (void *)*((_QWORD *)a4 + 1);
      v45 = (uint64_t *)v4;
      sub_19BF8BC44((uint64_t)&v64, v9, v13, v9);
      v58 = (void ****)v8;
      v59 = &v64;
      v14 = *(unsigned int *)(v11 + 14352);
      if ((_DWORD)v14 == -1)
        sub_19BFC4E9C();
      v48 = (void ***)&v58;
      ((void (*)(uint64_t *__return_ptr, void ****, uint64_t))off_1E3D17838[v14])(&v54, &v48, v11);
      if ((unsigned __int16)v64 >= 0xFu && v65)
        MEMORY[0x1A1AD0CB8](v65, 0x1000C8077774924);
      v16 = v54;
      v15 = v55;
      if (v54 != v55)
      {
        v42 = v55;
        while (1)
        {
          v53 = 0;
          if (sub_19BFE99DC((unsigned int *)v12, *(_DWORD *)(v16 + 60), &v53, 0))
            break;
LABEL_52:
          v16 += 88;
          if (v16 == v15)
            goto LABEL_53;
        }
        sub_19BFE9B1C((uint64_t)&v64, v12, v53);
        v17 = sub_19BFE9B58((uint64_t)&__len, v12, v53);
        v18 = __len;
        if ((_WORD)v64)
        {
          if (!__len)
          {
LABEL_49:
            if (v65 && BYTE6(v64) == 1)
              free(v65);
            goto LABEL_52;
          }
          v19 = *a4;
          v20 = a4;
          if (v19 <= 0xE)
            v21 = v43;
          else
            v21 = (unsigned __int16 *)*((_QWORD *)a4 + 1);
          v22 = v8;
          v23 = *(unsigned __int8 *)(v8 + 92);
          if (__len >= 0xFu)
            p_len_2 = v52;
          else
            p_len_2 = &__len_2;
          v25 = (void *)sub_19BF8BC44((uint64_t)&v46, v19 - v23 + __len, p_len_2, __len);
          if (v19 != v23)
            memmove(v25, (char *)v21 + v23, v19 - v23);
          v58 = (void ****)v44;
          v59 = &v46;
          v26 = *(unsigned int *)(a3 + 14352);
          if ((_DWORD)v26 == -1)
            sub_19BFC4E9C();
          v56 = (void ***)&v58;
          ((void (*)(void ****__return_ptr, void ****, uint64_t))off_1E3D17838[v26])(&v48, &v56, a3);
          if ((unsigned __int16)v46 >= 0xFu && v47)
            MEMORY[0x1A1AD0CB8](v47, 0x1000C8077774924);
          v28 = v48;
          v27 = (unsigned __int16 *)v49;
          if (v48 != v49)
          {
            do
            {
              if (*(unsigned __int16 *)v28 >= (unsigned __int16)v64)
              {
                v29 = *(_DWORD *)(v16 + 60);
                v30 = *((_DWORD *)v28 + 15);
                LODWORD(v58) = 0;
                v46 = 0;
                if ((sub_19BFE99DC((unsigned int *)v12, v29, &v58, &v46) & 1) != 0)
                {
                  LODWORD(v56) = 0;
                  v57 = 0;
                  if (sub_19BFE9A7C((unsigned int *)v12, v30, &v56, &v57))
                  {
                    if ((_DWORD)v58 == (_DWORD)v56)
                    {
                      v31 = *(_DWORD *)(*(_QWORD *)(v12 + 56) + 4 * ((_DWORD)v58 - *(_DWORD *)(v12 + 4)))
                          + v46
                          * (*(_DWORD *)(*(_QWORD *)(v12 + 32)
                                       + 4 * ((_DWORD)v58 - *(_DWORD *)(v12 + 4) + 1))
                           - *(_DWORD *)(*(_QWORD *)(v12 + 32) + 4
                                                               * ((_DWORD)v58 - *(_DWORD *)(v12 + 4))))
                          + v57;
                      if (v31)
                      {
                        sub_19BF86B60((uint64_t)&v58, (unsigned __int16 *)v16);
                        v32 = *(_OWORD *)(v16 + 32);
                        v33 = *(_OWORD *)(v16 + 48);
                        v34 = *(_OWORD *)(v16 + 64);
                        v63 = *(_WORD *)(v16 + 80);
                        v61 = v33;
                        v62 = v34;
                        v60 = v32;
                        sub_19BFD53CC((uint64_t)&v58, (float *)v28, (unsigned __int16)v64, v31);
                        v35 = v45[1];
                        if (v35 >= v45[2])
                        {
                          v39 = sub_19BFCE284(v45, (uint64_t)&v58);
                          v40 = v45;
                        }
                        else
                        {
                          sub_19BF86B60(v45[1], (unsigned __int16 *)&v58);
                          v36 = v60;
                          v37 = v61;
                          v38 = v62;
                          *(_WORD *)(v35 + 80) = v63;
                          *(_OWORD *)(v35 + 48) = v37;
                          *(_OWORD *)(v35 + 64) = v38;
                          *(_OWORD *)(v35 + 32) = v36;
                          v39 = v35 + 88;
                          v40 = v45;
                          v45[1] = v35 + 88;
                        }
                        v40[1] = v39;
                        if (v59)
                        {
                          if (BYTE6(v58) == 1)
                            free(v59);
                        }
                      }
                    }
                  }
                }
              }
              v28 += 11;
            }
            while (v28 != (void ***)v27);
          }
          v58 = &v48;
          sub_19BFC70A0((void ***)&v58);
          a4 = v20;
          v8 = v22;
          v15 = v42;
        }
        if (v18 >= 0xF && v52)
          MEMORY[0x1A1AD0CB8](v52, 0x1000C8077774924, v17);
        goto LABEL_49;
      }
LABEL_53:
      v58 = (void ****)&v54;
      sub_19BFC70A0((void ***)&v58);
      v4 = (uint64_t)v45;
    }
  }
  v41 = *(_QWORD *)(v8 + 80);
  if (v41)
  {
    sub_19C01F780(&v58, v41, a3, a4);
    sub_19BFCE178(v4, (uint64_t)v58, (uint64_t)v59);
    v64 = (void ***)&v58;
    sub_19BFC70A0((void ***)&v64);
  }
}

void sub_19C01FC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  uint64_t v31;

  *(_QWORD *)(v31 - 128) = a16;
  sub_19BFC70A0((void ***)(v31 - 128));
  _Unwind_Resume(a1);
}

BOOL sub_19C01FDC4(char ***a1)
{
  char *v1;
  unsigned int v2;
  _BOOL8 result;

  v1 = **a1;
  if (*((_DWORD *)v1 + 8))
    sub_19BFC4E9C();
  if (*v1 < 0)
    return 0;
  v2 = *((_DWORD *)v1 + 2);
  if (!*v1 && v2 == 0)
  {
    v2 = 0;
    if (!v1[24])
      return 0;
  }
  if ((HIBYTE(v2) & 3) > *v1)
    return 0;
  if ((v2 & 0x20000000) == 0)
  {
    if ((v2 & 0x10000000) != 0)
      return 1;
LABEL_15:
    if ((v2 & 0xFFFFFF) == 0)
      return v1[20] != 0;
    return 0;
  }
  result = 1;
  if ((v2 & 0x10000000) == 0 && (*((_QWORD *)v1 + 2) & 0x7FFFFFFFLL) == 0)
    goto LABEL_15;
  return result;
}

uint64_t sub_19C01FE5C(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v2;
  int v5;

  v2 = **a1;
  if (v2[8] != 1)
    sub_19BFC4E9C();
  if ((unint64_t)(*(_QWORD *)v2 + 1) < 2)
    return 0;
  v5 = 0;
  if (!sub_19C008564((_QWORD *)(a2 + 48), v2, &v5) || (~v5 & 0x7FFFFF) == 0)
    return 0;
  if ((v5 & 0x5FFFFF) != 0)
    return 1;
  return sub_19C03AA9C(a2 + 40, (uint64_t)v2) ^ 1;
}

uint64_t sub_19C01FEFC(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  int v5;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 2)
    sub_19BFC4E9C();
  if ((unint64_t)(*(_QWORD *)v2 + 1) < 2)
    return 0;
  v5 = 0;
  if (!sub_19C00FBB0((uint64_t *)(a2 + 48), (uint64_t *)v2, &v5) || (~v5 & 0x7FFFFF) == 0)
    return 0;
  if ((v5 & 0x5FFFFF) != 0)
    return 1;
  return sub_19C03B068(a2 + 40, v2) ^ 1;
}

uint64_t sub_19C01FF9C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  int v5;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 3)
    sub_19BFC4E9C();
  if ((unint64_t)(*(_QWORD *)v2 + 1) < 2)
    return 0;
  v5 = 0;
  if (!sub_19BFFD5C0(a2 + 48, (unint64_t *)v2, &v5) || (~v5 & 0x7FFFFF) == 0)
    return 0;
  if ((v5 & 0x5FFFFF) != 0)
    return 1;
  return sub_19C03B64C(a2 + 40, v2) ^ 1;
}

uint64_t sub_19C02003C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  int v6;
  int v7;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 4)
    sub_19BFC4E9C();
  if (*(_QWORD *)v2)
    v3 = *(_QWORD *)v2 == 0xFFFFFFFFLL;
  else
    v3 = 1;
  if (v3)
    return 0;
  v7 = 0;
  v6 = sub_19BFF9DF8((uint64_t *)(a2 + 48), v2, &v7);
  if (!v6 || (~v7 & 0xFFFFFF) == 0)
    return 0;
  if ((v7 & 0x5FFFFF) != 0)
    return 1;
  return sub_19C03BBBC(a2 + 40, v2) ^ 1;
}

uint64_t sub_19C0200E0(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v2;
  int v5;

  v2 = **a1;
  if (v2[8] != 5)
    sub_19BFC4E9C();
  if ((unint64_t)(*(_QWORD *)v2 + 1) < 2)
    return 0;
  v5 = 0;
  if (!sub_19C008564((_QWORD *)(a2 + 48), v2, &v5) || (~v5 & 0x7FFFFF) == 0)
    return 0;
  if ((v5 & 0x5FFFFF) != 0)
    return 1;
  return sub_19C03C2D8(a2 + 40, (uint64_t)v2) ^ 1;
}

uint64_t sub_19C020180(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  int v5;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 6)
    sub_19BFC4E9C();
  if (*(_DWORD *)(v2 + 12) == -1)
    return 0;
  if (*(_BYTE *)(v2 + 9))
    return 0;
  v5 = 0;
  if (!sub_19BFB8AAC((uint64_t *)(a2 + 48), v2, &v5) || (~v5 & 0x7FFFFF) == 0)
    return 0;
  if ((v5 & 0x5FFFFF) != 0)
    return 1;
  return sub_19C03C73C(a2 + 40, v2) ^ 1;
}

uint64_t sub_19C020224(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 7)
    sub_19BFC4E9C();
  result = 0;
  v5 = 0;
  if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2)
  {
    v4 = a2 + 40;
    result = sub_19C03CCB0((uint64_t *)(a2 + 40), (uint64_t *)v2, &v5);
    if ((_DWORD)result)
    {
      if ((v5 & 0x3FFFFFFF) != 0)
        return 1;
      else
        return sub_19C03CD24(v4, v2) ^ 1;
    }
  }
  return result;
}

uint64_t sub_19C0202B4(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t result;
  uint64_t v4;
  int v5;

  v2 = **a1;
  if (v2[8] != 8)
    sub_19BFC4E9C();
  result = 0;
  v5 = 0;
  if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2)
  {
    v4 = a2 + 40;
    result = sub_19C03D330((_QWORD *)(a2 + 40), v2, &v5);
    if ((_DWORD)result)
    {
      if ((v5 & 0x3FFFFFFF) != 0)
        return 1;
      else
        return sub_19C03D3AC(v4, (uint64_t)v2) ^ 1;
    }
  }
  return result;
}

uint64_t sub_19C020344(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 9)
    sub_19BFC4E9C();
  result = 0;
  v5 = 0;
  if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2)
  {
    v4 = a2 + 40;
    result = sub_19C03D9A4(a2 + 40, (unint64_t *)v2, &v5);
    if ((_DWORD)result)
    {
      if ((v5 & 0x3FFFFFFF) != 0)
        return 1;
      else
        return sub_19C03DA18(v4, v2) ^ 1;
    }
  }
  return result;
}

uint64_t sub_19C0203D4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  BOOL v4;
  uint64_t v5;
  int v6;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 10)
    sub_19BFC4E9C();
  result = 0;
  v6 = 0;
  if (*(_QWORD *)v2)
    v4 = *(_QWORD *)v2 == 0xFFFFFFFFLL;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = a2 + 40;
    result = sub_19C03E0C8((uint64_t *)(a2 + 40), v2, &v6);
    if ((_DWORD)result)
    {
      if ((v6 & 0x3FFFFFFF) != 0)
        return 1;
      else
        return sub_19C03E144(v5, v2) ^ 1;
    }
  }
  return result;
}

uint64_t sub_19C020468(unsigned int ***a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t result;
  uint64_t v4;
  int v5;

  v2 = **a1;
  if (v2[8] != 11)
    sub_19BFC4E9C();
  result = 0;
  v5 = 0;
  if ((unint64_t)(*(_QWORD *)v2 + 1) >= 2)
  {
    v4 = a2 + 40;
    result = sub_19C03D330((_QWORD *)(a2 + 40), v2, &v5);
    if ((_DWORD)result)
    {
      if ((v5 & 0x3FFFFFFF) != 0)
        return 1;
      else
        return sub_19C03EA8C(v4, (uint64_t)v2) ^ 1;
    }
  }
  return result;
}

uint64_t sub_19C0204F8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;

  v2 = **a1;
  if (*(_DWORD *)(v2 + 32) != 12)
    sub_19BFC4E9C();
  v5 = 0;
  if (*(_DWORD *)(v2 + 12) == -1 || *(_BYTE *)(v2 + 9))
    return 0;
  v4 = a2 + 40;
  result = sub_19C03EF4C((uint64_t *)(a2 + 40), v2, &v5);
  if ((_DWORD)result)
  {
    if ((v5 & 0x3FFFFFFF) != 0)
      return 1;
    else
      return sub_19C03EFA4(v4, v2) ^ 1;
  }
  return result;
}

uint64_t sub_19C02058C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;

  v6 = a1 + 40;
  v2 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v2 == -1)
    sub_19BFC4E9C();
  v7 = &v6;
  if ((((uint64_t (*)(uint64_t **))off_1E3D17768[v2])(&v7) & 1) != 0)
    return 1;
  result = *(_QWORD *)(a1 + 80);
  if (result)
    return sub_19C02058C(result, a2);
  return result;
}

uint64_t *sub_19C020604(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v4 = (uint64_t *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 80);
  v5 = *a2;
  *a2 = 0;
  if (!v3)
    return sub_19BFC7E88(v4, v5);
  v7 = v5;
  sub_19C020604(v3, &v7);
  return sub_19BFC7E88(&v7, 0);
}

void sub_19C020668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC7E88((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

const void *LXTransliterationEntryCopyNativeString(uint64_t a1)
{
  const void *v1;
  const void *v3;

  sub_19BFECC10((CFStringRef *)&v3, (const UInt8 *)(a1 + 24));
  v1 = v3;
  v3 = 0;
  sub_19BF8DAB8(&v3);
  return v1;
}

const void *LXTransliterationEntryCopyPreferredTransliteratedString(uint64_t a1)
{
  const void *v1;
  const void *v3;

  sub_19BFECC10((CFStringRef *)&v3, (const UInt8 *)(a1 + 48));
  v1 = v3;
  v3 = 0;
  sub_19BF8DAB8(&v3);
  return v1;
}

_QWORD *sub_19C020700(_QWORD *a1)
{
  *a1 = &off_1E3D14718;
  sub_19BFACCEC((uint64_t)(a1 + 1));
  return a1;
}

void sub_19C020730(_QWORD *a1)
{
  *a1 = &off_1E3D14718;
  sub_19BFACCEC((uint64_t)(a1 + 1));
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C020770(uint64_t a1)
{
  return sub_19BFF0714(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C020778(uint64_t a1)
{
  return sub_19BFF1364(*(std::mutex **)(a1 + 8));
}

uint64_t sub_19C020780(uint64_t a1, unsigned int a2)
{
  return sub_19BFF1494(*(_QWORD *)(a1 + 8), a2);
}

CFStringRef sub_19C020788(uint64_t a1)
{
  return sub_19BFF17B4(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_19C020790(uint64_t a1)
{
  return sub_19BFF1828(*(std::mutex **)(a1 + 8));
}

void sub_19C020798(uint64_t a1, uint64_t a2)
{
  sub_19BFF187C(*(std::mutex **)(a1 + 8), a2);
}

uint64_t sub_19C0207A0(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  return sub_19BFEA0A8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1512), a2, a3);
}

void sub_19C0207AC(uint64_t a1@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  sub_19BF8B7D8(a3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1512), a2);
}

uint64_t sub_19C0207C0(uint64_t a1, char *a2, unsigned __int16 a3)
{
  return sub_19BFF1984(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_19C0207C8(uint64_t a1, const __CFString *a2, int a3, double a4)
{
  return sub_19BFF1CA8(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_19C0207D0(uint64_t a1, const __CFString *a2, int a3)
{
  uint64_t v5;
  double Current;

  v5 = *(_QWORD *)(a1 + 8);
  Current = CFAbsoluteTimeGetCurrent();
  return sub_19BFF1CA8(v5, a2, a3, Current);
}

uint64_t sub_19C02080C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_19BFF2054(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

void sub_19C020814(uint64_t a1, const __CFString *a2, int a3)
{
  sub_19BFF2274(*(_QWORD *)(a1 + 8), a2, a3);
}

void sub_19C02081C(uint64_t a1, const __CFString *a2, int a3)
{
  sub_19BFF2484(*(_QWORD *)(a1 + 8), a2, a3);
}

void sub_19C020824(uint64_t a1, const __CFString *a2, int a3)
{
  sub_19BFF2694(*(_QWORD *)(a1 + 8), a2, a3);
}

void sub_19C02082C(uint64_t a1, const __CFString *a2, int a3)
{
  sub_19BFF28A4(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL sub_19C020834(uint64_t a1, uint64_t a2)
{
  return sub_19BFF2AB4(*(_QWORD *)(a1 + 8), a2);
}

void sub_19C02083C(uint64_t a1)
{
  sub_19BFF2C48(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_19C020844(_QWORD *a1, const __CFString *a2, const __CFString *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, const __CFDictionary *a7)
{
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  const __CFString *v20;
  unint64_t *v21;
  unint64_t v22;
  char *Value;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_weak_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;

  *a1 = &off_1E3D14718;
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = operator new();
  v17 = v16;
  if (a5)
  {
    v18 = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)v16 = &off_1E3D14518;
  if (a6)
  {
    v20 = (const __CFString *)MEMORY[0x1A1AD064C](a6);
    sub_19BF8C4B0(v17 + 8, v20);
  }
  else
  {
    *(_DWORD *)(v16 + 8) = 0x100000;
    *(_WORD *)(v16 + 12) = 0;
    *(_BYTE *)(v16 + 14) = 1;
    *(_QWORD *)(v16 + 16) = 0;
    sub_19BF8CA04((_QWORD *)(v16 + 8), (uint64_t)"root", 0, 4u);
  }
  sub_19BF8C4B0(v17 + 40, a3);
  sub_19BF8C4B0(v17 + 72, a2);
  *(_QWORD *)(v17 + 112) = 0;
  *(_QWORD *)(v17 + 104) = a7;
  *(_QWORD *)(v17 + 120) = 0;
  *(_QWORD *)(v17 + 128) = 0;
  sub_19BF875B8(v17 + 136);
  *(_OWORD *)(v17 + 1512) = 0u;
  *(_QWORD *)(v17 + 1528) = a4;
  *(_QWORD *)(v17 + 1536) = a5;
  if (a5)
  {
    v21 = (unint64_t *)&a5->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *(_OWORD *)(v17 + 1560) = 0uLL;
  *(_OWORD *)(v17 + 1576) = 0uLL;
  *(_OWORD *)(v17 + 1544) = 0uLL;
  *(_DWORD *)(v17 + 1592) = 1065353216;
  *(_QWORD *)(v17 + 1600) = 850045863;
  *(_QWORD *)(v17 + 1656) = 0;
  *(_OWORD *)(v17 + 1608) = 0uLL;
  *(_OWORD *)(v17 + 1624) = 0uLL;
  *(_OWORD *)(v17 + 1640) = 0uLL;
  Value = (char *)CFDictionaryGetValue(a7, CFSTR("borrowTokenSpaceFromLexicon"));
  if (Value)
  {
    v24 = __dynamic_cast(Value + 16, (const struct __class_type_info *)&unk_1E3D12CA8, (const struct __class_type_info *)&unk_1E3D13200, 0);
    if (v24)
    {
      v25 = v24[1];
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v25 + 1528) + 48))(*(_QWORD *)(v25 + 1528)) & 1) == 0)
        __assert_rtn("MutableLexiconImpl", "LXMutableLexiconImpl.cpp", 68, "borrowedGenerator->isThreadSafe()");
      v26 = *(_QWORD *)(v25 + 1528);
      v27 = *(_QWORD *)(v25 + 1536);
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      *(_QWORD *)(v17 + 1528) = v26;
      v30 = *(std::__shared_weak_count **)(v17 + 1536);
      *(_QWORD *)(v17 + 1536) = v27;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
  }
  a1[1] = v17;
  v33 = (std::__shared_weak_count *)operator new();
  v33->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D14F18;
  v33->__shared_owners_ = 0;
  v33->__shared_weak_owners_ = 0;
  v33[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
  a1[2] = v33;
  if (a5)
  {
    v34 = (unint64_t *)&a5->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
    v36 = a1[1];
    v33 = (std::__shared_weak_count *)a1[2];
    if (!v33)
    {
      v37 = 0;
      v38 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    v36 = a1[1];
  }
  p_shared_weak_owners = (unint64_t *)&v33->__shared_weak_owners_;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = std::__shared_weak_count::lock(v33);
  v38 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_weak_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    std::__shared_weak_count::__release_weak(v33);
    v44 = (unint64_t *)&v38->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (v45)
    {
      v37 = v36;
      goto LABEL_44;
    }
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    v33 = v38;
    v37 = v36;
  }
  else
  {
    v37 = 0;
  }
  std::__shared_weak_count::__release_weak(v33);
LABEL_44:
  *(_QWORD *)(v36 + 1544) = v37;
  v46 = *(std::__shared_weak_count **)(v36 + 1552);
  *(_QWORD *)(v36 + 1552) = v38;
  if (v46)
    std::__shared_weak_count::__release_weak(v46);
  if (a5)
  {
    v47 = (unint64_t *)&a5->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  return a1;
}

void sub_19C020C08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v6 = (unint64_t *)&v1->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_19C020DC8(_QWORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  int v3;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v3)
  {
    if (*a3)
    {
      v7 = sub_19BFF6EB8(a2, a3, 0);
      v8 = sub_19BFF6C0C(a2, a3, v7);
      while (v8 != 0xFFFF || v7 != 0xFFFF)
      {
        sub_19BF8CE58(&v9, a2, (unsigned __int16)v7, (unsigned __int16)(v8 - v7));
        sub_19BFE95DC(a1, (unsigned __int16 *)&v9);
        v7 = sub_19BFF6EB8(a2, a3, (unsigned __int16)v8);
        v8 = sub_19BFF6C0C(a2, a3, v7);
        if (v10)
        {
          if (BYTE6(v9) == 1)
            free(v10);
        }
      }
    }
    else
    {
      sub_19BFE95DC(a1, a2);
    }
  }
}

void sub_19C020EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  sub_19BFBF780((void ***)&a10);
  _Unwind_Resume(a1);
}

unsigned __int16 *sub_19C020F3C(unsigned __int16 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t i;

  *(_DWORD *)result = 0x100000;
  result[2] = 0;
  *((_BYTE *)result + 6) = 0;
  *((_QWORD *)result + 1) = 0;
  *((_BYTE *)result + 16) = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    for (i = a3 - 32; v4 != i; v4 += 32)
    {
      sub_19BFF7414(v5, v4);
      sub_19BFF7414(v5, a4);
    }
    return sub_19BFF7414(v5, i);
  }
  return result;
}

void sub_19C020FC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C020FEC(uint64_t a1, UChar32 a2, const char *a3)
{
  int32_t v5;
  unsigned int v6;
  int32_t v7;
  int32_t pDestLength;
  UChar dest[3];
  UErrorCode pErrorCode;
  UChar32 src;
  char __s1[13];
  UChar v13[5];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  src = a2;
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (a2)
  {
    if (!a3)
      goto LABEL_5;
    pErrorCode = U_ZERO_ERROR;
    pDestLength = 0;
    u_strFromUTF32(dest, 3, &pDestLength, &src, 1, &pErrorCode);
    v5 = u_strToUpper(v13, 5, dest, pDestLength, a3, &pErrorCode);
    v7 = 0;
    u_strToUTF8(__s1, 13, &v7, v13, v5, &pErrorCode);
    if (pErrorCode)
      __assert_rtn("character_to_titlecase", "TIStringFunctions.cpp", 121, "errorcode == U_ZERO_ERROR");
    sub_19BF86F84((unsigned __int16 *)a1, __s1, 0xFFFFuLL);
    if (!*(_WORD *)a1)
    {
LABEL_5:
      v6 = MEMORY[0x1A1AD12B8](src);
      sub_19BFF6A20((unsigned __int16 *)a1, v6);
    }
  }
}

void sub_19C02111C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C02114C(uint64_t result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  uint64_t v10;
  char v11;

  *(_DWORD *)result = 0x100000;
  *(_WORD *)(result + 4) = 0;
  *(_BYTE *)(result + 6) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  if ((_DWORD)a3)
  {
    v9 = (const void *)result;
    v10 = a3;
    do
    {
      v11 = *a2++;
      result = sub_19BFF769C(v9, "%02x", a3, a4, a5, a6, a7, a8, v11);
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_19C0211C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0211E4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C02123C()
{
  MEMORY[0x1A1AD0C28]();
  JUMPOUT(0x1A1AD0CDCLL);
}

void **sub_19C021260(void **__dst, void *__src, unint64_t a3)
{
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = (unint64_t)__dst[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < a3)
    {
      v8 = (uint64_t)__dst[1];
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = *__dst;
  }
  else
  {
    v7 = __dst;
    if (a3 > 0xA)
    {
      v8 = *((unsigned __int8 *)__dst + 23);
      v9 = 10;
LABEL_6:
      sub_19C0164E8(__dst, v9, a3 - v9, v8, 0, v8, a3, __src);
      return __dst;
    }
  }
  if (a3)
  {
    memmove(v7, __src, 2 * a3);
    LOBYTE(v6) = *((_BYTE *)__dst + 23);
  }
  if ((v6 & 0x80) != 0)
    __dst[1] = (void *)a3;
  else
    *((_BYTE *)__dst + 23) = a3 & 0x7F;
  *((_WORD *)v7 + a3) = 0;
  return __dst;
}

os_log_t sub_19C02131C()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "TIKeyboardCollator");
  qword_1EE417798 = (uint64_t)result;
  return result;
}

_QWORD *sub_19C021348(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E3D14EE0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  v4[4] = MEMORY[0x1E0DE5F70];
  a1[1] = v4;
  return a1;
}

void sub_19C0213A8(void *a1)
{
  __cxa_begin_catch(a1);
  ucol_close();
  __cxa_rethrow();
}

void sub_19C0213BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_19C0213D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C0213F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_19C021414(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D135B0))
    return a1 + 32;
  else
    return 0;
}

void sub_19C021454(_QWORD *a1)
{
  __CFBundle *BundleWithIdentifier;
  CFURLRef v3;
  CFStringRef v4;
  char *v5;
  char *v6;
  int *v7;
  _QWORD *v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  int v12;
  off_t v13;
  int v14;
  void *v15;
  _BOOL4 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void **v24;
  void *__p[2];
  uint64_t v26;
  __int128 v27;
  CFTypeRef cf;
  CFTypeRef v29;
  uint8_t buf[4];
  CFStringRef v31;
  __int16 v32;
  void **v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.Lexicon-framework"));
  if (!BundleWithIdentifier)
  {
    if (qword_1EE4177A0 != -1)
      dispatch_once(&qword_1EE4177A0, &unk_1E3D170D0);
    v10 = qword_1EE417798;
    if (!os_log_type_enabled((os_log_t)qword_1EE417798, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(__p[0]) = 0;
    v11 = "failed to load the shared collator: could not get the Lexicon.framework bundle";
    goto LABEL_50;
  }
  v3 = CFBundleCopyResourceURL(BundleWithIdentifier, CFSTR("collator"), CFSTR("dat"), 0);
  v29 = v3;
  if (!v3)
  {
    if (qword_1EE4177A0 != -1)
      dispatch_once(&qword_1EE4177A0, &unk_1E3D170D0);
    v10 = qword_1EE417798;
    if (!os_log_type_enabled((os_log_t)qword_1EE417798, OS_LOG_TYPE_ERROR))
      goto LABEL_12;
    LOWORD(__p[0]) = 0;
    v11 = "failed to load the shared collator: could not find collator.dat in the resource bundle";
LABEL_50:
    _os_log_error_impl(&dword_19BF85000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)__p, 2u);
LABEL_12:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  v4 = CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
  cf = v4;
  sub_19BF87140(v4, __p);
  v5 = (char *)operator new(0x48uLL);
  v6 = v5;
  *(_OWORD *)(v5 + 8) = 0u;
  *((_DWORD *)v5 + 6) = -1;
  v7 = (int *)(v5 + 24);
  *(_QWORD *)v5 = &off_1E3D14E38;
  *((_OWORD *)v5 + 2) = 0u;
  v8 = v5 + 32;
  v9 = v5 + 48;
  if (SHIBYTE(v26) < 0)
  {
    sub_19BF8CD70(v5 + 48, __p[0], (unint64_t)__p[1]);
    *(_QWORD *)&v27 = v7;
    *((_QWORD *)&v27 + 1) = v6;
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)__p;
    *((_QWORD *)v5 + 8) = v26;
    *(_QWORD *)&v27 = v5 + 24;
    *((_QWORD *)&v27 + 1) = v5;
  }
  if (v6[71] < 0)
    v9 = *(char **)v9;
  v12 = open(v9, 0);
  *v7 = v12;
  if (v12 == -1)
  {
    v14 = 1;
    goto LABEL_31;
  }
  v13 = lseek(v12, 0, 2);
  *((_QWORD *)v6 + 5) = v13;
  if (v13 == -1)
    goto LABEL_30;
  if (!v13)
  {
    v14 = 2;
LABEL_31:
    if (qword_1EE4177A0 != -1)
      dispatch_once(&qword_1EE4177A0, &unk_1E3D170D0);
    v20 = qword_1EE417798;
    if (os_log_type_enabled((os_log_t)qword_1EE417798, OS_LOG_TYPE_ERROR))
    {
      sub_19C0218DC(__p, v14);
      v24 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 138412546;
      v31 = v4;
      v32 = 2080;
      v33 = v24;
      _os_log_error_impl(&dword_19BF85000, v20, OS_LOG_TYPE_ERROR, "error loading collator file at %@: %s", buf, 0x16u);
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
    }
    *a1 = 0;
    a1[1] = 0;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    goto LABEL_39;
  }
  lseek(*v7, 0, 0);
  v15 = mmap(0, *((_QWORD *)v6 + 5), 1, 2, *((_DWORD *)v6 + 6), 0);
  *v8 = v15;
  if (v15 == (void *)-1)
  {
LABEL_30:
    v14 = 3;
    goto LABEL_31;
  }
  sub_19BF8DAEC(__p);
  *(_DWORD *)buf = 0;
  ucol_getVersion();
  v16 = *(_DWORD *)buf != *(_DWORD *)*v8;
  v14 = 4 * v16;
  v17 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v18 = (unint64_t *)((char *)__p[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v16)
    goto LABEL_31;
  *(_OWORD *)a1 = v27;
LABEL_39:
  if (cf)
    CFRelease(cf);
  if (v29)
    CFRelease(v29);
}

void sub_19C02184C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, const void *a18, const void *a19)
{
  sub_19BFACCEC((uint64_t)&__p);
  sub_19BFACCEC((uint64_t)&a16);
  sub_19BF8AD20(&a18, 0);
  sub_19BFC4DD4(&a19, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C0218DC(_QWORD *a1, int a2)
{
  char *v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD v6[2];
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  switch(a2)
  {
    case 1:
      v3 = "file not found";
      goto LABEL_9;
    case 2:
      v3 = "file has zero length";
      goto LABEL_9;
    case 3:
      v3 = "file failed to load";
      goto LABEL_9;
    case 4:
      v3 = "collator is out of date";
LABEL_9:
      result = sub_19BF8E43C(a1, v3);
      break;
    default:
      sub_19BFA0144((uint64_t)v6);
      sub_19BF8E6F8(&v7, (uint64_t)"Unknown collator failure ", 25);
      std::ostream::operator<<();
      sub_19BFAAA88(a1, (uint64_t)v8);
      v6[0] = *MEMORY[0x1E0DE4F50];
      v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v7 = v4;
      v8[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (v9 < 0)
        operator delete((void *)v8[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      result = (_QWORD *)MEMORY[0x1A1AD0C7C](&v10);
      break;
  }
  return result;
}

void sub_19C021A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFA0270((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C021A20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D14E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C021A30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D14E38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19C021A60(uint64_t a1)
{
  void *v2;
  int v3;

  v2 = *(void **)(a1 + 32);
  if (v2)
    munmap(v2, *(_QWORD *)(a1 + 40));
  v3 = *(_DWORD *)(a1 + 24);
  if (v3 != -1)
    close(v3);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_19C021AD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D12AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C021AE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D12AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C021B14(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

const void *LXEntryCopyString(uint64_t a1)
{
  const void *v1;
  const void *v3;
  unsigned __int16 v4[3];
  char v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!a1)
    __assert_rtn("LXEntryCopyString", "LXEntry.cpp", 25, "entry");
  sub_19BFD54EC((uint64_t)v4, (unsigned __int16 *)(a1 + 16));
  sub_19BF8CFAC((CFStringRef *)&v3, v4);
  v1 = v3;
  v3 = 0;
  sub_19BF8DAB8(&v3);
  if (v6 && v5 == 1)
    free(v6);
  return v1;
}

void sub_19C021BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  if (a13)
  {
    if (a12 == 1)
      free(a13);
  }
  _Unwind_Resume(exception_object);
}

const void *LXEntryCopyStoredString(uint64_t a1, _DWORD *a2)
{
  const void *v2;
  const void *v4;

  if (!a1)
    __assert_rtn("LXEntryCopyStoredString", "LXEntry.cpp", 31, "entry");
  if (a2)
    *a2 = *(_DWORD *)(a1 + 56);
  sub_19BF8CFAC((CFStringRef *)&v4, (unsigned __int16 *)(a1 + 16));
  v2 = v4;
  v4 = 0;
  sub_19BF8DAB8(&v4);
  return v2;
}

uint64_t LXEntryGetMetaFlags(uint64_t a1)
{
  if (!a1)
    __assert_rtn("LXEntryGetMetaFlags", "LXEntry.cpp", 45, "entry");
  return *(_DWORD *)(a1 + 52) & 0x3FA000EF;
}

uint64_t LXEntryGetCategoryFlags(uint64_t a1)
{
  if (!a1)
    __assert_rtn("LXEntryGetCategoryFlags", "LXEntry.cpp", 51, "entry");
  return *(_DWORD *)(a1 + 52) & 0x7FF00;
}

double LXEntryGetPartialProbability(uint64_t a1)
{
  if (!a1)
    __assert_rtn("LXEntryGetPartialProbability", "LXEntry.cpp", 56, "entry");
  return log10f(*(float *)(a1 + 48));
}

uint64_t LXEntryGetUsageCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t LXEntryGetPenaltyCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t LXEntryGetTokenID(uint64_t a1)
{
  if (!a1)
    __assert_rtn("LXEntryGetTokenID", "LXEntry.cpp", 71, "entry");
  return *(unsigned int *)(a1 + 76);
}

double LXEntryGetProbability(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

BOOL LXEntryGetTimestamp(uint64_t a1, double *a2)
{
  double v2;

  if (!a2)
    return 0;
  v2 = *(double *)(a1 + 112);
  *a2 = v2;
  return v2 != 0.0;
}

uint64_t LXEntryGetUserBitfield(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t LXEntryGetAffixData(uint64_t a1)
{
  if (!a1)
    __assert_rtn("LXEntryGetAffixData", "LXEntry.cpp", 96, "entry");
  return *(unsigned int *)(a1 + 72);
}

uint64_t LXEntryGetHeadAndTailPos(uint64_t result, _WORD *a2, _WORD *a3)
{
  unsigned int v3;
  unsigned int v4;

  if (!result)
    __assert_rtn("LXEntryGetHeadAndTailPos", "LXEntry.cpp", 102, "entry");
  if (*(_BYTE *)(result + 88))
  {
    v3 = *(_DWORD *)(result + 92);
    if (a2)
      *a2 = v3;
    if (a3)
    {
      v4 = HIWORD(v3);
LABEL_11:
      *a3 = v4;
    }
  }
  else
  {
    if (a2)
      *a2 = 0;
    if (a3)
    {
      LOWORD(v4) = 0;
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t LXEntryGetEmissionCost(uint64_t a1)
{
  if (!a1)
    __assert_rtn("LXEntryGetEmissionCost", "LXEntry.cpp", 119, "entry");
  if (*(_BYTE *)(a1 + 88))
    return *(unsigned __int16 *)(a1 + 96);
  else
    return 0x7FFFFFFFLL;
}

uint64_t LXEntryCreateMutable(CFStringRef theString, int a2)
{
  uint64_t v3;
  int v5;
  CFAbsoluteTime Current;
  void *v7;
  int v8;
  __int16 v9;
  char v10;
  void *v11;
  char v12;
  _QWORD v13[5];
  char v14;
  int v15;
  __int16 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = 0x100000;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13[0] = 0;
  *(_QWORD *)((char *)v13 + 5) = 0;
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = 0xFFFFFFFFLL;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_19BF8C4B0((uint64_t)&Current, theString);
  sub_19BF8A1F4((uint64_t)&v8, (unsigned __int16 *)&Current);
  if (v7 && BYTE6(Current) == 1)
    free(v7);
  HIDWORD(v13[0]) = a2;
  v5 = 0;
  Current = CFAbsoluteTimeGetCurrent();
  v3 = sub_19C01A3BC((uint64_t)&v8, &v5, (uint64_t *)&Current);
  if (v11 && v10 == 1)
    free(v11);
  return v3;
}

void sub_19C021F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, void *a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, void *a20)
{
  if (a14 && a13 == 1)
    free(a14);
  if (a20)
  {
    if (a19 == 1)
      free(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LXEntryCreateMutableCopy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t Instance;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *(_QWORD *)(a1 + 104);
  v2 = *(_QWORD *)(a1 + 112);
  v4 = *(_DWORD *)(a1 + 120);
  if (qword_1ED024268 != -1)
    dispatch_once(&qword_1ED024268, &unk_1E3D17110);
  Instance = _CFRuntimeCreateInstance();
  sub_19BF86B60(Instance + 16, (unsigned __int16 *)(a1 + 16));
  v6 = *(_OWORD *)(a1 + 48);
  v7 = *(_OWORD *)(a1 + 64);
  v8 = *(_OWORD *)(a1 + 80);
  *(_WORD *)(Instance + 96) = *(_WORD *)(a1 + 96);
  *(_OWORD *)(Instance + 64) = v7;
  *(_OWORD *)(Instance + 80) = v8;
  *(_OWORD *)(Instance + 48) = v6;
  *(_QWORD *)(Instance + 104) = v3;
  *(_QWORD *)(Instance + 112) = v2;
  *(_DWORD *)(Instance + 120) = v4;
  return Instance;
}

uint64_t sub_19C02209C()
{
  uint64_t result;

  qword_1ED024270 = 0;
  *(_QWORD *)algn_1ED024278 = "LXEntry";
  qword_1ED024280 = 0;
  unk_1ED024288 = 0;
  qword_1ED024290 = (uint64_t)sub_19BFD0144;
  unk_1ED024298 = 0u;
  unk_1ED0242A8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0242D0 = result;
  return result;
}

uint64_t LXMutableEntryGetUserBitfield(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t LXMutableEntrySetMetaFlags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 52) = a2;
  return result;
}

uint64_t LXMutableEntryUpdateUsageCount(uint64_t result, float a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;

  v2 = llroundf(a2);
  v3 = *(_DWORD *)(result + 64);
  v4 = v3 < -v2 && v2 < 0;
  v5 = v3 + v2;
  if (v4)
    v5 = 0;
  *(_DWORD *)(result + 64) = v5;
  return result;
}

uint64_t sub_19C02211C(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t result;
  __int16 v8;

  v2 = *(unsigned __int16 *)(a1 + 34);
  v3 = *(unsigned __int16 *)(a1 + 4);
  if (!*(_WORD *)(a1 + 4))
  {
    sub_19BF86BF8((unsigned __int16 *)a1);
    v3 = *(unsigned __int16 *)(a1 + 4);
  }
  if (v2 >= v3)
    return 0;
  ++*(_WORD *)(a1 + 34);
  v4 = a1 + 16;
  if (*(_QWORD *)(a1 + 8))
    v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int16 *)(a1 + 32);
  v6 = v5 + 1;
  *(_WORD *)(a1 + 32) = v5 + 1;
  result = *(unsigned __int8 *)(v4 + v5);
  if ((result & 0x80) != 0)
  {
    if (result > 0xDF)
    {
      if (result > 0xEF)
      {
        result = ((result & 7) << 18) | ((*(_BYTE *)(v4 + v6) & 0x3F) << 12) | ((*(_BYTE *)(v4 + v6 + 1) & 0x3F) << 6) | *(_BYTE *)(v4 + v6 + 2) & 0x3F;
        v8 = v5 + 4;
      }
      else
      {
        result = ((result & 0xF) << 12) | ((*(_BYTE *)(v4 + v6) & 0x3F) << 6) | *(_BYTE *)(v4 + v6 + 1) & 0x3F;
        v8 = v5 + 3;
      }
      *(_WORD *)(a1 + 32) = v8;
    }
    else
    {
      *(_WORD *)(a1 + 32) = v5 + 2;
      return *(_BYTE *)(v4 + (unsigned __int16)(v5 + 1)) & 0x3F | ((result & 0x1F) << 6);
    }
  }
  return result;
}

unsigned int *sub_19C022208(unsigned int *result, uint64_t **a2, int a3)
{
  int v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;

  v3 = *(char *)result;
  if ((v3 & 0x80000000) == 0)
  {
    v5 = result;
    v7 = result + 2;
    v6 = result[2];
    v8 = HIBYTE(v6) & 3;
    if (v8 > *(unsigned __int8 *)result)
    {
      v9 = v3 + 1;
      if (v9 > v8)
        __assert_rtn("peek_next_byte", "TIWordTrie.cpp", 189, "has_more_patricia_key_bytes()");
      if (*((unsigned __int8 *)result + v9 + 24) == a3)
      {
        v10 = *(_BYTE *)result + 1;
LABEL_23:
        *(_BYTE *)v5 = v10;
        return result;
      }
      goto LABEL_22;
    }
    if (!*((_BYTE *)a2 + 20))
      goto LABEL_22;
    v11 = *(_QWORD *)&v6 & 0xFFFFFFLL;
    if ((v6 & 0xFFFFFF) != 0)
    {
      v12 = **a2;
      v13 = v12 + v11;
    }
    else
    {
      if (*(_BYTE *)result || v6 || *((_BYTE *)result + 24))
        goto LABEL_22;
      v13 = 0;
      v12 = **a2;
    }
    result = sub_19C0223C4((unsigned int *)a2 + 6, v13, v12 + *((unsigned int *)a2 + 3228));
    v14 = &result[6 * a3];
    v15 = v14[68];
    if (!v15 && !LOBYTE(result[6 * a3 + 72]))
    {
LABEL_22:
      v5[2] = 0;
      *((_QWORD *)v5 + 2) = 0;
      v10 = -1;
      v5[6] = 0;
      goto LABEL_23;
    }
    if (v7 != v14 + 68)
    {
      v16 = 0;
      v5[2] = v15;
      v17 = &result[6 * a3];
      *((_QWORD *)v5 + 2) = *((_QWORD *)v17 + 35);
      v18 = v17 + 72;
      do
      {
        *((_BYTE *)v5 + v16 + 24) = *((_BYTE *)v18 + v16);
        ++v16;
      }
      while (v16 != 4);
    }
    *(_BYTE *)v5 = 0;
    if (!v5[2] && !*((_BYTE *)v5 + 24))
      __assert_rtn("advance", "TIWordTrie.cpp", 210, "!is_root()");
  }
  return result;
}

unsigned int *sub_19C0223C4(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;

  if (a2)
  {
    v4 = a1 + 1610;
    if (*((_QWORD *)a1 + 805) != a2)
      sub_19C022424(a1 + 1610, a2);
  }
  else
  {
    if (*(_QWORD *)a1 != a3)
      sub_19C022424(a1, a3);
    return a1;
  }
  return v4;
}

unsigned int *sub_19C022424(unsigned int *result, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int v37;

  v2 = result;
  v3 = result[2];
  if ((int)v3 >= 1)
  {
    v4 = v3 + 1;
    do
    {
      v5 = &result[6 * *((unsigned __int8 *)result + (v4 - 2) + 12)];
      v5[68] = 0;
      *((_QWORD *)v5 + 35) = 0;
      v5[72] = 0;
      --v4;
    }
    while (v4 > 1);
  }
  result[2] = 0;
  *(_QWORD *)result = a2;
  v35 = result + 1606;
  v6 = *((_QWORD *)result + 803);
  v7 = *((_QWORD *)result + 804);
  v8 = a2 - v6;
  while (1)
  {
    v9 = v8 + 1;
    v10 = v8 + 1 <= v7 || v7 == 0;
    HIDWORD(v36) = 0;
    v37 = 0;
    if (!v10 || v6 == 0)
      break;
    v12 = v2[1604];
    v13 = *(unsigned __int8 *)(v6 + v8);
    v14 = (v13 & 3) + 1;
    v15 = v9 + v14;
    if (v7)
    {
      if (v15 > v7)
        break;
    }
    v16 = v13 << 24;
    result = (unsigned int *)memcpy(&v37, (const void *)(v6 + v9), v14);
    v17 = (v13 >> 2) & 3;
    if (v17 == 3)
    {
      v18 = v15 + 3;
      if (v7 && v18 > v7)
        break;
      v20 = (*(unsigned __int8 *)(v6 + v15 + 1) << 8) | (*(unsigned __int8 *)(v6 + v15) << 16) | *(unsigned __int8 *)(v6 + v15 + 2);
    }
    else
    {
      if (v17 == 2)
      {
        v18 = v15 + 2;
        if (v7 && v18 > v7)
          break;
        v19 = v8 + ((int)bswap32(*(unsigned __int16 *)(v6 + v15)) >> 16);
      }
      else
      {
        if (v17 != 1)
          goto LABEL_28;
        v18 = v15 + 1;
        if (v7 && v18 > v7)
          break;
        v19 = *(unsigned __int8 *)(v6 + v15) + (_DWORD)v8;
      }
      v20 = v19 & 0xFFFFFF;
    }
    v15 = v18;
    v16 |= v20;
LABEL_28:
    if ((v16 & 0x40000000) != 0)
    {
      if (v7 && v15 + 1 > v7)
        break;
      v21 = (unint64_t)*(unsigned __int8 *)(v6 + v15++) << 32;
    }
    else
    {
      v21 = 0xFF00000000;
    }
    LODWORD(v36) = v21;
    v22 = HIDWORD(v21);
    BYTE4(v36) = BYTE4(v21);
    if ((v16 & 0x20000000) != 0)
    {
      if ((v12 & 0x20000) != 0)
      {
        v8 = v15 + 4;
        if (v7 && v8 > v7)
          break;
        v29 = (*(_DWORD *)(v6 + v15) << 24) & 0x80000000 | ((unint64_t)HIDWORD(v36) << 32);
        v28 = (*(_DWORD *)(v6 + v15) >> 8) & 0xFF00 | HIBYTE(*(_DWORD *)(v6 + v15)) | (*(_DWORD *)(v6 + v15) << 8) & 0xFF0000 | ((*(_DWORD *)(v6 + v15) & 0x7Fu) << 24);
      }
      else
      {
        v8 = v15 + 3;
        if (v7 && v8 > v7)
          break;
        v28 = __rev16(*(unsigned __int16 *)(v6 + v15 + 1));
        v29 = ((*(unsigned __int8 *)(v6 + v15) << 24) | (*(unsigned __int8 *)(v6 + v15) << 16)) & 0x807F0000 | ((unint64_t)HIDWORD(v36) << 32);
      }
      v36 = v29 | v28;
    }
    else
    {
      if ((v16 & 0x10000000) == 0)
      {
        v8 = v15;
LABEL_36:
        v24 = (v16 & 0x10000000) == 0 && v17 != 0;
        if ((v12 & 0x10000) != 0 && !v24)
        {
          v25 = v8 + 1;
          if (v7 && v25 > v7)
            break;
          v26 = HIDWORD(v21);
          v27 = v21 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)*(unsigned __int8 *)(v6 + v8) << 8);
          BYTE4(v36) = v26;
          LODWORD(v36) = v27;
          if (*(char *)(v6 + v8) < 0)
          {
            v8 += 2;
            if (v7 && v8 > v7)
              break;
            BYTE4(v36) = BYTE4(v27);
            LODWORD(v36) = v27 & 0xFF00FFFF | (*(unsigned __int8 *)(v6 + v25) << 16);
          }
          else
          {
            ++v8;
          }
        }
        goto LABEL_61;
      }
      v8 = v15 + 1;
      if (v7 && v8 > v7)
        break;
      v21 |= *(unsigned __int8 *)(v6 + v15);
      BYTE4(v36) = v22;
      LODWORD(v36) = v21;
      if (v17 || *(_BYTE *)(v6 + v15))
        goto LABEL_36;
    }
LABEL_61:
    v30 = v37;
    v31 = &v2[6 * v37];
    v31[68] = v16;
    *((_QWORD *)v31 + 35) = v36;
    v31[72] = v37;
    v32 = (int)v2[2];
    v2[2] = v32 + 1;
    *((_BYTE *)v2 + v32 + 12) = v30;
    if ((v16 & 0x80000000) == 0)
      return result;
  }
  *(_OWORD *)(v2 + 63) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  v33 = 0x3FFFFFFFFFFFFA00;
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  do
  {
    v34 = &v2[v33];
    v34[1604] = 0;
    *((_QWORD *)v34 + 803) = 0;
    v34[1608] = 0;
    v33 += 6;
  }
  while (v33 * 4);
  v2[1604] = 0;
  *v35 = 0;
  v35[1] = 0;
  return result;
}

_BYTE *sub_19C022798(_BYTE *a1, char a2, int *a3)
{
  _BYTE v5[8];
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  *a1 = a2;
  v5[0] = 0;
  v6 = *a3;
  v7 = *((_QWORD *)a3 + 1);
  v8 = a3[4];
  v9 = 0;
  sub_19C0477E0((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19BFC72B0((uint64_t)v5);
  return a1;
}

void sub_19C0227F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19C022808(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    sub_19BF8E6D0();
  return operator new(48 * a1);
}

uint64_t *sub_19C02284C(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  for (i = 56; ; i -= 48)
  {
    v8 = v6 + i;
    v9 = v4 + i;
    if (v4 + i - 56 == v5)
      break;
    *(_BYTE *)(v8 - 104) = *(_BYTE *)(v9 - 104);
    result = (uint64_t *)sub_19C047978(v8 - 96, v9 - 96);
  }
  v10 = v8 - 56;
  a2[1] = v10;
  v11 = *v3;
  *v3 = v10;
  a2[1] = v11;
  v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19C02292C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    sub_19BFC72B0(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C02297C(uint64_t result, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v11;
  uint64_t v12[3];

  if (!*(_BYTE *)(a2 + 20))
    goto LABEL_9;
  v6 = *(uint64_t **)(a2 + 8);
  v7 = v6[1];
  if (v7 <= a3)
    goto LABEL_9;
  if (v7 < (unint64_t)a3)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  v8 = *v6;
  if (v7 - 1 < (unint64_t)a3 || v8 == 0)
  {
LABEL_9:
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_QWORD *)(result + 80) = 0;
    *(_WORD *)(result + 2) = 16;
    *(_BYTE *)(result + 6) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 37) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(result + 76) = 0;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v8 + a3);
    v12[0] = v8;
    v12[1] = v7;
    v12[2] = a3;
    result = sub_19BFD4A40(result, v12, a5, a2 + 12920, *(_QWORD *)(a2 + 14312), *(_QWORD *)(a2 + 14320), *(_DWORD *)(a2 + 12904));
    *a4 = (v11 + a3) & (*(char *)(result + 44) >> 31);
  }
  return result;
}

void sub_19C022A84(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 32);
  sub_19BFD3680(&v2);
  v2 = (void **)(a1 + 8);
  sub_19BFD36F8(&v2);
  JUMPOUT(0x1A1AD0CDCLL);
}

BOOL sub_19C022ADC(_DWORD *a1, uint64_t a2)
{
  return (unint64_t)(a2 - 1) >= 3 && a1 != 0 && *a1 == 0x1000000;
}

unint64_t sub_19C022B08(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  if (a2 <= 3)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  result = 0;
  if (a2 >= 8 && a1 && a2 >= 0xC)
    return bswap64(*(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 4) << 32));
  return result;
}

uint64_t sub_19C022B68(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  NSObject *v6;
  int v8;
  uint8_t v9[4];
  uint8_t v10[4];
  uint8_t versionArray[4];
  uint8_t buf[4];
  char *v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  char *v19;
  char v20[20];
  char v21[20];
  char v22[20];
  char versionString[20];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)v10 = 0;
  *(_DWORD *)versionArray = v2;
  ucol_getVersion();
  v3 = *(_DWORD *)(a1 + 16);
  v8 = 0;
  *(_DWORD *)v9 = v3;
  ucol_getUCAVersion();
  if (v2)
    v4 = 0;
  else
    v4 = v3 == 0;
  v5 = v4;
  if (!v4)
  {
    u_versionToString(versionArray, versionString);
    u_versionToString(v10, v22);
    u_versionToString(v9, v21);
    u_versionToString((const uint8_t *)&v8, v20);
    if (qword_1EE4177C0 != -1)
      dispatch_once(&qword_1EE4177C0, &unk_1E3D17150);
    v6 = qword_1EE4177B8;
    if (os_log_type_enabled((os_log_t)qword_1EE4177B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v13 = versionString;
      v14 = 2080;
      v15 = v22;
      v16 = 2080;
      v17 = v21;
      v18 = 2080;
      v19 = v20;
      _os_log_error_impl(&dword_19BF85000, v6, OS_LOG_TYPE_ERROR, "ICU version mismatch: file_collator=%s, loaded_collator=%s, file_uca=%s, loaded_uca=%s", buf, 0x2Au);
    }
  }
  return v5;
}

uint64_t sub_19C022CDC(uint64_t a1, unint64_t a2, unint64_t a3, _DWORD *a4)
{
  BOOL v4;
  BOOL v5;
  int v6;

  if (a2 < a3)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  if (a2)
    v4 = a3 + 4 > a2;
  else
    v4 = 0;
  v5 = v4 || a1 == 0;
  v6 = v5;
  if (!v5)
    *a4 = bswap32(*(_DWORD *)(a1 + a3));
  return v6 ^ 1u;
}

uint64_t sub_19C022D3C(uint64_t a1, unint64_t a2, unint64_t a3, int *a4)
{
  BOOL v4;
  BOOL v5;
  int v6;

  if (a2 < a3)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  if (a2)
    v4 = a3 + 3 > a2;
  else
    v4 = 0;
  v5 = v4 || a1 == 0;
  v6 = v5;
  if (!v5)
    *a4 = (*(unsigned __int8 *)(a1 + a3) << 16) | (*(unsigned __int8 *)(a1 + a3 + 1) << 8) | *(unsigned __int8 *)(a1 + a3 + 2);
  return v6 ^ 1u;
}

void sub_19C022DB0(uint64_t *a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64x2_t v75;
  char *v76;
  void *v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  void *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  int64x2_t v86;
  char *v87;
  uint64_t v88;

  v6 = operator new();
  *(_BYTE *)v6 = *a3;
  *(_OWORD *)(v6 + 8) = 0u;
  v81 = (uint64_t *)(v6 + 8);
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  v8 = a2[1];
  v7 = a2[2];
  v9 = v7 + 1;
  if (v8)
    v10 = v9 > v8;
  else
    v10 = 0;
  if (v10)
    goto LABEL_99;
  v11 = *a2;
  a2[2] = v9;
  if (!v11)
    goto LABEL_99;
  v12 = *(unsigned __int8 *)(v11 + v7);
  v78 = a1;
  v13 = 0;
  v14 = 0;
  if (!*(_BYTE *)(v11 + v7))
  {
LABEL_69:
    sub_19BFD3738(v81);
    v82 = 0;
    v83 = 0;
    v84 = 0;
    if (v13 == v14)
    {
      v77 = 0;
    }
    else
    {
      v57 = 0;
      v58 = v13;
      do
      {
        v59 = *(_DWORD *)v58;
        v60 = *((unsigned int *)v58 + 1);
        while (v57 < v60)
        {
          LOBYTE(v85) = 0;
          sub_19BFD25BC((uint64_t)&v82, &v85);
          v57 = v83;
        }
        v62 = *(_QWORD *)(v6 + 16);
        v61 = *(_QWORD *)(v6 + 24);
        if (v62 >= v61)
        {
          v64 = (uint64_t)(v62 - *v81) >> 5;
          if ((unint64_t)(v64 + 1) >> 59)
            sub_19BF8EB40();
          v65 = v61 - *v81;
          v66 = v65 >> 4;
          if (v65 >> 4 <= (unint64_t)(v64 + 1))
            v66 = v64 + 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFE0)
            v67 = 0x7FFFFFFFFFFFFFFLL;
          else
            v67 = v66;
          v88 = v6 + 24;
          if (v67)
          {
            if (v67 >> 59)
              sub_19BF8E6D0();
            v68 = (char *)operator new(32 * v67);
          }
          else
          {
            v68 = 0;
          }
          v85 = v68;
          v86.i64[0] = (uint64_t)&v68[32 * v64];
          v86.i64[1] = v86.i64[0];
          v87 = &v68[32 * v67];
          *((_DWORD *)sub_19BFD356C(v86.i64[0], (uint64_t)&v82) + 6) = v59;
          v69 = v86.i64[0];
          v63 = v86.i64[1] + 32;
          v86.i64[1] += 32;
          v71 = *(_QWORD *)(v6 + 8);
          v70 = *(_QWORD *)(v6 + 16);
          if (v70 == v71)
          {
            v75 = vdupq_n_s64(v70);
          }
          else
          {
            v72 = 0;
            do
            {
              v73 = v69 + v72;
              v74 = v70 + v72;
              *(_QWORD *)(v73 - 32) = *(_QWORD *)(v70 + v72 - 32);
              *(_QWORD *)(v73 - 24) = *(_QWORD *)(v70 + v72 - 24);
              *(_QWORD *)(v73 - 16) = *(_QWORD *)(v70 + v72 - 16);
              *(_QWORD *)(v74 - 32) = 0;
              *(_QWORD *)(v74 - 24) = 0;
              *(_QWORD *)(v74 - 16) = 0;
              *(_DWORD *)(v73 - 8) = *(_DWORD *)(v70 + v72 - 8);
              v72 -= 32;
            }
            while (v70 + v72 != v71);
            v69 += v72;
            v75 = *(int64x2_t *)v81;
            v63 = v86.i64[1];
          }
          *(_QWORD *)(v6 + 8) = v69;
          *(_QWORD *)(v6 + 16) = v63;
          v86 = v75;
          v76 = *(char **)(v6 + 24);
          *(_QWORD *)(v6 + 24) = v87;
          v87 = v76;
          v85 = (char *)v75.i64[0];
          sub_19BFD3C60((uint64_t)&v85);
          v57 = v83;
        }
        else
        {
          sub_19BFD356C(*(_QWORD **)(v6 + 16), (uint64_t)&v82);
          *(_DWORD *)(v62 + 24) = v59;
          v63 = v62 + 32;
          *(_QWORD *)(v6 + 16) = v62 + 32;
        }
        *(_QWORD *)(v6 + 16) = v63;
        v77 = v82;
        sub_19BFD278C((uint64_t)v82, v57);
        v58 += 8;
      }
      while (v58 != v14);
      a1 = v78;
    }
    sub_19BFD377C((int64x2_t *)v6, 0, (*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 5, 0);
    if (v77)
      operator delete(v77);
    goto LABEL_97;
  }
  v15 = 0;
  v16 = 1;
  v79 = *(unsigned __int8 *)(v11 + v7);
  do
  {
    v18 = a2[1];
    v17 = a2[2];
    if (*(_BYTE *)v6)
    {
      v19 = v17 + 2;
      if (v18)
        v20 = v19 > v18;
      else
        v20 = 0;
      if (v20)
        goto LABEL_60;
      v21 = *a2;
      a2[2] = v19;
      if (!v21)
        goto LABEL_60;
      LODWORD(v17) = bswap32(*(unsigned __int16 *)(v21 + v17)) >> 16;
      if ((_DWORD)v17)
        goto LABEL_22;
    }
    else
    {
      v22 = v17 + 1;
      if (v18)
        v23 = v22 > v18;
      else
        v23 = 0;
      if (v23 || (v24 = *a2, a2[2] = v22, !v24))
      {
LABEL_60:
        a1 = v78;
        goto LABEL_97;
      }
      LODWORD(v17) = *(unsigned __int8 *)(v24 + v17);
      if ((_DWORD)v17)
      {
LABEL_22:
        v25 = v17;
        LODWORD(v26) = 0;
        HIDWORD(v26) = v16;
        v80 = v26;
        v27 = (v14 - v13) >> 3;
        v28 = &v13[(v14 - v13) & 0xFFFFFFFFFFFFFFF8];
        if (v17 <= (unint64_t)((uint64_t)(v15 - (_QWORD)v14) >> 3))
        {
          v32 = v14 - v28;
          v33 = v14;
          v17 = v17;
          if (v17 <= (unint64_t)((v14 - v28) >> 3))
            goto LABEL_35;
          v34 = 0;
          v17 = v32 >> 3;
          v33 = &v14[8 * (v25 - (v32 >> 3))];
          v35 = 8 * v25 - 8 * (v32 >> 3);
          do
          {
            *(_QWORD *)&v14[v34] = v26;
            v34 += 8;
          }
          while (v35 != v34);
          if (v14 == v28)
          {
            v14 = v33;
          }
          else
          {
LABEL_35:
            v36 = &v33[-8 * v25];
            v37 = v33;
            while (v36 < v14)
            {
              v38 = *(_QWORD *)v36;
              v36 += 8;
              *(_QWORD *)v37 = v38;
              v37 += 8;
            }
            v39 = &v28[8 * v25];
            if (v33 != v39)
            {
              v40 = 8 * ((v33 - v39) >> 3);
              v41 = v33 - 4;
              v42 = (uint64_t)&v13[8 * v27 - 4];
              do
              {
                *((_DWORD *)v41 - 1) = *(_DWORD *)(v42 + v40 - 4);
                *(_DWORD *)v41 = *(_DWORD *)(v42 + v40);
                v41 -= 8;
                v40 -= 8;
              }
              while (v40);
            }
            v43 = 8 * v27;
            do
            {
              *(_QWORD *)&v13[v43] = v26;
              v43 += 8;
              --v17;
            }
            while (v17);
            v14 = v37;
          }
        }
        else
        {
          v29 = v27 + v17;
          if ((unint64_t)(v27 + v25) >> 61)
            sub_19BF8EB40();
          if ((uint64_t)(v15 - (_QWORD)v13) >> 2 > v29)
            v29 = (uint64_t)(v15 - (_QWORD)v13) >> 2;
          if (v15 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
            v30 = (unint64_t)sub_19BFAC524(v30);
          else
            v31 = 0;
          v44 = (_QWORD *)(v30 + 8 * v27);
          v45 = (char *)&v44[v25];
          v46 = 8 * v25;
          v47 = v44;
          do
          {
            *v47++ = v80;
            v46 -= 8;
          }
          while (v46);
          if (v14 != v13)
          {
            v48 = 8 * v27;
            do
            {
              *(_QWORD *)(v30 + v48 - 8) = *(_QWORD *)&v13[v48 - 8];
              v48 -= 8;
            }
            while (v48);
            v44 = (_QWORD *)v30;
          }
          for (; v28 != v14; v45 += 8)
          {
            v49 = *(_QWORD *)v28;
            v28 += 8;
            *(_QWORD *)v45 = v49;
          }
          v15 = v30 + 8 * v31;
          if (v13)
          {
            v50 = v30 + 8 * v31;
            operator delete(v13);
            v15 = v50;
          }
          v13 = (char *)v44;
          v14 = v45;
          v12 = v79;
        }
      }
    }
  }
  while (v16++ != v12);
  if (v13 == v14)
  {
    v14 = v13;
    a1 = v78;
    goto LABEL_69;
  }
  v53 = *a2;
  v52 = a2[1];
  v54 = v13;
  v55 = a2[2];
  a1 = v78;
  while (1)
  {
    v56 = v55 + 4;
    if (v52)
    {
      if (v56 > v52)
        break;
    }
    a2[2] = v56;
    if (!v53)
      break;
    *(_DWORD *)v54 = bswap32(*(_DWORD *)(v53 + v55));
    v54 += 8;
    v55 += 4;
    if (v54 == v14)
      goto LABEL_69;
  }
LABEL_97:
  if (v13)
    operator delete(v13);
LABEL_99:
  *a1 = v6;
}

void sub_19C023304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  void *v19;
  void *v20;

  if (v19)
    operator delete(v19);
  if (v20)
    operator delete(v20);
  a15 = v18 + 32;
  sub_19BFD3680((void ***)&a15);
  a15 = a14;
  sub_19BFD36F8((void ***)&a15);
  MEMORY[0x1A1AD0CDC](v18, 0x1020C404D15F4B2);
  _Unwind_Resume(a1);
}

void sub_19C02339C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D12AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C0233AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D12AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C0233DC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

void sub_19C0233F0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C023404(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;

  if (*(_BYTE *)(a1 + 8))
  {
    if (((*(_BYTE *)(a1 + 9) != 0) & (a2 >> 4)) != 0)
      v2 = a2 & 1 | 8;
    else
      v2 = a2 & 1;
    v3 = v2 | a2 & 0x60;
    v4 = a2 & 0x88888888;
    v5 = v3 | 0x800000;
    v6 = v3 | 0x2000000;
    if ((a2 & 0x88888888) == 0x80)
      v3 |= 0x1000000u;
    if (v4 == 136)
      v3 = v6;
    if (v4 == 8)
      v3 = v5;
    v7 = a2 & 6;
    switch(v7)
    {
      case 6:
        return v3 | 0x80;
      case 4:
        return v3 | 4;
      case 2:
        return v3 | 2;
      default:
        return v3;
    }
  }
  else if ((a2 & 0x80u) == 0)
  {
    return a2 & 0x67;
  }
  else
  {
    return a2 & 0x67 | 0x80;
  }
}

os_log_t sub_19C0234AC()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "WordTrie");
  qword_1EE4177B8 = (uint64_t)result;
  return result;
}

void sub_19C0234D8(_BYTE *a1, uint64_t a2, std::string *a3)
{
  NSObject *v5;
  std::string *v6;
  std::string *v7;
  NSObject *v8;
  std::string *v9;
  const char *v10;
  std::string *v11;
  std::string v12;
  std::error_code v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  std::string *v17;
  __int16 v18;
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    if (munlock(*(const void **)a2, *(_QWORD *)(a2 + 8)))
    {
      *(_QWORD *)&v13.__val_ = *__error();
      v13.__cat_ = std::generic_category();
      if (v13.__val_)
      {
        if (qword_1EE4177C0 != -1)
          dispatch_once(&qword_1EE4177C0, &unk_1E3D17150);
        v5 = qword_1EE4177B8;
        if (os_log_type_enabled((os_log_t)qword_1EE4177B8, OS_LOG_TYPE_DEFAULT))
        {
          std::error_code::message(&v12, &v13);
          if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v6 = &v12;
          else
            v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
          if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v7 = a3;
          else
            v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          v15 = "handle_unlocking";
          v16 = 2080;
          v17 = v6;
          v18 = 2080;
          v19 = v7;
          _os_log_impl(&dword_19BF85000, v5, OS_LOG_TYPE_DEFAULT, "%s: munlock() failed for %s file: %s", buf, 0x20u);
          if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v12.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    else
    {
      std::system_category();
    }
    *a1 = 0;
    if (qword_1EE4177C0 != -1)
      dispatch_once(&qword_1EE4177C0, &unk_1E3D17150);
    v8 = qword_1EE4177B8;
    if (os_log_type_enabled((os_log_t)qword_1EE4177B8, OS_LOG_TYPE_DEFAULT))
    {
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = a3;
      else
        v11 = (std::string *)a3->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v15 = "handle_unlocking";
      v16 = 2080;
      v17 = v11;
      v10 = "%s: %s file unlocked successfully";
LABEL_30:
      _os_log_impl(&dword_19BF85000, v8, OS_LOG_TYPE_DEFAULT, v10, buf, 0x16u);
    }
  }
  else
  {
    if (qword_1EE4177C0 != -1)
      dispatch_once(&qword_1EE4177C0, &unk_1E3D17150);
    v8 = qword_1EE4177B8;
    if (os_log_type_enabled((os_log_t)qword_1EE4177B8, OS_LOG_TYPE_DEFAULT))
    {
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = a3;
      else
        v9 = (std::string *)a3->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v15 = "handle_unlocking";
      v16 = 2080;
      v17 = v9;
      v10 = "%s: %s file is already unlocked";
      goto LABEL_30;
    }
  }
}

void sub_19C02375C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19BF8E3F8(a1);
}

uint64_t sub_19C023768(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_1E3D11D80;
  v4 = (void **)(a1 + 48);
  sub_19C0253A4(&v4);
  v2 = *(void **)(a1 + 24);
  if (v2 && *(_BYTE *)(a1 + 22) == 1)
    free(v2);
  return a1;
}

void sub_19C0237C4(uint64_t a1)
{
  void *v2;
  void **v3;

  *(_QWORD *)a1 = &off_1E3D11D80;
  v3 = (void **)(a1 + 48);
  sub_19C0253A4(&v3);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 22) == 1)
      free(v2);
  }
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C023830(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE *v13;
  __int128 v14;
  const void *v15;
  uint64_t v16;
  int v17;
  void **v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __n128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  uint64_t v42;
  const char *v44;
  uint64_t v45;
  unsigned __int16 *v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  uint64_t v50;
  unsigned __int16 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  _QWORD v61[2];
  uint64_t (*v62)(uint64_t, __int128 *, double);
  void *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  __n128 (*v73)(_QWORD *, uint64_t);
  void (*v74)(uint64_t);
  _BYTE v75[24];
  void **v76;
  std::__shared_weak_count *v77;
  CFTypeRef cf;
  unsigned int v79;
  _BYTE buf[22];
  __int16 v81;
  unsigned __int16 *v82;
  __int128 v83;
  char *v84;
  __int128 v85;
  char v86;
  uint64_t (**v87)();
  uint64_t v88;
  unsigned __int16 v89[3];
  char v90;
  void *v91;
  __int128 __p;
  char *v93;
  __int128 v94;
  char v95;
  uint64_t (**p_p)();
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  void *v99;
  _QWORD *v100;
  uint64_t *v101;
  _BYTE v102[24];
  double v103;
  double v104;
  __int128 v105;
  std::__shared_weak_count *v106;
  void *v107;
  char v108;
  uint64_t v109;

  v3 = a1;
  v109 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v87 = &off_1E3D11D80;
  v88 = v4;
  sub_19BF86B60((uint64_t)v89, (unsigned __int16 *)(a1 + 16));
  __p = 0uLL;
  v93 = 0;
  v5 = *(_QWORD *)(v3 + 48);
  v6 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)buf = &__p;
  buf[8] = 0;
  if (v6 != v5)
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3);
    if (v7 >= 0x492492492492493)
      sub_19BF8EB40();
    v8 = (char *)sub_19C0257A8(v7);
    *(_QWORD *)&__p = v8;
    *((_QWORD *)&__p + 1) = v8;
    v93 = &v8[56 * v9];
    do
    {
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = *(_QWORD *)(v5 + 8);
      v10 = *(_QWORD *)(v5 + 16);
      *((_QWORD *)v8 + 2) = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      *((_QWORD *)v8 + 3) = *(_QWORD *)(v5 + 24);
      v13 = v8 + 32;
      if (*(char *)(v5 + 55) < 0)
      {
        sub_19BF8CD70(v13, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
      }
      else
      {
        v14 = *(_OWORD *)(v5 + 32);
        *((_QWORD *)v8 + 6) = *(_QWORD *)(v5 + 48);
        *(_OWORD *)v13 = v14;
      }
      v15 = *(const void **)v5;
      v5 += 56;
      sub_19BFEDC0C((const void **)v8, v15);
      v8 += 56;
    }
    while (v5 != v6);
    *((_QWORD *)&__p + 1) = v8;
  }
  v94 = *(_OWORD *)(v3 + 72);
  v95 = 1;
  v48 = a2 + 8;
  v49 = a2;
  if (*((_QWORD *)a2 + 1))
    v16 = *((_QWORD *)a2 + 1);
  else
    v16 = (uint64_t)(a2 + 8);
  v57 = v16;
  v17 = *a2;
  v58 = 0;
  v59 = v17;
  v60 = 0;
  sub_19BF8BB80(&v57);
  v53 = v16;
  v54 = v17;
  v55 = v17;
  v56 = 0;
  sub_19BF8BB80(&v53);
  v18 = (void **)MEMORY[0x1E0C809B0];
  v50 = v3;
  while (1)
  {
    if (v57 != v53)
      __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
    if (v58 == v54)
      break;
    v19 = v60;
    sub_19C02E704((uint64_t)&v51, *(_QWORD *)(v3 + 8), v60);
    if (v51)
    {
      v70 = 0;
      v71 = &v70;
      v72 = 0x4002000000;
      v73 = sub_19C025DAC;
      v74 = sub_19C025DD0;
      memset(v75, 0, sizeof(v75));
      v66 = 0;
      v67 = (double *)&v66;
      v68 = 0x2000000000;
      v69 = 0xFFF0000000000000;
      v21 = (uint64_t *)*((_QWORD *)&__p + 1);
      v20 = (uint64_t *)__p;
      if ((_QWORD)__p == *((_QWORD *)&__p + 1))
        goto LABEL_60;
      do
      {
        v22 = v88;
        v61[0] = v18;
        v61[1] = 0x40000000;
        v62 = sub_19C025DF8;
        v63 = &unk_1E3D17178;
        v64 = &v70;
        v65 = &v66;
        v79 = v19;
        v23 = (const void *)LXCursorCreateByAdvancingWithUTF32(*v20, &v79, 1);
        cf = v23;
        if (v23)
        {
          v24 = v20[2];
          v76 = (void **)v20[1];
          v77 = (std::__shared_weak_count *)v24;
          if (v24)
          {
            v25 = (unint64_t *)(v24 + 8);
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          sub_19C02665C((uint64_t)&v105, v23, (uint64_t)&v76, (uint64_t)(v20 + 3));
          v28 = v77;
          if (v77)
          {
            p_shared_owners = (unint64_t *)&v77->__shared_owners_;
            do
              v30 = __ldaxr(p_shared_owners);
            while (__stlxr(v30 - 1, p_shared_owners));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          if (cf)
            (*(void (**)(char *))(*((_QWORD *)cf + 2) + 72))((char *)cf + 16);
          else
            v27.n128_u64[0] = 0xFFF0000000000000;
          ((void (*)(_QWORD *, __int128 *, __n128))v62)(v61, &v105, v27);
          if (v108 < 0)
            operator delete(v107);
          v31 = v106;
          if (v106)
          {
            v32 = (unint64_t *)&v106->__shared_owners_;
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          if ((_QWORD)v105)
            CFRelease((CFTypeRef)v105);
          if (cf)
            CFRelease(cf);
        }
        sub_19C02E704((uint64_t)&v105, v22, v79);
        v34 = *v20;
        p_p = (uint64_t (**)())v18;
        v97 = 1174405120;
        v98 = sub_19C026ED0;
        v99 = &unk_1E3D17460;
        v101 = v20;
        *(_QWORD *)v102 = v22;
        if ((unsigned __int16)v105 < 0xFuLL)
        {
          *(_OWORD *)&v102[8] = v105;
        }
        else
        {
          *(_WORD *)&v102[8] = v105;
          *(_QWORD *)&v102[16] = operator new[]();
          memcpy(*(void **)&v102[16], *((const void **)&v105 + 1), *(unsigned __int16 *)&v102[8]);
        }
        v100 = v61;
        sub_19BFCFBC8(v34 + 16, (uint64_t)&p_p);
        if (*(unsigned __int16 *)&v102[8] >= 0xFu && *(_QWORD *)&v102[16])
          MEMORY[0x1A1AD0CB8](*(_QWORD *)&v102[16], 0x1000C8077774924);
        if ((unsigned __int16)v105 >= 0xFu && *((_QWORD *)&v105 + 1))
          MEMORY[0x1A1AD0CB8](*((_QWORD *)&v105 + 1), 0x1000C8077774924);
        v20 += 7;
      }
      while (v20 != v21);
      if (v71[5] == v71[6])
      {
LABEL_60:
        buf[0] = 0;
        v86 = 0;
        v3 = v50;
      }
      else
      {
        sub_19BFF782C((uint64_t)&v105, v89, v19);
        v3 = v50;
        v35 = ((double (*)(uint64_t (***)()))v87[10])(&v87);
        v36 = v67[3];
        v37 = v71;
        p_p = &off_1E3D11D80;
        v97 = v88;
        LODWORD(v98) = 0x100000;
        WORD2(v98) = 0;
        BYTE6(v98) = 0;
        v99 = 0;
        sub_19BF8A370((uint64_t)&v98, (unsigned __int16 *)&v105);
        *(_OWORD *)v102 = *(_OWORD *)(v37 + 5);
        *(_QWORD *)&v102[16] = v37[7];
        v37[5] = 0;
        v37[6] = 0;
        v37[7] = 0;
        v103 = v36;
        v104 = v35 + v36;
        sub_19C025514((uint64_t)buf, (uint64_t)&p_p);
        v86 = 1;
        p_p = &off_1E3D11D80;
        v76 = (void **)v102;
        sub_19C0253A4(&v76);
        if (v99 && BYTE6(v98) == 1)
          free(v99);
        if (*((_QWORD *)&v105 + 1) && BYTE6(v105) == 1)
          free(*((void **)&v105 + 1));
      }
      _Block_object_dispose(&v66, 8);
      _Block_object_dispose(&v70, 8);
      p_p = (uint64_t (**)())v75;
      sub_19C0253A4((void ***)&p_p);
      if (v95 == v86)
      {
        if (v95)
        {
          v88 = *(_QWORD *)&buf[8];
          sub_19BF8A370((uint64_t)v89, (unsigned __int16 *)&buf[16]);
          v38 = __p;
          if ((_QWORD)__p)
          {
            v39 = *((_QWORD *)&__p + 1);
            v40 = (void *)__p;
            if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
            {
              do
              {
                v39 -= 56;
                sub_19C0254D8(v39);
              }
              while (v39 != v38);
              v40 = (void *)__p;
            }
            *((_QWORD *)&__p + 1) = v38;
            operator delete(v40);
          }
          __p = v83;
          v93 = v84;
          v84 = 0;
          v83 = 0uLL;
          v94 = v85;
        }
      }
      else if (v95)
      {
        v87 = &off_1E3D11D80;
        p_p = (uint64_t (**)())&__p;
        sub_19C0253A4((void ***)&p_p);
        if (v91 && v90 == 1)
          free(v91);
        v95 = 0;
      }
      else
      {
        sub_19C025514((uint64_t)&v87, (uint64_t)buf);
        v95 = 1;
      }
      sub_19C025D48((uint64_t)buf);
      if (!v95)
      {
        if (v51 >= 0xFu && v52)
          MEMORY[0x1A1AD0CB8](v52, 0x1000C8077774924);
        break;
      }
      if (v51 >= 0xFu)
      {
        if (v52)
          MEMORY[0x1A1AD0CB8](v52, 0x1000C8077774924);
      }
    }
    sub_19BF8BB80(&v57);
  }
  if (qword_1EE4177D0 != -1)
    dispatch_once(&qword_1EE4177D0, &unk_1E3D17208);
  v41 = qword_1EE4177C8;
  if (os_log_type_enabled((os_log_t)qword_1EE4177C8, OS_LOG_TYPE_DEBUG))
  {
    if (v95)
      v44 = "success";
    else
      v44 = "fail";
    v45 = *(_QWORD *)(v3 + 24);
    v46 = (unsigned __int16 *)*((_QWORD *)v49 + 1);
    if (!v45)
      v45 = v3 + 32;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v44;
    v47 = v48;
    if (v46)
      v47 = v46;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v45;
    v81 = 2080;
    v82 = v47;
    _os_log_debug_impl(&dword_19BF85000, v41, OS_LOG_TYPE_DEBUG, "create_child (%s): \"%s\" + \"%s\"", buf, 0x20u);
  }
  if (v95)
    v42 = sub_19C025328((uint64_t)&v87);
  else
    v42 = 0;
  sub_19C025D48((uint64_t)&v87);
  return v42;
}

void sub_19C0240E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  sub_19C025D48((uint64_t)&a66);
  _Unwind_Resume(a1);
}

BOOL sub_19C024228(uint64_t a1, uint64_t a2)
{
  return a2 + 16 == a1;
}

BOOL sub_19C024238(uint64_t a1)
{
  return *(_WORD *)(a1 + 16) == 0;
}

BOOL sub_19C024248(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  if (((*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1) & 1) != 0)
    return 0;
  v2 = (uint64_t *)a1[6];
  v3 = (uint64_t *)a1[7];
  if (v2 == v3)
    return 0;
  v4 = MEMORY[0x1E0C809B0];
  do
  {
    v5 = a1[1];
    v11 = 0;
    v12 = &v11;
    v13 = 0x2000000000;
    v14 = 0;
    v6 = *v2;
    v10[0] = v4;
    v10[1] = 0x40000000;
    v10[2] = sub_19C0266DC;
    v10[3] = &unk_1E3D17360;
    v10[5] = v2;
    v10[6] = v5;
    v10[4] = &v11;
    sub_19BFCFBC8(v6 + 16, (uint64_t)v10);
    v7 = *((unsigned __int8 *)v12 + 24);
    v8 = *((_BYTE *)v12 + 24) != 0;
    _Block_object_dispose(&v11, 8);
    if (v7)
      break;
    v2 += 7;
  }
  while (v2 != v3);
  return v8;
}

void sub_19C024348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C024360(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[7];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD v16[7];
  __int128 buf;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD *);
  uint64_t (*v20)(uint64_t);
  _BYTE v21[32];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (qword_1EE4177D0 != -1)
    dispatch_once(&qword_1EE4177D0, &unk_1E3D17208);
  v4 = qword_1EE4177C8;
  if (os_log_type_enabled((os_log_t)qword_1EE4177C8, OS_LOG_TYPE_DEBUG))
  {
    v10 = (_QWORD *)a1[3];
    if (!v10)
      v10 = a1 + 4;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v10;
    _os_log_debug_impl(&dword_19BF85000, v4, OS_LOG_TYPE_DEBUG, "enumerate_entries: \"%s\"", (uint8_t *)&buf, 0xCu);
  }
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v18 = 0x5002000000;
  v19 = sub_19C0258EC;
  v20 = sub_19C02595C;
  memset(v21, 0, sizeof(v21));
  v22 = 1065353216;
  v5 = (uint64_t *)a1[6];
  v6 = (uint64_t *)a1[7];
  if (v5 != v6)
  {
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      v8 = a1[1];
      v11[0] = v7;
      v11[1] = 0x40000000;
      v11[2] = sub_19C025964;
      v11[3] = &unk_1E3D171A0;
      v11[4] = a2;
      v11[5] = &buf;
      v11[6] = &v12;
      v9 = *v5;
      v16[0] = v7;
      v16[1] = 0x40000000;
      v16[2] = sub_19C027520;
      v16[3] = &unk_1E3D17498;
      v16[5] = v5;
      v16[6] = v8;
      v16[4] = v11;
      sub_19BFCFBC8(v9 + 16, (uint64_t)v16);
      if (*((_BYTE *)v13 + 24))
        break;
      v5 += 7;
    }
    while (v5 != v6);
  }
  _Block_object_dispose(&buf, 8);
  sub_19BFE76AC((uint64_t)v21);
  _Block_object_dispose(&v12, 8);
}

void sub_19C024580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  sub_19BFE76AC(a10);
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0245AC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v1 = (uint64_t *)a1[6];
  v2 = (uint64_t *)a1[7];
  if (v1 != v2)
  {
    v4 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v5 = a1[1];
      if (*v1)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(*v1 + 16) + 56))(*v1 + 16) & 1) != 0)
          return 1;
        v6 = *v1;
      }
      else
      {
        v6 = 0;
      }
      v11 = 0;
      v12 = &v11;
      v13 = 0x2000000000;
      v14 = 0;
      v10[0] = v4;
      v10[1] = 0x40000000;
      v10[2] = sub_19C026804;
      v10[3] = &unk_1E3D173B0;
      v10[5] = v1;
      v10[6] = v5;
      v10[4] = &v11;
      sub_19BFCFBC8(v6 + 16, (uint64_t)v10);
      v7 = *((unsigned __int8 *)v12 + 24);
      v8 = *((_BYTE *)v12 + 24) != 0;
      _Block_object_dispose(&v11, 8);
      if (!v7)
      {
        v1 += 7;
        if (v1 != v2)
          continue;
      }
      return v8;
    }
  }
  return 0;
}

void sub_19C0246C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0246DC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  double v12;
  double v13;
  uint64_t v14;
  void **v15;
  int v16;
  uint64_t v18;
  unsigned __int8 v20;
  _QWORD v21[6];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD *);
  uint64_t (*v26)(uint64_t);
  _OWORD v27[2];
  int v28;
  void **v29;
  __int128 buf;
  void (*v31)(_QWORD *, uint64_t);
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, _QWORD *);
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (qword_1EE4177D0 != -1)
    dispatch_once(&qword_1EE4177D0, &unk_1E3D17208);
  v3 = qword_1EE4177C8;
  if (os_log_type_enabled((os_log_t)qword_1EE4177C8, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(_QWORD *)(a1 + 24);
    if (!v18)
      v18 = a1 + 32;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v18;
    _os_log_debug_impl(&dword_19BF85000, v3, OS_LOG_TYPE_DEBUG, "enumerate_children: \"%s\"", (uint8_t *)&buf, 0xCu);
  }
  v22 = 0;
  v23 = &v22;
  v24 = 0x5002000000;
  v25 = sub_19C024DA4;
  v26 = sub_19C024E14;
  memset(v27, 0, sizeof(v27));
  v28 = 1065353216;
  v4 = *(_QWORD **)(a1 + 48);
  v5 = *(_QWORD **)(a1 + 56);
  if (v4 == v5)
  {
    v10 = &v22;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      v7 = *(_QWORD *)(a1 + 8);
      v21[0] = v6;
      v21[1] = 0x40000000;
      v21[2] = sub_19C024E1C;
      v21[3] = &unk_1E3D171C8;
      v21[4] = &v22;
      v21[5] = a1;
      v8 = *v4;
      v39 = v6;
      v40 = 0x40000000;
      v41 = sub_19C026878;
      v42 = &unk_1E3D173D8;
      v43 = v21;
      v44 = v4;
      if (v8)
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(v8 + 16) + 64))(v8 + 16, &v39);
      v9 = *v4;
      *(_QWORD *)&buf = v6;
      *((_QWORD *)&buf + 1) = 0x40000000;
      v31 = sub_19C0269D8;
      v32 = &unk_1E3D17400;
      v34 = v4;
      *(_QWORD *)&v35 = v7;
      v33 = v21;
      sub_19BFCFBC8(v9 + 16, (uint64_t)&buf);
      v4 += 7;
    }
    while (v4 != v5);
    v10 = v23;
  }
  v11 = v10 + 7;
  v20 = 0;
  do
  {
    v11 = (_QWORD *)*v11;
    if (!v11)
      break;
    v12 = *((double *)v11 + 8);
    v13 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    sub_19BFF782C((uint64_t)&v39, (unsigned __int16 *)(a1 + 16), *((_DWORD *)v11 + 8));
    v14 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&buf = &off_1E3D11D80;
    *((_QWORD *)&buf + 1) = v14;
    LODWORD(v31) = 0x100000;
    WORD2(v31) = 0;
    BYTE6(v31) = 0;
    v32 = 0;
    sub_19BF8A370((uint64_t)&v31, (unsigned __int16 *)&v39);
    v35 = 0uLL;
    v36 = 0;
    v35 = *(_OWORD *)(v11 + 5);
    v36 = v11[7];
    v11[5] = 0;
    v11[6] = 0;
    v11[7] = 0;
    v37 = v12;
    v38 = v12 + v13;
    v15 = (void **)sub_19C025328((uint64_t)&buf);
    v29 = v15;
    (*(void (**)(uint64_t, void **, unsigned __int8 *))(a2 + 16))(a2, v15, &v20);
    v16 = v20;
    if (v15)
      CFRelease(v15);
    v29 = (void **)&v35;
    *(_QWORD *)&buf = &off_1E3D11D80;
    sub_19C0253A4(&v29);
    if (v32 && BYTE6(v31) == 1)
      free(v32);
    if (v40 && BYTE6(v39) == 1)
      free((void *)v40);
  }
  while (!v16);
  _Block_object_dispose(&v22, 8);
  return sub_19C025414((uint64_t)v27);
}

void sub_19C024A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_19C024A8C(uint64_t a1)
{
  return *(double *)(a1 + 72);
}

double sub_19C024A94(uint64_t a1)
{
  return *(double *)(a1 + 80);
}

void sub_19C024A9C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _QWORD v9[6];
  uint64_t v10;
  double *v11;
  uint64_t v12;
  unint64_t v13;

  if (((*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1) & 1) == 0)
  {
    v2 = (uint64_t *)a1[6];
    v3 = (uint64_t *)a1[7];
    if (v2 != v3)
    {
      v4 = -INFINITY;
      v5 = MEMORY[0x1E0C809B0];
      do
      {
        v6 = a1[1];
        v10 = 0;
        v11 = (double *)&v10;
        v12 = 0x2000000000;
        v13 = 0xFFF0000000000000;
        v7 = *v2;
        v9[0] = v5;
        v9[1] = 0x40000000;
        v9[2] = sub_19C0267A8;
        v9[3] = &unk_1E3D17388;
        v9[4] = &v10;
        v9[5] = v6;
        sub_19BFCFBC8(v7 + 16, (uint64_t)v9);
        v8 = v11[3] / 2.30258509;
        _Block_object_dispose(&v10, 8);
        if (v4 < v8)
          v4 = v8;
        v2 += 7;
      }
      while (v2 != v3);
    }
  }
}

void sub_19C024BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C024BE0()
{
  return 0;
}

uint64_t sub_19C024BE8()
{
  return 0;
}

const void *sub_19C024BF0(uint64_t a1)
{
  const void *v1;
  const void *v3;

  sub_19BF8CFAC((CFStringRef *)&v3, (unsigned __int16 *)(a1 + 16));
  v1 = v3;
  v3 = 0;
  sub_19BF8DAB8(&v3);
  return v1;
}

uint64_t sub_19C024C30(uint64_t a1)
{
  return sub_19C024D3C((unsigned __int16 *)(a1 + 16));
}

uint64_t sub_19C024C38()
{
  return 0;
}

uint64_t sub_19C024C40(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 *v7;
  const void *v8;

  sub_19BF8CFAC((CFStringRef *)&v8, (unsigned __int16 *)(a1 + 16));
  (*(void (**)(uint64_t *__return_ptr, _QWORD, const void *))(**(_QWORD **)(a1 + 8) + 96))(&v6, *(_QWORD *)(a1 + 8), v8);
  if ((unsigned __int16)v6 <= 0xEu)
    v2 = (unsigned __int8 *)&v6 + 2;
  else
    v2 = v7;
  v3 = sub_19BFF79A0(v2, (unsigned __int16)v6);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
  if ((unsigned __int16)v6 >= 0xFu && v7)
    MEMORY[0x1A1AD0CB8](v7, 0x1000C8077774924);
  sub_19BF8DAB8(&v8);
  return v4 ^ v3;
}

void sub_19C024CF8(_Unwind_Exception *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (a3 >= 0xFu)
  {
    if (a4)
      MEMORY[0x1A1AD0CB8](a4, 0x1000C8077774924);
  }
  sub_19BF8DAB8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C024D3C(unsigned __int16 *a1)
{
  int v1;
  unsigned __int16 *v2;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = (unsigned __int16 *)*((_QWORD *)a1 + 1);
  if (!v2)
    v2 = a1 + 8;
  *(_QWORD *)&v4 = v2;
  DWORD2(v4) = v1;
  HIDWORD(v4) = v1;
  LODWORD(v5) = 0;
  sub_19BF8BB80((uint64_t *)&v4);
  v6 = v4;
  v7 = v5;
  sub_19BFF6B48(&v6);
  return v7;
}

uint64_t sub_19C024DA4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = a2[6];
  a2[6] = 0;
  v5 = a2[7];
  v3 = a2 + 7;
  v4 = v5;
  *(_QWORD *)(result + 56) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 56;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_19C024E14(uint64_t a1)
{
  return sub_19C025414(a1 + 40);
}

uint64_t sub_19C024E1C(uint64_t a1, uint64_t a2, __int128 *a3, double a4)
{
  unint64_t v4;
  int v7;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *i;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  float v22;
  float v23;
  _BOOL4 v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  double v42;
  uint64_t result;
  void *v44;
  __int128 v45;
  _QWORD v46[2];
  char v47;

  v7 = a2;
  sub_19C02E704((uint64_t)&v45, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), a2);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v10 = (unsigned __int16)v45;
  if ((unsigned __int16)v45 <= 0xEu)
    v11 = (unsigned __int8 *)&v45 + 2;
  else
    v11 = (unsigned __int8 *)*((_QWORD *)&v45 + 1);
  v12 = sub_19BFF79A0(v11, (unsigned __int16)v45);
  v13 = v12;
  v14 = *(_QWORD *)(v9 + 48);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v4 = v12;
      if (v14 <= v12)
        v4 = v12 % v14;
    }
    else
    {
      v4 = ((_DWORD)v14 - 1) & v12;
    }
    v17 = *(uint64_t ***)(*(_QWORD *)(v9 + 40) + 8 * v4);
    if (v17)
    {
      for (i = *v17; i; i = (uint64_t *)*i)
      {
        v19 = i[1];
        if (v19 == v13)
        {
          if (sub_19BFED000((unsigned __int16 *)i + 8, (unsigned __int16 *)&v45))
            goto LABEL_78;
        }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= v14)
              v19 %= v14;
          }
          else
          {
            v19 &= v14 - 1;
          }
          if (v19 != v4)
            break;
        }
      }
    }
  }
  v20 = operator new(0x48uLL);
  v21 = (_QWORD *)(v9 + 56);
  v46[0] = v20;
  v46[1] = v9 + 56;
  *v20 = 0;
  v20[1] = v13;
  *((_OWORD *)v20 + 1) = v45;
  if (v10 >= 0xF)
    LOWORD(v45) = 0;
  *((_OWORD *)v20 + 2) = 0u;
  *((_OWORD *)v20 + 3) = 0u;
  v20[8] = 0xFFF0000000000000;
  v47 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(v9 + 64) + 1);
  v23 = *(float *)(v9 + 72);
  if (!v14 || (float)(v23 * (float)v14) < v22)
  {
    v24 = (v14 & (v14 - 1)) == 0;
    if (v14 < 3)
      v24 = 0;
    v25 = (2 * v14) | !v24;
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = (int8x8_t)v26;
    else
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v14 = *(_QWORD *)(v9 + 48);
    }
    if (*(_QWORD *)&prime <= v14)
    {
      if (*(_QWORD *)&prime >= v14)
        goto LABEL_65;
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(v9 + 64) / *(float *)(v9 + 72));
      if (v14 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (*(_QWORD *)&prime <= v34)
        prime = (int8x8_t)v34;
      if (*(_QWORD *)&prime >= v14)
      {
        v14 = *(_QWORD *)(v9 + 48);
        goto LABEL_65;
      }
      if (!*(_QWORD *)&prime)
      {
        v44 = *(void **)(v9 + 40);
        *(_QWORD *)(v9 + 40) = 0;
        if (v44)
          operator delete(v44);
        v14 = 0;
        *(_QWORD *)(v9 + 48) = 0;
        goto LABEL_65;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      sub_19BF8E6D0();
    v28 = operator new(8 * *(_QWORD *)&prime);
    v29 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v28;
    if (v29)
      operator delete(v29);
    v30 = 0;
    *(int8x8_t *)(v9 + 48) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8 * v30++) = 0;
    while (*(_QWORD *)&prime != v30);
    v31 = (_QWORD *)*v21;
    if (*v21)
    {
      v32 = v31[1];
      v33 = (uint8x8_t)vcnt_s8(prime);
      v33.i16[0] = vaddlv_u8(v33);
      if (v33.u32[0] > 1uLL)
      {
        if (v32 >= *(_QWORD *)&prime)
          v32 %= *(_QWORD *)&prime;
      }
      else
      {
        v32 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8 * v32) = v21;
      v37 = (_QWORD *)*v31;
      if (*v31)
      {
        do
        {
          v38 = v37[1];
          if (v33.u32[0] > 1uLL)
          {
            if (v38 >= *(_QWORD *)&prime)
              v38 %= *(_QWORD *)&prime;
          }
          else
          {
            v38 &= *(_QWORD *)&prime - 1;
          }
          if (v38 != v32)
          {
            v39 = *(_QWORD *)(v9 + 40);
            if (!*(_QWORD *)(v39 + 8 * v38))
            {
              *(_QWORD *)(v39 + 8 * v38) = v31;
              goto LABEL_61;
            }
            *v31 = *v37;
            *v37 = **(_QWORD **)(*(_QWORD *)(v9 + 40) + 8 * v38);
            **(_QWORD **)(*(_QWORD *)(v9 + 40) + 8 * v38) = v37;
            v37 = v31;
          }
          v38 = v32;
LABEL_61:
          v31 = v37;
          v37 = (_QWORD *)*v37;
          v32 = v38;
        }
        while (v37);
      }
    }
    v14 = (unint64_t)prime;
LABEL_65:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v14 <= v13)
        v13 %= v14;
    }
    else
    {
      v13 = ((_DWORD)v14 - 1) & v13;
    }
    goto LABEL_69;
  }
  v13 = v4;
LABEL_69:
  v40 = *(_QWORD **)(*(_QWORD *)(v9 + 40) + 8 * v13);
  if (v40)
  {
    *(_QWORD *)v46[0] = *v40;
    *v40 = v46[0];
  }
  else
  {
    *(_QWORD *)v46[0] = *(_QWORD *)(v9 + 56);
    *(_QWORD *)(v9 + 56) = v46[0];
    *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8 * v13) = v21;
    if (*(_QWORD *)v46[0])
    {
      v41 = *(_QWORD *)(*(_QWORD *)v46[0] + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v41 >= v14)
          v41 %= v14;
      }
      else
      {
        v41 &= v14 - 1;
      }
      *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8 * v41) = v46[0];
    }
  }
  i = (uint64_t *)v46[0];
  v46[0] = 0;
  ++*(_QWORD *)(v9 + 64);
  sub_19C0255D8((uint64_t)v46);
LABEL_78:
  *((_DWORD *)i + 8) = v7;
  v42 = *((double *)i + 8);
  if (v42 < a4)
    v42 = a4;
  *((double *)i + 8) = v42;
  result = sub_19C02561C(i + 5, a3);
  if ((unsigned __int16)v45 >= 0xFu)
  {
    result = *((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1))
      return MEMORY[0x1A1AD0CB8](*((_QWORD *)&v45 + 1), 0x1000C8077774924);
  }
  return result;
}

void sub_19C0252E4(_Unwind_Exception *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C0255D8((uint64_t)va);
  if (a3 >= 0xFu)
  {
    if (a4)
      MEMORY[0x1A1AD0CB8](a4, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C025328(uint64_t a1)
{
  uint64_t Instance;

  if (qword_1ED024388 != -1)
    dispatch_once(&qword_1ED024388, &unk_1E3D17248);
  Instance = _CFRuntimeCreateInstance();
  sub_19C025514(Instance + 16, a1);
  return Instance;
}

void sub_19C0253A4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_19C0254D8(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_19C025414(uint64_t a1)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  void *v4;

  v2 = *(unsigned __int16 **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(unsigned __int16 **)v2;
      sub_19C025470(v2 + 8);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_19C025470(unsigned __int16 *a1)
{
  void **v2;

  v2 = (void **)(a1 + 12);
  sub_19C0253A4(&v2);
  if (*a1 >= 0xFu)
  {
    if (*((_QWORD *)a1 + 1))
      JUMPOUT(0x1A1AD0CB8);
  }
}

void sub_19C0254D8(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  sub_19BFACCEC(a1 + 8);
  sub_19BFAD520((const void **)a1, 0);
}

uint64_t sub_19C025514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &off_1E3D11D80;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = 0x100000;
  *(_WORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 22) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_19BF8A370(a1 + 16, (unsigned __int16 *)(a2 + 16));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t sub_19C02558C()
{
  uint64_t result;

  qword_1ED024390 = 0;
  *(_QWORD *)algn_1ED024398 = "LXCursor";
  qword_1ED0243A0 = 0;
  unk_1ED0243A8 = 0;
  qword_1ED0243B0 = (uint64_t)sub_19BFCFB34;
  unk_1ED0243B8 = 0u;
  unk_1ED0243C8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0243F0 = result;
  return result;
}

uint64_t sub_19C0255D8(uint64_t a1)
{
  unsigned __int16 *v2;

  v2 = *(unsigned __int16 **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_19C025470(v2 + 8);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19C02561C(uint64_t *a1, __int128 *a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0x492492492492492)
      sub_19BF8EB40();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x249249249249249)
      v12 = 0x492492492492492;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v12 = (unint64_t)sub_19C0257A8(v12);
    else
      v13 = 0;
    v14 = v12;
    v15 = v12 + 56 * v9;
    v17 = v12 + 56 * v13;
    sub_19C025738(v15, a2);
    v16 = v15 + 56;
    sub_19C0257F0(a1, &v14);
    v8 = a1[1];
    result = sub_19C025874((uint64_t)&v14);
  }
  else
  {
    result = sub_19C025738(v6, a2);
    v8 = result + 56;
  }
  a1[1] = v8;
  return result;
}

uint64_t sub_19C025738(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)a1 = v3;
  v4 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a1 + 32;
  if (*((char *)a2 + 55) < 0)
  {
    sub_19BF8CD70((_BYTE *)v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v6 = a2[2];
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 6);
    *(_OWORD *)v5 = v6;
  }
  return a1;
}

void *sub_19C0257A8(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    sub_19BF8E6D0();
  return operator new(56 * a1);
}

uint64_t sub_19C0257F0(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 = (__int128 *)((char *)v4 - 56);
    result = sub_19C025738(result - 56, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19C025874(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    sub_19C0254D8(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

os_log_t sub_19C0258C0()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "MorphemeLevelLexiconCursor");
  qword_1EE4177C8 = (uint64_t)result;
  return result;
}

uint64_t sub_19C0258EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = a2[6];
  a2[6] = 0;
  v5 = a2[7];
  v3 = a2 + 7;
  v4 = v5;
  *(_QWORD *)(result + 56) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 56;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_19C02595C(uint64_t a1)
{
  return sub_19BFE76AC(a1 + 40);
}

void sub_19C025964(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int16 **v15;
  unsigned __int16 *i;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34[2];
  char v35;
  uint8_t buf[4];
  _BYTE v37[12];
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  sub_19BFD54EC((uint64_t)buf, (unsigned __int16 *)(a2 + 16));
  v7 = (uint64_t *)(v6 + 40);
  v8 = *(void **)&v37[4];
  if (*(_QWORD *)&v37[4])
    v9 = *(unsigned __int8 **)&v37[4];
  else
    v9 = (unsigned __int8 *)v38;
  v10 = sub_19BFF79A0(v9, *(unsigned __int16 *)buf);
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 48);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v12 <= v10)
        v3 = v10 % v12;
    }
    else
    {
      v3 = ((_DWORD)v12 - 1) & v10;
    }
    v15 = *(unsigned __int16 ***)(*v7 + 8 * v3);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int16 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if (i + 8 == (unsigned __int16 *)buf || sub_19BFF7920(i + 8, (unsigned __int16 *)buf))
          {
            v29 = 1;
            if (!v8)
              goto LABEL_46;
            goto LABEL_44;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v3)
            break;
        }
      }
    }
  }
  v18 = operator new(0x30uLL);
  v19 = (_QWORD *)(v6 + 56);
  v34[0] = (uint64_t)v18;
  v34[1] = v6 + 56;
  *v18 = 0;
  v18[1] = v11;
  *((_DWORD *)v18 + 4) = 0x100000;
  *((_WORD *)v18 + 10) = 0;
  *((_BYTE *)v18 + 22) = 0;
  v18[3] = 0;
  sub_19BF8A370((uint64_t)(v18 + 2), (unsigned __int16 *)buf);
  v35 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(v6 + 64) + 1);
  v21 = *(float *)(v6 + 72);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    v22 = 1;
    if (v12 >= 3)
      v22 = (v12 & (v12 - 1)) != 0;
    v23 = v22 | (2 * v12);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_19BFD1648(v6 + 40, v25);
    v12 = *(_QWORD *)(v6 + 48);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v12 <= v11)
        v3 = v11 % v12;
      else
        v3 = v11;
    }
    else
    {
      v3 = ((_DWORD)v12 - 1) & v11;
    }
  }
  v26 = *v7;
  v27 = *(_QWORD **)(*v7 + 8 * v3);
  if (v27)
  {
    *v18 = *v27;
  }
  else
  {
    *v18 = *v19;
    *v19 = v18;
    *(_QWORD *)(v26 + 8 * v3) = v19;
    if (!*v18)
      goto LABEL_43;
    v28 = *(_QWORD *)(*v18 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v28 >= v12)
        v28 %= v12;
    }
    else
    {
      v28 &= v12 - 1;
    }
    v27 = (_QWORD *)(*v7 + 8 * v28);
  }
  *v27 = v18;
LABEL_43:
  v34[0] = 0;
  ++*(_QWORD *)(v6 + 64);
  sub_19BFE7718(v34);
  v29 = 0;
  v8 = *(void **)&v37[4];
  if (!*(_QWORD *)&v37[4])
    goto LABEL_46;
LABEL_44:
  if (v37[2] == 1)
    free(v8);
LABEL_46:
  if ((v29 & 1) == 0)
  {
    if (qword_1EE4177D0 != -1)
      dispatch_once(&qword_1EE4177D0, &unk_1E3D17208);
    v30 = qword_1EE4177C8;
    if (os_log_type_enabled((os_log_t)qword_1EE4177C8, OS_LOG_TYPE_DEBUG))
    {
      v32 = *(_QWORD *)(a2 + 24);
      if (!v32)
        v32 = a2 + 32;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v37 = v32;
      _os_log_debug_impl(&dword_19BF85000, v30, OS_LOG_TYPE_DEBUG, " entry: \"%s\"", buf, 0xCu);
    }
    v31 = a1 + 48;
    (*(void (**)(void))(*(_QWORD *)(v31 - 16) + 16))();
    *a3 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v31 + 8) + 24);
  }
}

void sub_19C025D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, void *a18)
{
  sub_19BFE7718(&a12);
  if (a18)
  {
    if (a17 == 1)
      free(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C025D48(uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(_BYTE *)(a1 + 88))
  {
    *(_QWORD *)a1 = &off_1E3D11D80;
    v4 = (void **)(a1 + 48);
    sub_19C0253A4(&v4);
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      if (*(_BYTE *)(a1 + 22) == 1)
        free(v2);
    }
  }
  return a1;
}

__n128 sub_19C025DAC(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_19C025DD0(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_19C0253A4(&v1);
}

uint64_t sub_19C025DF8(uint64_t a1, __int128 *a2, double a3)
{
  uint64_t result;
  uint64_t v6;
  double v7;

  result = sub_19C02561C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(double *)(v6 + 24);
  if (v7 < a3)
    v7 = a3;
  *(double *)(v6 + 24) = v7;
  return result;
}

uint64_t sub_19C025E48(uint64_t *a1, _QWORD *a2, unint64_t a3)
{
  char *v7;
  uint64_t v8;

  if (a3 >= 0xF)
  {
    if (*a2 == 0x2065766F6C206557 && *(_QWORD *)((char *)a2 + 7) == 0x2E61736972614D20)
    {
      sub_19BF8F0D8(a1 + 2, (uint64_t)a2, a3);
      return 1;
    }
  }
  else if (a3 < 4)
  {
    return 0;
  }
  v7 = (char *)a2 + 4;
  v8 = *(unsigned int *)a2;
  sub_19BF8F0D8(a1 + 2, (uint64_t)a2 + 4, v8);
  a1[3] = (uint64_t)&v7[v8];
  a1[4] = (a3 - v8 - 4) >> 2;
  return 1;
}

os_log_t sub_19C025F00()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "POSHistoryTrie");
  qword_1EE4177D8 = (uint64_t)result;
  return result;
}

void sub_19C025F2C(uint64_t a1, uint64_t a2, _QWORD *a3, __int16 a4)
{
  char v5;
  _BYTE *v6;
  uint64_t v7;
  __int128 __p;
  uint64_t v9;
  __int16 v10;

  v10 = a4;
  if (*a3 == 0xFFFFFFFFLL)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    sub_19BF8F4E4((uint64_t *)(a2 + 32), (uint64_t)&v10, 2uLL, (uint64_t)a3, &v7);
    if (v7 == 0xFFFFFFFFLL)
    {
      v5 = 0;
      *(_BYTE *)a1 = 0;
    }
    else
    {
      *(_QWORD *)a1 = v7;
      v6 = (_BYTE *)(a1 + 8);
      if (SHIBYTE(v9) < 0)
      {
        sub_19BF8CD70(v6, (void *)__p, *((unint64_t *)&__p + 1));
      }
      else
      {
        *(_OWORD *)v6 = __p;
        *(_QWORD *)(a1 + 24) = v9;
      }
      v5 = 1;
    }
    *(_BYTE *)(a1 + 32) = v5;
    if (SHIBYTE(v9) < 0)
      operator delete((void *)__p);
  }
}

void sub_19C025FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C026010(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v8;

  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 112))(a1))
    return 0;
  v8 = 0;
  v6 = sub_19BF8F304(a1 + 2, a2, (uint64_t *)&v8);
  if ((_DWORD)v6)
    *a3 = sub_19C02608C((uint64_t)a1, v8);
  return v6;
}

unint64_t sub_19C02608C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  std::logic_error *exception;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (v2 <= a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_19BFADD78(exception, "Marisa Payload");
      __cxa_throw(exception, (struct type_info *)off_1E3D0FF68, MEMORY[0x1E0DE42E0]);
    }
    return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * a2);
  }
  return a2;
}

void sub_19C0260F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C026104(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE v6[8];
  void *__p;
  char v8;
  char v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  sub_19C025F2C((uint64_t)v6, a1, a2, 0);
  if (!v9)
    return;
  v11[0] = &off_1E3D12948;
  v11[1] = &v10;
  v12 = v11;
  sub_19C026240((unint64_t *)(a1 + 16), (uint64_t)v6, (uint64_t)v11, 0xFFFFFFFFLL);
  v4 = v12;
  if (v12 == v11)
  {
    v5 = 4;
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_7;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_7:
  if (v9)
  {
    if (v8 < 0)
      operator delete(__p);
  }
}

void sub_19C0261E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a22;
  if (a22 == v22)
  {
    v25 = 4;
    v24 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C026240(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)(*(uint64_t (**)(unint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v10[0] = &off_1E3D12478;
    v10[1] = a1;
    v10[2] = a3;
    v11 = v10;
    sub_19BF8F544(a1 + 2, a2, (uint64_t)v10, a4);
    result = v11;
    if (v11 == v10)
    {
      v9 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  return result;
}

void sub_19C026308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C026344()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C026358(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D12478;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C026390(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D12478;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C0263B0(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *a3;
  v7 = (unint64_t)a3[1] >> 1;
  v8 = sub_19C02608C(*(_QWORD *)(a1 + 8), *a2);
  return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8, v6, v7, a4);
}

uint64_t sub_19C026404(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D116C0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C026440()
{
  return &unk_1E3D116C0;
}

void sub_19C026450()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C026464(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D12948;
  result[1] = v3;
  return result;
}

uint64_t sub_19C026498(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D12948;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C0264B4(uint64_t result, uint64_t a2, int **a3, _BYTE *a4)
{
  unint64_t v5;
  int *v6;
  uint64_t v7;
  int *v8;
  int v9;
  char v10;

  v6 = *a3;
  v5 = (unint64_t)a3[1];
  v10 = 0;
  if (v5 >= 2)
  {
    v7 = result;
    v8 = &v6[v5 >> 1];
    do
    {
      v9 = *v6;
      if (*v6 < 0)
      {
        result = (*(uint64_t (**)(void))(**(_QWORD **)(v7 + 8) + 16))();
        if (v10)
          break;
      }
      if ((v9 & 0x40000000) != 0)
      {
        result = (*(uint64_t (**)(void))(**(_QWORD **)(v7 + 8) + 16))();
        if (v10)
          break;
      }
      ++v6;
    }
    while (v6 != v8);
  }
  *a4 = 1;
  return result;
}

uint64_t sub_19C026570(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D117A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0265AC()
{
  return &unk_1E3D117A0;
}

uint64_t sub_19C0265B8(uint64_t a1, CFTypeRef cf)
{
  char *v3;
  __int128 v4;

  *(_QWORD *)a1 = CFRetain(cf);
  v3 = (char *)operator new(0x80uLL);
  *(_OWORD *)(v3 + 8) = 0u;
  *(_QWORD *)v3 = &off_1E3D12A68;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *((_QWORD *)v3 + 13) = 0;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_WORD *)v3 + 13) = 16;
  v3[30] = 0;
  v3[40] = 0;
  *(_QWORD *)(v3 + 61) = 0;
  *((_QWORD *)v3 + 7) = 0;
  *(_OWORD *)(v3 + 72) = 0u;
  *((_QWORD *)v3 + 11) = 0xFFFFFFFFLL;
  *((_DWORD *)v3 + 25) = 0;
  *((_OWORD *)v3 + 7) = 0u;
  *(_QWORD *)&v4 = v3 + 24;
  *((_QWORD *)&v4 + 1) = v3;
  *(_OWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

uint64_t sub_19C02665C(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4)
{
  _BYTE *v7;
  __int128 v8;

  *(_QWORD *)a1 = CFRetain(cf);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a4;
  v7 = (_BYTE *)(a1 + 32);
  if (*(char *)(a4 + 31) < 0)
  {
    sub_19BF8CD70(v7, *(void **)(a4 + 8), *(_QWORD *)(a4 + 16));
  }
  else
  {
    v8 = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a4 + 24);
    *(_OWORD *)v7 = v8;
  }
  return a1;
}

void sub_19C0266DC(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  BOOL v5;
  char v6;
  _QWORD v7[3];
  char v8;
  char v9;
  int v10;

  sub_19C025F2C((uint64_t)v7, a1[6] + 30800, (_QWORD *)(a1[5] + 24), *(_WORD *)(a2 + 76));
  if (v9)
    v5 = v7[0] == 0xFFFFFFFFLL;
  else
    v5 = 1;
  if (v5)
    v6 = 0;
  else
    v6 = sub_19C026010((uint64_t *)(a1[6] + 30816), (uint64_t)v7, &v10);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v6;
  *a3 = v6;
  if (v9)
  {
    if (v8 < 0)
      operator delete((void *)v7[1]);
  }
}

void sub_19C026784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0267A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  uint64_t v5;

  result = sub_19BFAC58C(*(_QWORD *)(a1 + 40) + 30264, *(unsigned __int16 *)(a2 + 78), 0);
  v4 = (double)(int)result / -800.0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(double *)(v5 + 24) >= v4)
    v4 = *(double *)(v5 + 24);
  *(double *)(v5 + 24) = v4;
  return result;
}

void sub_19C026804(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  char v5;
  _BYTE v6[8];
  void *__p;
  char v8;
  char v9;

  sub_19C025F2C((uint64_t)v6, a1[6] + 30800, (_QWORD *)(a1[5] + 24), *(_WORD *)(a2 + 76));
  v5 = v9;
  *a3 = v9;
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v5;
  if (v9)
  {
    if (v8 < 0)
      operator delete(__p);
  }
}

void sub_19C026878(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  CFTypeRef cf[2];
  std::__shared_weak_count *v19;
  void *__p;
  char v21;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = a2 + 2;
  (*(void (**)(_QWORD *))(a2[2] + 120))(a2 + 2);
  v6 = (*(double (**)(_QWORD *))(*v5 + 72))(v5);
  v7 = *(std::__shared_weak_count **)(v4 + 16);
  v16 = *(_QWORD *)(v4 + 8);
  v17 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_19C02665C((uint64_t)cf, a2, (uint64_t)&v16, v4 + 24);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  (*(void (**)(double))(*(_QWORD *)(a1 + 32) + 16))(v6);
  if (v21 < 0)
    operator delete(__p);
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (cf[0])
    CFRelease(cf[0]);
}

void sub_19C0269C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C026E8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C0269D8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __n128 v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[6];
  __n128 v22;
  uint64_t v23;
  void *__p;
  char v25;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __n128 v29;
  _QWORD v30[3];
  char v31;
  char v32;

  v4 = (_QWORD *)a1[5];
  sub_19C025F2C((uint64_t)v30, a1[6] + 30800, v4 + 3, *(_WORD *)(a2 + 76));
  if (v32)
  {
    v5 = v4[1];
    v6 = (std::__shared_weak_count *)v4[2];
    v27 = v5;
    v28 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = sub_19C027CD4(&v29, a2, v5, (uint64_t)v6);
    if (v6)
    {
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v9);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v12 = a1[6];
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 1174405120;
    v21[2] = sub_19C026C10;
    v21[3] = &unk_1E3D10F80;
    v21[5] = v12;
    v22 = v29;
    if (v29.n128_u64[1])
    {
      v13 = (unint64_t *)(v29.n128_u64[1] + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    sub_19C026D58((uint64_t)&v23, (uint64_t)v30);
    v21[4] = a1[4];
    sub_19C026104(v12 + 30800, v30, (uint64_t)v21);
    if (v26 && v25 < 0)
      operator delete(__p);
    v15 = (std::__shared_weak_count *)v22.n128_u64[1];
    if (v22.n128_u64[1])
    {
      v16 = (unint64_t *)(v22.n128_u64[1] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)v29.n128_u64[1];
    if (v29.n128_u64[1])
    {
      v19 = (unint64_t *)(v29.n128_u64[1] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v32)
    {
      if (v31 < 0)
        operator delete((void *)v30[1]);
    }
  }
}

void sub_19C026BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  if (a24 && a23 < 0)
    operator delete(__p);
  sub_19BFACCEC(v28 + 48);
  sub_19BFACCEC(v29 - 88);
  if (*(_BYTE *)(v29 - 40))
  {
    if (*(char *)(v29 - 41) < 0)
      operator delete(*(void **)(v29 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_19C026C10(_QWORD *a1, unsigned int a2, int a3)
{
  uint64_t v4;
  const void *v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  CFTypeRef cf[2];
  std::__shared_weak_count *v19;
  void *__p;
  char v21;

  v4 = sub_19C02E7A8(a1[5], a2, a3);
  if (v4)
  {
    v5 = (const void *)v4;
    v6 = (*(double (**)(uint64_t))(*(_QWORD *)(v4 + 16) + 72))(v4 + 16);
    v7 = (std::__shared_weak_count *)a1[7];
    v16 = a1[6];
    v17 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    sub_19C02665C((uint64_t)cf, v5, (uint64_t)&v16, (uint64_t)(a1 + 8));
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    (*(void (**)(double))(a1[4] + 16))(v6);
    if (v21 < 0)
      operator delete(__p);
    v13 = v19;
    if (v19)
    {
      v14 = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (cf[0])
      CFRelease(cf[0]);
  }
}

void sub_19C026D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C026E8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C026D58(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    if (*(char *)(a2 + 31) < 0)
    {
      sub_19BF8CD70((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      v3 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v3;
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

void sub_19C026DD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 32))
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C026DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return sub_19C026D58(a1 + 64, a2 + 64);
}

void sub_19C026E40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFACCEC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C026E54(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96) && *(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  return sub_19BFACCEC(a1 + 48);
}

uint64_t sub_19C026E8C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  sub_19BFACCEC(a1 + 8);
  sub_19BFAD520((const void **)a1, 0);
  return a1;
}

void sub_19C026ED0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __n128 v9;
  unint64_t *v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[6];
  __int128 v23;
  __n128 v24;
  uint64_t v25;
  void *__p;
  char v27;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __n128 v31;
  _QWORD v32[3];
  char v33;
  char v34;

  v4 = *(_QWORD **)(a1 + 40);
  sub_19C025F2C((uint64_t)v32, *(_QWORD *)(a1 + 48) + 30800, v4 + 3, *(_WORD *)(a2 + 76));
  if (v34)
  {
    v5 = v4[1];
    v6 = (std::__shared_weak_count *)v4[2];
    v29 = v5;
    v30 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = sub_19C027CD4(&v31, a2, v5, (uint64_t)v6);
    if (v6)
    {
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v9);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v12 = *(unsigned __int16 *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 48);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 1174405120;
    v22[2] = sub_19C027244;
    v22[3] = &unk_1E3D17428;
    v22[5] = v13;
    if (v12 < 0xF)
    {
      v23 = *(_OWORD *)(a1 + 56);
    }
    else
    {
      LOWORD(v23) = v12;
      *((_QWORD *)&v23 + 1) = operator new[]();
      memcpy(*((void **)&v23 + 1), *(const void **)(a1 + 64), v12);
    }
    v24 = v31;
    if (v31.n128_u64[1])
    {
      v14 = (unint64_t *)(v31.n128_u64[1] + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    sub_19C026D58((uint64_t)&v25, (uint64_t)v32);
    v22[4] = *(_QWORD *)(a1 + 32);
    sub_19C026104(v13 + 30800, v32, (uint64_t)v22);
    if (v28 && v27 < 0)
      operator delete(__p);
    v16 = (std::__shared_weak_count *)v24.n128_u64[1];
    if (v24.n128_u64[1])
    {
      v17 = (unint64_t *)(v24.n128_u64[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if ((unsigned __int16)v23 >= 0xFu && *((_QWORD *)&v23 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v23 + 1), 0x1000C8077774924);
    v19 = (std::__shared_weak_count *)v31.n128_u64[1];
    if (v31.n128_u64[1])
    {
      v20 = (unint64_t *)(v31.n128_u64[1] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v34)
    {
      if (v33 < 0)
        operator delete((void *)v32[1]);
    }
  }
}

void sub_19C02711C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  uint64_t v26;

  sub_19BFACCEC(v26 - 88);
  if (*(_BYTE *)(v26 - 40))
  {
    if (*(char *)(v26 - 41) < 0)
      operator delete(*(void **)(v26 - 64));
  }
  _Unwind_Resume(a1);
}

__n128 sub_19C0271AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __n128 *v4;
  void *v6;
  __n128 result;

  v4 = (__n128 *)(a2 + 56);
  v3 = *(unsigned __int16 *)(a2 + 56);
  if (v3 < 0xF)
  {
    result = *v4;
    *(__n128 *)(a1 + 56) = *v4;
  }
  else
  {
    *(_WORD *)(a1 + 56) = v3;
    v6 = (void *)operator new[]();
    *(_QWORD *)(a1 + 64) = v6;
    memcpy(v6, *(const void **)(a2 + 64), *(unsigned __int16 *)(a1 + 56));
  }
  return result;
}

uint64_t sub_19C027218(uint64_t result)
{
  if (*(unsigned __int16 *)(result + 56) >= 0xFu)
  {
    result = *(_QWORD *)(result + 64);
    if (result)
      JUMPOUT(0x1A1AD0CB8);
  }
  return result;
}

void sub_19C027244(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v4;
  _BOOL4 v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  CFTypeRef cf;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *__p;
  char v24;

  v4 = a2;
  sub_19C02E704((uint64_t)&cf, *(_QWORD *)(a1 + 40), a2);
  v6 = sub_19BFED000((unsigned __int16 *)&cf, (unsigned __int16 *)(a1 + 48));
  if ((unsigned __int16)cf >= 0xFu && v21)
    MEMORY[0x1A1AD0CB8](v21, 0x1000C8077774924);
  if (v6)
  {
    v7 = (_QWORD *)sub_19C02E7A8(*(_QWORD *)(a1 + 40), v4, a3);
    if (v7)
    {
      v8 = v7;
      v9 = *(std::__shared_weak_count **)(a1 + 72);
      v18 = *(_QWORD *)(a1 + 64);
      v19 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      sub_19C02665C((uint64_t)&cf, v7, (uint64_t)&v18, a1 + 80);
      v12 = v19;
      if (v19)
      {
        v13 = (unint64_t *)&v19->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      (*(void (**)(_QWORD *))(v8[2] + 72))(v8 + 2);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      if (v24 < 0)
        operator delete(__p);
      v15 = v22;
      if (v22)
      {
        v16 = (unint64_t *)&v22->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (cf)
        CFRelease(cf);
    }
  }
}

void sub_19C0273C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C026E8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0273D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = *(unsigned __int16 *)(a2 + 48);
  if (v4 < 0xF)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  else
  {
    *(_WORD *)(a1 + 48) = v4;
    v5 = (void *)operator new[]();
    *(_QWORD *)(a1 + 56) = v5;
    memcpy(v5, *(const void **)(a2 + 56), *(unsigned __int16 *)(a1 + 48));
  }
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return sub_19C026D58(a1 + 80, a2 + 80);
}

void sub_19C027474(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v5;

  sub_19BFACCEC(v2);
  if (*v3 >= 0xFu)
  {
    v5 = *(_QWORD *)(v1 + 56);
    if (v5)
      MEMORY[0x1A1AD0CB8](v5, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C0274B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1 + 64;
  if (*(_BYTE *)(a1 + 112) && *(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  result = sub_19BFACCEC(v2);
  if (*(unsigned __int16 *)(a1 + 48) >= 0xFu)
  {
    result = *(_QWORD *)(a1 + 56);
    if (result)
      JUMPOUT(0x1A1AD0CB8);
  }
  return result;
}

void sub_19C027520(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __n128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  double v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t Instance;
  __int16 v32;
  __int128 v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __n128 v38;
  _QWORD v39[3];
  char v40;
  char v41;
  void *v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  __int16 v49;
  char v50;
  void *v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)a1[5];
  sub_19C025F2C((uint64_t)v39, a1[6] + 30800, v6 + 3, *(_WORD *)(a2 + 76));
  if (v41)
  {
    if (v39[0] != 0xFFFFFFFFLL && (sub_19C026010((uint64_t *)(a1[6] + 30816), (uint64_t)v39, v42) & 1) != 0)
    {
      v7 = v6[1];
      v8 = (std::__shared_weak_count *)v6[2];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v11 = sub_19C027CD4(&v38, a2, v7, (uint64_t)v8);
      if (v8)
      {
        v12 = (unint64_t *)&v8->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v11);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v14 = v38.n128_u64[0];
      v15 = a1[6];
      v17 = (uint64_t *)(v38.n128_u64[0] + 88);
      v16 = *(_QWORD *)(v38.n128_u64[0] + 88);
      if (v16)
      {
        v18 = 0;
        v19 = 0.0;
        v20 = v38.n128_u64[0];
        do
        {
          v21 = sub_19BFAC58C(v15 + 30264, *(unsigned __int16 *)(v20 + 76), HIWORD(v18));
          v23 = *(_QWORD *)(v20 + 88);
          if (!v23)
            __assert_rtn("word", "MorphemeLevelLexiconUtils.cpp", 36, "!is_empty()");
          LOWORD(v22) = *(_WORD *)(v20 + 80);
          v19 = v19 + (double)v21 + (double)v22;
          v24 = *(_DWORD *)(v20 + 76);
          v18 = v24 & 0xFFFF0000;
          v20 = *(_QWORD *)(v20 + 88);
        }
        while (*(_QWORD *)(v23 + 88));
        LODWORD(v16) = v24 >> 16;
      }
      else
      {
        v19 = 0.0;
      }
      v25 = sub_19BFAC58C(v15 + 30264, 0, (unsigned __int16)v16);
      v48 = 0x100000;
      v49 = 0;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v42[0] = &v48;
      sub_19C027EA4((unsigned __int16 **)v42, (uint64_t)&v48, v14);
      if (*v17)
      {
        while (1)
        {
          v26 = sub_19C027DC0(v14);
          v27 = *v17;
          if (!v26)
            break;
          v17 = (uint64_t *)(v27 + 88);
          v14 = v27;
          if (!*(_QWORD *)(v27 + 88))
            goto LABEL_21;
        }
        if (!v27)
          __assert_rtn("word", "MorphemeLevelLexiconUtils.cpp", 36, "!is_empty()");
        sub_19BF86B60((uint64_t)v42, (unsigned __int16 *)v14);
        v28 = *(_OWORD *)(v14 + 32);
        v29 = *(_OWORD *)(v14 + 48);
        v30 = *(_OWORD *)(v14 + 64);
        LOWORD(v47) = *(_WORD *)(v14 + 80);
        v45 = v29;
        v46 = v30;
        v44 = v28;
      }
      else
      {
LABEL_21:
        *(_OWORD *)v42 = 0u;
        v43 = 0u;
        HIDWORD(v44) = 0;
        v47 = 0;
        WORD1(v42[0]) = 16;
        BYTE6(v42[0]) = 0;
        *(_QWORD *)&v44 = 0;
        *(_QWORD *)((char *)&v44 + 5) = 0;
        v45 = 0uLL;
        v46 = 0xFFFFFFFFuLL;
      }
      sub_19BF8A1F4((uint64_t)v42, (unsigned __int16 *)&v48);
      LODWORD(v44) = 1065353216;
      if (qword_1ED024268 != -1)
        dispatch_once(&qword_1ED024268, &unk_1E3D174D8);
      Instance = _CFRuntimeCreateInstance();
      sub_19BF86B60(Instance + 16, (unsigned __int16 *)v42);
      v32 = v47;
      v34 = v45;
      v33 = v46;
      *(_OWORD *)(Instance + 48) = v44;
      *(_OWORD *)(Instance + 64) = v34;
      *(_OWORD *)(Instance + 80) = v33;
      *(_WORD *)(Instance + 96) = v32;
      *(double *)(Instance + 104) = (v19 + (double)v25) / -800.0 / 2.30258509;
      *(_QWORD *)(Instance + 112) = 0;
      *(_DWORD *)(Instance + 120) = 0;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(a1[4] + 16))(a1[4], Instance, a3);
      CFRelease((CFTypeRef)Instance);
      if (v42[1] && BYTE6(v42[0]) == 1)
        free(v42[1]);
      if (v51 && v50 == 1)
        free(v51);
      v35 = (std::__shared_weak_count *)v38.n128_u64[1];
      if (v38.n128_u64[1])
      {
        v36 = (unint64_t *)(v38.n128_u64[1] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    if (v41)
    {
      if (v40 < 0)
        operator delete((void *)v39[1]);
    }
  }
}

void sub_19C02794C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,int a23,__int16 a24,char a25,void *a26)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C027A1C()
{
  uint64_t result;

  qword_1ED024270 = 0;
  *(_QWORD *)algn_1ED024278 = "LXEntry";
  qword_1ED024280 = 0;
  unk_1ED024288 = 0;
  qword_1ED024290 = (uint64_t)sub_19BFD0144;
  unk_1ED024298 = 0u;
  unk_1ED0242A8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0242D0 = result;
  return result;
}

uint64_t sub_19C027A68(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E3D14860;
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19C027AB0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E3D14860;
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C027B08(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19C027B60(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C027B74(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19C027BCC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C027BE0(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  std::mutex::unlock(v4);
}

void sub_19C027C2C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C027C44()
{
  return 1;
}

void sub_19C027C4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D12A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C027C5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D12A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19C027C8C(uint64_t a1)
{
  void *v2;

  sub_19BFACCEC(a1 + 112);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 30) == 1)
      free(v2);
  }
}

__n128 sub_19C027CD4(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __n128 result;

  v8 = (char *)operator new(0x80uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E3D12A68;
  if (a4)
  {
    v9 = (unint64_t *)(a4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = sub_19BF86B60((uint64_t)(v8 + 24), (unsigned __int16 *)a2);
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 72) = v12;
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(a2 + 64);
  *((_WORD *)v8 + 52) = *(_WORD *)(a2 + 80);
  *((_QWORD *)v8 + 14) = a3;
  *((_QWORD *)v8 + 15) = a4;
  result.n128_u64[0] = v11;
  result.n128_u64[1] = (unint64_t)v8;
  *a1 = result;
  return result;
}

void sub_19C027D74(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

BOOL sub_19C027DC0(uint64_t a1)
{
  const char *v2;
  void *v3;
  const char *v4;
  int v5;
  BOOL v6;
  size_t __n;
  void *v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  LODWORD(__n) = 0x100000;
  WORD2(__n) = 0;
  BYTE6(__n) = 1;
  v9 = 0;
  sub_19BF8CA04(&__n, (uint64_t)"+", 0, 1u);
  if (*(_QWORD *)(a1 + 8))
    v2 = *(const char **)(a1 + 8);
  else
    v2 = (const char *)(a1 + 16);
  v3 = v9;
  if (v9)
    v4 = (const char *)v9;
  else
    v4 = (const char *)v10;
  v5 = strncmp(v2, v4, (unsigned __int16)__n);
  if (v3)
    v6 = BYTE6(__n) == 1;
  else
    v6 = 0;
  if (v6)
    free(v3);
  return v5 == 0;
}

void sub_19C027EA4(unsigned __int16 **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int16 *v6;
  _QWORD *v7;
  int v8;
  unsigned int v9;
  int v10;
  __int16 v11;
  __int16 v12;
  const char *v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  unsigned int v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned __int16 v28[3];
  char v29;
  _QWORD *v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v17 = a2;
  if (!*(_QWORD *)(a3 + 88))
    return;
  sub_19C027EA4(&v17);
  if (!*(_QWORD *)(a3 + 88))
    __assert_rtn("word", "MorphemeLevelLexiconUtils.cpp", 36, "!is_empty()");
  v5 = sub_19BF86B60((uint64_t)v28, (unsigned __int16 *)a3);
  v6 = *a1;
  if (sub_19C027DC0(v5))
  {
    if (v30)
      v7 = v30;
    else
      v7 = v31;
    *(_QWORD *)&v22 = v7;
    v8 = v28[0];
    DWORD2(v22) = 0;
    HIDWORD(v22) = v28[0];
    LODWORD(v23) = 0;
    sub_19BF8BB80((uint64_t *)&v22);
    v24 = v22;
    v25 = v23;
    sub_19BF8BB80((uint64_t *)&v24);
    v18 = v7;
    v19 = v8;
    v20 = v8;
    v21 = 0;
    sub_19BF8BB80((uint64_t *)&v18);
    LODWORD(v26) = 0x100000;
    WORD2(v26) = 0;
    BYTE6(v26) = 1;
    v27 = 0;
    if ((_QWORD *)v24 == v18)
    {
      if (SDWORD2(v24) <= v19)
      {
        v9 = HIDWORD(v24);
        if (SDWORD2(v24) <= SHIDWORD(v24))
        {
          if (v25 >= 0x80)
          {
            if (v25 >= 0x800)
            {
              if (v25 >> 11 >= 0x1B)
              {
                if ((v25 - 1114112) >= 0xFFEFE000)
                {
                  if (v25 >= 0x10000)
                    v10 = -4;
                  else
                    v10 = -3;
                }
                else
                {
                  v10 = 0;
                }
              }
              else
              {
                v10 = -3;
              }
            }
            else
            {
              v10 = -2;
            }
          }
          else
          {
            v10 = -1;
          }
          v9 = v10 + DWORD2(v24);
        }
        v11 = v20;
        if (v19 <= v20)
        {
          if (v21 >= 0x80)
          {
            if (v21 >= 0x800)
            {
              if (v21 >> 11 >= 0x1B)
              {
                if (v21 - 1114112 >= 0xFFEFE000)
                {
                  if (v21 >= 0x10000)
                    v12 = -4;
                  else
                    v12 = -3;
                }
                else
                {
                  v12 = 0;
                }
              }
              else
              {
                v12 = -3;
              }
            }
            else
            {
              v12 = -2;
            }
          }
          else
          {
            v12 = -1;
          }
          v11 = v12 + v19;
        }
        sub_19BF8CA04(&v26, v24 + v9, 0, (unsigned __int16)(v11 - v9));
        goto LABEL_37;
      }
      v13 = "begin <= end";
      v14 = 118;
      v15 = "TIString.cpp";
      v16 = "String";
    }
    else
    {
      v13 = "p==rhs.p";
      v14 = 196;
      v15 = "TIString.h";
      v16 = "operator<=";
    }
    __assert_rtn(v16, v15, v14, v13);
  }
  sub_19BF86B60((uint64_t)&v26, v28);
LABEL_37:
  sub_19BFF7414(v6, (uint64_t)&v26);
  if (v27 && BYTE6(v26) == 1)
    free(v27);
  if (v30)
  {
    if (v29 == 1)
      free(v30);
  }
}

void sub_19C02816C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,void *a23)
{
  uint64_t v23;
  void *v25;

  if (a23 && a22 == 1)
    free(a23);
  v25 = *(void **)(v23 - 64);
  if (v25)
  {
    if (*(_BYTE *)(v23 - 66) == 1)
      free(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0281B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  char *v7;

  v2 = *(_QWORD *)(a1 + 96);
  if (v2 && (sub_19C01DA50(v2) & 1) != 0)
    return 1;
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3 == -1)
    goto LABEL_9;
  v7 = &v6;
  if ((((uint64_t (*)(char **, uint64_t))off_1E3D179D8[v3])(&v7, a1) & 1) != 0)
    return 1;
  v5 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v5 == -1)
LABEL_9:
    sub_19BFC4E9C();
  v7 = &v6;
  return ((uint64_t (*)(char **, uint64_t))off_1E3D179D8[v5])(&v7, a1 + 40);
}

float sub_19C02824C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t *v12;

  *(float *)(a1 + 80) = sub_19C02837C(a1, a2);
  v10 = a1;
  v11 = a3;
  v6 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v6 == -1
    || (v12 = &v10,
        ((void (*)(uint64_t **, uint64_t))off_1E3D178A0[v6])(&v12, a2),
        v10 = a1 + 40,
        v11 = a3,
        v7 = *(unsigned int *)(a2 + 28712),
        (_DWORD)v7 == -1))
  {
    sub_19BFC4E9C();
  }
  v12 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_1E3D178A0[v7])(&v12, a2 + 14360);
  if (*(int *)(a1 + 88) >= 1)
  {
    v8 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(a1 + 88) = 1;
    ++*(_BYTE *)(a1 + 85);
    if (v8)
    {
      sub_19C01D9B8(v8, a2, a3);
      if ((sub_19C01DA50(*(_QWORD *)(a1 + 96)) & 1) == 0)
        sub_19BFC7E88((uint64_t *)(a1 + 96), 0);
    }
    sub_19C028460(a1, a2, 0);
    sub_19C028460(a1, a2, 1);
  }
  *(_BYTE *)(a1 + 84) = a3;
  return sub_19C0287A8(a1, a2);
}

float sub_19C02837C(uint64_t a1, uint64_t a2)
{
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v8;
  uint64_t *v9;

  v4 = *(float *)(a1 + 80);
  if ((sub_19C028884(a1) & 1) == 0 && sub_19C0287A8(a1, a2) > 0.0)
  {
    v8 = a1;
    v5 = *(unsigned int *)(a2 + 14352);
    if ((_DWORD)v5 == -1)
      sub_19BFC4E9C();
    v9 = &v8;
    v6 = ((float (*)(uint64_t **, uint64_t))off_1E3D17698[v5])(&v9, a2) * *(float *)(a1 + 80);
    v4 = v6 / sub_19C0287A8(a1, a2);
    if (v4 > 1.0)
      v4 = 1.0;
  }
  if ((LODWORD(v4) & 0x7FFFFFFFu) >= 0x7F800000)
    __assert_rtn("probability_of_baseline", "TIStaticDictionaryImplCursor.cpp", 147, "isfinite(result)");
  return v4;
}

void sub_19C028460(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  char v6;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  void ***v12;
  void ***i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void ***v19;
  void ***v20;
  void ****v21;
  uint64_t *v22;
  void ***v23;

  if (a3)
    v3 = a2 + 14360;
  else
    v3 = a2;
  if (a3)
    v4 = (void **)(a1 + 40);
  else
    v4 = (void **)a1;
  v21 = (void ****)v4;
  v5 = *(unsigned int *)(v3 + 14352);
  if ((_DWORD)v5 == -1)
    goto LABEL_34;
  v6 = a3;
  v19 = (void ***)&v21;
  if (!((unsigned int (*)(void ****, uint64_t))off_1E3D17768[v5])(&v19, v3))
    return;
  v21 = (void ****)v4;
  v9 = *(unsigned int *)(v3 + 14352);
  if ((_DWORD)v9 == -1)
LABEL_34:
    sub_19BFC4E9C();
  v19 = (void ***)&v21;
  if ((((uint64_t (*)(void ****, uint64_t))off_1E3D177D0[v9])(&v19, v3) & 1) != 0)
  {
    v10 = *(unsigned int **)(a2 + 30120);
    if (!v10)
      __assert_rtn("add_suffixes", "TIStaticDictionaryImplCursor.cpp", 170, "converter");
    LOWORD(v17) = 1;
    BYTE2(v17) = 32;
    v21 = (void ****)v4;
    v22 = &v17;
    v11 = *(unsigned int *)(v3 + 14352);
    if ((_DWORD)v11 == -1)
      sub_19BFC4E9C();
    v23 = (void ***)&v21;
    ((void (*)(void ****__return_ptr, void ****, uint64_t))off_1E3D17838[v11])(&v19, &v23, v3);
    if ((unsigned __int16)v17 >= 0xFu && v18)
      MEMORY[0x1A1AD0CB8](v18, 0x1000C8077774924);
    v12 = v19;
    for (i = v20; v12 != i; v12 += 11)
    {
      LODWORD(v23) = 0;
      if ((sub_19BFE99DC(v10, *((_DWORD *)v12 + 15), &v23, 0) & 1) != 0
        && (sub_19BFE9B58((uint64_t)&v21, (uint64_t)v10, (int)v23), (_WORD)v21))
      {
        v14 = operator new();
        sub_19C01BF14(v14, a2, (uint64_t)v4, *(_BYTE *)(a1 + 85), v6, (uint64_t)&v21, 0.5);
        v15 = *(_QWORD *)(a1 + 96);
        if (v15)
        {
          v16 = v14;
          v17 = 0;
          sub_19C020604(v15, &v16);
          sub_19BFC7E88(&v16, 0);
        }
        else
        {
          *(_QWORD *)(a1 + 96) = v14;
          v17 = 0;
        }
        if ((*((_BYTE *)v12 + 59) & 0x20) == 0)
          *(_DWORD *)(a1 + 88) = 2;
        sub_19BFC7E88(&v17, 0);
        if ((unsigned __int16)v21 >= 0xFu)
        {
          if (v22)
            MEMORY[0x1A1AD0CB8](v22, 0x1000C8077774924);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 88) = 2;
      }
    }
    v21 = &v19;
    sub_19BFC70A0((void ***)&v21);
  }
  else
  {
    *(_DWORD *)(a1 + 88) = 2;
  }
}

void sub_19C0286EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, unsigned __int16 a12, __int16 a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a12 >= 0xFu)
  {
    if (a14)
      MEMORY[0x1A1AD0CB8](a14, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

float sub_19C0287A8(uint64_t a1, uint64_t a2)
{
  float v2;
  uint64_t v3;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v13;
  uint64_t *v14;

  v2 = *(float *)(a1 + 80);
  v13 = a1;
  v3 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v3 == -1
    || (v14 = &v13,
        ((void (*)(uint64_t **))off_1E3D17698[v3])(&v14),
        v13 = a1 + 40,
        v7 = *(unsigned int *)(a2 + 28712),
        (_DWORD)v7 == -1))
  {
    sub_19BFC4E9C();
  }
  v14 = &v13;
  v8 = (float)((float)(1.0 - v2) * ((float (*)(uint64_t **, uint64_t))off_1E3D17698[v7])(&v14, a2 + 14360))
     + (float)(v2 * v6);
  v9 = *(_QWORD *)(a1 + 96);
  if (v9)
  {
    v10 = *(float *)(v9 + 88);
    sub_19C01C200(v9, a2);
    return (float)(v10 * v11) + (float)((float)(1.0 - v10) * v8);
  }
  return v8;
}

uint64_t sub_19C028884(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char *v10;

  v1 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v1 == -1)
    goto LABEL_11;
  v10 = &v9;
  if (((unsigned int (*)(char **, uint64_t))off_1E3D179D8[v1])(&v10, a1))
  {
    v3 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v3 == -1)
      goto LABEL_11;
    v10 = &v9;
    if (((unsigned int (*)(char **, uint64_t))off_1E3D179D8[v3])(&v10, a1 + 40))
    {
      v4 = *(unsigned int *)(a1 + 32);
      if ((_DWORD)v4 != -1)
      {
        v10 = &v9;
        v5 = ((uint64_t (*)(char **, uint64_t))off_1E3D17A40[v4])(&v10, a1);
        v6 = *(unsigned int *)(a1 + 72);
        if ((_DWORD)v6 != -1)
        {
          v10 = &v9;
          if (v5 != ((unsigned int (*)(char **, uint64_t))off_1E3D17A40[v6])(&v10, a1 + 40))
            __assert_rtn("is_root", "TIStaticDictionaryImplCursor.cpp", 405, "m_baseline_cursor.is_root() == m_delta_cursor.is_root()");
          goto LABEL_8;
        }
      }
LABEL_11:
      sub_19BFC4E9C();
    }
  }
LABEL_8:
  v7 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v10 = &v9;
  return ((uint64_t (*)(char **, uint64_t))off_1E3D17A40[v7])(&v10, a1);
}

BOOL sub_19C0289B4(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)a2)
    v2 = 0;
  else
    v2 = *(_DWORD *)(a2 + 8) == 0;
  return v2 && *(_BYTE *)(a2 + 24) == 0;
}

BOOL sub_19C0289E0(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

BOOL sub_19C0289F0(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

BOOL sub_19C028A00(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

BOOL sub_19C028A10(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

BOOL sub_19C028A20(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

uint64_t sub_19C028A30(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 9);
}

BOOL sub_19C028A38(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

BOOL sub_19C028A48(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

BOOL sub_19C028A58(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

BOOL sub_19C028A68(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

BOOL sub_19C028A78(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

uint64_t sub_19C028A88(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 9);
}

uint64_t sub_19C028A90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  char v17;
  char *v18;

  v2 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v2 == -1)
    sub_19BFC4E9C();
  v18 = &v17;
  ((void (*)(char **))off_1E3D174F8[v2])(&v18);
  v5 = (unsigned int *)(a2 + 28712);
  v6 = *(unsigned int *)(a2 + 28712);
  if ((_DWORD)v6 == -1)
    sub_19BFC4E9C();
  v18 = &v17;
  ((void (*)(char **, uint64_t))off_1E3D174F8[v6])(&v18, a2 + 14360);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  v7 = *v5;
  if ((_DWORD)v7 == -1)
    goto LABEL_14;
  v18 = &v17;
  if (!((unsigned int (*)(char **, uint64_t))off_1E3D17560[v7])(&v18, a2 + 14360))
  {
    v15 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v15 != -1)
    {
      v18 = &v17;
      ((void (*)(char **, uint64_t))off_1E3D17630[v15])(&v18, a1 + 40);
      v14 = 1.0;
      goto LABEL_13;
    }
LABEL_14:
    sub_19BFC4E9C();
  }
  v8 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v8 == -1)
    goto LABEL_14;
  v18 = &v17;
  ((void (*)(char **, uint64_t))off_1E3D175C8[v8])(&v18, a2);
  v10 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v10 == -1)
    goto LABEL_14;
  v11 = v9;
  v18 = &v17;
  ((void (*)(char **, uint64_t))off_1E3D175C8[v10])(&v18, a2);
  v13 = *v5;
  if ((_DWORD)v13 == -1)
    goto LABEL_14;
  v18 = &v17;
  v14 = v11 / (float)(v12 + ((float (*)(char **, uint64_t))off_1E3D175C8[v13])(&v18, a2 + 14360));
  if ((LODWORD(v14) & 0x7FFFFFFFu) >= 0x7F800000)
    v14 = 1.0;
LABEL_13:
  *(float *)(a1 + 80) = v14;
  sub_19BFC7E88((uint64_t *)(a1 + 96), 0);
  *(_DWORD *)(a1 + 88) = *(_QWORD *)(a2 + 30120) != 0;
  *(_WORD *)(a1 + 84) = 0;
  return a1;
}

void sub_19C028C90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFC72B0(v1);
  _Unwind_Resume(a1);
}

void sub_19C028CC0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_BYTE *)a2 = -1;
}

void sub_19C028CD8(uint64_t a1, _QWORD *a2)
{
  *a2 = -1;
}

void sub_19C028CE4(uint64_t a1, _QWORD *a2)
{
  *a2 = -1;
}

void sub_19C028CF0(uint64_t a1, _QWORD *a2)
{
  *a2 = -1;
}

void sub_19C028CFC(uint64_t a1, uint64_t a2)
{
  sub_19C028D68(a2);
}

void sub_19C028D04(uint64_t a1, _QWORD *a2)
{
  *a2 = -1;
}

double sub_19C028D10(uint64_t a1, _OWORD *a2)
{
  double result;

  result = 0.0;
  *a2 = xmmword_19C0721B0;
  return result;
}

void sub_19C028D20(uint64_t a1, _QWORD *a2)
{
  *a2 = -1;
}

void sub_19C028D2C(uint64_t a1, _QWORD *a2)
{
  *a2 = -1;
}

void sub_19C028D38(uint64_t a1, _QWORD *a2)
{
  *a2 = -1;
}

void sub_19C028D44(uint64_t a1, uint64_t a2)
{
  sub_19C028D68(a2);
}

void sub_19C028D4C(uint64_t a1, _QWORD *a2)
{
  *a2 = -1;
}

double sub_19C028D58(uint64_t a1, _OWORD *a2)
{
  double result;

  result = 0.0;
  *a2 = xmmword_19C0721B0;
  return result;
}

void sub_19C028D68(uint64_t a1)
{
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  std::string::operator=((std::string *)(a1 + 8), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19C028DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_19C028DD0(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 12916);
}

float sub_19C028DD8(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19C028DE0(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19C028DE8(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19C028DF0(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19C028DF8(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19C028E00(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19C028E08(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19C028E10(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19C028E18(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19C028E20(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19C028E28(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

float sub_19C028E30(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 8);
}

uint64_t sub_19C028E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = sub_19C047978(a1, a2);
  sub_19C047978(v4 + 40, a2 + 40);
  v5 = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 96);
  if (v6)
  {
    v7 = operator new();
    sub_19C01C034(v7, v6);
    v9 = 0;
    sub_19BFC7E88((uint64_t *)(a1 + 96), v7);
    sub_19BFC7E88(&v9, 0);
  }
  return a1;
}

void sub_19C028EF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  MEMORY[0x1A1AD0CDC](v4, 0x1032C40198927B0);
  sub_19BFC7E88(v3, 0);
  sub_19BFC72B0(v2);
  sub_19BFC72B0(v1);
  _Unwind_Resume(a1);
}

float sub_19C028F40(uint64_t a1, uint64_t a2)
{
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v14;
  uint64_t *v15;

  v4 = sub_19C02837C(a1, a2);
  v14 = a1;
  v5 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v5 == -1
    || (v6 = v4,
        v15 = &v14,
        ((void (*)(uint64_t **, uint64_t))off_1E3D17700[v5])(&v15, a2),
        v14 = a1 + 40,
        v8 = *(unsigned int *)(a2 + 28712),
        (_DWORD)v8 == -1))
  {
    sub_19BFC4E9C();
  }
  v15 = &v14;
  v9 = (float)((float)(1.0 - v6) * ((float (*)(uint64_t **, uint64_t))off_1E3D17700[v8])(&v15, a2 + 14360))
     + (float)(v6 * v7);
  v10 = *(_QWORD *)(a1 + 96);
  if (v10)
  {
    v11 = *(float *)(v10 + 88);
    sub_19C01C5EC(v10, a2);
    return (float)(v11 * v12) + (float)((float)(1.0 - v11) * v9);
  }
  return v9;
}

void sub_19C029024(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  uint64_t v10;
  size_t v11;
  void **v12;
  void **v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  uint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;
  char v36;
  char *v37;
  char *v38;
  char v39;
  BOOL v40;
  uint64_t v41;
  unsigned __int8 *v42;
  void **v43;
  unsigned int v45;
  unsigned int v46;
  __n128 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  void **v52;
  unsigned __int8 *v53;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned __int8 *v58;
  char *v59;
  char *v60;
  float v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void **p_p;
  void **v66;
  int v67;
  _BYTE v68[32];
  int v69;
  float v70;
  char v71;
  uint64_t v72;
  void *__p;
  unsigned __int8 *v74;
  char *v75;
  unsigned __int8 v76;
  void ***p_p_p;
  void **v78;
  uint64_t v79;
  void **v80[2];

  v4 = a2;
  v5 = (uint64_t)a1;
  v76 = 0;
  if (a1[22] < 1)
  {
    __p = a1;
    v49 = *(unsigned int *)(a2 + 14352);
    if ((_DWORD)v49 == -1)
LABEL_138:
      sub_19BFC4E9C();
    p_p = &__p;
    ((void (*)(void ****__return_ptr, void ***, uint64_t))off_1E3D17908[v49])(&p_p_p, &p_p, a2);
    v79 = v5 + 40;
    v50 = *(unsigned int *)(v4 + 28712);
    if ((_DWORD)v50 == -1)
      sub_19BFC4E9C();
    v80[0] = (void **)&v79;
    ((void (*)(void **__return_ptr, void ***, uint64_t))off_1E3D17908[v50])(&__p, v80, v4 + 14360);
    v51 = sub_19C02837C(v5, v4);
    v52 = (void **)p_p_p;
    v53 = (unsigned __int8 *)__p;
    while (1)
    {
      if (v52 == v78 && v53 == v74)
      {
LABEL_122:
        p_p = &__p;
        sub_19C01E090(&p_p);
        p_p = (void **)&p_p_p;
        sub_19C01E090(&p_p);
        return;
      }
      if (v52 == v78)
      {
        if (v53 == v74)
          __assert_rtn("children", "TIStaticDictionaryImplCursor.cpp", 284, "baseline_byte < 0x100 || delta_byte < 0x100");
        v55 = 256;
      }
      else
      {
        v55 = *(unsigned __int8 *)v52;
        if (v53 == v74)
        {
          v56 = 256;
          goto LABEL_113;
        }
      }
      v56 = *v53;
LABEL_113:
      sub_19C028A90((uint64_t)&p_p, v4);
      if (v55 == v56)
      {
        sub_19C048170((uint64_t)&p_p, (uint64_t)(v52 + 1));
        sub_19C048170((uint64_t)v68, (uint64_t)(v53 + 8));
        v71 = v55;
        v52 += 6;
      }
      else
      {
        if (v55 < v56)
        {
          sub_19C048170((uint64_t)&p_p, (uint64_t)(v52 + 1));
          if (v69 == -1)
            goto LABEL_133;
          v80[0] = (void **)&v79;
          ((void (*)(void ***, _BYTE *))off_1E3D17630[v69])(v80, v68);
          v71 = v55;
          v52 += 6;
          goto LABEL_121;
        }
        if (v67 == -1)
LABEL_133:
          sub_19BFC4E9C();
        v80[0] = (void **)&v79;
        ((void (*)(void ***, void ***))off_1E3D17630[v67])(v80, &p_p);
        sub_19C048170((uint64_t)v68, (uint64_t)(v53 + 8));
        v71 = v56;
      }
      v53 += 48;
LABEL_121:
      v70 = v51;
      (*(void (**)(uint64_t, void ***, unsigned __int8 *))(a3 + 16))(a3, &p_p, &v76);
      v57 = v76;
      sub_19BFC7E88(&v72, 0);
      sub_19BFC72B0((uint64_t)v68);
      sub_19BFC72B0((uint64_t)&p_p);
      if (v57)
        goto LABEL_122;
    }
  }
  v80[0] = (void **)a1;
  v6 = *(unsigned int *)(a2 + 14352);
  if ((_DWORD)v6 == -1)
    goto LABEL_138;
  p_p_p = v80;
  ((void (*)(void ***__return_ptr, void ****, uint64_t))off_1E3D17908[v6])(&p_p, &p_p_p, a2);
  v79 = v5 + 40;
  v7 = *(unsigned int *)(v4 + 28712);
  if ((_DWORD)v7 == -1)
    sub_19BFC4E9C();
  v80[0] = (void **)&v79;
  ((void (*)(void ****__return_ptr, void ***, uint64_t))off_1E3D17908[v7])(&p_p_p, v80, v4 + 14360);
  v74 = 0;
  v75 = 0;
  __p = 0;
  v8 = p_p;
  v9 = (void **)p_p_p;
  v10 = ((char *)v78 - (char *)p_p_p) >> 4;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)p_p) >> 4) - 0x5555555555555555 * v10 >= 0x100)
    v11 = 256;
  else
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)p_p) >> 4) - 0x5555555555555555 * v10;
  sub_19C01DFF4((unint64_t *)&__p, v11);
  v12 = v66;
  v13 = v78;
  if (v8 != v66 || v9 != v78)
  {
    v63 = v5;
    v64 = v4;
    v15 = (char *)v74;
    v14 = v75;
    v16 = (unint64_t)__p;
    while (v8 != v12)
    {
      v17 = *(unsigned __int8 *)v8;
      if (v9 == v13)
        goto LABEL_18;
      v18 = *(unsigned __int8 *)v9;
      if (v17 != v18)
      {
        if (v17 < v18)
        {
LABEL_18:
          if (v15 >= v14)
          {
            v24 = (uint64_t)&v15[-v16 + 1];
            if (v24 < 0)
            {
              v74 = (unsigned __int8 *)v15;
              v75 = v14;
              __p = (void *)v16;
              sub_19BF8EB40();
            }
            if (2 * (uint64_t)&v14[-v16] > (unint64_t)v24)
              v24 = 2 * (_QWORD)&v14[-v16];
            if ((unint64_t)&v14[-v16] >= 0x3FFFFFFFFFFFFFFFLL)
              v25 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v25 = v24;
            if (v25)
              v26 = (char *)operator new(v25);
            else
              v26 = 0;
            v34 = &v15[(_QWORD)v26 - v16];
            *v34 = v17;
            v19 = v34 + 1;
            if (v15 != (char *)v16)
            {
              v35 = &v15[~v16];
              do
              {
                v36 = *--v15;
                (v35--)[(_QWORD)v26] = v36;
              }
              while (v15 != (char *)v16);
              v34 = v26;
            }
            v14 = &v26[v25];
            if (v16)
              operator delete((void *)v16);
            v16 = (unint64_t)v34;
          }
          else
          {
            *v15 = v17;
            v19 = v15 + 1;
          }
          v8 += 6;
          goto LABEL_73;
        }
        goto LABEL_20;
      }
      if (v15 >= v14)
      {
        v27 = (uint64_t)&v15[-v16 + 1];
        if (v27 < 0)
        {
          v74 = (unsigned __int8 *)v15;
          v75 = v14;
          __p = (void *)v16;
          sub_19BF8EB40();
        }
        if (2 * (uint64_t)&v14[-v16] > (unint64_t)v27)
          v27 = 2 * (_QWORD)&v14[-v16];
        if ((unint64_t)&v14[-v16] >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
          v29 = (char *)operator new(v28);
        else
          v29 = 0;
        v37 = &v15[(_QWORD)v29 - v16];
        *v37 = v17;
        v19 = v37 + 1;
        if (v15 != (char *)v16)
        {
          v38 = &v15[~v16];
          do
          {
            v39 = *--v15;
            (v38--)[(_QWORD)v29] = v39;
          }
          while (v15 != (char *)v16);
          v37 = v29;
        }
        v14 = &v29[v28];
        if (v16)
          operator delete((void *)v16);
        v16 = (unint64_t)v37;
      }
      else
      {
        *v15 = v17;
        v19 = v15 + 1;
      }
      v8 += 6;
LABEL_72:
      v9 += 6;
LABEL_73:
      v15 = v19;
      v12 = v66;
      v13 = v78;
      v40 = v8 == v66 && v9 == v78;
      if (v40)
      {
        v74 = (unsigned __int8 *)v19;
        v75 = v14;
        __p = (void *)v16;
        v5 = v63;
        v4 = v64;
        goto LABEL_79;
      }
    }
    if (v9 == v13)
    {
      v74 = (unsigned __int8 *)v15;
      v75 = v14;
      __p = (void *)v16;
      __assert_rtn("stem_child_bytes", "TIStaticDictionaryImplCursor.cpp", 425, "baseline_byte < 0x100 || delta_byte < 0x100");
    }
    LOBYTE(v18) = *(_BYTE *)v9;
LABEL_20:
    if (v15 >= v14)
    {
      v20 = &v15[-v16];
      v21 = (uint64_t)&v15[-v16 + 1];
      if (v21 < 0)
      {
        v74 = (unsigned __int8 *)v15;
        v75 = v14;
        __p = (void *)v16;
        sub_19BF8EB40();
      }
      if (2 * (uint64_t)&v14[-v16] > (unint64_t)v21)
        v21 = 2 * (_QWORD)&v14[-v16];
      if ((unint64_t)&v14[-v16] >= 0x3FFFFFFFFFFFFFFFLL)
        v22 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)operator new(v22);
      else
        v23 = 0;
      v30 = &v20[(_QWORD)v23];
      v31 = &v20[(_QWORD)v23];
      *v31 = v18;
      v19 = v31 + 1;
      if (v15 != (char *)v16)
      {
        v32 = &v15[~v16];
        do
        {
          v33 = *--v15;
          (v32--)[(_QWORD)v23] = v33;
        }
        while (v15 != (char *)v16);
        v30 = v23;
      }
      v14 = &v23[v22];
      if (v16)
        operator delete((void *)v16);
      v16 = (unint64_t)v30;
    }
    else
    {
      *v15 = v18;
      v19 = v15 + 1;
    }
    goto LABEL_72;
  }
LABEL_79:
  v80[0] = (void **)&p_p_p;
  sub_19C01E090(v80);
  p_p_p = &p_p;
  sub_19C01E090((void ***)&p_p_p);
  v41 = *(_QWORD *)(v5 + 96);
  if (v41)
  {
    sub_19C01DAE4((unint64_t *)&p_p_p, v41, v4);
    v42 = (unsigned __int8 *)__p;
    v43 = (void **)p_p_p;
    while (1)
    {
      if (v42 == v74 && v43 == v78)
      {
LABEL_98:
        if (p_p_p)
        {
          v78 = (void **)p_p_p;
          operator delete(p_p_p);
        }
        goto LABEL_128;
      }
      if (v42 == v74)
      {
        if (v43 == v78)
          __assert_rtn("children", "TIStaticDictionaryImplCursor.cpp", 244, "suffix_byte < 0x100 || subcursor_byte < 0x100");
        v45 = 256;
      }
      else
      {
        v45 = *v42;
        if (v43 == v78)
        {
          v46 = 256;
          goto LABEL_91;
        }
      }
      v46 = *(unsigned __int8 *)v43;
LABEL_91:
      sub_19C028E38((uint64_t)&p_p, v5);
      if (v45 == v46)
      {
        v47.n128_f32[0] = sub_19C02824C((uint64_t)&p_p, v4, v45);
        ++v42;
LABEL_96:
        v43 = (void **)((char *)v43 + 1);
        goto LABEL_97;
      }
      if (v45 >= v46)
      {
        v47.n128_f32[0] = sub_19C02824C((uint64_t)&p_p, v4, v46);
        goto LABEL_96;
      }
      v47.n128_f32[0] = sub_19C02824C((uint64_t)&p_p, v4, v45);
      ++v42;
LABEL_97:
      (*(void (**)(uint64_t, void ***, unsigned __int8 *, __n128))(a3 + 16))(a3, &p_p, &v76, v47);
      v48 = v76;
      sub_19BFC7E88(&v72, 0);
      sub_19BFC72B0((uint64_t)v68);
      sub_19BFC72B0((uint64_t)&p_p);
      if (v48)
        goto LABEL_98;
    }
  }
  v58 = (unsigned __int8 *)__p;
  v59 = (char *)v74;
  if (__p != v74)
  {
    v60 = (char *)__p + 1;
    do
    {
      sub_19C028E38((uint64_t)&p_p, v5);
      v61 = sub_19C02824C((uint64_t)&p_p, v4, *(v60 - 1));
      (*(void (**)(uint64_t, void ***, unsigned __int8 *, float))(a3 + 16))(a3, &p_p, &v76, v61);
      v62 = v76;
      sub_19BFC7E88(&v72, 0);
      sub_19BFC72B0((uint64_t)v68);
      sub_19BFC72B0((uint64_t)&p_p);
      if (v62)
        break;
      v40 = v60++ == v59;
    }
    while (!v40);
LABEL_128:
    v58 = (unsigned __int8 *)__p;
  }
  if (v58)
  {
    v74 = v58;
    operator delete(v58);
  }
}

void sub_19C029814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **p_p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27)
{
  uint64_t v27;

  p_p = &__p;
  sub_19C01E090(&p_p);
  p_p = (void **)(v27 - 144);
  sub_19C01E090(&p_p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C029928(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  BOOL v3;
  uint64_t result;

  if (a1 <= 0xB)
    __assert_rtn("InputStream", "TIDataFile.cpp", 306, "m_offset <= m_size");
  v3 = a1 <= 0xF || a2 == 0;
  result = !v3;
  if (!v3)
    *a3 = *(_DWORD *)(a2 + 12);
  return result;
}

uint64_t sub_19C029978(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  BOOL v3;
  uint64_t result;

  if (a1 <= 0xF)
    __assert_rtn("InputStream", "TIDataFile.cpp", 306, "m_offset <= m_size");
  v3 = a1 <= 0x13 || a2 == 0;
  result = !v3;
  if (!v3)
    *a3 = *(_DWORD *)(a2 + 16);
  return result;
}

__n128 sub_19C0299C8(unint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;

  if (a1 <= 0x13)
    __assert_rtn("InputStream", "TIDataFile.cpp", 306, "m_offset <= m_size");
  if (a1 > 0x23 && a2 != 0)
  {
    result = *(__n128 *)(a2 + 20);
    *a3 = result;
  }
  return result;
}

uint64_t sub_19C029A18(const uint8_t *a1, _DWORD *a2, char *a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  unsigned __int8 v11;
  unsigned __int8 v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  NSObject *v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 v25;
  NSObject *v26;
  unsigned int v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned int v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  NSObject *v36;
  unsigned __int8 v37;
  unsigned int v38;
  unsigned __int8 v39;
  NSObject *v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  NSObject *v62;
  unsigned __int8 v64;
  unsigned __int8 v65;
  NSObject *v66;
  _BYTE *v67;
  const char *v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  const char *v78;
  uint8_t versionArray[4];
  _QWORD v80[3];
  char v81;
  unint64_t v82;
  unsigned int *v83;
  uint8_t v84[4];
  _BYTE *v85;
  uint8_t buf[4];
  _BYTE v87[18];
  int v88;
  __n128 v89;
  char v90[20];
  char versionString[20];
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v8 = a4 + 16;
  if (*(_QWORD *)(a4 + 8))
    v9 = *(char **)(a4 + 8);
  else
    v9 = (char *)(a4 + 16);
  sub_19BF8D9CC(v80, v9, 0);
  if (!v81)
  {
    v17 = atomic_load(byte_1EE414EA8);
    if ((v17 & 1) == 0)
      goto LABEL_99;
    v18 = atomic_load(byte_1EE417890);
    if ((v18 & 1) == 0)
    {
      v19 = sub_19BFD3F34();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = *(_QWORD *)(a4 + 8);
        if (!v20)
          v20 = v8;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v87 = v20;
        v14 = "File not found: %s";
        v15 = v19;
        v16 = 12;
        goto LABEL_33;
      }
      goto LABEL_99;
    }
    printf("File not found: %s");
    goto LABEL_98;
  }
  if (v82 - 1 < 3 || v83 == 0)
  {
    v11 = atomic_load(byte_1EE414EA8);
    if ((v11 & 1) == 0)
      goto LABEL_99;
    v12 = atomic_load(byte_1EE417890);
    if ((v12 & 1) == 0)
    {
      v13 = sub_19BFD3F34();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v14 = "couldn't read magic number from file";
LABEL_14:
        v15 = v13;
        v16 = 2;
LABEL_33:
        _os_log_impl(&dword_19BF85000, v15, OS_LOG_TYPE_ERROR, v14, buf, v16);
      }
LABEL_99:
      v57 = 0;
      goto LABEL_100;
    }
    printf("couldn't read magic number from file");
LABEL_98:
    putchar(10);
    goto LABEL_99;
  }
  if (*v83 != 0x1000000)
  {
    v23 = atomic_load(byte_1EE414EA8);
    if ((v23 & 1) == 0)
      goto LABEL_99;
    v24 = bswap32(*v83);
    v25 = atomic_load(byte_1EE417890);
    if ((v25 & 1) != 0)
    {
      printf("Magic numbers don't match!  Recorded: %u  Actual %u");
      goto LABEL_98;
    }
    v26 = sub_19BFD3F34();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      goto LABEL_99;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v87 = v24;
    *(_WORD *)&v87[4] = 1024;
    *(_DWORD *)&v87[6] = 1;
    v14 = "Magic numbers don't match!  Recorded: %u  Actual %u";
LABEL_32:
    v15 = v26;
    v16 = 14;
    goto LABEL_33;
  }
  if (v82 <= 3)
    __assert_rtn("InputStream", "TIDataFile.cpp", 306, "m_offset <= m_size");
  if (v82 <= 7)
  {
    v21 = atomic_load(byte_1EE414EA8);
    if ((v21 & 1) == 0)
      goto LABEL_99;
    v22 = atomic_load(byte_1EE417890);
    if ((v22 & 1) == 0)
    {
      v13 = sub_19BFD3F34();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v14 = "couldn't read major version from file";
        goto LABEL_14;
      }
      goto LABEL_99;
    }
    printf("couldn't read major version from file");
    goto LABEL_98;
  }
  v27 = v83[1];
  if (v27 != 50331648)
  {
    v30 = atomic_load(byte_1EE414EA8);
    if ((v30 & 1) == 0)
      goto LABEL_99;
    v31 = bswap32(v27);
    v32 = atomic_load(byte_1EE417890);
    if ((v32 & 1) != 0)
    {
      printf("Major versions don't match!  Recorded: %u  Actual %u");
      goto LABEL_98;
    }
    v26 = sub_19BFD3F34();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      goto LABEL_99;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v87 = v31;
    *(_WORD *)&v87[4] = 1024;
    *(_DWORD *)&v87[6] = 3;
    v14 = "Major versions don't match!  Recorded: %u  Actual %u";
    goto LABEL_32;
  }
  if (v82 <= 0xB)
  {
    v28 = atomic_load(byte_1EE414EA8);
    if ((v28 & 1) == 0)
      goto LABEL_99;
    v29 = atomic_load(byte_1EE417890);
    if ((v29 & 1) == 0)
    {
      v13 = sub_19BFD3F34();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        goto LABEL_99;
      *(_WORD *)buf = 0;
      v14 = "couldn't read minor version from file";
      goto LABEL_14;
    }
    printf("couldn't read minor version from file");
    goto LABEL_98;
  }
  v33 = v83[2];
  if (v33 != 352321536)
  {
    v37 = atomic_load(byte_1EE414EA8);
    if ((v37 & 1) == 0)
      goto LABEL_99;
    v38 = bswap32(v33);
    v39 = atomic_load(byte_1EE417890);
    if ((v39 & 1) == 0)
    {
      v40 = sub_19BFD3F34();
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        goto LABEL_99;
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)v87 = v38;
      *(_WORD *)&v87[4] = 1024;
      *(_DWORD *)&v87[6] = v38;
      *(_WORD *)&v87[10] = 1024;
      *(_DWORD *)&v87[12] = 21;
      *(_WORD *)&v87[16] = 1024;
      v88 = 21;
      v14 = "Minor versions don't match!  Recorded: %u(0x%x)  Actual %u(0x%x)";
      v15 = v40;
      v16 = 26;
      goto LABEL_33;
    }
    printf("Minor versions don't match!  Recorded: %u(0x%x)  Actual %u(0x%x)");
    goto LABEL_98;
  }
  *(_DWORD *)versionArray = 0;
  if ((sub_19C029928(v82, (uint64_t)v83, versionArray) & 1) == 0)
  {
    v41 = atomic_load(byte_1EE414EA8);
    if ((v41 & 1) == 0)
      goto LABEL_99;
    v42 = atomic_load(byte_1EE417890);
    if ((v42 & 1) == 0)
    {
      v13 = sub_19BFD3F34();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        goto LABEL_99;
      *(_WORD *)buf = 0;
      v14 = "couldn't read collator version from file";
      goto LABEL_14;
    }
    printf("couldn't read collator version from file");
    goto LABEL_98;
  }
  if (*(_DWORD *)versionArray != *(_DWORD *)a1)
  {
    u_versionToString(a1, versionString);
    u_versionToString(versionArray, v90);
    v34 = atomic_load(byte_1EE414EA8);
    if ((v34 & 1) == 0)
      goto LABEL_99;
    v35 = atomic_load(byte_1EE417890);
    if ((v35 & 1) != 0)
    {
      printf("Collator versions don't match!  Recorded: %s  Actual %s");
      goto LABEL_98;
    }
    v36 = sub_19BFD3F34();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      goto LABEL_99;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v87 = versionString;
    *(_WORD *)&v87[8] = 2080;
    *(_QWORD *)&v87[10] = v90;
    v14 = "Collator versions don't match!  Recorded: %s  Actual %s";
LABEL_55:
    v15 = v36;
    v16 = 22;
    goto LABEL_33;
  }
  *(_DWORD *)versionArray = 0;
  if ((sub_19C029978(v82, (uint64_t)v83, versionArray) & 1) == 0)
  {
    v45 = atomic_load(byte_1EE414EA8);
    if ((v45 & 1) == 0)
      goto LABEL_99;
    v46 = atomic_load(byte_1EE417890);
    if ((v46 & 1) == 0)
    {
      v13 = sub_19BFD3F34();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        goto LABEL_99;
      *(_WORD *)buf = 0;
      v14 = "couldn't read UCA version from file";
      goto LABEL_14;
    }
    printf("couldn't read UCA version from file");
    goto LABEL_98;
  }
  if (*(_DWORD *)versionArray != *a2)
  {
    u_versionToString(a1, versionString);
    u_versionToString(versionArray, v90);
    v43 = atomic_load(byte_1EE414EA8);
    if ((v43 & 1) == 0)
      goto LABEL_99;
    v44 = atomic_load(byte_1EE417890);
    if ((v44 & 1) != 0)
    {
      printf("Unicode Collation Algorithm (UCA) versions don't match!  Recorded: %s  Actual %s");
      goto LABEL_98;
    }
    v36 = sub_19BFD3F34();
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      goto LABEL_99;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v87 = versionString;
    *(_WORD *)&v87[8] = 2080;
    *(_QWORD *)&v87[10] = v90;
    v14 = "Unicode Collation Algorithm (UCA) versions don't match!  Recorded: %s  Actual %s";
    goto LABEL_55;
  }
  sub_19C0299C8(v82, (uint64_t)v83, &v89);
  if (!v52)
  {
    v58 = atomic_load(byte_1EE414EA8);
    if ((v58 & 1) == 0)
      goto LABEL_99;
    v59 = atomic_load(byte_1EE417890);
    if ((v59 & 1) == 0)
    {
      v13 = sub_19BFD3F34();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        goto LABEL_99;
      *(_WORD *)buf = 0;
      v14 = "couldn't get recorded checksum from file";
      goto LABEL_14;
    }
    printf("couldn't get recorded checksum from file");
    goto LABEL_98;
  }
  if (v89.n128_u8[0] != *a3)
  {
LABEL_92:
    v60 = atomic_load(byte_1EE414EA8);
    if ((v60 & 1) != 0)
    {
      v61 = atomic_load(byte_1EE417890);
      if ((v61 & 1) != 0)
      {
        printf("Checksums don't match!");
        putchar(10);
      }
      else
      {
        v62 = sub_19BFD3F34();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19BF85000, v62, OS_LOG_TYPE_ERROR, "Checksums don't match!", buf, 2u);
        }
      }
    }
    v64 = atomic_load(byte_1EE414EA8);
    if ((v64 & 1) != 0)
    {
      v65 = atomic_load(byte_1EE417890);
      if ((v65 & 1) != 0)
      {
        sub_19C02114C((uint64_t)buf, (char *)&v89, 16, v47, v48, v49, v50, v51);
        v68 = *(const char **)&v87[4];
        if (!*(_QWORD *)&v87[4])
          v68 = &v87[12];
        printf("Recorded: %s", v68);
        if (*(_QWORD *)&v87[4] && v87[2] == 1)
          free(*(void **)&v87[4]);
        putchar(10);
      }
      else
      {
        v66 = sub_19BFD3F34();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          sub_19C02114C((uint64_t)buf, (char *)&v89, 16, v47, v48, v49, v50, v51);
          v67 = *(_BYTE **)&v87[4];
          if (!*(_QWORD *)&v87[4])
            v67 = &v87[12];
          *(_DWORD *)v84 = 136315138;
          v85 = v67;
          _os_log_impl(&dword_19BF85000, v66, OS_LOG_TYPE_ERROR, "Recorded: %s", v84, 0xCu);
          if (*(_QWORD *)&v87[4] && v87[2] == 1)
            free(*(void **)&v87[4]);
        }
      }
    }
    v69 = atomic_load(byte_1EE414EA8);
    if ((v69 & 1) == 0)
      goto LABEL_99;
    v70 = atomic_load(byte_1EE417890);
    if ((v70 & 1) == 0)
    {
      v71 = sub_19BFD3F34();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        sub_19C02114C((uint64_t)buf, a3, 16, v72, v73, v74, v75, v76);
        v77 = *(_BYTE **)&v87[4];
        if (!*(_QWORD *)&v87[4])
          v77 = &v87[12];
        *(_DWORD *)v84 = 136315138;
        v85 = v77;
        _os_log_impl(&dword_19BF85000, v71, OS_LOG_TYPE_ERROR, "Actual: %s", v84, 0xCu);
        if (*(_QWORD *)&v87[4] && v87[2] == 1)
          free(*(void **)&v87[4]);
      }
      goto LABEL_99;
    }
    sub_19C02114C((uint64_t)buf, a3, 16, v47, v48, v49, v50, v51);
    v78 = *(const char **)&v87[4];
    if (!*(_QWORD *)&v87[4])
      v78 = &v87[12];
    printf("Actual: %s", v78);
    if (*(_QWORD *)&v87[4] && v87[2] == 1)
      free(*(void **)&v87[4]);
    goto LABEL_98;
  }
  v53 = 1;
  while (v53 != 16)
  {
    v54 = v53;
    v55 = v89.n128_u8[v53];
    v56 = a3[v53++];
    if (v55 != v56)
    {
      if ((unint64_t)(v54 - 1) <= 0xE)
        goto LABEL_92;
      break;
    }
  }
  v57 = 1;
LABEL_100:
  sub_19BF8DA50((uint64_t)v80);
  return v57;
}

void sub_19C02A3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_19BF8DA50((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C02A46C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)a1 = &off_1E3D148A8;
  if (*(unsigned __int16 *)(a1 + 96) >= 0xFu)
  {
    v2 = *(_QWORD *)(a1 + 104);
    if (v2)
      MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  }
  if (*(unsigned __int16 *)(a1 + 72) >= 0xFu)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (v3)
      MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  }
  v4 = *(void **)(a1 + 48);
  if (v4 && *(_BYTE *)(a1 + 46) == 1)
    free(v4);
  v5 = *(unsigned int **)(a1 + 24);
  if (v5)
    sub_19BFD5EEC(v5);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_19C02A51C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)a1 = &off_1E3D148A8;
  if (*(unsigned __int16 *)(a1 + 96) >= 0xFu)
  {
    v2 = *(_QWORD *)(a1 + 104);
    if (v2)
      MEMORY[0x1A1AD0CB8](v2, 0x1000C8077774924);
  }
  if (*(unsigned __int16 *)(a1 + 72) >= 0xFu)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (v3)
      MEMORY[0x1A1AD0CB8](v3, 0x1000C8077774924);
  }
  v4 = *(void **)(a1 + 48);
  if (v4 && *(_BYTE *)(a1 + 46) == 1)
    free(v4);
  v5 = *(unsigned int **)(a1 + 24);
  if (v5)
    sub_19BFD5EEC(v5);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C02A5DC(uint64_t a1, unsigned __int16 *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  unsigned int *v6;
  int v7;
  size_t v8;
  uint64_t Instance;
  std::__shared_weak_count *v10;
  size_t v11;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  char *v24;
  unsigned int *v25;
  unsigned int *v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_weak_owners;
  unint64_t v33;
  int v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  int v44;
  int v45;
  int v46;
  unsigned int *v47;
  int v48;
  int v49;
  unsigned int v50;
  __int128 v51;
  char v52;
  __int128 v53;
  int v54;
  unsigned int *v55;
  char v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  char v60;
  __int128 v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  v58 = v5;
  if (!v5)
    return 0;
  v57 = *(_QWORD *)(a1 + 8);
  if (!v57)
  {
    v10 = v5;
    Instance = 0;
LABEL_79:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return Instance;
  }
  v6 = *(unsigned int **)(a1 + 24);
  v55 = v6;
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    if (v7 <= 0)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  v56 = *(_BYTE *)(a1 + 32);
  v8 = *(unsigned __int16 *)(a1 + 72);
  if (v8 < 0xF)
  {
    v51 = *(_OWORD *)(a1 + 72);
  }
  else
  {
    LOWORD(v51) = *(_WORD *)(a1 + 72);
    *((_QWORD *)&v51 + 1) = operator new[]();
    memcpy(*((void **)&v51 + 1), *(const void **)(a1 + 80), v8);
  }
  v11 = *(unsigned __int16 *)(a1 + 96);
  v52 = *(_BYTE *)(a1 + 88);
  if (v11 < 0xF)
  {
    v53 = *(_OWORD *)(a1 + 96);
  }
  else
  {
    LOWORD(v53) = v11;
    *((_QWORD *)&v53 + 1) = operator new[]();
    memcpy(*((void **)&v53 + 1), *(const void **)(a1 + 104), v11);
  }
  v54 = *(_DWORD *)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 24);
  v40 = a1;
  if (v12)
    v38 = *(_DWORD *)(v12 + 4);
  else
    v38 = 0;
  if (*((_QWORD *)a2 + 1))
    v13 = (unsigned int *)*((_QWORD *)a2 + 1);
  else
    v13 = (unsigned int *)(a2 + 8);
  v47 = v13;
  v39 = (uint64_t)a2;
  v14 = *a2;
  v48 = 0;
  v49 = v14;
  v50 = 0;
  sub_19BF8BB80((uint64_t *)&v47);
  v43 = v13;
  v44 = v14;
  v45 = v14;
  v46 = 0;
  sub_19BF8BB80((uint64_t *)&v43);
  v15 = v43;
  v16 = v44;
  while (1)
  {
    if (v47 != v15)
      __assert_rtn("operator!=", "TIString.h", 194, "p==rhs.p");
    if (v48 == v16)
      break;
    v17 = v50;
    v18 = v57;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v57 + 1512) + 16))(&v41, *(_QWORD *)(v57 + 1512), v50);
    v19 = (unsigned __int16)v51;
    sub_19BF8BF40((uint64_t)&v59, v18 + 136, (uint64_t)&v51, v17, (unsigned __int16 *)&v41);
    if (v19 >= 0xF && *((_QWORD *)&v51 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v51 + 1), 0x1000C8077774924);
    v51 = v59;
    if ((unsigned __int16)v59 >= 0xFu)
      LOWORD(v59) = 0;
    v52 = v60;
    if ((unsigned __int16)v53 >= 0xFu && *((_QWORD *)&v53 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v53 + 1), 0x1000C8077774924);
    v53 = v61;
    if ((unsigned __int16)v61 >= 0xFu)
      LOWORD(v61) = 0;
    v54 = v62;
    if ((unsigned __int16)v59 >= 0xFu && *((_QWORD *)&v59 + 1))
      MEMORY[0x1A1AD0CB8](*((_QWORD *)&v59 + 1), 0x1000C8077774924);
    v20 = v55;
    if (v55)
    {
      v21 = (unsigned __int16)v51;
      if (v19 <= (unsigned __int16)v51)
        v22 = (unsigned __int16)v51;
      else
        v22 = v19;
      while (1)
      {
        v23 = v22 != v19;
        if (v22 == v19)
          break;
        v24 = (char *)*((_QWORD *)&v51 + 1);
        if (v21 <= 0xE)
          v24 = (char *)&v51 + 2;
        sub_19BFD7FEC((unsigned int *)&v59, (uint64_t)&v55, v24[v19]);
        v25 = (unsigned int *)v59;
        *(_QWORD *)&v59 = 0;
        v55 = v25;
        sub_19BFD5EEC(v20);
        v56 = BYTE8(v59);
        if ((_QWORD)v59)
          sub_19BFD5EEC((unsigned int *)v59);
        v20 = v55;
        ++v19;
        if (!v55)
          goto LABEL_47;
      }
    }
    else
    {
LABEL_47:
      v23 = 1;
    }
    if ((unsigned __int16)v41 >= 0xFu && v42)
      MEMORY[0x1A1AD0CB8](v42, 0x1000C8077774924);
    if (v23)
    {
      Instance = 0;
      goto LABEL_70;
    }
    sub_19BF8BB80((uint64_t *)&v47);
  }
  v26 = v55;
  if (!v55)
    __assert_rtn("create_child", "LXMutableLexiconCursorImpl.cpp", 64, "impl");
  v27 = sub_19BFEA658(v55[1], v38);
  v28 = log10(v27);
  sub_19BFF78D0((uint64_t)&v59, (unsigned __int16 *)(v40 + 40), v39);
  v29 = *(double *)(v40 + 128);
  if (qword_1ED024388 != -1)
    dispatch_once(&qword_1ED024388, &unk_1E3D17B50);
  Instance = _CFRuntimeCreateInstance();
  v30 = v57;
  v31 = v58;
  if (v58)
  {
    p_shared_weak_owners = (unint64_t *)&v58->__shared_weak_owners_;
    do
      v33 = __ldxr(p_shared_weak_owners);
    while (__stxr(v33 + 1, p_shared_weak_owners));
  }
  v47 = v26;
  do
    v34 = __ldaxr(v26);
  while (__stlxr(v34 + 1, v26));
  if (v34 < 1)
    __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  LOBYTE(v48) = v56;
  sub_19C02B68C(Instance + 16, v30, (uint64_t)v31, (uint64_t)&v47, (unsigned __int16 *)&v59, (unsigned __int16 *)&v51, v28, v29 + v28);
  if (v47)
    sub_19BFD5EEC(v47);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  if (*((_QWORD *)&v59 + 1) && BYTE6(v59) == 1)
    free(*((void **)&v59 + 1));
LABEL_70:
  if ((unsigned __int16)v53 >= 0xFu && *((_QWORD *)&v53 + 1))
    MEMORY[0x1A1AD0CB8](*((_QWORD *)&v53 + 1), 0x1000C8077774924);
  if ((unsigned __int16)v51 >= 0xFu && *((_QWORD *)&v51 + 1))
    MEMORY[0x1A1AD0CB8](*((_QWORD *)&v51 + 1), 0x1000C8077774924);
  if (v55)
    sub_19BFD5EEC(v55);
  v10 = v58;
  if (v58)
    goto LABEL_79;
  return Instance;
}

void sub_19C02ABCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int16 a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned int *a27,uint64_t a28,char a29)
{
  if (a21 >= 0xFu)
  {
    if (a22)
      MEMORY[0x1A1AD0CB8](a22, 0x1000C8077774924);
  }
  sub_19BFD8168(&a27);
  sub_19BFACCEC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_19C02ACE0()
{
  __assert_rtn("is_equal", "LXMutableLexiconCursorImpl.cpp", 72, "false && \"MutableLexiconCursorImpl::is_equal not implemented yet\"");
}

uint64_t sub_19C02AD08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 136);
}

BOOL sub_19C02AD10(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  return v1
      && (unint64_t)*(unsigned __int8 *)(a1 + 32) + 1 >= *(unsigned __int8 *)(v1 + 15)
      && *(_DWORD *)(v1 + 16) != 0;
}

uint64_t sub_19C02AD44(uint64_t a1, uint64_t a2)
{
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = sub_19C02B8E0;
  v3[3] = &unk_1E3D17AB0;
  v3[4] = a2;
  v3[5] = a1;
  return sub_19BFD82A4(a1 + 24, (uint64_t)v3);
}

BOOL sub_19C02AD9C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 0;
  if ((unint64_t)*(unsigned __int8 *)(a1 + 32) + 1 >= *(unsigned __int8 *)(v1 + 15))
    return *(_DWORD *)(v1 + 20) != 0;
  return 1;
}

void sub_19C02ADD8(_QWORD *a1, uint64_t a2)
{
  unsigned int *v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[7];
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD v22[10];

  v2 = (unsigned int *)(a1 + 3);
  if (a1[3])
  {
    v20 = 0;
    v21 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
    {
      v6 = std::__shared_weak_count::lock(v4);
      v21 = v6;
      if (v6)
      {
        v7 = a1[1];
        v20 = v7;
        if (v7)
        {
          v8 = v7 + 136;
          v9 = MEMORY[0x1E0C809B0];
          v18[0] = MEMORY[0x1E0C809B0];
          v18[1] = 1174405120;
          v18[2] = sub_19C02B1E4;
          v18[3] = &unk_1E3D17AD8;
          v18[5] = a1;
          v18[6] = v7;
          v19 = v6;
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
          v18[4] = a2;
          v22[0] = v9;
          v22[1] = 0x40000000;
          v22[2] = sub_19C02B384;
          v22[3] = &unk_1E3D17B10;
          v22[6] = a1 + 9;
          v22[7] = v2;
          v22[8] = a1 + 5;
          v22[9] = 0;
          v22[4] = v18;
          v22[5] = v8;
          sub_19BFD8334(v2, (uint64_t)v22);
          v12 = v19;
          if (v19)
          {
            v13 = (unint64_t *)&v19->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
        }
      }
    }
    v15 = v21;
    if (v21)
    {
      v16 = (unint64_t *)&v21->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_19C02AF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_19BFACCEC(v9);
  sub_19BFACCEC((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19C02AF64(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

double sub_19C02AF6C(uint64_t a1)
{
  return *(double *)(a1 + 128);
}

double sub_19C02AF74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double v8;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    if ((unint64_t)*(unsigned __int8 *)(a1 + 32) + 1 >= *(unsigned __int8 *)(v1 + 15)
      && (v2 = *(unsigned int *)(v1 + 16), (_DWORD)v2))
    {
      v3 = 0;
      v4 = (uint64_t *)(v1 + 24);
      v5 = 8 * v2;
      do
      {
        v6 = *v4++;
        v3 += *(_DWORD *)(v6 + 48);
        v5 -= 8;
      }
      while (v5);
    }
    else
    {
      v3 = 0;
    }
    v7 = *(_DWORD *)(v1 + 4);
  }
  else
  {
    v3 = 0;
    v7 = 0;
  }
  v8 = sub_19BFEA658(v3, v7);
  return log10(v8);
}

uint64_t sub_19C02AFE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 0;
  if ((unint64_t)*(unsigned __int8 *)(a1 + 32) + 1 < *(unsigned __int8 *)(v1 + 15))
    return 0;
  v2 = *(unsigned int *)(v1 + 16);
  if (!(_DWORD)v2)
    return 0;
  LODWORD(result) = 0;
  v4 = (uint64_t *)(v1 + 24);
  v5 = 8 * v2;
  do
  {
    v6 = *v4++;
    result = (*(_DWORD *)(v6 + 48) + result);
    v5 -= 8;
  }
  while (v5);
  return result;
}

uint64_t sub_19C02B034(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return *(unsigned int *)(v1 + 4);
  else
    return 0;
}

const void *sub_19C02B04C(uint64_t a1)
{
  const void *v1;
  const void *v3;

  sub_19BF8CFAC((CFStringRef *)&v3, (unsigned __int16 *)(a1 + 40));
  v1 = v3;
  v3 = 0;
  sub_19BF8DAB8(&v3);
  return v1;
}

uint64_t sub_19C02B08C(uint64_t a1)
{
  unsigned __int16 *v1;
  int v2;

  v2 = *(unsigned __int16 *)(a1 + 40);
  v1 = (unsigned __int16 *)(a1 + 40);
  if (v2)
    return sub_19C024D3C(v1);
  else
    return 0;
}

uint64_t sub_19C02B0A0()
{
  return 0;
}

unint64_t sub_19C02B0A8(uint64_t a1)
{
  size_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t *p_p;
  unint64_t v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  void *__p;
  unint64_t v17;
  unsigned __int8 v18;

  v2 = *(unsigned __int16 *)(a1 + 72);
  if (v2 < 0xF)
    v3 = (void *)(a1 + 74);
  else
    v3 = *(void **)(a1 + 80);
  sub_19BFA4428(&__p, v3, v2);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if ((v18 & 0x80u) == 0)
      p_p = (uint64_t *)&__p;
    else
      p_p = (uint64_t *)__p;
    if ((v18 & 0x80u) == 0)
      v9 = v18;
    else
      v9 = v17;
    v10 = sub_19BFCF130(p_p, v9);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 112))(v7);
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    if ((v18 & 0x80u) == 0)
      v13 = (uint64_t *)&__p;
    else
      v13 = (uint64_t *)__p;
    if ((v18 & 0x80u) == 0)
      v14 = v18;
    else
      v14 = v17;
    v10 = sub_19BFCF130(v13, v14);
    v7 = 0;
  }
  if ((char)v18 < 0)
    operator delete(__p);
  return v7 ^ v10;
}

void sub_19C02B1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_19BFACCEC((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19C02B1E4(_QWORD *a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, double a5)
{
  double v10;
  uint64_t Instance;
  const void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unsigned int *v17;
  int v18;
  unsigned int *v19;
  char v20;

  v10 = *(double *)(a1[5] + 128);
  if (qword_1ED024388 != -1)
    dispatch_once(&qword_1ED024388, &unk_1E3D17B50);
  Instance = _CFRuntimeCreateInstance();
  v12 = (const void *)Instance;
  v13 = a1[6];
  v14 = (std::__shared_weak_count *)a1[7];
  if (v14)
  {
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
  }
  v17 = *(unsigned int **)a2;
  v19 = v17;
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    if (v18 <= 0)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  v20 = *(_BYTE *)(a2 + 8);
  sub_19C02B68C(Instance + 16, v13, (uint64_t)v14, (uint64_t)&v19, a3, a4, a5, v10 + a5);
  if (v19)
    sub_19BFD5EEC(v19);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  (*(void (**)(void))(a1[4] + 16))();
  CFRelease(v12);
}

void sub_19C02B354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9)
{
  std::__shared_weak_count *v9;

  if (a9)
    sub_19BFD5EEC(a9);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  _Unwind_Resume(exception_object);
}

void sub_19C02B384(uint64_t a1, unsigned __int8 *a2, BOOL *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  long double v15;
  uint64_t v16;
  int v17;
  double v18;
  uint64_t v19;
  double v20;
  long double v21;
  unsigned __int16 v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t (*v30)();
  void *v31;
  __int128 v32;
  unsigned __int16 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && *(_BYTE *)(v6 + 15))
    v7 = *(unsigned __int8 *)(v6 + a2[8] + 8);
  else
    v7 = 0;
  sub_19C0166CC(&v22, *(_QWORD *)(a1 + 40), *(unsigned __int16 **)(a1 + 48), v7);
  if (v26 == -1)
  {
    v9 = *(_QWORD *)(a1 + 32);
    sub_19BFF782C((uint64_t)&v28, *(unsigned __int16 **)(a1 + 64), 0xFFFDu);
    v10 = 0.0;
    v11 = 0.0;
    if (*(_QWORD *)a2)
    {
      LODWORD(v11) = *(_DWORD *)(*(_QWORD *)a2 + 4);
      v11 = (double)*(unint64_t *)&v11;
    }
    v12 = *(double *)(a1 + 72);
    v13 = **(_QWORD **)(a1 + 56);
    if (v13)
    {
      LODWORD(v10) = *(_DWORD *)(v13 + 4);
      v10 = (double)*(unint64_t *)&v10;
    }
  }
  else
  {
    if (v26 == -2)
    {
      if (*(_QWORD *)a2)
        v8 = *(_DWORD *)(*(_QWORD *)a2 + 4);
      else
        v8 = 0;
      v16 = **(_QWORD **)(a1 + 56);
      if (v16)
        v17 = *(_DWORD *)(v16 + 4);
      else
        v17 = 0;
      v18 = sub_19BFEA658(v8, v17);
      v19 = *(_QWORD *)(a1 + 64);
      v20 = *(double *)(a1 + 72);
      v21 = log10(v18);
      v28 = MEMORY[0x1E0C809B0];
      v29 = (void *)0x40000000;
      v30 = sub_19C02B384;
      v31 = &unk_1E3D17B10;
      v33 = &v22;
      v34 = a2;
      v35 = v19;
      v36 = v21 + v20;
      v32 = *(_OWORD *)(a1 + 32);
      sub_19BFD8334((unsigned int *)a2, (uint64_t)&v28);
      goto LABEL_26;
    }
    v9 = *(_QWORD *)(a1 + 32);
    sub_19BFF782C((uint64_t)&v28, *(unsigned __int16 **)(a1 + 64), v26);
    v10 = 0.0;
    v11 = 0.0;
    if (*(_QWORD *)a2)
    {
      LODWORD(v11) = *(_DWORD *)(*(_QWORD *)a2 + 4);
      v11 = (double)*(unint64_t *)&v11;
    }
    v12 = *(double *)(a1 + 72);
    v14 = **(_QWORD **)(a1 + 56);
    if (v14)
    {
      LODWORD(v10) = *(_DWORD *)(v14 + 4);
      v10 = (double)*(unint64_t *)&v10;
    }
  }
  v15 = log10(v11 / v10);
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t *, unsigned __int16 *, char *, long double))(v9 + 16))(v9, a2, &v28, &v22, &v27, v12 + v15);
  if (v29 && BYTE6(v28) == 1)
    free(v29);
LABEL_26:
  *a3 = v27 != 0;
  if (v24 >= 0xFu && v25)
    MEMORY[0x1A1AD0CB8](v25, 0x1000C8077774924);
  if (v22 >= 0xFu)
  {
    if (v23)
      MEMORY[0x1A1AD0CB8](v23, 0x1000C8077774924);
  }
}

void sub_19C02B618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  if (a19)
  {
    if (a18 == 1)
      free(a19);
  }
  sub_19BFCF8D8((unsigned __int16 *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C02B660(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_19C02B684(uint64_t a1)
{
  return sub_19BFACCEC(a1 + 48);
}

uint64_t sub_19C02B68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, unsigned __int16 *a6, double a7, double a8)
{
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  void *v17;
  _OWORD *v18;
  unint64_t v19;
  void *v20;

  *(_QWORD *)a1 = &off_1E3D148A8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  if (a3)
  {
    v13 = (unint64_t *)(a3 + 16);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_19C02B838(a1 + 24, a4);
  sub_19BF86B60(a1 + 40, a5);
  v15 = (_OWORD *)(a1 + 72);
  v16 = *a6;
  if (v16 < 0xF)
  {
    *v15 = *(_OWORD *)a6;
  }
  else
  {
    *(_WORD *)v15 = v16;
    v17 = (void *)operator new[]();
    *(_QWORD *)(a1 + 80) = v17;
    memcpy(v17, *((const void **)a6 + 1), *(unsigned __int16 *)(a1 + 72));
  }
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a6 + 16);
  v18 = (_OWORD *)(a1 + 96);
  v19 = a6[12];
  if (v19 < 0xF)
  {
    *v18 = *(_OWORD *)(a6 + 12);
  }
  else
  {
    *(_WORD *)v18 = v19;
    v20 = (void *)operator new[]();
    *(_QWORD *)(a1 + 104) = v20;
    memcpy(v20, *((const void **)a6 + 4), *(unsigned __int16 *)(a1 + 96));
  }
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a6 + 10);
  *(double *)(a1 + 120) = a7;
  *(double *)(a1 + 128) = a8;
  *(_BYTE *)(a1 + 136) = *a6 == 0;
  return a1;
}

void sub_19C02B7C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;
  unsigned __int16 *v3;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;

  if (*v3 >= 0xFu)
  {
    v5 = *(_QWORD *)(v1 + 80);
    if (v5)
      MEMORY[0x1A1AD0CB8](v5, 0x1000C8077774924);
  }
  v6 = *(void **)(v1 + 48);
  if (v6 && *(_BYTE *)(v1 + 46) == 1)
    free(v6);
  sub_19BFD8168(v2);
  v7 = *(std::__shared_weak_count **)(v1 + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_19C02B838(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  int v3;

  v2 = *(unsigned int **)a2;
  *(_QWORD *)result = *(_QWORD *)a2;
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
    if (v3 <= 0)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t sub_19C02B894()
{
  uint64_t result;

  qword_1ED024390 = 0;
  *(_QWORD *)algn_1ED024398 = "LXCursor";
  qword_1ED0243A0 = 0;
  unk_1ED0243A8 = 0;
  qword_1ED0243B0 = (uint64_t)sub_19BFCFB34;
  unk_1ED0243B8 = 0u;
  unk_1ED0243C8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0243F0 = result;
  return result;
}

void sub_19C02B8E0(uint64_t a1, int32x2_t **a2, _BYTE *a3)
{
  uint64_t v6;
  int32x2_t *v7;
  int v8;
  uint64_t v9;
  int v10;
  double v11;
  float v12;
  int32x2_t *v13;
  double v14;
  double v15;
  int32x2_t v16;
  __int32 v17;
  uint64_t Instance;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  unsigned __int16 v22[3];
  char v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 40);
  sub_19BF86B60((uint64_t)v22, (unsigned __int16 *)&(*a2)[1]);
  *(_QWORD *)((char *)&v25 + 5) = 0;
  v26 = 0uLL;
  *(_QWORD *)&v25 = 0;
  *(_QWORD *)&v27 = 0xFFFFFFFFLL;
  BYTE8(v27) = 0;
  HIDWORD(v27) = 0;
  v28 = 0;
  v7 = *a2;
  HIDWORD(v26) = (*a2)[5].i32[0];
  v8 = v7[6].i32[0];
  v9 = *(_QWORD *)(v6 + 24);
  if (v9)
    v10 = *(_DWORD *)(v9 + 4);
  else
    v10 = 0;
  v11 = sub_19BFEA658(v8, v10);
  v12 = v11;
  *(float *)&v25 = v12;
  v13 = *a2;
  *(int32x2_t *)&v26 = vmax_s32(v13[6], 0);
  DWORD1(v25) = v13[5].i32[1];
  v14 = *(double *)(v6 + 128);
  v15 = log10(v11);
  v16 = v13[7];
  v17 = v13[8].i32[0];
  if (qword_1ED024268 != -1)
    dispatch_once(&qword_1ED024268, &unk_1E3D17B90);
  Instance = _CFRuntimeCreateInstance();
  sub_19BF86B60(Instance + 16, v22);
  v19 = v28;
  v21 = v26;
  v20 = v27;
  *(_OWORD *)(Instance + 48) = v25;
  *(_OWORD *)(Instance + 64) = v21;
  *(_OWORD *)(Instance + 80) = v20;
  *(_WORD *)(Instance + 96) = v19;
  *(double *)(Instance + 104) = v15 + v14;
  *(int32x2_t *)(Instance + 112) = v16;
  *(_DWORD *)(Instance + 120) = v17;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *a3 = 0;
  CFRelease((CFTypeRef)Instance);
  if (v24)
  {
    if (v23 == 1)
      free(v24);
  }
}

void sub_19C02BACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, void *a14)
{
  if (a14)
  {
    if (a13 == 1)
      free(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C02BB00()
{
  uint64_t result;

  qword_1ED024270 = 0;
  *(_QWORD *)algn_1ED024278 = "LXEntry";
  qword_1ED024280 = 0;
  unk_1ED024288 = 0;
  qword_1ED024290 = (uint64_t)sub_19BFD0144;
  unk_1ED024298 = 0u;
  unk_1ED0242A8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0242D0 = result;
  return result;
}

uint64_t sub_19C02BB4C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3D14618;
  os_release(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  sub_19BFACCEC(a1 + 24);
  sub_19BFACCEC(a1 + 8);
  return a1;
}

void sub_19C02BBA4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3D14618;
  os_release(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  sub_19BFACCEC(a1 + 24);
  sub_19BFACCEC(a1 + 8);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19C02BC0C()
{
  __assert_rtn("load", "LXDynamicLexiconProxy.cpp", 62, "false && \"load() not supported for a lexicon proxy\"");
}

void sub_19C02BC34()
{
  __assert_rtn("store", "LXDynamicLexiconProxy.cpp", 68, "false && \"store() not supported for a lexicon proxy\"");
}

uint64_t sub_19C02BC5C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::mutex *v6;
  std::__shared_weak_count *v7;

  sub_19C02C28C(&v6, *(_QWORD *)(a1 + 8));
  if (v6)
    v1 = sub_19BFF1364(v6);
  else
    v1 = 0;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_19C02BCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFACCEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C02BCF0(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_19C02C28C(&v8, *(_QWORD *)(a1 + 8));
  if (v8)
    v3 = sub_19BFF1494(v8, a2);
  else
    v3 = 0;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_19C02BD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFACCEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFStringRef sub_19C02BD8C(uint64_t a1)
{
  CFStringRef v2;
  CFStringRef v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_19C02C28C(&v8, *(_QWORD *)(a1 + 8));
  if (v8)
    v2 = sub_19BFF17B4(v8);
  else
    v2 = sub_19BF8DBF4(a1 + 40);
  v3 = v2;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_19C02BE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFACCEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C02BE28(uint64_t a1)
{
  uint64_t Instance;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::mutex *v6;
  std::__shared_weak_count *v7;

  sub_19C02C28C(&v6, *(_QWORD *)(a1 + 8));
  if (v6)
  {
    Instance = (uint64_t)sub_19BFF1828(v6);
  }
  else
  {
    if (qword_1ED024388 != -1)
      dispatch_once(&qword_1ED024388, &unk_1E3D17BD0);
    Instance = _CFRuntimeCreateInstance();
    *(_QWORD *)(Instance + 16) = &off_1E3D14438;
  }
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return Instance;
}

void sub_19C02BF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFACCEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C02BF14(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::mutex *v6;
  std::__shared_weak_count *v7;

  sub_19C02C28C(&v6, *(_QWORD *)(a1 + 8));
  if (!v6)
    __assert_rtn("enumerate_common_letter_forms", "LXDynamicLexiconProxy.cpp", 169, "false && \"enumerate_common_letter_forms not supported for a detached lexicon proxy\"");
  sub_19BFF187C(v6, a2);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19C02BFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFACCEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C02BFD0(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  sub_19C02C28C(&v12, *(_QWORD *)(a1 + 8));
  if (v12)
    v6 = (uint64_t *)(v12 + 1512);
  else
    v6 = (uint64_t *)(a1 + 24);
  v7 = sub_19BFEA0A8(*v6, a2, a3);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_19C02C074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFACCEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C02C088(uint64_t a1@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_19C02C28C(&v10, *(_QWORD *)(a1 + 8));
  if (v10)
    v6 = (uint64_t *)(v10 + 1512);
  else
    v6 = (uint64_t *)(a1 + 24);
  sub_19BF8B7D8(a3, *v6, a2);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19C02C134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFACCEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C02C148(uint64_t a1, char *a2, unsigned __int16 a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_19C02C28C(&v10, *(_QWORD *)(a1 + 8));
  if (v10)
    v5 = sub_19BFF1984(v10, a2, a3);
  else
    v5 = 0;
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_19C02C1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFACCEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C02C1EC()
{
  __assert_rtn("add_entry_with_creation_time", "LXDynamicLexiconProxy.cpp", 111, "false && \"add_entry_with_creation_time() not supported for a lexicon proxy\"");
}

void sub_19C02C214()
{
  __assert_rtn("add_entry", "LXDynamicLexiconProxy.cpp", 117, "false && \"add_entry() not supported for a lexicon proxy\"");
}

void sub_19C02C23C()
{
  __assert_rtn("remove_entry", "LXDynamicLexiconProxy.cpp", 123, "false && \"remove_entry() not supported for a lexicon proxy\"");
}

void sub_19C02C264()
{
  __assert_rtn("clear", "LXDynamicLexiconProxy.cpp", 129, "false && \"clear() not supported for a lexicon proxy\"");
}

void sub_19C02C28C(_QWORD *a1, uint64_t a2)
{
  std::mutex *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v4 = (std::mutex *)(a2 + 32);
  std::mutex::lock((std::mutex *)(a2 + 32));
  *a1 = 0;
  a1[1] = 0;
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    a1[1] = v6;
    if (v6)
      *a1 = *(_QWORD *)(a2 + 8);
  }
  std::mutex::unlock(v4);
}

void sub_19C02C2E8()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C02C2FC()
{
  return 0;
}

uint64_t sub_19C02C304()
{
  return 0;
}

uint64_t sub_19C02C30C()
{
  return 1;
}

uint64_t sub_19C02C314()
{
  return 0;
}

uint64_t sub_19C02C320()
{
  return 0;
}

double sub_19C02C32C()
{
  return 0.0;
}

double sub_19C02C334()
{
  return 0.0;
}

double sub_19C02C33C()
{
  return -INFINITY;
}

uint64_t sub_19C02C348()
{
  return 0;
}

uint64_t sub_19C02C350()
{
  return 0;
}

const __CFString *sub_19C02C358()
{
  return &stru_1E3D1ADF0;
}

uint64_t sub_19C02C364()
{
  return 0;
}

uint64_t sub_19C02C36C()
{
  return 0;
}

uint64_t sub_19C02C374()
{
  return 0;
}

uint64_t sub_19C02C37C()
{
  uint64_t result;

  qword_1ED024390 = 0;
  *(_QWORD *)algn_1ED024398 = "LXCursor";
  qword_1ED0243A0 = 0;
  unk_1ED0243A8 = 0;
  qword_1ED0243B0 = (uint64_t)sub_19BFCFB34;
  unk_1ED0243B8 = 0u;
  unk_1ED0243C8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0243F0 = result;
  return result;
}

uint64_t sub_19C02C3C8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E3D145F0;
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  os_release(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_19C02C410(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E3D145F0;
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  os_release(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19C02C468(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  uint8_t v11[16];

  v4 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v6 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v5;
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  v10 = *(NSObject **)(a1 + 24);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v11 = 0;
    _os_log_debug_impl(&dword_19BF85000, v10, OS_LOG_TYPE_DEBUG, "updated the backing lexicon for a lexicon view", v11, 2u);
  }
  std::mutex::unlock(v4);
}

void sub_19C02C518(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D14E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C02C528(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D14E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C02C558(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_19C02C568(uint64_t result, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v3 = 0;
  v4 = *a2;
  v5 = "";
  while (*(unsigned __int16 *)&aK1n1114171g111[v3] != v4)
  {
    v3 += 2;
    if (v3 == 18)
      goto LABEL_6;
  }
  v5 = &aK1n1114171g111[v3];
LABEL_6:
    goto LABEL_13;
  v7 = 0;
  if (a3)
  {
    v8 = 2 * a3;
    while (a2[v7] == v4)
    {
      ++v7;
      v8 -= 2;
      if (!v8)
      {
        v7 = ((a3 - 1) & 0x7FFFFFFFFFFFFFFFLL) + 1;
        break;
      }
    }
  }
  if (v7 < *v6)
  {
LABEL_13:
    v9 = 0;
    *(_BYTE *)result = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = v7;
    v9 = 1;
  }
  *(_BYTE *)(result + 16) = v9;
  return result;
}

void sub_19C02C618(uint64_t a1)
{
  sub_19C02D2A4(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C02C63C(uint64_t a1, CFErrorRef *a2)
{
  char *v4;
  char *v5;
  char *v6;
  std::__fs::filesystem::path *v8;
  std::string::size_type size;
  std::__fs::filesystem::path *p_dst;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__fs::filesystem::path *v16;
  const void *v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string v25;
  std::string __p;
  std::__fs::filesystem::path v27;
  std::__fs::filesystem::path v28;
  std::__fs::filesystem::path __dst;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!sub_19BFEA8A0((unsigned __int16 *)a1, a2))
    return 0;
  v4 = *(char **)(a1 + 30176);
  *(_OWORD *)&v28.__pn_.__r_.__value_.__r.__words[1] = 0uLL;
  if (v4)
    v5 = v4;
  else
    v5 = (char *)(a1 + 30184);
  v28.__pn_.__r_.__value_.__r.__words[0] = 0;
  v6 = v5 - 1;
  while (*++v6)
    ;
  sub_19BF8ED34(&v28.__pn_, v5, v6);
  sub_19C0193A0((uint64_t)&__dst, &v28);
  sub_19C02D0B0(&__p, (uint64_t)&off_1E3D17C10);
  sub_19C02D104(&v27, (uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  if ((v27.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v27;
  else
    v8 = (std::__fs::filesystem::path *)v27.__pn_.__r_.__value_.__r.__words[0];
  if ((v27.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v27.__pn_.__r_.__value_.__r.__words[2]);
  else
    size = v27.__pn_.__r_.__value_.__l.__size_;
  if (size >= 0x7FFFFFFFFFFFFFF8)
    sub_19BF8E4EC();
  if (size >= 0x17)
  {
    v12 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v12 = size | 7;
    v13 = v12 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v12 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = size;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = size;
    p_dst = &__dst;
    if (!size)
      goto LABEL_26;
  }
  memmove(p_dst, v8, size);
LABEL_26:
  p_dst->__pn_.__r_.__value_.__s.__data_[size] = 0;
  v14 = (_QWORD *)operator new();
  sub_19BF8A6DC(v14, (uint64_t)&__dst);
  v15 = *(_QWORD *)(a1 + 30808);
  *(_QWORD *)(a1 + 30808) = v14;
  if (v15)
    sub_19C014608(v15);
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  if ((sub_19C025E48((uint64_t *)(a1 + 30816), **(_QWORD ***)(a1 + 30808), *(_QWORD *)(*(_QWORD *)(a1 + 30808) + 8)) & 1) != 0)
  {
    sub_19C0193A0((uint64_t)&__p, &v28);
    sub_19C02D0B0(&v25, (uint64_t)&off_1E3D17C20);
    sub_19C02D104(&__dst, (uint64_t)&__p, (std::__fs::filesystem::path *)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &__dst;
    else
      v16 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
    v11 = sub_19BFB22D8((unint64_t *)(a1 + 30264), (char *)v16, "r");
    if ((v11 & 1) != 0)
    {
      v17 = (const void *)sub_19BFEB334(a1);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      v18 = sub_19C02D1C0(a1);
      v19 = (const void *)v18;
      v25.__r_.__value_.__r.__words[0] = v18;
      if (!v17 || !v18)
        __assert_rtn("load", "MorphemeLevelLexicon.cpp", 48, "open_class_morpheme_root != nullptr && closed_morpheme_root != nullptr");
      v20 = operator new();
      *(_QWORD *)v20 = CFRetain(v17);
      *(_OWORD *)(v20 + 8) = 0u;
      *(_OWORD *)(v20 + 24) = 0u;
      *(_DWORD *)(v20 + 40) = 1065353216;
      v21 = *(_QWORD *)(a1 + 30880);
      *(_QWORD *)(a1 + 30880) = v20;
      if (v21)
        sub_19C02D228(v21);
      v22 = operator new();
      *(_QWORD *)v22 = CFRetain(v19);
      *(_OWORD *)(v22 + 8) = 0u;
      *(_OWORD *)(v22 + 24) = 0u;
      *(_DWORD *)(v22 + 40) = 1065353216;
      v23 = *(_QWORD *)(a1 + 30888);
      *(_QWORD *)(a1 + 30888) = v22;
      if (v23)
        sub_19C02D228(v23);
      CFRelease(v19);
      CFRelease(v17);
    }
    else
    {
      *a2 = sub_19BFEA6B4(CFSTR("Failed to load transition matrix"));
    }
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = 0;
    *a2 = sub_19BFEA6B4(CFSTR("Failed to load pos history trie"));
  }
  if (SHIBYTE(v27.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__pn_.__r_.__value_.__l.__data_);
  return v11;
}

const void *sub_19C02CBE8(uint64_t a1)
{
  const void *v2;
  const void *v4;
  void *v5;
  unsigned __int16 v6[3];
  char v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  LODWORD(v4) = 0x100000;
  WORD2(v4) = 0;
  BYTE6(v4) = 1;
  v5 = 0;
  sub_19BF8CA04(&v4, (uint64_t)"Morpheme-", 0, 9u);
  sub_19BFF78D0((uint64_t)v6, (unsigned __int16 *)&v4, a1 + 30136);
  if (v5 && BYTE6(v4) == 1)
    free(v5);
  sub_19BF8CFAC((CFStringRef *)&v4, v6);
  v2 = v4;
  v4 = 0;
  sub_19BF8DAB8(&v4);
  if (v8 && v7 == 1)
    free(v8);
  return v2;
}

void sub_19C02CCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  if (a19)
  {
    if (a18 == 1)
      free(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C02CD0C(uint64_t a1)
{
  uint64_t Instance;
  uint64_t *v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  if (qword_1ED024388 != -1)
    dispatch_once(&qword_1ED024388, &unk_1E3D17C50);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = &off_1E3D11D80;
  *(_QWORD *)(Instance + 24) = a1;
  *(_DWORD *)(Instance + 32) = 0x100000;
  *(_WORD *)(Instance + 36) = 0;
  *(_BYTE *)(Instance + 38) = 0;
  *(_QWORD *)(Instance + 40) = 0;
  *(_BYTE *)(Instance + 48) = 0;
  *(_OWORD *)(Instance + 64) = 0u;
  v3 = (uint64_t *)(Instance + 64);
  *(_OWORD *)(Instance + 80) = 0u;
  *(_QWORD *)(Instance + 96) = 0;
  v4 = (const void *)sub_19BFEB334(a1);
  v5 = sub_19C02D1C0(a1);
  v6 = (const void *)v5;
  if (!v4 || !v5)
    __assert_rtn("MorphemeLevelLexiconCursor", "MorphemeLevelLexiconCursor.cpp", 35, "open_class_morpheme_cursor && closed_class_morpheme_cursor");
  v7 = *(_QWORD *)(Instance + 80);
  v8 = *(_QWORD *)(Instance + 72);
  if (v8 >= v7)
  {
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - *v3) >> 3);
    if ((unint64_t)(v10 + 1) > 0x492492492492492)
      goto LABEL_31;
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *v3) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x249249249249249)
      v13 = 0x492492492492492;
    else
      v13 = v12;
    v28 = Instance + 80;
    if (v13)
      v13 = (unint64_t)sub_19C0257A8(v13);
    else
      v14 = 0;
    v24 = v13;
    v25 = v13 + 56 * v10;
    v27 = v13 + 56 * v14;
    sub_19C0265B8(v25, v4);
    v26 = v25 + 56;
    sub_19C0257F0(v3, &v24);
    v9 = *(_QWORD *)(Instance + 72);
    sub_19C025874((uint64_t)&v24);
  }
  else
  {
    v9 = sub_19C0265B8(v8, v4) + 56;
  }
  *(_QWORD *)(Instance + 72) = v9;
  v15 = *(_QWORD *)(Instance + 80);
  if (v9 < v15)
  {
    sub_19C0265B8(v9, v6);
    v16 = v9 + 56;
    goto LABEL_29;
  }
  v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - *v3) >> 3);
  if ((unint64_t)(v17 + 1) > 0x492492492492492)
LABEL_31:
    sub_19BF8EB40();
  v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - *v3) >> 3);
  v19 = 2 * v18;
  if (2 * v18 <= v17 + 1)
    v19 = v17 + 1;
  if (v18 >= 0x249249249249249)
    v20 = 0x492492492492492;
  else
    v20 = v19;
  v28 = Instance + 80;
  if (v20)
    v20 = (unint64_t)sub_19C0257A8(v20);
  else
    v21 = 0;
  v22 = v20 + 56 * v17;
  v24 = v20;
  v25 = v22;
  v27 = v20 + 56 * v21;
  sub_19C0265B8(v22, v6);
  v26 = v22 + 56;
  sub_19C0257F0(v3, &v24);
  v16 = *(_QWORD *)(Instance + 72);
  sub_19C025874((uint64_t)&v24);
LABEL_29:
  *(_QWORD *)(Instance + 72) = v16;
  CFRelease(v6);
  CFRelease(v4);
  return Instance;
}

void sub_19C02CFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  const void *v10;
  void *v12;

  if (v10)
    CFRelease(v10);
  sub_19C0253A4((void ***)&a9);
  v12 = *(void **)(v9 + 40);
  if (v12)
  {
    if (*(_BYTE *)(v9 + 38) == 1)
      free(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C02D064()
{
  uint64_t result;

  qword_1ED024390 = 0;
  *(_QWORD *)algn_1ED024398 = "LXCursor";
  qword_1ED0243A0 = 0;
  unk_1ED0243A8 = 0;
  qword_1ED0243B0 = (uint64_t)sub_19BFCFB34;
  unk_1ED0243B8 = 0u;
  unk_1ED0243C8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0243F0 = result;
  return result;
}

std::string *sub_19C02D0B0(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  sub_19BF8ED34(a1, *(char **)a2, (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8)));
  return a1;
}

void sub_19C02D0E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_19C02D104(std::__fs::filesystem::path *__dst, uint64_t a2, std::__fs::filesystem::path *this)
{
  int v6;
  std::__fs::filesystem::path *v7;
  std::string::size_type size;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_19BF8CD70(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&__dst->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    __dst->__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
    return std::string::operator=(&__dst->__pn_, &this->__pn_);
  if (std::__fs::filesystem::path::__filename(__dst).__size_)
    std::string::push_back(&__dst->__pn_, 47);
  v6 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = this;
  else
    v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  else
    size = this->__pn_.__r_.__value_.__l.__size_;
  return std::string::append(&__dst->__pn_, (const std::string::value_type *)v7, size);
}

void sub_19C02D1A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C02D1C0(uint64_t a1)
{
  const void *v1;
  uint64_t v2;

  v1 = (const void *)sub_19BFEB334(a1);
  v2 = LXCursorCreateByAdvancing((uint64_t)v1, CFSTR("+"));
  if (v1)
    CFRelease(v1);
  return v2;
}

void sub_19C02D210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFAD520((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_19C02D228(uint64_t a1)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = *(const void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      v3 = (const void **)*v2;
      sub_19BFAD520(v2 + 3, 0);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    operator delete(v4);
  sub_19BFAD520((const void **)a1, 0);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C02D2A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = &off_1E3D11C68;
  v2 = *(_QWORD *)(a1 + 30888);
  *(_QWORD *)(a1 + 30888) = 0;
  if (v2)
    sub_19C02D228(v2);
  v3 = *(_QWORD *)(a1 + 30880);
  *(_QWORD *)(a1 + 30880) = 0;
  if (v3)
    sub_19C02D228(v3);
  sub_19C02D384((_QWORD *)(a1 + 30800));
  sub_19BFB21EC(a1 + 30264);
  *(_QWORD *)a1 = &off_1E3D13790;
  v4 = *(void **)(a1 + 30240);
  if (v4 && *(_BYTE *)(a1 + 30238) == 1)
    free(v4);
  v5 = *(void **)(a1 + 30208);
  if (v5 && *(_BYTE *)(a1 + 30206) == 1)
    free(v5);
  v6 = *(void **)(a1 + 30176);
  if (v6 && *(_BYTE *)(a1 + 30174) == 1)
    free(v6);
  v7 = *(void **)(a1 + 30144);
  if (v7 && *(_BYTE *)(a1 + 30142) == 1)
    free(v7);
  sub_19BFC4F3C(a1 + 8);
  return a1;
}

_QWORD *sub_19C02D384(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D11C08;
  sub_19C02D3C4(a1 + 2);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    sub_19C014608(v2);
  return a1;
}

_QWORD *sub_19C02D3C4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D11AB8;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_19BF8EFC8(a1 + 2);
  return a1;
}

void sub_19C02D40C(_QWORD *a1)
{
  sub_19C02D3C4(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C02D430(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64x2_t v20;
  void **v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *__p;
  char *v39;
  unint64_t v40;
  int64x2_t v41;
  void **v42;
  void **v43;
  int64x2_t v44;
  void **v45;
  void ***v46;

  v41 = 0uLL;
  v42 = 0;
  __p = 0;
  v39 = 0;
  v40 = 0;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v10 = *(void **)(a3 + 8 * i);
      v11 = *(_QWORD *)(a4 + 8 * i) >> 1;
      if (v41.i64[1] >= (unint64_t)v42)
      {
        v13 = 0xAAAAAAAAAAAAAAABLL * ((v41.i64[1] - v41.i64[0]) >> 3) + 1;
        if (v13 > 0xAAAAAAAAAAAAAAALL)
          sub_19BF8EB40();
        if (0x5555555555555556 * (((uint64_t)v42 - v41.i64[0]) >> 3) > v13)
          v13 = 0x5555555555555556 * (((uint64_t)v42 - v41.i64[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v42 - v41.i64[0]) >> 3) >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v13;
        v46 = &v42;
        if (v14)
        {
          if (v14 > 0xAAAAAAAAAAAAAAALL)
            sub_19BF8E6D0();
          v15 = (void **)operator new(24 * v14);
        }
        else
        {
          v15 = 0;
        }
        v43 = v15;
        v44.i64[0] = (uint64_t)&v15[(v41.i64[1] - v41.i64[0]) >> 3];
        v44.i64[1] = v44.i64[0];
        v45 = &v15[3 * v14];
        sub_19C01618C(v44.i64[0], v10, v11);
        v16 = v44.i64[0];
        v12 = v44.i64[1] + 24;
        v44.i64[1] += 24;
        v17 = v41.i64[1];
        v18 = v41.i64[0];
        if (v41.i64[1] == v41.i64[0])
        {
          v20 = vdupq_n_s64(v41.u64[1]);
        }
        else
        {
          do
          {
            v19 = *(_OWORD *)(v17 - 24);
            *(_QWORD *)(v16 - 8) = *(_QWORD *)(v17 - 8);
            *(_OWORD *)(v16 - 24) = v19;
            v16 -= 24;
            *(_QWORD *)(v17 - 16) = 0;
            *(_QWORD *)(v17 - 8) = 0;
            *(_QWORD *)(v17 - 24) = 0;
            v17 -= 24;
          }
          while (v17 != v18);
          v20 = v41;
          v12 = v44.i64[1];
        }
        v41.i64[0] = v16;
        v41.i64[1] = v12;
        v44 = v20;
        v21 = v42;
        v42 = v45;
        v45 = v21;
        v43 = (void **)v20.i64[0];
        sub_19C02E67C((uint64_t)&v43);
      }
      else
      {
        sub_19C01618C((_QWORD *)v41.i64[1], *(void **)(a3 + 8 * i), *(_QWORD *)(a4 + 8 * i) >> 1);
        v12 = v41.i64[1] + 24;
      }
      v41.i64[1] = v12;
      if (a5)
      {
        v22 = *(_QWORD *)(a5 + 8 * i);
        v23 = v39;
        if ((unint64_t)v39 >= v40)
        {
          v25 = __p;
          v26 = (v39 - __p) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            sub_19BF8EB40();
          v28 = v40 - (_QWORD)__p;
          if ((uint64_t)(v40 - (_QWORD)__p) >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
            v29 = (unint64_t)sub_19BFB3588(v29);
          else
            v30 = 0;
          v31 = (char *)(v29 + 4 * v26);
          *(_DWORD *)v31 = v22;
          v24 = v31 + 4;
          while (v23 != __p)
          {
            v32 = *((_DWORD *)v23 - 1);
            v23 -= 4;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          __p = v31;
          v40 = v29 + 4 * v30;
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_DWORD *)v39 = v22;
          v24 = v39 + 4;
        }
        v39 = v24;
      }
    }
  }
  v33 = *a1;
  if (a5)
    v34 = (*(uint64_t (**)(void))(v33 + 64))();
  else
    v34 = (*(uint64_t (**)(void))(v33 + 56))();
  v35 = v34;
  if (__p)
    operator delete(__p);
  v43 = (void **)&v41;
  sub_19C02E604(&v43);
  return v35;
}

void sub_19C02D710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, char *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  __p = &a15;
  sub_19C02E604((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C02D768(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unsigned int *))(*(_QWORD *)a1 + 80))(a1, a2, a3 >> 1, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19C02D7AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D12738;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3 >> 1, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C02D84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C02D888(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D126E0;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3 >> 1, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C02D928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C02D964@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  int v5;
  const std::string::value_type *v6;
  void **v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string::value_type __s[4];
  void *__p[2];
  int64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  sub_19BFA0144((uint64_t)v14);
  sub_19BF8F250(a1 + 2, (uint64_t)&v15);
  sub_19BFAAA88(__p, (uint64_t)v16);
  v4 = a1[4];
  if (v4)
  {
    v5 = HIBYTE(v13);
    if (v13 < 0)
      v5 = (int)__p[1];
    *(_DWORD *)__s = v5;
    v6 = (const std::string::value_type *)a1[3];
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    std::string::append(a2, __s, 4uLL);
    if (v13 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (v13 >= 0)
      v8 = HIBYTE(v13);
    else
      v8 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v7, v8);
    std::string::append(a2, v6, 4 * v4);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v13;
  }
  v14[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15 = v9;
  v16[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD0C7C](&v18);
}

void sub_19C02DAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_19BFA0270((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_19C02DAF4(uint64_t a1, uint64_t **a2)
{
  return sub_19C02E2B4(a1, *a2, a2[1], 0);
}

uint64_t sub_19C02DB04(uint64_t a1, uint64_t **a2, int **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  void *v21;
  uint64_t v22;

  __p = 0;
  v21 = 0;
  v22 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (v6 - v5) != a3[1] - *a3)
    __assert_rtn("build", "MarisaTrie.h", 61, "keys.size() == values.size()");
  v9 = sub_19C02E2B4(a1, v5, v6, &__p);
  if ((_DWORD)v9)
  {
    sub_19BFF00C4((char **)(a1 + 40), 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    v10 = *(_QWORD *)(a1 + 40);
    v11 = (char *)a2[1] - (char *)*a2;
    if (v11)
    {
      v12 = v11 / 24;
      v13 = *a3;
      v14 = (uint64_t *)__p;
      if (v12 <= 1)
        v12 = 1;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        *(_DWORD *)(v10 + 4 * v17) = v15;
        --v12;
      }
      while (v12);
    }
    v18 = (*(_QWORD *)(a1 + 48) - v10) >> 2;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v18;
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_19C02DC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C02DC54(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  unint64_t v8;

  v8 = 0;
  v6 = sub_19BF8F364((uint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t *)&v8);
  if ((_DWORD)v6)
    *a4 = sub_19C02608C(a1, v8);
  return v6;
}

_QWORD *sub_19C02DCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D12580;
  v6[1] = a1;
  v6[2] = a4;
  v7 = v6;
  sub_19BF8F424((uint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C02DD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C02DD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E3D12528;
  v7[1] = a1;
  v7[2] = a4;
  v8 = v7;
  sub_19BF8F484((unint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t)v7, (a5 << (a5 > 0)));
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_19C02DE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_19C02DE78@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL sub_19C02DE84(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

void sub_19C02DE98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  sub_19BF8F4E4((uint64_t *)(a1 + 16), a3, 2 * a4, a2, a5);
}

_QWORD *sub_19C02DEB4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v8[0] = &off_1E3D124D0;
    v8[1] = a3;
    v9 = v8;
    sub_19BF8F5A4(a1 + 2, a2, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  return result;
}

void sub_19C02DF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C02DFB0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C02DFC4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D124D0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C02DFF8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D124D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C02E014(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v5;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

uint64_t sub_19C02E054(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D116D0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C02E090()
{
  return &unk_1E3D116D0;
}

void sub_19C02E0A0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C02E0B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D12528;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C02E0EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D12528;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C02E10C(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *a3;
  v7 = (unint64_t)a3[1] >> 1;
  v8 = sub_19C02608C(*(_QWORD *)(a1 + 8), *a2);
  return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8, v6, v7, a4);
}

uint64_t sub_19C02E160(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D116E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C02E19C()
{
  return &unk_1E3D116E0;
}

void sub_19C02E1AC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C02E1C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D12580;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C02E1F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D12580;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C02E218(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *a3;
  v7 = (unint64_t)a3[1] >> 1;
  v8 = sub_19C02608C(*(_QWORD *)(a1 + 8), *a2);
  return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8, v6, v7, a4);
}

uint64_t sub_19C02E26C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D116F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C02E2A8()
{
  return &unk_1E3D116F0;
}

uint64_t sub_19C02E2B4(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void *__p;
  void *v24;
  char *v25;

  __p = 0;
  v24 = 0;
  v25 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = 0;
    v8 = 0;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        v10 = (uint64_t *)*v6;
        v9 = v6[1];
      }
      else
      {
        v9 = *((unsigned __int8 *)v6 + 23);
        v10 = v6;
      }
      v11 = 2 * v9;
      if (v8 >= v25)
      {
        v13 = (v8 - v7) >> 4;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60)
          sub_19BF8EB40();
        v15 = v25 - v7;
        if ((v25 - v7) >> 3 > v14)
          v14 = v15 >> 3;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        v17 = (char *)sub_19BFAEDF0(v16);
        v19 = &v17[16 * v13];
        *(_QWORD *)v19 = v10;
        *((_QWORD *)v19 + 1) = v11;
        v20 = (char *)__p;
        v7 = v19;
        if (v8 != __p)
        {
          do
          {
            *((_OWORD *)v7 - 1) = *((_OWORD *)v8 - 1);
            v7 -= 16;
            v8 -= 16;
          }
          while (v8 != v20);
          v8 = v20;
        }
        v12 = v19 + 16;
        __p = v7;
        v25 = &v17[16 * v18];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_QWORD *)v8 = v10;
        *((_QWORD *)v8 + 1) = v11;
        v12 = v8 + 16;
      }
      v24 = v12;
      v6 += 3;
      v8 = (char *)v12;
    }
    while (v6 != a3);
  }
  sub_19BF8EFCC((uint64_t *)(a1 + 16), (uint64_t *)&__p, a4, *(_DWORD *)(a1 + 8));
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_19C02E468()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C02E47C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D126E0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C02E4B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D126E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C02E4CC(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, 2 * a3[1], a4);
}

uint64_t sub_19C02E4EC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11730))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C02E528()
{
  return &unk_1E3D11730;
}

void sub_19C02E538()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C02E54C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D12738;
  result[1] = v3;
  return result;
}

uint64_t sub_19C02E580(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D12738;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C02E59C(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  return sub_19BFB9148(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *a2, *a3, 2 * a3[1], a4);
}

uint64_t sub_19C02E5BC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D11740))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C02E5F8()
{
  return &unk_1E3D11740;
}

void sub_19C02E604(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_19C02E67C(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C02E6E0(_QWORD *a1)
{
  sub_19C02D384(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19C02E704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  sub_19BF8CC94((uint64_t)&v7, a2 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a3);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19C02E794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFACCEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C02E7A8(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *i;
  unint64_t v15;
  const void *v16;
  uint8x8_t v17;
  uint64_t **v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  void **v32;
  _QWORD *v33;
  unint64_t v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unsigned int v45;

  v6 = 30888;
  if (!a3)
    v6 = 30880;
  v7 = *(_QWORD *)(a1 + v6);
  v45 = a2;
  v8 = (uint64_t *)(v7 + 8);
  v9 = a2;
  v10 = *(_QWORD *)(v7 + 16);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = a2;
      if (v10 <= a2)
        v12 = a2 % v10;
    }
    else
    {
      v12 = ((_DWORD)v10 - 1) & a2;
    }
    v13 = *(uint64_t ***)(*v8 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = (uint64_t *)*i)
      {
        v15 = i[1];
        if (v15 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            goto LABEL_58;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  v16 = (const void *)LXCursorCreateByAdvancingWithUTF32(*(_QWORD *)v7, &v45, 1);
  v3 = (unint64_t)v16;
  v10 = *(_QWORD *)(v7 + 16);
  if (!v10)
    goto LABEL_36;
  v17 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v4 = v9;
    if (v10 <= v9)
      v4 = v9 % v10;
  }
  else
  {
    v4 = ((_DWORD)v10 - 1) & v9;
  }
  v18 = *(uint64_t ***)(*v8 + 8 * v4);
  if (!v18 || (v19 = *v18) == 0)
  {
LABEL_36:
    v21 = operator new(0x20uLL);
    *v21 = 0;
    v21[1] = v9;
    v21[3] = v3;
    *((_DWORD *)v21 + 4) = a2;
    v22 = (float)(unint64_t)(*(_QWORD *)(v7 + 32) + 1);
    v23 = *(float *)(v7 + 40);
    if (!v10 || (float)(v23 * (float)v10) < v22)
    {
      v24 = 1;
      if (v10 >= 3)
        v24 = (v10 & (v10 - 1)) != 0;
      v25 = v24 | (2 * v10);
      v26 = vcvtps_u32_f32(v22 / v23);
      if (v25 <= v26)
        v27 = v26;
      else
        v27 = v25;
      sub_19BFD1648(v7 + 8, v27);
      v10 = *(_QWORD *)(v7 + 16);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v10 <= v9)
          v4 = v9 % v10;
        else
          v4 = v9;
      }
      else
      {
        v4 = ((_DWORD)v10 - 1) & v9;
      }
    }
    v28 = *v8;
    v29 = *(_QWORD **)(*v8 + 8 * v4);
    if (v29)
    {
      *v21 = *v29;
    }
    else
    {
      *v21 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = v21;
      *(_QWORD *)(v28 + 8 * v4) = v7 + 24;
      if (!*v21)
      {
LABEL_57:
        ++*(_QWORD *)(v7 + 32);
        goto LABEL_58;
      }
      v30 = *(_QWORD *)(*v21 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v30 >= v10)
          v30 %= v10;
      }
      else
      {
        v30 &= v10 - 1;
      }
      v29 = (_QWORD *)(*v8 + 8 * v30);
    }
    *v29 = v21;
    goto LABEL_57;
  }
  while (1)
  {
    v20 = v19[1];
    if (v20 == v9)
      break;
    if (v17.u32[0] > 1uLL)
    {
      if (v20 >= v10)
        v20 %= v10;
    }
    else
    {
      v20 &= v10 - 1;
    }
    if (v20 != v4)
      goto LABEL_36;
LABEL_35:
    v19 = (uint64_t *)*v19;
    if (!v19)
      goto LABEL_36;
  }
  if (*((_DWORD *)v19 + 4) != a2)
    goto LABEL_35;
  if (v16)
  {
    CFRelease(v16);
    v10 = *(_QWORD *)(v7 + 16);
  }
LABEL_58:
  if (v10)
  {
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v10 <= v9)
        v3 = v9 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
    v32 = *(void ***)(*v8 + 8 * v3);
    if (v32)
    {
      v33 = *v32;
      if (*v32)
      {
        do
        {
          v34 = v33[1];
          if (v34 == v9)
          {
            if (*((_DWORD *)v33 + 4) == a2)
              return v33[3];
          }
          else
          {
            if (v31.u32[0] > 1uLL)
            {
              if (v34 >= v10)
                v34 %= v10;
            }
            else
            {
              v34 &= v10 - 1;
            }
            if (v34 != v3)
              break;
          }
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
    }
  }
  v33 = operator new(0x20uLL);
  *v33 = 0;
  v33[1] = v9;
  v33[3] = 0;
  *((_DWORD *)v33 + 4) = a2;
  v35 = (float)(unint64_t)(*(_QWORD *)(v7 + 32) + 1);
  v36 = *(float *)(v7 + 40);
  if (v10 && (float)(v36 * (float)v10) >= v35)
  {
    v9 = v3;
  }
  else
  {
    v37 = 1;
    if (v10 >= 3)
      v37 = (v10 & (v10 - 1)) != 0;
    v38 = v37 | (2 * v10);
    v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39)
      v40 = v39;
    else
      v40 = v38;
    sub_19BFD1648(v7 + 8, v40);
    v10 = *(_QWORD *)(v7 + 16);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v9 %= v10;
    }
    else
    {
      v9 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v41 = *v8;
  v42 = *(_QWORD **)(*v8 + 8 * v9);
  if (v42)
  {
    *v33 = *v42;
    goto LABEL_95;
  }
  *v33 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 24) = v33;
  *(_QWORD *)(v41 + 8 * v9) = v7 + 24;
  if (*v33)
  {
    v43 = *(_QWORD *)(*v33 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v43 >= v10)
        v43 %= v10;
    }
    else
    {
      v43 &= v10 - 1;
    }
    v42 = (_QWORD *)(*v8 + 8 * v43);
LABEL_95:
    *v42 = v33;
  }
  ++*(_QWORD *)(v7 + 32);
  return v33[3];
}

void sub_19C02EC6C(_Unwind_Exception *a1)
{
  void *v1;
  const void **v2;

  sub_19BFAD520(v2, 0);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t LXVulgarWordUsageDatabaseCreate(const __CFString *a1, CFErrorRef *a2)
{
  const __CFAllocator *v4;
  uint64_t Instance;
  _QWORD *v6;
  std::__fs::filesystem::path *v7;
  std::mutex *v8;
  int v9;
  size_t v10;
  const void *v11;
  unsigned int (*v12)(void);
  unsigned int v13;
  const char *v14;
  const __CFString *v15;
  size_t v16;
  CFURLRef v17;
  sqlite3 *v18;
  __CFBundle *BundleWithIdentifier;
  const __CFURL *v20;
  const __CFString *v21;
  CFIndex v22;
  void *v23;
  CFStringEncoding SystemEncoding;
  _QWORD *v25;
  std::string::value_type *v26;
  std::string::value_type v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  NSObject *v31;
  int v32;
  std::string *v33;
  uint64_t v34;
  unsigned int v35;
  sqlite3 *v36;
  uint64_t v37;
  unsigned int v38;
  const __CFString *v39;
  const __CFString *v40;
  std::error_code *v41;
  char v42;
  sqlite3 *v43;
  uint64_t result;
  sqlite3 *ppDb[2];
  std::string v46;
  void *v47;
  _BYTE v48[8];
  void *v49;
  uint64_t v50;
  __int128 ppStmt;
  _QWORD v52[51];
  _QWORD v53[21];

  v53[19] = *MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (qword_1ED024068 != -1)
    dispatch_once(&qword_1ED024068, &unk_1E3D17CB0);
  Instance = _CFRuntimeCreateInstance();
  *(_OWORD *)(Instance + 16) = 0u;
  v6 = (_QWORD *)(Instance + 16);
  *(_OWORD *)(Instance + 32) = 0u;
  if (qword_1ED0240E8 != -1)
    dispatch_once(&qword_1ED0240E8, &unk_1E3D161B8);
  sub_19BF8C4B0((uint64_t)v48, a1);
  if (v49)
    v7 = (std::__fs::filesystem::path *)v49;
  else
    v7 = (std::__fs::filesystem::path *)&v50;
  v8 = (std::mutex *)qword_1ED024060;
  std::mutex::lock((std::mutex *)qword_1ED024060);
  v9 = *(char *)(Instance + 47);
  if (v9 >= 0)
    v10 = *(unsigned __int8 *)(Instance + 47);
  else
    v10 = *(_QWORD *)(Instance + 32);
  if (v10 == strlen((const char *)v7))
  {
    v11 = v9 >= 0 ? (const void *)(Instance + 24) : *(const void **)(Instance + 24);
    if (!memcmp(v11, v7, v10))
      goto LABEL_71;
  }
  v46.__r_.__value_.__r.__words[0] = 0;
  v46.__r_.__value_.__l.__size_ = (std::string::size_type)&v46;
  v46.__r_.__value_.__r.__words[2] = 0x2000000000;
  v12 = (unsigned int (*)(void))off_1ED0240E0;
  v47 = off_1ED0240E0;
  if (!off_1ED0240E0)
  {
    *(_QWORD *)&ppStmt = MEMORY[0x1E0C809B0];
    *((_QWORD *)&ppStmt + 1) = 0x40000000;
    v52[0] = sub_19BFF7A1C;
    v52[1] = &unk_1E3D161E0;
    v52[2] = &v46;
    sub_19BFF7A1C((uint64_t)&ppStmt);
    v12 = *(unsigned int (**)(void))(v46.__r_.__value_.__l.__size_ + 24);
  }
  _Block_object_dispose(&v46, 8);
  if (!v12)
  {
    dlerror();
    result = abort_report_np();
    __break(1u);
    return result;
  }
  if (v12() != 1)
    goto LABEL_64;
  ppDb[0] = 0;
  v13 = sqlite3_open_v2((const char *)v7, ppDb, 3145734, 0);
  if (v13)
  {
    v14 = sqlite3_errmsg(ppDb[0]);
    v15 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error creating/opening database at: %s, %s"), v7, v14);
    *(_QWORD *)&ppStmt = v15;
    sub_19BFF7B6C(v13, v15, a2);
    sqlite3_close(ppDb[0]);
    if (v15)
      CFRelease(v15);
    goto LABEL_64;
  }
  if (!ppDb[0])
  {
LABEL_64:
    *v6 = 0;
    goto LABEL_65;
  }
  v16 = strlen((const char *)v7);
  v17 = CFURLCreateFromFileSystemRepresentation(v4, (const UInt8 *)v7, v16, 0);
  if (!CFURLSetResourcePropertyForKey(v17, (CFStringRef)*MEMORY[0x1E0C9B4E8], (CFTypeRef)*MEMORY[0x1E0C9AE50], a2))
  {
    v29 = atomic_load(byte_1EE414EA8);
    if ((v29 & 1) != 0)
    {
      v30 = atomic_load(byte_1EE417890);
      if ((v30 & 1) != 0)
      {
        printf("RejectionsDatabase: failed to set backup exclusion for database at: %s", (const char *)v7);
        putchar(10);
      }
      else
      {
        v31 = sub_19BFD3F34();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          LODWORD(ppStmt) = 136315138;
          *(_QWORD *)((char *)&ppStmt + 4) = v7;
          _os_log_impl(&dword_19BF85000, v31, OS_LOG_TYPE_ERROR, "RejectionsDatabase: failed to set backup exclusion for database at: %s", (uint8_t *)&ppStmt, 0xCu);
        }
      }
    }
    CFRelease(v17);
    goto LABEL_63;
  }
  CFRelease(v17);
  v18 = ppDb[0];
  if (!ppDb[0])
    __assert_rtn("attempt_database_migration", "LXVulgarWordUsageDatabaseImpl.cpp", 178, "db");
  *(_QWORD *)&ppStmt = 0;
  if (sqlite3_prepare_v2(ppDb[0], "SELECT value FROM properties WHERE key = 'version'", -1, (sqlite3_stmt **)&ppStmt, 0))
  {
    goto LABEL_27;
  }
  if (sqlite3_step((sqlite3_stmt *)ppStmt) != 100)
  {
    sqlite3_finalize((sqlite3_stmt *)ppStmt);
    v40 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error reading the library version: %d"), 0);
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    sub_19BFF7B6C(0, v40, a2);
    if (v40)
      CFRelease(v40);
    goto LABEL_27;
  }
  v32 = sqlite3_column_int((sqlite3_stmt *)ppStmt, 0);
  sqlite3_finalize((sqlite3_stmt *)ppStmt);
  if (v32 != 2)
  {
LABEL_27:
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.Lexicon-framework"));
    v20 = CFBundleCopyResourceURL(BundleWithIdentifier, CFSTR("vulgar_word_usage_database_schema"), CFSTR("sql"), 0);
    v21 = CFURLCopyFileSystemPath(v20, kCFURLPOSIXPathStyle);
    v22 = CFStringGetLength(v21) + 1;
    v23 = malloc_type_malloc(v22, 0xC9E42E85uLL);
    SystemEncoding = CFStringGetSystemEncoding();
    if (!CFStringGetCString(v21, (char *)v23, v22, SystemEncoding))
    {
      free(v23);
LABEL_63:
      sqlite3_close(ppDb[0]);
      remove(v7, v41);
      goto LABEL_64;
    }
    if (!v23)
      goto LABEL_63;
    sub_19BFB3388(&ppStmt);
    v25 = *(_QWORD **)((char *)&v52[3] + *(_QWORD *)(ppStmt - 24));
    memset(&v46, 0, sizeof(v46));
    while (v25 && (v25[3] != v25[4] || (*(unsigned int (**)(_QWORD *))(*v25 + 72))(v25) != -1))
    {
      v26 = (std::string::value_type *)v25[3];
      if (v26 == (std::string::value_type *)v25[4])
        v27 = (*(uint64_t (**)(_QWORD *))(*v25 + 72))(v25);
      else
        v27 = *v26;
      std::string::push_back(&v46, v27);
      v28 = v25[3];
      if (v28 == v25[4])
        (*(void (**)(_QWORD *))(*v25 + 80))(v25);
      else
        v25[3] = v28 + 1;
    }
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v46;
    else
      v33 = (std::string *)v46.__r_.__value_.__r.__words[0];
    v34 = sqlite3_exec(v18, (const char *)v33, 0, 0, 0);
    v35 = v34;
    if ((_DWORD)v34)
    {
      v36 = (sqlite3 *)CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error initializing database schema: %d"), v34);
      ppDb[1] = v36;
      sub_19BFF7B6C(v35, (CFStringRef)v36, a2);
      if (v36)
        CFRelease(v36);
    }
    free(v23);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    *(_QWORD *)&ppStmt = *MEMORY[0x1E0DE4F40];
    *(_QWORD *)((char *)&v52[-2] + *(_QWORD *)(ppStmt - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
    MEMORY[0x1A1AD0A90](v52);
    std::istream::~istream();
    MEMORY[0x1A1AD0C7C](v53);
    if (v35)
      goto LABEL_63;
    *(_QWORD *)&ppStmt = 0;
    v37 = sqlite3_prepare_v2(v18, "INSERT OR REPLACE INTO properties (key, value) VALUES ('version', ?)", -1, (sqlite3_stmt **)&ppStmt, 0);
    v38 = v37;
    if ((_DWORD)v37)
    {
      v39 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error updating library version: %d"), v37);
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
      sub_19BFF7B6C(v38, v39, a2);
      if (v39)
        CFRelease(v39);
      goto LABEL_63;
    }
    sqlite3_bind_int((sqlite3_stmt *)ppStmt, 1, 2);
    sqlite3_step((sqlite3_stmt *)ppStmt);
    sqlite3_finalize((sqlite3_stmt *)ppStmt);
  }
  v43 = ppDb[0];
  *v6 = ppDb[0];
  if (!v43)
  {
LABEL_65:
    v42 = 0;
    if (*(char *)(Instance + 47) < 0)
    {
      **(_BYTE **)(Instance + 24) = 0;
      *(_QWORD *)(Instance + 32) = 0;
    }
    else
    {
      *(_BYTE *)(Instance + 24) = 0;
      *(_BYTE *)(Instance + 47) = 0;
    }
    goto LABEL_72;
  }
  sub_19BFB4BEC((std::string *)(Instance + 24), (char *)v7);
LABEL_71:
  v42 = 1;
LABEL_72:
  std::mutex::unlock(v8);
  if (v49 && v48[6] == 1)
    free(v49);
  if ((v42 & 1) == 0)
  {
    CFRelease((CFTypeRef)Instance);
    return 0;
  }
  return Instance;
}

void sub_19C02F480()
{
  __cxa_end_catch();
  JUMPOUT(0x19C02F488);
}

void sub_19C02F4A4()
{
  JUMPOUT(0x19C02F4D0);
}

uint64_t sub_19C02F4D8()
{
  uint64_t result;

  qword_1ED024070 = 0;
  *(_QWORD *)algn_1ED024078 = "LXVulgarWordUsageDatabase";
  qword_1ED024080 = 0;
  unk_1ED024088 = 0;
  qword_1ED024090 = (uint64_t)sub_19C02F524;
  unk_1ED024098 = 0u;
  unk_1ED0240A8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0240D0 = result;
  return result;
}

void sub_19C02F524(uint64_t a1)
{
  int v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint8_t buf[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = sqlite3_close(*(sqlite3 **)(a1 + 16));
  v3 = v2;
  if (v2)
  {
    v4 = atomic_load(byte_1EE414EA8);
    if ((v4 & 1) != 0)
    {
      v5 = atomic_load(byte_1EE417890);
      if ((v5 & 1) != 0)
      {
        printf("VulgarWordUsageDatabase: Error closing database: %d", v2);
        putchar(10);
      }
      else
      {
        v6 = sub_19BFD3F34();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v8 = v3;
          _os_log_impl(&dword_19BF85000, v6, OS_LOG_TYPE_ERROR, "VulgarWordUsageDatabase: Error closing database: %d", buf, 8u);
        }
      }
    }
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_19C02F620(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19BF8E3F8(a1);
}

uint64_t LXVulgarWordUsageDatabaseIncrementUsageCount(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, CFDictionaryRef theDict, CFErrorRef *a6)
{
  const __CFLocale *Value;
  uint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  std::mutex *v17;
  uint64_t v18;
  void *__p[2];
  char v21;
  _BYTE v22[8];
  void *v23;
  uint64_t v24;
  _BYTE v25[8];
  void *v26;
  uint64_t v27;
  _BYTE v28[8];
  void *v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (theDict)
      Value = (const __CFLocale *)CFDictionaryGetValue(theDict, CFSTR("wordLocale"));
    else
      Value = 0;
    sub_19C02FA6C((uint64_t)v28, a2, Value);
    if (v29)
      v14 = (const char *)v29;
    else
      v14 = (const char *)v30;
    sub_19BF8C4B0((uint64_t)v25, a3);
    v15 = (const char *)v26;
    sub_19BF8C4B0((uint64_t)v22, a4);
    if (!v15)
      v15 = (const char *)&v27;
    if (v23)
      v16 = (const char *)v23;
    else
      v16 = (const char *)&v24;
    v17 = (std::mutex *)qword_1ED024060;
    std::mutex::lock((std::mutex *)qword_1ED024060);
    sub_19BF8E43C(__p, "usage_count + 1");
    *(double *)&v18 = CFAbsoluteTimeGetCurrent();
    v13 = sub_19BFF7DA8((sqlite3 **)(a1 + 16), (int)__p, v14, v15, v16, v18, 1, theDict, a6);
    if (v21 < 0)
      operator delete(__p[0]);
    std::mutex::unlock(v17);
    if (v23 && v22[6] == 1)
      free(v23);
    if (v26 && v25[6] == 1)
      free(v26);
    if (v29 && v28[6] == 1)
      free(v29);
  }
  else
  {
    sub_19C02F88C(CFSTR("VulgarWordUsageDatabase: Error incrementing the usage count -- provided database reference is NULL"), a6);
    return 0;
  }
  return v13;
}

void sub_19C02F7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, void *a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,void *a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,void *a32)
{
  std::mutex *v32;

  std::mutex::unlock(v32);
  if (a20 && a19 == 1)
    free(a20);
  if (a26 && a25 == 1)
    free(a26);
  if (a32)
  {
    if (a31 == 1)
      free(a32);
  }
  _Unwind_Resume(a1);
}

void sub_19C02F88C(CFStringRef theString, CFErrorRef *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  NSObject *v6;
  _QWORD *v7;
  const char *v8;
  __CFDictionary *Mutable;
  uint8_t buf[4];
  _QWORD *v11;
  __CFDictionary *v12;
  void *v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v4 = atomic_load(byte_1EE414EA8);
  if ((v4 & 1) != 0)
  {
    v5 = atomic_load(byte_1EE417890);
    if ((v5 & 1) != 0)
    {
      sub_19BF8C4B0((uint64_t)&v12, theString);
      v8 = (const char *)v13;
      if (!v13)
        v8 = (const char *)v14;
      printf("%s", v8);
      if (v13 && BYTE6(v12) == 1)
        free(v13);
      putchar(10);
    }
    else
    {
      v6 = sub_19BFD3F34();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        sub_19BF8C4B0((uint64_t)&v12, theString);
        v7 = v13;
        if (!v13)
          v7 = v14;
        *(_DWORD *)buf = 136315138;
        v11 = v7;
        _os_log_impl(&dword_19BF85000, v6, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
        if (v13 && BYTE6(v12) == 1)
          free(v13);
      }
    }
  }
  if (a2)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    v12 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("errorMessageKey"), theString);
    *a2 = CFErrorCreate(0, CFSTR("com.apple.LXVulgarWordUsageDatabase"), 1, Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
}

void sub_19C02FA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19C02FA6C(uint64_t a1, CFStringRef theString, const __CFLocale *a3)
{
  CFMutableStringRef MutableCopy;
  unsigned __int16 v6[3];
  char v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
  CFStringTransform(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0C9B358], 0);
  sub_19BF8C4B0((uint64_t)v6, MutableCopy);
  sub_19BFECC78(a1, v6, a3);
  if (v8 && v7 == 1)
    free(v8);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_19C02FB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19C02FB88(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
}

uint64_t LXVulgarWordUsageDatabaseDecrementUsageCount(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, CFDictionaryRef theDict, CFErrorRef *a6)
{
  const __CFLocale *Value;
  uint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  std::mutex *v17;
  void *__p[2];
  char v20;
  _BYTE v21[8];
  void *v22;
  uint64_t v23;
  _BYTE v24[8];
  void *v25;
  uint64_t v26;
  _BYTE v27[8];
  void *v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (theDict)
      Value = (const __CFLocale *)CFDictionaryGetValue(theDict, CFSTR("wordLocale"));
    else
      Value = 0;
    sub_19C02FA6C((uint64_t)v27, a2, Value);
    if (v28)
      v14 = (const char *)v28;
    else
      v14 = (const char *)v29;
    sub_19BF8C4B0((uint64_t)v24, a3);
    v15 = (const char *)v25;
    sub_19BF8C4B0((uint64_t)v21, a4);
    if (!v15)
      v15 = (const char *)&v26;
    if (v22)
      v16 = (const char *)v22;
    else
      v16 = (const char *)&v23;
    v17 = (std::mutex *)qword_1ED024060;
    std::mutex::lock((std::mutex *)qword_1ED024060);
    sub_19BF8E43C(__p, "CASE WHEN usage_count > 0 THEN usage_count - 1 ELSE 0 END");
    v13 = sub_19BFF7DA8((sqlite3 **)(a1 + 16), (int)__p, v14, v15, v16, 0, 0, theDict, a6);
    if (v20 < 0)
      operator delete(__p[0]);
    std::mutex::unlock(v17);
    if (v22 && v21[6] == 1)
      free(v22);
    if (v25 && v24[6] == 1)
      free(v25);
    if (v28 && v27[6] == 1)
      free(v28);
  }
  else
  {
    sub_19C02F88C(CFSTR("VulgarWordUsageDatabase: Error decrementing the usage count -- provided database reference is NULL"), a6);
    return 0;
  }
  return v13;
}

void sub_19C02FD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, void *a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,void *a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,void *a32)
{
  std::mutex *v32;

  if (a16 < 0)
    operator delete(__p);
  std::mutex::unlock(v32);
  if (a20 && a19 == 1)
    free(a20);
  if (a26 && a25 == 1)
    free(a26);
  if (a32)
  {
    if (a31 == 1)
      free(a32);
  }
  _Unwind_Resume(a1);
}

BOOL LXVulgarWordUsageDatabaseCanAutocorrect(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, CFDictionaryRef theDict, CFErrorRef *a6)
{
  const __CFLocale *Value;
  _BOOL8 v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  std::mutex *v18;
  uint64_t v19;
  unsigned int v20;
  const __CFString *v21;
  sqlite3_stmt *v22;
  int v23;
  sqlite3_stmt *v24;
  int v25;
  sqlite3_stmt *v26;
  int v27;
  sqlite3_stmt *v28;
  int v29;
  const char *v30;
  int v31;
  sqlite3_stmt *ppStmt;
  _BYTE v34[8];
  void *v35;
  uint64_t v36;
  _BYTE v37[8];
  void *v38;
  uint64_t v39;
  _BYTE v40[8];
  void *v41;
  uint64_t v42;
  _BYTE v43[8];
  char *v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    sub_19C02F88C(CFSTR("VulgarWordUsageDatabase: Error checking whether can autocorrect -- provided database reference is NULL"), a6);
    return 0;
  }
  if (theDict)
    Value = (const __CFLocale *)CFDictionaryGetValue(theDict, CFSTR("wordLocale"));
  else
    Value = 0;
  sub_19C02FA6C((uint64_t)v40, a2, Value);
  if (v41)
    v14 = (const char *)v41;
  else
    v14 = (const char *)&v42;
  sub_19BF8C4B0((uint64_t)v37, a3);
  v15 = (const char *)v38;
  sub_19BF8C4B0((uint64_t)v34, a4);
  if (v15)
    v16 = v15;
  else
    v16 = (const char *)&v39;
  if (v35)
    v17 = (const char *)v35;
  else
    v17 = (const char *)&v36;
  v18 = (std::mutex *)qword_1ED024060;
  std::mutex::lock((std::mutex *)qword_1ED024060);
  sub_19BFF7B0C((uint64_t)v43, theDict);
  ppStmt = 0;
  v19 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 16), "SELECT usage_count FROM vword_usage WHERE app = :app AND recipient = :recipient AND vword = :vword AND word_reading = :word_reading", -1, &ppStmt, 0);
  v20 = v19;
  if ((_DWORD)v19)
  {
    v21 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error compiling a SELECT statement: %d"), v19);
    sub_19BFF7B6C(v20, v21, a6);
    if (v21)
      CFRelease(v21);
    goto LABEL_18;
  }
  v22 = ppStmt;
  v23 = sqlite3_bind_parameter_index(ppStmt, ":app");
  sqlite3_bind_text(v22, v23, v16, -1, 0);
  v24 = ppStmt;
  v25 = sqlite3_bind_parameter_index(ppStmt, ":recipient");
  sqlite3_bind_text(v24, v25, v17, -1, 0);
  v26 = ppStmt;
  v27 = sqlite3_bind_parameter_index(ppStmt, ":vword");
  sqlite3_bind_text(v26, v27, v14, -1, 0);
  v28 = ppStmt;
  v29 = sqlite3_bind_parameter_index(ppStmt, ":word_reading");
  if (v44)
    v30 = v44;
  else
    v30 = (const char *)v45;
  sqlite3_bind_text(v28, v29, v30, -1, 0);
  if (sqlite3_step(ppStmt) == 100)
    v31 = sqlite3_column_int(ppStmt, 0);
  else
    v31 = 0;
  sqlite3_finalize(ppStmt);
  if (v31 <= 2)
  {
    if (v31 < 1)
    {
LABEL_18:
      v13 = 0;
      goto LABEL_29;
    }
    v13 = sub_19BFF850C(*(sqlite3 **)(a1 + 16), v14, theDict, a6);
  }
  else
  {
    v13 = 1;
  }
LABEL_29:
  if (v44 && v43[6] == 1)
    free(v44);
  std::mutex::unlock(v18);
  if (v35 && v34[6] == 1)
    free(v35);
  if (v38 && v37[6] == 1)
    free(v38);
  if (v41 && v40[6] == 1)
    free(v41);
  return v13;
}

void sub_19C030140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,void *a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,void *a27)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL LXVulgarWordUsageDatabaseCanAutocorrectSomewhere(uint64_t a1, const __CFString *a2, CFDictionaryRef theDict, CFErrorRef *a4)
{
  const __CFLocale *Value;
  _BOOL8 v9;
  const char *v10;
  std::mutex *v11;
  const char *v12;
  _BYTE v14[8];
  void *v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (theDict)
      Value = (const __CFLocale *)CFDictionaryGetValue(theDict, CFSTR("wordLocale"));
    else
      Value = 0;
    sub_19C02FA6C((uint64_t)v14, a2, Value);
    v10 = (const char *)v15;
    v11 = (std::mutex *)qword_1ED024060;
    std::mutex::lock((std::mutex *)qword_1ED024060);
    if (v10)
      v12 = v10;
    else
      v12 = (const char *)v16;
    v9 = sub_19BFF850C(*(sqlite3 **)(a1 + 16), v12, theDict, a4);
    std::mutex::unlock(v11);
    if (v15 && v14[6] == 1)
      free(v15);
  }
  else
  {
    sub_19C02F88C(CFSTR("VulgarWordUsageDatabase: Error checking whether can autocorrect somewhere -- provided database reference is NULL"), a4);
    return 0;
  }
  return v9;
}

void sub_19C030314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  std::mutex *v13;

  std::mutex::unlock(v13);
  if (a13)
  {
    if (a12 == 1)
      free(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t LXVulgarWordUsageDatabasePerformMaintenance(uint64_t a1, CFErrorRef *a2)
{
  std::mutex *v4;
  uint64_t v5;
  unsigned int v6;
  const __CFString *v7;
  uint64_t v8;
  double Current;
  sqlite3_stmt *v10;
  int v11;
  uint64_t v12;
  const __CFString *v13;
  sqlite3_stmt *ppStmt;

  if (a1)
  {
    v4 = (std::mutex *)qword_1ED024060;
    std::mutex::lock((std::mutex *)qword_1ED024060);
    ppStmt = 0;
    v5 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 16), "DELETE FROM vword_usage WHERE last_use_timestamp < :threshold", -1, &ppStmt, 0);
    v6 = v5;
    if ((_DWORD)v5)
    {
      v7 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error compiling a DELETE WHERE statement: %d"), v5);
      sub_19BFF7B6C(v6, v7, a2);
      if (v7)
        CFRelease(v7);
    }
    else
    {
      Current = CFAbsoluteTimeGetCurrent();
      v10 = ppStmt;
      v11 = sqlite3_bind_parameter_index(ppStmt, ":threshold");
      sqlite3_bind_double(v10, v11, Current + -15552000.0);
      v12 = sqlite3_step(ppStmt);
      sqlite3_finalize(ppStmt);
      if ((_DWORD)v12 == 101)
      {
        v8 = 1;
LABEL_11:
        std::mutex::unlock(v4);
        return v8;
      }
      v13 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error evaluating a DELETE WHERE statement: %d"), v12);
      sub_19BFF7B6C(v12, v13, a2);
      if (v13)
        CFRelease(v13);
    }
    v8 = 0;
    goto LABEL_11;
  }
  sub_19C02F88C(CFSTR("VulgarWordUsageDatabase: Error performing database maintenance -- provided database reference is NULL"), a2);
  return 0;
}

void sub_19C0304BC(_Unwind_Exception *a1)
{
  std::mutex *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL LXVulgarWordUsageDatabaseReset(uint64_t a1, CFErrorRef *a2)
{
  std::mutex *v4;
  uint64_t v5;
  unsigned int v6;
  const __CFString *v7;
  _BOOL8 v8;

  if (a1)
  {
    v4 = (std::mutex *)qword_1ED024060;
    std::mutex::lock((std::mutex *)qword_1ED024060);
    v5 = sqlite3_exec(*(sqlite3 **)(a1 + 16), "DELETE FROM vword_usage", 0, 0, 0);
    v6 = v5;
    if ((_DWORD)v5)
    {
      v7 = CFStringCreateWithFormat(0, 0, CFSTR("VulgarWordUsageDatabase: Error resetting the database: %d"), v5);
      sub_19BFF7B6C(v6, v7, a2);
      if (v7)
        CFRelease(v7);
    }
    v8 = v6 == 0;
    std::mutex::unlock(v4);
  }
  else
  {
    sub_19C02F88C(CFSTR("VulgarWordUsageDatabase: Error resetting the database -- provided database reference is NULL"), a2);
    return 0;
  }
  return v8;
}

void sub_19C0305E0(_Unwind_Exception *a1)
{
  std::mutex *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C030614(uint64_t a1)
{
  sub_19C030638(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C030638(uint64_t a1)
{
  const void **v2;

  *(_QWORD *)a1 = &off_1E3D117D0;
  v2 = (const void **)(a1 + 8);
  sub_19C03068C((uint64_t **)(a1 + 24), 0);
  sub_19BF8E574((const void **)(a1 + 16), 0);
  sub_19BF8AD20(v2, 0);
  return a1;
}

uint64_t **sub_19C03068C(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2[185];
    v2[185] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    v4 = v2[184];
    v2[184] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v2[183];
    v2[183] = 0;
    if (v5)
      sub_19C022A84(v5);
    v2[11] = (uint64_t)&off_1E3D146F0;
    v6 = (void *)v2[180];
    if (v6 && *((_BYTE *)v2 + 1438) == 1)
      free(v6);
    sub_19BF8769C((uint64_t)(v2 + 173));
    v7 = v2[8];
    v2[8] = 0;
    if (v7)
      sub_19C014608(v7);
    sub_19BFACCEC((uint64_t)(v2 + 3));
    v8 = v2[1];
    v2[1] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *v2;
    *v2 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    JUMPOUT(0x1A1AD0CDCLL);
  }
  return result;
}

void sub_19C030784(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_19C0307F4(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19C0307F4(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_19C030848(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  *(_DWORD *)a1 = *(_DWORD *)(a2 + 88);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_19BF8CD70((_BYTE *)(a1 + 8), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (_BYTE *)(a1 + 32);
  if (*(char *)(a2 + 71) < 0)
  {
    sub_19BF8CD70(v5, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 72);
  return a1;
}

void sub_19C0308E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0308FC()
{
  uint64_t result;

  qword_1EE4177F0 = 0;
  *(_QWORD *)algn_1EE4177F8 = "LXTransliterationEntry";
  qword_1EE417800 = 0;
  unk_1EE417808 = 0;
  qword_1EE417810 = (uint64_t)sub_19C030948;
  unk_1EE417818 = 0u;
  unk_1EE417828 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE417850 = result;
  return result;
}

void sub_19C030948(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

uint64_t sub_19C03098C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 96))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

_QWORD *sub_19C0309E4(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_19BFE7EA0(result, a4);
    result = (_QWORD *)sub_19C030A64(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19C030A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_19BFBF780(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C030A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_19BF86B60(a3 + v6, (unsigned __int16 *)(a1 + v6));
      v6 += 32;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_19C030B04(uint64_t *a1, unsigned __int16 *a2, uint64_t a3, unint64_t a4)
{
  unsigned __int16 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (a4 > (v8 - *a1) >> 5)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)*a1;
      if (v10 != v9)
      {
        do
        {
          v12 = *(void **)(v10 - 24);
          if (v12 && *(_BYTE *)(v10 - 26) == 1)
            free(v12);
          v10 -= 32;
        }
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59)
      sub_19BF8EB40();
    v13 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v13 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    sub_19BFE7EA0(a1, v14);
    v15 = sub_19C030A64((uint64_t)v6, a3, a1[1]);
LABEL_23:
    a1[1] = v15;
    return;
  }
  v16 = a1[1];
  v17 = (v16 - v9) >> 5;
  if (v17 < a4)
  {
    v18 = (uint64_t)&a2[16 * v17];
    if (v16 != v9)
    {
      v19 = 32 * v17;
      do
      {
        sub_19BF8A1F4(v9, v6);
        v6 += 16;
        v9 += 32;
        v19 -= 32;
      }
      while (v19);
      v9 = a1[1];
    }
    v15 = sub_19C030A64(v18, a3, v9);
    goto LABEL_23;
  }
  if (a2 != (unsigned __int16 *)a3)
  {
    do
    {
      sub_19BF8A1F4(v9, v6);
      v6 += 16;
      v9 += 32;
    }
    while (v6 != (unsigned __int16 *)a3);
    v16 = a1[1];
  }
  while (v16 != v9)
  {
    v20 = *(void **)(v16 - 24);
    if (v20 && *(_BYTE *)(v16 - 26) == 1)
      free(v20);
    v16 -= 32;
  }
  a1[1] = v9;
}

void sub_19C030C98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19C030CA4(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;
  unint64_t v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;
  _BOOL4 v21;
  const char *v22;
  BOOL v23;
  char *v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  _BOOL4 v31;
  int v32;
  char *v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  BOOL v40;
  const char *v41;
  _BOOL4 v42;
  _BOOL4 v43;
  uint64_t *v44;
  _BOOL4 v45;
  _BOOL4 v46;
  int v47;
  _BOOL4 v48;
  _BOOL4 v49;
  const char *v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  _BOOL4 v54;
  unsigned __int16 *v55;
  char *v56;
  uint64_t v57;
  int v58;
  size_t v59;
  _BYTE *v60;
  size_t v61;
  size_t v62;
  int v63;
  char v64;
  char *v65;
  uint64_t v66;
  size_t v67;
  _BYTE *v68;
  const char **v69;
  char *v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  NSObject *v73;
  char *v74;
  NSObject *v75;
  unsigned __int16 *v76;
  const char *v77;
  _BOOL4 v78;
  const char *v79;
  __int16 v80;
  _BOOL4 v81;
  const char *v82;
  __int16 v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  NSObject *v86;
  char *v87;
  const char *v88;
  unsigned int v89;
  const char *v90;
  const char *v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int32_t v97;
  int v98;
  unsigned int v99;
  char *v100;
  int v101;
  _BOOL4 v102;
  int v103;
  int v104;
  unsigned int v105;
  int v107;
  const char *v108;
  const char *v109;
  const char *v110;
  int v111;
  unsigned __int16 *v112;
  int v113;
  void *__p;
  void *__pa;
  char *v116;
  int v117;
  unsigned __int16 *v118;
  void *__s1;
  void *__s1a;
  UChar *v121;
  uint64_t v122;
  _QWORD *v123;
  UChar *v124;
  UChar dest[4];
  uint64_t v126;
  unsigned __int16 *v127;
  uint64_t v128;
  int32_t v129;
  int32_t pDestLength;
  UErrorCode pErrorCode;
  UChar32 src;
  UChar *v133;
  void *v134;
  unsigned __int16 v135[3];
  char v136;
  void *v137;
  UChar v138[4];
  void *v139;
  UChar32 v140;
  char v141[4];
  unsigned __int16 v142;
  char v143;
  char *v144;
  _BYTE v145[16];
  uint64_t v146;
  char *v147;
  _BYTE v148[16];
  _BYTE buf[20];
  unsigned __int8 v150;
  int i;
  uint64_t v152;
  void *v153;
  char v154;
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_WORD *)(a1 + 2) = 16;
  *(_BYTE *)(a1 + 6) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 37) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 76) = 0;
  *(_WORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = 1;
  *(_QWORD *)(a1 + 88) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 104) = 0x100000;
  v8 = (unsigned __int16 *)(a1 + 104);
  *(_BYTE *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 108) = 0;
  *(_BYTE *)(a1 + 110) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 136) = 0;
  v9 = (unsigned __int16 *)(a1 + 136);
  *(_WORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  v124 = (UChar *)(a1 + 256);
  v121 = (UChar *)(a1 + 280);
  v123 = (_QWORD *)(a1 + 312);
  *(_DWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_BYTE *)(a1 + 304) = 0;
  v10 = *a4;
  *(_QWORD *)(a1 + 312) = *a4;
  v11 = a4[1];
  *(_QWORD *)(a1 + 320) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v10 = *v123;
  }
  *(_QWORD *)(a1 + 328) = a5;
  *(_DWORD *)(a1 + 336) = 0;
  if (!v10)
    __assert_rtn("UnigramWord", "UnigramWord.cpp", 76, "m_collator && \"Missing collator\"");
  *(_DWORD *)buf = 0x100000;
  *(_WORD *)&buf[4] = 0;
  buf[6] = 1;
  *(_QWORD *)&buf[8] = 0;
  sub_19BF8CA04(buf, (uint64_t)":", 0, 1u);
  sub_19C020DC8(&v127, a2, (unsigned __int16 *)buf);
  if (*(_QWORD *)&buf[8] && buf[6] == 1)
    free(*(void **)&buf[8]);
  v14 = v127;
  LODWORD(v152) = 0x100000;
  WORD2(v152) = 0;
  BYTE6(v152) = 1;
  v153 = 0;
  sub_19BF8CA04(&v152, (uint64_t)" \t\n", 0, 3u);
  sub_19BFF7010(buf, v14, (unsigned __int16 *)&v152);
  sub_19BF8A1F4((uint64_t)v8, (unsigned __int16 *)buf);
  if (*(_QWORD *)&buf[8] && buf[6] == 1)
    free(*(void **)&buf[8]);
  if (v153 && BYTE6(v152) == 1)
    free(v153);
  (*(void (**)(_BYTE *__return_ptr, _QWORD, unsigned __int16 *))(*(_QWORD *)*v123 + 8))(buf, *v123, v8);
  if (*v9 >= 0xFu)
  {
    v15 = *(_QWORD *)(a1 + 144);
    if (v15)
      MEMORY[0x1A1AD0CB8](v15, 0x1000C8077774924);
  }
  *(_OWORD *)v9 = *(_OWORD *)buf;
  sub_19BF86B60((uint64_t)v135, v8);
  v122 = a3;
  v16 = v127;
  if ((unint64_t)(v128 - (_QWORD)v127) >= 0x21)
  {
    v17 = 0;
    v18 = 1;
    while (1)
    {
      sub_19BF86B60((uint64_t)&v152, &v16[16 * v18]);
      *(_DWORD *)buf = 0x100000;
      *(_WORD *)&buf[4] = 0;
      buf[6] = 1;
      *(_QWORD *)&buf[8] = 0;
      sub_19BF8CA04(buf, (uint64_t)"=", 0, 1u);
      sub_19C020DC8(dest, (unsigned __int16 *)&v152, (unsigned __int16 *)buf);
      if (*(_QWORD *)&buf[8] && buf[6] == 1)
        free(*(void **)&buf[8]);
      v19 = *(unsigned __int16 **)dest;
      *(_DWORD *)buf = 0x100000;
      *(_WORD *)&buf[4] = 0;
      buf[6] = 1;
      *(_QWORD *)&buf[8] = 0;
      sub_19BF8CA04(buf, (uint64_t)" \t\n", 0, 3u);
      sub_19BFF7010(&v146, v19, (unsigned __int16 *)buf);
      if (*(_QWORD *)&buf[8] && buf[6] == 1)
        free(*(void **)&buf[8]);
      *(_DWORD *)v141 = 0x100000;
      v142 = 0;
      v143 = 0;
      v144 = 0;
      v145[0] = 0;
      v20 = *(unsigned __int16 **)dest;
      if (v126 - *(_QWORD *)dest == 64)
      {
        *(_DWORD *)v138 = 0x100000;
        v138[2] = 0;
        LOBYTE(v138[3]) = 1;
        v139 = 0;
        sub_19BF8CA04(v138, (uint64_t)" \t\n", 0, 3u);
        sub_19BFF7010(buf, v20 + 16, v138);
        sub_19BF8A370((uint64_t)v141, (unsigned __int16 *)buf);
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        if (v139 && LOBYTE(v138[3]) == 1)
          free(v139);
      }
      *(_DWORD *)buf = 0x100000;
      *(_WORD *)&buf[4] = 0;
      buf[6] = 1;
      *(_QWORD *)&buf[8] = 0;
      sub_19BF8CA04(buf, (uint64_t)"f", 0, 1u);
      if (sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf))
      {
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
LABEL_44:
        if (*(_WORD *)v141)
        {
          if (v144)
            v22 = v144;
          else
            v22 = v145;
          *(double *)(a1 + 88) = (double)atoi(v22);
        }
        goto LABEL_100;
      }
      *(_DWORD *)v138 = 0x100000;
      v138[2] = 0;
      LOBYTE(v138[3]) = 1;
      v139 = 0;
      sub_19BF8CA04(v138, (uint64_t)"freq", 0, 4u);
      v21 = sub_19BFF7920((unsigned __int16 *)&v146, v138);
      if (v139 && LOBYTE(v138[3]) == 1)
        free(v139);
      if (*(_QWORD *)&buf[8] && buf[6] == 1)
        free(*(void **)&buf[8]);
      if (v21)
        goto LABEL_44;
      *(_DWORD *)buf = 0x100000;
      *(_WORD *)&buf[4] = 0;
      buf[6] = 1;
      *(_QWORD *)&buf[8] = 0;
      sub_19BF8CA04(buf, (uint64_t)"r", 0, 1u);
      if (sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf))
        goto LABEL_50;
      *(_DWORD *)v138 = 0x100000;
      v138[2] = 0;
      LOBYTE(v138[3]) = 1;
      v139 = 0;
      sub_19BF8CA04(v138, (uint64_t)"role", 0, 4u);
      if (sub_19BFF7920((unsigned __int16 *)&v146, v138))
      {
        if (v139 && LOBYTE(v138[3]) == 1)
          free(v139);
LABEL_50:
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
LABEL_67:
        if (v144)
          v24 = v144;
        else
          v24 = v145;
        *(_QWORD *)buf = v24;
        v25 = *(unsigned __int16 *)v141;
        *(_DWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[12] = *(unsigned __int16 *)v141;
        sub_19BF8BB80((uint64_t *)buf);
        *(_QWORD *)v138 = v24;
        LODWORD(v139) = v25;
        HIDWORD(v139) = v25;
        v140 = 0;
        sub_19BF8BB80((uint64_t *)v138);
        v26 = *(_QWORD *)buf;
        if (*(_QWORD *)buf == *(_QWORD *)v138)
        {
          v27 = v17;
          v28 = 0;
          v29 = (int)v139;
          while (1)
          {
            if (*(_DWORD *)&buf[8] == v29)
              goto LABEL_99;
            v30 = buf[16] - 105;
            if (v30 > 7 || ((0xE9u >> v30) & 1) == 0)
              break;
            v28 |= dword_19C06ABD8[v30];
            sub_19BF8BB80((uint64_t *)buf);
            if (*(_QWORD *)buf != v26)
              goto LABEL_332;
          }
          v107 = 485;
          v109 = "parse_role_flags";
          v108 = "UnigramWord.cpp";
          v110 = "false && \"invalid role flag in unigrams file\"";
        }
        else
        {
LABEL_332:
          v107 = 194;
          v108 = "TIString.h";
          v109 = "operator!=";
          v110 = "p==rhs.p";
        }
        __assert_rtn(v109, v108, v107, v110);
      }
      LODWORD(v133) = 0x100000;
      WORD2(v133) = 0;
      BYTE6(v133) = 1;
      v134 = 0;
      sub_19BF8CA04(&v133, (uint64_t)"roles", 0, 5u);
      v23 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)&v133);
      if (v134 && BYTE6(v133) == 1)
        free(v134);
      if (v139 && LOBYTE(v138[3]) == 1)
        free(v139);
      if (*(_QWORD *)&buf[8] && buf[6] == 1)
        free(*(void **)&buf[8]);
      if (v23)
        goto LABEL_67;
      *(_DWORD *)buf = 0x100000;
      *(_WORD *)&buf[4] = 0;
      buf[6] = 1;
      *(_QWORD *)&buf[8] = 0;
      sub_19BF8CA04(buf, (uint64_t)"ovs", 0, 3u);
      v31 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf);
      if (*(_QWORD *)&buf[8] && buf[6] == 1)
        free(*(void **)&buf[8]);
      if (v31)
      {
        v32 = v142;
        if (!v142)
        {
          sub_19BF86BF8((unsigned __int16 *)v141);
          v32 = v142;
        }
        if (v32 != 1)
          __assert_rtn("UnigramWord", "UnigramWord.cpp", 105, "item_val.length() == 1");
        v27 = v17;
        if (v144)
          v33 = v144;
        else
          v33 = v145;
        *(_QWORD *)buf = v33;
        v34 = *(unsigned __int16 *)v141;
        *(_DWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[12] = *(unsigned __int16 *)v141;
        sub_19BF8BB80((uint64_t *)buf);
        *(_QWORD *)v138 = v33;
        LODWORD(v139) = v34;
        HIDWORD(v139) = v34;
        v140 = 0;
        sub_19BF8BB80((uint64_t *)v138);
        v35 = *(_QWORD *)buf;
        if (*(_QWORD *)buf != *(_QWORD *)v138)
          goto LABEL_332;
        v28 = 0;
        v36 = (int)v139;
        while (*(_DWORD *)&buf[8] != v36)
        {
          v37 = v28 | 0x2000000;
          v38 = v28 | 0x1000000;
          if (buf[16] != 111)
            v38 = v28;
          if (buf[16] != 115)
            v37 = v38;
          if (buf[16] == 118)
            v28 |= 0x800000u;
          else
            v28 = v37;
          sub_19BF8BB80((uint64_t *)buf);
          if (*(_QWORD *)buf != v35)
            goto LABEL_332;
        }
LABEL_99:
        v17 = v28 | v27;
      }
      else
      {
        *(_DWORD *)buf = 0x100000;
        *(_WORD *)&buf[4] = 0;
        buf[6] = 1;
        *(_QWORD *)&buf[8] = 0;
        sub_19BF8CA04(buf, (uint64_t)"c", 0, 1u);
        if (sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf))
          goto LABEL_115;
        *(_DWORD *)v138 = 0x100000;
        v138[2] = 0;
        LOBYTE(v138[3]) = 1;
        v139 = 0;
        sub_19BF8CA04(v138, (uint64_t)"cap", 0, 3u);
        if (sub_19BFF7920((unsigned __int16 *)&v146, v138))
        {
          if (v139 && LOBYTE(v138[3]) == 1)
            free(v139);
LABEL_115:
          if (*(_QWORD *)&buf[8] && buf[6] == 1)
            free(*(void **)&buf[8]);
LABEL_132:
          if (*(_WORD *)v141)
          {
            if (v144)
              v41 = v144;
            else
              v41 = v145;
            *(_DWORD *)(a1 + 40) = atoi(v41);
          }
          goto LABEL_100;
        }
        LODWORD(v133) = 0x100000;
        WORD2(v133) = 0;
        BYTE6(v133) = 1;
        v134 = 0;
        sub_19BF8CA04(&v133, (uint64_t)"cap_bits", 0, 8u);
        v40 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)&v133);
        if (v134 && BYTE6(v133) == 1)
          free(v134);
        if (v139 && LOBYTE(v138[3]) == 1)
          free(v139);
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        if (v40)
          goto LABEL_132;
        *(_DWORD *)buf = 0x100000;
        *(_WORD *)&buf[4] = 0;
        buf[6] = 1;
        *(_QWORD *)&buf[8] = 0;
        sub_19BF8CA04(buf, (uint64_t)"s", 0, 1u);
        if (sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf))
        {
          if (*(_QWORD *)&buf[8] && buf[6] == 1)
            free(*(void **)&buf[8]);
LABEL_148:
          sub_19BF8A1F4((uint64_t)v135, (unsigned __int16 *)v141);
          goto LABEL_100;
        }
        *(_DWORD *)v138 = 0x100000;
        v138[2] = 0;
        LOBYTE(v138[3]) = 1;
        v139 = 0;
        sub_19BF8CA04(v138, (uint64_t)"surface_form", 0, 0xCu);
        v42 = sub_19BFF7920((unsigned __int16 *)&v146, v138);
        if (v139 && LOBYTE(v138[3]) == 1)
          free(v139);
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        if (v42)
          goto LABEL_148;
        *(_DWORD *)buf = 0x100000;
        *(_WORD *)&buf[4] = 0;
        buf[6] = 1;
        *(_QWORD *)&buf[8] = 0;
        sub_19BF8CA04(buf, (uint64_t)"pre", 0, 3u);
        v43 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf);
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        if (v43)
        {
          *(_DWORD *)buf = 0x100000;
          *(_WORD *)&buf[4] = 0;
          buf[6] = 1;
          *(_QWORD *)&buf[8] = 0;
          sub_19BF8CA04(buf, (uint64_t)",", 0, 1u);
          sub_19C020DC8(v138, (unsigned __int16 *)v141, (unsigned __int16 *)buf);
          v44 = (uint64_t *)v124;
          if (v124 != v138)
LABEL_160:
            sub_19C030B04(v44, *(unsigned __int16 **)v138, (uint64_t)v139, ((uint64_t)v139 - *(_QWORD *)v138) >> 5);
LABEL_161:
          v133 = v138;
          sub_19BFBF780((void ***)&v133);
          if (*(_QWORD *)&buf[8] && buf[6] == 1)
            free(*(void **)&buf[8]);
          goto LABEL_100;
        }
        *(_DWORD *)buf = 0x100000;
        *(_WORD *)&buf[4] = 0;
        buf[6] = 1;
        *(_QWORD *)&buf[8] = 0;
        sub_19BF8CA04(buf, (uint64_t)"post", 0, 4u);
        v45 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf);
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        if (v45)
        {
          *(_DWORD *)buf = 0x100000;
          *(_WORD *)&buf[4] = 0;
          buf[6] = 1;
          *(_QWORD *)&buf[8] = 0;
          sub_19BF8CA04(buf, (uint64_t)",", 0, 1u);
          sub_19C020DC8(v138, (unsigned __int16 *)v141, (unsigned __int16 *)buf);
          v44 = (uint64_t *)v121;
          if (v121 != v138)
            goto LABEL_160;
          goto LABEL_161;
        }
        *(_DWORD *)buf = 0x100000;
        *(_WORD *)&buf[4] = 0;
        buf[6] = 1;
        *(_QWORD *)&buf[8] = 0;
        sub_19BF8CA04(buf, (uint64_t)"needs_prefix", 0, 0xCu);
        v46 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf);
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        if (v46)
        {
          v47 = *(_DWORD *)(a1 + 56) | 0x10000000;
LABEL_174:
          *(_DWORD *)(a1 + 56) = v47;
          goto LABEL_100;
        }
        *(_DWORD *)buf = 0x100000;
        *(_WORD *)&buf[4] = 0;
        buf[6] = 1;
        *(_QWORD *)&buf[8] = 0;
        sub_19BF8CA04(buf, (uint64_t)"needs_suffix", 0, 0xCu);
        v48 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf);
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        if (v48)
        {
          v47 = *(_DWORD *)(a1 + 56) | 0x20000000;
          goto LABEL_174;
        }
        *(_DWORD *)buf = 0x100000;
        *(_WORD *)&buf[4] = 0;
        buf[6] = 1;
        *(_QWORD *)&buf[8] = 0;
        sub_19BF8CA04(buf, (uint64_t)"w", 0, 1u);
        v49 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf);
        if (*(_QWORD *)&buf[8] && buf[6] == 1)
          free(*(void **)&buf[8]);
        if (v49)
        {
          if (v144)
            v50 = v144;
          else
            v50 = v145;
          v51 = atoi(v50);
          if (HIBYTE(v51))
            __assert_rtn("UnigramWord", "UnigramWord.cpp", 123, "word_id < (1 << 24)");
          *(_DWORD *)(a1 + 60) = v51;
        }
        else
        {
          *(_DWORD *)buf = 0x100000;
          *(_WORD *)&buf[4] = 0;
          buf[6] = 1;
          *(_QWORD *)&buf[8] = 0;
          sub_19BF8CA04(buf, (uint64_t)"preferred_form", 0, 0xEu);
          v52 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf);
          if (*(_QWORD *)&buf[8] && buf[6] == 1)
            free(*(void **)&buf[8]);
          if (v52)
          {
            *(_BYTE *)(a1 + 96) = 1;
          }
          else
          {
            v111 = v17;
            *(_DWORD *)buf = 0x100000;
            *(_WORD *)&buf[4] = 0;
            buf[6] = 1;
            *(_QWORD *)&buf[8] = 0;
            sub_19BF8CA04(buf, (uint64_t)"preferred_form_for_sortkey", 0, 0x1Au);
            v53 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf);
            if (*(_QWORD *)&buf[8] && buf[6] == 1)
              free(*(void **)&buf[8]);
            if (v53)
            {
              v17 |= 8u;
            }
            else
            {
              *(_DWORD *)buf = 0x100000;
              *(_WORD *)&buf[4] = 0;
              buf[6] = 1;
              *(_QWORD *)&buf[8] = 0;
              sub_19BF8CA04(buf, (uint64_t)"categories", 0, 0xAu);
              v54 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf);
              if (*(_QWORD *)&buf[8] && buf[6] == 1)
                free(*(void **)&buf[8]);
              if (v54)
              {
                *(_DWORD *)buf = 0x100000;
                *(_WORD *)&buf[4] = 0;
                buf[6] = 1;
                *(_QWORD *)&buf[8] = 0;
                sub_19BF8CA04(buf, (uint64_t)"|", 0, 1u);
                sub_19C020DC8(v138, (unsigned __int16 *)v141, (unsigned __int16 *)buf);
                if (*(_QWORD *)&buf[8] && buf[6] == 1)
                  free(*(void **)&buf[8]);
                v112 = (unsigned __int16 *)v139;
                if (*(void **)v138 == v139)
                {
                  v113 = 0;
LABEL_265:
                  *(_QWORD *)buf = v138;
                  sub_19BFBF780((void ***)buf);
                  v17 = v113 | v111;
                  goto LABEL_100;
                }
                v55 = *(unsigned __int16 **)v138;
                v113 = 0;
                while (2)
                {
                  v116 = (char *)(v55 + 8);
                  v118 = v55;
                  if (*((_QWORD *)v55 + 1))
                    v56 = (char *)*((_QWORD *)v55 + 1);
                  else
                    v56 = (char *)(v55 + 8);
                  sub_19BF8E43C(buf, v56);
                  v57 = 0;
                  v58 = (char)v150;
                  v59 = *(_QWORD *)&buf[8];
                  if ((v150 & 0x80u) == 0)
                    v59 = v150;
                  v60 = buf;
                  __p = *(void **)buf;
                  if ((v150 & 0x80u) != 0)
                    v60 = *(_BYTE **)buf;
                  __s1 = v60;
                  while (1)
                  {
                    v61 = v59;
                    v62 = strlen((&off_1E3D17268)[v57]);
                    v59 = v61;
                    if (v61 == v62)
                    {
                      v63 = memcmp(__s1, (&off_1E3D17268)[v57], v61);
                      v59 = v61;
                      if (!v63)
                        break;
                    }
                    v57 += 2;
                    if (v57 == 22)
                    {
                      v64 = 0;
                      goto LABEL_216;
                    }
                  }
                  v64 = 1;
LABEL_216:
                  if (v58 < 0)
                    operator delete(__p);
                  if ((v64 & 1) != 0)
                  {
                    if (*((_QWORD *)v118 + 1))
                      v65 = (char *)*((_QWORD *)v118 + 1);
                    else
                      v65 = v116;
                    sub_19BF8E43C(buf, v65);
                    v66 = 0;
                    v117 = (char)v150;
                    if ((v150 & 0x80u) == 0)
                      v67 = v150;
                    else
                      v67 = *(_QWORD *)&buf[8];
                    v68 = buf;
                    __pa = *(void **)buf;
                    if ((v150 & 0x80u) != 0)
                      v68 = *(_BYTE **)buf;
                    __s1a = v68;
                    v69 = (const char **)&off_1E3D17268;
                    while (v67 != strlen(*v69) || memcmp(__s1a, *v69, v67))
                    {
                      ++v66;
                      v69 += 2;
                      if (v66 == 11)
                      {
                        LODWORD(v70) = 0;
                        goto LABEL_239;
                      }
                    }
                    v70 = (&off_1E3D17268)[2 * v66 + 1];
LABEL_239:
                    if (v117 < 0)
                      operator delete(__pa);
                    v113 |= v70;
LABEL_242:
                    v76 = v118;
                  }
                  else
                  {
                    v71 = atomic_load(byte_1EE414EA8);
                    if ((v71 & 1) == 0)
                      goto LABEL_242;
                    v72 = atomic_load(byte_1EE417890);
                    if ((v72 & 1) != 0)
                    {
                      v76 = v118;
                      v77 = (const char *)*((_QWORD *)v118 + 1);
                      if (!v77)
                        v77 = v116;
                      printf("WARNING: skipping invalid category=%s", v77);
                      putchar(10);
                    }
                    else
                    {
                      v73 = sub_19BFD3F34();
                      if (!os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
                        goto LABEL_242;
                      v74 = (char *)*((_QWORD *)v118 + 1);
                      if (!v74)
                        v74 = v116;
                      *(_DWORD *)buf = 136315138;
                      *(_QWORD *)&buf[4] = v74;
                      v75 = v73;
                      v76 = v118;
                      _os_log_impl(&dword_19BF85000, v75, OS_LOG_TYPE_DEFAULT, "WARNING: skipping invalid category=%s", buf, 0xCu);
                    }
                  }
                  v55 = v76 + 16;
                  if (v55 == v112)
                    goto LABEL_265;
                  continue;
                }
              }
              *(_DWORD *)buf = 0x100000;
              *(_WORD *)&buf[4] = 0;
              buf[6] = 1;
              *(_QWORD *)&buf[8] = 0;
              sub_19BF8CA04(buf, (uint64_t)"head_pos", 0, 8u);
              v78 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf);
              if (*(_QWORD *)&buf[8] && buf[6] == 1)
                free(*(void **)&buf[8]);
              if (v78)
              {
                if (v144)
                  v79 = v144;
                else
                  v79 = v145;
                v80 = atoi(v79);
                *(_BYTE *)(a1 + 72) = 1;
                *(_WORD *)(a1 + 76) = v80;
              }
              else
              {
                *(_DWORD *)buf = 0x100000;
                *(_WORD *)&buf[4] = 0;
                buf[6] = 1;
                *(_QWORD *)&buf[8] = 0;
                sub_19BF8CA04(buf, (uint64_t)"tail_pos", 0, 8u);
                v81 = sub_19BFF7920((unsigned __int16 *)&v146, (unsigned __int16 *)buf);
                if (*(_QWORD *)&buf[8] && buf[6] == 1)
                  free(*(void **)&buf[8]);
                if (v81)
                {
                  if (v144)
                    v82 = v144;
                  else
                    v82 = v145;
                  v83 = atoi(v82);
                  *(_BYTE *)(a1 + 72) = 1;
                  *(_WORD *)(a1 + 78) = v83;
                }
                else
                {
                  v84 = atomic_load(byte_1EE414EA8);
                  if ((v84 & 1) != 0)
                  {
                    v85 = atomic_load(byte_1EE417890);
                    if ((v85 & 1) != 0)
                    {
                      v88 = v147;
                      if (!v147)
                        v88 = v148;
                      printf("WARNING: skipping invalid item: %s", v88);
                      putchar(10);
                    }
                    else
                    {
                      v86 = sub_19BFD3F34();
                      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
                      {
                        v87 = v147;
                        if (!v147)
                          v87 = v148;
                        *(_DWORD *)buf = 136315138;
                        *(_QWORD *)&buf[4] = v87;
                        _os_log_impl(&dword_19BF85000, v86, OS_LOG_TYPE_DEFAULT, "WARNING: skipping invalid item: %s", buf, 0xCu);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_100:
      if (v144)
        v39 = v143 == 1;
      else
        v39 = 0;
      if (v39)
        free(v144);
      if (v147 && BYTE6(v146) == 1)
        free(v147);
      *(_QWORD *)buf = dest;
      sub_19BFBF780((void ***)buf);
      if (v153 && BYTE6(v152) == 1)
        free(v153);
      ++v18;
      v16 = v127;
      if (v18 >= (v128 - (uint64_t)v127) >> 5)
        goto LABEL_277;
    }
  }
  v17 = 0;
LABEL_277:
  v89 = v17 & 0xFFFFFFFB;
  if ((~v17 & 0x84) != 0)
    v89 = v17;
  *(_DWORD *)(a1 + 36) = v89;
  sub_19BF8A1F4(a1, v135);
  sub_19BFD54EC((uint64_t)&v133, (unsigned __int16 *)a1);
  v90 = *(const char **)(v122 + 8);
  LODWORD(v152) = 0x100000;
  if (v90)
    v91 = v90;
  else
    v91 = (const char *)(v122 + 16);
  WORD2(v152) = 0;
  BYTE6(v152) = 0;
  v153 = 0;
  v154 = 0;
  sub_19BF86B60((uint64_t)buf, (unsigned __int16 *)a1);
  v92 = 0;
  v93 = 0;
  v94 = 0;
  for (i = 0; ; v92 = HIWORD(i))
  {
    v95 = *(unsigned __int16 *)&buf[4];
    if (!*(_WORD *)&buf[4])
    {
      sub_19BF86BF8((unsigned __int16 *)buf);
      v95 = *(unsigned __int16 *)&buf[4];
    }
    if (v92 >= v95 || v94 >= 0x20)
      break;
    v96 = sub_19C02211C((uint64_t)buf);
    if (u_isupper(v96))
    {
      src = v96;
      LODWORD(v146) = 0x100000;
      WORD2(v146) = 0;
      BYTE6(v146) = 0;
      v147 = 0;
      v148[0] = 0;
      if (v96)
      {
        pDestLength = 0;
        pErrorCode = U_ZERO_ERROR;
        u_strFromUTF32(dest, 3, &pDestLength, &src, 1, &pErrorCode);
        v97 = u_strToLower(v138, 5, dest, pDestLength, v91, &pErrorCode);
        v129 = 0;
        u_strToUTF8(v141, 13, &v129, v138, v97, &pErrorCode);
        if (pErrorCode)
          __assert_rtn("character_to_lowercase", "TIStringFunctions.cpp", 150, "errorcode == U_ZERO_ERROR");
        sub_19BF86F84((unsigned __int16 *)&v146, v141, 0xFFFFuLL);
        v98 = (unsigned __int16)v146;
        if (!(_WORD)v146)
        {
          v99 = MEMORY[0x1A1AD12AC](src);
          sub_19BFF6A20((unsigned __int16 *)&v146, v99);
          v98 = (unsigned __int16)v146;
        }
      }
      else
      {
        v98 = 0;
      }
      v100 = v147;
      if (!v147)
        v100 = v148;
      *(_QWORD *)v138 = v100;
      LODWORD(v139) = 0;
      HIDWORD(v139) = v98;
      v140 = 0;
      sub_19BF8BB80((uint64_t *)v138);
      sub_19C020FEC((uint64_t)v141, v140, v91);
      v101 = WORD2(v146);
      if (!WORD2(v146))
      {
        sub_19BF86BF8((unsigned __int16 *)&v146);
        v101 = WORD2(v146);
      }
      if (v101 != 1)
        goto LABEL_304;
      sub_19BF8D914((uint64_t)v138, v96);
      v102 = sub_19BFF7920((unsigned __int16 *)v141, v138);
      if (v139 && LOBYTE(v138[3]) == 1)
        free(v139);
      if (v102)
        sub_19BFF7414((unsigned __int16 *)&v152, (uint64_t)&v146);
      else
LABEL_304:
        sub_19BFF6A20((unsigned __int16 *)&v152, v96);
      if (v144 && v143 == 1)
        free(v144);
      if (v147)
      {
        if (BYTE6(v146) == 1)
          free(v147);
      }
      v93 |= 1 << v94;
    }
    else
    {
      sub_19BFF6A20((unsigned __int16 *)&v152, v96);
    }
    ++v94;
  }
  v103 = *(_DWORD *)(a1 + 36);
  v104 = *(_DWORD *)(a1 + 40) | v93;
  *(_DWORD *)(a1 + 40) = v104;
  if (v104 == 1)
  {
    *(_DWORD *)(a1 + 36) = v103 | 1;
    v105 = HIWORD(i);
    if (!v95)
    {
      sub_19BF86BF8((unsigned __int16 *)buf);
      v95 = *(unsigned __int16 *)&buf[4];
    }
    if (v105 >= v95)
      sub_19BF8A1F4(a1, (unsigned __int16 *)&v152);
  }
  else
  {
    *(_DWORD *)(a1 + 36) = v103 & 0xFFFFFFFE;
  }
  if (*(_QWORD *)&buf[8] && buf[6] == 1)
    free(*(void **)&buf[8]);
  if (v153 && BYTE6(v152) == 1)
    free(v153);
  if (v134 && BYTE6(v133) == 1)
    free(v134);
  if (v137 && v136 == 1)
    free(v137);
  *(_QWORD *)buf = &v127;
  sub_19BFBF780((void ***)buf);
  return a1;
}

void sub_19C032378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,unsigned __int16 *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,void *a44,uint64_t a45,uint64_t a46,char a47,int a48,char a49,char a50,void *a51)
{
  uint64_t v51;
  uint64_t v52;
  void *v54;
  void *v55;
  void *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;

  v54 = *(void **)(v52 - 232);
  if (v54 && *(_BYTE *)(v52 - 234) == 1)
    free(v54);
  v55 = *(void **)(v52 - 200);
  if (v55 && *(_BYTE *)(v52 - 202) == 1)
    free(v55);
  *(_QWORD *)(v52 - 208) = &a29;
  sub_19BFBF780((void ***)(v52 - 208));
  v56 = *(void **)(v52 - 128);
  if (v56 && *(_BYTE *)(v52 - 130) == 1)
    free(v56);
  if (a44)
    v57 = a43 == 1;
  else
    v57 = 0;
  if (v57)
    free(a44);
  *(_QWORD *)(v52 - 136) = &a32;
  sub_19BFBF780((void ***)(v52 - 136));
  sub_19BFACCEC(a26);
  *(_QWORD *)(v52 - 136) = a23;
  sub_19BFBF780((void ***)(v52 - 136));
  *(_QWORD *)(v52 - 136) = a28;
  sub_19BFBF780((void ***)(v52 - 136));
  v58 = *(_QWORD *)(v51 + 240);
  if (v58)
    sub_19BFBF44C((unsigned int *)(v58 + 24));
  v59 = *(_QWORD *)(v51 + 232);
  if (v59)
    sub_19BFBF44C((unsigned int *)(v59 + 24));
  v60 = *(_QWORD *)(v51 + 224);
  if (v60)
    sub_19BFBF4E8(v60);
  v61 = *a22;
  if (*a22)
  {
    *(_QWORD *)(v51 + 208) = v61;
    operator delete(v61);
  }
  if (*(unsigned __int16 *)(v51 + 176) >= 0xFu)
  {
    v62 = *(_QWORD *)(v51 + 184);
    if (v62)
      MEMORY[0x1A1AD0CB8](v62, 0x1000C8077774924);
  }
  if (*(unsigned __int16 *)(v51 + 152) >= 0xFu)
  {
    v63 = *(_QWORD *)(v51 + 160);
    if (v63)
      MEMORY[0x1A1AD0CB8](v63, 0x1000C8077774924);
  }
  if (*a25 >= 0xFu)
  {
    v64 = *(_QWORD *)(v51 + 144);
    if (v64)
      MEMORY[0x1A1AD0CB8](v64, 0x1000C8077774924);
  }
  v65 = *(void **)(v51 + 112);
  if (v65 && *(_BYTE *)(v51 + 110) == 1)
    free(v65);
  v66 = *(void **)(v51 + 8);
  if (v66)
  {
    if (*(_BYTE *)(v51 + 6) == 1)
      free(v66);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_19C0327F0(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  if (v2 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    v4 = 0;
    v5 = a2[1];
    do
    {
      v7 = *(_QWORD *)(v2 - 8);
      v2 -= 8;
      v6 = v7;
      *(_QWORD *)(v5 - 8) = v7;
      v5 -= 8;
      if (v7)
      {
        v8 = (unsigned int *)(v6 + 84);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        if (v9 <= 0)
          __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      }
      v4 -= 8;
    }
    while (v2 != v3);
  }
  a2[1] = v5;
  v10 = *result;
  *result = v5;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19C0328F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 8);
    v2 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      sub_19BFBF614((unsigned int *)(v4 + 84));
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned __int16 *sub_19C032948(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *result;

  result = (unsigned __int16 *)*a2;
  if (*a2)
  {
    if ((_DWORD)result == 1)
    {
      return (unsigned __int16 *)*(unsigned int *)(a1 + 4 * *((unsigned __int8 *)a2 + 2) + 12);
    }
    else
    {
      result = sub_19BFF4D28((_QWORD *)(a1 + 1296), a2);
      if (result)
        return (unsigned __int16 *)*((unsigned int *)result + 8);
    }
  }
  return result;
}

uint64_t sub_19C03298C(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t i;
  void *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  int *v20;
  unsigned __int16 *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v38;
  uint64_t v39;
  unsigned __int16 v40[3];
  char v41;
  void *v42;
  int v43;
  unsigned __int16 v44[3];
  char v45;
  void *v46;
  unsigned __int16 v47[2];
  unsigned __int16 v48;
  char v49;
  void *v50;
  int v51;
  int v52;
  __int16 v53;
  char v54;
  void *v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v8 = *a3;
  for (i = a3[1]; i != v8; i -= 40)
  {
    v10 = *(void **)(i - 32);
    if (v10)
    {
      if (*(_BYTE *)(i - 34) == 1)
        free(v10);
    }
  }
  a3[1] = v8;
  *a4 = 0;
  if (*(_QWORD *)(a1 + 200) == *(_QWORD *)(a1 + 208) || !*(_DWORD *)(a2 + 1320))
    return 0;
  v52 = 0x100000;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  sub_19BF86B60((uint64_t)v47, (unsigned __int16 *)a1);
  v11 = 0;
  v51 = 0;
  while (1)
  {
    v12 = HIWORD(v51);
    v13 = v48;
    if (!v48)
    {
      sub_19BF86BF8(v47);
      v13 = v48;
    }
    if (v12 >= v13)
      break;
    v14 = sub_19C02211C((uint64_t)v47);
    sub_19BF8D914((uint64_t)v44, v14);
    if ((_WORD)v52)
    {
      sub_19BFF7414((unsigned __int16 *)&v52, (uint64_t)v44);
      v11 += v44[0];
    }
    sub_19BFD4084(&v38, a2, v14);
    v15 = HIWORD(v51) + ~*a4;
    if (sub_19C017308(a2, (unsigned __int16 *)&v38))
    {
      if (v15 >= 0x20)
      {
        v17 = *a3;
        v16 = a3[1];
        if (v16 != *a3)
        {
          do
          {
            v18 = *(void **)(v16 - 32);
            if (v18 && *(_BYTE *)(v16 - 34) == 1)
              free(v18);
            v16 -= 40;
          }
          while (v16 != v17);
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      sub_19BF86B60((uint64_t)v40, v44);
      v43 = v15 | 0x20;
      v22 = a3[1];
      if (v22 >= a3[2])
      {
        v24 = sub_19C032F70(a3, (uint64_t)v40);
      }
      else
      {
        *(_DWORD *)v22 = 0x100000;
        *(_WORD *)(v22 + 4) = 0;
        *(_BYTE *)(v22 + 6) = 0;
        *(_QWORD *)(v22 + 8) = 0;
        v23 = sub_19BF8A370(v22, v40);
        *(_DWORD *)(v23 + 32) = v43;
        v24 = v23 + 40;
        a3[1] = v24;
      }
      a3[1] = v24;
      if (v42 && v41 == 1)
        free(v42);
      --*a4;
      if (v55 && v54 == 1)
        free(v55);
LABEL_64:
      v55 = 0;
      v19 = 1;
      v54 = 1;
      v56 = 0;
      v52 = 0x100000;
      v53 = 0;
      goto LABEL_72;
    }
    if ((_DWORD)v14 != sub_19C032948(a2, (unsigned __int16 *)&v38))
    {
      if (!(_WORD)v38)
      {
        if (v15 >= 0x20)
        {
          v17 = *a3;
          v16 = a3[1];
          if (v16 != *a3)
          {
            do
            {
              v25 = *(void **)(v16 - 32);
              if (v25 && *(_BYTE *)(v16 - 34) == 1)
                free(v25);
              v16 -= 40;
            }
            while (v16 != v17);
LABEL_22:
            v16 = v17;
          }
LABEL_23:
          v19 = 0;
          a3[1] = v16;
          *a4 = 0;
          goto LABEL_72;
        }
        sub_19BF86B60((uint64_t)v40, v44);
        v43 = v15 | 0x40;
        v27 = a3[1];
        if (v27 >= a3[2])
        {
          v29 = sub_19C032F70(a3, (uint64_t)v40);
        }
        else
        {
          *(_DWORD *)v27 = 0x100000;
          *(_WORD *)(v27 + 4) = 0;
          *(_BYTE *)(v27 + 6) = 0;
          *(_QWORD *)(v27 + 8) = 0;
          v28 = sub_19BF8A370(v27, v40);
          *(_DWORD *)(v28 + 32) = v43;
          v29 = v28 + 40;
          a3[1] = v29;
        }
        a3[1] = v29;
        if (v42 && v41 == 1)
          free(v42);
        ++*a4;
        if (v55 && v54 == 1)
          free(v55);
        v11 = 0;
        goto LABEL_64;
      }
      if ((_WORD)v52 && v11 < 3)
      {
        v20 = (int *)(a3[1] - 40);
        v21 = (unsigned __int16 *)&v52;
      }
      else
      {
        if (v15 >= 0x20)
        {
          v17 = *a3;
          v16 = a3[1];
          if (v16 != *a3)
          {
            do
            {
              v26 = *(void **)(v16 - 32);
              if (v26 && *(_BYTE *)(v16 - 34) == 1)
                free(v26);
              v16 -= 40;
            }
            while (v16 != v17);
            goto LABEL_22;
          }
          goto LABEL_23;
        }
        sub_19BF86B60((uint64_t)v40, v44);
        v43 = v15;
        v30 = a3[1];
        if (v30 >= a3[2])
        {
          v32 = sub_19C032F70(a3, (uint64_t)v40);
        }
        else
        {
          *(_DWORD *)v30 = 0x100000;
          *(_WORD *)(v30 + 4) = 0;
          *(_BYTE *)(v30 + 6) = 0;
          *(_QWORD *)(v30 + 8) = 0;
          v31 = sub_19BF8A370(v30, v40);
          *(_DWORD *)(v31 + 32) = v43;
          v32 = v31 + 40;
          a3[1] = v32;
        }
        a3[1] = v32;
        if (v42 && v41 == 1)
          free(v42);
        v21 = v44;
        v20 = &v52;
      }
      sub_19BF8A1F4((uint64_t)v20, v21);
      v11 = 0;
    }
    v19 = 1;
LABEL_72:
    if ((unsigned __int16)v38 >= 0xFu && v39)
      MEMORY[0x1A1AD0CB8](v39, 0x1000C8077774924);
    if (v46 && v45 == 1)
      free(v46);
    if ((v19 & 1) == 0)
    {
      v33 = 0;
      goto LABEL_89;
    }
  }
  if ((*(_BYTE *)(a1 + 328) & 0x80) != 0 || (v35 = *a3, v34 = a3[1], v34 == *a3))
  {
    v33 = 1;
  }
  else
  {
    do
    {
      v36 = *(void **)(v34 - 32);
      if (v36 && *(_BYTE *)(v34 - 34) == 1)
        free(v36);
      v34 -= 40;
    }
    while (v34 != v35);
    v33 = 0;
    a3[1] = v35;
    *a4 = 0;
  }
LABEL_89:
  if (v50 && v49 == 1)
    free(v50);
  if (v55 && v54 == 1)
    free(v55);
  return v33;
}

void sub_19C032EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, int a12, __int16 a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,void *a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,void *a28)
{
  uint64_t v28;
  void *v30;

  if (a15 && a14 == 1)
    free(a15);
  if (a10 >= 0xFu && a11)
    MEMORY[0x1A1AD0CB8](a11, 0x1000C8077774924);
  if (a22 && a21 == 1)
    free(a22);
  if (a28 && a27 == 1)
    free(a28);
  v30 = *(void **)(v28 - 112);
  if (v30)
  {
    if (*(_BYTE *)(v28 - 114) == 1)
      free(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C032F70(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  uint64_t v16;
  char *v18;
  int64x2_t v19;
  char *v20;
  _QWORD *v21;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
    sub_19BF8EB40();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v5 = 0x666666666666666;
  else
    v5 = v3;
  v21 = a1 + 2;
  if (v5 > 0x666666666666666)
    sub_19BF8E6D0();
  v7 = 5 * v5;
  v8 = (char *)operator new(40 * v5);
  v9 = (uint64_t)&v8[40 * v2];
  v18 = v8;
  v19.i64[0] = v9;
  v10 = &v8[8 * v7];
  v20 = v10;
  *(_DWORD *)v9 = 0x100000;
  *(_WORD *)(v9 + 4) = 0;
  *(_BYTE *)(v9 + 6) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  sub_19BF8A370(v9, (unsigned __int16 *)a2);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(a2 + 32);
  v11 = v9 + 40;
  v19.i64[1] = v9 + 40;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    v15 = vdupq_n_s64(v12);
  }
  else
  {
    v14 = 0;
    do
    {
      sub_19BF86B60(v9 + v14 - 40, (unsigned __int16 *)(v12 + v14 - 40));
      *(_DWORD *)(v9 + v14 - 8) = *(_DWORD *)(v12 + v14 - 8);
      v14 -= 40;
    }
    while (v12 + v14 != v13);
    v9 += v14;
    v15 = *(int64x2_t *)a1;
    v11 = v19.i64[1];
    v10 = v20;
  }
  *a1 = v9;
  a1[1] = v11;
  v19 = v15;
  v16 = a1[2];
  a1[2] = (uint64_t)v10;
  v20 = (char *)v16;
  v18 = (char *)v15.i64[0];
  sub_19C033124((uint64_t)&v18);
  return v11;
}

uint64_t sub_19C033124(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      v5 = *(void **)(v2 - 32);
      if (v5 && *(_BYTE *)(v2 - 34) == 1)
      {
        free(v5);
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C03318C(const void *a1, uint64_t a2)
{
  unsigned __int16 *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  int v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  void *v41;
  char v42;
  int v43;
  __int16 v44;
  char v45;
  void *v46;
  _BYTE v47[16];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int16 *)(a2 + 104);
  v5 = (const void *)sub_19BF86B60((uint64_t)a1, (unsigned __int16 *)(a2 + 104));
  sub_19BFF769C(v5, " : f=%.0f", v6, v7, v8, v9, v10, v11, *(_QWORD *)(a2 + 88));
  v18 = *(_DWORD *)(a2 + 36);
  if (v18)
  {
    v43 = 0x100000;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47[0] = 0;
    if ((v18 & 1) != 0)
      sub_19BFF6A20((unsigned __int16 *)&v43, 0x74u);
    if ((v18 & 2) != 0)
      sub_19BFF6A20((unsigned __int16 *)&v43, 0x6Fu);
    if ((v18 & 0x20) != 0)
      sub_19BFF6A20((unsigned __int16 *)&v43, 0x6Cu);
    if ((v18 & 0x40) != 0)
      sub_19BFF6A20((unsigned __int16 *)&v43, 0x70u);
    if ((_WORD)v43)
    {
      v19 = v47;
      if (v46)
        LOBYTE(v19) = (_BYTE)v46;
      sub_19BFF769C(a1, " : r=%s", v12, v13, v14, v15, v16, v17, (char)v19);
    }
    v20 = *(_DWORD *)(a2 + 36);
    LODWORD(v40) = 0x100000;
    WORD2(v40) = 0;
    BYTE6(v40) = 0;
    v41 = 0;
    v42 = 0;
    if ((v20 & 0x1000000) != 0)
      sub_19BFF6A20((unsigned __int16 *)&v40, 0x6Fu);
    if ((v20 & 0x800000) != 0)
      sub_19BFF6A20((unsigned __int16 *)&v40, 0x76u);
    if ((v20 & 0x2000000) != 0)
      sub_19BFF6A20((unsigned __int16 *)&v40, 0x73u);
    v21 = v41;
    if ((_WORD)v40)
    {
      v22 = &v42;
      if (v41)
        LOBYTE(v22) = (_BYTE)v41;
      sub_19BFF769C(a1, " : ovs=%s", v12, v13, v14, v15, v16, v17, (char)v22);
      v21 = v41;
    }
    if (v21 && BYTE6(v40) == 1)
      free(v21);
    if (v46 && v45 == 1)
      free(v46);
  }
  if (*(_DWORD *)(a2 + 40))
    sub_19BFF769C(a1, " : c=%#x", v12, v13, v14, v15, v16, v17, *(_DWORD *)(a2 + 40));
  if (*(_WORD *)a2 && !sub_19BFF7920((unsigned __int16 *)a2, v4))
  {
    v23 = *(_QWORD *)(a2 + 8);
    if (!v23)
      LOBYTE(v23) = a2 + 16;
    sub_19BFF769C(a1, " : s=%s", v12, v13, v14, v15, v16, v17, v23);
  }
  if (*(_QWORD *)(a2 + 256) != *(_QWORD *)(a2 + 264))
  {
    LODWORD(v40) = 0x100000;
    WORD2(v40) = 0;
    BYTE6(v40) = 1;
    v41 = 0;
    sub_19BF8CA04(&v40, (uint64_t)",", 0, 1u);
    sub_19C020F3C((unsigned __int16 *)&v43, *(_QWORD *)(a2 + 256), *(_QWORD *)(a2 + 264), (uint64_t)&v40);
    LOBYTE(v30) = (_BYTE)v46;
    if (!v46)
      v30 = v47;
    sub_19BFF769C(a1, " : pre=%s", v24, v25, v26, v27, v28, v29, (char)v30);
    if (v46 && v45 == 1)
      free(v46);
    if (v41 && BYTE6(v40) == 1)
      free(v41);
  }
  if ((*(_BYTE *)(a2 + 59) & 0x10) != 0)
    sub_19BFF769C(a1, " : needs_prefix", v12, v13, v14, v15, v16, v17, v39);
  if (*(_QWORD *)(a2 + 280) != *(_QWORD *)(a2 + 288))
  {
    LODWORD(v40) = 0x100000;
    WORD2(v40) = 0;
    BYTE6(v40) = 1;
    v41 = 0;
    sub_19BF8CA04(&v40, (uint64_t)",", 0, 1u);
    sub_19C020F3C((unsigned __int16 *)&v43, *(_QWORD *)(a2 + 280), *(_QWORD *)(a2 + 288), (uint64_t)&v40);
    LOBYTE(v37) = (_BYTE)v46;
    if (!v46)
      v37 = v47;
    sub_19BFF769C(a1, " : post=%s", v31, v32, v33, v34, v35, v36, (char)v37);
    if (v46 && v45 == 1)
      free(v46);
    if (v41 && BYTE6(v40) == 1)
      free(v41);
  }
  if ((*(_BYTE *)(a2 + 59) & 0x20) != 0)
    sub_19BFF769C(a1, " : needs_suffix", v12, v13, v14, v15, v16, v17, v39);
  v38 = *(_DWORD *)(a2 + 76);
  if ((_WORD)v38)
  {
    sub_19BFF769C(a1, " : head_pos=%d", v12, v13, v14, v15, v16, v17, *(_DWORD *)(a2 + 76));
    v38 = *(_DWORD *)(a2 + 76);
  }
  if (v38 >= 0x10000)
    sub_19BFF769C(a1, " : tail_pos=%d", v12, v13, v14, v15, v16, v17, SBYTE2(v38));
}

void sub_19C033558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  uint64_t v19;
  void *v21;

  if (a13 && a12 == 1)
    free(a13);
  if (a19 && a18 == 1)
    free(a19);
  v21 = *(void **)(v19 + 8);
  if (v21)
  {
    if (*(_BYTE *)(v19 + 6) == 1)
      free(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C033608(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned __int16 *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _BYTE v34[6];
  char v35;
  void *v36;
  _QWORD v37[3];

  v37[2] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 0x100000;
  a1[2] = 0;
  *((_BYTE *)a1 + 6) = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_BYTE *)a1 + 16) = 0;
  v11 = (unsigned __int16 *)(a2 + 136);
  v10 = *(unsigned __int16 *)(a2 + 136);
  if (v10 <= 0xE)
    v12 = (char *)(a2 + 138);
  else
    v12 = *(char **)(a2 + 144);
  sub_19C02114C((uint64_t)v34, v12, v10, a4, a5, a6, a7, a8);
  LOBYTE(v19) = (_BYTE)v36;
  if (!v36)
    v19 = v37;
  sub_19BFF769C(a1, "<Word: k=0x%s> ", v13, v14, v15, v16, v17, v18, (char)v19);
  if (v36 && v35 == 1)
    free(v36);
  sub_19C03318C(v34, a2);
  sub_19BFF7414(a1, (uint64_t)v34);
  if (v36 && v35 == 1)
    free(v36);
  v20 = *(unsigned __int16 *)(a2 + 152);
  if (*(_WORD *)(a2 + 152) && !sub_19BFED000((unsigned __int16 *)(a2 + 152), v11))
  {
    if (v20 <= 0xE)
      v26 = (char *)(a2 + 154);
    else
      v26 = *(char **)(a2 + 160);
    sub_19C02114C((uint64_t)v34, v26, v20, v21, v22, v23, v24, v25);
    LOBYTE(v33) = (_BYTE)v36;
    if (!v36)
      v33 = v37;
    sub_19BFF769C(a1, " (s=0x%s)", v27, v28, v29, v30, v31, v32, (char)v33);
    if (v36)
    {
      if (v35 == 1)
        free(v36);
    }
  }
}

void sub_19C033780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *a13)
{
  uint64_t v13;
  void *v15;

  if (a13 && a12 == 1)
    free(a13);
  v15 = *(void **)(v13 + 8);
  if (v15)
  {
    if (*(_BYTE *)(v13 + 6) == 1)
      free(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0337D4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D14818;
  sub_19BFE64C4(*(_QWORD **)(a1 + 48));
  sub_19BFE64C4(*(_QWORD **)(a1 + 24));
  return a1;
}

void sub_19C033810(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D14818;
  sub_19BFE64C4(*(_QWORD **)(a1 + 48));
  sub_19BFE64C4(*(_QWORD **)(a1 + 24));
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C03385C(uint64_t a1)
{
  uint64_t **v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (uint64_t **)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_DWORD *)(v3 + 28);
    v5 = (*(_DWORD *)(v3 + 32) + 1);
    *(_DWORD *)(v3 + 32) = v5;
    if (v5 >= v4)
    {
      sub_19C033F08(v2, (uint64_t *)v3);
      operator delete((void *)v3);
    }
  }
  else
  {
    if (qword_1EE417860 != -1)
      dispatch_once(&qword_1EE417860, &unk_1E3D17D40);
    v6 = qword_1EE417858;
    if (os_log_type_enabled((os_log_t)qword_1EE417858, OS_LOG_TYPE_INFO))
    {
      v7 = *(_DWORD *)(a1 + 8);
      v8 = *(_DWORD *)(a1 + 12);
      v10[0] = 67109376;
      v10[1] = v7;
      v11 = 1024;
      v12 = v8;
      _os_log_impl(&dword_19BF85000, v6, OS_LOG_TYPE_INFO, "exhausted tokenID range: (%d, %d]", (uint8_t *)v10, 0xEu);
    }
    return 0;
  }
  return v5;
}

uint64_t sub_19C033970(uint64_t a1, unsigned int a2)
{
  if (!a2 || *(_DWORD *)(a1 + 12) < a2)
    return 0;
  if (*(_DWORD *)(a1 + 8) >= a2)
    return sub_19C033D40(a1 + 40, a2);
  return sub_19C033C28((uint64_t **)(a1 + 16), a2);
}

uint64_t sub_19C0339A4(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 8) >= a2)
    return sub_19C033C28((uint64_t **)(a1 + 40), a2);
  else
    return sub_19C033D40(a1 + 16, a2);
}

void sub_19C0339C0(_QWORD *a1)
{
  int32x2_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int32 v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t **v12;
  unsigned __int32 v13;
  _QWORD *v14;
  uint64_t **v15;
  unsigned int *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *i;
  _QWORD *v26;
  _QWORD *v27;
  __int32 v28;
  _QWORD v29[2];

  v29[1] = *MEMORY[0x1E0C80C00];
  v2 = (int32x2_t)a1[1];
  v29[0] = vrev64_s32(v2);
  v3 = (uint64_t **)(a1 + 2);
  if (!a1[4])
  {
LABEL_16:
    v15 = (uint64_t **)(a1 + 3);
    v16 = (unsigned int *)v29;
    do
    {
      v17 = *v15;
      v18 = (uint64_t **)(a1 + 3);
      v19 = (uint64_t **)(a1 + 3);
      if (*v15)
      {
        v20 = *v16;
        while (1)
        {
          while (1)
          {
            v19 = (uint64_t **)v17;
            v21 = *((_DWORD *)v17 + 7);
            if (v20 >= v21)
              break;
            v17 = *v19;
            v18 = v19;
            if (!*v19)
              goto LABEL_25;
          }
          if (v21 >= v20)
            break;
          v17 = v19[1];
          if (!v17)
          {
            v18 = v19 + 1;
            goto LABEL_25;
          }
        }
      }
      else
      {
LABEL_25:
        v22 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v22 + 28) = *(_QWORD *)v16;
        sub_19BFA9684(v3, (uint64_t)v19, v18, v22);
      }
      v23 = v16 == (unsigned int *)v29;
      v16 += 2;
    }
    while (!v23);
    goto LABEL_36;
  }
  v5 = (uint64_t **)(a1 + 3);
  v4 = a1[3];
  v6 = a1[2];
  a1[2] = a1 + 3;
  *(_QWORD *)(v4 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  if (*(_QWORD *)(v6 + 8))
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = v6;
  if (!v7)
  {
    sub_19BFE64C4(0);
    goto LABEL_16;
  }
  v28 = v2.i32[0];
  v8 = v2.u32[1];
  v9 = sub_19C033BD4(v7);
  v10 = v9;
  v11 = *v5;
  v12 = (uint64_t **)(a1 + 3);
  if (*v5)
  {
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v11;
        v13 = *((_DWORD *)v11 + 7);
        if (v8 >= v13)
          break;
        v11 = *v12;
        v5 = v12;
        if (!*v12)
          goto LABEL_13;
      }
      if (v13 >= v8)
        break;
      v11 = v12[1];
      if (!v11)
      {
        v5 = v12 + 1;
        goto LABEL_13;
      }
    }
    v14 = v9;
    v10 = (_QWORD *)v7;
  }
  else
  {
LABEL_13:
    *(_DWORD *)(v7 + 28) = v8;
    *(_DWORD *)(v7 + 32) = v28;
    sub_19BFA9684(v3, (uint64_t)v12, v5, (uint64_t *)v7);
    if (!v10)
    {
      v24 = 0;
LABEL_35:
      sub_19BFE64C4(v24);
      goto LABEL_36;
    }
    v14 = sub_19C033BD4((uint64_t)v10);
  }
  sub_19BFE64C4(v10);
  if (v14)
  {
    for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)i[2])
      v14 = i;
    v24 = v14;
    goto LABEL_35;
  }
LABEL_36:
  v27 = (_QWORD *)a1[6];
  v26 = a1 + 6;
  sub_19BFE64C4(v27);
  *(v26 - 1) = v26;
  *v26 = 0;
  v26[1] = 0;
}

uint64_t sub_19C033BCC()
{
  return 0;
}

_QWORD *sub_19C033BD4(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_19C033C28(uint64_t **a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t **v3;
  uint64_t **v6;
  unsigned int v7;
  BOOL v8;
  uint64_t **v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;

  v3 = a1 + 1;
  v2 = a1[1];
  if (!v2)
    return 0;
  v6 = a1 + 1;
  do
  {
    v7 = *((_DWORD *)v2 + 7);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t **)v2;
    else
      v9 = (uint64_t **)(v2 + 1);
    if (v8)
      v6 = (uint64_t **)v2;
    v2 = *v9;
  }
  while (*v9);
  if (v6 == v3)
    return 0;
  v10 = *((_DWORD *)v6 + 8);
  if (v10 >= a2)
    return 0;
  *((_DWORD *)v6 + 8) = a2;
  if (*((_DWORD *)v6 + 7) <= a2)
  {
    sub_19C033F08(a1, (uint64_t *)v6);
    operator delete(v6);
  }
  v11 = a2 - 1;
  if (v10 < a2 - 1)
  {
    v12 = *v3;
    v13 = (uint64_t)v3;
    if (*v3)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t)v12;
          v14 = *((_DWORD *)v12 + 7);
          if (v11 >= v14)
            break;
          v12 = *(uint64_t **)v13;
          v3 = (uint64_t **)v13;
          if (!*(_QWORD *)v13)
            goto LABEL_22;
        }
        if (v14 >= v11)
          break;
        v12 = *(uint64_t **)(v13 + 8);
        if (!v12)
        {
          v3 = (uint64_t **)(v13 + 8);
          goto LABEL_22;
        }
      }
    }
    else
    {
LABEL_22:
      v15 = (uint64_t *)operator new(0x28uLL);
      *((_DWORD *)v15 + 7) = v11;
      *((_DWORD *)v15 + 8) = 0;
      sub_19BFA9684(a1, v13, v3, v15);
      v13 = (uint64_t)v15;
    }
    *(_DWORD *)(v13 + 32) = v10;
  }
  return 1;
}

uint64_t sub_19C033D40(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_14;
  v6 = (uint64_t *)(a1 + 8);
  do
  {
    v7 = *(_DWORD *)(v5 + 28);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (v8)
      v6 = (uint64_t *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == v4)
  {
    v4 = v6;
LABEL_14:
    LODWORD(v16) = a2;
    HIDWORD(v16) = a2 - 1;
    goto LABEL_15;
  }
  v10 = *((_DWORD *)v6 + 8);
  if (v10 < a2)
    return 0;
  if (v10 == a2)
  {
    *((_DWORD *)v6 + 8) = a2 - 1;
    goto LABEL_16;
  }
  LODWORD(v16) = a2;
  HIDWORD(v16) = a2 - 1;
  v4 = v6;
LABEL_15:
  v6 = sub_19C033E90((uint64_t **)a1, v4, a2, &v16);
LABEL_16:
  if (v6 != *(uint64_t **)a1)
  {
    v12 = *v6;
    if (*v6)
    {
      do
      {
        v13 = v12;
        v12 = *(_QWORD *)(v12 + 8);
      }
      while (v12);
    }
    else
    {
      v14 = v6;
      do
      {
        v13 = v14[2];
        v15 = *(_QWORD *)v13 == (_QWORD)v14;
        v14 = (uint64_t *)v13;
      }
      while (v15);
    }
    if ((uint64_t *)v13 == v6)
      __assert_rtn("insert", "LXRangedTokenIDGenerator.cpp", 52, "left_iter != iter");
    if (*(_DWORD *)(v13 + 28) == a2 - 1)
    {
      *((_DWORD *)v6 + 8) = *(_DWORD *)(v13 + 32);
      sub_19C033F08((uint64_t **)a1, (uint64_t *)v13);
      operator delete((void *)v13);
    }
  }
  return 1;
}

uint64_t *sub_19C033E90(uint64_t **a1, uint64_t *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_19C033F5C(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_19BFA9684(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_19C033F08(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return sub_19BFB1B28(v6, a2);
}

uint64_t *sub_19C033F5C(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int a5)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *((_DWORD *)a2 + 7), v6 > a5))
  {
    v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      v8 = (uint64_t *)*a2;
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v12 = a2;
      do
      {
        v9 = (uint64_t *)v12[2];
        v13 = *v9 == (_QWORD)v12;
        v12 = v9;
      }
      while (v13);
    }
    if (*((_DWORD *)v9 + 7) < a5)
      goto LABEL_17;
    v14 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v15 = (uint64_t *)v14;
          v16 = *(_DWORD *)(v14 + 28);
          if (v16 <= a5)
            break;
          v14 = *v15;
          v5 = v15;
          if (!*v15)
            goto LABEL_43;
        }
        if (v16 >= a5)
          break;
        v5 = v15 + 1;
        v14 = v15[1];
      }
      while (v14);
      goto LABEL_43;
    }
LABEL_42:
    v15 = a1 + 1;
LABEL_43:
    *a3 = v15;
    return v5;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v10 = a2[1];
  if (v10)
  {
    v11 = (uint64_t *)a2[1];
    do
    {
      a4 = v11;
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    v17 = a2;
    do
    {
      a4 = (uint64_t *)v17[2];
      v13 = *a4 == (_QWORD)v17;
      v17 = a4;
    }
    while (!v13);
  }
  if (a4 != v5 && *((_DWORD *)a4 + 7) <= a5)
  {
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v15 = (uint64_t *)v18;
          v19 = *(_DWORD *)(v18 + 28);
          if (v19 <= a5)
            break;
          v18 = *v15;
          v5 = v15;
          if (!*v15)
            goto LABEL_43;
        }
        if (v19 >= a5)
          break;
        v5 = v15 + 1;
        v18 = v15[1];
      }
      while (v18);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v10)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

os_log_t sub_19C0340E4()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "RangedTokenIDGenerator");
  qword_1EE417858 = (uint64_t)result;
  return result;
}

_QWORD *sub_19C034110(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t *v11;

  v4 = HIDWORD(a2);
  *a1 = &off_1E3D14818;
  a1[1] = a2;
  a1[3] = 0;
  a1[2] = a1 + 3;
  v5 = (uint64_t **)(a1 + 2);
  a1[4] = 0;
  v6 = sub_19C033F5C(a1 + 2, a1 + 3, &v11, &v10, HIDWORD(a2));
  if (!*v6)
  {
    v7 = (uint64_t **)v6;
    v8 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v8 + 28) = v4 | (a2 << 32);
    sub_19BFA9684(v5, (uint64_t)v11, v7, v8);
  }
  a1[7] = 0;
  a1[6] = 0;
  a1[5] = a1 + 6;
  return a1;
}

void sub_19C0341C8(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_19BFE64C4(*v1);
  _Unwind_Resume(a1);
}

void sub_19C0341E0(uint64_t a1)
{
  sub_19BF86D24(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19C034208(uint64_t a1)
{
  sub_19BF8DA50(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19C034230(uint64_t a1)
{
  sub_19BF86D24(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

void sub_19C034258(uint64_t a1)
{
  sub_19BF8DA50(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C03427C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 __dst;
  unint64_t v15;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = (void *)(*a1 + v6);
  if (v5)
    v8 = strnlen((const char *)(*a1 + v6), v5 - v6);
  else
    v8 = strlen((const char *)(*a1 + v6));
  v9 = v8;
  v10 = v8 + v6 + 1;
  if (v10 > v5)
    return 0;
  a1[2] = v10;
  if (!v4)
    return 0;
  sub_19BFA4428(&__dst, v7, v8);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = __dst;
  v11 = v15;
  *(_QWORD *)(a2 + 16) = v15;
  v12 = HIBYTE(v11);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 8);
  if (v12 != v9)
    __assert_rtn("read_null_terminated_string", "TIDataFile.cpp", 336, "result.size() == len");
  return 1;
}

uint64_t sub_19C034378(uint64_t *a1, int *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = a1[1];
  v2 = a1[2];
  v4 = v2 + 3;
  if (v3)
    v5 = v4 > v3;
  else
    v5 = 0;
  if (v5)
    return 0;
  v6 = *a1;
  a1[2] = v4;
  if (!v6)
    return 0;
  *a2 = (*(unsigned __int8 *)(v6 + v2) << 16) | (*(unsigned __int8 *)(v6 + v2 + 1) << 8) | *(unsigned __int8 *)(v6 + v2 + 2);
  return 1;
}

uint64_t sub_19C0343C8(uint64_t *a1, _DWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  int v8;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 + 1;
  if (v2)
    v5 = v4 > v2;
  else
    v5 = 0;
  if (!v5)
  {
    v6 = *a1;
    a1[2] = v4;
    if (v6)
    {
      v7 = *(char *)(v6 + v3);
      v8 = *(unsigned __int8 *)(v6 + v3);
      *a2 = v8;
      if ((v7 & 0x80000000) == 0)
        return 1;
      v10 = (v8 & 0x7F) << 8;
      *a2 = v10;
      v11 = v3 + 2;
      if (!v2 || v11 <= v2)
      {
        a1[2] = v11;
        v12 = v10 | *(unsigned __int8 *)(v6 + v4);
        *a2 = v12;
        if ((v8 & 0x40) == 0)
          return 1;
        v13 = (v12 & 0x3FFF) << 16;
        *a2 = v13;
        v14 = v3 + 4;
        if (!v2 || v14 <= v2)
        {
          a1[2] = v14;
          *a2 = v13 | (bswap32(*(unsigned __int16 *)(v6 + v11)) >> 16);
          return 1;
        }
      }
    }
  }
  return 0;
}

_QWORD *sub_19C034464(_QWORD *a1, char *a2)
{
  void *__p[2];
  char v5;

  sub_19BF8E43C(__p, a2);
  sub_19BF86E34((uint64_t)a1, (__int128 *)__p, 1573, 384);
  if (v5 < 0)
    operator delete(__p[0]);
  *a1 = &off_1E3D144F8;
  return a1;
}

void sub_19C0344C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ssize_t sub_19C0344E0(ssize_t result, uint64_t a2, uint64_t a3)
{
  ssize_t v5;
  int v6;

  if (*(_BYTE *)(result + 24))
  {
    v5 = result;
    v6 = 0;
    while (1)
    {
      result = write(*(_DWORD *)(v5 + 32), (const void *)(a2 + v6), a3 - v6);
      if (!result)
        break;
      v6 += result;
      if (result < 0)
      {
        *(_BYTE *)(v5 + 24) = 0;
        return result;
      }
    }
  }
  return result;
}

ssize_t sub_19C03453C(ssize_t a1, char *__s)
{
  size_t v4;
  char v6;

  v4 = strlen(__s);
  sub_19C0344E0(a1, (uint64_t)__s, v4);
  v6 = 0;
  return sub_19C0344E0(a1, (uint64_t)&v6, 1);
}

ssize_t sub_19C034590(ssize_t a1, unsigned int a2)
{
  ssize_t v3;
  int *v4;
  uint64_t v5;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  __int16 v12;
  int v13;

  v3 = a1;
  if (a2 <= 0x7E)
  {
    v7 = a2;
    v4 = (int *)&v7;
LABEL_5:
    a1 = v3;
    v5 = 1;
    return sub_19C0344E0(a1, (uint64_t)v4, v5);
  }
  if (a2 <= 0x3FFE)
  {
    v8 = BYTE1(a2) | 0x80;
    sub_19C0344E0(a1, (uint64_t)&v8, 1);
    v9 = a2;
    v4 = (int *)&v9;
    goto LABEL_5;
  }
  if (a2 > 0x3FFFFFFE)
  {
    v13 = -1;
    v4 = &v13;
    v5 = 4;
  }
  else
  {
    v10 = HIBYTE(a2) | 0xC0;
    sub_19C0344E0(a1, (uint64_t)&v10, 1);
    v11 = BYTE2(a2);
    sub_19C0344E0(v3, (uint64_t)&v11, 1);
    v12 = bswap32(a2) >> 16;
    v4 = (int *)&v12;
    a1 = v3;
    v5 = 2;
  }
  return sub_19C0344E0(a1, (uint64_t)v4, v5);
}

off_t sub_19C03467C(int a1)
{
  off_t result;

  result = lseek(a1, 0, 1);
  if (result == -1)
    __assert_rtn("tell", "TIDataFile.cpp", 548, "result != -1");
  return result;
}

off_t sub_19C0346C0(int a1, off_t a2)
{
  off_t result;

  result = lseek(a1, a2, 0);
  if (result == -1)
    __assert_rtn("seek", "TIDataFile.cpp", 556, "false");
  return result;
}

off_t sub_19C034700(int a1)
{
  off_t result;

  result = lseek(a1, 0, 2);
  if (result == -1)
    __assert_rtn("seek_to_end", "TIDataFile.cpp", 565, "false");
  return result;
}

void sub_19C034744()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EE417888);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EE417888))
    {
      qword_1EE417870 = 0;
      qword_1EE417878 = 0;
      qword_1EE417880 = 0;
      __cxa_guard_release(&qword_1EE417888);
    }
  }
}

uint64_t sub_19C034794(uint64_t a1, char a2, unsigned int **a3)
{
  unsigned int *v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v23;
  unint64_t v24;
  _BYTE v25[24];
  uint64_t v26;

  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 34) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = -1;
  v5 = *a3;
  if (*a3)
  {
    v6 = (_QWORD *)(a1 + 72);
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 + 1, v5));
    if (v7 <= 0)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    v8 = *(_QWORD *)(a1 + 88);
    v9 = *(_QWORD *)(a1 + 80);
    if (v9 >= v8)
    {
      v11 = (uint64_t)(v9 - *v6) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_19BF8EB40();
      v12 = v8 - *v6;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v26 = a1 + 88;
      if (v14)
        v14 = (unint64_t)sub_19BFAC524(v14);
      else
        v15 = 0;
      v24 = v14;
      *(_QWORD *)v25 = v14 + 8 * v11;
      *(_QWORD *)&v25[8] = *(_QWORD *)v25;
      *(_QWORD *)&v25[16] = v14 + 8 * v15;
      **(_QWORD **)v25 = v5;
      do
        v16 = __ldaxr(v5);
      while (__stlxr(v16 + 1, v5));
      if (v16 < 1)
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      *(_QWORD *)&v25[8] += 8;
      v17 = sub_19C034AFC(a1 + 88, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 72), *(uint64_t *)v25, *(uint64_t *)v25);
      v18 = *(_QWORD *)(a1 + 88);
      v19 = *(_OWORD *)&v25[8];
      v23 = *(_QWORD *)&v25[8];
      v20 = *(_OWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v17;
      *(_OWORD *)v25 = v20;
      *(_OWORD *)(a1 + 80) = v19;
      *(_QWORD *)&v25[16] = v18;
      v24 = v20;
      sub_19C034AAC((uint64_t)&v24);
      v10 = v23;
    }
    else
    {
      sub_19C034A38(a1 + 72, v5);
      v10 = v9 + 8;
    }
    *(_QWORD *)(a1 + 80) = v10;
    sub_19BFBF4E8((uint64_t)v5);
  }
  if (*(unsigned __int16 *)(a1 + 48) >= 0xFu)
  {
    v21 = *(_QWORD *)(a1 + 56);
    if (v21)
      MEMORY[0x1A1AD0CB8](v21, 0x1000C8077774924);
  }
  *(_WORD *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 50) = a2;
  ++dword_1EE417868;
  return a1;
}

void sub_19C0349BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a3);
  sub_19BFBF4E8(v4);
  sub_19BFBF5A4((void ***)va);
  if (*(unsigned __int16 *)(v3 + 48) >= 0xFu)
  {
    v6 = *(_QWORD *)(v3 + 56);
    if (v6)
      MEMORY[0x1A1AD0CB8](v6, 0x1000C8077774924);
  }
  v7 = *(_QWORD *)(v3 + 32);
  if (v7)
    sub_19BFBF44C((unsigned int *)(v7 + 24));
  sub_19BFBF5A4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C034A38(uint64_t result, unsigned int *a2)
{
  unsigned int **v2;
  int v3;

  v2 = *(unsigned int ***)(result + 8);
  *v2 = a2;
  if (a2)
  {
    do
      v3 = __ldaxr(a2);
    while (__stlxr(v3 + 1, a2));
    if (v3 <= 0)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  *(_QWORD *)(result + 8) = v2 + 1;
  return result;
}

void sub_19C034AA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19C034AAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3 == v2)
      break;
    v4 = *(_QWORD *)(v3 - 8);
    *(_QWORD *)(a1 + 16) = v3 - 8;
    if (v4)
      sub_19BFBF4E8(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C034AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  while (a3 != a5)
  {
    v9 = *(unsigned int **)(a3 - 8);
    a3 -= 8;
    v8 = v9;
    *(_QWORD *)(v7 - 8) = v9;
    if (v9)
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
      if (v10 < 1)
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      v7 = *((_QWORD *)&v15 + 1);
    }
    v7 -= 8;
    *((_QWORD *)&v15 + 1) = v7;
  }
  v13 = 1;
  sub_19C034BC8((uint64_t)v12);
  return v7;
}

void sub_19C034BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C034BC8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C034BC8(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*v3)
        sub_19BFBF4E8(*v3);
      ++v3;
    }
  }
  return a1;
}

uint64_t sub_19C034C20(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v6 = *(_QWORD *)(v3 - 8);
      v3 -= 8;
      v5 = v6;
      if (v6)
        sub_19BFBF4E8(v5);
    }
  }
  return a1;
}

uint64_t sub_19C034C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  int v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  NSObject *v33;
  void **v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int **v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int64x2_t v71;
  const char *v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  NSObject *v79;
  void **v80;
  const char *v81;
  uint64_t v82;
  unsigned int *v83;
  int v84;
  uint64_t v85;
  int v86;
  char *v87;
  int v88;
  unsigned int **v89;
  unsigned int **v90;
  unsigned int *v91;
  int v92;
  __int128 v93;
  char *v94;
  char *v95;
  unsigned int *v97;
  uint64_t v98;
  unsigned int **v99;
  _BYTE buf[24];
  char *v101;
  uint64_t v102;
  unsigned int *v103;
  void *v104[2];
  char *v105;
  uint64_t v106;
  uint64_t v107;

  v8 = a3;
  v10 = a1;
  v107 = *MEMORY[0x1E0C80C00];
  *(double *)(a1 + 40) = *(double *)(a2 + 88) + *(double *)(a1 + 40);
  v11 = (a3 - 1);
  v12 = *(_QWORD *)(a2 + 200);
  if (*(_QWORD *)(a2 + 208) - v12 <= v11)
  {
    v14 = (unsigned int *)(a1 + 96);
    v15 = *(_DWORD *)(a1 + 96);
    goto LABEL_5;
  }
  v13 = *(unsigned __int8 *)(v12 + v11);
  v14 = (unsigned int *)(a1 + 96);
  v15 = *(_DWORD *)(a1 + 96);
  if (v15 <= v13)
LABEL_5:
    v13 = v15;
  *v14 = v13;
  v16 = *(unsigned __int16 *)(a2 + 136);
  if (v16 <= a3)
  {
    if (!(_DWORD)a3)
      return a1;
    if (*(_QWORD *)(a1 + 32))
    {
      v27 = *(_QWORD *)(a2 + 232);
      if (!v27)
        goto LABEL_30;
      v28 = (unsigned int *)(v27 + 24);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
      if (v29 <= 0)
        goto LABEL_136;
      v30 = *(_QWORD *)(v10 + 32);
      sub_19BFBF44C(v28);
      if (v30 != v27)
      {
LABEL_30:
        v31 = atomic_load(byte_1EE414EA8);
        if ((v31 & 1) != 0)
        {
          v32 = atomic_load(byte_1EE417890);
          if ((v32 & 1) != 0)
          {
            sub_19C033608(&v103, a2, a3, a4, a5, a6, a7, a8);
            v72 = (const char *)v104[0];
            if (!v104[0])
              v72 = (const char *)&v104[1];
            printf("WARNING! Changing surface form list for trie node on recursive insertion of: %s", v72);
            if (v104[0] && BYTE6(v103) == 1)
              free(v104[0]);
            putchar(10);
          }
          else
          {
            v33 = sub_19BFD3F34();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              sub_19C033608(&v103, a2, a3, a4, a5, a6, a7, a8);
              v34 = (void **)v104[0];
              if (!v104[0])
                v34 = &v104[1];
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v34;
              _os_log_impl(&dword_19BF85000, v33, OS_LOG_TYPE_DEFAULT, "WARNING! Changing surface form list for trie node on recursive insertion of: %s", buf, 0xCu);
              if (v104[0] && BYTE6(v103) == 1)
                free(v104[0]);
            }
          }
        }
        v73 = **(_QWORD **)(v10 + 32);
        if (*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) != v73)
        {
          v74 = 0;
          v75 = 1;
          do
          {
            v76 = *(_QWORD *)(v73 + 8 * v74);
            v77 = atomic_load(byte_1EE414EA8);
            if ((v77 & 1) != 0)
            {
              v78 = atomic_load(byte_1EE417890);
              if ((v78 & 1) != 0)
              {
                sub_19C033608(&v103, v76, a3, a4, a5, a6, a7, a8);
                v81 = (const char *)v104[0];
                if (!v104[0])
                  v81 = (const char *)&v104[1];
                printf("\tExisting form: %s", v81);
                if (v104[0] && BYTE6(v103) == 1)
                  free(v104[0]);
                putchar(10);
              }
              else
              {
                v79 = sub_19BFD3F34();
                if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                {
                  sub_19C033608(&v103, v76, a3, a4, a5, a6, a7, a8);
                  v80 = (void **)v104[0];
                  if (!v104[0])
                    v80 = &v104[1];
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v80;
                  _os_log_impl(&dword_19BF85000, v79, OS_LOG_TYPE_DEFAULT, "\tExisting form: %s", buf, 0xCu);
                  if (v104[0] && BYTE6(v103) == 1)
                    free(v104[0]);
                }
              }
            }
            v74 = v75;
            v73 = **(_QWORD **)(v10 + 32);
            ++v75;
          }
          while (v74 < (*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) - v73) >> 3);
        }
      }
    }
    v82 = *(_QWORD *)(a2 + 232);
    if (v82)
    {
      v83 = (unsigned int *)(v82 + 24);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 + 1, v83));
      if (v84 <= 0)
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    }
    v85 = *(_QWORD *)(v10 + 32);
    *(_QWORD *)(v10 + 32) = v82;
    if (v85)
      sub_19BFBF44C((unsigned int *)(v85 + 24));
    do
      v86 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v86 + 1, (unsigned int *)v10));
    if (v86 <= 0)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    sub_19C0355BC(a2, (unsigned int *)v10);
    v53 = v10;
LABEL_134:
    sub_19BFBF4E8(v10);
    return v53;
  }
  if (v16 <= 0xE)
    v17 = a2 + 138;
  else
    v17 = *(_QWORD *)(a2 + 144);
  v18 = *(unsigned __int8 *)(v17 + a3);
  v19 = (uint64_t *)(a1 + 8);
  v20 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  if ((int)v20 >= 1)
  {
    v21 = 0xFFFFFFFFLL;
    while (1)
    {
      v22 = (v21 + v20) >> 1;
      v23 = *(_QWORD *)(*v19 + 8 * v22);
      if (v23)
      {
        do
          v24 = __ldaxr((unsigned int *)v23);
        while (__stlxr(v24 + 1, (unsigned int *)v23));
        if (v24 <= 0)
          goto LABEL_136;
      }
      if (*(unsigned __int16 *)(v23 + 48) < 0xFu)
        v25 = (unsigned __int8 *)(v23 + 50);
      else
        v25 = *(unsigned __int8 **)(v23 + 56);
      v26 = *v25;
      if (v26 <= v18)
      {
        if (v26 >= v18)
        {
          v10 = v23;
          goto LABEL_133;
        }
      }
      else
      {
        LODWORD(v20) = (v21 + v20) >> 1;
        v22 = v21;
      }
      sub_19BFBF4E8(v23);
      v21 = v22;
      if ((int)v20 - (int)v22 <= 1)
        goto LABEL_39;
    }
  }
  LODWORD(v22) = -1;
LABEL_39:
  if ((int)v20 >= (int)v22 + 1)
    v35 = (v22 + 1);
  else
    v35 = v20;
  do
    v36 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v36 + 1, (unsigned int *)v10));
  if (v36 <= 0)
LABEL_136:
    __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  v37 = operator new();
  v38 = (unsigned int *)v37;
  v103 = (unsigned int *)v10;
  do
    v39 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v39 + 1, (unsigned int *)v10));
  if (v39 <= 0)
    __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  sub_19C034794(v37, v18, &v103);
  if (v103)
    sub_19BFBF4E8((uint64_t)v103);
  v97 = v38;
  sub_19BFBF4E8(v10);
  v40 = *(_QWORD *)(v10 + 24);
  v41 = *(_QWORD *)(v10 + 8);
  v42 = *(_QWORD *)(v10 + 16);
  v43 = (unsigned int **)(v41 + 8 * v35);
  if (v42 >= v40)
  {
    v49 = ((uint64_t)(v42 - v41) >> 3) + 1;
    if (v49 >> 61)
      sub_19BF8EB40();
    v50 = v40 - v41;
    if (v50 >> 2 > v49)
      v49 = v50 >> 2;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v102 = v10 + 24;
    if (v51)
      v51 = (unint64_t)sub_19BFAC524(v51);
    else
      v52 = 0;
    v54 = (unsigned int **)(v51 + 8 * v35);
    *(_QWORD *)buf = v51;
    *(_QWORD *)&buf[8] = v54;
    *(_QWORD *)&buf[16] = v54;
    v101 = (char *)(v51 + 8 * v52);
    if (v52 == v35)
    {
      if ((_DWORD)v35)
      {
        v54 = (unsigned int **)((char *)v54 - ((4 * v35 + 4) & 0x7FFFFFFF8));
        *(_QWORD *)&buf[8] = v54;
        *(_QWORD *)&buf[16] = v54;
      }
      else
      {
        v106 = v10 + 24;
        v62 = (char *)sub_19BFAC524(1uLL);
        v64 = *(uint64_t **)&buf[8];
        v65 = *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8];
        if (*(_QWORD *)&buf[16] == *(_QWORD *)&buf[8])
        {
          v71 = vdupq_n_s64(*(unint64_t *)&buf[8]);
          v67 = v62;
        }
        else
        {
          v66 = v65 >> 3;
          v67 = &v62[v65 & 0xFFFFFFFFFFFFFFF8];
          v68 = 8 * v66;
          v69 = v62;
          do
          {
            v70 = *v64;
            *v64++ = 0;
            *(_QWORD *)v69 = v70;
            v69 += 8;
            v68 -= 8;
          }
          while (v68);
          v71 = *(int64x2_t *)&buf[8];
        }
        v87 = v101;
        v103 = *(unsigned int **)buf;
        *(_QWORD *)buf = v62;
        *(_QWORD *)&buf[8] = v62;
        *(int64x2_t *)v104 = v71;
        *(_QWORD *)&buf[16] = v67;
        v101 = &v62[8 * v63];
        v105 = v87;
        sub_19C034AAC((uint64_t)&v103);
        v54 = *(unsigned int ***)&buf[16];
      }
    }
    *v54 = v38;
    do
      v88 = __ldaxr(v38);
    while (__stlxr(v88 + 1, v38));
    if (v88 < 1)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    *(_QWORD *)&buf[16] += 8;
    *(_QWORD *)&buf[8] = sub_19C034AFC(v10 + 24, (uint64_t)v43, (uint64_t)v43, *v19, *v19, *(uint64_t *)&buf[8], *(uint64_t *)&buf[8]);
    v89 = *(unsigned int ***)(v10 + 16);
    v90 = *(unsigned int ***)&buf[16];
    v98 = *(_QWORD *)&buf[16];
    v99 = *(unsigned int ***)&buf[16];
    v103 = (unsigned int *)(v10 + 24);
    v104[0] = &v98;
    v104[1] = &v99;
    LOBYTE(v105) = 0;
    while (v43 != v89)
    {
      v91 = *v43;
      *v90 = *v43;
      if (v91)
      {
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 + 1, v91));
        if (v92 < 1)
          __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
        v90 = v99;
      }
      ++v43;
      v99 = ++v90;
    }
    LOBYTE(v105) = 1;
    sub_19C034C20((uint64_t)&v103);
    v93 = *(_OWORD *)(v10 + 8);
    v94 = v101;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)&buf[8];
    *(_QWORD *)(v10 + 16) = v90;
    *(_OWORD *)&buf[8] = v93;
    v95 = *(char **)(v10 + 24);
    *(_QWORD *)(v10 + 24) = v94;
    v101 = v95;
    *(_QWORD *)buf = v93;
    sub_19C034AAC((uint64_t)buf);
  }
  else if (v43 == (unsigned int **)v42)
  {
    sub_19C034A38(v10 + 8, v38);
  }
  else
  {
    v44 = v43 + 1;
    v45 = (uint64_t *)(v42 - 8);
    if (v42 < 8)
    {
      v47 = *(_QWORD **)(v10 + 16);
    }
    else
    {
      v46 = (uint64_t *)(v42 - 8);
      v47 = *(_QWORD **)(v10 + 16);
      do
      {
        v48 = *v46;
        *v46++ = 0;
        *v47++ = v48;
      }
      while ((unint64_t)v46 < v42);
    }
    *(_QWORD *)(v10 + 16) = v47;
    if ((_QWORD *)v42 != v44)
    {
      v55 = 8 * ((uint64_t)(v42 - (_QWORD)v44) >> 3);
      v56 = v41 + 8 * v35 - 8;
      do
      {
        v57 = *(_QWORD *)(v56 + v55);
        *(_QWORD *)(v56 + v55) = 0;
        v58 = *v45;
        *v45 = v57;
        if (v58)
          sub_19BFBF4E8(v58);
        --v45;
        v55 -= 8;
      }
      while (v55);
    }
    v59 = v97;
    if (v43 > &v97)
      v59 = v38;
    if (v59)
    {
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 + 1, v59));
      if (v60 <= 0)
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    }
    v61 = (uint64_t)*v43;
    *v43 = v59;
    if (v61)
      sub_19BFBF4E8(v61);
  }
  v10 = (uint64_t)v97;
LABEL_133:
  v53 = sub_19C034C74(v10, a2, (v8 + 1));
  if (v10)
    goto LABEL_134;
  return v53;
}

void sub_19C03552C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFBF4E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0355BC(uint64_t result, unsigned int *a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    do
      v2 = __ldaxr(a2);
    while (__stlxr(v2 + 1, a2));
    if (v2 <= 0)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
  }
  v3 = *(_QWORD *)(result + 224);
  *(_QWORD *)(result + 224) = a2;
  if (v3)
    return sub_19BFBF4E8(v3);
  return result;
}

void sub_19C035620()
{
  sub_19BFADD28("vector");
}

uint64_t sub_19C035634(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  int v5;
  char *v6;
  char v7;
  size_t v8;
  void *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  unsigned int **v14;
  unsigned int **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int **v24;
  uint64_t v25;
  unsigned int **v26;
  unint64_t v27;
  unsigned int **v28;
  uint64_t *v29;
  uint64_t *i;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t j;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t k;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;

  v3 = result;
  v4 = *(_QWORD **)(result + 32);
  if (v4)
    LODWORD(v4) = ((v4[1] - *v4) & 0x7FFFFFFF8) != 0;
  if (v4 + ((*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 3) <= 1)
  {
    do
      v5 = __ldaxr((unsigned int *)result);
    while (__stlxr(v5 + 1, (unsigned int *)result));
    if (v5 <= 0)
      __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
    if (*(unsigned __int16 *)(result + 48) < 0xFu)
      v6 = (char *)(result + 50);
    else
      v6 = *(char **)(result + 56);
    v8 = *(unsigned __int16 *)(a2 + 48);
    if (v8 <= 0xE)
      v9 = (void *)(a2 + 50);
    else
      v9 = *(void **)(a2 + 56);
    v10 = (unsigned __int16 *)(a2 + 48);
    v7 = *v6;
    *(_BYTE *)sub_19BF8BC44((uint64_t)&v53, v8 + 1, v9, v8) = v7;
    if (*(unsigned __int16 *)(a2 + 48) >= 0xFu)
    {
      v11 = *(_QWORD *)(a2 + 56);
      if (v11)
        MEMORY[0x1A1AD0CB8](v11, 0x1000C8077774924);
    }
    *(_OWORD *)v10 = v53;
    if (a2 == v3)
      goto LABEL_40;
    v13 = (void **)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 8);
    v15 = *(unsigned int ***)(v3 + 8);
    v14 = *(unsigned int ***)(v3 + 16);
    v16 = v14 - v15;
    v17 = *(_QWORD *)(a2 + 24);
    if (v16 <= (v17 - v12) >> 3)
    {
      v27 = (*(_QWORD *)(a2 + 16) - v12) >> 3;
      if (v27 >= v16)
      {
        v29 = sub_19C035A64(*(unsigned int ***)(v3 + 8), *(unsigned int ***)(v3 + 16), *(uint64_t **)(a2 + 8));
        for (i = *(uint64_t **)(a2 + 16); i != v29; --i)
        {
          v32 = *(i - 1);
          v31 = v32;
          if (v32)
            sub_19BFBF4E8(v31);
        }
        *(_QWORD *)(a2 + 16) = v29;
        goto LABEL_40;
      }
      v28 = &v15[v27];
      sub_19C035A64(*(unsigned int ***)(v3 + 8), v28, *(uint64_t **)(a2 + 8));
      v26 = sub_19C035AFC(a2 + 24, v28, v14, *(unsigned int ***)(a2 + 16));
    }
    else
    {
      if (v12)
      {
        v18 = *(_QWORD *)(a2 + 16);
        v19 = *(void **)(a2 + 8);
        if (v18 != v12)
        {
          do
          {
            v21 = *(_QWORD *)(v18 - 8);
            v18 -= 8;
            v20 = v21;
            if (v21)
              sub_19BFBF4E8(v20);
          }
          while (v18 != v12);
          v19 = *v13;
        }
        *(_QWORD *)(a2 + 16) = v12;
        operator delete(v19);
        v17 = 0;
        *v13 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        v10 = (unsigned __int16 *)(a2 + 48);
      }
      if ((char *)v14 - (char *)v15 < 0)
        goto LABEL_70;
      v22 = v17 >> 2;
      if (v17 >> 2 <= v16)
        v22 = v14 - v15;
      v23 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v22;
      if (v23 >> 61)
LABEL_70:
        sub_19BF8EB40();
      v24 = (unsigned int **)sub_19BFAC524(v23);
      *(_QWORD *)(a2 + 8) = v24;
      *(_QWORD *)(a2 + 16) = v24;
      *(_QWORD *)(a2 + 24) = &v24[v25];
      v26 = sub_19C035AFC(a2 + 24, v15, v14, v24);
    }
    *(_QWORD *)(a2 + 16) = v26;
LABEL_40:
    v33 = *(uint64_t **)(v3 + 8);
    if (((*(_QWORD *)(v3 + 16) - (_QWORD)v33) & 0x7FFFFFFF8) == 8)
    {
      v34 = *v33;
      do
        v35 = __ldaxr((unsigned int *)a2);
      while (__stlxr(v35 + 1, (unsigned int *)a2));
      if (v35 <= 0)
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      v36 = *(uint64_t **)(v34 + 72);
      v37 = *v36;
      *v36 = a2;
      if (v37)
        sub_19BFBF4E8(v37);
      v38 = *(_QWORD *)(v3 + 8);
      for (j = *(_QWORD *)(v3 + 16); j != v38; j -= 8)
      {
        v41 = *(_QWORD *)(j - 8);
        v40 = v41;
        if (v41)
          sub_19BFBF4E8(v40);
      }
      *(_QWORD *)(v3 + 16) = v38;
      if (*v10 <= 3u)
        sub_19C035634(v34, a2);
    }
    else
    {
      v42 = *(uint64_t **)(v3 + 32);
      if (v42)
      {
        v43 = *v42;
        if (v42[1] != *v42)
        {
          v44 = 0;
          v45 = 0;
          do
          {
            v46 = *(_QWORD *)(v43 + 8 * v44);
            do
              v47 = __ldaxr((unsigned int *)a2);
            while (__stlxr(v47 + 1, (unsigned int *)a2));
            if (v47 <= 0)
              __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
            sub_19C0355BC(v46, (unsigned int *)a2);
            sub_19BFBF4E8(a2);
            v42 = *(uint64_t **)(v3 + 32);
            v43 = *v42;
            v44 = ++v45;
          }
          while (v45 < (unint64_t)((v42[1] - *v42) >> 3));
        }
        *(_QWORD *)(v3 + 32) = 0;
        v48 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 32) = v42;
        if (v48)
          sub_19BFBF44C((unsigned int *)(v48 + 24));
      }
    }
    v49 = *(_QWORD *)(v3 + 72);
    for (k = *(_QWORD *)(v3 + 80); k != v49; k -= 8)
    {
      v52 = *(_QWORD *)(k - 8);
      v51 = v52;
      if (v52)
        sub_19BFBF4E8(v51);
    }
    *(_QWORD *)(v3 + 80) = v49;
    return sub_19BFBF4E8(v3);
  }
  return result;
}

void sub_19C035A14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = v3;
  sub_19BFBF4E8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C035A64(unsigned int **a1, unsigned int **a2, uint64_t *a3)
{
  unsigned int **v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      if (*v5)
      {
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        if (v7 <= 0)
          __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      }
      v8 = *a3;
      *a3 = (uint64_t)v6;
      if (v8)
        sub_19BFBF4E8(v8);
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

unsigned int **sub_19C035AFC(uint64_t a1, unsigned int **a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int **v4;
  unsigned int *v5;
  int v6;
  _QWORD v8[3];
  char v9;
  unsigned int **v10;
  unsigned int **v11;

  v4 = a4;
  v11 = a4;
  v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  while (a2 != a3)
  {
    v5 = *a2;
    *v4 = *a2;
    if (v5)
    {
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      if (v6 < 1)
        __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
      v4 = v11;
    }
    ++a2;
    v11 = ++v4;
  }
  v9 = 1;
  sub_19C034C20((uint64_t)v8);
  return v4;
}

void sub_19C035BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C034C20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C035BC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  void *v23;
  uint64_t i;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  if (((v1 - v2) & 0x7FFFFFFF8) == 0)
    return 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_QWORD *)(v2 + 8 * v4);
    if (*(_WORD *)(v6 + 48))
    {
      v7 = *(_DWORD *)(v6 + 96);
      v9 = v7 != -1 && v7 <= *(_DWORD *)(a1 + 96);
      v10 = *(uint64_t **)(v6 + 8);
      if (((*(_QWORD *)(v6 + 16) - (_QWORD)v10) & 0x7FFFFFFF8) == 8)
      {
        v11 = *(_QWORD **)(v6 + 32);
        if (v11)
          v11 = (_QWORD *)((v11[1] - *v11) >> 3);
        if ((_DWORD)v11)
          v9 = 1;
        if (!v9)
        {
          sub_19C035634(*v10, v6);
          v12 = *(unsigned __int16 *)(v6 + 48);
          sub_19C034744();
          v13 = v12 + 1;
          if (v12 + 1 > (unint64_t)((qword_1EE417878 - qword_1EE417870) >> 2))
          {
            sub_19C034744();
            v14 = (_DWORD *)qword_1EE417878;
            v15 = (qword_1EE417878 - qword_1EE417870) >> 2;
            if (v13 <= v15)
            {
              if (v13 < v15)
                qword_1EE417878 = qword_1EE417870 + 4 * v13;
            }
            else if (v13 - v15 <= (qword_1EE417880 - qword_1EE417878) >> 2)
            {
              v26 = qword_1EE417878 + 4 * (v13 - v15);
              v27 = 4 * v12 - 4 * v15 + 4;
              do
              {
                *v14++ = 0;
                v27 -= 4;
              }
              while (v27);
              qword_1EE417878 = v26;
            }
            else
            {
              v16 = (qword_1EE417880 - qword_1EE417870) >> 1;
              if (v16 <= v13)
                v16 = v12 + 1;
              if ((unint64_t)(qword_1EE417880 - qword_1EE417870) >= 0x7FFFFFFFFFFFFFFCLL)
                v17 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v17 = v16;
              v18 = sub_19BFB3588(v17);
              v20 = (uint64_t)v18 + 4 * v15;
              v21 = 4 * v12 - 4 * v15 + 4;
              v22 = (_DWORD *)v20;
              do
              {
                *v22++ = 0;
                v21 -= 4;
              }
              while (v21);
              v23 = (void *)qword_1EE417870;
              for (i = qword_1EE417878; (void *)i != v23; i -= 4)
              {
                v25 = *(_DWORD *)(i - 4);
                *(_DWORD *)(v20 - 4) = v25;
                v20 -= 4;
              }
              qword_1EE417870 = v20;
              qword_1EE417878 = (uint64_t)v18 + 4 * v13;
              qword_1EE417880 = (uint64_t)v18 + 4 * v19;
              if (v23)
                operator delete(v23);
            }
          }
          LODWORD(v5) = v5 + v12 - 1;
          sub_19C034744();
          ++*(_DWORD *)(qword_1EE417870 + 4 * v12);
        }
      }
      v5 = sub_19C035BC8(v6) + v5;
      v2 = *(_QWORD *)(a1 + 8);
      v1 = *(_QWORD *)(a1 + 16);
    }
    ++v4;
  }
  while (v4 < ((unint64_t)(v1 - v2) >> 3));
  return v5;
}

uint64_t sub_19C035DD4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (((v1 - v2) & 0x7FFFFFFF8) != 0)
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      if (*(_WORD *)(v5 + 48))
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (((*(_QWORD *)(v5 + 16) - v6) & 0x7FFFFFFF8) != 0 && (v7 = *(_DWORD *)(*(_QWORD *)v6 + 64)) != 0)
        {
          v8 = v7 - *(_DWORD *)(v5 + 64);
          if (v8 > 0xFF)
          {
            if (v8 == (__int16)v8)
              *(_DWORD *)(v5 + 68) = 2;
            else
              *(_DWORD *)(v5 + 68) = 3;
          }
          else
          {
            *(_DWORD *)(v5 + 68) = 1;
          }
        }
        else
        {
          *(_DWORD *)(v5 + 68) = 0;
        }
        result = sub_19C035DD4(v5);
        *(_DWORD *)(v5 + 64) = 0;
        v2 = *(_QWORD *)(v3 + 8);
        v1 = *(_QWORD *)(v3 + 16);
      }
      ++v4;
    }
    while (v4 < ((unint64_t)(v1 - v2) >> 3));
  }
  dword_1EE41786C = 0;
  return result;
}

uint64_t sub_19C035EAC(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  int v12;
  char v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char **v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  char v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unsigned int *v32;
  int v33;
  _BOOL4 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  char v41;
  unsigned int v42;
  int v43;
  int v44;
  unint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  double v49;
  int v50;
  unsigned int v51;
  char v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned __int8 v63;
  unsigned __int8 v64;
  NSObject *v65;
  uint64_t v66;
  uint8_t buf[4];
  int v70;
  __int16 v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v7 = a1[1];
  v8 = (_QWORD *)a1[4];
  if (v8)
    v8 = (_QWORD *)((v8[1] - *v8) >> 3);
  v9 = a1[2] - v7;
  if ((v9 & 0x7FFFFFFF8) != 0)
  {
    v10 = 0;
    v11 = v8 + (v9 >> 3) > 1;
    if (a3)
      v12 = 4;
    else
      v12 = 3;
    v13 = a4 ^ 1;
    v14 = &unk_1EE417000;
    while (1)
    {
      v15 = *(_QWORD *)(v7 + 8 * v10);
      v16 = *(unsigned __int16 *)(v15 + 48);
      if (!*(_WORD *)(v15 + 48))
        goto LABEL_59;
      ++v14[539];
      *(_DWORD *)(v15 + 64) = a2;
      v17 = a2 + v16 + 1;
      v18 = (*(_QWORD *)(v15 + 16) - *(_QWORD *)(v15 + 8)) & 0x7FFFFFFF8;
      if (v18)
      {
        v19 = *(_DWORD *)(v15 + 68);
        v20 = v17 + 2;
        if (v19 == 1)
          ++v17;
        else
          v17 += 3;
        if (v19 == 2)
          v17 = v20;
      }
      v21 = v17 + v11;
      v22 = *(char ***)(v15 + 32);
      if (!v22)
      {
        v34 = 0;
        LODWORD(v35) = 0;
        v37 = *(_QWORD *)(v15 + 8);
        v36 = *(_QWORD *)(v15 + 16);
        goto LABEL_39;
      }
      v23 = v22[1];
      v24 = v23 - *v22;
      if (v23 != *v22)
      {
        v25 = 0;
        v26 = 0;
        v27 = v24 >> 3;
        do
        {
          if ((v26 - 1) >= *(_DWORD *)(*(_QWORD *)&(*v22)[8 * v25] + 248))
            v26 = *(_DWORD *)(*(_QWORD *)&(*v22)[8 * v25] + 248);
          ++v25;
        }
        while (v27 > v25);
        if (v26)
        {
          a2 = (v21 + v12);
          goto LABEL_59;
        }
      }
      v28 = 0;
      if (v18)
      {
        v29 = *v22;
        v30 = *(char **)(*(_QWORD *)(v15 + 32) + 8);
        if (((v30 - v29) & 0x7FFFFFFF8) == 8)
        {
          if (v30 == v29)
            sub_19C035620();
          v31 = *(_QWORD *)v29;
          if (v31)
          {
            v32 = (unsigned int *)(v31 + 84);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 + 1, v32));
            if (v33 <= 0)
              __assert_rtn("ref", "WTFRefCounted.h", 42, "old_count > 0");
          }
          if (*(_DWORD *)(v31 + 248) || *(_BYTE *)(v31 + 304))
          {
            v28 = 0;
LABEL_33:
            sub_19BFBF614((unsigned int *)(v31 + 84));
            v14 = (_DWORD *)&unk_1EE417000;
            goto LABEL_36;
          }
          v46 = *(double *)(v31 + 88);
          v47 = 0.0;
          if (v46 != 0.0)
          {
            v48 = *(_QWORD *)(v31 + 224);
            if (v48)
            {
              v49 = *(double *)(v48 + 40);
              goto LABEL_66;
            }
            v50 = *(_DWORD *)(v31 + 336);
            if (v50)
            {
              v49 = (double)v50;
LABEL_66:
              v47 = v46 / v49;
            }
            else
            {
              v47 = 1.0;
            }
          }
          v51 = (sqrt(v47) * 255.0);
          if (v51 >= 0xFF)
            v52 = -1;
          else
            v52 = v51;
          if (v51)
            v53 = 1;
          else
            v53 = v47 <= 0.0;
          if (v53)
            v28 = v52;
          else
            v28 = 1;
          goto LABEL_33;
        }
        v28 = 0;
      }
LABEL_36:
      v22 = *(char ***)(v15 + 32);
      v34 = v28 != 0;
      v37 = *(_QWORD *)(v15 + 8);
      v36 = *(_QWORD *)(v15 + 16);
      if (v22)
        v35 = (unint64_t)(v22[1] - *v22) >> 3;
      else
        LODWORD(v35) = 0;
LABEL_39:
      v38 = (unint64_t)(v36 - v37) >> 3;
      if ((_DWORD)v35 + (_DWORD)v38)
        v39 = v34;
      else
        v39 = 1;
      a2 = (v21 + v39);
      if (!v34)
      {
        if (v18)
          v40 = 1;
        else
          v40 = (_DWORD)v35 == -(int)v38;
        if (v40)
          v41 = 1;
        else
          v41 = v13;
        if ((v41 & 1) != 0)
          goto LABEL_59;
LABEL_52:
        v42 = *(_DWORD *)(*(_QWORD *)*v22 + 60);
        if (v42 >= 0x3FFF)
          v43 = 4;
        else
          v43 = 2;
        if (v42 < 0x7F)
          v44 = 1;
        else
          v44 = v43;
        a2 = (v44 + a2);
        goto LABEL_59;
      }
      if ((_DWORD)a4)
        goto LABEL_52;
LABEL_59:
      ++v10;
      v7 = a1[1];
      v45 = a1[2] - v7;
      if (v10 >= (v45 >> 3))
      {
        if ((v45 & 0x7FFFFFFF8) != 0)
        {
          v54 = 0;
          do
          {
            v55 = *(_QWORD *)(v7 + 8 * v54);
            if (*(_WORD *)(v55 + 48))
            {
              v56 = *(_QWORD *)(v55 + 8);
              v57 = *(_QWORD *)(v55 + 16) - v56;
              v58 = v57 >> 3;
              if ((v57 >> 3))
              {
                v59 = 0;
                v60 = 0;
                v61 = (v57 >> 3);
                do
                {
                  if (*(_WORD *)(*(_QWORD *)v56 + 48))
                  {
                    if (*(_DWORD *)(*(_QWORD *)v56 + 64))
                      ++v59;
                    else
                      ++v60;
                  }
                  v56 += 8;
                  --v61;
                }
                while (v61);
              }
              else
              {
                v60 = 0;
                v59 = 0;
              }
              if (v59 != (_DWORD)v58 && v60 != (_DWORD)v58)
              {
                v63 = atomic_load(byte_1EE414EA8);
                if ((v63 & 1) != 0)
                {
                  v64 = atomic_load(byte_1EE417890);
                  if ((v64 & 1) != 0)
                  {
                    printf("YIKES:  %d grandchildren already have trie offsets but %d don't!", v59, v60);
                    putchar(10);
                  }
                  else
                  {
                    v65 = sub_19BFD3F34();
                    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 67109376;
                      v70 = v59;
                      v71 = 1024;
                      v72 = v60;
                      _os_log_impl(&dword_19BF85000, v65, OS_LOG_TYPE_DEFAULT, "YIKES:  %d grandchildren already have trie offsets but %d don't!", buf, 0xEu);
                    }
                  }
                }
              }
              if (*(_WORD *)(v55 + 48))
              {
                v66 = *(_QWORD *)(v55 + 8);
                if (((*(_QWORD *)(v55 + 16) - v66) & 0x7FFFFFFF8) == 0 || !*(_DWORD *)(*(_QWORD *)v66 + 64))
                  a2 = sub_19C035EAC(v55, a2, a3, a4);
              }
            }
            ++v54;
            v7 = a1[1];
          }
          while (v54 < ((unint64_t)(a1[2] - v7) >> 3));
        }
        return a2;
      }
    }
  }
  return a2;
}

uint64_t LXTransliterationCreate(const void *a1)
{
  const __CFAllocator *v2;
  uint64_t Instance;
  const __CFLocale *v4;
  __CFDictionary *MutableCopy;
  const __CFString *v6;
  uint64_t *v7;
  char *v8;
  void *__p[2];
  char v11;
  _BYTE v12[8];
  void *v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (qword_1EE4178A8 != -1)
    dispatch_once(&qword_1EE4178A8, &unk_1E3D17D80);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = &off_1E3D117D0;
  *(_QWORD *)(Instance + 24) = 0;
  *(_QWORD *)(Instance + 40) = 0;
  *(_QWORD *)(Instance + 32) = 0;
  sub_19BFBA050((const void **)(Instance + 32), a1);
  v4 = (const __CFLocale *)sub_19BF8723C(*(const __CFDictionary **)(Instance + 32));
  MutableCopy = CFDictionaryCreateMutableCopy(v2, 0, *(CFDictionaryRef *)(Instance + 32));
  CFDictionaryAddValue(MutableCopy, CFSTR("type"), CFSTR("unified_transliteration"));
  v6 = (const __CFString *)sub_19BFEA39C(MutableCopy, v4);
  sub_19BF8C4B0((uint64_t)v12, v6);
  v7 = (uint64_t *)operator new();
  if (v13)
    v8 = (char *)v13;
  else
    v8 = (char *)v14;
  sub_19BF8E43C(__p, v8);
  sub_19C039AFC(v7, (uint64_t)__p, 0);
  sub_19C03068C((uint64_t **)(Instance + 40), v7);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 && v12[6] == 1)
    free(v13);
  if (v6)
    CFRelease(v6);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v4)
    CFRelease(v4);
  return Instance;
}

void sub_19C036534(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19C03655C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, void *a18)
{
  uint64_t v18;
  CFErrorRef *v19;
  const void *v20;
  const void *v21;
  uint64_t v22;

  if (a2)
  {
    if (a14 < 0)
      operator delete(__p);
    MEMORY[0x1A1AD0CDC](v22, 0x10F0C40DD53230DLL);
    if (a18 && a17 == 1)
      free(a18);
    if (v21)
      CFRelease(v21);
    if (v20)
      CFRelease(v20);
    __cxa_begin_catch(a1);
    if (v19)
      *v19 = sub_19BFEA6B4(CFSTR("error while loading transliteration Dictionary"));
    __cxa_end_catch();
    if (!v18)
      JUMPOUT(0x19C0364D0);
    JUMPOUT(0x19C0364C8);
  }
  JUMPOUT(0x19C03654CLL);
}

void sub_19C036630()
{
  const void *v0;

  __cxa_end_catch();
  if (v0)
    CFRelease(v0);
  JUMPOUT(0x19C03654CLL);
}

uint64_t sub_19C036658()
{
  uint64_t result;

  qword_1EE4178B0 = 0;
  *(_QWORD *)algn_1EE4178B8 = "LXTransliteration";
  qword_1EE4178C0 = 0;
  unk_1EE4178C8 = 0;
  qword_1EE4178D0 = (uint64_t)sub_19C0366A4;
  unk_1EE4178D8 = 0u;
  unk_1EE4178E8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1EE417910 = result;
  return result;
}

uint64_t sub_19C0366A4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 16))(a1 + 16);
}

CFStringRef LXTransliterationCopyNativeForTransliterated(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  char *v4;
  const char *v5;
  CFStringRef v6;
  void *__p[2];
  char v9;
  int64x2_t v10;
  _BYTE v11[8];
  void *v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  sub_19BF8C4B0((uint64_t)v11, a2);
  v3 = *(_QWORD *)(a1 + 40);
  if (v12)
    v4 = (char *)v12;
  else
    v4 = (char *)v13;
  sub_19BF8E43C(__p, v4);
  sub_19C03A0B0(&v10, v3);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v10.i64[0] == v10.i64[1])
  {
    v6 = 0;
  }
  else
  {
    v5 = (const char *)(v10.i64[0] + 24);
    if (*(char *)(v10.i64[0] + 47) < 0)
      v5 = *(const char **)v5;
    v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, 0x8000100u);
  }
  __p[0] = &v10;
  sub_19C030784((void ***)__p);
  if (v12 && v11[6] == 1)
    free(v12);
  return v6;
}

void sub_19C0367B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,void *a22)
{
  __p = &a16;
  sub_19C030784((void ***)&__p);
  if (a22)
  {
    if (a21 == 1)
      free(a22);
  }
  _Unwind_Resume(a1);
}

void LXTransliterationEnumerateForTransliterated(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t i;
  uint64_t v8;
  const char *v9;
  const char *v10;
  const void *Instance;
  int v12;
  void *__p[2];
  char v14;
  int64x2_t v15;
  _BYTE v16[8];
  void *v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  sub_19BF8C4B0((uint64_t)v16, a2);
  v5 = *(_QWORD *)(a1 + 40);
  if (v17)
    v6 = (char *)v17;
  else
    v6 = (char *)v18;
  sub_19BF8E43C(__p, v6);
  sub_19C03A0B0(&v15, v5);
  if (v14 < 0)
    operator delete(__p[0]);
  v8 = v15.i64[1];
  for (i = v15.i64[0]; i != v8; i += 96)
  {
    v9 = (const char *)i;
    if (*(char *)(i + 23) < 0)
      v9 = *(const char **)i;
    if (v17)
      v10 = (const char *)v17;
    else
      v10 = (const char *)v18;
    if (!strcmp(v10, v9))
    {
      if (qword_1EE4177E8 != -1)
        dispatch_once(&qword_1EE4177E8, &unk_1E3D17D00);
      Instance = (const void *)_CFRuntimeCreateInstance();
      sub_19C030848((uint64_t)Instance + 16, i);
      LOBYTE(__p[0]) = 0;
      (*(void (**)(uint64_t, const void *, void **))(a3 + 16))(a3, Instance, __p);
      v12 = LOBYTE(__p[0]);
      if (Instance)
        CFRelease(Instance);
      if (v12)
        break;
    }
  }
  __p[0] = &v15;
  sub_19C030784((void ***)__p);
  if (v17)
  {
    if (v16[6] == 1)
      free(v17);
  }
}

void sub_19C0369C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,void *a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22)
  {
    if (a21 == 1)
      free(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LXTransliterationHasNativeWord(uint64_t a1, const __CFString *a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  void *__p;
  char v9;
  uint64_t v10;
  char *v11;
  int v12;
  _BYTE v13[8];
  void *v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  sub_19BF8C4B0((uint64_t)v13, a2);
  v3 = *(_QWORD **)(a1 + 40);
  if (v14)
    v4 = (char *)v14;
  else
    v4 = (char *)v15;
  sub_19BF8E43C(&__p, v4);
  v12 = 0;
  (**(void (***)(uint64_t *__return_ptr))v3[185])(&v10);
  if ((unsigned __int16)v10 <= 0xEuLL)
    v5 = (char *)&v10 + 2;
  else
    v5 = v11;
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*v3 + 80))(*v3, v5);
  if ((unsigned __int16)v10 >= 0xFu && v11)
    MEMORY[0x1A1AD0CB8](v11, 0x1000C8077774924);
  if (v9 < 0)
    operator delete(__p);
  if (v14 && v13[6] == 1)
    free(v14);
  return v6;
}

void sub_19C036B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned __int16 a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,void *a22)
{
  if (a16 >= 0xFu && a17)
    MEMORY[0x1A1AD0CB8](a17, 0x1000C8077774924);
  if (a15 < 0)
    operator delete(__p);
  if (a22)
  {
    if (a21 == 1)
      free(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LXTransliterationCopyEntryForNative(uint64_t a1, const __CFString *a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  std::string *v14;
  std::string::size_type size;
  int v16;
  int v17;
  unsigned int v18;
  char *v19;
  __int128 v20;
  uint64_t Instance;
  void *v23[2];
  char v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  char v33;
  void *__p[2];
  char v35;
  void *v36[2];
  char v37;
  unsigned __int16 v38;
  uint64_t v39;
  std::string v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  int v44;
  _BYTE v45[8];
  void *v46;
  uint64_t v47;
  __int128 __dst;
  uint64_t v49;
  _BYTE v50[24];
  __int128 v51;
  _BYTE v52[24];
  int v53;
  int v54;
  __int16 v55;
  char v56;
  char *v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int16 v62;
  char v63[6];
  char v64;
  void *v65;
  float v66;
  int v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  sub_19BF8C4B0((uint64_t)v45, a2);
  v3 = *(_QWORD **)(a1 + 40);
  if (v46)
    v4 = (char *)v46;
  else
    v4 = (char *)&v47;
  sub_19BF8E43C(v23, v4);
  v44 = 0;
  (**(void (***)(uint64_t *__return_ptr))v3[185])(&v42);
  if ((unsigned __int16)v42 <= 0xEuLL)
    v5 = (char *)&v42 + 2;
  else
    v5 = v43;
  if (!(*(unsigned int (**)(_QWORD, char *))(*(_QWORD *)*v3 + 80))(*v3, v5))
  {
LABEL_20:
    LOBYTE(v25) = 0;
    v33 = 0;
    v13 = 1;
    goto LABEL_59;
  }
  v41 = 0;
  sub_19C039980((uint64_t)v63, (uint64_t)v3, *((_DWORD *)v3 + 4) + v44, (int *)&v41, (unsigned __int16 *)&v42);
  if (v41)
  {
    v6 = *((_DWORD *)v3 + 4);
    v7 = v41 - v6;
    if (v41 < v6)
      v7 = 0;
    v41 = v7;
  }
  v8 = v68;
  if (v68 == -1)
  {
    if (v65 && v64 == 1)
      free(v65);
    goto LABEL_20;
  }
  memset(&v40, 0, sizeof(v40));
  v9 = v3[1] + 8;
  *(_QWORD *)&__dst = v68 & 0x7FFFFF;
  sub_19C03A740(v9, (unint64_t *)&__dst, &v40);
  v10 = v3[1];
  if (*(_QWORD *)(v10 + 40) <= (*(_QWORD *)&v8 & 0x7FFFFFuLL))
  {
    v12 = 0;
  }
  else
  {
    v11 = sub_19BFFA264(v10 + 8, *(_QWORD *)&v8 & 0x7FFFFFLL) & 0xFFFFFF;
    if (v11 == 0xFFFFFF)
      v12 = 0;
    else
      v12 = v11;
  }
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v40;
  else
    v14 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  else
    size = v40.__r_.__value_.__l.__size_;
  sub_19BF8BC44((uint64_t)&v38, size, v14, size);
  v54 = 0x100000;
  v16 = HIBYTE(v8);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  *(_QWORD *)&v59 = 0;
  *(_QWORD *)((char *)&v59 + 5) = 0;
  v60 = 0uLL;
  *(_QWORD *)&v61 = 0xFFFFFFFFLL;
  BYTE8(v61) = 0;
  HIDWORD(v61) = 0;
  v62 = 0;
  do
  {
    v17 = v16;
    sub_19C039980((uint64_t)&__dst, (uint64_t)v3, *((_DWORD *)v3 + 5) + v12, (int *)&v41, &v38);
    if (v41)
    {
      v18 = *((_DWORD *)v3 + 5);
      if (v41 >= v18)
        v12 = v41 - v18;
      else
        v12 = 0;
      v41 = v12;
    }
    else
    {
      v12 = 0;
    }
    sub_19BF8A370((uint64_t)&v54, (unsigned __int16 *)&__dst);
    v59 = *(_OWORD *)&v50[8];
    v60 = v51;
    v61 = *(_OWORD *)v52;
    v62 = *(_WORD *)&v52[16];
    if (*((_QWORD *)&__dst + 1) && BYTE6(__dst) == 1)
      free(*((void **)&__dst + 1));
    if (!v12)
      break;
    v16 = v17 - 1;
  }
  while (v17);
  sub_19BF8E43C(v36, "");
  if (v57)
    v19 = v57;
  else
    v19 = &v58;
  sub_19BF8E43C(__p, v19);
  sub_19C03A920((char *)&__dst, (__int128 *)v36, (__int128 *)v23, (__int128 *)__p, v67, v66, 0.0);
  v26 = v49;
  v25 = __dst;
  __dst = 0uLL;
  v20 = *(_OWORD *)v50;
  v49 = 0;
  memset(v50, 0, sizeof(v50));
  v27 = v20;
  v28 = *(_QWORD *)&v50[16];
  v30 = *(_QWORD *)v52;
  v29 = v51;
  *(_QWORD *)v52 = 0;
  v51 = 0uLL;
  v32 = v53;
  v31 = *(_OWORD *)&v52[8];
  v33 = 1;
  if (v35 < 0)
    operator delete(__p[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v57 && v56 == 1)
    free(v57);
  if (v38 >= 0xFu && v39)
    MEMORY[0x1A1AD0CB8](v39, 0x1000C8077774924);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (v65 && v64 == 1)
    free(v65);
  v13 = 0;
LABEL_59:
  if ((unsigned __int16)v42 >= 0xFu && v43)
    MEMORY[0x1A1AD0CB8](v43, 0x1000C8077774924);
  if (v24 < 0)
  {
    operator delete(v23[0]);
    if ((v13 & 1) != 0)
      goto LABEL_64;
  }
  else if ((v13 & 1) != 0)
  {
LABEL_64:
    Instance = 0;
    goto LABEL_69;
  }
  if (qword_1EE4177E8 != -1)
    dispatch_once(&qword_1EE4177E8, &unk_1E3D17D00);
  Instance = _CFRuntimeCreateInstance();
  sub_19C030848(Instance + 16, (uint64_t)&v25);
LABEL_69:
  sub_19C03098C((uint64_t)&v25);
  if (v46 && v45[6] == 1)
    free(v46);
  return Instance;
}

void sub_19C0370A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,__int16 a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,unsigned __int16 a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,void *a57)
{
  uint64_t v57;
  void *v59;

  if (a49 < 0)
    operator delete(__p);
  v59 = *(void **)(v57 - 152);
  if (v59 && *(_BYTE *)(v57 - 154) == 1)
    free(v59);
  if (a51 >= 0xFu && a52)
    MEMORY[0x1A1AD0CB8](a52, 0x1000C8077774924);
  if (a15 < 0)
    operator delete(a10);
  if (a57)
  {
    if (a56 == 1)
      free(a57);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0371E4(const __CFDictionary *a1, const __CFLocale *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D10B88;
  v7 = v6;
  v2 = sub_19C0372B8(a1, a2);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_19C037280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0372B8(const __CFDictionary *a1, CFLocaleRef locale)
{
  const __CFBoolean *Value;
  const __CFBoolean *v4;
  CFTypeID v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  CFTypeRef cf;

  v8 = 0;
  v9 = &v8;
  v10 = 0x3002000000;
  v11 = sub_19C037424;
  v12 = sub_19C037434;
  cf = 0;
  if (locale)
  {
    if (CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B088]))
    {
      if (a1)
      {
        Value = (const __CFBoolean *)CFDictionaryGetValue(a1, CFSTR("enumerateCachedOnlyOTAPaths"));
        v4 = Value;
        if (Value)
        {
          v5 = CFGetTypeID(Value);
          if (v5 == CFBooleanGetTypeID())
            CFBooleanGetValue(v4);
        }
      }
    }
  }
  LDEnumerateAssetDataItems();
  v6 = v9[5];
  v9[5] = 0;
  _Block_object_dispose(&v8, 8);
  if (cf)
    CFRelease(cf);
  return v6;
}

void sub_19C037400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void **v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  sub_19BF8AD20(v7, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_19C037424(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void sub_19C037434(uint64_t a1)
{
  sub_19BF8AD20((const void **)(a1 + 40), 0);
}

void sub_19C037440(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v7;
  uint64_t v8;
  const void **v11;
  CFStringRef v12;
  uint64_t v13;
  const __CFURL *v14;

  v7 = *(_QWORD *)(a1 + 40);
  v13 = a5;
  v14 = a2;
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    sub_19BF94AC4();
  if ((*(unsigned int (**)(uint64_t, const __CFURL **, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v14, &v13))
  {
    v11 = (const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    v12 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
    sub_19BF8AD20(v11, v12);
    *a6 = 1;
  }
}

void sub_19C0374D0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C0374E4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D10B88;
  return result;
}

void sub_19C037508(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D10B88;
}

BOOL sub_19C037520(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  const __CFURL *v3;

  v3 = *a2;
  return CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E0D43860], 0) == kCFCompareEqualTo
      && sub_19BF8AC4C(v3, CFSTR("Unigrams"));
}

uint64_t sub_19C037574(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D107C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0375B0()
{
  return &unk_1E3D107C8;
}

void sub_19C0375C0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C0375D4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D10AD8;
  return result;
}

void sub_19C0375F8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D10AD8;
}

BOOL sub_19C037610(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  const __CFURL *v3;

  v3 = *a2;
  return CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E0D43860], 0) == kCFCompareEqualTo
      && sub_19BF8AC4C(v3, CFSTR("Phrases"));
}

uint64_t sub_19C037664(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D107A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0376A0()
{
  return &unk_1E3D107A8;
}

uint64_t sub_19C0376AC(const __CFDictionary *a1, const __CFLocale *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D10A80;
  v7 = v6;
  v2 = sub_19C0372B8(a1, a2);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_19C037748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C037784()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C037798()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D10A80;
  return result;
}

void sub_19C0377BC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D10A80;
}

BOOL sub_19C0377D4(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  const __CFURL *v3;

  v3 = *a2;
  return CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E0D43840], 0) == kCFCompareEqualTo
      && sub_19BF8AC4C(v3, CFSTR("Delta"));
}

uint64_t sub_19C037828(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D10798))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C037864()
{
  return &unk_1E3D10798;
}

CFStringRef sub_19C037870(const __CFDictionary *a1, const __CFLocale *a2)
{
  const __CFString *v2;
  _QWORD *v3;
  uint64_t v4;
  const __CFAllocator *v5;
  const __CFURL *v6;
  const __CFURL *v7;
  CFStringRef v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10[0] = &off_1E3D10B30;
  v11 = v10;
  v2 = (const __CFString *)sub_19C0372B8(a1, a2);
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (!v2)
    return 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, kCFURLPOSIXPathStyle, 1u);
  v10[0] = v6;
  v7 = CFURLCreateCopyAppendingPathComponent(v5, v6, CFSTR("morpheme.dat"), 0);
  v8 = CFURLCopyFileSystemPath(v7, kCFURLPOSIXPathStyle);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  CFRelease(v2);
  return v8;
}

void sub_19C037998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19C037A28()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C037A3C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D10B30;
  return result;
}

void sub_19C037A60(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D10B30;
}

BOOL sub_19C037A78(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  const __CFURL *v3;
  const __CFURL *v5;
  int IsReachable;
  CFErrorRef error;

  v3 = *a2;
  if (CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E0D43868], 0))
    return 0;
  v5 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, CFSTR("morpheme.dat"), 0);
  error = 0;
  IsReachable = CFURLResourceIsReachable(v5, &error);
  if (error)
    CFRelease(error);
  if (v5)
    CFRelease(v5);
  return IsReachable != 0;
}

void sub_19C037B18(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C037B34(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D107B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C037B70()
{
  return &unk_1E3D107B8;
}

void sub_19C037B80()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C037B94()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D10C38;
  return result;
}

void sub_19C037BB8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D10C38;
}

BOOL sub_19C037BD0(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  const __CFURL *v3;

  v3 = *a2;
  return CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E0D438A0], 0) == kCFCompareEqualTo
      && sub_19BF8AC4C(v3, CFSTR("UnifiedTransliteration"));
}

uint64_t sub_19C037C24(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D107E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C037C60()
{
  return &unk_1E3D107E8;
}

void sub_19C037C70()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C037C84()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D10A28;
  return result;
}

void sub_19C037CA8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D10A28;
}

BOOL sub_19C037CC0(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  const __CFURL *v3;

  v3 = *a2;
  return CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E0D43858], 0) == kCFCompareEqualTo
      && sub_19BF8AC4C(v3, CFSTR("Lemmatizer"));
}

uint64_t sub_19C037D14(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D10788))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C037D50()
{
  return &unk_1E3D10788;
}

void sub_19C037D60()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C037D74()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D10BE0;
  return result;
}

void sub_19C037D98(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D10BE0;
}

BOOL sub_19C037DB0(uint64_t a1, const __CFURL **a2, CFStringRef *a3)
{
  const __CFURL *v3;

  v3 = *a2;
  return CFStringCompare(*a3, (CFStringRef)*MEMORY[0x1E0D43860], 0) == kCFCompareEqualTo
      && sub_19BF8AC4C(v3, CFSTR("WordModeration"));
}

uint64_t sub_19C037E04(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D107D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C037E40()
{
  return &unk_1E3D107D8;
}

uint64_t sub_19C037E4C(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (_BYTE *)(a1 + 30142);
  *(_QWORD *)a1 = &off_1E3D10950;
  sub_19BFC08F4((const void **)(a1 + 30280), 0);
  sub_19BFE9ED8((_QWORD *)(a1 + 30264));
  *(_QWORD *)a1 = &off_1E3D13790;
  v3 = *(void **)(a1 + 30240);
  if (v3 && v2[96] == 1)
    free(v3);
  v4 = *(void **)(a1 + 30208);
  if (v4 && v2[64] == 1)
    free(v4);
  v5 = *(void **)(a1 + 30176);
  if (v5 && v2[32] == 1)
    free(v5);
  v6 = *(void **)(a1 + 30144);
  if (v6 && *v2 == 1)
    free(v6);
  sub_19BFC4F3C(a1 + 8);
  return a1;
}

void sub_19C037F10(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (_BYTE *)(a1 + 30142);
  *(_QWORD *)a1 = &off_1E3D10950;
  sub_19BFC08F4((const void **)(a1 + 30280), 0);
  sub_19BFE9ED8((_QWORD *)(a1 + 30264));
  *(_QWORD *)a1 = &off_1E3D13790;
  v3 = *(void **)(a1 + 30240);
  if (v3 && v2[96] == 1)
    free(v3);
  v4 = *(void **)(a1 + 30208);
  if (v4 && v2[64] == 1)
    free(v4);
  v5 = *(void **)(a1 + 30176);
  if (v5 && v2[32] == 1)
    free(v5);
  v6 = *(void **)(a1 + 30144);
  if (v6 && *v2 == 1)
    free(v6);
  sub_19BFC4F3C(a1 + 8);
  JUMPOUT(0x1A1AD0CDCLL);
}

const void *sub_19C037FE4(uint64_t a1)
{
  const void *v2;
  const void *v4;
  void *v5;
  unsigned __int16 v6[3];
  char v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  LODWORD(v4) = 0x100000;
  WORD2(v4) = 0;
  BYTE6(v4) = 1;
  v5 = 0;
  sub_19BF8CA04(&v4, (uint64_t)"WordModeration-", 0, 0xFu);
  sub_19BFF78D0((uint64_t)v6, (unsigned __int16 *)&v4, a1 + 30136);
  if (v5 && BYTE6(v4) == 1)
    free(v5);
  sub_19BF8CFAC((CFStringRef *)&v4, v6);
  v2 = v4;
  v4 = 0;
  sub_19BF8DAB8(&v4);
  if (v8 && v7 == 1)
    free(v8);
  return v2;
}

void sub_19C0380C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, void *a19)
{
  if (a19)
  {
    if (a18 == 1)
      free(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C038108()
{
  __assert_rtn("copy_root", "LXWordModerationLexiconImpl.cpp", 33, "false && \"Cursor isn't available for WordModerationLexicon\"");
}

uint64_t sub_19C038130(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  BOOL v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  _BYTE v15[6];
  char v16;
  void *v17;
  _BYTE v18[8];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_19BF8C4B0((uint64_t)v15, a2);
  sub_19BFE9F14((uint64_t)v18, a1 + 30264);
  if (v17)
    v5 = v16 == 1;
  else
    v5 = 0;
  if (v5)
    free(v17);
  sub_19BF8C4B0((uint64_t)&v13, a3);
  sub_19BFE9F14((uint64_t)v15, a1 + 30264);
  if (v14 && BYTE6(v13) == 1)
    free(v14);
  sub_19BF8CC94((uint64_t)&v13, a1 + 8);
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v13 + 24))(v13, v18, v15);
  v7 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v8 = (unint64_t *)((char *)v14 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v17)
    v10 = v16 == 1;
  else
    v10 = 0;
  if (v10)
    free(v17);
  if (v19 && v18[6] == 1)
    free(v19);
  v11 = -1;
  if (v6 >= 0)
    v11 = 1;
  if (v6)
    return v11;
  else
    return 0;
}

void sub_19C038298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  sub_19BFACCEC((uint64_t)&a10);
  if (a17 && BYTE6(a16) == 1)
    free(a17);
  if (a21)
  {
    if (BYTE6(a20) == 1)
      free(a21);
  }
  _Unwind_Resume(a1);
}

void sub_19C038324(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const void *v12;
  _QWORD v13[6];
  _QWORD v14[7];
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[5];
  CFTypeRef cf;
  _BYTE v19[8];
  void *v20;
  _BYTE v21[8];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  sub_19BF8C4B0((uint64_t)v21, a2);
  sub_19BFE9F14((uint64_t)v19, a1 + 30264);
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3002000000;
  v17[3] = sub_19C038608;
  v17[4] = sub_19C038618;
  cf = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  v5 = (_QWORD *)sub_19BFEB334(a1);
  v16 = v5;
  v6 = (*(uint64_t (**)(_QWORD *, _BYTE *))(v5[2] + 16))(v5 + 2, v19);
  v7 = (const void *)v6;
  v15 = v6;
  v8 = MEMORY[0x1E0C809B0];
  if (v6)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 0x40000000;
    v14[2] = sub_19C038620;
    v14[3] = &unk_1E3D17DD8;
    v14[5] = v17;
    v14[6] = a1;
    v14[4] = a3;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v6 + 16) + 48))(v6 + 16, v14);
    CFRelease(v7);
  }
  CFRelease(v5);
  v9 = *(_QWORD *)(a1 + 30280);
  if (v9)
  {
    v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 16) + 72))(v9 + 16);
    v16 = v10;
    v11 = (*(uint64_t (**)(_QWORD *, _BYTE *))(v10[2] + 16))(v10 + 2, v21);
    v12 = (const void *)v11;
    v15 = v11;
    if (v11)
    {
      v13[0] = v8;
      v13[1] = 0x40000000;
      v13[2] = sub_19C038804;
      v13[3] = &unk_1E3D17E00;
      v13[4] = a3;
      v13[5] = v17;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v11 + 16) + 48))(v11 + 16, v13);
      CFRelease(v12);
    }
    CFRelease(v10);
  }
  _Block_object_dispose(v17, 8);
  if (cf)
    CFRelease(cf);
  if (v20 && v19[6] == 1)
    free(v20);
  if (v22)
  {
    if (v21[6] == 1)
      free(v22);
  }
}

void sub_19C038548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2)
    sub_19BF8E3F8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C038608(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void sub_19C038618(uint64_t a1)
{
  sub_19C03889C((const void **)(a1 + 40));
}

void sub_19C038620(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const __CFString *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  BOOL v10;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  const void *v17;

  v3 = a1[6];
  v4 = (const __CFString *)LXEntryCopyString(a2);
  v5 = *(_QWORD *)(v3 + 30280);
  if (v5)
    v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 72))(v5 + 16);
  else
    v6 = 0;
  v17 = v6;
  v7 = LXCursorCreateByAdvancing((uint64_t)v6, v4);
  v8 = (const void *)v7;
  v16 = v7;
  if (v7)
  {
    v9 = v7 + 16;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 16) + 40))(v7 + 16) & 1) != 0)
    {
      v12 = 0;
      v13 = &v12;
      v14 = 0x2000000000;
      v15 = 1;
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 0x40000000;
      v11[2] = sub_19C0388CC;
      v11[3] = &unk_1E3D17E28;
      v11[4] = &v12;
      v11[5] = v4;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))((uint64_t)v8 + 16, v11);
      v10 = *((_BYTE *)v13 + 24) != 0;
      _Block_object_dispose(&v12, 8);
    }
    else
    {
      v10 = 0;
    }
    CFRelease(v8);
  }
  else
  {
    v10 = 0;
  }
  if (v6)
    CFRelease(v6);
  if (!v10)
  {
    CFSetAddValue(*(CFMutableSetRef *)(*(_QWORD *)(a1[5] + 8) + 40), v4);
    (*(void (**)(void))(a1[4] + 16))();
  }
  if (v4)
    CFRelease(v4);
}

void sub_19C0387A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  const void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, const void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  sub_19BFAD520((const void **)(v2 - 80), 0);
  sub_19BFAD520((const void **)(v2 - 72), 0);
  sub_19BF8AD20((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_19C038804(uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = LXEntryCopyString(a2);
  if (!CFSetContainsValue(*(CFSetRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v3))
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v3)
    CFRelease(v3);
}

void sub_19C038884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BF8AD20((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_19C03889C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
}

void sub_19C0388CC(uint64_t a1, uint64_t a2)
{
  const __CFString *v4;
  const __CFString *v5;

  v4 = (const __CFString *)LXEntryCopyString(a2);
  if (!a2)
    __assert_rtn("LXEntryGetMetaFlags", "LXEntry.cpp", 45, "entry");
  v5 = v4;
  if ((*(_WORD *)(a2 + 54) & 0x180) == 0 || CFStringCompare(*(CFStringRef *)(a1 + 40), v4, 0))
  {
    if (!v5)
      return;
    goto LABEL_5;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  if (v5)
LABEL_5:
    CFRelease(v5);
}

void sub_19C038978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BF8AD20((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_19C038990(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &off_1E3D11938;
  v2 = *(void **)(a1 + 152);
  if (v2 && *(_BYTE *)(a1 + 150) == 1)
    free(v2);
  v3 = *(void **)(a1 + 120);
  if (v3 && *(_BYTE *)(a1 + 118) == 1)
    free(v3);
  v4 = *(void **)(a1 + 88);
  if (v4 && *(_BYTE *)(a1 + 86) == 1)
    free(v4);
  v5 = *(void **)(a1 + 56);
  if (v5 && *(_BYTE *)(a1 + 54) == 1)
    free(v5);
  v6 = *(void **)(a1 + 24);
  if (v6 && *(_BYTE *)(a1 + 22) == 1)
    free(v6);
  sub_19C03068C((uint64_t **)(a1 + 8), 0);
  return a1;
}

void sub_19C038A40(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &off_1E3D11938;
  v2 = *(void **)(a1 + 152);
  if (v2 && *(_BYTE *)(a1 + 150) == 1)
    free(v2);
  v3 = *(void **)(a1 + 120);
  if (v3 && *(_BYTE *)(a1 + 118) == 1)
    free(v3);
  v4 = *(void **)(a1 + 88);
  if (v4 && *(_BYTE *)(a1 + 86) == 1)
    free(v4);
  v5 = *(void **)(a1 + 56);
  if (v5 && *(_BYTE *)(a1 + 54) == 1)
    free(v5);
  v6 = *(void **)(a1 + 24);
  if (v6 && *(_BYTE *)(a1 + 22) == 1)
    free(v6);
  sub_19C03068C((uint64_t **)(a1 + 8), 0);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C038B00(uint64_t a1)
{
  char *v2;
  char *v3;
  const char *v4;
  const char *v5;
  int v6;
  uint64_t *v7;
  char *v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  size_t v18;
  NSObject *v19;
  void **v20;
  uint64_t v21;
  void *__dst[2];
  char v24;
  uint8_t buf[4];
  void **v26;
  void *__p[2];
  uint64_t v28;
  _QWORD v29[10];
  char v30;
  _QWORD v31[20];

  v31[19] = *MEMORY[0x1E0C80C00];
  v2 = *(char **)(a1 + 56);
  v3 = (char *)(a1 + 64);
  v4 = (const char *)(a1 + 160);
  if (*(_QWORD *)(a1 + 152))
    v5 = *(const char **)(a1 + 152);
  else
    v5 = (const char *)(a1 + 160);
  v6 = strcmp(v5, "Latn");
  v7 = (uint64_t *)operator new();
  if (v2)
    v8 = v2;
  else
    v8 = v3;
  sub_19BF8E43C(__p, v8);
  sub_19C039AFC(v7, (uint64_t)__p, v6 == 0);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  sub_19C03068C((uint64_t **)(a1 + 8), v7);
  sub_19BFA0144((uint64_t)__p);
  v9 = sub_19BF8E6F8(&v28, (uint64_t)"creating transliteration lexicon with locale=", 45);
  if (*(_QWORD *)(a1 + 24))
    v10 = *(const char **)(a1 + 24);
  else
    v10 = (const char *)(a1 + 32);
  v11 = strlen(v10);
  sub_19BF8E6F8(v9, (uint64_t)v10, v11);
  if (*(_WORD *)(a1 + 144))
  {
    v12 = sub_19BF8E6F8(&v28, (uint64_t)", script=", 9);
    if (*(_QWORD *)(a1 + 152))
      v13 = *(const char **)(a1 + 152);
    else
      v13 = v4;
    v14 = strlen(v13);
    v15 = sub_19BF8E6F8(v12, (uint64_t)v13, v14);
    v16 = sub_19BF8E6F8(v15, (uint64_t)", path=", 7);
    if (*(_QWORD *)(a1 + 56))
      v17 = *(const char **)(a1 + 56);
    else
      v17 = v3;
    v18 = strlen(v17);
    sub_19BF8E6F8(v16, (uint64_t)v17, v18);
  }
  if (qword_1EE417920 != -1)
    dispatch_once(&qword_1EE417920, &unk_1E3D17E68);
  v19 = qword_1EE417918;
  if (os_log_type_enabled((os_log_t)qword_1EE417918, OS_LOG_TYPE_INFO))
  {
    sub_19BFAAA88(__dst, (uint64_t)v29);
    v20 = v24 >= 0 ? __dst : (void **)__dst[0];
    *(_DWORD *)buf = 136315138;
    v26 = v20;
    _os_log_impl(&dword_19BF85000, v19, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
    if (v24 < 0)
      operator delete(__dst[0]);
  }
  __p[0] = *(void **)MEMORY[0x1E0DE4F50];
  v21 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  v28 = v21;
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v30 < 0)
    operator delete((void *)v29[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD0C7C](v31);
  return 1;
}

void sub_19C038DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, int a19, __int16 a20,uint64_t a21,char a22,char a23)
{
  sub_19BFA0270((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_19C039008()
{
  __assert_rtn("serialized_size", "TransliterationLexiconImpl.cpp", 56, "false && \"serialized_size() not yet supported for static lexicons\"");
}

uint64_t sub_19C039038()
{
  return 0;
}

CFStringRef sub_19C039040(uint64_t a1)
{
  const char *v2;
  std::string::size_type v3;
  std::string *v4;
  __int128 v5;
  CFStringRef v6;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  sub_19BF8E43C(&v8, "UnifiedTransliteration-");
  if (*(_QWORD *)(a1 + 24))
    v2 = *(const char **)(a1 + 24);
  else
    v2 = (const char *)(a1 + 32);
  v3 = strlen(v2);
  v4 = std::string::append(&v8, v2, v3);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v10 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v6 = sub_19BF8DBF4((uint64_t)__p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_19C0390E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C039114(uint64_t a1)
{
  uint64_t Instance;
  _BYTE *v3;
  uint64_t v5;
  __int128 __p;
  uint64_t v7;

  if (qword_1ED024388 != -1)
    dispatch_once(&qword_1ED024388, &unk_1E3D17EA8);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 16) = off_1E3D11898;
  *(_QWORD *)(Instance + 24) = a1;
  (*(void (**)(uint64_t *__return_ptr))(***(_QWORD ***)(a1 + 8) + 104))(&v5);
  *(_QWORD *)(Instance + 32) = v5;
  v3 = (_BYTE *)(Instance + 40);
  if (SHIBYTE(v7) < 0)
  {
    sub_19BF8CD70(v3, (void *)__p, *((unint64_t *)&__p + 1));
    if (SHIBYTE(v7) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_OWORD *)v3 = __p;
    *(_QWORD *)(Instance + 56) = v7;
  }
  *(_DWORD *)(Instance + 64) = 0x100000;
  *(_WORD *)(Instance + 68) = 0;
  *(_BYTE *)(Instance + 70) = 0;
  *(_QWORD *)(Instance + 72) = 0;
  *(_BYTE *)(Instance + 80) = 0;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 128) = 0u;
  *(_OWORD *)(Instance + 144) = 0u;
  return Instance;
}

void sub_19C03921C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C039238(uint64_t a1, uint64_t a2)
{
  _QWORD **v3;
  char *v4;
  _QWORD *v5;
  _QWORD **v6;
  BOOL v7;
  _QWORD **v8;
  _QWORD *v9[2];

  sub_19C0173CC((unsigned __int16 *)&v8, *(_QWORD *)(a1 + 8) + 88);
  v3 = v8;
  if (v8 != v9)
  {
    do
    {
      if (*((unsigned __int16 *)v3 + 20) < 0xFu)
        v4 = (char *)v3 + 42;
      else
        v4 = (char *)v3[6];
      (*(void (**)(uint64_t, _QWORD, char *))(a2 + 16))(a2, *((unsigned int *)v3 + 8), v4);
      v5 = v3[1];
      if (v5)
      {
        do
        {
          v6 = (_QWORD **)v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD **)v3[2];
          v7 = *v6 == v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v9);
  }
  sub_19BFD4974(v9[0]);
}

void sub_19C0392F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  sub_19BFD4974(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_19C039304(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  return sub_19BFEA0A8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1480), a2, a3);
}

void sub_19C039310(uint64_t a1@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  sub_19BF8B7D8(a3, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1480), a2);
}

uint64_t sub_19C039324()
{
  return 0;
}

uint64_t sub_19C03932C()
{
  uint64_t result;

  qword_1ED024390 = 0;
  *(_QWORD *)algn_1ED024398 = "LXCursor";
  qword_1ED0243A0 = 0;
  unk_1ED0243A8 = 0;
  qword_1ED0243B0 = (uint64_t)sub_19BFCFB34;
  unk_1ED0243B8 = 0u;
  unk_1ED0243C8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED0243F0 = result;
  return result;
}

__n128 sub_19C039378(std::string *a1, std::string *a2, char *__s)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

os_log_t sub_19C0393D4()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "TranslitLexicon");
  qword_1EE417918 = (uint64_t)result;
  return result;
}

double sub_19C039400(uint64_t *a1, uint64_t a2)
{
  int v4;
  double result;
  int v6;
  int v7;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  result = 0.0;
  if (v4)
  {
    v7 = 0;
    v6 = sub_19BFF9DF8(a1 + 1, a2, &v7);
    result = 1.0;
    if (v6)
      return (double)HIBYTE(v7) / 255.0 * ((double)HIBYTE(v7) / 255.0);
  }
  return result;
}

void sub_19C039474()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C039488(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D17ED8;
  result[1] = v3;
  return result;
}

uint64_t sub_19C0394BC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D17ED8;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C0394D8(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C0394EC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D17F38))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C039528()
{
  return &unk_1E3D17F38;
}

void sub_19C039538()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03954C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D129A0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C039580(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D129A0;
  a2[1] = v2;
  return result;
}

void sub_19C03959C(uint64_t a1, char *a2, uint64_t *a3)
{
  char **v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  char v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  __int128 __p;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD v34[3];
  char v35;
  __int128 v36;
  __int128 v37;

  v3 = *(char ***)(a1 + 8);
  v25 = *a2;
  v26 = *a3;
  if (*((char *)a3 + 31) < 0)
  {
    sub_19BF8CD70(&__p, (void *)a3[1], a3[2]);
  }
  else
  {
    __p = *(_OWORD *)(a3 + 1);
    v28 = a3[3];
  }
  v4 = (unint64_t)v3[2];
  v5 = (unint64_t)v3[1];
  if (v5 >= v4)
  {
    v8 = *v3;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)*v3) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0x666666666666666)
      sub_19BF8EB40();
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (_QWORD)v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v10;
    v33 = v3 + 2;
    if (v12)
    {
      if (v12 > 0x666666666666666)
        sub_19BF8E6D0();
      v13 = (char *)operator new(40 * v12);
    }
    else
    {
      v13 = 0;
    }
    v15 = &v13[40 * v9];
    v29 = v13;
    v30 = v15;
    v31 = v15;
    v32 = &v13[40 * v12];
    *v15 = v25;
    *((_QWORD *)v15 + 1) = v26;
    v16 = v15 + 16;
    if (SHIBYTE(v28) < 0)
    {
      sub_19BF8CD70(v16, (void *)__p, *((unint64_t *)&__p + 1));
      v8 = *v3;
      v5 = (unint64_t)v3[1];
      v15 = v30;
      v17 = v31;
    }
    else
    {
      *(_OWORD *)v16 = __p;
      *((_QWORD *)v15 + 4) = v28;
      v17 = v15;
    }
    v31 = v17 + 40;
    *(_QWORD *)&v37 = v15;
    *((_QWORD *)&v37 + 1) = v15;
    v36 = v37;
    v34[0] = v3 + 2;
    v34[1] = &v36;
    v34[2] = &v37;
    v35 = 0;
    if ((char *)v5 != v8)
    {
      v18 = v5;
      do
      {
        v19 = *(_BYTE *)(v18 - 40);
        v18 -= 40;
        *(v15 - 40) = v19;
        *((_QWORD *)v15 - 4) = *(_QWORD *)(v18 + 8);
        v20 = v15 - 24;
        if (*(char *)(v18 + 39) < 0)
        {
          sub_19BF8CD70(v20, *(void **)(v5 - 24), *(_QWORD *)(v5 - 16));
          v15 = (char *)*((_QWORD *)&v37 + 1);
        }
        else
        {
          v21 = *(_OWORD *)(v18 + 16);
          *((_QWORD *)v15 - 1) = *(_QWORD *)(v18 + 32);
          *(_OWORD *)v20 = v21;
        }
        v15 -= 40;
        *((_QWORD *)&v37 + 1) = v15;
        v5 = v18;
      }
      while ((char *)v18 != v8);
    }
    v35 = 1;
    sub_19C039924((uint64_t)v34);
    v22 = *v3;
    *v3 = v15;
    v29 = v22;
    v30 = v22;
    v23 = v3[1];
    v14 = v31;
    v3[1] = v31;
    v31 = v23;
    v24 = v3[2];
    v3[2] = v32;
    v32 = v24;
    sub_19C0398C4((uint64_t)&v29);
  }
  else
  {
    *(_BYTE *)v5 = v25;
    *(_QWORD *)(v5 + 8) = v26;
    v6 = (_BYTE *)(v5 + 16);
    if (SHIBYTE(v28) < 0)
    {
      sub_19BF8CD70(v6, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      v7 = __p;
      *(_QWORD *)(v5 + 32) = v28;
      *(_OWORD *)v6 = v7;
    }
    v14 = (char *)(v5 + 40);
    v3[1] = (char *)(v5 + 40);
  }
  v3[1] = v14;
  if (SHIBYTE(v28) < 0)
    operator delete((void *)__p);
}

void sub_19C039834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_19C0398C4((uint64_t)&a17);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C03987C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D117B0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0398B8()
{
  return &unk_1E3D117B0;
}

uint64_t sub_19C0398C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C039924(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 + 39) < 0)
        operator delete(*(void **)(v3 + 16));
      v3 += 40;
    }
  }
  return a1;
}

uint64_t sub_19C039980(uint64_t result, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v8;
  int v11;
  uint64_t v12[3];

  v5 = *(uint64_t **)(a2 + 64);
  v6 = v5[1];
  if (v6 < a3)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  v8 = *v5;
  if (v6 - 1 < a3 || v8 == 0)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_QWORD *)(result + 80) = 0;
    *(_WORD *)(result + 2) = 16;
    *(_BYTE *)(result + 6) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 37) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(result + 76) = 0;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v8 + a3);
    v12[0] = v8;
    v12[1] = v6;
    v12[2] = a3;
    result = sub_19BFD4A40(result, v12, a5, a2 + 88, *(_QWORD *)(a2 + 1464), *(_QWORD *)(a2 + 1472), *(_DWORD *)(a2 + 80));
    *a4 = (v11 + a3) & (*(char *)(result + 44) >> 31);
  }
  return result;
}

uint64_t sub_19C039A74(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D11B60;
  sub_19BFB1F54(*(char **)(a1 + 80));
  sub_19BFF9220((_QWORD *)(a1 + 8));
  return a1;
}

void sub_19C039AB0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D11B60;
  sub_19BFB1F54(*(char **)(a1 + 80));
  sub_19BFF9220((_QWORD *)(a1 + 8));
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t *sub_19C039AFC(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t (**v14)();
  uint64_t v15;
  uint64_t (**v16)();
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  std::runtime_error *exception;
  uint64_t v43[3];
  __int128 v44;
  uint64_t v45;

  a1[3] = 0;
  v5 = (uint64_t)(a1 + 3);
  a1[4] = 0;
  a1[8] = 0;
  *((_DWORD *)a1 + 20) = 0;
  *a1 = 0;
  a1[1] = 0;
  v6 = (uint64_t)(a1 + 11);
  *((_BYTE *)a1 + 84) = a3;
  sub_19BF875B8((uint64_t)(a1 + 11));
  a1[185] = 0;
  *(_OWORD *)(a1 + 183) = 0u;
  v7 = (_QWORD *)operator new();
  sub_19BF8A6DC(v7, a2);
  v8 = a1[8];
  a1[8] = (uint64_t)v7;
  if (v8)
    sub_19C014608(v8);
  sub_19BF87864(&v44, "en");
  sub_19BFAED8C(v5, &v44);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_DWORD **)a1[8];
  if (*v12 != -272716322)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "wrong magic number");
    goto LABEL_24;
  }
  if (v12[1] != 134217984)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Wrong version!");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *((_DWORD *)a1 + 20) = bswap32(v12[2]);
  *((_DWORD *)a1 + 18) = bswap32(v12[3]);
  v13 = operator new();
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_QWORD *)v13 = &off_1E3D11B60;
  *(_QWORD *)(v13 + 8) = &off_1E3D11A10;
  sub_19BF8EFC0((_QWORD *)(v13 + 24));
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 72) = v13 + 80;
  v14 = &off_1E3D117F0;
  *(_QWORD *)v13 = &off_1E3D117F0;
  v15 = a1[1];
  a1[1] = v13;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v13 = a1[1];
    v16 = *(uint64_t (***)())v13;
  }
  else
  {
    v16 = &off_1E3D117F0;
  }
  ((void (*)(uint64_t, _DWORD *, _QWORD))v16[9])(v13, v12 + 14, bswap32(v12[4]));
  v17 = v12[4];
  v18 = operator new();
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_QWORD *)v18 = &off_1E3D11B60;
  *(_QWORD *)(v18 + 8) = &off_1E3D11A10;
  sub_19BF8EFC0((_QWORD *)(v18 + 24));
  v19 = (uint64_t)v12 + bswap32(v17) + 56;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_QWORD *)(v18 + 80) = 0;
  *(_QWORD *)(v18 + 88) = 0;
  *(_QWORD *)(v18 + 64) = 0;
  *(_QWORD *)(v18 + 72) = v18 + 80;
  *(_QWORD *)v18 = &off_1E3D117F0;
  v20 = *a1;
  *a1 = v18;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v18 = *a1;
    v14 = *(uint64_t (***)())*a1;
  }
  ((void (*)(uint64_t, uint64_t, _QWORD))v14[9])(v18, v19, bswap32(v12[5]));
  v21 = v19 + bswap32(v12[5]);
  v22 = bswap32(v12[6]);
  *((_DWORD *)a1 + 4) = v21 - (_DWORD)v12;
  v23 = v21 + v22;
  v24 = bswap32(v12[7]);
  *((_DWORD *)a1 + 5) = v23 - (_DWORD)v12;
  v25 = v23 + v24;
  v26 = bswap32(v12[8]);
  *(_QWORD *)&v44 = v25;
  *((_QWORD *)&v44 + 1) = v26;
  v45 = 0;
  v27 = (_QWORD *)operator new();
  sub_19BFF0538(v27, (uint64_t *)&v44);
  v28 = a1[184];
  a1[184] = (uint64_t)v27;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = v25 + bswap32(v12[8]);
  a1[5] = v29;
  v30 = bswap32(v12[9]);
  a1[6] = v30 >> 2;
  *((_DWORD *)a1 + 14) = bswap32(v12[10]);
  v31 = v29 + v30;
  *((_DWORD *)a1 + 19) = bswap32(v12[11]);
  v32 = (uint64_t *)a1[8];
  v34 = *v32;
  v33 = v32[1];
  v43[0] = v34;
  v43[1] = v33;
  v43[2] = v31 - v34;
  if (v33 < v31 - v34)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  sub_19C016CC4(v6, v43);
  v35 = *((unsigned int *)a1 + 19);
  v37 = v12[12];
  v36 = v12[13];
  v38 = (_QWORD *)operator new();
  v39 = bswap32(v37);
  *v38 = off_1E3D11D40;
  v38[1] = v6;
  v38[2] = v31 + v35;
  v38[3] = v39 >> 3;
  v38[4] = v31 + v35 + v39;
  v38[5] = bswap32(v36);
  v40 = a1[185];
  a1[185] = (uint64_t)v38;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  return a1;
}

void sub_19C039F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  __cxa_free_exception(v12);
  v14 = v10[185];
  v10[185] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  v15 = v10[184];
  v10[184] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *a10;
  *a10 = 0;
  if (v16)
    sub_19C022A84(v16);
  v10[11] = (uint64_t)&off_1E3D146F0;
  v17 = (void *)v10[180];
  if (v17 && *((_BYTE *)v10 + 1438) == 1)
    free(v17);
  sub_19BF8769C((uint64_t)(v10 + 173));
  v18 = v10[8];
  v10[8] = 0;
  if (v18)
    sub_19C014608(v18);
  sub_19BFACCEC(v11);
  v19 = v10[1];
  v10[1] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *v10;
  *v10 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  _Unwind_Resume(a1);
}

void sub_19C03A0B0(int64x2_t *a1, uint64_t a2)
{
  char *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  std::string *v10;
  std::string::size_type size;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int64x2_t v33;
  char *v34;
  int v35;
  int v36;
  unint64_t v37;
  void *__p[2];
  char v39;
  unsigned __int16 v40;
  uint64_t v41;
  unsigned int v42;
  std::string v43;
  unsigned int v44;
  uint64_t v45;
  char *v46;
  unsigned int v47;
  unsigned __int16 __len;
  char __len_6;
  void *v50;
  uint64_t v51;
  char *v52;
  void *v53[2];
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int16 v58;
  uint64_t v59;
  void *v60;
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int16 v65;
  _BYTE v66[8];
  char *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  v47 = 0;
  (***(void (****)(uint64_t *__return_ptr))(a2 + 1480))(&v45);
  if ((unsigned __int16)v45 <= 0xEuLL)
    v4 = (char *)&v45 + 2;
  else
    v4 = v46;
  if ((*(unsigned int (**)(_QWORD, char *))(**(_QWORD **)(a2 + 8) + 80))(*(_QWORD *)(a2 + 8), v4))
  {
    v5 = v47;
    do
    {
      v44 = 0;
      sub_19C039980((uint64_t)v66, a2, *(_DWORD *)(a2 + 20) + v5, (int *)&v44, (unsigned __int16 *)&v45);
      if (v44)
      {
        v6 = *(_DWORD *)(a2 + 20);
        if (v44 >= v6)
          v5 = v44 - v6;
        else
          v5 = 0;
      }
      else
      {
        v5 = 0;
      }
      v7 = v69;
      if (*(_QWORD *)(*(_QWORD *)a2 + 40) > (v69 & 0x7FFFFFuLL))
      {
        v8 = sub_19BFFA264(*(_QWORD *)a2 + 8, v69 & 0x7FFFFF) & 0xFFFFFF;
        if (v8 != 0xFFFFFF)
        {
          memset(&v43, 0, sizeof(v43));
          v9 = *(_QWORD *)a2 + 8;
          v59 = *(_QWORD *)&v7 & 0x7FFFFFLL;
          if (sub_19C03A740(v9, (unint64_t *)&v59, &v43))
          {
            v42 = 0;
            if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v10 = &v43;
            else
              v10 = (std::string *)v43.__r_.__value_.__r.__words[0];
            if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
            else
              size = v43.__r_.__value_.__l.__size_;
            sub_19BF8BC44((uint64_t)&v40, size, v10, size);
            v12 = 0;
            LODWORD(v59) = 0x100000;
            v13 = HIBYTE(v7);
            WORD2(v59) = 0;
            BYTE6(v59) = 0;
            v60 = 0;
            v61 = 0;
            *(_QWORD *)&v62 = 0;
            *(_QWORD *)((char *)&v62 + 5) = 0;
            v63 = 0uLL;
            *(_QWORD *)&v64 = 0xFFFFFFFFLL;
            BYTE8(v64) = 0;
            HIDWORD(v64) = 0;
            v65 = 0;
            do
            {
              sub_19C039980((uint64_t)&v52, a2, *(_DWORD *)(a2 + 16) + v8, (int *)&v42, &v40);
              if (v42)
              {
                v14 = *(_DWORD *)(a2 + 16);
                if (v42 >= v14)
                  v8 = v42 - v14;
                else
                  v8 = 0;
                v42 = v8;
              }
              else
              {
                v8 = 0;
              }
              sub_19BF8A370((uint64_t)&v59, (unsigned __int16 *)&v52);
              v62 = v55;
              v63 = v56;
              v64 = v57;
              v65 = v58;
              if (v53[0] && BYTE6(v52) == 1)
                free(v53[0]);
              if (!v8)
                break;
            }
            while (v12++ < v13);
            sub_19BF86B60((uint64_t)&__len, (unsigned __int16 *)&v59);
            if (v50)
              v16 = (uint64_t *)v50;
            else
              v16 = &v51;
            sub_19BFA4428(__p, v16, __len);
            if (v67)
              v17 = v67;
            else
              v17 = (char *)&v68;
            v37 = 0xFFF0000000000000;
            v35 = DWORD1(v62);
            v36 = 0;
            v19 = a1->u64[1];
            v18 = a1[1].u64[0];
            if (v19 >= v18)
            {
              v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - a1->i64[0]) >> 5);
              v22 = v21 + 1;
              if (v21 + 1 > 0x2AAAAAAAAAAAAAALL)
                sub_19BF8EB40();
              v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - a1->i64[0]) >> 5);
              if (2 * v23 > v22)
                v22 = 2 * v23;
              if (v23 >= 0x155555555555555)
                v24 = 0x2AAAAAAAAAAAAAALL;
              else
                v24 = v22;
              *(_QWORD *)&v55 = a1 + 1;
              if (v24)
              {
                if (v24 > 0x2AAAAAAAAAAAAAALL)
                  sub_19BF8E6D0();
                v25 = (char *)operator new(96 * v24);
              }
              else
              {
                v25 = 0;
              }
              v52 = v25;
              v53[0] = &v25[96 * v21];
              v53[1] = v53[0];
              v54 = &v25[96 * v24];
              sub_19C03A7FC((char *)v53[0], v17, (__int128 *)__p, (double *)&v37, (float *)&v36, &v35);
              v26 = (char *)v53[0];
              v20 = (char *)v53[1] + 96;
              v53[1] = (char *)v53[1] + 96;
              v28 = a1->i64[0];
              v27 = a1->u64[1];
              if (v27 == a1->i64[0])
              {
                v33 = vdupq_n_s64(v27);
              }
              else
              {
                do
                {
                  v29 = *(_OWORD *)(v27 - 96);
                  *((_QWORD *)v26 - 10) = *(_QWORD *)(v27 - 80);
                  *((_OWORD *)v26 - 6) = v29;
                  *(_QWORD *)(v27 - 88) = 0;
                  *(_QWORD *)(v27 - 80) = 0;
                  *(_QWORD *)(v27 - 96) = 0;
                  v30 = *(_OWORD *)(v27 - 72);
                  *((_QWORD *)v26 - 7) = *(_QWORD *)(v27 - 56);
                  *(_OWORD *)(v26 - 72) = v30;
                  *(_QWORD *)(v27 - 64) = 0;
                  *(_QWORD *)(v27 - 56) = 0;
                  *(_QWORD *)(v27 - 72) = 0;
                  v31 = *(_OWORD *)(v27 - 48);
                  *((_QWORD *)v26 - 4) = *(_QWORD *)(v27 - 32);
                  *((_OWORD *)v26 - 3) = v31;
                  *(_QWORD *)(v27 - 40) = 0;
                  *(_QWORD *)(v27 - 32) = 0;
                  *(_QWORD *)(v27 - 48) = 0;
                  v32 = *(_OWORD *)(v27 - 24);
                  *((_DWORD *)v26 - 2) = *(_DWORD *)(v27 - 8);
                  *(_OWORD *)(v26 - 24) = v32;
                  v26 -= 96;
                  v27 -= 96;
                }
                while (v27 != v28);
                v33 = *a1;
                v20 = (char *)v53[1];
              }
              a1->i64[0] = (uint64_t)v26;
              a1->i64[1] = (uint64_t)v20;
              *(int64x2_t *)v53 = v33;
              v34 = (char *)a1[1].i64[0];
              a1[1].i64[0] = (uint64_t)v54;
              v54 = v34;
              v52 = (char *)v33.i64[0];
              sub_19C03A8D4((uint64_t)&v52);
            }
            else
            {
              sub_19C03A7FC((char *)a1->i64[1], v17, (__int128 *)__p, (double *)&v37, (float *)&v36, &v35);
              v20 = (char *)(v19 + 96);
              a1->i64[1] = v19 + 96;
            }
            a1->i64[1] = (uint64_t)v20;
            if (v39 < 0)
              operator delete(__p[0]);
            if (v50 && __len_6 == 1)
              free(v50);
            if (v60 && BYTE6(v59) == 1)
              free(v60);
            if (v40 >= 0xFu && v41)
              MEMORY[0x1A1AD0CB8](v41, 0x1000C8077774924);
          }
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v43.__r_.__value_.__l.__data_);
        }
      }
      v47 = v5;
      if (v67 && v66[6] == 1)
      {
        free(v67);
        v5 = v47;
      }
    }
    while (v5);
  }
  if ((unsigned __int16)v45 >= 0xFu)
  {
    if (v46)
      MEMORY[0x1A1AD0CB8](v46, 0x1000C8077774924);
  }
}

void sub_19C03A614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,unsigned __int16 a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,unsigned __int16 a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,void *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,void *a54)
{
  uint64_t v54;
  uint64_t v55;
  BOOL v57;
  void *v58;

  if (a20 < 0)
    operator delete(__p);
  if (a37 && a36 == 1)
    free(a37);
  if (a54)
    v57 = a53 == 1;
  else
    v57 = 0;
  if (v57)
    free(a54);
  if (a21 >= 0xFu && a22)
    MEMORY[0x1A1AD0CB8](a22, 0x1000C8077774924);
  if (a29 < 0)
    operator delete(a24);
  v58 = *(void **)(v55 - 192);
  if (v58 && *(_BYTE *)(v55 - 194) == 1)
    free(v58);
  if (a31 >= 0xFu)
  {
    if (a32)
      MEMORY[0x1A1AD0CB8](a32, 0x1000C8077774924);
  }
  *(_QWORD *)(v55 - 200) = v54;
  sub_19C030784((void ***)(v55 - 200));
  _Unwind_Resume(a1);
}

BOOL sub_19C03A740(uint64_t a1, unint64_t *a2, std::string *a3)
{
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  size_t v8;
  void **v9;
  void *__p[2];
  unsigned __int8 v12;

  v5 = *a2;
  v6 = (uint64_t *)(a1 + 16);
  v7 = sub_19BF8F604(a1 + 16);
  if (v5 < v7)
  {
    sub_19BF8F3C4(v6, *a2, (unint64_t)__p);
    if ((v12 & 0x80u) == 0)
      v8 = v12;
    else
      v8 = (size_t)__p[1];
    if ((v12 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    sub_19BFB4C20(a3, (const std::string::value_type *)v9, v8);
    if ((char)v12 < 0)
      operator delete(__p[0]);
  }
  return v5 < v7;
}

void sub_19C03A7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_19C03A7FC(char *a1, char *a2, __int128 *a3, double *a4, float *a5, int *a6)
{
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  sub_19BF8E43C(v14, a2);
  sub_19BF8E43C(__p, "");
  sub_19C03A920(a1, (__int128 *)v14, a3, (__int128 *)__p, *a6, *a4, *a5);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  return a1;
}

void sub_19C03A8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03A8D4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    sub_19C0307F4(i - 96);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_19C03A920(char *__dst, __int128 *a2, __int128 *a3, __int128 *a4, int a5, double a6, double a7)
{
  __int128 v13;
  __int128 v14;
  _BYTE *v15;
  __int128 v16;

  if (*((char *)a2 + 23) < 0)
  {
    sub_19BF8CD70(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v13 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v13;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_19BF8CD70(__dst + 24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v14 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v14;
  }
  v15 = __dst + 48;
  if (*((char *)a4 + 23) < 0)
  {
    sub_19BF8CD70(v15, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v16 = *a4;
    *((_QWORD *)__dst + 8) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v15 = v16;
  }
  *((double *)__dst + 9) = a6;
  *((double *)__dst + 10) = a7;
  *((_DWORD *)__dst + 22) = a5;
  return __dst;
}

void sub_19C03A9F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double sub_19C03AA28(_QWORD *a1, unsigned int *a2)
{
  int v4;
  double result;
  int v6;
  double v7;
  unsigned int v8;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  result = 0.0;
  if (v4)
  {
    v8 = 0;
    v6 = sub_19C008564(a1 + 1, a2, (int *)&v8);
    result = 1.0;
    if (v6)
    {
      v7 = (double)(v8 >> 23) / 255.0;
      return v7 * v7;
    }
  }
  return result;
}

uint64_t sub_19C03AA9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E3D18100;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 144))(a1, a2, v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

void sub_19C03AB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03AB84()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03AB98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18100;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03ABCC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18100;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03ABE8(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C03ABFC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18160))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03AC38()
{
  return &unk_1E3D18160;
}

void sub_19C03AC44(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)a1 != -1)
  {
    v3 = *(_QWORD *)(a2 + 72);
    v4 = (*(_DWORD *)(v3 + 4 * *(_QWORD *)a1) >> 10 << ((*(_DWORD *)(v3
                                                                                   + 4 * *(_QWORD *)a1) >> 6) & 8)) ^ *(_QWORD *)a1 ^ a3;
    if ((*(_DWORD *)(v3 + 4 * v4) & 0x800000FF) == a3)
    {
      *(_QWORD *)a1 = v4;
      if (!(_DWORD)v4)
        __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
      sub_19C03AA28((_QWORD *)(a2 + 40), a1);
    }
    else
    {
      *(_QWORD *)a1 = -1;
    }
  }
}

void sub_19C03ACE0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03ACF4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18720;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03AD28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18720;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03AD44(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t *v19;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a3;
  v6 = v4[1];
  v7 = v4[2];
  if (v6 >= v7)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555)
      sub_19BF8EB40();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v12;
    v19 = v4 + 2;
    if (v13)
      v13 = (unint64_t)sub_19C022808(v13);
    else
      v14 = 0;
    v15 = v13;
    v16 = (_BYTE *)(v13 + 48 * v10);
    v18 = v13 + 48 * v14;
    sub_19C03AEC8(v16, v3, v5);
    v17 = v16 + 48;
    sub_19C02284C(v4, &v15);
    v9 = v4[1];
    result = sub_19C02292C((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_19C03AEC8((_BYTE *)v4[1], *a2, *a3);
    v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19C03AE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03AE80(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18780))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03AEBC()
{
  return &unk_1E3D18780;
}

_BYTE *sub_19C03AEC8(_BYTE *a1, char a2, uint64_t a3)
{
  _QWORD v5[4];
  int v6;

  *a1 = a2;
  v5[0] = a3;
  v6 = 1;
  sub_19C0477E0((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19BFC72B0((uint64_t)v5);
  return a1;
}

void sub_19C03AF10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19C03AF24(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  uint64_t v10[3];

  if (*(_BYTE *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (v7 = *v5) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19BFD4A40(a1, v10, a5, a2 + 112, *(_QWORD *)(a2 + 1488), *(_QWORD *)(a2 + 1496), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(_BYTE *)(a1 + 6) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 37) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

double sub_19C03AFF4(uint64_t *a1, uint64_t *a2)
{
  int v4;
  double result;
  int v6;
  double v7;
  unsigned int v8;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  result = 0.0;
  if (v4)
  {
    v8 = 0;
    v6 = sub_19C00FBB0(a1 + 1, a2, &v8);
    result = 1.0;
    if (v6)
    {
      v7 = (double)(v8 >> 23) / 255.0;
      return v7 * v7;
    }
  }
  return result;
}

uint64_t sub_19C03B068(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E3D18180;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 144))(a1, a2, v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

void sub_19C03B110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03B150()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03B164(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18180;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03B198(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18180;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03B1B4(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C03B1C8(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D181E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03B204()
{
  return &unk_1E3D181E0;
}

float sub_19C03B210(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  float v4;
  int v7;
  uint64_t v8;
  char __s;
  unint64_t v11;
  uint64_t v12;

  v3 = *a1;
  v4 = 0.0;
  if (*a1 != -1)
  {
    __s = a3;
    v11 = 0;
    v12 = v3;
    v7 = sub_19C00FFE0((uint64_t *)(a2 + 56), &__s, &v12, &v11, 1uLL);
    v8 = v12;
    if (v7 == -2)
      v8 = -1;
    *a1 = v8;
    if (v8 != -1)
    {
      if (!v8)
        __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
      return sub_19C03AFF4((uint64_t *)(a2 + 40), a1);
    }
  }
  return v4;
}

void sub_19C03B2C4()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03B2D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D187A0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03B30C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D187A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03B328(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t *v19;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a3;
  v6 = v4[1];
  v7 = v4[2];
  if (v6 >= v7)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555)
      sub_19BF8EB40();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v12;
    v19 = v4 + 2;
    if (v13)
      v13 = (unint64_t)sub_19C022808(v13);
    else
      v14 = 0;
    v15 = v13;
    v16 = (_BYTE *)(v13 + 48 * v10);
    v18 = v13 + 48 * v14;
    sub_19C03B4AC(v16, v3, v5);
    v17 = v16 + 48;
    sub_19C02284C(v4, &v15);
    v9 = v4[1];
    result = sub_19C02292C((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_19C03B4AC((_BYTE *)v4[1], *a2, *a3);
    v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19C03B444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03B464(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18800))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03B4A0()
{
  return &unk_1E3D18800;
}

_BYTE *sub_19C03B4AC(_BYTE *a1, char a2, uint64_t a3)
{
  _QWORD v5[4];
  int v6;

  *a1 = a2;
  v5[0] = a3;
  v6 = 2;
  sub_19C0477E0((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19BFC72B0((uint64_t)v5);
  return a1;
}

void sub_19C03B4F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19C03B508(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  uint64_t v10[3];

  if (*(_BYTE *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (v7 = *v5) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19BFD4A40(a1, v10, a5, a2 + 176, *(_QWORD *)(a2 + 1552), *(_QWORD *)(a2 + 1560), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(_BYTE *)(a1 + 6) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 37) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

double sub_19C03B5D8(uint64_t a1, unint64_t *a2)
{
  int v4;
  double result;
  int v6;
  double v7;
  unsigned int v8;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  result = 0.0;
  if (v4)
  {
    v8 = 0;
    v6 = sub_19BFFD5C0(a1 + 8, a2, &v8);
    result = 1.0;
    if (v6)
    {
      v7 = (double)(v8 >> 23) / 255.0;
      return v7 * v7;
    }
  }
  return result;
}

uint64_t sub_19C03B64C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E3D18200;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 144))(a1, a2, v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

void sub_19C03B6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03B734()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03B748(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18200;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03B77C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18200;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03B798(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C03B7AC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18270))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03B7E8()
{
  return &unk_1E3D18270;
}

float sub_19C03B7F4(unint64_t *a1, uint64_t a2, char a3)
{
  unint64_t v3;
  float v4;
  int v7;
  unint64_t v8;
  char v10;
  unint64_t v11;
  unint64_t v12;

  v3 = *a1;
  v4 = 0.0;
  if (*a1 != -1)
  {
    v10 = a3;
    v11 = 0;
    v12 = v3;
    v7 = sub_19BFFEBD4(a2 + 56, (uint64_t)&v10, &v12, &v11, 1uLL);
    v8 = v12;
    if (v7 == -2)
      v8 = -1;
    *a1 = v8;
    if (v8 != -1)
    {
      if (!v8)
        __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
      return sub_19C03B5D8(a2 + 40, a1);
    }
  }
  return v4;
}

void sub_19C03B8A8()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03B8BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18820;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03B8F0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18820;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03B90C(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t *v19;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a3;
  v6 = v4[1];
  v7 = v4[2];
  if (v6 >= v7)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555)
      sub_19BF8EB40();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v12;
    v19 = v4 + 2;
    if (v13)
      v13 = (unint64_t)sub_19C022808(v13);
    else
      v14 = 0;
    v15 = v13;
    v16 = (_BYTE *)(v13 + 48 * v10);
    v18 = v13 + 48 * v14;
    sub_19C03BA90(v16, v3, v5);
    v17 = v16 + 48;
    sub_19C02284C(v4, &v15);
    v9 = v4[1];
    result = sub_19C02292C((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_19C03BA90((_BYTE *)v4[1], *a2, *a3);
    v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19C03BA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03BA48(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18880))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03BA84()
{
  return &unk_1E3D18880;
}

_BYTE *sub_19C03BA90(_BYTE *a1, char a2, uint64_t a3)
{
  _QWORD v5[4];
  int v6;

  *a1 = a2;
  v5[0] = a3;
  v6 = 3;
  sub_19C0477E0((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19BFC72B0((uint64_t)v5);
  return a1;
}

void sub_19C03BAD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19C03BAEC(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  uint64_t v10[3];

  if (*(_BYTE *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (v7 = *v5) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19BFD4A40(a1, v10, a5, a2 + 680, *(_QWORD *)(a2 + 2056), *(_QWORD *)(a2 + 2064), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(_BYTE *)(a1 + 6) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 37) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19C03BBBC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E3D18290;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 144))(a1, a2, v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

void sub_19C03BC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03BCA4()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03BCB8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18290;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03BCEC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18290;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03BD08(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C03BD1C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D182F0))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03BD58()
{
  return &unk_1E3D182F0;
}

float sub_19C03BD64(uint64_t a1, uint64_t a2, char a3)
{
  float v3;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  std::string v13;
  uint64_t v14;
  std::string __p;
  char v16;

  v3 = 0.0;
  if (*(_QWORD *)a1 != 0xFFFFFFFFLL)
  {
    v9 = *(_QWORD *)a1;
    if (*(char *)(a1 + 31) < 0)
    {
      sub_19BF8CD70(&v10, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
    else
    {
      v10 = *(_OWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 24);
    }
    v16 = a3;
    sub_19BF8F4E4((uint64_t *)(a2 + 64), (uint64_t)&v16, 1uLL, (uint64_t)&v9, &v12);
    v7 = v12;
    v14 = v12;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_19BF8CD70(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      v7 = v14;
    }
    else
    {
      __p = v13;
    }
    *(_QWORD *)a1 = v7;
    std::string::operator=((std::string *)(a1 + 8), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11) < 0)
      operator delete((void *)v10);
    if (*(_QWORD *)a1 != 0xFFFFFFFFLL)
    {
      if (!*(_QWORD *)a1)
        __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
      return sub_19C039400((uint64_t *)(a2 + 40), a1);
    }
  }
  return v3;
}

void sub_19C03BED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void sub_19C03BF28()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03BF3C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D188A0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03BF70(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D188A0;
  a2[1] = v2;
  return result;
}

void sub_19C03BF8C(uint64_t a1, char *a2, uint64_t a3)
{
  char v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 __p;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t *v20;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v13 = *(_QWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_19BF8CD70(&__p, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    __p = *(_OWORD *)(a3 + 8);
    v15 = *(_QWORD *)(a3 + 24);
  }
  v5 = v4[2];
  v6 = v4[1];
  if (v6 >= v5)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v8 + 1 > 0x555555555555555)
      sub_19BF8EB40();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 4);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    v20 = v4 + 2;
    if (v11)
      v11 = (unint64_t)sub_19C022808(v11);
    else
      v12 = 0;
    v16 = v11;
    v17 = (_BYTE *)(v11 + 48 * v8);
    v18 = v17;
    v19 = v11 + 48 * v12;
    sub_19C03C170(v17, v3, &v13);
    v18 += 48;
    sub_19C02284C(v4, &v16);
    v7 = v4[1];
    sub_19C02292C((uint64_t)&v16);
  }
  else
  {
    sub_19C03C170((_BYTE *)v4[1], v3, &v13);
    v7 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v7;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
}

void sub_19C03C0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03C128(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18900))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03C164()
{
  return &unk_1E3D18900;
}

_BYTE *sub_19C03C170(_BYTE *a1, char a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;

  *a1 = a2;
  v4 = (uint64_t)(a1 + 8);
  v6 = *a3;
  if (*((char *)a3 + 31) < 0)
  {
    sub_19BF8CD70(&v7, (void *)a3[1], a3[2]);
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 1);
    v8 = a3[3];
  }
  v9 = 4;
  sub_19C0477E0(v4, (uint64_t)&v6);
  sub_19BFC72B0((uint64_t)&v6);
  return a1;
}

void sub_19C03C1F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19C03C208(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  uint64_t v10[3];

  if (*(_BYTE *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (v7 = *v5) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19BFD4A40(a1, v10, a5, a2 + 136, *(_QWORD *)(a2 + 1512), *(_QWORD *)(a2 + 1520), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(_BYTE *)(a1 + 6) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 37) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19C03C2D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E3D18310;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 144))(a1, a2, v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

void sub_19C03C380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03C3C0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03C3D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18310;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03C408(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18310;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03C424(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C03C438(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18370))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03C474()
{
  return &unk_1E3D18370;
}

void sub_19C03C484()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03C498(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18920;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03C4CC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18920;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03C4E8(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t *v19;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a3;
  v6 = v4[1];
  v7 = v4[2];
  if (v6 >= v7)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555)
      sub_19BF8EB40();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v12;
    v19 = v4 + 2;
    if (v13)
      v13 = (unint64_t)sub_19C022808(v13);
    else
      v14 = 0;
    v15 = v13;
    v16 = (_BYTE *)(v13 + 48 * v10);
    v18 = v13 + 48 * v14;
    sub_19C03C66C(v16, v3, v5);
    v17 = v16 + 48;
    sub_19C02284C(v4, &v15);
    v9 = v4[1];
    result = sub_19C02292C((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_19C03C66C((_BYTE *)v4[1], *a2, *a3);
    v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19C03C604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03C624(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18980))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03C660()
{
  return &unk_1E3D18980;
}

_BYTE *sub_19C03C66C(_BYTE *a1, char a2, uint64_t a3)
{
  _QWORD v5[4];
  int v6;

  *a1 = a2;
  v5[0] = a3;
  v6 = 5;
  sub_19C0477E0((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19BFC72B0((uint64_t)v5);
  return a1;
}

void sub_19C03C6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19C03C6C8(uint64_t *a1, uint64_t a2)
{
  int v4;
  double result;
  int v6;
  double v7;
  unsigned int v8;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  result = 0.0;
  if (v4)
  {
    v8 = 0;
    v6 = sub_19BFB8AAC(a1 + 1, a2, &v8);
    result = 1.0;
    if (v6)
    {
      v7 = (double)(v8 >> 23) / 255.0;
      return v7 * v7;
    }
  }
  return result;
}

uint64_t sub_19C03C73C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E3D18390;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 144))(a1, a2, v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

void sub_19C03C7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03C824()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03C838(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18390;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03C86C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18390;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03C888(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C03C89C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18400))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03C8D8()
{
  return &unk_1E3D18400;
}

float sub_19C03C8E4(uint64_t a1, uint64_t a2, char a3)
{
  float v3;
  unint64_t v6;
  __int128 v8;
  char v9;

  v3 = 0.0;
  if (*(_DWORD *)(a1 + 12) != -1)
  {
    v8 = *(_OWORD *)a1;
    v9 = a3;
    *(_QWORD *)a1 = sub_19BFB8A28(a2 + 48, &v8, (uint64_t)&v9, 1);
    *(_QWORD *)(a1 + 8) = v6;
    if (v6 <= 0xFFFFFFFEFFFFFFFFLL)
    {
      if ((v6 & 0xFF00) != 0)
        __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
      return sub_19C03C6C8((uint64_t *)(a2 + 40), a1);
    }
  }
  return v3;
}

void sub_19C03C994()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03C9A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D189A0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03C9DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D189A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03C9F8(uint64_t a1, char *a2, __int128 *a3)
{
  char v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t *v19;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v14 = *a3;
  v5 = v4[1];
  v6 = v4[2];
  if (v5 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 4);
    if (v9 + 1 > 0x555555555555555)
      sub_19BF8EB40();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    v19 = v4 + 2;
    if (v12)
      v12 = (unint64_t)sub_19C022808(v12);
    else
      v13 = 0;
    v15 = v12;
    v16 = (_BYTE *)(v12 + 48 * v9);
    v17 = v16;
    v18 = v12 + 48 * v13;
    sub_19C03CB80(v16, v3, &v14);
    v17 += 48;
    sub_19C02284C(v4, &v15);
    v8 = v4[1];
    result = sub_19C02292C((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_19C03CB80((_BYTE *)v4[1], v3, &v14);
    v8 = v5 + 48;
    v4[1] = v5 + 48;
  }
  v4[1] = v8;
  return result;
}

void sub_19C03CB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03CB38(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18A00))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03CB74()
{
  return &unk_1E3D18A00;
}

_BYTE *sub_19C03CB80(_BYTE *a1, char a2, _OWORD *a3)
{
  _OWORD v5[2];
  int v6;

  *a1 = a2;
  v5[0] = *a3;
  v6 = 6;
  sub_19C0477E0((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19BFC72B0((uint64_t)v5);
  return a1;
}

void sub_19C03CBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFC72B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_19C03CBE0(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  uint64_t v10[3];

  if (*(_BYTE *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (v7 = *v5) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19BFD4A40(a1, v10, a5, a2 + 120, *(_QWORD *)(a2 + 1496), *(_QWORD *)(a2 + 1504), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(_BYTE *)(a1 + 6) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 37) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19C03CCB0(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v7 = *a2;
    v9 = 0;
    v10 = v7;
    v8 = sub_19C00FFE0(a1 + 1, "", &v10, &v9, 0);
    *a3 = v8;
    return v8 != -1;
  }
  return result;
}

uint64_t sub_19C03CD24(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E3D18420;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 144))(a1, a2, v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

void sub_19C03CDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03CE0C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03CE20(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18420;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03CE54(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18420;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03CE70(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C03CE84(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18480))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03CEC0()
{
  return &unk_1E3D18480;
}

uint64_t *sub_19C03CECC(uint64_t *result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char __s;
  unint64_t v7;
  uint64_t v8;

  v3 = *result;
  if (*result != -1)
  {
    v4 = result;
    __s = a3;
    v7 = 0;
    v8 = v3;
    result = (uint64_t *)sub_19C00FFE0((uint64_t *)(a2 + 48), &__s, &v8, &v7, 1uLL);
    v5 = v8;
    if ((_DWORD)result == -2)
      v5 = -1;
    *v4 = v5;
    if (!v5)
      __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
  }
  return result;
}

uint64_t sub_19C03CF50(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char __s;
  char v13;
  unint64_t v14;
  uint64_t v15;

  v5 = 0;
  v13 = 0;
  v6 = (uint64_t *)(a1 + 8);
  do
  {
    __s = v5;
    v7 = *a2;
    v14 = 0;
    v15 = v7;
    result = sub_19C00FFE0(v6, &__s, &v15, &v14, 1uLL);
    v9 = v15;
    if ((_DWORD)result == -2)
      v9 = -1;
    v15 = v9;
    if (v9 != -1)
    {
      LOBYTE(v14) = v5;
      v10 = *(_QWORD *)(a3 + 24);
      if (!v10)
        sub_19BF94AC4();
      result = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, char *))(*(_QWORD *)v10 + 48))(v10, &v14, &v15, &v13);
      if (v13)
        break;
    }
  }
  while (v5++ < 0xFF);
  return result;
}

void sub_19C03D01C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03D030(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18A20;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03D064(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18A20;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03D080(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t *v19;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a3;
  v6 = v4[1];
  v7 = v4[2];
  if (v6 >= v7)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555)
      sub_19BF8EB40();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v12;
    v19 = v4 + 2;
    if (v13)
      v13 = (unint64_t)sub_19C022808(v13);
    else
      v14 = 0;
    v15 = v13;
    v16 = (_BYTE *)(v13 + 48 * v10);
    v18 = v13 + 48 * v14;
    sub_19C03D204(v16, v3, v5);
    v17 = v16 + 48;
    sub_19C02284C(v4, &v15);
    v9 = v4[1];
    result = sub_19C02292C((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_19C03D204((_BYTE *)v4[1], *a2, *a3);
    v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19C03D19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03D1BC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18A80))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03D1F8()
{
  return &unk_1E3D18A80;
}

_BYTE *sub_19C03D204(_BYTE *a1, char a2, uint64_t a3)
{
  _QWORD v5[4];
  int v6;

  *a1 = a2;
  v5[0] = a3;
  v6 = 7;
  sub_19C0477E0((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19BFC72B0((uint64_t)v5);
  return a1;
}

void sub_19C03D24C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19C03D260(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  uint64_t v10[3];

  if (*(_BYTE *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (v7 = *v5) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19BFD4A40(a1, v10, a5, a2 + 144, *(_QWORD *)(a2 + 1520), *(_QWORD *)(a2 + 1528), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(_BYTE *)(a1 + 6) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 37) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19C03D330(_QWORD *a1, unsigned int *a2, int *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v7 = *a2;
    v8 = a1[3];
    v9 = *(_DWORD *)(v8 + 4 * v7);
    if ((v9 & 0x100) != 0)
      v10 = *(_DWORD *)(v8 + 4 * ((v9 >> 10 << ((v9 >> 6) & 8)) ^ v7)) & 0x7FFFFFFF;
    else
      v10 = -1;
    *a3 = v10;
    return v10 != -1;
  }
  return result;
}

uint64_t sub_19C03D3AC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E3D184A0;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 144))(a1, a2, v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

void sub_19C03D454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03D494()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03D4A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D184A0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03D4DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D184A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03D4F8(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C03D50C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18500))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03D548()
{
  return &unk_1E3D18500;
}

_QWORD *sub_19C03D554(_QWORD *result, uint64_t a2, int a3)
{
  uint64_t v3;

  if (*result != -1)
  {
    v3 = (*(_DWORD *)(a2 + 4 * *result) >> 10 << ((*(_DWORD *)(a2 + 4 * *result) >> 6) & 8)) ^ *result ^ a3;
    if ((*(_DWORD *)(a2 + 4 * v3) & 0x800000FF) == a3)
    {
      *result = v3;
      if (!(_DWORD)v3)
        __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
    }
    else
    {
      *result = -1;
    }
  }
  return result;
}

uint64_t sub_19C03D5CC(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  v5 = result;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v7 = *(_QWORD *)(v5 + 24);
    v8 = *(_DWORD *)(v7 + 4 * *a2);
    if (i == (*(_DWORD *)(v7 + 4 * ((v8 >> 10 << ((v8 >> 6) & 8)) ^ *a2 ^ i)) & 0x800000FF))
      break;
    if (i > 0xFE)
      return result;
LABEL_8:
    ;
  }
  v10 = (v8 >> 10 << ((v8 >> 6) & 8)) ^ *a2 ^ i;
  v12 = i;
  v9 = *(_QWORD *)(a3 + 24);
  if (!v9)
    sub_19BF94AC4();
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t *, char *))(*(_QWORD *)v9 + 48))(v9, &v12, &v10, &v11);
  if (!v11 && i < 0xFF)
    goto LABEL_8;
  return result;
}

void sub_19C03D690()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03D6A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18AA0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03D6D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18AA0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03D6F4(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t *v19;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a3;
  v6 = v4[1];
  v7 = v4[2];
  if (v6 >= v7)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555)
      sub_19BF8EB40();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v12;
    v19 = v4 + 2;
    if (v13)
      v13 = (unint64_t)sub_19C022808(v13);
    else
      v14 = 0;
    v15 = v13;
    v16 = (_BYTE *)(v13 + 48 * v10);
    v18 = v13 + 48 * v14;
    sub_19C03D878(v16, v3, v5);
    v17 = v16 + 48;
    sub_19C02284C(v4, &v15);
    v9 = v4[1];
    result = sub_19C02292C((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_19C03D878((_BYTE *)v4[1], *a2, *a3);
    v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19C03D810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03D830(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18B00))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03D86C()
{
  return &unk_1E3D18B00;
}

_BYTE *sub_19C03D878(_BYTE *a1, char a2, uint64_t a3)
{
  _QWORD v5[4];
  int v6;

  *a1 = a2;
  v5[0] = a3;
  v6 = 8;
  sub_19C0477E0((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19BFC72B0((uint64_t)v5);
  return a1;
}

void sub_19C03D8C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19C03D8D4(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  uint64_t v10[3];

  if (*(_BYTE *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (v7 = *v5) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19BFD4A40(a1, v10, a5, a2 + 80, *(_QWORD *)(a2 + 1456), *(_QWORD *)(a2 + 1464), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(_BYTE *)(a1 + 6) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 37) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19C03D9A4(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v7 = *a2;
    v9 = 0;
    v10 = v7;
    v8 = sub_19BFFEBD4(a1 + 8, (uint64_t)"", &v10, &v9, 0);
    *a3 = v8;
    return v8 != -1;
  }
  return result;
}

uint64_t sub_19C03DA18(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E3D18520;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 144))(a1, a2, v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

void sub_19C03DAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03DB00()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03DB14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18520;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03DB48(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18520;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03DB64(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C03DB78(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18580))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03DBB4()
{
  return &unk_1E3D18580;
}

unint64_t *sub_19C03DBC0(unint64_t *result, uint64_t a2, char a3)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *result;
  if (*result != -1)
  {
    v4 = result;
    v6 = a3;
    v7 = 0;
    v8 = v3;
    result = (unint64_t *)sub_19BFFEBD4(a2 + 48, (uint64_t)&v6, &v8, &v7, 1uLL);
    v5 = v8;
    if ((_DWORD)result == -2)
      v5 = -1;
    *v4 = v5;
    if (!v5)
      __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
  }
  return result;
}

uint64_t sub_19C03DC44(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  char v23;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
  if (!(_DWORD)result)
    return result;
  v21 = 0;
  v7 = a1[5];
  if (!v7)
    __assert_rtn("enumerateChildren", "cedarpp.h", 261, "_ninfo");
  v8 = *a2;
  v9 = HIDWORD(*a2);
  if (v9)
  {
    v10 = -(int)v9;
    if ((v10 & 0x80000000) != 0)
    {
LABEL_5:
      v11 = -v10;
      v12 = *(_BYTE *)(a1[3] + v11);
      if (v12)
      {
        v22 = (v11 << 32) + 0x100000000;
        v23 = v12;
        v13 = *(_QWORD *)(a3 + 24);
        if (v13)
          return (*(uint64_t (**)(uint64_t, char *, uint64_t *, char *))(*(_QWORD *)v13 + 48))(v13, &v23, &v22, &v21);
LABEL_23:
        sub_19BF94AC4();
      }
      return result;
    }
  }
  else
  {
    v10 = *(_DWORD *)(a1[2] + 8 * v8);
    if ((v10 & 0x80000000) != 0)
      goto LABEL_5;
  }
  v14 = v10;
  if (v8 && ((v15 = a1[2], *(int *)(v15 + 8 * v14) < 1) || *(_DWORD *)(v15 + 8 * v14 + 4) != (_DWORD)v8))
    v16 = (unsigned __int8 *)(v7 + 2 * v8 + 1);
  else
    v16 = (unsigned __int8 *)(v7 + 2 * v14);
  v17 = *v16;
  if (v17)
  {
    while (1)
    {
      v18 = v17 ^ v14;
      v22 = v18;
      v23 = v17;
      v19 = *(_QWORD *)(a3 + 24);
      if (!v19)
        break;
      result = (*(uint64_t (**)(uint64_t, char *, uint64_t *, char *))(*(_QWORD *)v19 + 48))(v19, &v23, &v22, &v21);
      v17 = *(unsigned __int8 *)(a1[5] + 2 * v18);
      if (v21)
        v20 = 1;
      else
        v20 = v17 == 0;
      if (v20)
        return result;
    }
    goto LABEL_23;
  }
  return result;
}

void sub_19C03DDB4()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03DDC8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18B20;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03DDFC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18B20;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03DE18(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t *v19;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a3;
  v6 = v4[1];
  v7 = v4[2];
  if (v6 >= v7)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555)
      sub_19BF8EB40();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v12;
    v19 = v4 + 2;
    if (v13)
      v13 = (unint64_t)sub_19C022808(v13);
    else
      v14 = 0;
    v15 = v13;
    v16 = (_BYTE *)(v13 + 48 * v10);
    v18 = v13 + 48 * v14;
    sub_19C03DF9C(v16, v3, v5);
    v17 = v16 + 48;
    sub_19C02284C(v4, &v15);
    v9 = v4[1];
    result = sub_19C02292C((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_19C03DF9C((_BYTE *)v4[1], *a2, *a3);
    v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19C03DF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03DF54(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18B80))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03DF90()
{
  return &unk_1E3D18B80;
}

_BYTE *sub_19C03DF9C(_BYTE *a1, char a2, uint64_t a3)
{
  _QWORD v5[4];
  int v6;

  *a1 = a2;
  v5[0] = a3;
  v6 = 9;
  sub_19C0477E0((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19BFC72B0((uint64_t)v5);
  return a1;
}

void sub_19C03DFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19C03DFF8(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  uint64_t v10[3];

  if (*(_BYTE *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (v7 = *v5) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19BFD4A40(a1, v10, a5, a2 + 648, *(_QWORD *)(a2 + 2024), *(_QWORD *)(a2 + 2032), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(_BYTE *)(a1 + 6) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 37) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19C03E0C8(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v8;

  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 112))(a1))
    return 0;
  v8 = 0;
  v6 = sub_19BF8F304(a1 + 2, a2, (uint64_t *)&v8);
  if ((_DWORD)v6)
    *a3 = sub_19C03E2EC((uint64_t)a1, v8);
  return v6;
}

uint64_t sub_19C03E144(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E3D185A0;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 144))(a1, a2, v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

void sub_19C03E1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03E22C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03E240(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D185A0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03E274(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D185A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03E290(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C03E2A4(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18600))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03E2E0()
{
  return &unk_1E3D18600;
}

unint64_t sub_19C03E2EC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  std::logic_error *exception;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (v2 <= a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_19BFADD78(exception, "Marisa Payload");
      __cxa_throw(exception, (struct type_info *)off_1E3D0FF68, MEMORY[0x1E0DE42E0]);
    }
    return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * a2);
  }
  return a2;
}

void sub_19C03E350(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C03E364(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  std::string v11;
  uint64_t v12;
  std::string __p;
  char v14;

  if (*a1 != 0xFFFFFFFFLL)
  {
    v7 = *a1;
    if (*((char *)a1 + 31) < 0)
    {
      sub_19BF8CD70(&v8, (void *)a1[1], a1[2]);
    }
    else
    {
      v8 = *(_OWORD *)(a1 + 1);
      v9 = a1[3];
    }
    v14 = a3;
    sub_19BF8F4E4((uint64_t *)(a2 + 56), (uint64_t)&v14, 1uLL, (uint64_t)&v7, &v10);
    v6 = v10;
    v12 = v10;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_19BF8CD70(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
      v6 = v12;
    }
    else
    {
      __p = v11;
    }
    *a1 = v6;
    std::string::operator=((std::string *)(a1 + 1), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v9) < 0)
      operator delete((void *)v8);
    if (!*a1)
      __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
  }
}

void sub_19C03E4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C03E4F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v8[0] = &off_1E3D1AC08;
    v8[1] = a3;
    v9 = v8;
    sub_19BF8F5A4(a1 + 2, a2, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  return result;
}

void sub_19C03E5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03E5EC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03E600(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D1AC08;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03E634(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D1AC08;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03E650(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    sub_19BF94AC4();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

uint64_t sub_19C03E690(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1AC68))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03E6CC()
{
  return &unk_1E3D1AC68;
}

void sub_19C03E6DC()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03E6F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18BA0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03E724(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18BA0;
  a2[1] = v2;
  return result;
}

void sub_19C03E740(uint64_t a1, char *a2, uint64_t a3)
{
  char v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 __p;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t *v20;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v13 = *(_QWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_19BF8CD70(&__p, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    __p = *(_OWORD *)(a3 + 8);
    v15 = *(_QWORD *)(a3 + 24);
  }
  v5 = v4[2];
  v6 = v4[1];
  if (v6 >= v5)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v8 + 1 > 0x555555555555555)
      sub_19BF8EB40();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 4);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    v20 = v4 + 2;
    if (v11)
      v11 = (unint64_t)sub_19C022808(v11);
    else
      v12 = 0;
    v16 = v11;
    v17 = (_BYTE *)(v11 + 48 * v8);
    v18 = v17;
    v19 = v11 + 48 * v12;
    sub_19C03E924(v17, v3, &v13);
    v18 += 48;
    sub_19C02284C(v4, &v16);
    v7 = v4[1];
    sub_19C02292C((uint64_t)&v16);
  }
  else
  {
    sub_19C03E924((_BYTE *)v4[1], v3, &v13);
    v7 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v7;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
}

void sub_19C03E8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 + 8) = v18;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03E8DC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18C00))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03E918()
{
  return &unk_1E3D18C00;
}

_BYTE *sub_19C03E924(_BYTE *a1, char a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;

  *a1 = a2;
  v4 = (uint64_t)(a1 + 8);
  v6 = *a3;
  if (*((char *)a3 + 31) < 0)
  {
    sub_19BF8CD70(&v7, (void *)a3[1], a3[2]);
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 1);
    v8 = a3[3];
  }
  v9 = 10;
  sub_19C0477E0(v4, (uint64_t)&v6);
  sub_19BFC72B0((uint64_t)&v6);
  return a1;
}

void sub_19C03E9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19C03E9BC(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  uint64_t v10[3];

  if (*(_BYTE *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (v7 = *v5) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19BFD4A40(a1, v10, a5, a2 + 104, *(_QWORD *)(a2 + 1480), *(_QWORD *)(a2 + 1488), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(_BYTE *)(a1 + 6) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 37) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19C03EA8C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E3D18620;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 144))(a1, a2, v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

void sub_19C03EB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03EB74()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03EB88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18620;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03EBBC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18620;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03EBD8(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C03EBEC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18680))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03EC28()
{
  return &unk_1E3D18680;
}

uint64_t sub_19C03EC34(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v3 = *a2;
  if (*a2 != -1)
  {
    v4 = result;
    v14 = 0;
    v5 = *(unsigned __int8 *)(*(_QWORD *)(result + 40) + 2 * v3);
    if (v5)
    {
      do
      {
        v8 = *(_QWORD *)(v4 + 24);
        v9 = *(_DWORD *)(v8 + 4 * *a2);
        v10 = (v9 >> 10 << ((v9 >> 6) & 8)) ^ *a2 ^ v5;
        if ((*(_DWORD *)(v8 + 4 * v10) & 0x800000FF) != v5)
          v10 = -1;
        v13 = v10;
        v15 = v5;
        v11 = *(_QWORD *)(a3 + 24);
        if (!v11)
          sub_19BF94AC4();
        result = (*(uint64_t (**)(uint64_t, char *, uint64_t *, char *))(*(_QWORD *)v11 + 48))(v11, &v15, &v13, &v14);
        if (v14)
          break;
        v12 = *(_QWORD *)(v4 + 40);
        v5 = *(unsigned __int8 *)(v12 + 2 * v13 + 1);
      }
      while (*(_BYTE *)(v12 + 2 * v13 + 1));
    }
  }
  return result;
}

void sub_19C03ED08()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03ED1C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18C20;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03ED50(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18C20;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03ED6C(uint64_t a1, char *a2, uint64_t *a3)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t *v19;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = *a3;
  v6 = v4[1];
  v7 = v4[2];
  if (v6 >= v7)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    if (v10 + 1 > 0x555555555555555)
      sub_19BF8EB40();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v4) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v12;
    v19 = v4 + 2;
    if (v13)
      v13 = (unint64_t)sub_19C022808(v13);
    else
      v14 = 0;
    v15 = v13;
    v16 = (_BYTE *)(v13 + 48 * v10);
    v18 = v13 + 48 * v14;
    sub_19C03EEF0(v16, v3, v5);
    v17 = v16 + 48;
    sub_19C02284C(v4, &v15);
    v9 = v4[1];
    result = sub_19C02292C((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_19C03EEF0((_BYTE *)v4[1], *a2, *a3);
    v9 = v6 + 48;
    v4[1] = v6 + 48;
  }
  v4[1] = v9;
  return result;
}

void sub_19C03EE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03EEA8(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18C80))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03EEE4()
{
  return &unk_1E3D18C80;
}

_BYTE *sub_19C03EEF0(_BYTE *a1, char a2, uint64_t a3)
{
  _QWORD v5[4];
  int v6;

  *a1 = a2;
  v5[0] = a3;
  v6 = 11;
  sub_19C0477E0((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19BFC72B0((uint64_t)v5);
  return a1;
}

void sub_19C03EF38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19BFC72B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C03EF4C(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;

  result = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v7 = sub_19BF9B0C8();
    v8 = sub_19BF9B284(v7, a1[1], a2);
    *a3 = v8;
    return v8 != 0;
  }
  return result;
}

uint64_t sub_19C03EFA4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6[0] = &off_1E3D186A0;
  v6[1] = &v5;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 144))(a1, a2, v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

void sub_19C03F04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C03F08C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03F0A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D186A0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03F0D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D186A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03F0F0(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
  **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t sub_19C03F104(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18700))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03F140()
{
  return &unk_1E3D18700;
}

uint64_t sub_19C03F14C(uint64_t result, uint64_t a2, char a3)
{
  _QWORD *v3;
  unint64_t v4;
  __int128 v5;
  char v6;

  if (*(_DWORD *)(result + 12) != -1)
  {
    v3 = (_QWORD *)result;
    v5 = *(_OWORD *)result;
    v6 = a3;
    result = sub_19C03F1D4(a2 + 40, &v5, (uint64_t)&v6, 1);
    *v3 = result;
    v3[1] = v4;
    if (v4 <= 0xFFFFFFFEFFFFFFFFLL && (v4 & 0xFF00) != 0)
      __assert_rtn("advance", "LXWordTrie.cpp", 62, "!is_root()");
  }
  return result;
}

uint64_t sub_19C03F1D4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v10 = *a2;
  if (!a4)
    return v10;
  v4 = a4;
  while (1)
  {
    v7 = sub_19BF9B0C8();
    *(_QWORD *)&v10 = sub_19BF9B23C(v7, *(_QWORD *)(a1 + 8), (uint64_t)&v10);
    *((_QWORD *)&v10 + 1) = v8;
    if (!sub_19BF9B2A8((uint64_t)&v10))
      break;
    ++a3;
    if (!--v4)
      return v10;
  }
  return 0;
}

void sub_19C03F258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[3];
  char v6;

  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2000000000;
  v6 = 0;
  v4 = sub_19BF9B0C8();
  sub_19BF9B26C(v4, *(_QWORD *)(a1 + 8), a2);
  _Block_object_dispose(v5, 8);
}

void sub_19C03F2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C03F30C(uint64_t a1, char a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v10;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v10 = a2;
  v7 = *(_QWORD *)(v5 + 24);
  if (!v7)
    sub_19BF94AC4();
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, &v10, a3, v6 + 24);
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19C03F374()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03F388(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D18D48;
  result[1] = v3;
  return result;
}

uint64_t sub_19C03F3BC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D18D48;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C03F3D8(uint64_t a1, char *a2, __int128 *a3)
{
  char v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t *v19;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v14 = *a3;
  v5 = v4[1];
  v6 = v4[2];
  if (v5 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *v4) >> 4);
    if (v9 + 1 > 0x555555555555555)
      sub_19BF8EB40();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v4) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    v19 = v4 + 2;
    if (v12)
      v12 = (unint64_t)sub_19C022808(v12);
    else
      v13 = 0;
    v15 = v12;
    v16 = (_BYTE *)(v12 + 48 * v9);
    v17 = v16;
    v18 = v12 + 48 * v13;
    sub_19C03F560(v16, v3, &v14);
    v17 += 48;
    sub_19C02284C(v4, &v15);
    v8 = v4[1];
    result = sub_19C02292C((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)sub_19C03F560((_BYTE *)v4[1], v3, &v14);
    v8 = v5 + 48;
    v4[1] = v5 + 48;
  }
  v4[1] = v8;
  return result;
}

void sub_19C03F4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C03F518(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18DA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C03F554()
{
  return &unk_1E3D18DA8;
}

_BYTE *sub_19C03F560(_BYTE *a1, char a2, _OWORD *a3)
{
  _OWORD v5[2];
  int v6;

  *a1 = a2;
  v5[0] = *a3;
  v6 = 12;
  sub_19C0477E0((uint64_t)(a1 + 8), (uint64_t)v5);
  sub_19BFC72B0((uint64_t)v5);
  return a1;
}

void sub_19C03F5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19BFC72B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_19C03F5C0(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  uint64_t v10[3];

  if (*(_BYTE *)a2 && (v5 = *(uint64_t **)(a2 + 24), v6 = v5[1], v6 > a3) && (v7 = *v5) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + a3);
    v10[0] = v7;
    v10[1] = v6;
    v10[2] = a3;
    *a4 = (v8 + a3) & (*(char *)(sub_19BFD4A40(a1, v10, a5, a2 + 88, *(_QWORD *)(a2 + 1464), *(_QWORD *)(a2 + 1472), *(_DWORD *)(a2 + 4))+ 44) >> 31);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 2) = 16;
    *(_BYTE *)(a1 + 6) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 37) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 64) = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return result;
}

uint64_t sub_19C03F690(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    sub_19C014608(v2);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    sub_19C014608(v3);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    sub_19C014608(v4);
  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
    sub_19C014608(result);
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 0;
  return result;
}

void sub_19C03F6F4(uint64_t a1, unsigned __int16 *a2)
{
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  LODWORD(v6) = 0x100000;
  WORD2(v6) = 0;
  BYTE6(v6) = 1;
  v7 = 0;
  sub_19BF8CA04(&v6, (uint64_t)".dat", 0, 4u);
  v4 = sub_19BF8CDFC(a2, (unsigned __int16 *)&v6);
  if (v7)
    v5 = BYTE6(v6) == 1;
  else
    v5 = 0;
  if (v5)
    free(v7);
  if (v4)
  {
    sub_19BF8CE58((_QWORD *)a1, a2, 0, (unsigned __int16)(*a2 - 3));
    sub_19BF86F84((unsigned __int16 *)a1, "idx", 0xFFFFuLL);
  }
  else
  {
    *(_DWORD *)a1 = 0x100000;
    *(_WORD *)(a1 + 4) = 0;
    *(_BYTE *)(a1 + 6) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
}

void sub_19C03F80C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19C03F838(int *a1, int a2, unsigned int a3)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  const char *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  uint32_t v11;
  int v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*a1 == a2 && a1[1] == a3)
  {
    if (a2 == 3)
    {
      if (a3 > 0xA)
        return 1;
      if (qword_1EE417930 != -1)
        dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
      v4 = qword_1EE417928;
      result = os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v6 = a1[1];
        v12 = 67109376;
        v13 = v6;
        v14 = 1024;
        v15 = 11;
        v7 = "minor version %u is not supported (%u required)";
LABEL_17:
        v10 = v4;
        v11 = 14;
LABEL_20:
        _os_log_error_impl(&dword_19BF85000, v10, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v12, v11);
        return 0;
      }
    }
    else
    {
      if (qword_1EE417930 != -1)
        dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
      v4 = qword_1EE417928;
      result = os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR);
      if (result)
      {
        v9 = *a1;
        v12 = 67109376;
        v13 = v9;
        v14 = 1024;
        v15 = 3;
        v7 = "major version %u does not match required version %u";
        goto LABEL_17;
      }
    }
  }
  else
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v8 = qword_1EE417928;
    result = os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR);
    if (result)
    {
      LOWORD(v12) = 0;
      v7 = "mismatched words and index file versions";
      v10 = v8;
      v11 = 2;
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t sub_19C03FA28(uint64_t result, uint64_t a2, unint64_t a3, unsigned int a4)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8[4];

  v4 = (_QWORD *)result;
  v8[3] = *MEMORY[0x1E0C80C00];
  if (a4 < 0x13)
  {
    result = operator new();
    *(_QWORD *)result = &off_1E3D14380;
    *(_BYTE *)(result + 8) = a4 > 0xD;
    *(_BYTE *)(result + 9) = a4 == 18;
    *v4 = result;
  }
  else
  {
    if (a3 <= 0x4F)
      __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
    if (a3 >= 0x54 && a2)
    {
      v5 = bswap32(*(_DWORD *)(a2 + 80));
      v8[0] = a2;
      v8[1] = a3;
      v8[2] = v5;
      if (v5 > a3)
        __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
      v6 = (_QWORD *)operator new();
      result = (uint64_t)sub_19BFF0538(v6, v8);
      *v4 = v6;
    }
    else
    {
      *(_QWORD *)result = 0;
    }
  }
  return result;
}

void sub_19C03FB74(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  _QWORD *v9;
  uint64_t v10;
  void *v13;
  NSObject *v14;
  uint64_t v15;

  MEMORY[0x1A1AD0CDC](v10, 0x91C4089455612);
  if (a2 == 1)
  {
    v13 = __cxa_begin_catch(a1);
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v14 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 16))(v13);
      LODWORD(a9) = 136315138;
      *(_QWORD *)((char *)&a9 + 4) = v15;
      _os_log_error_impl(&dword_19BF85000, v14, OS_LOG_TYPE_ERROR, "Failed to create metadata flags decoder: %s", (uint8_t *)&a9, 0xCu);
    }
    *v9 = 0;
    __cxa_end_catch();
    JUMPOUT(0x19C03FAFCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C03FC54(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  NSObject *v6;
  int v8;
  uint8_t v9[4];
  uint8_t v10[4];
  uint8_t versionArray[4];
  uint8_t buf[4];
  char *v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  char *v19;
  char v20[20];
  char v21[20];
  char v22[20];
  char versionString[20];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)v10 = 0;
  *(_DWORD *)versionArray = v2;
  ucol_getVersion();
  v3 = *(_DWORD *)(a1 + 16);
  v8 = 0;
  *(_DWORD *)v9 = v3;
  ucol_getUCAVersion();
  if (v2)
    v4 = 0;
  else
    v4 = v3 == 0;
  v5 = v4;
  if (!v4)
  {
    u_versionToString(versionArray, versionString);
    u_versionToString(v10, v22);
    u_versionToString(v9, v21);
    u_versionToString((const uint8_t *)&v8, v20);
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v6 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v13 = versionString;
      v14 = 2080;
      v15 = v22;
      v16 = 2080;
      v17 = v21;
      v18 = 2080;
      v19 = v20;
      _os_log_error_impl(&dword_19BF85000, v6, OS_LOG_TYPE_ERROR, "ICU version mismatch: file_collator=%s, loaded_collator=%s, file_uca=%s, loaded_uca=%s", buf, 0x2Au);
    }
  }
  return v5;
}

os_log_t sub_19C03FDC8()
{
  os_log_t result;

  result = os_log_create("com.apple.Lexicon", "WordTrie");
  qword_1EE417928 = (uint64_t)result;
  return result;
}

void sub_19C03FDF4(const std::error_code *a1, uint64_t a2)
{
  NSObject *v4;
  std::string *v5;
  std::string v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  std::string *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1->__val_)
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v4 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_DEFAULT))
    {
      std::error_code::message(&v6, a1);
      if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = &v6;
      else
        v5 = (std::string *)v6.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      v8 = "log_result_on_failure";
      v9 = 2080;
      v10 = a2;
      v11 = 2080;
      v12 = v5;
      _os_log_impl(&dword_19BF85000, v4, OS_LOG_TYPE_DEFAULT, "%s: %s: %s", buf, 0x20u);
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
}

_QWORD *sub_19C03FF1C(_QWORD *a1)
{
  *a1 = &off_1E3D1A4D8;
  sub_19C00EC40((uint64_t)(a1 + 1));
  return a1;
}

void sub_19C03FF4C(_QWORD *a1)
{
  *a1 = &off_1E3D1A4D8;
  sub_19C00EC40((uint64_t)(a1 + 1));
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C03FF8C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19BFA4428(a2, *(void **)(a1 + 8), 8 * *(_QWORD *)(a1 + 24));
}

BOOL sub_19C03FFA0(uint64_t a1, uint64_t **a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  int v29;
  void *__p;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;

  __p = 0;
  v3 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v33 = 0;
  v34 = 0;
  sub_19C0093E8((void **)&v35, v3);
  sub_19C00947C(&__p, v3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = v4;
      if (*((char *)v4 + 23) < 0)
        v6 = (uint64_t *)*v4;
      v7 = v36;
      if ((unint64_t)v36 >= v37)
      {
        v9 = v35;
        v10 = (uint64_t)&v36[-v35] >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          sub_19BF8EB40();
        v12 = v37 - v35;
        if ((uint64_t)(v37 - v35) >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)sub_19BFAC524(v13);
        else
          v14 = 0;
        v15 = (_QWORD *)(v13 + 8 * v10);
        *v15 = v6;
        v8 = (char *)(v15 + 1);
        if (v7 != (char *)v9)
        {
          do
          {
            v16 = *((_QWORD *)v7 - 1);
            v7 -= 8;
            *--v15 = v16;
          }
          while (v7 != (char *)v9);
          v7 = (char *)v35;
        }
        v35 = (uint64_t)v15;
        v37 = v13 + 8 * v14;
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_QWORD *)v36 = v6;
        v8 = v7 + 8;
      }
      v36 = v8;
      if (*((char *)v4 + 23) < 0)
        v17 = v4[1];
      else
        v17 = *((unsigned __int8 *)v4 + 23);
      v18 = v33;
      if (v33 >= v34)
      {
        v20 = (char *)__p;
        v21 = (v33 - (_BYTE *)__p) >> 3;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          sub_19BF8EB40();
        v23 = v34 - (_BYTE *)__p;
        if ((v34 - (_BYTE *)__p) >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)sub_19BF965C4((uint64_t)&v34, v24);
          v20 = (char *)__p;
          v18 = v33;
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        *(_QWORD *)v26 = v17;
        v19 = v26 + 8;
        while (v18 != v20)
        {
          v27 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *((_QWORD *)v26 - 1) = v27;
          v26 -= 8;
        }
        __p = v26;
        v33 = v19;
        v34 = &v25[8 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v33 = v17;
        v19 = v18 + 8;
      }
      v33 = v19;
      v4 += 3;
    }
    while (v4 != v5);
  }
  v28 = (void *)v35;
  v29 = sub_19C0109F0(a1 + 8, v3, v35, (uint64_t)__p, 0);
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
  if (v28)
    operator delete(v28);
  return v29 == 0;
}

void sub_19C040200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C040238(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  void *v44;
  _BOOL8 v45;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  void *__p;
  char *v53;
  char *v54;
  void *v55;
  uint64_t *v56;
  unint64_t v57;

  v6 = *a2;
  v5 = a2[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  __p = 0;
  v53 = 0;
  v54 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  sub_19C0093E8(&v55, v7);
  sub_19C00947C(&__p, v7);
  sub_19C009510((void **)&v49, v7);
  v48 = v7;
  if (v5 == v6)
  {
LABEL_60:
    v44 = (void *)v49;
    v45 = sub_19C0109F0(a1 + 8, v48, (uint64_t)v55, (uint64_t)__p, v49) == 0;
    if (!v44)
      goto LABEL_62;
    goto LABEL_61;
  }
  v8 = 0;
  if (v7 <= 1)
    v9 = 1;
  else
    v9 = v7;
  while (1)
  {
    v10 = *a2 + 24 * v8;
    if (*(char *)(v10 + 23) < 0)
      v10 = *(_QWORD *)v10;
    v11 = (char *)v56;
    if ((unint64_t)v56 >= v57)
    {
      v13 = (char *)v55;
      v14 = ((char *)v56 - (_BYTE *)v55) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_19BF8EB40();
      v16 = v57 - (_QWORD)v55;
      if ((uint64_t)(v57 - (_QWORD)v55) >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
        v17 = (unint64_t)sub_19BFAC524(v17);
      else
        v18 = 0;
      v19 = (uint64_t *)(v17 + 8 * v14);
      *v19 = v10;
      v12 = v19 + 1;
      if (v11 != v13)
      {
        do
        {
          v20 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *--v19 = v20;
        }
        while (v11 != v13);
        v11 = (char *)v55;
      }
      v55 = v19;
      v57 = v17 + 8 * v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v56 = v10;
      v12 = (uint64_t *)(v11 + 8);
    }
    v56 = v12;
    v21 = *a2 + 24 * v8;
    v22 = *(char *)(v21 + 23) < 0 ? *(_QWORD *)(v21 + 8) : *(unsigned __int8 *)(v21 + 23);
    v23 = v53;
    if (v53 >= v54)
    {
      v25 = (char *)__p;
      v26 = (v53 - (_BYTE *)__p) >> 3;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
        sub_19BF8EB40();
      v28 = v54 - (_BYTE *)__p;
      if ((v54 - (_BYTE *)__p) >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        v30 = (char *)sub_19BF965C4((uint64_t)&v54, v29);
        v25 = (char *)__p;
        v23 = v53;
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[8 * v26];
      *(_QWORD *)v31 = v22;
      v24 = v31 + 8;
      while (v23 != v25)
      {
        v32 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v31 - 1) = v32;
        v31 -= 8;
      }
      __p = v31;
      v53 = v24;
      v54 = &v30[8 * v29];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_QWORD *)v53 = v22;
      v24 = v23 + 8;
    }
    v53 = v24;
    v33 = *(_DWORD *)(*a3 + 4 * v8);
    if (v33 < 0)
      break;
    v34 = v50;
    if ((unint64_t)v50 >= v51)
    {
      v36 = (_DWORD *)v49;
      v37 = ((uint64_t)v50 - v49) >> 2;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 62)
        sub_19BF8EB40();
      v39 = v51 - v49;
      if ((uint64_t)(v51 - v49) >> 1 > v38)
        v38 = v39 >> 1;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
        v40 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v40 = (unint64_t)sub_19BFB3588(v40);
      else
        v41 = 0;
      v42 = (_DWORD *)(v40 + 4 * v37);
      *v42 = v33;
      v35 = v42 + 1;
      while (v34 != v36)
      {
        v43 = *--v34;
        *--v42 = v43;
      }
      v49 = (uint64_t)v42;
      v51 = v40 + 4 * v41;
      if (v36)
        operator delete(v36);
    }
    else
    {
      *v50 = v33;
      v35 = v34 + 1;
    }
    v50 = v35;
    if (++v8 == v9)
      goto LABEL_60;
  }
  v45 = 0;
  v44 = (void *)v49;
  if (v49)
LABEL_61:
    operator delete(v44);
LABEL_62:
  if (__p)
  {
    v53 = (char *)__p;
    operator delete(__p);
  }
  if (v55)
    operator delete(v55);
  return v45;
}

void sub_19C0405A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0405F4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;

  v5 = a3 >> 3;
  sub_19C00EC40(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 24) = v5;
  return 1;
}

uint64_t sub_19C04063C(uint64_t a1, char *__s, size_t a3, int *a4)
{
  char *v5;
  int *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  int *v12;
  int v13;

  v5 = __s;
  if (a3)
  {
    v7 = *(int **)(a1 + 8);
    v8 = *v7;
    goto LABEL_4;
  }
  a3 = strlen(__s);
  v7 = *(int **)(a1 + 8);
  v8 = *v7;
  if (a3)
  {
LABEL_4:
    while (1)
    {
      v9 = *v5++;
      v10 = (v8 + v9 + 1);
      if (v8 != v7[2 * v10 + 1])
        return 0;
      v8 = v7[2 * v10];
      if (!--a3)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    result = 0;
    v12 = &v7[2 * v8];
    if (v8 == v12[1])
    {
      v13 = *v12;
      if (v13 < 0)
      {
        if (v13)
        {
          *a4 = ~v13;
          return 1;
        }
      }
    }
  }
  return result;
}

size_t sub_19C0406F0(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  int **v9;
  size_t result;
  size_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;

  v7 = off_1EE414F28();
  result = sub_19C0108FC(v9, v8, v7, a3);
  v18 = 0;
  if (result)
  {
    v11 = result - 1;
    v12 = (_QWORD *)(v7 + 8);
    do
    {
      v13 = *((_DWORD *)v12 - 2);
      v15 = *v12;
      v12 += 2;
      v14 = v15;
      if (a3 >= v15)
        v16 = v14;
      else
        v16 = a3;
      result = sub_19BFB8D60(*(_QWORD *)(a4 + 24), v13, a2, v16, (uint64_t)&v18);
      if (v18)
        v17 = 1;
      else
        v17 = v11 == 0;
      --v11;
    }
    while (!v17);
  }
  return result;
}

void sub_19C040798(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  void **v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *__dst[2];
  unint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t *, const void *, size_t))(*(_QWORD *)a1 + 120))(a1, &v18, a2, a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v18))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    if (a3 >= 0x17)
    {
      v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v11 = a3 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)a3;
      v17 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v17) = a3;
      v10 = __dst;
      if (!a3)
      {
LABEL_10:
        *((_BYTE *)v10 + a3) = 0;
        v13 = operator new(0x28uLL);
        *v13 = &off_1E3D1A598;
        v13[1] = __dst;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        v20 = v13;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, &v18, v19, a5);
        v14 = v20;
        if (v20 == v19)
        {
          v15 = 4;
          v14 = v19;
        }
        else
        {
          if (!v20)
            goto LABEL_15;
          v15 = 5;
        }
        (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_15:
        if (SHIBYTE(v17) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19C04094C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0409A4()
{
  return 0;
}

BOOL sub_19C0409AC(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

uint64_t sub_19C0409BC(uint64_t a1, uint64_t *a2, char *__s, size_t a4)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v6 = 0;
  v7 = v4;
  if (sub_19C00FFE0((uint64_t *)(a1 + 8), __s, &v7, &v6, a4) == -2)
    return -1;
  else
    return v7;
}

uint64_t sub_19C040A04(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  void **v17;
  void *v18;
  char v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  void *__p[2];
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  unsigned __int128 v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2 != -1)
  {
    v7 = result;
    v30 = 0u;
    memset(v29, 0, sizeof(v29));
    __p[0] = 0;
    __p[1] = 0;
    v27 = 0;
    v28 = v4;
    sub_19C040CF8(v29, (__n128 *)__p);
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
    v25 = 0;
    if (*((_QWORD *)&v30 + 1))
    {
      while (1)
      {
        v8 = *((_QWORD *)&v29[0] + 1);
        v9 = v30;
        v10 = (unint64_t)v30 >> 7;
        v11 = *(_QWORD *)(*((_QWORD *)&v29[0] + 1) + 8 * ((unint64_t)v30 >> 7));
        v12 = v30 & 0x7F;
        v13 = (__int128 *)(v11 + 32 * v12);
        if (*((char *)v13 + 23) < 0)
        {
          sub_19BF8CD70(__p, *(void **)v13, *((_QWORD *)v13 + 1));
          v8 = *((_QWORD *)&v29[0] + 1);
          v9 = v30;
          v10 = (unint64_t)v30 >> 7;
        }
        else
        {
          v14 = *v13;
          v27 = *((_QWORD *)v13 + 2);
          *(_OWORD *)__p = v14;
        }
        v28 = *(_QWORD *)(v11 + 32 * v12 + 24);
        v15 = *(_QWORD *)(v8 + 8 * v10) + 32 * (v30 & 0x7F);
        if (*(char *)(v15 + 23) < 0)
        {
          operator delete(*(void **)v15);
          v9 = v30;
        }
        v16 = v9 + 1;
        v30 = __PAIR128__(*((unint64_t *)&v30 + 1), v16) + __PAIR128__(-1, 0);
        if (v16 >= 0x100)
        {
          operator delete(**((void ***)&v29[0] + 1));
          *((_QWORD *)&v29[0] + 1) += 8;
          *(_QWORD *)&v30 = v30 - 128;
        }
        v24 = 0;
        if (!(*(unsigned int (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v7 + 128))(v7, &v28, &v24))
          break;
        v17 = v27 >= 0 ? __p : (void **)__p[0];
        v18 = v27 >= 0 ? (void *)HIBYTE(v27) : __p[1];
        sub_19BFB8D60(*(_QWORD *)(a3 + 24), v24, (uint64_t)v17, (uint64_t)v18, (uint64_t)&v25);
        if (!v25)
          break;
        v19 = 1;
LABEL_31:
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
        if (*((_QWORD *)&v30 + 1))
          v23 = v19;
        else
          v23 = 1;
        if ((v23 & 1) != 0)
          return sub_19C008F34((uint64_t)v29);
      }
      if ((a4 & 0x80000000) != 0)
        goto LABEL_25;
      v20 = HIBYTE(v27);
      if (v27 < 0)
        v20 = (unint64_t)__p[1];
      if (v20 < a4)
      {
LABEL_25:
        v31[0] = &off_1E3D1A618;
        v31[1] = v29;
        v31[2] = __p;
        v32 = v31;
        (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v7 + 144))(v7, &v28, v31);
        v21 = v32;
        if (v32 == v31)
        {
          v21 = v31;
          v22 = 4;
          goto LABEL_29;
        }
        if (v32)
        {
          v22 = 5;
LABEL_29:
          (*(void (**)(void))(*v21 + 8 * v22))();
        }
      }
      v19 = 0;
      goto LABEL_31;
    }
    return sub_19C008F34((uint64_t)v29);
  }
  return result;
}

void sub_19C040C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a16 < 0)
    operator delete(__p);
  sub_19C008F34((uint64_t)&a18);
  _Unwind_Resume(a1);
}

__n128 sub_19C040CF8(_QWORD *a1, __n128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __n128 *v96;
  __n128 result;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = 16 * (v4 - v5) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x80)
    {
      a1[4] = v8 - 128;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)sub_19BFAC524(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)sub_19BFAC524(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v98 = 1;
            else
              v98 = (uint64_t)&v63[-*a1] >> 2;
            v99 = (char *)sub_19BFAC524(v98);
            v101 = &v99[8 * (v98 >> 2)];
            v102 = (uint64_t *)a1[1];
            v63 = v101;
            v103 = a1[2] - (_QWORD)v102;
            if (v103)
            {
              v63 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              v104 = 8 * (v103 >> 3);
              v105 = &v99[8 * (v98 >> 2)];
              do
              {
                v106 = *v102++;
                *(_QWORD *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v63;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)sub_19BFAC524(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v111 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v111;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)sub_19BFAC524(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v108 = v36;
      v111 = v38;
      operator delete(v30);
      v36 = v108;
    }
    v38 = v111;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)sub_19BFAC524(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v109 = v36;
            v113 = v38;
            operator delete(v78);
            v36 = v109;
            v38 = v113;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v110 = *((_QWORD *)&v36 + 1);
            v112 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v110;
            *(_QWORD *)&v38 = v112;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  v96 = (__n128 *)(*(_QWORD *)&v5[(v9 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v9 & 0x7F));
  result = *a2;
  v96[1].n128_u64[0] = a2[1].n128_u64[0];
  *v96 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  v96[1].n128_u64[1] = a2[1].n128_u64[1];
  ++a1[5];
  return result;
}

void sub_19C041268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void sub_19C04129C()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C0412B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D1A618;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C0412E8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D1A618;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19C041308(uint64_t a1, char *a2, uint64_t *a3)
{
  _QWORD *v4;
  __n128 __p;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD **)(a1 + 8);
  sub_19BFFC118((uint64_t)&__p, *(const void ***)(a1 + 16), *a2);
  v7 = *a3;
  sub_19C040CF8(v4, &__p);
  if (v6 < 0)
    operator delete((void *)__p.n128_u64[0]);
}

void sub_19C041360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C04137C(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1A678))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0413B8()
{
  return &unk_1E3D1A678;
}

void sub_19C0413C8()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C0413DC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D1A598;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C04141C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D1A598;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C041444(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 + 8);
  v9 = a1[3];
  v10 = v9 + v8;
  v11 = a1[1];
  v12 = *(char *)(v11 + 23);
  if (v12 < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    v11 = a1[1];
    v9 = a1[3];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
  v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  v15 = *(_QWORD *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    v11 = a1[1];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
LABEL_9:
  if ((v12 & 0x80) != 0)
    v11 = *(_QWORD *)v11;
  return sub_19BFB8D60(*(_QWORD *)(a1[4] + 24), *a2, v11, v10, a4);
}

uint64_t sub_19C041518(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1A5F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C041554()
{
  return &unk_1E3D1A5F8;
}

_QWORD *sub_19C041560(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D1A698;
  a1[1] = &off_1E3D13868;
  a1[2] = 0;
  a1[3] = 0;
  v2 = a1[4];
  if (v2)
  {
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8052888210);
    a1[4] = 0;
  }
  return a1;
}

void sub_19C0415B8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D1A698;
  a1[1] = &off_1E3D13868;
  a1[2] = 0;
  a1[3] = 0;
  v2 = a1[4];
  if (v2)
  {
    MEMORY[0x1A1AD0CB8](v2, 0x1000C8052888210);
    a1[4] = 0;
  }
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C041620(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  char *v27;
  unint64_t v28;

  v5 = a4;
  v6 = a3;
  v8 = a1;
  if (a5)
  {
    __p = 0;
    v27 = 0;
    v28 = 0;
    sub_19C009510(&__p, a2);
    v10 = (char *)__p;
    if (a2)
    {
      v23 = v8;
      v24 = v6;
      v25 = v5;
      v11 = 0;
      v13 = v27;
      v12 = v28;
      do
      {
        v14 = *(_QWORD *)(a5 + 8 * v11);
        if ((unint64_t)v13 >= v12)
        {
          v15 = (v13 - v10) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
          {
            v27 = v13;
            sub_19BF8EB40();
          }
          if ((uint64_t)(v12 - (_QWORD)v10) >> 1 > v16)
            v16 = (uint64_t)(v12 - (_QWORD)v10) >> 1;
          if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v17 = (unint64_t)sub_19BFB3588(v17);
          else
            v18 = 0;
          v19 = (char *)(v17 + 4 * v15);
          *(_DWORD *)v19 = v14;
          v20 = v19 + 4;
          while (v13 != v10)
          {
            v21 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v19 - 1) = v21;
            v19 -= 4;
          }
          v12 = v17 + 4 * v18;
          if (v10)
            operator delete(v10);
          v10 = v19;
          v13 = v20;
        }
        else
        {
          *(_DWORD *)v13 = v14;
          v13 += 4;
        }
        ++v11;
      }
      while (v11 != a2);
      v27 = v13;
      v28 = v12;
      __p = v10;
      v6 = v24;
      v5 = v25;
      v8 = v23;
    }
    sub_19C0095A4((_QWORD *)(v8 + 8), a2, v6, v5, (uint64_t)v10);
    if (__p)
      operator delete(__p);
  }
  else
  {
    sub_19C0095A4((_QWORD *)(a1 + 8), a2, a3, a4, 0);
  }
  return 1;
}

void sub_19C04179C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C0417CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19BFA4428(a2, *(void **)(a1 + 24), 4 * *(_QWORD *)(a1 + 16));
}

uint64_t sub_19C0417DC(uint64_t a1, uint64_t **a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *__p;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;

  __p = 0;
  v3 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v32 = 0;
  v33 = 0;
  sub_19C0093E8((void **)&v34, v3);
  sub_19C00947C(&__p, v3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = v4;
      if (*((char *)v4 + 23) < 0)
        v6 = (uint64_t *)*v4;
      v7 = v35;
      if ((unint64_t)v35 >= v36)
      {
        v9 = v34;
        v10 = (uint64_t)&v35[-v34] >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          sub_19BF8EB40();
        v12 = v36 - v34;
        if ((uint64_t)(v36 - v34) >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)sub_19BFAC524(v13);
        else
          v14 = 0;
        v15 = (_QWORD *)(v13 + 8 * v10);
        *v15 = v6;
        v8 = (char *)(v15 + 1);
        if (v7 != (char *)v9)
        {
          do
          {
            v16 = *((_QWORD *)v7 - 1);
            v7 -= 8;
            *--v15 = v16;
          }
          while (v7 != (char *)v9);
          v7 = (char *)v34;
        }
        v34 = (uint64_t)v15;
        v36 = v13 + 8 * v14;
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_QWORD *)v35 = v6;
        v8 = v7 + 8;
      }
      v35 = v8;
      if (*((char *)v4 + 23) < 0)
        v17 = v4[1];
      else
        v17 = *((unsigned __int8 *)v4 + 23);
      v18 = v32;
      if (v32 >= v33)
      {
        v20 = (char *)__p;
        v21 = (v32 - (_BYTE *)__p) >> 3;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          sub_19BF8EB40();
        v23 = v33 - (_BYTE *)__p;
        if ((v33 - (_BYTE *)__p) >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)sub_19BF965C4((uint64_t)&v33, v24);
          v20 = (char *)__p;
          v18 = v32;
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        *(_QWORD *)v26 = v17;
        v19 = v26 + 8;
        while (v18 != v20)
        {
          v27 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *((_QWORD *)v26 - 1) = v27;
          v26 -= 8;
        }
        __p = v26;
        v32 = v19;
        v33 = &v25[8 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_QWORD *)v32 = v17;
        v19 = v18 + 8;
      }
      v32 = v19;
      v4 += 3;
    }
    while (v4 != v5);
  }
  v28 = (void *)v34;
  sub_19C0095A4((_QWORD *)(a1 + 8), v3, v34, (uint64_t)__p, 0);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
  if (v28)
    operator delete(v28);
  return 1;
}

void sub_19C041A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C041A6C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  void *v44;
  void *v45;
  unint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  void *__p;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;

  v6 = *a2;
  v5 = a2[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  __p = 0;
  v53 = 0;
  v54 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  sub_19C0093E8((void **)&v55, v7);
  sub_19C00947C(&__p, v7);
  sub_19C009510((void **)&v49, v7);
  v48 = v7;
  if (v5 != v6)
  {
    v8 = 0;
    if (v7 <= 1)
      v9 = 1;
    else
      v9 = v7;
    do
    {
      v10 = *a2 + 24 * v8;
      if (*(char *)(v10 + 23) < 0)
        v10 = *(_QWORD *)v10;
      v11 = (char *)v56;
      if ((unint64_t)v56 >= v57)
      {
        v13 = v55;
        v14 = ((uint64_t)v56 - v55) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_19BF8EB40();
        v16 = v57 - v55;
        if ((uint64_t)(v57 - v55) >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v17 = (unint64_t)sub_19BFAC524(v17);
        else
          v18 = 0;
        v19 = (uint64_t *)(v17 + 8 * v14);
        *v19 = v10;
        v12 = v19 + 1;
        if (v11 != (char *)v13)
        {
          do
          {
            v20 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *--v19 = v20;
          }
          while (v11 != (char *)v13);
          v11 = (char *)v55;
        }
        v55 = (uint64_t)v19;
        v57 = v17 + 8 * v18;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v56 = v10;
        v12 = (uint64_t *)(v11 + 8);
      }
      v56 = v12;
      v21 = *a2 + 24 * v8;
      if (*(char *)(v21 + 23) < 0)
        v22 = *(_QWORD *)(v21 + 8);
      else
        v22 = *(unsigned __int8 *)(v21 + 23);
      v23 = v53;
      if (v53 >= v54)
      {
        v25 = (char *)__p;
        v26 = (v53 - (_BYTE *)__p) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          sub_19BF8EB40();
        v28 = v54 - (_BYTE *)__p;
        if ((v54 - (_BYTE *)__p) >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)sub_19BF965C4((uint64_t)&v54, v29);
          v25 = (char *)__p;
          v23 = v53;
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[8 * v26];
        *(_QWORD *)v31 = v22;
        v24 = v31 + 8;
        while (v23 != v25)
        {
          v32 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *((_QWORD *)v31 - 1) = v32;
          v31 -= 8;
        }
        __p = v31;
        v53 = v24;
        v54 = &v30[8 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)v53 = v22;
        v24 = v23 + 8;
      }
      v53 = v24;
      v33 = *(_DWORD *)(*a3 + 4 * v8);
      v34 = v50;
      if ((unint64_t)v50 >= v51)
      {
        v36 = (_DWORD *)v49;
        v37 = ((uint64_t)v50 - v49) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          sub_19BF8EB40();
        v39 = v51 - v49;
        if ((uint64_t)(v51 - v49) >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
          v40 = (unint64_t)sub_19BFB3588(v40);
        else
          v41 = 0;
        v42 = (_DWORD *)(v40 + 4 * v37);
        *v42 = v33;
        v35 = v42 + 1;
        while (v34 != v36)
        {
          v43 = *--v34;
          *--v42 = v43;
        }
        v49 = (uint64_t)v42;
        v51 = v40 + 4 * v41;
        if (v36)
          operator delete(v36);
      }
      else
      {
        *v50 = v33;
        v35 = v34 + 1;
      }
      v50 = v35;
      ++v8;
    }
    while (v8 != v9);
  }
  v44 = (void *)v55;
  v45 = (void *)v49;
  sub_19C0095A4((_QWORD *)(a1 + 8), v48, v55, (uint64_t)__p, v49);
  if (v45)
    operator delete(v45);
  if (__p)
  {
    v53 = (char *)__p;
    operator delete(__p);
  }
  if (v44)
    operator delete(v44);
  return 1;
}

void sub_19C041DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C041E10(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  a1[2] = 0;
  a1[3] = 0;
  v6 = a1[4];
  if (v6)
  {
    MEMORY[0x1A1AD0CB8](v6, 0x1000C8052888210);
    a1[4] = 0;
  }
  a1[2] = a3;
  a1[3] = a2;
  return 1;
}

BOOL sub_19C041E68(uint64_t a1, _BYTE *a2, uint64_t a3, int *a4)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  v4 = *(unsigned int **)(a1 + 24);
  v5 = *v4;
  if (a3)
  {
    v6 = 0;
    while (1)
    {
      v7 = *a2++;
      v6 ^= (v5 >> 10 << ((v5 >> 6) & 8)) ^ v7;
      v5 = v4[v6];
      if ((v5 & 0x800000FF) != v7)
        break;
      if (!--a3)
        goto LABEL_10;
    }
  }
  else
  {
    v8 = *a2;
    if (*a2)
    {
      v6 = 0;
      v9 = a2 + 1;
      while (1)
      {
        v6 ^= (v5 >> 10 << ((v5 >> 6) & 8)) ^ v8;
        v5 = v4[v6];
        if ((v5 & 0x800000FF) != v8)
          break;
        v10 = *v9++;
        v8 = v10;
        if (!v10)
        {
LABEL_10:
          if ((v5 & 0x100) != 0)
            goto LABEL_13;
          break;
        }
      }
    }
    else
    {
      v6 = 0;
      if ((v5 & 0x100) != 0)
      {
LABEL_13:
        v11 = v4[v6 ^ (v5 >> 10 << ((v5 >> 6) & 8))] & 0x7FFFFFFF;
        goto LABEL_14;
      }
    }
  }
  v11 = -1;
LABEL_14:
  *a4 = v11;
  return v11 != -1;
}

uint64_t sub_19C041F30(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  char v30;

  result = off_1EE414F40();
  v9 = *(_DWORD **)(v8 + 24);
  v10 = (*v9 >> 10 << ((*v9 >> 6) & 8));
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = a2[v12];
      v15 = v10 ^ v14;
      v16 = v9[v15];
      if ((v16 & 0x800000FF) != (_DWORD)v14)
        break;
      v10 = v15 ^ (v16 >> 10 << ((v16 >> 6) & 8));
      if ((v16 & 0x100) != 0)
      {
        if (v13 <= 0x7F)
        {
          v17 = result + 16 * v13;
          *(_DWORD *)v17 = v9[v10] & 0x7FFFFFFF;
          *(_QWORD *)(v17 + 8) = v12 + 1;
        }
        ++v13;
      }
      ++v12;
    }
    while (a3 != v12);
  }
  else
  {
    v18 = *a2;
    if (!*a2)
      return result;
    v13 = 0;
    v19 = 1;
    do
    {
      v20 = v10 ^ v18;
      v21 = v9[v20];
      if ((v21 & 0x800000FF) != v18)
        break;
      v10 = v20 ^ (v21 >> 10 << ((v21 >> 6) & 8));
      if ((v21 & 0x100) != 0)
      {
        if (v13 <= 0x7F)
        {
          v22 = result + 16 * v13;
          *(_DWORD *)v22 = v9[v10] & 0x7FFFFFFF;
          *(_QWORD *)(v22 + 8) = v19;
        }
        ++v13;
      }
      v18 = a2[v19++];
    }
    while (v18);
  }
  v30 = 0;
  if (v13)
  {
    v23 = v13 - 1;
    v24 = (_QWORD *)(result + 8);
    do
    {
      v25 = *((_DWORD *)v24 - 2);
      v27 = *v24;
      v24 += 2;
      v26 = v27;
      if (a3 >= v27)
        v28 = v26;
      else
        v28 = a3;
      result = sub_19BFB8D60(*(_QWORD *)(a4 + 24), v25, (uint64_t)a2, v28, (uint64_t)&v30);
      if (v30)
        v29 = 1;
      else
        v29 = v23 == 0;
      --v23;
    }
    while (!v29);
  }
  return result;
}

void sub_19C0420B8(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  void **v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *__dst[2];
  unint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t *, const void *, size_t))(*(_QWORD *)a1 + 120))(a1, &v18, a2, a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v18))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    if (a3 >= 0x17)
    {
      v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v11 = a3 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)a3;
      v17 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v17) = a3;
      v10 = __dst;
      if (!a3)
      {
LABEL_10:
        *((_BYTE *)v10 + a3) = 0;
        v13 = operator new(0x28uLL);
        *v13 = &off_1E3D1A758;
        v13[1] = __dst;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        v20 = v13;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, &v18, v19, a5);
        v14 = v20;
        if (v20 == v19)
        {
          v15 = 4;
          v14 = v19;
        }
        else
        {
          if (!v20)
            goto LABEL_15;
          v15 = 5;
        }
        (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_15:
        if (SHIBYTE(v17) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19C04226C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0422C4()
{
  return 0;
}

BOOL sub_19C0422CC(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

uint64_t sub_19C0422DC(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;

  result = *a2;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 4 * *a2);
  if (a4)
  {
    while (1)
    {
      v8 = *a3++;
      result = result ^ (v7 >> 10 << ((v7 >> 6) & 8)) ^ v8;
      v7 = *(_DWORD *)(v6 + 4 * result);
      if ((v7 & 0x800000FF) != v8)
        break;
      if (!--a4)
        return result;
    }
    return -1;
  }
  v9 = *a3;
  if (*a3)
  {
    v10 = a3 + 1;
    while (1)
    {
      result = result ^ v9 ^ (v7 >> 10 << ((v7 >> 6) & 8));
      v7 = *(_DWORD *)(v6 + 4 * result);
      if ((v7 & 0x800000FF) != v9)
        break;
      v11 = *v10++;
      v9 = v11;
      if (!v11)
        return result;
    }
    return -1;
  }
  return result;
}

uint64_t sub_19C042370(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  void **v17;
  void *v18;
  char v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  void *__p[2];
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  unsigned __int128 v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*a2 != -1)
  {
    v7 = result;
    v30 = 0u;
    memset(v29, 0, sizeof(v29));
    __p[0] = 0;
    __p[1] = 0;
    v27 = 0;
    v28 = v4;
    sub_19C042664(v29, (__n128 *)__p);
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
    v25 = 0;
    if (*((_QWORD *)&v30 + 1))
    {
      while (1)
      {
        v8 = *((_QWORD *)&v29[0] + 1);
        v9 = v30;
        v10 = (unint64_t)v30 >> 7;
        v11 = *(_QWORD *)(*((_QWORD *)&v29[0] + 1) + 8 * ((unint64_t)v30 >> 7));
        v12 = v30 & 0x7F;
        v13 = (__int128 *)(v11 + 32 * v12);
        if (*((char *)v13 + 23) < 0)
        {
          sub_19BF8CD70(__p, *(void **)v13, *((_QWORD *)v13 + 1));
          v8 = *((_QWORD *)&v29[0] + 1);
          v9 = v30;
          v10 = (unint64_t)v30 >> 7;
        }
        else
        {
          v14 = *v13;
          v27 = *((_QWORD *)v13 + 2);
          *(_OWORD *)__p = v14;
        }
        v28 = *(_QWORD *)(v11 + 32 * v12 + 24);
        v15 = *(_QWORD *)(v8 + 8 * v10) + 32 * (v30 & 0x7F);
        if (*(char *)(v15 + 23) < 0)
        {
          operator delete(*(void **)v15);
          v9 = v30;
        }
        v16 = v9 + 1;
        v30 = __PAIR128__(*((unint64_t *)&v30 + 1), v16) + __PAIR128__(-1, 0);
        if (v16 >= 0x100)
        {
          operator delete(**((void ***)&v29[0] + 1));
          *((_QWORD *)&v29[0] + 1) += 8;
          *(_QWORD *)&v30 = v30 - 128;
        }
        v24 = 0;
        if (!(*(unsigned int (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v7 + 128))(v7, &v28, &v24))
          break;
        v17 = v27 >= 0 ? __p : (void **)__p[0];
        v18 = v27 >= 0 ? (void *)HIBYTE(v27) : __p[1];
        sub_19BFB8D60(*(_QWORD *)(a3 + 24), v24, (uint64_t)v17, (uint64_t)v18, (uint64_t)&v25);
        if (!v25)
          break;
        v19 = 1;
LABEL_31:
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
        if (*((_QWORD *)&v30 + 1))
          v23 = v19;
        else
          v23 = 1;
        if ((v23 & 1) != 0)
          return sub_19C008F34((uint64_t)v29);
      }
      if ((a4 & 0x80000000) != 0)
        goto LABEL_25;
      v20 = HIBYTE(v27);
      if (v27 < 0)
        v20 = (unint64_t)__p[1];
      if (v20 < a4)
      {
LABEL_25:
        v31[0] = &off_1E3D1A7D8;
        v31[1] = v29;
        v31[2] = __p;
        v32 = v31;
        (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v7 + 144))(v7, &v28, v31);
        v21 = v32;
        if (v32 == v31)
        {
          v21 = v31;
          v22 = 4;
          goto LABEL_29;
        }
        if (v32)
        {
          v22 = 5;
LABEL_29:
          (*(void (**)(void))(*v21 + 8 * v22))();
        }
      }
      v19 = 0;
      goto LABEL_31;
    }
    return sub_19C008F34((uint64_t)v29);
  }
  return result;
}

void sub_19C0425F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a16 < 0)
    operator delete(__p);
  sub_19C008F34((uint64_t)&a18);
  _Unwind_Resume(a1);
}

__n128 sub_19C042664(_QWORD *a1, __n128 *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t i;
  _QWORD *v78;
  char *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __n128 *v96;
  __n128 result;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = 16 * (v4 - v5) - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x80)
    {
      a1[4] = v8 - 128;
      v12 = *(_QWORD *)v5;
      v10 = v5 + 8;
      v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1)
            v41 = 1;
          else
            v41 = (uint64_t)&v4[-*a1] >> 2;
          v42 = (char *)sub_19BFAC524(v41);
          v44 = &v42[8 * (v41 >> 2)];
          v45 = (uint64_t *)a1[1];
          v4 = v44;
          v46 = a1[2] - (_QWORD)v45;
          if (v46)
          {
            v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            v47 = 8 * (v46 >> 3);
            v48 = &v42[8 * (v41 >> 2)];
            do
            {
              v49 = *v45++;
              *(_QWORD *)v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v4 - v10;
          if (v4 == v10)
          {
            v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            v22 = (char *)a1[1];
          }
          v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    v23 = v6 >> 3;
    v24 = (char *)a1[3];
    v25 = (char *)*a1;
    v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      v27 = operator new(0x1000uLL);
      v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5)
            v51 = 1;
          else
            v51 = v26 >> 2;
          v52 = 2 * v51;
          v53 = (char *)sub_19BFAC524(v51);
          v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)a1[1];
          v56 = v5;
          v57 = a1[2] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v5;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v28;
        v62 = (char *)a1[1];
        v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1)
              v98 = 1;
            else
              v98 = (uint64_t)&v63[-*a1] >> 2;
            v99 = (char *)sub_19BFAC524(v98);
            v101 = &v99[8 * (v98 >> 2)];
            v102 = (uint64_t *)a1[1];
            v63 = v101;
            v103 = a1[2] - (_QWORD)v102;
            if (v103)
            {
              v63 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              v104 = 8 * (v103 >> 3);
              v105 = &v99[8 * (v98 >> 2)];
              do
              {
                v106 = *v102++;
                *(_QWORD *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v63;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              v63 = (char *)a1[2];
            }
          }
          else
          {
            v66 = v65 >> 3;
            v15 = v65 >> 3 < -1;
            v67 = (v65 >> 3) + 2;
            if (v15)
              v68 = v67;
            else
              v68 = v66 + 1;
            v69 = -(v68 >> 1);
            v70 = v68 >> 1;
            v71 = &v62[-8 * v70];
            v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              v62 = (char *)a1[1];
            }
            v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25)
      v29 = 1;
    else
      v29 = v26 >> 2;
    v30 = (char *)sub_19BFAC524(v29);
    v32 = v31;
    v33 = &v30[8 * v23];
    *(_QWORD *)&v34 = v30;
    *((_QWORD *)&v34 + 1) = v33;
    v111 = v34;
    v35 = operator new(0x1000uLL);
    *(_QWORD *)&v36 = v33;
    *((_QWORD *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      v37 = 8 * v23;
      *(_QWORD *)&v38 = v111;
      if (v6 >= 1)
      {
        v39 = v37 >> 3;
        if (v39 >= -1)
          v40 = v39 + 1;
        else
          v40 = v39 + 2;
        v33 -= 8 * (v40 >> 1);
        *(_QWORD *)&v36 = v33;
        *((_QWORD *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      v73 = v37 >> 2;
      if (v4 == v5)
        v74 = 1;
      else
        v74 = v73;
      v75 = (char *)sub_19BFAC524(v74);
      v33 = &v75[8 * (v74 >> 2)];
      *(_QWORD *)&v38 = v75;
      *((_QWORD *)&v38 + 1) = v33;
      *(_QWORD *)&v36 = v33;
      *((_QWORD *)&v36 + 1) = &v75[8 * v76];
      if (!v30)
        goto LABEL_56;
      v108 = v36;
      v111 = v38;
      operator delete(v30);
      v36 = v108;
    }
    v38 = v111;
LABEL_56:
    *(_QWORD *)v33 = v35;
    *(_QWORD *)&v36 = v36 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v78 = (_QWORD *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) == (_QWORD)v38)
      {
        v80 = (_BYTE *)v36;
        if ((unint64_t)v36 >= *((_QWORD *)&v36 + 1))
        {
          if (*((_QWORD *)&v36 + 1) == *((_QWORD *)&v38 + 1))
            v85 = 1;
          else
            v85 = (uint64_t)(*((_QWORD *)&v36 + 1) - *((_QWORD *)&v38 + 1)) >> 2;
          v86 = (char *)sub_19BFAC524(v85);
          v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          v88 = v79;
          v89 = v80 - (_BYTE *)v78;
          if (v80 != (_BYTE *)v78)
          {
            v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = 8 * (v89 >> 3);
            v91 = v79;
            v92 = v78;
            do
            {
              v93 = *v92++;
              *(_QWORD *)v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(_QWORD *)&v38 = v86;
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = v88;
          *((_QWORD *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            v109 = v36;
            v113 = v38;
            operator delete(v78);
            v36 = v109;
            v38 = v113;
          }
        }
        else
        {
          v81 = (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1)
            v82 = v81 + 1;
          else
            v82 = v81 + 2;
          v83 = v82 >> 1;
          v84 = v36 + 8 * (v82 >> 1);
          v79 = (char *)(v84 - (v36 - *((_QWORD *)&v38 + 1)));
          if ((_QWORD)v36 == *((_QWORD *)&v38 + 1))
          {
            v80 = (_BYTE *)*((_QWORD *)&v38 + 1);
          }
          else
          {
            v110 = *((_QWORD *)&v36 + 1);
            v112 = v38;
            memmove((void *)(v84 - (v36 - *((_QWORD *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((_QWORD *)&v38 + 1));
            *((_QWORD *)&v36 + 1) = v110;
            *(_QWORD *)&v38 = v112;
          }
          *((_QWORD *)&v38 + 1) = v79;
          *(_QWORD *)&v36 = &v80[8 * v83];
        }
      }
      else
      {
        v79 = (char *)*((_QWORD *)&v38 + 1);
      }
      v94 = *(_QWORD *)(i - 8);
      *((_QWORD *)v79 - 1) = v94;
      *((_QWORD *)&v38 + 1) -= 8;
    }
    v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95)
      operator delete(v95);
    goto LABEL_83;
  }
LABEL_84:
  v96 = (__n128 *)(*(_QWORD *)&v5[(v9 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v9 & 0x7F));
  result = *a2;
  v96[1].n128_u64[0] = a2[1].n128_u64[0];
  *v96 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  v96[1].n128_u64[1] = a2[1].n128_u64[1];
  ++a1[5];
  return result;
}

void sub_19C042BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void sub_19C042C08()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C042C1C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D1A7D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C042C54(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D1A7D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19C042C74(uint64_t a1, char *a2, uint64_t *a3)
{
  _QWORD *v4;
  __n128 __p;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD **)(a1 + 8);
  sub_19BFFC118((uint64_t)&__p, *(const void ***)(a1 + 16), *a2);
  v7 = *a3;
  sub_19C042664(v4, &__p);
  if (v6 < 0)
    operator delete((void *)__p.n128_u64[0]);
}

void sub_19C042CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C042CE8(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1A838))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C042D24()
{
  return &unk_1E3D1A838;
}

void sub_19C042D34()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C042D48(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D1A758;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C042D88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D1A758;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C042DB0(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 + 8);
  v9 = a1[3];
  v10 = v9 + v8;
  v11 = a1[1];
  v12 = *(char *)(v11 + 23);
  if (v12 < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    v11 = a1[1];
    v9 = a1[3];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
  v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  v15 = *(_QWORD *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    v11 = a1[1];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
LABEL_9:
  if ((v12 & 0x80) != 0)
    v11 = *(_QWORD *)v11;
  return sub_19BFB8D60(*(_QWORD *)(a1[4] + 24), *a2, v11, v10, a4);
}

uint64_t sub_19C042E84(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1A7B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C042EC0()
{
  return &unk_1E3D1A7B8;
}

_QWORD *sub_19C042ECC(_QWORD *a1)
{
  *a1 = &off_1E3D1A858;
  sub_19C042F04((uint64_t)(a1 + 1), 0);
  return a1;
}

void sub_19C042F04(uint64_t a1, int a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = a1 + 8;
  if (*(_DWORD *)(a1 + 76))
  {
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else if (*(_QWORD *)v4)
  {
    free(*(void **)v4);
  }
  v5 = *(void **)(a1 + 16);
  if (v5)
    free(v5);
  v6 = *(void **)(a1 + 24);
  if (v6)
    free(v6);
  v7 = *(void **)(a1 + 32);
  if (v7)
    free(v7);
  v8 = *(void **)(a1 + 40);
  if (v8)
    free(v8);
  *(_DWORD *)(v4 + 64) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  if (a2)
    sub_19C042F9C(a1);
  *(_DWORD *)(a1 + 76) = 0;
}

void sub_19C042F9C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  uint64_t j;

  v2 = (_QWORD *)(a1 + 8);
  sub_19C0430A4((void **)(a1 + 8), 256, 256);
  sub_19BFFC730((void **)(a1 + 16), 4, 0);
  sub_19BFFC7F4((void **)(a1 + 24), 1, 0);
  sub_19C0431AC((void **)(a1 + 32), 256, 0);
  sub_19C0432B0((void **)(a1 + 40), 1, 0);
  v3 = 0;
  **(_QWORD **)(a1 + 8) = 0xFFFFFFFF00000000;
  v4 = 0xFFFFFFFE00000000;
  for (i = 8; i != 2048; i += 8)
  {
    v6 = v3;
    if (i == 2040)
      v7 = 0xFFFFFFFF00000000;
    else
      v7 = v4;
    if (!v3)
      v6 = 4294967041;
    *(_QWORD *)(*v2 + i) = v7 | v6;
    v4 -= 0x100000000;
    --v3;
  }
  *(_QWORD *)(a1 + 60) = 0x10000000100;
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 16) = 1;
  **(_DWORD **)(a1 + 16) = 4;
  *(_QWORD *)(a1 + 68) = 0x100000004;
  *(_QWORD *)a1 = 0;
  for (j = 40; j != 297; ++j)
    *(_WORD *)(a1 + 2 * j) = j - 39;
}

void sub_19C0430A4(void **a1, int a2, int a3)
{
  void *v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = malloc_type_realloc(*a1, 8 * a2, 0x100004000313F17uLL);
  if (!v6)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v6;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE417980);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EE417980))
  {
    qword_1EE417978 = 0;
    __cxa_guard_release(&qword_1EE417980);
  }
  if (a3 != a2)
  {
    v8 = (uint64_t *)((char *)*a1 + 8 * a3);
    v9 = qword_1EE417978;
    v10 = 8 * a2 - 8 * a3;
    do
    {
      *v8++ = v9;
      v10 -= 8;
    }
    while (v10);
  }
}

void sub_19C0431AC(void **a1, int a2, int a3)
{
  void *v6;
  unsigned __int8 v7;
  __int16 *v8;
  __int16 v9;
  uint64_t v10;

  v6 = malloc_type_realloc(*a1, 2 * a2, 0x1000040BDFB0063uLL);
  if (!v6)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v6;
  v7 = atomic_load((unsigned __int8 *)&qword_1EE417990);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EE417990))
  {
    word_1EE417988 = 0;
    __cxa_guard_release(&qword_1EE417990);
  }
  if (a3 != a2)
  {
    v8 = (__int16 *)((char *)*a1 + 2 * a3);
    v9 = word_1EE417988;
    v10 = 2 * a2 - 2 * a3;
    do
    {
      *v8++ = v9;
      v10 -= 2;
    }
    while (v10);
  }
}

__n128 sub_19C0432B0(void **a1, int a2, int a3)
{
  void *v6;
  __n128 result;
  unsigned __int8 v8;
  __n128 *v9;
  uint64_t v10;

  v6 = malloc_type_realloc(*a1, 20 * a2, 0x1000040A86A77D5uLL);
  if (!v6)
  {
    free(*a1);
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "cedar: %s [%d]: %s", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/trie/cedarpp.h", 770, "memory reallocation failed\n");
    exit(1);
  }
  *a1 = v6;
  v8 = atomic_load((unsigned __int8 *)&qword_1EE4179B0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1EE4179B0))
  {
    *(_QWORD *)&xmmword_1EE417998 = 0;
    DWORD2(xmmword_1EE417998) = 16843008;
    *(_QWORD *)((char *)&xmmword_1EE417998 + 12) = 0;
    __cxa_guard_release(&qword_1EE4179B0);
  }
  if (a3 != a2)
  {
    v9 = (__n128 *)((char *)*a1 + 20 * a3);
    v10 = 20 * a2 - 20 * a3;
    do
    {
      result = (__n128)xmmword_1EE417998;
      v9[1].n128_u32[0] = dword_1EE4179A8;
      *v9 = result;
      v9 = (__n128 *)((char *)v9 + 20);
      v10 -= 20;
    }
    while (v10);
  }
  return result;
}

void sub_19C0433E8(_QWORD *a1)
{
  sub_19C042ECC(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C04340C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD v4[3];
  _QWORD v5[10];
  char v6;
  uint64_t v7;

  sub_19BFA0144((uint64_t)v4);
  std::ostream::write();
  std::ostream::write();
  sub_19BFAAA88(a1, (uint64_t)v5);
  v4[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v4[2] = v2;
  v5[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD0C7C](&v7);
}

void sub_19C0434E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  *(_QWORD *)(v29 + *(_QWORD *)(*MEMORY[0x1E0DE4F50] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD0C7C](&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_19C043554(uint64_t a1, _QWORD *a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  void *__p;
  void *v18;
  unint64_t v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  if (a2[1] != *a2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    LODWORD(v6) = 1;
    do
    {
      if ((unint64_t)v5 >= v4)
      {
        v8 = (v5 - v3) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v4 - (_QWORD)v3) >> 1 > v9)
          v9 = (uint64_t)(v4 - (_QWORD)v3) >> 1;
        if (v4 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)sub_19BFB3588(v10);
        else
          v11 = 0;
        v12 = (_DWORD *)(v10 + 4 * v8);
        *v12 = v6;
        v7 = v12 + 1;
        while (v5 != v3)
        {
          v13 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *--v12 = v13;
        }
        v4 = v10 + 4 * v11;
        __p = v12;
        v19 = v4;
        if (v3)
          operator delete(v3);
        v3 = (char *)v12;
      }
      else
      {
        *(_DWORD *)v5 = v6;
        v7 = v5 + 4;
      }
      v18 = v7;
      v6 = (v6 + 1);
      v5 = (char *)v7;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) >= v6);
  }
  v14 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)a1 + 64))(a1, a2, &__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19C0436B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0436D8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;

  v3 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) != (uint64_t)(a3[1] - *a3) >> 2)
    __assert_rtn("build", "CedarMinimalPrefixTrie.h", 78, "keys.size() == values.size()");
  if (v4 == v3)
  {
    v11 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    LODWORD(v11) = 1;
    do
    {
      v12 = (uint64_t **)(v3 + v8);
      if (*((char *)v12 + 23) < 0)
      {
        v14 = *v12;
        v13 = v12[1];
      }
      else
      {
        v13 = (uint64_t *)*((unsigned __int8 *)v12 + 23);
        v14 = (uint64_t *)v12;
      }
      v11 = v11 & (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 152))(a1, v14, v13, *a3 + v9);
      ++v10;
      v3 = *a2;
      v9 += 4;
      v8 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  sub_19C044250(a1 + 8);
  return v11;
}

uint64_t sub_19C0437EC(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t v3;

  v3 = a1 + 8;
  sub_19C044F40(a1 + 8, a2, a3 >> 3);
  sub_19C044250(v3);
  return 1;
}

BOOL sub_19C043820(uint64_t a1, uint64_t a2, unint64_t a3, int *a4)
{
  int v5;
  int v6;
  unint64_t v8;
  unint64_t v9;

  v8 = 0;
  v9 = 0;
  v5 = sub_19BFFEBD4(a1 + 8, a2, &v9, &v8, a3);
  if (v5 == -2)
    v6 = -1;
  else
    v6 = v5;
  *a4 = v6;
  return v6 != -1;
}

uint64_t sub_19C043870(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;

  v13 = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v12 = result;
  if (a3)
  {
    v9 = 0;
    do
    {
      v12 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, &v12, a2 + v9, 1);
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v12);
      if (!(_DWORD)result)
        break;
      v11 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)a1 + 128))(a1, &v12, &v11);
      if ((result & 1) != 0)
      {
        if (a3 >= v9 + 1)
          v10 = v9 + 1;
        else
          v10 = a3;
        result = sub_19BFB8D60(*(_QWORD *)(a4 + 24), v11, a2, v10, (uint64_t)&v13);
        ++v9;
        if (v13)
          return result;
      }
      else
      {
        ++v9;
      }
    }
    while (v9 != a3);
  }
  return result;
}

void sub_19C043960(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  void **v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *__dst[2];
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v19[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v18 = (*(uint64_t (**)(uint64_t, _QWORD *, const void *, size_t))(*(_QWORD *)a1 + 120))(a1, v19, a2, a3);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v18))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    if (a3 >= 0x17)
    {
      v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v11 = a3 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = (void *)a3;
      v17 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v17) = a3;
      v10 = __dst;
      if (!a3)
      {
LABEL_10:
        *((_BYTE *)v10 + a3) = 0;
        v13 = operator new(0x28uLL);
        *v13 = &off_1E3D1A948;
        v13[1] = __dst;
        v13[2] = a2;
        v13[3] = a3;
        v13[4] = a4;
        v20 = v13;
        (*(void (**)(uint64_t, uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 136))(a1, &v18, v19, a5);
        v14 = v20;
        if (v20 == v19)
        {
          v15 = 4;
          v14 = v19;
        }
        else
        {
          if (!v20)
            goto LABEL_15;
          v15 = 5;
        }
        (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_15:
        if (SHIBYTE(v17) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memmove(v10, a2, a3);
    goto LABEL_10;
  }
}

void sub_19C043B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C043B6C()
{
  return 0;
}

BOOL sub_19C043B74(uint64_t a1, _QWORD *a2)
{
  return *a2 != -1;
}

uint64_t sub_19C043B84(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v6 = 0;
  v7 = v4;
  if (sub_19BFFEBD4(a1 + 8, a3, &v7, &v6, a4) == -2)
    return -1;
  else
    return v7;
}

void sub_19C043BCC(_QWORD *a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::string::size_type size;
  char v16;
  std::string *p_p;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  std::string::size_type v32;
  char v33;
  std::string __p;
  std::string::size_type v35;
  unint64_t v36;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 112))(a1))
  {
    memset(&__p, 0, sizeof(__p));
    v35 = 0;
    v33 = 0;
    v8 = a1 + 1;
    v9 = *a2;
    v36 = *a2;
    v10 = sub_19BFFEAA0(a1 + 1, &v36, &v35);
    if (v10 != -2)
    {
      v11 = HIDWORD(v9);
      v31 = a3;
      v32 = a4;
      while (1)
      {
        v12 = v35;
        v13 = v36;
        v14 = HIDWORD(v36);
        if ((a4 & 0x80000000) != 0 || v35 <= v32)
        {
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __p.__r_.__value_.__l.__size_;
          if (size < v35)
          {
            std::string::resize(&__p, v35, 0);
            v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          if (v16 >= 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          p_p->__r_.__value_.__s.__data_[v12] = 0;
          v18 = v13;
          v19 = v12;
          if (v14)
          {
            v18 = v13;
            v30 = a4;
            v20 = a1[3];
            v21 = strlen((const char *)(v20 - *(int *)(a1[2] + 8 * v13)));
            if (v21 >= v12)
              v22 = v12;
            else
              v22 = v21;
            if (v12 >= v21)
              v19 = v12 - v21;
            else
              v19 = 0;
            v23 = v20 - v22;
            a4 = v30;
            memcpy((char *)p_p + v19, (const void *)(v23 + (v13 >> 32)), v22);
          }
          for (; v19; --v19)
          {
            v24 = a1[2];
            v25 = *(int *)(v24 + 8 * v18 + 4);
            *((_BYTE *)&p_p[-1].__r_.__value_.__r.__words[2] + v19 + 7) = *(_BYTE *)(v24 + 8 * v25) ^ v18;
            v18 = v25;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &__p;
          else
            v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          sub_19BFB8D60(*(_QWORD *)(v31 + 24), v10, (uint64_t)v26, v12, (uint64_t)&v33);
          v11 = HIDWORD(v9);
          v8 = a1 + 1;
        }
        if ((_DWORD)v14)
        {
          if (!v11)
          {
            v13 = v13;
            v27 = a1[2];
            v12 -= *(int *)(v27 + 8 * v13) + (uint64_t)(int)v14;
            break;
          }
          goto LABEL_3;
        }
        v27 = a1[2];
        v29 = *(int *)(v27 + 8 * v13);
        v28 = *(unsigned __int8 *)(a1[5] + 2 * v29);
        if (!*(_BYTE *)(a1[5] + 2 * v29))
          break;
LABEL_37:
        v36 = v29 ^ v28;
        v35 = v12 + 1;
        v10 = sub_19BFFEAA0(v8, &v36, &v35);
        if (v10 == -2)
          goto LABEL_3;
      }
      while (v13 != v9)
      {
        v28 = *(unsigned __int8 *)(a1[5] + 2 * v13);
        v13 = *(int *)(v27 + 8 * v13 + 4);
        --v12;
        if (v28)
        {
          v29 = *(int *)(v27 + 8 * v13);
          goto LABEL_37;
        }
      }
    }
LABEL_3:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19C043E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C043E4C(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned __int8 v22;
  BOOL v23;
  unint64_t v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int *v37;
  _DWORD **v38;
  int v39;
  int v40;
  int v41;
  int *v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  char *v46;
  char v47;
  _DWORD *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  char v57;

  if (a3)
  {
    v8 = a1 + 8;
    v51 = 0;
    if (!*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 48))
      sub_19C044250(a1 + 8);
    v9 = **(_DWORD **)(a1 + 16);
    if ((v9 & 0x80000000) == 0)
    {
      v10 = 0;
      while (a3 != v10)
      {
        v11 = sub_19C0444B8(v8, &v51, (unsigned __int8 *)(a2 + v10));
        v12 = v11;
        v51 = v11;
        ++v10;
        v9 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11);
        if (v9 < 0)
          goto LABEL_11;
      }
      v57 = 0;
      v17 = (unsigned __int8 *)&v57;
      goto LABEL_34;
    }
    v12 = 0;
    v10 = 0;
LABEL_11:
    v13 = -v9;
    if (v13 >= 4)
    {
      v14 = (unsigned __int8 *)(*(_QWORD *)(a1 + 24) + v13);
      v50 = &v14[-v10];
      v15 = v10;
      if (v10 < a3)
      {
        v15 = v10;
        while (1)
        {
          v16 = *v14++;
          if (*(unsigned __int8 *)(a2 + v15) != v16)
            break;
          if (a3 == ++v15)
            goto LABEL_19;
        }
      }
      if (v15 == a3)
      {
LABEL_19:
        v15 = a3;
        if (!v50[a3])
        {
          v30 = v50;
          goto LABEL_53;
        }
      }
      v49 = a4;
      if (HIDWORD(v12))
      {
        v51 = v12;
        v18 = -(uint64_t)*(int *)(*(_QWORD *)(a1 + 16) + 8 * v12);
        if (v13 > v18)
        {
          do
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a1 + 24) + v18);
            v51 = (int)sub_19C0444B8(v8, &v51, &v56);
            ++v18;
          }
          while (v13 != v18);
        }
      }
      v19 = v15 - v10;
      if (v15 > v10)
      {
        v20 = (unsigned __int8 *)(a2 + v10);
        v21 = v19;
        do
        {
          v22 = *v20++;
          v55 = v22;
          v51 = (int)sub_19C0444B8(v8, &v51, &v55);
          --v21;
        }
        while (v21);
      }
      if (v50[v15])
      {
        v54 = v50[v15];
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8 * (int)sub_19C0444B8(v8, &v51, &v54)) = v9 + ~(_DWORD)v19;
        v19 -= 4;
      }
      v23 = __CFADD__(v19, v13);
      v24 = v19 + v13;
      a4 = v49;
      if (!v23)
      {
        do
        {
          v25 = *(_DWORD *)(a1 + 80);
          v26 = *(int **)(a1 + 32);
          v27 = *v26 + 1;
          *v26 = v27;
          if (v25 == v27)
          {
            v28 = 2 * *(_DWORD *)(a1 + 80);
            *(_DWORD *)(a1 + 80) = v28;
            sub_19BFFC7F4((void **)(a1 + 32), v28, **(_DWORD **)(a1 + 32));
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * **(int **)(a1 + 32)) = v13;
          v13 += 5;
        }
        while (v13 <= v24);
      }
      if (v15 == a3)
      {
        v53 = 0;
        v17 = &v53;
LABEL_34:
        v29 = (char *)(*(_QWORD *)(a1 + 16) + 8 * (int)sub_19C0444B8(v8, &v51, v17));
LABEL_54:
        *(_DWORD *)v29 = *a4;
        return a3 != 0;
      }
      if (v50[v15])
      {
        v10 = v15 + 1;
      }
      else
      {
        v53 = 0;
        v31 = sub_19C0444B8(v8, &v51, &v53);
        v10 = v15 + 1;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8 * v31) += *(_DWORD *)&v50[v15 + 1];
      }
      v52 = *(_BYTE *)(a2 + v15);
      v12 = (int)sub_19C0444B8(v8, &v51, &v52);
    }
    if (a3 == v10)
    {
      v32 = *(int **)(a1 + 32);
      v33 = *v32;
      if ((_DWORD)v33)
      {
        v34 = v32[v33];
        *(_BYTE *)(*(_QWORD *)(a1 + 24) + v34) = 0;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8 * v12) = -(int)v34;
        --**(_DWORD **)(a1 + 32);
        v35 = v34 + *(_QWORD *)(a1 + 24);
        *(_DWORD *)(v35 + 1) = 0;
        v29 = (char *)(v35 + 1);
        goto LABEL_54;
      }
    }
    v36 = a3 - v10 + 5;
    v38 = (_DWORD **)(a1 + 24);
    v37 = *(int **)(a1 + 24);
    v39 = *(_DWORD *)(a1 + 76);
    v40 = *v37;
    if (v39 < *v37 + v36)
    {
      if (v39 <= v36)
        v41 = a3 - v10 + 5;
      else
        v41 = *(_DWORD *)(a1 + 76);
      *(_DWORD *)(a1 + 76) = v41 + v39;
      sub_19BFFC730((void **)(a1 + 24), v41 + v39, *v37);
      v40 = **(_DWORD **)(a1 + 24);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8 * v12) = -v40;
    v42 = *(int **)(a1 + 24);
    v43 = *v42;
    v44 = (char *)v42 + v43;
    v30 = (unsigned __int8 *)v42 + v43 - v10;
    v45 = a3 - v10;
    if (a3 > v10)
    {
      v46 = (char *)(a2 + v10);
      do
      {
        v47 = *v46++;
        *v44++ = v47;
        --v45;
      }
      while (v45);
      v42 = *v38;
      LODWORD(v43) = **v38;
    }
    *v42 = v43 + v36;
LABEL_53:
    v29 = (char *)&v30[a3 + 1];
    goto LABEL_54;
  }
  return a3 != 0;
}

uint64_t sub_19C04423C()
{
  return 0;
}

void sub_19C044244(uint64_t a1)
{
  sub_19C042F04(a1 + 8, 1);
}

void sub_19C044250(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  BOOL v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int16 *v25;
  __int16 v26;
  uint64_t v27;
  int *v28;
  int v29;
  int *v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  int *v34;

  v3 = *(_QWORD *)(a1 + 40);
  v2 = (void **)(a1 + 40);
  if (!v3)
  {
    sub_19C0432B0(v2, *(int *)(a1 + 64) >> 8, 0);
    *(_DWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 52) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    v19 = (int *)(a1 + 48);
    if (*(int *)(a1 + 64) >= 1)
    {
      v20 = 0;
      v21 = 0;
      v22 = *(_QWORD *)(a1 + 40);
      v23 = 256;
      while (1)
      {
        v24 = v22 + 20 * v20;
        *(_WORD *)(v24 + 8) = 0;
        v25 = (__int16 *)(v24 + 8);
        if ((int)v21 >= ((_DWORD)v20 << 8) + 256)
          break;
        v26 = 0;
        v27 = (int)v21;
        v28 = (int *)(*(_QWORD *)(a1 + 8) + 8 * (int)v21 + 4);
        do
        {
          v29 = *v28;
          v28 += 2;
          if (v29 < 0)
          {
            v16 = v26++ == 0;
            *v25 = v26;
            if (v16)
            {
              *(_DWORD *)(v22 + 20 * v20 + 16) = v21;
              v26 = 1;
            }
          }
          ++v27;
          LODWORD(v21) = v21 + 1;
        }
        while (v23 != v27);
        if (v26)
          v30 = (int *)(a1 + 56);
        else
          v30 = (int *)(a1 + 48);
        if (v26 == 1)
          v30 = (int *)(a1 + 52);
        v31 = *v30;
        if (*v30)
          goto LABEL_42;
        v32 = (_DWORD *)(v22 + 20 * v20);
        if (!v26)
        {
          v31 = 0;
          goto LABEL_43;
        }
        v33 = v20;
LABEL_46:
        *(_DWORD *)(v22 + 20 * v33 + 4) = v20;
        *v32 = v20;
        *v30 = v20++;
        v23 += 256;
        v21 = v27;
        if ((int)v27 >= *(_DWORD *)(a1 + 64))
          goto LABEL_2;
      }
      v31 = *v19;
      if (*v19)
      {
        v30 = (int *)(a1 + 48);
        v27 = v21;
LABEL_42:
        v32 = (_DWORD *)(v22 + 20 * v20);
LABEL_43:
        v21 = v27;
      }
      else
      {
        v32 = (_DWORD *)(v22 + 20 * v20);
        v30 = (int *)(a1 + 48);
      }
      v34 = (int *)(v22 + 20 * v31);
      *v32 = *v34;
      *(_DWORD *)(v22 + 20 * v20 + 4) = *v30;
      v33 = *v34;
      v27 = v21;
      v32 = v34;
      goto LABEL_46;
    }
  }
LABEL_2:
  v4 = (uint64_t *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 64);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_19C0431AC((void **)(a1 + 32), v5, 0);
    v5 = *(_DWORD *)(a1 + 64);
    if (v5 >= 1)
    {
      for (i = 0; i < v5; ++i)
      {
        v7 = *(_QWORD *)(a1 + 8);
        v8 = *(unsigned int *)(v7 + 8 * i + 4);
        if ((v8 & 0x80000000) == 0)
        {
          v9 = *(int *)(v7 + 8 * v8);
          v10 = (v9 ^ i);
          if (v9 != i)
          {
            v11 = *v4;
            v12 = *v4 + 2 * v8;
            v15 = *(unsigned __int8 *)(v12 + 1);
            v14 = (_BYTE *)(v12 + 1);
            v13 = v15;
            if ((_DWORD)v8)
              v16 = v13 == 0;
            else
              v16 = 0;
            if (!v16 || (v13 = 0, *(_DWORD *)(v7 + 8 * v9 + 4) == (_DWORD)v8))
            {
              if (v13 < v10)
              {
                do
                {
                  v17 = v9 ^ v13;
                  v13 = *(unsigned __int8 *)(v11 + 2 * (int)(v9 ^ v13));
                  if (*(_BYTE *)(v11 + 2 * v17))
                    v18 = v13 >= v10;
                  else
                    v18 = 1;
                }
                while (!v18);
                v14 = (_BYTE *)(v11 + 2 * v17);
              }
            }
            *(_BYTE *)(v11 + 2 * (int)((v9 ^ i) ^ v9)) = v13;
            *v14 = v10;
            v5 = *(_DWORD *)(a1 + 64);
          }
        }
      }
    }
  }
  *(_DWORD *)(a1 + 60) = v5;
  *(_DWORD *)(a1 + 68) = **(_DWORD **)(a1 + 16);
  *(_DWORD *)(a1 + 72) = 1;
}

uint64_t sub_19C0444B8(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  signed int *v39;
  signed int v40;
  signed int v41;
  uint64_t v42;
  signed int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  uint64_t v47;
  _WORD *v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unsigned __int8 *v56;
  int v57;
  unsigned __int8 v58;
  int v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  int *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE *v74;
  unsigned int v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  __int16 *v81;
  int v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _WORD *v88;
  int v89;
  int v90;
  int *v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  _QWORD *v99;
  int v100;
  _BYTE v101[256];
  uint64_t v102;

  v4 = a2;
  v102 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *a2;
  v8 = *(_DWORD *)(v6 + 8 * *a2);
  v9 = *a3;
  if (v8 < 0 || (v10 = v8 ^ v9, v11 = *(int *)(v6 + 8 * v10 + 4), (v11 & 0x80000000) != 0))
  {
    result = sub_19C044ACC(a1, *(_DWORD *)(v6 + 8 * *a2), *a3, v7);
    v22 = *a3;
    v23 = *(_QWORD *)(a1 + 32);
    v24 = v23 + 2 * *v4;
    v27 = *(unsigned __int8 *)(v24 + 1);
    v26 = (_BYTE *)(v24 + 1);
    v25 = v27;
    if ((v8 & 0x80000000) == 0 && v25 < v22)
    {
      do
      {
        v28 = result ^ v25 ^ v22;
        v25 = *(unsigned __int8 *)(v23 + 2 * v28);
        if (*(_BYTE *)(v23 + 2 * v28))
          v29 = v25 >= v22;
        else
          v29 = 1;
      }
      while (!v29);
      v26 = (_BYTE *)(v23 + 2 * v28);
    }
    *(_BYTE *)(v23 + 2 * (int)result) = v25;
    *v26 = v22;
  }
  else
  {
    result = v8 ^ v9;
    if ((_DWORD)v11 != (_DWORD)v7)
    {
      v13 = *(_DWORD *)(v6 + 8 * v11);
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(unsigned __int8 *)(v14 + 2 * v7 + 1);
      LOBYTE(v16) = v15;
      LOBYTE(v17) = *(_BYTE *)(v14 + 2 * v11 + 1);
      while (1)
      {
        v18 = 2 * (v13 ^ v17);
        v17 = *(unsigned __int8 *)(v14 + v18);
        if (!*(_BYTE *)(v14 + v18))
          break;
        v16 = *(unsigned __int8 *)(v14 + 2 * (v8 ^ v16));
        if (!v16)
        {
          v19 = a1;
          v20 = *(_DWORD *)(v6 + 8 * *a2);
          v21 = v9;
          goto LABEL_18;
        }
      }
      v19 = a1;
      v20 = *(_DWORD *)(v6 + 8 * v11);
      v15 = *(unsigned __int8 *)(v14 + 2 * v11 + 1);
      v21 = -1;
LABEL_18:
      v30 = sub_19BFFE7E4(v19, v101, v20, v15, v21);
      v31 = v30;
      if (v101 == v30)
      {
        v43 = sub_19C044C10(a1);
      }
      else
      {
        v99 = v4;
        v32 = *(_DWORD *)(a1 + 56);
        if (v32)
        {
          v33 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 20 * v32);
          v34 = (__int16)((_WORD)v30 - (unsigned __int16)v101 + 1);
          v97 = v33;
          v95 = v34;
          do
          {
            v35 = *(_QWORD *)(a1 + 40);
            v36 = v32;
            v37 = *(__int16 *)(v35 + 20 * v32 + 8);
            if (v37 >= v34 && v34 < *(__int16 *)(v35 + 20 * v32 + 10))
            {
              v38 = v35 + 20 * v32;
              v41 = *(_DWORD *)(v38 + 16);
              v39 = (signed int *)(v38 + 16);
              v40 = v41;
              v42 = *(_QWORD *)(a1 + 8);
              v43 = v41;
              do
              {
                v44 = v101;
                v4 = v99;
                while (1)
                {
                  v45 = *++v44;
                  if ((*(_DWORD *)(v42 + 8 * (v43 ^ v101[0] ^ v45) + 4) & 0x80000000) == 0)
                    break;
                  if (v44 == v31)
                  {
                    *v39 = v43;
                    goto LABEL_36;
                  }
                }
                v46 = *(_DWORD *)(v42 + 8 * v43 + 4);
                v43 = -v46;
              }
              while (v40 + v46);
            }
            *(_WORD *)(v35 + 20 * v36 + 10) = v34;
            v47 = a1 + 2 * v37;
            v49 = *(__int16 *)(v47 + 80);
            v48 = (_WORD *)(v47 + 80);
            if (v34 < v49)
              *v48 = v34;
            v50 = v35 + 20 * v36;
            v32 = *(_DWORD *)(v50 + 4);
            v51 = *(_DWORD *)(v50 + 12);
            *(_DWORD *)(v50 + 12) = v51 + 1;
            if (!v51)
            {
              sub_19BFFE89C(v35, v36, (_DWORD *)(a1 + 56), (int *)(a1 + 52));
              v34 = v95;
              v33 = v97;
            }
          }
          while (v36 != v33);
        }
        v43 = sub_19C044C4C(a1) << 8;
        v4 = v99;
LABEL_36:
        v10 = v8 ^ v9;
      }
      v94 = v43 ^ v101[0];
      LODWORD(v52) = *(_DWORD *)v4;
      if (v17)
        v53 = v8;
      else
        v53 = v13;
      if (!v17)
        LODWORD(v52) = v11;
      v100 = v52;
      if (v17 && v101[0] == v9)
      {
        v52 = (int)v52;
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 2 * (int)v52 + 1) = v9;
      }
      else
      {
        v52 = (int)v52;
      }
      v54 = v94;
      *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v52) = v94;
      if (v101 <= v31)
      {
        if (v9)
          v55 = -1;
        else
          v55 = 0;
        v93 = v55;
        v96 = v53;
        v98 = (uint64_t)v53 >> 8;
        v91 = (int *)(a1 + 52);
        v56 = v101;
        v92 = 2 * v10;
        while (1)
        {
          v57 = sub_19C044ACC(a1, v54, *v56, v100);
          if (v56 == v31)
            v58 = 0;
          else
            v58 = v56[1];
          v59 = v53 ^ *v56;
          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 2 * v57) = v58;
          if (v17 && v59 == (_DWORD)v10)
            goto LABEL_88;
          v60 = *(_QWORD *)(a1 + 8);
          v61 = (int *)(v60 + 8 * v57);
          v62 = v59;
          v63 = (int *)(v60 + 8 * v59);
          v64 = *v63;
          *v61 = *v63;
          if (v64 >= 1 && *v56)
          {
            v65 = *(_QWORD *)(a1 + 32);
            v66 = *(unsigned __int8 *)(v65 + 2 * v59 + 1);
            *(_BYTE *)(v65 + 2 * v57 + 1) = v66;
            v67 = *(_QWORD *)(a1 + 8);
            v68 = *v61;
            do
            {
              *(_DWORD *)(v67 + 8 * (v68 ^ v66) + 4) = v57;
              v68 = *v61;
              v66 = *(unsigned __int8 *)(v65 + 2 * (*v61 ^ v66));
            }
            while (v66);
          }
          v69 = *v4;
          if (!v17 && v59 == (_DWORD)v69)
          {
            *v4 = v57;
            v69 = v57;
          }
          v70 = v17 == 0;
          if (v59 != (_DWORD)v10)
            v70 = 0;
          if (!v70)
            break;
          v71 = *(_QWORD *)(a1 + 32);
          v72 = v71 + 2 * v69;
          v75 = *(unsigned __int8 *)(v72 + 1);
          v74 = (_BYTE *)(v72 + 1);
          LOBYTE(v73) = v75;
          if (v75 < v9)
          {
            do
            {
              v76 = v8 ^ v73;
              v73 = *(unsigned __int8 *)(v71 + 2 * v76);
              if (*(_BYTE *)(v71 + 2 * v76))
                v77 = v73 >= v9;
              else
                v77 = 1;
            }
            while (!v77);
            v74 = (_BYTE *)(v71 + 2 * v76);
          }
          *(_BYTE *)(v71 + v92) = v73;
          *v74 = v9;
          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 2 * v62 + 1) = 0;
          *v63 = v93;
          *(_DWORD *)(v60 + 8 * v62 + 4) = *v4;
LABEL_87:
          v53 = v96;
LABEL_88:
          if (++v56 > v31)
            goto LABEL_89;
        }
        v10 = (unint64_t)v4;
        v78 = *(_QWORD *)(a1 + 40);
        v79 = v98;
        v80 = v78 + 20 * (int)v98;
        v82 = *(unsigned __int16 *)(v80 + 8);
        v81 = (__int16 *)(v80 + 8);
        *v81 = v82 + 1;
        v83 = (int *)(v81 + 4);
        if (!v82)
        {
          *v83 = v59;
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v59) = -v59 | ((unint64_t)-v59 << 32);
          if (v59 >= 0x100)
          {
            sub_19BFFE89C(*(_QWORD *)(a1 + 40), v98, (_DWORD *)(a1 + 48), v91);
            v79 = v98;
          }
          goto LABEL_84;
        }
        v84 = *v83;
        v85 = *(_QWORD *)(a1 + 8);
        v86 = *(unsigned int *)(v85 + 8 * v84 + 4);
        *(_QWORD *)(v85 + 8 * v59) = -(int)v84 | (unint64_t)(v86 << 32);
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * -(int)v86) = -v59;
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * v84 + 4) = -v59;
        if (*v81 == 2)
        {
          v79 = v98;
          if (v59 < 0x100)
            goto LABEL_83;
        }
        else
        {
          v79 = v98;
          if (v59 < 0x100 || *(_DWORD *)(v78 + 20 * (int)v98 + 12) != 1)
            goto LABEL_83;
        }
        sub_19BFFE89C(*(_QWORD *)(a1 + 40), v79, v91, (int *)(a1 + 56));
        v79 = v98;
LABEL_83:
        *(_DWORD *)(v78 + 20 * v79 + 12) = 0;
LABEL_84:
        v87 = v78 + 20 * v79;
        v89 = *(__int16 *)(v87 + 10);
        v88 = (_WORD *)(v87 + 10);
        v90 = *(__int16 *)(a1 + 2 * *v81 + 80);
        if (v89 < v90)
          *v88 = v90;
        *(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v62) = 0;
        v4 = (_QWORD *)v10;
        LODWORD(v10) = v8 ^ v9;
        v54 = v94;
        goto LABEL_87;
      }
LABEL_89:
      if (v17)
        return v54 ^ v9;
      else
        return v10;
    }
  }
  return result;
}

uint64_t sub_19C044ACC(uint64_t a1, int a2, int a3, int a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  __int16 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  int *v24;
  int v25;

  if (a2 < 0)
    v8 = sub_19C044C10(a1);
  else
    v8 = a3 ^ a2;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = v8;
  v11 = (int *)(v9 + 8 * v8);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = (uint64_t)v8 >> 8;
  v14 = v12 + 20 * (v8 >> 8);
  v16 = *(_WORD *)(v14 + 8);
  v15 = (_WORD *)(v14 + 8);
  *v15 = v16 - 1;
  if (v16 == 1)
  {
    if (v10 < 0x100)
      goto LABEL_14;
    v23 = (_DWORD *)(a1 + 52);
    v24 = (int *)(a1 + 48);
    goto LABEL_13;
  }
  v17 = v9 + 8 * v10;
  v18 = *v11;
  *(_DWORD *)(v9 + 8 * -*v11 + 4) = *(_DWORD *)(v17 + 4);
  v19 = *(int *)(v17 + 4);
  *(_DWORD *)(v9 - 8 * v19) = v18;
  v20 = v12 + 20 * (int)v13;
  v22 = *(_DWORD *)(v20 + 16);
  v21 = (_DWORD *)(v20 + 16);
  if ((_DWORD)v10 == v22)
    *v21 = -(int)v19;
  if (v10 >= 0x100 && *v15 == 1 && *(_DWORD *)(v12 + 20 * (int)v13 + 12) != 1)
  {
    v23 = (_DWORD *)(a1 + 56);
    v24 = (int *)(a1 + 52);
    v12 = *(_QWORD *)(a1 + 40);
LABEL_13:
    sub_19BFFE89C(v12, v13, v23, v24);
  }
LABEL_14:
  if (a3)
    v25 = -1;
  else
    v25 = 0;
  *v11 = v25;
  *(_DWORD *)(v9 + 8 * v10 + 4) = a4;
  if (a2 < 0)
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8 * a4) = v10 ^ a3;
  return v10;
}

uint64_t sub_19C044C10(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 52);
  if (v1)
    return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 20 * v1 + 16);
  v1 = *(_DWORD *)(a1 + 56);
  if (v1)
    return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 20 * v1 + 16);
  else
    return sub_19C044C4C(a1) << 8;
}

uint64_t sub_19C044C4C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int v16;

  v2 = *(_DWORD *)(a1 + 64);
  if (v2 == *(_DWORD *)(a1 + 60))
  {
    *(_DWORD *)(a1 + 60) = 2 * v2;
    sub_19C0430A4((void **)(a1 + 8), 2 * v2, 2 * v2);
    sub_19C0431AC((void **)(a1 + 32), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 64));
    sub_19C0432B0((void **)(a1 + 40), *(int *)(a1 + 60) >> 8, *(int *)(a1 + 64) >> 8);
    v2 = *(_DWORD *)(a1 + 64);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 20 * (v2 >> 8) + 16) = v2;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v2) = (-255 - v2) | ((unint64_t)~v2 << 32);
  v3 = *(int *)(a1 + 64);
  v4 = v3 + 1;
  v5 = 0xFFFFFFFE00000000 - (v3 << 32);
  v6 = -(int)v3;
  do
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = v5 + v6;
    v7 = *(int *)(a1 + 64);
    v8 = v4++ - 1;
    v5 -= 0x100000000;
    --v6;
  }
  while (v8 < v7 + 253);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((int)v7 + 255)) = (-254 - v7) | ((unint64_t)-(int)v7 << 32);
  v9 = *(_DWORD *)(a1 + 64);
  v10 = v9 >> 8;
  v11 = *(_DWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = (uint64_t)v9 >> 8;
  v14 = (int *)(v12 + 20 * v10);
  if (v11)
  {
    v15 = (int *)(v12 + 20 * v11);
    *v14 = *v15;
    *(_DWORD *)(v12 + 20 * (int)v13 + 4) = *(_DWORD *)(a1 + 56);
    LODWORD(v13) = *v15;
    v14 = v15;
  }
  *(_DWORD *)(v12 + 20 * (int)v13 + 4) = v10;
  *v14 = v10;
  *(_DWORD *)(a1 + 56) = v10;
  v16 = *(_DWORD *)(a1 + 64) + 256;
  *(_DWORD *)(a1 + 64) = v16;
  return ((v16 >> 8) - 1);
}

void sub_19C044DA8()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C044DBC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D1A948;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C044DFC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D1A948;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C044E24(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 + 8);
  v9 = a1[3];
  v10 = v9 + v8;
  v11 = a1[1];
  v12 = *(char *)(v11 + 23);
  if (v12 < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    v11 = a1[1];
    v9 = a1[3];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
  v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  v15 = *(_QWORD *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    v11 = a1[1];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
LABEL_9:
  if ((v12 & 0x80) != 0)
    v11 = *(_QWORD *)v11;
  return sub_19BFB8D60(*(_QWORD *)(a1[4] + 24), *a2, v11, v10, a4);
}

uint64_t sub_19C044EF8(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1A9A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C044F34()
{
  return &unk_1E3D1A9A8;
}

void sub_19C044F40(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6;
  int v7;

  sub_19C042F04(a1, 0);
  if (a3)
    v6 = 8 * a3 - *a2;
  else
    v6 = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 8) = (char *)a2 + *a2;
  if ((v6 & 7) != 0)
    v7 = (v6 >> 3) + 1;
  else
    v7 = v6 >> 3;
  *(_DWORD *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 76) = 1;
}

_QWORD *sub_19C044FB4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D1A9C8;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_19BF8EFC8(a1 + 2);
  return a1;
}

void sub_19C044FFC(_QWORD *a1)
{
  sub_19C044FB4(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C045020@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  int v5;
  const std::string::value_type *v6;
  void **v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string::value_type __s[4];
  void *__p[2];
  int64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  sub_19BFA0144((uint64_t)v14);
  sub_19BF8F250(a1 + 2, (uint64_t)&v15);
  sub_19BFAAA88(__p, (uint64_t)v16);
  v4 = a1[4];
  if (v4)
  {
    v5 = HIBYTE(v13);
    if (v13 < 0)
      v5 = (int)__p[1];
    *(_DWORD *)__s = v5;
    v6 = (const std::string::value_type *)a1[3];
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    std::string::append(a2, __s, 4uLL);
    if (v13 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (v13 >= 0)
      v8 = HIBYTE(v13);
    else
      v8 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v7, v8);
    std::string::append(a2, v6, 4 * v4);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v13;
  }
  v14[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15 = v9;
  v16[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD0C7C](&v18);
}

void sub_19C045170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_19BFA0270((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0451B0(uint64_t a1, uint64_t **a2)
{
  return sub_19C045A24(a1, *a2, a2[1], 0);
}

uint64_t sub_19C0451C0(uint64_t a1, uint64_t **a2, int **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  void *v21;
  uint64_t v22;

  __p = 0;
  v21 = 0;
  v22 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (v6 - v5) != a3[1] - *a3)
    __assert_rtn("build", "MarisaTrie.h", 61, "keys.size() == values.size()");
  v9 = sub_19C045A24(a1, v5, v6, &__p);
  if ((_DWORD)v9)
  {
    sub_19BFF00C4((char **)(a1 + 40), 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    v10 = *(_QWORD *)(a1 + 40);
    v11 = (char *)a2[1] - (char *)*a2;
    if (v11)
    {
      v12 = v11 / 24;
      v13 = *a3;
      v14 = (uint64_t *)__p;
      if (v12 <= 1)
        v12 = 1;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        *(_DWORD *)(v10 + 4 * v17) = v15;
        --v12;
      }
      while (v12);
    }
    v18 = (*(_QWORD *)(a1 + 48) - v10) >> 2;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v18;
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_19C0452F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C045310(uint64_t *a1, _QWORD *a2, unint64_t a3)
{
  char *v7;
  uint64_t v8;

  if (a3 >= 0xF)
  {
    if (*a2 == 0x2065766F6C206557 && *(_QWORD *)((char *)a2 + 7) == 0x2E61736972614D20)
    {
      sub_19BF8F0D8(a1 + 2, (uint64_t)a2, a3);
      return 1;
    }
  }
  else if (a3 < 4)
  {
    return 0;
  }
  v7 = (char *)a2 + 4;
  v8 = *(unsigned int *)a2;
  sub_19BF8F0D8(a1 + 2, (uint64_t)a2 + 4, v8);
  a1[3] = (uint64_t)&v7[v8];
  a1[4] = (a3 - v8 - 4) >> 2;
  return 1;
}

uint64_t sub_19C0453C8(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  unint64_t v8;

  v8 = 0;
  v6 = sub_19BF8F364((uint64_t *)(a1 + 16), a2, a3, (uint64_t *)&v8);
  if ((_DWORD)v6)
    *a4 = sub_19C03E2EC(a1, v8);
  return v6;
}

_QWORD *sub_19C045424(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D1AA88;
  v6[1] = a1;
  v6[2] = a4;
  v7 = v6;
  sub_19BF8F424((uint64_t *)(a1 + 16), a2, a3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C0454C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C0454FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E3D1AB08;
  v7[1] = a1;
  v7[2] = a4;
  v8 = v7;
  sub_19BF8F484((unint64_t *)(a1 + 16), a2, a3, (uint64_t)v7, a5);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_19C045598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_19C0455D4@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL sub_19C0455E0(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

void sub_19C0455F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  sub_19BF8F4E4((uint64_t *)(a1 + 16), a3, a4, a2, a5);
}

_QWORD *sub_19C04560C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)(*(uint64_t (**)(unint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v10[0] = &off_1E3D1AB88;
    v10[1] = a1;
    v10[2] = a3;
    v11 = v10;
    sub_19BF8F544(a1 + 2, a2, (uint64_t)v10, a4);
    result = v11;
    if (v11 == v10)
    {
      v9 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  return result;
}

void sub_19C0456D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C045710()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C045724(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D1AB88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C04575C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D1AB88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C04577C(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *a3;
  v7 = a3[1];
  v8 = sub_19C03E2EC(*(_QWORD *)(a1 + 8), *a2);
  return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8, v6, v7, a4);
}

uint64_t sub_19C0457CC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1ABE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C045808()
{
  return &unk_1E3D1ABE8;
}

void sub_19C045818()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C04582C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D1AB08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C045864(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D1AB08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C045884(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *a3;
  v7 = a3[1];
  v8 = sub_19C03E2EC(*(_QWORD *)(a1 + 8), *a2);
  return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8, v6, v7, a4);
}

uint64_t sub_19C0458D4(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1AB68))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C045910()
{
  return &unk_1E3D1AB68;
}

void sub_19C045920()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C045934(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D1AA88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C04596C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D1AA88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C04598C(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  v6 = *a3;
  v7 = a3[1];
  v8 = sub_19C03E2EC(*(_QWORD *)(a1 + 8), *a2);
  return sub_19BFB8D60(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v8, v6, v7, a4);
}

uint64_t sub_19C0459DC(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1AAE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C045A18()
{
  return &unk_1E3D1AAE8;
}

uint64_t sub_19C045A24(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *__p;
  void *v23;
  char *v24;

  __p = 0;
  v23 = 0;
  v24 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = 0;
    v8 = 0;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        v10 = (uint64_t *)*v6;
        v9 = v6[1];
      }
      else
      {
        v9 = *((unsigned __int8 *)v6 + 23);
        v10 = v6;
      }
      if (v8 >= v24)
      {
        v12 = (v8 - v7) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          sub_19BF8EB40();
        v14 = v24 - v7;
        if ((v24 - v7) >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        v16 = (char *)sub_19BFAEDF0(v15);
        v18 = &v16[16 * v12];
        *(_QWORD *)v18 = v10;
        *((_QWORD *)v18 + 1) = v9;
        v19 = (char *)__p;
        v7 = v18;
        if (v8 != __p)
        {
          do
          {
            *((_OWORD *)v7 - 1) = *((_OWORD *)v8 - 1);
            v7 -= 16;
            v8 -= 16;
          }
          while (v8 != v19);
          v8 = v19;
        }
        v11 = v18 + 16;
        __p = v7;
        v24 = &v16[16 * v17];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *(_QWORD *)v8 = v10;
        *((_QWORD *)v8 + 1) = v9;
        v11 = v8 + 16;
      }
      v23 = v11;
      v6 += 3;
      v8 = (char *)v11;
    }
    while (v6 != a3);
  }
  sub_19BF8EFCC((uint64_t *)(a1 + 16), (uint64_t *)&__p, a4, *(_DWORD *)(a1 + 8));
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  return 1;
}

_QWORD *sub_19C045BD0(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  *a1 = &off_1E3D1AC88;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  *a1 = &off_1E3D1A698;
  a1[1] = &off_1E3D13868;
  a1[2] = 0;
  a1[3] = 0;
  v3 = a1[4];
  if (v3)
  {
    MEMORY[0x1A1AD0CB8](v3, 0x1000C8052888210);
    a1[4] = 0;
  }
  return a1;
}

void sub_19C045C48(_QWORD *a1)
{
  sub_19C045BD0(a1);
  JUMPOUT(0x1A1AD0CDCLL);
}

uint64_t sub_19C045C6C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_19C041620(a1, a2, a3, a4, a5);
  sub_19C045FDC(a1);
  return 1;
}

std::string *sub_19C045C98@<X0>(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  uint64_t v5;
  const std::string::value_type *v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string *v9;
  std::string *v10;
  std::string::size_type size;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string v18;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = a1[2];
  v4 = (const std::string::value_type *)a1[3];
  v6 = (const std::string::value_type *)a1[5];
  v7 = a1[6];
  memset(&v18, 0, sizeof(v18));
  std::string::resize(&v18, 4uLL, 0);
  v8 = 4 * v5;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v18;
  else
    v9 = (std::string *)v18.__r_.__value_.__r.__words[0];
  LODWORD(v9->__r_.__value_.__l.__data_) = v8;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v18;
  else
    v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    size = v18.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v10, size);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v13 = a1[5];
  v12 = a1[6];
  memset(&v18, 0, sizeof(v18));
  std::string::resize(&v18, 4uLL, 0);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v18;
  else
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
  LODWORD(v14->__r_.__value_.__l.__data_) = (unint64_t)(v12 - v13) >> 1;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v18;
  else
    v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    v16 = v18.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  std::string::append(a2, v4, v8);
  return std::string::append(a2, v6, v7 - (_QWORD)v6);
}

void sub_19C045DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C045E18(uint64_t a1, uint64_t **a2)
{
  sub_19C0417DC(a1, a2);
  sub_19C045FDC(a1);
  return 1;
}

uint64_t sub_19C045E44(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  sub_19C041A6C(a1, a2, a3);
  sub_19C045FDC(a1);
  return 1;
}

uint64_t sub_19C045E70(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char **v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  size_t v21;
  unint64_t v22;
  char *v23;

  v3 = a3 <= 3 || (a3 & 0xFFFFFFFFFFFFFFFCLL) == 4;
  v4 = !v3;
  if (!v3)
  {
    v7 = *a2;
    v6 = a2[1];
    v8 = a2 + 2;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      MEMORY[0x1A1AD0CB8](v9, 0x1000C8052888210);
      *(_QWORD *)(a1 + 32) = 0;
    }
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    v10 = (char *)v8 + v7;
    sub_19C00C2A8((char **)(a1 + 40), v6);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(char **)(a1 + 40);
    if (v6 <= (uint64_t)(v11 - (_QWORD)v12) >> 1)
    {
      v20 = *(char **)(a1 + 48);
      v16 = (char **)(a1 + 48);
      v19 = v20;
      v21 = v20 - v12;
      v22 = (v20 - v12) >> 1;
      if (v22 < v6)
      {
        if (v19 != v12)
        {
          memmove(v12, v10, v21);
          v12 = *v16;
        }
        v18 = 2 * v6 - 2 * v22;
        if (v22 == v6)
          goto LABEL_30;
        v15 = v12;
        v23 = &v10[2 * v22];
        goto LABEL_29;
      }
      v18 = 2 * v6;
      if (!(_DWORD)v6)
      {
LABEL_30:
        *v16 = &v12[v18];
        return v4;
      }
      v15 = v12;
    }
    else
    {
      if (v12)
      {
        *(_QWORD *)(a1 + 48) = v12;
        operator delete(v12);
        v11 = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
      if (v11 <= v6)
        v13 = v6;
      else
        v13 = v11;
      if (v11 >= 0x7FFFFFFFFFFFFFFELL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14 < 0)
        sub_19BF8EB40();
      v15 = (char *)sub_19BFAED5C(v14);
      v12 = v15;
      *(_QWORD *)(a1 + 48) = v15;
      v16 = (char **)(a1 + 48);
      *(v16 - 1) = v15;
      v16[1] = &v15[2 * v17];
      v18 = 2 * v6;
    }
    v23 = v10;
LABEL_29:
    memmove(v15, v23, v18);
    goto LABEL_30;
  }
  return v4;
}

void sub_19C045FDC(uint64_t a1)
{
  void **v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v2 = (void **)(a1 + 40);
  sub_19C00C2A8((char **)(a1 + 40), *(_QWORD *)(a1 + 16));
  v16 = 0;
  sub_19C04610C(a1, &v16);
  v4 = *(char **)(a1 + 40);
  v3 = *(char **)(a1 + 48);
  v5 = v3;
  while (v5 != v4)
  {
    v6 = v5;
    v7 = *(v5 - 2);
    v5 -= 2;
    if (v7 | *(v6 - 1))
      goto LABEL_6;
  }
  v6 = *(char **)(a1 + 40);
LABEL_6:
  if (v6 != v3)
  {
    v3 = v6;
    *(_QWORD *)(a1 + 48) = v6;
  }
  v8 = (v3 - v4) >> 1;
  if (v8 < (uint64_t)(*(_QWORD *)(a1 + 56) - (_QWORD)v4) >> 1)
  {
    if (v3 == v4)
    {
      v13 = 0;
      v11 = 2 * v8;
    }
    else
    {
      v9 = (char *)sub_19BFAED5C((v3 - v4) >> 1);
      v10 = *(char **)(a1 + 40);
      v3 = *(char **)(a1 + 48);
      v11 = (uint64_t)&v9[2 * v8];
      v13 = &v9[2 * v12];
      if (v3 != v10)
      {
        v14 = v11;
        do
        {
          v15 = *((_WORD *)v3 - 1);
          v3 -= 2;
          *(_WORD *)(v14 - 2) = v15;
          v14 -= 2;
        }
        while (v3 != v10);
        v3 = (char *)*v2;
        goto LABEL_16;
      }
    }
    v14 = v11;
LABEL_16:
    *(_QWORD *)(a1 + 40) = v14;
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v13;
    if (v3)
      operator delete(v3);
  }
}

void sub_19C0460FC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C0460E8);
}

_QWORD *sub_19C04610C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v7 = 0;
  v4 = operator new(0x28uLL);
  *v4 = &off_1E3D1AD48;
  v4[1] = &v8;
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = &v7;
  v10 = v4;
  sub_19C03D5CC(a1, a2, (uint64_t)v9);
  result = v10;
  if (v10 == v9)
  {
    v6 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_19C0461D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C046214()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C046228(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D1AD48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C046268(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D1AD48;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_19C046290(uint64_t a1, char *a2, _QWORD *a3)
{
  char v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *result;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE **)(a1 + 8);
  v8 = *(_QWORD *)(v6 + 40);
  if (*v7)
  {
    *(_BYTE *)(v8 + 2 * **(_QWORD **)(a1 + 32) + 1) = v5;
  }
  else
  {
    *(_BYTE *)(v8 + 2 * **(_QWORD **)(a1 + 24)) = v5;
    *v7 = 1;
  }
  result = sub_19C04610C(v6, a3);
  **(_QWORD **)(a1 + 32) = *a3;
  return result;
}

uint64_t sub_19C046308(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D1ADA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C046344()
{
  return &unk_1E3D1ADA8;
}

_QWORD *sub_19C046350(_QWORD *a1)
{
  *a1 = &off_1E3D17F58;
  sub_19BFB7A04(a1 + 1);
  return a1;
}

void sub_19C046380(_QWORD *a1)
{
  *a1 = &off_1E3D17F58;
  sub_19BFB7A04(a1 + 1);
  JUMPOUT(0x1A1AD0CDCLL);
}

BOOL sub_19C0463C0(uint64_t *a1, unint64_t a2, unsigned __int8 **a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  unsigned __int8 **v24;
  uint64_t *v25;
  void *__p;
  void *v27;
  unint64_t v28;
  int v29;
  void **p_p;

  (*(void (**)(uint64_t *, _QWORD, _QWORD))(*a1 + 72))(a1, 0, 0);
  if (!a1[1])
    __assert_rtn("build", "StaticBurstTrie.h", 64, "m_trie");
  v24 = a3;
  v25 = a4;
  __p = 0;
  v27 = 0;
  v28 = 0;
  if (a5)
  {
    p_p = &__p;
    if (a2)
    {
      v10 = 8 * a2;
      do
      {
        v29 = *a5;
        sub_19BFB8F9C((uint64_t *)&p_p, &v29);
        ++a5;
        v10 -= 8;
      }
      while (v10);
    }
  }
  else if (a2)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    LODWORD(v14) = 1;
    do
    {
      if ((unint64_t)v13 >= v12)
      {
        v16 = (v13 - v11) >> 2;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v12 - (_QWORD)v11) >> 1 > v17)
          v17 = (uint64_t)(v12 - (_QWORD)v11) >> 1;
        if (v12 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v18 = (unint64_t)sub_19BFB3588(v18);
        else
          v19 = 0;
        v20 = (_DWORD *)(v18 + 4 * v16);
        *v20 = v14;
        v15 = v20 + 1;
        while (v13 != v11)
        {
          v21 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *--v20 = v21;
        }
        v12 = v18 + 4 * v19;
        __p = v20;
        v28 = v12;
        if (v11)
          operator delete(v11);
        v11 = (char *)v20;
      }
      else
      {
        *(_DWORD *)v13 = v14;
        v15 = v13 + 4;
      }
      v27 = v15;
      v14 = (v14 + 1);
      v13 = (char *)v15;
    }
    while (v14 <= a2);
  }
  v22 = sub_19BFA527C(a1[1], a2, v24, v25, __p);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  return v22 == 0;
}

void sub_19C046588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C0465B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  size_t __len;

  __len = 0;
  v3 = (void *)sub_19BF9C284(*(_QWORD **)(a1 + 8), &__len);
  return sub_19BFA4428(a2, v3, __len);
}

BOOL sub_19C0465F4(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  int v40;
  uint64_t v42;
  char *__p;
  char *v44;
  char *v45;

  v3 = a1;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 72))(a1, 0, 0);
  if (!*(_QWORD *)(v3 + 8))
    __assert_rtn("build", "StaticBurstTrie.h", 78, "m_trie");
  if (a2[1] == *a2)
  {
    v4 = 0;
    v17 = 0;
    v39 = 0;
    v18 = 0;
    __p = 0;
    v45 = 0;
  }
  else
  {
    v42 = v3;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    LODWORD(v7) = 1;
    do
    {
      if ((unint64_t)v5 >= v6)
      {
        v9 = (v5 - v4) >> 2;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v6 - (_QWORD)v4) >> 1 > v10)
          v10 = (uint64_t)(v6 - (_QWORD)v4) >> 1;
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v11 = (unint64_t)sub_19BFB3588(v11);
        else
          v12 = 0;
        v13 = (char *)(v11 + 4 * v9);
        *(_DWORD *)v13 = v7;
        v8 = v13 + 4;
        while (v5 != v4)
        {
          v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        v6 = v11 + 4 * v12;
        if (v4)
          operator delete(v4);
        v4 = v13;
      }
      else
      {
        *(_DWORD *)v5 = v7;
        v8 = v5 + 4;
      }
      v7 = (v7 + 1);
      v16 = *a2;
      v15 = a2[1];
      v5 = v8;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v15 - *a2) >= v7);
    __p = 0;
    v44 = 0;
    v45 = 0;
    if (v16 == v15)
    {
      v17 = 0;
      v39 = 0;
      v18 = 0;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = v16;
        if (*((char *)v16 + 23) < 0)
          v20 = (uint64_t *)*v16;
        if ((unint64_t)v18 >= v19)
        {
          v21 = (v18 - v17) >> 3;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            sub_19BF8EB40();
          if ((uint64_t)(v19 - (_QWORD)v17) >> 2 > v22)
            v22 = (uint64_t)(v19 - (_QWORD)v17) >> 2;
          if (v19 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
            v23 = (unint64_t)sub_19BFAC524(v23);
          else
            v24 = 0;
          v25 = (char *)(v23 + 8 * v21);
          *(_QWORD *)v25 = v20;
          v26 = v25 + 8;
          while (v18 != v17)
          {
            v27 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *((_QWORD *)v25 - 1) = v27;
            v25 -= 8;
          }
          v19 = v23 + 8 * v24;
          if (v17)
            operator delete(v17);
          v17 = v25;
          v18 = v26;
        }
        else
        {
          *(_QWORD *)v18 = v20;
          v18 += 8;
        }
        if (*((char *)v16 + 23) < 0)
          v28 = v16[1];
        else
          v28 = *((unsigned __int8 *)v16 + 23);
        v29 = v44;
        if (v44 >= v45)
        {
          v31 = __p;
          v32 = (v44 - __p) >> 3;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61)
            sub_19BF8EB40();
          v34 = v45 - __p;
          if ((v45 - __p) >> 2 > v33)
            v33 = v34 >> 2;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            v36 = (char *)sub_19BF965C4((uint64_t)&v45, v35);
            v31 = __p;
            v29 = v44;
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[8 * v32];
          *(_QWORD *)v37 = v28;
          v30 = v37 + 8;
          while (v29 != v31)
          {
            v38 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *((_QWORD *)v37 - 1) = v38;
            v37 -= 8;
          }
          __p = v37;
          v45 = &v36[8 * v35];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *(_QWORD *)v44 = v28;
          v30 = v44 + 8;
        }
        v44 = v30;
        v16 += 3;
      }
      while (v16 != v15);
      v39 = (uint64_t *)__p;
    }
    v3 = v42;
  }
  v40 = sub_19BFA527C(*(_QWORD *)(v3 + 8), (v18 - v17) >> 3, (unsigned __int8 **)v17, v39, v4);
  if (__p)
    operator delete(__p);
  if (v17)
    operator delete(v17);
  if (v4)
    operator delete(v4);
  return v40 == 0;
}

void sub_19C04696C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;

  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      if (!v13)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  if (!v13)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v13);
  goto LABEL_5;
}

void sub_19C0469BC()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x19C046998);
  JUMPOUT(0x19C046990);
}

BOOL sub_19C0469CC(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  _QWORD *v45;
  char *__p;
  char *v47;
  char *v48;

  (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 72))(a1, 0, 0);
  if (!a1[1])
    __assert_rtn("build", "StaticBurstTrie.h", 96, "m_trie");
  v6 = *a2;
  v7 = a2[1];
  v9 = *(_DWORD **)a3;
  v8 = *(_DWORD **)(a3 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v7 - *a2) != ((uint64_t)v8 - *(_QWORD *)a3) >> 2)
    __assert_rtn("build", "StaticBurstTrie.h", 97, "keys.size() == values.size()");
  v45 = a1;
  if (v9 == v8)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      if ((unint64_t)v11 >= v12)
      {
        v14 = (v11 - v10) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          sub_19BF8EB40();
        if ((uint64_t)(v12 - (_QWORD)v10) >> 1 > v15)
          v15 = (uint64_t)(v12 - (_QWORD)v10) >> 1;
        if (v12 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v16 = (unint64_t)sub_19BFB3588(v16);
        else
          v17 = 0;
        v18 = (char *)(v16 + 4 * v14);
        *(_DWORD *)v18 = *v9;
        v13 = v18 + 4;
        while (v11 != v10)
        {
          v19 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        v12 = v16 + 4 * v17;
        if (v10)
          operator delete(v10);
        v10 = v18;
      }
      else
      {
        *(_DWORD *)v11 = *v9;
        v13 = v11 + 4;
      }
      ++v9;
      v11 = v13;
    }
    while (v9 != v8);
    v6 = *a2;
    v7 = a2[1];
  }
  __p = 0;
  v47 = 0;
  v48 = 0;
  if (v6 == v7)
  {
    v20 = 0;
    v42 = 0;
    v21 = 0;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = v6;
      if (*((char *)v6 + 23) < 0)
        v23 = (uint64_t *)*v6;
      if ((unint64_t)v21 >= v22)
      {
        v24 = (v21 - v20) >> 3;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61)
          sub_19BF8EB40();
        if ((uint64_t)(v22 - (_QWORD)v20) >> 2 > v25)
          v25 = (uint64_t)(v22 - (_QWORD)v20) >> 2;
        if (v22 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
          v26 = (unint64_t)sub_19BFAC524(v26);
        else
          v27 = 0;
        v28 = (char *)(v26 + 8 * v24);
        *(_QWORD *)v28 = v23;
        v29 = v28 + 8;
        while (v21 != v20)
        {
          v30 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v28 - 1) = v30;
          v28 -= 8;
        }
        v22 = v26 + 8 * v27;
        if (v20)
          operator delete(v20);
        v20 = v28;
        v21 = v29;
      }
      else
      {
        *(_QWORD *)v21 = v23;
        v21 += 8;
      }
      if (*((char *)v6 + 23) < 0)
        v31 = v6[1];
      else
        v31 = *((unsigned __int8 *)v6 + 23);
      v32 = v47;
      if (v47 >= v48)
      {
        v34 = __p;
        v35 = (v47 - __p) >> 3;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61)
          sub_19BF8EB40();
        v37 = v48 - __p;
        if ((v48 - __p) >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)sub_19BF965C4((uint64_t)&v48, v38);
          v34 = __p;
          v32 = v47;
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[8 * v35];
        *(_QWORD *)v40 = v31;
        v33 = v40 + 8;
        while (v32 != v34)
        {
          v41 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          *((_QWORD *)v40 - 1) = v41;
          v40 -= 8;
        }
        __p = v40;
        v48 = &v39[8 * v38];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_QWORD *)v47 = v31;
        v33 = v47 + 8;
      }
      v47 = v33;
      v6 += 3;
    }
    while (v6 != v7);
    v42 = (uint64_t *)__p;
  }
  v43 = sub_19BFA527C(v45[1], (v21 - v20) >> 3, (unsigned __int8 **)v20, v42, v10);
  if (__p)
    operator delete(__p);
  if (v20)
    operator delete(v20);
  if (v10)
    operator delete(v10);
  return v43 == 0;
}

void sub_19C046D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;

  if (__p)
  {
    operator delete(__p);
    if (!v14)
    {
LABEL_3:
      if (!v13)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  operator delete(v14);
  if (!v13)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v13);
  goto LABEL_5;
}

uint64_t sub_19C046DC8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  sub_19BF9C1BC(0, 0, a2, a3);
  v8[0] = &off_1E3D18CA0;
  v9 = v8;
  v10 = v4;
  sub_19BFB78E4((uint64_t)v11, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  sub_19BFB7948((uint64_t *)(a1 + 8), &v10);
  sub_19BFB7A04(&v10);
  return 1;
}

uint64_t sub_19C046E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];

  v11[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v11[1] = v8;
  v12[0] = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v11, a2, a3);
  v12[1] = v9;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v12, a4);
}

uint64_t sub_19C046F14(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  if (a3)
  {
    v7 = result;
    v17 = 0;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result);
    v16 = v8;
    v14 = 0;
    v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v7 + 120))(v7, &v15, a2, 1);
    v16 = v9;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 112))(v7, &v15);
    if ((_DWORD)result)
    {
      v10 = 0;
      do
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v7 + 128))(v7, &v15, &v14);
        if ((_DWORD)result)
        {
          if (a3 >= v10 + 1)
            v11 = v10 + 1;
          else
            v11 = a3;
          result = sub_19BFB8D60(*(_QWORD *)(a4 + 24), v14, a2, v11, (uint64_t)&v17);
          if (v17)
            v12 = 1;
          else
            v12 = v10 + 1 >= a3;
          ++v10;
          if (v12)
            return result;
        }
        else if (++v10 >= a3)
        {
          return result;
        }
        v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v7 + 120))(v7, &v15, a2 + v10, 1);
        v16 = v13;
        result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 112))(v7, &v15);
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

void sub_19C047044(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *__p[2];
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v23 = v10;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t *, const void *, size_t))(*(_QWORD *)a1 + 120))(a1, &v22, a2, a3);
  v23 = v11;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v22))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19BF8E4EC();
    if (a3 >= 0x17)
    {
      v13 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v13 = a3 | 7;
      v14 = v13 + 1;
      v12 = operator new(v13 + 1);
      __p[1] = (void *)a3;
      v21 = v14 | 0x8000000000000000;
      __p[0] = v12;
    }
    else
    {
      HIBYTE(v21) = a3;
      v12 = __p;
      if (!a3)
      {
LABEL_10:
        *((_BYTE *)v12 + a3) = 0;
        v15 = operator new(0x28uLL);
        *v15 = &off_1E3D18018;
        v15[1] = __p;
        v15[2] = a2;
        v15[3] = a3;
        v15[4] = a4;
        v25 = v15;
        (*(void (**)(uint64_t, uint64_t *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 136))(a1, &v22, v24, a5);
        v18 = v25;
        if (v25 == v24)
        {
          v19 = 4;
          v18 = v24;
        }
        else
        {
          if (!v25)
            goto LABEL_15;
          v19 = 5;
        }
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v18 + 8 * v19))(v18, v16, v17);
LABEL_15:
        if (SHIBYTE(v21) < 0)
          operator delete(__p[0]);
        return;
      }
    }
    memmove(v12, a2, a3);
    goto LABEL_10;
  }
}

void sub_19C047204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C04725C(uint64_t a1)
{
  return sub_19BF9B078(*(unsigned int **)(a1 + 8));
}

BOOL sub_19C047264(uint64_t a1, uint64_t a2)
{
  return sub_19BF9B2A8(a2);
}

void sub_19C04726C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  char v11;
  char v12;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
  {
    if (a4)
    {
      v10[0] = 0;
      v10[1] = v10;
      v10[2] = 0x2000000000;
      v11 = 0;
      sub_19BF9B0C8();
      off_1EE414EC8();
      sub_19BF9B254(v9, v8, a2);
      _Block_object_dispose(v10, 8);
    }
    else
    {
      LODWORD(v10[0]) = 0;
      v12 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 128))(a1, a2, v10))
        sub_19BFB8D60(*(_QWORD *)(a3 + 24), v10[0], 0, 0, (uint64_t)&v12);
    }
  }
}

void sub_19C047398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0473B0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;

  v6 = off_1EE414EC8();
  result = sub_19BFB8D60(*(_QWORD *)(v7 + 24), v8, v6, v9, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19C047414()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

__n128 sub_19C047428(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D18018;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C047468(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D18018;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C047490(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 + 8);
  v9 = a1[3];
  v10 = v9 + v8;
  v11 = a1[1];
  v12 = *(char *)(v11 + 23);
  if (v12 < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = *(const void **)a3;
  if (v13 < v10)
  {
    std::string::resize((std::string *)a1[1], v9 + v8, 0);
    v11 = a1[1];
    v9 = a1[3];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
  v15 = v11;
  if ((v12 & 0x80) == 0)
  {
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  v15 = *(_QWORD *)v11;
  if (v8)
  {
LABEL_8:
    memmove((void *)(v15 + v9), v14, v8);
    v11 = a1[1];
    LOBYTE(v12) = *(_BYTE *)(v11 + 23);
  }
LABEL_9:
  if ((v12 & 0x80) != 0)
    v11 = *(_QWORD *)v11;
  return sub_19BFB8D60(*(_QWORD *)(a1[4] + 24), *a2, v11, v10, a4);
}

uint64_t sub_19C047564(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18078))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C0475A0()
{
  return &unk_1E3D18078;
}

void sub_19C0475B0()
{
  JUMPOUT(0x1A1AD0CDCLL);
}

_QWORD *sub_19C0475C4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D18CA0;
  return result;
}

void sub_19C0475E8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D18CA0;
}

void sub_19C047600(uint64_t a1, void ***a2)
{
  sub_19BF9C24C(*a2);
}

uint64_t sub_19C047608(uint64_t a1, uint64_t a2)
{
  if (sub_19BFA2588(a2, (uint64_t)&unk_1E3D18D00))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C047644()
{
  return &unk_1E3D18D00;
}

uint64_t sub_19C047650(_DWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = a1[3588];
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, _DWORD *))off_1E3D18FC0[v2])(&v4, a1);
  a1[3588] = -1;
  bzero(a1, 0x3810uLL);
  result = sub_19BF87400((uint64_t)a1);
  a1[3588] = 0;
  return result;
}

void sub_19C0476BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = 0;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  do
  {
    *(_BYTE *)(a2 + 24 + v3) = *(_BYTE *)(a3 + 24 + v3);
    ++v3;
  }
  while (v3 != 4);
}

void sub_19C0476F8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_19C047704(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_19C047710(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void *sub_19C04771C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  __int128 v4;
  void *result;

  *a2 = *(_QWORD *)a3;
  v3 = a2 + 1;
  if (*(char *)(a3 + 31) < 0)
    return sub_19BF8CD70(v3, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  v4 = *(_OWORD *)(a3 + 8);
  v3[2] = *(_QWORD *)(a3 + 24);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_19C047754(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_19C047760(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void sub_19C04776C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_19C047778(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_19C047784(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void *sub_19C047790(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  __int128 v4;
  void *result;

  *a2 = *(_QWORD *)a3;
  v3 = a2 + 1;
  if (*(char *)(a3 + 31) < 0)
    return sub_19BF8CD70(v3, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  v4 = *(_OWORD *)(a3 + 8);
  v3[2] = *(_QWORD *)(a3 + 24);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_19C0477C8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_19C0477D4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t sub_19C0477E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 32) = -1;
  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3D18E20[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 32) = v3;
  }
  return a1;
}

void sub_19C047840(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFC72B0(v1);
  _Unwind_Resume(a1);
}

void sub_19C047854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = 0;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  do
  {
    *(_BYTE *)(a2 + 24 + v3) = *(_BYTE *)(a3 + 24 + v3);
    ++v3;
  }
  while (v3 != 4);
}

void sub_19C047890(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_19C04789C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_19C0478A8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void *sub_19C0478B4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  __int128 v4;
  void *result;

  *a2 = *(_QWORD *)a3;
  v3 = a2 + 1;
  if (*(char *)(a3 + 31) < 0)
    return sub_19BF8CD70(v3, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  v4 = *(_OWORD *)(a3 + 8);
  v3[2] = *(_QWORD *)(a3 + 24);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_19C0478EC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_19C0478F8(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void sub_19C047904(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_19C047910(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void sub_19C04791C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void *sub_19C047928(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  __int128 v4;
  void *result;

  *a2 = *(_QWORD *)a3;
  v3 = a2 + 1;
  if (*(char *)(a3 + 31) < 0)
    return sub_19BF8CD70(v3, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  v4 = *(_OWORD *)(a3 + 8);
  v3[2] = *(_QWORD *)(a3 + 24);
  *(_OWORD *)v3 = v4;
  return result;
}

void sub_19C047960(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_19C04796C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t sub_19C047978(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 32) = -1;
  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3D18E88[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 32) = v3;
  }
  return a1;
}

void sub_19C0479D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19BFC72B0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C0479EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  if (a2 != a1)
  {
    v3 = *(unsigned int *)(a1 + 32);
    v4 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v3 == -1)
    {
      if ((_DWORD)v4 == -1)
        return a1;
    }
    else if ((_DWORD)v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E3D18DB8[v3])(&v7, a1, a2);
      *(_DWORD *)(a1 + 32) = -1;
      return a1;
    }
    v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E3D18EF0[v4])(&v6, a1, a2);
  }
  return a1;
}

uint64_t sub_19C047A84(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v8, v4);
LABEL_8:
    v7 = 0;
    *(_DWORD *)(v4 + 32) = -1;
    *(_BYTE *)v4 = *(_BYTE *)a3;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a3 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a3 + 16);
    do
    {
      *(_BYTE *)(v4 + 24 + v7) = *(_BYTE *)(a3 + 24 + v7);
      ++v7;
    }
    while (v7 != 4);
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }
  *(_BYTE *)a2 = *(_BYTE *)a3;
  if (a2 != a3)
  {
    v6 = 0;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    do
    {
      *(_BYTE *)(a2 + 24 + v6) = *(_BYTE *)(a3 + 24 + v6);
      ++v6;
    }
    while (v6 != 4);
  }
  return result;
}

uint64_t sub_19C047B60(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

uint64_t sub_19C047BD4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 2;
  return result;
}

uint64_t sub_19C047C48(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 3;
  return result;
}

std::string *sub_19C047CBC(uint64_t *a1, uint64_t a2, std::string *__str)
{
  uint64_t v4;
  uint64_t v5;
  std::string *result;
  __int128 v7;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *(_QWORD *)a2 = __str->__r_.__value_.__r.__words[0];
      return std::string::operator=((std::string *)(a2 + 8), (const std::string *)&__str->__r_.__value_.__r.__words[1]);
    }
    ((void (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)v4 = __str->__r_.__value_.__r.__words[0];
  result = (std::string *)(v4 + 8);
  if (__str[1].__r_.__value_.__s.__data_[7] < 0)
  {
    result = (std::string *)sub_19BF8CD70(result, (void *)__str->__r_.__value_.__l.__size_, __str->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v7 = *(_OWORD *)&__str->__r_.__value_.__r.__words[1];
    *(_QWORD *)(v4 + 24) = __str[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&result->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(v4 + 32) = 4;
  return result;
}

uint64_t sub_19C047D78(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 5;
  return result;
}

__n128 sub_19C047DEC(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[2].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 6)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E3D18DB8[v5])(&v7, v4);
  }
  v4[2].n128_u32[0] = -1;
  result = *a3;
  *v4 = *a3;
  v4[2].n128_u32[0] = 6;
  return result;
}

uint64_t sub_19C047E68(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 7)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 7;
  return result;
}

uint64_t sub_19C047EDC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 8)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 8;
  return result;
}

uint64_t sub_19C047F50(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 9)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 9;
  return result;
}

std::string *sub_19C047FC4(uint64_t *a1, uint64_t a2, std::string *__str)
{
  uint64_t v4;
  uint64_t v5;
  std::string *result;
  __int128 v7;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 10)
    {
      *(_QWORD *)a2 = __str->__r_.__value_.__r.__words[0];
      return std::string::operator=((std::string *)(a2 + 8), (const std::string *)&__str->__r_.__value_.__r.__words[1]);
    }
    ((void (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)v4 = __str->__r_.__value_.__r.__words[0];
  result = (std::string *)(v4 + 8);
  if (__str[1].__r_.__value_.__s.__data_[7] < 0)
  {
    result = (std::string *)sub_19BF8CD70(result, (void *)__str->__r_.__value_.__l.__size_, __str->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v7 = *(_OWORD *)&__str->__r_.__value_.__r.__words[1];
    *(_QWORD *)(v4 + 24) = __str[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&result->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(v4 + 32) = 10;
  return result;
}

uint64_t sub_19C048080(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 11)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 11;
  return result;
}

__n128 sub_19C0480F4(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[2].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 12)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E3D18DB8[v5])(&v7, v4);
  }
  v4[2].n128_u32[0] = -1;
  result = *a3;
  *v4 = *a3;
  v4[2].n128_u32[0] = 12;
  return result;
}

uint64_t sub_19C048170(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  if (a2 != a1)
  {
    v3 = *(unsigned int *)(a1 + 32);
    v4 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v3 == -1)
    {
      if ((_DWORD)v4 == -1)
        return a1;
    }
    else if ((_DWORD)v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E3D18DB8[v3])(&v7, a1, a2);
      *(_DWORD *)(a1 + 32) = -1;
      return a1;
    }
    v6 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E3D18F58[v4])(&v6, a1, a2);
  }
  return a1;
}

uint64_t sub_19C048208(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v8, v4);
LABEL_8:
    v7 = 0;
    *(_DWORD *)(v4 + 32) = -1;
    *(_BYTE *)v4 = *(_BYTE *)a3;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a3 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a3 + 16);
    do
    {
      *(_BYTE *)(v4 + 24 + v7) = *(_BYTE *)(a3 + 24 + v7);
      ++v7;
    }
    while (v7 != 4);
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }
  *(_BYTE *)a2 = *(_BYTE *)a3;
  if (a2 != a3)
  {
    v6 = 0;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    do
    {
      *(_BYTE *)(a2 + 24 + v6) = *(_BYTE *)(a3 + 24 + v6);
      ++v6;
    }
    while (v6 != 4);
  }
  return result;
}

uint64_t sub_19C0482E4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 1;
  return result;
}

uint64_t sub_19C048358(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 2;
  return result;
}

uint64_t sub_19C0483CC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 3;
  return result;
}

std::string *sub_19C048440(uint64_t *a1, uint64_t a2, std::string *__str)
{
  uint64_t v4;
  uint64_t v5;
  std::string *result;
  __int128 v7;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *(_QWORD *)a2 = __str->__r_.__value_.__r.__words[0];
      return std::string::operator=((std::string *)(a2 + 8), (const std::string *)&__str->__r_.__value_.__r.__words[1]);
    }
    ((void (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)v4 = __str->__r_.__value_.__r.__words[0];
  result = (std::string *)(v4 + 8);
  if (__str[1].__r_.__value_.__s.__data_[7] < 0)
  {
    result = (std::string *)sub_19BF8CD70(result, (void *)__str->__r_.__value_.__l.__size_, __str->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v7 = *(_OWORD *)&__str->__r_.__value_.__r.__words[1];
    *(_QWORD *)(v4 + 24) = __str[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&result->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(v4 + 32) = 4;
  return result;
}

uint64_t sub_19C0484FC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 5;
  return result;
}

__n128 sub_19C048570(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[2].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 6)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E3D18DB8[v5])(&v7, v4);
  }
  v4[2].n128_u32[0] = -1;
  result = *a3;
  *v4 = *a3;
  v4[2].n128_u32[0] = 6;
  return result;
}

uint64_t sub_19C0485EC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 7)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 7;
  return result;
}

uint64_t sub_19C048660(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 8)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 8;
  return result;
}

uint64_t sub_19C0486D4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 9)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 9;
  return result;
}

std::string *sub_19C048748(uint64_t *a1, uint64_t a2, std::string *__str)
{
  uint64_t v4;
  uint64_t v5;
  std::string *result;
  __int128 v7;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 10)
    {
      *(_QWORD *)a2 = __str->__r_.__value_.__r.__words[0];
      return std::string::operator=((std::string *)(a2 + 8), (const std::string *)&__str->__r_.__value_.__r.__words[1]);
    }
    ((void (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)v4 = __str->__r_.__value_.__r.__words[0];
  result = (std::string *)(v4 + 8);
  if (__str[1].__r_.__value_.__s.__data_[7] < 0)
  {
    result = (std::string *)sub_19BF8CD70(result, (void *)__str->__r_.__value_.__l.__size_, __str->__r_.__value_.__r.__words[2]);
  }
  else
  {
    v7 = *(_OWORD *)&__str->__r_.__value_.__r.__words[1];
    *(_QWORD *)(v4 + 24) = __str[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&result->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(v4 + 32) = 10;
  return result;
}

uint64_t sub_19C048804(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 11)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3D18DB8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 32) = 11;
  return result;
}

__n128 sub_19C048878(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[2].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 12)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, __n128 *))off_1E3D18DB8[v5])(&v7, v4);
  }
  v4[2].n128_u32[0] = -1;
  result = *a3;
  *v4 = *a3;
  v4[2].n128_u32[0] = 12;
  return result;
}

uint64_t sub_19C0488F4(uint64_t **a1, uint64_t **a2)
{
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v23;
  uint32_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t *v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  void *v63;
  char v64;
  __int128 __p;
  unint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19BF87730((uint64_t)a2);
  LODWORD(__p) = 0x100000;
  WORD2(__p) = 0;
  BYTE6(__p) = 1;
  *((_QWORD *)&__p + 1) = 0;
  sub_19BF8CA04(&__p, (uint64_t)".dat", 0, 4u);
  v4 = sub_19BF8CDFC((unsigned __int16 *)v3, (unsigned __int16 *)&__p);
  if (*((_QWORD *)&__p + 1))
    v5 = BYTE6(__p) == 1;
  else
    v5 = 0;
  if (v5)
    free(*((void **)&__p + 1));
  if (v4)
  {
    sub_19BF8CE58(&v62, (unsigned __int16 *)v3, 0, (unsigned __int16)(*(_WORD *)v3 - 3));
    sub_19BF86F84((unsigned __int16 *)&v62, "idx", 0xFFFFuLL);
  }
  else
  {
    LODWORD(v62) = 0x100000;
    WORD2(v62) = 0;
    BYTE6(v62) = 0;
    v63 = 0;
    v64 = 0;
  }
  if (*(_QWORD *)(v3 + 8))
    v6 = *(char **)(v3 + 8);
  else
    v6 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v6);
  v7 = (uint64_t *)operator new();
  sub_19BF8A6DC(v7, (uint64_t)&__p);
  v8 = (uint64_t)a2[1];
  a2[1] = v7;
  if (v8)
    sub_19C014608(v8);
  if (SHIBYTE(v66) < 0)
    operator delete((void *)__p);
  if (v63)
    v9 = (char *)v63;
  else
    v9 = &v64;
  sub_19BF8E43C(&__p, v9);
  v10 = (uint64_t *)operator new();
  sub_19BF8A6DC(v10, (uint64_t)&__p);
  v11 = *a2;
  *a2 = v10;
  if (v11)
    sub_19C014608((uint64_t)v11);
  if (SHIBYTE(v66) < 0)
    operator delete((void *)__p);
  v12 = a2[1];
  v13 = *v12;
  v14 = v12[1];
  if (!sub_19C022ADC((_DWORD *)*v12, v14) || !sub_19C022ADC((_DWORD *)**a2, (*a2)[1]))
  {
    if (qword_1EE4177C0 != -1)
      dispatch_once(&qword_1EE4177C0, &unk_1E3D17150);
    v20 = qword_1EE4177B8;
    if (!os_log_type_enabled((os_log_t)qword_1EE4177B8, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    LOWORD(__p) = 0;
    v19 = "invalid magic number";
LABEL_53:
    v23 = v20;
    v24 = 2;
    goto LABEL_54;
  }
  v15 = sub_19C022B08(v13, v14);
  v16 = sub_19C022B08(**a2, (*a2)[1]);
  if ((_DWORD)v15 != (_DWORD)v16 || (v17 = HIDWORD(v15), HIDWORD(v15) != HIDWORD(v16)))
  {
    if (qword_1EE4177C0 != -1)
      dispatch_once(&qword_1EE4177C0, &unk_1E3D17150);
    v20 = qword_1EE4177B8;
    if (!os_log_type_enabled((os_log_t)qword_1EE4177B8, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    LOWORD(__p) = 0;
    v19 = "mismatched words and index file versions";
    goto LABEL_53;
  }
  if ((_DWORD)v15 != 3)
  {
    if (qword_1EE4177C0 != -1)
      dispatch_once(&qword_1EE4177C0, &unk_1E3D17150);
    v18 = qword_1EE4177B8;
    if (!os_log_type_enabled((os_log_t)qword_1EE4177B8, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    LODWORD(__p) = 67109376;
    DWORD1(__p) = v15;
    WORD4(__p) = 1024;
    *(_DWORD *)((char *)&__p + 10) = 3;
    v19 = "major version %u does not match required version %u";
LABEL_51:
    v23 = v18;
    v24 = 14;
LABEL_54:
    _os_log_error_impl(&dword_19BF85000, v23, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&__p, v24);
LABEL_37:
    sub_19BF87730((uint64_t)a2);
LABEL_38:
    v21 = 0;
    goto LABEL_39;
  }
  if (HIDWORD(v15) <= 0xA)
  {
    if (qword_1EE4177C0 != -1)
      dispatch_once(&qword_1EE4177C0, &unk_1E3D17150);
    v18 = qword_1EE4177B8;
    if (!os_log_type_enabled((os_log_t)qword_1EE4177B8, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    LODWORD(__p) = 67109376;
    DWORD1(__p) = HIDWORD(v15);
    WORD4(__p) = 1024;
    *(_DWORD *)((char *)&__p + 10) = 11;
    v19 = "minor version %u is not supported (%u required)";
    goto LABEL_51;
  }
  if (HIDWORD(v15) < 0x13)
  {
    v21 = operator new();
    *(_QWORD *)v21 = &off_1E3D14380;
    *(_BYTE *)(v21 + 8) = v17 > 0xD;
    *(_BYTE *)(v21 + 9) = (_DWORD)v17 == 18;
  }
  else
  {
    v25 = a2[1];
    v26 = v25[1];
    if (v26 <= 0x4F)
      __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
    v21 = 0;
    if (v26 >= 0x54)
    {
      v27 = *v25;
      if (v27)
      {
        v28 = bswap32(*(_DWORD *)(v27 + 80));
        *(_QWORD *)&__p = v27;
        *((_QWORD *)&__p + 1) = v26;
        v66 = v28;
        if (v26 < v28)
          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
        v21 = operator new();
        sub_19BFF0538((_QWORD *)v21, (uint64_t *)&__p);
      }
    }
  }
  v29 = a2[1790];
  a2[1790] = (uint64_t *)v21;
  if (v29)
  {
    (*(void (**)(uint64_t *))(*v29 + 8))(v29);
    v21 = (uint64_t)a2[1790];
  }
  if (v21)
  {
    v61 = v17 > 0xE;
    v30 = (*a2)[1];
    if (v30 < 0x28)
      goto LABEL_99;
    v21 = 0;
    if (v30 < 0x2C)
      goto LABEL_39;
    v31 = **a2;
    if (!v31)
      goto LABEL_39;
    v32 = bswap32(*(_DWORD *)(v31 + 40));
    *((_DWORD *)a2 + 3226) = v32;
    if ((v17 < 0x15 || (v32 & 0x400000) == 0)
      && (!sub_19C022B68(*a2[1]) || (sub_19C022B68(**a2) & 1) == 0))
    {
      goto LABEL_37;
    }
    if (!sub_19C022CDC(*a2[1], a2[1][1], 0x24uLL, (_DWORD *)a2 + 4))
      goto LABEL_38;
    v33 = *a2;
    v34 = (*a2)[1];
    if (v34 <= 0x23)
LABEL_99:
      __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
    v21 = 0;
    if (v34 >= 0x28)
    {
      v35 = *v33;
      if (*v33)
      {
        *((_DWORD *)a2 + 3229) = bswap32(*(_DWORD *)(v35 + 36));
        v36 = *((_DWORD *)a2 + 3226);
        *((_DWORD *)a2 + 1610) = v36;
        a2[806] = (uint64_t *)v35;
        a2[807] = (uint64_t *)v34;
        *((_DWORD *)a2 + 3220) = v36;
        a2[1611] = (uint64_t *)v35;
        a2[1612] = (uint64_t *)v34;
        v60 = 0;
        if ((sub_19C022CDC(v35, v34, 0x38uLL, &v60) & 1) == 0)
          goto LABEL_38;
        v59 = 0;
        if ((sub_19C022CDC(**a2, (*a2)[1], 0x3CuLL, &v59) & 1) == 0)
          goto LABEL_38;
        v58 = 0;
        if ((sub_19C022CDC(**a2, (*a2)[1], 0x40uLL, &v58) & 1) == 0
          || !sub_19C022CDC(**a2, (*a2)[1], 0x44uLL, (_DWORD *)a2 + 3228)
          || !sub_19C022CDC(*a2[1], a2[1][1], 0x44uLL, (_DWORD *)a2 + 3227))
        {
          goto LABEL_38;
        }
        v37 = *((_DWORD *)a2 + 3226);
        if ((v37 & 0x10000) != 0)
        {
          if (!sub_19C022CDC(*a2[1], a2[1][1], 0x48uLL, (_DWORD *)a2 + 3575))
            goto LABEL_38;
          v42 = *((unsigned int *)a2 + 3575);
          if (!(_DWORD)v42)
            __assert_rtn("load", "TIWordTrie.cpp", 514, "m_word_id_map_offset > 0");
          if (!sub_19C022D3C(*a2[1], a2[1][1], v42, (int *)a2 + 3577)
            || !sub_19C022D3C(*a2[1], a2[1][1], (*((_DWORD *)a2 + 3575) + 3), (int *)a2 + 3576))
          {
            goto LABEL_38;
          }
          *((_DWORD *)a2 + 3575) += 6;
          if (((_DWORD)a2[1613] & 0x40000) == 0)
            goto LABEL_94;
        }
        else if ((v37 & 0x40000) == 0)
        {
          goto LABEL_94;
        }
        v57 = 0;
        if ((sub_19C022CDC(*a2[1], a2[1][1], 0x4CuLL, &v57) & 1) == 0)
          goto LABEL_38;
        if (!v57)
          __assert_rtn("load", "TIWordTrie.cpp", 525, "huffman_coder_offset > 0");
        v38 = a2[1];
        v40 = *v38;
        v39 = v38[1];
        *(_QWORD *)&__p = v40;
        *((_QWORD *)&__p + 1) = v39;
        v66 = v57;
        if (v39 < v57)
          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
        sub_19C022DB0((uint64_t *)&v56, (uint64_t *)&__p, &v61);
        v41 = (uint64_t)a2[1789];
        a2[1789] = v56;
        if (v41)
          sub_19C022A84(v41);
LABEL_94:
        if (v58)
        {
          v43 = (*a2)[1];
          *(_QWORD *)&__p = **a2;
          *((_QWORD *)&__p + 1) = v43;
          v66 = (v59 + v60);
          if (v43 < v66)
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          sub_19C016CC4((uint64_t)(a2 + 1615), (uint64_t *)&__p);
        }
        if ((*((_BYTE *)a2 + 12906) & 0x40) != 0)
        {
          LODWORD(v56) = 0;
          if ((sub_19C022CDC(*a2[1], a2[1][1], 0x40uLL, &v56) & 1) == 0)
            goto LABEL_38;
          v57 = 0;
          v44 = v56;
          if ((sub_19C022CDC(*a2[1], a2[1][1], v56, &v57) & 1) == 0)
            goto LABEL_38;
          v45 = a2[1];
          v46 = v57;
          v47 = v44 + v57 + 4;
          v55 = 0;
          v48 = *v45;
          if ((sub_19C022CDC(*v45, v45[1], v47, &v55) & 1) == 0)
            goto LABEL_38;
          v49 = *a2[1];
          v50 = operator new(0x48uLL);
          v50[1] = 0;
          v50[2] = 0;
          *v50 = &off_1E3D12AD8;
          v51 = v55;
          v50[3] = off_1E3D11D40;
          v50[4] = a2 + 1615;
          v50[5] = v48 + v44 + 4;
          v50[6] = v46 >> 3;
          v50[7] = v49 + v47 + 4;
          v50[8] = v51;
          *(_QWORD *)&__p = v50 + 3;
          *((_QWORD *)&__p + 1) = v50;
          sub_19BFAED8C((uint64_t)(a2 + 1792), &__p);
          v52 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v53 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
        }
        v21 = 1;
        *((_BYTE *)a2 + 20) = 1;
      }
    }
  }
LABEL_39:
  if (v63 && BYTE6(v62) == 1)
    free(v63);
  return v21;
}

void sub_19C049294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t buf,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18)
  {
    if (a17 == 1)
      free(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C0494E4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  BOOL v62;
  unint64_t v63;
  __int128 __p;
  unint64_t v65;
  _BYTE v66[8];
  void *v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19C03F690(a2);
  sub_19C03F6F4((uint64_t)v66, (unsigned __int16 *)v3);
  if (*(_QWORD *)(v3 + 8))
    v4 = *(char **)(v3 + 8);
  else
    v4 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v4);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)&__p);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  if (v6)
    sub_19C014608(v6);
  if (SHIBYTE(v65) < 0)
    operator delete((void *)__p);
  if (v67)
    v7 = (char *)v67;
  else
    v7 = (char *)v68;
  sub_19BF8E43C(&__p, v7);
  v8 = (_QWORD *)operator new();
  sub_19BF8A6DC(v8, (uint64_t)&__p);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  if (v9)
    sub_19C014608(v9);
  if (SHIBYTE(v65) < 0)
    operator delete((void *)__p);
  v10 = *(uint64_t **)(a2 + 24);
  v11 = *v10;
  v12 = v10[1];
  if (!sub_19C022ADC((_DWORD *)*v10, v12))
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v34 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19BF85000, v34, OS_LOG_TYPE_ERROR, "invalid magic number", (uint8_t *)&__p, 2u);
    }
    goto LABEL_48;
  }
  v13 = sub_19C022B08(v11, v12);
  v63 = v13;
  v14 = sub_19C022B08(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  if (!sub_19C03F838((int *)&v63, v14, HIDWORD(v14)))
  {
LABEL_48:
    sub_19C03F690(a2);
    goto LABEL_49;
  }
  v15 = HIDWORD(v13);
  sub_19C03FA28((uint64_t)&__p, **(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v15);
  v16 = __p;
  v17 = *(_QWORD *)(a2 + 1496);
  *(_QWORD *)(a2 + 1496) = __p;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = *(_QWORD *)(a2 + 1496);
  }
  if (!v16)
    goto LABEL_49;
  v62 = v15 > 0xE;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = v18[1];
  if (v19 < 0x28)
    goto LABEL_75;
  v20 = 0;
  if (v19 < 0x2C)
    goto LABEL_50;
  v21 = *v18;
  if (!v21)
    goto LABEL_50;
  v22 = bswap32(*(_DWORD *)(v21 + 40));
  *(_DWORD *)(a2 + 4) = v22;
  v23 = *(uint64_t **)(a2 + 24);
  v24 = *v23;
  if ((v22 & 0x400000) == 0)
  {
    if ((sub_19C03FC54(v24) & 1) != 0)
      goto LABEL_25;
    goto LABEL_48;
  }
  v36 = v23[1];
  if (v36 <= 0x3F)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  v20 = 0;
  if (v36 >= 0x44 && v24)
  {
    v37 = bswap32(*(_DWORD *)(v24 + 64));
    LODWORD(v55) = 0;
    if ((sub_19C022CDC(v24, v36, v37, &v55) & 1) == 0)
      goto LABEL_49;
    v38 = *(_QWORD *)(a2 + 24);
    v39 = v55;
    v40 = (v37 + v55 + 4);
    v61 = 0;
    v41 = *(_QWORD *)v38;
    if ((sub_19C022CDC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), v40, &v61) & 1) == 0)
      goto LABEL_49;
    v42 = **(_QWORD **)(a2 + 24);
    v43 = operator new(0x48uLL);
    v43[1] = 0;
    v43[2] = 0;
    *v43 = &off_1E3D12AD8;
    v43[3] = off_1E3D11D40;
    v44 = v61;
    v43[4] = a2 + 112;
    v43[5] = v41 + v37 + 4;
    v43[6] = v39 >> 3;
    v43[7] = v42 + v40 + 4;
    v43[8] = v44;
    *(_QWORD *)&__p = v43 + 3;
    *((_QWORD *)&__p + 1) = v43;
    sub_19BFAED8C(a2 + 1504, &__p);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
LABEL_25:
    v25 = *(uint64_t **)(a2 + 32);
    v26 = v25[1];
    if (v26 > 0x23)
    {
      v27 = *v25;
      if (v26 < 0x28 || v27 == 0)
        goto LABEL_49;
      *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(v27 + 36));
      v61 = 0;
      if ((sub_19C022CDC(v27, v26, 0x38uLL, &v61) & 1) == 0)
        goto LABEL_49;
      v60 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x3CuLL, &v60) & 1) == 0)
        goto LABEL_49;
      v59 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x40uLL, &v59) & 1) == 0)
        goto LABEL_49;
      v58 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x2CuLL, &v58) & 1) == 0)
        goto LABEL_49;
      v57 = 0;
      if (v58)
      {
        if (v58 != 5
          && (sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x44uLL, &v57) & 1) == 0)
        {
          goto LABEL_49;
        }
      }
      v29 = *(_DWORD *)(a2 + 4);
      if ((v29 & 0x10000) != 0)
      {
        if (!sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x48uLL, (_DWORD *)(a2 + 12)))goto LABEL_49;
        v48 = *(unsigned int *)(a2 + 12);
        if (!(_DWORD)v48)
          __assert_rtn("load", "LXWordTrie.cpp", 387, "m_word_id_map_offset > 0");
        if (!sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v48, (int *)(a2 + 20))|| !sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), (*(_DWORD *)(a2 + 12) + 3), (int *)(a2 + 16)))
        {
          goto LABEL_49;
        }
        *(_DWORD *)(a2 + 12) += 6;
        if ((*(_DWORD *)(a2 + 4) & 0x40000) != 0)
          goto LABEL_39;
      }
      else if ((v29 & 0x40000) != 0)
      {
LABEL_39:
        v56 = 0;
        if ((sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x4CuLL, &v56) & 1) != 0)
        {
          if (!v56)
            __assert_rtn("load", "LXWordTrie.cpp", 399, "huffman_coder_offset > 0");
          v30 = *(uint64_t **)(a2 + 24);
          v32 = *v30;
          v31 = v30[1];
          *(_QWORD *)&__p = v32;
          *((_QWORD *)&__p + 1) = v31;
          v65 = v56;
          if (v31 < v56)
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          sub_19C022DB0(&v55, (uint64_t *)&__p, &v62);
          v33 = *(_QWORD *)(a2 + 1488);
          *(_QWORD *)(a2 + 1488) = v55;
          if (v33)
            sub_19C022A84(v33);
          goto LABEL_69;
        }
LABEL_49:
        v20 = 0;
        goto LABEL_50;
      }
LABEL_69:
      v49 = *(uint64_t **)(a2 + 32);
      if (v59)
      {
        v51 = *v49;
        v50 = v49[1];
        *(_QWORD *)&__p = v51;
        *((_QWORD *)&__p + 1) = v50;
        v65 = v60 + v61;
        if (v50 < v65)
          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
        sub_19C016CC4(a2 + 112, (uint64_t *)&__p);
        v49 = *(uint64_t **)(a2 + 32);
      }
      v52 = *v49 + v57;
      v53 = v49[1] - v57;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      v54 = *(_QWORD *)(a2 + 80);
      if (v54)
      {
        MEMORY[0x1A1AD0CB8](v54, 0x1000C8052888210);
        *(_QWORD *)(a2 + 80) = 0;
      }
      *(_QWORD *)(a2 + 64) = v53;
      *(_QWORD *)(a2 + 72) = v52;
      v20 = 1;
      *(_BYTE *)a2 = 1;
      goto LABEL_50;
    }
LABEL_75:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
LABEL_50:
  if (v67 && v66[6] == 1)
    free(v67);
  return v20;
}

void sub_19C049B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1)
      free(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C049CF4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  BOOL v61;
  unint64_t v62;
  __int128 __p;
  unint64_t v64;
  _BYTE v65[8];
  void *v66;
  _QWORD v67[3];

  v67[2] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19C03F690(a2);
  sub_19C03F6F4((uint64_t)v65, (unsigned __int16 *)v3);
  if (*(_QWORD *)(v3 + 8))
    v4 = *(char **)(v3 + 8);
  else
    v4 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v4);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)&__p);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  if (v6)
    sub_19C014608(v6);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)__p);
  if (v66)
    v7 = (char *)v66;
  else
    v7 = (char *)v67;
  sub_19BF8E43C(&__p, v7);
  v8 = (_QWORD *)operator new();
  sub_19BF8A6DC(v8, (uint64_t)&__p);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  if (v9)
    sub_19C014608(v9);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)__p);
  v10 = *(uint64_t **)(a2 + 24);
  v11 = *v10;
  v12 = v10[1];
  if (!sub_19C022ADC((_DWORD *)*v10, v12))
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v34 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19BF85000, v34, OS_LOG_TYPE_ERROR, "invalid magic number", (uint8_t *)&__p, 2u);
    }
    goto LABEL_48;
  }
  v13 = sub_19C022B08(v11, v12);
  v62 = v13;
  v14 = sub_19C022B08(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  if (!sub_19C03F838((int *)&v62, v14, HIDWORD(v14)))
  {
LABEL_48:
    sub_19C03F690(a2);
    goto LABEL_49;
  }
  v15 = HIDWORD(v13);
  sub_19C03FA28((uint64_t)&__p, **(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v15);
  v16 = __p;
  v17 = *(_QWORD *)(a2 + 1560);
  *(_QWORD *)(a2 + 1560) = __p;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = *(_QWORD *)(a2 + 1560);
  }
  if (!v16)
    goto LABEL_49;
  v61 = v15 > 0xE;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = v18[1];
  if (v19 < 0x28)
    goto LABEL_73;
  v20 = 0;
  if (v19 < 0x2C)
    goto LABEL_50;
  v21 = *v18;
  if (!v21)
    goto LABEL_50;
  v22 = bswap32(*(_DWORD *)(v21 + 40));
  *(_DWORD *)(a2 + 4) = v22;
  v23 = *(uint64_t **)(a2 + 24);
  v24 = *v23;
  if ((v22 & 0x400000) == 0)
  {
    if ((sub_19C03FC54(v24) & 1) != 0)
      goto LABEL_25;
    goto LABEL_48;
  }
  v36 = v23[1];
  if (v36 <= 0x3F)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  v20 = 0;
  if (v36 >= 0x44 && v24)
  {
    v37 = bswap32(*(_DWORD *)(v24 + 64));
    LODWORD(v54) = 0;
    if ((sub_19C022CDC(v24, v36, v37, &v54) & 1) == 0)
      goto LABEL_49;
    v38 = *(_QWORD *)(a2 + 24);
    v39 = v54;
    v40 = (v37 + v54 + 4);
    v60 = 0;
    v41 = *(_QWORD *)v38;
    if ((sub_19C022CDC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), v40, &v60) & 1) == 0)
      goto LABEL_49;
    v42 = **(_QWORD **)(a2 + 24);
    v43 = operator new(0x48uLL);
    v43[1] = 0;
    v43[2] = 0;
    *v43 = &off_1E3D12AD8;
    v43[3] = off_1E3D11D40;
    v44 = v60;
    v43[4] = a2 + 176;
    v43[5] = v41 + v37 + 4;
    v43[6] = v39 >> 3;
    v43[7] = v42 + v40 + 4;
    v43[8] = v44;
    *(_QWORD *)&__p = v43 + 3;
    *((_QWORD *)&__p + 1) = v43;
    sub_19BFAED8C(a2 + 1568, &__p);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
LABEL_25:
    v25 = *(uint64_t **)(a2 + 32);
    v26 = v25[1];
    if (v26 > 0x23)
    {
      v27 = *v25;
      if (v26 < 0x28 || v27 == 0)
        goto LABEL_49;
      *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(v27 + 36));
      v60 = 0;
      if ((sub_19C022CDC(v27, v26, 0x38uLL, &v60) & 1) == 0)
        goto LABEL_49;
      v59 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x3CuLL, &v59) & 1) == 0)
        goto LABEL_49;
      v58 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x40uLL, &v58) & 1) == 0)
        goto LABEL_49;
      v57 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x2CuLL, &v57) & 1) == 0)
        goto LABEL_49;
      v56 = 0;
      if (v57)
      {
        if (v57 != 5
          && (sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x44uLL, &v56) & 1) == 0)
        {
          goto LABEL_49;
        }
      }
      v29 = *(_DWORD *)(a2 + 4);
      if ((v29 & 0x10000) != 0)
      {
        if (!sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x48uLL, (_DWORD *)(a2 + 12)))goto LABEL_49;
        v48 = *(unsigned int *)(a2 + 12);
        if (!(_DWORD)v48)
          __assert_rtn("load", "LXWordTrie.cpp", 387, "m_word_id_map_offset > 0");
        if (!sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v48, (int *)(a2 + 20))|| !sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), (*(_DWORD *)(a2 + 12) + 3), (int *)(a2 + 16)))
        {
          goto LABEL_49;
        }
        *(_DWORD *)(a2 + 12) += 6;
        if ((*(_DWORD *)(a2 + 4) & 0x40000) != 0)
          goto LABEL_39;
      }
      else if ((v29 & 0x40000) != 0)
      {
LABEL_39:
        v55 = 0;
        if ((sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x4CuLL, &v55) & 1) != 0)
        {
          if (!v55)
            __assert_rtn("load", "LXWordTrie.cpp", 399, "huffman_coder_offset > 0");
          v30 = *(uint64_t **)(a2 + 24);
          v32 = *v30;
          v31 = v30[1];
          *(_QWORD *)&__p = v32;
          *((_QWORD *)&__p + 1) = v31;
          v64 = v55;
          if (v31 < v55)
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          sub_19C022DB0(&v54, (uint64_t *)&__p, &v61);
          v33 = *(_QWORD *)(a2 + 1552);
          *(_QWORD *)(a2 + 1552) = v54;
          if (v33)
            sub_19C022A84(v33);
          goto LABEL_69;
        }
LABEL_49:
        v20 = 0;
        goto LABEL_50;
      }
LABEL_69:
      v49 = *(uint64_t **)(a2 + 32);
      if (v58)
      {
        v51 = *v49;
        v50 = v49[1];
        *(_QWORD *)&__p = v51;
        *((_QWORD *)&__p + 1) = v50;
        v64 = v59 + v60;
        if (v50 < v64)
          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
        sub_19C016CC4(a2 + 176, (uint64_t *)&__p);
        v49 = *(uint64_t **)(a2 + 32);
      }
      v52 = *v49 + v56;
      v53 = (v49[1] - (unint64_t)v56) >> 3;
      sub_19C00EC40(a2 + 56);
      *(_QWORD *)(a2 + 56) = v52;
      v20 = 1;
      *(_BYTE *)(a2 + 136) = 1;
      *(_QWORD *)(a2 + 72) = v53;
      *(_BYTE *)a2 = 1;
      goto LABEL_50;
    }
LABEL_73:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
LABEL_50:
  if (v66 && v65[6] == 1)
    free(v66);
  return v20;
}

void sub_19C04A384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1)
      free(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C04A4F4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  BOOL v59;
  unint64_t v60;
  __int128 __p;
  unint64_t v62;
  _BYTE v63[8];
  void *v64;
  _QWORD v65[3];

  v65[2] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19C03F690(a2);
  sub_19C03F6F4((uint64_t)v63, (unsigned __int16 *)v3);
  if (*(_QWORD *)(v3 + 8))
    v4 = *(char **)(v3 + 8);
  else
    v4 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v4);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)&__p);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  if (v6)
    sub_19C014608(v6);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  if (v64)
    v7 = (char *)v64;
  else
    v7 = (char *)v65;
  sub_19BF8E43C(&__p, v7);
  v8 = (_QWORD *)operator new();
  sub_19BF8A6DC(v8, (uint64_t)&__p);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  if (v9)
    sub_19C014608(v9);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  v10 = *(uint64_t **)(a2 + 24);
  v11 = *v10;
  v12 = v10[1];
  if (!sub_19C022ADC((_DWORD *)*v10, v12))
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v34 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19BF85000, v34, OS_LOG_TYPE_ERROR, "invalid magic number", (uint8_t *)&__p, 2u);
    }
    goto LABEL_48;
  }
  v13 = sub_19C022B08(v11, v12);
  v60 = v13;
  v14 = sub_19C022B08(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  if (!sub_19C03F838((int *)&v60, v14, HIDWORD(v14)))
  {
LABEL_48:
    sub_19C03F690(a2);
    goto LABEL_49;
  }
  v15 = HIDWORD(v13);
  sub_19C03FA28((uint64_t)&__p, **(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v15);
  v16 = __p;
  v17 = *(_QWORD *)(a2 + 2064);
  *(_QWORD *)(a2 + 2064) = __p;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = *(_QWORD *)(a2 + 2064);
  }
  if (!v16)
    goto LABEL_49;
  v59 = v15 > 0xE;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = v18[1];
  if (v19 < 0x28)
    goto LABEL_73;
  v20 = 0;
  if (v19 < 0x2C)
    goto LABEL_50;
  v21 = *v18;
  if (!v21)
    goto LABEL_50;
  v22 = bswap32(*(_DWORD *)(v21 + 40));
  *(_DWORD *)(a2 + 4) = v22;
  v23 = *(uint64_t **)(a2 + 24);
  v24 = *v23;
  if ((v22 & 0x400000) == 0)
  {
    if ((sub_19C03FC54(v24) & 1) != 0)
      goto LABEL_25;
    goto LABEL_48;
  }
  v36 = v23[1];
  if (v36 <= 0x3F)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  v20 = 0;
  if (v36 >= 0x44 && v24)
  {
    v37 = bswap32(*(_DWORD *)(v24 + 64));
    LODWORD(v52) = 0;
    if ((sub_19C022CDC(v24, v36, v37, &v52) & 1) == 0)
      goto LABEL_49;
    v38 = *(_QWORD *)(a2 + 24);
    v39 = v52;
    v40 = (v37 + v52 + 4);
    v58 = 0;
    v41 = *(_QWORD *)v38;
    if ((sub_19C022CDC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), v40, &v58) & 1) == 0)
      goto LABEL_49;
    v42 = **(_QWORD **)(a2 + 24);
    v43 = operator new(0x48uLL);
    v43[1] = 0;
    v43[2] = 0;
    *v43 = &off_1E3D12AD8;
    v43[3] = off_1E3D11D40;
    v44 = v58;
    v43[4] = a2 + 680;
    v43[5] = v41 + v37 + 4;
    v43[6] = v39 >> 3;
    v43[7] = v42 + v40 + 4;
    v43[8] = v44;
    *(_QWORD *)&__p = v43 + 3;
    *((_QWORD *)&__p + 1) = v43;
    sub_19BFAED8C(a2 + 2072, &__p);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
LABEL_25:
    v25 = *(uint64_t **)(a2 + 32);
    v26 = v25[1];
    if (v26 > 0x23)
    {
      v27 = *v25;
      if (v26 < 0x28 || v27 == 0)
        goto LABEL_49;
      *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(v27 + 36));
      v58 = 0;
      if ((sub_19C022CDC(v27, v26, 0x38uLL, &v58) & 1) == 0)
        goto LABEL_49;
      v57 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x3CuLL, &v57) & 1) == 0)
        goto LABEL_49;
      v56 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x40uLL, &v56) & 1) == 0)
        goto LABEL_49;
      v55 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x2CuLL, &v55) & 1) == 0)
        goto LABEL_49;
      v54 = 0;
      if (v55)
      {
        if (v55 != 5
          && (sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x44uLL, &v54) & 1) == 0)
        {
          goto LABEL_49;
        }
      }
      v29 = *(_DWORD *)(a2 + 4);
      if ((v29 & 0x10000) != 0)
      {
        if (!sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x48uLL, (_DWORD *)(a2 + 12)))goto LABEL_49;
        v48 = *(unsigned int *)(a2 + 12);
        if (!(_DWORD)v48)
          __assert_rtn("load", "LXWordTrie.cpp", 387, "m_word_id_map_offset > 0");
        if (!sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v48, (int *)(a2 + 20))|| !sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), (*(_DWORD *)(a2 + 12) + 3), (int *)(a2 + 16)))
        {
          goto LABEL_49;
        }
        *(_DWORD *)(a2 + 12) += 6;
        if ((*(_DWORD *)(a2 + 4) & 0x40000) != 0)
          goto LABEL_39;
      }
      else if ((v29 & 0x40000) != 0)
      {
LABEL_39:
        v53 = 0;
        if ((sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x4CuLL, &v53) & 1) != 0)
        {
          if (!v53)
            __assert_rtn("load", "LXWordTrie.cpp", 399, "huffman_coder_offset > 0");
          v30 = *(uint64_t **)(a2 + 24);
          v32 = *v30;
          v31 = v30[1];
          *(_QWORD *)&__p = v32;
          *((_QWORD *)&__p + 1) = v31;
          v62 = v53;
          if (v31 < v53)
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          sub_19C022DB0(&v52, (uint64_t *)&__p, &v59);
          v33 = *(_QWORD *)(a2 + 2056);
          *(_QWORD *)(a2 + 2056) = v52;
          if (v33)
            sub_19C022A84(v33);
          goto LABEL_69;
        }
LABEL_49:
        v20 = 0;
        goto LABEL_50;
      }
LABEL_69:
      v49 = *(uint64_t **)(a2 + 32);
      if (v56)
      {
        v51 = *v49;
        v50 = v49[1];
        *(_QWORD *)&__p = v51;
        *((_QWORD *)&__p + 1) = v50;
        v62 = v57 + v58;
        if (v50 < v62)
          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
        sub_19C016CC4(a2 + 680, (uint64_t *)&__p);
        v49 = *(uint64_t **)(a2 + 32);
      }
      sub_19BFFEE88(a2 + 56, (int *)(*v49 + v54), (v49[1] - (unint64_t)v54) >> 3);
      sub_19BFFDE24(a2 + 56);
      v20 = 1;
      *(_BYTE *)a2 = 1;
      goto LABEL_50;
    }
LABEL_73:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
LABEL_50:
  if (v64 && v63[6] == 1)
    free(v64);
  return v20;
}

void sub_19C04AB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1)
      free(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C04ACF4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  BOOL v59;
  unint64_t v60;
  __int128 __p;
  unint64_t v62;
  _BYTE v63[8];
  void *v64;
  _QWORD v65[3];

  v65[2] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19C03F690(a2);
  sub_19C03F6F4((uint64_t)v63, (unsigned __int16 *)v3);
  if (*(_QWORD *)(v3 + 8))
    v4 = *(char **)(v3 + 8);
  else
    v4 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v4);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)&__p);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  if (v6)
    sub_19C014608(v6);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  if (v64)
    v7 = (char *)v64;
  else
    v7 = (char *)v65;
  sub_19BF8E43C(&__p, v7);
  v8 = (_QWORD *)operator new();
  sub_19BF8A6DC(v8, (uint64_t)&__p);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  if (v9)
    sub_19C014608(v9);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  v10 = *(uint64_t **)(a2 + 24);
  v11 = *v10;
  v12 = v10[1];
  if (!sub_19C022ADC((_DWORD *)*v10, v12))
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v34 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19BF85000, v34, OS_LOG_TYPE_ERROR, "invalid magic number", (uint8_t *)&__p, 2u);
    }
    goto LABEL_48;
  }
  v13 = sub_19C022B08(v11, v12);
  v60 = v13;
  v14 = sub_19C022B08(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  if (!sub_19C03F838((int *)&v60, v14, HIDWORD(v14)))
  {
LABEL_48:
    sub_19C03F690(a2);
    goto LABEL_49;
  }
  v15 = HIDWORD(v13);
  sub_19C03FA28((uint64_t)&__p, **(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v15);
  v16 = __p;
  v17 = *(_QWORD *)(a2 + 1520);
  *(_QWORD *)(a2 + 1520) = __p;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = *(_QWORD *)(a2 + 1520);
  }
  if (!v16)
    goto LABEL_49;
  v59 = v15 > 0xE;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = v18[1];
  if (v19 < 0x28)
    goto LABEL_74;
  v20 = 0;
  if (v19 >= 0x2C)
  {
    v21 = *v18;
    if (v21)
    {
      v22 = bswap32(*(_DWORD *)(v21 + 40));
      *(_DWORD *)(a2 + 4) = v22;
      v23 = *(uint64_t **)(a2 + 24);
      v24 = *v23;
      if ((v22 & 0x400000) == 0)
      {
        if ((sub_19C03FC54(v24) & 1) != 0)
          goto LABEL_25;
        goto LABEL_48;
      }
      v36 = v23[1];
      if (v36 <= 0x3F)
        __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
      v20 = 0;
      if (v36 >= 0x44 && v24)
      {
        v37 = bswap32(*(_DWORD *)(v24 + 64));
        LODWORD(v52) = 0;
        if ((sub_19C022CDC(v24, v36, v37, &v52) & 1) == 0)
          goto LABEL_49;
        v38 = *(_QWORD *)(a2 + 24);
        v39 = v52;
        v40 = (v37 + v52 + 4);
        v58 = 0;
        v41 = *(_QWORD *)v38;
        if ((sub_19C022CDC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), v40, &v58) & 1) == 0)
          goto LABEL_49;
        v42 = **(_QWORD **)(a2 + 24);
        v43 = operator new(0x48uLL);
        v43[1] = 0;
        v43[2] = 0;
        *v43 = &off_1E3D12AD8;
        v43[3] = off_1E3D11D40;
        v44 = v58;
        v43[4] = a2 + 136;
        v43[5] = v41 + v37 + 4;
        v43[6] = v39 >> 3;
        v43[7] = v42 + v40 + 4;
        v43[8] = v44;
        *(_QWORD *)&__p = v43 + 3;
        *((_QWORD *)&__p + 1) = v43;
        sub_19BFAED8C(a2 + 1528, &__p);
        v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
LABEL_25:
        v25 = *(uint64_t **)(a2 + 32);
        v26 = v25[1];
        if (v26 > 0x23)
        {
          v27 = *v25;
          if (v26 >= 0x28 && v27 != 0)
          {
            *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(v27 + 36));
            v58 = 0;
            if ((sub_19C022CDC(v27, v26, 0x38uLL, &v58) & 1) != 0)
            {
              v57 = 0;
              if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x3CuLL, &v57) & 1) != 0)
              {
                v56 = 0;
                if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x40uLL, &v56) & 1) != 0)
                {
                  v55 = 0;
                  if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x2CuLL, &v55) & 1) != 0)
                  {
                    v54 = 0;
                    if (!v55
                      || v55 == 5
                      || (sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x44uLL, &v54) & 1) != 0)
                    {
                      v29 = *(_DWORD *)(a2 + 4);
                      if ((v29 & 0x10000) != 0)
                      {
                        if (!sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x48uLL, (_DWORD *)(a2 + 12)))goto LABEL_49;
                        v48 = *(unsigned int *)(a2 + 12);
                        if (!(_DWORD)v48)
                          __assert_rtn("load", "LXWordTrie.cpp", 387, "m_word_id_map_offset > 0");
                        if (!sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v48, (int *)(a2 + 20))|| !sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), (*(_DWORD *)(a2 + 12) + 3), (int *)(a2 + 16)))
                        {
                          goto LABEL_49;
                        }
                        *(_DWORD *)(a2 + 12) += 6;
                        if ((*(_DWORD *)(a2 + 4) & 0x40000) == 0)
                          goto LABEL_69;
                      }
                      else if ((v29 & 0x40000) == 0)
                      {
                        goto LABEL_69;
                      }
                      v53 = 0;
                      if ((sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x4CuLL, &v53) & 1) != 0)
                      {
                        if (!v53)
                          __assert_rtn("load", "LXWordTrie.cpp", 399, "huffman_coder_offset > 0");
                        v30 = *(uint64_t **)(a2 + 24);
                        v32 = *v30;
                        v31 = v30[1];
                        *(_QWORD *)&__p = v32;
                        *((_QWORD *)&__p + 1) = v31;
                        v62 = v53;
                        if (v31 < v53)
                          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
                        sub_19C022DB0(&v52, (uint64_t *)&__p, &v59);
                        v33 = *(_QWORD *)(a2 + 1512);
                        *(_QWORD *)(a2 + 1512) = v52;
                        if (v33)
                          sub_19C022A84(v33);
LABEL_69:
                        v49 = *(uint64_t **)(a2 + 32);
                        if (v56)
                        {
                          v51 = *v49;
                          v50 = v49[1];
                          *(_QWORD *)&__p = v51;
                          *((_QWORD *)&__p + 1) = v50;
                          v62 = v57 + v58;
                          if (v50 < v62)
                            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
                          sub_19C016CC4(a2 + 136, (uint64_t *)&__p);
                          v49 = *(uint64_t **)(a2 + 32);
                        }
                        if (sub_19BFF9AFC((uint64_t *)(a2 + 48), (_QWORD *)(*v49 + v54), v49[1] - v54))
                        {
                          v20 = 1;
                          *(_BYTE *)a2 = 1;
                          goto LABEL_50;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_49:
          v20 = 0;
          goto LABEL_50;
        }
LABEL_74:
        __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
      }
    }
  }
LABEL_50:
  if (v64 && v63[6] == 1)
    free(v64);
  return v20;
}

void sub_19C04B378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1)
      free(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C04B4E8(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  BOOL v59;
  unint64_t v60;
  __int128 __p;
  unint64_t v62;
  _BYTE v63[8];
  void *v64;
  _QWORD v65[3];

  v65[2] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19C03F690(a2);
  sub_19C03F6F4((uint64_t)v63, (unsigned __int16 *)v3);
  if (*(_QWORD *)(v3 + 8))
    v4 = *(char **)(v3 + 8);
  else
    v4 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v4);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)&__p);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  if (v6)
    sub_19C014608(v6);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  if (v64)
    v7 = (char *)v64;
  else
    v7 = (char *)v65;
  sub_19BF8E43C(&__p, v7);
  v8 = (_QWORD *)operator new();
  sub_19BF8A6DC(v8, (uint64_t)&__p);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  if (v9)
    sub_19C014608(v9);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  v10 = *(uint64_t **)(a2 + 24);
  v11 = *v10;
  v12 = v10[1];
  if (!sub_19C022ADC((_DWORD *)*v10, v12))
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v34 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19BF85000, v34, OS_LOG_TYPE_ERROR, "invalid magic number", (uint8_t *)&__p, 2u);
    }
    goto LABEL_48;
  }
  v13 = sub_19C022B08(v11, v12);
  v60 = v13;
  v14 = sub_19C022B08(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  if (!sub_19C03F838((int *)&v60, v14, HIDWORD(v14)))
  {
LABEL_48:
    sub_19C03F690(a2);
    goto LABEL_49;
  }
  v15 = HIDWORD(v13);
  sub_19C03FA28((uint64_t)&__p, **(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v15);
  v16 = __p;
  v17 = *(_QWORD *)(a2 + 1520);
  *(_QWORD *)(a2 + 1520) = __p;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = *(_QWORD *)(a2 + 1520);
  }
  if (!v16)
    goto LABEL_49;
  v59 = v15 > 0xE;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = v18[1];
  if (v19 < 0x28)
    goto LABEL_74;
  v20 = 0;
  if (v19 >= 0x2C)
  {
    v21 = *v18;
    if (v21)
    {
      v22 = bswap32(*(_DWORD *)(v21 + 40));
      *(_DWORD *)(a2 + 4) = v22;
      v23 = *(uint64_t **)(a2 + 24);
      v24 = *v23;
      if ((v22 & 0x400000) == 0)
      {
        if ((sub_19C03FC54(v24) & 1) != 0)
          goto LABEL_25;
        goto LABEL_48;
      }
      v36 = v23[1];
      if (v36 <= 0x3F)
        __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
      v20 = 0;
      if (v36 >= 0x44 && v24)
      {
        v37 = bswap32(*(_DWORD *)(v24 + 64));
        LODWORD(v52) = 0;
        if ((sub_19C022CDC(v24, v36, v37, &v52) & 1) == 0)
          goto LABEL_49;
        v38 = *(_QWORD *)(a2 + 24);
        v39 = v52;
        v40 = (v37 + v52 + 4);
        v58 = 0;
        v41 = *(_QWORD *)v38;
        if ((sub_19C022CDC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), v40, &v58) & 1) == 0)
          goto LABEL_49;
        v42 = **(_QWORD **)(a2 + 24);
        v43 = operator new(0x48uLL);
        v43[1] = 0;
        v43[2] = 0;
        *v43 = &off_1E3D12AD8;
        v43[3] = off_1E3D11D40;
        v44 = v58;
        v43[4] = a2 + 136;
        v43[5] = v41 + v37 + 4;
        v43[6] = v39 >> 3;
        v43[7] = v42 + v40 + 4;
        v43[8] = v44;
        *(_QWORD *)&__p = v43 + 3;
        *((_QWORD *)&__p + 1) = v43;
        sub_19BFAED8C(a2 + 1528, &__p);
        v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
LABEL_25:
        v25 = *(uint64_t **)(a2 + 32);
        v26 = v25[1];
        if (v26 > 0x23)
        {
          v27 = *v25;
          if (v26 >= 0x28 && v27 != 0)
          {
            *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(v27 + 36));
            v58 = 0;
            if ((sub_19C022CDC(v27, v26, 0x38uLL, &v58) & 1) != 0)
            {
              v57 = 0;
              if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x3CuLL, &v57) & 1) != 0)
              {
                v56 = 0;
                if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x40uLL, &v56) & 1) != 0)
                {
                  v55 = 0;
                  if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x2CuLL, &v55) & 1) != 0)
                  {
                    v54 = 0;
                    if (!v55
                      || v55 == 5
                      || (sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x44uLL, &v54) & 1) != 0)
                    {
                      v29 = *(_DWORD *)(a2 + 4);
                      if ((v29 & 0x10000) != 0)
                      {
                        if (!sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x48uLL, (_DWORD *)(a2 + 12)))goto LABEL_49;
                        v48 = *(unsigned int *)(a2 + 12);
                        if (!(_DWORD)v48)
                          __assert_rtn("load", "LXWordTrie.cpp", 387, "m_word_id_map_offset > 0");
                        if (!sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v48, (int *)(a2 + 20))|| !sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), (*(_DWORD *)(a2 + 12) + 3), (int *)(a2 + 16)))
                        {
                          goto LABEL_49;
                        }
                        *(_DWORD *)(a2 + 12) += 6;
                        if ((*(_DWORD *)(a2 + 4) & 0x40000) == 0)
                          goto LABEL_69;
                      }
                      else if ((v29 & 0x40000) == 0)
                      {
                        goto LABEL_69;
                      }
                      v53 = 0;
                      if ((sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x4CuLL, &v53) & 1) != 0)
                      {
                        if (!v53)
                          __assert_rtn("load", "LXWordTrie.cpp", 399, "huffman_coder_offset > 0");
                        v30 = *(uint64_t **)(a2 + 24);
                        v32 = *v30;
                        v31 = v30[1];
                        *(_QWORD *)&__p = v32;
                        *((_QWORD *)&__p + 1) = v31;
                        v62 = v53;
                        if (v31 < v53)
                          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
                        sub_19C022DB0(&v52, (uint64_t *)&__p, &v59);
                        v33 = *(_QWORD *)(a2 + 1512);
                        *(_QWORD *)(a2 + 1512) = v52;
                        if (v33)
                          sub_19C022A84(v33);
LABEL_69:
                        v49 = *(uint64_t **)(a2 + 32);
                        if (v56)
                        {
                          v51 = *v49;
                          v50 = v49[1];
                          *(_QWORD *)&__p = v51;
                          *((_QWORD *)&__p + 1) = v50;
                          v62 = v57 + v58;
                          if (v50 < v62)
                            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
                          sub_19C016CC4(a2 + 136, (uint64_t *)&__p);
                          v49 = *(uint64_t **)(a2 + 32);
                        }
                        if (sub_19C00C06C(a2 + 48, (unsigned int *)(*v49 + v54), v49[1] - v54))
                        {
                          v20 = 1;
                          *(_BYTE *)a2 = 1;
                          goto LABEL_50;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_49:
          v20 = 0;
          goto LABEL_50;
        }
LABEL_74:
        __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
      }
    }
  }
LABEL_50:
  if (v64 && v63[6] == 1)
    free(v64);
  return v20;
}

void sub_19C04BB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1)
      free(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C04BCDC(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  BOOL v59;
  unint64_t v60;
  __int128 __p;
  unint64_t v62;
  _BYTE v63[8];
  void *v64;
  _QWORD v65[3];

  v65[2] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19C03F690(a2);
  sub_19C03F6F4((uint64_t)v63, (unsigned __int16 *)v3);
  if (*(_QWORD *)(v3 + 8))
    v4 = *(char **)(v3 + 8);
  else
    v4 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v4);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)&__p);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  if (v6)
    sub_19C014608(v6);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  if (v64)
    v7 = (char *)v64;
  else
    v7 = (char *)v65;
  sub_19BF8E43C(&__p, v7);
  v8 = (_QWORD *)operator new();
  sub_19BF8A6DC(v8, (uint64_t)&__p);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  if (v9)
    sub_19C014608(v9);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  v10 = *(uint64_t **)(a2 + 24);
  v11 = *v10;
  v12 = v10[1];
  if (!sub_19C022ADC((_DWORD *)*v10, v12))
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v34 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19BF85000, v34, OS_LOG_TYPE_ERROR, "invalid magic number", (uint8_t *)&__p, 2u);
    }
    goto LABEL_48;
  }
  v13 = sub_19C022B08(v11, v12);
  v60 = v13;
  v14 = sub_19C022B08(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  if (!sub_19C03F838((int *)&v60, v14, HIDWORD(v14)))
  {
LABEL_48:
    sub_19C03F690(a2);
    goto LABEL_49;
  }
  v15 = HIDWORD(v13);
  sub_19C03FA28((uint64_t)&__p, **(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v15);
  v16 = __p;
  v17 = *(_QWORD *)(a2 + 1504);
  *(_QWORD *)(a2 + 1504) = __p;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = *(_QWORD *)(a2 + 1504);
  }
  if (!v16)
    goto LABEL_49;
  v59 = v15 > 0xE;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = v18[1];
  if (v19 < 0x28)
    goto LABEL_73;
  v20 = 0;
  if (v19 < 0x2C)
    goto LABEL_50;
  v21 = *v18;
  if (!v21)
    goto LABEL_50;
  v22 = bswap32(*(_DWORD *)(v21 + 40));
  *(_DWORD *)(a2 + 4) = v22;
  v23 = *(uint64_t **)(a2 + 24);
  v24 = *v23;
  if ((v22 & 0x400000) == 0)
  {
    if ((sub_19C03FC54(v24) & 1) != 0)
      goto LABEL_25;
    goto LABEL_48;
  }
  v36 = v23[1];
  if (v36 <= 0x3F)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  v20 = 0;
  if (v36 >= 0x44 && v24)
  {
    v37 = bswap32(*(_DWORD *)(v24 + 64));
    LODWORD(v52) = 0;
    if ((sub_19C022CDC(v24, v36, v37, &v52) & 1) == 0)
      goto LABEL_49;
    v38 = *(_QWORD *)(a2 + 24);
    v39 = v52;
    v40 = (v37 + v52 + 4);
    v58 = 0;
    v41 = *(_QWORD *)v38;
    if ((sub_19C022CDC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), v40, &v58) & 1) == 0)
      goto LABEL_49;
    v42 = **(_QWORD **)(a2 + 24);
    v43 = operator new(0x48uLL);
    v43[1] = 0;
    v43[2] = 0;
    *v43 = &off_1E3D12AD8;
    v43[3] = off_1E3D11D40;
    v44 = v58;
    v43[4] = a2 + 120;
    v43[5] = v41 + v37 + 4;
    v43[6] = v39 >> 3;
    v43[7] = v42 + v40 + 4;
    v43[8] = v44;
    *(_QWORD *)&__p = v43 + 3;
    *((_QWORD *)&__p + 1) = v43;
    sub_19BFAED8C(a2 + 1512, &__p);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
LABEL_25:
    v25 = *(uint64_t **)(a2 + 32);
    v26 = v25[1];
    if (v26 > 0x23)
    {
      v27 = *v25;
      if (v26 < 0x28 || v27 == 0)
        goto LABEL_49;
      *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(v27 + 36));
      v58 = 0;
      if ((sub_19C022CDC(v27, v26, 0x38uLL, &v58) & 1) == 0)
        goto LABEL_49;
      v57 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x3CuLL, &v57) & 1) == 0)
        goto LABEL_49;
      v56 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x40uLL, &v56) & 1) == 0)
        goto LABEL_49;
      v55 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x2CuLL, &v55) & 1) == 0)
        goto LABEL_49;
      v54 = 0;
      if (v55)
      {
        if (v55 != 5
          && (sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x44uLL, &v54) & 1) == 0)
        {
          goto LABEL_49;
        }
      }
      v29 = *(_DWORD *)(a2 + 4);
      if ((v29 & 0x10000) != 0)
      {
        if (!sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x48uLL, (_DWORD *)(a2 + 12)))goto LABEL_49;
        v48 = *(unsigned int *)(a2 + 12);
        if (!(_DWORD)v48)
          __assert_rtn("load", "LXWordTrie.cpp", 387, "m_word_id_map_offset > 0");
        if (!sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v48, (int *)(a2 + 20))|| !sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), (*(_DWORD *)(a2 + 12) + 3), (int *)(a2 + 16)))
        {
          goto LABEL_49;
        }
        *(_DWORD *)(a2 + 12) += 6;
        if ((*(_DWORD *)(a2 + 4) & 0x40000) != 0)
          goto LABEL_39;
      }
      else if ((v29 & 0x40000) != 0)
      {
LABEL_39:
        v53 = 0;
        if ((sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x4CuLL, &v53) & 1) != 0)
        {
          if (!v53)
            __assert_rtn("load", "LXWordTrie.cpp", 399, "huffman_coder_offset > 0");
          v30 = *(uint64_t **)(a2 + 24);
          v32 = *v30;
          v31 = v30[1];
          *(_QWORD *)&__p = v32;
          *((_QWORD *)&__p + 1) = v31;
          v62 = v53;
          if (v31 < v53)
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          sub_19C022DB0(&v52, (uint64_t *)&__p, &v59);
          v33 = *(_QWORD *)(a2 + 1496);
          *(_QWORD *)(a2 + 1496) = v52;
          if (v33)
            sub_19C022A84(v33);
          goto LABEL_69;
        }
LABEL_49:
        v20 = 0;
        goto LABEL_50;
      }
LABEL_69:
      v49 = *(uint64_t **)(a2 + 32);
      if (v56)
      {
        v51 = *v49;
        v50 = v49[1];
        *(_QWORD *)&__p = v51;
        *((_QWORD *)&__p + 1) = v50;
        v62 = v57 + v58;
        if (v50 < v62)
          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
        sub_19C016CC4(a2 + 120, (uint64_t *)&__p);
        v49 = *(uint64_t **)(a2 + 32);
      }
      sub_19BFB7818(a2 + 48, *v49 + v54, v49[1] - v54);
      v20 = 1;
      *(_BYTE *)a2 = 1;
      goto LABEL_50;
    }
LABEL_73:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
LABEL_50:
  if (v64 && v63[6] == 1)
    free(v64);
  return v20;
}

void sub_19C04C35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1)
      free(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C04C4CC(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  BOOL v61;
  unint64_t v62;
  __int128 __p;
  unint64_t v64;
  _BYTE v65[8];
  void *v66;
  _QWORD v67[3];

  v67[2] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19C03F690(a2);
  sub_19C03F6F4((uint64_t)v65, (unsigned __int16 *)v3);
  if (*(_QWORD *)(v3 + 8))
    v4 = *(char **)(v3 + 8);
  else
    v4 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v4);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)&__p);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  if (v6)
    sub_19C014608(v6);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)__p);
  if (v66)
    v7 = (char *)v66;
  else
    v7 = (char *)v67;
  sub_19BF8E43C(&__p, v7);
  v8 = (_QWORD *)operator new();
  sub_19BF8A6DC(v8, (uint64_t)&__p);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  if (v9)
    sub_19C014608(v9);
  if (SHIBYTE(v64) < 0)
    operator delete((void *)__p);
  v10 = *(uint64_t **)(a2 + 24);
  v11 = *v10;
  v12 = v10[1];
  if (!sub_19C022ADC((_DWORD *)*v10, v12))
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v34 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19BF85000, v34, OS_LOG_TYPE_ERROR, "invalid magic number", (uint8_t *)&__p, 2u);
    }
    goto LABEL_48;
  }
  v13 = sub_19C022B08(v11, v12);
  v62 = v13;
  v14 = sub_19C022B08(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  if (!sub_19C03F838((int *)&v62, v14, HIDWORD(v14)))
  {
LABEL_48:
    sub_19C03F690(a2);
    goto LABEL_49;
  }
  v15 = HIDWORD(v13);
  sub_19C03FA28((uint64_t)&__p, **(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v15);
  v16 = __p;
  v17 = *(_QWORD *)(a2 + 1528);
  *(_QWORD *)(a2 + 1528) = __p;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = *(_QWORD *)(a2 + 1528);
  }
  if (!v16)
    goto LABEL_49;
  v61 = v15 > 0xE;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = v18[1];
  if (v19 < 0x28)
    goto LABEL_73;
  v20 = 0;
  if (v19 < 0x2C)
    goto LABEL_50;
  v21 = *v18;
  if (!v21)
    goto LABEL_50;
  v22 = bswap32(*(_DWORD *)(v21 + 40));
  *(_DWORD *)(a2 + 4) = v22;
  v23 = *(uint64_t **)(a2 + 24);
  v24 = *v23;
  if ((v22 & 0x400000) == 0)
  {
    if ((sub_19C03FC54(v24) & 1) != 0)
      goto LABEL_25;
    goto LABEL_48;
  }
  v36 = v23[1];
  if (v36 <= 0x3F)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  v20 = 0;
  if (v36 >= 0x44 && v24)
  {
    v37 = bswap32(*(_DWORD *)(v24 + 64));
    LODWORD(v54) = 0;
    if ((sub_19C022CDC(v24, v36, v37, &v54) & 1) == 0)
      goto LABEL_49;
    v38 = *(_QWORD *)(a2 + 24);
    v39 = v54;
    v40 = (v37 + v54 + 4);
    v60 = 0;
    v41 = *(_QWORD *)v38;
    if ((sub_19C022CDC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), v40, &v60) & 1) == 0)
      goto LABEL_49;
    v42 = **(_QWORD **)(a2 + 24);
    v43 = operator new(0x48uLL);
    v43[1] = 0;
    v43[2] = 0;
    *v43 = &off_1E3D12AD8;
    v43[3] = off_1E3D11D40;
    v44 = v60;
    v43[4] = a2 + 144;
    v43[5] = v41 + v37 + 4;
    v43[6] = v39 >> 3;
    v43[7] = v42 + v40 + 4;
    v43[8] = v44;
    *(_QWORD *)&__p = v43 + 3;
    *((_QWORD *)&__p + 1) = v43;
    sub_19BFAED8C(a2 + 1536, &__p);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
LABEL_25:
    v25 = *(uint64_t **)(a2 + 32);
    v26 = v25[1];
    if (v26 > 0x23)
    {
      v27 = *v25;
      if (v26 < 0x28 || v27 == 0)
        goto LABEL_49;
      *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(v27 + 36));
      v60 = 0;
      if ((sub_19C022CDC(v27, v26, 0x38uLL, &v60) & 1) == 0)
        goto LABEL_49;
      v59 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x3CuLL, &v59) & 1) == 0)
        goto LABEL_49;
      v58 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x40uLL, &v58) & 1) == 0)
        goto LABEL_49;
      v57 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x2CuLL, &v57) & 1) == 0)
        goto LABEL_49;
      v56 = 0;
      if (v57)
      {
        if (v57 != 5
          && (sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x44uLL, &v56) & 1) == 0)
        {
          goto LABEL_49;
        }
      }
      v29 = *(_DWORD *)(a2 + 4);
      if ((v29 & 0x10000) != 0)
      {
        if (!sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x48uLL, (_DWORD *)(a2 + 12)))goto LABEL_49;
        v48 = *(unsigned int *)(a2 + 12);
        if (!(_DWORD)v48)
          __assert_rtn("load", "LXWordTrie.cpp", 387, "m_word_id_map_offset > 0");
        if (!sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v48, (int *)(a2 + 20))|| !sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), (*(_DWORD *)(a2 + 12) + 3), (int *)(a2 + 16)))
        {
          goto LABEL_49;
        }
        *(_DWORD *)(a2 + 12) += 6;
        if ((*(_DWORD *)(a2 + 4) & 0x40000) != 0)
          goto LABEL_39;
      }
      else if ((v29 & 0x40000) != 0)
      {
LABEL_39:
        v55 = 0;
        if ((sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x4CuLL, &v55) & 1) != 0)
        {
          if (!v55)
            __assert_rtn("load", "LXWordTrie.cpp", 399, "huffman_coder_offset > 0");
          v30 = *(uint64_t **)(a2 + 24);
          v32 = *v30;
          v31 = v30[1];
          *(_QWORD *)&__p = v32;
          *((_QWORD *)&__p + 1) = v31;
          v64 = v55;
          if (v31 < v55)
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          sub_19C022DB0(&v54, (uint64_t *)&__p, &v61);
          v33 = *(_QWORD *)(a2 + 1520);
          *(_QWORD *)(a2 + 1520) = v54;
          if (v33)
            sub_19C022A84(v33);
          goto LABEL_69;
        }
LABEL_49:
        v20 = 0;
        goto LABEL_50;
      }
LABEL_69:
      v49 = *(uint64_t **)(a2 + 32);
      if (v58)
      {
        v51 = *v49;
        v50 = v49[1];
        *(_QWORD *)&__p = v51;
        *((_QWORD *)&__p + 1) = v50;
        v64 = v59 + v60;
        if (v50 < v64)
          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
        sub_19C016CC4(a2 + 144, (uint64_t *)&__p);
        v49 = *(uint64_t **)(a2 + 32);
      }
      v52 = *v49 + v56;
      v53 = (v49[1] - (unint64_t)v56) >> 3;
      sub_19C00EC40(a2 + 48);
      *(_QWORD *)(a2 + 48) = v52;
      v20 = 1;
      *(_BYTE *)(a2 + 128) = 1;
      *(_QWORD *)(a2 + 64) = v53;
      *(_BYTE *)a2 = 1;
      goto LABEL_50;
    }
LABEL_73:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
LABEL_50:
  if (v66 && v65[6] == 1)
    free(v66);
  return v20;
}

void sub_19C04CB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1)
      free(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C04CCCC(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  BOOL v62;
  unint64_t v63;
  __int128 __p;
  unint64_t v65;
  _BYTE v66[8];
  void *v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19C03F690(a2);
  sub_19C03F6F4((uint64_t)v66, (unsigned __int16 *)v3);
  if (*(_QWORD *)(v3 + 8))
    v4 = *(char **)(v3 + 8);
  else
    v4 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v4);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)&__p);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  if (v6)
    sub_19C014608(v6);
  if (SHIBYTE(v65) < 0)
    operator delete((void *)__p);
  if (v67)
    v7 = (char *)v67;
  else
    v7 = (char *)v68;
  sub_19BF8E43C(&__p, v7);
  v8 = (_QWORD *)operator new();
  sub_19BF8A6DC(v8, (uint64_t)&__p);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  if (v9)
    sub_19C014608(v9);
  if (SHIBYTE(v65) < 0)
    operator delete((void *)__p);
  v10 = *(uint64_t **)(a2 + 24);
  v11 = *v10;
  v12 = v10[1];
  if (!sub_19C022ADC((_DWORD *)*v10, v12))
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v34 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19BF85000, v34, OS_LOG_TYPE_ERROR, "invalid magic number", (uint8_t *)&__p, 2u);
    }
    goto LABEL_48;
  }
  v13 = sub_19C022B08(v11, v12);
  v63 = v13;
  v14 = sub_19C022B08(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  if (!sub_19C03F838((int *)&v63, v14, HIDWORD(v14)))
  {
LABEL_48:
    sub_19C03F690(a2);
    goto LABEL_49;
  }
  v15 = HIDWORD(v13);
  sub_19C03FA28((uint64_t)&__p, **(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v15);
  v16 = __p;
  v17 = *(_QWORD *)(a2 + 1464);
  *(_QWORD *)(a2 + 1464) = __p;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = *(_QWORD *)(a2 + 1464);
  }
  if (!v16)
    goto LABEL_49;
  v62 = v15 > 0xE;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = v18[1];
  if (v19 < 0x28)
    goto LABEL_75;
  v20 = 0;
  if (v19 < 0x2C)
    goto LABEL_50;
  v21 = *v18;
  if (!v21)
    goto LABEL_50;
  v22 = bswap32(*(_DWORD *)(v21 + 40));
  *(_DWORD *)(a2 + 4) = v22;
  v23 = *(uint64_t **)(a2 + 24);
  v24 = *v23;
  if ((v22 & 0x400000) == 0)
  {
    if ((sub_19C03FC54(v24) & 1) != 0)
      goto LABEL_25;
    goto LABEL_48;
  }
  v36 = v23[1];
  if (v36 <= 0x3F)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  v20 = 0;
  if (v36 >= 0x44 && v24)
  {
    v37 = bswap32(*(_DWORD *)(v24 + 64));
    LODWORD(v55) = 0;
    if ((sub_19C022CDC(v24, v36, v37, &v55) & 1) == 0)
      goto LABEL_49;
    v38 = *(_QWORD *)(a2 + 24);
    v39 = v55;
    v40 = (v37 + v55 + 4);
    v61 = 0;
    v41 = *(_QWORD *)v38;
    if ((sub_19C022CDC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), v40, &v61) & 1) == 0)
      goto LABEL_49;
    v42 = **(_QWORD **)(a2 + 24);
    v43 = operator new(0x48uLL);
    v43[1] = 0;
    v43[2] = 0;
    *v43 = &off_1E3D12AD8;
    v43[3] = off_1E3D11D40;
    v44 = v61;
    v43[4] = a2 + 80;
    v43[5] = v41 + v37 + 4;
    v43[6] = v39 >> 3;
    v43[7] = v42 + v40 + 4;
    v43[8] = v44;
    *(_QWORD *)&__p = v43 + 3;
    *((_QWORD *)&__p + 1) = v43;
    sub_19BFAED8C(a2 + 1472, &__p);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
LABEL_25:
    v25 = *(uint64_t **)(a2 + 32);
    v26 = v25[1];
    if (v26 > 0x23)
    {
      v27 = *v25;
      if (v26 < 0x28 || v27 == 0)
        goto LABEL_49;
      *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(v27 + 36));
      v61 = 0;
      if ((sub_19C022CDC(v27, v26, 0x38uLL, &v61) & 1) == 0)
        goto LABEL_49;
      v60 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x3CuLL, &v60) & 1) == 0)
        goto LABEL_49;
      v59 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x40uLL, &v59) & 1) == 0)
        goto LABEL_49;
      v58 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x2CuLL, &v58) & 1) == 0)
        goto LABEL_49;
      v57 = 0;
      if (v58)
      {
        if (v58 != 5
          && (sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x44uLL, &v57) & 1) == 0)
        {
          goto LABEL_49;
        }
      }
      v29 = *(_DWORD *)(a2 + 4);
      if ((v29 & 0x10000) != 0)
      {
        if (!sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x48uLL, (_DWORD *)(a2 + 12)))goto LABEL_49;
        v48 = *(unsigned int *)(a2 + 12);
        if (!(_DWORD)v48)
          __assert_rtn("load", "LXWordTrie.cpp", 387, "m_word_id_map_offset > 0");
        if (!sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v48, (int *)(a2 + 20))|| !sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), (*(_DWORD *)(a2 + 12) + 3), (int *)(a2 + 16)))
        {
          goto LABEL_49;
        }
        *(_DWORD *)(a2 + 12) += 6;
        if ((*(_DWORD *)(a2 + 4) & 0x40000) != 0)
          goto LABEL_39;
      }
      else if ((v29 & 0x40000) != 0)
      {
LABEL_39:
        v56 = 0;
        if ((sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x4CuLL, &v56) & 1) != 0)
        {
          if (!v56)
            __assert_rtn("load", "LXWordTrie.cpp", 399, "huffman_coder_offset > 0");
          v30 = *(uint64_t **)(a2 + 24);
          v32 = *v30;
          v31 = v30[1];
          *(_QWORD *)&__p = v32;
          *((_QWORD *)&__p + 1) = v31;
          v65 = v56;
          if (v31 < v56)
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          sub_19C022DB0(&v55, (uint64_t *)&__p, &v62);
          v33 = *(_QWORD *)(a2 + 1456);
          *(_QWORD *)(a2 + 1456) = v55;
          if (v33)
            sub_19C022A84(v33);
          goto LABEL_69;
        }
LABEL_49:
        v20 = 0;
        goto LABEL_50;
      }
LABEL_69:
      v49 = *(uint64_t **)(a2 + 32);
      if (v59)
      {
        v51 = *v49;
        v50 = v49[1];
        *(_QWORD *)&__p = v51;
        *((_QWORD *)&__p + 1) = v50;
        v65 = v60 + v61;
        if (v50 < v65)
          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
        sub_19C016CC4(a2 + 80, (uint64_t *)&__p);
        v49 = *(uint64_t **)(a2 + 32);
      }
      v52 = *v49 + v57;
      v53 = v49[1] - v57;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      v54 = *(_QWORD *)(a2 + 72);
      if (v54)
      {
        MEMORY[0x1A1AD0CB8](v54, 0x1000C8052888210);
        *(_QWORD *)(a2 + 72) = 0;
      }
      *(_QWORD *)(a2 + 56) = v53;
      *(_QWORD *)(a2 + 64) = v52;
      v20 = 1;
      *(_BYTE *)a2 = 1;
      goto LABEL_50;
    }
LABEL_75:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
LABEL_50:
  if (v67 && v66[6] == 1)
    free(v67);
  return v20;
}

void sub_19C04D36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1)
      free(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C04D4DC(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  BOOL v59;
  unint64_t v60;
  __int128 __p;
  unint64_t v62;
  _BYTE v63[8];
  void *v64;
  _QWORD v65[3];

  v65[2] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19C03F690(a2);
  sub_19C03F6F4((uint64_t)v63, (unsigned __int16 *)v3);
  if (*(_QWORD *)(v3 + 8))
    v4 = *(char **)(v3 + 8);
  else
    v4 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v4);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)&__p);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  if (v6)
    sub_19C014608(v6);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  if (v64)
    v7 = (char *)v64;
  else
    v7 = (char *)v65;
  sub_19BF8E43C(&__p, v7);
  v8 = (_QWORD *)operator new();
  sub_19BF8A6DC(v8, (uint64_t)&__p);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  if (v9)
    sub_19C014608(v9);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  v10 = *(uint64_t **)(a2 + 24);
  v11 = *v10;
  v12 = v10[1];
  if (!sub_19C022ADC((_DWORD *)*v10, v12))
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v34 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19BF85000, v34, OS_LOG_TYPE_ERROR, "invalid magic number", (uint8_t *)&__p, 2u);
    }
    goto LABEL_48;
  }
  v13 = sub_19C022B08(v11, v12);
  v60 = v13;
  v14 = sub_19C022B08(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  if (!sub_19C03F838((int *)&v60, v14, HIDWORD(v14)))
  {
LABEL_48:
    sub_19C03F690(a2);
    goto LABEL_49;
  }
  v15 = HIDWORD(v13);
  sub_19C03FA28((uint64_t)&__p, **(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v15);
  v16 = __p;
  v17 = *(_QWORD *)(a2 + 2032);
  *(_QWORD *)(a2 + 2032) = __p;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = *(_QWORD *)(a2 + 2032);
  }
  if (!v16)
    goto LABEL_49;
  v59 = v15 > 0xE;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = v18[1];
  if (v19 < 0x28)
    goto LABEL_73;
  v20 = 0;
  if (v19 < 0x2C)
    goto LABEL_50;
  v21 = *v18;
  if (!v21)
    goto LABEL_50;
  v22 = bswap32(*(_DWORD *)(v21 + 40));
  *(_DWORD *)(a2 + 4) = v22;
  v23 = *(uint64_t **)(a2 + 24);
  v24 = *v23;
  if ((v22 & 0x400000) == 0)
  {
    if ((sub_19C03FC54(v24) & 1) != 0)
      goto LABEL_25;
    goto LABEL_48;
  }
  v36 = v23[1];
  if (v36 <= 0x3F)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  v20 = 0;
  if (v36 >= 0x44 && v24)
  {
    v37 = bswap32(*(_DWORD *)(v24 + 64));
    LODWORD(v52) = 0;
    if ((sub_19C022CDC(v24, v36, v37, &v52) & 1) == 0)
      goto LABEL_49;
    v38 = *(_QWORD *)(a2 + 24);
    v39 = v52;
    v40 = (v37 + v52 + 4);
    v58 = 0;
    v41 = *(_QWORD *)v38;
    if ((sub_19C022CDC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), v40, &v58) & 1) == 0)
      goto LABEL_49;
    v42 = **(_QWORD **)(a2 + 24);
    v43 = operator new(0x48uLL);
    v43[1] = 0;
    v43[2] = 0;
    *v43 = &off_1E3D12AD8;
    v43[3] = off_1E3D11D40;
    v44 = v58;
    v43[4] = a2 + 648;
    v43[5] = v41 + v37 + 4;
    v43[6] = v39 >> 3;
    v43[7] = v42 + v40 + 4;
    v43[8] = v44;
    *(_QWORD *)&__p = v43 + 3;
    *((_QWORD *)&__p + 1) = v43;
    sub_19BFAED8C(a2 + 2040, &__p);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
LABEL_25:
    v25 = *(uint64_t **)(a2 + 32);
    v26 = v25[1];
    if (v26 > 0x23)
    {
      v27 = *v25;
      if (v26 < 0x28 || v27 == 0)
        goto LABEL_49;
      *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(v27 + 36));
      v58 = 0;
      if ((sub_19C022CDC(v27, v26, 0x38uLL, &v58) & 1) == 0)
        goto LABEL_49;
      v57 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x3CuLL, &v57) & 1) == 0)
        goto LABEL_49;
      v56 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x40uLL, &v56) & 1) == 0)
        goto LABEL_49;
      v55 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x2CuLL, &v55) & 1) == 0)
        goto LABEL_49;
      v54 = 0;
      if (v55)
      {
        if (v55 != 5
          && (sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x44uLL, &v54) & 1) == 0)
        {
          goto LABEL_49;
        }
      }
      v29 = *(_DWORD *)(a2 + 4);
      if ((v29 & 0x10000) != 0)
      {
        if (!sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x48uLL, (_DWORD *)(a2 + 12)))goto LABEL_49;
        v48 = *(unsigned int *)(a2 + 12);
        if (!(_DWORD)v48)
          __assert_rtn("load", "LXWordTrie.cpp", 387, "m_word_id_map_offset > 0");
        if (!sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v48, (int *)(a2 + 20))|| !sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), (*(_DWORD *)(a2 + 12) + 3), (int *)(a2 + 16)))
        {
          goto LABEL_49;
        }
        *(_DWORD *)(a2 + 12) += 6;
        if ((*(_DWORD *)(a2 + 4) & 0x40000) != 0)
          goto LABEL_39;
      }
      else if ((v29 & 0x40000) != 0)
      {
LABEL_39:
        v53 = 0;
        if ((sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x4CuLL, &v53) & 1) != 0)
        {
          if (!v53)
            __assert_rtn("load", "LXWordTrie.cpp", 399, "huffman_coder_offset > 0");
          v30 = *(uint64_t **)(a2 + 24);
          v32 = *v30;
          v31 = v30[1];
          *(_QWORD *)&__p = v32;
          *((_QWORD *)&__p + 1) = v31;
          v62 = v53;
          if (v31 < v53)
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          sub_19C022DB0(&v52, (uint64_t *)&__p, &v59);
          v33 = *(_QWORD *)(a2 + 2024);
          *(_QWORD *)(a2 + 2024) = v52;
          if (v33)
            sub_19C022A84(v33);
          goto LABEL_69;
        }
LABEL_49:
        v20 = 0;
        goto LABEL_50;
      }
LABEL_69:
      v49 = *(uint64_t **)(a2 + 32);
      if (v56)
      {
        v51 = *v49;
        v50 = v49[1];
        *(_QWORD *)&__p = v51;
        *((_QWORD *)&__p + 1) = v50;
        v62 = v57 + v58;
        if (v50 < v62)
          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
        sub_19C016CC4(a2 + 648, (uint64_t *)&__p);
        v49 = *(uint64_t **)(a2 + 32);
      }
      sub_19C044F40(a2 + 48, (int *)(*v49 + v54), (v49[1] - (unint64_t)v54) >> 3);
      sub_19C044250(a2 + 48);
      v20 = 1;
      *(_BYTE *)a2 = 1;
      goto LABEL_50;
    }
LABEL_73:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
LABEL_50:
  if (v64 && v63[6] == 1)
    free(v64);
  return v20;
}

void sub_19C04DB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1)
      free(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C04DCDC(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  BOOL v59;
  unint64_t v60;
  __int128 __p;
  unint64_t v62;
  _BYTE v63[8];
  void *v64;
  _QWORD v65[3];

  v65[2] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19C03F690(a2);
  sub_19C03F6F4((uint64_t)v63, (unsigned __int16 *)v3);
  if (*(_QWORD *)(v3 + 8))
    v4 = *(char **)(v3 + 8);
  else
    v4 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v4);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)&__p);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  if (v6)
    sub_19C014608(v6);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  if (v64)
    v7 = (char *)v64;
  else
    v7 = (char *)v65;
  sub_19BF8E43C(&__p, v7);
  v8 = (_QWORD *)operator new();
  sub_19BF8A6DC(v8, (uint64_t)&__p);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  if (v9)
    sub_19C014608(v9);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  v10 = *(uint64_t **)(a2 + 24);
  v11 = *v10;
  v12 = v10[1];
  if (!sub_19C022ADC((_DWORD *)*v10, v12))
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v34 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19BF85000, v34, OS_LOG_TYPE_ERROR, "invalid magic number", (uint8_t *)&__p, 2u);
    }
    goto LABEL_48;
  }
  v13 = sub_19C022B08(v11, v12);
  v60 = v13;
  v14 = sub_19C022B08(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  if (!sub_19C03F838((int *)&v60, v14, HIDWORD(v14)))
  {
LABEL_48:
    sub_19C03F690(a2);
    goto LABEL_49;
  }
  v15 = HIDWORD(v13);
  sub_19C03FA28((uint64_t)&__p, **(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v15);
  v16 = __p;
  v17 = *(_QWORD *)(a2 + 1488);
  *(_QWORD *)(a2 + 1488) = __p;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = *(_QWORD *)(a2 + 1488);
  }
  if (!v16)
    goto LABEL_49;
  v59 = v15 > 0xE;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = v18[1];
  if (v19 < 0x28)
    goto LABEL_74;
  v20 = 0;
  if (v19 >= 0x2C)
  {
    v21 = *v18;
    if (v21)
    {
      v22 = bswap32(*(_DWORD *)(v21 + 40));
      *(_DWORD *)(a2 + 4) = v22;
      v23 = *(uint64_t **)(a2 + 24);
      v24 = *v23;
      if ((v22 & 0x400000) == 0)
      {
        if ((sub_19C03FC54(v24) & 1) != 0)
          goto LABEL_25;
        goto LABEL_48;
      }
      v36 = v23[1];
      if (v36 <= 0x3F)
        __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
      v20 = 0;
      if (v36 >= 0x44 && v24)
      {
        v37 = bswap32(*(_DWORD *)(v24 + 64));
        LODWORD(v52) = 0;
        if ((sub_19C022CDC(v24, v36, v37, &v52) & 1) == 0)
          goto LABEL_49;
        v38 = *(_QWORD *)(a2 + 24);
        v39 = v52;
        v40 = (v37 + v52 + 4);
        v58 = 0;
        v41 = *(_QWORD *)v38;
        if ((sub_19C022CDC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), v40, &v58) & 1) == 0)
          goto LABEL_49;
        v42 = **(_QWORD **)(a2 + 24);
        v43 = operator new(0x48uLL);
        v43[1] = 0;
        v43[2] = 0;
        *v43 = &off_1E3D12AD8;
        v43[3] = off_1E3D11D40;
        v44 = v58;
        v43[4] = a2 + 104;
        v43[5] = v41 + v37 + 4;
        v43[6] = v39 >> 3;
        v43[7] = v42 + v40 + 4;
        v43[8] = v44;
        *(_QWORD *)&__p = v43 + 3;
        *((_QWORD *)&__p + 1) = v43;
        sub_19BFAED8C(a2 + 1496, &__p);
        v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
LABEL_25:
        v25 = *(uint64_t **)(a2 + 32);
        v26 = v25[1];
        if (v26 > 0x23)
        {
          v27 = *v25;
          if (v26 >= 0x28 && v27 != 0)
          {
            *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(v27 + 36));
            v58 = 0;
            if ((sub_19C022CDC(v27, v26, 0x38uLL, &v58) & 1) != 0)
            {
              v57 = 0;
              if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x3CuLL, &v57) & 1) != 0)
              {
                v56 = 0;
                if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x40uLL, &v56) & 1) != 0)
                {
                  v55 = 0;
                  if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x2CuLL, &v55) & 1) != 0)
                  {
                    v54 = 0;
                    if (!v55
                      || v55 == 5
                      || (sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x44uLL, &v54) & 1) != 0)
                    {
                      v29 = *(_DWORD *)(a2 + 4);
                      if ((v29 & 0x10000) != 0)
                      {
                        if (!sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x48uLL, (_DWORD *)(a2 + 12)))goto LABEL_49;
                        v48 = *(unsigned int *)(a2 + 12);
                        if (!(_DWORD)v48)
                          __assert_rtn("load", "LXWordTrie.cpp", 387, "m_word_id_map_offset > 0");
                        if (!sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v48, (int *)(a2 + 20))|| !sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), (*(_DWORD *)(a2 + 12) + 3), (int *)(a2 + 16)))
                        {
                          goto LABEL_49;
                        }
                        *(_DWORD *)(a2 + 12) += 6;
                        if ((*(_DWORD *)(a2 + 4) & 0x40000) == 0)
                          goto LABEL_69;
                      }
                      else if ((v29 & 0x40000) == 0)
                      {
                        goto LABEL_69;
                      }
                      v53 = 0;
                      if ((sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x4CuLL, &v53) & 1) != 0)
                      {
                        if (!v53)
                          __assert_rtn("load", "LXWordTrie.cpp", 399, "huffman_coder_offset > 0");
                        v30 = *(uint64_t **)(a2 + 24);
                        v32 = *v30;
                        v31 = v30[1];
                        *(_QWORD *)&__p = v32;
                        *((_QWORD *)&__p + 1) = v31;
                        v62 = v53;
                        if (v31 < v53)
                          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
                        sub_19C022DB0(&v52, (uint64_t *)&__p, &v59);
                        v33 = *(_QWORD *)(a2 + 1480);
                        *(_QWORD *)(a2 + 1480) = v52;
                        if (v33)
                          sub_19C022A84(v33);
LABEL_69:
                        v49 = *(uint64_t **)(a2 + 32);
                        if (v56)
                        {
                          v51 = *v49;
                          v50 = v49[1];
                          *(_QWORD *)&__p = v51;
                          *((_QWORD *)&__p + 1) = v50;
                          v62 = v57 + v58;
                          if (v50 < v62)
                            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
                          sub_19C016CC4(a2 + 104, (uint64_t *)&__p);
                          v49 = *(uint64_t **)(a2 + 32);
                        }
                        if (sub_19C045310((uint64_t *)(a2 + 40), (_QWORD *)(*v49 + v54), v49[1] - v54))
                        {
                          v20 = 1;
                          *(_BYTE *)a2 = 1;
                          goto LABEL_50;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_49:
          v20 = 0;
          goto LABEL_50;
        }
LABEL_74:
        __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
      }
    }
  }
LABEL_50:
  if (v64 && v63[6] == 1)
    free(v64);
  return v20;
}

void sub_19C04E360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1)
      free(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C04E4D0(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  BOOL v59;
  unint64_t v60;
  __int128 __p;
  unint64_t v62;
  _BYTE v63[8];
  void *v64;
  _QWORD v65[3];

  v65[2] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19C03F690(a2);
  sub_19C03F6F4((uint64_t)v63, (unsigned __int16 *)v3);
  if (*(_QWORD *)(v3 + 8))
    v4 = *(char **)(v3 + 8);
  else
    v4 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v4);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)&__p);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  if (v6)
    sub_19C014608(v6);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  if (v64)
    v7 = (char *)v64;
  else
    v7 = (char *)v65;
  sub_19BF8E43C(&__p, v7);
  v8 = (_QWORD *)operator new();
  sub_19BF8A6DC(v8, (uint64_t)&__p);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  if (v9)
    sub_19C014608(v9);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  v10 = *(uint64_t **)(a2 + 24);
  v11 = *v10;
  v12 = v10[1];
  if (!sub_19C022ADC((_DWORD *)*v10, v12))
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v34 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19BF85000, v34, OS_LOG_TYPE_ERROR, "invalid magic number", (uint8_t *)&__p, 2u);
    }
    goto LABEL_48;
  }
  v13 = sub_19C022B08(v11, v12);
  v60 = v13;
  v14 = sub_19C022B08(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  if (!sub_19C03F838((int *)&v60, v14, HIDWORD(v14)))
  {
LABEL_48:
    sub_19C03F690(a2);
    goto LABEL_49;
  }
  v15 = HIDWORD(v13);
  sub_19C03FA28((uint64_t)&__p, **(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v15);
  v16 = __p;
  v17 = *(_QWORD *)(a2 + 1488);
  *(_QWORD *)(a2 + 1488) = __p;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = *(_QWORD *)(a2 + 1488);
  }
  if (!v16)
    goto LABEL_49;
  v59 = v15 > 0xE;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = v18[1];
  if (v19 < 0x28)
    goto LABEL_74;
  v20 = 0;
  if (v19 >= 0x2C)
  {
    v21 = *v18;
    if (v21)
    {
      v22 = bswap32(*(_DWORD *)(v21 + 40));
      *(_DWORD *)(a2 + 4) = v22;
      v23 = *(uint64_t **)(a2 + 24);
      v24 = *v23;
      if ((v22 & 0x400000) == 0)
      {
        if ((sub_19C03FC54(v24) & 1) != 0)
          goto LABEL_25;
        goto LABEL_48;
      }
      v36 = v23[1];
      if (v36 <= 0x3F)
        __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
      v20 = 0;
      if (v36 >= 0x44 && v24)
      {
        v37 = bswap32(*(_DWORD *)(v24 + 64));
        LODWORD(v52) = 0;
        if ((sub_19C022CDC(v24, v36, v37, &v52) & 1) == 0)
          goto LABEL_49;
        v38 = *(_QWORD *)(a2 + 24);
        v39 = v52;
        v40 = (v37 + v52 + 4);
        v58 = 0;
        v41 = *(_QWORD *)v38;
        if ((sub_19C022CDC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), v40, &v58) & 1) == 0)
          goto LABEL_49;
        v42 = **(_QWORD **)(a2 + 24);
        v43 = operator new(0x48uLL);
        v43[1] = 0;
        v43[2] = 0;
        *v43 = &off_1E3D12AD8;
        v43[3] = off_1E3D11D40;
        v44 = v58;
        v43[4] = a2 + 104;
        v43[5] = v41 + v37 + 4;
        v43[6] = v39 >> 3;
        v43[7] = v42 + v40 + 4;
        v43[8] = v44;
        *(_QWORD *)&__p = v43 + 3;
        *((_QWORD *)&__p + 1) = v43;
        sub_19BFAED8C(a2 + 1496, &__p);
        v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
LABEL_25:
        v25 = *(uint64_t **)(a2 + 32);
        v26 = v25[1];
        if (v26 > 0x23)
        {
          v27 = *v25;
          if (v26 >= 0x28 && v27 != 0)
          {
            *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(v27 + 36));
            v58 = 0;
            if ((sub_19C022CDC(v27, v26, 0x38uLL, &v58) & 1) != 0)
            {
              v57 = 0;
              if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x3CuLL, &v57) & 1) != 0)
              {
                v56 = 0;
                if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x40uLL, &v56) & 1) != 0)
                {
                  v55 = 0;
                  if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x2CuLL, &v55) & 1) != 0)
                  {
                    v54 = 0;
                    if (!v55
                      || v55 == 5
                      || (sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x44uLL, &v54) & 1) != 0)
                    {
                      v29 = *(_DWORD *)(a2 + 4);
                      if ((v29 & 0x10000) != 0)
                      {
                        if (!sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x48uLL, (_DWORD *)(a2 + 12)))goto LABEL_49;
                        v48 = *(unsigned int *)(a2 + 12);
                        if (!(_DWORD)v48)
                          __assert_rtn("load", "LXWordTrie.cpp", 387, "m_word_id_map_offset > 0");
                        if (!sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v48, (int *)(a2 + 20))|| !sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), (*(_DWORD *)(a2 + 12) + 3), (int *)(a2 + 16)))
                        {
                          goto LABEL_49;
                        }
                        *(_DWORD *)(a2 + 12) += 6;
                        if ((*(_DWORD *)(a2 + 4) & 0x40000) == 0)
                          goto LABEL_69;
                      }
                      else if ((v29 & 0x40000) == 0)
                      {
                        goto LABEL_69;
                      }
                      v53 = 0;
                      if ((sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x4CuLL, &v53) & 1) != 0)
                      {
                        if (!v53)
                          __assert_rtn("load", "LXWordTrie.cpp", 399, "huffman_coder_offset > 0");
                        v30 = *(uint64_t **)(a2 + 24);
                        v32 = *v30;
                        v31 = v30[1];
                        *(_QWORD *)&__p = v32;
                        *((_QWORD *)&__p + 1) = v31;
                        v62 = v53;
                        if (v31 < v53)
                          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
                        sub_19C022DB0(&v52, (uint64_t *)&__p, &v59);
                        v33 = *(_QWORD *)(a2 + 1480);
                        *(_QWORD *)(a2 + 1480) = v52;
                        if (v33)
                          sub_19C022A84(v33);
LABEL_69:
                        v49 = *(uint64_t **)(a2 + 32);
                        if (v56)
                        {
                          v51 = *v49;
                          v50 = v49[1];
                          *(_QWORD *)&__p = v51;
                          *((_QWORD *)&__p + 1) = v50;
                          v62 = v57 + v58;
                          if (v50 < v62)
                            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
                          sub_19C016CC4(a2 + 104, (uint64_t *)&__p);
                          v49 = *(uint64_t **)(a2 + 32);
                        }
                        if (sub_19C045E70(a2 + 40, (unsigned int *)(*v49 + v54), v49[1] - v54))
                        {
                          v20 = 1;
                          *(_BYTE *)a2 = 1;
                          goto LABEL_50;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_49:
          v20 = 0;
          goto LABEL_50;
        }
LABEL_74:
        __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
      }
    }
  }
LABEL_50:
  if (v64 && v63[6] == 1)
    free(v64);
  return v20;
}

void sub_19C04EB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1)
      free(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C04ECC4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  BOOL v59;
  unint64_t v60;
  __int128 __p;
  unint64_t v62;
  _BYTE v63[8];
  void *v64;
  _QWORD v65[3];

  v65[2] = *MEMORY[0x1E0C80C00];
  v3 = **a1;
  sub_19C03F690(a2);
  sub_19C03F6F4((uint64_t)v63, (unsigned __int16 *)v3);
  if (*(_QWORD *)(v3 + 8))
    v4 = *(char **)(v3 + 8);
  else
    v4 = (char *)(v3 + 16);
  sub_19BF8E43C(&__p, v4);
  v5 = (_QWORD *)operator new();
  sub_19BF8A6DC(v5, (uint64_t)&__p);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  if (v6)
    sub_19C014608(v6);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  if (v64)
    v7 = (char *)v64;
  else
    v7 = (char *)v65;
  sub_19BF8E43C(&__p, v7);
  v8 = (_QWORD *)operator new();
  sub_19BF8A6DC(v8, (uint64_t)&__p);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  if (v9)
    sub_19C014608(v9);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__p);
  v10 = *(uint64_t **)(a2 + 24);
  v11 = *v10;
  v12 = v10[1];
  if (!sub_19C022ADC((_DWORD *)*v10, v12))
  {
    if (qword_1EE417930 != -1)
      dispatch_once(&qword_1EE417930, &unk_1E3D180D0);
    v34 = qword_1EE417928;
    if (os_log_type_enabled((os_log_t)qword_1EE417928, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_19BF85000, v34, OS_LOG_TYPE_ERROR, "invalid magic number", (uint8_t *)&__p, 2u);
    }
    goto LABEL_48;
  }
  v13 = sub_19C022B08(v11, v12);
  v60 = v13;
  v14 = sub_19C022B08(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8));
  if (!sub_19C03F838((int *)&v60, v14, HIDWORD(v14)))
  {
LABEL_48:
    sub_19C03F690(a2);
    goto LABEL_49;
  }
  v15 = HIDWORD(v13);
  sub_19C03FA28((uint64_t)&__p, **(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v15);
  v16 = __p;
  v17 = *(_QWORD *)(a2 + 1472);
  *(_QWORD *)(a2 + 1472) = __p;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v16 = *(_QWORD *)(a2 + 1472);
  }
  if (!v16)
    goto LABEL_49;
  v59 = v15 > 0xE;
  v18 = *(uint64_t **)(a2 + 32);
  v19 = v18[1];
  if (v19 < 0x28)
    goto LABEL_73;
  v20 = 0;
  if (v19 < 0x2C)
    goto LABEL_50;
  v21 = *v18;
  if (!v21)
    goto LABEL_50;
  v22 = bswap32(*(_DWORD *)(v21 + 40));
  *(_DWORD *)(a2 + 4) = v22;
  v23 = *(uint64_t **)(a2 + 24);
  v24 = *v23;
  if ((v22 & 0x400000) == 0)
  {
    if ((sub_19C03FC54(v24) & 1) != 0)
      goto LABEL_25;
    goto LABEL_48;
  }
  v36 = v23[1];
  if (v36 <= 0x3F)
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  v20 = 0;
  if (v36 >= 0x44 && v24)
  {
    v37 = bswap32(*(_DWORD *)(v24 + 64));
    LODWORD(v52) = 0;
    if ((sub_19C022CDC(v24, v36, v37, &v52) & 1) == 0)
      goto LABEL_49;
    v38 = *(_QWORD *)(a2 + 24);
    v39 = v52;
    v40 = (v37 + v52 + 4);
    v58 = 0;
    v41 = *(_QWORD *)v38;
    if ((sub_19C022CDC(*(_QWORD *)v38, *(_QWORD *)(v38 + 8), v40, &v58) & 1) == 0)
      goto LABEL_49;
    v42 = **(_QWORD **)(a2 + 24);
    v43 = operator new(0x48uLL);
    v43[1] = 0;
    v43[2] = 0;
    *v43 = &off_1E3D12AD8;
    v43[3] = off_1E3D11D40;
    v44 = v58;
    v43[4] = a2 + 88;
    v43[5] = v41 + v37 + 4;
    v43[6] = v39 >> 3;
    v43[7] = v42 + v40 + 4;
    v43[8] = v44;
    *(_QWORD *)&__p = v43 + 3;
    *((_QWORD *)&__p + 1) = v43;
    sub_19BFAED8C(a2 + 1480, &__p);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
LABEL_25:
    v25 = *(uint64_t **)(a2 + 32);
    v26 = v25[1];
    if (v26 > 0x23)
    {
      v27 = *v25;
      if (v26 < 0x28 || v27 == 0)
        goto LABEL_49;
      *(_DWORD *)(a2 + 8) = bswap32(*(_DWORD *)(v27 + 36));
      v58 = 0;
      if ((sub_19C022CDC(v27, v26, 0x38uLL, &v58) & 1) == 0)
        goto LABEL_49;
      v57 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x3CuLL, &v57) & 1) == 0)
        goto LABEL_49;
      v56 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x40uLL, &v56) & 1) == 0)
        goto LABEL_49;
      v55 = 0;
      if ((sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x2CuLL, &v55) & 1) == 0)
        goto LABEL_49;
      v54 = 0;
      if (v55)
      {
        if (v55 != 5
          && (sub_19C022CDC(**(_QWORD **)(a2 + 32), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), 0x44uLL, &v54) & 1) == 0)
        {
          goto LABEL_49;
        }
      }
      v29 = *(_DWORD *)(a2 + 4);
      if ((v29 & 0x10000) != 0)
      {
        if (!sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x48uLL, (_DWORD *)(a2 + 12)))goto LABEL_49;
        v48 = *(unsigned int *)(a2 + 12);
        if (!(_DWORD)v48)
          __assert_rtn("load", "LXWordTrie.cpp", 387, "m_word_id_map_offset > 0");
        if (!sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), v48, (int *)(a2 + 20))|| !sub_19C022D3C(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), (*(_DWORD *)(a2 + 12) + 3), (int *)(a2 + 16)))
        {
          goto LABEL_49;
        }
        *(_DWORD *)(a2 + 12) += 6;
        if ((*(_DWORD *)(a2 + 4) & 0x40000) != 0)
          goto LABEL_39;
      }
      else if ((v29 & 0x40000) != 0)
      {
LABEL_39:
        v53 = 0;
        if ((sub_19C022CDC(**(_QWORD **)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), 0x4CuLL, &v53) & 1) != 0)
        {
          if (!v53)
            __assert_rtn("load", "LXWordTrie.cpp", 399, "huffman_coder_offset > 0");
          v30 = *(uint64_t **)(a2 + 24);
          v32 = *v30;
          v31 = v30[1];
          *(_QWORD *)&__p = v32;
          *((_QWORD *)&__p + 1) = v31;
          v62 = v53;
          if (v31 < v53)
            __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
          sub_19C022DB0(&v52, (uint64_t *)&__p, &v59);
          v33 = *(_QWORD *)(a2 + 1464);
          *(_QWORD *)(a2 + 1464) = v52;
          if (v33)
            sub_19C022A84(v33);
          goto LABEL_69;
        }
LABEL_49:
        v20 = 0;
        goto LABEL_50;
      }
LABEL_69:
      v49 = *(uint64_t **)(a2 + 32);
      if (v56)
      {
        v51 = *v49;
        v50 = v49[1];
        *(_QWORD *)&__p = v51;
        *((_QWORD *)&__p + 1) = v50;
        v62 = v57 + v58;
        if (v50 < v62)
          __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
        sub_19C016CC4(a2 + 88, (uint64_t *)&__p);
        v49 = *(uint64_t **)(a2 + 32);
      }
      sub_19C046DC8(a2 + 40, *v49 + v54, v49[1] - v54);
      v20 = 1;
      *(_BYTE *)a2 = 1;
      goto LABEL_50;
    }
LABEL_73:
    __assert_rtn("InputStream", "TIDataFile.cpp", 314, "m_offset <= m_size");
  }
LABEL_50:
  if (v64 && v63[6] == 1)
    free(v64);
  return v20;
}

void sub_19C04F344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,void *a24)
{
  if (a24)
  {
    if (a23 == 1)
      free(a24);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C04F4B4()
{
  __assert_rtn("nextPositionForByte", "BTriePositionInterpreter.cpp", 49, "false");
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80308](data, *(_QWORD *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1E0C98080](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1E0C98460](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x1E0C98490](allocator, formatter, date);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
  MEMORY[0x1E0C984C0](formatter, formatString);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1E0C98630](err);
}

CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98648](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x1E0C98650](allocator, domain, code, userInfo);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1E0C98798](allocator, localeIdentifier);
}

CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef allocator, CFLocaleIdentifier localeID)
{
  return (CFDictionaryRef)MEMORY[0x1E0C987B8](allocator, localeID);
}

CFLocaleRef CFLocaleCreateCopy(CFAllocatorRef allocator, CFLocaleRef locale)
{
  return (CFLocaleRef)MEMORY[0x1E0C987C0](allocator, locale);
}

CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef allocator, CFDictionaryRef dictionary)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987C8](allocator, dictionary);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987D8](locale);
}

CFTypeID CFLocaleGetTypeID(void)
{
  return MEMORY[0x1E0C987F8]();
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x1E0C98800](locale, key);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return MEMORY[0x1E0C98AF8](propertyList, stream, format, options, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1E0C98FE8](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1E0C99168]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C991D0](theString, locale);
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x1E0C99248](string, range, transform, reverse);
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1E0C992C8](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1E0C992D8](anURL, pathStyle);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1E0C992F8](url);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C99318](anURL);
}

CFStringRef CFURLCopyPathExtension(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1E0C99320](url);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99380](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1E0C99390](allocator, url);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C993C8](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1E0C994B8]();
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x1E0C994D0](url, error);
}

Boolean CFURLSetResourcePropertyForKey(CFURLRef url, CFStringRef key, CFTypeRef propertyValue, CFErrorRef *error)
{
  return MEMORY[0x1E0C994E0](url, key, propertyValue, error);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
  MEMORY[0x1E0C99600](stream);
}

CFWriteStreamRef CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFWriteStreamRef)MEMORY[0x1E0C99630](alloc, fileURL);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1E0C99650](stream);
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x1E0D43820]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

uint64_t _CFURLReplaceObject()
{
  return MEMORY[0x1E0C9A768]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x1E0DE41A0](retstr, this);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1E0DE41F0]();
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::directory_iterator::__dereference(const std::__fs::filesystem::directory_iterator *this)
{
  return (const std::__fs::filesystem::directory_entry *)MEMORY[0x1E0DE41F8](this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x1E0DE4208](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x1E0DE4218](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x1E0DE4220](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1E0DE4320](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x1E0DE43A8](a1, a2, a3);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x1E0DE43F8](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4408](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4440](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1E0DE4490](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x1E0DE44A8](this, __requested_capacity);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x1E0DE44B0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

std::strstreambuf *__cdecl std::strstreambuf::strstreambuf(std::strstreambuf *this, std::streamsize __alsize)
{
  return (std::strstreambuf *)MEMORY[0x1E0DE4550](this, __alsize);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1E0DE45F0]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1E0DE4630]();
}

{
  return MEMORY[0x1E0DE4638]();
}

{
  return MEMORY[0x1E0DE4648]();
}

{
  return MEMORY[0x1E0DE4650]();
}

{
  return MEMORY[0x1E0DE4658]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1E0DE46A8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4728]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1E0DE4848]();
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x1E0DE4858]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::__increment(std::__fs::filesystem::directory_iterator *this, std::error_code *__ec)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x1E0DE49F0](this, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::directory_iterator(std::__fs::filesystem::directory_iterator *this, const std::__fs::filesystem::path *a2, std::error_code *a3, std::__fs::filesystem::directory_options a4)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x1E0DE49F8](this, a2, a3, a4);
}

BOOL std::__fs::filesystem::__remove(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x1E0DE4A38](a1, __ec);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::codecvt<char16_t,char,__mbstate_t>::~codecvt(std::codecvt<char16_t, char, mbstate_t> *this)
{
  MEMORY[0x1E0DE4BE0](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

std::ios_base::Init *__cdecl std::ios_base::Init::Init(std::ios_base::Init *this)
{
  return (std::ios_base::Init *)MEMORY[0x1E0DE4C58](this);
}

void std::ios_base::Init::~Init(std::ios_base::Init *this)
{
  MEMORY[0x1E0DE4C60](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

std::ios_base::failure *__cdecl std::ios_base::failure::failure(std::ios_base::failure *this, const std::string *__msg, const std::error_code *__ec)
{
  return (std::ios_base::failure *)MEMORY[0x1E0DE4CA8](this, __msg, __ec);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

void std::strstream::~strstream(std::strstream *this)
{
  MEMORY[0x1E0DE4D38](this);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E3D10000();
}

void operator delete(void *__p)
{
  off_1E3D10008(__p);
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  off_1E3D10010(__p, a2);
}

uint64_t operator delete()
{
  return off_1E3D10018();
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E3D10020(__sz, a2);
}

uint64_t operator new[]()
{
  return off_1E3D10028();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E3D10030(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E3D10038(__sz, a2);
}

uint64_t operator new()
{
  return off_1E3D10040();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int feof(FILE *a1)
{
  return MEMORY[0x1E0C83340](a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1E0C83348](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1E0C833A0](a1, *(_QWORD *)&a2, a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x1E0C835C8](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

int getpagesize(void)
{
  return MEMORY[0x1E0C83740]();
}

kern_return_t host_statistics(host_t host_priv, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x1E0C838D8](*(_QWORD *)&host_priv, *(_QWORD *)&flavor, host_info_out, host_info_outCnt);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

float log10f(float a1)
{
  float result;

  MEMORY[0x1E0C83BC8](a1);
  return result;
}

void longjmp(jmp_buf a1, int a2)
{
  MEMORY[0x1E0C83C08](a1, *(_QWORD *)&a2);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1E0C83C38](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1E0C83C90]();
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C83E60](a1, a2, *(_QWORD *)&a3);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

int mkpath_np(const char *path, mode_t omode)
{
  return MEMORY[0x1E0C84198](path, omode);
}

char *__cdecl mktemp(char *a1)
{
  return (char *)MEMORY[0x1E0C841C0](a1);
}

int mlock(const void *a1, size_t a2)
{
  return MEMORY[0x1E0C841D0](a1, a2);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C84210](a1, a2, *(_QWORD *)&a3);
}

int munlock(const void *a1, size_t a2)
{
  return MEMORY[0x1E0C84218](a1, a2);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1E0C84488](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int putchar(int a1)
{
  return MEMORY[0x1E0C84F50](*(_QWORD *)&a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1E0C850B8](__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

int rmdir(const char *a1)
{
  return MEMORY[0x1E0C85138](a1);
}

int setjmp(jmp_buf a1)
{
  return MEMORY[0x1E0C85348](a1);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1E0DE8598](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1E0DE85A0](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_bind_parameter_index(sqlite3_stmt *a1, const char *zName)
{
  return MEMORY[0x1E0DE85C0](a1, zName);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85D8](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8650](a1);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8690](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1E0DE8788](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1E0DE8798](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE87C8](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1E0DE8870](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8880](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE89A8](a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1E0C85530](__dst, __src);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85610](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

const char *__cdecl u_errorName(UErrorCode code)
{
  return (const char *)MEMORY[0x1E0DE5988](*(_QWORD *)&code);
}

UBool u_istitle(UChar32 c)
{
  return MEMORY[0x1E0DE5A58](*(_QWORD *)&c);
}

UBool u_isupper(UChar32 c)
{
  return MEMORY[0x1E0DE5A60](*(_QWORD *)&c);
}

UChar *__cdecl u_strFindFirst(const UChar *s, int32_t length, const UChar *substring, int32_t subLength)
{
  return (UChar *)MEMORY[0x1E0DE5A88](s, *(_QWORD *)&length, substring, *(_QWORD *)&subLength);
}

UChar *__cdecl u_strFromUTF32(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const UChar32 *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (UChar *)MEMORY[0x1E0DE5A98](dest, *(_QWORD *)&destCapacity, pDestLength, src, *(_QWORD *)&srcLength, pErrorCode);
}

UChar *__cdecl u_strFromUTF8(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (UChar *)MEMORY[0x1E0DE5AA0](dest, *(_QWORD *)&destCapacity, pDestLength, src, *(_QWORD *)&srcLength, pErrorCode);
}

int32_t u_strToLower(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  return MEMORY[0x1E0DE5AB0](dest, *(_QWORD *)&destCapacity, src, *(_QWORD *)&srcLength, locale, pErrorCode);
}

char *__cdecl u_strToUTF8(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (char *)MEMORY[0x1E0DE5AC0](dest, *(_QWORD *)&destCapacity, pDestLength, src, *(_QWORD *)&srcLength, pErrorCode);
}

int32_t u_strToUpper(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  return MEMORY[0x1E0DE5AC8](dest, *(_QWORD *)&destCapacity, src, *(_QWORD *)&srcLength, locale, pErrorCode);
}

UChar32 u_tolower(UChar32 c)
{
  return MEMORY[0x1E0DE5B10](*(_QWORD *)&c);
}

UChar32 u_totitle(UChar32 c)
{
  return MEMORY[0x1E0DE5B18](*(_QWORD *)&c);
}

void u_versionToString(const UVersionInfo versionArray, char *versionString)
{
  MEMORY[0x1E0DE5B38](versionArray, versionString);
}

uint64_t ucol_close()
{
  return MEMORY[0x1E0DE5F70]();
}

uint64_t ucol_getSortKey()
{
  return MEMORY[0x1E0DE5FD0]();
}

uint64_t ucol_getUCAVersion()
{
  return MEMORY[0x1E0DE5FE0]();
}

uint64_t ucol_getVersion()
{
  return MEMORY[0x1E0DE5FE8]();
}

uint64_t ucol_open()
{
  return MEMORY[0x1E0DE6008]();
}

uint64_t ucol_openBinary()
{
  return MEMORY[0x1E0DE6010]();
}

uint64_t ucol_openRules()
{
  return MEMORY[0x1E0DE6020]();
}

uint64_t ucol_setAttribute()
{
  return MEMORY[0x1E0DE6030]();
}

uint64_t ucol_setStrength()
{
  return MEMORY[0x1E0DE6038]();
}

uint64_t ucol_strcollUTF8()
{
  return MEMORY[0x1E0DE6050]();
}

uint64_t ulocdata_close()
{
  return MEMORY[0x1E0DE6488]();
}

uint64_t ulocdata_getExemplarSet()
{
  return MEMORY[0x1E0DE64A0]();
}

uint64_t ulocdata_open()
{
  return MEMORY[0x1E0DE64B0]();
}

uint64_t uset_addAll()
{
  return MEMORY[0x1E0DE6940]();
}

uint64_t uset_charAt()
{
  return MEMORY[0x1E0DE6968]();
}

uint64_t uset_close()
{
  return MEMORY[0x1E0DE6988]();
}

uint64_t uset_freeze()
{
  return MEMORY[0x1E0DE69A8]();
}

uint64_t uset_open()
{
  return MEMORY[0x1E0DE69D0]();
}

uint64_t uset_openEmpty()
{
  return MEMORY[0x1E0DE69D8]();
}

uint64_t uset_size()
{
  return MEMORY[0x1E0DE6A10]();
}

uint64_t uspoof_close()
{
  return MEMORY[0x1E0DE6A30]();
}

uint64_t uspoof_getSkeletonUTF8()
{
  return MEMORY[0x1E0DE6A38]();
}

uint64_t uspoof_open()
{
  return MEMORY[0x1E0DE6A40]();
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A68](a1, a2, a3);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1E0C85CB8](__s, *(_QWORD *)&__c, __n);
}

