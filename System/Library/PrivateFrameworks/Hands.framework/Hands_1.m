uint64_t static StatisticUtils.bucketizeHandCenter2DRegionOnInferenceCameras(hand:images:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  float32x4_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  double v18;
  uint64_t v19;
  char v20;
  double v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  _OWORD v26[12];
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[192];
  _OWORD v42[12];

  v4 = *(_QWORD *)(result + 200);
  if (v4 && *(_QWORD *)(v4 + 16) == 2)
  {
    v6 = (float32x4_t *)result;
    v7 = v4 + 32;
    v8 = 16;
    v9 = *(_BYTE *)(result + 136) ? 0 : 16;
    v10 = v7 + v9;
    v11 = *(_QWORD *)v10;
    v12 = *(unsigned __int8 *)(v10 + 8);
    if (!*(_BYTE *)(result + 136))
      v8 = 0;
    v13 = v7 + v8;
    v14 = *(_QWORD *)v13;
    v15 = *(unsigned __int8 *)(v13 + 8);
    type metadata accessor for TrackingUtils();
    v27 = v11;
    v28 = v12;
    static TrackingUtils.findImageOfCameraSource(_:camera:)(a2, &v27, (uint64_t)&v29);
    outlined init with take of ImageData?((uint64_t)&v29, (uint64_t)v41);
    outlined init with take of ImageData?((uint64_t)v41, (uint64_t)v42);
    result = _s5Hands9ImageDataVSgWOg((uint64_t)v42);
    if ((_DWORD)result != 1)
    {
      v37 = v42[8];
      v38 = v42[9];
      v39 = v42[10];
      v40 = v42[11];
      v33 = v42[4];
      v34 = v42[5];
      v35 = v42[6];
      v36 = v42[7];
      v29 = v42[0];
      v30 = v42[1];
      v31 = v42[2];
      v32 = v42[3];
      v16 = specialized static StatisticUtils.projectHandToImageSpace(hand:image:)(v6, (uint64_t)&v29);
      if ((v17 & 1) == 0)
      {
        v18 = *(double *)&v16;
        v24 = v14;
        v25 = v15;
        static TrackingUtils.findImageOfCameraSource(_:camera:)(a2, &v24, (uint64_t)v26);
        outlined init with take of ImageData?((uint64_t)v26, (uint64_t)&v27);
        outlined init with take of ImageData?((uint64_t)&v27, (uint64_t)&v29);
        if (_s5Hands9ImageDataVSgWOg((uint64_t)&v29) != 1)
        {
          v26[8] = v37;
          v26[9] = v38;
          v26[10] = v39;
          v26[11] = v40;
          v26[4] = v33;
          v26[5] = v34;
          v26[6] = v35;
          v26[7] = v36;
          v26[0] = v29;
          v26[1] = v30;
          v26[2] = v31;
          v26[3] = v32;
          v19 = specialized static StatisticUtils.projectHandToImageSpace(hand:image:)(v6, (uint64_t)v26);
          if ((v20 & 1) == 0)
          {
            v21 = *(double *)&v19;
            v22 = specialized static StatisticUtils.CameraRegion.resolve(coord:)(v18);
            v23 = specialized static StatisticUtils.CameraRegion.resolve(coord:)(v21);
            outlined release of ImageData?((uint64_t)v41);
            result = outlined release of ImageData?((uint64_t)&v27);
            *(_QWORD *)a3 = v11;
            *(_QWORD *)(a3 + 8) = v12 | (v22 << 8);
            *(_QWORD *)(a3 + 16) = v14;
            *(_DWORD *)(a3 + 24) = v15 | (v23 << 8);
            return result;
          }
          outlined release of ImageData?((uint64_t)&v27);
        }
      }
      result = outlined release of ImageData?((uint64_t)v41);
    }
  }
  *(_OWORD *)a3 = xmmword_23D9A8B90;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  return result;
}

uint64_t type metadata accessor for StatisticUtils()
{
  return objc_opt_self();
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for StatisticUtils.CameraRegion(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 >= 0xFE)
  {
    v2 = (a2 + 16776962) >> 24 == 255 ? 2 : 1;
    v3 = (a2 + 16776962) >> 24 ? v2 : 0;
    if (v3)
    {
      if (v3 == 2)
      {
        v4 = *(unsigned __int16 *)((char *)a1 + 3);
        if (*(unsigned __int16 *)((char *)a1 + 3))
          return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v4 << 24)) - 16776962;
      }
      else
      {
        v4 = *((unsigned __int8 *)a1 + 3);
        if (*((_BYTE *)a1 + 3))
          return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v4 << 24)) - 16776962;
      }
    }
  }
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  if (v8 + 1 >= 2)
    return v8;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StatisticUtils.CameraRegion(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  int v4;
  unsigned int v5;

  if ((a3 + 16776962) >> 24 == 255)
    v3 = 2;
  else
    v3 = 1;
  if ((a3 + 16776962) >> 24)
    v4 = v3;
  else
    v4 = 0;
  if (a3 < 0xFE)
    v4 = 0;
  if (a2 > 0xFD)
  {
    *(_WORD *)result = a2 - 254;
    *(_BYTE *)(result + 2) = (a2 - 254) >> 16;
    if (v4)
    {
      v5 = ((a2 - 254) >> 24) + 1;
      if (v4 == 2)
        *(_WORD *)(result + 3) = v5;
      else
        *(_BYTE *)(result + 3) = v5;
    }
  }
  else
  {
    if (!v4)
      goto LABEL_13;
    if (v4 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_13:
      if (!a2)
        return result;
LABEL_19:
      *(_BYTE *)result = a2 + 2;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_19;
  }
  return result;
}

uint64_t getEnumTag for StatisticUtils.CameraRegion(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 2)
    return v1 - 1;
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for StatisticUtils.CameraRegion(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
  }
  else if (a2)
  {
    *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for StatisticUtils.CameraRegion()
{
  return &type metadata for StatisticUtils.CameraRegion;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for StatisticUtils.Location3DBucket(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StatisticUtils.Location3DBucket(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for StatisticUtils.Location3DBucket(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for StatisticUtils.Location3DBucket(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for StatisticUtils.Location3DBucket()
{
  return &type metadata for StatisticUtils.Location3DBucket;
}

void protocol witness for static CaseIterable.allCases.getter in conformance StatisticUtils.CoordAxis(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance StatisticUtils.CoordAxis;
}

void one-time initialization function for kGridIndexStart()
{
  static StatisticUtils.Location3DBucket.kGridIndexStart = -4;
}

void one-time initialization function for kGridIndexEnd()
{
  static StatisticUtils.Location3DBucket.kGridIndexEnd = 4;
}

uint64_t StatisticUtils.Location3DBucket.description.getter(__int16 a1, uint64_t a2, uint64_t a3, char a4)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  if ((a4 & 1) != 0)
  {
    v14 = 0;
    _StringGuts.grow(_:)(33);
    _print_unlocked<A, B>(_:_:)();
    v10._object = (void *)0x800000023D9C5BE0;
    v10._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v10);
    if ((a1 & 0x100) != 0)
      v11 = 0x6C6C616D73;
    else
      v11 = 0x656772616CLL;
    v12 = 0xE500000000000000;
    String.append(_:)(*(Swift::String *)&v11);
  }
  else
  {
    v14 = 0x5F6C65786F76;
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 95;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 95;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
  }
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized Collection<>.firstIndex(of:)(int a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  char v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = BYTE2(a1);
    v4 = 0;
    v5 = (unsigned __int16 *)(a2 + 32);
    v6 = a1;
    if ((a1 & 1) != 0)
      v7 = 0x7468676972;
    else
      v7 = 1952867692;
    if ((a1 & 1) != 0)
      v8 = 0xE500000000000000;
    else
      v8 = 0xE400000000000000;
    if ((a1 & 0x100) != 0)
      v9 = 0x7265776F6CLL;
    else
      v9 = 0x7265707075;
    v24 = v9;
    while (1)
    {
      v10 = *v5;
      v11 = v10 | (*((unsigned __int8 *)v5 + 2) << 16);
      if (v10 == 2)
      {
        if (v6 == 2)
          return v4;
        goto LABEL_13;
      }
      if (v6 != 2)
        break;
LABEL_13:
      ++v4;
      v5 = (unsigned __int16 *)((char *)v5 + 3);
      if (v2 == v4)
        return 0;
    }
    if ((v10 & 1) != 0)
      v12 = 0x7468676972;
    else
      v12 = 1952867692;
    if ((v10 & 1) != 0)
      v13 = 0xE500000000000000;
    else
      v13 = 0xE400000000000000;
    if (v12 == v7 && v13 == v8)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
        goto LABEL_13;
    }
    if ((v11 & 0x100) != 0)
      v16 = 0x7265776F6CLL;
    else
      v16 = 0x7265707075;
    if (v16 == v24)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      if ((v17 & 1) == 0)
        goto LABEL_13;
    }
    if (HIWORD(v11))
    {
      if (HIWORD(v11) == 1)
      {
        v18 = 0xE400000000000000;
        v19 = 1735289202;
        v20 = v3;
        if (v3)
          goto LABEL_38;
LABEL_44:
        v21 = 0xE600000000000000;
        if (v19 != 0x7265746E6563)
        {
LABEL_48:
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v22 & 1) != 0)
            return v4;
          goto LABEL_13;
        }
LABEL_47:
        if (v18 == v21)
        {
          swift_bridgeObjectRelease_n();
          return v4;
        }
        goto LABEL_48;
      }
      v18 = 0xE600000000000000;
      v19 = 0x6E696772616DLL;
      v20 = v3;
      if (!v3)
        goto LABEL_44;
    }
    else
    {
      v18 = 0xE600000000000000;
      v19 = 0x7265746E6563;
      v20 = v3;
      if (!v3)
        goto LABEL_44;
    }
LABEL_38:
    if (v20 == 1)
    {
      v21 = 0xE400000000000000;
      if (v19 != 1735289202)
        goto LABEL_48;
    }
    else
    {
      v21 = 0xE600000000000000;
      if (v19 != 0x6E696772616DLL)
        goto LABEL_48;
    }
    goto LABEL_47;
  }
  return 0;
}

uint64_t specialized Collection<>.firstIndex(of:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  _BYTE *v8;
  uint64_t v9;
  BOOL v10;

  v5 = *(_QWORD *)(a5 + 16);
  if (v5)
  {
    result = 0;
    v8 = (_BYTE *)(a5 + 56);
    do
    {
      v9 = *((_QWORD *)v8 - 3);
      if (*v8 == 1)
      {
        if ((a4 & 1) != 0
          && v9 == a1
          && ((a1 >> 8) & 1) != ((*((_QWORD *)v8 - 3) & 0x100) == 0))
        {
          return result;
        }
      }
      else if ((a4 & 1) == 0)
      {
        v10 = v9 == a1 && *((_QWORD *)v8 - 2) == a2;
        if (v10 && *((_QWORD *)v8 - 1) == a3)
          return result;
      }
      v8 += 32;
      ++result;
    }
    while (v5 != result);
  }
  return 0;
}

uint64_t specialized Collection<>.firstIndex(of:)(uint64_t a1, float a2)
{
  uint64_t v2;
  float v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  float v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  v4 = *(float *)(a1 + 32);
  result = 0;
  if (v4 != a2)
  {
    v6 = v2 - 1;
    v7 = a1 + 36;
    while (v6 != result)
    {
      v8 = *(float *)(v7 + 4 * result++);
      if (v8 == a2)
        return result;
    }
    return 0;
  }
  return result;
}

Swift::Int StatisticUtils.Location3DBucket.hashValue.getter(Swift::UInt a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  Hasher.init(_seed:)();
  if ((a4 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
    Hasher._combine(_:)(BYTE1(a1) & 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(a1);
    Hasher._combine(_:)(a2);
    Hasher._combine(_:)(a3);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StatisticUtils.Location3DBucket()
{
  uint64_t v0;

  return StatisticUtils.Location3DBucket.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StatisticUtils.Location3DBucket()
{
  uint64_t v0;

  return StatisticUtils.Location3DBucket.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void protocol witness for Hashable.hash(into:) in conformance StatisticUtils.Location3DBucket()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 24) == 1)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
    Hasher._combine(_:)(BYTE1(v1) & 1);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 8);
    v2 = *(_QWORD *)(v0 + 16);
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
    Hasher._combine(_:)(v3);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StatisticUtils.Location3DBucket()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  int v4;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  if (v4 == 1)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
    Hasher._combine(_:)(BYTE1(v1) & 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

_QWORD *protocol witness for static CaseIterable.allCases.getter in conformance StatisticUtils.Location3DBucket@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *result;

  result = specialized static StatisticUtils.Location3DBucket.allCases.getter(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StatisticUtils.Location3DBucket(uint64_t a1, uint64_t a2)
{
  return specialized static StatisticUtils.Location3DBucket.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in StatisticUtils.Location3DBucket()
{
  return lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [StatisticUtils.Location3DBucket] and conformance [A], &demangling cache variable for type metadata for [StatisticUtils.Location3DBucket], MEMORY[0x24BEE12E0]);
}

unint64_t lazy protocol witness table accessor for type StatisticUtils.Location3DBucket and conformance StatisticUtils.Location3DBucket()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StatisticUtils.Location3DBucket and conformance StatisticUtils.Location3DBucket;
  if (!lazy protocol witness table cache variable for type StatisticUtils.Location3DBucket and conformance StatisticUtils.Location3DBucket)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for StatisticUtils.Location3DBucket, &type metadata for StatisticUtils.Location3DBucket);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StatisticUtils.Location3DBucket and conformance StatisticUtils.Location3DBucket);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StatisticUtils.CameraRegion.LeftRight(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StatisticUtils.CameraRegion.LeftRight()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StatisticUtils.CameraRegion.LeftRight()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StatisticUtils.CameraRegion.LeftRight()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance StatisticUtils.CameraRegion.LeftRight@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of StatisticUtils.CameraRegion.LeftRight.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance StatisticUtils.CameraRegion.LeftRight(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance StatisticUtils.CameraRegion.LeftRight(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1952867692;
  if (*v1)
    v2 = 0x7468676972;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance StatisticUtils.CameraRegion.LeftRight(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance StatisticUtils.CameraRegion.LeftRight;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StatisticUtils.CameraRegion.UpDown(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StatisticUtils.CameraRegion.UpDown()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StatisticUtils.CameraRegion.UpDown()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StatisticUtils.CameraRegion.UpDown()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance StatisticUtils.CameraRegion.UpDown@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of StatisticUtils.CameraRegion.UpDown.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance StatisticUtils.CameraRegion.LeftRight(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance StatisticUtils.CameraRegion.LeftRight@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4;
  uint64_t result;
  char v6;

  v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  result = swift_bridgeObjectRelease();
  if (v4 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v4)
    v6 = 0;
  *a3 = v6;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance StatisticUtils.CameraRegion.UpDown(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x7265707075;
  if (*v1)
    v2 = 0x7265776F6CLL;
  *a1 = v2;
  a1[1] = 0xE500000000000000;
}

void protocol witness for static CaseIterable.allCases.getter in conformance StatisticUtils.CameraRegion.UpDown(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance StatisticUtils.CameraRegion.UpDown;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StatisticUtils.CameraRegion.DistanceToCenter(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StatisticUtils.CameraRegion.DistanceToCenter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StatisticUtils.CameraRegion.DistanceToCenter()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StatisticUtils.CameraRegion.DistanceToCenter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance StatisticUtils.CameraRegion.DistanceToCenter@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized StatisticUtils.CameraRegion.DistanceToCenter.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance StatisticUtils.CameraRegion.DistanceToCenter(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE400000000000000;
  v5 = 1735289202;
  if (v2 != 1)
  {
    v5 = 0x6E696772616DLL;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7265746E6563;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance StatisticUtils.CameraRegion.DistanceToCenter(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance StatisticUtils.CameraRegion.DistanceToCenter;
}

uint64_t StatisticUtils.CameraRegion.description.getter(__int16 a1)
{
  Swift::String v2;
  Swift::String v3;
  __int128 v4;

  if (a1 == 2)
    return 0x6E776F6E6B6E75;
  BYTE8(v4) = 0;
  *(_QWORD *)&v4 = HIBYTE(a1) & 1;
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 95;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 95;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  return *(_QWORD *)((char *)&v4 + 1);
}

void StatisticUtils.CameraRegion.hash(into:)(uint64_t a1, char a2)
{
  if (a2 == 2)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StatisticUtils.CameraRegion()
{
  __int16 *v0;

  return StatisticUtils.CameraRegion.description.getter(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StatisticUtils.CameraRegion()
{
  __int16 *v0;
  __int16 v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  StatisticUtils.CameraRegion.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance StatisticUtils.CameraRegion(uint64_t a1)
{
  _WORD *v1;

  StatisticUtils.CameraRegion.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StatisticUtils.CameraRegion()
{
  __int16 *v0;
  __int16 v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  StatisticUtils.CameraRegion.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

char *protocol witness for static CaseIterable.allCases.getter in conformance StatisticUtils.CameraRegion@<X0>(char **a1@<X8>)
{
  char *result;

  result = specialized static StatisticUtils.CameraRegion.allCases.getter();
  *a1 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance StatisticUtils.CameraRegion(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return specialized static StatisticUtils.CameraRegion.== infix(_:_:)(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in StatisticUtils.CameraRegion()
{
  return lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [StatisticUtils.CameraRegion] and conformance [A], &demangling cache variable for type metadata for [StatisticUtils.CameraRegion], MEMORY[0x24BEE12E0]);
}

unint64_t lazy protocol witness table accessor for type StatisticUtils.CameraRegion and conformance StatisticUtils.CameraRegion()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StatisticUtils.CameraRegion and conformance StatisticUtils.CameraRegion;
  if (!lazy protocol witness table cache variable for type StatisticUtils.CameraRegion and conformance StatisticUtils.CameraRegion)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for StatisticUtils.CameraRegion, &type metadata for StatisticUtils.CameraRegion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StatisticUtils.CameraRegion and conformance StatisticUtils.CameraRegion);
  }
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance StatisticUtils.CameraSelection@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized StatisticUtils.CameraSelection.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance StatisticUtils.CameraSelection(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

BOOL specialized static StatisticUtils.CameraRegion.== infix(_:_:)(int a1, int a2)
{
  __int16 v2;
  _BOOL8 result;
  unsigned __int8 v4;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  char v19;

  v2 = a2;
  if (a1 == 2)
    return a2 == 2;
  if (a2 == 2)
    return 0;
  v4 = BYTE2(a2);
  v6 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v7 = 0x7468676972;
  else
    v7 = 1952867692;
  if (v6)
    v8 = 0xE400000000000000;
  else
    v8 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v9 = 0x7468676972;
  else
    v9 = 1952867692;
  if ((a2 & 1) != 0)
    v10 = 0xE500000000000000;
  else
    v10 = 0xE400000000000000;
  if (v7 == v9 && v8 == v10)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v11 & 1) == 0)
      return result;
  }
  if ((a1 & 0x100) != 0)
    v12 = 0x7265776F6CLL;
  else
    v12 = 0x7265707075;
  if ((v2 & 0x100) != 0)
    v13 = 0x7265776F6CLL;
  else
    v13 = 0x7265707075;
  if (v12 == v13)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease_n();
    result = 0;
    if ((v14 & 1) == 0)
      return result;
  }
  if (BYTE2(a1))
  {
    if (BYTE2(a1) == 1)
    {
      v15 = 0xE400000000000000;
      v16 = 1735289202;
      v17 = v4;
      if (!v4)
      {
LABEL_39:
        v18 = 0xE600000000000000;
        if (v16 != 0x7265746E6563)
          goto LABEL_44;
        goto LABEL_42;
      }
    }
    else
    {
      v15 = 0xE600000000000000;
      v16 = 0x6E696772616DLL;
      v17 = v4;
      if (!v4)
        goto LABEL_39;
    }
  }
  else
  {
    v15 = 0xE600000000000000;
    v16 = 0x7265746E6563;
    v17 = v4;
    if (!v4)
      goto LABEL_39;
  }
  if (v17 == 1)
  {
    v18 = 0xE400000000000000;
    if (v16 != 1735289202)
      goto LABEL_44;
  }
  else
  {
    v18 = 0xE600000000000000;
    if (v16 != 0x6E696772616DLL)
      goto LABEL_44;
  }
LABEL_42:
  if (v15 == v18)
  {
    swift_bridgeObjectRelease_n();
    return 1;
  }
LABEL_44:
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t specialized static StatisticUtils.Location3DBucket.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  _BOOL4 v10;
  unsigned int v11;

  v10 = a1 == a5 && a2 == a6 && a3 == a7;
  if ((a8 & 1) != 0)
    v10 = 0;
  if (a5 != a1)
    v11 = 0;
  else
    v11 = ((a1 & 0x100) == 0) ^ (a5 >> 8) & 1;
  if ((a8 & 1) == 0)
    v11 = 0;
  if ((a4 & 1) != 0)
    return v11;
  else
    return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_SD6ValuesVys5Int32VSf_Gs5NeverOTg5043_s5Hands14StatisticUtilsC30calculateAveragee36OcclusionySfAA14HandDescriptorVFZSD6g4Vys5h9VSf_GSo06d2F7F6VXEfU_5Hands0S4PoseVTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v15 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v15;
  v7 = (uint64_t *)(a1 + 32);
  v8 = *(_QWORD *)a2 + 32;
  v9 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  while (1)
  {
    v11 = *v7++;
    v10 = v11;
    if (v11 < 0)
      break;
    if (v10 >= v9)
      goto LABEL_10;
    v12 = *(_QWORD *)(v8 + 144 * v10 + 8);
    v13 = *(_QWORD *)(v15 + 16);
    v14 = *(_QWORD *)(v15 + 24);
    result = swift_bridgeObjectRetain();
    if (v13 >= v14 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v13 + 1, 1);
    *(_QWORD *)(v15 + 16) = v13 + 1;
    *(_QWORD *)(v15 + 8 * v13 + 32) = v12;
    if (!--v2)
      return v3;
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

unint64_t specialized static StatisticUtils.Location3DBucket.resolve(handCenter:)(__n128 a1)
{
  unint64_t result;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;

  if (a1.n128_f32[0] < -1.0 || a1.n128_f32[0] > 1.0)
    return (unint64_t)(a1.n128_f32[0] < -1.0) << 8;
  if (a1.n128_f32[1] < -1.0 || a1.n128_f32[1] > 0.0)
  {
    if (a1.n128_f32[1] >= -1.0)
      return 1;
    else
      return 257;
  }
  else
  {
    if (a1.n128_f32[2] >= -1.0 && a1.n128_f32[2] <= 0.0)
    {
      v3 = floorf(a1.n128_f32[0] * 4.0);
      v4 = ceilf(a1.n128_f32[0] * 4.0);
      if (a1.n128_f32[0] <= 0.0)
        v5 = v3;
      else
        v5 = v4;
      if (v5 <= -9.2234e18)
      {
        __break(1u);
      }
      else if (v5 < 9.2234e18)
      {
        v6 = floorf(a1.n128_f32[1] * 4.0);
        if (v6 > -9.2234e18)
        {
          if (v6 < 9.2234e18)
          {
            v7 = floorf(a1.n128_f32[2] * 4.0);
            if ((~LODWORD(v7) & 0x7F800000) != 0
              && (LODWORD(v6) & 0x7F800000) != 0x7F800000
              && (LODWORD(v5) & 0x7F800000) != 0x7F800000)
            {
              if (v7 > -9.2234e18)
              {
                if (v7 < 9.2234e18)
                  return (uint64_t)v5;
                goto LABEL_37;
              }
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
              return result;
            }
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      __break(1u);
      goto LABEL_33;
    }
    if (a1.n128_f32[2] >= -1.0)
      return 2;
    else
      return 258;
  }
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        return swift_release();
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          return swift_release();
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
        {
          v10 = v13 + 3;
          if (v13 + 3 >= v8)
            return swift_release();
          v14 = *(_QWORD *)(v4 + 8 * v10);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    result = a2(*(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 3 * v12) | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 48)+ 3 * v12+ 2) << 16), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12));
  }
  v15 = v13 + 4;
  if (v15 >= v8)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

char *specialized static StatisticUtils.CameraRegion.allCases.getter()
{
  char v0;
  uint64_t v1;
  char *v2;
  char v3;
  __int16 v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;

  v0 = 0;
  v1 = 0;
  v2 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    v3 = v0;
    v4 = *((unsigned __int8 *)&outlined read-only object #0 of static StatisticUtils.CameraRegion.allCases.getter
         + v1
         + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v6 = *((_QWORD *)v2 + 2);
    v5 = *((_QWORD *)v2 + 3);
    v7 = v5 >> 1;
    v8 = v6 + 1;
    if (v5 >> 1 <= v6)
    {
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v2);
      v5 = *((_QWORD *)v2 + 3);
      v7 = v5 >> 1;
    }
    *((_QWORD *)v2 + 2) = v8;
    v9 = &v2[3 * v6];
    v9[34] = 0;
    *((_WORD *)v9 + 16) = v4;
    v10 = v6 + 2;
    if (v7 < (uint64_t)(v6 + 2))
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 2, 1, v2);
    *((_QWORD *)v2 + 2) = v10;
    v11 = &v2[3 * v8];
    v11[34] = 1;
    *((_WORD *)v11 + 16) = v4;
    v12 = *((_QWORD *)v2 + 3);
    v13 = v6 + 3;
    if ((uint64_t)(v6 + 3) > (uint64_t)(v12 >> 1))
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v6 + 3, 1, v2);
    *((_QWORD *)v2 + 2) = v13;
    v14 = &v2[3 * v10];
    v14[34] = 2;
    *((_WORD *)v14 + 16) = v4;
    v15 = *((_QWORD *)v2 + 3);
    v16 = v6 + 4;
    if ((uint64_t)(v6 + 4) > (uint64_t)(v15 >> 1))
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v6 + 4, 1, v2);
    v17 = v4 | 0x100;
    *((_QWORD *)v2 + 2) = v16;
    v18 = &v2[3 * v13];
    v18[34] = 0;
    *((_WORD *)v18 + 16) = v17;
    v19 = *((_QWORD *)v2 + 3);
    v20 = v6 + 5;
    if ((uint64_t)(v6 + 5) > (uint64_t)(v19 >> 1))
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v6 + 5, 1, v2);
    *((_QWORD *)v2 + 2) = v20;
    v21 = &v2[3 * v16];
    v21[34] = 1;
    *((_WORD *)v21 + 16) = v17;
    v22 = *((_QWORD *)v2 + 3);
    if ((uint64_t)(v6 + 6) > (uint64_t)(v22 >> 1))
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v6 + 6, 1, v2);
    *((_QWORD *)v2 + 2) = v6 + 6;
    v23 = &v2[3 * v20];
    v23[34] = 2;
    *((_WORD *)v23 + 16) = v17;
    v0 = 1;
    v1 = 1u;
  }
  while ((v3 & 1) == 0);
  return v2;
}

uint64_t specialized static StatisticUtils.projectHandToImageSpace(hand:image:)(float32x4_t *a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  float32x4_t v11;
  double v12;
  char v13;
  float32x4_t v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((a1[12].i8[0] & 1) != 0)
    return 0;
  v3 = *(double *)(a2 + 184);
  v4 = *(_QWORD *)(a2 + 64);
  v11 = a1[11];
  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v14);
  *(_QWORD *)&v12 = vaddq_f32(v14[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14[0], v11.f32[0]), v14[1], *(float32x2_t *)v11.f32, 1), v14[2], v11, 2)).u64[0];
  v13 = 0;
  swift_beginAccess();
  v9 = *(_OWORD *)(v4 + 80);
  v10 = *(_OWORD *)(v4 + 96);
  v8 = *(_OWORD *)(v4 + 64);
  swift_beginAccess();
  v7 = *(_OWORD *)(v4 + 112);
  swift_beginAccess();
  if (*(_BYTE *)(v4 + 24))
    v5 = *(_QWORD *)(v4 + 16) != 0;
  else
    v5 = -1;
  objc_msgSend((id)objc_opt_self(), sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v5, &v13, v12, *(double *)&v8, *(double *)&v9, *(double *)&v10, *(double *)&v7, v3);
  if (v13)
    return v6;
  else
    return 0;
}

uint64_t specialized static StatisticUtils.CameraRegion.resolve(coord:)(double a1)
{
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  _BOOL4 v6;
  int v7;
  float32x2_t v8;
  int v9;
  int v10;

  if (*(float *)&a1 < 0.0)
    return 2;
  if (*((float *)&a1 + 1) < 0.0)
    return 2;
  if (*(float *)&a1 <= 1.0 && *((float *)&a1 + 1) <= 1.0)
  {
    v6 = *(float *)&a1 >= 0.5;
    v7 = *((float *)&a1 + 1) >= 0.5;
    v8 = vadd_f32(*(float32x2_t *)&a1, (float32x2_t)0xBF000000BF000000);
    v8.f32[0] = sqrtf(vaddv_f32(vmul_f32(v8, v8)));
    v9 = v6 | (v7 << 8);
    v10 = (v8.f32[0] > 0.25) << 16;
    if (v8.f32[0] > 0.5)
      v10 = 0x20000;
    return v9 | v10;
  }
  else
  {
    _StringGuts.grow(_:)(63);
    v3._object = (void *)0x800000023D9C5CA0;
    v3._countAndFlagsBits = 0xD00000000000003CLL;
    String.append(_:)(v3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<Float>, MEMORY[0x24BEE40F0]);
    v4._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 46;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    return 2;
  }
}

_QWORD *specialized static StatisticUtils.calculateAverageJointOcclusion(_:)(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  float i;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[14];
  __int16 v45;
  int v46;

  v1 = result[2];
  if (!v1)
    return result;
  v2 = result[3];
  v37 = result[4];
  v38 = result[6];
  v39 = result[8];
  v40 = result[5];
  v3 = result[10];
  v41 = result[7];
  v42 = result[9];
  v5 = result[11];
  v4 = result[12];
  v7 = result[13];
  v6 = result[14];
  v9 = result[15];
  v8 = result[16];
  v44[0] = result[2];
  v44[1] = v2;
  v44[2] = v37;
  v44[3] = v40;
  v44[4] = v38;
  v44[5] = v41;
  v44[6] = v39;
  v44[7] = v42;
  v44[8] = v3;
  v44[9] = v5;
  v44[10] = v4;
  v44[11] = v7;
  v44[12] = v6;
  v44[13] = v9;
  v45 = v8 & 0x101;
  v46 = HIDWORD(v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_SD6ValuesVys5Int32VSf_Gs5NeverOTg5043_s5Hands14StatisticUtilsC30calculateAveragee36OcclusionySfAA14HandDescriptorVFZSD6g4Vys5h9VSf_GSo06d2F7F6VXEfU_5Hands0S4PoseVTf1cn_nTf4ng_n((uint64_t)&outlined read-only object #0 of static StatisticUtils.calculateAverageJointOcclusion(_:), (uint64_t)v44);
  outlined consume of HandPose?(v1);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x24BEE4AF8];
    v29 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v29)
      goto LABEL_33;
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  v43 = MEMORY[0x24BEE4AF8];
  result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
  v12 = 0;
  v13 = v43;
  do
  {
    v14 = 0;
    v15 = *(_QWORD *)(v10 + 32 + 8 * v12);
    v16 = v15 + 64;
    v17 = 1 << *(_BYTE *)(v15 + 32);
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v19 = v18 & *(_QWORD *)(v15 + 64);
    ++v12;
    v20 = (unint64_t)(v17 + 63) >> 6;
    for (i = 0.0; ; i = i + *(float *)(*(_QWORD *)(v15 + 56) + 4 * v23))
    {
      if (v19)
      {
        v22 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        v23 = v22 | (v14 << 6);
        continue;
      }
      v24 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_45:
        __break(1u);
        return result;
      }
      if (v24 >= v20)
        goto LABEL_29;
      v25 = *(_QWORD *)(v16 + 8 * v24);
      ++v14;
      if (!v25)
      {
        v14 = v24 + 1;
        if (v24 + 1 >= v20)
          goto LABEL_29;
        v25 = *(_QWORD *)(v16 + 8 * v14);
        if (!v25)
        {
          v14 = v24 + 2;
          if (v24 + 2 >= v20)
            goto LABEL_29;
          v25 = *(_QWORD *)(v16 + 8 * v14);
          if (!v25)
          {
            v14 = v24 + 3;
            if (v24 + 3 >= v20)
              goto LABEL_29;
            v25 = *(_QWORD *)(v16 + 8 * v14);
            if (!v25)
            {
              v14 = v24 + 4;
              if (v24 + 4 >= v20)
                goto LABEL_29;
              v25 = *(_QWORD *)(v16 + 8 * v14);
              if (!v25)
                break;
            }
          }
        }
      }
LABEL_28:
      v19 = (v25 - 1) & v25;
      v23 = __clz(__rbit64(v25)) + (v14 << 6);
    }
    v26 = v24 + 5;
    if (v26 < v20)
    {
      v25 = *(_QWORD *)(v16 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          v14 = v26 + 1;
          if (__OFADD__(v26, 1))
            goto LABEL_45;
          if (v14 >= v20)
            goto LABEL_29;
          v25 = *(_QWORD *)(v16 + 8 * v14);
          ++v26;
          if (v25)
            goto LABEL_28;
        }
      }
      v14 = v26;
      goto LABEL_28;
    }
LABEL_29:
    v28 = *(_QWORD *)(v43 + 16);
    v27 = *(_QWORD *)(v43 + 24);
    if (v28 >= v27 >> 1)
      result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
    *(_QWORD *)(v43 + 16) = v28 + 1;
    *(float *)(v43 + 4 * v28 + 32) = i;
  }
  while (v12 != v11);
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v43 + 16);
  if (!v29)
    return (_QWORD *)swift_bridgeObjectRelease();
LABEL_33:
  if (v29 == 1)
  {
    v30 = 0;
    v31 = 0.0;
    goto LABEL_40;
  }
  v30 = v29 & 0x7FFFFFFFFFFFFFFELL;
  v32 = (float *)(v13 + 36);
  v31 = 0.0;
  v33 = v29 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v31 = (float)(v31 + *(v32 - 1)) + *v32;
    v32 += 2;
    v33 -= 2;
  }
  while (v33);
  if (v29 != v30)
  {
LABEL_40:
    v34 = v29 - v30;
    v35 = (float *)(v13 + 4 * v30 + 32);
    do
    {
      v36 = *v35++;
      v31 = v31 + v36;
      --v34;
    }
    while (v34);
  }
  return (_QWORD *)swift_bridgeObjectRelease();
}

uint64_t specialized static StatisticUtils.travelDistance(_:)(uint64_t result)
{
  unint64_t v1;
  float v2;
  float32x2_t *v3;
  float v4;
  float32x2_t v5;

  v1 = *(_QWORD *)(result + 16);
  v2 = 0.0;
  if (v1 >= 2)
  {
    v3 = (float32x2_t *)(result + 48);
    while (v1)
    {
      v4 = COERCE_FLOAT(*(_QWORD *)&v3[1]) - v3[-1].f32[0];
      v5 = vsub_f32(*v3, v3[-2]);
      v2 = v2 + sqrtf((float)(v4 * v4) + vaddv_f32(vmul_f32(v5, v5)));
      --v1;
      v3 += 2;
      if (v1 == 1)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized static StatisticUtils.determineMissingPinchCause(rawActionScore:finalActionScore:pinchMakeRejector:)(uint64_t *a1, float a2, float a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;

  v3 = *a1;
  if (a2 >= 0.8)
    v4 = 5;
  else
    v4 = 0;
  if ((v3 & 2) != 0)
  {
    if (a2 > 0.9)
      v4 = 2;
    if (a2 < 0.9 && a2 > 0.8)
      v4 = 1;
  }
  if (a3 <= 0.8)
    v5 = v4;
  else
    v5 = 3;
  if (a3 <= 0.8)
    v6 = v4;
  else
    v6 = 4;
  if ((v3 & 4) != 0)
    v4 = v5;
  if ((v3 & 8) != 0)
    v4 = v6;
  if ((v3 & 1) != 0)
    return 5;
  else
    return v4;
}

_QWORD *specialized static StatisticUtils.Location3DBucket.allCases.getter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  int64_t v33;
  _QWORD *v34;

  if (one-time initialization token for kGridIndexStart != -1)
LABEL_37:
    swift_once();
  v4 = (unint64_t)&unk_256CD4000;
  v5 = static StatisticUtils.Location3DBucket.kGridIndexStart;
  if (one-time initialization token for kGridIndexEnd != -1)
    swift_once();
  v6 = (unint64_t)&unk_256CD4000;
  v7 = static StatisticUtils.Location3DBucket.kGridIndexEnd;
  if (static StatisticUtils.Location3DBucket.kGridIndexEnd < v5)
  {
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v5, 1, a4);
    goto LABEL_23;
  }
  v8 = static StatisticUtils.Location3DBucket.kGridIndexStart;
  if (static StatisticUtils.Location3DBucket.kGridIndexEnd < static StatisticUtils.Location3DBucket.kGridIndexStart)
    goto LABEL_39;
  a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  for (i = v8; ; i = v8)
  {
    while (1)
    {
      v12 = a4[2];
      v11 = a4[3];
      v13 = v12 + 1;
      if (v12 >= v11 >> 1)
        a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, a4);
      a4[2] = v13;
      v14 = &a4[4 * v12];
      v14[4] = v5;
      v14[5] = i;
      v14[6] = v8;
      *((_BYTE *)v14 + 56) = 0;
      if (v8 == v7)
      {
        v4 = v12 + 1;
      }
      else
      {
        if (v8 >= v7)
          goto LABEL_35;
        v15 = 32 * v12 + 64;
        v16 = v8;
        do
        {
          v17 = a4[3];
          v4 = v13 + 1;
          if (v13 >= v17 >> 1)
            a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v13 + 1, 1, a4);
          ++v16;
          a4[2] = v4;
          v18 = (char *)a4 + v15;
          *(_QWORD *)v18 = v5;
          *((_QWORD *)v18 + 1) = i;
          *((_QWORD *)v18 + 2) = v16;
          v15 += 32;
          ++v13;
          v18[24] = 0;
        }
        while (v7 != v16);
      }
      if (i == v7)
        break;
      v10 = __OFADD__(i++, 1);
      if (v10)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    if (v5 == v7)
      break;
    v10 = __OFADD__(v5++, 1);
    if (v10)
      goto LABEL_36;
  }
  v7 = 0;
  v6 = a4[3];
  v5 = v4 + 1;
  if (v4 >= v6 >> 1)
    goto LABEL_40;
LABEL_23:
  a4[2] = v5;
  v19 = &a4[4 * v4];
  v19[4] = v7 | 0x100;
  v19[5] = 0;
  v19[6] = 0;
  *((_BYTE *)v19 + 56) = 1;
  v20 = a4[3];
  v21 = v4 + 2;
  if (v5 >= v20 >> 1)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v4 + 2, 1, a4);
  a4[2] = v21;
  v22 = &a4[4 * v5];
  v22[4] = v7;
  v22[5] = 0;
  v22[6] = 0;
  *((_BYTE *)v22 + 56) = 1;
  v23 = a4[3];
  v24 = v4 + 3;
  if (v21 >= v23 >> 1)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v4 + 3, 1, a4);
  a4[2] = v24;
  v25 = &a4[4 * v21];
  v25[4] = 257;
  v25[5] = 0;
  v25[6] = 0;
  *((_BYTE *)v25 + 56) = 1;
  v26 = a4[3];
  v27 = v4 + 4;
  if (v24 >= v26 >> 1)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v4 + 4, 1, a4);
  a4[2] = v27;
  v28 = &a4[4 * v24];
  v28[4] = 1;
  v28[5] = 0;
  v28[6] = 0;
  *((_BYTE *)v28 + 56) = 1;
  v29 = a4[3];
  v30 = v4 + 5;
  if (v27 >= v29 >> 1)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v4 + 5, 1, a4);
  a4[2] = v30;
  v31 = &a4[4 * v27];
  v31[4] = 258;
  v31[5] = 0;
  v31[6] = 0;
  *((_BYTE *)v31 + 56) = 1;
  v32 = a4[3];
  v33 = v4 + 6;
  if (v30 >= v32 >> 1)
    a4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33, 1, a4);
  a4[2] = v33;
  v34 = &a4[4 * v30];
  v34[4] = 2;
  v34[5] = 0;
  v34[6] = 0;
  *((_BYTE *)v34 + 56) = 1;
  return a4;
}

void partial apply for closure #1 in closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:)(int a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:)(a1 & 0xFFFFFF, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48));
}

uint64_t sub_23D7010C4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in closure #1 in closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:)(*(unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(unsigned __int16 *)(v0 + 33) | (*(unsigned __int8 *)(v0 + 35) << 16), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t outlined init with take of ImageData?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageData?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of ImageData?(uint64_t a1)
{
  outlined consume of ImageData?(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(void **)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  return a1;
}

unint64_t specialized StatisticUtils.CameraRegion.DistanceToCenter.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of StatisticUtils.CameraRegion.DistanceToCenter.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t specialized static StatisticUtils.CameraSelection.from(poseCameras:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 1;
  if (v1 == 1)
    return 3;
  v2 = 0;
  v3 = (_QWORD *)(result + 32);
  v4 = (_QWORD *)(result + 32);
  do
  {
    v5 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
    if (*v4 == 5)
      return 2;
    v4 += 2;
    ++v2;
  }
  while (v5 != v1);
  for (i = 0; ; ++i)
  {
    v7 = i + 1;
    if (__OFADD__(i, 1))
      break;
    if (*v3 == 4)
      return 0;
    v3 += 2;
    if (v7 == v1)
      return 1;
  }
LABEL_16:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for StatisticUtils.CameraRegion.DistanceToCenter()
{
  return &type metadata for StatisticUtils.CameraRegion.DistanceToCenter;
}

_BYTE *destructiveInjectEnumTag for StatisticUtils.CameraRegion.UpDown(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for StatisticUtils.CameraRegion.UpDown()
{
  return &type metadata for StatisticUtils.CameraRegion.UpDown;
}

uint64_t getEnumTagSinglePayload for StatisticUtils.CameraRegion.UpDown(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StatisticUtils.CameraRegion.UpDown(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D701400 + 4 * byte_23D9A8BA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D701434 + 4 * byte_23D9A8BA0[v4]))();
}

uint64_t sub_23D701434(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D70143C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D701444);
  return result;
}

uint64_t sub_23D701450(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D701458);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D70145C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D701464(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StatisticUtils.CameraRegion.LeftRight()
{
  return &type metadata for StatisticUtils.CameraRegion.LeftRight;
}

uint64_t getEnumTagSinglePayload for StatisticUtils.CameraRegion.DistanceToCenter(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StatisticUtils.CameraRegion.DistanceToCenter(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23D70155C + 4 * byte_23D9A8BAF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23D701590 + 4 * byte_23D9A8BAA[v4]))();
}

uint64_t sub_23D701590(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D701598(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D7015A0);
  return result;
}

uint64_t sub_23D7015AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D7015B4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23D7015B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7015C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StatisticUtils.CoordAxis()
{
  return &type metadata for StatisticUtils.CoordAxis;
}

uint64_t getEnumTagSinglePayload for StatisticUtils.CameraSelection(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StatisticUtils.CameraSelection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23D7016B8 + 4 * byte_23D9A8BB9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23D7016EC + 4 * byte_23D9A8BB4[v4]))();
}

uint64_t sub_23D7016EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7016F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D7016FCLL);
  return result;
}

uint64_t sub_23D701708(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D701710);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23D701714(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D70171C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StatisticUtils.CameraSelection()
{
  return &type metadata for StatisticUtils.CameraSelection;
}

unint64_t lazy protocol witness table accessor for type StatisticUtils.CameraSelection and conformance StatisticUtils.CameraSelection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StatisticUtils.CameraSelection and conformance StatisticUtils.CameraSelection;
  if (!lazy protocol witness table cache variable for type StatisticUtils.CameraSelection and conformance StatisticUtils.CameraSelection)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for StatisticUtils.CameraSelection, &type metadata for StatisticUtils.CameraSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StatisticUtils.CameraSelection and conformance StatisticUtils.CameraSelection);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in StatisticUtils.CoordAxis()
{
  return lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [StatisticUtils.CoordAxis] and conformance [A], &demangling cache variable for type metadata for [StatisticUtils.CoordAxis], MEMORY[0x24BEE12E0]);
}

unint64_t lazy protocol witness table accessor for type StatisticUtils.CoordAxis and conformance StatisticUtils.CoordAxis()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StatisticUtils.CoordAxis and conformance StatisticUtils.CoordAxis;
  if (!lazy protocol witness table cache variable for type StatisticUtils.CoordAxis and conformance StatisticUtils.CoordAxis)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for StatisticUtils.CoordAxis, &type metadata for StatisticUtils.CoordAxis);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StatisticUtils.CoordAxis and conformance StatisticUtils.CoordAxis);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in StatisticUtils.CameraRegion.LeftRight()
{
  return lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [StatisticUtils.CameraRegion.LeftRight] and conformance [A], &demangling cache variable for type metadata for [StatisticUtils.CameraRegion.LeftRight], MEMORY[0x24BEE12E0]);
}

unint64_t lazy protocol witness table accessor for type StatisticUtils.CameraRegion.LeftRight and conformance StatisticUtils.CameraRegion.LeftRight()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StatisticUtils.CameraRegion.LeftRight and conformance StatisticUtils.CameraRegion.LeftRight;
  if (!lazy protocol witness table cache variable for type StatisticUtils.CameraRegion.LeftRight and conformance StatisticUtils.CameraRegion.LeftRight)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for StatisticUtils.CameraRegion.LeftRight, &type metadata for StatisticUtils.CameraRegion.LeftRight);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StatisticUtils.CameraRegion.LeftRight and conformance StatisticUtils.CameraRegion.LeftRight);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in StatisticUtils.CameraRegion.UpDown()
{
  return lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [StatisticUtils.CameraRegion.UpDown] and conformance [A], &demangling cache variable for type metadata for [StatisticUtils.CameraRegion.UpDown], MEMORY[0x24BEE12E0]);
}

unint64_t lazy protocol witness table accessor for type StatisticUtils.CameraRegion.UpDown and conformance StatisticUtils.CameraRegion.UpDown()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StatisticUtils.CameraRegion.UpDown and conformance StatisticUtils.CameraRegion.UpDown;
  if (!lazy protocol witness table cache variable for type StatisticUtils.CameraRegion.UpDown and conformance StatisticUtils.CameraRegion.UpDown)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for StatisticUtils.CameraRegion.UpDown, &type metadata for StatisticUtils.CameraRegion.UpDown);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StatisticUtils.CameraRegion.UpDown and conformance StatisticUtils.CameraRegion.UpDown);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in StatisticUtils.CameraRegion.DistanceToCenter()
{
  return lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](&lazy protocol witness table cache variable for type [StatisticUtils.CameraRegion.DistanceToCenter] and conformance [A], &demangling cache variable for type metadata for [StatisticUtils.CameraRegion.DistanceToCenter], MEMORY[0x24BEE12E0]);
}

uint64_t lazy protocol witness table accessor for type [StatisticUtils.Location3DBucket] and conformance [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x242638C74](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StatisticUtils.CameraRegion.DistanceToCenter and conformance StatisticUtils.CameraRegion.DistanceToCenter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StatisticUtils.CameraRegion.DistanceToCenter and conformance StatisticUtils.CameraRegion.DistanceToCenter;
  if (!lazy protocol witness table cache variable for type StatisticUtils.CameraRegion.DistanceToCenter and conformance StatisticUtils.CameraRegion.DistanceToCenter)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for StatisticUtils.CameraRegion.DistanceToCenter, &type metadata for StatisticUtils.CameraRegion.DistanceToCenter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StatisticUtils.CameraRegion.DistanceToCenter and conformance StatisticUtils.CameraRegion.DistanceToCenter);
  }
  return result;
}

unint64_t specialized StatisticUtils.CameraSelection.init(rawValue:)(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

uint64_t MakeRejectorObjectInHand.predict(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a1 + 152);
  v6 = *(unsigned __int8 *)(a1 + 160);
  v7 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)a2 = 0;
  *(_WORD *)(a2 + 8) = 256;
  *(_QWORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 256;
  *(_QWORD *)(a2 + 32) = 0;
  *(_WORD *)(a2 + 40) = 256;
  *(_QWORD *)(a2 + 48) = 0;
  *(_WORD *)(a2 + 56) = 256;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 2;
  *(_OWORD *)(a2 + 138) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  v8 = *(_QWORD *)(v2 + 24);
  if (v6 != 1)
  {
    if (v5 == 2)
      goto LABEL_20;
    if (v5 == 1)
    {
LABEL_7:
      if (*(_QWORD *)(v8 + 16))
      {
        if (*(_QWORD *)(v7 + 16))
        {
          v3 = *(_BYTE *)(v2 + 16);
          if ((v3 & *(_BYTE *)(v2 + 18)) == 1)
            v3 = *(_BYTE *)(v8 + 32) | *(_BYTE *)(v7 + 32);
          swift_bridgeObjectRetain();
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
            v10 = *(_QWORD *)(v8 + 16);
            if (v10)
              goto LABEL_13;
            goto LABEL_40;
          }
LABEL_39:
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
          v8 = result;
          v10 = *(_QWORD *)(result + 16);
          if (v10)
          {
LABEL_13:
            *(_BYTE *)(v8 + 32) = v3 & 1;
            if (v10 != 1)
            {
              *(_BYTE *)(v8 + 33) = 0;
              if (*(_BYTE *)(v2 + 18) == 1)
              {
                v11 = *(_QWORD *)(v2 + 24);
                if (!*(_QWORD *)(v11 + 16))
                {
LABEL_47:
                  __break(1u);
                  goto LABEL_48;
                }
                if ((*(_BYTE *)(v11 + 32) & 1) == 0)
                {
                  v12 = *(unsigned __int8 *)(v7 + 32);
                  if ((v3 & 1) != 0)
                    goto LABEL_35;
                  goto LABEL_18;
                }
              }
LABEL_30:
              v13 = (void *)v8;
LABEL_31:
              *(_QWORD *)(a2 + 16) = 5;
              *(_WORD *)(a2 + 24) = 1;
LABEL_33:
              *(_QWORD *)(v2 + 24) = v13;
              return swift_bridgeObjectRelease();
            }
            goto LABEL_41;
          }
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_39;
    }
LABEL_32:
    v13 = &outlined read-only object #0 of MakeRejectorObjectInHand.predict(_:);
    goto LABEL_33;
  }
  if (!v5)
    goto LABEL_32;
  if (v5 == 1)
    goto LABEL_7;
LABEL_20:
  if (*(_QWORD *)(v8 + 16) < 2uLL)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (*(_QWORD *)(v7 + 16) < 2uLL)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v3 = *(_BYTE *)(v2 + 17);
  if ((v3 & *(_BYTE *)(v2 + 19)) == 1)
    v3 = *(_BYTE *)(v8 + 33) | *(_BYTE *)(v7 + 33);
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v14 = *(_QWORD *)(v8 + 16);
    if (v14)
      goto LABEL_26;
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_44:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
  v8 = result;
  v14 = *(_QWORD *)(result + 16);
  if (!v14)
    goto LABEL_45;
LABEL_26:
  *(_BYTE *)(v8 + 32) = 0;
  if (v14 == 1)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  *(_BYTE *)(v8 + 33) = v3 & 1;
  if (*(_BYTE *)(v2 + 19) != 1)
    goto LABEL_30;
  v15 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(v15 + 16) >= 2uLL)
  {
    if ((*(_BYTE *)(v15 + 33) & 1) != 0)
      goto LABEL_30;
    v12 = *(unsigned __int8 *)(v7 + 33);
    if ((v3 & 1) != 0)
    {
LABEL_35:
      *(_QWORD *)(a2 + 16) = 2;
      *(_WORD *)(a2 + 24) = 1;
      v13 = (void *)v8;
      if ((v12 & 1) == 0)
        goto LABEL_33;
      goto LABEL_31;
    }
LABEL_18:
    v13 = (void *)v8;
    if (!v12)
      goto LABEL_33;
    goto LABEL_31;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t MakeRejectorObjectInHand.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MakeRejectorObjectInHand()
{
  return objc_opt_self();
}

uint64_t protocol witness for PinchAlgorithmUnit.reset() in conformance MakeRejectorObjectInHand()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 24) = &outlined read-only object #0 of protocol witness for PinchAlgorithmUnit.reset() in conformance MakeRejectorObjectInHand;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for PinchAlgorithmUnit.predict(_:) in conformance MakeRejectorObjectInHand@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MakeRejectorObjectInHand.predict(_:)(a1, a2);
}

uint64_t specialized MakeRejectorObjectInHand.init(_:)(void *a1)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = &outlined read-only object #0 of MakeRejectorObjectInHand.init(_:);
  *(_BYTE *)(v1 + 16) = objc_msgSend(a1, sel_EnableObjectInteractionForActionForGeneralObject);
  *(_BYTE *)(v1 + 17) = objc_msgSend(a1, sel_EnableObjectInteractionForActionForPencilObject);
  *(_BYTE *)(v1 + 18) = objc_msgSend(a1, sel_ObjectInteractionGeneralRequireConfidenceForBlockingAction);
  *(_BYTE *)(v1 + 19) = objc_msgSend(a1, sel_ObjectInteractionPencilRequireConfidenceForBlockingAction);
  *(_QWORD *)(v1 + 24) = &outlined read-only object #1 of MakeRejectorObjectInHand.init(_:);
  swift_bridgeObjectRelease();
  return v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PortInOut(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance PortInOut@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PortInOut(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PortInOut;
}

uint64_t PortInfo.init()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  swift_beginAccess();
  *(_QWORD *)(v0 + 16) = 0;
  swift_beginAccess();
  *(_QWORD *)(v0 + 24) = 0;
  swift_beginAccess();
  *(_QWORD *)(v0 + 48) = 0;
  swift_beginAccess();
  *(_QWORD *)(v0 + 32) = 0;
  swift_beginAccess();
  *(_QWORD *)(v0 + 40) = 0;
  swift_beginAccess();
  *(_QWORD *)(v0 + 56) = 0;
  swift_beginAccess();
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  return v0;
}

_QWORD *PortInfo.deinit()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  swift_beginAccess();
  if (v0[2])
  {
    swift_beginAccess();
    v1 = e5rt_io_port_release();
    swift_endAccess();
    specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v1);
  }
  swift_beginAccess();
  v2 = v0[6];
  v3 = v0 + 3;
  if (v2)
  {
    swift_beginAccess();
    if (*v3 && *v3 != v2)
    {
      swift_beginAccess();
      v4 = e5rt_tensor_desc_release();
      swift_endAccess();
      specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v4);
    }
    goto LABEL_9;
  }
  swift_beginAccess();
  if (*v3)
  {
LABEL_9:
    swift_beginAccess();
    v5 = e5rt_tensor_desc_release();
    swift_endAccess();
    specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v5);
  }
  return v0;
}

uint64_t PortInfo.__deallocating_deinit()
{
  PortInfo.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PortInfo()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for PortInOut(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D702054 + 4 * byte_23D9A9205[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D702088 + 4 * byte_23D9A9200[v4]))();
}

uint64_t sub_23D702088(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D702090(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D702098);
  return result;
}

uint64_t sub_23D7020A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D7020ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D7020B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7020B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PortInOut()
{
  return &type metadata for PortInOut;
}

unint64_t lazy protocol witness table accessor for type [PortInOut] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [PortInOut] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PortInOut] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PortInOut]);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PortInOut] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PortInOut and conformance PortInOut()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PortInOut and conformance PortInOut;
  if (!lazy protocol witness table cache variable for type PortInOut and conformance PortInOut)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PortInOut, &type metadata for PortInOut);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortInOut and conformance PortInOut);
  }
  return result;
}

uint64_t specialized static PortInfo.getTensorNumberOfElements(_:)()
{
  uint64_t v0;
  uint64_t shape;
  uint64_t result;

  shape = e5rt_tensor_desc_get_shape();
  result = specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(shape);
  if (!v0)
    return 1;
  return result;
}

uint64_t specialized static PortInfo.getTensorComponentType(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = e5rt_tensor_desc_retain_dtype();
  result = specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v1);
  if (!v0)
  {
    result = 0;
    __break(1u);
  }
  return result;
}

uint64_t specialized static PortInfo.getTensorRank(_:)()
{
  uint64_t result;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  _QWORD *v7;

  if (!e5rt_tensor_desc_get_rank())
    return 0;
  result = MEMORY[0x242638320]();
  if (result)
  {
    v1 = String.init(cString:)();
    v3 = v2;
    _StringGuts.grow(_:)(19);
    v4._countAndFlagsBits = 0x7272652074723565;
    v4._object = (void *)0xEC0000002820726FLL;
    String.append(_:)(v4);
    type metadata accessor for e5rt_error_code_t(0);
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 2112041;
    v5._object = (void *)0xE300000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = v1;
    v6._object = v3;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type E5RTException and conformance E5RTException();
    swift_allocError();
    *v7 = 0;
    v7[1] = 0xE000000000000000;
    return swift_willThrow();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized static PortInfo.isTensorPacked(_:)()
{
  uint64_t v0;
  uint64_t strides;
  char v2;
  uint64_t result;

  strides = e5rt_tensor_desc_get_strides();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(strides);
  if (v0)
    return v2 & 1;
  result = 0;
  __break(1u);
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type E5RTException and conformance E5RTException()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type E5RTException and conformance E5RTException;
  if (!lazy protocol witness table cache variable for type E5RTException and conformance E5RTException)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for E5RTException, &type metadata for E5RTException);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type E5RTException and conformance E5RTException);
  }
  return result;
}

uint64_t specialized static PortInfo.getPackedU8TensorDescriptor(_:)(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t component_size;
  uint64_t v7;
  uint64_t v8;
  uint64_t num_components;
  uint64_t v10;
  uint64_t v11;
  uint64_t shape;

  v3 = specialized static PortInfo.getTensorComponentType(_:)();
  if (v1)
    return a1;
  if (v3 == 4)
  {
    v5 = e5rt_tensor_desc_retain_dtype();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v5);
    component_size = e5rt_tensor_desc_dtype_get_component_size();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(component_size);
    v7 = e5rt_tensor_desc_dtype_release();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v7);
  }
  v8 = e5rt_tensor_desc_retain_dtype();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v8);
  num_components = e5rt_tensor_desc_dtype_get_num_components();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(num_components);
  v10 = e5rt_tensor_desc_dtype_release();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v10);
  v11 = e5rt_tensor_desc_dtype_create();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v11);
  shape = e5rt_tensor_desc_get_shape();
  specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(shape);
  result = 0;
  __break(1u);
  return result;
}

uint64_t specialized static PortInfo.getPackedFP32TensorDescriptor(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t num_components;
  uint64_t v4;
  uint64_t v5;
  uint64_t shape;

  v1 = e5rt_tensor_desc_retain_dtype();
  result = specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v1);
  if (!v0)
  {
    num_components = e5rt_tensor_desc_dtype_get_num_components();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(num_components);
    v4 = e5rt_tensor_desc_dtype_release();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v4);
    v5 = e5rt_tensor_desc_dtype_create();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(v5);
    shape = e5rt_tensor_desc_get_shape();
    specialized static E5RTRegressor.EXECUTE_OR_THROW(_:)(shape);
    result = 0;
    __break(1u);
  }
  return result;
}

uint64_t PoseSpec.poseCameras.getter()
{
  return swift_bridgeObjectRetain();
}

Hands::PoseSpec __swiftcall PoseSpec.init(poseCameras:)(Swift::OpaquePointer poseCameras)
{
  Swift::OpaquePointer *v1;
  void *v2;
  Hands::PoseSpec result;

  v2 = (void *)MEMORY[0x24BEE4AF8];
  v1->_rawValue = poseCameras._rawValue;
  v1[1]._rawValue = v2;
  result.poseCameras = poseCameras;
  return result;
}

uint64_t PoseSpec.init(protoBuf:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)(uint64_t);
  _QWORD *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t result;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[4];
  int v35;
  char v36;

  v32 = a2;
  v3 = type metadata accessor for EstimatedBoundingBoxPB(0);
  v5 = MEMORY[0x24BDAC7A8](v3, v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v8);
  v11 = (char *)&v29 - v10;
  v30 = *a1;
  v31 = a1;
  v12 = a1[3];
  v13 = *(_QWORD *)(v12 + 16);
  v29 = v12;
  if (v13)
  {
    v14 = v12 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v15 = *(_QWORD *)(v9 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v17 = type metadata accessor for EstimatedBoundingBoxPB;
    v33 = v15;
    do
    {
      outlined init with copy of EstimatedBoundingBoxPB(v14, (uint64_t)v11);
      outlined init with copy of EstimatedBoundingBoxPB((uint64_t)v11, (uint64_t)v7);
      EstimatedBoundingBox.init(protoBuf:)((uint64_t)v7, (uint64_t)v34);
      outlined destroy of Matrix3x3PB((uint64_t)v11, v17);
      if ((v36 & 1) == 0)
      {
        v19 = v17;
        v20 = v34[0];
        v21 = v34[1];
        v22 = v34[2];
        v23 = v34[3];
        v24 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
        v26 = v16[2];
        v25 = v16[3];
        if (v26 >= v25 >> 1)
          v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v16);
        v16[2] = v26 + 1;
        v18 = &v16[5 * v26];
        v18[4] = v20;
        v18[5] = v21;
        v18[6] = v22;
        *((_BYTE *)v18 + 56) = v23 & 1;
        *((_DWORD *)v18 + 15) = HIDWORD(v23);
        *((_DWORD *)v18 + 16) = v24;
        v17 = v19;
        v15 = v33;
      }
      v14 += v15;
      --v13;
    }
    while (v13);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  outlined destroy of Matrix3x3PB((uint64_t)v31, type metadata accessor for PoseSpecPB);
  result = swift_bridgeObjectRelease();
  v28 = v32;
  *v32 = v30;
  v28[1] = v16;
  return result;
}

uint64_t PoseSpec.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v3 = type metadata accessor for EstimatedBoundingBoxPB(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  type metadata accessor for PoseSpecPB(0);
  UnknownStorage.init()();
  *(_QWORD *)a1 = v9;
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    v24 = a1;
    v26 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v11 = v26;
    v23 = v8;
    v12 = (_QWORD *)(v8 + 60);
    v25 = xmmword_23D9A7050;
    do
    {
      v13 = *(_QWORD *)((char *)v12 - 28);
      v14 = *(_QWORD *)((char *)v12 - 20);
      v15 = *(_QWORD *)((char *)v12 - 12);
      v16 = *((_BYTE *)v12 - 4);
      v17 = *v12;
      UnknownStorage.init()();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = v25;
      *(_QWORD *)(v18 + 32) = v13;
      *(_QWORD *)v7 = v18;
      v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = v25;
      *(_QWORD *)(v19 + 32) = v14;
      *((_QWORD *)v7 + 1) = v19;
      *((_QWORD *)v7 + 2) = v17;
      *((_QWORD *)v7 + 3) = v15;
      v7[32] = v16;
      v26 = v11;
      v21 = *(_QWORD *)(v11 + 16);
      v20 = *(_QWORD *)(v11 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v11 = v26;
      }
      *(_QWORD *)(v11 + 16) = v21 + 1;
      outlined init with take of EstimatedBoundingBoxPB((uint64_t)v7, v11+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v21);
      v12 += 5;
      --v10;
    }
    while (v10);
    result = swift_bridgeObjectRelease();
    a1 = v24;
  }
  else
  {
    result = swift_bridgeObjectRetain();
    v11 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(a1 + 24) = v11;
  return result;
}

BOOL static PoseSpec.== infix(_:_:)(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD *v3;
  _OWORD v5[2];

  v2 = *a1;
  v5[0] = *a2;
  v5[1] = v2;
  v3 = v5;
  return PoseSpec.almostEqual(to:withThreshold:)(*(Hands::PoseSpec *)(&a2 - 1), 0.0000001);
}

Swift::Bool __swiftcall PoseSpec.almostEqual(to:withThreshold:)(Hands::PoseSpec to, Swift::Double withThreshold)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Bool result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD v29[2];

  v4 = *((_QWORD *)to.poseCameras._rawValue + 1);
  v5 = v2[1];
  if ((specialized static Array<A>.== infix(_:_:)(*v2, *(_QWORD *)to.poseCameras._rawValue) & 1) == 0)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v26 = 0xD00000000000001ELL;
    v27 = 0x800000023D9C5FA0;
    v18 = swift_bridgeObjectRetain();
    v19._countAndFlagsBits = MEMORY[0x2426374F8](v18, &type metadata for CameraSource);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 32;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21 = swift_bridgeObjectRetain();
    v22._countAndFlagsBits = MEMORY[0x2426374F8](v21, &type metadata for CameraSource);
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29[0] = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v23 = xmmword_23D9A8970;
    v24 = 0;
    v25[0] = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v23, 0xD000000000000068, 0x800000023D9C5F30, 44, (uint64_t)&v26, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    return 0;
  }
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 != *(_QWORD *)(v4 + 16))
    return 0;
  if (!v6)
    return 1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  while (1)
  {
    if (v6 == v9)
    {
LABEL_9:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 1;
    }
    if (v9 >= *(_QWORD *)(v4 + 16))
      break;
    v10 = *(_QWORD *)(v5 + v8 + 40);
    v11 = *(_QWORD *)(v5 + v8 + 48);
    v12 = *(_BYTE *)(v5 + v8 + 56);
    v13 = *(_QWORD *)(v5 + v8 + 60);
    v14 = *(_QWORD *)(v4 + v8 + 32);
    v15 = *(_QWORD *)(v4 + v8 + 40);
    v16 = *(_QWORD *)(v4 + v8 + 48);
    v17 = *(_BYTE *)(v4 + v8 + 56);
    v26 = *(_QWORD *)(v5 + v8 + 32);
    v27 = v10;
    v28 = v11;
    LOBYTE(v29[0]) = v12;
    *(_QWORD *)((char *)v29 + 4) = v13;
    *(_QWORD *)&v23 = v14;
    *((_QWORD *)&v23 + 1) = v15;
    v24 = v16;
    LOBYTE(v25[0]) = v17;
    *(_QWORD *)((char *)v25 + 4) = *(_QWORD *)(v4 + v8 + 60);
    result = EstimatedBoundingBox.almostEqual(to:withThreshold:)((float32x2_t *)&v23, withThreshold);
    if (!result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    ++v9;
    v8 += 40;
    if (v6 == v9)
      goto LABEL_9;
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PoseSpec(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD *v3;
  _OWORD v5[2];

  v2 = *a1;
  v5[0] = *a2;
  v5[1] = v2;
  v3 = v5;
  return PoseSpec.almostEqual(to:withThreshold:)(*(Hands::PoseSpec *)(&a2 - 1), 0.0000001);
}

unint64_t lazy protocol witness table accessor for type PoseSpecPB and conformance PoseSpecPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB;
  if (!lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB)
  {
    v1 = type metadata accessor for PoseSpecPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PoseSpecPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoseSpecPB and conformance PoseSpecPB);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PoseSpec(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PoseSpec(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for PoseSpec(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PoseSpec(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PoseSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PoseSpec()
{
  return &type metadata for PoseSpec;
}

uint64_t outlined init with take of EstimatedBoundingBoxPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EstimatedBoundingBoxPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of EstimatedBoundingBoxPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EstimatedBoundingBoxPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall MonoPinchModelInference.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  void *v3;

  objc_msgSend(*(id *)(v1 + 16), sel_resetAllBuffers);
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;

  *(_BYTE *)(v1 + 32) = -[HandsKitConfig UseMonoUnsure](a1, sel_UseMonoUnsure);
}

void MonoPinchModelInference.process(_:_:_:_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  Class isa;
  objc_class *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  unsigned __int8 v28;
  int v29;
  unint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  int *v42;
  int v43;
  int v44;
  char v45;
  int v46;
  char v47;
  _BYTE *v48;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD v55[2];
  char v56;
  uint64_t v57;

  v7 = v5;
  v57 = *MEMORY[0x24BDAC8D0];
  Hands_trace_CBridge_0();
  v11 = *(_QWORD *)(a1 + 24);
  v52 = a1;
  isa = Data._bridgeToObjectiveC()().super.isa;
  -[objc_class bytes](isa, sel_bytes);
  v13 = isa;
  v51 = a4;
  v14 = *(_QWORD *)(a4 + 208);
  if ((unint64_t)(v14 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    JUMPOUT(0x23D7040F8);
  }
  v15 = 4 * v14;
  v16 = *(void **)(v7 + 16);
  if (!v16)
  {
    if (v15 < 0 || HIDWORD(v15))
      goto LABEL_79;
    v17 = objc_msgSend(objc_allocWithZone((Class)FeatureFifo), sel_initWithFifoDepth_withBufSize_, 7, v15);
    v18 = *(void **)(v7 + 16);
    *(_QWORD *)(v7 + 16) = v17;

    v16 = *(void **)(v7 + 16);
    if (!v16)
      goto LABEL_77;
  }
  if (!objc_msgSend(v16, sel_currentDepth))
    __asm { BR              X10 }
  if (!*(_QWORD *)(v7 + 24))
  {
    if ((unsigned __int128)(v15 * (__int128)7) >> 64 != (7 * v15) >> 63)
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      JUMPOUT(0x23D704108);
    }
    v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEC8]), sel_initWithLength_, 7 * v15);
    v20 = *(void **)(v7 + 24);
    *(_QWORD *)(v7 + 24) = v19;

  }
  for (i = 0; i != 7; ++i)
  {
    v22 = *(void **)(v7 + 24);
    if (!v22)
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      swift_release();
      __break(1u);
      JUMPOUT(0x23D704130);
    }
    v23 = i * v15;
    if ((unsigned __int128)(i * (__int128)v15) >> 64 != (i * v15) >> 63)
    {
      __break(1u);
LABEL_65:
      __break(1u);
      JUMPOUT(0x23D7040A0);
    }
    v24 = *(void **)(v7 + 16);
    if (!v24)
      goto LABEL_73;
    v25 = v22;
    v26 = objc_msgSend(v24, sel_getNextBuffer);
    if (!v26)
      goto LABEL_74;
    objc_msgSend(v25, sel_replaceBytesInRange_withBytes_, v23, v15, v26);

  }
  specialized TypedKeysDictionary.makeIterator()(*(_QWORD *)(v51 + 56));
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  v27 = v54;
  if (v54)
  {
    v28 = v53;
    while (1)
    {
      v29 = v28 - 1;
      v30 = 0;
      switch(v29)
      {
        case 0:
          v31 = *(void **)(v7 + 24);
          if (!v31)
          {
            swift_release();
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
            __break(1u);
LABEL_79:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x23D7041E8);
          }
          v32 = (char *)objc_msgSend(objc_retainAutorelease(v31), sel_bytes);
          v33 = *(_QWORD *)(v27 + 48);
          if (v33)
          {
            v34 = v33 + 31;
            if (__OFADD__(v33, 31))
              goto LABEL_70;
            v35 = v33 + 62;
            if (v34 >= 0)
              v35 = v33 + 31;
            if ((unint64_t)(v33 - 0x2000000000000000) >> 62 != 3)
              goto LABEL_67;
            if ((unint64_t)(v33 + 62) < 0x3F)
              goto LABEL_68;
            v36 = v35 >> 5;
            v33 *= 4;
            if (v33 == 0x8000000000000000 && (unint64_t)(v34 + 63) < 0x20)
              goto LABEL_71;
          }
          else
          {
            v36 = 1;
          }
          E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v27 + 16), *(void **)(v27 + 24), v32, v33 / v36, v33 / v36, v36, *(_QWORD *)(v27 + 32), *(_QWORD *)(v27 + 40));
          swift_release();
          if (v6)
          {
LABEL_63:
            swift_release_n();
            return;
          }
          dispatch thunk of _AnyIteratorBoxBase.next()();
          v28 = v53;
          v27 = v54;
          break;
        case 1:
          goto LABEL_49;
        case 3:
          v30 = 9;
          goto LABEL_49;
        case 4:
          v30 = 1;
          goto LABEL_49;
        case 6:
          v30 = 10;
          goto LABEL_49;
        case 7:
          v30 = 2;
          goto LABEL_49;
        case 9:
          v30 = 11;
          goto LABEL_49;
        case 10:
          v30 = 3;
          goto LABEL_49;
        case 11:
          v30 = 12;
          goto LABEL_49;
        case 12:
          v30 = 4;
          goto LABEL_49;
        case 13:
          v30 = 5;
          goto LABEL_49;
        case 14:
          v30 = 6;
          goto LABEL_49;
        case 15:
          v30 = 7;
          goto LABEL_49;
        case 16:
          v30 = 8;
          goto LABEL_49;
        case 17:
          v30 = 13;
          goto LABEL_49;
        case 18:
          v30 = 14;
          goto LABEL_49;
        case 19:
          v30 = 15;
          goto LABEL_49;
        case 20:
          v30 = 16;
          goto LABEL_49;
        case 21:
          v30 = 17;
LABEL_49:
          v37 = *(_QWORD *)(v52 + 32);
          if (v30 >= *(_QWORD *)(v37 + 16))
            goto LABEL_65;
          v38 = *(_QWORD *)(v37 + 16 * v30 + 40);
          if (v38 >> 60 != 15)
            __asm { BR              X9 }
          goto LABEL_75;
        default:
          lazy protocol witness table accessor for type ModelParamsError and conformance ModelParamsError();
          swift_allocError();
          *v48 = 1;
          swift_willThrow();
          swift_release();
          goto LABEL_63;
      }
    }
  }
  swift_release_n();
  Hands_trace_CBridge_0();
  Hands_trace_CBridge_0();
  specialized E5RTRegressor.runNetwork(_:)();
  if (!v6)
  {
    Hands_trace_CBridge_0();
    Hands_trace_CBridge_0();
    type metadata accessor for PinchModelInference();
    v39 = *(unsigned int *)(a2 + 264);
    LOBYTE(v53) = *(_BYTE *)(a2 + 268);
    v40 = static PinchModelInference.getPinchModelOutput(_:_:_:)((uint64_t)&v53, a3, v51, v39 | ((unint64_t)v53 << 32));
    v41 = *(void **)(v7 + 16);
    if (!v41)
      goto LABEL_78;
    objc_msgSend(v41, sel_pushBuffer_, v40);
    Hands_trace_CBridge_0();
    if (*(_BYTE *)(v7 + 32))
      v42 = v55;
    else
      v42 = (int *)(a2 + 272);
    v43 = *v42;
    v44 = v54;
    v45 = BYTE4(v54);
    v46 = v55[1];
    v47 = v56;
    *(_QWORD *)a5 = v53;
    *(_DWORD *)(a5 + 8) = v44;
    *(_BYTE *)(a5 + 12) = v45;
    *(_DWORD *)(a5 + 16) = v43;
    *(_DWORD *)(a5 + 20) = v46;
    *(_BYTE *)(a5 + 24) = v47;
  }
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MonoPinchModelInference.getBranchLatentsIndex(_:)(Hands::PinchDnnInputLayer a1)
{
  char v1;
  _BYTE *v2;

  v1 = a1 - 1;
  if ((a1 - 1) <= 0x15u && ((0x3FFEDBu >> v1) & 1) != 0)
    return qword_23D9A9410[v1];
  lazy protocol witness table accessor for type ModelParamsError and conformance ModelParamsError();
  swift_allocError();
  *v2 = 1;
  return swift_willThrow();
}

uint64_t MonoPinchModelInference.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MonoPinchModelInference()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type ModelParamsError and conformance ModelParamsError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelParamsError and conformance ModelParamsError;
  if (!lazy protocol witness table cache variable for type ModelParamsError and conformance ModelParamsError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ModelParamsError, &type metadata for ModelParamsError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelParamsError and conformance ModelParamsError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelParamsError and conformance ModelParamsError;
  if (!lazy protocol witness table cache variable for type ModelParamsError and conformance ModelParamsError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ModelParamsError, &type metadata for ModelParamsError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelParamsError and conformance ModelParamsError);
  }
  return result;
}

uint64_t Hands_trace_CBridge_0()
{
  return kdebug_trace();
}

uint64_t static PinchJointOcclusion.update(_:)@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  char v53;
  char v54;
  _BYTE v55[171];
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _OWORD __dst[50];

  memcpy(__dst, __src, 0x306uLL);
  v51 = *(_QWORD *)&__dst[25];
  v3 = *((_QWORD *)&__dst[24] + 1);
  v4 = *(_QWORD *)&__dst[24];
  v5 = *(_QWORD *)&__dst[0];
  if (!*(_QWORD *)&__dst[0])
  {
    v13 = *((float *)&__dst[26] + 2);
    v12 = *((float *)&__dst[26] + 1);
    v11 = *(float *)&__dst[26];
    v10 = *((float *)&__dst[25] + 3);
    v16 = *((float *)&__dst[25] + 2);
    result = (uint64_t)outlined retain of PinchFrameFeatures((uint64_t *)__dst);
LABEL_17:
    v17 = __dst[10];
    v54 = BYTE8(__dst[30]);
    v53 = BYTE8(__dst[31]);
    v52 = BYTE8(__dst[32]);
    *(_QWORD *)(a2 + 128) = *(_QWORD *)&__dst[8];
    v56 = v17;
    *(_QWORD *)&v55[163] = *(_QWORD *)&__dst[43];
    v18 = *((_QWORD *)&__dst[9] + 1);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)&__dst[9];
    *(_QWORD *)(a2 + 152) = v18;
    *(_BYTE *)(a2 + 160) = v56;
    *(_WORD *)(a2 + 192) = __dst[12];
    *(_OWORD *)(a2 + 360) = *(_OWORD *)((char *)&__dst[22] + 8);
    *(_OWORD *)(a2 + 428) = *(_OWORD *)((char *)&__dst[26] + 12);
    *(_OWORD *)(a2 + 444) = *(_OWORD *)((char *)&__dst[27] + 12);
    v19 = __dst[46];
    v20 = __dst[6];
    v21 = __dst[7];
    v22 = __dst[2];
    v23 = __dst[3];
    v25 = __dst[4];
    v24 = __dst[5];
    v27 = __dst[0];
    v26 = __dst[1];
    *(_OWORD *)&v55[115] = __dst[40];
    *(_OWORD *)&v55[131] = __dst[41];
    *(_OWORD *)&v55[147] = __dst[42];
    *(_OWORD *)&v55[51] = __dst[36];
    *(_OWORD *)&v55[67] = __dst[37];
    *(_OWORD *)&v55[83] = __dst[38];
    *(_OWORD *)&v55[99] = __dst[39];
    *(_OWORD *)&v55[3] = __dst[33];
    *(_OWORD *)&v55[19] = __dst[34];
    *(_OWORD *)&v55[35] = __dst[35];
    v28 = *(_OWORD *)&v55[144];
    v29 = *(_OWORD *)&v55[155];
    v31 = *(_OWORD *)&v55[96];
    v30 = *(_OWORD *)&v55[112];
    *(_OWORD *)(a2 + 653) = *(_OWORD *)&v55[128];
    *(_OWORD *)(a2 + 669) = v28;
    *(_OWORD *)(a2 + 680) = v29;
    v32 = *(_OWORD *)&v55[80];
    *(_OWORD *)(a2 + 589) = *(_OWORD *)&v55[64];
    *(_OWORD *)(a2 + 605) = v32;
    *(_OWORD *)(a2 + 621) = v31;
    *(_OWORD *)(a2 + 637) = v30;
    v33 = *(_OWORD *)&v55[16];
    *(_OWORD *)(a2 + 525) = *(_OWORD *)v55;
    *(_OWORD *)(a2 + 541) = v33;
    v34 = *(_OWORD *)&v55[48];
    *(_OWORD *)(a2 + 557) = *(_OWORD *)&v55[32];
    *(_OWORD *)(a2 + 573) = v34;
    v35 = *(_OWORD *)((char *)&__dst[10] + 8);
    v36 = *(_OWORD *)((char *)&__dst[12] + 8);
    v37 = *(_OWORD *)((char *)&__dst[13] + 8);
    v38 = __dst[15];
    v39 = __dst[16];
    v40 = __dst[17];
    v41 = __dst[18];
    v42 = __dst[19];
    v43 = __dst[20];
    v44 = __dst[21];
    *(_QWORD *)(a2 + 352) = *(_QWORD *)&__dst[22];
    *(_BYTE *)(a2 + 376) = BYTE8(__dst[23]);
    *(_QWORD *)(a2 + 384) = v4;
    *(_QWORD *)(a2 + 392) = v3;
    v45 = BYTE12(__dst[28]);
    *(_QWORD *)(a2 + 400) = v51;
    LOBYTE(v18) = BYTE8(__dst[29]);
    *(_BYTE *)(a2 + 460) = v45;
    v46 = BYTE9(__dst[29]);
    *(_BYTE *)(a2 + 472) = v18;
    LOBYTE(v18) = BYTE10(__dst[29]);
    *(_BYTE *)(a2 + 473) = v46;
    v47 = BYTE11(__dst[29]);
    *(_BYTE *)(a2 + 474) = v18;
    *(_BYTE *)(a2 + 475) = v47;
    v48 = *(_QWORD *)&__dst[31];
    *(_QWORD *)(a2 + 480) = *(_QWORD *)&__dst[30];
    *(_BYTE *)(a2 + 488) = v54;
    *(_QWORD *)(a2 + 496) = v48;
    *(_BYTE *)(a2 + 504) = v53;
    *(_QWORD *)(a2 + 512) = *(_QWORD *)&__dst[32];
    *(_WORD *)(a2 + 520) = __PAIR16__(BYTE9(__dst[32]), v52);
    *(_WORD *)(a2 + 522) = WORD5(__dst[32]);
    *(_BYTE *)(a2 + 524) = BYTE12(__dst[32]);
    *(_QWORD *)(a2 + 704) = *(_QWORD *)&__dst[44];
    *(_QWORD *)(a2 + 720) = *(_QWORD *)&__dst[45];
    *(_QWORD *)(a2 + 752) = *(_QWORD *)&__dst[47];
    *(_BYTE *)(a2 + 760) = BYTE8(__dst[47]);
    *(_WORD *)(a2 + 772) = WORD2(__dst[48]);
    *(_OWORD *)(a2 + 96) = v20;
    *(_OWORD *)(a2 + 112) = v21;
    *(_OWORD *)(a2 + 32) = v22;
    *(_OWORD *)(a2 + 48) = v23;
    *(_OWORD *)(a2 + 64) = v25;
    *(_OWORD *)(a2 + 80) = v24;
    *(_OWORD *)a2 = v27;
    *(_OWORD *)(a2 + 16) = v26;
    *(_QWORD *)(a2 + 136) = *((_QWORD *)&__dst[8] + 1);
    *(_OWORD *)(a2 + 168) = v35;
    *(_OWORD *)(a2 + 200) = v36;
    *(_OWORD *)(a2 + 216) = v37;
    *(_OWORD *)(a2 + 240) = v38;
    *(_OWORD *)(a2 + 256) = v39;
    *(_OWORD *)(a2 + 272) = v40;
    *(_OWORD *)(a2 + 288) = v41;
    LODWORD(v24) = HIDWORD(__dst[47]);
    *(_OWORD *)(a2 + 304) = v42;
    *(_OWORD *)(a2 + 320) = v43;
    LODWORD(v20) = __dst[48];
    *(_OWORD *)(a2 + 336) = v44;
    *(float *)(a2 + 408) = v16;
    *(float *)(a2 + 412) = v10;
    *(float *)(a2 + 416) = v11;
    *(float *)(a2 + 420) = v12;
    *(float *)(a2 + 424) = v13;
    *(_QWORD *)(a2 + 464) = *(_QWORD *)&__dst[29];
    *(_QWORD *)(a2 + 712) = *((_QWORD *)&__dst[44] + 1);
    *(_OWORD *)(a2 + 736) = v19;
    *(_DWORD *)(a2 + 764) = v24;
    *(_DWORD *)(a2 + 768) = v20;
    return result;
  }
  v6 = *((_QWORD *)&__dst[36] + 1);
  v57 = __dst[0];
  v58 = __dst[1];
  v59 = __dst[2];
  v60 = __dst[3];
  v61 = __dst[4];
  v62 = __dst[5];
  v63 = __dst[6];
  LOWORD(v64) = __dst[7] & 0x101;
  HIDWORD(v64) = DWORD1(__dst[7]);
  *(_OWORD *)&v55[64] = __dst[4];
  *(_OWORD *)&v55[80] = __dst[5];
  *(_OWORD *)&v55[96] = __dst[6];
  *(_QWORD *)&v55[112] = v64;
  *(_OWORD *)v55 = __dst[0];
  *(_OWORD *)&v55[16] = __dst[1];
  *(_OWORD *)&v55[32] = __dst[2];
  *(_OWORD *)&v55[48] = __dst[3];
  v49 = *(_QWORD *)&__dst[0];
  outlined retain of PinchFrameFeatures((uint64_t *)__dst);
  v50 = specialized static PinchJointOcclusion.updatePinchJointOcclusionMin(_:_:)((uint64_t)v55, v6);
  *(_OWORD *)&v55[64] = v61;
  *(_OWORD *)&v55[80] = v62;
  *(_OWORD *)&v55[96] = v63;
  *(_QWORD *)&v55[112] = v64;
  *(_OWORD *)v55 = v57;
  *(_OWORD *)&v55[16] = v58;
  *(_OWORD *)&v55[32] = v59;
  *(_OWORD *)&v55[48] = v60;
  v7 = specialized static PinchJointOcclusion.updatePinchJointOcclusionMax(_:_:)((uint64_t)v55, v6);
  outlined copy of HandPose?(v5);
  v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_Sfs5NeverOTg5015_s5Hands19Pinche53OcclusionC06updatebC11UncertaintyySaySfGAA8HandPoseV_o4So06d2C7F14VGtFZSfAIXEfU_5Hands0rS0VTf1cn_nTf4ng_n(v6, (uint64_t)&v57);
  outlined consume of HandPose?(v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v50 + 16);
  if (!v9)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (*(_QWORD *)(v7 + 16) < 2uLL)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v9 < 3)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v10 = *(float *)(v50 + 32);
  v11 = *(float *)(v7 + 36);
  v12 = *(float *)(v50 + 40);
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(v7 + 16) >= 4uLL)
  {
    v13 = *(float *)(v7 + 44);
    result = swift_bridgeObjectRelease();
    if (v10 > v11)
      v14 = v10;
    else
      v14 = v11;
    if (v12 > v13)
      v15 = v12;
    else
      v15 = v13;
    if (v14 > v15)
      v16 = v14;
    else
      v16 = v15;
    v51 = v7;
    v3 = v50;
    goto LABEL_17;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PinchJointOcclusion()
{
  return objc_opt_self();
}

uint64_t *outlined retain of PinchFrameFeatures(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[30];
  v6 = a1[83];
  v7 = a1[82];
  v4 = a1[85];
  v5 = a1[84];
  outlined copy of HandPose?(*a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of HandPose?(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ObjectInteractionResultsByHand?(v7, v6, v5, v4);
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_Sfs5NeverOTg5015_s5Hands19Pinche53OcclusionC06updatebC11UncertaintyySaySfGAA8HandPoseV_o4So06d2C7F14VGtFZSfAIXEfU_5Hands0rS0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    result = v14;
    v6 = (uint64_t *)(a1 + 32);
    v7 = *(_QWORD *)a2 + 32;
    v8 = *(_QWORD *)(*(_QWORD *)a2 + 16);
    while (1)
    {
      v10 = *v6++;
      v9 = v10;
      if (v10 < 0)
        break;
      if (v9 >= v8)
        goto LABEL_10;
      v11 = *(_DWORD *)(v7 + 144 * v9 + 4);
      v15 = result;
      v13 = *(_QWORD *)(result + 16);
      v12 = *(_QWORD *)(result + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        result = v15;
      }
      *(_QWORD *)(result + 16) = v13 + 1;
      *(_DWORD *)(result + 4 * v13 + 32) = v11;
      if (!--v3)
        return result;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t specialized static PinchJointOcclusion.updatePinchJointOcclusionMin(_:_:)(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD v27[7];
  uint64_t v28;

  v3 = *(_OWORD *)(a1 + 80);
  v27[4] = *(_OWORD *)(a1 + 64);
  v27[5] = v3;
  v27[6] = *(_OWORD *)(a1 + 96);
  v28 = *(_QWORD *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v27[2] = *(_OWORD *)(a1 + 32);
  v27[3] = v5;
  outlined retain of HandPose((uint64_t)v27);
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_SD6ValuesVys5Int32VSf_Gs5NeverOTg5043_s5Hands14StatisticUtilsC30calculateAveragee36OcclusionySfAA14HandDescriptorVFZSD6g4Vys5h9VSf_GSo06d2F7F6VXEfU_5Hands0S4PoseVTf1cn_nTf4ng_n(a2, (uint64_t)v27);
  outlined release of HandPose((uint64_t)v27);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v26 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  v9 = 0;
  v10 = v26;
  while (2)
  {
    v11 = 0;
    v12 = *(_QWORD *)(v6 + 32 + 8 * v9);
    v13 = v12 + 64;
    v14 = 1 << *(_BYTE *)(v12 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & *(_QWORD *)(v12 + 64);
    ++v9;
    v17 = (unint64_t)(v14 + 63) >> 6;
    v18 = 1.0;
    while (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v11 << 6);
LABEL_8:
      if (v18 >= *(float *)(*(_QWORD *)(v12 + 56) + 4 * v20))
        v18 = *(float *)(*(_QWORD *)(v12 + 56) + 4 * v20);
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v21 >= v17)
    {
LABEL_29:
      v25 = *(_QWORD *)(v26 + 16);
      v24 = *(_QWORD *)(v26 + 24);
      if (v25 >= v24 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      *(_QWORD *)(v26 + 16) = v25 + 1;
      *(float *)(v26 + 4 * v25 + 32) = v18;
      if (v9 == v7)
      {
        swift_bridgeObjectRelease();
        return v10;
      }
      continue;
    }
    break;
  }
  v22 = *(_QWORD *)(v13 + 8 * v21);
  ++v11;
  if (v22)
    goto LABEL_28;
  v11 = v21 + 1;
  if (v21 + 1 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v11);
  if (v22)
    goto LABEL_28;
  v11 = v21 + 2;
  if (v21 + 2 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v11);
  if (v22)
    goto LABEL_28;
  v11 = v21 + 3;
  if (v21 + 3 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v11);
  if (v22)
    goto LABEL_28;
  v11 = v21 + 4;
  if (v21 + 4 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v11);
  if (v22)
  {
LABEL_28:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v11 << 6);
    goto LABEL_8;
  }
  v23 = v21 + 5;
  if (v23 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_28;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v17)
      goto LABEL_29;
    v22 = *(_QWORD *)(v13 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_28;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized static PinchJointOcclusion.updatePinchJointOcclusionMax(_:_:)(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD v27[7];
  uint64_t v28;

  v3 = *(_OWORD *)(a1 + 80);
  v27[4] = *(_OWORD *)(a1 + 64);
  v27[5] = v3;
  v27[6] = *(_OWORD *)(a1 + 96);
  v28 = *(_QWORD *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v27[2] = *(_OWORD *)(a1 + 32);
  v27[3] = v5;
  outlined retain of HandPose((uint64_t)v27);
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_SD6ValuesVys5Int32VSf_Gs5NeverOTg5043_s5Hands14StatisticUtilsC30calculateAveragee36OcclusionySfAA14HandDescriptorVFZSD6g4Vys5h9VSf_GSo06d2F7F6VXEfU_5Hands0S4PoseVTf1cn_nTf4ng_n(a2, (uint64_t)v27);
  outlined release of HandPose((uint64_t)v27);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v26 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  v9 = 0;
  v10 = v26;
  while (2)
  {
    v11 = 0;
    v12 = *(_QWORD *)(v6 + 32 + 8 * v9);
    v13 = v12 + 64;
    v14 = 1 << *(_BYTE *)(v12 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & *(_QWORD *)(v12 + 64);
    ++v9;
    v17 = (unint64_t)(v14 + 63) >> 6;
    v18 = 0.0;
    while (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v11 << 6);
LABEL_8:
      if (*(float *)(*(_QWORD *)(v12 + 56) + 4 * v20) > v18)
        v18 = *(float *)(*(_QWORD *)(v12 + 56) + 4 * v20);
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v21 >= v17)
    {
LABEL_29:
      v25 = *(_QWORD *)(v26 + 16);
      v24 = *(_QWORD *)(v26 + 24);
      if (v25 >= v24 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      *(_QWORD *)(v26 + 16) = v25 + 1;
      *(float *)(v26 + 4 * v25 + 32) = v18;
      if (v9 == v7)
      {
        swift_bridgeObjectRelease();
        return v10;
      }
      continue;
    }
    break;
  }
  v22 = *(_QWORD *)(v13 + 8 * v21);
  ++v11;
  if (v22)
    goto LABEL_28;
  v11 = v21 + 1;
  if (v21 + 1 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v11);
  if (v22)
    goto LABEL_28;
  v11 = v21 + 2;
  if (v21 + 2 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v11);
  if (v22)
    goto LABEL_28;
  v11 = v21 + 3;
  if (v21 + 3 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v11);
  if (v22)
    goto LABEL_28;
  v11 = v21 + 4;
  if (v21 + 4 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v11);
  if (v22)
  {
LABEL_28:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v11 << 6);
    goto LABEL_8;
  }
  v23 = v21 + 5;
  if (v23 >= v17)
    goto LABEL_29;
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_28;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v17)
      goto LABEL_29;
    v22 = *(_QWORD *)(v13 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_28;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t outlined retain of HandPose(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of HandPose(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

float specialized abs<A>(_:)(float a1)
{
  return fabsf(a1);
}

uint64_t RawPinchFeatures.scoreAheads.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t RawPinchFeatures.hoverDistanceUncertainty.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
}

float RawPinchFeatures.unsureNetScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

unint64_t RawPinchFeatures.rawPinchScore.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20) | ((unint64_t)*(unsigned __int8 *)(v0 + 24) << 32);
}

uint64_t RawPinchFeatures.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  int v11;
  char v12;
  char *v13;
  uint64_t v15;

  v3 = type metadata accessor for RawPinchFeaturesPB(0);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((_DWORD *)v1 + 2);
  v9 = *((_BYTE *)v1 + 12);
  v11 = *((_DWORD *)v1 + 4);
  v10 = *((_DWORD *)v1 + 5);
  v12 = *((_BYTE *)v1 + 24);
  *(_DWORD *)v6 = 0;
  UnknownStorage.init()();
  v13 = &v6[*(int *)(v3 + 32)];
  *(_DWORD *)v13 = 0;
  v13[4] = 1;
  *((_QWORD *)v6 + 1) = v7;
  *((_DWORD *)v6 + 1) = v11;
  if ((v12 & 1) == 0)
    *(_DWORD *)v6 = v10;
  if ((v9 & 1) == 0)
  {
    *(_DWORD *)v13 = v8;
    v13[4] = 0;
  }
  outlined init with take of RawPinchFeaturesPB((uint64_t)v6, a1);
  return swift_bridgeObjectRetain();
}

Swift::Bool __swiftcall RawPinchFeatures.almostEqual(to:withThreshold:)(Hands::RawPinchFeatures *to, Swift::Double withThreshold)
{
  uint64_t v2;
  _BOOL4 is_nil;
  _BOOL4 v4;
  int v5;
  int v6;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;
  _BOOL4 v11;
  char v12;
  int v13;
  _BOOL4 v14;
  char v16;

  is_nil = to->hoverDistanceUncertainty.is_nil;
  v4 = to->rawPinchScore.is_nil;
  v5 = *(unsigned __int8 *)(v2 + 12);
  v6 = *(unsigned __int8 *)(v2 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v7 == *((_QWORD *)to->scoreAheads._rawValue + 2))
  {
    if (v7)
    {
      v8 = (float *)(*(_QWORD *)v2 + 32);
      v9 = (float *)((char *)to->scoreAheads._rawValue + 32);
      v10 = v7 - 1;
      while (1)
      {
        v11 = vabds_f32(*v8, *v9) < withThreshold;
        if (!v10)
          break;
        while (1)
        {
          ++v9;
          ++v8;
          --v10;
          if (v11)
            break;
          v11 = 0;
          if (!v10)
            goto LABEL_11;
        }
      }
    }
    else
    {
      v11 = 1;
    }
  }
  else
  {
    v11 = 0;
  }
LABEL_11:
  v12 = v5 | is_nil;
  v13 = v11 & v5 & is_nil;
  v14 = vabds_f32(*(float *)(v2 + 8), to->hoverDistanceUncertainty.value) < withThreshold && v11;
  if ((v12 & 1) == 0)
    v13 = v14;
  if (((v6 | v4) & 1) != 0)
  {
    if ((v13 & v6 & v4) != 1)
      return 0;
  }
  else
  {
    if (vabds_f32(*(float *)(v2 + 20), to->rawPinchScore.value) < withThreshold)
      v16 = v13;
    else
      v16 = 0;
    if ((v16 & 1) == 0)
      return 0;
  }
  return vabds_f32(*(float *)(v2 + 16), to->unsureNetScore) < withThreshold;
}

unint64_t lazy protocol witness table accessor for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB;
  if (!lazy protocol witness table cache variable for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB)
  {
    v1 = type metadata accessor for RawPinchFeaturesPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for RawPinchFeaturesPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RawPinchFeaturesPB and conformance RawPinchFeaturesPB);
  }
  return result;
}

uint64_t destroy for RawPinchFeatures()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RawPinchFeatures(uint64_t a1, uint64_t a2)
{
  int v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v3 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RawPinchFeatures(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = v5;
  return a1;
}

uint64_t assignWithTake for RawPinchFeatures(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for RawPinchFeatures(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RawPinchFeatures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RawPinchFeatures()
{
  return &type metadata for RawPinchFeatures;
}

uint64_t outlined init with take of RawPinchFeaturesPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RawPinchFeaturesPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall PinchPostprocessing.reset()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[352];
  char v7;
  _BYTE __dst[344];

  v1 = v0;
  swift_beginAccess();
  if (!v0[2])
  {
    __break(1u);
    goto LABEL_15;
  }
  swift_retain();
  PinchGestures.reset()();
  swift_release();
  if (!v0[3])
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  swift_retain();
  swift_retain();
  RecoverRepetitivePinch.reset()();
  swift_release();
  swift_release();
  v2 = (_QWORD *)v0[4];
  if (!v2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v2[2])
  {
    swift_retain();
    swift_retain();
    PinchCancellation.reset()();
    swift_release();
    v3 = v2[3];
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  swift_retain();
  v3 = v2[3];
  if (v3)
  {
LABEL_6:
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_BYTE *)(v3 + 56) = 0;
    *(_DWORD *)(v3 + 60) = 1065353216;
  }
LABEL_7:
  *(_BYTE *)(v2[4] + 16) = 0;
  swift_release();
  if (!v0[5])
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_retain();
  SelectionRecoveryInBreakProcessing.reset()();
  swift_release();
  v4 = v0[6];
  if (!v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_BYTE *)(v4 + 120) = 1;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_WORD *)(v4 + 144) = 1;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v5 = v0[7];
  if (!v5)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_retain();
  PinchGestureData.init()((uint64_t)v6);
  v7 = 1;
  memcpy(__dst, (const void *)(v5 + 16), 0x151uLL);
  memcpy((void *)(v5 + 16), v6, 0x148uLL);
  *(_QWORD *)(v5 + 344) = 0;
  *(_BYTE *)(v5 + 352) = v7;
  outlined release of FrameFeatures((uint64_t)__dst);
  swift_release();
  if (v1[8])
  {
    swift_retain();
    PinchPostprocessPipeline.reset()();
    swift_release();
    return;
  }
LABEL_20:
  __break(1u);
}

uint64_t PinchPostprocessing.init(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  HandsKitConfig *v7;
  uint64_t v8;
  HandsKitConfig *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  HandsKitConfig *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  HandsKitConfig *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  HandsKitConfig *v26;
  uint64_t v27;
  _QWORD __src[43];
  _OWORD v30[4];
  char v31;
  _BYTE __dst[352];

  v2 = v1;
  *(_OWORD *)(v1 + 16) = 0u;
  v4 = v1 + 16;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0xE000000000000000;
  type metadata accessor for PinchGestures();
  swift_allocObject();
  v5 = specialized PinchGestures.init(_:)(a1);
  swift_beginAccess();
  *(_QWORD *)v4 = v5;
  swift_release();
  type metadata accessor for RepetitivePinchRecoveryPipeline();
  v6 = swift_allocObject();
  *(_WORD *)(v6 + 24) = 257;
  *(_BYTE *)(v6 + 26) = 0;
  type metadata accessor for RecoverRepetitivePinch();
  swift_allocObject();
  v7 = a1;
  v8 = specialized RecoverRepetitivePinch.init(_:)(v7);

  *(_QWORD *)(v6 + 16) = v8;
  *(_BYTE *)(v6 + 24) = -[HandsKitConfig EnableScrollRecovery](v7, sel_EnableScrollRecovery);
  *(_BYTE *)(v6 + 25) = -[HandsKitConfig EnableRepetitiveTapRecovery](v7, sel_EnableRepetitiveTapRecovery);
  *(_BYTE *)(v6 + 26) = -[HandsKitConfig SerializeInternalData](v7, sel_SerializeInternalData);
  *(_QWORD *)(v4 + 8) = v6;
  swift_release();
  type metadata accessor for PinchCancellationProcessing();
  swift_allocObject();
  v9 = v7;
  v10 = specialized PinchCancellationProcessing.init(_:)(v9);

  *(_QWORD *)(v4 + 16) = v10;
  swift_release();
  type metadata accessor for SelectionRecoveryInBreakProcessing();
  v11 = swift_allocObject();
  *(_WORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  *(_BYTE *)(v11 + 32) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  v12 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v11 + 104) = 0u;
  *(_QWORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = v12;
  *(_QWORD *)(v11 + 136) = v12;
  *(_QWORD *)(v11 + 144) = v12;
  *(_BYTE *)(v11 + 152) = 0;
  v13 = v9;
  specialized SelectionRecoveryInBreakProcessing.ThresholdConfig.init(_:)(v13, (uint64_t)v30);
  v14 = v30[1];
  *(_OWORD *)(v11 + 160) = v30[0];
  *(_OWORD *)(v11 + 176) = v14;
  v15 = v30[3];
  *(_OWORD *)(v11 + 192) = v30[2];
  *(_OWORD *)(v11 + 208) = v15;
  *(_BYTE *)(v11 + 152) = -[HandsKitConfig EnableSelectionRecoveryInBreak](v13, sel_EnableSelectionRecoveryInBreak);

  *(_QWORD *)(v4 + 24) = v11;
  swift_release();
  type metadata accessor for DoublePinchRecovery();
  v16 = swift_allocObject();
  *(_BYTE *)(v16 + 80) = 2;
  *(_QWORD *)(v16 + 104) = 0;
  *(_QWORD *)(v16 + 112) = 0;
  *(_QWORD *)(v16 + 96) = 0;
  *(_BYTE *)(v16 + 120) = 1;
  *(_QWORD *)(v16 + 128) = 0;
  *(_QWORD *)(v16 + 136) = 0;
  *(_WORD *)(v16 + 144) = 1;
  *(_BYTE *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 152) = 0;
  *(_QWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 24) = 0x3F0000003ECCCCCDLL;
  *(_DWORD *)(v16 + 32) = 1045220557;
  *(_QWORD *)(v16 + 40) = 2;
  *(_OWORD *)(v16 + 48) = xmmword_23D9A9540;
  *(_DWORD *)(v16 + 64) = 1008981770;
  *(_QWORD *)(v16 + 72) = 2;
  v17 = v13;
  *(_BYTE *)(v16 + 80) = -[HandsKitConfig SerializeInternalData](v17, sel_SerializeInternalData);
  -[HandsKitConfig DoublePinchBreakThreshold](v17, sel_DoublePinchBreakThreshold);
  *(_DWORD *)(v16 + 24) = v18;
  LOBYTE(v11) = -[HandsKitConfig EnableDoublePinchRecovery](v17, sel_EnableDoublePinchRecovery);

  *(_BYTE *)(v16 + 16) = v11;
  *(_QWORD *)(v4 + 32) = v16;
  swift_release();
  type metadata accessor for FrameFeaturesAdapter();
  v19 = swift_allocObject();
  PinchGestureData.init()(v19 + 16);
  *(_QWORD *)(v19 + 344) = 0;
  *(_BYTE *)(v19 + 352) = 1;
  PinchGestureData.init()((uint64_t)__src);
  v31 = 1;
  memcpy(__dst, (const void *)(v19 + 16), 0x151uLL);
  memcpy((void *)(v19 + 16), __src, 0x148uLL);
  *(_QWORD *)(v19 + 344) = 0;
  *(_BYTE *)(v19 + 352) = v31;
  outlined release of FrameFeatures((uint64_t)__dst);
  *(_QWORD *)(v4 + 40) = v19;
  swift_release();
  type metadata accessor for PinchPostprocessPipeline();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = 0;
  *(_WORD *)(v20 + 32) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v20 + 36) = _D0;
  v26 = v17;
  PinchPostprocessPipeline.reconfig(_:)(v26);

  *(_QWORD *)(v4 + 48) = v20;
  swift_release();
  *(_BYTE *)(v4 + 80) = -[HandsKitConfig ObjectInteractionStateSupressPinchRecovery](v26, sel_ObjectInteractionStateSupressPinchRecovery);
  *(_BYTE *)(v4 + 81) = -[HandsKitConfig OisRecoveryPinchSuppressionInStrictEatingMode](v26, sel_OisRecoveryPinchSuppressionInStrictEatingMode);
  v27 = specialized static PinchPostprocessing.getPinchModelParams(_:)(v26);

  *(_QWORD *)(v2 + 72) = v27;
  swift_release();
  return v2;
}

Swift::Void __swiftcall PinchPostprocessing.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  HandsKitConfig *v4;
  uint64_t v5;
  uint64_t v6;
  HandsKitConfig *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  HandsKitConfig *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  HandsKitConfig *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  HandsKitConfig *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD __src[43];
  _OWORD v32[4];
  char v33;
  _BYTE __dst[352];

  v2 = v1;
  type metadata accessor for PinchGestures();
  swift_allocObject();
  v4 = a1;
  v5 = specialized PinchGestures.init(_:)(v4);

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = v5;
  swift_release();
  type metadata accessor for RepetitivePinchRecoveryPipeline();
  v6 = swift_allocObject();
  *(_WORD *)(v6 + 24) = 257;
  *(_BYTE *)(v6 + 26) = 0;
  type metadata accessor for RecoverRepetitivePinch();
  swift_allocObject();
  v7 = v4;
  v8 = specialized RecoverRepetitivePinch.init(_:)(v7);

  *(_QWORD *)(v6 + 16) = v8;
  *(_BYTE *)(v6 + 24) = -[HandsKitConfig EnableScrollRecovery](v7, sel_EnableScrollRecovery);
  *(_BYTE *)(v6 + 25) = -[HandsKitConfig EnableRepetitiveTapRecovery](v7, sel_EnableRepetitiveTapRecovery);
  *(_BYTE *)(v6 + 26) = -[HandsKitConfig SerializeInternalData](v7, sel_SerializeInternalData);
  *(_QWORD *)(v2 + 24) = v6;
  swift_release();
  type metadata accessor for SelectionRecoveryInBreakProcessing();
  v9 = swift_allocObject();
  *(_WORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_BYTE *)(v9 + 32) = 0;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  v10 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v9 + 104) = 0u;
  *(_QWORD *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 128) = v10;
  *(_QWORD *)(v9 + 136) = v10;
  *(_QWORD *)(v9 + 144) = v10;
  *(_BYTE *)(v9 + 152) = 0;
  v11 = v7;
  specialized SelectionRecoveryInBreakProcessing.ThresholdConfig.init(_:)(v11, (uint64_t)v32);
  v12 = v32[1];
  *(_OWORD *)(v9 + 160) = v32[0];
  *(_OWORD *)(v9 + 176) = v12;
  v13 = v32[3];
  *(_OWORD *)(v9 + 192) = v32[2];
  *(_OWORD *)(v9 + 208) = v13;
  *(_BYTE *)(v9 + 152) = -[HandsKitConfig EnableSelectionRecoveryInBreak](v11, sel_EnableSelectionRecoveryInBreak);

  *(_QWORD *)(v2 + 40) = v9;
  swift_release();
  type metadata accessor for DoublePinchRecovery();
  v14 = swift_allocObject();
  *(_BYTE *)(v14 + 80) = 2;
  *(_QWORD *)(v14 + 104) = 0;
  *(_QWORD *)(v14 + 112) = 0;
  *(_QWORD *)(v14 + 96) = 0;
  *(_BYTE *)(v14 + 120) = 1;
  *(_QWORD *)(v14 + 128) = 0;
  *(_QWORD *)(v14 + 136) = 0;
  *(_WORD *)(v14 + 144) = 1;
  *(_BYTE *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 152) = 0;
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 24) = 0x3F0000003ECCCCCDLL;
  *(_DWORD *)(v14 + 32) = 1045220557;
  *(_QWORD *)(v14 + 40) = 2;
  *(_OWORD *)(v14 + 48) = xmmword_23D9A9540;
  *(_DWORD *)(v14 + 64) = 1008981770;
  *(_QWORD *)(v14 + 72) = 2;
  v15 = v11;
  *(_BYTE *)(v14 + 80) = -[HandsKitConfig SerializeInternalData](v15, sel_SerializeInternalData);
  -[HandsKitConfig DoublePinchBreakThreshold](v15, sel_DoublePinchBreakThreshold);
  *(_DWORD *)(v14 + 24) = v16;
  LOBYTE(v9) = -[HandsKitConfig EnableDoublePinchRecovery](v15, sel_EnableDoublePinchRecovery);

  *(_BYTE *)(v14 + 16) = v9;
  *(_QWORD *)(v2 + 48) = v14;
  swift_release();
  type metadata accessor for FrameFeaturesAdapter();
  v17 = swift_allocObject();
  PinchGestureData.init()(v17 + 16);
  *(_QWORD *)(v17 + 344) = 0;
  *(_BYTE *)(v17 + 352) = 1;
  PinchGestureData.init()((uint64_t)__src);
  v33 = 1;
  memcpy(__dst, (const void *)(v17 + 16), 0x151uLL);
  memcpy((void *)(v17 + 16), __src, 0x148uLL);
  *(_QWORD *)(v17 + 344) = 0;
  *(_BYTE *)(v17 + 352) = v33;
  outlined release of FrameFeatures((uint64_t)__dst);
  *(_QWORD *)(v2 + 56) = v17;
  swift_release();
  type metadata accessor for PinchPostprocessPipeline();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_WORD *)(v18 + 32) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v18 + 36) = _D0;
  v24 = v15;
  PinchPostprocessPipeline.reconfig(_:)(v24);

  *(_QWORD *)(v2 + 64) = v18;
  swift_release();
  *(_BYTE *)(v2 + 96) = -[HandsKitConfig ObjectInteractionStateSupressPinchRecovery](v24, sel_ObjectInteractionStateSupressPinchRecovery);
  *(_BYTE *)(v2 + 97) = -[HandsKitConfig OisRecoveryPinchSuppressionInStrictEatingMode](v24, sel_OisRecoveryPinchSuppressionInStrictEatingMode);
  v25 = *(_QWORD *)(v2 + 72);
  if (!v25)
  {
    specialized static PinchPostprocessing.getPinchModelName(_:)(v24);
    goto LABEL_7;
  }
  v27 = *(_QWORD *)(v25 + 16);
  v26 = *(_QWORD *)(v25 + 24);
  swift_bridgeObjectRetain();
  v28 = specialized static PinchPostprocessing.getPinchModelName(_:)(v24);
  if (!v26)
  {
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_8:
    *(_QWORD *)(v2 + 72) = specialized static PinchPostprocessing.getPinchModelParams(_:)(v24);
    swift_release();
    goto LABEL_10;
  }
  if (v27 == v28 && v26 == v29)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_10;
  }
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0)
    goto LABEL_8;
LABEL_10:
  if (*(_QWORD *)(v2 + 32))
  {
    swift_retain();
    PinchCancellationProcessing.reconfig(_:)(v24);
    swift_release();
    PinchPostprocessing.reset()();
  }
  else
  {
    __break(1u);
  }
}

uint64_t PinchPostprocessing.updateInternalTnTStates(_:_:)(uint64_t a1, const void *a2)
{
  _QWORD *v2;
  int v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD __dst[97];

  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 == 2)
  {
    __dst[3] = MEMORY[0x24BEE0D00];
    __dst[0] = 0xD000000000000011;
    __dst[1] = 0x800000023D9C6290;
    type metadata accessor for HandyLoggerNeo();
    v12 = xmmword_23D9A9560;
    v13 = 0;
    v14 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v12, 0xD00000000000007FLL, 0x800000023D9C6210, 114, (uint64_t)__dst, MEMORY[0x24BEE4AF8]);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)__dst);
  }
  v5 = v2;
  result = swift_beginAccess();
  if (!v5[2])
  {
    __break(1u);
    goto LABEL_12;
  }
  v8 = v3 & 1;
  memcpy(__dst, a2, 0x228uLL);
  swift_retain();
  PinchGestures.updateState(_:_:_:)(v8, a1, (uint64_t)__dst);
  result = swift_release();
  if (!v5[3])
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  swift_retain();
  RepetitivePinchRecoveryPipeline.updateState(_:)(v8);
  result = swift_release();
  v9 = v5[6];
  if (!v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(_BYTE *)(v9 + 145) = v8;
  v10 = v5[8];
  if (!v10)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  outlined init with take of PinchFrameFeatures?(v11 + 16, (uint64_t)&v12);
  outlined init with take of PinchFrameFeatures?((uint64_t)&v12, (uint64_t)__dst);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)__dst);
  if ((_DWORD)result == 1)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  *(_BYTE *)(v11 + 208) = v8;
  return result;
}

uint64_t PinchPostprocessing.loadPostProcessingMetaData(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_OWORD *)(a2 + 208);
  v4 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)&v5 = *(_QWORD *)((char *)a1 + 100);
  v6 = a1[23];
  *((_QWORD *)&v5 + 1) = a1[22];
  v7 = *(_OWORD *)(a2 + 240);
  v8 = *(_OWORD *)(a2 + 256);
  v9 = *(_QWORD *)(a2 + 344);
  v10 = *(_QWORD *)(a2 + 360);
  v11 = *(_QWORD *)(a2 + 496);
  v12 = *(_QWORD *)(a2 + 504);
  v13 = *(_QWORD *)(a2 + 512);
  v14 = *(_QWORD *)(a2 + 520);
  v15 = *(_QWORD *)(a2 + 528);
  *(_QWORD *)a3 = a1[25];
  *(_OWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 24) = v6;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a3 + 48) = v10;
  *(_QWORD *)(a3 + 56) = &outlined read-only object #0 of PinchPostprocessing.loadPostProcessingMetaData(_:_:);
  *(_OWORD *)(a3 + 64) = v3;
  *(_OWORD *)(a3 + 80) = v4;
  *(_OWORD *)(a3 + 96) = v7;
  *(_OWORD *)(a3 + 112) = v8;
  *(_QWORD *)(a3 + 128) = v11;
  *(_QWORD *)(a3 + 136) = v12;
  *(_QWORD *)(a3 + 144) = v13;
  *(_QWORD *)(a3 + 152) = v14;
  *(_QWORD *)(a3 + 160) = v15;
  return outlined copy of ObjectInteractionResultsByHand?(v11, v12, v13, v14);
}

uint64_t PinchPostprocessing.process(_:_:)(uint64_t a1, __int128 *a2)
{
  _QWORD *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  _QWORD *v58;
  _BOOL4 v59;
  _QWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  char v98;
  uint64_t *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  char v151;
  __int128 v152;
  int v153;
  char v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  _BOOL4 v174;
  __int128 *v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  __int16 *v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t *v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE v217[784];
  _BYTE v218[344];
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  __int16 v227;
  char v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  __int16 v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  _BYTE v249[352];
  _BYTE v250[352];
  _OWORD v251[2];
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int16 v264;
  char v265;
  __int16 v266;
  char v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;

  v5 = (uint64_t *)((char *)a2 + 396);
  v6 = type metadata accessor for HandDescriptor();
  v7 = MEMORY[0x24BDAC7A8](v6, v6);
  v9 = (char *)&v172 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v7, v10);
  v13 = MEMORY[0x24BDAC7A8](v11, v12);
  v15 = (char *)&v172 - v14;
  v17 = MEMORY[0x24BDAC7A8](v13, v16);
  v179 = (char *)&v172 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17, v19);
  v22 = MEMORY[0x24BDAC7A8](v20, v21);
  v180 = (uint64_t)&v172 - v23;
  MEMORY[0x24BDAC7A8](v22, v24);
  v29 = (char **)((char *)&v172 - v28);
  v30 = a2[11];
  v282 = a2[10];
  v283 = v30;
  v31 = a2[13];
  v284 = a2[12];
  v32 = a2[7];
  v278 = a2[6];
  v279 = v32;
  v33 = a2[8];
  v281 = a2[9];
  v280 = v33;
  v34 = a2[3];
  v274 = a2[2];
  v275 = v34;
  v35 = a2[4];
  v277 = a2[5];
  v276 = v35;
  v36 = *a2;
  v273 = a2[1];
  v272 = v36;
  v38 = a2[14];
  v37 = a2[15];
  v39 = a2[16];
  v40 = a2[18];
  v41 = a2[19];
  v268 = a2[17];
  v269 = v40;
  v42 = a2[20];
  v270 = v41;
  v271 = v42;
  v43 = *((_QWORD *)a2 + 42);
  v189 = *((_QWORD *)a2 + 43);
  v216 = *((unsigned int *)a2 + 88);
  v195 = *((unsigned int *)a2 + 89);
  v44 = *((_QWORD *)a2 + 46);
  v215 = *((_QWORD *)a2 + 45);
  v45 = *((_QWORD *)a2 + 47);
  v46 = *((_QWORD *)a2 + 48);
  v47 = *((unsigned __int8 *)a2 + 392);
  v267 = *((_BYTE *)a2 + 395);
  v182 = (__int16 *)((char *)a2 + 393);
  v266 = *(_WORD *)((char *)a2 + 393);
  v198 = *v5;
  v197 = *((_DWORD *)a2 + 101);
  v194 = *((_DWORD *)a2 + 102);
  v48 = v5[3];
  v210 = v5[2];
  v49 = v5[4];
  v50 = v5[5];
  v51 = *((unsigned __int8 *)a2 + 444);
  v265 = *((_BYTE *)a2 + 447);
  v264 = *(_WORD *)((char *)a2 + 445);
  v52 = *((_QWORD *)a2 + 56);
  v53 = *((_QWORD *)a2 + 57);
  v54 = a2[29];
  v263 = a2[30];
  v262 = v54;
  v209 = *((_QWORD *)a2 + 62);
  v55 = *((_QWORD *)a2 + 63);
  v56 = *((_QWORD *)a2 + 64);
  v196 = *((_QWORD *)a2 + 65);
  result = *((_QWORD *)a2 + 66);
  v261 = *(__int128 *)((char *)a2 + 536);
  v193 = v2;
  v58 = (_QWORD *)v2[9];
  if (v58)
  {
    v201 = v45;
    v202 = v46;
    v188 = v47;
    v211 = v38;
    v212 = v37;
    v199 = v43;
    v200 = v44;
    v213 = v39;
    v214 = v31;
    v177 = v25;
    v178 = v26;
    v191 = result;
    v192 = v56;
    v203 = v55;
    v204 = v52;
    v205 = v51;
    v206 = v50;
    v207 = v49;
    v208 = v48;
    v173 = v27;
    v183 = v29;
    v185 = a1;
    v186 = v58;
    v59 = (*(_BYTE *)(a1 + 136) & 1) == 0;
    swift_retain();
    v174 = v59;
    Hands_trace_CBridge_0();
    v60 = v193;
    v184 = v193 + 2;
    result = swift_beginAccess();
    if (v60[2])
    {
      v172 = v9;
      v181 = v15;
      v227 = *v182;
      v237 = *(_WORD *)((char *)a2 + 445);
      v228 = *((_BYTE *)v182 + 2);
      v238 = *((_BYTE *)a2 + 447);
      v248 = *(__int128 *)((char *)a2 + 536);
      v61 = a2[11];
      *(_OWORD *)&v218[160] = a2[10];
      *(_OWORD *)&v218[176] = v61;
      v62 = a2[7];
      *(_OWORD *)&v218[96] = a2[6];
      *(_OWORD *)&v218[112] = v62;
      v63 = a2[8];
      *(_OWORD *)&v218[144] = a2[9];
      *(_OWORD *)&v218[128] = v63;
      v64 = a2[3];
      *(_OWORD *)&v218[32] = a2[2];
      *(_OWORD *)&v218[48] = v64;
      v65 = a2[4];
      *(_OWORD *)&v218[80] = a2[5];
      *(_OWORD *)&v218[64] = v65;
      v66 = *a2;
      *(_OWORD *)&v218[16] = a2[1];
      *(_OWORD *)v218 = v66;
      v67 = a2[17];
      v68 = a2[18];
      *(_OWORD *)&v218[256] = v213;
      *(_OWORD *)&v218[272] = v67;
      v69 = a2[19];
      v70 = a2[20];
      v175 = a2 + 17;
      *(_OWORD *)&v218[288] = v68;
      *(_OWORD *)&v218[304] = v69;
      v71 = a2[29];
      v72 = a2[30];
      *(_OWORD *)&v218[320] = v70;
      *(_OWORD *)&v218[192] = a2[12];
      *(_OWORD *)&v218[208] = v214;
      *(_OWORD *)&v218[224] = v211;
      *(_OWORD *)&v218[240] = v212;
      *(_QWORD *)&v218[336] = v199;
      v73 = v189;
      v219 = v189;
      v220 = v216;
      v74 = v195;
      v221 = v195;
      v222 = v215;
      v223 = v200;
      v224 = v201;
      v225 = v202;
      v226 = v188;
      v229 = v198;
      v230 = v197;
      v231 = v194;
      v75 = v209;
      v232 = v210;
      v233 = v208;
      v187 = &v229;
      v234 = v207;
      v235 = v206;
      v236 = v205;
      v239 = v204;
      v190 = v53;
      v240 = v53;
      v242 = v72;
      v241 = v71;
      v243 = v209;
      v76 = v203;
      v244 = v203;
      v78 = v191;
      v77 = v192;
      v245 = v192;
      v79 = v196;
      v246 = v196;
      v247 = v191;
      swift_retain();
      PinchGestures.process(_:_:)(v185, (float32x4_t *)v218);
      swift_release();
      v80 = v186[25];
      *(_QWORD *)&v81 = *(_QWORD *)((char *)v186 + 100);
      v82 = v186[23];
      *((_QWORD *)&v81 + 1) = v186[22];
      v176 = v81;
      result = outlined copy of ObjectInteractionResultsByHand?(v75, v76, v77, v79);
      *(_QWORD *)&v251[0] = v80;
      *(_OWORD *)((char *)v251 + 8) = v176;
      *((_QWORD *)&v251[1] + 1) = v82;
      *(_QWORD *)&v252 = v73;
      *((_QWORD *)&v252 + 1) = __PAIR64__(v74, v216);
      *(_QWORD *)&v253 = v215;
      *((_QWORD *)&v253 + 1) = &outlined read-only object #0 of PinchPostprocessing.loadPostProcessingMetaData(_:_:);
      v254 = v214;
      v255 = v211;
      v256 = v212;
      v257 = v213;
      *(_QWORD *)&v258 = v75;
      *((_QWORD *)&v258 + 1) = v76;
      *(_QWORD *)&v259 = v77;
      *((_QWORD *)&v259 + 1) = v79;
      v260 = v78;
      if (v193[8])
      {
        v83 = v78;
        *(_OWORD *)&v218[128] = v258;
        *(_OWORD *)&v218[144] = v259;
        *(_QWORD *)&v218[160] = v260;
        *(_OWORD *)&v218[64] = v254;
        *(_OWORD *)&v218[80] = v255;
        *(_OWORD *)&v218[112] = v257;
        *(_OWORD *)&v218[96] = v256;
        *(_OWORD *)v218 = v251[0];
        *(_OWORD *)&v218[16] = v251[1];
        *(_OWORD *)&v218[48] = v253;
        *(_OWORD *)&v218[32] = v252;
        swift_retain();
        v84 = v185;
        PinchPostprocessPipeline.process(_:_:)(v185, (__int128 *)v218);
        swift_release();
        v85 = v183;
        result = outlined init with copy of HandDescriptor(v84, (uint64_t)v183);
        if (*v184)
        {
          v86 = a2[11];
          *(_OWORD *)&v218[160] = a2[10];
          *(_OWORD *)&v218[176] = v86;
          v87 = a2[12];
          v88 = a2[7];
          *(_OWORD *)&v218[96] = a2[6];
          *(_OWORD *)&v218[112] = v88;
          v89 = a2[8];
          *(_OWORD *)&v218[144] = a2[9];
          *(_OWORD *)&v218[128] = v89;
          v90 = a2[3];
          *(_OWORD *)&v218[32] = a2[2];
          *(_OWORD *)&v218[48] = v90;
          v91 = a2[4];
          *(_OWORD *)&v218[80] = a2[5];
          *(_OWORD *)&v218[64] = v91;
          v92 = *a2;
          *(_OWORD *)&v218[16] = a2[1];
          *(_OWORD *)v218 = v92;
          *(_OWORD *)&v218[192] = v87;
          *(_OWORD *)&v218[208] = v214;
          *(_OWORD *)&v218[224] = v211;
          *(_OWORD *)&v218[240] = v212;
          v93 = *v175;
          v94 = v175[1];
          *(_OWORD *)&v218[256] = v213;
          *(_OWORD *)&v218[272] = v93;
          v95 = v175[2];
          v96 = v175[3];
          *(_OWORD *)&v218[288] = v94;
          *(_OWORD *)&v218[304] = v95;
          *(_OWORD *)&v218[320] = v96;
          *(_QWORD *)&v218[336] = v199;
          v97 = v189;
          v219 = v189;
          v220 = v216;
          v221 = v195;
          v222 = v215;
          v223 = v200;
          v224 = v201;
          v225 = v202;
          v98 = v188;
          v226 = v188;
          v227 = *v182;
          v228 = *((_BYTE *)v182 + 2);
          v99 = v187;
          *v187 = v198;
          v230 = v197;
          v100 = v194;
          v231 = v194;
          v101 = v208;
          v99[2] = v210;
          v99[3] = v101;
          v102 = v206;
          v99[4] = v207;
          v99[5] = v102;
          v236 = v205;
          v237 = v264;
          v238 = v265;
          v239 = v204;
          v240 = v190;
          v242 = v263;
          v241 = v262;
          v243 = v209;
          v244 = v203;
          v245 = v77;
          v246 = v196;
          v247 = v83;
          v248 = v261;
          swift_retain();
          PinchGestures.processAfterPostprocessing(_:_:)((uint64_t)v85, (uint64_t)v218);
          result = swift_release();
          if (v193[7])
          {
            if (*v184)
            {
              *(_OWORD *)&v218[160] = v282;
              *(_OWORD *)&v218[176] = v283;
              *(_OWORD *)&v218[96] = v278;
              *(_OWORD *)&v218[112] = v279;
              *(_OWORD *)&v218[144] = v281;
              *(_OWORD *)&v218[128] = v280;
              *(_OWORD *)&v218[32] = v274;
              *(_OWORD *)&v218[48] = v275;
              *(_OWORD *)&v218[80] = v277;
              *(_OWORD *)&v218[64] = v276;
              *(_OWORD *)&v218[16] = v273;
              *(_OWORD *)v218 = v272;
              *(_OWORD *)&v218[192] = v284;
              *(_OWORD *)&v218[208] = v214;
              *(_OWORD *)&v218[224] = v211;
              *(_OWORD *)&v218[240] = v212;
              *(_OWORD *)&v218[256] = v213;
              *(_OWORD *)&v218[272] = v268;
              *(_OWORD *)&v218[288] = v269;
              *(_OWORD *)&v218[304] = v270;
              *(_OWORD *)&v218[320] = v271;
              *(_QWORD *)&v218[336] = v199;
              v219 = v97;
              v220 = v216;
              v103 = v195;
              v221 = v195;
              v222 = v215;
              v223 = v200;
              v224 = v201;
              v225 = v202;
              v226 = v98;
              v182 = &v227;
              v227 = v266;
              v228 = v267;
              v104 = v187;
              *v187 = v198;
              v105 = v197;
              v230 = v197;
              v231 = v100;
              v106 = v208;
              v104[2] = v210;
              v104[3] = v106;
              v107 = v206;
              v104[4] = v207;
              v104[5] = v107;
              v236 = v205;
              v175 = (__int128 *)&v237;
              v237 = v264;
              v238 = v265;
              v239 = v204;
              v240 = v190;
              v242 = v263;
              v241 = v262;
              v243 = v209;
              v244 = v203;
              v245 = v192;
              v108 = v196;
              v246 = v196;
              v247 = v191;
              *(_QWORD *)&v176 = &v248;
              v248 = v261;
              swift_retain();
              v109 = swift_retain();
              v110 = (char *)v183;
              FrameFeaturesAdapter.update(_:_:_:)(v109, v183, (uint64_t)v218, v250);
              swift_release();
              swift_release();
              result = (uint64_t)memcpy(v249, v250, 0x151uLL);
              v111 = v193;
              if (v193[3])
              {
                *(_OWORD *)&v218[160] = v282;
                *(_OWORD *)&v218[176] = v283;
                *(_OWORD *)&v218[96] = v278;
                *(_OWORD *)&v218[112] = v279;
                *(_OWORD *)&v218[144] = v281;
                *(_OWORD *)&v218[128] = v280;
                *(_OWORD *)&v218[32] = v274;
                *(_OWORD *)&v218[48] = v275;
                *(_OWORD *)&v218[80] = v277;
                *(_OWORD *)&v218[64] = v276;
                *(_OWORD *)&v218[16] = v273;
                *(_OWORD *)v218 = v272;
                *(_OWORD *)&v218[192] = v284;
                *(_OWORD *)&v218[208] = v214;
                *(_OWORD *)&v218[224] = v211;
                *(_OWORD *)&v218[240] = v212;
                *(_OWORD *)&v218[256] = v213;
                *(_OWORD *)&v218[272] = v268;
                *(_OWORD *)&v218[288] = v269;
                *(_OWORD *)&v218[304] = v270;
                *(_OWORD *)&v218[320] = v271;
                *(_QWORD *)&v218[336] = v199;
                v219 = v97;
                v112 = v216;
                v220 = v216;
                v221 = v103;
                v113 = v97;
                v114 = v215;
                v222 = v215;
                v223 = v200;
                v224 = v201;
                v225 = v202;
                v226 = v188;
                *v182 = v266;
                v228 = v267;
                *v104 = v198;
                v230 = v105;
                v231 = v194;
                v115 = v208;
                v104[2] = v210;
                v104[3] = v115;
                v116 = v206;
                v104[4] = v207;
                v104[5] = v116;
                v236 = v205;
                *(_WORD *)v175 = v264;
                v238 = v265;
                v239 = v204;
                v240 = v190;
                v242 = v263;
                v241 = v262;
                v243 = v209;
                v244 = v203;
                v245 = v192;
                v246 = v108;
                v247 = v191;
                v117 = v112 | (v103 << 32);
                *(_OWORD *)v176 = v261;
                swift_retain();
                v118 = v180;
                v182 = (__int16 *)v117;
                RepetitivePinchRecoveryPipeline.process(_:_:_:_:)(v218, v110, (uint64_t)v186, v113, v117, v114, v180);
                result = swift_release();
                if (v111[6])
                {
                  memcpy(v218, v249, 0x151uLL);
                  swift_retain();
                  v119 = v178;
                  DoublePinchRecovery.process(_:_:)(v118, (float32x4_t *)v218, v178);
                  result = swift_release();
                  v120 = (uint64_t)v179;
                  if (v111[4])
                  {
                    v121 = v111;
                    memcpy(v218, v249, 0x151uLL);
                    swift_retain();
                    v122 = v189;
                    v123 = v215;
                    PinchCancellationProcessing.process(_:_:_:)(v119, v189, (unint64_t)v182, v215, v218, v120);
                    swift_release();
                    outlined release of FrameFeatures((uint64_t)v249);
                    *(_OWORD *)&v218[160] = v282;
                    *(_OWORD *)&v218[176] = v283;
                    *(_OWORD *)&v218[96] = v278;
                    *(_OWORD *)&v218[112] = v279;
                    *(_OWORD *)&v218[144] = v281;
                    *(_OWORD *)&v218[128] = v280;
                    *(_OWORD *)&v218[32] = v274;
                    *(_OWORD *)&v218[48] = v275;
                    *(_OWORD *)&v218[80] = v277;
                    *(_OWORD *)&v218[64] = v276;
                    *(_OWORD *)&v218[16] = v273;
                    *(_OWORD *)v218 = v272;
                    *(_OWORD *)&v218[192] = v284;
                    *(_OWORD *)&v218[208] = v214;
                    *(_OWORD *)&v218[224] = v211;
                    *(_OWORD *)&v218[240] = v212;
                    *(_OWORD *)&v218[256] = v213;
                    *(_OWORD *)&v218[272] = v268;
                    *(_OWORD *)&v218[288] = v269;
                    *(_OWORD *)&v218[304] = v270;
                    *(_OWORD *)&v218[320] = v271;
                    *(_QWORD *)&v218[336] = v199;
                    v219 = v122;
                    v220 = v216;
                    v221 = v195;
                    v222 = v123;
                    v223 = v200;
                    v224 = v201;
                    v225 = v202;
                    v124 = v188;
                    v226 = v188;
                    v227 = v266;
                    v228 = v267;
                    v125 = v198;
                    v126 = v187;
                    *v187 = v198;
                    v230 = v197;
                    v231 = v194;
                    v127 = v208;
                    v126[2] = v210;
                    v126[3] = v127;
                    v128 = v206;
                    v126[4] = v207;
                    v126[5] = v128;
                    v236 = v205;
                    v237 = v264;
                    v238 = v265;
                    v239 = v204;
                    v240 = v190;
                    v242 = v263;
                    v241 = v262;
                    v243 = v209;
                    v244 = v203;
                    v245 = v192;
                    v246 = v196;
                    v247 = v191;
                    v248 = v261;
                    result = PinchPostprocessing.updateInternalTnTStates(_:_:)(v120, v218);
                    v129 = v121[7];
                    if (v129)
                    {
                      v130 = v177;
                      v131 = v120 + *(int *)(v177 + 108);
                      v132 = *(_QWORD *)v131;
                      LOBYTE(v131) = *(_BYTE *)(v131 + 8);
                      *(_QWORD *)(v129 + 344) = v132;
                      *(_BYTE *)(v129 + 352) = v131;
                      v133 = v184;
                      v134 = v185;
                      if (v121[5])
                      {
                        *(_OWORD *)&v218[160] = v282;
                        *(_OWORD *)&v218[176] = v283;
                        *(_OWORD *)&v218[96] = v278;
                        *(_OWORD *)&v218[112] = v279;
                        *(_OWORD *)&v218[144] = v281;
                        *(_OWORD *)&v218[128] = v280;
                        *(_OWORD *)&v218[32] = v274;
                        *(_OWORD *)&v218[48] = v275;
                        *(_OWORD *)&v218[80] = v277;
                        *(_OWORD *)&v218[64] = v276;
                        *(_OWORD *)&v218[16] = v273;
                        *(_OWORD *)v218 = v272;
                        *(_OWORD *)&v218[192] = v284;
                        *(_OWORD *)&v218[208] = v214;
                        *(_OWORD *)&v218[224] = v211;
                        *(_OWORD *)&v218[240] = v212;
                        *(_OWORD *)&v218[256] = v213;
                        *(_OWORD *)&v218[272] = v268;
                        *(_OWORD *)&v218[288] = v269;
                        *(_OWORD *)&v218[304] = v270;
                        *(_OWORD *)&v218[320] = v271;
                        *(_QWORD *)&v218[336] = v199;
                        v135 = v189;
                        v219 = v189;
                        v220 = v216;
                        v221 = v195;
                        v222 = v123;
                        v223 = v200;
                        v224 = v201;
                        v225 = v202;
                        v226 = v124;
                        v227 = v266;
                        v228 = v267;
                        v136 = v187;
                        *v187 = v125;
                        v230 = v197;
                        v231 = v194;
                        v136[2] = v210;
                        v136[3] = v208;
                        v136[4] = v207;
                        v136[5] = v206;
                        v236 = v205;
                        v237 = v264;
                        v238 = v265;
                        v239 = v204;
                        v137 = v190;
                        v240 = v190;
                        v242 = v263;
                        v241 = v262;
                        v243 = v209;
                        v244 = v203;
                        v245 = v192;
                        v246 = v196;
                        v247 = v191;
                        v248 = v261;
                        v138 = v133;
                        result = swift_beginAccess();
                        if (*v138)
                        {
                          swift_retain();
                          v139 = (uint64_t)v181;
                          SelectionRecoveryInBreakProcessing.process(_:_:_:_:_:)(v120, v135, (uint64_t)v182, v123, v218, (uint64_t)v186, (uint64_t)v181);
                          swift_endAccess();
                          swift_release();
                          Hands_trace_CBridge_0();
                          result = outlined assign with copy of HandDescriptor(v139, v134);
                          v140 = v134 + *(int *)(v130 + 112);
                          v141 = v135;
                          v142 = v193;
                          if ((*(_BYTE *)(v140 + 49) & 1) == 0
                            && (*(_BYTE *)(v140 + 32) & 1) == 0
                            && *(_QWORD *)(v140 + 8) & 0x40 | *(_QWORD *)(v140 + 16) & 0x10)
                          {
                            v143 = v134 + *(int *)(v177 + 132);
                            *(_QWORD *)v143 = 1;
                            *(_BYTE *)(v143 + 8) = 1;
                            if ((v142[12] & 1) != 0)
                              goto LABEL_17;
                            if (*((_BYTE *)v142 + 97) == 1)
                            {
                              v147 = v142[8];
                              if (!v147)
                              {
LABEL_69:
                                __break(1u);
                                goto LABEL_70;
                              }
                              v148 = *(_QWORD *)(v147 + 16);
                              if (!v148)
                              {
LABEL_70:
                                __break(1u);
                                goto LABEL_71;
                              }
                              outlined init with take of PinchFrameFeatures?(v148 + 16, (uint64_t)v217);
                              outlined init with take of PinchFrameFeatures?((uint64_t)v217, (uint64_t)v218);
                              result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v218);
                              if ((_DWORD)result == 1)
                              {
LABEL_71:
                                __break(1u);
                                return result;
                              }
                              if (BYTE9(v241) == 1)
                              {
LABEL_17:
                                *(_BYTE *)(v134 + 4) = 0;
                                *(_OWORD *)&v218[160] = v282;
                                *(_OWORD *)&v218[176] = v283;
                                *(_OWORD *)&v218[96] = v278;
                                *(_OWORD *)&v218[112] = v279;
                                *(_OWORD *)&v218[144] = v281;
                                *(_OWORD *)&v218[128] = v280;
                                *(_OWORD *)&v218[32] = v274;
                                *(_OWORD *)&v218[48] = v275;
                                *(_OWORD *)&v218[80] = v277;
                                *(_OWORD *)&v218[64] = v276;
                                *(_OWORD *)&v218[16] = v273;
                                *(_OWORD *)v218 = v272;
                                *(_OWORD *)&v218[192] = v284;
                                *(_OWORD *)&v218[208] = v214;
                                *(_OWORD *)&v218[224] = v211;
                                *(_OWORD *)&v218[240] = v212;
                                *(_OWORD *)&v218[256] = v213;
                                *(_OWORD *)&v218[272] = v268;
                                *(_OWORD *)&v218[288] = v269;
                                *(_OWORD *)&v218[304] = v270;
                                *(_OWORD *)&v218[320] = v271;
                                *(_QWORD *)&v218[336] = v199;
                                v219 = v141;
                                v220 = v216;
                                v221 = v195;
                                v222 = v215;
                                v223 = v200;
                                v224 = v201;
                                v225 = v202;
                                v226 = v188;
                                v227 = v266;
                                v228 = v267;
                                v144 = v187;
                                *v187 = v198;
                                v230 = v197;
                                v231 = v194;
                                v145 = v208;
                                v144[2] = v210;
                                v144[3] = v145;
                                v146 = v206;
                                v144[4] = v207;
                                v144[5] = v146;
                                v236 = v205;
                                v237 = v264;
                                v238 = v265;
                                v239 = v204;
                                v240 = v137;
                                v242 = v263;
                                v241 = v262;
                                v243 = v209;
                                v244 = v203;
                                v245 = v192;
                                v246 = v196;
                                v247 = v191;
                                v248 = v261;
                                result = PinchPostprocessing.updateInternalTnTStates(_:_:)(v134, v218);
                              }
                            }
                          }
                          v149 = v142[8];
                          if (v149)
                          {
                            if (*(_QWORD *)(v149 + 16))
                            {
                              if ((*(_BYTE *)(v140 + 49) & 1) != 0)
                              {
                                v150 = 0uLL;
                                v151 = 1;
                                v152 = 0uLL;
                              }
                              else
                              {
                                v150 = *(_OWORD *)v140;
                                v152 = *(_OWORD *)(v140 + 16);
                                v151 = *(_BYTE *)(v140 + 32);
                              }
                              v153 = v181[4];
                              v154 = v153 == 2;
                              v155 = *(unsigned __int8 *)(v134 + 4);
                              if (v155 != 2)
                                v154 = 0;
                              *(_OWORD *)v218 = v150;
                              *(_OWORD *)&v218[16] = v152;
                              v218[32] = v151;
                              if (v153 != 2 && v155 != 2)
                                v154 = ((v155 & 1) == 0) ^ v153;
                              result = PinchGenerator.checkIfMakeRejectedByOIS(_:_:)((uint64_t *)v218, (v154 & 1) == 0);
                              v156 = v142[8];
                              if (v156)
                              {
                                if (*(_QWORD *)(v156 + 16))
                                {
                                  v157 = v173;
                                  outlined init with copy of HandDescriptor(v134, v173);
                                  swift_retain();
                                  PinchGenerator.updateOisEnterExitEvents(_:_:)(v157, v141);
                                  PinchGenerator.updateOisPinchSupressionEvents(_:_:)(v157, v141);
                                  swift_release();
                                  result = outlined destroy of HandDescriptor(v157);
                                  v158 = v142[8];
                                  if (v158)
                                  {
                                    if (*(_QWORD *)(v158 + 16))
                                    {
                                      swift_retain();
                                      PinchGenerator.updateOisCoreAnalyticsData(_:)(v134);
                                      result = swift_release();
                                      v159 = v142[8];
                                      if (v159)
                                      {
                                        v160 = *(_QWORD *)(v159 + 16);
                                        if (v160)
                                        {
                                          if ((*(_BYTE *)(v140 + 49) & 1) != 0)
                                          {
                                            v161 = 0;
                                            v162 = 0;
                                            v163 = 0;
                                            v164 = 0;
                                            v165 = 1;
                                          }
                                          else
                                          {
                                            v161 = *(_QWORD *)v140;
                                            v162 = *(_QWORD *)(v140 + 8);
                                            v163 = *(_QWORD *)(v140 + 16);
                                            v164 = *(_QWORD *)(v140 + 24);
                                            v165 = *(_BYTE *)(v140 + 32);
                                          }
                                          v166 = (uint64_t)v172;
                                          outlined init with copy of HandDescriptor(v134, (uint64_t)v172);
                                          if (*(_BYTE *)(v160 + 809) == 1)
                                          {
                                            swift_retain();
                                            PinchGenerator.oisCoreAnalyticsHandleExitReason(_:)(v166, v167);
                                            PinchGenerator.oisCoreAnalyticsHandlePinchRejection(_:)(v166, v168);
                                            *(_QWORD *)v218 = v161;
                                            *(_QWORD *)&v218[8] = v162;
                                            *(_QWORD *)&v218[16] = v163;
                                            *(_QWORD *)&v218[24] = v164;
                                            v218[32] = v165;
                                            PinchGenerator.oisCoreAnalyticsHandlePinchCancellation(_:_:)((uint64_t)v218, v166);
                                            swift_release();
                                          }
                                          result = outlined destroy of HandDescriptor(v166);
                                          v169 = v142[8];
                                          if (v169)
                                          {
                                            v170 = (uint64_t)v179;
                                            v171 = v180;
                                            if (*(_QWORD *)(v169 + 16))
                                            {
                                              swift_retain();
                                              PinchGenerator.oisClearInternalStates()();
                                              swift_release();
                                              outlined release of PostProcessingMetaData(v251);
                                              swift_release();
                                              outlined destroy of HandDescriptor((uint64_t)v181);
                                              outlined destroy of HandDescriptor(v170);
                                              outlined destroy of HandDescriptor(v178);
                                              outlined destroy of HandDescriptor(v171);
                                              return outlined destroy of HandDescriptor((uint64_t)v183);
                                            }
                                            goto LABEL_68;
                                          }
LABEL_67:
                                          __break(1u);
LABEL_68:
                                          __break(1u);
                                          goto LABEL_69;
                                        }
LABEL_66:
                                        __break(1u);
                                        goto LABEL_67;
                                      }
LABEL_65:
                                      __break(1u);
                                      goto LABEL_66;
                                    }
LABEL_64:
                                    __break(1u);
                                    goto LABEL_65;
                                  }
LABEL_63:
                                  __break(1u);
                                  goto LABEL_64;
                                }
LABEL_62:
                                __break(1u);
                                goto LABEL_63;
                              }
LABEL_61:
                              __break(1u);
                              goto LABEL_62;
                            }
LABEL_60:
                            __break(1u);
                            goto LABEL_61;
                          }
LABEL_59:
                          __break(1u);
                          goto LABEL_60;
                        }
LABEL_58:
                        __break(1u);
                        goto LABEL_59;
                      }
LABEL_57:
                      __break(1u);
                      goto LABEL_58;
                    }
LABEL_56:
                    __break(1u);
                    goto LABEL_57;
                  }
LABEL_55:
                  __break(1u);
                  goto LABEL_56;
                }
LABEL_54:
                __break(1u);
                goto LABEL_55;
              }
LABEL_53:
              __break(1u);
              goto LABEL_54;
            }
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_50;
  }
  return result;
}

uint64_t PinchPostprocessing.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PinchPostprocessing.__deallocating_deinit()
{
  PinchPostprocessing.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchPostprocessing()
{
  return objc_opt_self();
}

void protocol witness for SingleHandProcessingPipeline.reset() in conformance PinchPostprocessing()
{
  PinchPostprocessing.reset()();
}

void protocol witness for SingleHandProcessingPipeline.reconfig(_:) in conformance PinchPostprocessing(HandsKitConfig *a1)
{
  PinchPostprocessing.reconfig(_:)(a1);
}

uint64_t protocol witness for SingleHandProcessingPipeline.process(_:_:) in conformance PinchPostprocessing(uint64_t a1, __int128 *a2)
{
  return PinchPostprocessing.process(_:_:)(a1, a2);
}

uint64_t outlined release of FrameFeatures(uint64_t a1)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 208);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of HandPose?(v3);
  return a1;
}

uint64_t outlined assign with copy of HandDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HandDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

_QWORD *outlined release of PostProcessingMetaData(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[16];
  v3 = a1[17];
  v4 = a1[18];
  v5 = a1[19];
  swift_bridgeObjectRelease();
  outlined consume of ObjectInteractionResultsByHand?(v2, v3, v4, v5);
  return a1;
}

uint64_t outlined consume of ObjectInteractionResultsByHand?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with take of PinchFrameFeatures?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchFrameFeatures?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s5Hands18PinchFrameFeaturesVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 144);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t specialized static PinchPostprocessing.getPinchModelParams(_:)(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t inited;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  switch(objc_msgSend(a1, sel_PosePipelineType))
  {
    case 0u:
      v3 = a1;
      v4 = specialized UberModelParams.__allocating_init(config:isPoseOnly:)(v3, 0);

      v5 = *(_QWORD *)(v4 + 128);
      swift_retain();
      goto LABEL_9;
    case 2u:
      v6 = objc_msgSend(a1, sel_MonoPinchModel);
      goto LABEL_5;
    case 3u:
      type metadata accessor for HybridModelParams();
      inited = swift_initStackObject();
      v16 = a1;
      *(_QWORD *)(inited + 56) = specialized UberModelParams.__allocating_init(config:isPoseOnly:)(v16, 0);
      v17 = v16;
      v18 = specialized UberModelParams.__allocating_init(config:isPoseOnly:)(v17, 1);
      swift_retain();

      *(_QWORD *)(inited + 64) = v18;
      swift_release();
      v19 = *(_QWORD *)(inited + 56);
      if (!*(_QWORD *)(v19 + 120))
      {
        __break(1u);
        JUMPOUT(0x23D707D58);
      }
      swift_bridgeObjectRetain_n();

      v5 = *(_QWORD *)(v19 + 128);
      swift_retain();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_setDeallocating();
LABEL_9:
      swift_release();
      return v5;
    default:
      v6 = objc_msgSend(a1, sel_PinchModel);
LABEL_5:
      v7 = v6;
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v10 = v9;

      v11 = objc_msgSend(a1, sel_AllowInternalModel);
      type metadata accessor for PinchModelParams();
      v12 = swift_allocObject();
      v13 = v11;
      v5 = v12;
      v14 = PinchModelParams.init(modelNameOrPath:allowInternalModel:configurationName:)(v8, v10, v13, 0);
      if (!v1)
        return v14;
      return v5;
  }
}

uint64_t specialized static PinchPostprocessing.getPinchModelName(_:)(void *a1)
{
  unsigned int v2;
  char **v3;
  id v4;
  uint64_t v5;

  v2 = objc_msgSend(a1, sel_PosePipelineType);
  if (v2 > 3)
    v3 = &selRef_PinchModel;
  else
    v3 = off_250E38608[v2];
  v4 = objc_msgSend(a1, *v3);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

__n128 __swift_memcpy53_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 45) = *(_QWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ObjectInteractionStateFeatures(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 53))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ObjectInteractionStateFeatures(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 53) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 53) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectInteractionStateFeatures()
{
  return &type metadata for ObjectInteractionStateFeatures;
}

double DerivedFeatures.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_WORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v1 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a1 + 169) = 0u;
  *(_QWORD *)(a1 + 192) = v1;
  *(_QWORD *)(a1 + 200) = v1;
  *(_QWORD *)(a1 + 208) = v1;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 252) = _D0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 260) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  *(_QWORD *)&result = 0x200000002;
  *(_DWORD *)(a1 + 280) = 2;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 1;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 1;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 1;
  *(_DWORD *)(a1 + 329) = 0;
  return result;
}

uint64_t destroy for DerivedFeatures(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DerivedFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v6;
    v7 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v7;
    v8 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v8;
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v9;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
    v11 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v11;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v12 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v12;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v13 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v13;
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 325) = *(_QWORD *)(a2 + 325);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DerivedFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  _BYTE *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = (__int128 *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 48);
  v6 = (_BYTE *)(a2 + 268);
  v7 = (_OWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 48) = v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
      *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
    }
    else
    {
      outlined destroy of HandPose(a1 + 48);
      v12 = v5[3];
      v14 = *v5;
      v13 = v5[1];
      *(_OWORD *)(a1 + 80) = v5[2];
      *(_OWORD *)(a1 + 96) = v12;
      *v7 = v14;
      *(_OWORD *)(a1 + 64) = v13;
      v16 = v5[5];
      v15 = v5[6];
      v17 = v5[4];
      *(_QWORD *)(a1 + 160) = *((_QWORD *)v5 + 14);
      *(_OWORD *)(a1 + 128) = v16;
      *(_OWORD *)(a1 + 144) = v15;
      *(_OWORD *)(a1 + 112) = v17;
    }
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    v9 = *(_OWORD *)(a2 + 96);
    v10 = *(_OWORD *)(a2 + 112);
    v11 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v11;
    *(_OWORD *)(a1 + 96) = v9;
    *(_OWORD *)(a1 + 112) = v10;
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *v5;
    v19 = *(_OWORD *)(a2 + 64);
    v20 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v20;
    *v7 = v18;
    *(_OWORD *)(a1 + 64) = v19;
    v21 = *(_OWORD *)(a2 + 112);
    v22 = *(_OWORD *)(a2 + 128);
    v23 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v22;
    *(_OWORD *)(a1 + 144) = v23;
    *(_OWORD *)(a1 + 112) = v21;
  }
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *v6;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_BYTE *)(a1 + 281) = v6[13];
  *(_BYTE *)(a1 + 282) = v6[14];
  *(_BYTE *)(a1 + 283) = v6[15];
  v24 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v24;
  v25 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v25;
  v26 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v26;
  *(_BYTE *)(a1 + 329) = v6[61];
  *(_BYTE *)(a1 + 330) = v6[62];
  *(_BYTE *)(a1 + 331) = v6[63];
  *(_BYTE *)(a1 + 332) = v6[64];
  return a1;
}

uint64_t outlined destroy of HandPose(uint64_t a1)
{
  destroy for GenericAccidental.InternalStates();
  return a1;
}

void *__swift_memcpy333_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x14DuLL);
}

uint64_t assignWithTake for DerivedFeatures(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = (_BYTE *)(a2 + 268);
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = a1 + 48;
  v7 = a2 + 48;
  v6 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_5;
  if (!v6)
  {
    outlined destroy of HandPose(v5);
LABEL_5:
    v11 = *(_OWORD *)(v7 + 80);
    *(_OWORD *)(v5 + 64) = *(_OWORD *)(v7 + 64);
    *(_OWORD *)(v5 + 80) = v11;
    *(_OWORD *)(v5 + 96) = *(_OWORD *)(v7 + 96);
    *(_QWORD *)(v5 + 112) = *(_QWORD *)(v7 + 112);
    v12 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)v5 = *(_OWORD *)v7;
    *(_OWORD *)(v5 + 16) = v12;
    v13 = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(v7 + 32);
    *(_OWORD *)(v5 + 48) = v13;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v10;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
LABEL_6:
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *v4;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_BYTE *)(a1 + 281) = v4[13];
  *(_BYTE *)(a1 + 282) = v4[14];
  *(_BYTE *)(a1 + 283) = v4[15];
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_BYTE *)(a1 + 329) = v4[61];
  *(_BYTE *)(a1 + 330) = v4[62];
  *(_BYTE *)(a1 + 331) = v4[63];
  *(_BYTE *)(a1 + 332) = v4[64];
  return a1;
}

uint64_t getEnumTagSinglePayload for DerivedFeatures(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 333))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 192);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DerivedFeatures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 332) = 0;
    *(_DWORD *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 333) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 192) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 333) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DerivedFeatures()
{
  return &type metadata for DerivedFeatures;
}

__n128 TrackingPrediction.init(protoBuf:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  __n128 v29;
  __n128 result;
  uint64_t v31;
  __n128 *v32;
  __n128 v33;
  __n128 v34;
  __int128 v35;
  unint64_t v36;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Coordinate3DPB(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x24BDAC7A8](v8, v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v14);
  v16 = (char *)&v31 - v15;
  v17 = type metadata accessor for TrackingPredictionPB(0);
  outlined init with copy of Coordinate3DPB?(a1 + *(int *)(v17 + 24), (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    *(_QWORD *)v16 = 0;
    *((_DWORD *)v16 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v7);
  }
  else
  {
    outlined init with take of Coordinate3DPB((uint64_t)v7, (uint64_t)v16);
  }
  v18.n128_u64[0] = *(_QWORD *)v16;
  v34 = v18;
  v18.n128_u32[0] = *((_DWORD *)v16 + 2);
  v33 = v18;
  outlined destroy of Matrix3x3PB((uint64_t)v16, type metadata accessor for Coordinate3DPB);
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v20)
  {
    v32 = a2;
    v36 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    v21 = v19 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v22 = *(_QWORD *)(v9 + 72);
    v23 = v36;
    do
    {
      outlined init with copy of Coordinate3DPB(v21, (uint64_t)v13);
      *(_QWORD *)&v24 = *(_QWORD *)v13;
      DWORD2(v24) = *((_DWORD *)v13 + 2);
      v35 = v24;
      outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v36;
      }
      v26 = *(_QWORD *)(v23 + 16);
      v25 = *(_QWORD *)(v23 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v23 = v36;
      }
      v27 = v35;
      HIDWORD(v27) = 0;
      *(_QWORD *)(v23 + 16) = v26 + 1;
      v28 = v23 + 32 * v26;
      *(_OWORD *)(v28 + 32) = v27;
      *(_OWORD *)(v28 + 48) = v27;
      v21 += v22;
      --v20;
    }
    while (v20);
    a2 = v32;
  }
  else
  {
    swift_bridgeObjectRetain();
    v23 = MEMORY[0x24BEE4AF8];
  }
  v29.n128_u64[0] = v34.n128_u64[0];
  v29.n128_u64[1] = v33.n128_u32[0];
  v34 = v29;
  outlined destroy of Matrix3x3PB(a1, type metadata accessor for TrackingPredictionPB);
  swift_bridgeObjectRelease();
  result = v34;
  *a2 = v34;
  a2[1] = result;
  a2[2].n128_u64[0] = v23;
  return result;
}

uint64_t TrackingPrediction.toProtoBuf()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  uint64_t v29;

  v3 = type metadata accessor for Coordinate3DPB(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v26 - v10;
  v28 = *(_OWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 32);
  v13 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  v14 = type metadata accessor for TrackingPredictionPB(0);
  UnknownStorage.init()();
  v15 = (uint64_t)a1 + *(int *)(v14 + 24);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v16(v15, 1, 1, v3);
  v17 = (char *)a1 + *(int *)(v14 + 28);
  v18 = type metadata accessor for FeatureVectorPerFramePB(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  UnknownStorage.init()();
  v19 = DWORD2(v28);
  *(_QWORD *)v11 = v28;
  *((_DWORD *)v11 + 2) = v19;
  outlined destroy of Coordinate3DPB?(v15);
  outlined init with take of Coordinate3DPB((uint64_t)v11, v15);
  v16(v15, 0, 1, v3);
  v20 = *(_QWORD *)(v12 + 16);
  if (v20)
  {
    v27 = a1;
    v29 = v13;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    v21 = 48;
    v13 = v29;
    do
    {
      v28 = *(_OWORD *)(v12 + v21);
      UnknownStorage.init()();
      v22 = v28;
      *((_DWORD *)v7 + 2) = DWORD2(v28);
      *(_QWORD *)v7 = v22;
      v29 = v13;
      v24 = *(_QWORD *)(v13 + 16);
      v23 = *(_QWORD *)(v13 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v13 = v29;
      }
      *(_QWORD *)(v13 + 16) = v24 + 1;
      outlined init with take of Coordinate3DPB((uint64_t)v7, v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v24);
      v21 += 32;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    a1 = v27;
  }
  result = swift_bridgeObjectRelease();
  *a1 = v13;
  return result;
}

uint64_t outlined destroy of Coordinate3DPB?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of Coordinate3DPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Coordinate3DPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t TrackingPrediction.almostEqual(to:withThreshold:)(uint64_t a1, double a2)
{
  __int128 *v2;
  __int128 v4;
  __int128 v5;
  float32x4_t *v6;
  __int128 v7;
  float32x4_t *v8;
  uint64_t v9;
  float v10;
  float32x4_t *v11;
  float32x4_t *v12;
  uint64_t result;
  float32x4_t v14;
  float v15;
  float32x4_t v16;
  float v17;
  BOOL v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v4 = *(_OWORD *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  v6 = *(float32x4_t **)(a1 + 32);
  v7 = v2[1];
  v8 = (float32x4_t *)*((_QWORD *)v2 + 4);
  v26 = *v2;
  v27 = v7;
  v22 = v7;
  v23 = v5;
  v24 = v4;
  v25 = v5;
  if (!Coordinate3D.almostEqual(to:withThreshold:)((float32x4_t *)&v24, a2))
  {
    *(_QWORD *)&v26 = 0;
    *((_QWORD *)&v26 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v26 = 0xD000000000000027;
    *((_QWORD *)&v26 + 1) = 0x800000023D9C6370;
    v24 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>();
    v19._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 32;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v24 = v23;
    v21._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v27 + 1) = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v24 = xmmword_23D9A8970;
    v25 = 0uLL;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v24, 0xD000000000000072, 0x800000023D9C62F0, 46, (uint64_t)&v26, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
    return 0;
  }
  v9 = v8[1].i64[0];
  if (v9 != v6[1].i64[0])
    return 0;
  if (v9)
  {
    v10 = a2;
    v11 = v6 + 3;
    v12 = v8 + 3;
    result = 1;
    while (1)
    {
      v14 = vsubq_f32(v12[-1], v11[-1]);
      if (fabsf(v14.f32[0]) > v10 || fabsf(v14.f32[1]) > v10)
        break;
      v15 = fabsf(v14.f32[2]);
      v16 = vsubq_f32(*v12, *v11);
      v17 = fabsf(v16.f32[0]);
      v18 = v15 <= v10 && v17 <= v10;
      if (!v18 || fabsf(v16.f32[1]) > v10 || fabsf(v16.f32[2]) > v10)
        break;
      v11 += 2;
      v12 += 2;
      if (!--v9)
        return result;
    }
    return 0;
  }
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TrackingPrediction(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v2 = a1[1];
  v3 = *((_QWORD *)a1 + 4);
  v4 = *a2;
  v5 = a2[1];
  v6 = *((_QWORD *)a2 + 4);
  v10 = *a1;
  v11 = v2;
  v12 = v3;
  v8[0] = v4;
  v8[1] = v5;
  v9 = v6;
  return TrackingPrediction.almostEqual(to:withThreshold:)((uint64_t)v8, 0.00001) & 1;
}

unint64_t lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>;
  if (!lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SIMD3<Float>);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE4120], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>);
  }
  return result;
}

uint64_t outlined init with copy of Coordinate3DPB?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Coordinate3DPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Coordinate3DPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for TrackingPrediction()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrackingPrediction(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrackingPrediction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TrackingPrediction(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingPrediction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackingPrediction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackingPrediction()
{
  return &type metadata for TrackingPrediction;
}

unint64_t lazy protocol witness table accessor for type TrackingPredictionPB and conformance TrackingPredictionPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TrackingPredictionPB and conformance TrackingPredictionPB;
  if (!lazy protocol witness table cache variable for type TrackingPredictionPB and conformance TrackingPredictionPB)
  {
    v1 = type metadata accessor for TrackingPredictionPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TrackingPredictionPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrackingPredictionPB and conformance TrackingPredictionPB);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PinchStatusPB and conformance PinchStatusPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PinchStatusPB and conformance PinchStatusPB;
  if (!lazy protocol witness table cache variable for type PinchStatusPB and conformance PinchStatusPB)
  {
    v1 = type metadata accessor for PinchStatusPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchStatusPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchStatusPB and conformance PinchStatusPB);
  }
  return result;
}

uint64_t PinchStatus.merge(stateMask:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[16];
  _BYTE v9[16];
  _BYTE v10[16];
  _BYTE v11[16];
  uint64_t v12;
  char v13;
  uint64_t v14[2];
  unint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19[2];
  unint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24[2];
  unint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29[2];
  unint64_t v30;
  char v31;

  outlined init with take of ImageData?(a1, (uint64_t)v11, &demangling cache variable for type metadata for PinchMakeSourcePB?);
  outlined init with take of ImageData?((uint64_t)v11, (uint64_t)&v12, &demangling cache variable for type metadata for PinchMakeSourcePB?);
  if ((v13 & 1) == 0)
  {
    outlined init with take of PinchMakeSourcePB(&v12, (uint64_t)v14);
    outlined init with take of PinchMakeSourcePB(v14, (uint64_t)&v15);
    v3 = 1 << v15;
    if (!(v16 & 1 | (v15 < 0x40)))
      v3 = 0;
    *v1 |= v3;
  }
  outlined init with take of ImageData?(a1 + 16, (uint64_t)v10, &demangling cache variable for type metadata for PinchMakeRejectorPB?);
  outlined init with take of ImageData?((uint64_t)v10, (uint64_t)&v17, &demangling cache variable for type metadata for PinchMakeRejectorPB?);
  if ((v18 & 1) == 0)
  {
    outlined init with take of PinchMakeRejectorPB(&v17, (uint64_t)v19);
    outlined init with take of PinchMakeRejectorPB(v19, (uint64_t)&v20);
    v4 = 1 << v20;
    if (!(v21 & 1 | (v20 < 0x40)))
      v4 = 0;
    v1[2] |= v4;
  }
  outlined init with take of ImageData?(a1 + 32, (uint64_t)v9, &demangling cache variable for type metadata for PinchBreakSourcePB?);
  outlined init with take of ImageData?((uint64_t)v9, (uint64_t)&v22, &demangling cache variable for type metadata for PinchBreakSourcePB?);
  if ((v23 & 1) == 0)
  {
    outlined init with take of PinchBreakSourcePB(&v22, (uint64_t)v24);
    outlined init with take of PinchBreakSourcePB(v24, (uint64_t)&v25);
    v5 = 1 << v25;
    if (!(v26 & 1 | (v25 < 0x40)))
      v5 = 0;
    v1[1] |= v5;
  }
  outlined init with take of ImageData?(a1 + 48, (uint64_t)v8, &demangling cache variable for type metadata for PinchBreakRejectorPB?);
  result = outlined init with take of ImageData?((uint64_t)v8, (uint64_t)&v27, &demangling cache variable for type metadata for PinchBreakRejectorPB?);
  if ((v28 & 1) == 0)
  {
    outlined init with take of PinchBreakRejectorPB(&v27, (uint64_t)v29);
    result = outlined init with take of PinchBreakRejectorPB(v29, (uint64_t)&v30);
    v7 = 1 << v30;
    if (!(v31 & 1 | (v30 < 0x40)))
      v7 = 0;
    v1[3] |= v7;
  }
  return result;
}

__n128 protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance PinchStatus@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v3;
  unint64_t v4;
  __n128 result;
  __n128 v6;

  v6 = *v1;
  v4 = v1[1].n128_u64[0];
  v3 = v1[1].n128_u64[1];
  type metadata accessor for PinchStatusPB(0);
  UnknownStorage.init()();
  result = v6;
  *a1 = v6;
  a1[1].n128_u64[0] = v4;
  a1[1].n128_u64[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PinchStatus(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PinchStatus(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PinchStatus()
{
  return &type metadata for PinchStatus;
}

uint64_t outlined init with take of PinchBreakRejectorPB(uint64_t *a1, uint64_t a2)
{
  __swift_memcpy9_8(a2, a1);
  return a2;
}

uint64_t outlined init with take of PinchBreakSourcePB(uint64_t *a1, uint64_t a2)
{
  __swift_memcpy9_8(a2, a1);
  return a2;
}

uint64_t outlined init with take of PinchMakeRejectorPB(uint64_t *a1, uint64_t a2)
{
  __swift_memcpy9_8(a2, a1);
  return a2;
}

uint64_t outlined init with take of PinchMakeSourcePB(uint64_t *a1, uint64_t a2)
{
  __swift_memcpy9_8(a2, a1);
  return a2;
}

uint64_t CameraSource.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void CameraModel.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t CameraModel.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t CameraModel.rawValue.getter()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

void protocol witness for Enum.init() in conformance CameraModel(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CameraModel@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CameraModel()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance CameraModel@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 2uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CameraModel(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8))
    v2 = *v1 != 0;
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CameraModel()
{
  lazy protocol witness table accessor for type CameraModel and conformance CameraModel();
  return Enum.hash(into:)();
}

void one-time initialization function for allCases()
{
  static CameraModel.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CameraSource.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static LastardesCameraSource.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PinchOcclusionStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PinchRecoveryStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static ObjectInteractionCategory.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static ObjectInteractionStateStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static EnrollmentResultsStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static HandRejectionReason.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static HandFilteredOutReason.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CanonicalizationType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static MiddleDoubleTapSuppressorId.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PotentialMissedScrollStates.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PotentialMissedPinchStates.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PotentialMissedScrollBreakStates.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PotentialMissedPinchBreakStates.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static ScrollDetectorForRecoveryStates.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static TapDetectorForRecoveryStates.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static RecoverScrollStates.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static RecoverPinchStates.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PinchMakeSourcePB.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PinchBreakSourcePB.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PinchMakeRejectorPB.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PinchBreakRejectorPB.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PinchGestureStatusPB.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PoseFAResultRowValidity.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static HandsKitPipelineEvent.EventType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static HandsKitPipelineEvent.PipelineType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static DetectionType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static OisEntryReason.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PinchAcceptorID.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static OisSubstate.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PoseModelType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static EngageStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static HandPresence.Category.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static UnsureLabel.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PartialHandCategories.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static TrackingCycles.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static THSDistanceHysteresis.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static HandCloseToMouthPB.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static Hand.Action.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static TrackingState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static HandEventCommon.EventStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static HandPinchEvent.PinchSource.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CameraType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t static CameraModel.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static CameraModel.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static CameraModel.allCases);
}

uint64_t (*static CameraModel.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraModel.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CameraModel@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static CameraModel.allCases, a1);
}

unint64_t CameraSource.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 0xE;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CameraSource()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CameraSource@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return CameraSource.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CameraSource()
{
  lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CameraSource(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8));
}

uint64_t static CameraSource.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static CameraSource.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static CameraSource.allCases);
}

uint64_t (*static CameraSource.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CameraSource@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static CameraSource.allCases, a1);
}

unint64_t LastardesCameraSource.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 0x16;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LastardesCameraSource@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return LastardesCameraSource.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LastardesCameraSource()
{
  lazy protocol witness table accessor for type LastardesCameraSource and conformance LastardesCameraSource();
  return Enum.hash(into:)();
}

uint64_t static LastardesCameraSource.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static LastardesCameraSource.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static LastardesCameraSource.allCases);
}

uint64_t (*static LastardesCameraSource.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance LastardesCameraSource@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static LastardesCameraSource.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchOcclusionStatus()
{
  lazy protocol witness table accessor for type PinchOcclusionStatus and conformance PinchOcclusionStatus();
  return Enum.hash(into:)();
}

uint64_t static PinchOcclusionStatus.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static PinchOcclusionStatus.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static PinchOcclusionStatus.allCases);
}

uint64_t (*static PinchOcclusionStatus.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PinchOcclusionStatus@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static PinchOcclusionStatus.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchRecoveryStatus()
{
  lazy protocol witness table accessor for type PinchRecoveryStatus and conformance PinchRecoveryStatus();
  return Enum.hash(into:)();
}

uint64_t static PinchRecoveryStatus.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static PinchRecoveryStatus.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static PinchRecoveryStatus.allCases);
}

uint64_t (*static PinchRecoveryStatus.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PinchRecoveryStatus@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static PinchRecoveryStatus.allCases, a1);
}

unint64_t ObjectInteractionCategory.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance ObjectInteractionCategory@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance ObjectInteractionCategory@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 3uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ObjectInteractionCategory()
{
  lazy protocol witness table accessor for type ObjectInteractionCategory and conformance ObjectInteractionCategory();
  return Enum.hash(into:)();
}

uint64_t static ObjectInteractionCategory.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static ObjectInteractionCategory.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static ObjectInteractionCategory.allCases);
}

uint64_t (*static ObjectInteractionCategory.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance ObjectInteractionCategory@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static ObjectInteractionCategory.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ObjectInteractionStateStatus()
{
  lazy protocol witness table accessor for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CameraModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8))
    v2 = *a1 != 0;
  v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8))
    v3 = *a2;
  return v2 == v3;
}

uint64_t static ObjectInteractionStateStatus.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static ObjectInteractionStateStatus.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static ObjectInteractionStateStatus.allCases);
}

uint64_t (*static ObjectInteractionStateStatus.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance ObjectInteractionStateStatus@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static ObjectInteractionStateStatus.allCases, a1);
}

unint64_t EnrollmentResultsStatus.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 6;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance EnrollmentResultsStatus@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return EnrollmentResultsStatus.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EnrollmentResultsStatus()
{
  lazy protocol witness table accessor for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus();
  return Enum.hash(into:)();
}

uint64_t static EnrollmentResultsStatus.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static EnrollmentResultsStatus.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static EnrollmentResultsStatus.allCases);
}

uint64_t (*static EnrollmentResultsStatus.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance EnrollmentResultsStatus@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static EnrollmentResultsStatus.allCases, a1);
}

unint64_t HandRejectionReason.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 0xF;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance HandRejectionReason@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return HandRejectionReason.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandRejectionReason()
{
  lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason();
  return Enum.hash(into:)();
}

uint64_t static HandRejectionReason.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static HandRejectionReason.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static HandRejectionReason.allCases);
}

uint64_t (*static HandRejectionReason.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance HandRejectionReason@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static HandRejectionReason.allCases, a1);
}

unint64_t HandFilteredOutReason.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 5;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance HandFilteredOutReason@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return HandFilteredOutReason.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandFilteredOutReason()
{
  lazy protocol witness table accessor for type HandFilteredOutReason and conformance HandFilteredOutReason();
  return Enum.hash(into:)();
}

uint64_t static HandFilteredOutReason.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static HandFilteredOutReason.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static HandFilteredOutReason.allCases);
}

uint64_t (*static HandFilteredOutReason.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance HandFilteredOutReason@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static HandFilteredOutReason.allCases, a1);
}

unint64_t CanonicalizationType.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 4;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CanonicalizationType@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return CanonicalizationType.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CanonicalizationType()
{
  lazy protocol witness table accessor for type CanonicalizationType and conformance CanonicalizationType();
  return Enum.hash(into:)();
}

uint64_t static CanonicalizationType.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static CanonicalizationType.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static CanonicalizationType.allCases);
}

uint64_t (*static CanonicalizationType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CanonicalizationType@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static CanonicalizationType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MiddleDoubleTapSuppressorId()
{
  lazy protocol witness table accessor for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId();
  return Enum.hash(into:)();
}

uint64_t static MiddleDoubleTapSuppressorId.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static MiddleDoubleTapSuppressorId.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static MiddleDoubleTapSuppressorId.allCases);
}

uint64_t (*static MiddleDoubleTapSuppressorId.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance MiddleDoubleTapSuppressorId@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static MiddleDoubleTapSuppressorId.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PotentialMissedScrollStates()
{
  lazy protocol witness table accessor for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates();
  return Enum.hash(into:)();
}

uint64_t static PotentialMissedScrollStates.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static PotentialMissedScrollStates.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static PotentialMissedScrollStates.allCases);
}

uint64_t (*static PotentialMissedScrollStates.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PotentialMissedScrollStates@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static PotentialMissedScrollStates.allCases, a1);
}

unint64_t PotentialMissedPinchStates.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 0xC;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PotentialMissedPinchStates@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PotentialMissedPinchStates.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PotentialMissedPinchStates()
{
  lazy protocol witness table accessor for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates();
  return Enum.hash(into:)();
}

uint64_t static PotentialMissedPinchStates.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static PotentialMissedPinchStates.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static PotentialMissedPinchStates.allCases);
}

uint64_t (*static PotentialMissedPinchStates.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PotentialMissedPinchStates@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static PotentialMissedPinchStates.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PotentialMissedScrollBreakStates()
{
  lazy protocol witness table accessor for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates();
  return Enum.hash(into:)();
}

uint64_t static PotentialMissedScrollBreakStates.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static PotentialMissedScrollBreakStates.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static PotentialMissedScrollBreakStates.allCases);
}

uint64_t (*static PotentialMissedScrollBreakStates.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PotentialMissedScrollBreakStates@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static PotentialMissedScrollBreakStates.allCases, a1);
}

unint64_t PotentialMissedPinchBreakStates.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 7;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PotentialMissedPinchBreakStates@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PotentialMissedPinchBreakStates.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PotentialMissedPinchBreakStates()
{
  lazy protocol witness table accessor for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates();
  return Enum.hash(into:)();
}

uint64_t static PotentialMissedPinchBreakStates.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static PotentialMissedPinchBreakStates.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static PotentialMissedPinchBreakStates.allCases);
}

uint64_t (*static PotentialMissedPinchBreakStates.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PotentialMissedPinchBreakStates@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static PotentialMissedPinchBreakStates.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ScrollDetectorForRecoveryStates()
{
  lazy protocol witness table accessor for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates();
  return Enum.hash(into:)();
}

uint64_t static ScrollDetectorForRecoveryStates.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static ScrollDetectorForRecoveryStates.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static ScrollDetectorForRecoveryStates.allCases);
}

uint64_t (*static ScrollDetectorForRecoveryStates.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance ScrollDetectorForRecoveryStates@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static ScrollDetectorForRecoveryStates.allCases, a1);
}

unint64_t TapDetectorForRecoveryStates.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 8;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TapDetectorForRecoveryStates@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return TapDetectorForRecoveryStates.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TapDetectorForRecoveryStates()
{
  lazy protocol witness table accessor for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates();
  return Enum.hash(into:)();
}

uint64_t static TapDetectorForRecoveryStates.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static TapDetectorForRecoveryStates.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static TapDetectorForRecoveryStates.allCases);
}

uint64_t (*static TapDetectorForRecoveryStates.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance TapDetectorForRecoveryStates@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static TapDetectorForRecoveryStates.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RecoverScrollStates()
{
  lazy protocol witness table accessor for type RecoverScrollStates and conformance RecoverScrollStates();
  return Enum.hash(into:)();
}

uint64_t static RecoverScrollStates.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static RecoverScrollStates.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static RecoverScrollStates.allCases);
}

uint64_t (*static RecoverScrollStates.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance RecoverScrollStates@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static RecoverScrollStates.allCases, a1);
}

unint64_t RecoverPinchStates.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 0x10;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance RecoverPinchStates@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return RecoverPinchStates.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RecoverPinchStates@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CameraSource.rawValue.getter();
  *a1 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CameraModel()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RecoverPinchStates()
{
  lazy protocol witness table accessor for type RecoverPinchStates and conformance RecoverPinchStates();
  return Enum.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CameraModel()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t static RecoverPinchStates.allCases.getter()
{
  return static CameraModel.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static CameraModel.allCases.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static RecoverPinchStates.allCases.setter(uint64_t a1)
{
  return static CameraModel.allCases.setter(a1, &one-time initialization token for allCases, &static RecoverPinchStates.allCases);
}

uint64_t static CameraModel.allCases.setter(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static RecoverPinchStates.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return static CameraSource.allCases.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance RecoverPinchStates@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance CameraModel(&one-time initialization token for allCases, &static RecoverPinchStates.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CameraModel@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t static CameraModel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CameraModel._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CameraModel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CameraModel._protobuf_nameMap, a1);
}

uint64_t static CameraSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CameraSource._protobuf_nameMap, a1);
}

uint64_t static CameraModel._protobuf_nameMap.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CameraSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CameraSource._protobuf_nameMap, a1);
}

uint64_t static LastardesCameraSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static LastardesCameraSource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance LastardesCameraSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static LastardesCameraSource._protobuf_nameMap, a1);
}

uint64_t static PinchOcclusionStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchOcclusionStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchOcclusionStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchOcclusionStatus._protobuf_nameMap, a1);
}

uint64_t static PinchRecoveryStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchRecoveryStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchRecoveryStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchRecoveryStatus._protobuf_nameMap, a1);
}

uint64_t static ObjectInteractionCategory._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ObjectInteractionCategory._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ObjectInteractionCategory@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ObjectInteractionCategory._protobuf_nameMap, a1);
}

uint64_t static ObjectInteractionStateStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ObjectInteractionStateStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ObjectInteractionStateStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ObjectInteractionStateStatus._protobuf_nameMap, a1);
}

uint64_t static EnrollmentResultsStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static EnrollmentResultsStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance EnrollmentResultsStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static EnrollmentResultsStatus._protobuf_nameMap, a1);
}

uint64_t static HandRejectionReason._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandRejectionReason._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandRejectionReason@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandRejectionReason._protobuf_nameMap, a1);
}

uint64_t static HandFilteredOutReason._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandFilteredOutReason._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandFilteredOutReason@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandFilteredOutReason._protobuf_nameMap, a1);
}

uint64_t static CanonicalizationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CanonicalizationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CanonicalizationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CanonicalizationType._protobuf_nameMap, a1);
}

uint64_t static MiddleDoubleTapSuppressorId._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MiddleDoubleTapSuppressorId._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MiddleDoubleTapSuppressorId@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MiddleDoubleTapSuppressorId._protobuf_nameMap, a1);
}

uint64_t static PotentialMissedScrollStates._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PotentialMissedScrollStates._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PotentialMissedScrollStates@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PotentialMissedScrollStates._protobuf_nameMap, a1);
}

uint64_t static PotentialMissedPinchStates._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PotentialMissedPinchStates._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PotentialMissedPinchStates@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PotentialMissedPinchStates._protobuf_nameMap, a1);
}

uint64_t static PotentialMissedScrollBreakStates._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PotentialMissedScrollBreakStates._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PotentialMissedScrollBreakStates@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PotentialMissedScrollBreakStates._protobuf_nameMap, a1);
}

uint64_t static PotentialMissedPinchBreakStates._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PotentialMissedPinchBreakStates._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PotentialMissedPinchBreakStates@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PotentialMissedPinchBreakStates._protobuf_nameMap, a1);
}

uint64_t static ScrollDetectorForRecoveryStates._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ScrollDetectorForRecoveryStates._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ScrollDetectorForRecoveryStates@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ScrollDetectorForRecoveryStates._protobuf_nameMap, a1);
}

uint64_t static TapDetectorForRecoveryStates._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TapDetectorForRecoveryStates._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TapDetectorForRecoveryStates@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TapDetectorForRecoveryStates._protobuf_nameMap, a1);
}

uint64_t static RecoverScrollStates._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static RecoverScrollStates._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance RecoverScrollStates@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static RecoverScrollStates._protobuf_nameMap, a1);
}

uint64_t static RecoverPinchStates._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CameraModel._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static RecoverPinchStates._protobuf_nameMap, a1);
}

unint64_t lazy protocol witness table accessor for type CameraModel and conformance CameraModel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraModel and conformance CameraModel;
  if (!lazy protocol witness table cache variable for type CameraModel and conformance CameraModel)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraModel, &type metadata for CameraModel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraModel and conformance CameraModel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraModel and conformance CameraModel;
  if (!lazy protocol witness table cache variable for type CameraModel and conformance CameraModel)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraModel, &type metadata for CameraModel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraModel and conformance CameraModel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraModel and conformance CameraModel;
  if (!lazy protocol witness table cache variable for type CameraModel and conformance CameraModel)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraModel, &type metadata for CameraModel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraModel and conformance CameraModel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraModel and conformance CameraModel;
  if (!lazy protocol witness table cache variable for type CameraModel and conformance CameraModel)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraModel, &type metadata for CameraModel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraModel and conformance CameraModel);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CameraModel()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [CameraModel] and conformance [A], &demangling cache variable for type metadata for [CameraModel]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CameraSource()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [CameraSource] and conformance [A], &demangling cache variable for type metadata for [CameraSource]);
}

unint64_t lazy protocol witness table accessor for type LastardesCameraSource and conformance LastardesCameraSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LastardesCameraSource and conformance LastardesCameraSource;
  if (!lazy protocol witness table cache variable for type LastardesCameraSource and conformance LastardesCameraSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for LastardesCameraSource, &type metadata for LastardesCameraSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LastardesCameraSource and conformance LastardesCameraSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LastardesCameraSource and conformance LastardesCameraSource;
  if (!lazy protocol witness table cache variable for type LastardesCameraSource and conformance LastardesCameraSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for LastardesCameraSource, &type metadata for LastardesCameraSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LastardesCameraSource and conformance LastardesCameraSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LastardesCameraSource and conformance LastardesCameraSource;
  if (!lazy protocol witness table cache variable for type LastardesCameraSource and conformance LastardesCameraSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for LastardesCameraSource, &type metadata for LastardesCameraSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LastardesCameraSource and conformance LastardesCameraSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LastardesCameraSource and conformance LastardesCameraSource;
  if (!lazy protocol witness table cache variable for type LastardesCameraSource and conformance LastardesCameraSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for LastardesCameraSource, &type metadata for LastardesCameraSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LastardesCameraSource and conformance LastardesCameraSource);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in LastardesCameraSource()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [LastardesCameraSource] and conformance [A], &demangling cache variable for type metadata for [LastardesCameraSource]);
}

unint64_t lazy protocol witness table accessor for type PinchOcclusionStatus and conformance PinchOcclusionStatus()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchOcclusionStatus and conformance PinchOcclusionStatus;
  if (!lazy protocol witness table cache variable for type PinchOcclusionStatus and conformance PinchOcclusionStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchOcclusionStatus, &type metadata for PinchOcclusionStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchOcclusionStatus and conformance PinchOcclusionStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchOcclusionStatus and conformance PinchOcclusionStatus;
  if (!lazy protocol witness table cache variable for type PinchOcclusionStatus and conformance PinchOcclusionStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchOcclusionStatus, &type metadata for PinchOcclusionStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchOcclusionStatus and conformance PinchOcclusionStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchOcclusionStatus and conformance PinchOcclusionStatus;
  if (!lazy protocol witness table cache variable for type PinchOcclusionStatus and conformance PinchOcclusionStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchOcclusionStatus, &type metadata for PinchOcclusionStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchOcclusionStatus and conformance PinchOcclusionStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchOcclusionStatus and conformance PinchOcclusionStatus;
  if (!lazy protocol witness table cache variable for type PinchOcclusionStatus and conformance PinchOcclusionStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchOcclusionStatus, &type metadata for PinchOcclusionStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchOcclusionStatus and conformance PinchOcclusionStatus);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PinchOcclusionStatus()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PinchOcclusionStatus] and conformance [A], &demangling cache variable for type metadata for [PinchOcclusionStatus]);
}

unint64_t lazy protocol witness table accessor for type PinchRecoveryStatus and conformance PinchRecoveryStatus()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchRecoveryStatus and conformance PinchRecoveryStatus;
  if (!lazy protocol witness table cache variable for type PinchRecoveryStatus and conformance PinchRecoveryStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchRecoveryStatus, &type metadata for PinchRecoveryStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchRecoveryStatus and conformance PinchRecoveryStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchRecoveryStatus and conformance PinchRecoveryStatus;
  if (!lazy protocol witness table cache variable for type PinchRecoveryStatus and conformance PinchRecoveryStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchRecoveryStatus, &type metadata for PinchRecoveryStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchRecoveryStatus and conformance PinchRecoveryStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchRecoveryStatus and conformance PinchRecoveryStatus;
  if (!lazy protocol witness table cache variable for type PinchRecoveryStatus and conformance PinchRecoveryStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchRecoveryStatus, &type metadata for PinchRecoveryStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchRecoveryStatus and conformance PinchRecoveryStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchRecoveryStatus and conformance PinchRecoveryStatus;
  if (!lazy protocol witness table cache variable for type PinchRecoveryStatus and conformance PinchRecoveryStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchRecoveryStatus, &type metadata for PinchRecoveryStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchRecoveryStatus and conformance PinchRecoveryStatus);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PinchRecoveryStatus()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PinchRecoveryStatus] and conformance [A], &demangling cache variable for type metadata for [PinchRecoveryStatus]);
}

unint64_t lazy protocol witness table accessor for type ObjectInteractionCategory and conformance ObjectInteractionCategory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ObjectInteractionCategory and conformance ObjectInteractionCategory;
  if (!lazy protocol witness table cache variable for type ObjectInteractionCategory and conformance ObjectInteractionCategory)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ObjectInteractionCategory, &type metadata for ObjectInteractionCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionCategory and conformance ObjectInteractionCategory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ObjectInteractionCategory and conformance ObjectInteractionCategory;
  if (!lazy protocol witness table cache variable for type ObjectInteractionCategory and conformance ObjectInteractionCategory)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ObjectInteractionCategory, &type metadata for ObjectInteractionCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionCategory and conformance ObjectInteractionCategory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ObjectInteractionCategory and conformance ObjectInteractionCategory;
  if (!lazy protocol witness table cache variable for type ObjectInteractionCategory and conformance ObjectInteractionCategory)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ObjectInteractionCategory, &type metadata for ObjectInteractionCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionCategory and conformance ObjectInteractionCategory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ObjectInteractionCategory and conformance ObjectInteractionCategory;
  if (!lazy protocol witness table cache variable for type ObjectInteractionCategory and conformance ObjectInteractionCategory)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ObjectInteractionCategory, &type metadata for ObjectInteractionCategory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionCategory and conformance ObjectInteractionCategory);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ObjectInteractionCategory()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [ObjectInteractionCategory] and conformance [A], &demangling cache variable for type metadata for [ObjectInteractionCategory]);
}

unint64_t lazy protocol witness table accessor for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus;
  if (!lazy protocol witness table cache variable for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ObjectInteractionStateStatus, &type metadata for ObjectInteractionStateStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus;
  if (!lazy protocol witness table cache variable for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ObjectInteractionStateStatus, &type metadata for ObjectInteractionStateStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus;
  if (!lazy protocol witness table cache variable for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ObjectInteractionStateStatus, &type metadata for ObjectInteractionStateStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus;
  if (!lazy protocol witness table cache variable for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ObjectInteractionStateStatus, &type metadata for ObjectInteractionStateStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ObjectInteractionStateStatus()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [ObjectInteractionStateStatus] and conformance [A], &demangling cache variable for type metadata for [ObjectInteractionStateStatus]);
}

unint64_t lazy protocol witness table accessor for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus;
  if (!lazy protocol witness table cache variable for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for EnrollmentResultsStatus, &type metadata for EnrollmentResultsStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus;
  if (!lazy protocol witness table cache variable for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for EnrollmentResultsStatus, &type metadata for EnrollmentResultsStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus;
  if (!lazy protocol witness table cache variable for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for EnrollmentResultsStatus, &type metadata for EnrollmentResultsStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus;
  if (!lazy protocol witness table cache variable for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for EnrollmentResultsStatus, &type metadata for EnrollmentResultsStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnrollmentResultsStatus and conformance EnrollmentResultsStatus);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in EnrollmentResultsStatus()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [EnrollmentResultsStatus] and conformance [A], &demangling cache variable for type metadata for [EnrollmentResultsStatus]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HandRejectionReason()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [HandRejectionReason] and conformance [A], &demangling cache variable for type metadata for [HandRejectionReason]);
}

unint64_t lazy protocol witness table accessor for type HandFilteredOutReason and conformance HandFilteredOutReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandFilteredOutReason and conformance HandFilteredOutReason;
  if (!lazy protocol witness table cache variable for type HandFilteredOutReason and conformance HandFilteredOutReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandFilteredOutReason, &type metadata for HandFilteredOutReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandFilteredOutReason and conformance HandFilteredOutReason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandFilteredOutReason and conformance HandFilteredOutReason;
  if (!lazy protocol witness table cache variable for type HandFilteredOutReason and conformance HandFilteredOutReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandFilteredOutReason, &type metadata for HandFilteredOutReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandFilteredOutReason and conformance HandFilteredOutReason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandFilteredOutReason and conformance HandFilteredOutReason;
  if (!lazy protocol witness table cache variable for type HandFilteredOutReason and conformance HandFilteredOutReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandFilteredOutReason, &type metadata for HandFilteredOutReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandFilteredOutReason and conformance HandFilteredOutReason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandFilteredOutReason and conformance HandFilteredOutReason;
  if (!lazy protocol witness table cache variable for type HandFilteredOutReason and conformance HandFilteredOutReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandFilteredOutReason, &type metadata for HandFilteredOutReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandFilteredOutReason and conformance HandFilteredOutReason);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HandFilteredOutReason()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [HandFilteredOutReason] and conformance [A], &demangling cache variable for type metadata for [HandFilteredOutReason]);
}

unint64_t lazy protocol witness table accessor for type CanonicalizationType and conformance CanonicalizationType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanonicalizationType and conformance CanonicalizationType;
  if (!lazy protocol witness table cache variable for type CanonicalizationType and conformance CanonicalizationType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CanonicalizationType, &type metadata for CanonicalizationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanonicalizationType and conformance CanonicalizationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanonicalizationType and conformance CanonicalizationType;
  if (!lazy protocol witness table cache variable for type CanonicalizationType and conformance CanonicalizationType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CanonicalizationType, &type metadata for CanonicalizationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanonicalizationType and conformance CanonicalizationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanonicalizationType and conformance CanonicalizationType;
  if (!lazy protocol witness table cache variable for type CanonicalizationType and conformance CanonicalizationType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CanonicalizationType, &type metadata for CanonicalizationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanonicalizationType and conformance CanonicalizationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanonicalizationType and conformance CanonicalizationType;
  if (!lazy protocol witness table cache variable for type CanonicalizationType and conformance CanonicalizationType)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CanonicalizationType, &type metadata for CanonicalizationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanonicalizationType and conformance CanonicalizationType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CanonicalizationType()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [CanonicalizationType] and conformance [A], &demangling cache variable for type metadata for [CanonicalizationType]);
}

unint64_t lazy protocol witness table accessor for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId;
  if (!lazy protocol witness table cache variable for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for MiddleDoubleTapSuppressorId, &type metadata for MiddleDoubleTapSuppressorId);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId;
  if (!lazy protocol witness table cache variable for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for MiddleDoubleTapSuppressorId, &type metadata for MiddleDoubleTapSuppressorId);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId;
  if (!lazy protocol witness table cache variable for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for MiddleDoubleTapSuppressorId, &type metadata for MiddleDoubleTapSuppressorId);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId;
  if (!lazy protocol witness table cache variable for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for MiddleDoubleTapSuppressorId, &type metadata for MiddleDoubleTapSuppressorId);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiddleDoubleTapSuppressorId and conformance MiddleDoubleTapSuppressorId);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in MiddleDoubleTapSuppressorId()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [MiddleDoubleTapSuppressorId] and conformance [A], &demangling cache variable for type metadata for [MiddleDoubleTapSuppressorId]);
}

unint64_t lazy protocol witness table accessor for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedScrollStates, &type metadata for PotentialMissedScrollStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedScrollStates, &type metadata for PotentialMissedScrollStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedScrollStates, &type metadata for PotentialMissedScrollStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedScrollStates, &type metadata for PotentialMissedScrollStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedScrollStates and conformance PotentialMissedScrollStates);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PotentialMissedScrollStates()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PotentialMissedScrollStates] and conformance [A], &demangling cache variable for type metadata for [PotentialMissedScrollStates]);
}

unint64_t lazy protocol witness table accessor for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedPinchStates, &type metadata for PotentialMissedPinchStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedPinchStates, &type metadata for PotentialMissedPinchStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedPinchStates, &type metadata for PotentialMissedPinchStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedPinchStates, &type metadata for PotentialMissedPinchStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedPinchStates and conformance PotentialMissedPinchStates);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PotentialMissedPinchStates()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PotentialMissedPinchStates] and conformance [A], &demangling cache variable for type metadata for [PotentialMissedPinchStates]);
}

unint64_t lazy protocol witness table accessor for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedScrollBreakStates, &type metadata for PotentialMissedScrollBreakStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedScrollBreakStates, &type metadata for PotentialMissedScrollBreakStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedScrollBreakStates, &type metadata for PotentialMissedScrollBreakStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedScrollBreakStates, &type metadata for PotentialMissedScrollBreakStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedScrollBreakStates and conformance PotentialMissedScrollBreakStates);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PotentialMissedScrollBreakStates()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PotentialMissedScrollBreakStates] and conformance [A], &demangling cache variable for type metadata for [PotentialMissedScrollBreakStates]);
}

unint64_t lazy protocol witness table accessor for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedPinchBreakStates, &type metadata for PotentialMissedPinchBreakStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedPinchBreakStates, &type metadata for PotentialMissedPinchBreakStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedPinchBreakStates, &type metadata for PotentialMissedPinchBreakStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates;
  if (!lazy protocol witness table cache variable for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PotentialMissedPinchBreakStates, &type metadata for PotentialMissedPinchBreakStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PotentialMissedPinchBreakStates and conformance PotentialMissedPinchBreakStates);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PotentialMissedPinchBreakStates()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PotentialMissedPinchBreakStates] and conformance [A], &demangling cache variable for type metadata for [PotentialMissedPinchBreakStates]);
}

unint64_t lazy protocol witness table accessor for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates;
  if (!lazy protocol witness table cache variable for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ScrollDetectorForRecoveryStates, &type metadata for ScrollDetectorForRecoveryStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates;
  if (!lazy protocol witness table cache variable for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ScrollDetectorForRecoveryStates, &type metadata for ScrollDetectorForRecoveryStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates;
  if (!lazy protocol witness table cache variable for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ScrollDetectorForRecoveryStates, &type metadata for ScrollDetectorForRecoveryStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates;
  if (!lazy protocol witness table cache variable for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for ScrollDetectorForRecoveryStates, &type metadata for ScrollDetectorForRecoveryStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollDetectorForRecoveryStates and conformance ScrollDetectorForRecoveryStates);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ScrollDetectorForRecoveryStates()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [ScrollDetectorForRecoveryStates] and conformance [A], &demangling cache variable for type metadata for [ScrollDetectorForRecoveryStates]);
}

unint64_t lazy protocol witness table accessor for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates;
  if (!lazy protocol witness table cache variable for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TapDetectorForRecoveryStates, &type metadata for TapDetectorForRecoveryStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates;
  if (!lazy protocol witness table cache variable for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TapDetectorForRecoveryStates, &type metadata for TapDetectorForRecoveryStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates;
  if (!lazy protocol witness table cache variable for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TapDetectorForRecoveryStates, &type metadata for TapDetectorForRecoveryStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates;
  if (!lazy protocol witness table cache variable for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for TapDetectorForRecoveryStates, &type metadata for TapDetectorForRecoveryStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TapDetectorForRecoveryStates and conformance TapDetectorForRecoveryStates);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in TapDetectorForRecoveryStates()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [TapDetectorForRecoveryStates] and conformance [A], &demangling cache variable for type metadata for [TapDetectorForRecoveryStates]);
}

unint64_t lazy protocol witness table accessor for type RecoverScrollStates and conformance RecoverScrollStates()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RecoverScrollStates and conformance RecoverScrollStates;
  if (!lazy protocol witness table cache variable for type RecoverScrollStates and conformance RecoverScrollStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for RecoverScrollStates, &type metadata for RecoverScrollStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecoverScrollStates and conformance RecoverScrollStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RecoverScrollStates and conformance RecoverScrollStates;
  if (!lazy protocol witness table cache variable for type RecoverScrollStates and conformance RecoverScrollStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for RecoverScrollStates, &type metadata for RecoverScrollStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecoverScrollStates and conformance RecoverScrollStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RecoverScrollStates and conformance RecoverScrollStates;
  if (!lazy protocol witness table cache variable for type RecoverScrollStates and conformance RecoverScrollStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for RecoverScrollStates, &type metadata for RecoverScrollStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecoverScrollStates and conformance RecoverScrollStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RecoverScrollStates and conformance RecoverScrollStates;
  if (!lazy protocol witness table cache variable for type RecoverScrollStates and conformance RecoverScrollStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for RecoverScrollStates, &type metadata for RecoverScrollStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecoverScrollStates and conformance RecoverScrollStates);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in RecoverScrollStates()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [RecoverScrollStates] and conformance [A], &demangling cache variable for type metadata for [RecoverScrollStates]);
}

unint64_t lazy protocol witness table accessor for type RecoverPinchStates and conformance RecoverPinchStates()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RecoverPinchStates and conformance RecoverPinchStates;
  if (!lazy protocol witness table cache variable for type RecoverPinchStates and conformance RecoverPinchStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for RecoverPinchStates, &type metadata for RecoverPinchStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecoverPinchStates and conformance RecoverPinchStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RecoverPinchStates and conformance RecoverPinchStates;
  if (!lazy protocol witness table cache variable for type RecoverPinchStates and conformance RecoverPinchStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for RecoverPinchStates, &type metadata for RecoverPinchStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecoverPinchStates and conformance RecoverPinchStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RecoverPinchStates and conformance RecoverPinchStates;
  if (!lazy protocol witness table cache variable for type RecoverPinchStates and conformance RecoverPinchStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for RecoverPinchStates, &type metadata for RecoverPinchStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecoverPinchStates and conformance RecoverPinchStates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RecoverPinchStates and conformance RecoverPinchStates;
  if (!lazy protocol witness table cache variable for type RecoverPinchStates and conformance RecoverPinchStates)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for RecoverPinchStates, &type metadata for RecoverPinchStates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RecoverPinchStates and conformance RecoverPinchStates);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in RecoverPinchStates()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [RecoverPinchStates] and conformance [A], &demangling cache variable for type metadata for [RecoverPinchStates]);
}

uint64_t lazy protocol witness table accessor for type [CameraModel] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance RecoverPinchStates@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static RecoverPinchStates._protobuf_nameMap, a1);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CameraModel(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CameraModel(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for CameraModel(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for CameraModel(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraModel()
{
  return &type metadata for CameraModel;
}

ValueMetadata *type metadata accessor for CameraSource()
{
  return &type metadata for CameraSource;
}

ValueMetadata *type metadata accessor for LastardesCameraSource()
{
  return &type metadata for LastardesCameraSource;
}

ValueMetadata *type metadata accessor for PinchOcclusionStatus()
{
  return &type metadata for PinchOcclusionStatus;
}

ValueMetadata *type metadata accessor for PinchRecoveryStatus()
{
  return &type metadata for PinchRecoveryStatus;
}

ValueMetadata *type metadata accessor for ObjectInteractionCategory()
{
  return &type metadata for ObjectInteractionCategory;
}

ValueMetadata *type metadata accessor for ObjectInteractionStateStatus()
{
  return &type metadata for ObjectInteractionStateStatus;
}

ValueMetadata *type metadata accessor for EnrollmentResultsStatus()
{
  return &type metadata for EnrollmentResultsStatus;
}

ValueMetadata *type metadata accessor for HandRejectionReason()
{
  return &type metadata for HandRejectionReason;
}

ValueMetadata *type metadata accessor for HandFilteredOutReason()
{
  return &type metadata for HandFilteredOutReason;
}

ValueMetadata *type metadata accessor for CanonicalizationType()
{
  return &type metadata for CanonicalizationType;
}

ValueMetadata *type metadata accessor for MiddleDoubleTapSuppressorId()
{
  return &type metadata for MiddleDoubleTapSuppressorId;
}

ValueMetadata *type metadata accessor for PotentialMissedScrollStates()
{
  return &type metadata for PotentialMissedScrollStates;
}

ValueMetadata *type metadata accessor for PotentialMissedPinchStates()
{
  return &type metadata for PotentialMissedPinchStates;
}

ValueMetadata *type metadata accessor for PotentialMissedScrollBreakStates()
{
  return &type metadata for PotentialMissedScrollBreakStates;
}

ValueMetadata *type metadata accessor for PotentialMissedPinchBreakStates()
{
  return &type metadata for PotentialMissedPinchBreakStates;
}

ValueMetadata *type metadata accessor for ScrollDetectorForRecoveryStates()
{
  return &type metadata for ScrollDetectorForRecoveryStates;
}

ValueMetadata *type metadata accessor for TapDetectorForRecoveryStates()
{
  return &type metadata for TapDetectorForRecoveryStates;
}

ValueMetadata *type metadata accessor for RecoverScrollStates()
{
  return &type metadata for RecoverScrollStates;
}

ValueMetadata *type metadata accessor for RecoverPinchStates()
{
  return &type metadata for RecoverPinchStates;
}

uint64_t PrewittDataLogger.run(_:)(void *__src)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  char v10;
  char v11;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  int64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  _QWORD __dst[70];

  memcpy(__dst, __src, 0x228uLL);
  v2 = __dst[25];
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(__dst);
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith19V14prewittCurrents5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(v2);
  swift_bridgeObjectRelease();
  v4 = specialized Sequence<>.max()(v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  result = (uint64_t)outlined release of HandsKitData(__dst);
  if ((v6 & 1) != 0 || v4 <= 0)
  {
    LOBYTE(v13) = 0;
    v14 = (_BYTE *)(v1 + 16);
    if ((*(_BYTE *)(v1 + 16) & 1) == 0)
      goto LABEL_19;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(__dst);
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith22V17prewittPulseWidths5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(v2);
  swift_bridgeObjectRelease();
  v9 = specialized Sequence<>.max()(v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  result = (uint64_t)outlined release of HandsKitData(__dst);
  v13 = (v11 & 1) == 0 && v9 > 0;
  v14 = (_BYTE *)(v1 + 16);
  if (*(unsigned __int8 *)(v1 + 16) != v13)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    outlined retain of HandsKitData(__dst);
    v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith19V14prewittCurrents5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(v2);
    swift_bridgeObjectRelease();
    v16 = specialized Sequence<>.max()(v15);
    v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
      v19 = -1;
    else
      v19 = v16;
    v20 = swift_bridgeObjectRetain();
    v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith22V17prewittPulseWidths5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(v20);
    swift_bridgeObjectRelease();
    v22 = specialized Sequence<>.max()(v21);
    v24 = v23;
    swift_bridgeObjectRelease();
    outlined release of HandsKitData(__dst);
    if ((v24 & 1) != 0)
      v25 = -1;
    else
      v25 = v22;
    result = specialized PrewittDataLogger.logPrewittStatusChange(_:_:_:)(v19, v25, __dst[43], __dst[44]);
  }
LABEL_19:
  *v14 = v13;
  return result;
}

uint64_t PrewittDataLogger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PrewittDataLogger()
{
  return objc_opt_self();
}

_QWORD *outlined release of HandsKitData(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v7 = a1[62];
  v5 = a1[64];
  v6 = a1[63];
  v4 = a1[65];
  swift_bridgeObjectRelease();
  outlined consume of HandsKitDataInternal?(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of ObjectInteractionResultsByHand?(v7, v6, v5, v4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of HandsKitDataInternal?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized PrewittDataLogger.logPrewittStatusChange(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[4];

  v38 = a4;
  v36 = a3;
  v39 = a1;
  v40 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v37 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v35 - v9;
  v11 = type metadata accessor for CMTimeProtobuf(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v35 - v18;
  MEMORY[0x24BDAC7A8](v20, v21);
  v23 = (char *)&v35 - v22;
  v24 = type metadata accessor for PrewittPowerChangeEvent(0);
  MEMORY[0x24BDAC7A8](v24, v25);
  v27 = (uint64_t *)((char *)&v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v27 = 0;
  v27[1] = 0;
  UnknownStorage.init()();
  v28 = (uint64_t)v27 + *(int *)(v24 + 28);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v29(v28, 1, 1, v11);
  *(_QWORD *)v23 = 0;
  *((_DWORD *)v23 + 2) = 0;
  UnknownStorage.init()();
  outlined destroy of CMTimeProtobuf?(v28);
  outlined init with take of CMTimeProtobuf((uint64_t)v23, v28);
  v29(v28, 0, 1, v11);
  outlined init with copy of CMTimeProtobuf?(v28, (uint64_t)v10);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v30(v10, 1, v11) == 1)
  {
    *(_QWORD *)v19 = 0;
    *((_DWORD *)v19 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of CMTimeProtobuf?((uint64_t)v10);
  }
  else
  {
    outlined init with take of CMTimeProtobuf((uint64_t)v10, (uint64_t)v19);
  }
  *(_QWORD *)v19 = v36;
  outlined destroy of CMTimeProtobuf?(v28);
  outlined init with take of CMTimeProtobuf((uint64_t)v19, v28);
  v29(v28, 0, 1, v11);
  v31 = v37;
  outlined init with copy of CMTimeProtobuf?(v28, v37);
  if (v30((char *)v31, 1, v11) == 1)
  {
    *(_QWORD *)v15 = 0;
    *((_DWORD *)v15 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of CMTimeProtobuf?(v31);
  }
  else
  {
    outlined init with take of CMTimeProtobuf(v31, (uint64_t)v15);
  }
  *((_DWORD *)v15 + 2) = v38;
  outlined destroy of CMTimeProtobuf?(v28);
  outlined init with take of CMTimeProtobuf((uint64_t)v15, v28);
  v29(v28, 0, 1, v11);
  v32 = v40;
  *v27 = v39;
  v27[1] = v32;
  v44[3] = v24;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v44);
  outlined init with copy of PrewittPowerChangeEvent((uint64_t)v27, (uint64_t)boxed_opaque_existential_0);
  type metadata accessor for HandyLoggerNeo();
  v41 = xmmword_23D9AB690;
  v42 = 0;
  v43 = 0;
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 0, (uint64_t *)&v41, 0xD00000000000006BLL, 0x800000023D9C71D0, 34, (uint64_t)v44, MEMORY[0x24BEE4AF8]);
  outlined destroy of PrewittPowerChangeEvent((uint64_t)v27);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v44);
}

uint64_t outlined destroy of CMTimeProtobuf?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of CMTimeProtobuf(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CMTimeProtobuf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CMTimeProtobuf?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with copy of PrewittPowerChangeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PrewittPowerChangeEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PrewittPowerChangeEvent(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PrewittPowerChangeEvent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 HandPose.init(jointTransformsARVino:forLeftHand:withReferenceTransform:wristStdDev:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>, __n128 a7@<Q3>, float a8@<S4>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  _OWORD v22[2];

  v12 = swift_bridgeObjectRetain();
  v13 = specialized static HandPose.calculateCoordinatesFromJointTransforms(_:)(v12);
  swift_bridgeObjectRelease();
  type metadata accessor for HandsKitUtils();
  v14 = swift_bridgeObjectRetain();
  static HandsKitUtils.calculatePalmCenter(_:)(v14, v22);
  swift_bridgeObjectRelease();
  v15 = v22[0];
  v16 = v22[1];
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = v13;
  *(_OWORD *)(a3 + 16) = v15;
  *(_OWORD *)(a3 + 32) = v16;
  *(__n128 *)(a3 + 48) = a4;
  *(__n128 *)(a3 + 64) = a5;
  result = a7;
  *(__n128 *)(a3 + 80) = a6;
  *(__n128 *)(a3 + 96) = a7;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 113) = a2;
  *(float *)(a3 + 116) = a8;
  return result;
}

Swift::Void __swiftcall HandPose.validateJointAngles(_:_:_:)(Swift::Bool a1, Swift::Bool a2, Swift::UInt32 a3)
{
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  Swift::UInt32 v21;
  void *v22;
  uint64_t v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  uint64_t aBlock;
  uint64_t v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;
  char v39;
  int v40;
  char v41;

  if (a1 && a2)
  {
    v4 = v3[1];
    v5 = *((_OWORD *)v3 + 1);
    v6 = *((__n128 *)v3 + 2);
    v7 = *((_OWORD *)v3 + 3);
    v8 = *((_OWORD *)v3 + 4);
    v9 = *((_OWORD *)v3 + 5);
    v10 = *((_OWORD *)v3 + 6);
    v11 = *((_BYTE *)v3 + 112);
    v12 = *((_BYTE *)v3 + 113);
    v13 = *((_DWORD *)v3 + 29);
    aBlock = *v3;
    v31 = v4;
    v29 = v6;
    v32 = v5;
    v33 = v6;
    v27 = v8;
    v28 = v7;
    v34 = v7;
    v35 = v8;
    v25 = v10;
    v26 = v9;
    v36 = v9;
    v37 = v10;
    v38 = v11;
    v39 = v12;
    v40 = v13;
    if (HandPose.countInvalidJointAngles(limit:)(a3) > a3)
    {
      v14 = specialized static StatisticUtils.Location3DBucket.resolve(handCenter:)(v29);
      v16 = v15;
      v18 = v17;
      v20 = v19;
      v34 = v28;
      v35 = v27;
      v36 = v26;
      v37 = v25;
      v38 = v11;
      v39 = v12;
      v40 = v13;
      v21 = HandPose.countInvalidJointAngles(limit:)(0x1Bu);
      v41 = v20 & 1;
      v22 = (void *)MEMORY[0x2426372E8](0xD000000000000022, 0x800000023D9C7240);
      v23 = swift_allocObject();
      *(_BYTE *)(v23 + 16) = v12;
      *(_QWORD *)(v23 + 24) = v14;
      *(_QWORD *)(v23 + 32) = v16;
      *(_QWORD *)(v23 + 40) = v18;
      *(_BYTE *)(v23 + 48) = v41;
      *(_DWORD *)(v23 + 52) = v21;
      *(_QWORD *)(v23 + 56) = 0xD000000000000022;
      *(_QWORD *)(v23 + 64) = 0x800000023D9C7240;
      v33.n128_u64[0] = (unint64_t)partial apply for closure #1 in InvalidHandPoseData.sendCoreAnalytics();
      v33.n128_u64[1] = v23;
      aBlock = MEMORY[0x24BDAC760];
      v31 = 1107296256;
      *(_QWORD *)&v32 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
      *((_QWORD *)&v32 + 1) = &block_descriptor_1;
      v24 = _Block_copy(&aBlock);
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v24);

    }
  }
}

void HandPose.getSimplifiedPinchCentroid(isRaw:)()
{
  uint64_t v0;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16) < 0xAuLL)
    __break(1u);
}

uint64_t HandPose.jointTransformsARVino.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandPose.jointsARVino.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 HandPose.palmCenter.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t HandPose.isValid.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t HandPose.isLeft.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 113);
}

float HandPose.wristStdDev.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 116);
}

void HandPose.wristStdDev.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 116) = a1;
}

uint64_t (*HandPose.wristStdDev.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandPose.init(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>, float32x4_t a6@<Q3>)
{
  uint64_t v6;
  char v7;
  char v8;
  int v9;
  uint64_t v10;
  float32x4_t *v12;
  uint64_t result;
  float32x4_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];

  v12 = *(float32x4_t **)a1;
  if (!*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    __break(1u);
LABEL_6:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
    v14 = (float32x4_t *)result;
    if (*(_QWORD *)(result + 16))
      goto LABEL_4;
    goto LABEL_7;
  }
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v34 = *(_OWORD *)(a1 + 64);
  v35 = *(_OWORD *)(a1 + 48);
  v33 = *(_OWORD *)(a1 + 80);
  v32 = *(_OWORD *)(a1 + 96);
  v7 = *(_BYTE *)(a1 + 112);
  v8 = *(_BYTE *)(a1 + 113);
  v9 = *(_DWORD *)(a1 + 116);
  v10 = v12[2].i64[0];
  v6 = v12[2].i64[1];
  v22 = v12[3];
  v23 = v12[4];
  v24 = v12[5];
  v25 = v12[6];
  v20 = v12[7];
  v21 = v12[8];
  v26 = v12[9];
  v27 = v12[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  v14 = v12;
  if ((result & 1) == 0)
    goto LABEL_6;
  if (v12[1].i64[0])
  {
LABEL_4:
    v14[2].i64[0] = v10;
    v14[2].i64[1] = v6;
    v14[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v22.f32[0]), v29, *(float32x2_t *)v22.f32, 1), v30, v22, 2), v31, v22, 3);
    v14[4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v23.f32[0]), v29, *(float32x2_t *)v23.f32, 1), v30, v23, 2), v31, v23, 3);
    v14[5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v24.f32[0]), v29, *(float32x2_t *)v24.f32, 1), v30, v24, 2), v31, v24, 3);
    v14[6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v25.f32[0]), v29, *(float32x2_t *)v25.f32, 1), v30, v25, 2), v31, v25, 3);
    v14[7] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v20.f32[0]), v29, *(float32x2_t *)v20.f32, 1), v30, v20, 2), v31, v20, 3);
    v14[8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v21.f32[0]), v29, *(float32x2_t *)v21.f32, 1), v30, v21, 2), v31, v21, 3);
    v14[9] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v26.f32[0]), v29, *(float32x2_t *)v26.f32, 1), v30, v26, 2), v31, v26, 3);
    v14[10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, v27.f32[0]), v29, *(float32x2_t *)v27.f32, 1), v30, v27, 2), v31, v27, 3);
    swift_bridgeObjectRelease();
    v15 = swift_bridgeObjectRetain();
    v16 = specialized static HandPose.calculateCoordinatesFromJointTransforms(_:)(v15);
    swift_bridgeObjectRelease();
    type metadata accessor for HandsKitUtils();
    v17 = swift_bridgeObjectRetain();
    static HandsKitUtils.calculatePalmCenter(_:)(v17, v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v18 = v36[0];
    v19 = v36[1];
    *(_QWORD *)a2 = v14;
    *(_QWORD *)(a2 + 8) = v16;
    *(_OWORD *)(a2 + 16) = v18;
    *(_OWORD *)(a2 + 32) = v19;
    *(_OWORD *)(a2 + 48) = v35;
    *(_OWORD *)(a2 + 64) = v34;
    *(_OWORD *)(a2 + 80) = v33;
    *(_OWORD *)(a2 + 96) = v32;
    *(_BYTE *)(a2 + 112) = v7;
    *(_BYTE *)(a2 + 113) = v8;
    *(_DWORD *)(a2 + 116) = v9;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t HandPose.init(protoBuf:isLeft:)@<X0>(_DWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  int v44;
  __int128 *v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t result;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD v79[2];
  _QWORD v80[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char v89;
  char v90;
  simd_float4x4_optional v91;

  v66 = a2;
  v5 = type metadata accessor for Matrix2dPB(0);
  v68 = *(_QWORD *)(v5 - 8);
  v69 = v5;
  MEMORY[0x24BDAC7A8](v5, v6);
  v65 = (uint64_t *)((char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for JointTransformPB(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x24BDAC7A8](v8, v10);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v14);
  v16 = (char *)&v61 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  v19 = MEMORY[0x24BDAC7A8](v17, v18);
  v64 = (uint64_t)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19, v21);
  v67 = (uint64_t)&v61 - v22;
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v25 = MEMORY[0x24BEE4AF8];
  if (v24)
  {
    v62 = a1;
    v63 = a3;
    v91.value.columns[0].i64[0] = MEMORY[0x24BEE4AF8];
    v26 = v23;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
    v27 = *(unsigned __int8 *)(v9 + 80);
    v61 = v26;
    v28 = v26 + ((v27 + 32) & ~v27);
    v29 = *(_QWORD *)(v9 + 72);
    v25 = v91.value.columns[0].i64[0];
    v70 = v29;
    do
    {
      outlined init with copy of JointTransformPB(v28, (uint64_t)v16);
      outlined init with copy of JointTransformPB((uint64_t)v16, (uint64_t)v13);
      JointTransform.init(protoBuf:)((uint64_t)v13, v80);
      outlined destroy of Matrix3x3PB((uint64_t)v16, type metadata accessor for JointTransformPB);
      v30 = v80[0];
      v31 = v80[1];
      v77 = v82;
      v78 = v81;
      v75 = v84;
      v76 = v83;
      v73 = v86;
      v74 = v85;
      v71 = v88;
      v72 = v87;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v25 + 16) + 1, 1);
        v29 = v70;
        v25 = v91.value.columns[0].i64[0];
      }
      v33 = *(_QWORD *)(v25 + 16);
      v32 = *(_QWORD *)(v25 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        v29 = v70;
        v25 = v91.value.columns[0].i64[0];
      }
      *(_QWORD *)(v25 + 16) = v33 + 1;
      v34 = v25 + 144 * v33;
      *(_QWORD *)(v34 + 32) = v30;
      *(_QWORD *)(v34 + 40) = v31;
      v35 = v77;
      *(_OWORD *)(v34 + 48) = v78;
      *(_OWORD *)(v34 + 64) = v35;
      v36 = v75;
      *(_OWORD *)(v34 + 80) = v76;
      *(_OWORD *)(v34 + 96) = v36;
      v37 = v73;
      *(_OWORD *)(v34 + 112) = v74;
      *(_OWORD *)(v34 + 128) = v37;
      v38 = v71;
      *(_OWORD *)(v34 + 144) = v72;
      *(_OWORD *)(v34 + 160) = v38;
      v28 += v29;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    a1 = v62;
    a3 = v63;
  }
  v39 = v68;
  v40 = (uint64_t)a1 + *(int *)(type metadata accessor for HandPosePB(0) + 28);
  v41 = v67;
  outlined init with copy of Matrix2dPB?(v40, v67);
  v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  v43 = v69;
  v44 = v42(v41, 1, v69);
  outlined destroy of Matrix2dPB?(v41);
  if (v44 == 1)
  {
    v45 = (__int128 *)MEMORY[0x24BDAEE00];
    v74 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v46 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
LABEL_16:
    v73 = v46;
    v51 = v45[3];
    v77 = *v45;
    v78 = v51;
    v89 = v66 & 1;
    v90 = 1;
    v52 = swift_bridgeObjectRetain();
    v53 = specialized static HandPose.calculateCoordinatesFromJointTransforms(_:)(v52);
    swift_bridgeObjectRelease();
    type metadata accessor for HandsKitUtils();
    v54 = swift_bridgeObjectRetain();
    static HandsKitUtils.calculatePalmCenter(_:)(v54, v79);
    swift_bridgeObjectRelease();
    v75 = v79[1];
    v76 = v79[0];
    v55 = a1[2];
    result = outlined destroy of Matrix3x3PB((uint64_t)a1, type metadata accessor for HandPosePB);
    v56 = v90;
    v57 = v89;
    *(_QWORD *)a3 = v25;
    *(_QWORD *)(a3 + 8) = v53;
    v58 = v75;
    *(_OWORD *)(a3 + 16) = v76;
    *(_OWORD *)(a3 + 32) = v58;
    v59 = v74;
    *(_OWORD *)(a3 + 48) = v77;
    *(_OWORD *)(a3 + 64) = v59;
    v60 = v78;
    *(_OWORD *)(a3 + 80) = v73;
    *(_OWORD *)(a3 + 96) = v60;
    *(_BYTE *)(a3 + 112) = v56;
    *(_BYTE *)(a3 + 113) = v57;
    *(_DWORD *)(a3 + 116) = v55;
    return result;
  }
  v47 = v64;
  outlined init with copy of Matrix2dPB?(v40, v64);
  if (v42(v47, 1, v43) == 1)
  {
    v48 = v65;
    v49 = MEMORY[0x24BEE4AF8];
    *v65 = MEMORY[0x24BEE4AF8];
    *((_BYTE *)v48 + 8) = 0;
    v48[2] = v49;
    UnknownStorage.init()();
    outlined destroy of Matrix2dPB?(v47);
  }
  else
  {
    v48 = v65;
    outlined init with take of Matrix2dPB(v47, (uint64_t)v65);
  }
  specialized Matrix2d.init(protoBuf:)(v48);
  Matrix2d.toSimd4x4Float()(&v91);
  swift_bridgeObjectRelease();
  result = outlined init with take of simd_float4x4?((uint64_t)&v91, (uint64_t)v80);
  if ((v84 & 1) == 0)
  {
    v45 = (__int128 *)v80;
    v74 = v81;
    v46 = v82;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t HandPose.init(protoBuf:isLeft:)@<X0>(_DWORD *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  float v43;
  float v44;
  char isUniquelyReferenced_nonNull_native;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  int8x16_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  int8x16_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  int v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t result;
  char v88;
  char v89;
  uint64_t *v90;
  __int128 v91;
  int8x16_t v92;
  int8x16_t v93;
  _QWORD *v94;
  uint64_t v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  _OWORD v118[2];
  _OWORD v119[4];
  char v120;
  uint64_t v121;
  char v122;
  char v123;
  simd_float4x4_optional v124;

  v96 = a2;
  v97 = a3;
  v4 = type metadata accessor for Matrix2dPB(0);
  v99 = *(_QWORD *)(v4 - 8);
  v100 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v94 = (_QWORD **)((char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  v9 = MEMORY[0x24BDAC7A8](v7, v8);
  v95 = (uint64_t)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v11);
  v98 = (uint64_t)&v94 - v12;
  v101 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v13 = *(int8x16_t *)(MEMORY[0x24BDAEE00] + 16);
  v114 = *(int8x16_t *)MEMORY[0x24BDAEE00];
  v115 = v13;
  v14 = *(int8x16_t *)(MEMORY[0x24BDAEE00] + 48);
  v116 = *(int8x16_t *)(MEMORY[0x24BDAEE00] + 32);
  v117 = v14;
  *((_QWORD *)&v119[0] + 1) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int32 : Float]);
  Dictionary.reserveCapacity(_:)(2);
  v15 = *((_QWORD *)&v119[0] + 1);
  v16 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v17 = 0;
  *(_QWORD *)(v16 + 16) = 27;
  *(_QWORD *)(v16 + 32) = 0x447A000000000000;
  *(_QWORD *)(v16 + 40) = v15;
  v19 = v114;
  v18 = v115;
  *(int8x16_t *)(v16 + 48) = v114;
  *(int8x16_t *)(v16 + 64) = v18;
  v21 = v116;
  v20 = v117;
  *(int8x16_t *)(v16 + 80) = v116;
  *(int8x16_t *)(v16 + 96) = v20;
  *(int8x16_t *)(v16 + 112) = v19;
  *(int8x16_t *)(v16 + 128) = v18;
  *(int8x16_t *)(v16 + 144) = v21;
  *(int8x16_t *)(v16 + 160) = v20;
  *(_QWORD *)(v16 + 176) = 0x447A000000000000;
  *(_QWORD *)(v16 + 184) = v15;
  *(int8x16_t *)(v16 + 192) = v19;
  *(int8x16_t *)(v16 + 208) = v18;
  *(int8x16_t *)(v16 + 224) = v21;
  *(int8x16_t *)(v16 + 240) = v20;
  *(int8x16_t *)(v16 + 256) = v19;
  *(int8x16_t *)(v16 + 272) = v18;
  *(int8x16_t *)(v16 + 288) = v21;
  *(int8x16_t *)(v16 + 304) = v20;
  do
  {
    v22 = (int8x16_t *)(v16 + v17);
    v22[20].i64[0] = 0x447A000000000000;
    v22[20].i64[1] = v15;
    v24 = v114;
    v23 = v115;
    v22[21] = v114;
    v22[22] = v23;
    v26 = v116;
    v25 = v117;
    v22[23] = v116;
    v22[24] = v25;
    v22[25] = v24;
    v22[26] = v23;
    v22[27] = v26;
    v22[28] = v25;
    swift_bridgeObjectRetain();
    v17 += 144;
  }
  while (v17 != 3600);
  v121 = v16;
  swift_bridgeObjectRetain();
  v27 = 0;
  v28 = 0;
  v29 = 12;
  v104 = vextq_s8(v115, v115, 8uLL);
  v105 = vextq_s8(v114, v114, 8uLL);
  v102 = vextq_s8(v117, v117, 8uLL);
  v103 = vextq_s8(v116, v116, 8uLL);
  while (2)
  {
    v30 = 33 * v28;
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    if (33 * v28 >= v32)
      goto LABEL_80;
    if (v30 + 1 >= v32)
      goto LABEL_81;
    if (v30 + 2 >= v32)
      goto LABEL_82;
    if (v30 + 3 >= v32)
      goto LABEL_80;
    if (v30 + 4 >= v32)
      goto LABEL_81;
    if (v30 + 5 >= v32)
      goto LABEL_82;
    if (v30 + 6 >= v32)
      goto LABEL_80;
    if (v30 + 7 >= v32)
      goto LABEL_81;
    if (v30 + 8 >= v32)
      goto LABEL_82;
    if (v30 + 9 >= v32)
      goto LABEL_80;
    if (v30 + 10 >= v32)
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    if (v30 + 11 >= v32)
      goto LABEL_82;
    if (v29 >= v32)
      goto LABEL_83;
    if (v29 + 1 >= v32)
      goto LABEL_84;
    if (v29 + 2 >= v32)
      goto LABEL_85;
    if (v29 + 3 >= v32)
      goto LABEL_83;
    if (v29 + 4 >= v32)
      goto LABEL_84;
    if (v29 + 5 >= v32)
      goto LABEL_85;
    if (v29 + 6 >= v32)
      goto LABEL_83;
    if (v29 + 7 >= v32)
      goto LABEL_84;
    if (v29 + 8 >= v32)
      goto LABEL_85;
    if (v29 + 9 >= v32)
      goto LABEL_83;
    if (v29 + 10 >= v32)
      goto LABEL_84;
    if (v29 + 11 >= v32)
      goto LABEL_85;
    if (v29 + 12 >= v32)
      goto LABEL_86;
    v117.i64[0] = v16;
    v33.i64[0] = *(_QWORD *)(v31 + 32 + 132 * v28);
    v33.i32[3] = v105.i32[1];
    v33.i32[2] = *(_DWORD *)(v31 + 32 + 4 * (v30 + 2));
    v115 = v33;
    v34.i64[0] = *(_QWORD *)(v31 + 32 + 4 * (v30 + 3));
    v34.i32[3] = v104.i32[1];
    v34.i32[2] = *(_DWORD *)(v31 + 32 + 4 * (v30 + 5));
    v114 = v34;
    *(_QWORD *)&v35 = *(_QWORD *)(v31 + 32 + 4 * (v30 + 6));
    HIDWORD(v35) = v103.i32[1];
    DWORD2(v35) = *(_DWORD *)(v31 + 32 + 4 * (v30 + 8));
    v113 = v35;
    *(_QWORD *)&v36 = *(_QWORD *)(v31 + 32 + 4 * (v30 + 9));
    HIDWORD(v36) = v102.i32[1];
    DWORD2(v36) = *(_DWORD *)(v31 + 32 + 4 * (v30 + 11));
    v112 = v36;
    *(_QWORD *)&v36 = *(_QWORD *)(v31 + 32 + 4 * v29);
    HIDWORD(v36) = v105.i32[1];
    DWORD2(v36) = *(_DWORD *)(v31 + 32 + 4 * (v29 + 2));
    v111 = v36;
    *(_QWORD *)&v37 = *(_QWORD *)(v31 + 32 + 4 * (v29 + 3));
    HIDWORD(v37) = v104.i32[1];
    DWORD2(v37) = *(_DWORD *)(v31 + 32 + 4 * (v29 + 5));
    v109 = v37;
    *(_QWORD *)&v37 = *(_QWORD *)(v31 + 32 + 4 * (v29 + 6));
    HIDWORD(v37) = v103.i32[1];
    DWORD2(v37) = *(_DWORD *)(v31 + 32 + 4 * (v29 + 8));
    v108 = v37;
    *(_QWORD *)&v37 = *(_QWORD *)(v31 + 32 + 4 * (v29 + 9));
    HIDWORD(v37) = v102.i32[1];
    DWORD2(v37) = *(_DWORD *)(v31 + 32 + 4 * (v29 + 11));
    v107 = v37;
    v116.i64[0] = v28;
    v110 = v28 + 1;
    v38 = 4;
    v106 = v27;
    v39 = (_QWORD *)MEMORY[0x24BEE4B00];
    v40 = *(float *)(v31 + 32 + 4 * (v29 + 12));
    do
    {
      v41 = *(_QWORD *)a1;
      v42 = *(_QWORD *)(*(_QWORD *)a1 + 16);
      if (v27 + 25 >= v42)
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        v121 = v16;
        specialized static JointTransform.overrideUnsupervisedUnifiedConfidences(_:)(&v121);
        goto LABEL_70;
      }
      v43 = roundf(*(float *)(v41 + 4 * v27 + 132));
      if ((~LODWORD(v43) & 0x7F800000) == 0)
        goto LABEL_65;
      if (v43 <= -2147500000.0)
        goto LABEL_66;
      if (v43 >= 2147500000.0)
        goto LABEL_67;
      if (v27 + 26 >= v42)
        goto LABEL_68;
      v16 = (int)v43;
      if ((int)v16 >= 1)
      {
        v44 = *(float *)(v41 + 4 * v27 + 136);
        if (v44 > 0.0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v119[0] = v39;
          v47 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
          v48 = v39[2];
          v49 = (v46 & 1) == 0;
          v50 = v48 + v49;
          if (__OFADD__(v48, v49))
          {
            __break(1u);
LABEL_75:
            v80 = v94;
            outlined init with take of Matrix2dPB(v27, (uint64_t)v94);
LABEL_76:
            specialized Matrix2d.init(protoBuf:)(v80);
            Matrix2d.toSimd4x4Float()(&v124);
            swift_bridgeObjectRelease();
            outlined init with take of simd_float4x4?((uint64_t)&v124, (uint64_t)v119);
            if ((v120 & 1) != 0)
              goto LABEL_91;
            v114 = (int8x16_t)v119[0];
            v115 = (int8x16_t)v119[1];
            v116 = (int8x16_t)v119[2];
            v117 = (int8x16_t)v119[3];
            goto LABEL_78;
          }
          v51 = v46;
          if (v39[3] < v50)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v50, isUniquelyReferenced_nonNull_native);
            v52 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
            if ((v51 & 1) != (v53 & 1))
              goto LABEL_92;
            v47 = v52;
            v39 = *(_QWORD **)&v119[0];
            if ((v51 & 1) == 0)
              goto LABEL_48;
LABEL_31:
            *(float *)(v39[7] + 4 * v47) = v44;
LABEL_32:
            swift_bridgeObjectRelease();
            goto LABEL_33;
          }
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v39 = *(_QWORD **)&v119[0];
            if ((v46 & 1) != 0)
              goto LABEL_31;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v39 = *(_QWORD **)&v119[0];
            if ((v51 & 1) != 0)
              goto LABEL_31;
          }
LABEL_48:
          v39[(v47 >> 6) + 8] |= 1 << v47;
          v54 = 4 * v47;
          *(_DWORD *)(v39[6] + v54) = v16;
          *(float *)(v39[7] + v54) = v44;
          v55 = v39[2];
          v56 = __OFADD__(v55, 1);
          v57 = v55 + 1;
          if (v56)
          {
            __break(1u);
LABEL_80:
            __break(1u);
            goto LABEL_81;
          }
          v39[2] = v57;
          goto LABEL_32;
        }
      }
LABEL_33:
      v27 += 2;
      --v38;
    }
    while (v38);
    if (v101 < 918)
    {
      v58 = swift_bridgeObjectRetain();
      v59 = v116.i64[0];
      specialized static JointTransform.computeUnifiedConfidence(occlusionValues:uncertainty:jointIndex:)(v58, v116.i64[0], v40);
      v61 = v60;
      swift_bridgeObjectRelease();
      v16 = v117.i64[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v16);
      if (v59 >= *(_QWORD *)(v16 + 16))
        goto LABEL_88;
      v62 = v16 + 144 * v59;
      *(_DWORD *)(v62 + 32) = v61;
      *(float *)(v62 + 36) = v40;
      *(_QWORD *)(v62 + 40) = v39;
      v63 = v114;
      *(int8x16_t *)(v62 + 48) = v115;
      *(int8x16_t *)(v62 + 64) = v63;
      v64 = v112;
      *(_OWORD *)(v62 + 80) = v113;
      *(_OWORD *)(v62 + 96) = v64;
      v65 = v109;
      *(_OWORD *)(v62 + 112) = v111;
      *(_OWORD *)(v62 + 128) = v65;
      v66 = v107;
      *(_OWORD *)(v62 + 144) = v108;
      *(_OWORD *)(v62 + 160) = v66;
      swift_bridgeObjectRelease();
      v67 = v110;
      if (v110 == 27)
        goto LABEL_69;
LABEL_4:
      v29 += 33;
      v27 = v106 + 33;
      v28 = v67;
      if (v67 == 27)
        goto LABEL_87;
      continue;
    }
    break;
  }
  v68 = v116.i64[0];
  v16 = v117.i64[0];
  if ((unint64_t)(v116.i64[0] + 891) >= *(_QWORD *)(*(_QWORD *)a1 + 16))
    goto LABEL_89;
  v69 = *(_DWORD *)(*(_QWORD *)a1 + 4 * (v116.i64[0] + 891) + 32);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v16);
  if (v68 < *(_QWORD *)(v16 + 16))
  {
    v70 = v16 + 144 * v68;
    *(_DWORD *)(v70 + 32) = v69;
    *(float *)(v70 + 36) = v40;
    *(_QWORD *)(v70 + 40) = v39;
    v71 = v114;
    *(int8x16_t *)(v70 + 48) = v115;
    *(int8x16_t *)(v70 + 64) = v71;
    v72 = v112;
    *(_OWORD *)(v70 + 80) = v113;
    *(_OWORD *)(v70 + 96) = v72;
    v73 = v109;
    *(_OWORD *)(v70 + 112) = v111;
    *(_OWORD *)(v70 + 128) = v73;
    v74 = v107;
    *(_OWORD *)(v70 + 144) = v108;
    *(_OWORD *)(v70 + 160) = v74;
    swift_bridgeObjectRelease();
    v67 = v110;
    if (v110 != 27)
      goto LABEL_4;
    v121 = v16;
LABEL_70:
    v75 = (uint64_t)a1 + *(int *)(type metadata accessor for CompactHandPosePB(0) + 28);
    v76 = v98;
    outlined init with copy of Matrix2dPB?(v75, v98);
    v77 = v100;
    v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 48);
    LOBYTE(v29) = 1;
    v79 = v78(v76, 1, v100);
    outlined destroy of Matrix2dPB?(v76);
    if (v79 != 1)
    {
      v27 = v95;
      outlined init with copy of Matrix2dPB?(v75, v95);
      if (v78(v27, 1, v77) != 1)
        goto LABEL_75;
      v80 = v94;
      v81 = MEMORY[0x24BEE4AF8];
      *v94 = MEMORY[0x24BEE4AF8];
      *((_BYTE *)v80 + 8) = 0;
      v80[2] = v81;
      UnknownStorage.init()();
      outlined destroy of Matrix2dPB?(v27);
      goto LABEL_76;
    }
    v117 = (int8x16_t)xmmword_23D9A3E90;
    v116 = (int8x16_t)xmmword_23D9A3E30;
    v115 = (int8x16_t)xmmword_23D9A3E20;
    v114 = (int8x16_t)xmmword_23D9A3E10;
LABEL_78:
    v82 = v121;
    v122 = v96 & 1;
    v123 = v29;
    v83 = swift_bridgeObjectRetain();
    v84 = specialized static HandPose.calculateCoordinatesFromJointTransforms(_:)(v83);
    swift_bridgeObjectRelease();
    type metadata accessor for HandsKitUtils();
    v85 = swift_bridgeObjectRetain();
    static HandsKitUtils.calculatePalmCenter(_:)(v85, v118);
    swift_bridgeObjectRelease();
    v112 = v118[1];
    v113 = v118[0];
    v86 = a1[2];
    result = outlined destroy of Matrix3x3PB((uint64_t)a1, type metadata accessor for CompactHandPosePB);
    v88 = v123;
    v89 = v122;
    v90 = v97;
    *v97 = v82;
    v90[1] = v84;
    v91 = v112;
    *((_OWORD *)v90 + 1) = v113;
    *((_OWORD *)v90 + 2) = v91;
    v92 = v115;
    *((int8x16_t *)v90 + 3) = v114;
    *((int8x16_t *)v90 + 4) = v92;
    v93 = v117;
    *((int8x16_t *)v90 + 5) = v116;
    *((int8x16_t *)v90 + 6) = v93;
    *((_BYTE *)v90 + 112) = v88;
    *((_BYTE *)v90 + 113) = v89;
    *((_DWORD *)v90 + 29) = v86;
    return result;
  }
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t HandPose.updateJointTransform(index:transform:)(unint64_t a1, float32x4_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  float32x4_t *v7;
  uint64_t result;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int32 v52;
  __int32 v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  _OWORD v62[3];

  v3 = v2;
  v5 = a2->i64[0];
  v6 = a2->i64[1];
  v60 = a2[2];
  v61 = a2[1];
  v58 = a2[4];
  v59 = a2[3];
  v56 = a2[6];
  v57 = a2[5];
  v54 = a2[8];
  v55 = a2[7];
  v7 = *(float32x4_t **)v3;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
LABEL_47:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
  v7 = (float32x4_t *)result;
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_48;
LABEL_3:
  if (v7[1].i64[0] <= a1)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v9 = &v7[9 * a1];
  v9[2].i64[0] = v5;
  v9[2].i64[1] = v6;
  v9[3] = v61;
  v9[4] = v60;
  v9[5] = v59;
  v9[6] = v58;
  v9[7] = v57;
  v9[8] = v56;
  v9[9] = v55;
  v9[10] = v54;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v3 = v7;
  if (!v7[1].i64[0])
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v10 = v7[3];
  v11 = v7[4];
  v12 = v7[5];
  v13 = v7[6];
  v14 = v7[7];
  v15 = v7[8];
  v16 = v7[9];
  v17 = v7[10];
  v18 = 5 * (a1 / 5);
  if (a1 - 1 > 0x17)
  {
LABEL_9:
    v19 = 26;
    goto LABEL_10;
  }
  v19 = v18 + 4;
  if (__OFADD__(v18, 4))
  {
    __break(1u);
    goto LABEL_9;
  }
LABEL_10:
  if (v19 < (uint64_t)v18)
  {
LABEL_51:
    __break(1u);
    return result;
  }
  v20 = 20 * (a1 / 5);
  v21 = 720 * (a1 / 5) + 160;
  v51 = v19;
  v6 = v19 + 1;
  do
  {
    if (v18)
    {
      if (one-time initialization token for kPrevJointIsWrist == -1)
      {
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_44;
      }
      else
      {
        v60 = v15;
        v61 = v13;
        v58 = v17;
        v59 = v16;
        v56 = v12;
        v57 = v14;
        v54 = v10;
        v55 = v11;
        swift_once();
        v10 = v54;
        v11 = v55;
        v12 = v56;
        v14 = v57;
        v17 = v58;
        v16 = v59;
        v15 = v60;
        v13 = v61;
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_44;
      }
      if (v18 >= *(_QWORD *)(static HandPoseBuilder.kPrevJointIsWrist + 16))
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      if ((*(_BYTE *)(static HandPoseBuilder.kPrevJointIsWrist + v18 + 32) & 1) != 0)
      {
        v25 = v7[1].u64[0];
        if (!v25)
          goto LABEL_46;
        v10 = v7[3];
        v11 = v7[4];
        v12 = v7[5];
        v13 = v7[6];
        v14 = v7[7];
        v15 = v7[8];
        v16 = v7[9];
        v17 = v7[10];
      }
      else
      {
        v25 = v7[1].u64[0];
      }
      if (v18 >= v25)
        goto LABEL_43;
      v26 = *(float32x4_t *)((char *)v7 + v21 - 96);
      v27 = *(float32x4_t *)((char *)v7 + v21 - 80);
      v28 = *(float32x4_t *)((char *)v7 + v21 - 64);
      v29 = vmulq_n_f32(v10, v26.f32[0]);
      v30 = vmulq_n_f32(v10, v27.f32[0]);
      v31 = vmulq_n_f32(v10, v28.f32[0]);
      v10 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)((char *)&v7[-7] + v21))), v11, *(float32x2_t *)((char *)v7[-7].f32 + v21), 1), v12, *(float32x4_t *)((char *)v7 + v21 - 112), 2), v13, *(float32x4_t *)((char *)v7 + v21 - 112), 3);
      v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(v29, v11, *(float32x2_t *)v26.f32, 1), v12, v26, 2), v13, v26, 3);
      v33 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(v30, v11, *(float32x2_t *)v27.f32, 1), v12, v27, 2), v13, v27, 3);
      v34 = vmlaq_laneq_f32(vmlaq_lane_f32(v31, v11, *(float32x2_t *)v28.f32, 1), v12, v28, 2);
      v35 = *(float32x4_t *)((char *)v7 + v21 - 32);
      v36 = *(float32x4_t *)((char *)v7 + v21 - 16);
      v37 = *(float32x4_t *)((char *)v7 + v21);
      v38 = vmulq_n_f32(v14, v35.f32[0]);
      v39 = vmulq_n_f32(v14, v36.f32[0]);
      v40 = vmulq_n_f32(v14, v37.f32[0]);
      v14 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(_OWORD *)((char *)&v7[-3] + v21))), v15, *(float32x2_t *)((char *)v7[-3].f32 + v21), 1), v16, *(float32x4_t *)((char *)v7 + v21 - 48), 2), v17, *(float32x4_t *)((char *)v7 + v21 - 48), 3);
      v41 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(v38, v15, *(float32x2_t *)v35.f32, 1), v16, v35, 2), v17, v35, 3);
      v42 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(v39, v15, *(float32x2_t *)v36.f32, 1), v16, v36, 2), v17, v36, 3);
      v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(v40, v15, *(float32x2_t *)v37.f32, 1), v16, v37, 2), v17, v37, 3);
      v16 = v42;
      v15 = v41;
      v13 = vmlaq_laneq_f32(v34, v13, v28, 3);
      v12 = v33;
      v11 = v32;
    }
    if ((uint64_t)v18 >= (uint64_t)a1)
    {
      v54 = v10;
      v55 = v11;
      v56 = v12;
      v57 = v14;
      v58 = v17;
      v59 = v16;
      v60 = v15;
      v61 = v13;
      v43 = *(_QWORD **)(v3 + 8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = specialized _ArrayBuffer._consumeAndCreateNew()(v43);
      v15 = v60;
      v13 = v61;
      v17 = v58;
      v16 = v59;
      v12 = v56;
      v14 = v57;
      v10 = v54;
      v11 = v55;
      if (v18 >= v43[2])
        goto LABEL_45;
      v22 = v61;
      v22.i32[3] = v53;
      v23 = v58;
      v23.i32[3] = v52;
      v24 = (float32x4_t *)&v43[v20];
      v24[2] = v22;
      v24[3] = v23;
      *(_QWORD *)(v3 + 8) = v43;
    }
    ++v18;
    v20 += 4;
    v21 += 144;
  }
  while (v6 != v18);
  if (a1)
  {
    specialized static HandsKitUtils.getPalmCenterJoints()();
    v45 = *(_QWORD *)(v44 + 16);
    if (!v45)
      return swift_bridgeObjectRelease();
    v46 = 0;
    while (1)
    {
      v47 = *(_QWORD *)(v44 + 8 * v46 + 32);
      if (v47 >= (uint64_t)a1 && v51 >= v47)
        break;
      if (v45 == ++v46)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  type metadata accessor for HandsKitUtils();
  v49 = swift_bridgeObjectRetain();
  static HandsKitUtils.calculatePalmCenter(_:)(v49, v62);
  result = swift_bridgeObjectRelease();
  v50 = v62[1];
  *(_OWORD *)(v3 + 16) = v62[0];
  *(_OWORD *)(v3 + 32) = v50;
  return result;
}

void HandPose.getHoverDistanceVector()()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16);
  if (v1 < 5)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (v1 < 0xA)
LABEL_5:
    __break(1u);
}

Swift::Float __swiftcall HandPose.getHoverDistance()()
{
  float32x4_t v0;
  float32x4_t v1;

  HandPose.getHoverDistanceVector()();
  v1 = vmulq_f32(v0, v0);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2), vaddq_f32(v1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1.f32, 1))).f32[0]);
}

double HandPose.getHoverDistanceNormalizedVector()()
{
  float32x4_t v0;
  int32x4_t v1;
  float32x2_t v2;
  float32x2_t v3;
  double result;

  HandPose.getHoverDistanceVector()();
  v1 = (int32x4_t)vmulq_f32(v0, v0);
  v1.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v1, 2), vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1.i8, 1))).u32[0];
  v2 = vrsqrte_f32((float32x2_t)v1.u32[0]);
  v3 = vmul_f32(v2, vrsqrts_f32((float32x2_t)v1.u32[0], vmul_f32(v2, v2)));
  *(_QWORD *)&result = vmulq_n_f32(v0, vmul_f32(v3, vrsqrts_f32((float32x2_t)v1.u32[0], vmul_f32(v3, v3))).f32[0]).u64[0];
  return result;
}

unint64_t HandPose.serializeJointTransforms()(int32x2_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  result = 34 * v3;
  if ((unsigned __int128)(v3 * (__int128)34) >> 64 != (34 * v3) >> 63)
    goto LABEL_94;
  a1.i32[0] = 0;
  result = specialized Array.init(repeating:count:)(result, a1);
  v5 = result;
  if (v3)
  {
    v6 = 0;
    v7 = 0;
    v49 = v2;
    v50 = v2 + 32;
    v8 = 25;
    v48 = v3;
    do
    {
      if (v7 >= *(_QWORD *)(v2 + 16))
        goto LABEL_91;
      v9 = v50 + 144 * v7;
      v10 = *(_DWORD *)(v9 + 4);
      v11 = *(_QWORD *)(v9 + 8);
      v51 = *(_OWORD *)(v9 + 16);
      v52 = *(_OWORD *)(v9 + 32);
      v53 = *(_OWORD *)(v9 + 48);
      v54 = *(_OWORD *)(v9 + 64);
      v55 = *(_OWORD *)(v9 + 80);
      v56 = *(_OWORD *)(v9 + 96);
      v57 = *(_OWORD *)(v9 + 112);
      v59 = *(_OWORD *)(v9 + 128);
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
        v5 = result;
      }
      v12 = 33 * v7;
      v13 = *(_QWORD *)(v5 + 16);
      if (33 * v7 >= v13)
        goto LABEL_84;
      v14 = v5 + 32;
      *(_DWORD *)(v5 + 32 + 132 * v7) = v51;
      if (v12 + 1 >= v13)
      {
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
        return result;
      }
      *(_DWORD *)(v14 + 4 * (v12 + 1)) = DWORD1(v51);
      if (v12 + 2 >= v13)
        goto LABEL_86;
      *(_DWORD *)(v14 + 4 * (v12 + 2)) = DWORD2(v51);
      v15 = *(_QWORD *)(v5 + 16);
      if (v12 + 3 >= v15)
        goto LABEL_84;
      *(_DWORD *)(v14 + 4 * (v12 + 3)) = v52;
      if (v12 + 4 >= v15)
        goto LABEL_85;
      *(_DWORD *)(v14 + 4 * (v12 + 4)) = DWORD1(v52);
      if (v12 + 5 >= v15)
        goto LABEL_86;
      *(_DWORD *)(v14 + 4 * (v12 + 5)) = DWORD2(v52);
      v16 = *(_QWORD *)(v5 + 16);
      if (v12 + 6 >= v16)
        goto LABEL_84;
      *(_DWORD *)(v14 + 4 * (v12 + 6)) = v53;
      if (v12 + 7 >= v16)
        goto LABEL_85;
      *(_DWORD *)(v14 + 4 * (v12 + 7)) = DWORD1(v53);
      if (v12 + 8 >= v16)
        goto LABEL_86;
      *(_DWORD *)(v14 + 4 * (v12 + 8)) = DWORD2(v53);
      v17 = *(_QWORD *)(v5 + 16);
      if (v12 + 9 >= v17)
        goto LABEL_84;
      *(_DWORD *)(v14 + 4 * (v12 + 9)) = v54;
      if (v12 + 10 >= v17)
        goto LABEL_85;
      *(_DWORD *)(v14 + 4 * (v12 + 10)) = DWORD1(v54);
      if (v12 + 11 >= v17)
        goto LABEL_86;
      *(_DWORD *)(v14 + 4 * (v12 + 11)) = DWORD2(v54);
      v18 = *(_QWORD *)(v5 + 16);
      if (v12 + 12 >= v18)
        goto LABEL_87;
      *(_DWORD *)(v14 + 4 * (v12 + 12)) = v55;
      if (v12 + 13 >= v18)
        goto LABEL_88;
      *(_DWORD *)(v14 + 4 * (v12 + 13)) = DWORD1(v55);
      if (v12 + 14 >= v18)
        goto LABEL_89;
      *(_DWORD *)(v14 + 4 * (v12 + 14)) = DWORD2(v55);
      v19 = *(_QWORD *)(v5 + 16);
      if (v12 + 15 >= v19)
        goto LABEL_87;
      *(_DWORD *)(v14 + 4 * (v12 + 15)) = v56;
      if (v12 + 16 >= v19)
        goto LABEL_88;
      *(_DWORD *)(v14 + 4 * (v12 + 16)) = DWORD1(v56);
      if (v12 + 17 >= v19)
        goto LABEL_89;
      *(_DWORD *)(v14 + 4 * (v12 + 17)) = DWORD2(v56);
      v20 = *(_QWORD *)(v5 + 16);
      if (v12 + 18 >= v20)
        goto LABEL_87;
      *(_DWORD *)(v14 + 4 * (v12 + 18)) = v57;
      if (v12 + 19 >= v20)
        goto LABEL_88;
      *(_DWORD *)(v14 + 4 * (v12 + 19)) = DWORD1(v57);
      if (v12 + 20 >= v20)
        goto LABEL_89;
      *(_DWORD *)(v14 + 4 * (v12 + 20)) = DWORD2(v57);
      v21 = *(_QWORD *)(v5 + 16);
      if (v12 + 21 >= v21)
        goto LABEL_87;
      *(_DWORD *)(v14 + 4 * (v12 + 21)) = v59;
      if (v12 + 22 >= v21)
        goto LABEL_88;
      *(_DWORD *)(v14 + 4 * (v12 + 22)) = DWORD1(v59);
      if (v12 + 23 >= v21)
        goto LABEL_89;
      *(_DWORD *)(v14 + 4 * (v12 + 23)) = DWORD2(v59);
      if (v12 + 24 >= v21)
        goto LABEL_92;
      v60 = v7 + 1;
      *(_DWORD *)(v14 + 4 * (v12 + 24)) = v10;
      v22 = v12 + 25;
      v23 = v11 + 64;
      v24 = 1 << *(_BYTE *)(v11 + 32);
      if (v24 < 64)
        v25 = ~(-1 << v24);
      else
        v25 = -1;
      v26 = v25 & *(_QWORD *)(v11 + 64);
      v27 = (unint64_t)(v24 + 63) >> 6;
      result = swift_bridgeObjectRetain();
      v28 = 0;
      v58 = v6;
      if (v26)
      {
LABEL_37:
        v29 = __clz(__rbit64(v26));
        v26 &= v26 - 1;
        v30 = v29 | (v28 << 6);
        if ((v8 & 0x8000000000000000) == 0)
          goto LABEL_53;
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      while (1)
      {
        v31 = v28 + 1;
        if (__OFADD__(v28, 1))
          goto LABEL_79;
        if (v31 >= v27)
          break;
        v32 = *(_QWORD *)(v23 + 8 * v31);
        ++v28;
        if (v32)
          goto LABEL_52;
        v28 = v31 + 1;
        if (v31 + 1 >= v27)
          break;
        v32 = *(_QWORD *)(v23 + 8 * v28);
        if (v32)
          goto LABEL_52;
        v28 = v31 + 2;
        if (v31 + 2 >= v27)
          break;
        v32 = *(_QWORD *)(v23 + 8 * v28);
        if (v32)
          goto LABEL_52;
        v33 = v31 + 3;
        if (v33 >= v27)
          break;
        v32 = *(_QWORD *)(v23 + 8 * v33);
        if (!v32)
        {
          while (1)
          {
            v28 = v33 + 1;
            if (__OFADD__(v33, 1))
              break;
            if (v28 >= v27)
              goto LABEL_57;
            v32 = *(_QWORD *)(v23 + 8 * v28);
            ++v33;
            if (v32)
              goto LABEL_52;
          }
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
          goto LABEL_85;
        }
        v28 = v33;
LABEL_52:
        v26 = (v32 - 1) & v32;
        v30 = __clz(__rbit64(v32)) + (v28 << 6);
        if (v8 < 0)
          goto LABEL_76;
LABEL_53:
        v34 = *(_QWORD *)(v5 + 16);
        if (v22 >= v34)
          goto LABEL_77;
        v35 = 4 * v30;
        v36 = *(_DWORD *)(*(_QWORD *)(v11 + 56) + v35);
        *(float *)(v14 + 4 * v22) = (float)*(int *)(*(_QWORD *)(v11 + 48) + v35);
        if (v22 + 1 >= v34)
          goto LABEL_78;
        *(_DWORD *)(v14 + 4 * (v22 + 1)) = v36;
        v22 += 2;
        v6 += 2;
        if (v26)
          goto LABEL_37;
      }
LABEL_57:
      swift_release();
      v37 = *(_QWORD *)(v11 + 16);
      result = swift_bridgeObjectRelease();
      v39 = v37 - 4;
      v38 = v37 == 4;
      if (v37 > 4)
        goto LABEL_93;
      v7 = v60;
      if (!v38)
      {
        while ((v22 & 0x8000000000000000) == 0)
        {
          v40 = *(_QWORD *)(v5 + 16);
          if (v6 + 25 >= v40)
            goto LABEL_81;
          v41 = v5 + 4 * v6;
          *(_DWORD *)(v41 + 132) = -1082130432;
          if (v6 + 26 >= v40)
            goto LABEL_82;
          *(_DWORD *)(v41 + 136) = -1082130432;
          v6 += 2;
          if (__CFADD__(v39++, 1))
            goto LABEL_4;
        }
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
LABEL_4:
      v8 += 33;
      v6 = v58 + 33;
      v3 = v48;
      v2 = v49;
    }
    while (v60 != v48);
  }
  v43 = *(_QWORD *)(v2 + 16);
  if (!v43)
    return v5;
  v44 = 33 * v3;
  swift_bridgeObjectRetain();
  v45 = v2 + 40;
  v46 = v44;
  while (1)
  {
    v47 = *(_DWORD *)(v45 - 8);
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      break;
    if (v44 < 0)
      goto LABEL_73;
LABEL_69:
    if (v46 >= *(_QWORD *)(v5 + 16))
      goto LABEL_90;
    *(_DWORD *)(v5 + 4 * v46 + 32) = v47;
    swift_bridgeObjectRelease();
    ++v46;
    v45 += 144;
    if (!--v43)
      goto LABEL_74;
  }
  result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = result;
  if ((v44 & 0x8000000000000000) == 0)
    goto LABEL_69;
LABEL_73:
  __break(1u);
LABEL_74:
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t HandPose.almostEqual(to:withThreshold:)(float *a1, double a2)
{
  float *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  unint64_t result;
  _OWORD *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  float32x4_t v37;
  float32x4_t v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  char v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  uint64_t v82;
  void *v83;
  id v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  void *v96;
  NSObject *v97;
  Swift::String v98;
  Swift::String v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void *v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t *v115;
  unint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  void *v127;
  float32x4_t v128;
  float32x4_t v129;
  __int128 v130;
  float32x4_t v131;
  float32x4_t v132;
  __int128 aBlock;
  uint64_t (*v134)(uint64_t);
  void *v135;
  uint64_t (*v136)();
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;

  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(char **)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5, v8);
  v119 = (char *)&v104 - ((unint64_t)(v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v104 - v11;
  v13 = *((_QWORD *)a1 + 1);
  v113 = *(_QWORD *)a1;
  v14 = a1[29];
  v15 = *(_QWORD *)v2;
  v16 = *((_QWORD *)v2 + 1);
  v17 = v2[29];
  v18 = *(_QWORD *)(v16 + 16);
  result = swift_bridgeObjectRetain();
  v20 = &protocol conformance descriptor for CMTimeProtobuf;
  v120 = v6;
  v104 = v15;
  if (v18)
  {
    v125 = v7;
    v118 = v12;
    v126 = v5;
    v21 = 0;
    v22 = 0;
    v23 = 1;
    v130 = xmmword_23D9A8970;
    v127 = (void *)0x800000023D9C7290;
    do
    {
      if (v22 >= v18)
      {
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        return result;
      }
      if (v22 >= *(_QWORD *)(v13 + 16))
        goto LABEL_63;
      v25 = *(float32x4_t *)(v16 + v21 + 32);
      v24 = *(float32x4_t *)(v16 + v21 + 48);
      v27 = *(float32x4_t *)(v13 + v21 + 32);
      v26 = *(float32x4_t *)(v13 + v21 + 48);
      v28 = vsubq_f32(v25, v27);
      v29 = vmulq_f32(v28, v28);
      v132 = v24;
      v131 = v26;
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]) > a2)
      {
        *(_QWORD *)&aBlock = 0;
        *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
        v129 = v25;
        v128 = v27;
        _StringGuts.grow(_:)(33);
        v30._countAndFlagsBits = 0x20746E696F6ALL;
        v30._object = (void *)0xE600000000000000;
        String.append(_:)(v30);
        *(_QWORD *)&v139 = v22;
        v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v32._countAndFlagsBits = 0x6374616D73696D20;
        v32._object = (void *)0xEF203A726F662068;
        String.append(_:)(v32);
        v139 = (__int128)v128;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
        lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>();
        v33._countAndFlagsBits = SIMD.description.getter();
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._countAndFlagsBits = 8236;
        v34._object = (void *)0xE200000000000000;
        String.append(_:)(v34);
        v139 = (__int128)v129;
        v35._countAndFlagsBits = SIMD.description.getter();
        String.append(_:)(v35);
        swift_bridgeObjectRelease();
        v36._countAndFlagsBits = 8236;
        v36._object = (void *)0xE200000000000000;
        String.append(_:)(v36);
        Double.write<A>(to:)();
        v135 = (void *)MEMORY[0x24BEE0D00];
        type metadata accessor for HandyLoggerNeo();
        v139 = v130;
        v140 = 0;
        v141 = 0;
        static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v139, 0xD000000000000055, (uint64_t)v127, 334, (uint64_t)&aBlock, MEMORY[0x24BEE4AF8]);
        result = __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
        v26 = v131;
        v24 = v132;
        v23 = 0;
      }
      v37 = vsubq_f32(v24, v26);
      v38 = vmulq_f32(v37, v37);
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]) > a2)
      {
        *(_QWORD *)&aBlock = 0;
        *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(37);
        v39._countAndFlagsBits = 0x617220746E696F6ALL;
        v39._object = (void *)0xEA00000000002077;
        String.append(_:)(v39);
        *(_QWORD *)&v139 = v22;
        v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
        v41._countAndFlagsBits = 0x6374616D73696D20;
        v41._object = (void *)0xEF203A726F662068;
        String.append(_:)(v41);
        v139 = (__int128)v131;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
        lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>();
        v42._countAndFlagsBits = SIMD.description.getter();
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        v43._countAndFlagsBits = 8236;
        v43._object = (void *)0xE200000000000000;
        String.append(_:)(v43);
        v139 = (__int128)v132;
        v44._countAndFlagsBits = SIMD.description.getter();
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v45._countAndFlagsBits = 8236;
        v45._object = (void *)0xE200000000000000;
        String.append(_:)(v45);
        Double.write<A>(to:)();
        v135 = (void *)MEMORY[0x24BEE0D00];
        type metadata accessor for HandyLoggerNeo();
        v139 = v130;
        v140 = 0;
        v141 = 0;
        static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v139, 0xD000000000000055, 0x800000023D9C7290, 341, (uint64_t)&aBlock, MEMORY[0x24BEE4AF8]);
        result = __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
        v23 = 0;
      }
      ++v22;
      v18 = *(_QWORD *)(v16 + 16);
      v21 += 32;
    }
    while (v22 != v18);
    swift_bridgeObjectRelease();
    v46 = v104;
    v47 = *(_QWORD *)(v104 + 16);
    v109 = (unint64_t *)(v104 + 16);
    v112 = v47;
    if (v47)
    {
      v114 = v23;
      v5 = v126;
      v7 = v125;
      v20 = (_OWORD *)&protocol conformance descriptor for CMTimeProtobuf;
      goto LABEL_14;
    }
    if ((v23 & 1) == 0)
      return 0;
    return vabds_f32(v17, v14) < a2;
  }
  swift_bridgeObjectRelease();
  v48 = *(_QWORD *)(v15 + 16);
  v109 = (unint64_t *)(v15 + 16);
  v112 = v48;
  if (!v48)
    return vabds_f32(v17, v14) < a2;
  v46 = v15;
  v118 = v12;
  v114 = 1;
LABEL_14:
  v49 = a2;
  v111 = v46 + 32;
  v110 = v113 + 32;
  v115 = &v140;
  v117 = v7 + 7;
  result = swift_bridgeObjectRetain();
  v50 = 0;
  v107 = 0xD00000000000001CLL;
  v106 = (void *)0x800000023D9C7330;
  v122 = v20[151];
  v121 = (unint64_t)"num_invalid_joints";
  v105 = 0x800000023D9C7290;
  v108 = (void *)0x800000023D9C72F0;
  v127 = (void *)0x800000023D9C7310;
LABEL_17:
  if (v50 >= *(_QWORD *)(v113 + 16))
    goto LABEL_65;
  v52 = v111 + 144 * v50;
  v53 = *(float *)(v52 + 4);
  v54 = *(_QWORD *)(v52 + 8);
  v55 = v110 + 144 * v50;
  v56 = *(_QWORD *)(v55 + 8);
  if (vabds_f32(v53, *(float *)(v55 + 4)) <= v49)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(42);
    v57._countAndFlagsBits = 0x20746E696F6ALL;
    v57._object = (void *)0xE600000000000000;
    String.append(_:)(v57);
    *(_QWORD *)&v139 = v50;
    v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = v107;
    v59._object = v106;
    String.append(_:)(v59);
    Float.write<A>(to:)();
    v60._countAndFlagsBits = 8236;
    v60._object = (void *)0xE200000000000000;
    String.append(_:)(v60);
    Float.write<A>(to:)();
    v135 = (void *)MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v139 = v122;
    v61 = v115;
    *v115 = 0;
    v61[1] = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v139, 0xD000000000000055, v105, 349, (uint64_t)&aBlock, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
    v114 = 0;
  }
  v116 = v50 + 1;
  v62 = v54 + 64;
  v63 = 1 << *(_BYTE *)(v54 + 32);
  if (v63 < 64)
    v64 = ~(-1 << v63);
  else
    v64 = -1;
  v65 = v64 & *(_QWORD *)(v54 + 64);
  v131.i64[0] = (unint64_t)(v63 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v66 = 0;
  *(_QWORD *)&v130 = v54;
  v129.i64[0] = v50;
  v132.i64[0] = v56;
  v128.i64[0] = v54 + 64;
  while (v65)
  {
    v67 = __clz(__rbit64(v65));
    v65 &= v65 - 1;
    v68 = v67 | (v66 << 6);
LABEL_43:
    v72 = 4 * v68;
    v73 = *(float *)(*(_QWORD *)(v54 + 56) + v72);
    if (v73 >= 0.0)
    {
      if (!*(_QWORD *)(v56 + 16)
        || (result = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)(*(_QWORD *)(v54 + 48) + v72)),
            (v74 & 1) == 0))
      {
        *(_QWORD *)&aBlock = 0;
        *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(43);
        swift_bridgeObjectRelease();
        *(_QWORD *)&aBlock = 0x20746E696F6ALL;
        *((_QWORD *)&aBlock + 1) = 0xE600000000000000;
        *(_QWORD *)&v139 = v50;
        v98._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v98);
        swift_bridgeObjectRelease();
        v99._countAndFlagsBits = 0xD00000000000001DLL;
        v99._object = v108;
        String.append(_:)(v99);
        v100._countAndFlagsBits = Dictionary.description.getter();
        String.append(_:)(v100);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v101._countAndFlagsBits = 8236;
        v101._object = (void *)0xE200000000000000;
        String.append(_:)(v101);
        v102._countAndFlagsBits = Dictionary.description.getter();
        String.append(_:)(v102);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v135 = (void *)MEMORY[0x24BEE0D00];
        type metadata accessor for HandyLoggerNeo();
        v139 = v122;
        v103 = v115;
        *v115 = 0;
        v103[1] = 0;
        static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v139, 0xD000000000000055, v121 | 0x8000000000000000, 361, (uint64_t)&aBlock, MEMORY[0x24BEE4AF8]);
        swift_release();
        result = __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
        v51 = v116;
        if (v116 == v112)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
        v114 = 0;
LABEL_16:
        v50 = v51;
        if (v51 >= *v109)
          goto LABEL_64;
        goto LABEL_17;
      }
      if (vabds_f32(*(float *)(*(_QWORD *)(v56 + 56) + 4 * result), v73) > v49)
      {
        *(_QWORD *)&aBlock = 0;
        *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(55);
        v75._countAndFlagsBits = 0x20746E696F6ALL;
        v75._object = (void *)0xE600000000000000;
        String.append(_:)(v75);
        *(_QWORD *)&v139 = v50;
        v76._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v76);
        swift_bridgeObjectRelease();
        v77._countAndFlagsBits = 0xD00000000000001FLL;
        v77._object = v127;
        String.append(_:)(v77);
        swift_bridgeObjectRetain();
        v78._countAndFlagsBits = Dictionary.description.getter();
        String.append(_:)(v78);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v79._countAndFlagsBits = 8236;
        v79._object = (void *)0xE200000000000000;
        String.append(_:)(v79);
        swift_bridgeObjectRetain();
        v56 = v132.i64[0];
        v80._countAndFlagsBits = Dictionary.description.getter();
        String.append(_:)(v80);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v81._countAndFlagsBits = 0x203D206666696420;
        v81._object = (void *)0xE800000000000000;
        String.append(_:)(v81);
        Float.write<A>(to:)();
        v141 = MEMORY[0x24BEE0D00];
        v139 = aBlock;
        v82 = type metadata accessor for HandyLoggerNeo();
        if (static HandyLoggerNeo._currentLogLevel <= 1)
        {
          v126 = v82;
          v83 = (void *)MEMORY[0x2426372E8](0xD000000000000055, v121 | 0x8000000000000000);
          v84 = objc_msgSend(v83, sel_lastPathComponent);

          v124 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v123 = v85;

          v86 = v118;
          static Date.now.getter();
          if (one-time initialization token for _dispatchQ != -1)
            swift_once();
          v125 = (char *)static HandyLoggerNeo._dispatchQ;
          v87 = v120;
          v88 = v119;
          (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v119, v86, v5);
          outlined init with copy of Any((uint64_t)&v139, (uint64_t)&v138);
          v89 = v5;
          v90 = (*(unsigned __int8 *)(v87 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
          v91 = (unint64_t)&v117[v90] & 0xFFFFFFFFFFFFFFF8;
          v92 = swift_allocObject();
          *(_DWORD *)(v92 + 16) = 1;
          *(_QWORD *)(v92 + 24) = v126;
          *(_OWORD *)(v92 + 32) = v122;
          *(_QWORD *)(v92 + 48) = 0;
          *(_QWORD *)(v92 + 56) = 0;
          *(_DWORD *)(v92 + 64) = 1;
          v93 = v123;
          *(_QWORD *)(v92 + 72) = v124;
          *(_QWORD *)(v92 + 80) = v93;
          *(_QWORD *)(v92 + 88) = 368;
          v94 = v92 + v90;
          v5 = v89;
          (*(void (**)(unint64_t, char *, uint64_t))(v87 + 32))(v94, v88, v89);
          outlined init with take of Any(&v138, (_OWORD *)(v92 + v91));
          *(_QWORD *)(v92 + ((v91 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
          v95 = swift_allocObject();
          *(_QWORD *)(v95 + 16) = partial apply for closure #1 in static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:);
          *(_QWORD *)(v95 + 24) = v92;
          v136 = _sIg_Ieg_TRTA_0;
          v137 = v95;
          *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
          *((_QWORD *)&aBlock + 1) = 1107296256;
          v134 = thunk for @escaping @callee_guaranteed () -> ();
          v135 = &block_descriptor_9;
          v96 = _Block_copy(&aBlock);
          v97 = v125;
          swift_retain();
          swift_release();
          dispatch_sync(v97, v96);

          _Block_release(v96);
          LOBYTE(v96) = swift_isEscapingClosureAtFileLocation();
          result = swift_release();
          if ((v96 & 1) != 0)
            goto LABEL_60;
          (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v89);
          swift_release();
          v56 = v132.i64[0];
        }
        result = __swift_destroy_boxed_opaque_existential_0((uint64_t)&v139);
        v54 = v130;
        v50 = v129.i64[0];
        v62 = v128.i64[0];
      }
    }
  }
  v69 = v66 + 1;
  if (__OFADD__(v66, 1))
  {
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v69 >= v131.i64[0])
    goto LABEL_15;
  v70 = *(_QWORD *)(v62 + 8 * v69);
  ++v66;
  if (v70)
    goto LABEL_42;
  v66 = v69 + 1;
  if (v69 + 1 >= v131.i64[0])
    goto LABEL_15;
  v70 = *(_QWORD *)(v62 + 8 * v66);
  if (v70)
    goto LABEL_42;
  v66 = v69 + 2;
  if (v69 + 2 >= v131.i64[0])
    goto LABEL_15;
  v70 = *(_QWORD *)(v62 + 8 * v66);
  if (v70)
  {
LABEL_42:
    v65 = (v70 - 1) & v70;
    v68 = __clz(__rbit64(v70)) + (v66 << 6);
    goto LABEL_43;
  }
  v71 = v69 + 3;
  if (v71 < v131.i64[0])
  {
    v70 = *(_QWORD *)(v62 + 8 * v71);
    if (!v70)
    {
      while (1)
      {
        v66 = v71 + 1;
        if (__OFADD__(v71, 1))
          goto LABEL_61;
        if (v66 >= v131.i64[0])
          goto LABEL_15;
        v70 = *(_QWORD *)(v62 + 8 * v66);
        ++v71;
        if (v70)
          goto LABEL_42;
      }
    }
    v66 = v71;
    goto LABEL_42;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_bridgeObjectRelease();
  v51 = v116;
  if (v116 != v112)
    goto LABEL_16;
  swift_bridgeObjectRelease();
  if ((v114 & 1) != 0)
    return vabds_f32(v17, v14) < a2;
  return 0;
}

void one-time initialization function for allAngleIndices()
{
  static HandPose.allAngleIndices = (uint64_t)&outlined read-only object #0 of one-time initialization function for allAngleIndices;
}

double one-time initialization function for allMinAngles()
{
  uint64_t v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 25;
  *(_OWORD *)(v0 + 16) = xmmword_23D9AB6E0;
  *(_QWORD *)(v0 + 32) = &outlined read-only object #0 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 40) = &outlined read-only object #1 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 48) = &outlined read-only object #2 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 56) = &outlined read-only object #3 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 64) = &outlined read-only object #4 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 72) = &outlined read-only object #5 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 80) = &outlined read-only object #6 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 88) = &outlined read-only object #7 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 96) = &outlined read-only object #8 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 104) = &outlined read-only object #9 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 112) = &outlined read-only object #10 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 120) = &outlined read-only object #11 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 128) = &outlined read-only object #12 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 136) = &outlined read-only object #13 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 144) = &outlined read-only object #14 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 152) = &outlined read-only object #15 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 160) = &outlined read-only object #16 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 168) = &outlined read-only object #17 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 176) = &outlined read-only object #18 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 184) = &outlined read-only object #19 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 192) = &outlined read-only object #20 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 200) = &outlined read-only object #21 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 208) = &outlined read-only object #22 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 216) = &outlined read-only object #23 of one-time initialization function for allMinAngles;
  *(_QWORD *)(v0 + 224) = &outlined read-only object #24 of one-time initialization function for allMinAngles;
  static HandPose.allMinAngles = v0;
  return result;
}

double one-time initialization function for allMaxAngles()
{
  uint64_t v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 25;
  *(_OWORD *)(v0 + 16) = xmmword_23D9AB6E0;
  *(_QWORD *)(v0 + 32) = &outlined read-only object #0 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 40) = &outlined read-only object #1 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 48) = &outlined read-only object #2 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 56) = &outlined read-only object #3 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 64) = &outlined read-only object #4 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 72) = &outlined read-only object #5 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 80) = &outlined read-only object #6 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 88) = &outlined read-only object #7 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 96) = &outlined read-only object #8 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 104) = &outlined read-only object #9 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 112) = &outlined read-only object #10 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 120) = &outlined read-only object #11 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 128) = &outlined read-only object #12 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 136) = &outlined read-only object #13 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 144) = &outlined read-only object #14 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 152) = &outlined read-only object #15 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 160) = &outlined read-only object #16 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 168) = &outlined read-only object #17 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 176) = &outlined read-only object #18 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 184) = &outlined read-only object #19 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 192) = &outlined read-only object #20 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 200) = &outlined read-only object #21 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 208) = &outlined read-only object #22 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 216) = &outlined read-only object #23 of one-time initialization function for allMaxAngles;
  *(_QWORD *)(v0 + 224) = &outlined read-only object #24 of one-time initialization function for allMaxAngles;
  static HandPose.allMaxAngles = v0;
  return result;
}

Swift::UInt32 __swiftcall HandPose.countInvalidJointAngles(limit:)(Swift::UInt32 limit)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt32 v6;
  unint64_t v7;
  float32x2_t v8;
  float32x2_t v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t inited;
  float v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  BOOL v21;
  float v22;
  float v23;
  __int128 v25;

  v3 = *v1;
  if (one-time initialization token for allAngleIndices != -1)
    goto LABEL_50;
  while (1)
  {
    v4 = static HandPose.allAngleIndices;
    v5 = *(_QWORD *)(static HandPose.allAngleIndices + 16);
    if (!v5)
      return 0;
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = 0;
    v8 = (float32x2_t)vdup_n_s32(0x43340000u);
    v9 = (float32x2_t)vdup_n_s32(0x40490FDAu);
    while (v7 < *(_QWORD *)(v4 + 16))
    {
      v10 = *(_QWORD *)(v4 + 8 * v7 + 32);
      if ((v10 & 0x8000000000000000) != 0)
        goto LABEL_37;
      if (v10 >= *(_QWORD *)(v3 + 16))
        goto LABEL_38;
      v11 = v3 + 32 + 144 * v10;
      v25 = *(_OWORD *)(v11 + 112);
      v12 = *(float *)(v11 + 96);
      v13 = *(float *)(v11 + 80);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_23D9A74A0;
      v15 = atan2f(-*((float *)&v25 + 1), *((float *)&v25 + 2));
      *(float32x2_t *)(inited + 32) = vdiv_f32(vmul_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(asinf(*(float *)&v25)), LODWORD(v15)), v8), v9);
      *(float *)(inited + 40) = (float)(atan2f(-v12, v13) * 180.0) / 3.1416;
      if (one-time initialization token for allMinAngles != -1)
        swift_once();
      if (v10 >= *(_QWORD *)(static HandPose.allMinAngles + 16))
        goto LABEL_39;
      v16 = *(_QWORD *)(static HandPose.allMinAngles + 8 * v10 + 32);
      v17 = one-time initialization token for allMaxAngles;
      swift_bridgeObjectRetain();
      if (v17 != -1)
        swift_once();
      if (v10 >= *(_QWORD *)(static HandPose.allMaxAngles + 16))
        goto LABEL_40;
      v18 = *(_QWORD *)(v16 + 16);
      if (!v18)
        goto LABEL_41;
      v19 = *(_QWORD *)(static HandPose.allMaxAngles + 8 * v10 + 32);
      v20 = *(float *)(inited + 32);
      if (v20 < *(float *)(v16 + 32))
        goto LABEL_19;
      if (!*(_QWORD *)(v19 + 16))
        goto LABEL_47;
      if (*(float *)(v19 + 32) < v20)
      {
LABEL_19:
        v21 = __CFADD__(v6++, 1);
        if (v21)
          goto LABEL_44;
        if (v6 > limit)
          goto LABEL_32;
      }
      if (v18 < 2)
        goto LABEL_42;
      v22 = *(float *)(inited + 36);
      if (v22 < *(float *)(v16 + 36))
        goto LABEL_25;
      if (*(_QWORD *)(v19 + 16) < 2uLL)
        goto LABEL_48;
      if (*(float *)(v19 + 36) < v22)
      {
LABEL_25:
        v21 = __CFADD__(v6++, 1);
        if (v21)
          goto LABEL_45;
        if (v6 > limit)
          goto LABEL_32;
      }
      if (v18 < 3)
        goto LABEL_43;
      v23 = *(float *)(inited + 40);
      if (v23 < *(float *)(v16 + 40))
        goto LABEL_31;
      if (*(_QWORD *)(v19 + 16) < 3uLL)
        goto LABEL_49;
      if (*(float *)(v19 + 40) < v23)
      {
LABEL_31:
        v21 = __CFADD__(v6++, 1);
        if (v21)
          goto LABEL_46;
        if (v6 > limit)
        {
LABEL_32:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_34:
          swift_bridgeObjectRelease();
          return v6;
        }
      }
      ++v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v5 == v7)
        goto LABEL_34;
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    swift_once();
  }
}

unint64_t closure #1 in InvalidHandPoseData.sendCoreAnalytics()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  NSNumber v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  _QWORD v21[4];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A74A0;
  *(_QWORD *)(inited + 32) = 0x7466656C5F7369;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v7.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  *(NSNumber *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = 0x6E6F697461636F6CLL;
  *(_QWORD *)(inited + 64) = 0xE800000000000000;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v15 = specialized static StatisticUtils.Location3DBucket.allCases.getter((uint64_t)v7.super.super.isa, v12, v13, v14);
  specialized Collection<>.firstIndex(of:)(v8, v9, v10, v11, (uint64_t)v15);
  swift_bridgeObjectRelease();
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0xD000000000000012;
  *(_QWORD *)(inited + 88) = 0x800000023D9C7270;
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  v16 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v22 = xmmword_23D9A8B80;
  v23 = 0;
  v24 = 0;
  v21[0] = a2;
  v21[1] = a3;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 8250;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  type metadata accessor for NSObject();
  v18 = MEMORY[0x24BEE0D00];
  v19._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v21[3] = v18;
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000055, 0x800000023D9C7290, 500, (uint64_t *)&v22, (uint64_t)v21, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  return v16;
}

uint64_t specialized static HandPose.== infix(_:_:)(__int128 *a1, uint64_t *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  char v10;
  int v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  float32x4_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  float32x4_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = *((_BYTE *)a1 + 112);
  v10 = *((_BYTE *)a1 + 113);
  v11 = *((_DWORD *)a1 + 29);
  v12 = *(float32x4_t *)a2;
  v13 = *((_OWORD *)a2 + 1);
  v14 = *((_OWORD *)a2 + 2);
  v15 = *((_OWORD *)a2 + 3);
  v16 = *((_OWORD *)a2 + 4);
  v17 = *((_OWORD *)a2 + 5);
  v18 = *((_OWORD *)a2 + 6);
  v19 = *((_BYTE *)a2 + 112);
  v20 = *((_BYTE *)a2 + 113);
  v21 = *((_DWORD *)a2 + 29);
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v23)
  {
    v48 = *((_OWORD *)a2 + 6);
    v49 = *((_OWORD *)a2 + 5);
    v50 = *((_OWORD *)a2 + 4);
    v51 = *((_OWORD *)a2 + 3);
    v52 = *((_OWORD *)a2 + 2);
    v53 = *((_OWORD *)a2 + 1);
    v55 = a1[6];
    v56 = a1[5];
    v57 = a1[4];
    v58 = a1[3];
    v59 = a1[2];
    v60 = a1[1];
    v61 = *a1;
    v54 = *(float32x4_t *)a2;
    v24 = *a2;
    result = swift_bridgeObjectRetain();
    v26 = 0;
    v27 = 0;
    while (v27 < *(_QWORD *)(v24 + 16))
    {
      v29 = *(_OWORD *)(v22 + v26 + 144);
      v28 = *(_OWORD *)(v22 + v26 + 160);
      v31 = *(_OWORD *)(v22 + v26 + 112);
      v30 = *(_OWORD *)(v22 + v26 + 128);
      v33 = *(_OWORD *)(v22 + v26 + 80);
      v32 = *(_OWORD *)(v22 + v26 + 96);
      v35 = *(_OWORD *)(v22 + v26 + 48);
      v34 = *(_OWORD *)(v22 + v26 + 64);
      v36 = *(_QWORD *)(v22 + v26 + 40);
      v37 = *(_QWORD *)(v24 + v26 + 40);
      v38 = *(_OWORD *)(v24 + v26 + 48);
      v39 = *(_OWORD *)(v24 + v26 + 64);
      v40 = *(_OWORD *)(v24 + v26 + 80);
      v41 = *(_OWORD *)(v24 + v26 + 96);
      v42 = *(_OWORD *)(v24 + v26 + 112);
      v43 = *(_OWORD *)(v24 + v26 + 128);
      v44 = *(_OWORD *)(v24 + v26 + 144);
      v45 = *(_OWORD *)(v24 + v26 + 160);
      v46 = *(_QWORD *)(v24 + v26 + 32);
      *(_QWORD *)&v71 = *(_QWORD *)(v22 + v26 + 32);
      *((_QWORD *)&v71 + 1) = v36;
      v72 = v35;
      v73 = v34;
      v74 = v33;
      v75 = v32;
      v76 = v31;
      v77 = v30;
      v78 = v29;
      v79 = v28;
      v62.i64[0] = v46;
      v62.i64[1] = v37;
      v63 = v38;
      v64 = v39;
      v65 = v40;
      v66 = v41;
      v67 = v42;
      v68 = v43;
      v69 = v44;
      v70 = v45;
      result = JointTransform.almostEqual(to:withThreshold:)(&v62, 0.00000001, *(double *)&v29);
      if ((result & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v47 = 0;
        return v47 & 1;
      }
      ++v27;
      v26 += 144;
      if (v23 == v27)
      {
        swift_bridgeObjectRelease();
        v3 = v60;
        v2 = v61;
        v5 = v58;
        v4 = v59;
        v7 = v56;
        v6 = v57;
        v12 = v54;
        v8 = v55;
        v14 = v52;
        v13 = v53;
        v16 = v50;
        v15 = v51;
        v18 = v48;
        v17 = v49;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_7:
    v71 = v2;
    v72 = v3;
    v73 = v4;
    v74 = v5;
    v75 = v6;
    v76 = v7;
    v77 = v8;
    LOBYTE(v78) = v9;
    BYTE1(v78) = v10;
    DWORD1(v78) = v11;
    v62 = v12;
    v63 = v13;
    v64 = v14;
    v65 = v15;
    v66 = v16;
    v67 = v17;
    v68 = v18;
    LOBYTE(v69) = v19;
    BYTE1(v69) = v20;
    DWORD1(v69) = v21;
    v47 = HandPose.almostEqual(to:withThreshold:)(v62.f32, 0.00000001);
    return v47 & 1;
  }
  return result;
}

uint64_t specialized static HandPose.calculateCoordinatesFromJointTransforms(_:)(uint64_t a1)
{
  unint64_t v1;
  _OWORD *v2;
  uint64_t result;
  __int32 v4;
  __int32 v5;
  _QWORD *v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  int8x16_t *v18;
  float32x4_t *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  unsigned int v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  unint64_t v37;
  unint64_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t *v50;
  _QWORD *v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  __int32 v59;
  __int32 v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (_OWORD *)a1;
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 27, 0, MEMORY[0x24BEE4AF8]);
    v6 = (_QWORD *)result;
    v7 = *((int8x16_t *)v2 + 3);
    v8 = *((int8x16_t *)v2 + 4);
    v9 = *((int8x16_t *)v2 + 5);
    v10 = *((int8x16_t *)v2 + 6);
    v11 = *((int8x16_t *)v2 + 7);
    v12 = *((int8x16_t *)v2 + 8);
    v13 = *((int8x16_t *)v2 + 9);
    v14 = *((int8x16_t *)v2 + 10);
    v16 = *(_QWORD *)(result + 16);
    v15 = *(_QWORD *)(result + 24);
    v17 = v16 + 1;
    if (v16 >= v15 >> 1)
      goto LABEL_17;
    while (1)
    {
      v6[2] = v17;
      v18 = (int8x16_t *)&v6[4 * v16];
      v18[2] = v10;
      v18[3] = v14;
      if (one-time initialization token for kPrevJointIsWrist == -1)
      {
        if (v1 < 0x1B)
          goto LABEL_19;
      }
      else
      {
        v83 = v8;
        v86 = v7;
        v77 = v10;
        v80 = v9;
        v71 = v12;
        v74 = v11;
        v68 = v13;
        v65 = v14;
        result = swift_once();
        v14 = v65;
        v13 = v68;
        v12 = v71;
        v11 = v74;
        v10 = v77;
        v9 = v80;
        v8 = v83;
        v7 = v86;
        if (v1 < 0x1B)
        {
LABEL_19:
          __break(1u);
          return result;
        }
      }
      v17 = 0;
      v1 = static HandPoseBuilder.kPrevJointIsWrist;
      v16 = static HandPoseBuilder.kPrevJointIsWrist + 33;
      v19 = (float32x4_t *)(v2 + 19);
      v20 = v11;
      v21 = v12;
      v22 = v13;
      v23 = v14;
      v24 = v7;
      v25 = v8;
      v26 = v9;
      v27 = v10;
      while (1)
      {
        v15 = v17 + 1;
        if ((unint64_t)(v17 + 1) >= *(_QWORD *)(v1 + 16))
          break;
        if (*(_BYTE *)(v16 + v17))
          v28 = -1;
        else
          v28 = 0;
        v30 = v19[-7];
        v29 = v19[-6];
        v32 = v19[-5];
        v31 = v19[-4];
        v34 = v19[-3];
        v33 = v19[-2];
        v35 = v19[-1];
        v36 = *v19;
        v38 = v6[2];
        v37 = v6[3];
        v2 = (_OWORD *)(v38 + 1);
        if (v38 >= v37 >> 1)
        {
          v81 = v8;
          v84 = v7;
          v75 = v10;
          v78 = v9;
          v69 = v12;
          v72 = v11;
          v66 = v13;
          v62 = v24;
          v63 = v14;
          v60 = v4;
          v61 = v21;
          v58 = v25;
          v59 = v5;
          v56 = v23;
          v57 = v26;
          v54 = v20;
          v55 = v27;
          v52 = *v19;
          v53 = v22;
          v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v6);
          v36 = v52;
          v22 = v53;
          v20 = v54;
          v27 = v55;
          v23 = v56;
          v26 = v57;
          v25 = v58;
          v5 = v59;
          v4 = v60;
          v21 = v61;
          v24 = v62;
          v14 = v63;
          v13 = v66;
          v12 = v69;
          v11 = v72;
          v10 = v75;
          v9 = v78;
          v8 = v81;
          v7 = v84;
          v6 = v51;
        }
        v39 = (int8x16_t)vdupq_n_s32(v28);
        v40 = (float32x4_t)vbslq_s8(v39, v11, v20);
        v41 = (float32x4_t)vbslq_s8(v39, v13, v22);
        v42 = (float32x4_t)vbslq_s8(v39, v7, v24);
        v43 = (float32x4_t)vbslq_s8(v39, v8, v25);
        v44 = (float32x4_t)vbslq_s8(v39, v9, v26);
        v45 = (float32x4_t)vbslq_s8(v39, v10, v27);
        v24 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v42, v30.f32[0]), v43, *(float32x2_t *)v30.f32, 1), v44, v30, 2), v45, v30, 3);
        v25 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v42, v29.f32[0]), v43, *(float32x2_t *)v29.f32, 1), v44, v29, 2), v45, v29, 3);
        v26 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v42, v32.f32[0]), v43, *(float32x2_t *)v32.f32, 1), v44, v32, 2), v45, v32, 3);
        v27 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v42, v31.f32[0]), v43, *(float32x2_t *)v31.f32, 1), v44, v31, 2), v45, v31, 3);
        v46 = (float32x4_t)vbslq_s8(v39, v12, v21);
        v47 = (float32x4_t)vbslq_s8(v39, v14, v23);
        v20 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, v34.f32[0]), v46, *(float32x2_t *)v34.f32, 1), v41, v34, 2), v47, v34, 3);
        v21 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, v33.f32[0]), v46, *(float32x2_t *)v33.f32, 1), v41, v33, 2), v47, v33, 3);
        v22 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, v35.f32[0]), v46, *(float32x2_t *)v35.f32, 1), v41, v35, 2), v47, v35, 3);
        v23 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, v36.f32[0]), v46, *(float32x2_t *)v36.f32, 1), v41, v36, 2), v47, v36, 3);
        v48 = v27;
        v48.i32[3] = v4;
        v49 = v23;
        v49.i32[3] = v5;
        v6[2] = v2;
        v50 = (int8x16_t *)&v6[4 * v38];
        ++v17;
        v50[2] = v48;
        v50[3] = v49;
        v19 += 9;
        if (v17 == 26)
          return (uint64_t)v6;
      }
      __break(1u);
LABEL_17:
      v82 = v8;
      v85 = v7;
      v76 = v10;
      v79 = v9;
      v70 = v12;
      v73 = v11;
      v67 = v13;
      v64 = v14;
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v17, 1, v6);
      v14 = v64;
      v13 = v67;
      v12 = v70;
      v11 = v73;
      v10 = v76;
      v9 = v79;
      v8 = v82;
      v7 = v85;
      v6 = (_QWORD *)result;
    }
  }
  return MEMORY[0x24BEE4AF8];
}

_QWORD *specialized static HandPose.calculateJointsFromTransforms(transforms:)(uint64_t a1)
{
  unint64_t v1;
  _QWORD *result;
  __int32 v4;
  _QWORD *v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v15;
  float32x4_t *v16;
  unint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  unsigned int v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  unint64_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  _QWORD *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  __int32 v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, MEMORY[0x24BEE4AF8]);
  v5 = result;
  v6 = *(int8x16_t *)(a1 + 32);
  v7 = *(int8x16_t *)(a1 + 48);
  v8 = *(int8x16_t *)(a1 + 64);
  v9 = *(int8x16_t *)(a1 + 80);
  v11 = result[2];
  v10 = result[3];
  if (v11 >= v10 >> 1)
  {
    v51 = *(int8x16_t *)(a1 + 48);
    v54 = *(int8x16_t *)(a1 + 32);
    v45 = *(int8x16_t *)(a1 + 80);
    v48 = *(int8x16_t *)(a1 + 64);
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, result);
    v9 = v45;
    v8 = v48;
    v7 = v51;
    v6 = v54;
    v5 = result;
  }
  v5[2] = v11 + 1;
  *(int8x16_t *)&v5[2 * v11 + 4] = v9;
  v12 = v1 - 1;
  if (v1 == 1)
    return v5;
  if (one-time initialization token for kPrevJointIsWrist != -1)
  {
    v52 = v7;
    v55 = v6;
    v46 = v9;
    v49 = v8;
    result = (_QWORD *)swift_once();
    v9 = v46;
    v8 = v49;
    v7 = v52;
    v6 = v55;
  }
  v13 = *(_QWORD *)(static HandPoseBuilder.kPrevJointIsWrist + 16);
  if (v13 >= 2 && v1 <= v13)
  {
    v15 = (_BYTE *)(static HandPoseBuilder.kPrevJointIsWrist + 33);
    v16 = (float32x4_t *)(a1 + 144);
    v17 = v5[2];
    v18 = v9;
    v19 = v8;
    v20 = v7;
    v21 = v6;
    do
    {
      if (*v15)
        v22 = -1;
      else
        v22 = 0;
      v24 = v16[-3];
      v23 = v16[-2];
      v26 = v16[-1];
      v25 = *v16;
      v27 = v5[3];
      if (v17 >= v27 >> 1)
      {
        v50 = v7;
        v53 = v6;
        v44 = v9;
        v47 = v8;
        v42 = v20;
        v43 = v21;
        v40 = v19;
        v41 = v4;
        v38 = *v16;
        v39 = v18;
        v36 = v16[-2];
        v37 = v16[-1];
        v35 = v16[-3];
        v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v17 + 1, 1, v5);
        v24 = v35;
        v23 = v36;
        v26 = v37;
        v25 = v38;
        v18 = v39;
        v19 = v40;
        v4 = v41;
        v20 = v42;
        v21 = v43;
        v9 = v44;
        v8 = v47;
        v7 = v50;
        v6 = v53;
        v5 = v34;
      }
      v28 = (int8x16_t)vdupq_n_s32(v22);
      v29 = (float32x4_t)vbslq_s8(v28, v9, v18);
      v30 = (float32x4_t)vbslq_s8(v28, v8, v19);
      v31 = (float32x4_t)vbslq_s8(v28, v7, v20);
      v32 = (float32x4_t)vbslq_s8(v28, v6, v21);
      v21 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v24.f32[0]), v31, *(float32x2_t *)v24.f32, 1), v30, v24, 2), v29, v24, 3);
      v20 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v23.f32[0]), v31, *(float32x2_t *)v23.f32, 1), v30, v23, 2), v29, v23, 3);
      v19 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v26.f32[0]), v31, *(float32x2_t *)v26.f32, 1), v30, v26, 2), v29, v26, 3);
      v18 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v25.f32[0]), v31, *(float32x2_t *)v25.f32, 1), v30, v25, 2), v29, v25, 3);
      v33 = v18;
      v33.i32[3] = v4;
      ++v15;
      v5[2] = v17 + 1;
      *(int8x16_t *)&v5[2 * v17 + 4] = v33;
      v16 += 4;
      ++v17;
      --v12;
    }
    while (v12);
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t initializeWithCopy for HandPose(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HandPose(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  return a1;
}

__n128 __swift_memcpy120_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for HandPose(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandPose(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandPose(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandPose()
{
  return &type metadata for HandPose;
}

uint64_t sub_23D715438()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in InvalidHandPoseData.sendCoreAnalytics()()
{
  uint64_t v0;

  return closure #1 in InvalidHandPoseData.sendCoreAnalytics()(v0 + 16, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_23D715480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 40) >= 0x1AuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = (v3 + 96) & ~v3;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23D715538()
{
  return swift_deallocObject();
}

uint64_t _sIg_Ieg_TRTA_0()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t outlined init with copy of Matrix2dPB?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Matrix2dPB?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of simd_float4x4?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_float4x4?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Matrix2dPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Matrix2dPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of JointTransformPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JointTransformPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CPUEspressoRegressor.init(bundle:modelName:inputNames:outputNames:platform:)(void *a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  unint64_t v28;
  uint64_t context;
  uint64_t plan;
  int v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char v76;
  _QWORD *v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  char v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t i;
  _QWORD *v96;
  void *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t j;
  _QWORD *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;

  v7 = v6;
  v129 = *MEMORY[0x24BDAC8D0];
  v12 = MEMORY[0x24BEE4AF8];
  v6[10] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v96 = v6 + 10;
  v6[11] = specialized Dictionary.init(dictionaryLiteral:)(v12);
  v13 = (unint64_t)(v6 + 11);
  v6[8] = a2;
  v6[9] = a3;
  v14 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x2426372E8](a2, a3);
  LODWORD(v14) = objc_msgSend(v14, sel_isAbsolutePath_, v15);

  if ((_DWORD)v14)
  {
    v97 = a1;
    *((_QWORD *)&v116 + 1) = a3;
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = 0x737365727073652ELL;
    v16._object = (void *)0xED000074656E2E6FLL;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17 = a2;
  }
  else
  {
    v18 = (void *)MEMORY[0x2426372E8](a2, a3);
    v19 = (void *)MEMORY[0x2426372E8](0x737365727073652ELL, 0xED000074656E2E6FLL);
    v20 = objc_msgSend(a1, sel_pathForResource_ofType_, v18, v19);

    if (!v20)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v116 = xmmword_23D9AB750;
      v117 = 0uLL;
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v105 = 0xD00000000000002ELL;
      *((_QWORD *)&v105 + 1) = 0x800000023D9C74B0;
      v32._countAndFlagsBits = a2;
      v32._object = a3;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      *((_QWORD *)&v106 + 1) = MEMORY[0x24BEE0D00];
      specialized static HLog.W(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9C73C0, 55, (uint64_t *)&v116, (uint64_t)&v105, MEMORY[0x24BEE4AF8]);

      goto LABEL_16;
    }
    v97 = a1;
    swift_bridgeObjectRelease();
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    a3 = v21;

  }
  v22 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v23 = (void *)MEMORY[0x2426372E8](v17, a3);
  v24 = objc_msgSend(v22, sel_fileExistsAtPath_, v23);

  if (!v24)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v116 = xmmword_23D9AB750;
    v117 = 0uLL;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v105 = 0xD00000000000001DLL;
    *((_QWORD *)&v105 + 1) = 0x800000023D9C74E0;
    v27._countAndFlagsBits = v17;
    v27._object = a3;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v106 + 1) = MEMORY[0x24BEE0D00];
    specialized static HLog.W(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9C73C0, 59, (uint64_t *)&v116, (uint64_t)&v105, MEMORY[0x24BEE4AF8]);

LABEL_16:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v105);
LABEL_45:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v7[6] = v17;
  v7[7] = a3;
  v116 = xmmword_23D9AB750;
  v117 = 0uLL;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v105 = v17;
  *((_QWORD *)&v105 + 1) = a3;
  v25 = 0xD000000000000010;
  if ((a6 & 1) != 0)
  {
    v28 = 0x800000023D9C7500;
    String.append(_:)(*(Swift::String *)&v25);
    *((_QWORD *)&v106 + 1) = MEMORY[0x24BEE0D00];
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9C73C0, 74, (uint64_t *)&v116, (uint64_t)&v105, MEMORY[0x24BEE4AF8]);
  }
  else
  {
    v26 = 0x800000023D9C7560;
    String.append(_:)(*(Swift::String *)&v25);
    *((_QWORD *)&v106 + 1) = MEMORY[0x24BEE0D00];
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9C73C0, 70, (uint64_t *)&v116, (uint64_t)&v105, MEMORY[0x24BEE4AF8]);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v105);
  context = espresso_create_context();
  if (!context)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v116 = xmmword_23D9AB750;
    v117 = 0uLL;
    *(_QWORD *)&v105 = 0;
    *((_QWORD *)&v105 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v33._countAndFlagsBits = 0xD000000000000038;
    v33._object = (void *)0x800000023D9C7520;
    String.append(_:)(v33);
    v34._countAndFlagsBits = v17;
    v34._object = a3;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v106 + 1) = MEMORY[0x24BEE0D00];
    specialized static HLog.W(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9C73C0, 78, (uint64_t *)&v116, (uint64_t)&v105, MEMORY[0x24BEE4AF8]);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v105);
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  v7[3] = context;
  plan = espresso_create_plan();
  if (!plan)
  {
    __break(1u);
LABEL_88:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v7[2] = plan;
  v127 = 0;
  v128 = 0;
  String.utf8CString.getter();
  v31 = espresso_plan_add_network();
  swift_release();
  if (v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized static CPUEspressoRegressor.throwException(_:forNetwork:)(v7[2], v17, a3);
    if (v100)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_deallocPartialClassInstance();
      return (uint64_t)v7;
    }
    swift_bridgeObjectRelease();

    goto LABEL_44;
  }
  v35 = v128;
  v7[4] = v127;
  *((_DWORD *)v7 + 10) = v35;
  v36 = a4;
  v37 = *(_QWORD *)(a4 + 16);
  v92 = v37;
  v93 = v17;
  if (!v37)
    goto LABEL_23;
  swift_bridgeObjectRetain();
  v38 = a4 + 40;
  do
  {
    v39 = *((unsigned int *)v7 + 10);
    String.utf8CString.getter();
    v36 = v36 & 0xFFFFFFFF00000000 | v39;
    v40 = espresso_network_declare_input();
    swift_release();
    if (v40)
    {
LABEL_51:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v69 = v7[2];
      v70 = v93;
LABEL_52:
      specialized static CPUEspressoRegressor.throwException(_:forNetwork:)(v69, v70, a3);
      if (v100)
      {
        swift_bridgeObjectRelease();

        swift_release();
        return (uint64_t)v7;
      }
      goto LABEL_81;
    }
    v38 += 16;
    --v37;
  }
  while (v37);
  v36 = a4;
  swift_bridgeObjectRelease();
  v17 = v93;
LABEL_23:
  v41 = *(_QWORD *)(a5 + 16);
  if (!v41)
  {
    if (!espresso_plan_build())
    {
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
LABEL_50:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v69 = v7[2];
    v70 = v17;
    goto LABEL_52;
  }
  swift_bridgeObjectRetain();
  v42 = a5 + 40;
  v98 = v41;
  do
  {
    v43 = *((unsigned int *)v7 + 10);
    String.utf8CString.getter();
    v36 = v36 & 0xFFFFFFFF00000000 | v43;
    v44 = espresso_network_declare_output();
    swift_release();
    if (v44)
      goto LABEL_51;
    v42 += 16;
    --v41;
  }
  while (v41);
  swift_bridgeObjectRelease();
  v17 = v93;
  if (espresso_plan_build())
    goto LABEL_50;
  v45 = (uint64_t *)(a5 + 40);
  for (i = v98 - 1; ; --i)
  {
    v46 = *(v45 - 1);
    v47 = *v45;
    LODWORD(v126) = 0;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v48 = *((unsigned int *)v7 + 10);
    String.utf8CString.getter();
    v49 = v98 & 0xFFFFFFFF00000000 | v48;
    swift_bridgeObjectRetain();
    v50 = espresso_network_bind_buffer();
    swift_release();
    if (v50)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_79;
    }
    v98 = v49;
    v94 = v45;
    v113 = v124;
    v114 = v125;
    v115 = v126;
    v109 = v120;
    v110 = v121;
    v111 = v122;
    v112 = v123;
    v105 = v116;
    v106 = v117;
    v107 = v118;
    v108 = v119;
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52 = *(_QWORD **)v13;
    v104 = *(_QWORD **)v13;
    *(_QWORD *)v13 = 0x8000000000000000;
    v54 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v47);
    v55 = v52[2];
    v56 = (v53 & 1) == 0;
    v57 = v55 + v56;
    if (__OFADD__(v55, v56))
    {
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
    }
    v58 = v53;
    if (v52[3] >= v57)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v61 = v104;
        if ((v53 & 1) != 0)
          goto LABEL_37;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v61 = v104;
        if ((v58 & 1) != 0)
          goto LABEL_37;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
      v59 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v47);
      if ((v58 & 1) != (v60 & 1))
        goto LABEL_88;
      v54 = v59;
      v61 = v104;
      if ((v58 & 1) != 0)
      {
LABEL_37:
        v62 = v61[7] + 168 * v54;
        *(_OWORD *)(v62 + 112) = v112;
        *(_OWORD *)(v62 + 128) = v113;
        *(_OWORD *)(v62 + 144) = v114;
        *(_QWORD *)(v62 + 160) = v115;
        *(_OWORD *)(v62 + 48) = v108;
        *(_OWORD *)(v62 + 64) = v109;
        *(_OWORD *)(v62 + 80) = v110;
        *(_OWORD *)(v62 + 96) = v111;
        *(_OWORD *)v62 = v105;
        *(_OWORD *)(v62 + 16) = v106;
        *(_OWORD *)(v62 + 32) = v107;
        goto LABEL_41;
      }
    }
    v61[(v54 >> 6) + 8] |= 1 << v54;
    v63 = (uint64_t *)(v61[6] + 16 * v54);
    *v63 = v46;
    v63[1] = v47;
    v64 = v61[7] + 168 * v54;
    *(_OWORD *)(v64 + 96) = v111;
    *(_OWORD *)(v64 + 80) = v110;
    *(_OWORD *)(v64 + 64) = v109;
    *(_OWORD *)(v64 + 48) = v108;
    *(_QWORD *)(v64 + 160) = v115;
    *(_OWORD *)(v64 + 144) = v114;
    *(_OWORD *)(v64 + 128) = v113;
    *(_OWORD *)(v64 + 112) = v112;
    *(_OWORD *)v64 = v105;
    *(_OWORD *)(v64 + 16) = v106;
    *(_OWORD *)(v64 + 32) = v107;
    v65 = v61[2];
    v66 = __OFADD__(v65, 1);
    v67 = v65 + 1;
    if (v66)
      goto LABEL_86;
    v61[2] = v67;
    swift_bridgeObjectRetain();
LABEL_41:
    *(_QWORD *)v13 = v61;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (!i)
      break;
    v45 = v94 + 2;
  }
  swift_bridgeObjectRelease();
  v36 = a4;
LABEL_57:
  if (v92)
  {
    v71 = (uint64_t *)(v36 + 40);
    for (j = v92 - 1; ; --j)
    {
      v73 = *(v71 - 1);
      v72 = *v71;
      LODWORD(v126) = 0;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v74 = *((unsigned int *)v7 + 10);
      String.utf8CString.getter();
      v13 = v13 & 0xFFFFFFFF00000000 | v74;
      swift_bridgeObjectRetain();
      v75 = espresso_network_bind_buffer();
      swift_release();
      if (v75)
      {
        swift_bridgeObjectRelease();
LABEL_79:
        swift_bridgeObjectRelease();
        specialized static CPUEspressoRegressor.throwException(_:forNetwork:)(v7[2], v93, a3);
        if (v100)
        {
          swift_release();
          swift_bridgeObjectRelease();

          return (uint64_t)v7;
        }
LABEL_81:
        swift_release();
        swift_bridgeObjectRelease();

        return 0;
      }
      v99 = v71;
      if (v73 == 0x305F7364726F6F63 && v72 == 0xE900000000000078
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        LODWORD(v126) = 262152;
      }
      v113 = v124;
      v114 = v125;
      v115 = v126;
      v109 = v120;
      v110 = v121;
      v111 = v122;
      v112 = v123;
      v105 = v116;
      v106 = v117;
      v107 = v118;
      v108 = v119;
      swift_beginAccess();
      v76 = swift_isUniquelyReferenced_nonNull_native();
      v77 = (_QWORD *)*v96;
      *v96 = 0x8000000000000000;
      v79 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v72);
      v80 = v77[2];
      v81 = (v78 & 1) == 0;
      v82 = v80 + v81;
      if (__OFADD__(v80, v81))
      {
        __break(1u);
        goto LABEL_84;
      }
      v83 = v78;
      if (v77[3] >= v82)
      {
        if ((v76 & 1) != 0)
        {
          v86 = v77;
          if ((v78 & 1) != 0)
            goto LABEL_71;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v86 = v77;
          if ((v83 & 1) != 0)
            goto LABEL_71;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v82, v76);
        v84 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v72);
        if ((v83 & 1) != (v85 & 1))
          goto LABEL_88;
        v79 = v84;
        v86 = v77;
        if ((v83 & 1) != 0)
        {
LABEL_71:
          v87 = v86[7] + 168 * v79;
          *(_OWORD *)(v87 + 112) = v112;
          *(_OWORD *)(v87 + 128) = v113;
          *(_OWORD *)(v87 + 144) = v114;
          *(_QWORD *)(v87 + 160) = v115;
          *(_OWORD *)(v87 + 48) = v108;
          *(_OWORD *)(v87 + 64) = v109;
          *(_OWORD *)(v87 + 80) = v110;
          *(_OWORD *)(v87 + 96) = v111;
          *(_OWORD *)v87 = v105;
          *(_OWORD *)(v87 + 16) = v106;
          *(_OWORD *)(v87 + 32) = v107;
          goto LABEL_75;
        }
      }
      v86[(v79 >> 6) + 8] |= 1 << v79;
      v88 = (uint64_t *)(v86[6] + 16 * v79);
      *v88 = v73;
      v88[1] = v72;
      v89 = v86[7] + 168 * v79;
      *(_OWORD *)(v89 + 96) = v111;
      *(_OWORD *)(v89 + 80) = v110;
      *(_OWORD *)(v89 + 64) = v109;
      *(_OWORD *)(v89 + 48) = v108;
      *(_QWORD *)(v89 + 160) = v115;
      *(_OWORD *)(v89 + 144) = v114;
      *(_OWORD *)(v89 + 128) = v113;
      *(_OWORD *)(v89 + 112) = v112;
      *(_OWORD *)v89 = v105;
      *(_OWORD *)(v89 + 16) = v106;
      *(_OWORD *)(v89 + 32) = v107;
      v90 = v86[2];
      v66 = __OFADD__(v90, 1);
      v91 = v90 + 1;
      if (v66)
        goto LABEL_85;
      v86[2] = v91;
      swift_bridgeObjectRetain();
LABEL_75:
      *v96 = v86;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      if (!j)
        break;
      v71 = v99 + 2;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v7;
}

uint64_t CPUEspressoRegressor.__deallocating_deinit()
{
  espresso_plan_destroy();
  espresso_context_destroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CPUEspressoRegressor()
{
  return objc_opt_self();
}

void *CPUEspressoRegressor.setInput(_:fromRawPointer:)(uint64_t a1, void *a2, const void *a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  size_t v14;
  Swift::String v15;
  _BYTE *v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[22];

  __dst[21] = *(void **)MEMORY[0x24BDAC8D0];
  swift_beginAccess();
  v7 = *(_QWORD *)(v3 + 80);
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_8;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    swift_endAccess();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    __dst[0] = (void *)0xD00000000000001ELL;
    __dst[1] = (void *)0x800000023D9C7580;
    v15._countAndFlagsBits = a1;
    v15._object = a2;
    String.append(_:)(v15);
    __dst[3] = (void *)MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v18 = xmmword_23D9AB750;
    v19 = 0;
    v20 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v18, 0xD000000000000061, 0x800000023D9C73C0, 177, (uint64_t)__dst, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)__dst);
    lazy protocol witness table accessor for type CPUEspressoRegressor.CPUEspressoException and conformance CPUEspressoRegressor.CPUEspressoException();
    swift_allocError();
    *v16 = 0;
    return (void *)swift_willThrow();
  }
  v10 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 168 * v8);
  v17 = (void *)v10[20];
  memmove(__dst, v10, 0xA0uLL);
  __dst[20] = v17;
  swift_endAccess();
  swift_bridgeObjectRelease();
  v11 = (uint64_t)objc_msgSend((id)objc_opt_self(), sel_EspressoStorageTypeToByteWidth_, v17);
  v12 = (uint64_t)objc_msgSend((id)objc_opt_self(), sel_getBufferLength_, __dst);
  result = __dst[0];
  if (__dst[0])
  {
    v14 = v11 * v12;
    if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63)
      __break(1u);
    if ((v14 & 0x8000000000000000) != 0)
    {
      result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      return memmove(__dst[0], a3, v14);
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CPUEspressoRegressor.setInput(_:fromCVPixelBuffer:)(Swift::String _, CVBufferRef fromCVPixelBuffer)
{
  int v2;
  _BYTE *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  CVPixelBufferGetBaseAddress(fromCVPixelBuffer);
  String.utf8CString.getter();
  v2 = espresso_network_bind_cvpixelbuffer();
  swift_release();
  if (v2)
  {
    v7[3] = MEMORY[0x24BEE0D00];
    v7[0] = 0xD00000000000003DLL;
    v7[1] = 0x800000023D9C7470;
    type metadata accessor for HandyLoggerNeo();
    v4 = xmmword_23D9AB750;
    v5 = 0;
    v6 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v4, 0xD000000000000061, 0x800000023D9C73C0, 187, (uint64_t)v7, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
    lazy protocol witness table accessor for type CPUEspressoRegressor.CPUEspressoException and conformance CPUEspressoRegressor.CPUEspressoException();
    swift_allocError();
    *v3 = 0;
    swift_willThrow();
  }
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CPUEspressoRegressor.getOutputLength(_:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  unint64_t v5;
  char v6;
  Swift::String v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD __dst[22];

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  __dst[21] = *MEMORY[0x24BDAC8D0];
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 88);
  if (*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if ((v6 & 1) != 0)
    {
      memmove(__dst, (const void *)(*(_QWORD *)(v4 + 56) + 168 * v5), 0xA8uLL);
      swift_endAccess();
      swift_bridgeObjectRelease();
      return (Swift::Int)objc_msgSend((id)objc_opt_self(), sel_getBufferLength_, __dst);
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  __dst[0] = 0xD00000000000001FLL;
  __dst[1] = 0x800000023D9C7430;
  v8._countAndFlagsBits = countAndFlagsBits;
  v8._object = object;
  String.append(_:)(v8);
  __dst[3] = MEMORY[0x24BEE0D00];
  type metadata accessor for HandyLoggerNeo();
  v10 = xmmword_23D9AB750;
  v11 = 0;
  v12 = 0;
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v10, 0xD000000000000061, 0x800000023D9C73C0, 201, (uint64_t)__dst, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)__dst);
  lazy protocol witness table accessor for type CPUEspressoRegressor.CPUEspressoException and conformance CPUEspressoRegressor.CPUEspressoException();
  swift_allocError();
  *v9 = 0;
  return swift_willThrow();
}

uint64_t CPUEspressoRegressor.getRawOutput(_:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  Swift::String v9;
  _BYTE *v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 88);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_endAccess();
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v15[0] = 0xD00000000000001FLL;
    v15[1] = 0x800000023D9C7430;
    v9._countAndFlagsBits = a1;
    v9._object = a2;
    String.append(_:)(v9);
    v15[3] = MEMORY[0x24BEE0D00];
    v8 = type metadata accessor for HandyLoggerNeo();
    v12 = xmmword_23D9AB750;
    v13 = 0;
    v14 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v12, 0xD000000000000061, 0x800000023D9C73C0, 209, (uint64_t)v15, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
    lazy protocol witness table accessor for type CPUEspressoRegressor.CPUEspressoException and conformance CPUEspressoRegressor.CPUEspressoException();
    swift_allocError();
    *v10 = 0;
    swift_willThrow();
    return v8;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 168 * v6);
  swift_endAccess();
  swift_bridgeObjectRelease();
  return v8;
}

void protocol witness for ModelRegressor.setInput(_:fromCVPixelBuffer:) in conformance CPUEspressoRegressor(uint64_t a1, uint64_t a2, __CVBuffer *a3)
{
  CPUEspressoRegressor.setInput(_:fromCVPixelBuffer:)(*(Swift::String *)&a1, a3);
}

uint64_t protocol witness for ModelRegressor.runNetwork(_:) in conformance CPUEspressoRegressor()
{
  return specialized CPUEspressoRegressor.runNetwork(_:)();
}

uint64_t protocol witness for ModelRegressor.getRawOutput(_:) in conformance CPUEspressoRegressor(uint64_t a1, void *a2)
{
  return CPUEspressoRegressor.getRawOutput(_:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type CPUEspressoRegressor.CPUEspressoException and conformance CPUEspressoRegressor.CPUEspressoException()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CPUEspressoRegressor.CPUEspressoException and conformance CPUEspressoRegressor.CPUEspressoException;
  if (!lazy protocol witness table cache variable for type CPUEspressoRegressor.CPUEspressoException and conformance CPUEspressoRegressor.CPUEspressoException)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CPUEspressoRegressor.CPUEspressoException, &unk_250E39798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CPUEspressoRegressor.CPUEspressoException and conformance CPUEspressoRegressor.CPUEspressoException);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CPUEspressoRegressor.CPUEspressoException and conformance CPUEspressoRegressor.CPUEspressoException;
  if (!lazy protocol witness table cache variable for type CPUEspressoRegressor.CPUEspressoException and conformance CPUEspressoRegressor.CPUEspressoException)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CPUEspressoRegressor.CPUEspressoException, &unk_250E39798);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CPUEspressoRegressor.CPUEspressoException and conformance CPUEspressoRegressor.CPUEspressoException);
  }
  return result;
}

uint64_t specialized static CPUEspressoRegressor.throwException(_:forNetwork:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  _BYTE *v13;
  _QWORD v14[4];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  result = espresso_plan_get_error_info();
  if (v6)
  {
    v7 = String.init(cString:)();
    v9 = v8;
    v15 = xmmword_23D9AB750;
    v16 = 0;
    v17 = 0;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v14[0] = 0xD000000000000015;
    v14[1] = 0x800000023D9C7450;
    v10._countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 544106784;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    v12._countAndFlagsBits = a2;
    v12._object = a3;
    String.append(_:)(v12);
    v14[3] = MEMORY[0x24BEE0D00];
    specialized static HLog.W(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9C73C0, 43, (uint64_t *)&v15, (uint64_t)v14, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
    lazy protocol witness table accessor for type CPUEspressoRegressor.CPUEspressoException and conformance CPUEspressoRegressor.CPUEspressoException();
    swift_allocError();
    *v13 = 0;
    return swift_willThrow();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized CPUEspressoRegressor.runNetwork(_:)()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  result = espresso_plan_execute_sync();
  if ((_DWORD)result)
  {
    v2 = v0[2];
    v4 = v0[6];
    v3 = (void *)v0[7];
    swift_bridgeObjectRetain();
    specialized static CPUEspressoRegressor.throwException(_:forNetwork:)(v2, v4, v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CPUEspressoRegressor.CPUEspressoException(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D717070 + 4 * byte_23D9AB765[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D7170A4 + 4 * byte_23D9AB760[v4]))();
}

uint64_t sub_23D7170A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7170AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D7170B4);
  return result;
}

uint64_t sub_23D7170C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D7170C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D7170CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D7170D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CPUEspressoRegressor.CPUEspressoException()
{
  return &unk_250E39798;
}

uint64_t type metadata accessor for PinchModelOutputHelper()
{
  return objc_opt_self();
}

uint64_t static Detection2DComputePipelineFactory.createPipeline(config:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t ObjCClassFromMetadata;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __objc2_class *Class;
  void *v23;
  uint64_t v24;
  uint64_t (*v25)();
  uint64_t v26;
  uint64_t *v27;
  unint64_t *v28;
  void *v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  __int128 v37;
  uint64_t v38;
  _UNKNOWN **v39;
  id v40;

  result = static Detection2DComputePipelineFactory.createModelParams(config:)(a1);
  if (!v2)
  {
    v7 = v5;
    v8 = v6;
    v35 = result;
    v36 = a2;
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v40 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v10 = *v7;
    v11 = *(uint64_t (**)(void))(*v7 + 152);
    v12 = v11();
    v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D9A70A0;
    *(_QWORD *)(inited + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 112))(v10, v8);
    *(_QWORD *)(inited + 40) = v16;
    v17 = specialized Set.init<A>(_:)(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    specialized E5RTRegressor.__allocating_init(bundle:modelPath:directBindInputNames:directBindOutputNames:configName:)(v40, v12, v14, v17, MEMORY[0x24BEE4B08], 1852399981, 0xE400000000000000);
    v19 = v18;
    if (v18)
    {
      type metadata accessor for DetectionUtils.ImagePreprocessor();
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = 0;
      type metadata accessor for PixelTransferSessionManager();
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)(v20 + 24) = v21;
      Class = (__objc2_class *)object_getClass(v7);
      if ((v35 & 1) != 0)
      {
        if (Class == _TtC5Hands23SSDDetectionModelParams)
          v33 = v7;
        else
          v33 = 0;
        v38 = type metadata accessor for E5RTRegressor();
        v39 = &protocol witness table for E5RTRegressor;
        *(_QWORD *)&v37 = v19;
        v34 = type metadata accessor for SSDDetection2DComputePipeline();
        v25 = type metadata accessor for SSDDetection2DComputePipeline;
        v26 = swift_allocObject();
        *(_QWORD *)(v26 + 16) = v33;
        outlined init with take of PinchCancellationModule(&v37, v26 + 24);
        *(_QWORD *)(v26 + 64) = v20;
        v27 = v36;
        v36[3] = v34;
        v28 = (unint64_t *)&lazy protocol witness table cache variable for type SSDDetection2DComputePipeline and conformance SSDDetection2DComputePipeline;
        v29 = &protocol conformance descriptor for SSDDetection2DComputePipeline;
      }
      else
      {
        if (Class == _TtC5Hands29CenterNetDetectionModelParams)
          v23 = v7;
        else
          v23 = 0;
        v38 = type metadata accessor for E5RTRegressor();
        v39 = &protocol witness table for E5RTRegressor;
        *(_QWORD *)&v37 = v19;
        v24 = type metadata accessor for CenternetDetection2DComputePipeline();
        v25 = type metadata accessor for CenternetDetection2DComputePipeline;
        v26 = swift_allocObject();
        *(_QWORD *)(v26 + 16) = v23;
        outlined init with take of PinchCancellationModule(&v37, v26 + 24);
        *(_QWORD *)(v26 + 64) = v20;
        v27 = v36;
        v36[3] = v24;
        v28 = (unint64_t *)&lazy protocol witness table cache variable for type CenternetDetection2DComputePipeline and conformance CenternetDetection2DComputePipeline;
        v29 = &protocol conformance descriptor for CenternetDetection2DComputePipeline;
      }
      result = lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(v28, (uint64_t (*)(uint64_t))v25, (uint64_t)v29);
      v27[4] = result;
      *v27 = v26;
    }
    else
    {
      _StringGuts.grow(_:)(37);
      v30 = swift_bridgeObjectRelease();
      v31._countAndFlagsBits = ((uint64_t (*)(uint64_t))v11)(v30);
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type Detection2DError and conformance Detection2DError();
      swift_allocError();
      *(_QWORD *)v32 = 0xD000000000000023;
      *(_QWORD *)(v32 + 8) = 0x800000023D9C77B0;
      *(_BYTE *)(v32 + 16) = 1;
      swift_willThrow();
      return swift_release();
    }
  }
  return result;
}

uint64_t static Detection2DComputePipelineFactory.createModelParams(config:)(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t ObjCClassFromMetadata;
  id v10;
  void *v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  Swift::Int v16;
  uint64_t v17;
  void (*v18)(uint64_t, void *, uint64_t, void *, id, unint64_t);
  id v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  void *v26;
  Swift::String v27;
  uint64_t v28;
  Swift::String v29;

  v29._countAndFlagsBits = specialized static Detection2DComputePipelineFactory.getModelPaths(_:)(a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = objc_opt_self();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v10 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v11 = (void *)MEMORY[0x2426372E8](v5, v7);
  v12 = objc_msgSend((id)v8, sel_loadConfig_modelPath_, v10, v11);

  if (v12
    && (v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
        v12,
        v13 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v8),
        swift_bridgeObjectRelease(),
        v13))
  {
    v26 = v3;
    if (*(_QWORD *)(v13 + 16)
      && (v14 = specialized __RawDictionaryStorage.find<A>(_:)(1751347809, 0xE400000000000000), (v15 & 1) != 0)
      && (outlined init with copy of Any(*(_QWORD *)(v13 + 56) + 32 * v14, (uint64_t)&v28), (swift_dynamicCast() & 1) != 0)
      && (v16 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DetectionModelArch.init(rawValue:), v27), swift_bridgeObjectRelease(), !v16))
    {
      v17 = type metadata accessor for CenterNetDetectionModelParams();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CenterNetDetectionModelParams and conformance CenterNetDetectionModelParams, (uint64_t (*)(uint64_t))type metadata accessor for CenterNetDetectionModelParams, (uint64_t)&protocol conformance descriptor for CenterNetDetectionModelParams);
      v8 = 0;
    }
    else
    {
      v17 = type metadata accessor for SSDDetectionModelParams();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type SSDDetectionModelParams and conformance SSDDetectionModelParams, (uint64_t (*)(uint64_t))type metadata accessor for SSDDetectionModelParams, (uint64_t)&protocol conformance descriptor for SSDDetectionModelParams);
      v8 = 1;
    }
    v18 = *(void (**)(uint64_t, void *, uint64_t, void *, id, unint64_t))(v17 + 448);
    v19 = a1;
    v18(v29._countAndFlagsBits, v26, v5, v7, v19, v13);
  }
  else
  {
    _StringGuts.grow(_:)(53);
    v20._countAndFlagsBits = 0xD000000000000020;
    v20._object = (void *)0x800000023D9C7660;
    String.append(_:)(v20);
    v21._countAndFlagsBits = v29._countAndFlagsBits;
    v21._object = v3;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x800000023D9C7690;
    v22._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v22);
    v23._countAndFlagsBits = v5;
    v23._object = v7;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Detection2DError and conformance Detection2DError();
    swift_allocError();
    *(_QWORD *)v24 = 0;
    *(_QWORD *)(v24 + 8) = 0xE000000000000000;
    *(_BYTE *)(v24 + 16) = 0;
    swift_willThrow();
  }
  return v8;
}

uint64_t type metadata accessor for Detection2DComputePipelineFactory()
{
  return objc_opt_self();
}

uint64_t specialized static Detection2DComputePipelineFactory.getModelPaths(_:)(void *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;

  v2 = objc_msgSend(a1, sel_MonoDetectionModel);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  if (objc_msgSend(a1, sel_Enable640Mode))
  {
    v6._countAndFlagsBits = 808728159;
    v6._object = (void *)0xE400000000000000;
    String.append(_:)(v6);
  }
  type metadata accessor for ModelUtils();
  swift_bridgeObjectRetain();
  static ModelUtils.getModelPath(modelDir:modelName:allowInternalModel:expectAbsolute:)(0xD000000000000028, (void *)0x800000023D9C76B0, v3, v5, (int)objc_msgSend(a1, sel_AllowInternalModel), 0);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t lazy protocol witness table accessor for type Detection2DError and conformance Detection2DError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Detection2DError and conformance Detection2DError;
  if (!lazy protocol witness table cache variable for type Detection2DError and conformance Detection2DError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for Detection2DError, &type metadata for Detection2DError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Detection2DError and conformance Detection2DError);
  }
  return result;
}

unint64_t type metadata accessor for ModelUtils()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ModelUtils;
  if (!lazy cache variable for type metadata for ModelUtils)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ModelUtils);
  }
  return result;
}

ValueMetadata *type metadata accessor for Detection2DError()
{
  return &type metadata for Detection2DError;
}

double ImageData.getImageSize()()
{
  uint64_t v0;

  return *(double *)(v0 + 184);
}

uint64_t static CameraModel.fromHandsKitCameraModel(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  if (result == 1)
    v2 = 1;
  else
    v2 = result;
  if (result)
  {
    v3 = result == 1;
  }
  else
  {
    v2 = 0;
    v3 = 1;
  }
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

unint64_t static CameraSource.fromHandsKitCameraSource(_:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 0xA;
  return result;
}

id ImageData.detectionPixelBuffer.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void ImageData.detectionPixelBuffer.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*ImageData.detectionPixelBuffer.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.timeStamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ImageData.timeStamp.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[1] = result;
  v3[2] = a2;
  v3[3] = a3;
  return result;
}

uint64_t (*ImageData.timeStamp.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.midExposureTimeStamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t ImageData.midExposureTimeStamp.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = result;
  v3[5] = a2;
  v3[6] = a3;
  return result;
}

uint64_t (*ImageData.midExposureTimeStamp.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

void *ImageData.pixelBuffer.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 56);
  v2 = v1;
  return v1;
}

void ImageData.pixelBuffer.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
}

uint64_t (*ImageData.pixelBuffer.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.calibrationData.getter()
{
  return swift_retain();
}

uint64_t ImageData.calibrationData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*ImageData.calibrationData.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

void ImageData.cameraSource.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 80);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 72);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t ImageData.cameraSource.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 80) = v2;
  return result;
}

uint64_t (*ImageData.cameraSource.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.imageRotation.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 84) = result;
  return result;
}

uint64_t (*ImageData.imageRotation.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.sourceCameraKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ImageData.sourceCameraKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = a2;
  return result;
}

uint64_t (*ImageData.sourceCameraKey.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.jpegData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 112));
  return v1;
}

uint64_t ImageData.jpegData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data?(*(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112));
  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = a2;
  return result;
}

uint64_t (*ImageData.jpegData.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.rawImageData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 128));
  return v1;
}

uint64_t ImageData.rawImageData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data?(*(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128));
  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return result;
}

uint64_t (*ImageData.rawImageData.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.expirationTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 136);
}

uint64_t ImageData.expirationTime.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = result;
  return result;
}

uint64_t (*ImageData.expirationTime.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.prewittCurrent.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

uint64_t ImageData.prewittCurrent.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = result;
  return result;
}

uint64_t (*ImageData.prewittCurrent.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.prewittPulseWidth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 152);
}

uint64_t ImageData.prewittPulseWidth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 152) = result;
  return result;
}

uint64_t (*ImageData.prewittPulseWidth.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.aeAverage.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160);
}

uint64_t ImageData.aeAverage.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = result;
  return result;
}

uint64_t (*ImageData.aeAverage.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.darkestHandAverage.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 168);
}

uint64_t ImageData.darkestHandAverage.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 168) = result;
  return result;
}

uint64_t (*ImageData.darkestHandAverage.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t ImageData.brightestHandAverage.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

uint64_t ImageData.brightestHandAverage.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 176) = result;
  return result;
}

uint64_t (*ImageData.brightestHandAverage.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

id one-time initialization function for _jpegDecoder()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for JpegDecoder()), sel_init);
  static ImageData._jpegDecoder = (uint64_t)result;
  return result;
}

size_t ImageData.init(image:andTimestamp:andMidExposureTimestamp:andExpirationTimestamp:andCalibrationData:forCameraSource:withImageRotation:detectionPixelBuffer:withKey:jpegData:rawImageData:prewittCurrent:prewittPulseWidth:aeAverage:darkestHandAverage:brightestHandAverage:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint32x2_t *a10, uint64_t a11, int a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  id v28;
  __CVBuffer *v29;
  int64_t Width;
  size_t result;
  uint64_t v32;
  float32x2_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char v47;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float32x2_t v67;
  char v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint32x2_t *v92;
  uint64_t v93;
  char v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float32x2_t v108;

  v71 = *(_QWORD *)a11;
  v70 = *(_BYTE *)(a11 + 8);
  if (a1)
  {
    v28 = a13;
    v29 = a1;
    Width = CVPixelBufferGetWidth(v29);
    result = CVPixelBufferGetHeight(v29);
    if ((unsigned __int128)(Width * (__int128)7) >> 64 != (7 * Width) >> 63)
    {
      __break(1u);
      return result;
    }
    if (result == 7 * Width / 4)
      v32 = Width;
    else
      v32 = result;
    v33.f32[0] = (float)Width;
    v33.f32[1] = (float)v32;
    v67 = v33;
  }
  else
  {
    swift_beginAccess();
    v67 = vcvt_f32_u32(a10[18]);
    v34 = a13;
  }
  v36 = a23;
  v35 = a24;
  v38 = a21;
  v37 = a22;
  v40 = a19;
  v39 = a20;
  v42 = a17;
  v41 = a18;
  v44 = a15;
  v43 = a16;
  v45 = a12;
  v46 = v71;
  v47 = v70;
  if (!a15)
  {
    v84 = v71;
    LOBYTE(v85) = v70;
    a14 = specialized static VideoDataStructs.CameraTrackInfo.createWarpedStreamKey(for:asBinned:)(&v84);
    v42 = a17;
    v41 = a18;
    v40 = a19;
    v39 = a20;
    v38 = a21;
    v37 = a22;
    v36 = a23;
    v43 = a16;
    v35 = a24;
    v47 = v70;
    v46 = v71;
    v44 = v49;
    v45 = a12;
  }
  v56 = a14;
  v57 = v42;
  v58 = v41;
  v59 = v40;
  v60 = v39;
  v61 = v38;
  v62 = v37;
  v63 = v36;
  *(_QWORD *)&v72 = a13;
  *((_QWORD *)&v72 + 1) = a2;
  *(_QWORD *)&v73 = a3;
  *((_QWORD *)&v73 + 1) = a4;
  *(_QWORD *)&v74 = a5;
  *((_QWORD *)&v74 + 1) = a6;
  *(_QWORD *)&v75 = a7;
  *((_QWORD *)&v75 + 1) = a1;
  *(_QWORD *)&v76 = a10;
  *((_QWORD *)&v76 + 1) = v46;
  LOBYTE(v77) = v47;
  DWORD1(v77) = v45;
  *((_QWORD *)&v77 + 1) = a14;
  *(_QWORD *)&v78 = v44;
  *((_QWORD *)&v78 + 1) = v43;
  *(_QWORD *)&v79 = v42;
  *((_QWORD *)&v79 + 1) = v41;
  *(_QWORD *)&v80 = v40;
  *((_QWORD *)&v80 + 1) = a8;
  *(_QWORD *)&v81 = v39;
  *((_QWORD *)&v81 + 1) = v38;
  *(_QWORD *)&v82 = v37;
  *((_QWORD *)&v82 + 1) = v36;
  *(_QWORD *)&v83 = v35;
  *((float32x2_t *)&v83 + 1) = v67;
  swift_bridgeObjectRetain();
  outlined retain of ImageData((uint64_t)&v72);
  swift_bridgeObjectRelease();

  v50 = v81;
  a9[8] = v80;
  a9[9] = v50;
  v51 = v83;
  a9[10] = v82;
  a9[11] = v51;
  v52 = v77;
  a9[4] = v76;
  a9[5] = v52;
  v53 = v79;
  a9[6] = v78;
  a9[7] = v53;
  v54 = v73;
  *a9 = v72;
  a9[1] = v54;
  v55 = v75;
  a9[2] = v74;
  a9[3] = v55;
  v84 = (uint64_t)a13;
  v85 = a2;
  v86 = a3;
  v87 = a4;
  v88 = a5;
  v89 = a6;
  v90 = a7;
  v91 = a1;
  v92 = a10;
  v93 = v71;
  v94 = v70;
  v95 = a12;
  v96 = v56;
  v97 = v44;
  v98 = a16;
  v99 = v57;
  v100 = v58;
  v101 = v59;
  v102 = a8;
  v103 = v60;
  v104 = v61;
  v105 = v62;
  v106 = v63;
  v107 = a24;
  v108 = v67;
  return outlined release of ImageData((uint64_t)&v84);
}

uint64_t ImageData.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  __n128 v60;

  v55 = type metadata accessor for ImageCalibrationDataPB(0);
  v3 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55, v4);
  v57 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CMTimeProtobuf(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x24BDAC7A8](v6, v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = *(_QWORD *)(v1 + 8);
  v53 = *(_DWORD *)(v1 + 16);
  v56 = *(_QWORD *)(v1 + 64);
  v59 = *(_QWORD *)(v1 + 72);
  v58 = *(unsigned __int8 *)(v1 + 80);
  v48 = *(_DWORD *)(v1 + 84);
  v12 = *(_QWORD *)(v1 + 112);
  v13 = *(_QWORD *)(v1 + 120);
  v45 = *(_QWORD *)(v1 + 104);
  v46 = v13;
  v14 = *(_QWORD *)(v1 + 128);
  v49 = v12;
  v50 = v14;
  v15 = *(_QWORD *)(v1 + 152);
  v51 = *(_QWORD *)(v1 + 144);
  v52 = v15;
  v9.n128_u64[0] = *(_QWORD *)(v1 + 184);
  v60 = v9;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = 0;
  v16 = (int *)type metadata accessor for ImageDataPB(0);
  UnknownStorage.init()();
  v17 = a1 + v16[9];
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v18(v17, 1, 1, v6);
  v19 = a1 + v16[10];
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v21 = v55;
  v20(v19, 1, 1, v55);
  v22 = (uint64_t *)(a1 + v16[11]);
  *(_OWORD *)v22 = xmmword_23D9AB950;
  v23 = (uint64_t *)(a1 + v16[12]);
  v43 = v22;
  v44 = v23;
  *(_OWORD *)v23 = xmmword_23D9AB950;
  v24 = a1 + v16[13];
  *(_QWORD *)v24 = 0;
  v47 = (_QWORD *)v24;
  *(_BYTE *)(v24 + 8) = 1;
  v25 = a1 + v16[14];
  *(_QWORD *)v25 = 0;
  *(_BYTE *)(v25 + 8) = 1;
  v26 = v25;
  UnknownStorage.init()();
  *(_QWORD *)v11 = v54;
  *((_DWORD *)v11 + 2) = v53;
  outlined destroy of Coordinate3DPB?(v17, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v11, v17, type metadata accessor for CMTimeProtobuf);
  v18(v17, 0, 1, v6);
  v27 = v57;
  ImageCalibrationData.toProtoBuf()(v57);
  outlined destroy of Coordinate3DPB?(v19, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  outlined init with take of Matrix2dPB(v27, v19, type metadata accessor for ImageCalibrationDataPB);
  v20(v19, 0, 1, v21);
  *(_QWORD *)a1 = v59;
  *(_BYTE *)(a1 + 8) = v58;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
  result = swift_allocObject();
  v29 = v60.n128_u64[0];
  *(_OWORD *)(result + 16) = xmmword_23D9A7050;
  if ((~(_DWORD)v29 & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (*(float *)&v29 <= -2147500000.0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (*(float *)&v29 >= 2147500000.0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v30 = result;
  *(_DWORD *)(result + 32) = (int)*(float *)&v29;
  if ((~HIDWORD(v29) & 0x7F800000) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*((float *)&v29 + 1) <= -2147500000.0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*((float *)&v29 + 1) >= 2147500000.0)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  *(_DWORD *)(result + 36) = (int)*((float *)&v29 + 1);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v30;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = v48;
  v31 = v49;
  if (v49 >> 60 != 15)
  {
    v32 = v43;
    v33 = *v43;
    v34 = v43[1];
    v35 = v45;
    outlined copy of Data._Representation(v45, v49);
    result = outlined consume of Data?(v33, v34);
    *v32 = v35;
    v32[1] = v31;
  }
  v36 = v50;
  if (v50 >> 60 != 15)
  {
    v37 = v44;
    v38 = *v44;
    v39 = v44[1];
    v40 = v46;
    outlined copy of Data._Representation(v46, v50);
    result = outlined consume of Data?(v38, v39);
    *v37 = v40;
    v37[1] = v36;
  }
  v41 = v47;
  *v47 = v51;
  *((_BYTE *)v41 + 8) = 0;
  *(_QWORD *)v26 = v52;
  *(_BYTE *)(v26 + 8) = 0;
  return result;
}

Swift::Float __swiftcall ImageData.getImageWidth()()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Float result;

  v1 = *(_QWORD *)(v0 + 184);
  LODWORD(result) = v1;
  return result;
}

Swift::Float __swiftcall ImageData.getImageHeight()()
{
  uint64_t v0;

  return *(float *)(v0 + 188);
}

Swift::Int32 __swiftcall ImageData.getImageRotation()()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 84);
}

uint64_t ImageData.init(protoBuf:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *epoch;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  float32x2_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char *v69;
  uint64_t v70;
  int *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  size_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  CMTimeValue value;
  _OWORD *v93;
  uint64_t v94;
  int *v95;
  unint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  int v110;
  int v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float32x2_t v133;
  char v134;
  CMTime v135;

  v93 = (_OWORD *)a2;
  v90 = type metadata accessor for DispatchTime();
  v88 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90, v3);
  v87 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ImageDataPB(0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v86 = (uint64_t *)((char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (unint64_t)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for CMTimeProtobuf(0);
  value = *(_QWORD *)(v94 - 8);
  MEMORY[0x24BDAC7A8](v94, v12);
  v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = (uint64_t)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ImageCalibrationDataPB(0);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19, v21);
  epoch = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = 1;
  v95 = (int *)v5;
  v96 = a1;
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v5 + 40), v18, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
  {
    outlined init with take of Matrix2dPB(v18, (uint64_t)epoch, type metadata accessor for ImageCalibrationDataPB);
    goto LABEL_5;
  }
  UnknownStorage.init()();
  v24 = *(int *)(v19 + 20);
  if (one-time initialization token for defaultInstance != -1)
    goto LABEL_39;
  while (1)
  {
    *(_QWORD *)&epoch[v24] = static ImageCalibrationDataPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Coordinate3DPB?(v18, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
LABEL_5:
    v25 = v95;
    v26 = v96;
    v27 = specialized ImageCalibrationData.__allocating_init(protoBuf:)((uint64_t)epoch);
    if (!v27)
    {
      outlined destroy of Matrix3x3PB(v26, type metadata accessor for ImageDataPB);
      swift_bridgeObjectRelease();
      outlined consume of Data?(0, 0xF000000000000000);
      outlined consume of Data?(0, 0xF000000000000000);
      _s5Hands9ImageDataVSgWOi0_(&v109);
      return outlined init with take of ImageData?((uint64_t)&v109, (uint64_t)v93);
    }
    v24 = v27;
    v28 = *(_QWORD *)v26;
    v85 = *(unsigned __int8 *)(v26 + 8);
    v134 = v85;
    v18 = *(unsigned int *)(v26 + 36);
    outlined init with copy of (Int32, Matrix2dPB)(v26 + v25[9], v11, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(value + 48))(v11, 1, v94) == 1)
    {
      *(_QWORD *)v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v11, &demangling cache variable for type metadata for CMTimeProtobuf?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v11, (uint64_t)v14, type metadata accessor for CMTimeProtobuf);
    }
    v135 = CMTime.init(value:timescale:)(*(_QWORD *)v14, *((_DWORD *)v14 + 2));
    value = v135.value;
    v11 = *(_QWORD *)&v135.timescale;
    epoch = (char *)v135.epoch;
    outlined destroy of Matrix3x3PB((uint64_t)v14, type metadata accessor for CMTimeProtobuf);
    v30 = *(_QWORD *)(v26 + 16);
    v31 = *(_QWORD *)(v30 + 16);
    if (!v31)
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v31 != 1)
      break;
LABEL_38:
    __break(1u);
LABEL_39:
    swift_once();
  }
  v82 = v18;
  v83 = v28;
  v84 = v24;
  v32 = *(int *)(v30 + 36);
  v89 = *(int *)(v30 + 32);
  v33 = (uint64_t *)(v26 + v25[11]);
  v34 = (unint64_t)v33[1] >> 60;
  v94 = v11;
  v91 = epoch;
  if (v34 <= 0xE)
  {
    v36 = *(_QWORD *)v26;
    v37 = v26;
    v38 = v86;
    outlined init with copy of ImageDataPB(v37, (uint64_t)v86);
    if (v36)
      LOBYTE(v36) = *v38 != 1;
    v81 = v32;
    outlined destroy of Matrix3x3PB((uint64_t)v38, type metadata accessor for ImageDataPB);
    if (one-time initialization token for _jpegDecoder != -1)
      swift_once();
    v39 = (void *)static ImageData._jpegDecoder;
    v41 = *v33;
    v40 = v33[1];
    if (v40 >> 60 == 15)
      v42 = 0;
    else
      v42 = *v33;
    v80 = v42;
    v43 = 0xC000000000000000;
    if (v40 >> 60 != 15)
      v43 = v40;
    v86 = (_QWORD *)v43;
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 16) = 0;
    LOBYTE(v109) = v36;
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = v44;
    *(_QWORD *)(v45 + 24) = v39;
    swift_retain();
    v39;
    outlined copy of Data?(v41, v40);
    v32 = v81;
    v46 = v42;
    v47 = (unint64_t)v86;
    JpegDecoder.decodeImage(colorspace:width:height:data:completion:)((unsigned __int8 *)&v109, v89, v81, v46, (uint64_t)v86);
    swift_release();
    v48 = v87;
    static DispatchTime.distantFuture.getter();
    MEMORY[0x242637708](v48);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v48, v90);
    swift_beginAccess();
    v35 = *(void **)(v44 + 16);
    v49 = v35;
    swift_release();
    outlined consume of Data._Representation(v80, v47);
    v50 = *v33;
    v51 = v33[1];
    if (v51 >> 60 == 15)
      v52 = 0;
    else
      v52 = *v33;
    v88 = v52;
    v53 = 0xC000000000000000;
    if (v51 >> 60 != 15)
      v53 = v51;
    v90 = v53;
    outlined copy of Data?(v50, v51);
    outlined consume of Data?(0, 0xF000000000000000);
    v25 = v95;
    v26 = v96;
    v11 = v94;
  }
  else
  {
    v88 = 0;
    v35 = 0;
    v90 = 0xF000000000000000;
  }
  v96 = HIDWORD(v11);
  v54 = v26 + v25[12];
  v55 = *(_QWORD *)(v54 + 8);
  if (v55 >> 60 == 15)
  {
    v87 = 0;
    v55 = 0xF000000000000000;
    v56 = v89;
  }
  else
  {
    v57 = *(_QWORD *)v54;
    outlined copy of Data?(*(_QWORD *)v54, *(_QWORD *)(v54 + 8));
    v56 = v89;
    v58 = v32;
    v32 = (size_t)specialized static HandsPlaybackUtil.createPixelbufGrayscaleFromData(image:width:height:)(v57, v55, v89, v32);

    outlined consume of Data?(v57, v55);
    v87 = (char *)v57;
    outlined copy of Data._Representation(v57, v55);
    outlined consume of Data?(0, 0xF000000000000000);
    v35 = (void *)v32;
    LODWORD(v32) = v58;
  }
  v95 = (int *)v55;
  v59 = vcvt_f32_s32((int32x2_t)__PAIR64__(v32, v56));
  v60 = v26 + v25[13];
  v61 = v26;
  v62 = *(_BYTE *)(v60 + 8);
  v89 = v35;
  v63 = -1;
  v64 = -1;
  if ((v62 & 1) == 0)
  {
    v64 = *(_QWORD *)v60;
    v65 = v61 + v25[14];
    if (*(_BYTE *)(v65 + 8))
      v63 = 0;
    else
      v63 = *(_QWORD *)v65;
  }
  v86 = (_QWORD *)v64;
  v66 = v84;
  swift_retain();
  outlined destroy of Matrix3x3PB(v61, type metadata accessor for ImageDataPB);
  *(_QWORD *)&v97 = v35;
  *((_QWORD *)&v97 + 1) = value;
  *(_QWORD *)&v98 = __PAIR64__(v96, v94);
  *((_QWORD *)&v98 + 1) = v91;
  v99 = 0uLL;
  *(_QWORD *)&v100 = 0;
  *((_QWORD *)&v100 + 1) = v35;
  *(_QWORD *)&v101 = v66;
  v67 = v83;
  *((_QWORD *)&v101 + 1) = v83;
  LOBYTE(v102) = v85;
  v68 = v82;
  DWORD1(v102) = v82;
  *((_QWORD *)&v102 + 1) = 0;
  *(_QWORD *)&v103 = 0;
  v69 = v87;
  v70 = v88;
  *((_QWORD *)&v103 + 1) = v88;
  *(_QWORD *)&v104 = v90;
  v71 = v95;
  *((_QWORD *)&v104 + 1) = v87;
  v105 = (unint64_t)v95;
  *(_QWORD *)&v106 = v64;
  *((_QWORD *)&v107 + 1) = -1;
  *(_QWORD *)&v108 = -1;
  *((_QWORD *)&v106 + 1) = v63;
  *(_QWORD *)&v107 = -1;
  *((float32x2_t *)&v108 + 1) = v59;
  outlined retain of ImageData((uint64_t)&v97);

  swift_release();
  v72 = v106;
  v73 = v107;
  v74 = v104;
  v75 = v93;
  v93[8] = v105;
  v75[9] = v72;
  v76 = v108;
  v75[10] = v73;
  v75[11] = v76;
  v77 = v102;
  v75[4] = v101;
  v75[5] = v77;
  v75[6] = v103;
  v75[7] = v74;
  v78 = v98;
  *v75 = v97;
  v75[1] = v78;
  v79 = v100;
  v75[2] = v99;
  v75[3] = v79;
  _s5Hands13PoseImageCropVSgWOi_();
  *(_QWORD *)&v109 = v35;
  *((_QWORD *)&v109 + 1) = value;
  v110 = v94;
  v111 = v96;
  v112 = v91;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v116 = v35;
  v117 = v66;
  v118 = v67;
  v119 = v134;
  v120 = v68;
  v121 = 0;
  v122 = 0;
  v123 = v70;
  v124 = v90;
  v125 = v69;
  v126 = v71;
  v127 = 0;
  v128 = (uint64_t)v86;
  v132 = -1;
  v131 = -1;
  v129 = v63;
  v130 = -1;
  v133 = v59;
  return outlined release of ImageData((uint64_t)&v109);
}

Swift::Float __swiftcall ImageData.getImageChannels()()
{
  return 0.0;
}

BOOL static ImageData.!= infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[12];
  _OWORD v16[12];

  v2 = a1[9];
  v16[8] = a1[8];
  v16[9] = v2;
  v3 = a1[11];
  v16[10] = a1[10];
  v16[11] = v3;
  v4 = a1[5];
  v16[4] = a1[4];
  v16[5] = v4;
  v5 = a1[7];
  v16[6] = a1[6];
  v16[7] = v5;
  v6 = a1[1];
  v16[0] = *a1;
  v16[1] = v6;
  v7 = a1[3];
  v16[2] = a1[2];
  v16[3] = v7;
  v8 = a2[9];
  v15[8] = a2[8];
  v15[9] = v8;
  v9 = a2[11];
  v15[10] = a2[10];
  v15[11] = v9;
  v10 = a2[5];
  v15[4] = a2[4];
  v15[5] = v10;
  v11 = a2[7];
  v15[6] = a2[6];
  v15[7] = v11;
  v12 = a2[1];
  v15[0] = *a2;
  v15[1] = v12;
  v13 = a2[3];
  v15[2] = a2[2];
  v15[3] = v13;
  return (specialized static ImageData.== infix(_:_:)((uint64_t)v16, (uint64_t)v15) & 1) == 0;
}

Swift::Void __swiftcall ImageData.generateRawImageCopy()()
{
  _QWORD *v0;
  void *v1;
  _BYTE *BaseAddress;
  _BYTE *v3;
  int64_t Height;
  int64_t BytesPerRow;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __CVBuffer *pixelBuffer;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (void *)v0[7];
  if (v1)
  {
    pixelBuffer = v1;
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
    if (BaseAddress)
    {
      v3 = BaseAddress;
      Height = CVPixelBufferGetHeight(pixelBuffer);
      BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
      if ((unsigned __int128)(Height * (__int128)BytesPerRow) >> 64 == (Height * BytesPerRow) >> 63)
      {
        v6 = specialized Data.init(bytes:count:)(v3, Height * BytesPerRow);
        v8 = v7;
        outlined consume of Data?(v0[15], v0[16]);
        v0[15] = v6;
        v0[16] = v8;
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);

      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      v12 = MEMORY[0x24BEE0D00];
      v10 = 0xD000000000000027;
      v11 = 0x800000023D9C7860;
      specialized static HLog.E(file:function:line:_:_:)(0xD000000000000051, 0x800000023D9C77E0, 272, (uint64_t)&v10, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v10);
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);

    }
  }
  else
  {
    v12 = MEMORY[0x24BEE0D00];
    v10 = 0xD000000000000016;
    v11 = 0x800000023D9C7840;
    specialized static HLog.E(file:function:line:_:_:)(0xD000000000000051, 0x800000023D9C77E0, 264, (uint64_t)&v10, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v10);
  }
}

uint64_t ImageData.set(jpegData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v5 = *(_QWORD *)(v2 + 104);
  v6 = *(_QWORD *)(v2 + 112);
  outlined copy of Data._Representation(a1, a2);
  result = outlined consume of Data?(v5, v6);
  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = a2;
  return result;
}

uint64_t static ImageData.getImageRotationForN301(source:)(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8) == 1 && (*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL) == 4)
    return 270;
  else
    return 0;
}

double ImageData.removeReducedResolutionImages()@<D0>(_OWORD *a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  CVPixelBufferRef v9;
  id v10;
  id v11;
  CVPixelBufferRef v12;
  int v13;
  __CVBuffer *v14;
  id v15;
  __CVBuffer *v16;
  char v17;
  id v18;
  id v19;
  id v20;
  char v21;
  CVPixelBufferRef v22;
  __CVBuffer *v23;
  char v24;
  CVPixelBufferRef v25;
  __CVBuffer *v26;
  id v27;
  id v28;
  __CVBuffer *v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  double result;
  char v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __CVBuffer *v43;
  void *v44;
  BOOL v45;
  __int128 v46;
  _BYTE v47[32];
  __int128 v48;
  __int128 v49;
  _BYTE v50[48];
  _BYTE v51[64];
  __int128 v52;
  _BYTE v53[32];
  __int128 v54;
  __int128 v55;
  _BYTE v56[48];
  _BYTE v57[64];

  v3 = v1[9];
  *(_OWORD *)v57 = v1[8];
  *(_OWORD *)&v57[16] = v3;
  v4 = v1[11];
  *(_OWORD *)&v57[32] = v1[10];
  *(_OWORD *)&v57[48] = v4;
  v5 = v1[5];
  v55 = v1[4];
  *(_OWORD *)v56 = v5;
  v6 = v1[7];
  *(_OWORD *)&v56[16] = v1[6];
  *(_OWORD *)&v56[32] = v6;
  v7 = v1[1];
  v52 = *v1;
  *(_OWORD *)v53 = v7;
  v8 = v1[3];
  *(_OWORD *)&v53[16] = v1[2];
  v54 = v8;
  v9 = (CVPixelBufferRef)*((_QWORD *)&v8 + 1);
  v10 = *((id *)&v8 + 1);
  v11 = (id)v52;
  v12 = specialized static ImageData.baseImageOnlyPixelBuffer(_:)((__CVBuffer *)v52);

  v13 = v12 == 0;
  if (!v12)
  {
    if ((_QWORD)v52)
    {
      v13 = 0;
      v17 = 1;
      if (!v9)
        goto LABEL_16;
LABEL_7:
      v45 = v17;
      type metadata accessor for CVBufferRef(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CVBufferRef and conformance CVBufferRef, (uint64_t (*)(uint64_t))type metadata accessor for CVBufferRef, (uint64_t)&protocol conformance descriptor for CVBufferRef);
      v18 = v11;
      v19 = v10;
      v20 = v10;
      v21 = static _CFObject.== infix(_:_:)();

      if ((v21 & 1) == 0)
      {
        v10 = v19;
        goto LABEL_16;
      }
      if ((v13 & 1) == 0)
      {
        v22 = v12;
        v10 = v19;
LABEL_12:
        v44 = v10;

        v23 = v22;
        v24 = 0;
        v25 = v12;
        goto LABEL_26;
      }
LABEL_22:

      v31 = *(_OWORD *)&v57[16];
      a1[8] = *(_OWORD *)v57;
      a1[9] = v31;
      v32 = *(_OWORD *)&v57[48];
      a1[10] = *(_OWORD *)&v57[32];
      a1[11] = v32;
      v33 = *(_OWORD *)v56;
      a1[4] = v55;
      a1[5] = v33;
      v34 = *(_OWORD *)&v56[32];
      a1[6] = *(_OWORD *)&v56[16];
      a1[7] = v34;
      v35 = *(_OWORD *)v53;
      *a1 = v52;
      a1[1] = v35;
      v36 = v54;
      a1[2] = *(_OWORD *)&v53[16];
      a1[3] = v36;
      outlined retain of ImageData((uint64_t)&v52);
      return result;
    }
    if (!v9)
      goto LABEL_22;
LABEL_15:
    v26 = v12;
    goto LABEL_16;
  }
  if (!(_QWORD)v52)
  {
    if (!v9)
    {
      v22 = v12;
      v45 = 1;
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  type metadata accessor for CVBufferRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CVBufferRef and conformance CVBufferRef, (uint64_t (*)(uint64_t))type metadata accessor for CVBufferRef, (uint64_t)&protocol conformance descriptor for CVBufferRef);
  v14 = v12;
  v15 = v11;
  v16 = v14;
  v13 = static _CFObject.== infix(_:_:)();

  v17 = v13 ^ 1;
  if (v9)
    goto LABEL_7;
LABEL_16:
  v25 = specialized static ImageData.baseImageOnlyPixelBuffer(_:)(v9);

  if (v25)
  {
    if (v9)
    {
      type metadata accessor for CVBufferRef(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CVBufferRef and conformance CVBufferRef, (uint64_t (*)(uint64_t))type metadata accessor for CVBufferRef, (uint64_t)&protocol conformance descriptor for CVBufferRef);
      v27 = v10;
      v28 = v10;
      v29 = v25;
      v30 = static _CFObject.== infix(_:_:)();

      if ((v13 & v30 & 1) != 0)
      {
        v9 = v25;
        goto LABEL_22;
      }
      v44 = v28;
      v38 = v13 | v30 ^ 1;
    }
    else
    {
      v44 = v10;
      v38 = 1;
    }
    v45 = v38;
    v24 = v13;
  }
  else
  {
    v44 = v10;
    v45 = v9 != 0;
    v24 = (v9 != 0) & v13;
    if (!v9)
    {
      v9 = 0;
      if (((v13 ^ 1) & 1) == 0)
        goto LABEL_22;
    }
  }
LABEL_26:
  v40 = *(_QWORD *)&v56[40];
  v39 = *(_QWORD *)v57;
  outlined retain of ImageData((uint64_t)&v52);
  outlined copy of Data?(v40, v39);

  *(_QWORD *)v47 = *(_QWORD *)v53;
  *(_OWORD *)&v47[8] = *(_OWORD *)&v53[8];
  v42 = *(_QWORD *)&v56[24];
  v41 = *(_QWORD *)&v56[32];
  *(_QWORD *)&v47[24] = *(_QWORD *)&v53[24];
  *(_QWORD *)&v48 = v54;
  v49 = v55;
  v50[0] = v56[0];
  *(_DWORD *)&v50[4] = *(_DWORD *)&v56[4];
  *(_OWORD *)&v50[8] = *(_OWORD *)&v56[8];
  *(_OWORD *)&v50[24] = *(_OWORD *)&v56[24];
  *(_QWORD *)&v50[40] = v40;
  *(_QWORD *)v51 = v39;
  *(_OWORD *)&v51[8] = *(_OWORD *)&v57[8];
  *(_OWORD *)&v51[24] = *(_OWORD *)&v57[24];
  *(_OWORD *)&v51[40] = *(_OWORD *)&v57[40];
  *(_QWORD *)&v51[56] = *(_QWORD *)&v57[56];
  *(_QWORD *)&v46 = v12;
  *((_QWORD *)&v46 + 1) = *((_QWORD *)&v52 + 1);
  v43 = v25;

  outlined consume of Data?(v40, v39);
  *((_QWORD *)&v48 + 1) = v25;
  if (v45 && v39 >> 60 != 15 && v25)
    ImageData.generateRawImageCopy()();

  if (!(v24 & 1 | (v41 >> 60 == 15)))
  {
    outlined consume of Data?(v42, v41);
    *(_OWORD *)&v50[24] = xmmword_23D9AB950;
  }
  a1[8] = *(_OWORD *)v51;
  a1[9] = *(_OWORD *)&v51[16];
  a1[10] = *(_OWORD *)&v51[32];
  a1[11] = *(_OWORD *)&v51[48];
  a1[4] = v49;
  a1[5] = *(_OWORD *)v50;
  a1[6] = *(_OWORD *)&v50[16];
  a1[7] = *(_OWORD *)&v50[32];
  *a1 = v46;
  a1[1] = *(_OWORD *)v47;
  result = *(double *)&v47[16];
  a1[2] = *(_OWORD *)&v47[16];
  a1[3] = v48;
  return result;
}

uint64_t specialized Data.init(bytes:count:)(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return specialized Data.InlineData.init(_:)(__src, &__src[a2]);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  type metadata accessor for Data.RangeReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t specialized static ImageData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int32x2_t v2;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v2 = vceq_f32(*(float32x2_t *)(a1 + 184), *(float32x2_t *)(a2 + 184));
  if ((v2.i32[0] & v2.i32[1] & 1) != 0)
  {
    if ((specialized static ImageCalibrationData.== infix(_:_:)(*(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64)) & 1) != 0)
      return 1;
    v12 = xmmword_23D9A8970;
    v13 = 0;
    v14 = 0;
    v11 = MEMORY[0x24BEE0D00];
    v9 = 0xD000000000000015;
    v10 = 0x800000023D9C78D0;
    v7 = MEMORY[0x24BEE4AF8];
    v8 = 252;
  }
  else
  {
    v12 = xmmword_23D9A8970;
    v13 = 0;
    v14 = 0;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v9 = 0xD000000000000014;
    v10 = 0x800000023D9C78B0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>();
    v4._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = SIMD.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE0D00];
    v7 = MEMORY[0x24BEE4AF8];
    v8 = 247;
  }
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000051, 0x800000023D9C77E0, v8, (uint64_t *)&v12, (uint64_t)&v9, v7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v9);
  return 0;
}

CVPixelBufferRef specialized static ImageData.baseImageOnlyPixelBuffer(_:)(__CVBuffer *a1)
{
  CVPixelBufferRef v1;
  __CVBuffer *v2;
  int64_t Width;
  size_t Height;
  void *BaseAddress;
  void *v6;
  OSType PixelFormatType;
  size_t BytesPerRow;
  _QWORD v10[4];
  CVPixelBufferRef v11[2];

  v1 = a1;
  v11[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v2 = a1;
    Width = CVPixelBufferGetWidth(v2);
    Height = CVPixelBufferGetHeight(v2);
    if ((unsigned __int128)(Width * (__int128)7) >> 64 != (7 * Width) >> 63)
      __break(1u);
    if (Height == 7 * Width / 4)
    {
      CVPixelBufferLockBaseAddress(v2, 0);
      v11[0] = 0;
      BaseAddress = CVPixelBufferGetBaseAddress(v2);
      if (BaseAddress
        && (v6 = BaseAddress,
            PixelFormatType = CVPixelBufferGetPixelFormatType(v2),
            BytesPerRow = CVPixelBufferGetBytesPerRow(v2),
            !CVPixelBufferCreateWithBytes(0, Width, Width, PixelFormatType, v6, BytesPerRow, 0, 0, 0, v11)))
      {
        v1 = v11[0];
      }
      else
      {
        v10[3] = MEMORY[0x24BEE0D00];
        v10[0] = 0xD00000000000001CLL;
        v10[1] = 0x800000023D9C7890;
        specialized static HLog.E(file:function:line:_:_:)(0xD000000000000051, 0x800000023D9C77E0, 318, (uint64_t)v10, MEMORY[0x24BEE4AF8]);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);

        v1 = 0;
      }
      CVPixelBufferUnlockBaseAddress(v2, 0);

    }
  }
  return v1;
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in ImageData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageDataPB and conformance ImageDataPB, type metadata accessor for ImageDataPB, (uint64_t)&protocol conformance descriptor for ImageDataPB);
}

uint64_t destroy for ImageData(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;

  swift_release();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 112);
  if (v3 >> 60 != 15)
    result = outlined consume of Data._Representation(*(_QWORD *)(a1 + 104), v3);
  v4 = *(_QWORD *)(a1 + 128);
  if (v4 >> 60 != 15)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + 120), v4);
  return result;
}

uint64_t initializeWithCopy for ImageData(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  v8 = (uint64_t *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 112);
  v10 = v4;
  v11 = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v8;
  }
  else
  {
    v12 = *v8;
    outlined copy of Data._Representation(*v8, v9);
    *(_QWORD *)(a1 + 104) = v12;
    *(_QWORD *)(a1 + 112) = v9;
  }
  v13 = (uint64_t *)(a2 + 120);
  v14 = *(_QWORD *)(a2 + 128);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 120) = *(_OWORD *)v13;
  }
  else
  {
    v15 = *v13;
    outlined copy of Data._Representation(*v13, *(_QWORD *)(a2 + 128));
    *(_QWORD *)(a1 + 120) = v15;
    *(_QWORD *)(a1 + 128) = v14;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  return a1;
}

uint64_t assignWithCopy for ImageData(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(void **)(a1 + 56);
  v8 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = v8;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  v10 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v10;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(a2 + 104);
  v12 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112) >> 60 == 15)
  {
    if (v12 >> 60 != 15)
    {
      v13 = *v11;
      outlined copy of Data._Representation(*v11, *(_QWORD *)(a2 + 112));
      *(_QWORD *)(a1 + 104) = v13;
      *(_QWORD *)(a1 + 112) = v12;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v12 >> 60 == 15)
  {
    outlined destroy of Data(a1 + 104);
LABEL_6:
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v11;
    goto LABEL_8;
  }
  v14 = *v11;
  outlined copy of Data._Representation(*v11, *(_QWORD *)(a2 + 112));
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v12;
  outlined consume of Data._Representation(v15, v16);
LABEL_8:
  v17 = (uint64_t *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 128) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      v20 = *v17;
      outlined copy of Data._Representation(*v17, *(_QWORD *)(a2 + 128));
      v21 = *(_QWORD *)(a1 + 120);
      v22 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 120) = v20;
      *(_QWORD *)(a1 + 128) = v18;
      outlined consume of Data._Representation(v21, v22);
      goto LABEL_15;
    }
    outlined destroy of Data(a1 + 120);
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 120) = *(_OWORD *)v17;
    goto LABEL_15;
  }
  v19 = *v17;
  outlined copy of Data._Representation(*v17, *(_QWORD *)(a2 + 128));
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
LABEL_15:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for ImageData(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(void **)(a1 + 56);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  v8 = (_OWORD *)(a2 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  if (v9 >> 60 == 15)
    goto LABEL_4;
  v10 = *(_QWORD *)(a2 + 112);
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data(a1 + 104);
LABEL_4:
    *(_OWORD *)(a1 + 104) = *v8;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)v8;
  *(_QWORD *)(a1 + 112) = v10;
  outlined consume of Data._Representation(v11, v9);
LABEL_6:
  v12 = (_QWORD *)(a2 + 120);
  v13 = *(_QWORD *)(a1 + 128);
  if (v13 >> 60 != 15)
  {
    v14 = *(_QWORD *)(a2 + 128);
    if (v14 >> 60 != 15)
    {
      v15 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = *v12;
      *(_QWORD *)(a1 + 128) = v14;
      outlined consume of Data._Representation(v15, v13);
      goto LABEL_11;
    }
    outlined destroy of Data(a1 + 120);
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)v12;
LABEL_11:
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageData()
{
  return &type metadata for ImageData;
}

uint64_t outlined init with copy of ImageDataPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImageDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23D719ED8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23D719EFC()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

Swift::Int partial apply for closure #1 in JpegDecoder.decodeImageSync(colorspace:width:height:data:)(void *a1)
{
  uint64_t v1;

  return closure #1 in JpegDecoder.decodeImageSync(colorspace:width:height:data:)(a1, *(_QWORD *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type SIMD2<Float> and conformance SIMD2<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>;
  if (!lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SIMD2<Float>);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE40F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>);
  }
  return result;
}

uint64_t StructWrapper.tryToSerializeToData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t AssociatedConformanceWitness;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v1 = v0 + OBJC_IVAR____TtC5Hands13StructWrapper_data;
  swift_beginAccess();
  outlined init with copy of Any?(v1, (uint64_t)v10);
  if (!v11)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
    v7 = 0u;
    v8 = 0u;
    AssociatedConformanceWitness = 0;
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataProtocol);
  if ((swift_dynamicCast() & 1) == 0)
  {
    AssociatedConformanceWitness = 0;
    v7 = 0u;
    v8 = 0u;
    goto LABEL_7;
  }
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_7:
    outlined destroy of Coordinate3DPB?((uint64_t)&v7, &demangling cache variable for type metadata for HandsKitDataProtocol?);
    return 0;
  }
  outlined init with take of PinchCancellationModule(&v7, (uint64_t)v10);
  v2 = v11;
  v3 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 32);
  *((_QWORD *)&v8 + 1) = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v7);
  v4(v2, v3);
  v6 = Message.serializedData(partial:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
  return v6;
}

id StructWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StructWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for StructWrapper()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for PinchInternalDataPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v7;
    v8 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v8;
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v9 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v9;
    v10 = *(uint64_t *)((char *)a2 + 92);
    *(_DWORD *)(a1 + 100) = *((_DWORD *)a2 + 25);
    v11 = *(int *)(a3 + 76);
    v20 = (uint64_t)a2 + v11;
    v21 = a1 + v11;
    *(_QWORD *)(a1 + 92) = v10;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v21, v20, v12);
    v14 = *(int *)(a3 + 80);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PinchInternalDataPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 76);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PinchInternalDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  v9 = *(int *)(a3 + 76);
  v18 = a1 + v9;
  v10 = a2 + v9;
  *(_QWORD *)(a1 + 92) = v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v18, v10, v11);
  v13 = *(int *)(a3 + 80);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PinchInternalDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v7;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  v8 = *(int *)(a3 + 76);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 80);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PinchInternalDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  v9 = *(int *)(a3 + 76);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)(a1 + 92) = v8;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  *(_OWORD *)(a1 + *(int *)(a3 + 80)) = *(_OWORD *)(a2 + *(int *)(a3 + 80));
  return a1;
}

uint64_t assignWithTake for PinchInternalDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 92) = *(_QWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  v6 = *(int *)(a3 + 76);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 80);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchInternalDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D71ABA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 76), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PinchInternalDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D71AC28(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 76), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for PinchInternalDataPB()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PinchInternalDataPB;
  if (!type metadata singleton initialization cache for PinchInternalDataPB)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PinchInternalDataPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t PinchInternalDataPB.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
  v2 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = v2;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = v2;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  v3 = type metadata accessor for PinchInternalDataPB();
  result = UnknownStorage.init()();
  v5 = (_QWORD *)(a1 + *(int *)(v3 + 80));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t PinchInternalDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 10:
        case 14:
        case 15:
        case 16:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_13;
        case 3:
        case 4:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_13;
        case 5:
          lazy protocol witness table accessor for type PinchOcclusionStatus and conformance PinchOcclusionStatus();
          goto LABEL_11;
        case 6:
        case 7:
        case 8:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedFloatField(value:)();
          goto LABEL_13;
        case 9:
        case 11:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedBoolField(value:)();
          goto LABEL_13;
        case 12:
          type metadata accessor for PinchInternalDataPB();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_13;
        case 13:
          lazy protocol witness table accessor for type PinchRecoveryStatus and conformance PinchRecoveryStatus();
LABEL_11:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_13:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PinchInternalDataPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(float *)v0 == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
  {
    if (*(float *)(v0 + 4) == 0.0
      || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
    {
      if (*(_BYTE *)(v0 + 8) != 1
        || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        if (*(_BYTE *)(v0 + 9) != 1
          || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(v0 + 16)
            || (lazy protocol witness table accessor for type PinchOcclusionStatus and conformance PinchOcclusionStatus(),
                result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                !v1))
          {
            if (!*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16)
              || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
            {
              if (!*(_QWORD *)(*(_QWORD *)(v0 + 40) + 16)
                || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
              {
                if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16)
                  || (result = dispatch thunk of Visitor.visitPackedFloatField(value:fieldNumber:)(), !v1))
                {
                  if (!*(_QWORD *)(*(_QWORD *)(v0 + 56) + 16)
                    || (result = dispatch thunk of Visitor.visitPackedBoolField(value:fieldNumber:)(), !v1))
                  {
                    if (*(float *)(v0 + 64) == 0.0
                      || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
                    {
                      if (!*(_QWORD *)(*(_QWORD *)(v0 + 72) + 16)
                        || (result = dispatch thunk of Visitor.visitPackedBoolField(value:fieldNumber:)(), !v1))
                      {
                        result = closure #1 in PinchInternalDataPB.traverse<A>(visitor:)(v0);
                        if (!v1)
                        {
                          if (*(_QWORD *)(v0 + 80))
                          {
                            lazy protocol witness table accessor for type PinchRecoveryStatus and conformance PinchRecoveryStatus();
                            dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
                          }
                          if (*(float *)(v0 + 92) != 0.0)
                            dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
                          if (*(float *)(v0 + 96) != 0.0)
                            dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
                          if (*(float *)(v0 + 100) != 0.0)
                            dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
                          type metadata accessor for PinchInternalDataPB();
                          return UnknownStorage.traverse<A>(visitor:)();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in PinchInternalDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for PinchInternalDataPB();
  if (*(_QWORD *)(a1 + *(int *)(result + 80) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchInternalDataPB()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PinchInternalDataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 76);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PinchInternalDataPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 76);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PinchInternalDataPB())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchInternalDataPB()
{
  return PinchInternalDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchInternalDataPB()
{
  return PinchInternalDataPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchInternalDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInternalDataPB and conformance PinchInternalDataPB, (uint64_t (*)(uint64_t))type metadata accessor for PinchInternalDataPB, (uint64_t)&protocol conformance descriptor for PinchInternalDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchInternalDataPB@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static PinchInternalDataPB._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchInternalDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInternalDataPB and conformance PinchInternalDataPB, (uint64_t (*)(uint64_t))type metadata accessor for PinchInternalDataPB, (uint64_t)&protocol conformance descriptor for PinchInternalDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchInternalDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInternalDataPB and conformance PinchInternalDataPB, (uint64_t (*)(uint64_t))type metadata accessor for PinchInternalDataPB, (uint64_t)&protocol conformance descriptor for PinchInternalDataPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in PinchInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInternalDataPB and conformance PinchInternalDataPB, (uint64_t (*)(uint64_t))type metadata accessor for PinchInternalDataPB, (uint64_t)&protocol conformance descriptor for PinchInternalDataPB);
}

uint64_t base witness table accessor for Message in PinchInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInternalDataPB and conformance PinchInternalDataPB, (uint64_t (*)(uint64_t))type metadata accessor for PinchInternalDataPB, (uint64_t)&protocol conformance descriptor for PinchInternalDataPB);
}

uint64_t base witness table accessor for Hashable in PinchInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInternalDataPB and conformance PinchInternalDataPB, (uint64_t (*)(uint64_t))type metadata accessor for PinchInternalDataPB, (uint64_t)&protocol conformance descriptor for PinchInternalDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInternalDataPB and conformance PinchInternalDataPB, (uint64_t (*)(uint64_t))type metadata accessor for PinchInternalDataPB, (uint64_t)&protocol conformance descriptor for PinchInternalDataPB);
}

uint64_t specialized static PinchInternalDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v28 - v11;
  if (*(float *)a1 != *(float *)a2
    || *(float *)(a1 + 4) != *(float *)(a2 + 4)
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)
    || *(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9)
    || (specialized == infix<A>(_:_:)(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_QWORD *)(a2 + 16), *(unsigned __int8 *)(a2 + 24)) & 1) == 0|| !specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32))|| !specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40))|| !specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48))|| !specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56))|| *(float *)(a1 + 64) != *(float *)(a2 + 64)|| !specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72)))
  {
    goto LABEL_32;
  }
  v13 = type metadata accessor for PinchInternalDataPB();
  v14 = *(int *)(v13 + 80);
  v15 = (_QWORD *)(a1 + v14);
  v16 = *(_QWORD *)(a1 + v14 + 8);
  v17 = (_QWORD *)(a2 + v14);
  v18 = v17[1];
  if (!v16)
  {
    if (v18)
      goto LABEL_32;
    goto LABEL_19;
  }
  if (!v18)
    goto LABEL_32;
  if (*v15 == *v17 && v16 == v18 || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(), v20 = 0, (v19 & 1) != 0))
  {
LABEL_19:
    v21 = *(_QWORD *)(a1 + 80);
    v22 = *(_QWORD *)(a2 + 80);
    if (*(_BYTE *)(a1 + 88))
      v21 = v21 != 0;
    if (*(_BYTE *)(a2 + 88) == 1)
    {
      if (v22)
      {
        if (v21 != 1)
          goto LABEL_32;
      }
      else if (v21)
      {
        goto LABEL_32;
      }
    }
    else if (v21 != v22)
    {
      goto LABEL_32;
    }
    if (*(float *)(a1 + 92) == *(float *)(a2 + 92)
      && *(float *)(a1 + 96) == *(float *)(a2 + 96)
      && *(float *)(a1 + 100) == *(float *)(a2 + 100))
    {
      v23 = a1 + *(int *)(v13 + 76);
      v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v24(v12, v23, v4);
      v24(v8, a2 + *(int *)(v13 + 76), v4);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26 = *(void (**)(char *, uint64_t))(v5 + 8);
      v26(v8, v4);
      v26(v12, v4);
      v20 = v25;
      return v20 & 1;
    }
LABEL_32:
    v20 = 0;
  }
  return v20 & 1;
}

Swift::Void __swiftcall MonoPosePipeline.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(HandsKitConfig *);
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void (*v14)(HandsKitConfig *);
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  PosePreprocessing.loadModelParams(_:)(a1);
  MonoPoseDetectorModel.reconfig(_:)(a1);
  v8 = *(_QWORD *)(v1 + 24);
  if (v8)
  {
    PinchPipeline.loadModelParams(_:)(a1);
    v9 = *(void (**)(HandsKitConfig *))(**(_QWORD **)(v8 + 16) + 152);
    swift_retain();
    v9(a1);
    swift_release();
    v10 = *(_QWORD *)(v8 + 16);
    v11 = *(void **)(v10 + 16);
    swift_retain();
    objc_msgSend(v11, sel_resetAllBuffers);
    v12 = *(void **)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    swift_release();

  }
  v13 = *(_QWORD *)(v2 + 32);
  if (v13)
  {
    PinchPipeline.loadModelParams(_:)(a1);
    v14 = *(void (**)(HandsKitConfig *))(**(_QWORD **)(v13 + 16) + 152);
    swift_retain();
    v14(a1);
    swift_release();
    v15 = *(_QWORD *)(v13 + 16);
    v16 = *(void **)(v15 + 16);
    swift_retain();
    objc_msgSend(v16, sel_resetAllBuffers);
    v17 = *(void **)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    swift_release();

  }
  v18 = type metadata accessor for HandDescriptor();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v7, 1, 1, v18);
  v19 = v2 + OBJC_IVAR____TtC5Hands16MonoPosePipeline__prevHand;
  swift_beginAccess();
  outlined assign with take of HandDescriptor?((uint64_t)v7, v19);
  swift_endAccess();
}

uint64_t MonoPosePipeline.run(forHand:withHandsKitData:ps_handle:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[560];

  v30 = a3;
  v28 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  v9 = MEMORY[0x24BDAC7A8](v7, v8);
  v33 = (uint64_t)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v14 = (char *)&v27 - v13;
  MEMORY[0x24BDAC7A8](v12, v15);
  v17 = (char *)&v27 - v16;
  v18 = type metadata accessor for HandDescriptor();
  v31 = *(_QWORD *)(v18 - 8);
  v32 = v18;
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v4 + OBJC_IVAR____TtC5Hands16MonoPosePipeline__prevHand;
  swift_beginAccess();
  outlined init with copy of HandDescriptor?(v22, (uint64_t)v17);
  memcpy(v34, a2, 0x228uLL);
  v29 = v4;
  v23 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 24);
  swift_bridgeObjectRetain();
  PosePreprocessing.run(forHand:withOlderHand:withHandsKitData:gtInjections:xCanonicalization:rotateCrops:)(v28, (uint64_t)v17, (uint64_t)v34, v23, 0, 0, (uint64_t)v21);
  swift_bridgeObjectRelease();
  outlined destroy of HandDescriptor?((uint64_t)v17);
  outlined init with copy of HandDescriptor?(v22, (uint64_t)v14);
  memcpy(v34, a2, 0x228uLL);
  MonoPoseDetectorModel.run(forHand:withPrevHand:withHandsKitData:ps_handle:)((uint64_t)v21, (uint64_t)v14, v34, a4);
  outlined destroy of HandDescriptor?((uint64_t)v14);
  MonoPosePipeline.runActionModels(hand:handsKitData:)(a4, a2);
  outlined destroy of HandDescriptor((uint64_t)v21);
  if (*(_QWORD *)(a4 + 16) && *(_BYTE *)(a4 + 128) == 1)
  {
    v24 = v33;
    outlined init with copy of HandDescriptor(a4, v33);
    v25 = 0;
  }
  else
  {
    v25 = 1;
    v24 = v33;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v24, v25, 1, v32);
  outlined init with take of HandDescriptor?(v24, (uint64_t)v17);
  swift_beginAccess();
  outlined assign with take of HandDescriptor?((uint64_t)v17, v22);
  return swift_endAccess();
}

uint64_t MonoPosePipeline.runActionModels(hand:handsKitData:)(uint64_t a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE v24[560];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for HandDescriptor();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x24BDAC7A8](v10, v12);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = MEMORY[0x24BDAC7A8](v13, v16);
  v19 = &v24[-v18];
  v20 = a1 + *(int *)(result + 100);
  v21 = *(_QWORD *)v20;
  if (*(_BYTE *)(v20 + 8) == 1)
  {
    if (v21 >= 3)
      goto LABEL_3;
  }
  else if (v21 == 3)
  {
LABEL_3:
    v22 = v3 + OBJC_IVAR____TtC5Hands16MonoPosePipeline__prevHand;
    swift_beginAccess();
    outlined init with copy of HandDescriptor?(v22, (uint64_t)v9);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      outlined destroy of HandDescriptor?((uint64_t)v9);
      outlined init with copy of HandDescriptor(a1, (uint64_t)v15);
      v15[4] = 0;
      v15[137] = 0;
      outlined destroy of HandDescriptor(a1);
      return outlined init with take of HandDescriptor((uint64_t)v15, a1);
    }
    else
    {
      outlined init with take of HandDescriptor((uint64_t)v9, (uint64_t)v19);
      type metadata accessor for PinchHelper();
      static PinchHelper.copyActionResultToHand(from:to:)((uint64_t)v19, a1, (uint64_t)v15);
      outlined destroy of HandDescriptor(a1);
      outlined init with take of HandDescriptor((uint64_t)v15, a1);
      v23 = v19[281];
      result = outlined destroy of HandDescriptor((uint64_t)v19);
      *(_BYTE *)(a1 + 281) = v23;
    }
    return result;
  }
  if (*(_QWORD *)(v3 + 24))
  {
    memcpy(v24, a2, 0x228uLL);
    result = PinchPipeline.run(_:_:)(a1, (uint64_t)v24);
  }
  if (*(_QWORD *)(v3 + 32))
  {
    memcpy(v24, a2, 0x228uLL);
    return PinchPipeline.run(_:_:)(a1, (uint64_t)v24);
  }
  return result;
}

uint64_t MonoPosePipeline.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of HandDescriptor?(v0 + OBJC_IVAR____TtC5Hands16MonoPosePipeline__prevHand);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for MonoPosePipeline()
{
  return type metadata accessor for MonoPosePipeline();
}

uint64_t type metadata accessor for MonoPosePipeline()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MonoPosePipeline;
  if (!type metadata singleton initialization cache for MonoPosePipeline)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for MonoPosePipeline()
{
  unint64_t v0;

  type metadata accessor for HandDescriptor?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for HandDescriptor?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HandDescriptor?)
  {
    type metadata accessor for HandDescriptor();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HandDescriptor?);
  }
}

void protocol witness for PoseActionPipeline.reconfig(_:) in conformance MonoPosePipeline(HandsKitConfig *a1)
{
  MonoPosePipeline.reconfig(_:)(a1);
}

uint64_t protocol witness for PoseActionPipeline.run(forHand:withHandsKitData:ps_handle:) in conformance MonoPosePipeline@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return MonoPosePipeline.run(forHand:withHandsKitData:ps_handle:)(a1, a2, a3, a4);
}

uint64_t outlined init with take of HandDescriptor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of HandDescriptor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_QWORD *specialized MonoPosePipeline.init(options:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  HandsKitConfig *v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  _QWORD v17[4];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = (char *)v2 + OBJC_IVAR____TtC5Hands16MonoPosePipeline__prevHand;
  v5 = type metadata accessor for HandDescriptor();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  type metadata accessor for PosePreprocessing();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_BYTE *)(v6 + 64) = 1;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  v7 = a1;
  PosePreprocessing.loadModelParams(_:)(v7);

  v2[2] = v6;
  v8 = (unint64_t)specialized static MonoPinchPipeline.getInstance(config:)(v7);
  v2[3] = v8;
  v9 = (unint64_t)specialized static MonoThumbIndexTapPipeline.getInstance(config:)(v7);
  v2[4] = v9;
  if (v8 | v9)
  {
    v10 = 0x6E6F6974636120;
    v11 = (void *)0xE700000000000000;
  }
  else
  {
    objc_msgSend(v7, sel_setUseMonoActionModel_, 0);
    v10 = 0x796C6E6F2DLL;
    v11 = (void *)0xE500000000000000;
  }
  type metadata accessor for MonoPoseDetectorModel();
  swift_allocObject();
  v12 = (HandsKitConfig *)v7;
  v13 = specialized MonoPoseDetectorModel.init(options:)(v12);

  v2[5] = v13;
  v18 = xmmword_23D9A6CC0;
  v19 = 0;
  v20 = 0;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v17[0] = 0xD000000000000016;
  v17[1] = 0x800000023D9C7BF0;
  v14._countAndFlagsBits = v10;
  v14._object = v11;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x6E696C6570695020;
  v15._object = (void *)0xED00002E2E2E2E65;
  String.append(_:)(v15);
  v17[3] = MEMORY[0x24BEE0D00];
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000060, 0x800000023D9C7C10, 29, (uint64_t *)&v18, (uint64_t)v17, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  return v2;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg5021_sS3fIgyyd_Sf_SftSfs5f112OIegnrzr_TR107_s5Hands13TrackingUtilsC32voteHandByLegacyJointUncertainty9handPose00J5Pose1SiAA0E4PoseV_AHtFZS2f_K16XEfU1_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  float *v7;
  float *v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v33 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  v30 = v5;
  v31 = v4;
  v32 = a1;
  if (v6)
  {
    v7 = (float *)(a1 + 32);
    v8 = (float *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v10 = v6;
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v12 = *v7;
      v13 = *v8;
      v15 = *(_QWORD *)(v33 + 16);
      v14 = *(_QWORD *)(v33 + 24);
      if (v15 >= v14 >> 1)
      {
        v28 = v11;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v11 = v28;
      }
      --v5;
      *(_QWORD *)(v33 + 16) = v15 + 1;
      *(float *)(v33 + 4 * v15 + 32) = v12 - v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_13:
    if (v31 <= v30)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v33;
    }
    v16 = 0;
    if (v6 <= v30)
      v17 = v30;
    else
      v17 = v6;
    v18 = v17 - v6;
    v19 = v31 - v6;
    v20 = v30 - v6;
    v21 = 4 * v6 + 32;
    v22 = v32 + v21;
    v23 = v11 + v21;
    while (v19 != v16)
    {
      if (v20 == v16)
        goto LABEL_24;
      if (v18 == v16)
        goto LABEL_28;
      v24 = *(float *)(v22 + 4 * v16);
      v25 = *(float *)(v23 + 4 * v16);
      v27 = *(_QWORD *)(v33 + 16);
      v26 = *(_QWORD *)(v33 + 24);
      if (v27 >= v26 >> 1)
      {
        v29 = v11;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        v11 = v29;
      }
      *(_QWORD *)(v33 + 16) = v27 + 1;
      *(float *)(v33 + 4 * v27 + 32) = v24 - v25;
      if (v19 == ++v16)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t static TrackingUtils.findImageOfCameraSource(_:camera:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v23[12];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *a2;
    v6 = *((unsigned __int8 *)a2 + 8);
    v7 = *(_OWORD *)(a1 + 176);
    v32 = *(_OWORD *)(a1 + 160);
    v33 = v7;
    v8 = *(_OWORD *)(a1 + 208);
    v34 = *(_OWORD *)(a1 + 192);
    v35 = v8;
    v9 = *(_OWORD *)(a1 + 112);
    v28 = *(_OWORD *)(a1 + 96);
    v29 = v9;
    v10 = *(_OWORD *)(a1 + 144);
    v30 = *(_OWORD *)(a1 + 128);
    v31 = v10;
    v11 = *(_OWORD *)(a1 + 48);
    v24 = *(_OWORD *)(a1 + 32);
    v25 = v11;
    v12 = *(_OWORD *)(a1 + 80);
    v13 = (__int128 *)(a1 + 224);
    v26 = *(_OWORD *)(a1 + 64);
    v27 = v12;
    v14 = v4 - 1;
    v15 = *((_QWORD *)&v28 + 1);
    if (v6)
      __asm { BR              X14 }
    while (v15 != v5)
    {
      if (!v14)
        goto LABEL_8;
      v16 = v13[9];
      v32 = v13[8];
      v33 = v16;
      v17 = v13[11];
      v34 = v13[10];
      v35 = v17;
      v18 = v13[5];
      v28 = v13[4];
      v29 = v18;
      v19 = v13[7];
      v30 = v13[6];
      v31 = v19;
      v20 = v13[1];
      v24 = *v13;
      v25 = v20;
      v21 = v13[3];
      v26 = v13[2];
      v27 = v21;
      v13 += 12;
      --v14;
      v15 = *((_QWORD *)&v28 + 1);
    }
    v23[8] = v32;
    v23[9] = v33;
    v23[10] = v34;
    v23[11] = v35;
    v23[4] = v28;
    v23[5] = v29;
    v23[6] = v30;
    v23[7] = v31;
    v23[0] = v24;
    v23[1] = v25;
    v23[2] = v26;
    v23[3] = v27;
    _s5Hands13PoseImageCropVSgWOi_(v23);
    outlined init with take of ImageData?((uint64_t)v23, a3);
    return outlined retain of ImageData((uint64_t)&v24);
  }
  else
  {
LABEL_8:
    _s5Hands9ImageDataVSgWOi0_(&v24);
    return outlined init with take of ImageData?((uint64_t)&v24, a3);
  }
}

void closure #1 in static TrackingUtils.wristToHandCenterAngle(jointsOrKeypoints:imageData:config:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float32x2_t v18;
  float32x2_t v19;
  uint64_t v20;
  uint64_t inited;
  float v22;
  float v23;
  char v24;
  unint64_t v25;
  char v26;
  int v27;
  char isUniquelyReferenced_nonNull_native;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  _OWORD v33[2];
  _QWORD v34[5];

  v31 = a4;
  v8 = type metadata accessor for IndexSet();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)a2;
  v32 = *(unsigned __int8 *)(a2 + 8);
  v14 = *(_QWORD **)(a2 + 16);
  v15 = v14[2];
  if (v15 == 21)
  {
    v34[0] = &outlined read-only object #0 of closure #1 in static TrackingUtils.wristToHandCenterAngle(jointsOrKeypoints:imageData:config:);
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x24BDCF468]);
    v30 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [Int] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    swift_bridgeObjectRetain();
    v16 = v13;
    v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_s5SIMD2VySfGs5NeverOTg50111_s5Hands13TrackingUtilsC22wristToHandCenterAngle17jointsOrKeypoints9imageData6configSfSDyAA12CameraSourceOSays5g2Vyu4GGG_v41AISgAA05ImageM0VGAA15UvOFilterConfigVtFZyV38AISfGz_AI3key_AM5valuettXEfU_ALSiXEfU_5Hands0xY0O3key_SayAKG5valuetTf1cn_nTf4ng_n((uint64_t)v12, v13, v32, (uint64_t)v14);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v14 = (_QWORD *)v17;
  }
  else
  {
    v16 = v13;
    if (v15 == 4)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v34[3] = MEMORY[0x24BEE0D00];
      v34[0] = 0xD00000000000003DLL;
      v34[1] = 0x800000023D9C7D10;
      type metadata accessor for HandyLoggerNeo();
      memset(v33, 0, sizeof(v33));
      v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v33, 0xD000000000000061, 0x800000023D9C7CA0, 275, (uint64_t)v34, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v34);
    }
  }
  v18 = specialized static HandsKitUtils.calculate2DHandCenter(_:)(v14);
  if (v14[2] < 4uLL)
  {
    __break(1u);
  }
  else
  {
    v19 = v18;
    v20 = v14[7];
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
    *(_QWORD *)(inited + 32) = v20;
    *(float32x2_t *)(inited + 40) = v19;
    specialized static TrackingUtils.calculateVectorAngle(vector:useYReference:)((_QWORD *)inited, 1);
    v23 = v22;
    swift_setDeallocating();
    if (*(_QWORD *)(a3 + 16))
    {
      v24 = v32;
      v25 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v32);
      if ((v26 & 1) != 0)
      {
        v27 = *(_DWORD *)(*(_QWORD *)(a3 + 56) + 192 * v25 + 84);
        if ((*(_BYTE *)(v31 + 16) & v24) == 1 && v16 - 4 >= 0xA && v16 >= 2)
        {
          v29 = (int *)(v31 + 20);
          if (v16 != 2)
            v29 = (int *)(v31 + 24);
          v27 = *v29;
        }
        if (v27 > 0)
          v23 = (float)v27 - v23;
      }
    }
    else
    {
      v24 = v32;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v34[0] = *a1;
    *a1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v24, isUniquelyReferenced_nonNull_native, v23);
    *a1 = v34[0];
    swift_bridgeObjectRelease();
  }
}

uint64_t closure #2 in static TrackingUtils.getBoneLengthFromPose(handsData:trackingInfo:maxUncertainty:leastNumOfTrackedFrames:)(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  float v49;
  uint64_t v50;
  _QWORD v51[40];
  _QWORD __dst[40];
  uint64_t v53;

  v3 = a3[2];
  if (!v3)
    goto LABEL_47;
  v6 = result;
  v7 = *(_QWORD *)(result + 144);
  v8 = a3 + 4;
  result = (uint64_t)memcpy(__dst, a3 + 4, 0x138uLL);
  if (__dst[2] != v7)
  {
    v9 = (char *)(a3 + 44);
    v10 = v3;
    while (--v10)
    {
      v11 = v9 + 320;
      result = (uint64_t)memcpy(__dst, v9, 0x138uLL);
      v9 = v11;
      if (__dst[2] == v7)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_46;
  }
LABEL_6:
  v12 = *(_QWORD *)(a2 + 144);
  v13 = __dst[1];
  result = (uint64_t)memcpy(v51, v8, 0x138uLL);
  if (v51[2] != v12)
  {
    v14 = (char *)(a3 + 44);
    while (--v3)
    {
      v15 = v14 + 320;
      result = (uint64_t)memcpy(v51, v14, 0x138uLL);
      v14 = v15;
      if (v51[2] == v12)
        goto LABEL_10;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_10:
  v16 = v51[1];
  v17 = *(_QWORD *)(v6 + 16);
  if (!v17)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v18 = *(_QWORD *)(v17 + 16);
  if (!v18)
  {
    outlined retain of (TrackingInfo, Int)((uint64_t)__dst);
    outlined retain of (TrackingInfo, Int)((uint64_t)v51);
    v22 = MEMORY[0x24BEE4AF8];
    v27 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v27)
      goto LABEL_17;
LABEL_20:
    v29 = 0.0;
    goto LABEL_26;
  }
  v50 = a2;
  v19 = v51[1];
  v20 = __dst[1];
  v21 = MEMORY[0x24BEE4AF8];
  outlined retain of (TrackingInfo, Int)((uint64_t)__dst);
  outlined retain of (TrackingInfo, Int)((uint64_t)v51);
  v53 = v21;
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
  v22 = v53;
  v23 = *(_QWORD *)(v53 + 16);
  v24 = 36;
  do
  {
    v25 = *(_DWORD *)(v17 + v24);
    v53 = v22;
    v26 = *(_QWORD *)(v22 + 24);
    if (v23 >= v26 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v23 + 1, 1);
      v22 = v53;
    }
    *(_QWORD *)(v22 + 16) = v23 + 1;
    *(_DWORD *)(v22 + 4 * v23 + 32) = v25;
    v24 += 144;
    ++v23;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  v13 = v20;
  v16 = v19;
  a2 = v50;
  v27 = *(_QWORD *)(v22 + 16);
  if (!v27)
    goto LABEL_20;
LABEL_17:
  if (v27 == 1)
  {
    v28 = 0;
    v29 = 0.0;
LABEL_24:
    v32 = v27 - v28;
    v33 = (float *)(v22 + 4 * v28 + 32);
    do
    {
      v34 = *v33++;
      v29 = v29 + v34;
      --v32;
    }
    while (v32);
    goto LABEL_26;
  }
  v28 = v27 & 0x7FFFFFFFFFFFFFFELL;
  v30 = (float *)(v22 + 36);
  v29 = 0.0;
  v31 = v27 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v29 = (float)(v29 + *(v30 - 1)) + *v30;
    v30 += 2;
    v31 -= 2;
  }
  while (v31);
  if (v27 != v28)
    goto LABEL_24;
LABEL_26:
  result = swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(a2 + 16);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 16);
    v37 = MEMORY[0x24BEE4AF8];
    if (v36)
    {
      v53 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
      v37 = v53;
      v38 = *(_QWORD *)(v53 + 16);
      v39 = 36;
      do
      {
        v40 = *(_DWORD *)(v35 + v39);
        v53 = v37;
        v41 = *(_QWORD *)(v37 + 24);
        if (v38 >= v41 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v38 + 1, 1);
          v37 = v53;
        }
        *(_QWORD *)(v37 + 16) = v38 + 1;
        *(_DWORD *)(v37 + 4 * v38 + 32) = v40;
        v39 += 144;
        ++v38;
        --v36;
      }
      while (v36);
      swift_bridgeObjectRelease();
    }
    v42 = *(_QWORD *)(v37 + 16);
    if (!v42)
    {
      swift_bridgeObjectRelease();
      v44 = 0.0;
      if (v13 == v16)
      {
LABEL_44:
        outlined release of TrackingInfo((uint64_t)v51);
        outlined release of TrackingInfo((uint64_t)__dst);
        return v29 < v44;
      }
LABEL_37:
      outlined release of TrackingInfo((uint64_t)__dst);
      outlined release of TrackingInfo((uint64_t)v51);
      return v16 < v13;
    }
    if (v42 == 1)
    {
      v43 = 0;
      v44 = 0.0;
    }
    else
    {
      v43 = v42 & 0x7FFFFFFFFFFFFFFELL;
      v45 = (float *)(v37 + 36);
      v44 = 0.0;
      v46 = v42 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v44 = (float)(v44 + *(v45 - 1)) + *v45;
        v45 += 2;
        v46 -= 2;
      }
      while (v46);
      if (v42 == v43)
      {
LABEL_43:
        swift_bridgeObjectRelease();
        if (v13 == v16)
          goto LABEL_44;
        goto LABEL_37;
      }
    }
    v47 = v42 - v43;
    v48 = (float *)(v37 + 4 * v43 + 32);
    do
    {
      v49 = *v48++;
      v44 = v44 + v49;
      --v47;
    }
    while (v47);
    goto LABEL_43;
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TrackingUtils()
{
  return objc_opt_self();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  char v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t result;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;

  v6 = v5;
  v56 = a5;
  v54 = a3;
  v55 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v55, v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v14);
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = (char *)&v50 - v17;
  MEMORY[0x24BDAC7A8](v19, v20);
  v23 = (char *)&v50 - v22;
  v57 = *(_QWORD *)(v24 + 72);
  if (!v57)
  {
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (a2 - a1 == 0x8000000000000000 && v57 == -1)
    goto LABEL_66;
  v25 = v54 - a2;
  if (v54 - a2 == 0x8000000000000000 && v57 == -1)
    goto LABEL_67;
  v26 = (uint64_t)(a2 - a1) / v57;
  v60 = a1;
  v59 = a4;
  v27 = v25 / v57;
  if (v26 >= v25 / v57)
  {
    if ((v27 & 0x8000000000000000) == 0)
    {
      v29 = v27 * v57;
      v30 = v21;
      if (a4 < a2 || a2 + v29 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v38 = a4 + v29;
      v58 = a4 + v29;
      v60 = a2;
      if (v29 < 1 || a1 >= a2)
        goto LABEL_64;
      v52 = v12;
      v50 = a1;
      v40 = -v57;
      v41 = v54;
      v53 = -v57;
      v51 = a4;
      while (1)
      {
        outlined init with copy of TrackingUpdateDataPB(v38 + v40, v30, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v42 = a2 + v40;
        v23 = (char *)v30;
        v18 = v52;
        outlined init with copy of TrackingUpdateDataPB(a2 + v40, (uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v43 = closure #2 in static TrackingUtils.getBoneLengthFromPose(handsData:trackingInfo:maxUncertainty:leastNumOfTrackedFrames:)((uint64_t)v23, (uint64_t)v18, v56);
        if (v6)
          goto LABEL_63;
        v44 = v43;
        v57 = a2;
        v45 = v41 + v40;
        outlined destroy of Matrix3x3PB((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        outlined destroy of Matrix3x3PB((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v30 = (uint64_t)v23;
        if ((v44 & 1) != 0)
        {
          v46 = v41;
          v32 = v41 >= v57;
          v41 += v40;
          if (v32 && v45 < v57)
          {
            v6 = 0;
            if (v46 != v57)
              swift_arrayInitWithTakeBackToFront();
          }
          else
          {
            swift_arrayInitWithTakeFrontToBack();
            v6 = 0;
          }
          v60 += v53;
        }
        else
        {
          v47 = v58;
          v58 += v40;
          v48 = v41;
          v32 = v41 >= v47;
          v41 += v40;
          if (v32 && v45 < v47)
          {
            v6 = 0;
            v42 = v57;
            if (v48 != v47)
              swift_arrayInitWithTakeBackToFront();
          }
          else
          {
            swift_arrayInitWithTakeFrontToBack();
            v42 = v57;
            v6 = 0;
          }
        }
        v38 = v58;
        if (v58 > v51)
        {
          a2 = v42;
          v40 = v53;
          if (v42 > v50)
            continue;
        }
        goto LABEL_64;
      }
    }
  }
  else if ((v26 & 0x8000000000000000) == 0)
  {
    v28 = v26 * v57;
    if (a4 < a1 || a1 + v28 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v31 = a4 + v28;
    v58 = a4 + v28;
    v32 = v28 < 1 || a2 >= v54;
    if (v32)
      goto LABEL_64;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a2, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined init with copy of TrackingUpdateDataPB(a4, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v33 = closure #2 in static TrackingUtils.getBoneLengthFromPose(handsData:trackingInfo:maxUncertainty:leastNumOfTrackedFrames:)((uint64_t)v23, (uint64_t)v18, v56);
      if (v5)
        break;
      v34 = v33;
      outlined destroy of Matrix3x3PB((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined destroy of Matrix3x3PB((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v35 = v60;
      if ((v34 & 1) != 0)
      {
        v36 = a2 + v57;
        if (v60 < a2 || v60 >= v36)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v60 == a2)
        {
          v35 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      else
      {
        v37 = v59 + v57;
        if (v60 < v59 || v60 >= v37)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v60 != v59)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v59 = v37;
        v36 = a2;
      }
      v60 = v35 + v57;
      a4 = v59;
      if (v59 < v31)
      {
        a2 = v36;
        if (v36 < v54)
          continue;
      }
      goto LABEL_64;
    }
LABEL_63:
    outlined destroy of Matrix3x3PB((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    outlined destroy of Matrix3x3PB((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
LABEL_64:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v60, &v59, (uint64_t *)&v58);
    swift_bridgeObjectRelease();
    return 1;
  }
LABEL_68:
  swift_bridgeObjectRelease();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t result;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;

  v6 = v5;
  v52 = a5;
  v51 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v51, v11);
  MEMORY[0x24BDAC7A8](v12, v13);
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (unint64_t *)((char *)&v47 - v16);
  MEMORY[0x24BDAC7A8](v18, v19);
  v24 = (unint64_t *)((char *)&v47 - v23);
  if (!*(_QWORD *)(v20 + 72))
  {
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v25 = *(_QWORD *)(v20 + 72);
  if (a2 - a1 == 0x8000000000000000 && v25 == -1)
    goto LABEL_65;
  v26 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v25 == -1)
    goto LABEL_66;
  v27 = (uint64_t)(a2 - a1) / v25;
  v55 = a1;
  v54 = a4;
  v28 = v26 / v25;
  if (v27 >= v26 / v25)
  {
    if ((v28 & 0x8000000000000000) == 0)
    {
      v30 = v28 * v25;
      v31 = v22;
      v49 = (_QWORD *)v21;
      if (a4 < a2 || a2 + v30 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v38 = a4 + v30;
      v53 = a4 + v30;
      v55 = a2;
      if (v30 < 1 || a1 >= a2)
        goto LABEL_63;
      v47 = a1;
      v48 = a4;
      v40 = -v25;
      v50 = -v25;
      while (1)
      {
        outlined init with copy of TrackingUpdateDataPB(v38 + v40, v31, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v41 = a2 + v40;
        v24 = (_QWORD *)v31;
        v17 = v49;
        outlined init with copy of TrackingUpdateDataPB(a2 + v40, (uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v42 = closure #2 in static TrackingProcessingFunctions.CleanUpHandByChirality(trackingInfos:hands:handsKitTimestamp:)(v24, v17, v52);
        if (v6)
          goto LABEL_62;
        v43 = v42;
        v44 = a3 + v40;
        outlined destroy of HandDescriptor((uint64_t)v17);
        outlined destroy of HandDescriptor((uint64_t)v24);
        v31 = (uint64_t)v24;
        if ((v43 & 1) != 0)
        {
          if (a3 < a2 || v44 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
            v6 = 0;
          }
          else
          {
            v6 = 0;
            if (a3 != a2)
              swift_arrayInitWithTakeBackToFront();
          }
          v55 += v50;
        }
        else
        {
          v45 = v53;
          v53 += v40;
          if (a3 < v45 || v44 >= v45)
          {
            swift_arrayInitWithTakeFrontToBack();
            v41 = a2;
            v6 = 0;
          }
          else
          {
            v6 = 0;
            if (a3 != v45)
              swift_arrayInitWithTakeBackToFront();
            v41 = a2;
          }
        }
        v38 = v53;
        if (v53 > v48)
        {
          a2 = v41;
          a3 += v40;
          v40 = v50;
          if (v41 > v47)
            continue;
        }
        goto LABEL_63;
      }
    }
  }
  else if ((v27 & 0x8000000000000000) == 0)
  {
    v29 = v27 * v25;
    if (a4 < a1 || a1 + v29 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v50 = a4 + v29;
    v53 = a4 + v29;
    if (v29 < 1 || a2 >= a3)
      goto LABEL_63;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(a2, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined init with copy of TrackingUpdateDataPB(a4, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v33 = closure #2 in static TrackingProcessingFunctions.CleanUpHandByChirality(trackingInfos:hands:handsKitTimestamp:)(v24, v17, v52);
      if (v5)
        break;
      v34 = v33;
      outlined destroy of HandDescriptor((uint64_t)v17);
      outlined destroy of HandDescriptor((uint64_t)v24);
      v35 = v55;
      if ((v34 & 1) != 0)
      {
        v36 = a2 + v25;
        if (v55 < a2 || v55 >= v36)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v55 == a2)
        {
          v35 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      else
      {
        v37 = v54 + v25;
        if (v55 < v54 || v55 >= v37)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v55 != v54)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v54 = v37;
        v36 = a2;
      }
      v55 = v35 + v25;
      a4 = v54;
      if (v54 < v50)
      {
        a2 = v36;
        if (v36 < a3)
          continue;
      }
      goto LABEL_63;
    }
LABEL_62:
    outlined destroy of HandDescriptor((uint64_t)v17);
    outlined destroy of HandDescriptor((uint64_t)v24);
LABEL_63:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v55, &v54, (uint64_t *)&v53);
    swift_bridgeObjectRelease();
    return 1;
  }
LABEL_67:
  swift_bridgeObjectRelease();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, __int128 *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[12];

  if (a3 < 0 || 1 << *(_BYTE *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a6 + 36) == a4)
  {
    v6 = *(_QWORD *)(a6 + 56);
    v7 = *(_QWORD *)(a6 + 48) + 16 * a3;
    v8 = *(_QWORD *)v7;
    LOBYTE(v7) = *(_BYTE *)(v7 + 8);
    *(_QWORD *)result = v8;
    *(_BYTE *)(result + 8) = v7;
    v9 = (__int128 *)(v6 + 192 * a3);
    v10 = v9[3];
    v12 = *v9;
    v11 = v9[1];
    v25[2] = v9[2];
    v25[3] = v10;
    v25[0] = v12;
    v25[1] = v11;
    v13 = v9[7];
    v15 = v9[4];
    v14 = v9[5];
    v25[6] = v9[6];
    v25[7] = v13;
    v25[4] = v15;
    v25[5] = v14;
    v16 = v9[11];
    v18 = v9[8];
    v17 = v9[9];
    v25[10] = v9[10];
    v25[11] = v16;
    v25[8] = v18;
    v25[9] = v17;
    v19 = v9[9];
    a2[8] = v9[8];
    a2[9] = v19;
    v20 = v9[11];
    a2[10] = v9[10];
    a2[11] = v20;
    v21 = v9[5];
    a2[4] = v9[4];
    a2[5] = v21;
    v22 = v9[7];
    a2[6] = v9[6];
    a2[7] = v22;
    v23 = v9[1];
    *a2 = *v9;
    a2[1] = v23;
    v24 = v9[3];
    a2[2] = v9[2];
    a2[3] = v24;
    return outlined retain of ImageData((uint64_t)v25);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, _OWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[5];
  _BYTE v20[25];

  if (a3 < 0 || 1 << *(_BYTE *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a6 + 36) == a4)
  {
    v6 = *(_QWORD *)(a6 + 56);
    v7 = *(_QWORD *)(a6 + 48) + 16 * a3;
    v8 = *(_QWORD *)v7;
    LOBYTE(v7) = *(_BYTE *)(v7 + 8);
    *(_QWORD *)result = v8;
    *(_BYTE *)(result + 8) = v7;
    v9 = (_OWORD *)(v6 + 112 * a3);
    v11 = v9[1];
    v10 = v9[2];
    v19[0] = *v9;
    v19[1] = v11;
    v19[2] = v10;
    v13 = v9[4];
    v12 = v9[5];
    v14 = v9[3];
    *(_OWORD *)&v20[9] = *(_OWORD *)((char *)v9 + 89);
    v19[4] = v13;
    *(_OWORD *)v20 = v12;
    v19[3] = v14;
    v15 = v9[1];
    *a2 = *v9;
    a2[1] = v15;
    v16 = v9[2];
    v17 = v9[3];
    *(_OWORD *)((char *)a2 + 89) = *(_OWORD *)((char *)v9 + 89);
    v18 = v9[5];
    a2[4] = v9[4];
    a2[5] = v18;
    a2[2] = v16;
    a2[3] = v17;
    return outlined retain of DetectionResult((uint64_t)v19);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(a5 + 56);
    v8 = *(unsigned int *)(*(_QWORD *)(a5 + 48) + 4 * a2);
    v9 = type metadata accessor for Matrix2dPB(0);
    outlined init with copy of TrackingUpdateDataPB(v7 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a2, v6, type metadata accessor for Matrix2dPB);
    return v8;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_s5SIMD2VySfGs5NeverOTg5074_s5Hands13TrackingUtilsC25armJointToHandCenterAngle12jointsARvinoSfSgSays5g2VyT15GG_tFZAISiXEfU_SayAKGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(_BYTE *, _QWORD);
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v22[32];
  uint64_t v23;

  v4 = type metadata accessor for IndexSet.Index();
  v19 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x24BDCF460]);
  v8 = dispatch thunk of Collection.count.getter();
  result = MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v18[0] = v4;
    v18[1] = v2;
    v23 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    v10 = v23;
    result = dispatch thunk of Collection.startIndex.getter();
    if ((v8 & 0x8000000000000000) == 0)
    {
      v11 = *(_QWORD *)(a2 + 16);
      v20 = a2 + 32;
      v21 = v11;
      while (1)
      {
        v12 = (uint64_t (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
        v14 = *v13;
        result = v12(v22, 0);
        if (v14 >= v21)
          break;
        v15 = *(_QWORD *)(v20 + 8 * v14);
        v23 = v10;
        v17 = *(_QWORD *)(v10 + 16);
        v16 = *(_QWORD *)(v10 + 24);
        if (v17 >= v16 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
          v10 = v23;
        }
        *(_QWORD *)(v10 + 16) = v17 + 1;
        *(_QWORD *)(v10 + 8 * v17 + 32) = v15;
        dispatch thunk of Collection.formIndex(after:)();
        if (!--v8)
        {
          (*(void (**)(char *, _QWORD))(v19 + 8))(v7, v18[0]);
          return v23;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_s5SIMD2VySfGs5NeverOTg50111_s5Hands13TrackingUtilsC22wristToHandCenterAngle17jointsOrKeypoints9imageData6configSfSDyAA12CameraSourceOSays5g2Vyu4GGG_v41AISgAA05ImageM0VGAA15UvOFilterConfigVtFZyV38AISfGz_AI3key_AM5valuettXEfU_ALSiXEfU_5Hands0xY0O3key_SayAKG5valuetTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(_BYTE *, _QWORD);
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE v24[32];
  uint64_t v25;

  v6 = type metadata accessor for IndexSet.Index();
  v21 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x24BDCF460]);
  v10 = dispatch thunk of Collection.count.getter();
  result = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v20[0] = v6;
    v20[1] = v4;
    v25 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 & ~(v10 >> 63), 0);
    v12 = v25;
    result = dispatch thunk of Collection.startIndex.getter();
    if ((v10 & 0x8000000000000000) == 0)
    {
      v13 = *(_QWORD *)(a4 + 16);
      v22 = a4 + 32;
      v23 = v13;
      while (1)
      {
        v14 = (uint64_t (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
        v16 = *v15;
        result = v14(v24, 0);
        if (v16 >= v23)
          break;
        v17 = *(_QWORD *)(v22 + 8 * v16);
        v25 = v12;
        v19 = *(_QWORD *)(v12 + 16);
        v18 = *(_QWORD *)(v12 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          v12 = v25;
        }
        *(_QWORD *)(v12 + 16) = v19 + 1;
        *(_QWORD *)(v12 + 8 * v19 + 32) = v17;
        dispatch thunk of Collection.formIndex(after:)();
        if (!--v10)
        {
          (*(void (**)(char *, _QWORD))(v21 + 8))(v9, v20[0]);
          return v25;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

BOOL specialized static TrackingUtils.onMarginRectilinearImage(bbox:imageSize:thres:)(int8x16_t a1, double a2, double a3)
{
  int32x2_t v3;
  _BOOL8 result;

  v3 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0), vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), *(float32x2_t *)&a2));
  result = 1;
  if ((v3.i8[0] & 1) == 0
    && (float)(*(float *)&a2 - *(float *)&a3) >= vmuls_n_f32(*(float *)a1.i32, *(float *)&a2)
    && (v3.i8[4] & 1) == 0)
  {
    return (float)(*((float *)&a2 + 1) - *(float *)&a3) < vmuls_lane_f32(*(float *)&a1.i32[1], *(float32x2_t *)&a2, 1);
  }
  return result;
}

uint64_t specialized static TrackingUtils.calculateBboxFromJoints(joints2d:)(float32x2_t *a1)
{
  float32x2_t v1;
  float32x2_t v2;
  uint64_t v3;
  float32x2_t v4;
  float32x2_t *v6;
  uint64_t v7;
  float32x2_t v8;
  float32x2_t *v9;
  uint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t *v13;
  uint64_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t *v17;
  float32x2_t v18;

  v1 = a1[2];
  if (!*(_QWORD *)&v1)
    return 0;
  v2 = a1[4];
  v3 = *(_QWORD *)&v1 - 1;
  if (*(_QWORD *)&v1 == 1)
    return (uint64_t)a1[4];
  v6 = a1 + 5;
  v7 = *(_QWORD *)&v1 - 1;
  v4 = a1[4];
  do
  {
    v8 = *v6++;
    v4 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v4, v8), 0), (int8x8_t)v8, (int8x8_t)v4);
    --v7;
  }
  while (v7);
  v9 = a1 + 5;
  v10 = *(_QWORD *)&v1 - 1;
  v11 = a1[4];
  do
  {
    v12 = *v9++;
    v11 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v11, v12), 1), (int8x8_t)v12, (int8x8_t)v11);
    --v10;
  }
  while (v10);
  v13 = a1 + 5;
  v14 = *(_QWORD *)&v1 - 1;
  v15 = a1[4];
  do
  {
    v16 = *v13++;
    v15 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v16, v15), 0), (int8x8_t)v16, (int8x8_t)v15);
    --v14;
  }
  while (v14);
  v17 = a1 + 5;
  do
  {
    v18 = *v17++;
    v2 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v18, v2), 1), (int8x8_t)v18, (int8x8_t)v2);
    --v3;
  }
  while (v3);
  v4.i32[1] = v11.i32[1];
  return (uint64_t)v4;
}

uint64_t specialized static TrackingUtils.onMarginCurvilinearImage(joints:imageSize:thres:)(uint64_t a1, float32x2_t a2, float a3)
{
  float v4;
  float v5;
  int64_t v6;
  float32x2_t v8;
  float32x2_t v9;
  uint64_t result;
  float32x2_t *v11;
  unint64_t v12;
  float32x2_t v13;
  unint64_t v14;
  unint64_t v15;
  float32x2_t v16;
  float v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v24;
  uint64_t v25;

  if ((a2.i32[1] & 0x7FFFFF) != 0)
    v4 = a2.f32[0];
  else
    v4 = a2.f32[1];
  if ((~a2.i32[1] & 0x7F800000) != 0)
    v4 = a2.f32[1];
  if (a2.f32[0] > a2.f32[1])
    v5 = v4;
  else
    v5 = a2.f32[0];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v8 = vmul_f32(a2, (float32x2_t)0x3F0000003F000000);
    v24 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v9 = a2;
    result = v24;
    v11 = (float32x2_t *)(a1 + 32);
    v12 = *(_QWORD *)(v24 + 16);
    do
    {
      v13 = *v11;
      v25 = result;
      v14 = *(_QWORD *)(result + 24);
      v15 = v12 + 1;
      if (v12 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v12 + 1, 1);
        v9 = a2;
        result = v25;
      }
      v16 = vsub_f32(vmul_f32(v13, v9), v8);
      *(_QWORD *)(result + 16) = v15;
      *(float *)(result + 4 * v12 + 32) = sqrtf(vaddv_f32(vmul_f32(v16, v16)));
      ++v11;
      ++v12;
      --v6;
    }
    while (v6);
  }
  else
  {
    result = MEMORY[0x24BEE4AF8];
    v15 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v15)
      goto LABEL_18;
  }
  v17 = (float)(v5 * 0.5) - a3;
  if (v17 >= *(float *)(result + 32))
  {
    v18 = 0;
    goto LABEL_27;
  }
  if (v15 == 1)
  {
LABEL_18:
    v18 = 1;
LABEL_27:
    swift_bridgeObjectRelease();
    return v18;
  }
  v19 = 9;
  while (1)
  {
    v20 = v19 - 7;
    if (__OFADD__(v19 - 8, 1))
      break;
    v21 = *(float *)(result + 4 * v19);
    v18 = v17 < v21;
    ++v19;
    if (v17 >= v21 || v20 == v15)
      goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t specialized static TrackingUtils.isHandOnImageMargin(joints2d:image:config:)(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  float32x2_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t v9;
  char v10;
  int8x16_t v11;
  float v12;
  float v13;
  float v14;
  double v15;
  float v16;
  float v17;
  float v19;
  float v20;
  float v21;
  int32x2_t v22;
  uint64_t v23;
  float32x2_t v24;

  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(float32x2_t *)(a2 + 184);
  if (*(_BYTE *)(a2 + 80) == 1)
    __asm { BR              X11 }
  if (v4 > 5)
    return 0;
  if (((1 << v4) & 3) == 0)
  {
    if (((1 << v4) & 0xC) != 0)
    {
      if ((*(_BYTE *)(a3 + 31) & 1) == 0)
      {
        v6 = *(_DWORD *)(a3 + 60);
LABEL_13:
        v12 = (float)v6;
        return specialized static TrackingUtils.onMarginCurvilinearImage(joints:imageSize:thres:)((uint64_t)a1, v5, v12);
      }
      if ((v5.i32[1] & 0x7FFFFF) != 0)
        LODWORD(v13) = *(_QWORD *)(a2 + 184);
      else
        LODWORD(v13) = HIDWORD(*(_QWORD *)(a2 + 184));
      if ((~v5.i32[1] & 0x7F800000) != 0)
        LODWORD(v13) = HIDWORD(*(_QWORD *)(a2 + 184));
      if (v5.f32[1] >= v5.f32[0])
        v14 = v13;
      else
        LODWORD(v14) = *(_QWORD *)(a2 + 184);
      v15 = *(double *)(a3 + 40);
    }
    else
    {
      if ((*(_BYTE *)(a3 + 30) & 1) == 0)
      {
        v6 = *(_DWORD *)(a3 + 64);
        goto LABEL_13;
      }
      if ((v5.i32[1] & 0x7FFFFF) != 0)
        LODWORD(v16) = *(_QWORD *)(a2 + 184);
      else
        LODWORD(v16) = HIDWORD(*(_QWORD *)(a2 + 184));
      if ((~v5.i32[1] & 0x7F800000) != 0)
        LODWORD(v16) = HIDWORD(*(_QWORD *)(a2 + 184));
      if (v5.f32[1] >= v5.f32[0])
        v14 = v16;
      else
        LODWORD(v14) = *(_QWORD *)(a2 + 184);
      v15 = *(double *)(a3 + 48);
    }
    v17 = v15;
    v12 = v14 * v17;
    return specialized static TrackingUtils.onMarginCurvilinearImage(joints:imageSize:thres:)((uint64_t)a1, v5, v12);
  }
  v24 = *(float32x2_t *)(a2 + 184);
  v7 = specialized static TrackingUtils.calculateBboxFromJoints(joints2d:)(a1);
  if ((v10 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x23D71E3B0);
  }
  v11.i64[0] = v7;
  v11.i64[1] = v8;
  if ((*(_BYTE *)(a3 + 29) & 1) != 0)
  {
    if ((v24.i32[1] & 0x7FFFFF) != 0)
      v19 = v24.f32[0];
    else
      v19 = v24.f32[1];
    if ((~v24.i32[1] & 0x7F800000) != 0)
      v19 = v24.f32[1];
    if (v24.f32[1] >= v24.f32[0])
      v20 = v19;
    else
      v20 = v24.f32[0];
    v21 = *(double *)(a3 + 32);
    *(float *)v9.i32 = v20 * v21;
  }
  else
  {
    *(float *)v9.i32 = (float)*(int *)(a3 + 56);
  }
  v22 = vcgt_f32((float32x2_t)vdup_lane_s32(v9, 0), vmul_f32(v24, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)));
  v23 = 1;
  if ((v22.i8[0] & 1) == 0
    && (float)(v24.f32[0] - *(float *)v9.i32) >= (float)(*(float *)&v7 * v24.f32[0])
    && (v22.i8[4] & 1) == 0)
  {
    return (float)(v24.f32[1] - *(float *)v9.i32) < vmuls_lane_f32(v24.f32[1], (float32x2_t)v7, 1);
  }
  return v23;
}

float specialized static TrackingUtils.calcMaxCenterDistance(hand:poseSpecCameras:images:center2DPerCamera:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  float v11;
  float32x2_t v12;
  float v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 0.0;
  v35 = a2 + 32;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = (__int128 *)(a3 + 32);
  swift_bridgeObjectRetain();
  v9 = 0;
  v10 = (__int128 *)(a3 + 224);
  v11 = 0.0;
  do
  {
    if (v7)
    {
      v14 = (uint64_t *)(v35 + 16 * v9);
      v15 = *v14;
      LODWORD(v14) = *((unsigned __int8 *)v14 + 8);
      v16 = v8[9];
      v44 = v8[8];
      v45 = v16;
      v17 = v8[11];
      v46 = v8[10];
      v47 = v17;
      v18 = v8[5];
      v40 = v8[4];
      v41 = v18;
      v19 = v8[7];
      v42 = v8[6];
      v43 = v19;
      v20 = v8[1];
      v36 = *v8;
      v37 = v20;
      v21 = v8[3];
      v38 = v8[2];
      v39 = v21;
      v22 = *((_QWORD *)&v40 + 1);
      v23 = v7 - 1;
      v24 = v10;
      v25 = v41;
      if ((_DWORD)v14)
        __asm { BR              X12 }
      while (v22 != v15)
      {
        if (!v23)
          goto LABEL_5;
        v26 = v24[9];
        v44 = v24[8];
        v45 = v26;
        v27 = v24[11];
        v46 = v24[10];
        v47 = v27;
        v28 = v24[5];
        v40 = v24[4];
        v41 = v28;
        v29 = v24[7];
        v42 = v24[6];
        v43 = v29;
        v30 = v24[1];
        v36 = *v24;
        v37 = v30;
        v31 = v24[3];
        v38 = v24[2];
        v39 = v31;
        v22 = *((_QWORD *)&v40 + 1);
        v24 += 12;
        --v23;
        v25 = v41;
      }
      if (*(_QWORD *)(a4 + 16))
      {
        outlined retain of ImageData((uint64_t)&v36);
        v32 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v25 & 1);
        if ((v33 & 1) != 0)
        {
          v12 = vadd_f32(vmul_f32(*(float32x2_t *)(*(_QWORD *)(a4 + 56) + 8 * v32), *(float32x2_t *)((char *)&v47 + 8)), vmul_f32(*(float32x2_t *)((char *)&v47 + 8), (float32x2_t)0xBF000000BF000000));
          v13 = sqrtf(vaddv_f32(vmul_f32(v12, v12)));
          outlined release of ImageData((uint64_t)&v36);
          if (v13 > v11)
            v11 = v13;
        }
        else
        {
          outlined release of ImageData((uint64_t)&v36);
        }
      }
    }
LABEL_5:
    ++v9;
  }
  while (v9 != v4);
  swift_bridgeObjectRelease();
  return v11;
}

void specialized static TrackingUtils.calculateVectorAngle(vector:useYReference:)(_QWORD *a1, char a2)
{
  float32x2_t v2;
  unsigned int v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;

  if (a1[2] < 2uLL)
  {
    __break(1u);
  }
  else
  {
    v2 = (float32x2_t)a1[4];
    if ((a2 & 1) != 0)
      v3 = -1;
    else
      v3 = 0;
    v4 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v3), (int8x8_t)0x3F80000000000000, (int8x8_t)1065353216);
    v5 = (float32x2_t)__PAIR64__(v2.u32[1], a1[5]);
    v2.i32[1] = HIDWORD(a1[5]);
    v6 = vsub_f32(v5, v2);
    acosf(vaddv_f32(vmul_f32(v4, v6)) / (float)(sqrtf(vaddv_f32(v4)) * sqrtf(vaddv_f32(vmul_f32(v6, v6)))));
  }
}

unint64_t specialized static TrackingUtils.armJointToHandCenterAngle(jointsARvino:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t result;
  uint64_t v15;
  float32x2_t v16;
  uint64_t inited;
  __int32 v18;
  _QWORD v20[4];
  uint64_t v21;

  v2 = type metadata accessor for IndexSet();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v6 = (char *)&v20[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 <= 0x19)
  {
    v20[0] = 0;
    v20[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v8._object = (void *)0x800000023D9C7DF0;
    v8._countAndFlagsBits = 0xD000000000000033;
    String.append(_:)(v8);
    v21 = v7;
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 2112544;
    v10._object = (void *)0xE300000000000000;
    String.append(_:)(v10);
    v21 = 26;
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v20[3] = MEMORY[0x24BEE0D00];
    specialized static HLog.W(file:function:line:_:_:)(0xD000000000000061, 0x800000023D9C7CA0, 240, (uint64_t)v20, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
    v12 = 0;
LABEL_5:
    LOBYTE(v20[0]) = v7 < 0x1A;
    return v12 | ((unint64_t)(v7 < 0x1A) << 32);
  }
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x24BDCF468]);
  dispatch thunk of SetAlgebra.init()();
  v21 = 6;
  dispatch thunk of SetAlgebra.insert(_:)();
  v21 = 11;
  dispatch thunk of SetAlgebra.insert(_:)();
  v21 = 16;
  dispatch thunk of SetAlgebra.insert(_:)();
  v21 = 0;
  dispatch thunk of SetAlgebra.insert(_:)();
  swift_bridgeObjectRetain();
  v13 = (_QWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_s5SIMD2VySfGs5NeverOTg5074_s5Hands13TrackingUtilsC25armJointToHandCenterAngle12jointsARvinoSfSgSays5g2VyT15GG_tFZAISiXEfU_SayAKGTf1cn_nTf4ng_n((uint64_t)v6, a1);
  result = swift_bridgeObjectRelease();
  if (v7 != 26)
  {
    v15 = *(_QWORD *)(a1 + 240);
    v16 = specialized static HandsKitUtils.calculate2DHandCenter(_:)(v13);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
    *(_QWORD *)(inited + 32) = v15;
    *(float32x2_t *)(inited + 40) = v16;
    specialized static TrackingUtils.calculateVectorAngle(vector:useYReference:)((_QWORD *)inited, 0);
    v16.i32[0] = v18;
    swift_setDeallocating();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v12 = v16.u32[0];
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v5 = v4;
  v34 = a3;
  v9 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v9, v10);
  v32 = (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v16 = (char *)&v29 - v15;
  result = MEMORY[0x24BEE4AF8];
  v36 = MEMORY[0x24BEE4AF8];
  v18 = *(_QWORD *)(a1 + 16);
  if (v18)
  {
    v19 = 0;
    v20 = *(_QWORD *)(v14 + 72);
    v31 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v21 = a1 + v31;
    v33 = v16 + 268;
    v35 = (_QWORD *)(a2 + 48);
    v22 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(v21 + v20 * v19, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if (*((_QWORD *)v16 + 2))
      {
        if ((v16[128] & 1) != 0)
        {
          v23 = *(_QWORD *)(a2 + 16);
          if (v23)
          {
            v24 = v35;
            while (*v24 != *((_QWORD *)v16 + 18))
            {
              v24 += 40;
              if (!--v23)
                goto LABEL_21;
            }
            v25 = *(v24 - 1);
            if ((*v33 & 1) != 0)
            {
              if (v25 > v34 && a4 > 0.0)
                goto LABEL_16;
            }
            else if (v25 > v34 && *((float *)v16 + 66) < a4)
            {
LABEL_16:
              v30 = v5;
              outlined init with take of Matrix2dPB((uint64_t)v16, v32, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1);
              v22 = v36;
              v27 = *(_QWORD *)(v36 + 16);
              v26 = *(_QWORD *)(v36 + 24);
              v28 = v27 + 1;
              if (v27 >= v26 >> 1)
              {
                v29 = v27 + 1;
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
                v28 = v29;
                v22 = v36;
              }
              *(_QWORD *)(v22 + 16) = v28;
              outlined init with take of Matrix2dPB(v32, v22 + v31 + v27 * v20, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
              v5 = v30;
              goto LABEL_22;
            }
          }
        }
      }
LABEL_21:
      outlined destroy of Matrix3x3PB((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
LABEL_22:
      if (++v19 == v18)
        return v36;
    }
  }
  return result;
}

uint64_t specialized static TrackingUtils.findTrackingInfoIndexOfID(_:ID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *i;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  result = 0;
  for (i = (_QWORD *)(a1 + 48); *i != a2; i += 40)
  {
    if (v2 == ++result)
      return 0;
  }
  return result;
}

void *specialized closure #1 in static TrackingUtils.verifyAssociation(hands:tinfos:matchResult:config:)(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t a4, float a5, float a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  void *result;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  float32x4_t v36;
  uint64_t v37;
  int v38;
  char v39;
  unsigned int v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float v45;
  BOOL v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  _OWORD v52[5];
  _OWORD v53[2];
  _OWORD v54[5];
  _OWORD v55[2];
  _QWORD v56[40];

  v12 = type metadata accessor for HandDescriptor();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v50 = (uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a2;
  v17 = a2[1];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v56[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, v16, isUniquelyReferenced_nonNull_native);
  *a1 = v56[0];
  swift_bridgeObjectRelease();
  v19 = a3[2];
  if (!v19)
  {
LABEL_11:
    v56[0] = 0;
    v56[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v56[0] = 0xD000000000000010;
    v56[1] = 0x800000023D9C7D80;
    v51[0] = v16;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 0x7427736E656F6420;
    v32._object = (void *)0xEE00747369786520;
    String.append(_:)(v32);
    v56[3] = MEMORY[0x24BEE0D00];
    specialized static HLog.E(file:function:line:_:_:)(0xD000000000000061, 0x800000023D9C7CA0, 83, (uint64_t)v56, MEMORY[0x24BEE4AF8]);
    return (void *)__swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
  }
  result = memcpy(v56, a3 + 4, 0x138uLL);
  if (v56[2] != v16)
  {
    v21 = (char *)(a3 + 44);
    while (--v19)
    {
      v22 = v21 + 320;
      result = memcpy(v56, v21, 0x138uLL);
      v21 = v22;
      if (v56[2] == v16)
        goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_6:
  v23 = v56[7];
  v49 = v56[6];
  v24 = v56[8];
  if ((v17 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v17 >= *(_QWORD *)(a4 + 16))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v25 = a4
      + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
      + *(_QWORD *)(v13 + 72) * v17;
  v26 = v50;
  outlined init with copy of TrackingUpdateDataPB(v25, v50, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (!v24)
  {
    v51[0] = 0;
    v51[1] = 0xE000000000000000;
    outlined retain of (TrackingInfo, Int)((uint64_t)v56);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    strcpy((char *)v51, "TrackingInfo ");
    HIWORD(v51[1]) = -4864;
    *(_QWORD *)&v54[0] = v16;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 0xD000000000000018;
    v34._object = (void *)0x800000023D9C7DA0;
    String.append(_:)(v34);
    *((_QWORD *)&v52[0] + 1) = MEMORY[0x24BEE0D00];
    v29 = MEMORY[0x24BEE4AF8];
    v30 = 89;
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v26 + 192) & 1) != 0)
  {
    v51[0] = 0;
    v51[1] = 0xE000000000000000;
    outlined retain of (TrackingInfo, Int)((uint64_t)v56);
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v51[0] = 0x20646E6148;
    v51[1] = 0xE500000000000000;
    *(_QWORD *)&v54[0] = *(_QWORD *)(v26 + 144);
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0xD000000000000019;
    v28._object = (void *)0x800000023D9C7DC0;
    String.append(_:)(v28);
    *((_QWORD *)&v52[0] + 1) = MEMORY[0x24BEE0D00];
    v29 = MEMORY[0x24BEE4AF8];
    v30 = 93;
LABEL_13:
    specialized static HLog.E(file:function:line:_:_:)(0xD000000000000061, 0x800000023D9C7CA0, v30, (uint64_t)v51, v29);
    outlined release of TrackingInfo((uint64_t)v56);
    outlined destroy of Matrix3x3PB(v26, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    return (void *)__swift_destroy_boxed_opaque_existential_0((uint64_t)v51);
  }
  v35 = *(_QWORD *)(v26 + 176);
  v36.i64[0] = v35;
  v36.i64[1] = *(_QWORD *)(v26 + 184);
  v48 = v36;
  v37 = *(_QWORD *)(v26 + *(int *)(v12 + 72));
  result = (void *)specialized Dictionary.startIndex.getter(v37);
  if ((v39 & 1) != 0)
    goto LABEL_29;
  v40 = v49;
  if (*(_DWORD *)(v37 + 36) == v38)
  {
    v41.i64[0] = v49;
    v41.i64[1] = v23;
    v47 = v41;
    if (result == (void *)(1 << *(_BYTE *)(v37 + 32)))
    {
      outlined retain of (TrackingInfo, Int)((uint64_t)v56);
    }
    else
    {
      specialized Dictionary.subscript.getter((uint64_t)v51, v52, (uint64_t)result, v38, 0, v37);
      v54[4] = v52[4];
      v55[0] = v53[0];
      *(_OWORD *)((char *)v55 + 9) = *(_OWORD *)((char *)v53 + 9);
      v54[0] = v52[0];
      v54[1] = v52[1];
      v54[2] = v52[2];
      v54[3] = v52[3];
      outlined retain of (TrackingInfo, Int)((uint64_t)v56);
      outlined release of DetectionResult((uint64_t)v54);
      if ((BYTE8(v55[1]) & 1) == 0)
      {
        v44 = vsub_f32((float32x2_t)__PAIR64__(v48.u32[1], v35), (float32x2_t)__PAIR64__(v47.u32[1], v40));
        v46 = sqrtf(vaddv_f32(vmul_f32(v44, v44))) <= a5;
        v45 = fabsf(COERCE_FLOAT(vsubq_f32(v48, v47).i32[2]));
        v46 = v46 && v45 <= a6;
        if (v46)
          goto LABEL_20;
LABEL_25:
        specialized Dictionary._Variant.removeValue(forKey:)(v16);
        outlined release of TrackingInfo((uint64_t)v56);
        return (void *)outlined destroy of Matrix3x3PB(v26, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      }
    }
    v42 = vsubq_f32(v48, v47);
    v43 = vmulq_f32(v42, v42);
    if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0]) <= a5)
    {
LABEL_20:
      outlined destroy of Matrix3x3PB(v26, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      return (void *)outlined release of TrackingInfo((uint64_t)v56);
    }
    goto LABEL_25;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized static TrackingUtils.CollectPoseUncertainty(handPose:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  unint64_t v3;

  v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_23D9A7080;
  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(_DWORD *)(result + 32) = *(_DWORD *)(v1 + 36);
  if (v3 < 7)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  *(_DWORD *)(result + 36) = *(_DWORD *)(v1 + 900);
  if (v3 < 0xC)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(_DWORD *)(result + 40) = *(_DWORD *)(v1 + 1620);
  if (v3 >= 0x11)
  {
    *(_DWORD *)(result + 44) = *(_DWORD *)(v1 + 2340);
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

float specialized static TrackingUtils.calculateIntersectionOverHand(bbox0:bbox1:)(float32x4_t a1, float32x4_t a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  if (a2.f32[2] >= a1.f32[2])
    v2 = a1.f32[2];
  else
    v2 = a2.f32[2];
  if ((vmovn_s32(vcgeq_f32(a2, a1)).u8[0] & 1) != 0)
    v3 = a2.f32[0];
  else
    v3 = a1.f32[0];
  v4 = v2 - v3;
  if (v4 >= 0.0)
  {
    v5 = a1.f32[3] - a1.f32[1];
    v9 = 0.0;
    if ((float)(a1.f32[3] - a1.f32[1]) < 0.0)
      v5 = 0.0;
    v10 = a1.f32[3] - a2.f32[1];
    if ((float)(a1.f32[3] - a2.f32[1]) < 0.0)
      v10 = 0.0;
    if (a1.f32[1] > a2.f32[1])
    {
      v11 = a1.f32[1];
    }
    else
    {
      v5 = v10;
      v11 = a2.f32[1];
    }
    v12 = a2.f32[3] - v11;
    if (v12 >= 0.0)
      v9 = v12;
    if (a2.f32[3] < a1.f32[3])
      v5 = v9;
  }
  else
  {
    v5 = a2.f32[3] - a1.f32[1];
    v4 = 0.0;
    if ((float)(a2.f32[3] - a1.f32[1]) < 0.0)
      v5 = 0.0;
    v6 = a2.f32[3] - a2.f32[1];
    if ((float)(a2.f32[3] - a2.f32[1]) < 0.0)
      v6 = 0.0;
    if (a1.f32[1] <= a2.f32[1])
      v5 = v6;
    v7 = a1.f32[3] - a1.f32[1];
    if ((float)(a1.f32[3] - a1.f32[1]) < 0.0)
      v7 = 0.0;
    v8 = a1.f32[3] - a2.f32[1];
    if ((float)(a1.f32[3] - a2.f32[1]) < 0.0)
      v8 = 0.0;
    if (a1.f32[1] <= a2.f32[1])
      v7 = v8;
    if (a2.f32[3] >= a1.f32[3])
      v5 = v7;
  }
  v13 = v5 * v4;
  v14 = (float)(a1.f32[2] - a1.f32[0]) * (float)(a1.f32[3] - a1.f32[1]);
  if (v14 <= 0.0)
    return 0.0;
  else
    return v13 / v14;
}

void specialized static TrackingUtils.distanceToCameraOrigin(handCenter:images:isN301:)(uint64_t a1, uint64_t a2, char a3)
{
  simd_float4x4 v4;
  unint64_t v5;
  char v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  float32x4_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  float32x4_t v45;
  simd_float4 v46;
  __int32 v47;
  __int32 v48;
  __int32 v49;
  __int32 v50;
  __int32 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64[8];
  uint64_t v65[8];

  v4.columns[2] = *(simd_float4 *)(a1 + 16);
  v47 = v4.columns[2].i32[0];
  if ((a3 & 1) == 0)
  {
    v18 = 0;
    v19 = a2 + 64;
    v20 = 1 << *(_BYTE *)(a2 + 32);
    v21 = -1;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    v22 = v21 & *(_QWORD *)(a2 + 64);
    v4.columns[3] = (simd_float4)vdupq_lane_s32(*(int32x2_t *)v4.columns[2].f32, 1);
    v23 = (unint64_t)(v20 + 63) >> 6;
    v24 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v4.columns[2], 2);
    v25 = 3.4028e38;
    v45 = v24;
    v46 = v4.columns[3];
    while (1)
    {
      if (v22)
      {
        v39 = __clz(__rbit64(v22));
        v22 &= v22 - 1;
        v40 = v39 | (v18 << 6);
      }
      else
      {
        v41 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
          __break(1u);
          goto LABEL_36;
        }
        if (v41 >= v23)
          return;
        v42 = *(_QWORD *)(v19 + 8 * v41);
        ++v18;
        if (!v42)
        {
          v18 = v41 + 1;
          if (v41 + 1 >= v23)
            return;
          v42 = *(_QWORD *)(v19 + 8 * v18);
          if (!v42)
          {
            v18 = v41 + 2;
            if (v41 + 2 >= v23)
              return;
            v42 = *(_QWORD *)(v19 + 8 * v18);
            if (!v42)
            {
              v18 = v41 + 3;
              if (v41 + 3 >= v23)
                return;
              v42 = *(_QWORD *)(v19 + 8 * v18);
              if (!v42)
              {
                v43 = v41 + 4;
                if (v43 >= v23)
                  return;
                v42 = *(_QWORD *)(v19 + 8 * v43);
                if (!v42)
                {
                  while (1)
                  {
                    v18 = v43 + 1;
                    if (__OFADD__(v43, 1))
                      break;
                    if (v18 >= v23)
                      return;
                    v42 = *(_QWORD *)(v19 + 8 * v18);
                    ++v43;
                    if (v42)
                      goto LABEL_29;
                  }
LABEL_36:
                  __break(1u);
                  return;
                }
                v18 = v43;
              }
            }
          }
        }
LABEL_29:
        v22 = (v42 - 1) & v42;
        v40 = __clz(__rbit64(v42)) + (v18 << 6);
      }
      v44 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 192 * v40 + 64);
      if ((*(_BYTE *)(v44 + 400) & 1) != 0)
      {
        swift_beginAccess();
        v4 = __invert_f4(*(simd_float4x4 *)(v44 + 192));
        v24 = v45;
        *(simd_float4x4 *)(v44 + 256) = v4;
        v4.columns[0].i32[3] = v51;
        v4.columns[1].i32[3] = v50;
        v4.columns[2].i32[3] = v49;
        *(_BYTE *)(v44 + 320) = 0;
        v4.columns[3].i32[3] = v48;
        *(simd_float4x4 *)(v44 + 336) = v4;
        *(_BYTE *)(v44 + 400) = 0;
        v26 = v4.columns[0].i64[1];
        v27 = v4.columns[0].i64[0];
        v28 = v4.columns[1].i64[1];
        v29 = v4.columns[1].i64[0];
        v30 = v4.columns[2].i64[1];
        v31 = v4.columns[2].i64[0];
        v32 = v4.columns[3].i64[1];
        v33 = v4.columns[3].i64[0];
        v4.columns[3] = v46;
        v4.columns[2].i32[0] = v47;
      }
      else
      {
        v33 = *(_QWORD *)(v44 + 384);
        v32 = *(_QWORD *)(v44 + 392);
        v31 = *(_QWORD *)(v44 + 368);
        v30 = *(_QWORD *)(v44 + 376);
        v29 = *(_QWORD *)(v44 + 352);
        v28 = *(_QWORD *)(v44 + 360);
        v27 = *(_QWORD *)(v44 + 336);
        v26 = *(_QWORD *)(v44 + 344);
      }
      v4.columns[0].i64[0] = v27;
      v4.columns[0].i64[1] = v26;
      v4.columns[1].i64[0] = v29;
      v4.columns[1].i64[1] = v28;
      v34 = vmlaq_f32(vmulq_n_f32((float32x4_t)v4.columns[0], v4.columns[2].f32[0]), (float32x4_t)v4.columns[3], (float32x4_t)v4.columns[1]);
      v35.i64[0] = v31;
      v35.i64[1] = v30;
      v36 = vmlaq_f32(v34, v24, v35);
      v35.i64[0] = v33;
      v35.i64[1] = v32;
      v37 = vaddq_f32(v36, v35);
      v38 = vmulq_f32(v37, v37);
      v25 = fminf(v25, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]));
    }
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(3, 1);
    if ((v6 & 1) != 0)
    {
      v7 = (__int128 *)(*(_QWORD *)(a2 + 56) + 192 * v5);
      v8 = v7[3];
      v10 = *v7;
      v9 = v7[1];
      v54 = v7[2];
      v55 = v8;
      v52 = v10;
      v53 = v9;
      v11 = v7[7];
      v13 = v7[4];
      v12 = v7[5];
      v58 = v7[6];
      v59 = v11;
      v56 = v13;
      v57 = v12;
      v14 = v7[11];
      v16 = v7[8];
      v15 = v7[9];
      v62 = v7[10];
      v63 = v14;
      v60 = v16;
      v61 = v15;
      if (*(_QWORD *)(a2 + 16))
      {
        outlined retain of ImageData((uint64_t)&v52);
        specialized __RawDictionaryStorage.find<A>(_:)(2, 1);
        if ((v17 & 1) != 0)
        {
          ImageCalibrationData.headsetToCameraTransform4x3.getter(v64);
          ImageCalibrationData.headsetToCameraTransform4x3.getter(v65);
          outlined release of ImageData((uint64_t)&v52);
          return;
        }
        outlined release of ImageData((uint64_t)&v52);
      }
    }
  }
  *((_QWORD *)&v53 + 1) = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v52 = 0xD00000000000002BLL;
  *((_QWORD *)&v52 + 1) = 0x800000023D9C7D50;
  type metadata accessor for HandyLoggerNeo();
  memset(v65, 0, 32);
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, v65, 0xD000000000000061, 0x800000023D9C7CA0, 205, (uint64_t)&v52, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v52);
}

float specialized static TrackingUtils.wristToHandCenterAngle(jointsOrKeypoints:imageData:config:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  float v10;
  uint64_t v11;
  char v12;
  float v13;

  v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRetain();
  v7 = specialized Sequence.reduce<A>(into:_:)(v6, a1, a2, a3);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v7 + 16))
  {
    v10 = 360.0;
    goto LABEL_11;
  }
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(2, 1);
  if ((v9 & 1) == 0)
  {
    v10 = 360.0;
    if (*(_QWORD *)(v7 + 16))
      goto LABEL_7;
LABEL_11:
    swift_bridgeObjectRelease();
    return v10;
  }
  v10 = fminf(*(float *)(*(_QWORD *)(v7 + 56) + 4 * v8), 360.0);
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_11;
LABEL_7:
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(3, 1);
  if ((v12 & 1) == 0)
    goto LABEL_11;
  v13 = *(float *)(*(_QWORD *)(v7 + 56) + 4 * v11);
  swift_bridgeObjectRelease();
  if (v13 < v10)
    return v13;
  return v10;
}

BOOL specialized static TrackingUtils.voteHandByLegacyJointUncertainty(handPose0:handPose1:)(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v26[7];
  uint64_t v27;
  _OWORD v28[7];
  uint64_t v29;

  v2 = *(_OWORD *)(a1 + 80);
  v28[4] = *(_OWORD *)(a1 + 64);
  v28[5] = v2;
  v28[6] = *(_OWORD *)(a1 + 96);
  v29 = *(_QWORD *)(a1 + 112);
  v3 = *(_OWORD *)(a1 + 16);
  v28[0] = *(_OWORD *)a1;
  v28[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v28[2] = *(_OWORD *)(a1 + 32);
  v28[3] = v4;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  v26[2] = a2[2];
  v26[3] = v7;
  v26[0] = v5;
  v26[1] = v6;
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v27 = *((_QWORD *)a2 + 14);
  v26[6] = v10;
  v26[4] = v8;
  v26[5] = v9;
  if (one-time initialization token for _mapping != -1)
    swift_once();
  v11 = static HandsKitUtils._mapping;
  v12 = *(_QWORD *)(static HandsKitUtils._mapping + 16);
  outlined retain of HandPose((uint64_t)v28);
  v13 = swift_bridgeObjectRetain();
  v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_Sfs5NeverOTg5015_s5Hands19Pinche53OcclusionC06updatebC11UncertaintyySaySfGAA8HandPoseV_o4So06d2C7F14VGtFZSfAIXEfU_5Hands0rS0VTf1cn_nTf4ng_n(v13, (uint64_t)v28);
  outlined release of HandPose((uint64_t)v28);
  outlined retain of HandPose((uint64_t)v26);
  v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_Sfs5NeverOTg5015_s5Hands19Pinche53OcclusionC06updatebC11UncertaintyySaySfGAA8HandPoseV_o4So06d2C7F14VGtFZSfAIXEfU_5Hands0rS0VTf1cn_nTf4ng_n(v11, (uint64_t)v26);
  outlined release of HandPose((uint64_t)v26);
  swift_bridgeObjectRelease();
  v16 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySfGAHG_Sfs5NeverOTg5021_sS3fIgyyd_Sf_SftSfs5f112OIegnrzr_TR107_s5Hands13TrackingUtilsC32voteHandByLegacyJointUncertainty9handPose00J5Pose1SiAA0E4PoseV_AHtFZS2f_K16XEfU1_Tf3nnnpf_nTf1cn_n(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v18 = (float *)(v16 + 32);
    v19 = MEMORY[0x24BEE4AF8];
    do
    {
      v22 = *v18;
      if (*v18 < 0.0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1);
        v21 = *(_QWORD *)(v19 + 16);
        v20 = *(_QWORD *)(v19 + 24);
        if (v21 >= v20 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        *(_QWORD *)(v19 + 16) = v21 + 1;
        *(float *)(v19 + 4 * v21 + 32) = v22;
      }
      ++v18;
      --v17;
    }
    while (v17);
  }
  else
  {
    v19 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  if (v12 >= 0)
    v23 = v12;
  else
    v23 = v12 + 1;
  v24 = *(_QWORD *)(v19 + 16);
  swift_release();
  return v24 <= v23 >> 1;
}

uint64_t specialized static TrackingUtils.LogTerminatedTracker(terminated:reason:timestamp:)(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  Swift::Bool v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v31;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40[4];
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v38 = a4;
  v37 = a3;
  v39 = type metadata accessor for HandTrackingEvent(0);
  MEMORY[0x24BDAC7A8](v39, v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for HandEventCommon(0);
  v36 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)&v34 - v20;
  v35 = *(_QWORD *)(a1 + 16);
  v22 = *a2;
  v23 = *((_BYTE *)a2 + 8);
  *(_QWORD *)&v41 = *a2;
  BYTE8(v41) = v23;
  v24 = HandRejectionReason.hasTrackerTerminated()();
  v25 = 2;
  if (!v24)
    v25 = 0;
  v34 = v25;
  *(_QWORD *)v21 = 0;
  v21[8] = 1;
  *((_QWORD *)v21 + 2) = 0;
  v21[24] = 0;
  UnknownStorage.init()();
  v26 = (uint64_t)&v21[*(int *)(v14 + 32)];
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v27(v26, 1, 1, v9);
  UnknownStorage.init()();
  *(_QWORD *)v13 = v37;
  *((_DWORD *)v13 + 2) = v38;
  outlined destroy of Coordinate3DPB?(v26, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v13, v26, type metadata accessor for CMTimeProtobuf);
  v27(v26, 0, 1, v9);
  *((_QWORD *)v21 + 2) = v35;
  *(_QWORD *)v21 = v34;
  v21[8] = 1;
  UnknownStorage.init()();
  v28 = v39;
  v29 = (uint64_t)&v8[*(int *)(v39 + 20)];
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56);
  v30(v29, 1, 1, v14);
  v31 = &v8[*(int *)(v28 + 24)];
  *(_QWORD *)v31 = v22;
  v31[8] = v23;
  v31[9] = 0;
  outlined init with copy of TrackingUpdateDataPB((uint64_t)v21, (uint64_t)v17, type metadata accessor for HandEventCommon);
  outlined destroy of Coordinate3DPB?(v29, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with take of Matrix2dPB((uint64_t)v17, v29, type metadata accessor for HandEventCommon);
  v30(v29, 0, 1, v14);
  v41 = xmmword_23D9AB690;
  v42 = 0;
  v43 = 0;
  v40[3] = v28;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v40);
  outlined init with copy of TrackingUpdateDataPB((uint64_t)v8, (uint64_t)boxed_opaque_existential_0, type metadata accessor for HandTrackingEvent);
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000061, 0x800000023D9C7CA0, 334, (uint64_t *)&v41, (uint64_t)v40, MEMORY[0x24BEE4AF8]);
  outlined destroy of Matrix3x3PB((uint64_t)v8, type metadata accessor for HandTrackingEvent);
  outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for HandEventCommon);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v40);
}

void specialized static TrackingUtils.LogAcquiredHands(acquiredHands:timestamp:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *boxed_opaque_existential_0;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD aBlock[6];
  _OWORD v79[2];
  uint64_t v80[4];

  v73 = a2;
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5, v8);
  v61 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v60 = (char *)&v53 - v11;
  v72 = type metadata accessor for CMTimeProtobuf(0);
  v71 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72, v12);
  v70 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for HandEventCommon(0);
  v68 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69, v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for HandTrackingEvent(0);
  MEMORY[0x24BDAC7A8](v67, v17);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for HandDescriptor();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20, v22);
  v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = *(_QWORD *)(a1 + 16);
  if (v66)
  {
    v65 = a3;
    v59 = v6;
    v58 = type metadata accessor for HandyLoggerNeo();
    v25 = a1 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v64 = *(_QWORD *)(v21 + 72);
    v57 = v7 + 7;
    v53 = a1;
    swift_bridgeObjectRetain();
    v56 = 0x800000023D9C7CA0;
    v55 = xmmword_23D9AB690;
    v26 = 1;
    v54 = v5;
    v74 = v24;
    v75 = v19;
    do
    {
      v76 = v25;
      v77 = v26;
      outlined init with copy of TrackingUpdateDataPB(v25, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      UnknownStorage.init()();
      v27 = v67;
      v28 = (uint64_t)&v19[*(int *)(v67 + 20)];
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56);
      v30 = v69;
      v29(v28, 1, 1, v69);
      v31 = &v19[*(int *)(v27 + 24)];
      *(_QWORD *)v31 = 0;
      *((_WORD *)v31 + 4) = 256;
      *(_QWORD *)v16 = 0;
      v16[8] = 1;
      *((_QWORD *)v16 + 2) = 0;
      v16[24] = 0;
      UnknownStorage.init()();
      v32 = (uint64_t)&v16[*(int *)(v30 + 32)];
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56);
      v34 = v72;
      v33(v32, 1, 1, v72);
      v35 = v70;
      UnknownStorage.init()();
      *(_QWORD *)v35 = v73;
      *((_DWORD *)v35 + 2) = v65;
      outlined destroy of Coordinate3DPB?(v32, &demangling cache variable for type metadata for CMTimeProtobuf?);
      v36 = (uint64_t)v35;
      v19 = v75;
      outlined init with take of Matrix2dPB(v36, v32, type metadata accessor for CMTimeProtobuf);
      v37 = v32;
      v24 = v74;
      v33(v37, 0, 1, v34);
      *((_QWORD *)v16 + 2) = *((_QWORD *)v24 + 18);
      v16[24] = v24[136];
      *(_QWORD *)v16 = 1;
      v16[8] = 1;
      outlined destroy of Coordinate3DPB?(v28, &demangling cache variable for type metadata for HandEventCommon?);
      outlined init with take of Matrix2dPB((uint64_t)v16, v28, type metadata accessor for HandEventCommon);
      v29(v28, 0, 1, v30);
      v80[3] = v27;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v80);
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v19, (uint64_t)boxed_opaque_existential_0, type metadata accessor for HandTrackingEvent);
      if (static HandyLoggerNeo._currentLogLevel <= 2)
      {
        v39 = (void *)MEMORY[0x2426372E8](0xD000000000000061, v56);
        v40 = objc_msgSend(v39, sel_lastPathComponent);

        v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v42 = v41;

        v43 = v60;
        static Date.now.getter();
        if (one-time initialization token for _dispatchQ != -1)
          swift_once();
        v63 = (id)static HandyLoggerNeo._dispatchQ;
        v44 = v59;
        v45 = v61;
        v46 = v54;
        (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v61, v43, v54);
        outlined init with copy of Any((uint64_t)v80, (uint64_t)v79);
        v47 = (*(unsigned __int8 *)(v44 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
        v48 = (v57 + v47) & 0xFFFFFFFFFFFFFFF8;
        v49 = swift_allocObject();
        *(_DWORD *)(v49 + 16) = 2;
        *(_QWORD *)(v49 + 24) = v58;
        *(_OWORD *)(v49 + 32) = v55;
        *(_QWORD *)(v49 + 48) = 0;
        *(_QWORD *)(v49 + 56) = 0;
        *(_DWORD *)(v49 + 64) = 1;
        *(_QWORD *)(v49 + 72) = v62;
        *(_QWORD *)(v49 + 80) = v42;
        *(_QWORD *)(v49 + 88) = 349;
        (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v49 + v47, v45, v46);
        outlined init with take of Any(v79, (_OWORD *)(v49 + v48));
        *(_QWORD *)(v49 + ((v48 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
        v50 = swift_allocObject();
        *(_QWORD *)(v50 + 16) = partial apply for closure #1 in static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:);
        *(_QWORD *)(v50 + 24) = v49;
        aBlock[4] = _sIg_Ieg_TRTA_0;
        aBlock[5] = v50;
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = &block_descriptor_2;
        v51 = _Block_copy(aBlock);
        v52 = v63;
        swift_retain();
        swift_release();
        dispatch_sync(v52, v51);

        _Block_release(v51);
        LOBYTE(v51) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v51 & 1) != 0)
          goto LABEL_15;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v46);
        swift_release();
        v19 = v75;
        outlined destroy of Matrix3x3PB((uint64_t)v75, type metadata accessor for HandTrackingEvent);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v80);
        v24 = v74;
      }
      else
      {
        outlined destroy of Matrix3x3PB((uint64_t)v19, type metadata accessor for HandTrackingEvent);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v80);
      }
      outlined destroy of Matrix3x3PB((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if (v66 == v77)
      {
        swift_bridgeObjectRelease();
        return;
      }
      v25 = v76 + v64;
      v26 = v77 + 1;
    }
    while (!__OFADD__(v77, 1));
    __break(1u);
LABEL_15:
    __break(1u);
  }
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v38 = a5;
  v32 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v32, v9);
  v40 = (uint64_t)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v37 = (uint64_t)&v30 - v13;
  MEMORY[0x24BDAC7A8](v14, v15);
  v36 = (uint64_t)&v30 - v17;
  v31 = a2;
  if (a3 != a2)
  {
    v18 = *(_QWORD *)(v16 + 72);
    v19 = v18 * (a3 - 1);
    v33 = a4;
    v34 = v18;
    v41 = v18 * a3;
    v30 = a1;
LABEL_4:
    v20 = 0;
    v21 = a1;
    v35 = a3;
    while (1)
    {
      v39 = v21;
      v23 = *a4;
      v24 = v36;
      outlined init with copy of TrackingUpdateDataPB(v41 + v20 + *a4, v36, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v25 = v37;
      outlined init with copy of TrackingUpdateDataPB(v19 + v20 + v23, v37, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v26 = v42;
      v27 = closure #2 in static TrackingUtils.getBoneLengthFromPose(handsData:trackingInfo:maxUncertainty:leastNumOfTrackedFrames:)(v24, v25, v38);
      outlined destroy of Matrix3x3PB(v25, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined destroy of Matrix3x3PB(v24, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v42 = v26;
      if (v26)
        break;
      if ((v27 & 1) == 0)
      {
        v22 = v35;
        a4 = v33;
LABEL_11:
        a3 = v22 + 1;
        v19 += v34;
        v41 += v34;
        a1 = v30;
        if (a3 != v31)
          goto LABEL_4;
        return;
      }
      a4 = v33;
      v28 = *v33;
      if (!*v33)
      {
        __break(1u);
        return;
      }
      v29 = v28 + v19 + v20;
      outlined init with take of Matrix2dPB(v28 + v41 + v20, v40, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      swift_arrayInitWithTakeFrontToBack();
      outlined init with take of Matrix2dPB(v40, v29, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v22 = v35;
      v20 -= v34;
      v21 = v39 + 1;
      if (v35 == v39 + 1)
        goto LABEL_11;
    }
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v37 = a5;
  v31 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v31, v9);
  v39 = (uint64_t)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v12);
  v36 = (uint64_t *)((char *)&v29 - v13);
  MEMORY[0x24BDAC7A8](v14, v15);
  v35 = (char *)&v29 - v17;
  v30 = a2;
  if (a3 != a2)
  {
    v18 = *(_QWORD *)(v16 + 72);
    v19 = v18 * (a3 - 1);
    v32 = a4;
    v33 = v18;
    v40 = v18 * a3;
    v29 = a1;
    v20 = v35;
LABEL_4:
    v21 = 0;
    v34 = a3;
    while (1)
    {
      v38 = a1;
      v23 = *a4;
      outlined init with copy of TrackingUpdateDataPB(v40 + v21 + *a4, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v24 = v36;
      outlined init with copy of TrackingUpdateDataPB(v19 + v21 + v23, (uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v25 = v41;
      v26 = closure #2 in static TrackingProcessingFunctions.CleanUpHandByChirality(trackingInfos:hands:handsKitTimestamp:)(v20, v24, v37);
      outlined destroy of HandDescriptor((uint64_t)v24);
      outlined destroy of HandDescriptor((uint64_t)v20);
      v41 = v25;
      if (v25)
        break;
      if ((v26 & 1) == 0)
      {
        v22 = v34;
        a4 = v32;
LABEL_11:
        a3 = v22 + 1;
        v19 += v33;
        v40 += v33;
        a1 = v29;
        if (a3 != v30)
          goto LABEL_4;
        return;
      }
      a4 = v32;
      v27 = *v32;
      if (!*v32)
      {
        __break(1u);
        return;
      }
      v28 = v27 + v19 + v21;
      outlined init with take of Matrix2dPB(v27 + v40 + v21, v39, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      swift_arrayInitWithTakeFrontToBack();
      outlined init with take of Matrix2dPB(v39, v28, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v22 = v34;
      v21 -= v33;
      a1 = v38 + 1;
      if (v34 == v38 + 1)
        goto LABEL_11;
    }
  }
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t result;
  char *v42;
  Swift::Int v43;
  int64_t v44;
  int64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::Int v61;
  uint64_t v62;
  Swift::Int v63;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  Swift::Int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  char v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int64_t v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int64_t v128;
  uint64_t (*v129)();
  _QWORD *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  char v138;
  _QWORD *v139;
  uint64_t (*v140)();
  uint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  char *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  Swift::Int v157;
  char *v158;
  _QWORD *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int64_t v173;
  Swift::Int v174;
  _QWORD *v175;
  _QWORD *v176;
  unint64_t v177;

  v164 = type metadata accessor for HandDescriptor();
  v171 = *(_QWORD *)(v164 - 8);
  MEMORY[0x24BDAC7A8](v164, v5);
  v165 = (uint64_t)&v156 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v169 = (uint64_t)&v156 - v9;
  MEMORY[0x24BDAC7A8](v10, v11);
  v166 = (uint64_t)&v156 - v12;
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v156 - v15;
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v156 - v19;
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v156 - v23;
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v156 - v27;
  MEMORY[0x24BDAC7A8](v29, v30);
  v32 = (char *)&v156 - v31;
  v175 = a1;
  v176 = a2;
  v33 = a1[1];
  swift_bridgeObjectRetain_n();
  v34 = _minimumMergeRunLength(_:)(v33);
  if (v34 >= v33)
  {
    if (v33 < 0)
      goto LABEL_154;
    if (v33)
    {
      v40 = v176;
      swift_bridgeObjectRetain();
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v33, 1, v175, v40);
    }
    return swift_bridgeObjectRelease_n();
  }
  if (v33 >= 0)
    v35 = v33;
  else
    v35 = v33 + 1;
  if (v33 < -1)
    goto LABEL_163;
  v157 = v34;
  v36 = v2;
  if (v33 < 2)
  {
    v42 = (char *)MEMORY[0x24BEE4AF8];
    v170 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v171 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80));
    v162 = MEMORY[0x24BEE4AF8];
    if (v33 != 1)
    {
      v67 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      goto LABEL_116;
    }
    v160 = v24;
    v161 = v20;
    v163 = v16;
  }
  else
  {
    v160 = v24;
    v161 = v20;
    v163 = v16;
    v37 = v35 >> 1;
    v38 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v38 + 16) = v37;
    v39 = *(unsigned __int8 *)(v171 + 80);
    v162 = v38;
    v170 = v38 + ((v39 + 32) & ~v39);
  }
  v43 = 0;
  v42 = (char *)MEMORY[0x24BEE4AF8];
  v167 = v32;
  v168 = v28;
  while (1)
  {
    v44 = v43;
    v45 = v43 + 1;
    if (v43 + 1 >= v33)
      goto LABEL_52;
    v158 = v42;
    v46 = (_QWORD *)*v175;
    v47 = v36;
    v48 = *(_QWORD *)(v171 + 72);
    outlined init with copy of TrackingUpdateDataPB(*v175 + v48 * v45, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v46 + v48 * v44, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    LODWORD(v173) = closure #2 in static TrackingUtils.getBoneLengthFromPose(handsData:trackingInfo:maxUncertainty:leastNumOfTrackedFrames:)((uint64_t)v32, (uint64_t)v28, v176);
    v177 = v47;
    if (v47)
    {
      outlined destroy of Matrix3x3PB((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined destroy of Matrix3x3PB((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      swift_bridgeObjectRelease();
      v155 = v162;
LABEL_132:
      *(_QWORD *)(v155 + 16) = 0;
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
    outlined destroy of Matrix3x3PB((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    outlined destroy of Matrix3x3PB((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v49 = v44 + 2;
    v159 = v46;
    v174 = v44 + 2;
    if (v44 + 2 >= v33)
      goto LABEL_26;
    v156 = v44;
    v50 = v177;
    v172 = v48 * v45;
    v51 = v46;
    v52 = v48 * v49;
    while (1)
    {
      v53 = v33;
      v54 = (uint64_t)v160;
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v51 + v52, (uint64_t)v160, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v55 = (uint64_t)v161;
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v51 + v172, (uint64_t)v161, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v56 = closure #2 in static TrackingUtils.getBoneLengthFromPose(handsData:trackingInfo:maxUncertainty:leastNumOfTrackedFrames:)(v54, v55, v176);
      if (v50)
      {
        outlined destroy of Matrix3x3PB(v55, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        outlined destroy of Matrix3x3PB(v54, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        swift_bridgeObjectRelease();
        goto LABEL_131;
      }
      v57 = v56;
      outlined destroy of Matrix3x3PB(v55, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined destroy of Matrix3x3PB(v54, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if (((v173 ^ v57) & 1) != 0)
        break;
      v51 = (_QWORD *)((char *)v51 + v48);
      ++v174;
      v33 = v53;
      if (v53 == v174)
      {
        v174 = v53;
        v177 = 0;
        v32 = v167;
        v28 = v168;
        v44 = v156;
        goto LABEL_25;
      }
    }
    v177 = 0;
    v32 = v167;
    v28 = v168;
    v44 = v156;
    v33 = v53;
LABEL_25:
    v46 = v159;
LABEL_26:
    if ((v173 & 1) == 0)
    {
      v58 = v162;
      v42 = v158;
      v45 = v174;
      goto LABEL_41;
    }
    v45 = v174;
    if (v174 < v44)
      goto LABEL_158;
    v58 = v162;
    if (v44 >= v174)
    {
      v42 = v158;
LABEL_41:
      v36 = v177;
      if (v45 < v33)
        goto LABEL_44;
LABEL_52:
      if (v45 < v44)
        goto LABEL_153;
      goto LABEL_53;
    }
    v173 = v33;
    v59 = 0;
    v60 = v48 * (v174 - 1);
    v61 = v174 * v48;
    v156 = v44;
    v62 = v44 * v48;
    do
    {
      if (v44 != v45 + v59 - 1)
      {
        if (!v46)
          goto LABEL_161;
        outlined init with take of Matrix2dPB((uint64_t)v46 + v62, v165, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        if (v62 < v60 || (char *)v46 + v62 >= (char *)v46 + v61)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v62 != v60)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        outlined init with take of Matrix2dPB(v165, (uint64_t)v46 + v60, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v58 = v162;
        v45 = v174;
        v46 = v159;
      }
      ++v44;
      --v59;
      v60 -= v48;
      v61 -= v48;
      v62 += v48;
    }
    while (v44 < v45 + v59);
    v36 = v177;
    v42 = v158;
    v32 = v167;
    v28 = v168;
    v44 = v156;
    v33 = v173;
    if (v45 >= v173)
      goto LABEL_52;
LABEL_44:
    if (__OFSUB__(v45, v44))
      goto LABEL_155;
    if (v45 - v44 >= v157)
      goto LABEL_52;
    if (__OFADD__(v44, v157))
      goto LABEL_156;
    v63 = v44 + v157 >= v33 ? v33 : v44 + v157;
    if (v63 < v44)
      break;
    if (v45 == v63)
      goto LABEL_52;
    v162 = v58;
    v158 = v42;
    v159 = (_QWORD *)v63;
    v177 = v36;
    v172 = *(_QWORD *)(v171 + 72);
    v173 = v172 * (v45 - 1);
    v126 = v45 * v172;
    v156 = v44;
    do
    {
      v174 = v45;
      v127 = 0;
      v128 = v44;
      v129 = type metadata accessor for HandDescriptor;
      while (1)
      {
        v130 = (_QWORD *)*v175;
        v131 = v126;
        v132 = v126 + v127 + *v175;
        v133 = (uint64_t)v163;
        outlined init with copy of TrackingUpdateDataPB(v132, (uint64_t)v163, (uint64_t (*)(_QWORD))v129);
        v134 = (uint64_t)v130 + v173 + v127;
        v135 = v166;
        outlined init with copy of TrackingUpdateDataPB(v134, v166, (uint64_t (*)(_QWORD))v129);
        v136 = v177;
        v137 = closure #2 in static TrackingUtils.getBoneLengthFromPose(handsData:trackingInfo:maxUncertainty:leastNumOfTrackedFrames:)(v133, v135, v176);
        v177 = v136;
        if (v136)
        {
          outlined destroy of Matrix3x3PB(v135, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          outlined destroy of Matrix3x3PB(v133, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          goto LABEL_130;
        }
        v138 = v137;
        outlined destroy of Matrix3x3PB(v135, (uint64_t (*)(_QWORD))v129);
        outlined destroy of Matrix3x3PB(v133, (uint64_t (*)(_QWORD))v129);
        if ((v138 & 1) == 0)
          break;
        v139 = (_QWORD *)*v175;
        if (!*v175)
          goto LABEL_160;
        v140 = v129;
        v126 = v131;
        v141 = (uint64_t)v139 + v173 + v127;
        outlined init with take of Matrix2dPB((uint64_t)v139 + v131 + v127, v169, (uint64_t (*)(_QWORD))v140);
        swift_arrayInitWithTakeFrontToBack();
        outlined init with take of Matrix2dPB(v169, v141, (uint64_t (*)(_QWORD))v140);
        v127 -= v172;
        ++v128;
        v129 = v140;
        if (v174 == v128)
          goto LABEL_110;
      }
      v126 = v131;
LABEL_110:
      v45 = v174 + 1;
      v173 += v172;
      v126 += v172;
      v44 = v156;
    }
    while ((_QWORD *)(v174 + 1) != v159);
    v45 = (int64_t)v159;
    v36 = v177;
    v42 = v158;
    v32 = v167;
    v28 = v168;
    if ((uint64_t)v159 < v156)
      goto LABEL_153;
LABEL_53:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v174 = v45;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v42 + 2) + 1, 1, v42);
    v66 = *((_QWORD *)v42 + 2);
    v65 = *((_QWORD *)v42 + 3);
    v67 = v66 + 1;
    if (v66 >= v65 >> 1)
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v65 > 1), v66 + 1, 1, v42);
    v177 = v36;
    *((_QWORD *)v42 + 2) = v67;
    v68 = v42 + 32;
    v69 = &v42[16 * v66 + 32];
    v70 = v174;
    *(_QWORD *)v69 = v44;
    *((_QWORD *)v69 + 1) = v70;
    if (v66)
    {
LABEL_58:
      v71 = v67 - 1;
      if (v67 >= 4)
      {
        v76 = &v68[16 * v67];
        v77 = *((_QWORD *)v76 - 8);
        v78 = *((_QWORD *)v76 - 7);
        v82 = __OFSUB__(v78, v77);
        v79 = v78 - v77;
        if (v82)
          goto LABEL_138;
        v81 = *((_QWORD *)v76 - 6);
        v80 = *((_QWORD *)v76 - 5);
        v82 = __OFSUB__(v80, v81);
        v74 = v80 - v81;
        v75 = v82;
        if (v82)
          goto LABEL_139;
        v83 = v67 - 2;
        v84 = &v68[16 * v67 - 32];
        v86 = *(_QWORD *)v84;
        v85 = *((_QWORD *)v84 + 1);
        v82 = __OFSUB__(v85, v86);
        v87 = v85 - v86;
        if (v82)
          goto LABEL_141;
        v82 = __OFADD__(v74, v87);
        v88 = v74 + v87;
        if (v82)
          goto LABEL_144;
        if (v88 >= v79)
        {
          v106 = &v68[16 * v71];
          v108 = *(_QWORD *)v106;
          v107 = *((_QWORD *)v106 + 1);
          v82 = __OFSUB__(v107, v108);
          v109 = v107 - v108;
          if (v82)
            goto LABEL_148;
          v99 = v74 < v109;
        }
        else
        {
LABEL_71:
          if ((v75 & 1) != 0)
            goto LABEL_140;
          v83 = v67 - 2;
          v89 = &v68[16 * v67 - 32];
          v91 = *(_QWORD *)v89;
          v90 = *((_QWORD *)v89 + 1);
          v92 = __OFSUB__(v90, v91);
          v93 = v90 - v91;
          v94 = v92;
          if (v92)
            goto LABEL_143;
          v95 = &v68[16 * v71];
          v97 = *(_QWORD *)v95;
          v96 = *((_QWORD *)v95 + 1);
          v82 = __OFSUB__(v96, v97);
          v98 = v96 - v97;
          if (v82)
            goto LABEL_146;
          if (__OFADD__(v93, v98))
            goto LABEL_147;
          if (v93 + v98 < v74)
            goto LABEL_83;
          v99 = v74 < v98;
        }
        if (v99)
          v71 = v83;
      }
      else
      {
        if (v67 == 3)
        {
          v73 = *((_QWORD *)v42 + 4);
          v72 = *((_QWORD *)v42 + 5);
          v82 = __OFSUB__(v72, v73);
          v74 = v72 - v73;
          v75 = v82;
          goto LABEL_71;
        }
        v100 = *((_QWORD *)v42 + 4);
        v101 = *((_QWORD *)v42 + 5);
        v82 = __OFSUB__(v101, v100);
        v93 = v101 - v100;
        v94 = v82;
LABEL_83:
        if ((v94 & 1) != 0)
          goto LABEL_142;
        v102 = &v68[16 * v71];
        v104 = *(_QWORD *)v102;
        v103 = *((_QWORD *)v102 + 1);
        v82 = __OFSUB__(v103, v104);
        v105 = v103 - v104;
        if (v82)
          goto LABEL_145;
        if (v105 < v93)
          goto LABEL_100;
      }
      v110 = v71 - 1;
      if (v71 - 1 >= v67)
      {
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
        break;
      }
      v111 = (_QWORD *)*v175;
      if (!*v175)
        goto LABEL_159;
      v112 = &v68[16 * v110];
      v113 = *(_QWORD *)v112;
      v114 = v68;
      v115 = v71;
      v116 = &v68[16 * v71];
      v117 = *((_QWORD *)v116 + 1);
      v118 = *(_QWORD *)(v171 + 72);
      v119 = (unint64_t)v111 + v118 * *(_QWORD *)v112;
      v120 = (int64_t)v111 + v118 * *(_QWORD *)v116;
      v172 = (unint64_t)v111 + v118 * v117;
      v173 = v120;
      v121 = v176;
      swift_bridgeObjectRetain();
      v122 = v119;
      v123 = v177;
      specialized _merge<A>(low:mid:high:buffer:by:)(v122, v173, v172, v170, v121);
      v177 = v123;
      if (v123)
        goto LABEL_130;
      if (v117 < v113)
        goto LABEL_135;
      if (v115 > *((_QWORD *)v42 + 2))
        goto LABEL_136;
      v124 = v115;
      *(_QWORD *)v112 = v113;
      *(_QWORD *)&v114[16 * v110 + 8] = v117;
      v125 = *((_QWORD *)v42 + 2);
      if (v115 >= v125)
        goto LABEL_137;
      v68 = v114;
      v67 = v125 - 1;
      memmove(v116, v116 + 16, 16 * (v125 - 1 - v124));
      *((_QWORD *)v42 + 2) = v125 - 1;
      v32 = v167;
      v28 = v168;
      if (v125 <= 2)
        goto LABEL_100;
      goto LABEL_58;
    }
    v67 = 1;
LABEL_100:
    v33 = v175[1];
    v43 = v174;
    v36 = v177;
    if (v174 >= v33)
    {
LABEL_116:
      if (v67 >= 2)
      {
        v142 = (_QWORD *)*v175;
        v175 = (_QWORD *)*v175;
        do
        {
          v143 = v67 - 2;
          if (v67 < 2)
            goto LABEL_149;
          if (!v142)
            goto LABEL_162;
          v144 = v36;
          v145 = (uint64_t)v42;
          v146 = *(_QWORD *)&v42[16 * v143 + 32];
          v147 = *(_QWORD *)&v42[16 * v67 + 24];
          v148 = *(_QWORD *)&v42[16 * v67 + 16];
          v149 = *(_QWORD *)(v171 + 72);
          v177 = (unint64_t)v142 + v149 * v146;
          v150 = (unint64_t)v142 + v149 * v148;
          v151 = (unint64_t)v142 + v149 * v147;
          v152 = v176;
          swift_bridgeObjectRetain();
          specialized _merge<A>(low:mid:high:buffer:by:)(v177, v150, v151, v170, v152);
          v36 = v144;
          if (v144)
            break;
          if (v147 < v146)
            goto LABEL_150;
          v42 = (char *)v145;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v145);
          if (v143 >= *((_QWORD *)v42 + 2))
            goto LABEL_151;
          v153 = &v42[16 * v143 + 32];
          *(_QWORD *)v153 = v146;
          *((_QWORD *)v153 + 1) = v147;
          v154 = *((_QWORD *)v42 + 2);
          if (v67 > v154)
            goto LABEL_152;
          memmove(&v42[16 * v67 + 16], &v42[16 * v67 + 32], 16 * (v154 - v67));
          *((_QWORD *)v42 + 2) = v154 - 1;
          v67 = v154 - 1;
          v142 = v175;
        }
        while (v154 > 2);
      }
LABEL_130:
      swift_bridgeObjectRelease();
LABEL_131:
      v155 = v162;
      goto LABEL_132;
    }
  }
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_160:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_161:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_162:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_163:
  swift_bridgeObjectRelease_n();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  Swift::Int v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t result;
  Swift::Int v41;
  char *v42;
  int64_t v43;
  int64_t v44;
  Swift::Int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  int v59;
  int64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int64_t v133;
  uint64_t v134;
  int64_t v135;
  int64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  char v140;
  char v141;
  _QWORD *v142;
  uint64_t v143;
  char *v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  int64_t v160;
  Swift::Int v161;
  int64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  int64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  int64_t v175;
  char *v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;

  v3 = v2;
  v166 = type metadata accessor for HandDescriptor();
  v174 = *(_QWORD *)(v166 - 8);
  MEMORY[0x24BDAC7A8](v166, v6);
  v167 = (uint64_t)&v158 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v172 = (uint64_t)&v158 - v10;
  MEMORY[0x24BDAC7A8](v11, v12);
  v168 = (uint64_t *)((char *)&v158 - v13);
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v158 - v16;
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)&v158 - v20;
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)&v158 - v24;
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v158 - v28;
  MEMORY[0x24BDAC7A8](v30, v31);
  v33 = (uint64_t *)((char *)&v158 - v32);
  v178 = a1;
  v34 = a1[1];
  v179 = a2;
  swift_bridgeObjectRetain_n();
  v35 = _minimumMergeRunLength(_:)(v34);
  if (v35 >= v34)
  {
    if (v34 < 0)
      goto LABEL_151;
    if (v34)
    {
      v39 = v179;
      swift_bridgeObjectRetain();
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v34, 1, v178, v39);
    }
    return swift_bridgeObjectRelease_n();
  }
  v161 = v35;
  if (v34 >= 0)
    v36 = v34;
  else
    v36 = v34 + 1;
  if (v34 < -1)
    goto LABEL_160;
  v169 = v17;
  if (v34 < 2)
  {
    v38 = MEMORY[0x24BEE4AF8];
    v173 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80));
    if (v34 != 1)
    {
      v75 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v42 = (char *)MEMORY[0x24BEE4AF8];
      goto LABEL_114;
    }
    v159 = v29;
    v164 = v25;
    v165 = v21;
  }
  else
  {
    v159 = v29;
    v164 = v25;
    v165 = v21;
    v37 = v36 >> 1;
    v38 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v38 + 16) = v37;
    v173 = v38 + ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80));
  }
  v41 = 0;
  v42 = (char *)MEMORY[0x24BEE4AF8];
  v163 = v38;
  v170 = v33;
  while (1)
  {
    v43 = v41;
    v44 = v34;
    v45 = v41 + 1;
    v175 = v44;
    v176 = v42;
    if (v41 + 1 >= v44)
    {
      v53 = v41 + 1;
      v61 = v169;
LABEL_24:
      v60 = v175;
      goto LABEL_41;
    }
    v46 = (_QWORD *)*v178;
    v47 = *(_QWORD *)(v174 + 72);
    outlined init with copy of TrackingUpdateDataPB(*v178 + v47 * v45, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v162 = (int64_t)v46;
    v48 = (uint64_t)v46 + v47 * v43;
    v49 = v47;
    v50 = v159;
    outlined init with copy of TrackingUpdateDataPB(v48, (uint64_t)v159, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v51 = closure #2 in static TrackingProcessingFunctions.CleanUpHandByChirality(trackingInfos:hands:handsKitTimestamp:)(v33, v50, v179);
    if (v3)
    {
      outlined destroy of HandDescriptor((uint64_t)v50);
      outlined destroy of HandDescriptor((uint64_t)v33);
      goto LABEL_125;
    }
    v52 = v51;
    outlined destroy of HandDescriptor((uint64_t)v50);
    outlined destroy of HandDescriptor((uint64_t)v33);
    v53 = v43 + 2;
    if (v43 + 2 >= v175)
    {
      v60 = v175;
      if ((v52 & 1) == 0)
        goto LABEL_40;
    }
    else
    {
      v160 = v43;
      v177 = v49 * v45;
      v54 = v162;
      v55 = v49 * v53;
      do
      {
        v56 = v53;
        v57 = v164;
        outlined init with copy of TrackingUpdateDataPB(v54 + v55, (uint64_t)v164, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v58 = v165;
        outlined init with copy of TrackingUpdateDataPB(v54 + v177, (uint64_t)v165, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v59 = closure #2 in static TrackingProcessingFunctions.CleanUpHandByChirality(trackingInfos:hands:handsKitTimestamp:)(v57, v58, v179);
        outlined destroy of HandDescriptor((uint64_t)v58);
        outlined destroy of HandDescriptor((uint64_t)v57);
        if (((v52 ^ v59) & 1) != 0)
        {
          v60 = v175;
          v42 = v176;
          v33 = v170;
          v53 = v56;
          v43 = v160;
          if ((v52 & 1) == 0)
            goto LABEL_40;
          goto LABEL_26;
        }
        v53 = v56 + 1;
        v54 += v49;
      }
      while (v175 != v56 + 1);
      v60 = v175;
      v42 = v176;
      v53 = v175;
      v33 = v170;
      v43 = v160;
      if ((v52 & 1) == 0)
      {
LABEL_40:
        v61 = v169;
        goto LABEL_41;
      }
    }
LABEL_26:
    if (v53 < v43)
      goto LABEL_155;
    v61 = v169;
    if (v43 < v53)
    {
      v177 = 0;
      v62 = 0;
      v63 = v43;
      v64 = v49 * (v53 - 1);
      v65 = v53 * v49;
      v66 = v63;
      v160 = v63;
      v67 = v63 * v49;
      do
      {
        if (v66 != v53 + v62 - 1)
        {
          v69 = v162;
          if (!v162)
            goto LABEL_158;
          v70 = v53;
          v71 = v162 + v67;
          v171 = v162 + v64;
          outlined init with take of Matrix2dPB(v162 + v67, v167, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          if (v67 < v64 || v71 >= v69 + v65)
          {
            v68 = v171;
            swift_arrayInitWithTakeFrontToBack();
          }
          else
          {
            v68 = v171;
            if (v67 != v64)
              swift_arrayInitWithTakeBackToFront();
          }
          outlined init with take of Matrix2dPB(v167, v68, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          v42 = v176;
          v61 = v169;
          v53 = v70;
        }
        ++v66;
        --v62;
        v64 -= v49;
        v65 -= v49;
        v67 += v49;
      }
      while (v66 < v53 + v62);
      v3 = v177;
      v33 = v170;
      v43 = v160;
      goto LABEL_24;
    }
LABEL_41:
    if (v53 >= v60)
      goto LABEL_50;
    if (__OFSUB__(v53, v43))
      goto LABEL_152;
    if (v53 - v43 >= v161)
    {
LABEL_50:
      if (v53 < v43)
        goto LABEL_150;
      goto LABEL_51;
    }
    if (__OFADD__(v43, v161))
      goto LABEL_153;
    v72 = v43 + v161 >= v60 ? v60 : v43 + v161;
    if (v72 < v43)
      break;
    if (v53 == v72)
      goto LABEL_50;
    v160 = v43;
    v132 = v3;
    v133 = *(_QWORD *)(v174 + 72);
    v177 = v133 * (v53 - 1);
    v171 = v133;
    v175 = v53 * v133;
    v162 = v72;
    do
    {
      v134 = 0;
      v135 = v160;
      while (1)
      {
        v136 = v53;
        v137 = (_QWORD *)*v178;
        outlined init with copy of TrackingUpdateDataPB(v175 + v134 + *v178, (uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v138 = (uint64_t)v137 + v177 + v134;
        v139 = v168;
        outlined init with copy of TrackingUpdateDataPB(v138, (uint64_t)v168, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v140 = closure #2 in static TrackingProcessingFunctions.CleanUpHandByChirality(trackingInfos:hands:handsKitTimestamp:)(v61, v139, v179);
        if (v132)
        {
          outlined destroy of HandDescriptor((uint64_t)v139);
          outlined destroy of HandDescriptor((uint64_t)v61);
          swift_bridgeObjectRelease();
LABEL_128:
          v38 = v163;
          goto LABEL_129;
        }
        v141 = v140;
        outlined destroy of HandDescriptor((uint64_t)v139);
        outlined destroy of HandDescriptor((uint64_t)v61);
        if ((v141 & 1) == 0)
          break;
        v142 = (_QWORD *)*v178;
        if (!*v178)
          goto LABEL_157;
        v143 = (uint64_t)v142 + v177 + v134;
        outlined init with take of Matrix2dPB((uint64_t)v142 + v175 + v134, v172, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        swift_arrayInitWithTakeFrontToBack();
        outlined init with take of Matrix2dPB(v172, v143, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v134 -= v171;
        ++v135;
        v53 = v136;
        v61 = v169;
        if (v136 == v135)
          goto LABEL_108;
      }
      v53 = v136;
LABEL_108:
      ++v53;
      v177 += v171;
      v175 += v171;
    }
    while (v53 != v162);
    v53 = v162;
    v3 = 0;
    v42 = v176;
    v33 = v170;
    v43 = v160;
    if (v162 < v160)
      goto LABEL_150;
LABEL_51:
    v171 = v53;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v42 + 2) + 1, 1, v42);
    v74 = *((_QWORD *)v42 + 2);
    v73 = *((_QWORD *)v42 + 3);
    v75 = v74 + 1;
    v41 = v171;
    if (v74 >= v73 >> 1)
    {
      v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v42);
      v41 = v171;
      v42 = v144;
    }
    v177 = v3;
    *((_QWORD *)v42 + 2) = v75;
    v76 = v42 + 32;
    v77 = &v42[16 * v74 + 32];
    *(_QWORD *)v77 = v43;
    *((_QWORD *)v77 + 1) = v41;
    if (v74)
    {
LABEL_56:
      v78 = v75 - 1;
      if (v75 >= 4)
      {
        v83 = &v76[16 * v75];
        v84 = *((_QWORD *)v83 - 8);
        v85 = *((_QWORD *)v83 - 7);
        v89 = __OFSUB__(v85, v84);
        v86 = v85 - v84;
        if (v89)
          goto LABEL_135;
        v88 = *((_QWORD *)v83 - 6);
        v87 = *((_QWORD *)v83 - 5);
        v89 = __OFSUB__(v87, v88);
        v81 = v87 - v88;
        v82 = v89;
        if (v89)
          goto LABEL_136;
        v90 = v75 - 2;
        v91 = &v76[16 * v75 - 32];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v89 = __OFSUB__(v92, v93);
        v94 = v92 - v93;
        if (v89)
          goto LABEL_138;
        v89 = __OFADD__(v81, v94);
        v95 = v81 + v94;
        if (v89)
          goto LABEL_141;
        if (v95 >= v86)
        {
          v113 = &v76[16 * v78];
          v115 = *(_QWORD *)v113;
          v114 = *((_QWORD *)v113 + 1);
          v89 = __OFSUB__(v114, v115);
          v116 = v114 - v115;
          if (v89)
            goto LABEL_145;
          v106 = v81 < v116;
        }
        else
        {
LABEL_69:
          if ((v82 & 1) != 0)
            goto LABEL_137;
          v90 = v75 - 2;
          v96 = &v76[16 * v75 - 32];
          v98 = *(_QWORD *)v96;
          v97 = *((_QWORD *)v96 + 1);
          v99 = __OFSUB__(v97, v98);
          v100 = v97 - v98;
          v101 = v99;
          if (v99)
            goto LABEL_140;
          v102 = &v76[16 * v78];
          v104 = *(_QWORD *)v102;
          v103 = *((_QWORD *)v102 + 1);
          v89 = __OFSUB__(v103, v104);
          v105 = v103 - v104;
          if (v89)
            goto LABEL_143;
          if (__OFADD__(v100, v105))
            goto LABEL_144;
          if (v100 + v105 < v81)
            goto LABEL_81;
          v106 = v81 < v105;
        }
        if (v106)
          v78 = v90;
      }
      else
      {
        if (v75 == 3)
        {
          v80 = *((_QWORD *)v42 + 4);
          v79 = *((_QWORD *)v42 + 5);
          v89 = __OFSUB__(v79, v80);
          v81 = v79 - v80;
          v82 = v89;
          goto LABEL_69;
        }
        v107 = *((_QWORD *)v42 + 4);
        v108 = *((_QWORD *)v42 + 5);
        v89 = __OFSUB__(v108, v107);
        v100 = v108 - v107;
        v101 = v89;
LABEL_81:
        if ((v101 & 1) != 0)
          goto LABEL_139;
        v109 = &v76[16 * v78];
        v111 = *(_QWORD *)v109;
        v110 = *((_QWORD *)v109 + 1);
        v89 = __OFSUB__(v110, v111);
        v112 = v110 - v111;
        if (v89)
          goto LABEL_142;
        if (v112 < v100)
          goto LABEL_98;
      }
      v117 = v78 - 1;
      if (v78 - 1 >= v75)
      {
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
        break;
      }
      v118 = (_QWORD *)*v178;
      if (!*v178)
        goto LABEL_156;
      v119 = &v76[16 * v117];
      v120 = *(_QWORD *)v119;
      v121 = v76;
      v122 = v78;
      v123 = &v76[16 * v78];
      v124 = *((_QWORD *)v123 + 1);
      v125 = *(_QWORD *)(v174 + 72);
      v126 = (unint64_t)v118 + v125 * *(_QWORD *)v119;
      v127 = (unint64_t)v118 + v125 * *(_QWORD *)v123;
      v175 = (int64_t)v118 + v125 * v124;
      v176 = (char *)v127;
      v128 = v179;
      swift_bridgeObjectRetain();
      v129 = v126;
      v130 = v177;
      specialized _merge<A>(low:mid:high:buffer:by:)(v129, (unint64_t)v176, v175, v173, v128);
      v177 = v130;
      if (v130)
      {
LABEL_127:
        swift_bridgeObjectRelease();
        goto LABEL_128;
      }
      if (v124 < v120)
        goto LABEL_132;
      if (v122 > *((_QWORD *)v42 + 2))
        goto LABEL_133;
      *(_QWORD *)v119 = v120;
      *(_QWORD *)&v121[16 * v117 + 8] = v124;
      v131 = *((_QWORD *)v42 + 2);
      if (v122 >= v131)
        goto LABEL_134;
      v76 = v121;
      v75 = v131 - 1;
      memmove(v123, v123 + 16, 16 * (v131 - 1 - v122));
      *((_QWORD *)v42 + 2) = v131 - 1;
      v33 = v170;
      v41 = v171;
      if (v131 <= 2)
        goto LABEL_98;
      goto LABEL_56;
    }
    v75 = 1;
LABEL_98:
    v3 = v177;
    v34 = v178[1];
    v38 = v163;
    if (v41 >= v34)
    {
LABEL_114:
      v176 = v42;
      if (v75 >= 2)
      {
        v145 = (_QWORD *)*v178;
        v163 = v38;
        v178 = v145;
        v146 = v179;
        do
        {
          v147 = v75 - 2;
          if (v75 < 2)
            goto LABEL_146;
          if (!v145)
            goto LABEL_159;
          v148 = v3;
          v149 = *(_QWORD *)&v176[16 * v147 + 32];
          v150 = *(_QWORD *)&v176[16 * v75 + 24];
          v151 = *(_QWORD *)(v174 + 72);
          v152 = (unint64_t)v145 + v151 * v149;
          v153 = (unint64_t)v145 + v151 * *(_QWORD *)&v176[16 * v75 + 16];
          v154 = (unint64_t)v145 + v151 * v150;
          swift_bridgeObjectRetain();
          specialized _merge<A>(low:mid:high:buffer:by:)(v152, v153, v154, v173, v146);
          if (v148)
            goto LABEL_127;
          if (v150 < v149)
            goto LABEL_147;
          v155 = v176;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v155 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v155);
          if (v147 >= *((_QWORD *)v155 + 2))
            goto LABEL_148;
          v156 = &v155[16 * v147 + 32];
          *(_QWORD *)v156 = v149;
          *((_QWORD *)v156 + 1) = v150;
          v157 = *((_QWORD *)v155 + 2);
          if (v75 > v157)
            goto LABEL_149;
          memmove(&v155[16 * v75 + 16], &v155[16 * v75 + 32], 16 * (v157 - v75));
          v176 = v155;
          *((_QWORD *)v155 + 2) = v157 - 1;
          v75 = v157 - 1;
          v106 = v157 > 2;
          v3 = 0;
          v38 = v163;
          v145 = v178;
        }
        while (v106);
      }
LABEL_125:
      swift_bridgeObjectRelease();
LABEL_129:
      *(_QWORD *)(v38 + 16) = 0;
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_157:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_158:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_159:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_160:
  swift_bridgeObjectRelease_n();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(unint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = *(_QWORD *)(type metadata accessor for HandDescriptor() - 8);
  v5 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = *(_QWORD *)(v5 + 16);
  v8[0] = v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2);
  swift_bridgeObjectRelease();
  *a1 = v5;
  return swift_bridgeObjectRelease_n();
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = *(_QWORD *)(type metadata accessor for HandDescriptor() - 8);
  v5 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = *(_QWORD *)(v5 + 16);
  v8[0] = v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2);
  swift_bridgeObjectRelease();
  *a1 = v5;
  return swift_bridgeObjectRelease_n();
}

unint64_t specialized static TrackingUtils.getBoneLengthFromPose(handsData:trackingInfo:maxUncertainty:leastNumOfTrackedFrames:)(float a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[14];
  __int16 v40;
  int v41;
  uint64_t v42;

  v7 = type metadata accessor for HandDescriptor();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (uint64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  v13 = specialized _ArrayProtocol.filter(_:)(v12, (uint64_t)a3, a4, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = v13;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((unint64_t *)&v42, a3);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v42 + 16))
    goto LABEL_10;
  outlined init with copy of TrackingUpdateDataPB(v42 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v14 = a3[2];
  if (!v14)
    goto LABEL_9;
  v15 = a3 + 6;
  while (*v15 != v11[18])
  {
    v15 += 40;
    if (!--v14)
      goto LABEL_9;
  }
  v16 = v11[2];
  if (!v16)
  {
LABEL_9:
    outlined destroy of Matrix3x3PB((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
LABEL_10:
    v29 = 0;
    v28 = 1;
    goto LABEL_11;
  }
  v17 = v11[3];
  v33 = v11[4];
  v18 = v11[5];
  v34 = v11[6];
  v36 = v18;
  v19 = v11[7];
  v35 = v11[8];
  v37 = v19;
  v20 = v11[9];
  v32 = v11[10];
  v38 = v20;
  v39[0] = v16;
  v22 = v11[11];
  v21 = v11[12];
  v24 = v11[13];
  v23 = v11[14];
  v25 = v11[15];
  v26 = v11[16];
  v39[1] = v17;
  v39[2] = v33;
  v39[3] = v18;
  v39[4] = v34;
  v39[5] = v19;
  v39[6] = v35;
  v39[7] = v20;
  v39[8] = v32;
  v39[9] = v22;
  v39[10] = v21;
  v39[11] = v24;
  v39[12] = v23;
  v39[13] = v25;
  v40 = v26 & 0x101;
  v41 = HIDWORD(v26);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = specialized static HandsKitUtils.calcAvgBoneLengths(fromPose:)((uint64_t)v39);
  outlined destroy of Matrix3x3PB((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  outlined consume of HandPose?(v16);
  v28 = 0;
  v29 = LODWORD(v27);
LABEL_11:
  swift_bridgeObjectRelease();
  return v29 | ((unint64_t)v28 << 32);
}

uint64_t outlined release of TrackingInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type [Int] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Int] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Int] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Int] and conformance [A]);
  }
  return result;
}

uint64_t outlined release of DetectionResult(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23D7217A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 40) >= 0x1AuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = (v3 + 96) & ~v3;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23D721858()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t Detection2DPipeline.init(options:)(void *a1)
{
  uint64_t v1;
  uint64_t v4[3];

  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)(v1 + 48) = 0;
  *(_OWORD *)(v1 + 32) = 0u;
  type metadata accessor for Detection2DComputePipelineFactory();
  static Detection2DComputePipelineFactory.createPipeline(config:)(a1, v4);

  swift_beginAccess();
  outlined assign with take of Detection2DComputePipelineProtocol?((uint64_t)v4, v1 + 16);
  swift_endAccess();
  return v1;
}

Swift::Void __swiftcall Detection2DPipeline.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::Bool v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7[3];
  uint64_t v8;

  v3 = v1 + 16;
  swift_beginAccess();
  outlined init with copy of Detection2DComputePipelineProtocol?(v1 + 16, (uint64_t)v7);
  if (!v8)
  {
    outlined destroy of Detection2DComputePipelineProtocol?((uint64_t)v7);
    goto LABEL_6;
  }
  outlined init with copy of Detection2DComputePipelineProtocol((uint64_t)v7, (uint64_t)&v5);
  outlined destroy of Detection2DComputePipelineProtocol?((uint64_t)v7);
  __swift_project_boxed_opaque_existential_1(&v5, v6);
  v4 = Detection2DComputePipelineProtocol.hasModelChanged(_:)(a1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v5);
  if (v4)
  {
LABEL_6:
    type metadata accessor for Detection2DComputePipelineFactory();
    static Detection2DComputePipelineFactory.createPipeline(config:)(a1, v7);
    outlined init with take of Detection2DComputePipelineProtocol?((uint64_t)v7, (uint64_t)&v5);
    swift_beginAccess();
    outlined assign with take of Detection2DComputePipelineProtocol?((uint64_t)&v5, v3);
    swift_endAccess();
    return;
  }
  outlined init with copy of Detection2DComputePipelineProtocol?(v3, (uint64_t)v7);
  if (v8)
  {
    outlined init with copy of Detection2DComputePipelineProtocol((uint64_t)v7, (uint64_t)&v5);
    outlined destroy of Detection2DComputePipelineProtocol?((uint64_t)v7);
    __swift_project_boxed_opaque_existential_1(&v5, v6);
    Detection2DComputePipelineProtocol.reconfig(_:)(a1);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v5);
  }
  else
  {
    outlined destroy of Detection2DComputePipelineProtocol?((uint64_t)v7);
  }
}

__n128 Detection2DPipeline.run(withInput:schedule:)@<Q0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  void *v39;
  id v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  char v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 result;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  __int128 v111;
  int v112;
  int v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  char v120;
  __int128 v121;
  __int128 v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  __n128 v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  int v142;
  char v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  _QWORD v148[3];
  uint64_t v149;
  _QWORD *v150;
  _OWORD v151[4];
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _OWORD __dst[35];

  v6 = a3 + 396;
  memcpy(__dst, __src, 0x228uLL);
  v7 = *((_QWORD *)&__dst[28] + 1);
  Hands_trace_CBridge();
  v8 = *(_QWORD *)(a2 + 16);
  v92 = v6;
  v93 = a3;
  v91 = v7;
  if (v8)
  {
    v9 = *((_QWORD *)&__dst[12] + 1);
    swift_bridgeObjectRetain();
    v96 = v3 + 16;
    v10 = v9;
    swift_beginAccess();
    v11 = 0;
    v100 = MEMORY[0x24BEE4AF8];
    v101 = MEMORY[0x24BEE4AF8];
    v114 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v115 = a2;
    v94 = v9;
    do
    {
      if (*(_QWORD *)(v10 + 16))
      {
        v129 = v8;
        v127 = v11;
        v125 = *(_QWORD *)(v115 + v11 + 32);
        v123 = *(_BYTE *)(v115 + v11 + 40);
        v12 = *(_QWORD *)(v115 + v11 + 48);
        v13 = *(_BYTE *)(v115 + v11 + 56);
        v14 = *(_QWORD *)(v115 + v11 + 80);
        v119 = *(_OWORD *)(v115 + v11 + 96);
        v121 = *(_OWORD *)(v115 + v11 + 64);
        v117 = *(_QWORD *)(v115 + v11 + 112);
        v15 = *(_DWORD *)(v115 + v11 + 120);
        v16 = *(_DWORD *)(v115 + v11 + 124);
        v17 = *(_QWORD *)(v115 + v11 + 128);
        v18 = *(_DWORD *)(v115 + v11 + 136);
        v19 = *(_BYTE *)(v115 + v11 + 140);
        v20 = *(_QWORD *)(v115 + v11 + 144);
        swift_bridgeObjectRetain();
        v21 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
        if ((v22 & 1) == 0)
          goto LABEL_3;
        v108 = v20;
        v102 = v19;
        v110 = v18;
        v104 = v17;
        v112 = v16;
        v113 = v15;
        v23 = (_OWORD *)(*(_QWORD *)(v10 + 56) + 192 * v21);
        v25 = v23[2];
        v24 = v23[3];
        v26 = v23[1];
        v151[0] = *v23;
        v151[1] = v26;
        v151[2] = v25;
        v151[3] = v24;
        v27 = v23[4];
        v28 = v23[5];
        v29 = v23[7];
        v154 = v23[6];
        v155 = v29;
        v152 = v27;
        v153 = v28;
        v30 = v23[8];
        v31 = v23[9];
        v32 = v23[11];
        v158 = v23[10];
        v159 = v32;
        v156 = v30;
        v157 = v31;
        v33 = *(void **)&v151[0];
        if (*(_QWORD *)&v151[0])
        {
          v34 = v152;
          outlined init with copy of Detection2DComputePipelineProtocol?(v96, (uint64_t)&v146);
          if (v147)
          {
            outlined init with take of PinchCancellationModule(&v146, (uint64_t)v148);
            v35 = v149;
            v98 = v150;
            __swift_project_boxed_opaque_existential_1(v148, v149);
            v131 = v125;
            v132 = v123;
            v133 = v12;
            v36 = v13;
            v134 = v13;
            v135 = v121;
            v136 = v14;
            v137 = v119;
            v138 = v117;
            v139 = v113;
            v140 = v16;
            v37 = v104;
            v141 = v104;
            v142 = v18;
            v38 = v102;
            v143 = v102;
            v144 = v20;
            outlined retain of ImageData((uint64_t)v151);
            v39 = v33;
            v40 = v33;
            swift_retain();
            Detection2DComputePipelineProtocol.process(detectionSpec:pixelBuffer:calibration:ps_handle:)((uint64_t)&v146, &v145, &v131, v40, v34, 0, v35, v98);
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v148);
            swift_release();
          }
          else
          {
            outlined retain of ImageData((uint64_t)v151);
            v39 = v33;
            v41 = v33;
            outlined destroy of Detection2DComputePipelineProtocol?((uint64_t)&v146);
            v36 = v13;
            v37 = v104;
            v38 = v102;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v42 = v114;
          else
            v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v114[2] + 1, 1, v114);
          v43 = v108;
          v45 = v42[2];
          v44 = v42[3];
          v46 = v125;
          v47 = v123;
          v49 = v119;
          v48 = v121;
          v50 = v117;
          v51 = v113;
          v52 = v112;
          v53 = v110;
          if (v45 >= v44 >> 1)
          {
            v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v42);
            v43 = v108;
            v53 = v110;
            v52 = v112;
            v51 = v113;
            v50 = v117;
            v49 = v119;
            v48 = v121;
            v47 = v123;
            v46 = v125;
          }
          v42[2] = v45 + 1;
          v114 = v42;
          v54 = &v42[16 * v45];
          v54[4] = v46;
          *((_BYTE *)v54 + 40) = v47;
          v54[6] = v12;
          *((_BYTE *)v54 + 56) = v36;
          *((_OWORD *)v54 + 4) = v48;
          v54[10] = v14;
          *((_OWORD *)v54 + 6) = v49;
          v54[14] = v50;
          *((_DWORD *)v54 + 30) = v51;
          *((_DWORD *)v54 + 31) = v52;
          v54[16] = v37;
          *((_DWORD *)v54 + 34) = v53;
          *((_BYTE *)v54 + 140) = v38;
          v54[18] = v43;
          *(_QWORD *)&v146 = v101;
          swift_bridgeObjectRetain();
          v55 = swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v55);
          v56 = v146;
          *(_QWORD *)&v146 = v100;
          swift_bridgeObjectRetain();
          v57 = swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v57);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined release of ImageData((uint64_t)v151);
          v100 = v146;
          v101 = v56;
          v10 = v94;
        }
        else
        {
LABEL_3:
          swift_bridgeObjectRelease();
        }
        v8 = v129;
        v11 = v127;
      }
      v11 += 128;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v100 = MEMORY[0x24BEE4AF8];
    v101 = MEMORY[0x24BEE4AF8];
    v114 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v130 = *(_QWORD *)&__dst[34];
  v58 = *((_QWORD *)&__dst[33] + 1);
  v126 = (__n128)__dst[32];
  v128 = __dst[31];
  v124 = *(_QWORD *)&__dst[33];
  v122 = *(_OWORD *)((char *)&__dst[29] + 8);
  v120 = __dst[29];
  v97 = *((_QWORD *)&__dst[21] + 1);
  v99 = *(_QWORD *)&__dst[21];
  v106 = *(_OWORD *)((char *)&__dst[22] + 8);
  v103 = *(_QWORD *)&__dst[24];
  v105 = *((_QWORD *)&__dst[23] + 1);
  v81 = BYTE8(__dst[24]);
  v59 = *(_QWORD *)((char *)&__dst[25] + 4);
  v111 = *(_OWORD *)((char *)&__dst[25] + 12);
  v107 = *(_QWORD *)((char *)&__dst[27] + 4);
  v109 = *(_QWORD *)((char *)&__dst[26] + 12);
  v78 = BYTE12(__dst[27]);
  v116 = *(_QWORD *)((char *)&__dst[24] + 12);
  v118 = *(_QWORD *)&__dst[28];
  v95 = __dst[18];
  v89 = __dst[20];
  v90 = __dst[19];
  v86 = __dst[15];
  v87 = __dst[14];
  v88 = __dst[17];
  v85 = __dst[16];
  v84 = *((_QWORD *)&__dst[11] + 1);
  v83 = __dst[11];
  v60 = __dst[5];
  v61 = DWORD1(__dst[5]);
  v79 = *((_QWORD *)&__dst[4] + 1);
  v80 = *(_QWORD *)&__dst[8];
  v62 = BYTE8(__dst[8]);
  v63 = *((_QWORD *)&__dst[0] + 1);
  v64 = __dst[1];
  v65 = __dst[2];
  v74 = *((_QWORD *)&__dst[3] + 1);
  v75 = *(_QWORD *)&__dst[3];
  v73 = *(_QWORD *)&__dst[4];
  v66 = *((_QWORD *)&__dst[5] + 1);
  v67 = *(_QWORD *)&__dst[22];
  v71 = __dst[7];
  v72 = __dst[6];
  v76 = __dst[12];
  v77 = __dst[13];
  outlined retain of HandsKitData(__dst);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v82 = *((_QWORD *)&__dst[30] + 1);
  v68 = *(_QWORD *)&__dst[10];
  v69 = *(_QWORD *)&__dst[0];
  Hands_trace_CBridge();
  LOBYTE(v146) = v62;
  LOBYTE(v131) = v81;
  LOBYTE(v148[0]) = v78;
  *(_QWORD *)v93 = v69;
  *(_QWORD *)(v93 + 8) = v63;
  *(_OWORD *)(v93 + 16) = v64;
  *(_OWORD *)(v93 + 32) = v65;
  *(_QWORD *)(v93 + 48) = v75;
  *(_QWORD *)(v93 + 56) = v74;
  *(_QWORD *)(v93 + 64) = v73;
  *(_QWORD *)(v93 + 72) = v79;
  *(_BYTE *)(v93 + 80) = v60;
  *(_DWORD *)(v93 + 84) = v61;
  *(_QWORD *)(v93 + 88) = v66;
  *(_OWORD *)(v93 + 96) = v72;
  *(_OWORD *)(v93 + 112) = v71;
  *(_QWORD *)(v93 + 128) = v80;
  *(_BYTE *)(v93 + 136) = v146;
  *(_QWORD *)(v93 + 144) = v101;
  *(_QWORD *)(v93 + 152) = v100;
  *(_QWORD *)(v93 + 160) = v68;
  *(_QWORD *)(v93 + 168) = v114;
  *(_DWORD *)(v93 + 176) = v83;
  *(_QWORD *)(v93 + 184) = v84;
  *(_OWORD *)(v93 + 192) = v76;
  *(_OWORD *)(v93 + 208) = v77;
  *(_OWORD *)(v93 + 224) = v87;
  *(_OWORD *)(v93 + 240) = v86;
  *(_OWORD *)(v93 + 256) = v85;
  *(_OWORD *)(v93 + 272) = v88;
  *(_OWORD *)(v93 + 288) = v95;
  *(_OWORD *)(v93 + 304) = v90;
  *(_OWORD *)(v93 + 320) = v89;
  *(_QWORD *)(v93 + 336) = v99;
  *(_QWORD *)(v93 + 344) = v97;
  *(_QWORD *)(v93 + 352) = v67;
  *(_OWORD *)(v93 + 360) = v106;
  *(_QWORD *)(v93 + 376) = v105;
  *(_QWORD *)(v93 + 384) = v103;
  *(_BYTE *)(v93 + 392) = v131;
  *(_QWORD *)v92 = v116;
  *(_QWORD *)(v93 + 404) = v59;
  *(_OWORD *)(v92 + 16) = v111;
  *(_QWORD *)(v92 + 32) = v109;
  *(_QWORD *)(v92 + 40) = v107;
  *(_BYTE *)(v93 + 444) = v148[0];
  *(_QWORD *)(v93 + 448) = v118;
  *(_QWORD *)(v93 + 456) = v91;
  *(_BYTE *)(v93 + 464) = v120;
  *(_OWORD *)(v93 + 472) = v122;
  *(_QWORD *)(v93 + 488) = v82;
  result = v126;
  *(_OWORD *)(v93 + 496) = v128;
  *(__n128 *)(v93 + 512) = v126;
  *(_QWORD *)(v93 + 528) = v124;
  *(_QWORD *)(v93 + 536) = v58;
  *(_QWORD *)(v93 + 544) = v130;
  return result;
}

uint64_t Detection2DPipeline.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Detection2DComputePipelineProtocol?(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Detection2DPipeline()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of Detection2DComputePipelineProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Detection2DComputePipelineProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Detection2DComputePipelineProtocol?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Detection2DComputePipelineProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of Detection2DComputePipelineProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Detection2DComputePipelineProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Detection2DComputePipelineProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Detection2DComputePipelineProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Detection2DComputePipelineProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t VideoDataStructs.CameraImageData.trackInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  v5 = *(_BYTE *)(v1 + 25);
  v6 = *(_BYTE *)(v1 + 26);
  v7 = *(_BYTE *)(v1 + 27);
  v8 = *(_BYTE *)(v1 + 28);
  v9 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 25) = v5;
  *(_BYTE *)(a1 + 26) = v6;
  *(_BYTE *)(a1 + 27) = v7;
  *(_BYTE *)(a1 + 28) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  return swift_bridgeObjectRetain();
}

id *VideoDataStructs.CameraImageData.image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[10];
  _OWORD v14[2];

  v2 = *(_OWORD *)(v1 + 184);
  v13[8] = *(_OWORD *)(v1 + 168);
  v13[9] = v2;
  v14[0] = *(_OWORD *)(v1 + 200);
  *(_QWORD *)((char *)v14 + 13) = *(_QWORD *)(v1 + 213);
  v3 = *(_OWORD *)(v1 + 120);
  v13[4] = *(_OWORD *)(v1 + 104);
  v13[5] = v3;
  v4 = *(_OWORD *)(v1 + 152);
  v13[6] = *(_OWORD *)(v1 + 136);
  v13[7] = v4;
  v5 = *(_OWORD *)(v1 + 56);
  v13[0] = *(_OWORD *)(v1 + 40);
  v13[1] = v5;
  v6 = *(_OWORD *)(v1 + 88);
  v13[2] = *(_OWORD *)(v1 + 72);
  v13[3] = v6;
  v7 = *(_OWORD *)(v1 + 184);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 168);
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v1 + 200);
  *(_QWORD *)(a1 + 173) = *(_QWORD *)(v1 + 213);
  v8 = *(_OWORD *)(v1 + 120);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 104);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(v1 + 152);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 136);
  *(_OWORD *)(a1 + 112) = v9;
  v10 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)(a1 + 16) = v10;
  v11 = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 72);
  *(_OWORD *)(a1 + 48) = v11;
  return outlined retain of VideoDataStructs.PixelBufferData((id *)v13);
}

id *outlined retain of VideoDataStructs.PixelBufferData(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

id VideoDataStructs.CameraImageData.warperMesh.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)v1[28];
  v3 = v1[29];
  v4 = v1[30];
  v5 = v1[31];
  v6 = (void *)v1[32];
  v7 = (void *)v1[33];
  v8 = (void *)v1[34];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return outlined copy of VideoDataStructs.WarperMeshData?(v2, v3, v4, v5, v6, v7, v8);
}

id outlined copy of VideoDataStructs.WarperMeshData?(id result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  id v8;
  id v9;

  if (result)
  {
    v8 = a7;
    swift_bridgeObjectRetain();
    v9 = a5;
    return a6;
  }
  return result;
}

uint64_t VideoDataStructs.CameraImageData.calibration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[192];

  outlined init with take of VideoDataStructs.CalibrationData?(v1 + 288, (uint64_t)v4);
  return outlined init with take of VideoDataStructs.CalibrationData?((uint64_t)v4, a1);
}

uint64_t outlined init with take of VideoDataStructs.CalibrationData?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VideoDataStructs.CalibrationData?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *VideoDataStructs.CameraImageData.init(trackInfo:image:warperMesh:calibration:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[192];
  _OWORD __src[31];

  v7 = *((_QWORD *)a1 + 2);
  v8 = *((_BYTE *)a1 + 24);
  v9 = *((_BYTE *)a1 + 25);
  v10 = *((_BYTE *)a1 + 26);
  v11 = *((_BYTE *)a1 + 27);
  v12 = *((_BYTE *)a1 + 28);
  v13 = *((_QWORD *)a1 + 4);
  v23 = a3[1];
  v24 = *a3;
  v21 = *a1;
  v22 = a3[2];
  v14 = *((_QWORD *)a3 + 6);
  outlined init with take of VideoDataStructs.CalibrationData?(a4, (uint64_t)v25);
  __src[0] = v21;
  *(_QWORD *)&__src[1] = v7;
  BYTE8(__src[1]) = v8;
  BYTE9(__src[1]) = v9;
  BYTE10(__src[1]) = v10;
  BYTE11(__src[1]) = v11;
  BYTE12(__src[1]) = v12;
  *(_QWORD *)&__src[2] = v13;
  v15 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)&__src[11] + 8) = v15;
  *(_OWORD *)((char *)&__src[12] + 8) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)((char *)&__src[13] + 5) = *(_QWORD *)(a2 + 173);
  v16 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)((char *)&__src[7] + 8) = v16;
  v17 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)((char *)&__src[9] + 8) = v17;
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)((char *)&__src[2] + 8) = *(_OWORD *)a2;
  *(_OWORD *)((char *)&__src[3] + 8) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)((char *)&__src[4] + 8) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)((char *)&__src[5] + 8) = v19;
  __src[14] = v24;
  __src[15] = v23;
  __src[16] = v22;
  *(_QWORD *)&__src[17] = v14;
  outlined init with take of VideoDataStructs.CalibrationData?((uint64_t)v25, (uint64_t)&__src[18]);
  return memcpy(a5, __src, 0x1D9uLL);
}

size_t VideoDataStructs.CameraImageData.toImageData()@<X0>(uint64_t a1@<X8>)
{
  const void *v1;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  __int128 v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  __CVBuffer *v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  int64_t Width;
  size_t result;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _OWORD v35[3];
  _OWORD __dst[30];
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[192];
  _OWORD v40[9];
  _BYTE v41[37];
  _OWORD v42[11];
  double v43;
  __int128 v44;
  _OWORD v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  double v54;
  uint64_t v55[4];

  memcpy(__dst, v1, 0x1D9uLL);
  *(_OWORD *)v41 = *(_OWORD *)((char *)&__dst[11] + 8);
  *(_OWORD *)&v41[16] = *(_OWORD *)((char *)&__dst[12] + 8);
  *(_QWORD *)&v41[29] = *(_QWORD *)((char *)&__dst[13] + 5);
  v40[4] = *(_OWORD *)((char *)&__dst[6] + 8);
  v40[5] = *(_OWORD *)((char *)&__dst[7] + 8);
  v40[6] = *(_OWORD *)((char *)&__dst[8] + 8);
  v40[7] = *(_OWORD *)((char *)&__dst[9] + 8);
  v40[8] = *(_OWORD *)((char *)&__dst[10] + 8);
  v40[0] = *(_OWORD *)((char *)&__dst[2] + 8);
  v40[1] = *(_OWORD *)((char *)&__dst[3] + 8);
  v40[2] = *(_OWORD *)((char *)&__dst[4] + 8);
  v40[3] = *(_OWORD *)((char *)&__dst[5] + 8);
  if ((BYTE12(__dst[13]) & 1) != 0)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v6 = *(_QWORD *)&v41[28];
    v4 = *(_DWORD *)&v41[20];
    v5 = *(unsigned int *)&v41[24];
    v3 = *(_QWORD *)&v41[12];
  }
  v32 = 0;
  v33 = 0;
  v34 = 1;
  outlined init with take of VideoDataStructs.CalibrationData?((uint64_t)&__dst[18], (uint64_t)v39);
  outlined init with take of VideoDataStructs.CalibrationData?((uint64_t)v39, (uint64_t)v42);
  v30 = v3;
  v31 = v5;
  if (_s5Hands16VideoDataStructsC011CalibrationC0VSgWOg((uint64_t)v42) == 1)
  {
    v7 = specialized getter of emtpyCalibrationData #1 in VideoDataStructs.CameraImageData.toImageData()(&v32, (uint64_t)&v33, (uint64_t)__dst, v3, v4 | (unint64_t)(v5 << 32), v6);
  }
  else
  {
    v51 = (__n128)v42[8];
    v52 = (__n128)v42[9];
    v53 = (__n128)v42[10];
    v54 = v43;
    v47 = v42[4];
    v48 = v42[5];
    v49 = (__n128)v42[6];
    v50 = (__n128)v42[7];
    v44 = v42[0];
    v45[0] = v42[1];
    v45[1] = v42[2];
    v46 = v42[3];
    v8 = *(_QWORD *)&__dst[14];
    v9 = *(void **)&__dst[16];
    outlined init with take of CameraModel((uint64_t *)v45 + 1, (uint64_t)v55);
    outlined init with take of CameraModel(v55, (uint64_t)v37);
    if (v8)
    {
      v10 = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      v9 = 0;
      v8 = MEMORY[0x24BEE4AF8];
    }
    v11 = v44;
    v12 = *(_QWORD *)&v45[0];
    v35[0] = v46;
    v35[1] = v47;
    v35[2] = v48;
    v27 = v50;
    v29 = v49;
    v25 = v52;
    v26 = v51;
    v24 = v53;
    v13 = v54;
    type metadata accessor for ImageCalibrationData();
    swift_allocObject();
    v7 = ImageCalibrationData.init(intrinsicsMatrix:radialDistortion:extrinsicMatrix:forCameraModel:warperMeshBin:warperMesh:imageSize:arrivalTimeStamp:)(v35, (uint64_t *)v37, v8, (uint64_t)v9, v11, *((unint64_t *)&v11 + 1), v12, v29, v27, v26, v25, v24, v13);
  }
  v14 = v7;
  v15 = *(__CVBuffer **)&v40[0];
  v37[0] = __dst[0];
  v37[1] = __dst[1];
  v38 = *(_QWORD *)&__dst[2];
  v16 = *(_QWORD *)&__dst[1];
  v17 = BYTE8(__dst[1]);
  v18 = __dst[0];
  outlined retain of VideoDataStructs.PixelBufferData((id *)v40);
  outlined retain of VideoDataStructs.PixelBufferData((id *)v40);
  outlined retain of (String, espresso_buffer_t)((uint64_t)v37);
  Width = CVPixelBufferGetWidth(v15);
  result = CVPixelBufferGetHeight(v15);
  if ((unsigned __int128)(Width * (__int128)7) >> 64 == (7 * Width) >> 63)
  {
    if (result == 7 * Width / 4)
      v21 = Width;
    else
      v21 = result;
    *(float *)&v22 = (float)Width;
    *((float *)&v22 + 1) = (float)v21;
    v28 = v22;
    outlined release of VideoDataStructs.PixelBufferData((id *)v40);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v30;
    *(_DWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 20) = v31;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v16;
    *(_BYTE *)(a1 + 80) = v17;
    *(_DWORD *)(a1 + 84) = DWORD2(v18);
    *(_OWORD *)(a1 + 88) = v18;
    *(_OWORD *)(a1 + 104) = xmmword_23D9AB950;
    *(_OWORD *)(a1 + 120) = xmmword_23D9AB950;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 176) = -1;
    *(_QWORD *)&v23 = -1;
    *((_QWORD *)&v23 + 1) = -1;
    *(_OWORD *)(a1 + 144) = v23;
    *(_OWORD *)(a1 + 160) = v23;
    *(_QWORD *)(a1 + 184) = v28;
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized getter of pixelBufSize #1 in VideoDataStructs.CameraImageData.toImageData()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __CVBuffer *v3;
  size_t Width;
  unsigned int v5;
  size_t Height;
  unint64_t v7;

  v2 = result;
  if ((*(_BYTE *)(result + 8) & 1) != 0)
  {
    v3 = *(__CVBuffer **)(a2 + 40);
    Width = CVPixelBufferGetWidth(v3);
    if ((Width & 0x8000000000000000) != 0
      || (v5 = Width, HIDWORD(Width))
      || (Height = CVPixelBufferGetHeight(v3), (Height & 0x8000000000000000) != 0)
      || HIDWORD(Height))
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      v7 = __PAIR64__(Height, v5);
      result = swift_beginAccess();
      *(_QWORD *)v2 = v7;
      *(_BYTE *)(v2 + 8) = 0;
    }
  }
  return result;
}

uint64_t specialized getter of emtpyCalibrationData #1 in VideoDataStructs.CameraImageData.toImageData()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v12;
  double v13;
  double v14;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  char v21;
  _OWORD v22[3];

  v7 = *a1;
  if (v7)
  {
    v8 = v7;
  }
  else
  {
    v12 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
    v22[0] = *MEMORY[0x24BDAEDF8];
    v22[1] = v12;
    v22[2] = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 32);
    v18 = *(__n128 *)(MEMORY[0x24BDAEE00] + 16);
    v19 = *(__n128 *)MEMORY[0x24BDAEE00];
    v16 = *(__n128 *)(MEMORY[0x24BDAEE00] + 48);
    v17 = *(__n128 *)(MEMORY[0x24BDAEE00] + 32);
    v20 = -1;
    v21 = 0;
    specialized getter of pixelBufSize #1 in VideoDataStructs.CameraImageData.toImageData()(a2, a3);
    v14 = v13;
    type metadata accessor for ImageCalibrationData();
    swift_allocObject();
    v8 = ImageCalibrationData.init(intrinsicsMatrix:radialDistortion:extrinsicMatrix:forCameraModel:warperMeshBin:warperMesh:imageSize:arrivalTimeStamp:)(v22, &v20, 0, 0, a4, a5, a6, (__n128)0, v19, v18, v17, v16, v14);
    swift_beginAccess();
    *a1 = v8;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v8;
}

uint64_t _s5Hands16VideoDataStructsC011CalibrationC0VSgWOg(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 184))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

id *outlined release of VideoDataStructs.PixelBufferData(id *a1)
{

  return a1;
}

uint64_t outlined init with take of CameraModel(uint64_t *a1, uint64_t a2)
{
  __swift_memcpy9_8(a2, a1);
  return a2;
}

void destroy for VideoDataStructs.CameraImageData(uint64_t a1)
{
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(a1 + 224))
  {
    swift_bridgeObjectRelease();

  }
}

uint64_t initializeWithCopy for VideoDataStructs.CameraImageData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 25) = *(_DWORD *)(a2 + 25);
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 172) = *(_QWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  v10 = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 + 205);
  *(_OWORD *)(a1 + 196) = v10;
  v12 = a2 + 224;
  v11 = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  v13 = v5;
  if (v11)
  {
    *(_QWORD *)(a1 + 224) = v11;
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    v14 = *(void **)(a2 + 256);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = v14;
    v15 = *(void **)(a2 + 264);
    v16 = *(void **)(a2 + 272);
    *(_QWORD *)(a1 + 264) = v15;
    *(_QWORD *)(a1 + 272) = v16;
    swift_bridgeObjectRetain();
    v17 = v14;
    v18 = v15;
    v19 = v16;
  }
  else
  {
    v20 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)v12;
    *(_OWORD *)(a1 + 240) = v20;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(v12 + 32);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(v12 + 48);
  }
  v21 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v21;
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  v22 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v22;
  v23 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v23;
  v24 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v24;
  v25 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v25;
  *(_OWORD *)(a1 + 457) = *(_OWORD *)(a2 + 457);
  return a1;
}

uint64_t assignWithCopy for VideoDataStructs.CameraImageData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  __int128 v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(void **)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  v7 = v5;

  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 48) = v8;
  v10 = *(_OWORD *)(a2 + 96);
  v11 = *(_OWORD *)(a2 + 112);
  v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 172) = *(_QWORD *)(a2 + 172);
  v13 = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = v13;
  v14 = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 + 205);
  *(_OWORD *)(a1 + 196) = v14;
  v15 = (_OWORD *)(a1 + 224);
  v17 = (__int128 *)(a2 + 224);
  v16 = *(_QWORD *)(a2 + 224);
  if (*(_QWORD *)(a1 + 224))
  {
    if (v16)
    {
      *(_QWORD *)(a1 + 224) = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
      *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      v18 = *(void **)(a1 + 256);
      v19 = *(void **)(a2 + 256);
      *(_QWORD *)(a1 + 256) = v19;
      v20 = v19;

      v21 = *(void **)(a1 + 264);
      v22 = *(void **)(a2 + 264);
      *(_QWORD *)(a1 + 264) = v22;
      v23 = v22;

      v24 = *(void **)(a1 + 272);
      v25 = *(void **)(a2 + 272);
      *(_QWORD *)(a1 + 272) = v25;
      v26 = v25;

    }
    else
    {
      outlined destroy of VideoDataStructs.WarperMeshData((id *)(a1 + 224));
      v35 = *(_OWORD *)(a2 + 240);
      v34 = *(_OWORD *)(a2 + 256);
      v36 = *v17;
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v35;
      *(_OWORD *)(a1 + 256) = v34;
      *v15 = v36;
    }
  }
  else if (v16)
  {
    *(_QWORD *)(a1 + 224) = v16;
    v27 = *(_OWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = v27;
    v28 = *(void **)(a2 + 256);
    *(_QWORD *)(a1 + 256) = v28;
    v29 = *(void **)(a2 + 264);
    *(_QWORD *)(a1 + 264) = v29;
    v30 = *(void **)(a2 + 272);
    *(_QWORD *)(a1 + 272) = v30;
    swift_bridgeObjectRetain();
    v31 = v28;
    v32 = v29;
    v33 = v30;
  }
  else
  {
    v37 = *v17;
    v38 = *(_OWORD *)(a2 + 240);
    v39 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 240) = v38;
    *(_OWORD *)(a1 + 256) = v39;
    *v15 = v37;
  }
  v40 = *(_OWORD *)(a2 + 288);
  v41 = *(_OWORD *)(a2 + 304);
  v42 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v42;
  *(_OWORD *)(a1 + 288) = v40;
  *(_OWORD *)(a1 + 304) = v41;
  v43 = *(_OWORD *)(a2 + 352);
  v44 = *(_OWORD *)(a2 + 368);
  v45 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v45;
  *(_OWORD *)(a1 + 352) = v43;
  *(_OWORD *)(a1 + 368) = v44;
  v46 = *(_OWORD *)(a2 + 416);
  v47 = *(_OWORD *)(a2 + 432);
  v48 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 457) = *(_OWORD *)(a2 + 457);
  *(_OWORD *)(a1 + 432) = v47;
  *(_OWORD *)(a1 + 448) = v48;
  *(_OWORD *)(a1 + 416) = v46;
  return a1;
}

id *outlined destroy of VideoDataStructs.WarperMeshData(id *a1)
{
  destroy for VideoDataStructs.WarperMeshData(a1);
  return a1;
}

void *__swift_memcpy473_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1D9uLL);
}

uint64_t assignWithTake for VideoDataStructs.CameraImageData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  v9 = *(_QWORD *)(a2 + 224);
  v10 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 172) = *(_QWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 + 205);
  if (!v10)
    goto LABEL_5;
  if (!v9)
  {
    outlined destroy of VideoDataStructs.WarperMeshData((id *)(a1 + 224));
LABEL_5:
    v15 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v15;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 224) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v11 = *(void **)(a1 + 256);
  v12 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v12;

  v13 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);

  v14 = *(void **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);

LABEL_6:
  v16 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v16;
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  v17 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v17;
  v18 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v18;
  v19 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v19;
  v20 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v20;
  *(_OWORD *)(a1 + 457) = *(_OWORD *)(a2 + 457);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoDataStructs.CameraImageData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 473))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoDataStructs.CameraImageData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 472) = 0;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 473) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 473) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoDataStructs.CameraImageData()
{
  return &type metadata for VideoDataStructs.CameraImageData;
}

Swift::Void __swiftcall PinchPostprocessPipeline.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  HandsKitConfig *v3;
  int v4;
  int v5;
  HandsKitConfig *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v3 = a1;
  *(_QWORD *)(v2 + 16) = specialized PinchGenerator.__allocating_init(_:)(v3);
  swift_release();
  *(_BYTE *)(v2 + 32) = -[HandsKitConfig SerializeInternalData](v3, sel_SerializeInternalData);
  *(_BYTE *)(v2 + 33) = -[HandsKitConfig UsePinchThresholdsSearch](v3, sel_UsePinchThresholdsSearch);
  -[HandsKitConfig OverwrittenPinchMakeThreshold](v3, sel_OverwrittenPinchMakeThreshold);
  *(_DWORD *)(v2 + 36) = v4;
  -[HandsKitConfig OverwrittenPinchBreakThreshold](v3, sel_OverwrittenPinchBreakThreshold);
  *(_DWORD *)(v2 + 40) = v5;
  if (*(_BYTE *)(v2 + 33) == 1)
  {
    type metadata accessor for PinchThresholdSearch();
    swift_allocObject();
    v6 = v3;
    specialized PinchThresholdSearch.init(_:)(v6);
    v8 = v7;

    *(_QWORD *)(v2 + 24) = v8;
    swift_release();
  }
  PinchPostprocessPipeline.reset()();
}

Swift::Void __swiftcall PinchPostprocessPipeline.reset()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;

  if (!*(_QWORD *)(v0 + 16))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  swift_retain();
  PinchGenerator.reset()();
  swift_release();
  if (*(_BYTE *)(v0 + 33) != 1)
    return;
  v1 = *(_QWORD *)(v0 + 24);
  if (!v1)
  {
LABEL_17:
    __break(1u);
    return;
  }
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain_n();
    swift_retain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_6;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    swift_retain();
    if (v3)
    {
LABEL_6:
      if (v3 >= 1)
      {
        for (i = 0; i != v3; ++i)
        {
          if ((v2 & 0xC000000000000001) != 0)
            MEMORY[0x24263790C](i, v2);
          else
            swift_retain();
          PinchGenerator.reset()();
          swift_release();
        }
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_16;
    }
  }
LABEL_13:
  swift_bridgeObjectRelease_n();
  swift_release();
}

_QWORD *PinchPostprocessPipeline.process(_:_:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *result;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD *, uint64_t, uint64_t);
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _BYTE v54[48];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v3 = v2;
  v5 = a2[9];
  v89 = a2[8];
  v90 = v5;
  v91 = *((_QWORD *)a2 + 20);
  v6 = a2[5];
  v85 = a2[4];
  v86 = v6;
  v7 = a2[7];
  v87 = a2[6];
  v88 = v7;
  v8 = a2[1];
  v81 = *a2;
  v82 = v8;
  v9 = a2[3];
  v83 = a2[2];
  v84 = v9;
  result = (_QWORD *)Hands_trace_CBridge_1();
  v77 = v88;
  v78 = v89;
  v79 = v90;
  v80 = v91;
  v73 = v84;
  v74 = v85;
  v75 = v86;
  v76 = v87;
  v71 = v82;
  v72 = v83;
  *(_QWORD *)&v70 = v81;
  __asm { FMOV            V3.2S, #1.0 }
  *((int8x8_t *)&v70 + 1) = vbsl_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)(v2 + 36)), (int8x8_t)vcge_f32(_D3, *(float32x2_t *)(v2 + 36))), *(int8x8_t *)(v2 + 36), *(int8x8_t *)((char *)&v81 + 8));
  if (!*(_QWORD *)(v2 + 16))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v51 = v78;
  v52 = v79;
  v53 = v80;
  v47 = v74;
  v48 = v75;
  v49 = v76;
  v50 = v77;
  v43 = v70;
  v44 = v71;
  v45 = v72;
  v46 = v73;
  outlined retain of PostProcessingMetaData(&v81);
  swift_retain();
  PinchGenerator.process(_:_:thresholdSearchMode:)(a1, (uint64_t)&v43);
  swift_release();
  v58 = v67;
  v59 = v68;
  v60 = v69;
  *(_OWORD *)&v54[32] = v63;
  v55 = v64;
  v56 = v65;
  v57 = v66;
  *(_OWORD *)v54 = v61;
  *(_OWORD *)&v54[16] = v62;
  v16 = v64;
  v17 = BYTE8(v64);
  v18 = BYTE9(v64);
  v19 = BYTE10(v64);
  v20 = v65;
  v21 = BYTE8(v65);
  if ((*(_BYTE *)(v2 + 32) & 1) != 0)
  {
    v42 = v2;
    v22 = v57;
    v23 = BYTE8(v57);
    v24 = v58;
    v26 = HIDWORD(v58);
    v25 = DWORD2(v58);
    v28 = DWORD1(v59);
    v27 = v59;
    v29 = DWORD2(v59);
    v30 = v60;
    *(_QWORD *)&v43 = v55;
    WORD4(v43) = WORD4(v55);
    BYTE10(v43) = BYTE10(v55);
    *(_QWORD *)&v44 = v56;
    BYTE8(v44) = BYTE8(v56);
    *(_QWORD *)&v45 = v57;
    BYTE8(v45) = BYTE8(v57);
    v46 = v58;
    *(_QWORD *)&v47 = v59;
    DWORD2(v47) = DWORD2(v59);
    *(_QWORD *)&v48 = v60;
    specialized static LegacyPinchFilterAdapter.saveLegacyPinchInternalData(_:_:_:)(a1, v54[40], (int *)&v43);
    v31 = v22;
    v3 = v42;
  }
  else
  {
    v31 = v57;
    v23 = BYTE8(v57);
    v24 = v58;
    v26 = HIDWORD(v58);
    v25 = DWORD2(v58);
    v28 = DWORD1(v59);
    v27 = v59;
    v29 = DWORD2(v59);
    v30 = v60;
  }
  *(_QWORD *)&v43 = v16;
  BYTE8(v43) = v17;
  BYTE9(v43) = v18;
  BYTE10(v43) = v19;
  *(_QWORD *)&v44 = v20;
  BYTE8(v44) = v21;
  *(_QWORD *)&v45 = v31;
  BYTE8(v45) = v23;
  *(_QWORD *)&v46 = v24;
  *((_QWORD *)&v46 + 1) = __PAIR64__(v26, v25);
  *(_QWORD *)&v47 = __PAIR64__(v28, v27);
  DWORD2(v47) = v29;
  *(_QWORD *)&v48 = v30;
  result = (_QWORD *)specialized static LegacyPinchFilterAdapter.saveLegacyHandData(_:_:)(a1, (uint64_t)&v43);
  if (*(_BYTE *)(v3 + 33) != 1 || *(_BYTE *)(v3 + 32) != 1)
    goto LABEL_15;
  if (!*(_QWORD *)(v3 + 24))
    goto LABEL_19;
  v51 = v78;
  v52 = v79;
  v53 = v80;
  v47 = v74;
  v48 = v75;
  v49 = v76;
  v50 = v77;
  v43 = v70;
  v44 = v71;
  v45 = v72;
  v46 = v73;
  swift_retain();
  v32 = PinchThresholdSearch.process(_:_:)(a1, &v43);
  v34 = v33;
  v36 = v35;
  swift_release();
  v37 = (_QWORD *)(a1 + *(int *)(type metadata accessor for HandDescriptor() + 96));
  v38 = type metadata accessor for HandDescriptorInternal();
  v39 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48);
  result = (_QWORD *)v39(v37, 1, v38);
  if ((_DWORD)result == 1)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (!v37[6])
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v37[8] = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = (_QWORD *)v39(v37, 1, v38);
  if ((_DWORD)result == 1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!v37[6])
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v37[9] = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = (_QWORD *)v39(v37, 1, v38);
  if ((_DWORD)result == 1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!v37[6])
  {
LABEL_25:
    __break(1u);
    return result;
  }
  v37[10] = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_15:
  outlined release of PinchGeneratorResults((uint64_t)v54);
  *(_WORD *)(a1 + 4) = *(_WORD *)v54;
  v40 = a1 + *(int *)(type metadata accessor for HandDescriptor() + 112);
  if ((*(_BYTE *)(v40 + 49) & 1) == 0)
  {
    v41 = *(_OWORD *)&v54[24];
    *(_OWORD *)v40 = *(_OWORD *)&v54[8];
    *(_OWORD *)(v40 + 16) = v41;
    *(_BYTE *)(v40 + 32) = 0;
  }
  Hands_trace_CBridge_1();
  return outlined release of PostProcessingMetaData(&v70);
}

uint64_t PinchPostprocessPipeline.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchPostprocessPipeline()
{
  return objc_opt_self();
}

uint64_t Hands_trace_CBridge_1()
{
  return kdebug_trace();
}

_QWORD *outlined retain of PostProcessingMetaData(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[16];
  v3 = a1[17];
  v4 = a1[18];
  v5 = a1[19];
  swift_bridgeObjectRetain();
  outlined copy of ObjectInteractionResultsByHand?(v2, v3, v4, v5);
  return a1;
}

uint64_t outlined release of PinchGeneratorResults(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

Swift::String __swiftcall MonoPinchPipeline.getModelName(_:)(HandsKitConfig *a1)
{
  NSString *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v1 = -[HandsKitConfig MonoPinchModel](a1, sel_MonoPinchModel);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5 = v2;
  v6 = v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t MonoPinchPipeline.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MonoPinchPipeline()
{
  return objc_opt_self();
}

_QWORD *specialized static MonoPinchPipeline.getInstance(config:)(void *a1)
{
  id v2;
  Swift::String v3;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;

  if (objc_msgSend(a1, sel_UseMonoActionModel))
  {
    v2 = objc_msgSend(a1, sel_MonoPinchModel);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v3 = String.lowercased()();
    if (v3._countAndFlagsBits == 0x6F72687473736170 && v3._object == (void *)0xEB00000000686775)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
    {
      type metadata accessor for MonoPinchModelInference();
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_BYTE *)(v7 + 32) = 0;
      v8 = a1;
      objc_msgSend(0, sel_resetAllBuffers);
      *(_QWORD *)(v7 + 24) = 0;
      *(_BYTE *)(v7 + 32) = objc_msgSend(v8, sel_UseMonoUnsure);

      type metadata accessor for MonoPinchPipeline();
      swift_allocObject();
      v6 = specialized PinchPipeline.init(config:inference:)(v8, v7);

      swift_release();
      return v6;
    }
  }
  return 0;
}

Swift::Int_optional __swiftcall SingleHandFrameFeatures.getMakeFrameOffset(_:_:)(Swift::Float a1, Swift::Float a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  Swift::Bool v21;
  Swift::Int v22;
  Swift::Int_optional result;

  if (a1 < a2)
    goto LABEL_23;
  v7 = *(_QWORD *)v2;
  v8 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v8)
  {
    v5 = a2;
    v6 = a1;
    v2 = v7 + 32;
    v3 = 2 * v8 - 1;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain_n();
    v9 = swift_dynamicCastClass();
    if (!v9)
    {
      swift_bridgeObjectRelease();
      v9 = MEMORY[0x24BEE4AF8];
    }
    v10 = *(_QWORD *)(v9 + 16);
    swift_release();
    v4 = v3 >> 1;
    if (v10 == v3 >> 1)
    {
      v11 = swift_dynamicCastClass();
      if (!v11)
      {
        swift_bridgeObjectRelease();
        v11 = MEMORY[0x24BEE4AF8];
      }
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRelease();
  v11 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v2, 0, v3);
LABEL_8:
  swift_bridgeObjectRelease();
  v12 = specialized Sequence<>.min()(v11);
  swift_release();
  if ((v12 & 0x100000000) != 0)
    goto LABEL_23;
  v13 = *(_QWORD *)(v7 + 16);
  if (!v13)
  {
    __break(1u);
LABEL_27:
    swift_bridgeObjectRelease();
    v16 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v2, 0, v3);
    goto LABEL_16;
  }
  if ((float)(*(float *)(v2 + 4 * v13 - 4) - *(float *)&v12) <= v6)
  {
LABEL_23:
    v22 = 0;
    v21 = 1;
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v14 = swift_dynamicCastClass();
  if (!v14)
  {
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x24BEE4AF8];
  }
  v15 = *(_QWORD *)(v14 + 16);
  swift_release();
  if (v15 != v4)
    goto LABEL_27;
  v16 = swift_dynamicCastClass();
  if (!v16)
  {
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
  }
LABEL_16:
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  v18 = 0;
  if (*(float *)(v16 + 32) >= v5)
  {
    v19 = v17 - 1;
    while (v19 != v18)
    {
      v20 = *(float *)(v16 + 4 * v18++ + 36);
      if (v20 < v5)
        goto LABEL_21;
    }
    goto LABEL_22;
  }
LABEL_21:
  swift_release();
  v21 = 0;
  v22 = -v18;
LABEL_28:
  result.value = v22;
  result.is_nil = v21;
  return result;
}

Swift::Int_optional __swiftcall SingleHandFrameFeatures.getBreakFrameOffset(_:)(Swift::Float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  Swift::Bool v14;
  Swift::Int v15;
  uint64_t v16;
  Swift::Int_optional result;

  v5 = *(_QWORD *)v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A70A0;
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
  {
    __break(1u);
LABEL_16:
    swift_bridgeObjectRelease();
    v10 = specialized _copyCollectionToContiguousArray<A>(_:)(v5, v2, 0, (2 * v3) | 1);
    goto LABEL_7;
  }
  v1 = inited;
  v3 = v7 - 1;
  v2 = v5 + 32;
  *(_DWORD *)(inited + 32) = *(_DWORD *)(v5 + 32 + 4 * (v7 - 1));
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
  }
  v9 = *(_QWORD *)(v8 + 16);
  swift_release();
  if (v9 != v3)
    goto LABEL_16;
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
LABEL_7:
  swift_bridgeObjectRelease();
  v16 = v1;
  specialized Array.append<A>(contentsOf:)(v10);
  v11 = *(_QWORD *)(v1 + 16);
  if (v11 && *(float *)(v1 + 32) < a1)
  {
    v12 = 0;
    while (v11 - 1 != v12)
    {
      v13 = *(float *)(v16 + 4 * v12++ + 36);
      if (v13 >= a1)
      {
        swift_bridgeObjectRelease();
        v14 = 0;
        v15 = 1 - v12;
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease();
    v14 = 0;
    v15 = 1 - v11;
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = 0;
    v14 = 1;
  }
LABEL_17:
  result.value = v15;
  result.is_nil = v14;
  return result;
}

uint64_t destroy for SingleHandFrameFeatures()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SingleHandFrameFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v3;
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  v6 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v6;
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  v7 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v7;
  v8 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v8;
  v9 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v9;
  v11 = *(_OWORD *)(a2 + 240);
  v10 = *(_OWORD *)(a2 + 256);
  *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_OWORD *)(a1 + 240) = v11;
  *(_OWORD *)(a1 + 256) = v10;
  memcpy((void *)(a1 + 312), (const void *)(a2 + 312), 0x10AuLL);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SingleHandFrameFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = a2 + 304;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v5 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_BYTE *)(a1 + 305) = *(_BYTE *)(v4 + 1);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  v6 = *(_OWORD *)(a2 + 316);
  *(_OWORD *)(a1 + 325) = *(_OWORD *)(a2 + 325);
  *(_OWORD *)(a1 + 316) = v6;
  v7 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 353) = *(_OWORD *)(a2 + 353);
  *(_OWORD *)(a1 + 344) = v7;
  v8 = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = v8;
  v9 = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 404);
  *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
  *(_DWORD *)(a1 + 404) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 412);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_DWORD *)(a1 + 412) = v9;
  v10 = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 436);
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
  *(_DWORD *)(a1 + 436) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 444);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_DWORD *)(a1 + 444) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 452);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_DWORD *)(a1 + 452) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 460);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_DWORD *)(a1 + 460) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 468);
  *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
  *(_DWORD *)(a1 + 468) = v10;
  *(_BYTE *)(a1 + 473) = *(_BYTE *)(a2 + 473);
  v11 = *(_OWORD *)(a2 + 480);
  v12 = *(_OWORD *)(a2 + 496);
  v13 = *(_OWORD *)(a2 + 512);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(_OWORD *)(a1 + 496) = v12;
  *(_OWORD *)(a1 + 512) = v13;
  *(_OWORD *)(a1 + 480) = v11;
  LODWORD(v10) = *(_DWORD *)(a2 + 532);
  *(_BYTE *)(a1 + 536) = *(_BYTE *)(a2 + 536);
  *(_DWORD *)(a1 + 532) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 540);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(_DWORD *)(a1 + 540) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 548);
  *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
  *(_DWORD *)(a1 + 548) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 556);
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
  *(_DWORD *)(a1 + 556) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 564);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
  *(_DWORD *)(a1 + 564) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 572);
  *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
  *(_DWORD *)(a1 + 572) = v10;
  *(_BYTE *)(a1 + 577) = *(_BYTE *)(a2 + 577);
  return a1;
}

void *__swift_memcpy578_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x242uLL);
}

uint64_t assignWithTake for SingleHandFrameFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v4 = a2 + 304;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v7;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  v8 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v8;
  v9 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v9;
  v10 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v10;
  *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
  *(_BYTE *)(a1 + 305) = *(_BYTE *)(v4 + 1);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  *(_OWORD *)(a1 + 316) = *(_OWORD *)(a2 + 316);
  *(_OWORD *)(a1 + 325) = *(_OWORD *)(a2 + 325);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 353) = *(_OWORD *)(a2 + 353);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
  *(_DWORD *)(a1 + 404) = *(_DWORD *)(a2 + 404);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_DWORD *)(a1 + 412) = *(_DWORD *)(a2 + 412);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
  *(_DWORD *)(a1 + 436) = *(_DWORD *)(a2 + 436);
  v11 = *(_DWORD *)(a2 + 444);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_DWORD *)(a1 + 444) = v11;
  v12 = *(_DWORD *)(a2 + 452);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_DWORD *)(a1 + 452) = v12;
  v13 = *(_DWORD *)(a2 + 460);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_DWORD *)(a1 + 460) = v13;
  v14 = *(_DWORD *)(a2 + 468);
  *(_BYTE *)(a1 + 472) = *(_BYTE *)(a2 + 472);
  *(_DWORD *)(a1 + 468) = v14;
  *(_BYTE *)(a1 + 473) = *(_BYTE *)(a2 + 473);
  v15 = *(_OWORD *)(a2 + 480);
  v16 = *(_OWORD *)(a2 + 496);
  v17 = *(_OWORD *)(a2 + 512);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(_OWORD *)(a1 + 496) = v16;
  *(_OWORD *)(a1 + 512) = v17;
  *(_OWORD *)(a1 + 480) = v15;
  v18 = *(_DWORD *)(a2 + 532);
  *(_BYTE *)(a1 + 536) = *(_BYTE *)(a2 + 536);
  *(_DWORD *)(a1 + 532) = v18;
  v19 = *(_DWORD *)(a2 + 540);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(_DWORD *)(a1 + 540) = v19;
  v20 = *(_DWORD *)(a2 + 548);
  *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
  *(_DWORD *)(a1 + 548) = v20;
  v21 = *(_DWORD *)(a2 + 556);
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
  *(_DWORD *)(a1 + 556) = v21;
  v22 = *(_DWORD *)(a2 + 564);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 568);
  *(_DWORD *)(a1 + 564) = v22;
  v23 = *(_DWORD *)(a2 + 572);
  *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
  *(_DWORD *)(a1 + 572) = v23;
  *(_BYTE *)(a1 + 577) = *(_BYTE *)(a2 + 577);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleHandFrameFeatures(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 578))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleHandFrameFeatures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 568) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_WORD *)(result + 576) = 0;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 578) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 578) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SingleHandFrameFeatures()
{
  return &type metadata for SingleHandFrameFeatures;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CenterNetDetectionModelInputDefinition()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CenterNetDetectionModelInputDefinition()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CenterNetDetectionModelInputDefinition()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CenterNetDetectionModelInputDefinition()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CenterNetDetectionModelInputDefinition@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance CenterNetDetectionModelInputDefinition, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CenterNetDetectionModelInputDefinition(_QWORD *a1@<X8>)
{
  *a1 = 0x726F5F6567616D69;
  a1[1] = 0xEA00000000006769;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CenterNetDetectionModelInputDefinition(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CenterNetDetectionModelInputDefinition;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance CenterNetDetectionModelOutputDefinition(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance CenterNetDetectionModelOutputDefinition()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CenterNetDetectionModelOutputDefinition()
{
  __asm { BR              X10 }
}

uint64_t sub_23D724D64()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CenterNetDetectionModelOutputDefinition(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CenterNetDetectionModelOutputDefinition@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CenterNetDetectionModelOutputDefinition.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CenterNetDetectionModelOutputDefinition()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23D724E7C + 4 * byte_23D9ABD46[*v0]))();
}

void sub_23D724E7C(_QWORD *a1@<X8>)
{
  *a1 = 0x726968635F736D6ELL;
  a1[1] = 0xEF73656974696C61;
}

void sub_23D724EA4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "nms_keypoints");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_23D724ECC(_QWORD *a1@<X8>)
{
  *a1 = 0x726F63735F736D6ELL;
  a1[1] = 0xEA00000000007365;
}

void sub_23D724EEC(_QWORD *a1@<X8>)
{
  *a1 = 0x747065645F736D6ELL;
  a1[1] = 0xE900000000000068;
}

void sub_23D724F0C(_QWORD *a1@<X8>)
{
  *a1 = 0x6F76755F736D6ELL;
  a1[1] = 0xE700000000000000;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CenterNetDetectionModelOutputDefinition(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CenterNetDetectionModelOutputDefinition.allCases.getter;
}

uint64_t CenterNetDetectionModelParams.__allocating_init(modelName:modelPath:options:configJson:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  swift_allocObject();
  return CenterNetDetectionModelParams.init(modelName:modelPath:options:configJson:)(a1, a2, a3, a4, a5, a6);
}

uint64_t CenterNetDetectionModelParams.init(modelName:modelPath:options:configJson:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  void **v18;
  char *v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::Int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void **v30;
  char *v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[32];

  v7 = v6;
  v14 = *(_QWORD *)(a6 + 16);
  swift_retain();
  if (v14
    && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(0x737475706E69, 0xE600000000000000), (v16 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v15, (uint64_t)v45),
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]),
        (swift_dynamicCast() & 1) != 0))
  {
    v42 = a2;
    v17 = *(_QWORD *)(v44 + 16);
    if (v17)
    {
      v40 = a4;
      v18 = (void **)(swift_bridgeObjectRetain() + 40);
      v19 = (char *)MEMORY[0x24BEE4AF8];
      do
      {
        v20 = (uint64_t)*(v18 - 1);
        v21 = *v18;
        swift_bridgeObjectRetain();
        v22._countAndFlagsBits = v20;
        v22._object = v21;
        v23 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CenterNetDetectionModelParams.init(modelName:modelPath:options:configJson:), v22);
        swift_bridgeObjectRelease();
        if (!v23)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
          v25 = *((_QWORD *)v19 + 2);
          v24 = *((_QWORD *)v19 + 3);
          v26 = v25 + 1;
          if (v25 >= v24 >> 1)
            v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v19);
          *((_QWORD *)v19 + 2) = v26;
        }
        v18 += 2;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease_n();
      a4 = v40;
      a2 = v42;
    }
    else
    {
      swift_bridgeObjectRelease();
      v19 = (char *)MEMORY[0x24BEE4AF8];
      a2 = v42;
    }
  }
  else
  {
    v19 = (char *)MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v7 + 128) = v19;
  if (!*(_QWORD *)(a6 + 16))
    goto LABEL_30;
  v27 = specialized __RawDictionaryStorage.find<A>(_:)(0x7374757074756FLL, 0xE700000000000000);
  if ((v28 & 1) == 0)
    goto LABEL_30;
  outlined init with copy of Any(*(_QWORD *)(a6 + 56) + 32 * v27, (uint64_t)v45);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_30;
  v29 = *(_QWORD *)(v44 + 16);
  if (!v29)
  {
    swift_bridgeObjectRelease();
LABEL_30:
    v31 = (char *)MEMORY[0x24BEE4AF8];
    goto LABEL_31;
  }
  v41 = a4;
  v43 = a2;
  v39 = a5;
  v30 = (void **)(swift_bridgeObjectRetain() + 40);
  v31 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    v32 = (uint64_t)*(v30 - 1);
    v33 = *v30;
    swift_bridgeObjectRetain();
    v34._countAndFlagsBits = v32;
    v34._object = v33;
    v35 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #1 of CenterNetDetectionModelParams.init(modelName:modelPath:options:configJson:), v34);
    swift_bridgeObjectRelease();
    if (v35 <= 5)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
      v37 = *((_QWORD *)v31 + 2);
      v36 = *((_QWORD *)v31 + 3);
      if (v37 >= v36 >> 1)
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v31);
      *((_QWORD *)v31 + 2) = v37 + 1;
      v31[v37 + 32] = v35;
    }
    v30 += 2;
    --v29;
  }
  while (v29);
  swift_bridgeObjectRelease_n();
  a5 = v39;
  a4 = v41;
  a2 = v43;
LABEL_31:
  *(_QWORD *)(v7 + 136) = v31;
  swift_release();
  return BaseDetectionModelParams.init(modelName:modelPath:options:configJson:)(a1, a2, a3, a4, a5, a6);
}

Swift::Bool __swiftcall CenterNetDetectionModelParams.hasDepthOutput()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  if (*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRetain_n();
    __asm { BR              X9 }
  }
  return 0;
}

void sub_23D725470()
{
  swift_bridgeObjectRelease();
  JUMPOUT(0x23D72543CLL);
}

uint64_t CenterNetDetectionModelParams.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t CenterNetDetectionModelParams.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CenterNetDetectionModelParams()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for CenterNetDetectionModelOutputDefinition(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CenterNetDetectionModelOutputDefinition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23D7255D4 + 4 * byte_23D9ABD57[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23D725608 + 4 * byte_23D9ABD52[v4]))();
}

uint64_t sub_23D725608(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D725610(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D725618);
  return result;
}

uint64_t sub_23D725624(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D72562CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23D725630(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D725638(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CenterNetDetectionModelOutputDefinition()
{
  return &type metadata for CenterNetDetectionModelOutputDefinition;
}

uint64_t getEnumTagSinglePayload for CenterNetDetectionModelInputDefinition(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for CenterNetDetectionModelInputDefinition(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23D7256E8 + 4 * byte_23D9ABD5C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23D725708 + 4 * byte_23D9ABD61[v4]))();
}

_BYTE *sub_23D7256E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23D725708(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23D725710(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23D725718(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23D725720(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23D725728(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for CenterNetDetectionModelInputDefinition()
{
  return 0;
}

ValueMetadata *type metadata accessor for CenterNetDetectionModelInputDefinition()
{
  return &type metadata for CenterNetDetectionModelInputDefinition;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CenterNetDetectionModelInputDefinition()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [CenterNetDetectionModelInputDefinition] and conformance [A], &demangling cache variable for type metadata for [CenterNetDetectionModelInputDefinition]);
}

unint64_t lazy protocol witness table accessor for type CenterNetDetectionModelInputDefinition and conformance CenterNetDetectionModelInputDefinition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CenterNetDetectionModelInputDefinition and conformance CenterNetDetectionModelInputDefinition;
  if (!lazy protocol witness table cache variable for type CenterNetDetectionModelInputDefinition and conformance CenterNetDetectionModelInputDefinition)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CenterNetDetectionModelInputDefinition, &type metadata for CenterNetDetectionModelInputDefinition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CenterNetDetectionModelInputDefinition and conformance CenterNetDetectionModelInputDefinition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CenterNetDetectionModelInputDefinition and conformance CenterNetDetectionModelInputDefinition;
  if (!lazy protocol witness table cache variable for type CenterNetDetectionModelInputDefinition and conformance CenterNetDetectionModelInputDefinition)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CenterNetDetectionModelInputDefinition, &type metadata for CenterNetDetectionModelInputDefinition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CenterNetDetectionModelInputDefinition and conformance CenterNetDetectionModelInputDefinition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CenterNetDetectionModelInputDefinition and conformance CenterNetDetectionModelInputDefinition;
  if (!lazy protocol witness table cache variable for type CenterNetDetectionModelInputDefinition and conformance CenterNetDetectionModelInputDefinition)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CenterNetDetectionModelInputDefinition, &type metadata for CenterNetDetectionModelInputDefinition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CenterNetDetectionModelInputDefinition and conformance CenterNetDetectionModelInputDefinition);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CenterNetDetectionModelOutputDefinition()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [CenterNetDetectionModelOutputDefinition] and conformance [A], &demangling cache variable for type metadata for [CenterNetDetectionModelOutputDefinition]);
}

unint64_t lazy protocol witness table accessor for type CenterNetDetectionModelOutputDefinition and conformance CenterNetDetectionModelOutputDefinition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CenterNetDetectionModelOutputDefinition and conformance CenterNetDetectionModelOutputDefinition;
  if (!lazy protocol witness table cache variable for type CenterNetDetectionModelOutputDefinition and conformance CenterNetDetectionModelOutputDefinition)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CenterNetDetectionModelOutputDefinition, &type metadata for CenterNetDetectionModelOutputDefinition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CenterNetDetectionModelOutputDefinition and conformance CenterNetDetectionModelOutputDefinition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CenterNetDetectionModelOutputDefinition and conformance CenterNetDetectionModelOutputDefinition;
  if (!lazy protocol witness table cache variable for type CenterNetDetectionModelOutputDefinition and conformance CenterNetDetectionModelOutputDefinition)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CenterNetDetectionModelOutputDefinition, &type metadata for CenterNetDetectionModelOutputDefinition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CenterNetDetectionModelOutputDefinition and conformance CenterNetDetectionModelOutputDefinition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CenterNetDetectionModelOutputDefinition and conformance CenterNetDetectionModelOutputDefinition;
  if (!lazy protocol witness table cache variable for type CenterNetDetectionModelOutputDefinition and conformance CenterNetDetectionModelOutputDefinition)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CenterNetDetectionModelOutputDefinition, &type metadata for CenterNetDetectionModelOutputDefinition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CenterNetDetectionModelOutputDefinition and conformance CenterNetDetectionModelOutputDefinition);
  }
  return result;
}

uint64_t protocol witness for DetectionModelParams.getInputImageLayerName() in conformance CenterNetDetectionModelParams()
{
  return 0x726F5F6567616D69;
}

uint64_t protocol witness for DetectionModelParams.getNumberOfOutput() in conformance CenterNetDetectionModelParams()
{
  return 4;
}

unint64_t specialized CenterNetDetectionModelOutputDefinition.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CenterNetDetectionModelOutputDefinition.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for HoverDistance()
{
  return &type metadata for HoverDistance;
}

BOOL Coordinate3D.almostEqual(to:withThreshold:)(float32x4_t *a1, double a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  float v4;
  float v6;
  float32x4_t v7;
  float v8;

  v3 = vsubq_f32(*v2, *a1);
  v4 = a2;
  if (fabsf(v3.f32[0]) > v4)
    return 0;
  if (fabsf(v3.f32[1]) > v4)
    return 0;
  v6 = fabsf(v3.f32[2]);
  v7 = vsubq_f32(v2[1], a1[1]);
  v8 = fabsf(v7.f32[0]);
  if (v6 > v4 || v8 > v4)
    return 0;
  if (fabsf(v7.f32[1]) <= v4)
    return fabsf(v7.f32[2]) <= v4;
  return 0;
}

uint64_t FrameManager.add(frameID:masterTimestamp:midExposureTimestamp:)@<X0>(unint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, Float64 a5@<D0>)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  CMTimeEpoch v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  CMTimeValue value;
  unint64_t v31;
  CMTimeEpoch epoch;
  CMTimeValue v33;
  unint64_t v34;
  CMTimeEpoch v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[4];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[64];
  uint64_t v72;
  CMTime v73;
  __int128 v74;
  __int128 v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  char v81;
  uint64_t v82;
  _BYTE v83[128];
  _OWORD v84[7];
  uint64_t v85;

  if ((a3 & 1) != 0)
    a2 = a5;
  result = swift_beginAccess();
  v11 = v5[3];
  v12 = *(_QWORD *)(v11 + 16);
  v66 = a4;
  if (!v12 || *(_QWORD *)(v11 + 24) <= 1uLL)
  {
    _s5Hands5FrameVSgWOi0_((uint64_t)&v73);
    goto LABEL_14;
  }
  v13 = v5[4];
  v14 = v13 - 1;
  if (__OFSUB__(v13, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  v15 = v5[2];
  v16 = __OFADD__(v14, v15);
  v17 = v14 + v15;
  if (v16)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!v15)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v15 == -1 && v17 == 0x8000000000000000)
    goto LABEL_25;
  v18 = v17 % v15;
  if (v18 >= v12)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  v19 = v11 + 120 * v18;
  v20 = *(_BYTE *)(v19 + 88);
  v21 = *(_QWORD *)(v19 + 92);
  v22 = *(_BYTE *)(v19 + 140);
  v23 = *(_QWORD *)(v19 + 144);
  v24 = *(_OWORD *)(v19 + 108);
  v25 = *(_OWORD *)(v19 + 124);
  v26 = *(_QWORD *)(v19 + 48);
  v27 = *(_QWORD *)(v19 + 100);
  v28 = *(_OWORD *)(v19 + 56);
  v29 = *(_OWORD *)(v19 + 72);
  *(_OWORD *)&v73.value = *(_OWORD *)(v19 + 32);
  v73.epoch = v26;
  v74 = v28;
  v75 = v29;
  v76 = v20;
  v77 = v21;
  v78 = v27;
  v79 = v24;
  v80 = v25;
  v81 = v22;
  v82 = v23;
  _s5Hands5FrameVSgWOi_((uint64_t)&v73);
LABEL_14:
  outlined init with take of Frame?((uint64_t)&v73, (uint64_t)v83);
  CMTimeMakeWithSeconds(&v73, a5, 1000000);
  value = v73.value;
  v31 = *(_QWORD *)&v73.timescale;
  epoch = v73.epoch;
  CMTimeMakeWithSeconds(&v73, a2, 1000000);
  v33 = v73.value;
  v34 = *(_QWORD *)&v73.timescale;
  v35 = v73.epoch;
  outlined init with take of Frame?((uint64_t)v83, (uint64_t)&v73);
  Frame.init(frameID:masterTimestamp:midExposureTimestamp:previousFrame:)(a1, value, v31, epoch, v33, v34, v35, 0, (uint64_t)&v68, (uint64_t)&v73);
  v84[4] = *(_OWORD *)&v71[16];
  v84[5] = *(_OWORD *)&v71[32];
  v84[6] = *(_OWORD *)&v71[48];
  v36 = v72;
  v85 = v72;
  v84[0] = v68;
  v84[1] = v69;
  v84[2] = v70;
  v84[3] = *(_OWORD *)v71;
  v60 = v68;
  v37 = v69;
  v38 = *((_QWORD *)&v70 + 1);
  v61 = v70;
  v62 = *(_QWORD *)v71;
  v39 = v71[8];
  v40 = *(_QWORD *)&v71[12];
  v63 = *(_DWORD *)&v71[20];
  v41 = *(_DWORD *)&v71[24];
  v42 = *(_QWORD *)&v71[36];
  v64 = *(_QWORD *)&v71[28];
  v65 = *(_QWORD *)&v71[44];
  v43 = *(_QWORD *)&v71[52];
  v44 = v71[60];
  outlined init with take of Frame?((uint64_t)v83, (uint64_t)&v73);
  if (_s5Hands5FrameVSgWOg((uint64_t)&v73) == 1
    || v73.value < *(_QWORD *)&v84[0]
    && (CMTime.seconds.getter(), v46 = v45, CMTime.seconds.getter(), v46 < v47)
    && (CMTime.seconds.getter(), v49 = v48, CMTime.seconds.getter(), v49 < v50))
  {
    swift_beginAccess();
    specialized CircularBuffer.add(_:)((uint64_t)v84);
    swift_endAccess();
    v68 = v60;
    v69 = v37;
    *(_QWORD *)&v70 = v61;
    *((_QWORD *)&v70 + 1) = v38;
    *(_QWORD *)v71 = v62;
    v71[8] = v39;
    *(_QWORD *)&v71[12] = v40;
    *(_DWORD *)&v71[20] = v63;
    *(_DWORD *)&v71[24] = v41;
    *(_QWORD *)&v71[28] = v64;
    *(_QWORD *)&v71[36] = v42;
    *(_QWORD *)&v71[44] = v65;
    *(_QWORD *)&v71[52] = v43;
    v71[60] = v44;
    v72 = v36;
    _s5Hands5FrameVSgWOi_((uint64_t)&v68);
  }
  else
  {
    v68 = xmmword_23D9A7070;
    v69 = 0uLL;
    v67[0] = 0;
    v67[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    v51._object = (void *)0x800000023D9C8100;
    v51._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v51);
    v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._countAndFlagsBits = 8250;
    v53._object = (void *)0xE200000000000000;
    String.append(_:)(v53);
    CMTime.seconds.getter();
    Double.write<A>(to:)();
    v54._countAndFlagsBits = 8236;
    v54._object = (void *)0xE200000000000000;
    String.append(_:)(v54);
    CMTime.seconds.getter();
    Double.write<A>(to:)();
    v55._countAndFlagsBits = 0x5B203E3D205DLL;
    v55._object = (void *)0xE600000000000000;
    String.append(_:)(v55);
    v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    v57._countAndFlagsBits = 8250;
    v57._object = (void *)0xE200000000000000;
    String.append(_:)(v57);
    CMTime.seconds.getter();
    Double.write<A>(to:)();
    v58._countAndFlagsBits = 8236;
    v58._object = (void *)0xE200000000000000;
    String.append(_:)(v58);
    CMTime.seconds.getter();
    Double.write<A>(to:)();
    v59._countAndFlagsBits = 93;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    v67[3] = MEMORY[0x24BEE0D00];
    specialized static HLog.W(file:function:line:logArea:_:_:)(0xD00000000000004DLL, 0x800000023D9C80B0, 38, (uint64_t *)&v68, (uint64_t)v67, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v67);
    _s5Hands5FrameVSgWOi0_((uint64_t)&v68);
  }
  return outlined init with take of Frame?((uint64_t)&v68, v66);
}

uint64_t FrameManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FrameManager()
{
  return objc_opt_self();
}

uint64_t _s5Hands5FrameVSgWOi_(uint64_t result)
{
  *(_BYTE *)(result + 120) = 0;
  return result;
}

uint64_t outlined init with take of Frame?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Frame?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s5Hands5FrameVSgWOg(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

double _s5Hands5FrameVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 120) = 1;
  return result;
}

void static CoverglassUtils.loadWarperMeshBinFromFile(_:)()
{
  Data.init(contentsOf:options:)();
  __asm { BR              X10 }
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x242638C74](MEMORY[0x24BDCDB28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

id CoverglassUtils.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CoverglassUtils.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoverglassUtils();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CoverglassUtils.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoverglassUtils();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;

  if (!a2)
  {
    v7 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v7 = 0;
LABEL_14:
    v8 = a4;
LABEL_15:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = v8;
    *(_BYTE *)(result + 24) = v7;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_17;
  v5 = 0;
  v6 = a4;
  while (1)
  {
    v7 = v6 == a5;
    if (v6 != a5)
      break;
    v8 = 0;
LABEL_8:
    *(_QWORD *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5)
      goto LABEL_15;
    ++v5;
    v9 = v6 == a5;
    v6 = v8;
    if (v9)
    {
      v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }
  v8 = v6 + 1;
  if (!__OFADD__(v6, 1))
    goto LABEL_8;
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CameraSource : [Float]]);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[CameraSource : [Float]]>);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 4 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 4 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 4 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 29;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 2);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = a2 + 592 * a3;
        if (v10 < (unint64_t)&v8[74 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 592 * v5)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SingleHandFrameFeatures>);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 592);
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v11 = a2 + (a3 << 7);
        if (v11 < (unint64_t)&v8[16 * v5 + 4] && (unint64_t)(v8 + 4) < v11 + (v5 << 7))
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<HandPose>);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v10 = v9 - 32;
      if (v9 < 32)
        v10 = v9 + 95;
      v8[2] = v5;
      v8[3] = 2 * (v10 >> 7);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = a2 + 112 * a3;
        if (v10 < (unint64_t)&v8[14 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 112 * v5)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionResult>);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 112);
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v5)
    return MEMORY[0x24BEE4AF8];
  if (v5 <= 0)
  {
    v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0)
        goto LABEL_24;
      v14 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                      - 8);
      v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v16 = *(_QWORD *)(v14 + 72);
      v17 = a2 + v16 * a3;
      v18 = v16 * v5;
      v19 = &v15[v18];
      v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20)
        goto LABEL_24;
      swift_arrayInitWithCopy();
      return (uint64_t)v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DerivedHandAttributes?>);
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?)
                 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = (_QWORD *)swift_allocObject();
  v12 = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1)
      goto LABEL_23;
    v11[2] = v5;
    v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 16 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 16 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 16 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    if (v5 <= 0)
    {
      v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0)
          goto LABEL_17;
        v10 = a2 + 320 * a3;
        if (v10 < (unint64_t)&v8[40 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 320 * v5)
          goto LABEL_17;
        swift_arrayInitWithCopy();
        return (uint64_t)v8;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TrackingInfo>);
      v8 = (_QWORD *)swift_allocObject();
      v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 320);
      if (v4 != a3)
        goto LABEL_5;
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 8 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 8 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
      v9 = (char *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v5)
    return MEMORY[0x24BEE4AF8];
  if (v5 <= 0)
  {
    v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0)
        goto LABEL_24;
      v14 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
      v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v16 = *(_QWORD *)(v14 + 72);
      v17 = a2 + v16 * a3;
      v18 = v16 * v5;
      v19 = &v15[v18];
      v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20)
        goto LABEL_24;
      swift_arrayInitWithCopy();
      return (uint64_t)v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LogMessage>);
  v8 = *(_QWORD *)(type metadata accessor for LogMessage(0) - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = (_QWORD *)swift_allocObject();
  v12 = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1)
      goto LABEL_23;
    v11[2] = v5;
    v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Double, value: simd_float4x4)>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 80);
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [CameraSource : Float].Iterator._Variant();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_13;
  }
  v3 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 == -1)
    return MEMORY[0x24BEE4AF8];
  v5 = result;
  if (v3 <= 0)
  {
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v6 = (_QWORD *)swift_allocObject();
    v7 = _swift_stdlib_malloc_size(v6);
    v8 = v7 - 32;
    if (v7 < 32)
      v8 = v7 - 25;
    v6[2] = v3;
    v6[3] = 2 * (v8 >> 3);
  }
  result = specialized Sequence._copyContents(initializing:)((uint64_t)&v9, (uint64_t)(v6 + 4), v3, v5, a2);
  if (result == v3)
    return (uint64_t)v6;
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v4 = 8 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 25;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 3);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v4 = 4 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 29;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 2);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 4 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
    v4 = 4 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 29;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 2);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 4 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
    v4 = a2 << 6;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 + 31;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 6);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, a2 << 6);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v3;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = (_QWORD *)swift_allocObject();
  v7 = _swift_stdlib_malloc_size(v6);
  v8 = v7 - 32;
  if (v7 < 32)
    v8 = v7 - 17;
  v6[2] = v3;
  v6[3] = 2 * (v8 >> 4);
  v9 = a3(&v11, v6 + 4, v3, a1);
  swift_bridgeObjectRetain();
  outlined consume of [CameraSource : Float].Iterator._Variant();
  if (v9 != v3)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v6;
}

uint64_t type metadata accessor for CoverglassUtils()
{
  return objc_opt_self();
}

uint64_t method lookup function for CoverglassUtils()
{
  return swift_lookUpClassMethod();
}

int64_t *specialized _copyCollectionToContiguousArray<A>(_:)(int64_t *result, int64_t a2)
{
  int64_t v2;
  int64_t v4;
  int64_t *v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8[3];

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      return (int64_t *)MEMORY[0x24BEE4AF8];
    v4 = (int64_t)result;
    if (v2 <= 0)
    {
      v5 = (int64_t *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v5 = (int64_t *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v2;
      v5[3] = 2 * (v7 >> 3);
    }
    result = specialized Sequence._copySequenceContents(initializing:)(v8, v5 + 4, v2, v4, a2);
    if (result == (int64_t *)v2)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 29;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * (v5 >> 2);
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, (_DWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [CameraSource : Float].Iterator._Variant();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ImageData>);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 192);
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [CameraSource : Float].Iterator._Variant();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionResult>);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 112);
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [CameraSource : Float].Iterator._Variant();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    v13 = (__int128 *)(*(_QWORD *)(a4 + 56) + (v12 << 6));
    v14 = *v13;
    v15 = v13[1];
    v16 = v13[2];
    v17 = v13[3];
    *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    *(_OWORD *)(a2 + 16) = v14;
    *(_OWORD *)(a2 + 32) = v15;
    *(_OWORD *)(a2 + 48) = v16;
    *(_OWORD *)(a2 + 64) = v17;
    a2 += 80;
    if (v9 == a3)
      goto LABEL_35;
  }
  v18 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v18 >= v10)
    goto LABEL_30;
  v19 = *(_QWORD *)(v4 + 8 * v18);
  if (v19)
    goto LABEL_19;
  v8 += 2;
  if (v18 + 1 >= v10)
  {
    v7 = 0;
    v8 = v18;
    goto LABEL_34;
  }
  v19 = *(_QWORD *)(v4 + 8 * v8);
  if (v19)
  {
LABEL_15:
    v18 = v8;
LABEL_19:
    v21 = __clz(__rbit64(v19));
    v7 = (v19 - 1) & v19;
    v12 = v21 + (v18 << 6);
    v8 = v18;
    goto LABEL_8;
  }
  v20 = v18 + 2;
  if (v18 + 2 >= v10)
    goto LABEL_30;
  v19 = *(_QWORD *)(v4 + 8 * v20);
  if (v19)
  {
LABEL_18:
    v18 = v20;
    goto LABEL_19;
  }
  v8 = v18 + 3;
  if (v18 + 3 >= v10)
  {
    v7 = 0;
    v8 = v18 + 2;
    goto LABEL_34;
  }
  v19 = *(_QWORD *)(v4 + 8 * v8);
  if (v19)
    goto LABEL_15;
  v20 = v18 + 4;
  if (v18 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v4 + 8 * v20);
  if (v19)
    goto LABEL_18;
  while (1)
  {
    v18 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v18 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v19 = *(_QWORD *)(v4 + 8 * v18);
    ++v20;
    if (v19)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    v13 = *(_QWORD *)(a4 + 48) + 16 * v12;
    v14 = *(_QWORD *)v13;
    LOBYTE(v13) = *(_BYTE *)(v13 + 8);
    *(_QWORD *)a2 = v14;
    *(_BYTE *)(a2 + 8) = v13;
    a2 += 16;
    if (v9 == a3)
      goto LABEL_35;
  }
  v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v15 >= v10)
    goto LABEL_30;
  v16 = *(_QWORD *)(v4 + 8 * v15);
  if (v16)
    goto LABEL_19;
  v8 += 2;
  if (v15 + 1 >= v10)
  {
    v7 = 0;
    v8 = v15;
    goto LABEL_34;
  }
  v16 = *(_QWORD *)(v4 + 8 * v8);
  if (v16)
  {
LABEL_15:
    v15 = v8;
LABEL_19:
    v18 = __clz(__rbit64(v16));
    v7 = (v16 - 1) & v16;
    v12 = v18 + (v15 << 6);
    v8 = v15;
    goto LABEL_8;
  }
  v17 = v15 + 2;
  if (v15 + 2 >= v10)
    goto LABEL_30;
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v15 = v17;
    goto LABEL_19;
  }
  v8 = v15 + 3;
  if (v15 + 3 >= v10)
  {
    v7 = 0;
    v8 = v15 + 2;
    goto LABEL_34;
  }
  v16 = *(_QWORD *)(v4 + 8 * v8);
  if (v16)
    goto LABEL_15;
  v17 = v15 + 4;
  if (v15 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
    goto LABEL_18;
  while (1)
  {
    v15 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v15 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v16 = *(_QWORD *)(v4 + 8 * v15);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

int64_t *specialized Sequence._copySequenceContents(initializing:)(int64_t *result, int64_t *a2, int64_t a3, int64_t a4, int64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  _QWORD *v17;
  int64_t v18;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0)
    goto LABEL_31;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_32;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    v6 = a3 - 1;
    if (a3 == 1)
      goto LABEL_7;
    v7 = a3 - 2;
    if (a3 - 2 >= (unint64_t)(~a4 + a5))
      v7 = ~a4 + a5;
    if (v7 < v6)
      v6 = v7;
    v8 = v6 + 1;
    if (v8 > 4)
    {
      v11 = v8 & 3;
      if ((v8 & 3) == 0)
        v11 = 4;
      v12 = v8 - v11;
      v9 = v8 - v11 + 1;
      v13 = v5 + v12;
      v10 = &a2[v12];
      v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_23D9A7060);
      v15 = (int64x2_t *)(a2 + 3);
      v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s64(v14, v16);
        v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      v5 = v13;
    }
    else
    {
      v9 = 1;
      v10 = a2;
    }
    v17 = v10 + 1;
    v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5)
        goto LABEL_30;
      ++v9;
      v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9)
        goto LABEL_7;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_DWORD *)(*(_QWORD *)(a4 + 56) + 4 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, char *__dst, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[13];

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!__dst)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = __dst;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v30 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (__int128 *)(*(_QWORD *)(a4 + 56) + 192 * v16);
    v21 = v20[3];
    v23 = *v20;
    v22 = v20[1];
    v31[2] = v20[2];
    v31[3] = v21;
    v31[0] = v23;
    v31[1] = v22;
    v24 = v20[7];
    v26 = v20[4];
    v25 = v20[5];
    v31[6] = v20[6];
    v31[7] = v24;
    v31[4] = v26;
    v31[5] = v25;
    v27 = v20[11];
    v29 = v20[8];
    v28 = v20[9];
    v31[10] = v20[10];
    v31[11] = v27;
    v31[8] = v29;
    v31[9] = v28;
    memmove(v11, v20, 0xC0uLL);
    if (v13 == v10)
    {
      outlined retain of ImageData((uint64_t)v31);
      goto LABEL_38;
    }
    v11 += 192;
    result = (_QWORD *)outlined retain of ImageData((uint64_t)v31);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v30;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[5];
  _BYTE v28[25];

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!__dst)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = __dst;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v26 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_OWORD *)(*(_QWORD *)(a4 + 56) + 112 * v16);
    v22 = v20[1];
    v21 = v20[2];
    v27[0] = *v20;
    v27[1] = v22;
    v27[2] = v21;
    v24 = v20[4];
    v23 = v20[5];
    v25 = v20[3];
    *(_OWORD *)&v28[9] = *(_OWORD *)((char *)v20 + 89);
    v27[4] = v24;
    *(_OWORD *)v28 = v23;
    v27[3] = v25;
    memmove(v11, v20, 0x69uLL);
    if (v13 == v10)
    {
      outlined retain of DetectionResult((uint64_t)v27);
      goto LABEL_38;
    }
    v11 += 112;
    result = (_QWORD *)outlined retain of DetectionResult((uint64_t)v27);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v26;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized static CoverglassUtils.decodeCoverGlassBin(_:_:)(uint64_t result, char a2, int32x2_t a3)
{
  unint64_t v3;
  unint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  Swift::String v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v3 = *(_QWORD *)(result + 16);
  v4 = v3 >> 1;
  v5 = sqrtf((float)(v3 >> 1));
  if ((~LODWORD(v5) & 0x7F800000) == 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v5 <= -9.2234e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v5 >= 9.2234e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v6 = (uint64_t)v5;
  v7 = v6 * v6;
  if ((unsigned __int128)(v6 * (__int128)v6) >> 64 != (v6 * v6) >> 63)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v7 + 0x4000000000000000 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v3 != 2 * v7)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    v20[0] = 0xD00000000000002BLL;
    v20[1] = 0x800000023D9C81E0;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v20[3] = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v17 = xmmword_23D9AC010;
    v18 = 0;
    v19 = 0;
    v11 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v17, 0xD000000000000050, 0x800000023D9C8120, 110, (uint64_t)v20, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
    return v11;
  }
  v9 = result;
  a3.i32[0] = 0;
  result = specialized Array.init(repeating:count:)(*(_QWORD *)(result + 16), a3);
  if ((a2 & 1) != 0)
    v10 = 0.0019531;
  else
    v10 = 0.0039062;
  if (v7 < 0)
    goto LABEL_31;
  v11 = result;
  if (!v7)
    return v11;
  if ((unint64_t)(v7 - 1) < *(_QWORD *)(result + 16))
  {
    v12 = 0;
    v13 = (v3 + 1) >> 1;
    v14 = (int *)(v9 + 36);
    while (v4 != v12)
    {
      v15 = *v14;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
        v11 = result;
      }
      *(float *)(v11 + 4 * v12 + 32) = v10 * (float)v15;
      if (v13 == v12)
        goto LABEL_24;
      if ((unint64_t)(v7 + v12) >= *(_QWORD *)(v11 + 16))
        goto LABEL_25;
      *(float *)(v11 + 4 * v7 + 32 + 4 * v12) = v10 * (float)*(v14 - 1);
      v14 += 2;
      if (v7 == ++v12)
        return v11;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized static CoverglassUtils.bilinearInterpolation(_:_:_:_:_:_:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v29;

  v6 = (float)a5;
  v7 = (float)a5 + -1.0;
  v8 = v7 / (float)a4;
  v9 = floorf(v8 * (float)a2);
  v10 = floorf(v8 * (float)a3);
  if (v7 >= (float)(v9 + 1.0))
    v7 = v9 + 1.0;
  if ((float)((float)a6 + -1.0) >= (float)(v10 + 1.0))
    v11 = v10 + 1.0;
  else
    v11 = (float)a6 + -1.0;
  v12 = v10 * v6;
  v13 = v9 + (float)(v10 * v6);
  if (v13 <= -9.2234e18)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v13 >= 9.2234e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v14 = v11 * v6;
  v15 = v9 + (float)(v11 * v6);
  if (v15 <= -9.2234e18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v15 >= 9.2234e18)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v16 = v12 + v7;
  if (v16 <= -9.2234e18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v16 >= 9.2234e18)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v17 = v7 + v14;
  if ((~LODWORD(v17) & 0x7F800000) == 0
    || (LODWORD(v16) & 0x7F800000) == 2139095040
    || (LODWORD(v13) & 0x7F800000) == 2139095040
    || (LODWORD(v15) & 0x7F800000) == 2139095040)
  {
    goto LABEL_47;
  }
  if (v17 <= -9.2234e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v17 >= 9.2234e18)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v21 = a5 * a6;
  if ((unsigned __int128)(a5 * (__int128)a6) >> 64 != (a5 * a6) >> 63)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v22 = (uint64_t)v13;
  v23 = (uint64_t)v15;
  v24 = (uint64_t)v16;
  v25 = (uint64_t)v17;
  if (v21 > (uint64_t)v13 && v21 > v24 && v21 > v23 && v21 > v25)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v29 = *(_QWORD *)(result + 16);
      if (v29 > v22)
      {
        if (v29 > v23)
        {
          if (v29 > v24)
          {
            if (v29 > v25)
              return result;
LABEL_55:
            __break(1u);
            return result;
          }
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  return result;
}

uint64_t specialized static CoverglassUtils.upscaleTexture(_:warperMeshWidth:warperMeshHeight:gridSizeWidth:gridSizeHeight:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t result;

  v5 = a2 * a3;
  if ((unsigned __int128)(a2 * (__int128)a3) >> 64 != (a2 * a3) >> 63)
    goto LABEL_22;
  if ((v5 & 0x8000000000000000) == 0)
  {
    if (v5)
    {
      v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v11 + 16) = v5;
      bzero((void *)(v11 + 32), 4 * v5);
      if ((a3 & 0x8000000000000000) == 0)
      {
LABEL_5:
        if (!a3)
          return v11;
        if (a2 < 0)
          goto LABEL_23;
        v12 = 0;
        v13 = 0;
        while (v13 != a3)
        {
          if (a2)
          {
            v14 = 0;
            while (1)
            {
              specialized static CoverglassUtils.bilinearInterpolation(_:_:_:_:_:_:_:)(a1, v14, v13, a2, a4, a5);
              if (v12 < 0)
                goto LABEL_19;
              if ((unint64_t)(v12 + v14) >= *(_QWORD *)(v11 + 16))
                goto LABEL_20;
              v16 = v14 + 1;
              *(_DWORD *)(v11 + 32 + 4 * v12 + 4 * v14) = v15;
              v14 = v16;
              if (a2 == v16)
              {
                v12 += v16;
                break;
              }
            }
          }
          if (++v13 == a3)
            return v11;
        }
        goto LABEL_21;
      }
    }
    else
    {
      v11 = MEMORY[0x24BEE4AF8];
      if ((a3 & 0x8000000000000000) == 0)
        goto LABEL_5;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static CoverglassUtils.upscaleCoverGlassArray(_:warperMeshWidth:warperMeshHeight:gridSizeWidth:gridSizeHeight:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v11 = a4 * a5;
  if ((unsigned __int128)(a4 * (__int128)a5) >> 64 != (a4 * a5) >> 63)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v11 < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = a1;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 < (unint64_t)v11)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRelease();
    v14 = specialized _copyCollectionToContiguousArray<A>(_:)(v9, v20, 0, (2 * v11) | 1);
    goto LABEL_9;
  }
  v5 = a5;
  v6 = a4;
  v7 = a3;
  v8 = a2;
  v20 = a1 + 32;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v12 = swift_dynamicCastClass();
  if (!v12)
  {
    swift_bridgeObjectRelease();
    v12 = MEMORY[0x24BEE4AF8];
  }
  v13 = *(_QWORD *)(v12 + 16);
  swift_release();
  if (v13 != v11)
    goto LABEL_21;
  v14 = swift_dynamicCastClass();
  if (!v14)
  {
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x24BEE4AF8];
  }
LABEL_9:
  swift_bridgeObjectRelease();
  v15 = specialized static CoverglassUtils.upscaleTexture(_:warperMeshWidth:warperMeshHeight:gridSizeWidth:gridSizeHeight:)(v14, v8, v7, v6, v5);
  swift_release();
  if (v11 + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (2 * v11 < v11)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v10 < 2 * v11)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRelease();
    v18 = specialized _copyCollectionToContiguousArray<A>(_:)(v9, v20, v11, (4 * v11) | 1);
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v16 = swift_dynamicCastClass();
  if (!v16)
  {
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
  }
  v17 = *(_QWORD *)(v16 + 16);
  swift_release();
  if (v17 != v11)
    goto LABEL_25;
  v18 = swift_dynamicCastClass();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
  }
LABEL_17:
  swift_bridgeObjectRelease();
  specialized static CoverglassUtils.upscaleTexture(_:warperMeshWidth:warperMeshHeight:gridSizeWidth:gridSizeHeight:)(v18, v8, v7, v6, v5);
  swift_release();
  return v15;
}

BOOL JointUncertaintySuppressor.shouldSuppress(basedOn:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = v1 + 32;
  while (*(_BYTE *)(v5 + v3) != 1 || !__OFADD__(v4++, 1))
  {
    if (v2 == ++v3)
      return (double)v4 / (double)v2 > 0.25;
  }
  __break(1u);
  return (double)v4 / (double)v2 > 0.25;
}

uint64_t JointUncertaintySuppressor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JointUncertaintySuppressor()
{
  return objc_opt_self();
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.update(inProgress:withHand:withData:atTime:) in conformance JointUncertaintySuppressor(uint64_t a1, uint64_t a2)
{
  return specialized JointUncertaintySuppressor.update(inProgress:withHand:withData:atTime:)(a1, a2);
}

BOOL protocol witness for MiddleDoubleTapSuppressor.shouldSuppress(basedOn:) in conformance JointUncertaintySuppressor()
{
  return JointUncertaintySuppressor.shouldSuppress(basedOn:)();
}

uint64_t specialized JointUncertaintySuppressor.update(inProgress:withHand:withData:atTime:)(uint64_t result, uint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  BOOL v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;

  if ((result & 1) == 0)
  {
    swift_beginAccess();
    *(_QWORD *)(v3 + 32) = MEMORY[0x24BEE4AF8];
    return swift_bridgeObjectRelease();
  }
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    return result;
  v7 = *(_QWORD *)(v3 + 48);
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v8 = *(_QWORD *)(v6 + 16);
  if (v7 >= v8)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v9 = *(_QWORD *)(v3 + 56);
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v9 < v8)
  {
    v10 = v6 + 32;
    v11 = *(float *)(v10 + 144 * v9 + 4);
    v12 = *(float *)(v3 + 40);
    v13 = v12 <= *(float *)(v10 + 144 * v7 + 4);
    v5 = v12 <= v11 || v13;
    v2 = (char **)(v3 + 32);
    swift_beginAccess();
    v4 = *(char **)(v3 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 32) = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
  *v2 = v4;
LABEL_11:
  v16 = *((_QWORD *)v4 + 2);
  v15 = *((_QWORD *)v4 + 3);
  if (v16 >= v15 >> 1)
  {
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v4);
    *v2 = v4;
  }
  *((_QWORD *)v4 + 2) = v16 + 1;
  v4[v16 + 32] = v5;
  return swift_endAccess();
}

void destroy for PipelineStatisticsData(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for PipelineStatisticsData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  id v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v3 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v3;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  v4 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v4;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v5 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v5;
  v6 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v6;
  v13 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v13;
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  v7 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v7;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  v8 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v8;
  v14 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v14;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v9 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 337) = *(_OWORD *)(a2 + 337);
  *(_OWORD *)(a1 + 328) = v9;
  v12 = *(void **)(a2 + 368);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v12;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = v12;
  return a1;
}

uint64_t assignWithCopy for PipelineStatisticsData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  void *v11;
  id v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 337) = *(_OWORD *)(a2 + 337);
  *(_OWORD *)(a1 + 328) = v9;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  v10 = *(void **)(a2 + 368);
  v11 = *(void **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v10;
  v12 = v10;

  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  return a1;
}

void *__swift_memcpy384_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x180uLL);
}

uint64_t assignWithTake for PipelineStatisticsData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  v4 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  v5 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 337) = *(_OWORD *)(a2 + 337);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  v6 = *(void **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);

  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  return a1;
}

uint64_t getEnumTagSinglePayload for PipelineStatisticsData(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 384))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PipelineStatisticsData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 376) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 384) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 384) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PipelineStatisticsData()
{
  return &type metadata for PipelineStatisticsData;
}

unint64_t lazy protocol witness table accessor for type PipelineStatisticsLogging and conformance PipelineStatisticsLogging()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PipelineStatisticsLogging and conformance PipelineStatisticsLogging;
  if (!lazy protocol witness table cache variable for type PipelineStatisticsLogging and conformance PipelineStatisticsLogging)
  {
    v1 = type metadata accessor for PipelineStatisticsLogging(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PipelineStatisticsLogging, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PipelineStatisticsLogging and conformance PipelineStatisticsLogging);
  }
  return result;
}

Swift::Void __swiftcall PipelineStatisticsData.sendPipelineHealthEvent()()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unsigned int v5;
  double v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[6];
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  char v15;
  _BYTE v16[16];
  uint64_t v17;
  char v18;

  v1 = *(_OWORD *)(v0 + 8);
  v2 = *(_OWORD *)(v0 + 56);
  v3 = *(_OWORD *)(v0 + 88);
  v14[2] = *(_OWORD *)(v0 + 72);
  v14[3] = v3;
  v15 = *(_BYTE *)(v0 + 104);
  v4 = *(_OWORD *)(v0 + 24);
  v12 = v1;
  v13 = v4;
  v14[0] = *(_OWORD *)(v0 + 40);
  v14[1] = v2;
  v5 = DWORD2(v1);
  if (DWORD2(v1))
  {
    outlined init with take of Double?((uint64_t)v14, (uint64_t)v16);
    outlined init with take of Double?((uint64_t)v16, (uint64_t)&v17);
    if ((v18 & 1) == 0)
    {
      v6 = *(double *)&v12 / (double)v5;
      v7 = v17;
      v8 = (void *)MEMORY[0x2426372E8](0xD000000000000021, 0x800000023D9C8480);
      v9 = swift_allocObject();
      memcpy((void *)(v9 + 16), (const void *)v0, 0x180uLL);
      *(double *)(v9 + 400) = v6;
      *(_QWORD *)(v9 + 408) = v7;
      *(_QWORD *)(v9 + 416) = 0xD000000000000021;
      *(_QWORD *)(v9 + 424) = 0x800000023D9C8480;
      v11[4] = partial apply for closure #1 in PipelineStatisticsData.sendPipelineHealthEvent();
      v11[5] = v9;
      v11[0] = MEMORY[0x24BDAC760];
      v11[1] = 1107296256;
      v11[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
      v11[3] = &block_descriptor_12;
      v10 = _Block_copy(v11);
      outlined retain of PipelineStatisticsData(v0);
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v10);

    }
  }
}

Swift::Void __swiftcall PipelineStatisticsData.sendPipelineLatencyEvent()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  double v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[6];

  v1 = *v0;
  v2 = *v0 + 64;
  v3 = 1 << *(_BYTE *)(*v0 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(*v0 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_20;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v6)
      goto LABEL_26;
    v11 = *(_QWORD *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v6)
        goto LABEL_26;
      v11 = *(_QWORD *)(v2 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v6)
          goto LABEL_26;
        v11 = *(_QWORD *)(v2 + 8 * v7);
        if (!v11)
          break;
      }
    }
LABEL_19:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_20:
    v13 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * v9);
    v14 = *(_QWORD *)(v1 + 56) + 104 * v9;
    v15 = *(_DWORD *)(v14 + 8);
    if (v13)
      v16 = v15 == 0;
    else
      v16 = 1;
    if (!v16 && (*(_BYTE *)(v14 + 40) & 1) == 0)
    {
      v17 = *(_QWORD *)(v14 + 32);
      v18 = *(double *)v14 / (double)v15;
      v19 = (void *)MEMORY[0x2426372E8](0xD000000000000022, 0x800000023D9C8410);
      v20 = swift_allocObject();
      *(_DWORD *)(v20 + 16) = v13;
      *(double *)(v20 + 24) = v18;
      *(_QWORD *)(v20 + 32) = v17;
      *(_QWORD *)(v20 + 40) = 0xD000000000000022;
      *(_QWORD *)(v20 + 48) = 0x800000023D9C8410;
      v22[4] = partial apply for closure #1 in PipelineStatisticsData.sendPipelineLatencyEvent();
      v22[5] = v20;
      v22[0] = MEMORY[0x24BDAC760];
      v22[1] = 1107296256;
      v22[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
      v22[3] = &block_descriptor_6;
      v21 = _Block_copy(v22);
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v21);

    }
  }
  v12 = v10 + 3;
  if (v12 >= v6)
  {
LABEL_26:
    swift_release();
    return;
  }
  v11 = *(_QWORD *)(v2 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_19;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v6)
      goto LABEL_26;
    v11 = *(_QWORD *)(v2 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_19;
  }
LABEL_28:
  __break(1u);
}

Swift::Void __swiftcall PipelineStatisticsData.sendFramePctByHandExistenceEvent()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  Class isa;
  void *v12;
  _QWORD *v13;
  void *v14;
  objc_class *v15;
  _QWORD aBlock[6];

  if (*(_DWORD *)(v0 + 16))
  {
    v1 = (uint64_t *)v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
    v3 = *(_QWORD *)v0;
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = specialized __RawDictionaryStorage.find<A>(_:)(0);
      LODWORD(v4) = 0;
      if ((v6 & 1) != 0)
        LODWORD(v4) = *(_DWORD *)(*(_QWORD *)(v3 + 56) + 104 * v5 + 8);
    }
    *(_DWORD *)(inited + 32) = v4;
    LODWORD(aBlock[0]) = 0;
    BYTE4(aBlock[0]) = 1;
    v7 = v1[23];
    if (HIDWORD(v7))
      goto LABEL_13;
    v8 = specialized getter of twoHandFrameCount #1 in PipelineStatisticsData.getFrameCountBy(_:)(aBlock, v1);
    if (v7 < v8)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)(inited + 36) = v7 - v8;
      LODWORD(aBlock[0]) = 0;
      BYTE4(aBlock[0]) = 1;
      v9 = v1[34];
      if (HIDWORD(v9))
      {
LABEL_13:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      v10 = specialized getter of twoHandFrameCount #1 in PipelineStatisticsData.getFrameCountBy(_:)(aBlock, v1);
      if (v9 >= v10)
      {
        *(_DWORD *)(inited + 40) = v9 - v10;
        LODWORD(aBlock[0]) = 0;
        BYTE4(aBlock[0]) = 1;
        *(_DWORD *)(inited + 44) = specialized getter of twoHandFrameCount #1 in PipelineStatisticsData.getFrameCountBy(_:)(aBlock, v1);
        outlined retain of PipelineStatisticsData((uint64_t)v1);
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays6UInt32VG_Sis5NeverOTg5074_s5Hands22PipelineStatisticsDataV32sendFramePctByHandExistenceEventyyFSis6D6VXEfU_5Hands0hiJ0VTf1cn_nTf4ng_n(inited, (uint64_t)v1);
        outlined release of PipelineStatisticsData((uint64_t)v1);
        swift_setDeallocating();
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v12 = (void *)MEMORY[0x2426372E8](0xD00000000000002ALL, 0x800000023D9C83A0);
        v13 = (_QWORD *)swift_allocObject();
        memcpy(v13 + 2, v1, 0x180uLL);
        v13[50] = isa;
        v13[51] = 0xD00000000000002ALL;
        v13[52] = 0x800000023D9C83A0;
        aBlock[4] = partial apply for closure #2 in PipelineStatisticsData.sendFramePctByHandExistenceEvent();
        aBlock[5] = v13;
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
        aBlock[3] = &block_descriptor_3;
        v14 = _Block_copy(aBlock);
        outlined retain of PipelineStatisticsData((uint64_t)v1);
        v15 = isa;
        swift_release();
        AnalyticsSendExplodingEventLazy();
        _Block_release(v14);

        return;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
}

void closure #1 in PipelineStatisticsData.sendPipelineHealthEvent()(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t inited;
  unsigned int v11;
  double v12;
  double v13;
  double v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A8140;
  *(_QWORD *)(inited + 32) = 0x6776615F737066;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v11 = *(_DWORD *)(a1 + 16);
  if (!v11)
    goto LABEL_6;
  v12 = (double)v11 / (CACurrentMediaTime() - *(double *)(a1 + 360));
  if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) != 0)
  {
    if (v12 <= -9.22337204e18)
    {
      __break(1u);
      goto LABEL_15;
    }
    if (v12 >= 9.22337204e18)
      __break(1u);
LABEL_6:
    *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 56) = 0x5F79636E6574616CLL;
    *(_QWORD *)(inited + 64) = 0xEB00000000677661;
    v13 = a4 * 1000.0;
    if ((~COERCE__INT64(a4 * 1000.0) & 0x7FF0000000000000) != 0)
    {
      if (v13 > -9.22337204e18)
      {
        if (v13 < 9.22337204e18)
        {
          *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
          *(_QWORD *)(inited + 80) = 0x5F79636E6574616CLL;
          *(_QWORD *)(inited + 88) = 0xEB0000000078616DLL;
          v14 = a5 * 1000.0;
          if ((~COERCE__INT64(a5 * 1000.0) & 0x7FF0000000000000) != 0)
          {
            if (v14 > -9.22337204e18)
            {
              if (v14 < 9.22337204e18)
              {
                *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
                *(_QWORD *)(inited + 104) = 0xD000000000000010;
                *(_QWORD *)(inited + 112) = 0x800000023D9C84B0;
                if ((*(_QWORD *)(a1 + 112) & 0x8000000000000000) == 0)
                {
                  *(NSNumber *)(inited + 120) = Int._bridgeToObjectiveC()();
                  *(_QWORD *)(inited + 128) = 0xD000000000000010;
                  *(_QWORD *)(inited + 136) = 0x800000023D9C84D0;
                  *(NSNumber *)(inited + 144) = Float._bridgeToObjectiveC()();
                  specialized Dictionary.init(dictionaryLiteral:)(inited);
                  v21[0] = a2;
                  v21[1] = a3;
                  swift_bridgeObjectRetain();
                  v15._countAndFlagsBits = 8250;
                  v15._object = (void *)0xE200000000000000;
                  String.append(_:)(v15);
                  type metadata accessor for NSObject();
                  v16 = MEMORY[0x24BEE0D00];
                  v17._countAndFlagsBits = Dictionary.description.getter();
                  String.append(_:)(v17);
                  swift_bridgeObjectRelease();
                  v21[3] = v16;
                  type metadata accessor for HandyLoggerNeo();
                  v18 = xmmword_23D9A8B80;
                  v19 = 0;
                  v20 = 0;
                  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 0, (uint64_t *)&v18, 0xD000000000000059, 0x800000023D9C8280, 126, (uint64_t)v21, MEMORY[0x24BEE4AF8]);
                  __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
                  return;
                }
                goto LABEL_21;
              }
LABEL_20:
              __break(1u);
LABEL_21:
              __break(1u);
              goto LABEL_22;
            }
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_22:
  __break(1u);
}

NSNumber closure #1 in PipelineStatisticsData.sendPipelineLatencyEvent()(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  NSNumber result;
  double v11;
  double v12;
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A74A0;
  *(_QWORD *)(inited + 32) = 0x6D756E5F646E6168;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  result.super.super.isa = UInt32._bridgeToObjectiveC()().super.super.isa;
  *(NSNumber *)(inited + 48) = result;
  *(_QWORD *)(inited + 56) = 0xD000000000000014;
  *(_QWORD *)(inited + 64) = 0x800000023D9C8440;
  v11 = a1 * 1000.0;
  if ((~COERCE__INT64(a1 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  *(NSNumber *)(inited + 72) = result;
  *(_QWORD *)(inited + 80) = 0xD000000000000014;
  *(_QWORD *)(inited + 88) = 0x800000023D9C8460;
  v12 = a2 * 1000.0;
  if ((~COERCE__INT64(a2 * 1000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v12 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v12 < 9.22337204e18)
  {
    *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
    v13 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v20[0] = a4;
    v20[1] = a5;
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = 8250;
    v14._object = (void *)0xE200000000000000;
    String.append(_:)(v14);
    type metadata accessor for NSObject();
    v15 = MEMORY[0x24BEE0D00];
    v16._countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v20[3] = v15;
    type metadata accessor for HandyLoggerNeo();
    v17 = xmmword_23D9A8B80;
    v18 = 0;
    v19 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 0, (uint64_t *)&v17, 0xD000000000000059, 0x800000023D9C8280, 145, (uint64_t)v20, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
    return (NSNumber)v13;
  }
LABEL_13:
  __break(1u);
  return result;
}

id closure #2 in PipelineStatisticsData.sendFramePctByHandExistenceEvent()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t inited;
  id result;
  id v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
  *(_QWORD *)(inited + 32) = 0xD000000000000012;
  *(_QWORD *)(inited + 40) = 0x800000023D9C83D0;
  result = objc_msgSend(*(id *)(a1 + 368), sel_InputImageStreams);
  if (result)
  {
    *(_QWORD *)(inited + 48) = result;
    *(_QWORD *)(inited + 56) = 0xD000000000000017;
    *(_QWORD *)(inited + 64) = 0x800000023D9C83F0;
    *(_QWORD *)(inited + 72) = a2;
    v10 = a2;
    v11 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v18[0] = a3;
    v18[1] = a4;
    swift_bridgeObjectRetain();
    v12._countAndFlagsBits = 8250;
    v12._object = (void *)0xE200000000000000;
    String.append(_:)(v12);
    type metadata accessor for NSObject();
    v13 = MEMORY[0x24BEE0D00];
    v14._countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v18[3] = v13;
    type metadata accessor for HandyLoggerNeo();
    v15 = xmmword_23D9A8B80;
    v16 = 0;
    v17 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 0, (uint64_t *)&v15, 0xD000000000000059, 0x800000023D9C8280, 172, (uint64_t)v18, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
    return (id)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t PipelineStatisticsData.aggregate(with:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[5];
  uint64_t v28;
  _OWORD v29[5];
  uint64_t v30;
  _OWORD v31[6];
  char v32;

  v2 = v1;
  v4 = *v1;
  v5 = swift_bridgeObjectRetain();
  *v2 = specialized Dictionary.merging(_:uniquingKeysWith:)(v5, v4);
  v6 = *(_OWORD *)(a1 + 56);
  v7 = *(_OWORD *)(a1 + 88);
  v31[4] = *(_OWORD *)(a1 + 72);
  v31[5] = v7;
  v32 = *(_BYTE *)(a1 + 104);
  v8 = *(_OWORD *)(a1 + 24);
  v31[0] = *(_OWORD *)(a1 + 8);
  v31[1] = v8;
  v31[2] = *(_OWORD *)(a1 + 40);
  v31[3] = v6;
  result = specialized ValueStatistics.aggregate(with:)((uint64_t)v31);
  v10 = v2[14];
  v11 = *(_QWORD *)(a1 + 112);
  v12 = __CFADD__(v10, v11);
  v13 = v10 + v11;
  if (v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  v2[14] = v13;
  v14 = v2[15];
  v15 = *(_QWORD *)(a1 + 120);
  v12 = __CFADD__(v14, v15);
  v16 = v14 + v15;
  if (v12)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v2[15] = v16;
  v17 = *((double *)v2 + 16);
  if (v17 <= *(double *)(a1 + 128))
    v17 = *(double *)(a1 + 128);
  *((double *)v2 + 16) = v17;
  v18 = v2[17];
  v19 = swift_bridgeObjectRetain();
  v2[17] = specialized Dictionary.merging(_:uniquingKeysWith:)(v19, v18);
  v20 = v2[18];
  v21 = swift_bridgeObjectRetain();
  v2[18] = specialized Dictionary.merging(_:uniquingKeysWith:)(v21, v20);
  v22 = *((double *)v2 + 45);
  if (*(double *)(a1 + 360) < v22)
    v22 = *(double *)(a1 + 360);
  *((double *)v2 + 45) = v22;
  v23 = *(_OWORD *)(a1 + 200);
  v29[2] = *(_OWORD *)(a1 + 184);
  v29[3] = v23;
  v29[4] = *(_OWORD *)(a1 + 216);
  v30 = *(_QWORD *)(a1 + 232);
  v24 = *(_OWORD *)(a1 + 168);
  v29[0] = *(_OWORD *)(a1 + 152);
  v29[1] = v24;
  HandStatisticsData.aggregate(with:)((unint64_t)v29);
  v25 = *(_OWORD *)(a1 + 288);
  v27[2] = *(_OWORD *)(a1 + 272);
  v27[3] = v25;
  v27[4] = *(_OWORD *)(a1 + 304);
  v28 = *(_QWORD *)(a1 + 320);
  v26 = *(_OWORD *)(a1 + 256);
  v27[0] = *(_OWORD *)(a1 + 240);
  v27[1] = v26;
  return HandStatisticsData.aggregate(with:)((unint64_t)v27);
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

Swift::Void __swiftcall PipelineStatisticsData.printStatistics()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_0;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11[4];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v21 = xmmword_23D9AB690;
  v22 = 0uLL;
  v1 = MEMORY[0x24BEE0D00];
  *((_QWORD *)&v16 + 1) = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v15 = 0xD000000000000036;
  *((_QWORD *)&v15 + 1) = 0x800000023D9C82E0;
  v2 = MEMORY[0x24BEE4AF8];
  specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000059, 0x800000023D9C8280, 196, 0, (uint64_t *)&v21, (uint64_t)&v15, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v15);
  v21 = xmmword_23D9AB690;
  v22 = 0uLL;
  *((_QWORD *)&v16 + 1) = type metadata accessor for PipelineStatisticsLogging(0);
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v15);
  PipelineStatisticsData.toProtoBuf()((double *)boxed_opaque_existential_0);
  specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000059, 0x800000023D9C8280, 197, 0, (uint64_t *)&v21, (uint64_t)&v15, v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v15);
  v21 = xmmword_23D9AB690;
  v22 = 0uLL;
  *((_QWORD *)&v16 + 1) = v1;
  *(_QWORD *)&v15 = 0xD000000000000037;
  *((_QWORD *)&v15 + 1) = 0x800000023D9C8320;
  specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000059, 0x800000023D9C8280, 198, 0, (uint64_t *)&v21, (uint64_t)&v15, v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v15);
  v15 = xmmword_23D9AB690;
  v16 = 0uLL;
  v4 = *(_OWORD *)(v0 + 200);
  v23 = *(_OWORD *)(v0 + 184);
  v24 = v4;
  v25 = *(_OWORD *)(v0 + 216);
  v26 = *(_QWORD *)(v0 + 232);
  v5 = *(_OWORD *)(v0 + 168);
  v21 = *(_OWORD *)(v0 + 152);
  v22 = v5;
  v6 = type metadata accessor for HandStatisticsLogging(0);
  v14 = v6;
  v7 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v12);
  HandStatisticsData.toProtoBuf()(v7);
  specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000059, 0x800000023D9C8280, 199, 0, (uint64_t *)&v15, (uint64_t)&v12, v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v12);
  v15 = xmmword_23D9AB690;
  v16 = 0uLL;
  v14 = v1;
  *(_QWORD *)&v12 = 0xD000000000000038;
  *((_QWORD *)&v12 + 1) = 0x800000023D9C8360;
  specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000059, 0x800000023D9C8280, 200, 0, (uint64_t *)&v15, (uint64_t)&v12, v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v12);
  v12 = xmmword_23D9AB690;
  v13 = 0;
  v14 = 0;
  v8 = *(_OWORD *)(v0 + 288);
  v17 = *(_OWORD *)(v0 + 272);
  v18 = v8;
  v19 = *(_OWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 320);
  v9 = *(_OWORD *)(v0 + 256);
  v15 = *(_OWORD *)(v0 + 240);
  v16 = v9;
  v11[3] = v6;
  v10 = __swift_allocate_boxed_opaque_existential_0(v11);
  HandStatisticsData.toProtoBuf()(v10);
  specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD000000000000059, 0x800000023D9C8280, 201, 0, (uint64_t *)&v12, (uint64_t)v11, v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
}

uint64_t PipelineStatisticsData.toProtoBuf()@<X0>(double *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t i;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t j;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  double *v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[4];
  char v70;
  _BYTE v71[16];
  uint64_t v72;
  char v73;

  v65 = type metadata accessor for CountByCameraSource(0);
  v3 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65, v4);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v61 - v9;
  a1[1] = 0.0;
  v11 = a1 + 1;
  a1[2] = 0.0;
  v12 = MEMORY[0x24BEE4AF8];
  *((_QWORD *)a1 + 7) = MEMORY[0x24BEE4AF8];
  *((_QWORD *)a1 + 8) = v12;
  type metadata accessor for PipelineStatisticsLogging(0);
  UnknownStorage.init()();
  v13 = *(_QWORD *)(v1 + 128);
  v66 = a1;
  *((_QWORD *)a1 + 5) = v13;
  v14 = *(_OWORD *)(v1 + 8);
  v15 = *(_OWORD *)(v1 + 56);
  v16 = *(_OWORD *)(v1 + 88);
  v69[2] = *(_OWORD *)(v1 + 72);
  v69[3] = v16;
  v70 = *(_BYTE *)(v1 + 104);
  v17 = *(_OWORD *)(v1 + 24);
  v67 = v14;
  v68 = v17;
  v69[0] = *(_OWORD *)(v1 + 40);
  v69[1] = v15;
  v18 = DWORD2(v14);
  if (DWORD2(v14))
    v19 = (double)DWORD2(v14) / (CACurrentMediaTime() - *(double *)(v1 + 360));
  else
    v19 = 0.0;
  *v66 = v19;
  outlined init with take of Double?((uint64_t)v69, (uint64_t)v71);
  outlined init with take of Double?((uint64_t)v71, (uint64_t)&v72);
  if ((v73 & 1) == 0)
    *((_QWORD *)v66 + 2) = v72;
  if ((_DWORD)v18)
    *v11 = *(double *)&v67 / (double)v18;
  v20 = *(_QWORD *)(v1 + 112);
  v21 = *(_QWORD *)(v1 + 120);
  v22 = v66;
  v61 = v18;
  *((_QWORD *)v66 + 3) = v18;
  *((_QWORD *)v22 + 4) = v20;
  *((_QWORD *)v22 + 6) = v21;
  v62 = v1;
  v23 = *(_QWORD *)(v1 + 136);
  v24 = *(_QWORD *)(v23 + 64);
  v63 = v23 + 64;
  v25 = 1 << *(_BYTE *)(v23 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & v24;
  v64 = (unint64_t)(v25 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v29 = 0;
  v30 = MEMORY[0x24BEE4AF8];
  if (!v27)
    goto LABEL_12;
LABEL_11:
  v31 = __clz(__rbit64(v27));
  v27 &= v27 - 1;
  for (i = v31 | (v29 << 6); ; i = __clz(__rbit64(v34)) + (v29 << 6))
  {
    v36 = *(_QWORD *)(v23 + 48) + 16 * i;
    v37 = *(_QWORD *)v36;
    v38 = *(_BYTE *)(v36 + 8);
    v39 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * i);
    UnknownStorage.init()();
    *(_QWORD *)v10 = v37;
    v10[8] = v38;
    *((_QWORD *)v10 + 2) = v39;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
    v41 = *(_QWORD *)(v30 + 16);
    v40 = *(_QWORD *)(v30 + 24);
    if (v41 >= v40 >> 1)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1, v30);
    *(_QWORD *)(v30 + 16) = v41 + 1;
    result = outlined init with take of Matrix2dPB((uint64_t)v10, v30+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v41, type metadata accessor for CountByCameraSource);
    *((_QWORD *)v66 + 7) = v30;
    if (v27)
      goto LABEL_11;
LABEL_12:
    v33 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v33 >= v64)
      goto LABEL_32;
    v34 = *(_QWORD *)(v63 + 8 * v33);
    ++v29;
    if (!v34)
    {
      v29 = v33 + 1;
      if (v33 + 1 >= v64)
        goto LABEL_32;
      v34 = *(_QWORD *)(v63 + 8 * v29);
      if (!v34)
      {
        v29 = v33 + 2;
        if (v33 + 2 >= v64)
          goto LABEL_32;
        v34 = *(_QWORD *)(v63 + 8 * v29);
        if (!v34)
          break;
      }
    }
LABEL_25:
    v27 = (v34 - 1) & v34;
  }
  v35 = v33 + 3;
  if (v35 >= v64)
  {
LABEL_32:
    swift_release();
    v42 = *(_QWORD *)(v62 + 144);
    v43 = *(_QWORD *)(v42 + 64);
    v63 = v42 + 64;
    v44 = 1 << *(_BYTE *)(v42 + 32);
    v45 = -1;
    if (v44 < 64)
      v45 = ~(-1 << v44);
    v46 = v45 & v43;
    v64 = (unint64_t)(v44 + 63) >> 6;
    result = swift_bridgeObjectRetain();
    v47 = 0;
    v48 = MEMORY[0x24BEE4AF8];
    if (!v46)
      goto LABEL_36;
LABEL_35:
    v49 = __clz(__rbit64(v46));
    v46 &= v46 - 1;
    for (j = v49 | (v47 << 6); ; j = __clz(__rbit64(v52)) + (v47 << 6))
    {
      v54 = *(_QWORD *)(v42 + 48) + 16 * j;
      v55 = *(_QWORD *)v54;
      v56 = *(_BYTE *)(v54 + 8);
      v57 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 8 * j);
      UnknownStorage.init()();
      *(_QWORD *)v6 = v55;
      v6[8] = v56;
      *((_QWORD *)v6 + 2) = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v48 + 16) + 1, 1, v48);
      v59 = *(_QWORD *)(v48 + 16);
      v58 = *(_QWORD *)(v48 + 24);
      if (v59 >= v58 >> 1)
        v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1, v48);
      *(_QWORD *)(v48 + 16) = v59 + 1;
      result = outlined init with take of Matrix2dPB((uint64_t)v6, v48+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v59, type metadata accessor for CountByCameraSource);
      *((_QWORD *)v66 + 8) = v48;
      if (v46)
        goto LABEL_35;
LABEL_36:
      v51 = v47 + 1;
      if (__OFADD__(v47, 1))
        goto LABEL_61;
      if (v51 >= v64)
      {
LABEL_56:
        result = swift_release();
        if ((_DWORD)v61)
          v60 = *(double *)(v62 + 376) / (double)v61;
        else
          v60 = 0.0;
        v66[9] = v60;
        return result;
      }
      v52 = *(_QWORD *)(v63 + 8 * v51);
      ++v47;
      if (!v52)
      {
        v47 = v51 + 1;
        if (v51 + 1 >= v64)
          goto LABEL_56;
        v52 = *(_QWORD *)(v63 + 8 * v47);
        if (!v52)
        {
          v47 = v51 + 2;
          if (v51 + 2 >= v64)
            goto LABEL_56;
          v52 = *(_QWORD *)(v63 + 8 * v47);
          if (!v52)
          {
            v53 = v51 + 3;
            if (v53 >= v64)
              goto LABEL_56;
            v52 = *(_QWORD *)(v63 + 8 * v53);
            if (!v52)
            {
              while (1)
              {
                v47 = v53 + 1;
                if (__OFADD__(v53, 1))
                  goto LABEL_63;
                if (v47 >= v64)
                  goto LABEL_56;
                v52 = *(_QWORD *)(v63 + 8 * v47);
                ++v53;
                if (v52)
                  goto LABEL_49;
              }
            }
            v47 = v53;
          }
        }
      }
LABEL_49:
      v46 = (v52 - 1) & v52;
    }
  }
  v34 = *(_QWORD *)(v63 + 8 * v35);
  if (v34)
  {
    v29 = v35;
    goto LABEL_25;
  }
  while (1)
  {
    v29 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v29 >= v64)
      goto LABEL_32;
    v34 = *(_QWORD *)(v63 + 8 * v29);
    ++v35;
    if (v34)
      goto LABEL_25;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

uint64_t PipelineStatisticsData.updateWithFrame(_:expectedFrameTimeDelta:expectedCameraTSDelta:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  char isUniquelyReferenced_nonNull_native;
  double v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  double v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int16 *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char v86;
  char v87;
  double v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  _BOOL8 v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int16 *v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int16 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t result;
  uint64_t *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  __int16 *v169;
  __int16 *v170;
  double v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  int64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  __int16 v202;
  char v203;
  uint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  __int16 v212;
  char v213;
  uint64_t v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int16 v227;
  char v228;
  __int16 v229;
  char v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;

  v4 = v3;
  v170 = (__int16 *)(a1 + 396);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v146 = (uint64_t)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_OWORD *)(a1 + 120);
  v247 = *(_OWORD *)(a1 + 104);
  v248 = v11;
  v12 = *(_OWORD *)(a1 + 152);
  v249 = *(_OWORD *)(a1 + 136);
  v250 = v12;
  v13 = *(_OWORD *)(a1 + 56);
  v243 = *(_OWORD *)(a1 + 40);
  v244 = v13;
  v14 = *(_OWORD *)(a1 + 88);
  v245 = *(_OWORD *)(a1 + 72);
  v246 = v14;
  v15 = *(_OWORD *)(a1 + 24);
  v241 = *(_OWORD *)(a1 + 8);
  v242 = v15;
  v16 = *(_OWORD *)(a1 + 288);
  v17 = *(_OWORD *)(a1 + 256);
  v237 = *(_OWORD *)(a1 + 272);
  v238 = v16;
  v18 = *(_OWORD *)(a1 + 288);
  v19 = *(_OWORD *)(a1 + 320);
  v239 = *(_OWORD *)(a1 + 304);
  v240 = v19;
  v20 = *(_OWORD *)(a1 + 224);
  v21 = *(_OWORD *)(a1 + 192);
  v233 = *(_OWORD *)(a1 + 208);
  v234 = v20;
  v22 = *(_OWORD *)(a1 + 224);
  v23 = *(_OWORD *)(a1 + 256);
  v235 = *(_OWORD *)(a1 + 240);
  v236 = v23;
  v24 = *(_OWORD *)(a1 + 192);
  v231 = *(_OWORD *)(a1 + 176);
  v232 = v24;
  v25 = *(_OWORD *)(a1 + 536);
  v26 = *(_OWORD *)(a1 + 504);
  v225 = *(_OWORD *)(a1 + 520);
  v226 = v25;
  v27 = *(_OWORD *)(a1 + 504);
  v28 = *(_OWORD *)(a1 + 472);
  v223 = *(_OWORD *)(a1 + 488);
  v224 = v27;
  v29 = *(_OWORD *)(a1 + 472);
  v221 = *(_OWORD *)(a1 + 456);
  v222 = v29;
  v178 = *(_OWORD *)(a1 + 104);
  v179 = *(_OWORD *)(a1 + 120);
  v180 = *(_OWORD *)(a1 + 136);
  v181 = *(_OWORD *)(a1 + 152);
  v174 = *(_OWORD *)(a1 + 40);
  v175 = *(_OWORD *)(a1 + 56);
  v176 = *(_OWORD *)(a1 + 72);
  v177 = *(_OWORD *)(a1 + 88);
  v172 = *(_OWORD *)(a1 + 8);
  v173 = *(_OWORD *)(a1 + 24);
  v189 = v237;
  v190 = v18;
  v30 = *(_OWORD *)(a1 + 320);
  v191 = v239;
  v192 = v30;
  v185 = v233;
  v186 = v22;
  v187 = v235;
  v188 = v17;
  v183 = v231;
  v184 = v21;
  v31 = *(_OWORD *)(a1 + 536);
  v219 = v225;
  v220 = v31;
  v217 = v223;
  v218 = v26;
  v32 = *(double *)a1;
  v33 = *(_QWORD *)(a1 + 168);
  v35 = *(_QWORD *)(a1 + 336);
  v34 = *(_QWORD *)(a1 + 344);
  v36 = *(unsigned int *)(a1 + 352);
  v37 = *(unsigned int *)(a1 + 356);
  v39 = *(_QWORD *)(a1 + 360);
  v38 = *(_QWORD *)(a1 + 368);
  v41 = *(_QWORD *)(a1 + 376);
  v40 = *(_QWORD *)(a1 + 384);
  v42 = *(unsigned __int8 *)(a1 + 392);
  v229 = *(_WORD *)(a1 + 393);
  v230 = *(_BYTE *)(a1 + 395);
  v43 = *(_QWORD *)v170;
  v44 = *(_DWORD *)(a1 + 404);
  v45 = *(_DWORD *)(a1 + 408);
  v47 = *((_QWORD *)v170 + 2);
  v46 = *((_QWORD *)v170 + 3);
  v49 = *((_QWORD *)v170 + 4);
  v48 = *((_QWORD *)v170 + 5);
  v50 = *(unsigned __int8 *)(a1 + 444);
  v228 = *(_BYTE *)(a1 + 447);
  v227 = *(_WORD *)(a1 + 445);
  v51 = *(_QWORD *)(a1 + 448);
  v167 = v32;
  v168 = v40;
  v171 = v32;
  v182 = v33;
  v153 = v35;
  v154 = v36;
  v193 = v35;
  v147 = v34;
  v148 = v39;
  v194 = v34;
  v52 = v33;
  v195 = v36;
  v155 = v37;
  v156 = v38;
  v196 = v37;
  v197 = v39;
  v198 = v38;
  v157 = v41;
  v199 = v41;
  v200 = v40;
  v158 = v42;
  v159 = v44;
  v201 = v42;
  v202 = *(_WORD *)(a1 + 393);
  v203 = *(_BYTE *)(a1 + 395);
  v149 = v43;
  v204 = v43;
  v205 = v44;
  v160 = v45;
  v206 = v45;
  v161 = v47;
  v162 = v46;
  v207 = v47;
  v208 = v46;
  v163 = v49;
  v164 = v48;
  v209 = v49;
  v210 = v48;
  v144 = &v204;
  v145 = v50;
  v211 = v50;
  v212 = *(_WORD *)(a1 + 445);
  v213 = *(_BYTE *)(a1 + 447);
  v165 = v51;
  v214 = v51;
  v215 = v221;
  v216 = v28;
  PipelineStatisticsData.updateCameraTimestampDelta(_:expectedCameraTSDelta:)((uint64_t)&v171, a3);
  v53 = *(_QWORD *)(v33 + 16);
  v166 = v33;
  if (v53)
  {
    swift_bridgeObjectRetain_n();
    v54 = (_QWORD *)(v33 + 80);
    while (1)
    {
      v55 = *(v54 - 4);
      v56 = *((_BYTE *)v54 - 24);
      v170 = (__int16 *)*v54;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v171 = *(double *)(v4 + 136);
      v58 = v171;
      *(_QWORD *)(v4 + 136) = 0x8000000000000000;
      v60 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v56);
      v61 = *(_QWORD *)(*(_QWORD *)&v58 + 16);
      v62 = (v59 & 1) == 0;
      v63 = v61 + v62;
      if (__OFADD__(v61, v62))
        break;
      v64 = v59;
      if (*(_QWORD *)(*(_QWORD *)&v58 + 24) >= v63)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v58 = v171;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v63, isUniquelyReferenced_nonNull_native);
        v58 = v171;
        v65 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v56);
        if ((v64 & 1) != (v66 & 1))
          goto LABEL_41;
        v60 = v65;
      }
      *(double *)(v4 + 136) = v58;
      swift_bridgeObjectRelease();
      v67 = *(_QWORD **)(v4 + 136);
      if ((v64 & 1) == 0)
      {
        v67[(v60 >> 6) + 8] |= 1 << v60;
        v68 = v67[6] + 16 * v60;
        *(_QWORD *)v68 = v55;
        *(_BYTE *)(v68 + 8) = v56;
        *(_QWORD *)(v67[7] + 8 * v60) = 0;
        v69 = v67[2];
        v70 = __OFADD__(v69, 1);
        v71 = v69 + 1;
        if (v70)
          goto LABEL_40;
        v67[2] = v71;
      }
      v72 = v67[7];
      v73 = *(_QWORD *)(v72 + 8 * v60);
      v74 = __CFADD__(v73, 1);
      v75 = v73 + 1;
      if (v74)
        goto LABEL_39;
      *(_QWORD *)(v72 + 8 * v60) = v75;
      swift_bridgeObjectRelease();
      v54 += 16;
      if (!--v53)
      {
        v52 = v166;
        swift_bridgeObjectRelease_n();
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_15:
    v76 = v167;
    v77 = *(_QWORD *)(*(_QWORD *)&v167 + 16);
    if (!v77)
    {
LABEL_34:
      v171 = v76;
      v178 = v247;
      v179 = v248;
      v180 = v249;
      v181 = v250;
      v174 = v243;
      v175 = v244;
      v176 = v245;
      v177 = v246;
      v172 = v241;
      v173 = v242;
      v182 = v52;
      v189 = v237;
      v190 = v238;
      v191 = v239;
      v192 = v240;
      v185 = v233;
      v186 = v234;
      v187 = v235;
      v188 = v236;
      v183 = v231;
      v184 = v232;
      v193 = v153;
      v194 = v147;
      v195 = v154;
      v196 = v155;
      v197 = v148;
      v198 = v156;
      v199 = v157;
      v200 = v168;
      v104 = v159;
      v201 = v158;
      v202 = v229;
      v170 = &v202;
      v203 = v230;
      v105 = v144;
      *v144 = v149;
      v205 = v104;
      v206 = v160;
      v106 = v162;
      v105[2] = v161;
      v105[3] = v106;
      v107 = v164;
      v105[4] = v163;
      v105[5] = v107;
      v108 = v145;
      v211 = v145;
      v169 = &v212;
      v212 = v227;
      v213 = v228;
      v214 = v165;
      v217 = v223;
      v218 = v224;
      v219 = v225;
      v220 = v226;
      v215 = v221;
      v216 = v222;
      PipelineStatisticsData.updateFrameLatencyAndCounters(_:expectedFrameTimeDelta:)((uint64_t)&v171, a2);
      v171 = v76;
      v178 = v247;
      v179 = v248;
      v180 = v249;
      v181 = v250;
      v174 = v243;
      v175 = v244;
      v176 = v245;
      v177 = v246;
      v172 = v241;
      v173 = v242;
      v182 = v52;
      v189 = v237;
      v190 = v238;
      v191 = v239;
      v192 = v240;
      v185 = v233;
      v186 = v234;
      v187 = v235;
      v188 = v236;
      v183 = v231;
      v184 = v232;
      v109 = v153;
      v193 = v153;
      v194 = v147;
      v195 = v154;
      v110 = v156;
      v196 = v155;
      v197 = v148;
      v198 = v156;
      v199 = v157;
      v200 = v168;
      v201 = v158;
      v202 = v229;
      v203 = v230;
      v111 = v149;
      *v105 = v149;
      v205 = v104;
      v112 = v160;
      v206 = v160;
      v113 = v162;
      v105[2] = v161;
      v105[3] = v113;
      v114 = v164;
      v105[4] = v163;
      v105[5] = v114;
      v211 = v108;
      *v169 = v227;
      v213 = v228;
      v214 = v165;
      v217 = v223;
      v218 = v224;
      v219 = v225;
      v220 = v226;
      v215 = v221;
      v216 = v222;
      HandsKitData.getHandByChirality(isLeft:)(1, v146);
      v171 = v167;
      v178 = v247;
      v179 = v248;
      v180 = v249;
      v181 = v250;
      v174 = v243;
      v175 = v244;
      v176 = v245;
      v177 = v246;
      v172 = v241;
      v173 = v242;
      v182 = v166;
      v189 = v237;
      v190 = v238;
      v191 = v239;
      v192 = v240;
      v185 = v233;
      v186 = v234;
      v187 = v235;
      v188 = v236;
      v183 = v231;
      v184 = v232;
      v193 = v109;
      v115 = v147;
      v116 = v148;
      v194 = v147;
      v117 = v154;
      v118 = v155;
      v195 = v154;
      v196 = v155;
      v197 = v148;
      v198 = v110;
      v199 = v157;
      v200 = v168;
      v201 = v158;
      *v170 = v229;
      v203 = v230;
      *v105 = v111;
      v205 = v159;
      v206 = v112;
      v119 = v162;
      v105[2] = v161;
      v105[3] = v119;
      v120 = v164;
      v105[4] = v163;
      v105[5] = v120;
      v211 = v145;
      *v169 = v227;
      v213 = v228;
      v214 = v165;
      v217 = v223;
      v218 = v224;
      v219 = v225;
      v220 = v226;
      v152 = v117 | (v118 << 32);
      v215 = v221;
      v216 = v222;
      v121 = v146;
      v122 = v115;
      v123 = v116;
      specialized HandStatisticsData.updateWith(handMaybe:data:detectionRan:masterCameraTimestamp:)(v146, &v171, v115, v152, v116);
      outlined destroy of Coordinate3DPB?(v121, &demangling cache variable for type metadata for HandDescriptor?);
      v171 = v167;
      v178 = v247;
      v179 = v248;
      v180 = v249;
      v181 = v250;
      v174 = v243;
      v175 = v244;
      v176 = v245;
      v177 = v246;
      v172 = v241;
      v173 = v242;
      v182 = v166;
      v189 = v237;
      v190 = v238;
      v191 = v239;
      v192 = v240;
      v185 = v233;
      v186 = v234;
      v187 = v235;
      v188 = v236;
      v183 = v231;
      v184 = v232;
      v193 = v153;
      v194 = v122;
      v195 = v117;
      v196 = v118;
      v197 = v123;
      v124 = v157;
      v198 = v156;
      v199 = v157;
      v200 = v168;
      LOBYTE(v118) = v158;
      v201 = v158;
      *v170 = v229;
      v203 = v230;
      *v105 = v149;
      v205 = v159;
      v206 = v160;
      v126 = v161;
      v125 = v162;
      v105[2] = v161;
      v105[3] = v125;
      v127 = v164;
      v105[4] = v163;
      v105[5] = v127;
      v211 = v145;
      v128 = v169;
      *v169 = v227;
      v213 = v228;
      v214 = v165;
      v217 = v223;
      v218 = v224;
      v219 = v225;
      v220 = v226;
      v215 = v221;
      v216 = v222;
      HandsKitData.getHandByChirality(isLeft:)(0, v146);
      v171 = v167;
      v178 = v247;
      v179 = v248;
      v180 = v249;
      v181 = v250;
      v174 = v243;
      v175 = v244;
      v176 = v245;
      v177 = v246;
      v172 = v241;
      v173 = v242;
      v182 = v166;
      v189 = v237;
      v190 = v238;
      v191 = v239;
      v192 = v240;
      v185 = v233;
      v186 = v234;
      v187 = v235;
      v188 = v236;
      v183 = v231;
      v184 = v232;
      v193 = v153;
      v129 = v147;
      v130 = v148;
      v194 = v147;
      v195 = v154;
      v196 = v155;
      v197 = v148;
      v198 = v156;
      v199 = v124;
      v200 = v168;
      v201 = v118;
      *v170 = v229;
      v203 = v230;
      *v105 = v149;
      v205 = v159;
      v206 = v160;
      v105[2] = v126;
      v132 = v162;
      v131 = v163;
      v105[3] = v162;
      v105[4] = v131;
      v105[5] = v127;
      LOBYTE(v127) = v145;
      v211 = v145;
      *v128 = v227;
      v213 = v228;
      v214 = v165;
      v217 = v223;
      v218 = v224;
      v219 = v225;
      v220 = v226;
      v215 = v221;
      v216 = v222;
      v133 = v146;
      v134 = v129;
      v135 = v130;
      specialized HandStatisticsData.updateWith(handMaybe:data:detectionRan:masterCameraTimestamp:)(v146, &v171, v129, v152, v130);
      outlined destroy of Coordinate3DPB?(v133, &demangling cache variable for type metadata for HandDescriptor?);
      v171 = v167;
      v178 = v247;
      v179 = v248;
      v180 = v249;
      v181 = v250;
      v174 = v243;
      v175 = v244;
      v176 = v245;
      v177 = v246;
      v172 = v241;
      v173 = v242;
      v182 = v166;
      v189 = v237;
      v190 = v238;
      v191 = v239;
      v192 = v240;
      v185 = v233;
      v186 = v234;
      v187 = v235;
      v188 = v236;
      v183 = v231;
      v184 = v232;
      v193 = v153;
      v194 = v134;
      v195 = v154;
      v196 = v155;
      v197 = v135;
      v198 = v156;
      v199 = v157;
      v200 = v168;
      v201 = v158;
      *v170 = v229;
      v203 = v230;
      v136 = v149;
      *v105 = v149;
      v205 = v159;
      v206 = v160;
      v105[2] = v161;
      v105[3] = v132;
      v138 = v163;
      v137 = v164;
      v105[4] = v163;
      v105[5] = v137;
      v211 = v127;
      v139 = v169;
      *v169 = v227;
      v213 = v228;
      v140 = v165;
      v214 = v165;
      v217 = v223;
      v218 = v224;
      v219 = v225;
      v220 = v226;
      v215 = v221;
      v216 = v222;
      PipelineStatisticsData.updatePrewittStats(_:)(&v171);
      v171 = v167;
      v178 = v247;
      v179 = v248;
      v180 = v249;
      v181 = v250;
      v174 = v243;
      v175 = v244;
      v176 = v245;
      v177 = v246;
      v172 = v241;
      v173 = v242;
      v182 = v166;
      v189 = v237;
      v190 = v238;
      v191 = v239;
      v192 = v240;
      v185 = v233;
      v186 = v234;
      v187 = v235;
      v188 = v236;
      v183 = v231;
      v184 = v232;
      v193 = v153;
      v194 = v147;
      v195 = v154;
      v196 = v155;
      v197 = v148;
      v198 = v156;
      v199 = v157;
      v200 = v168;
      v201 = v158;
      *v170 = v229;
      v203 = v230;
      *v105 = v136;
      v205 = v159;
      v206 = v160;
      v141 = v162;
      v105[2] = v161;
      v105[3] = v141;
      v142 = v164;
      v105[4] = v138;
      v105[5] = v142;
      v211 = v127;
      *v139 = v227;
      v213 = v228;
      v214 = v140;
      v217 = v223;
      v218 = v224;
      v219 = v225;
      v220 = v226;
      v215 = v221;
      v216 = v222;
      return PipelineStatisticsData.updatePipelineLatency(_:)(&v171);
    }
    v78 = *(_QWORD *)(type metadata accessor for HandDescriptor() - 8);
    v79 = *(_QWORD *)(v78 + 72);
    v80 = *(_QWORD *)&v76
        + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))
        + 200;
    swift_bridgeObjectRetain();
    v81 = 0;
    v151 = v79;
    v152 = v77;
    v150 = v80;
    while (1)
    {
      v82 = *(_QWORD *)(v80 + v79 * (_QWORD)v81);
      if (v82)
      {
        v83 = *(_QWORD *)(v82 + 16);
        if (v83)
          break;
      }
LABEL_17:
      v81 = (__int16 *)((char *)v81 + 1);
      if (v81 == (__int16 *)v77)
      {
        v76 = v167;
        swift_bridgeObjectRelease();
        v52 = v166;
        goto LABEL_34;
      }
    }
    v170 = v81;
    swift_bridgeObjectRetain_n();
    v169 = (__int16 *)v82;
    v84 = (char *)(v82 + 40);
    while (1)
    {
      v85 = *((_QWORD *)v84 - 1);
      v86 = *v84;
      v87 = swift_isUniquelyReferenced_nonNull_native();
      v171 = *(double *)(v4 + 144);
      v88 = v171;
      *(_QWORD *)(v4 + 144) = 0x8000000000000000;
      v90 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v86);
      v91 = *(_QWORD *)(*(_QWORD *)&v88 + 16);
      v92 = (v89 & 1) == 0;
      v93 = v91 + v92;
      if (__OFADD__(v91, v92))
        break;
      v94 = v89;
      if (*(_QWORD *)(*(_QWORD *)&v88 + 24) >= v93)
      {
        if ((v87 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v88 = v171;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v93, v87);
        v88 = v171;
        v95 = specialized __RawDictionaryStorage.find<A>(_:)(v85, v86);
        if ((v94 & 1) != (v96 & 1))
          goto LABEL_41;
        v90 = v95;
      }
      *(double *)(v4 + 144) = v88;
      swift_bridgeObjectRelease();
      v97 = *(_QWORD **)(v4 + 144);
      if ((v94 & 1) == 0)
      {
        v97[(v90 >> 6) + 8] |= 1 << v90;
        v98 = v97[6] + 16 * v90;
        *(_QWORD *)v98 = v85;
        *(_BYTE *)(v98 + 8) = v86;
        *(_QWORD *)(v97[7] + 8 * v90) = 0;
        v99 = v97[2];
        v70 = __OFADD__(v99, 1);
        v100 = v99 + 1;
        if (v70)
          goto LABEL_37;
        v97[2] = v100;
      }
      v101 = v97[7];
      v102 = *(_QWORD *)(v101 + 8 * v90);
      v74 = __CFADD__(v102, 1);
      v103 = v102 + 1;
      if (v74)
        goto LABEL_36;
      *(_QWORD *)(v101 + 8 * v90) = v103;
      v84 += 16;
      if (!--v83)
      {
        swift_bridgeObjectRelease_n();
        v79 = v151;
        v77 = v152;
        v80 = v150;
        v81 = v170;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t PipelineStatisticsData.updateCameraTimestampDelta(_:expectedCameraTSDelta:)(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  double v8;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  double v26;
  _OWORD v27[4];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v4 = *(_QWORD *)(result + 488);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    v8 = 0.0;
    if (a2 < 0.0)
      goto LABEL_14;
    v26 = *(double *)(v2 + 128);
    if (v26 <= 0.0)
      v26 = 0.0;
LABEL_18:
    *(double *)(v2 + 128) = v26;
    return result;
  }
  swift_bridgeObjectRetain();
  v6 = v5 - 1;
  v7 = 1;
  v8 = 0.0;
  for (i = 32; ; i += 192)
  {
    v10 = *(_OWORD *)(v4 + i);
    v11 = *(_OWORD *)(v4 + i + 16);
    v12 = *(_OWORD *)(v4 + i + 48);
    v27[2] = *(_OWORD *)(v4 + i + 32);
    v27[3] = v12;
    v27[0] = v10;
    v27[1] = v11;
    v13 = *(_OWORD *)(v4 + i + 64);
    v14 = *(_OWORD *)(v4 + i + 80);
    v15 = *(_OWORD *)(v4 + i + 112);
    v30 = *(_OWORD *)(v4 + i + 96);
    v31 = v15;
    v28 = v13;
    v29 = v14;
    v16 = *(_OWORD *)(v4 + i + 128);
    v17 = *(_OWORD *)(v4 + i + 144);
    v18 = *(_OWORD *)(v4 + i + 176);
    v34 = *(_OWORD *)(v4 + i + 160);
    v35 = v18;
    v32 = v16;
    v33 = v17;
    if ((unint64_t)(*((_QWORD *)&v28 + 1) - 2) > 3)
      goto LABEL_6;
    if ((v7 & 1) == 0)
      break;
    v7 = 0;
LABEL_6:
    if (!v6)
      goto LABEL_11;
LABEL_7:
    --v6;
  }
  outlined retain of ImageData((uint64_t)v27);
  CMTime.seconds.getter();
  v20 = v19;
  CMTime.seconds.getter();
  v22 = vabdd_f64(v20, v21);
  outlined release of ImageData((uint64_t)v27);
  v7 = 0;
  if (v8 <= v22)
    v8 = v22;
  if (v6)
    goto LABEL_7;
LABEL_11:
  result = swift_bridgeObjectRelease();
  if (v8 <= a2)
    goto LABEL_16;
LABEL_14:
  v23 = *(_QWORD *)(v2 + 120);
  v24 = __CFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v2 + 120) = v25;
LABEL_16:
    v26 = *(double *)(v2 + 128);
    if (v26 <= v8)
      v26 = v8;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

void PipelineStatisticsData.updateFrameLatencyAndCounters(_:expectedFrameTimeDelta:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for CMTimeProtobuf(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 344);
  v12 = *(unsigned int *)(a1 + 352);
  v13 = *(unsigned int *)(a1 + 356);
  v14 = *(_QWORD *)(a1 + 360);
  if (*(_BYTE *)(v3 + 352) == 1)
  {
    v15 = v12 | (v13 << 32);
LABEL_10:
    *(_QWORD *)(v3 + 328) = v11;
    *(_QWORD *)(v3 + 336) = v15;
    *(_QWORD *)(v3 + 344) = v14;
    *(_BYTE *)(v3 + 352) = 0;
    return;
  }
  v15 = v12 | (v13 << 32);
  v27 = v14;
  CMTime.seconds.getter();
  v17 = v16;
  CMTime.seconds.getter();
  v19 = v17 - v18;
  if (v19 <= a2)
  {
LABEL_9:
    specialized ValueStatistics.update(with:takeAbsolute:)(0, v19);
    v14 = v27;
    goto LABEL_10;
  }
  v20 = v19 / a2;
  if ((~COERCE__INT64(v19 / a2) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v20 <= -1.0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v20 >= 1.84467441e19)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v21 = *(_QWORD *)(v3 + 112);
  if (!__CFADD__(v21, (unint64_t)v20))
  {
    *(_QWORD *)(v3 + 112) = v21 + (unint64_t)v20;
    v29 = xmmword_23D9AB690;
    v30 = 0;
    v31 = 0;
    v22 = type metadata accessor for InputFrameDropEvent(0);
    v28[3] = v22;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v28);
    *boxed_opaque_existential_0 = 0;
    UnknownStorage.init()();
    v24 = (uint64_t)boxed_opaque_existential_0 + *(int *)(v22 + 24);
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v25(v24, 1, 1, v6);
    UnknownStorage.init()();
    *(_QWORD *)v10 = v11;
    *((_DWORD *)v10 + 2) = v12;
    outlined destroy of Coordinate3DPB?(v24, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined init with take of Matrix2dPB((uint64_t)v10, v24, type metadata accessor for CMTimeProtobuf);
    v25(v24, 0, 1, v6);
    *(double *)boxed_opaque_existential_0 = v19;
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000059, 0x800000023D9C8280, 294, (uint64_t *)&v29, (uint64_t)v28, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v28);
    goto LABEL_9;
  }
LABEL_14:
  __break(1u);
}

double PipelineStatisticsData.updatePrewittStats(_:)(void *__src)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  int64_t v8;
  char v9;
  char v10;
  double v11;
  double v12;
  double result;
  _QWORD __dst[70];

  memcpy(__dst, __src, 0x228uLL);
  v2 = __dst[25];
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(__dst);
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith19V14prewittCurrents5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(v2);
  swift_bridgeObjectRelease();
  v4 = specialized Sequence<>.max()(v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  outlined release of HandsKitData(__dst);
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(__dst);
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith22V17prewittPulseWidths5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(v2);
  swift_bridgeObjectRelease();
  v8 = specialized Sequence<>.max()(v7);
  v10 = v9;
  swift_bridgeObjectRelease();
  outlined release of HandsKitData(__dst);
  v11 = (double)v8;
  if ((v6 & 1) != 0)
    v12 = -1.0;
  else
    v12 = (double)v4;
  if ((v10 & 1) != 0)
    v11 = -1.0;
  result = *(double *)(v1 + 376) + v12 * v11;
  *(double *)(v1 + 376) = result;
  return result;
}

uint64_t PipelineStatisticsData.updatePipelineLatency(_:)(double *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  double v3;
  double v4;
  double v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  char v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  _OWORD v35[6];
  char v36;

  v2 = v1;
  v3 = *a1;
  v4 = a1[67];
  v5 = CACurrentMediaTime();
  v6 = *(_QWORD *)(*(_QWORD *)&v3 + 16);
  if (HIDWORD(v6))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v7 = v5;
    v8 = *v2;
    if (*(_QWORD *)(*v2 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
    {
      v11 = *(_QWORD *)(v8 + 56) + 104 * v9;
      v12 = *(_QWORD *)v11;
      v13 = *(_DWORD *)(v11 + 8);
      v14 = *(_QWORD *)(v11 + 16);
      v15 = *(_BYTE *)(v11 + 24);
      v16 = *(_QWORD *)(v11 + 32);
      v17 = *(_BYTE *)(v11 + 40);
      v18 = *(_QWORD *)(v11 + 48);
      v19 = *(_BYTE *)(v11 + 56);
      v20 = *(_QWORD *)(v11 + 64);
      v21 = *(_BYTE *)(v11 + 72);
      v22 = *(double *)(v11 + 80);
      v23 = *(_QWORD *)(v11 + 88);
      v24 = *(_BYTE *)(v11 + 96);
    }
    else
    {
      v15 = 1;
      v12 = 0;
      v22 = CACurrentMediaTime();
      v13 = 0;
      v14 = 0;
      v16 = 0;
      v18 = 0;
      v20 = 0;
      v23 = 0;
      v17 = 1;
      v19 = 1;
      v21 = 1;
      v24 = 1;
    }
    *(_QWORD *)&v28 = v12;
    DWORD2(v28) = v13;
    *(_QWORD *)&v29 = v14;
    BYTE8(v29) = v15;
    *(_QWORD *)&v30 = v16;
    BYTE8(v30) = v17;
    *(_QWORD *)&v31 = v18;
    BYTE8(v31) = v19;
    *(_QWORD *)&v32 = v20;
    BYTE8(v32) = v21;
    *(double *)&v33 = v22;
    *((_QWORD *)&v33 + 1) = v23;
    v34 = v24;
    specialized ValueStatistics.update(with:takeAbsolute:)(0, v7 - v4);
    v35[4] = v32;
    v35[5] = v33;
    v36 = v34;
    v35[0] = v28;
    v35[1] = v29;
    v35[2] = v30;
    v35[3] = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v27 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v35, v6, isUniquelyReferenced_nonNull_native);
    *v2 = v27;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized getter of twoHandFrameCount #1 in PipelineStatisticsData.getFrameCountBy(_:)(_BYTE *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (a1[4] != 1)
    return *(unsigned int *)a1;
  v3 = *a2;
  if (*(_QWORD *)(*a2 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(2), (v5 & 1) != 0))
    v6 = *(unsigned int *)(*(_QWORD *)(v3 + 56) + 104 * v4 + 8);
  else
    v6 = 0;
  swift_beginAccess();
  *(_DWORD *)a1 = v6;
  a1[4] = 0;
  return v6;
}

uint64_t outlined init with take of Double?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  char v18;
  uint64_t v19;
  _BOOL8 v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v46 = a1;
  v47 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v48 = v8;
  v49 = 0;
  v50 = v11 & v9;
  v51 = a2;
  v52 = a3;
  swift_bridgeObjectRetain();
  v12 = swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v42, v12);
  if ((v45 & 1) != 0)
    goto LABEL_17;
  v13 = v42;
  v14 = v43;
  v15 = v44;
  v16 = (_QWORD *)*a5;
  result = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
  v19 = v16[2];
  v20 = (v18 & 1) == 0;
  v21 = __OFADD__(v19, v20);
  v22 = v19 + v20;
  if (v21)
    goto LABEL_28;
  v23 = v18;
  if (v16[3] < v22)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
    if ((v23 & 1) == (v24 & 1))
      goto LABEL_10;
LABEL_8:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if ((a4 & 1) == 0)
  {
    v28 = result;
    specialized _NativeDictionary.copy()();
    result = v28;
    v25 = (_QWORD *)*a5;
    if ((v23 & 1) != 0)
      goto LABEL_11;
    goto LABEL_15;
  }
LABEL_10:
  v25 = (_QWORD *)*a5;
  if ((v23 & 1) != 0)
  {
LABEL_11:
    v26 = (_QWORD *)(v25[7] + 8 * result);
    v27 = *v26 + v15;
    if (!__CFADD__(*v26, v15))
      goto LABEL_16;
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_15:
  v25[(result >> 6) + 8] |= 1 << result;
  v29 = v25[6] + 16 * result;
  *(_QWORD *)v29 = v13;
  *(_BYTE *)(v29 + 8) = v14;
  *(_QWORD *)(v25[7] + 8 * result) = v15;
  v30 = v25[2];
  v26 = v25 + 2;
  v27 = v30 + 1;
  if (!__OFADD__(v30, 1))
  {
LABEL_16:
    *v26 = v27;
    specialized LazyMapSequence.Iterator.next()(&v42, result);
    if ((v45 & 1) != 0)
    {
LABEL_17:
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of [CameraSource : Float].Iterator._Variant();
      return swift_release();
    }
    v23 = 1;
    while (1)
    {
      v13 = v42;
      v14 = v43;
      v15 = v44;
      v35 = (_QWORD *)*a5;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
      v37 = v35[2];
      v38 = (v36 & 1) == 0;
      v21 = __OFADD__(v37, v38);
      v39 = v37 + v38;
      if (v21)
        goto LABEL_28;
      a4 = v36;
      if (v35[3] < v39)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, 1);
        result = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
        if ((a4 & 1) != (v40 & 1))
          goto LABEL_8;
      }
      v41 = (_QWORD *)*a5;
      if ((a4 & 1) != 0)
      {
        v32 = (_QWORD *)(v41[7] + 8 * result);
        v34 = *v32 + v15;
        if (__CFADD__(*v32, v15))
          goto LABEL_27;
      }
      else
      {
        v41[(result >> 6) + 8] |= 1 << result;
        v31 = v41[6] + 16 * result;
        *(_QWORD *)v31 = v13;
        *(_BYTE *)(v31 + 8) = v14;
        *(_QWORD *)(v41[7] + 8 * result) = v15;
        v33 = v41[2];
        v32 = v41 + 2;
        v34 = v33 + 1;
        if (__OFADD__(v33, 1))
          break;
      }
      *v32 = v34;
      specialized LazyMapSequence.Iterator.next()(&v42, result);
      if ((v45 & 1) != 0)
        goto LABEL_17;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t result;
  char v18;
  uint64_t v19;
  _BOOL8 v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v46 = a1;
  v47 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v48 = v8;
  v49 = 0;
  v50 = v11 & v9;
  v51 = a2;
  v52 = a3;
  swift_bridgeObjectRetain();
  v12 = swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v42, v12);
  if ((v45 & 1) != 0)
    goto LABEL_17;
  v13 = v42;
  v14 = v43;
  v15 = v44;
  v16 = (_QWORD *)*a5;
  result = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
  v19 = v16[2];
  v20 = (v18 & 1) == 0;
  v21 = __OFADD__(v19, v20);
  v22 = v19 + v20;
  if (v21)
    goto LABEL_28;
  v23 = v18;
  if (v16[3] < v22)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, a4 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
    if ((v23 & 1) == (v24 & 1))
      goto LABEL_10;
LABEL_8:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if ((a4 & 1) == 0)
  {
    v28 = result;
    specialized _NativeDictionary.copy()();
    result = v28;
    v25 = (_QWORD *)*a5;
    if ((v23 & 1) != 0)
      goto LABEL_11;
    goto LABEL_15;
  }
LABEL_10:
  v25 = (_QWORD *)*a5;
  if ((v23 & 1) != 0)
  {
LABEL_11:
    v26 = (_QWORD *)(v25[7] + 8 * result);
    v27 = *v26 + v15;
    if (!__CFADD__(*v26, v15))
      goto LABEL_16;
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_15:
  v25[(result >> 6) + 8] |= 1 << result;
  v29 = v25[6] + 16 * result;
  *(_QWORD *)v29 = v13;
  *(_BYTE *)(v29 + 8) = v14;
  *(_QWORD *)(v25[7] + 8 * result) = v15;
  v30 = v25[2];
  v26 = v25 + 2;
  v27 = v30 + 1;
  if (!__OFADD__(v30, 1))
  {
LABEL_16:
    *v26 = v27;
    specialized LazyMapSequence.Iterator.next()(&v42, result);
    if ((v45 & 1) != 0)
    {
LABEL_17:
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of [CameraSource : Float].Iterator._Variant();
      return swift_release();
    }
    v23 = 1;
    while (1)
    {
      v13 = v42;
      v14 = v43;
      v15 = v44;
      v35 = (_QWORD *)*a5;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
      v37 = v35[2];
      v38 = (v36 & 1) == 0;
      v21 = __OFADD__(v37, v38);
      v39 = v37 + v38;
      if (v21)
        goto LABEL_28;
      a4 = v36;
      if (v35[3] < v39)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, 1);
        result = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
        if ((a4 & 1) != (v40 & 1))
          goto LABEL_8;
      }
      v41 = (_QWORD *)*a5;
      if ((a4 & 1) != 0)
      {
        v32 = (_QWORD *)(v41[7] + 8 * result);
        v34 = *v32 + v15;
        if (__CFADD__(*v32, v15))
          goto LABEL_27;
      }
      else
      {
        v41[(result >> 6) + 8] |= 1 << result;
        v31 = v41[6] + 16 * result;
        *(_QWORD *)v31 = v13;
        *(_BYTE *)(v31 + 8) = v14;
        *(_QWORD *)(v41[7] + 8 * result) = v15;
        v33 = v41[2];
        v32 = v41 + 2;
        v34 = v33 + 1;
        if (__OFADD__(v33, 1))
          break;
      }
      *v32 = v34;
      specialized LazyMapSequence.Iterator.next()(&v42, result);
      if ((v45 & 1) != 0)
        goto LABEL_17;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[6];
  char v63;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v55 = a1;
  v56 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v57 = v8;
  v58 = 0;
  v59 = v11 & v9;
  v60 = a2;
  v61 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v46);
  if ((v54 & 1) != 0)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [CameraSource : Float].Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    v15 = v46;
    v62[4] = v51;
    v62[5] = v52;
    v63 = v53;
    v62[0] = v47;
    v62[1] = v48;
    v62[2] = v49;
    v62[3] = v50;
    v16 = (_QWORD *)*a5;
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v46);
    v19 = v16[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (v16[3] >= v21)
    {
      if ((a4 & 1) != 0)
      {
        v25 = (_QWORD *)*a5;
        if ((v17 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v25 = (_QWORD *)*a5;
        if ((v22 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a4 & 1);
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_22;
      v18 = v23;
      v25 = (_QWORD *)*a5;
      if ((v22 & 1) != 0)
      {
LABEL_7:
        v13 = v25[7] + 104 * v18;
        v33 = *(_QWORD *)v13;
        v34 = *(_DWORD *)(v13 + 8);
        v35 = *(_QWORD *)(v13 + 16);
        v36 = *(_BYTE *)(v13 + 24);
        v37 = *(_QWORD *)(v13 + 32);
        v38 = *(_BYTE *)(v13 + 40);
        v39 = *(_QWORD *)(v13 + 48);
        v40 = *(_BYTE *)(v13 + 56);
        v41 = *(_QWORD *)(v13 + 64);
        v42 = *(_BYTE *)(v13 + 72);
        v43 = *(_QWORD *)(v13 + 80);
        v44 = *(_QWORD *)(v13 + 88);
        v45 = *(_BYTE *)(v13 + 96);
        specialized ValueStatistics.aggregate(with:)((uint64_t)v62);
        v14 = v25[7] + 104 * v18;
        *(_QWORD *)v14 = v33;
        *(_DWORD *)(v14 + 8) = v34;
        *(_QWORD *)(v14 + 16) = v35;
        *(_BYTE *)(v14 + 24) = v36;
        *(_QWORD *)(v14 + 32) = v37;
        *(_BYTE *)(v14 + 40) = v38;
        *(_QWORD *)(v14 + 48) = v39;
        *(_BYTE *)(v14 + 56) = v40;
        *(_QWORD *)(v14 + 64) = v41;
        *(_BYTE *)(v14 + 72) = v42;
        *(_QWORD *)(v14 + 80) = v43;
        *(_QWORD *)(v14 + 88) = v44;
        *(_BYTE *)(v14 + 96) = v45;
        goto LABEL_8;
      }
    }
    v25[(v18 >> 6) + 8] |= 1 << v18;
    *(_DWORD *)(v25[6] + 4 * v18) = v15;
    v26 = v25[7] + 104 * v18;
    v27 = v48;
    *(_OWORD *)v26 = v47;
    *(_OWORD *)(v26 + 16) = v27;
    *(_BYTE *)(v26 + 96) = v53;
    v28 = v52;
    *(_OWORD *)(v26 + 64) = v51;
    *(_OWORD *)(v26 + 80) = v28;
    v29 = v50;
    *(_OWORD *)(v26 + 32) = v49;
    *(_OWORD *)(v26 + 48) = v29;
    v30 = v25[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_21;
    v25[2] = v32;
LABEL_8:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v46);
    a4 = 1;
    if ((v54 & 1) != 0)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BOOL8 v44;
  BOOL v45;
  uint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  uint64_t result;
  uint64_t v51;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if ((v10 & 1) != 0)
    goto LABEL_25;
  v11 = v7;
  v51 = v9;
  v12 = v8 & 1;
  v13 = (_QWORD *)*a5;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8 & 1);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      v22 = (_QWORD *)*a5;
      if ((v14 & 1) == 0)
        goto LABEL_13;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v22 = (_QWORD *)*a5;
      if ((v19 & 1) == 0)
        goto LABEL_13;
    }
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    v22 = (_QWORD *)*a5;
    if ((v19 & 1) == 0)
    {
LABEL_13:
      v22[(v15 >> 6) + 8] |= 1 << v15;
      v25 = v22[6] + 16 * v15;
      *(_QWORD *)v25 = v11;
      *(_BYTE *)(v25 + 8) = v12 != 0;
      *(_QWORD *)(v22[7] + 8 * v15) = v51;
      v26 = v22[2];
      v23 = v22 + 2;
      v24 = v26 + 1;
      if (__OFADD__(v26, 1))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      goto LABEL_14;
    }
LABEL_9:
    v23 = (_QWORD *)(v22[7] + 8 * v15);
    v24 = *v23 + v51;
    if (__CFADD__(*v23, v51))
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
LABEL_14:
    *v23 = v24;
    v27 = specialized LazyMapSequence.Iterator.next()();
    if ((v30 & 1) == 0)
    {
      v31 = v27;
      v32 = v29;
      do
      {
        v39 = v28 & 1;
        v40 = (_QWORD *)*a5;
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v28 & 1);
        v43 = v40[2];
        v44 = (v42 & 1) == 0;
        v45 = __OFADD__(v43, v44);
        v46 = v43 + v44;
        if (v45)
          goto LABEL_26;
        v47 = v42;
        if (v40[3] < v46)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, 1);
          v41 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v39);
          if ((v47 & 1) != (v48 & 1))
            goto LABEL_28;
        }
        v49 = (_QWORD *)*a5;
        if ((v47 & 1) != 0)
        {
          v34 = (_QWORD *)(v49[7] + 8 * v41);
          v36 = *v34 + v32;
          if (__CFADD__(*v34, v32))
            goto LABEL_24;
        }
        else
        {
          v49[(v41 >> 6) + 8] |= 1 << v41;
          v33 = v49[6] + 16 * v41;
          *(_QWORD *)v33 = v31;
          *(_BYTE *)(v33 + 8) = v39 != 0;
          *(_QWORD *)(v49[7] + 8 * v41) = v32;
          v35 = v49[2];
          v34 = v49 + 2;
          v36 = v35 + 1;
          if (__OFADD__(v35, 1))
            goto LABEL_27;
        }
        *v34 = v36;
        v31 = specialized LazyMapSequence.Iterator.next()();
        v32 = v37;
      }
      while ((v38 & 1) == 0);
    }
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [CameraSource : Float].Iterator._Variant();
    return swift_release();
  }
LABEL_28:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v64 = a1;
  v65 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v66 = v8;
  v67 = 0;
  v68 = v11 & v9;
  v69 = a2;
  v70 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v61);
  v12 = v63;
  if (!v63)
  {
LABEL_54:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [CameraSource : Float].Iterator._Variant();
    return swift_release();
  }
  v56 = a5;
  while (1)
  {
    v14 = v61;
    v15 = v62;
    v16 = (_QWORD *)*a5;
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v62);
    v19 = v16[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      goto LABEL_59;
    v22 = v17;
    if (v16[3] >= v21)
    {
      if ((a4 & 1) != 0)
      {
        v25 = (_QWORD *)*a5;
        if ((v17 & 1) != 0)
          break;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v25 = (_QWORD *)*a5;
        if ((v22 & 1) != 0)
          break;
      }
      goto LABEL_52;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a4 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
    if ((v22 & 1) != (v24 & 1))
      goto LABEL_63;
    v18 = v23;
    v25 = (_QWORD *)*a5;
    if ((v22 & 1) != 0)
      break;
LABEL_52:
    v25[(v18 >> 6) + 8] |= 1 << v18;
    v52 = v25[6] + 16 * v18;
    *(_QWORD *)v52 = v14;
    *(_BYTE *)(v52 + 8) = v15;
    *(_QWORD *)(v25[7] + 8 * v18) = v12;
    v53 = v25[2];
    v35 = __OFADD__(v53, 1);
    v54 = v53 + 1;
    if (v35)
      goto LABEL_61;
    v25[2] = v54;
LABEL_7:
    specialized LazyMapSequence.Iterator.next()(&v61);
    v12 = v63;
    a4 = 1;
    if (!v63)
      goto LABEL_54;
  }
  v57 = v25;
  v58 = v18;
  v26 = *(_QWORD **)(v25[7] + 8 * v18);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v71 = v26;
  v59 = v12 + 64;
  v28 = 1 << *(_BYTE *)(v12 + 32);
  if (v28 < 64)
    v29 = ~(-1 << v28);
  else
    v29 = -1;
  v30 = v29 & *(_QWORD *)(v12 + 64);
  v60 = (unint64_t)(v28 + 63) >> 6;
  swift_bridgeObjectRetain();
  v31 = 0;
  while (2)
  {
    if (v30)
    {
      v37 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      v38 = v37 | (v31 << 6);
    }
    else
    {
      v39 = v31 + 1;
      if (__OFADD__(v31, 1))
        goto LABEL_58;
      if (v39 >= v60)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v13 = v57[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v13 + 8 * v58) = v26;
        a5 = v56;
        goto LABEL_7;
      }
      v40 = *(_QWORD *)(v59 + 8 * v39);
      ++v31;
      if (!v40)
      {
        v31 = v39 + 1;
        if (v39 + 1 >= v60)
          goto LABEL_6;
        v40 = *(_QWORD *)(v59 + 8 * v31);
        if (!v40)
        {
          v31 = v39 + 2;
          if (v39 + 2 >= v60)
            goto LABEL_6;
          v40 = *(_QWORD *)(v59 + 8 * v31);
          if (!v40)
          {
            v31 = v39 + 3;
            if (v39 + 3 >= v60)
              goto LABEL_6;
            v40 = *(_QWORD *)(v59 + 8 * v31);
            if (!v40)
            {
              v41 = v39 + 4;
              if (v41 >= v60)
                goto LABEL_6;
              v40 = *(_QWORD *)(v59 + 8 * v41);
              if (!v40)
              {
                while (1)
                {
                  v31 = v41 + 1;
                  if (__OFADD__(v41, 1))
                    goto LABEL_60;
                  if (v31 >= v60)
                    goto LABEL_6;
                  v40 = *(_QWORD *)(v59 + 8 * v31);
                  ++v41;
                  if (v40)
                    goto LABEL_38;
                }
              }
              v31 = v41;
            }
          }
        }
      }
LABEL_38:
      v30 = (v40 - 1) & v40;
      v38 = __clz(__rbit64(v40)) + (v31 << 6);
    }
    v42 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 48) + 3 * v38) | (*(unsigned __int8 *)(*(_QWORD *)(v12 + 48)
                                                                                       + 3 * v38
                                                                                       + 2) << 16);
    v43 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v38);
    v45 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
    v46 = v26[2];
    v47 = (v44 & 1) == 0;
    v48 = v46 + v47;
    if (!__OFADD__(v46, v47))
    {
      v49 = v44;
      if (v26[3] >= v48)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v26 = v71;
          if ((v44 & 1) == 0)
            goto LABEL_19;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v26 = v71;
          if ((v49 & 1) == 0)
            goto LABEL_19;
        }
LABEL_46:
        v33 = (_QWORD *)(v26[7] + 8 * v45);
        v36 = *v33 + v43;
        if (__CFADD__(*v33, v43))
          goto LABEL_56;
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, isUniquelyReferenced_nonNull_native & 1);
        v50 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
        if ((v49 & 1) != (v51 & 1))
          goto LABEL_62;
        v45 = v50;
        v26 = v71;
        if ((v49 & 1) != 0)
          goto LABEL_46;
LABEL_19:
        v26[(v45 >> 6) + 8] |= 1 << v45;
        v32 = v26[6] + 3 * v45;
        *(_BYTE *)(v32 + 2) = BYTE2(v42);
        *(_WORD *)v32 = v42;
        *(_QWORD *)(v26[7] + 8 * v45) = v43;
        v33 = v26 + 2;
        v34 = v26[2];
        v35 = __OFADD__(v34, 1);
        v36 = v34 + 1;
        if (v35)
          goto LABEL_57;
      }
      *v33 = v36;
      isUniquelyReferenced_nonNull_native = 1;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_63:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt v12;
  Swift::UInt v13;
  Swift::UInt v14;
  char v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt v37;
  char v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BOOL8 v44;
  BOOL v45;
  uint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  Swift::UInt v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[40];
  _BYTE v64[24];
  int v65;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v56 = a1;
  v57 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v58 = v8;
  v59 = 0;
  v60 = v11 & v9;
  v61 = a2;
  v62 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v63);
  outlined init with take of ImageData?((uint64_t)v63, (uint64_t)&v51, &demangling cache variable for type metadata for (StatisticUtils.Location3DBucket, UInt64)?);
  outlined init with take of ImageData?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for (StatisticUtils.Location3DBucket, UInt64)?);
  if ((_BYTE)v65 == 0xFF)
    goto LABEL_18;
  v12 = v51;
  v13 = v52;
  v14 = v53;
  v15 = v54;
  v50 = v55;
  v16 = (_QWORD *)*a5;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v52, v53, v54);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
    goto LABEL_29;
  v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) != 0)
    {
      v25 = (_QWORD *)*a5;
      if ((v17 & 1) == 0)
        goto LABEL_16;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v25 = (_QWORD *)*a5;
      if ((v22 & 1) == 0)
        goto LABEL_16;
    }
LABEL_12:
    v26 = (_QWORD *)(v25[7] + 8 * v18);
    v27 = *v26 + v50;
    if (!__CFADD__(*v26, v50))
    {
LABEL_17:
      *v26 = v27;
      specialized LazyMapSequence.Iterator.next()((uint64_t)v63);
      outlined init with take of ImageData?((uint64_t)v63, (uint64_t)&v51, &demangling cache variable for type metadata for (StatisticUtils.Location3DBucket, UInt64)?);
      outlined init with take of ImageData?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for (StatisticUtils.Location3DBucket, UInt64)?);
      if ((_BYTE)v65 == 0xFF)
      {
LABEL_18:
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of [CameraSource : Float].Iterator._Variant();
        return swift_release();
      }
      while (1)
      {
        v35 = v51;
        v36 = v52;
        v37 = v53;
        v38 = v54;
        v39 = v55;
        v40 = (_QWORD *)*a5;
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v52, v53, v54);
        v43 = v40[2];
        v44 = (v42 & 1) == 0;
        v45 = __OFADD__(v43, v44);
        v46 = v43 + v44;
        if (v45)
          goto LABEL_29;
        v47 = v42;
        if (v40[3] < v46)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, 1);
          v41 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36, v37, v38);
          if ((v47 & 1) != (v48 & 1))
            goto LABEL_31;
        }
        v49 = (_QWORD *)*a5;
        if ((v47 & 1) != 0)
        {
          v32 = (_QWORD *)(v49[7] + 8 * v41);
          v34 = *v32 + v39;
          if (__CFADD__(*v32, v39))
            break;
        }
        else
        {
          v49[(v41 >> 6) + 8] |= 1 << v41;
          v31 = v49[6] + 32 * v41;
          *(_QWORD *)v31 = v35;
          *(_QWORD *)(v31 + 8) = v36;
          *(_QWORD *)(v31 + 16) = v37;
          *(_BYTE *)(v31 + 24) = v38;
          *(_QWORD *)(v49[7] + 8 * v41) = v39;
          v33 = v49[2];
          v32 = v49 + 2;
          v34 = v33 + 1;
          if (__OFADD__(v33, 1))
            goto LABEL_30;
        }
        *v32 = v34;
        specialized LazyMapSequence.Iterator.next()((uint64_t)v63);
        outlined init with take of ImageData?((uint64_t)v63, (uint64_t)&v51, &demangling cache variable for type metadata for (StatisticUtils.Location3DBucket, UInt64)?);
        outlined init with take of ImageData?((uint64_t)v63, (uint64_t)v64, &demangling cache variable for type metadata for (StatisticUtils.Location3DBucket, UInt64)?);
        if ((_BYTE)v65 == 0xFF)
          goto LABEL_18;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a4 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13, v14, v15);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
    v25 = (_QWORD *)*a5;
    if ((v22 & 1) == 0)
    {
LABEL_16:
      v25[(v18 >> 6) + 8] |= 1 << v18;
      v28 = v25[6] + 32 * v18;
      *(_QWORD *)v28 = v12;
      *(_QWORD *)(v28 + 8) = v13;
      *(_QWORD *)(v28 + 16) = v14;
      *(_BYTE *)(v28 + 24) = v15;
      *(_QWORD *)(v25[7] + 8 * v18) = v50;
      v29 = v25[2];
      v26 = v25 + 2;
      v27 = v29 + 1;
      if (__OFADD__(v29, 1))
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      goto LABEL_17;
    }
    goto LABEL_12;
  }
LABEL_31:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = a1[4];
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_BYTE *)a1 + 32);
  v7 = *((_QWORD *)a1 + 5);
  v8 = *((_BYTE *)a1 + 48);
  v9 = *((_QWORD *)a1 + 7);
  v10 = *((_BYTE *)a1 + 64);
  v11 = *((_QWORD *)a1 + 9);
  v12 = *((_BYTE *)a1 + 80);
  v13 = *((_QWORD *)a1 + 11);
  v14 = *((_QWORD *)a1 + 12);
  result = *((unsigned __int8 *)a1 + 104);
  *(_QWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_BYTE *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v11;
  *(_BYTE *)(a2 + 80) = v12;
  *(_QWORD *)(a2 + 88) = v13;
  *(_QWORD *)(a2 + 96) = v14;
  *(_BYTE *)(a2 + 104) = result;
  *(_DWORD *)a2 = v2;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays6UInt32VG_Sis5NeverOTg5074_s5Hands22PipelineStatisticsDataV32sendFramePctByHandExistenceEventyyFSis6D6VXEfU_5Hands0hiJ0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t result;
  unsigned int *v6;
  float v7;
  unsigned int v8;
  float v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v12 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    result = v12;
    v6 = (unsigned int *)(a1 + 32);
    v7 = (float)*(unsigned int *)(a2 + 16);
    while (1)
    {
      v8 = *v6++;
      v9 = (float)((float)v8 / v7) * 100.0;
      if ((~LODWORD(v9) & 0x7F800000) == 0)
        break;
      if (v9 <= -9.2234e18)
        goto LABEL_11;
      if (v9 >= 9.2234e18)
        goto LABEL_12;
      v13 = result;
      v11 = *(_QWORD *)(result + 16);
      v10 = *(_QWORD *)(result + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        result = v13;
      }
      *(_QWORD *)(result + 16) = v11 + 1;
      *(_QWORD *)(result + 8 * v11 + 32) = (uint64_t)v9;
      if (!--v3)
        return result;
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

void *specialized PipelineStatisticsData.init(fromPrev:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  CFTimeInterval v7;
  unint64_t v8;
  CFTimeInterval v9;
  __int128 v10;
  __int128 v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  _BYTE v35[88];
  _BYTE v36[88];
  _BYTE v37[8];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _BYTE v44[8];
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[5];
  uint64_t v52;
  _OWORD v53[5];
  uint64_t v54;
  _OWORD __src[25];

  v3 = *(void **)(a1 + 368);
  v4 = MEMORY[0x24BEE4AF8];
  v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v6 = v3;
  v7 = CACurrentMediaTime();
  v8 = specialized Dictionary.init(dictionaryLiteral:)(v4);
  v30 = specialized Dictionary.init(dictionaryLiteral:)(v4);
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
  v9 = CACurrentMediaTime();
  v33 = *(_OWORD *)(a1 + 328);
  v32 = *(_QWORD *)(a1 + 344);
  v31 = *(_BYTE *)(a1 + 352);
  v10 = *(_OWORD *)(a1 + 200);
  v53[2] = *(_OWORD *)(a1 + 184);
  v53[3] = v10;
  v53[4] = *(_OWORD *)(a1 + 216);
  v54 = *(_QWORD *)(a1 + 232);
  v11 = *(_OWORD *)(a1 + 168);
  v53[0] = *(_OWORD *)(a1 + 152);
  v53[1] = v11;
  v12 = v6;
  swift_bridgeObjectRetain();
  v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of HandStatisticsData((uint64_t)v53);
  specialized HandStatisticsData.init(fromPrev:)(v53, (uint64_t)v37);
  LOBYTE(v4) = v37[0];
  v27 = v39;
  v28 = v38;
  v29 = v40;
  v14 = v43;
  v25 = v42;
  v26 = v41;
  outlined retain of HandStatisticsData((uint64_t)v37);
  outlined release of HandStatisticsData((uint64_t)v35);
  v15 = *(_OWORD *)(a1 + 288);
  v51[2] = *(_OWORD *)(a1 + 272);
  v51[3] = v15;
  v51[4] = *(_OWORD *)(a1 + 304);
  v52 = *(_QWORD *)(a1 + 320);
  v16 = *(_OWORD *)(a1 + 256);
  v51[0] = *(_OWORD *)(a1 + 240);
  v51[1] = v16;
  outlined retain of HandStatisticsData((uint64_t)v51);
  specialized HandStatisticsData.init(fromPrev:)(v51, (uint64_t)v44);
  v17 = v44[0];
  v23 = v46;
  v24 = v45;
  v18 = v47;
  v19 = v50;
  v21 = v49;
  v22 = v48;
  outlined release of PipelineStatisticsData(a1);
  outlined retain of HandStatisticsData((uint64_t)v44);
  outlined release of HandStatisticsData((uint64_t)v36);
  __src[0] = v5;
  LODWORD(__src[1]) = 0;
  *((_QWORD *)&__src[1] + 1) = 0;
  LOBYTE(__src[2]) = 1;
  *((_QWORD *)&__src[2] + 1) = 0;
  LOBYTE(__src[3]) = 1;
  *((_QWORD *)&__src[3] + 1) = 0;
  LOBYTE(__src[4]) = 1;
  *((_QWORD *)&__src[4] + 1) = 0;
  LOBYTE(__src[5]) = 1;
  *((CFTimeInterval *)&__src[5] + 1) = v7;
  *(_QWORD *)&__src[6] = 0;
  BYTE8(__src[6]) = 1;
  memset(&__src[7], 0, 24);
  *((_QWORD *)&__src[8] + 1) = v13;
  *(_QWORD *)&__src[9] = v30;
  BYTE8(__src[9]) = v4;
  __src[10] = v28;
  __src[11] = v27;
  *(_OWORD *)((char *)&__src[12] + 8) = v26;
  *(_OWORD *)((char *)&__src[13] + 8) = v25;
  *(_QWORD *)&__src[12] = v29;
  *((_QWORD *)&__src[14] + 1) = v14;
  LOBYTE(__src[15]) = v17;
  *(_OWORD *)((char *)&__src[15] + 8) = v24;
  *(_OWORD *)((char *)&__src[16] + 8) = v23;
  *((_QWORD *)&__src[17] + 1) = v18;
  __src[18] = v22;
  __src[19] = v21;
  *(_OWORD *)((char *)&__src[20] + 8) = v33;
  *(_QWORD *)&__src[20] = v19;
  *((_QWORD *)&__src[21] + 1) = v32;
  LOBYTE(__src[22]) = v31;
  *((CFTimeInterval *)&__src[22] + 1) = v9;
  __src[23] = (unint64_t)v12;
  outlined retain of PipelineStatisticsData((uint64_t)__src);

  outlined release of HandStatisticsData((uint64_t)v44);
  outlined release of HandStatisticsData((uint64_t)v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of PipelineStatisticsData((uint64_t)__src);
  return memcpy(a2, __src, 0x180uLL);
}

uint64_t outlined retain of HandStatisticsData(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of HandStatisticsData(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of PipelineStatisticsData(uint64_t a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of PipelineStatisticsData(uint64_t a1)
{
  id v2;
  void *v4;

  v4 = *(void **)(a1 + 368);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = v4;
  return a1;
}

uint64_t sub_23D72DF50()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id partial apply for closure #2 in PipelineStatisticsData.sendFramePctByHandExistenceEvent()()
{
  uint64_t v0;

  return closure #2 in PipelineStatisticsData.sendFramePctByHandExistenceEvent()(v0 + 16, *(void **)(v0 + 400), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_23D72E024()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

NSNumber partial apply for closure #1 in PipelineStatisticsData.sendPipelineLatencyEvent()()
{
  uint64_t v0;

  return closure #1 in PipelineStatisticsData.sendPipelineLatencyEvent()(*(double *)(v0 + 24), *(double *)(v0 + 32), *(unsigned int *)(v0 + 16), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_23D72E058()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in PipelineStatisticsData.sendPipelineHealthEvent()()
{
  uint64_t v0;

  closure #1 in PipelineStatisticsData.sendPipelineHealthEvent()(v0 + 16, *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 424), *(double *)(v0 + 400), *(double *)(v0 + 408));
}

uint64_t PrewiredInputPortInfo.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v0 + 72) == 1)
  {
    swift_beginAccess();
    if (*(_QWORD *)(v0 + 32))
    {
      swift_beginAccess();
      v1 = e5rt_buffer_object_release();
      swift_endAccess();
      specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v1);
    }
    if (*(_BYTE *)(v0 + 72) == 1)
    {
      swift_beginAccess();
      if (*(_QWORD *)(v0 + 40))
      {
        swift_beginAccess();
        v2 = e5rt_buffer_object_release();
        swift_endAccess();
        specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v2);
      }
    }
  }
  PortInfo.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PrewiredInputPortInfo()
{
  return objc_opt_self();
}

uint64_t PrewiredOutputPortInfo.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_BYTE *)(v0 + 72) == 1)
  {
    swift_beginAccess();
    if (*(_QWORD *)(v0 + 32))
    {
      swift_beginAccess();
      v1 = e5rt_buffer_object_release();
      swift_endAccess();
      specialized static E5RTRegressor.EXECUTE_OR_WARN(_:)(v1);
    }
  }
  PortInfo.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PrewiredOutputPortInfo()
{
  return objc_opt_self();
}

uint64_t FilterHandPipeline.init(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned int v13;

  v3 = v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevHand;
  v4 = type metadata accessor for HandDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevTimestamp;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 24) = 1;
  v6 = v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevFilterStatus;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_WORD *)(v6 + 24) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__enableGracefulFailureCloseToHMD) = 1;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__enableGracefulFailureHandOutOfFOV) = 1;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__distanceThreshold) = 1043878380;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__vibilityThreshold) = 1058642330;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline_kDistanceEpsilon) = 1008981770;
  v7 = OBJC_IVAR____TtC5Hands18FilterHandPipeline_kVisibilityEpsilon;
  if (one-time initialization token for kJointsOfInterest != -1)
    swift_once();
  *(float *)(v1 + v7) = 1.0 / (float)*(uint64_t *)(static OperationalEnvelopeProcess.kJointsOfInterest + 16);
  v8 = OBJC_IVAR____TtC5Hands18FilterHandPipeline__cameraCount;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__cameraCount) = 2;
  objc_msgSend(a1, sel_OOEDistanceThreshold);
  *(_DWORD *)(v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__distanceThreshold) = v9;
  objc_msgSend(a1, sel_OOEVisibilityThreshold);
  *(_DWORD *)(v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__vibilityThreshold) = v10;
  v11 = objc_msgSend(a1, sel_EnableGracefulFailureCloseToHMD);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__enableGracefulFailureCloseToHMD) = v11;
  v12 = objc_msgSend(a1, sel_EnableGracefulFailureHandOutOfFOV);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__enableGracefulFailureHandOutOfFOV) = v12;
  v13 = objc_msgSend(a1, sel_PosePipelineType);

  if (v13 == 2)
    *(_QWORD *)(v1 + v8) = 1;
  return v1;
}

uint64_t FilterHandPipeline.process(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  float v71;
  int v72;
  float v73;
  char v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t result;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  char v105;
  unsigned __int8 v106;
  char v107;
  unsigned __int8 v108;

  v89 = a1;
  v90 = a5;
  v93 = a3;
  v94 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v7, v8);
  v92 = (uint64_t)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v11);
  v88 = (char *)&v83 - v12;
  v13 = type metadata accessor for HandDescriptor();
  v91 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v83 - v19;
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v83 - v23;
  MEMORY[0x24BDAC7A8](v25, v26);
  v87 = (uint64_t)&v83 - v27;
  MEMORY[0x24BDAC7A8](v28, v29);
  v31 = (char *)&v83 - v30;
  MEMORY[0x24BDAC7A8](v32, v33);
  v35 = (char *)&v83 - v34;
  MEMORY[0x24BDAC7A8](v36, v37);
  v39 = (char *)&v83 - v38;
  v95 = v40;
  v41 = swift_bridgeObjectRetain();
  v42 = specialized _copyCollectionToContiguousArray<A>(_:)(v41);
  swift_bridgeObjectRelease();
  v43 = specialized Sequence<>.max()(v42);
  swift_release();
  if ((v43 & 0x100000000) != 0)
    v44 = 1.0;
  else
    v44 = *(float *)&v43;
  v45 = v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevFilterStatus;
  v46 = *(_QWORD *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevFilterStatus);
  v47 = *(_QWORD *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevFilterStatus + 16);
  v48 = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevFilterStatus + 24);
  v49 = *(_BYTE *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevFilterStatus + 25);
  v108 = *(_BYTE *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevFilterStatus + 8);
  v107 = v48;
  v106 = v49;
  v86 = v46;
  v85 = v108;
  if ((v49 & 1) == 0)
  {
    v57 = (uint64_t)v31;
    v58 = v47;
    v59 = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__enableGracefulFailureCloseToHMD);
    outlined init with copy of TrackingUpdateDataPB(a2, (uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if (v59 == 1)
    {
      v60 = *(float *)&v39[*(int *)(v95 + 136)];
      outlined destroy of Matrix3x3PB((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined init with copy of TrackingUpdateDataPB(a2, (uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v61 = v90;
      if (v60 > 0.0)
      {
        v62 = *(float *)&v35[*(int *)(v95 + 136)];
        outlined destroy of Matrix3x3PB((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        if (v62 <= *(float *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__distanceThreshold))
        {
          v63 = v61;
          v48 = 1;
          v108 = 1;
          v106 = 1;
          v107 = 1;
          v64 = 12;
          v65 = 1;
          v66 = 1;
          v58 = 1;
          v67 = v89;
LABEL_35:
          v69 = (uint64_t)v88;
          goto LABEL_38;
        }
LABEL_18:
        v70 = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__enableGracefulFailureHandOutOfFOV);
        outlined init with copy of TrackingUpdateDataPB(a2, v57, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        if (v70 == 1)
        {
          if (*(_QWORD *)(*(_QWORD *)(v57 + *(int *)(v95 + 136) + 8) + 16) == *(_QWORD *)(v5
                                                                                           + OBJC_IVAR____TtC5Hands18FilterHandPipeline__cameraCount))
          {
            v71 = *(float *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__vibilityThreshold)
                - *(float *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline_kVisibilityEpsilon);
            outlined destroy of Matrix3x3PB(v57, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
            v67 = v89;
            if (v44 >= v71)
            {
              v63 = v61;
              v65 = 0;
LABEL_23:
              v69 = (uint64_t)v88;
              v64 = v86;
LABEL_24:
              v66 = v85;
              goto LABEL_38;
            }
          }
          else
          {
            outlined destroy of Matrix3x3PB(v57, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
            v67 = v89;
          }
          v63 = v61;
          v65 = 1;
          v108 = 1;
          v106 = 1;
          v107 = 1;
          v64 = 13;
          v48 = 1;
          v66 = 1;
          v58 = 1;
          goto LABEL_35;
        }
        v63 = v61;
        outlined destroy of Matrix3x3PB(v57, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v65 = 0;
        v67 = v89;
        goto LABEL_23;
      }
    }
    else
    {
      outlined destroy of Matrix3x3PB((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined init with copy of TrackingUpdateDataPB(a2, (uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v61 = v90;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    goto LABEL_18;
  }
  v50 = (uint64_t)v20;
  v83 = v47;
  v51 = *(_QWORD *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__cameraCount);
  v52 = v87;
  outlined init with copy of TrackingUpdateDataPB(a2, v87, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v84 = v5;
  if (v51 != 2)
  {
    outlined destroy of Matrix3x3PB(v52, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v56 = v50;
    outlined init with copy of TrackingUpdateDataPB(a2, v50, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    goto LABEL_14;
  }
  v53 = *(unsigned __int8 *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__enableGracefulFailureCloseToHMD);
  outlined init with copy of TrackingUpdateDataPB(v52, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (v53 != 1)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    outlined destroy of Matrix3x3PB(v87, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v56 = v50;
    outlined init with copy of TrackingUpdateDataPB(a2, v50, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    goto LABEL_26;
  }
  v54 = *(float *)&v24[*(int *)(v95 + 136)];
  outlined destroy of Matrix3x3PB((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v55 = *(float *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__distanceThreshold) + 0.01;
  outlined destroy of Matrix3x3PB(v87, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v56 = v50;
  outlined init with copy of TrackingUpdateDataPB(a2, v50, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (v55 >= v54)
  {
LABEL_14:
    v68 = v56;
    goto LABEL_15;
  }
LABEL_26:
  v72 = *(unsigned __int8 *)(v84 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__enableGracefulFailureHandOutOfFOV);
  outlined init with copy of TrackingUpdateDataPB(v56, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (v72 == 1)
  {
    if (*(_QWORD *)(*(_QWORD *)&v16[*(int *)(v95 + 136) + 8] + 16) == 2)
    {
      v5 = v84;
      if ((float)(*(float *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__vibilityThreshold)
                 + *(float *)(v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline_kVisibilityEpsilon)) > 1.0)
        v73 = *(float *)(v84 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__vibilityThreshold)
            + *(float *)(v84 + OBJC_IVAR____TtC5Hands18FilterHandPipeline_kVisibilityEpsilon);
      else
        v73 = 1.0;
      outlined destroy of Matrix3x3PB((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      outlined destroy of Matrix3x3PB(v56, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v67 = v89;
      v63 = v90;
      v69 = (uint64_t)v88;
      if (v73 > v44)
      {
        v65 = 1;
        v64 = v86;
        v58 = v83;
        goto LABEL_24;
      }
      goto LABEL_37;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v68 = v56;
LABEL_15:
    outlined destroy of Matrix3x3PB(v68, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v65 = 1;
    v67 = v89;
    v63 = v90;
    v69 = (uint64_t)v88;
    v64 = v86;
    v58 = v83;
    v66 = v85;
    v5 = v84;
    goto LABEL_38;
  }
  outlined destroy of Matrix3x3PB((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  outlined destroy of Matrix3x3PB(v56, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v67 = v89;
  v63 = v90;
  v69 = (uint64_t)v88;
  v5 = v84;
LABEL_37:
  v65 = 0;
  v66 = 0;
  v108 = 0;
  v106 = 0;
  v48 = 1;
  v107 = 1;
  v64 = -1;
  v58 = 2;
LABEL_38:
  v101 = v64;
  v102 = v66;
  v103 = v58;
  v104 = v48;
  v105 = v65;
  v74 = *(_BYTE *)(v45 + 8);
  v75 = *(_QWORD *)(v45 + 16);
  v76 = *(_BYTE *)(v45 + 24);
  v77 = *(_BYTE *)(v45 + 25);
  v96 = *(_QWORD *)v45;
  v97 = v74;
  v98 = v75;
  v99 = v76;
  v100 = v77;
  if ((specialized static FilterHandPipeline.FilterStatus.== infix(_:_:)((uint64_t)&v101, &v96) & 1) == 0)
  {
    v101 = v64;
    v102 = v66;
    specialized static FilterHandPipeline.LogFiltered(hand:reason:status:timestamp:)(a2, &v101, v58, v48, v93, v94);
  }
  outlined init with copy of TrackingUpdateDataPB(a2, v69, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v91 + 56))(v69, 0, 1, v95);
  v78 = v92;
  outlined init with take of HandDescriptor?(v69, v92);
  v79 = v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevHand;
  swift_beginAccess();
  outlined assign with take of HandDescriptor?(v78, v79);
  swift_endAccess();
  v80 = v5 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevTimestamp;
  v81 = v94;
  *(_QWORD *)v80 = v93;
  *(_QWORD *)(v80 + 8) = v81;
  *(_QWORD *)(v80 + 16) = v63;
  *(_BYTE *)(v80 + 24) = 0;
  LOBYTE(v80) = v108;
  LOBYTE(v81) = v107;
  result = v106;
  *(_QWORD *)v45 = v64;
  *(_BYTE *)(v45 + 8) = v80;
  *(_QWORD *)(v45 + 16) = v58;
  *(_BYTE *)(v45 + 24) = v81;
  *(_BYTE *)(v45 + 25) = result;
  *(_QWORD *)v67 = v64;
  *(_BYTE *)(v67 + 8) = v80;
  return result;
}

uint64_t FilterHandPipeline.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v1, v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for HandDescriptor();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevHand;
  swift_beginAccess();
  outlined init with copy of HandDescriptor?(v10, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v4, &demangling cache variable for type metadata for HandDescriptor?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v4, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v11 = v0 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevTimestamp;
    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevTimestamp + 24) & 1) == 0
      && (*(_BYTE *)(v0 + OBJC_IVAR____TtC5Hands18FilterHandPipeline__prevFilterStatus + 25) & 1) != 0)
    {
      v12 = *(_QWORD *)v11;
      v13 = *(_DWORD *)(v11 + 8);
      v16 = -1;
      v17 = 0;
      specialized static FilterHandPipeline.LogFiltered(hand:reason:status:timestamp:)((uint64_t)v9, &v16, 2, 1, v12, v13);
    }
    outlined destroy of Matrix3x3PB((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  }
  outlined destroy of Coordinate3DPB?(v10, &demangling cache variable for type metadata for HandDescriptor?);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for FilterHandPipeline()
{
  return type metadata accessor for FilterHandPipeline();
}

uint64_t type metadata accessor for FilterHandPipeline()
{
  uint64_t result;

  result = type metadata singleton initialization cache for FilterHandPipeline;
  if (!type metadata singleton initialization cache for FilterHandPipeline)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for FilterHandPipeline()
{
  unint64_t v0;

  type metadata accessor for HandDescriptor?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FilterHandPipeline.FilterStatus(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 25);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterHandPipeline.FilterStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)(result + 25) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FilterHandPipeline.FilterStatus()
{
  return &type metadata for FilterHandPipeline.FilterStatus;
}

uint64_t specialized static FilterHandPipeline.FilterStatus.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *a2;
  v4 = a2[2];
  if (*((_BYTE *)a2 + 8) == 1)
    return ((uint64_t (*)(void))((char *)&loc_23D72F058 + 4 * byte_23D9AC190[v3]))();
  if (*(_QWORD *)a1 != v3)
    return 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (v4)
    {
      if (v4 == 1)
      {
        if (v2 != 1)
          return 0;
        return *(unsigned __int8 *)(a1 + 25) ^ *((unsigned __int8 *)a2 + 25) ^ 1u;
      }
      if (v2 == 2)
        return *(unsigned __int8 *)(a1 + 25) ^ *((unsigned __int8 *)a2 + 25) ^ 1u;
    }
    else if (!v2)
    {
      return *(unsigned __int8 *)(a1 + 25) ^ *((unsigned __int8 *)a2 + 25) ^ 1u;
    }
  }
  else if (v2 == v4)
  {
    return *(unsigned __int8 *)(a1 + 25) ^ *((unsigned __int8 *)a2 + 25) ^ 1u;
  }
  return 0;
}

uint64_t specialized static FilterHandPipeline.LogFiltered(hand:reason:status:timestamp:)(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t *boxed_opaque_existential_0;
  _BYTE v49[12];
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE *v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61[4];
  __int128 v62;
  uint64_t v63;
  uint64_t v64;

  v53 = a6;
  v52 = a5;
  LODWORD(v57) = a4;
  v55 = a1;
  v56 = a3;
  v54 = type metadata accessor for OperationalEnvelopeSignalsPB(0);
  v59 = *(_QWORD *)(v54 - 8);
  v8 = MEMORY[0x24BDAC7A8](v54, v7);
  v58 = &v49[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8, v10);
  v60 = &v49[-v11];
  v12 = (int *)type metadata accessor for HandFilteringEvent(0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = &v49[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for CMTimeProtobuf(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16, v18);
  v20 = &v49[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = type metadata accessor for HandEventCommon(0);
  v22 = *(_QWORD *)(v21 - 8);
  v24 = MEMORY[0x24BDAC7A8](v21, v23);
  v26 = &v49[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v24, v27);
  v29 = &v49[-v28];
  v51 = *a2;
  v50 = *((unsigned __int8 *)a2 + 8);
  *(_QWORD *)v29 = 0;
  v29[8] = 1;
  *((_QWORD *)v29 + 2) = 0;
  v29[24] = 0;
  UnknownStorage.init()();
  v30 = (uint64_t)&v29[*(int *)(v21 + 32)];
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v31(v30, 1, 1, v16);
  UnknownStorage.init()();
  *(_QWORD *)v20 = v52;
  *((_DWORD *)v20 + 2) = v53;
  outlined destroy of Coordinate3DPB?(v30, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v20, v30, type metadata accessor for CMTimeProtobuf);
  v31(v30, 0, 1, v16);
  v33 = v54;
  v32 = v55;
  *((_QWORD *)v29 + 2) = *(_QWORD *)(v55 + 144);
  v29[24] = *(_BYTE *)(v32 + 136);
  *(_QWORD *)v29 = v56;
  v29[8] = v57 & 1;
  UnknownStorage.init()();
  v34 = (uint64_t)&v15[v12[5]];
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v35(v34, 1, 1, v21);
  v36 = &v15[v12[6]];
  *(_QWORD *)v36 = 0;
  *((_WORD *)v36 + 4) = 256;
  v37 = (uint64_t)&v15[v12[7]];
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56);
  v57(v37, 1, 1, v33);
  v59 = (uint64_t)v12;
  v38 = &v15[v12[8]];
  *(_QWORD *)v38 = v51;
  *((_WORD *)v38 + 4) = v50;
  outlined init with copy of TrackingUpdateDataPB((uint64_t)v29, (uint64_t)v26, type metadata accessor for HandEventCommon);
  outlined destroy of Coordinate3DPB?(v34, &demangling cache variable for type metadata for HandEventCommon?);
  outlined init with take of Matrix2dPB((uint64_t)v26, v34, type metadata accessor for HandEventCommon);
  v35(v34, 0, 1, v21);
  v39 = *(_DWORD *)(v32 + *(int *)(type metadata accessor for HandDescriptor() + 136));
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v40 = v58;
  UnknownStorage.init()();
  v41 = (uint64_t)v40;
  *(_DWORD *)v40 = v39;
  v42 = swift_bridgeObjectRetain();
  v43 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSfG_s5Int32V_Sfts5NeverOTg5010_s5Hands12ef5OSfs5g34VSfIgnydd_AC3key_Sf5valuetAE_Sfts5H110OIegnrzr_TR063_s5Hands26OperationalEnvelopeSignalsV10toProtoBufAA0bcD2PBVyFs5d9V_SftAA12bc2O_T5XEfU_Tf3nnnpf_nTf1cn_n(v42);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v43 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int32, Float>);
    v44 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v44 = MEMORY[0x24BEE4B00];
  }
  *(_QWORD *)&v62 = v44;
  v45 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v45, 1, &v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *((_QWORD *)v40 + 1) = v62;
  v46 = v60;
  outlined init with take of Matrix2dPB(v41, (uint64_t)v60, type metadata accessor for OperationalEnvelopeSignalsPB);
  outlined destroy of Coordinate3DPB?(v37, &demangling cache variable for type metadata for OperationalEnvelopeSignalsPB?);
  outlined init with take of Matrix2dPB((uint64_t)v46, v37, type metadata accessor for OperationalEnvelopeSignalsPB);
  v57(v37, 0, 1, v33);
  v62 = xmmword_23D9AB690;
  v63 = 0;
  v64 = 0;
  v61[3] = v59;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v61);
  outlined init with copy of TrackingUpdateDataPB((uint64_t)v15, (uint64_t)boxed_opaque_existential_0, type metadata accessor for HandFilteringEvent);
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000071, 0x800000023D9C8690, 111, (uint64_t *)&v62, (uint64_t)v61, MEMORY[0x24BEE4AF8]);
  outlined destroy of Matrix3x3PB((uint64_t)v15, type metadata accessor for HandFilteringEvent);
  outlined destroy of Matrix3x3PB((uint64_t)v29, type metadata accessor for HandEventCommon);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v61);
}

_QWORD *PinchCancellationModel.init(_:_:)(uint64_t a1, void *a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjCClassFromMetadata;
  id v13;
  void (*v14)(char *, uint64_t);
  void *v15;
  void (*v16)(char *, uint64_t);
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  char v25;
  void *v26;
  unint64_t v27;
  char v28;
  void *v29;
  char v30;
  unint64_t v31;
  char v32;
  void *v33;
  unint64_t v34;
  char v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  char v45;
  unint64_t v46;
  char v47;
  double *v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  double v53;
  unint64_t v54;
  float v55;
  unint64_t v56;
  char v57;
  void *v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  id v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;

  v5 = v3;
  v3[2] = 0xD000000000000013;
  v3[3] = 0x800000023D9C8820;
  v3[4] = 0;
  v3[5] = &outlined read-only object #0 of PinchCancellationModel.init(_:_:);
  v3[6] = &outlined read-only object #1 of PinchCancellationModel.init(_:_:);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = swift_allocObject();
  v10 = MEMORY[0x24BEE0D00];
  *(_OWORD *)(v9 + 16) = xmmword_23D9AC240;
  v72 = v10;
  v70 = 0x74757074756FLL;
  v71 = 0xE600000000000000;
  type metadata accessor for IONamedSlice();
  swift_allocObject();
  *(_QWORD *)(v9 + 32) = IONamedSlice.init(_:)((uint64_t)&v70);
  v72 = v10;
  v70 = 0x646469685F77656ELL;
  v71 = 0xEA00000000006E65;
  swift_allocObject();
  *(_QWORD *)(v9 + 40) = IONamedSlice.init(_:)((uint64_t)&v70);
  v72 = v10;
  v70 = 0x6C6C65635F77656ELL;
  v71 = 0xE800000000000000;
  swift_allocObject();
  *(_QWORD *)(v9 + 48) = IONamedSlice.init(_:)((uint64_t)&v70);
  v70 = v9;
  specialized Array._endMutation()();
  v11 = MEMORY[0x24BEE4AF8];
  v3[7] = v70;
  v3[8] = v11;
  v3[9] = v11;
  v3[10] = &outlined read-only object #2 of PinchCancellationModel.init(_:_:);
  v3[11] = &outlined read-only object #3 of PinchCancellationModel.init(_:_:);
  v3[12] = 32;
  v3[13] = v11;
  v3[14] = v11;
  v3[15] = v11;
  v3[16] = v11;
  v3[2] = a1;
  v3[3] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v13 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  type metadata accessor for ModelUtils();
  v14 = static ModelUtils.getModelPath(modelDir:modelName:allowInternalModel:expectAbsolute:)(0xD00000000000002ELL, (void *)0x800000023D9C8840, a1, a2, a3, 0);
  if (!v4)
  {
    v16 = v14;
    v17 = v15;
    swift_bridgeObjectRelease();
    v18 = (void *)objc_opt_self();
    v66 = v17;
    v19 = (void *)MEMORY[0x2426372E8](v16, v17);
    v20 = objc_msgSend(v18, sel_loadConfig_modelPath_, v13, v19);

    v68 = v13;
    if (v20 && (v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(), v20, v21))
    {
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      if (*(_QWORD *)(v21 + 16)
        && (v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v70), (v23 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)&v73);
      }
      else
      {
        v73 = 0u;
        v74 = 0u;
      }
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)&v70);
      if (*((_QWORD *)&v74 + 1))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        if ((swift_dynamicCast() & 1) != 0)
          v26 = (void *)v70;
        else
          v26 = &outlined read-only object #4 of PinchCancellationModel.init(_:_:);
        v5[5] = v26;
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      v24 = 0;
    }
    else
    {
      v21 = 0;
      v73 = 0u;
      v74 = 0u;
      v24 = 1;
    }
    outlined destroy of Any?((uint64_t)&v73);
    v5[5] = &outlined read-only object #4 of PinchCancellationModel.init(_:_:);
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
    {
      v73 = 0u;
      v74 = 0u;
      v25 = 1;
      goto LABEL_26;
    }
LABEL_18:
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v21 + 16) && (v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v70), (v28 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v27, (uint64_t)&v73);
    }
    else
    {
      v73 = 0u;
      v74 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v70);
    if (*((_QWORD *)&v74 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      if ((swift_dynamicCast() & 1) != 0)
        v29 = (void *)v70;
      else
        v29 = &outlined read-only object #5 of PinchCancellationModel.init(_:_:);
      v5[6] = v29;
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    v25 = 0;
LABEL_26:
    outlined destroy of Any?((uint64_t)&v73);
    v5[6] = &outlined read-only object #5 of PinchCancellationModel.init(_:_:);
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
      v73 = 0u;
      v74 = 0u;
      v30 = 1;
      goto LABEL_38;
    }
LABEL_30:
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v21 + 16) && (v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v70), (v32 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v31, (uint64_t)&v73);
    }
    else
    {
      v73 = 0u;
      v74 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v70);
    if (*((_QWORD *)&v74 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      if ((swift_dynamicCast() & 1) != 0)
        v33 = (void *)v70;
      else
        v33 = &outlined read-only object #6 of PinchCancellationModel.init(_:_:);
      v5[8] = v33;
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
    v30 = 0;
LABEL_38:
    outlined destroy of Any?((uint64_t)&v73);
    v5[8] = &outlined read-only object #6 of PinchCancellationModel.init(_:_:);
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
    {
      v73 = 0u;
      v74 = 0u;
      v69 = 1;
      goto LABEL_50;
    }
LABEL_42:
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v21 + 16) && (v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v70), (v35 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v34, (uint64_t)&v73);
    }
    else
    {
      v73 = 0u;
      v74 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v70);
    if (*((_QWORD *)&v74 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v69 = 0;
        v36 = (void *)v70;
        goto LABEL_53;
      }
      v69 = 0;
LABEL_52:
      v36 = &outlined read-only object #7 of PinchCancellationModel.init(_:_:);
LABEL_53:
      v67 = (uint64_t)v16;
      v5[9] = v36;
      swift_bridgeObjectRelease();
      v37 = v5[6];
      v38 = *(_QWORD *)(v37 + 16);
      v39 = MEMORY[0x24BEE4AF8];
      if (v38)
      {
        v65 = v21;
        *(_QWORD *)&v73 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        v40 = (unint64_t *)(v37 + 40);
        v41 = MEMORY[0x24BEE0D00];
        do
        {
          v42 = *(v40 - 1);
          v43 = *v40;
          v72 = v41;
          v70 = v42;
          v71 = v43;
          swift_allocObject();
          swift_bridgeObjectRetain();
          IONamedSlice.init(_:)((uint64_t)&v70);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v40 += 2;
          --v38;
        }
        while (v38);
        v39 = v73;
        swift_bridgeObjectRelease();
        v21 = v65;
      }
      v5[7] = v39;
      swift_bridgeObjectRelease();
      v44 = v13;
      v45 = v69;
      if ((v69 & 1) != 0)
      {
        v73 = 0u;
        v74 = 0u;
      }
      else
      {
        *(_QWORD *)&v73 = 0xD000000000000016;
        *((_QWORD *)&v73 + 1) = 0x800000023D9C8890;
        swift_bridgeObjectRetain();
        AnyHashable.init<A>(_:)();
        if (*(_QWORD *)(v21 + 16)
          && (v46 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v70), (v47 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v46, (uint64_t)&v73);
        }
        else
        {
          v73 = 0u;
          v74 = 0u;
        }
        swift_bridgeObjectRelease();
        outlined destroy of AnyHashable((uint64_t)&v70);
        if (*((_QWORD *)&v74 + 1))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v48 = (double *)v70;
            v49 = *(_QWORD *)(v70 + 16);
            if (!v49)
            {
              swift_bridgeObjectRelease();
              v50 = MEMORY[0x24BEE4AF8];
              goto LABEL_74;
            }
LABEL_69:
            v70 = MEMORY[0x24BEE4AF8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49, 0);
            v51 = 0;
            v50 = v70;
            v52 = *(_QWORD *)(v70 + 16);
            do
            {
              v53 = v48[v51 + 4];
              v70 = v50;
              v54 = *(_QWORD *)(v50 + 24);
              if (v52 >= v54 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v52 + 1, 1);
                v50 = v70;
              }
              ++v51;
              v55 = v53;
              *(_QWORD *)(v50 + 16) = v52 + 1;
              *(float *)(v50 + 4 * v52++ + 32) = v55;
            }
            while (v49 != v51);
            swift_bridgeObjectRelease();
            v44 = v68;
            v45 = v69;
LABEL_74:
            v5[10] = v50;
            swift_bridgeObjectRelease();
            if ((v45 & 1) != 0)
            {
              v73 = 0u;
              v74 = 0u;
            }
            else
            {
              swift_bridgeObjectRetain();
              AnyHashable.init<A>(_:)();
              if (*(_QWORD *)(v21 + 16)
                && (v56 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v70), (v57 & 1) != 0))
              {
                outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v56, (uint64_t)&v73);
              }
              else
              {
                v73 = 0u;
                v74 = 0u;
              }
              swift_bridgeObjectRelease();
              outlined destroy of AnyHashable((uint64_t)&v70);
              if (*((_QWORD *)&v74 + 1))
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
                if ((swift_dynamicCast() & 1) != 0)
                  v58 = (void *)v70;
                else
                  v58 = &outlined read-only object #9 of PinchCancellationModel.init(_:_:);
                v5[11] = v58;
                swift_bridgeObjectRelease();
                goto LABEL_87;
              }
            }
            outlined destroy of Any?((uint64_t)&v73);
            v5[11] = &outlined read-only object #9 of PinchCancellationModel.init(_:_:);
            swift_bridgeObjectRelease();
            if ((v45 & 1) != 0)
            {
              v73 = 0u;
              v74 = 0u;
              goto LABEL_94;
            }
LABEL_87:
            AnyHashable.init<A>(_:)();
            if (*(_QWORD *)(v21 + 16)
              && (v59 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v70), (v60 & 1) != 0))
            {
              outlined init with copy of Any(*(_QWORD *)(v21 + 56) + 32 * v59, (uint64_t)&v73);
            }
            else
            {
              v73 = 0u;
              v74 = 0u;
            }
            swift_bridgeObjectRelease();
            outlined destroy of AnyHashable((uint64_t)&v70);
            if (*((_QWORD *)&v74 + 1))
            {
              if (swift_dynamicCast())
              {
                v61 = v70;
LABEL_96:
                v5[12] = v61;
                v62 = v5[5];
                v63 = v5[6];
                type metadata accessor for CPUEspressoRegressor();
                swift_allocObject();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v5[4] = CPUEspressoRegressor.init(bundle:modelName:inputNames:outputNames:platform:)(v44, v67, v66, v62, v63, 1);
                swift_release();
                return v5;
              }
LABEL_95:
              v61 = 8;
              goto LABEL_96;
            }
LABEL_94:
            outlined destroy of Any?((uint64_t)&v73);
            goto LABEL_95;
          }
LABEL_68:
          v48 = (double *)&outlined read-only object #8 of PinchCancellationModel.init(_:_:);
          v49 = 3;
          goto LABEL_69;
        }
      }
      outlined destroy of Any?((uint64_t)&v73);
      goto LABEL_68;
    }
    v69 = 0;
LABEL_50:
    outlined destroy of Any?((uint64_t)&v73);
    goto LABEL_52;
  }

  swift_release();
  swift_bridgeObjectRelease();
  return v5;
}

void *PinchCancellationModel.predict(_:_:)(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t inited;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  float *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  float v39;
  unint64_t v40;
  void *result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v3 = (_QWORD *)v2[4];
  if (!v3)
    return &outlined read-only object #0 of PinchCancellationModel.predict(_:_:);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A96F0;
  *(_QWORD *)(inited + 32) = a1;
  v7 = v2[13];
  *(_QWORD *)(inited + 40) = v7;
  *(_QWORD *)(inited + 48) = v2[14];
  *(_QWORD *)(inited + 56) = a2;
  *(_QWORD *)(inited + 64) = v2[15];
  v45 = v2;
  v46 = inited;
  *(_QWORD *)(inited + 72) = v2[16];
  v8 = (_QWORD *)v2[5];
  v9 = v8[2];
  if (v9 > 6)
    goto LABEL_44;
  v10 = 0;
  if (v9)
  {
    v47 = v3;
    v11 = (void *)v8[5];
    v44 = v8[4];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = *(_QWORD *)(v46 + 32);
    swift_bridgeObjectRetain();
    CPUEspressoRegressor.setInput(_:fromRawPointer:)(v44, v11, (const void *)(v12 + 32));
    v13 = 0;
    a1 = (_QWORD *)(v46 + 40);
    v14 = (void **)(v8 + 7);
    v15 = v9 - 1;
    while (1)
    {
      v7 = v13 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = v8[2];
      if (v13 + 1 == v16)
      {
LABEL_9:
        v3 = v47;
        goto LABEL_12;
      }
      if (v7 >= v16)
        break;
      if (v15 == v13)
        goto LABEL_9;
      v17 = (uint64_t)*(v14 - 1);
      v18 = *v14;
      swift_bridgeObjectRetain();
      v19 = a1[v13];
      swift_bridgeObjectRetain();
      CPUEspressoRegressor.setInput(_:fromRawPointer:)(v17, v18, (const void *)(v19 + 32));
      ++v13;
      v14 += 2;
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    swift_bridgeObjectRetain();
    v24 = (_QWORD *)MEMORY[0x24263790C](0, v7);
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_12:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  a1 = v45;
  if (espresso_plan_execute_sync())
  {
    v21 = v3[2];
    v22 = v3[6];
    v23 = (void *)v3[7];
    swift_bridgeObjectRetain();
    specialized static CPUEspressoRegressor.throwException(_:forNetwork:)(v21, v22, v23);
    swift_bridgeObjectRelease();
  }
  v7 = v45[7];
  if ((v7 & 0xC000000000000001) != 0)
    goto LABEL_45;
  if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_48:
    swift_bridgeObjectRetain();
    v28 = (_QWORD *)MEMORY[0x24263790C](2, v7);
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v24 = *(_QWORD **)(v7 + 32);
  swift_retain();
LABEL_17:
  v10 = (float *)specialized PinchCancellationModel.getOutputAsBuffer(namedSlice:model:)(v24);
  swift_release();
  v25 = a1[7];
  if ((v25 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v26 = (_QWORD *)MEMORY[0x24263790C](1, v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
LABEL_50:
      swift_bridgeObjectRetain();
      v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v30 = a1[7];
      if (v42 < 4)
        goto LABEL_29;
      goto LABEL_25;
    }
    v26 = *(_QWORD **)(v25 + 40);
    swift_retain();
  }
  v27 = specialized PinchCancellationModel.getOutputAsBuffer(namedSlice:model:)(v26);
  swift_release();
  a1[13] = v27;
  swift_bridgeObjectRelease();
  v7 = a1[7];
  if ((v7 & 0xC000000000000001) != 0)
    goto LABEL_48;
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
  {
    __break(1u);
LABEL_53:
    swift_bridgeObjectRetain();
    v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v43 < 5)
    {
LABEL_35:
      v36 = *((_QWORD *)v10 + 2);
      if (v36)
      {
        v48 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
        v37 = 0;
        v20 = v48;
        v38 = *(_QWORD *)(v48 + 16);
        do
        {
          v39 = expf(-v10[v37 + 8]);
          v40 = *(_QWORD *)(v48 + 24);
          if (v38 >= v40 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v38 + 1, 1);
          ++v37;
          *(_QWORD *)(v48 + 16) = v38 + 1;
          *(float *)(v48 + 4 * v38++ + 32) = 1.0 / (float)(v39 + 1.0);
        }
        while (v36 != v37);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_setDeallocating();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
        swift_arrayDestroy();
        swift_bridgeObjectRelease();
        swift_release();
        return (void *)MEMORY[0x24BEE4AF8];
      }
      return (void *)v20;
    }
    goto LABEL_31;
  }
  v28 = *(_QWORD **)(v7 + 48);
  swift_retain();
LABEL_23:
  v29 = specialized PinchCancellationModel.getOutputAsBuffer(namedSlice:model:)(v28);
  swift_release();
  a1[14] = v29;
  swift_bridgeObjectRelease();
  v30 = a1[7];
  if (v30 >> 62)
    goto LABEL_50;
  if (*(uint64_t *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10) < 4)
    goto LABEL_29;
LABEL_25:
  if ((v30 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v31 = (_QWORD *)MEMORY[0x24263790C](3, v30);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10) < 4uLL)
    {
      __break(1u);
      goto LABEL_58;
    }
    v31 = *(_QWORD **)(v30 + 56);
    swift_retain();
  }
  v32 = specialized PinchCancellationModel.getOutputAsBuffer(namedSlice:model:)(v31);
  swift_release();
  a1[15] = v32;
  swift_bridgeObjectRelease();
  v30 = a1[7];
LABEL_29:
  if (v30 >> 62)
    goto LABEL_53;
  if (*(uint64_t *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10) < 5)
    goto LABEL_35;
LABEL_31:
  v33 = a1[7];
  if ((v33 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v34 = (_QWORD *)MEMORY[0x24263790C](4, v33);
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10) >= 5uLL)
  {
    v34 = *(_QWORD **)(v33 + 64);
    swift_retain();
LABEL_34:
    v35 = specialized PinchCancellationModel.getOutputAsBuffer(namedSlice:model:)(v34);
    swift_release();
    a1[16] = v35;
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
LABEL_58:
  __break(1u);
  result = (void *)swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t PinchCancellationModel.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PinchCancellationModel.__deallocating_deinit()
{
  PinchCancellationModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchCancellationModel()
{
  return objc_opt_self();
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *specialized PinchCancellationModel.getOutputAsBuffer(namedSlice:model:)(_QWORD *result)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  Swift::String v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;

  v1 = result[2];
  v2 = (void *)result[3];
  v4 = result[4];
  v3 = result[5];
  v5 = result[6];
  if (v5 >= 1)
  {
    v6 = 32;
    if ((unint64_t)v5 >= 0x20)
      v5 = 32;
    if (v3)
      goto LABEL_5;
LABEL_20:
    swift_retain_n();
    v18._countAndFlagsBits = v1;
    v18._object = v2;
    result = (_QWORD *)CPUEspressoRegressor.getOutputLength(_:)(v18);
    if (v19)
    {

      swift_release_n();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v9 = (uint64_t)result;
    goto LABEL_8;
  }
  v6 = 1;
  v5 = 1;
  if (!v3)
    goto LABEL_20;
LABEL_5:
  v7 = __OFSUB__(v3, v4);
  v8 = v3 - v4;
  if (v7)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v8 * v5;
  if ((unsigned __int128)(v8 * (__int128)v5) >> 64 != (v8 * v5) >> 63)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (_QWORD *)swift_retain_n();
LABEL_8:
  if ((unint64_t)(v9 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_25;
  }
  v10 = CPUEspressoRegressor.getRawOutput(_:)(v1, v2);
  result = (_QWORD *)swift_release_n();
  if (!v10)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  if ((unint64_t)(v4 - 0x2000000000000000) >> 62 != 3)
    goto LABEL_27;
  v11 = 4 * v4 * v6;
  if ((unsigned __int128)(4 * v4 * (__int128)v6) >> 64 != v11 >> 63)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v12 = 4 * v9;
  result = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v12)
    return result;
  v13 = v12 >> 2;
  v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
  result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v12 >> 2) & ~(v12 >> 63), 0);
  if (v12 < 4)
    goto LABEL_29;
  v14 = (int *)(v10 + v11);
  result = v20;
  v15 = v20[2];
  do
  {
    v16 = *v14;
    v21 = result;
    v17 = result[3];
    if (v15 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v15 + 1, 1);
      result = v21;
    }
    result[2] = v15 + 1;
    *((_DWORD *)result + v15 + 8) = v16;
    ++v14;
    ++v15;
    --v13;
  }
  while (v13);
  return result;
}

uint64_t RepetitivePinchRecoveryPipeline.process(_:_:_:_:)@<X0>(const void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  CMTimeEpoch v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  _BYTE v49[896];
  CMTime v50;

  v8 = v7;
  v45 = a5;
  v46 = a6;
  v48 = a1;
  v13 = type metadata accessor for HandDescriptor();
  v15 = MEMORY[0x24BDAC7A8](v13, v14);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v15, v18);
  v21 = (char *)&v42 - v20;
  v23 = MEMORY[0x24BDAC7A8](v19, v22);
  v25 = (char *)&v42 - v24;
  if ((*(_BYTE *)(v8 + 24) & 1) == 0 && (*(_BYTE *)(v8 + 25) & 1) == 0)
    return outlined init with copy of HandDescriptor((uint64_t)a2, a7);
  v43 = v23;
  v44 = a3;
  v47 = a7;
  v26 = v48;
  memcpy(v49, v48, 0x228uLL);
  swift_retain();
  v27 = RecoverRepetitivePinch.updateFeatureBuffer(_:_:)(v49, a2);
  swift_release();
  if ((v27 & 1) == 0)
    return outlined init with copy of HandDescriptor((uint64_t)a2, v47);
  memcpy(v49, v26, 0x228uLL);
  swift_retain();
  RecoverRepetitivePinch.isCurrentlyPinching(_:_:)((uint64_t)v49);
  swift_release();
  v42 = v25;
  outlined init with copy of HandDescriptor((uint64_t)a2, (uint64_t)v25);
  swift_retain();
  v28 = a4;
  v29 = a4;
  v30 = v45;
  v31 = v46;
  v32 = RecoverRepetitivePinch.shouldRecoverScroll(_:_:)((uint64_t)a2, v28, v45, v46);
  outlined init with copy of HandDescriptor((uint64_t)a2, (uint64_t)v21);
  if ((v32 & 1) != 0)
  {
    outlined destroy of HandDescriptor((uint64_t)v21);
    swift_release();
    v33 = v31;
    v34 = v30;
    v35 = v29;
    v36 = (uint64_t)v42;
LABEL_10:
    swift_retain();
    RecoverRepetitivePinch.recoverPinch(_:_:)(v36, v35, v34, (uint64_t)v17);
    swift_release();
    outlined destroy of HandDescriptor(v36);
    outlined init with take of HandDescriptor((uint64_t)v17, v36);
    goto LABEL_11;
  }
  v38 = RecoverRepetitivePinch.shouldRecoverTap(_:_:)((uint64_t)v21, v29, v30, v31);
  outlined destroy of HandDescriptor((uint64_t)v21);
  swift_release();
  v33 = v31;
  v34 = v30;
  v35 = v29;
  v36 = (uint64_t)v42;
  if ((v38 & 1) != 0)
    goto LABEL_10;
LABEL_11:
  memcpy(v49, v48, 0x228uLL);
  swift_retain();
  specialized RecoverRepetitivePinch.detectPinchAndPopulateCache(_:_:_:_:)(v49, (uint64_t)a2, v44);
  swift_release();
  swift_retain();
  v50.value = v35;
  *(_QWORD *)&v50.timescale = v34;
  v50.epoch = v33;
  RecoverRepetitivePinch.retirePinchCache(_:)(v50);
  swift_release();
  v39 = *(_QWORD *)(v8 + 16);
  if (*(_BYTE *)(v39 + 1003) == 1)
  {
    v40 = v36 + *(int *)(v43 + 96);
    v41 = type metadata accessor for HandDescriptorInternal();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v40, 1, v41))
    {
      swift_beginAccess();
      memmove(v49, (const void *)(v39 + 120), 0x373uLL);
      _s5Hands13PoseImageCropVSgWOi_(v49);
      outlined init with take of RecoverRepetitivePinchInternalData?((uint64_t)v49, v40 + 160);
    }
  }
  return outlined init with take of HandDescriptor(v36, v47);
}

Swift::Void __swiftcall RepetitivePinchRecoveryPipeline.updateState(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;

  if (*(_BYTE *)(v1 + 24) == 1)
  {
    v3 = *(_QWORD *)(v1 + 16) + 88;
    swift_beginAccess();
    v4 = *(_QWORD **)v3;
    v5 = *(_QWORD *)(*(_QWORD *)v3 + 16);
    swift_retain();
    if (v5)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v3 = v4;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        *(_QWORD *)v3 = v4;
      }
      if (v5 > v4[2])
      {
        __break(1u);
        return;
      }
      *((_BYTE *)&v4[74 * v5 - 68] - 4) = a1;
    }
    swift_endAccess();
    swift_release();
  }
}

uint64_t RepetitivePinchRecoveryPipeline.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RepetitivePinchRecoveryPipeline()
{
  return objc_opt_self();
}

uint64_t outlined init with take of RecoverRepetitivePinchInternalData?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall PinchAcceptorConsecutivePinchAttempt.reset()()
{
  uint64_t v0;

  CMTime.init(value:timescale:)(0, 1);
  *(CMTime *)(v0 + 64) = CMTime.init(value:timescale:)(0, 1);
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_WORD *)(v0 + 112) = 0;
}

uint64_t PinchAcceptorConsecutivePinchAttempt.preProcess(_:)(uint64_t result, float32x4_t a2)
{
  uint64_t v2;
  float32x2_t *v3;
  uint64_t v4;
  float v5;
  float v6;
  float32x4_t v7;

  v4 = *(_QWORD *)(result + 240);
  v3 = *(float32x2_t **)(result + 248);
  v5 = *(float *)(result + 372);
  v6 = *(float *)(result + 540);
  *(_WORD *)(v2 + 33) = 0;
  if (v5 < (float)(1.0 - v6) && (*(_BYTE *)(v2 + 112) & 1) == 0)
    *(_BYTE *)(v2 + 112) = 1;
  if (v4)
  {
    if (*(_QWORD *)&v3[2] < 7uLL)
    {
      __break(1u);
    }
    else
    {
      *(float32x2_t *)a2.f32 = vsub_f32(v3[30], *(float32x2_t *)(v2 + 96));
      a2.f32[2] = v3[31].f32[0] - *(float *)(v2 + 104);
      v7 = vmulq_f32(a2, a2);
      if (*(float *)(v2 + 52) < sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]))*(_BYTE *)(v2 + 113) = 1;
    }
  }
  return result;
}

void PinchAcceptorConsecutivePinchAttempt.process(_:)(uint64_t a1)
{
  __n128 *v2;

  if (*(_BYTE *)(a1 + 474) == 1 && *(_QWORD *)(a1 + 240) != 0)
  {
    v2 = *(__n128 **)(a1 + 248);
    if (v2[1].n128_u64[0] < 7)
      __break(1u);
    else
      PinchAcceptorConsecutivePinchAttempt.update(_:_:)(*(_QWORD *)(a1 + 560), *(_QWORD *)(a1 + 568), *(_QWORD *)(a1 + 576), v2[15]);
  }
}

void PinchAcceptorConsecutivePinchAttempt.update(_:_:)(CMTimeValue a1, unint64_t a2, CMTimeEpoch a3, __n128 a4)
{
  uint64_t v4;
  CMTimeScale v6;
  unint64_t v8;
  float32x2_t v9;
  float v10;
  CMTimeValue v11;
  CMTimeScale v12;
  CMTimeFlags v13;
  CMTimeEpoch v14;
  double Seconds;
  float v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  CMTime time;

  v6 = a2;
  v8 = HIDWORD(a2);
  v9 = *(float32x2_t *)(v4 + 96);
  v10 = *(float *)(v4 + 104);
  v11 = *(_QWORD *)(v4 + 64);
  v12 = *(_DWORD *)(v4 + 72);
  v13 = *(_DWORD *)(v4 + 76);
  v14 = *(_QWORD *)(v4 + 80);
  if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
  {
    time.value = v11;
    time.timescale = v12;
    time.flags = v13;
    time.epoch = v14;
    Seconds = CMTimeGetSeconds(&time);
    time.value = a1;
    time.timescale = v6;
    time.flags = v8;
    time.epoch = a3;
    v16 = Seconds - CMTimeGetSeconds(&time);
    v17 = fabsf(v16);
  }
  else
  {
    v17 = INFINITY;
  }
  if (*(float *)(v4 + 56) >= v17
    && (v18.i32[3] = a4.n128_i32[3],
        *(float32x2_t *)v18.f32 = vsub_f32((float32x2_t)a4.n128_u64[0], v9),
        v18.f32[2] = a4.n128_f32[2] - v10,
        v19 = vmulq_f32(v18, v18),
        *(float *)(v4 + 52) >= sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0])))
  {
    if (*(_BYTE *)(v4 + 112) == 1 && (*(_BYTE *)(v4 + 113) & 1) == 0)
    {
      *(_BYTE *)(v4 + 113) = 1;
      *(_WORD *)(v4 + 33) = 257;
    }
  }
  else
  {
    CMTime.init(value:timescale:)(0, 1);
    *(_QWORD *)(v4 + 64) = a1;
    *(_DWORD *)(v4 + 72) = v6;
    *(_DWORD *)(v4 + 76) = v8;
    *(_QWORD *)(v4 + 80) = a3;
    *(__n128 *)(v4 + 96) = a4;
    *(_WORD *)(v4 + 112) = 0;
  }
}

uint64_t PinchAcceptorConsecutivePinchAttempt.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchAcceptorConsecutivePinchAttempt()
{
  return objc_opt_self();
}

__n128 __swift_memcpy50_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PinchAcceptorConsecutivePinchAttempt.InternalStates(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 50))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchAcceptorConsecutivePinchAttempt.InternalStates(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 50) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 50) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchAcceptorConsecutivePinchAttempt.InternalStates()
{
  return &type metadata for PinchAcceptorConsecutivePinchAttempt.InternalStates;
}

ValueMetadata *type metadata accessor for PinchAcceptorConsecutivePinchAttempt.ThresholdConfig()
{
  return &type metadata for PinchAcceptorConsecutivePinchAttempt.ThresholdConfig;
}

unint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(float *)(a1 + 32);
    v3 = v1 - 1;
    if (v1 != 1)
    {
      v4 = (float *)(a1 + 36);
      do
      {
        v5 = *v4++;
        v6 = v5;
        if (v2 < v5)
          v2 = v6;
        --v3;
      }
      while (v3);
    }
    v7 = LODWORD(v2);
  }
  else
  {
    v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  float v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = a1 + 64;
  v2 = *(_BYTE *)(a1 + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(a1 + 64);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      goto LABEL_49;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v19 = *(_QWORD *)(a1 + 72);
    if (v19)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        goto LABEL_49;
      v19 = *(_QWORD *)(a1 + 80);
      if (v19)
      {
        v6 = 2;
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 88);
        if (v19)
        {
          v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9)
            goto LABEL_49;
          v19 = *(_QWORD *)(a1 + 96);
          if (v19)
          {
            v6 = 4;
          }
          else
          {
            v19 = *(_QWORD *)(a1 + 104);
            if (!v19)
              goto LABEL_43;
            v6 = 5;
          }
        }
      }
    }
LABEL_30:
    v8 = (v19 - 1) & v19;
    v7 = __clz(__rbit64(v19)) + (v6 << 6);
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(float *)(v10 + 4 * v7);
  while (v8)
  {
    v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v13 = v12 | (v6 << 6);
LABEL_7:
    if (v11 < *(float *)(v10 + 4 * v13))
      v11 = *(float *)(v10 + 4 * v13);
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v1 + 8 * v14);
  ++v6;
  if (v15)
    goto LABEL_25;
  v6 = v14 + 1;
  if (v14 + 1 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 2;
  if (v14 + 2 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 3;
  if (v14 + 3 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }
  v16 = v14 + 4;
  if (v16 >= v9)
  {
LABEL_26:
    v17 = 0;
    v18 = LODWORD(v11);
    return v18 | ((unint64_t)v17 << 32);
  }
  v15 = *(_QWORD *)(v1 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v9)
      goto LABEL_26;
    v15 = *(_QWORD *)(v1 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  v20 = 0;
  v21 = 6;
  if (v9 > 6)
    v21 = v9;
  v22 = v21 - 6;
  while (v22 != v20)
  {
    v19 = *(_QWORD *)(a1 + 112 + 8 * v20++);
    if (v19)
    {
      v6 = v20 + 5;
      goto LABEL_30;
    }
  }
LABEL_49:
  v18 = 0;
  v17 = 1;
  return v18 | ((unint64_t)v17 << 32);
}

int64_t specialized Sequence<>.max()(uint64_t a1)
{
  unint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64x2_t v5;
  int64x2_t *v6;
  unint64_t v7;
  int64x2_t v8;
  int8x16_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t *v12;
  int64_t v13;
  int64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v5 = vdupq_n_s64(v2);
      v6 = (int64x2_t *)(a1 + 56);
      v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v5;
      do
      {
        v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v5, (int8x16_t)v6[-1]);
        v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      v9 = vbslq_s8((int8x16_t)vcgtq_s64(v5, v8), (int8x16_t)v5, (int8x16_t)v8);
      v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v9.i64[0], v10), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL))
        return v2;
    }
    else
    {
      v4 = 1;
    }
    v11 = v1 - v4;
    v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v2 <= v14)
        v2 = v13;
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v6 = a3 & 1;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, v6, isUniquelyReferenced_nonNull_native);
    *v3 = v15;
  }
  else
  {
    swift_bridgeObjectRetain();
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v6);
    v11 = v10;
    result = swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
      return result;
    v13 = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    v16 = *v4;
    *v4 = 0x8000000000000000;
    if (!v13)
    {
      specialized _NativeDictionary.copy()();
      v14 = v16;
    }
    specialized _NativeDictionary._delete(at:)(v9, v14);
    *v4 = v14;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataPB?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HandsKitDataPB(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x24BDAC7A8](v10, v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v11 + 48))(a1, 1, v10, v13) == 1)
  {
    outlined destroy of Coordinate3DPB?(a1, &demangling cache variable for type metadata for HandsKitDataPB?);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v20 = *v3;
      v25 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v20 = v25;
      }
      outlined init with take of Matrix2dPB(*(_QWORD *)(v20 + 56) + *(_QWORD *)(v11 + 72) * v18, (uint64_t)v9, type metadata accessor for HandsKitDataPB);
      specialized _NativeDictionary._delete(at:)(v18, v20);
      *v3 = v20;
      swift_bridgeObjectRelease();
      v21 = 0;
    }
    else
    {
      v21 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v21, 1, v10);
    return outlined destroy of Coordinate3DPB?((uint64_t)v9, &demangling cache variable for type metadata for HandsKitDataPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(a1, (uint64_t)v15, type metadata accessor for HandsKitDataPB);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v15, a2, v22);
    *v3 = v25;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v13 + 48))(a1, 1, v12, v15) == 1)
  {
    outlined destroy of Coordinate3DPB?(a1, &demangling cache variable for type metadata for Logger?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease();
    return outlined destroy of Coordinate3DPB?((uint64_t)v11, &demangling cache variable for type metadata for Logger?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v17, a1, v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v4;
    *v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v17, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v21;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ImageCalibrationDataPB(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x24BDAC7A8](v10, v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v11 + 48))(a1, 1, v10, v13) == 1)
  {
    outlined destroy of Coordinate3DPB?(a1, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v20 = *v3;
      v25 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v20 = v25;
      }
      outlined init with take of Matrix2dPB(*(_QWORD *)(v20 + 56) + *(_QWORD *)(v11 + 72) * v18, (uint64_t)v9, type metadata accessor for ImageCalibrationDataPB);
      specialized _NativeDictionary._delete(at:)(v18, v20);
      *v3 = v20;
      swift_bridgeObjectRelease();
      v21 = 0;
    }
    else
    {
      v21 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v21, 1, v10);
    return outlined destroy of Coordinate3DPB?((uint64_t)v9, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(a1, (uint64_t)v15, type metadata accessor for ImageCalibrationDataPB);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v15, a2, v22);
    *v3 = v25;
    return swift_bridgeObjectRelease();
  }
}

uint64_t HandsKitData.getReferenceHandByChirality(isLeft:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;

  v5 = type metadata accessor for HandDescriptor();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v2 + 160);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = v10 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v13 = *(_QWORD *)(v6 + 72);
    swift_bridgeObjectRetain();
    v14 = a1 & 1;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(v12, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if (v9[136] == v14)
        break;
      outlined destroy of Matrix3x3PB((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v12 += v13;
      if (!--v11)
        goto LABEL_7;
    }
    outlined init with take of Matrix2dPB((uint64_t)v9, a2, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v15 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    v15 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v15, 1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t specialized Array.subscript.modify(uint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  uint64_t result;

  v4 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v4;
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  v4 = result;
  *v2 = result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (*(_QWORD *)(v4 + 16) > a2)
  {
    type metadata accessor for HandDescriptor();
    return (uint64_t)_s5Hands13PoseImageCropVSgWOi_;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith19V14prewittCurrents5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v25;
  result = specialized Dictionary.startIndex.getter(a1);
  v6 = result;
  v7 = v24;
  v8 = 0;
  v9 = a1 + 64;
  v10 = a1 + 80;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v12 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_24;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 192 * v6 + 144);
    v15 = *(_QWORD *)(v25 + 16);
    v14 = *(_QWORD *)(v25 + 24);
    if (v15 >= v14 >> 1)
    {
      v22 = v9;
      v23 = v5;
      v21 = v10;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      v10 = v21;
      v9 = v22;
      v5 = v23;
      v7 = v24;
    }
    *(_QWORD *)(v25 + 16) = v15 + 1;
    *(_QWORD *)(v25 + 8 * v15 + 32) = v13;
    v11 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v11)
      goto LABEL_25;
    v16 = *(_QWORD *)(v9 + 8 * v12);
    if ((v16 & (1 << v6)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_27;
    v17 = v16 & (-2 << (v6 & 0x3F));
    if (v17)
    {
      v11 = __clz(__rbit64(v17)) | v6 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v18 = v12 + 1;
      v19 = (unint64_t)(v11 + 63) >> 6;
      if (v12 + 1 < v19)
      {
        v20 = *(_QWORD *)(v9 + 8 * v18);
        if (v20)
        {
LABEL_20:
          v11 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v12)
          {
            v20 = *(_QWORD *)(v10 + 8 * v12++);
            if (v20)
            {
              v18 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v8;
    v6 = v11;
    if (v8 == v7)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith22V17prewittPulseWidths5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v25;
  result = specialized Dictionary.startIndex.getter(a1);
  v6 = result;
  v7 = v24;
  v8 = 0;
  v9 = a1 + 64;
  v10 = a1 + 80;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v12 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_24;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 192 * v6 + 152);
    v15 = *(_QWORD *)(v25 + 16);
    v14 = *(_QWORD *)(v25 + 24);
    if (v15 >= v14 >> 1)
    {
      v22 = v9;
      v23 = v5;
      v21 = v10;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      v10 = v21;
      v9 = v22;
      v5 = v23;
      v7 = v24;
    }
    *(_QWORD *)(v25 + 16) = v15 + 1;
    *(_QWORD *)(v25 + 8 * v15 + 32) = v13;
    v11 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v11)
      goto LABEL_25;
    v16 = *(_QWORD *)(v9 + 8 * v12);
    if ((v16 & (1 << v6)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_27;
    v17 = v16 & (-2 << (v6 & 0x3F));
    if (v17)
    {
      v11 = __clz(__rbit64(v17)) | v6 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v18 = v12 + 1;
      v19 = (unint64_t)(v11 + 63) >> 6;
      if (v12 + 1 < v19)
      {
        v20 = *(_QWORD *)(v9 + 8 * v18);
        if (v20)
        {
LABEL_20:
          v11 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v12)
          {
            v20 = *(_QWORD *)(v10 + 8 * v12++);
            if (v20)
            {
              v18 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v8;
    v6 = v11;
    if (v8 == v7)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char isUniquelyReferenced_nonNull_native;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[70];
  _QWORD v47[70];
  int64_t v48;

  v40 = a2;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: HandsKitDataPB));
  MEMORY[0x24BDAC7A8](v43, v3);
  v42 = (uint64_t *)((char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v5, v6);
  v41 = (uint64_t *)((char *)&v36 - v7);
  MEMORY[0x24BDAC7A8](v8, v9);
  v39 = (char *)&v36 - v10;
  v11 = *(_QWORD *)(a1 + 64);
  v37 = a1 + 64;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v38 = (unint64_t)(v12 + 63) >> 6;
  v44 = a1;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  v18 = v42;
  v17 = v43;
  v19 = v41;
  while (1)
  {
    if (v14)
    {
      v45 = (v14 - 1) & v14;
      v48 = v16;
      v20 = __clz(__rbit64(v14)) | (v16 << 6);
      goto LABEL_5;
    }
    v32 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v32 >= v38)
      return swift_release();
    v33 = *(_QWORD *)(v37 + 8 * v32);
    v34 = v16 + 1;
    if (!v33)
    {
      v34 = v16 + 2;
      if (v16 + 2 >= v38)
        return swift_release();
      v33 = *(_QWORD *)(v37 + 8 * v34);
      if (!v33)
      {
        v34 = v16 + 3;
        if (v16 + 3 >= v38)
          return swift_release();
        v33 = *(_QWORD *)(v37 + 8 * v34);
        if (!v33)
        {
          v34 = v16 + 4;
          if (v16 + 4 >= v38)
            return swift_release();
          v33 = *(_QWORD *)(v37 + 8 * v34);
          if (!v33)
            break;
        }
      }
    }
LABEL_22:
    v45 = (v33 - 1) & v33;
    v48 = v34;
    v20 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_5:
    v21 = *(_QWORD *)(v44 + 56);
    v22 = *(_QWORD *)(*(_QWORD *)(v44 + 48) + 8 * v20);
    v23 = v21 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for HandsKitDataPB(0) - 8) + 72) * v20;
    v24 = v39;
    outlined init with copy of TrackingUpdateDataPB(v23, (uint64_t)&v39[*(int *)(v17 + 48)], type metadata accessor for HandsKitDataPB);
    *v24 = v22;
    outlined init with take of ImageData?((uint64_t)v24, (uint64_t)v19, &demangling cache variable for type metadata for (key: UInt64, value: HandsKitDataPB));
    v25 = *(int *)(v17 + 48);
    v26 = (uint64_t)v18 + v25;
    v27 = (uint64_t)v19 + v25;
    v28 = *v19;
    *v18 = *v19;
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v19 + v25, (uint64_t)v18 + v25, type metadata accessor for HandsKitDataPB);
    outlined destroy of Matrix3x3PB(v26, type metadata accessor for HandsKitDataPB);
    v29 = (uint64_t)v18 + *(int *)(v17 + 48);
    outlined init with copy of TrackingUpdateDataPB(v27, v29, type metadata accessor for HandsKitDataPB);
    HandsKitData.init(protoBuf:)(v29, v46);
    memcpy(v47, v46, 0x228uLL);
    outlined retain of HandsKitData(v47);
    v30 = v40;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v46[0] = *v30;
    *v30 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v47, v28, isUniquelyReferenced_nonNull_native);
    *v30 = v46[0];
    swift_bridgeObjectRelease();
    outlined release of HandsKitData(v47);
    result = outlined destroy of Coordinate3DPB?((uint64_t)v19, &demangling cache variable for type metadata for (key: UInt64, value: HandsKitDataPB));
    v16 = v48;
    v14 = v45;
  }
  v35 = v16 + 5;
  if (v16 + 5 >= v38)
    return swift_release();
  v33 = *(_QWORD *)(v37 + 8 * v35);
  if (v33)
  {
    v34 = v16 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v34 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v34 >= v38)
      return swift_release();
    v33 = *(_QWORD *)(v37 + 8 * v34);
    ++v35;
    if (v33)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void *HandsKitData.init(protoBufData:withoutImage:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *result;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _BYTE v48[576];

  v44 = a4;
  v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v7, v8);
  v9 = type metadata accessor for HandsKitDataPB(0);
  v11 = MEMORY[0x24BDAC7A8](v9, v10);
  v41 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)&v41 - v14;
  memset(v48, 0, 40);
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
  v42 = a1;
  v43 = a2;
  Message.init(serializedData:extensions:partial:options:)();
  if ((a3 & 1) != 0
    && (v16 = *(int *)(v9 + 20),
        v17 = *(_QWORD *)&v15[v16]
            + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages,
        swift_beginAccess(),
        (v18 = *(_QWORD *)(*(_QWORD *)v17 + 16)) != 0))
  {
    v19 = 0;
    v47 = xmmword_23D9AB950;
    while (1)
    {
      v21 = (unint64_t *)(*(_QWORD *)&v15[v16]
                               + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages);
      swift_beginAccess();
      v22 = *v21;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      if (v19 >= *(_QWORD *)(v22 + 16))
        break;
      v23 = type metadata accessor for ImageDataPB(0);
      v24 = *(_QWORD *)(v23 - 8);
      v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v26 = *(_QWORD *)(v24 + 72) * v19;
      v27 = v22 + v25 + *(int *)(v23 + 44);
      v46 = v26;
      v28 = (uint64_t *)(v27 + v26);
      v29 = *v28;
      v30 = v28[1];
      *(_OWORD *)v28 = v47;
      outlined consume of Data?(v29, v30);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsKitDataPB._StorageClass(0);
        swift_allocObject();
        v45 = v23;
        v31 = swift_retain();
        v23 = v45;
        *(_QWORD *)&v15[v16] = HandsKitDataPB._StorageClass.init(copying:)(v31);
        swift_release();
      }
      v32 = (unint64_t *)(*(_QWORD *)&v15[v16]
                               + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages);
      swift_beginAccess();
      *v32 = v22;
      swift_bridgeObjectRelease();
      v33 = (unint64_t *)(*(_QWORD *)&v15[v16]
                               + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages);
      swift_beginAccess();
      v34 = *v33;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
      if (v19 >= *(_QWORD *)(v34 + 16))
        goto LABEL_17;
      v35 = (uint64_t *)(v34 + v25 + *(int *)(v23 + 48) + v46);
      v36 = *v35;
      v37 = v35[1];
      *(_OWORD *)v35 = v47;
      outlined consume of Data?(v36, v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandsKitDataPB._StorageClass(0);
        swift_allocObject();
        v38 = swift_retain();
        *(_QWORD *)&v15[v16] = HandsKitDataPB._StorageClass.init(copying:)(v38);
        swift_release();
      }
      ++v19;
      v20 = (unint64_t *)(*(_QWORD *)&v15[v16]
                               + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages);
      swift_beginAccess();
      *v20 = v34;
      swift_bridgeObjectRelease();
      if (v18 == v19)
        goto LABEL_15;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    result = (void *)swift_unexpectedError();
    __break(1u);
  }
  else
  {
LABEL_15:
    v39 = v41;
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v15, v41, type metadata accessor for HandsKitDataPB);
    HandsKitData.init(protoBuf:)(v39, v48);
    outlined consume of Data._Representation(v42, v43);
    outlined destroy of Matrix3x3PB((uint64_t)v15, type metadata accessor for HandsKitDataPB);
    return memcpy(v44, v48, 0x228uLL);
  }
  return result;
}

uint64_t HandsKitData.masterCameraTimestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 344);
}

int64_t HandsKitData.prewittCurrent.getter()
{
  return HandsKitData.prewittCurrent.getter((uint64_t (*)(uint64_t, uint64_t *))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith19V14prewittCurrents5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n);
}

int64_t HandsKitData.prewittPulseWidth.getter()
{
  return HandsKitData.prewittCurrent.getter((uint64_t (*)(uint64_t, uint64_t *))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOAF9ImageDataVG_s5Int64Vs5NeverOTg5014_s5Hands0A7Kith22V17prewittPulseWidths5i8VvgAfA12ef10O3key_AA05G17C0V5valuet_tXEfU_Tf1cn_n);
}

int64_t HandsKitData.prewittCurrent.getter(uint64_t (*a1)(uint64_t, uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64x2_t v8;
  int64x2_t *v9;
  unint64_t v10;
  int64x2_t v11;
  int8x16_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t *v15;
  int64_t v16;
  int64_t v17;
  uint64_t v19;

  v2 = swift_bridgeObjectRetain();
  v3 = a1(v2, &v19);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    v5 = -1;
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 32);
  v6 = v4 - 1;
  if (v4 != 1)
  {
    if (v4 >= 5)
    {
      v7 = v6 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v8 = vdupq_n_s64(v5);
      v9 = (int64x2_t *)(v3 + 56);
      v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v11 = v8;
      do
      {
        v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, v9[-1]), (int8x16_t)v8, (int8x16_t)v9[-1]);
        v11 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v11, *v9), (int8x16_t)v11, *(int8x16_t *)v9);
        v9 += 2;
        v10 -= 4;
      }
      while (v10);
      v12 = vbslq_s8((int8x16_t)vcgtq_s64(v8, v11), (int8x16_t)v8, (int8x16_t)v11);
      v13 = vextq_s8(v12, v12, 8uLL).u64[0];
      v5 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v12.i64[0], v13), *(int8x8_t *)v12.i8, (int8x8_t)v13);
      if (v6 == (v6 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_13;
    }
    else
    {
      v7 = 1;
    }
    v14 = v4 - v7;
    v15 = (int64_t *)(v3 + 8 * v7 + 32);
    do
    {
      v17 = *v15++;
      v16 = v17;
      if (v5 <= v17)
        v5 = v16;
      --v14;
    }
    while (v14);
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return v5;
}

void HandsKitData.recordRejected(hands:reason:save:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t (*v21)();
  int64_t v22;
  int v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  int64_t v39;
  uint64_t *v40;
  _BYTE *v41;
  uint64_t (*v42)();
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  _QWORD *v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[4];
  int v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t *v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  unsigned __int8 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;

  v4 = v3;
  v8 = type metadata accessor for RejectedHand();
  v97 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v9);
  v98 = &v90[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for HandDescriptor();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v96 = &v90[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = &v90[-v17];
  *(_QWORD *)&v102 = *(_QWORD *)a2;
  LODWORD(v101) = *(unsigned __int8 *)(a2 + 8);
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v91 = a3;
    v95 = v8;
    v20 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v92 = v12;
    v99 = *(_QWORD *)(v12 + 72);
    v93 = a1;
    swift_bridgeObjectRetain();
    v21 = type metadata accessor for HandDescriptor;
    v94 = v19;
    v22 = v19;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(v20, (uint64_t)v18, (uint64_t (*)(_QWORD))v21);
      v23 = v18[136];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v104 = v4[68];
      v25 = v104;
      v4[68] = 0x8000000000000000;
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
      v28 = *(_QWORD *)(v25 + 16);
      v29 = (v26 & 1) == 0;
      v30 = v28 + v29;
      if (__OFADD__(v28, v29))
        break;
      v31 = v26;
      if (*(_QWORD *)(v25 + 24) >= v30)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v25 = v104;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, isUniquelyReferenced_nonNull_native);
        v25 = v104;
        v32 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
        if ((v31 & 1) != (v33 & 1))
          goto LABEL_44;
        v27 = v32;
      }
      v4[68] = v25;
      swift_bridgeObjectRelease();
      v34 = (_QWORD *)v4[68];
      swift_bridgeObjectRetain();
      if ((v31 & 1) == 0)
      {
        v35 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v34[(v27 >> 6) + 8] |= 1 << v27;
        *(_BYTE *)(v34[6] + v27) = v23;
        *(_QWORD *)(v34[7] + 8 * v27) = v35;
        v36 = v34[2];
        v37 = __OFADD__(v36, 1);
        v38 = v36 + 1;
        if (v37)
          goto LABEL_42;
        v34[2] = v38;
      }
      v100 = (uint64_t *)v20;
      v39 = v22;
      v40 = v4;
      v41 = v18;
      v42 = v21;
      v43 = v34[7];
      swift_bridgeObjectRelease();
      v44 = 8 * v27;
      v45 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v104 = *(_QWORD *)(v43 + v44);
      v46 = v104;
      *(_QWORD *)(v43 + v44) = 0x8000000000000000;
      v48 = specialized __RawDictionaryStorage.find<A>(_:)(v102, v101);
      v49 = *(_QWORD *)(v46 + 16);
      v50 = (v47 & 1) == 0;
      v51 = v49 + v50;
      if (__OFADD__(v49, v50))
        goto LABEL_40;
      v52 = v47;
      if (*(_QWORD *)(v46 + 24) >= v51)
      {
        if ((v45 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v46 = v104;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, v45);
        v46 = v104;
        v53 = specialized __RawDictionaryStorage.find<A>(_:)(v102, v101);
        if ((v52 & 1) != (v54 & 1))
          goto LABEL_45;
        v48 = v53;
      }
      *(_QWORD *)(v43 + v44) = v46;
      swift_bridgeObjectRelease();
      v55 = *(_QWORD **)(v43 + v44);
      v21 = v42;
      v18 = v41;
      v4 = v40;
      v56 = v39;
      v57 = v100;
      if ((v52 & 1) == 0)
      {
        v55[(v48 >> 6) + 8] |= 1 << v48;
        v58 = v55[6] + 16 * v48;
        *(_QWORD *)v58 = v102;
        *(_BYTE *)(v58 + 8) = v101;
        *(_QWORD *)(v55[7] + 8 * v48) = 0;
        v59 = v55[2];
        v37 = __OFADD__(v59, 1);
        v60 = v59 + 1;
        if (v37)
          goto LABEL_43;
        v55[2] = v60;
      }
      v61 = v55[7];
      v62 = *(_QWORD *)(v61 + 8 * v48);
      v63 = __CFADD__(v62, 1);
      v64 = v62 + 1;
      if (v63)
        goto LABEL_41;
      *(_QWORD *)(v61 + 8 * v48) = v64;
      outlined destroy of Matrix3x3PB((uint64_t)v18, (uint64_t (*)(_QWORD))v21);
      v20 = (uint64_t)v57 + v99;
      v22 = v56 - 1;
      if (!v22)
      {
        a1 = v93;
        swift_bridgeObjectRelease();
        v19 = v94;
        v8 = v95;
        v12 = v92;
        LOBYTE(a3) = v91;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_45:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_24:
    if ((a3 & 1) != 0)
    {
      v65 = v4[1];
      v66 = MEMORY[0x24BEE4AF8];
      if (v65)
      {
        v67 = v4[1];
        v68 = v4[2];
        v69 = v4[3];
        v70 = v4[4];
        v71 = v4[5];
        v72 = v4[6];
        v73 = v4[7];
        v74 = v4[8];
      }
      else
      {
        v68 = 0;
        v69 = 0;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        LOBYTE(v70) = 2;
        v67 = MEMORY[0x24BEE4AF8];
        v74 = MEMORY[0x24BEE4AF8];
      }
      *(_QWORD *)&v104 = v67;
      *((_QWORD *)&v104 + 1) = v68;
      v105 = v69;
      v106 = v70;
      *(_QWORD *)&v107 = v71;
      *((_QWORD *)&v107 + 1) = v72;
      v108 = v73;
      v109 = v74;
      if (v19)
      {
        v100 = &v109;
        outlined copy of HandsKitDataInternal?(v65);
        v103 = v66;
        v75 = a1;
        v76 = v19;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
        v77 = v75 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
        v78 = *(_QWORD *)(v12 + 72);
        v79 = v103;
        v80 = (uint64_t)v98;
        do
        {
          v81 = v96;
          outlined init with copy of TrackingUpdateDataPB(v77, (uint64_t)v96, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          outlined init with copy of TrackingUpdateDataPB((uint64_t)v81, v80, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          v82 = v80 + *(int *)(v8 + 20);
          *(_QWORD *)v82 = v102;
          *(_BYTE *)(v82 + 8) = v101;
          outlined destroy of Matrix3x3PB((uint64_t)v81, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v79 + 16) + 1, 1);
            v79 = v103;
          }
          v84 = *(_QWORD *)(v79 + 16);
          v83 = *(_QWORD *)(v79 + 24);
          v85 = (uint64_t)v98;
          if (v84 >= v83 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
            v85 = (uint64_t)v98;
            v79 = v103;
          }
          *(_QWORD *)(v79 + 16) = v84 + 1;
          v80 = v85;
          outlined init with take of Matrix2dPB(v85, v79+ ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80))+ *(_QWORD *)(v97 + 72) * v84, (uint64_t (*)(_QWORD))type metadata accessor for RejectedHand);
          v77 += v78;
          --v76;
        }
        while (v76);
      }
      else
      {
        outlined copy of HandsKitDataInternal?(v65);
        v79 = MEMORY[0x24BEE4AF8];
      }
      specialized Array.append<A>(contentsOf:)(v79);
      v86 = v105;
      v87 = v106;
      v101 = v107;
      v102 = v104;
      v88 = v108;
      v89 = v109;
      outlined consume of HandsKitDataInternal?(v4[1]);
      *(_OWORD *)(v4 + 1) = v102;
      v4[3] = v86;
      v4[4] = v87;
      *(_OWORD *)(v4 + 5) = v101;
      v4[7] = v88;
      v4[8] = v89;
    }
  }
}

uint64_t HandsKitData.getHandByChirality(isLeft:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;

  v5 = type metadata accessor for HandDescriptor();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  v11 = *(_QWORD *)(*v2 + 16);
  if (v11)
  {
    v12 = v10 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v13 = *(_QWORD *)(v6 + 72);
    swift_bridgeObjectRetain();
    v14 = a1 & 1;
    while (1)
    {
      outlined init with copy of TrackingUpdateDataPB(v12, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if (v9[136] == v14)
        break;
      outlined destroy of Matrix3x3PB((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v12 += v13;
      if (!--v11)
        goto LABEL_7;
    }
    outlined init with take of Matrix2dPB((uint64_t)v9, a2, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    v15 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    v15 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v15, 1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t static HandsKitData.VERSION.getter()
{
  return 2;
}

uint64_t HandsKitData.hands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandsKitData.hands.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*HandsKitData.hands.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsKitData.internalData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  return outlined copy of HandsKitDataInternal?(v2);
}

__n128 HandsKitData.internalData.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;

  v6 = a1[1];
  v7 = *a1;
  v5 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a1 + 7);
  outlined consume of HandsKitDataInternal?(*(_QWORD *)(v1 + 8));
  *(_OWORD *)(v1 + 8) = v7;
  *(_OWORD *)(v1 + 24) = v6;
  result = v5;
  *(__n128 *)(v1 + 40) = v5;
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = v3;
  return result;
}

uint64_t (*HandsKitData.internalData.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsKitData.enrollmentResult.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(_BYTE *)(v1 + 80);
  v3 = *(_DWORD *)(v1 + 84);
  v4 = *(_QWORD *)(v1 + 96);
  v5 = *(_QWORD *)(v1 + 104);
  v6 = *(_QWORD *)(v1 + 112);
  v7 = *(_QWORD *)(v1 + 120);
  v8 = *(_QWORD *)(v1 + 128);
  v9 = *(_BYTE *)(v1 + 136);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 72);
  *(_BYTE *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 HandsKitData.enrollmentResult.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  char v7;
  __n128 result;
  __int128 v9;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_DWORD *)a1 + 3);
  v6 = a1[7];
  v7 = *((_BYTE *)a1 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 80) = v4;
  *(_DWORD *)(v1 + 84) = v5;
  *(_QWORD *)(v1 + 88) = a1[2];
  result = *(__n128 *)(a1 + 3);
  v9 = *(_OWORD *)(a1 + 5);
  *(__n128 *)(v1 + 96) = result;
  *(_OWORD *)(v1 + 112) = v9;
  *(_QWORD *)(v1 + 128) = v6;
  *(_BYTE *)(v1 + 136) = v7;
  return result;
}

uint64_t (*HandsKitData.enrollmentResult.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsKitData.detectionOutputs.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 152);
  *a1 = *(_QWORD *)(v1 + 144);
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 HandsKitData.detectionOutputs.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *a1;
  v1[9] = *a1;
  return result;
}

uint64_t (*HandsKitData.detectionOutputs.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsKitData.referenceHands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandsKitData.referenceHands.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 160) = a1;
  return result;
}

uint64_t (*HandsKitData.referenceHands.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsKitData.detectionSpecs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandsKitData.detectionSpecs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 168) = a1;
  return result;
}

uint64_t (*HandsKitData.detectionSpecs.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandsKitData.version.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 176);
}

uint64_t HandsKitData.sessionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HandsKitData.imageData.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 HandsKitData.worldPoseTransform.getter()
{
  __n128 *v0;

  return v0[13];
}

__n128 HandsKitData.worldPoseInverseTransform.getter()
{
  __n128 *v0;

  return v0[17];
}

__n128 HandsKitData.frame.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)(v1 + 336);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v1 + 352);
  v2 = *(_OWORD *)(v1 + 376);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 360);
  v3 = *(_BYTE *)(v1 + 392);
  v4 = *(_QWORD *)(v1 + 396);
  v5 = *(_BYTE *)(v1 + 444);
  v6 = *(_QWORD *)(v1 + 448);
  *(_OWORD *)(a1 + 40) = v2;
  *(_BYTE *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 60) = v4;
  *(_QWORD *)(a1 + 68) = *(_QWORD *)(v1 + 404);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(v1 + 412);
  result = *(__n128 *)(v1 + 428);
  *(__n128 *)(a1 + 92) = result;
  *(_BYTE *)(a1 + 108) = v5;
  *(_QWORD *)(a1 + 112) = v6;
  return result;
}

uint64_t HandsKitData.signpostTimestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 456);
}

uint64_t HandsKitData.isDroppedFrame.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 464);
}

uint64_t HandsKitData.mcamLeftCalibration.getter()
{
  return swift_retain();
}

uint64_t HandsKitData.mcamRightCalibration.getter()
{
  return swift_retain();
}

uint64_t HandsKitData.cameraImages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandsKitData.objectInteractionInfoByHandID.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[62];
  v3 = v1[63];
  v4 = v1[64];
  v5 = v1[65];
  v6 = v1[66];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return outlined copy of ObjectInteractionResultsByHand?(v2, v3, v4, v5);
}

uint64_t HandsKitData.frameID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 336);
}

void HandsKitData.init()(uint64_t a1@<X8>)
{
  CMTimeValue *v2;
  uint64_t v3;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeValue v8;
  CMTimeValue v9;
  CMTimeValue v10;
  uint64_t v11;
  uint64_t v12;
  CFTimeInterval v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  CMTime v20;
  char v21;
  char v22;

  v2 = (CMTimeValue *)(a1 + 396);
  v3 = MEMORY[0x24BEE4AF8];
  v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  CMTimeMakeWithSeconds(&v20, 0.0, 1000000);
  value = v20.value;
  timescale = v20.timescale;
  flags = v20.flags;
  epoch = v20.epoch;
  v8 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 8);
  v9 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 16);
  v10 = *MEMORY[0x24BDC0D88];
  v18 = specialized Dictionary.init(dictionaryLiteral:)(v3);
  v16 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v17 = *MEMORY[0x24BDAEE00];
  v14 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v15 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  CMTime.seconds.getter();
  v12 = v11;
  v13 = CACurrentMediaTime();
  v22 = 0;
  v21 = 0;
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 1;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v3;
  *(_DWORD *)(a1 + 84) = 1038657310;
  *(_QWORD *)(a1 + 104) = v3;
  *(_QWORD *)(a1 + 112) = v3;
  *(_QWORD *)(a1 + 120) = v3;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  *(_QWORD *)(a1 + 144) = v3;
  *(_QWORD *)(a1 + 152) = v3;
  *(_QWORD *)(a1 + 160) = v3;
  *(_QWORD *)(a1 + 168) = v3;
  *(_DWORD *)(a1 + 176) = 2;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0xE000000000000000;
  *(_QWORD *)(a1 + 200) = v18;
  *(_OWORD *)(a1 + 208) = v17;
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v15;
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 272) = v17;
  *(_OWORD *)(a1 + 288) = v16;
  *(_OWORD *)(a1 + 304) = v15;
  *(_OWORD *)(a1 + 320) = v14;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = value;
  *(_DWORD *)(a1 + 352) = timescale;
  *(_DWORD *)(a1 + 356) = flags;
  *(_QWORD *)(a1 + 360) = epoch;
  *(_QWORD *)(a1 + 368) = v10;
  *(_QWORD *)(a1 + 376) = v8;
  *(_QWORD *)(a1 + 384) = v9;
  *(_BYTE *)(a1 + 392) = v22;
  *v2 = value;
  *(_DWORD *)(a1 + 404) = timescale;
  *(_DWORD *)(a1 + 408) = flags;
  v2[2] = epoch;
  v2[3] = v10;
  v2[4] = v8;
  v2[5] = v9;
  *(_BYTE *)(a1 + 444) = v21;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = v12;
  *(_BYTE *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = v3;
  *(_QWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(CFTimeInterval *)(a1 + 536) = v13;
  *(_QWORD *)(a1 + 544) = v19;
}

_QWORD *HandsKitData.init(protoBuf:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int *v81;
  CMTimeValue v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  CMTimeValue *v91;
  CMTimeValue v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  CMTimeValue *v112;
  CMTimeValue v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(uint64_t, uint64_t, uint64_t);
  simd_float4 v117;
  simd_float4 v118;
  simd_float4 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int64_t i;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  _OWORD *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  int64_t v147;
  uint64_t v148;
  uint64_t v149;
  int64_t v150;
  uint64_t j;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  char v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int *v179;
  _DWORD *v180;
  int *v181;
  char *v182;
  uint64_t v183;
  void (*v184)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v185;
  _DWORD *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int *v199;
  uint64_t (*v200)(uint64_t, uint64_t, int *);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t (*v216)(uint64_t, uint64_t, uint64_t);
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  char v244;
  char v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  CFTimeInterval v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  char v262;
  CMTimeValue v263;
  int v264;
  char *v265;
  _QWORD *v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  uint64_t v278;
  int v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  int *v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  unint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _DWORD *v296;
  simd_float4 v297;
  simd_float4 v298;
  simd_float4 v299;
  simd_float4 v300;
  simd_float4 v301;
  simd_float4 v302;
  simd_float4 v303;
  simd_float4 v304;
  CMTimeValue v305;
  int v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  char *epoch;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  CMTimeValue value;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _OWORD v325[35];
  _BYTE v326[200];
  uint64_t v327;
  simd_float4 v328;
  simd_float4 v329;
  simd_float4 v330;
  simd_float4 v331;
  simd_float4 v332;
  simd_float4 v333;
  simd_float4 v334;
  simd_float4 v335;
  CMTimeValue v336;
  CMTimeValue v337;
  int v338;
  int v339;
  char *v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  _DWORD v344[14];
  uint64_t v345;
  uint64_t v346;
  char v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  CFTimeInterval v354;
  unint64_t v355;
  uint64_t v356;
  _QWORD v357[45];
  char v358;
  char v359;
  char v360;
  char v361;
  char v362;
  simd_float4x4_optional v363;
  simd_float4x4 v364;
  char v365;
  CMTime v366;
  simd_float4x4 v367;

  v286 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v287 = (unint64_t)&v272 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DetectionResultsByChiralityPB(0);
  v284 = *(_QWORD *)(v6 - 8);
  v285 = v6;
  MEMORY[0x24BDAC7A8](v6, v7);
  v288 = (uint64_t *)((char *)&v272 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v292 = type metadata accessor for ImageCalibrationDataPB(0);
  v290 = *(_QWORD *)(v292 - 8);
  v10 = MEMORY[0x24BDAC7A8](v292, v9);
  v277 = (char *)&v272 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10, v12);
  v276 = (uint64_t)&v272 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v16 = MEMORY[0x24BDAC7A8](v14, v15);
  v274 = (uint64_t)&v272 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16, v18);
  v291 = (uint64_t)&v272 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19, v21);
  v275 = (uint64_t)&v272 - v23;
  MEMORY[0x24BDAC7A8](v22, v24);
  v289 = (uint64_t)&v272 - v25;
  v26 = type metadata accessor for HandsKitDataInternalPB(0);
  v282 = *(_QWORD *)(v26 - 8);
  v283 = (int *)v26;
  MEMORY[0x24BDAC7A8](v26, v27);
  v278 = (uint64_t)&v272 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataInternalPB?);
  v31 = MEMORY[0x24BDAC7A8](v29, v30);
  v273 = (uint64_t)&v272 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31, v33);
  v281 = (uint64_t)&v272 - v34;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentResultsPB?);
  MEMORY[0x24BDAC7A8](v35, v36);
  v295 = (uint64_t)&v272 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for EnrollmentResultsPB(0);
  v293 = *(_QWORD *)(v38 - 8);
  v294 = v38;
  MEMORY[0x24BDAC7A8](v38, v39);
  v296 = (_DWORD *)((char *)&v272 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = type metadata accessor for ImageDataPB(0);
  v308 = *(_QWORD *)(v41 - 8);
  v43 = MEMORY[0x24BDAC7A8](v41, v42);
  v322 = (unint64_t)&v272 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v43, v45);
  v321 = (uint64_t)&v272 - v46;
  v47 = type metadata accessor for Matrix2dPB(0);
  v313 = *(_QWORD *)(v47 - 8);
  v314 = v47;
  MEMORY[0x24BDAC7A8](v47, v48);
  v304.i64[0] = (uint64_t)&v272 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  v52 = MEMORY[0x24BDAC7A8](v50, v51);
  v303.i64[0] = (uint64_t)&v272 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v52, v54);
  v312 = (uint64_t)&v272 - v55;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v56, v57);
  v315 = (unint64_t)&v272 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for CMTimeProtobuf(0);
  v310 = *(_QWORD *)(v59 - 8);
  v311 = v59;
  MEMORY[0x24BDAC7A8](v59, v60);
  epoch = (char *)&v272 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for HandDescriptorPB(0);
  v63 = *(_QWORD *)(v62 - 8);
  v65 = MEMORY[0x24BDAC7A8](v62, v64);
  v324 = (uint64_t)&v272 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v65, v67);
  v69 = (char *)&v272 - v68;
  v70 = type metadata accessor for HandDescriptor();
  v71 = *(_QWORD *)(v70 - 8);
  v73 = MEMORY[0x24BDAC7A8](v70, v72);
  v323 = (uint64_t)&v272 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v73, v75);
  v77 = (char *)&v272 - v76;
  v358 = 0;
  v78 = MEMORY[0x24BEE4AF8];
  v79 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v318 = *(int *)(type metadata accessor for HandsKitDataPB(0) + 20);
  v319 = a1;
  v80 = *(_QWORD *)(a1 + v318);
  v81 = (int *)(v80 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__version);
  swift_beginAccess();
  v306 = *v81;
  swift_beginAccess();
  v82 = *(_QWORD *)(v80 + 16);
  v83 = *(_QWORD *)(v82 + 16);
  v307 = v79;
  v309 = v63;
  if (v83)
  {
    *(_QWORD *)v326 = v78;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83, 0);
    v84 = *(unsigned __int8 *)(v63 + 80);
    v305 = v82;
    v85 = v82 + ((v84 + 32) & ~v84);
    value = *(_QWORD *)(v63 + 72);
    v86 = *(_QWORD *)v326;
    do
    {
      outlined init with copy of TrackingUpdateDataPB(v85, (uint64_t)v69, type metadata accessor for HandDescriptorPB);
      v87 = v324;
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v69, v324, type metadata accessor for HandDescriptorPB);
      HandDescriptor.init(protoBuf:)(v87, (uint64_t)v77);
      outlined destroy of Matrix3x3PB((uint64_t)v69, type metadata accessor for HandDescriptorPB);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v86 + 16) + 1, 1);
        v86 = *(_QWORD *)v326;
      }
      v89 = *(_QWORD *)(v86 + 16);
      v88 = *(_QWORD *)(v86 + 24);
      if (v89 >= v88 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v88 > 1, v89 + 1, 1);
        v86 = *(_QWORD *)v326;
      }
      *(_QWORD *)(v86 + 16) = v89 + 1;
      outlined init with take of Matrix2dPB((uint64_t)v77, v86+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72) * v89, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v85 += value;
      --v83;
    }
    while (v83);
    v317 = v86;
    swift_bridgeObjectRelease();
    v80 = *(_QWORD *)(v319 + v318);
    v90 = v314;
    v78 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRetain();
    v317 = MEMORY[0x24BEE4AF8];
    v90 = v314;
  }
  v91 = (CMTimeValue *)(v80
                      + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__refHandDescriptors);
  swift_beginAccess();
  v92 = *v91;
  v93 = *(_QWORD *)(*v91 + 16);
  v94 = v309;
  if (v93)
  {
    *(_QWORD *)v326 = v78;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v93, 0);
    v95 = *(unsigned __int8 *)(v94 + 80);
    value = v92;
    v96 = v92 + ((v95 + 32) & ~v95);
    v97 = *(_QWORD *)(v94 + 72);
    v98 = *(_QWORD *)v326;
    v99 = v323;
    do
    {
      outlined init with copy of TrackingUpdateDataPB(v96, (uint64_t)v69, type metadata accessor for HandDescriptorPB);
      v100 = v324;
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v69, v324, type metadata accessor for HandDescriptorPB);
      HandDescriptor.init(protoBuf:)(v100, v99);
      outlined destroy of Matrix3x3PB((uint64_t)v69, type metadata accessor for HandDescriptorPB);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v98 + 16) + 1, 1);
        v98 = *(_QWORD *)v326;
      }
      v102 = *(_QWORD *)(v98 + 16);
      v101 = *(_QWORD *)(v98 + 24);
      if (v102 >= v101 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v101 > 1, v102 + 1, 1);
        v98 = *(_QWORD *)v326;
      }
      *(_QWORD *)(v98 + 16) = v102 + 1;
      v103 = v98
           + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))
           + *(_QWORD *)(v71 + 72) * v102;
      v99 = v323;
      outlined init with take of Matrix2dPB(v323, v103, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v96 += v97;
      --v93;
    }
    while (v93);
    v324 = v98;
    swift_bridgeObjectRelease();
    v90 = v314;
  }
  else
  {
    swift_bridgeObjectRetain();
    v324 = MEMORY[0x24BEE4AF8];
  }
  v105 = v315;
  v104 = (uint64_t)epoch;
  v107 = v310;
  v106 = v311;
  v109 = v318;
  v108 = v319;
  v110 = *(_QWORD *)(v319 + v318);
  v111 = v110
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__masterCameraTimestamp;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v111, v105, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v105, 1, v106) == 1)
  {
    *(_QWORD *)v104 = 0;
    *(_DWORD *)(v104 + 8) = 0;
    swift_bridgeObjectRetain();
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v105, &demangling cache variable for type metadata for CMTimeProtobuf?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v105, v104, type metadata accessor for CMTimeProtobuf);
    swift_bridgeObjectRetain();
  }
  v366 = CMTime.init(value:timescale:)(*(_QWORD *)v104, *(_DWORD *)(v104 + 8));
  value = v366.value;
  v315 = *(_QWORD *)&v366.timescale;
  epoch = (char *)v366.epoch;
  outlined destroy of Matrix3x3PB(v104, type metadata accessor for CMTimeProtobuf);
  v112 = (CMTimeValue *)(v110
                       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__frameID);
  swift_beginAccess();
  v113 = *v112;
  if (!*v112)
  {
    v113 = value;
    if (value < 0)
    {
LABEL_98:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x23D73556CLL);
    }
  }
  v305 = v113;
  v360 = 0;
  v359 = 0;
  v362 = 1;
  v361 = 1;
  v114 = v110
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__worldPoseTransform;
  swift_beginAccess();
  v115 = v312;
  outlined init with copy of (Int32, Matrix2dPB)(v114, v312, &demangling cache variable for type metadata for Matrix2dPB?);
  v116 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v313 + 48);
  LODWORD(v114) = v116(v115, 1, v90);
  outlined destroy of Coordinate3DPB?(v115, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((_DWORD)v114 == 1)
  {
    v117 = *(simd_float4 *)MEMORY[0x24BDAEE00];
    v118 = *(simd_float4 *)(MEMORY[0x24BDAEE00] + 32);
    v119 = *(simd_float4 *)(MEMORY[0x24BDAEE00] + 48);
    v303 = *(simd_float4 *)(MEMORY[0x24BDAEE00] + 16);
    v304 = v117;
    v299 = v303;
    v300 = v117;
    v301 = v119;
    v302 = v118;
    v297 = v119;
    v298 = v118;
  }
  else
  {
    v120 = v110
         + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__worldPoseTransform;
    swift_beginAccess();
    v121 = v303.i64[0];
    outlined init with copy of (Int32, Matrix2dPB)(v120, v303.i64[0], &demangling cache variable for type metadata for Matrix2dPB?);
    if (v116(v121, 1, v90) == 1)
    {
      v122 = v304.i64[0];
      v123 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)v304.i64[0] = MEMORY[0x24BEE4AF8];
      *(_BYTE *)(v122 + 8) = 0;
      *(_QWORD *)(v122 + 16) = v123;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v121, &demangling cache variable for type metadata for Matrix2dPB?);
    }
    else
    {
      v122 = v304.i64[0];
      outlined init with take of Matrix2dPB(v121, v304.i64[0], type metadata accessor for Matrix2dPB);
    }
    specialized Matrix2d.init(protoBuf:)((_QWORD *)v122);
    Matrix2d.toSimd4x4Float()(&v363);
    swift_bridgeObjectRelease();
    outlined init with take of ImageData?((uint64_t)&v363, (uint64_t)&v364, &demangling cache variable for type metadata for simd_float4x4?);
    if ((v365 & 1) != 0)
    {
LABEL_97:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_98;
    }
    v303 = v364.columns[1];
    v304 = v364.columns[0];
    v301 = v364.columns[3];
    v302 = v364.columns[2];
    v367 = __invert_f4(v364);
    v299 = v367.columns[1];
    v300 = v367.columns[0];
    v297 = v367.columns[3];
    v298 = v367.columns[2];
    v110 = *(_QWORD *)(v108 + v109);
  }
  v124 = (uint64_t *)(v110
                   + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages);
  swift_beginAccess();
  v125 = *v124;
  v126 = *(_QWORD *)(*v124 + 16);
  v127 = MEMORY[0x24BEE4AF8];
  if (v126)
  {
    v356 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v126, 0);
    v128 = *(unsigned __int8 *)(v308 + 80);
    v323 = v125;
    v129 = v125 + ((v128 + 32) & ~v128);
    v130 = *(_QWORD *)(v308 + 72);
    for (i = v126 - 1; ; --i)
    {
      v132 = v321;
      outlined init with copy of TrackingUpdateDataPB(v129, v321, type metadata accessor for ImageDataPB);
      v133 = v322;
      outlined init with copy of TrackingUpdateDataPB(v132, v322, type metadata accessor for ImageDataPB);
      ImageData.init(protoBuf:)(v133, (uint64_t)v357);
      outlined init with take of ImageData?((uint64_t)v357, (uint64_t)v325, &demangling cache variable for type metadata for ImageData?);
      outlined init with take of ImageData?((uint64_t)v325, (uint64_t)v326, &demangling cache variable for type metadata for ImageData?);
      if (_s5Hands9ImageDataVSgWOg((uint64_t)v326) == 1)
        break;
      outlined destroy of Matrix3x3PB(v132, type metadata accessor for ImageDataPB);
      v134 = v356;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v134 + 16) + 1, 1);
        v134 = v356;
      }
      v136 = *(_QWORD *)(v134 + 16);
      v135 = *(_QWORD *)(v134 + 24);
      if (v136 >= v135 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v135 > 1, v136 + 1, 1);
        v134 = v356;
      }
      *(_QWORD *)(v134 + 16) = v136 + 1;
      v137 = (_OWORD *)(v134 + 192 * v136);
      v138 = *(_OWORD *)v326;
      v139 = *(_OWORD *)&v326[16];
      v140 = *(_OWORD *)&v326[48];
      v137[4] = *(_OWORD *)&v326[32];
      v137[5] = v140;
      v137[2] = v138;
      v137[3] = v139;
      v141 = *(_OWORD *)&v326[64];
      v142 = *(_OWORD *)&v326[80];
      v143 = *(_OWORD *)&v326[112];
      v137[8] = *(_OWORD *)&v326[96];
      v137[9] = v143;
      v137[6] = v141;
      v137[7] = v142;
      v144 = *(_OWORD *)&v326[128];
      v145 = *(_OWORD *)&v326[144];
      v146 = *(_OWORD *)&v326[176];
      v137[12] = *(_OWORD *)&v326[160];
      v137[13] = v146;
      v137[10] = v144;
      v137[11] = v145;
      if (!i)
      {
        swift_bridgeObjectRelease();
        v109 = v318;
        v108 = v319;
        v127 = MEMORY[0x24BEE4AF8];
        goto LABEL_42;
      }
      v129 += v130;
    }
    __break(1u);
    goto LABEL_97;
  }
  v134 = MEMORY[0x24BEE4AF8];
LABEL_42:
  v147 = *(_QWORD *)(v134 + 16);
  v308 = v134;
  if (v147)
  {
    v357[0] = v127;
    swift_bridgeObjectRetain_n();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v147, 0);
    v148 = v308;
    v149 = v357[0];
    v150 = v147 - 1;
    for (j = 32; ; j += 192)
    {
      v152 = *(_OWORD *)(v148 + j);
      v153 = *(_OWORD *)(v148 + j + 16);
      v154 = *(_OWORD *)(v148 + j + 48);
      v325[2] = *(_OWORD *)(v148 + j + 32);
      v325[3] = v154;
      v325[0] = v152;
      v325[1] = v153;
      v155 = *(_OWORD *)(v148 + j + 64);
      v156 = *(_OWORD *)(v148 + j + 80);
      v157 = *(_OWORD *)(v148 + j + 112);
      v325[6] = *(_OWORD *)(v148 + j + 96);
      v325[7] = v157;
      v325[4] = v155;
      v325[5] = v156;
      v158 = *(_OWORD *)(v148 + j + 128);
      v159 = *(_OWORD *)(v148 + j + 144);
      v160 = *(_OWORD *)(v148 + j + 176);
      v325[10] = *(_OWORD *)(v148 + j + 160);
      v325[11] = v160;
      v325[8] = v158;
      v325[9] = v159;
      v161 = *((_QWORD *)&v325[4] + 1);
      if (LOBYTE(v325[5]) == 1)
        __asm { BR              X8 }
      v162 = 1;
      switch(*((_QWORD *)&v325[4] + 1))
      {
        case 0:
          break;
        case 1:
          v161 = 1;
          break;
        case 2:
          v161 = 2;
          break;
        case 3:
          v161 = 3;
          break;
        case 4:
          v161 = 4;
          break;
        case 5:
          v161 = 5;
          break;
        case 6:
          v161 = 6;
          break;
        case 7:
          v161 = 7;
          break;
        case 8:
          v161 = 8;
          break;
        case 9:
          v161 = 9;
          break;
        case 0xALL:
          v161 = 10;
          break;
        case 0xBLL:
          v161 = 11;
          break;
        case 0xCLL:
          v161 = 12;
          break;
        case 0xDLL:
          v161 = 13;
          break;
        default:
          v162 = 0;
          break;
      }
      outlined retain of ImageData((uint64_t)v325);
      v357[0] = v149;
      v164 = *(_QWORD *)(v149 + 16);
      v163 = *(_QWORD *)(v149 + 24);
      if (v164 >= v163 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v163 > 1, v164 + 1, 1);
        v148 = v308;
        v149 = v357[0];
      }
      LOBYTE(v356) = v162;
      *(_OWORD *)&v326[103] = v325[6];
      *(_OWORD *)&v326[119] = v325[7];
      *(_OWORD *)&v326[71] = v325[4];
      *(_OWORD *)&v326[87] = v325[5];
      *(_OWORD *)&v326[167] = v325[10];
      *(_OWORD *)&v326[183] = v325[11];
      *(_OWORD *)&v326[135] = v325[8];
      *(_OWORD *)&v326[151] = v325[9];
      *(_OWORD *)&v326[7] = v325[0];
      *(_OWORD *)&v326[23] = v325[1];
      *(_OWORD *)&v326[39] = v325[2];
      *(_OWORD *)&v326[55] = v325[3];
      *(_QWORD *)(v149 + 16) = v164 + 1;
      v165 = v149 + 208 * v164;
      *(_QWORD *)(v165 + 32) = v161;
      *(_BYTE *)(v165 + 40) = v356;
      *(_OWORD *)(v165 + 41) = *(_OWORD *)v326;
      v166 = *(_OWORD *)&v326[16];
      v167 = *(_OWORD *)&v326[32];
      v168 = *(_OWORD *)&v326[48];
      *(_OWORD *)(v165 + 105) = *(_OWORD *)&v326[64];
      *(_OWORD *)(v165 + 89) = v168;
      *(_OWORD *)(v165 + 73) = v167;
      *(_OWORD *)(v165 + 57) = v166;
      v169 = *(_OWORD *)&v326[80];
      v170 = *(_OWORD *)&v326[96];
      v171 = *(_OWORD *)&v326[112];
      *(_OWORD *)(v165 + 169) = *(_OWORD *)&v326[128];
      *(_OWORD *)(v165 + 153) = v171;
      *(_OWORD *)(v165 + 137) = v170;
      *(_OWORD *)(v165 + 121) = v169;
      v172 = *(_OWORD *)&v326[144];
      v173 = *(_OWORD *)&v326[160];
      v174 = *(_OWORD *)&v326[176];
      *(_QWORD *)(v165 + 232) = *(_QWORD *)&v326[191];
      *(_OWORD *)(v165 + 217) = v174;
      *(_OWORD *)(v165 + 201) = v173;
      *(_OWORD *)(v165 + 185) = v172;
      if (!v150)
        break;
      --v150;
    }
    swift_bridgeObjectRelease();
    v109 = v318;
    v108 = v319;
    if (*(_QWORD *)(v149 + 16))
      goto LABEL_66;
  }
  else
  {
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    {
LABEL_66:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, ImageData>);
      v175 = static _DictionaryStorage.allocate(capacity:)();
      goto LABEL_69;
    }
  }
  v175 = MEMORY[0x24BEE4B00];
LABEL_69:
  *(_QWORD *)v326 = v175;
  v176 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v176, 1, v326);
  swift_bridgeObjectRelease();
  v323 = *(_QWORD *)v326;
  v177 = *(_QWORD *)(v108 + v109)
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__enrollmentResult;
  swift_beginAccess();
  v178 = v295;
  outlined init with copy of (Int32, Matrix2dPB)(v177, v295, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  v179 = (int *)v294;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v293 + 48))(v178, 1, v294) == 1)
  {
    v180 = v296;
    *v296 = 0;
    *((_QWORD *)v180 + 1) = 0;
    v181 = v179;
    swift_retain();
    UnknownStorage.init()();
    v182 = (char *)v180 + v179[7];
    v183 = type metadata accessor for EnrollmentDataPB(0);
    v184 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v183 - 8) + 56);
    v184(v182, 1, 1, v183);
    v185 = v183;
    v186 = v180;
    v184((char *)v180 + v181[8], 1, 1, v185);
    v187 = (char *)v180 + v181[9];
    *(_QWORD *)v187 = 0;
    *((_WORD *)v187 + 4) = 256;
    v188 = (char *)v180 + v181[10];
    v189 = type metadata accessor for MissingFingerDataPB(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v189 - 8) + 56))(v188, 1, 1, v189);
    outlined destroy of Coordinate3DPB?(v178, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  }
  else
  {
    v186 = v296;
    outlined init with take of Matrix2dPB(v178, (uint64_t)v296, type metadata accessor for EnrollmentResultsPB);
    swift_retain();
  }
  EnrollmentResults.init(protoBuf:)((uint64_t)v186, (uint64_t)v326);
  v296 = *(_DWORD **)v326;
  v190 = v326[8];
  v191 = *(_DWORD *)&v326[12];
  LODWORD(v295) = *(_DWORD *)&v326[16];
  LODWORD(v294) = *(_DWORD *)&v326[20];
  v192 = *(_QWORD *)&v326[32];
  v193 = *(_QWORD *)&v326[40];
  v194 = *(_QWORD *)&v326[48];
  v293 = *(_QWORD *)&v326[56];
  v195 = v326[64];
  v322 = *(_QWORD *)&v326[24];
  swift_bridgeObjectRetain();
  v321 = v192;
  swift_bridgeObjectRetain();
  v314 = v193;
  swift_bridgeObjectRetain();
  v313 = v194;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  v279 = v195;
  v280 = v190;
  v362 = v190;
  v361 = v195;
  v196 = *(_QWORD *)(v108 + v109);
  v197 = v196 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__internalData;
  swift_beginAccess();
  v198 = v281;
  outlined init with copy of (Int32, Matrix2dPB)(v197, v281, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  v199 = v283;
  v200 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v282 + 48);
  LODWORD(v197) = v200(v198, 1, v283);
  outlined destroy of Coordinate3DPB?(v198, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
  if ((_DWORD)v197 == 1)
  {
    v311 = 0;
    v312 = 0;
    v309 = 0;
    v310 = 0;
    v278 = 0;
    v281 = 0;
    v282 = 0;
    v283 = 0;
    v201 = v292;
    v202 = v290;
  }
  else
  {
    v203 = v196
         + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__internalData;
    swift_beginAccess();
    v204 = v273;
    outlined init with copy of (Int32, Matrix2dPB)(v203, v273, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
    if (v200(v204, 1, v199) == 1)
    {
      v205 = (_QWORD *)v278;
      v206 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)v278 = MEMORY[0x24BEE4AF8];
      v205[1] = v206;
      v205[2] = v206;
      UnknownStorage.init()();
      v207 = (char *)v205 + v199[8];
      v208 = type metadata accessor for TrackingInfosPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v208 - 8) + 56))(v207, 1, 1, v208);
      *((_BYTE *)v205 + v199[9]) = 2;
      v209 = (char *)v205 + v199[10];
      v210 = type metadata accessor for SchedulingDataPB(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v210 - 8) + 56))(v209, 1, 1, v210);
      outlined destroy of Coordinate3DPB?(v204, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
    }
    else
    {
      v205 = (_QWORD *)v278;
      outlined init with take of Matrix2dPB(v204, v278, type metadata accessor for HandsKitDataInternalPB);
    }
    v201 = v292;
    v202 = v290;
    HandsKitDataInternal.init(protoBuf:)(v205, (uint64_t)v326);
    v282 = *(_QWORD *)v326;
    v283 = *(int **)&v326[8];
    v281 = *(_QWORD *)&v326[16];
    v278 = v326[24];
    v312 = *(_QWORD *)&v326[40];
    v310 = *(_QWORD *)&v326[32];
    v311 = *(_QWORD *)&v326[48];
    v309 = *(_QWORD *)&v326[56];
    outlined consume of HandsKitDataInternal?(0);
    v196 = *(_QWORD *)(v108 + v109);
  }
  v211 = v109;
  v212 = (uint64_t *)MEMORY[0x24BDC0D88];
  v213 = v196
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamLeftCalibration;
  swift_beginAccess();
  v214 = v213;
  v215 = v289;
  outlined init with copy of (Int32, Matrix2dPB)(v214, v289, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v216 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v202 + 48);
  v217 = v216(v215, 1, v201);
  outlined destroy of Coordinate3DPB?(v215, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v218 = 0;
  v219 = *(_QWORD *)(v108 + v211);
  if (v217 != 1)
  {
    v220 = v219
         + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamLeftCalibration;
    swift_beginAccess();
    v221 = v275;
    outlined init with copy of (Int32, Matrix2dPB)(v220, v275, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    if (v216(v221, 1, v201) == 1)
    {
      v222 = v276;
      UnknownStorage.init()();
      v223 = *(int *)(v201 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v222 + v223) = static ImageCalibrationDataPB._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of Coordinate3DPB?(v221, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    }
    else
    {
      v222 = v276;
      outlined init with take of Matrix2dPB(v221, v276, type metadata accessor for ImageCalibrationDataPB);
    }
    v218 = specialized ImageCalibrationData.__allocating_init(protoBuf:)(v222);
    v201 = v292;
  }
  v276 = *((unsigned int *)v212 + 2);
  v275 = *((unsigned int *)v212 + 3);
  v224 = v219
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamRightCalibration;
  swift_beginAccess();
  v225 = v224;
  v226 = v291;
  outlined init with copy of (Int32, Matrix2dPB)(v225, v291, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v227 = v216(v226, 1, v201);
  v292 = v218;
  swift_retain();
  outlined destroy of Coordinate3DPB?(v226, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
  v228 = 0;
  v229 = v285;
  if (v227 != 1)
  {
    v230 = *(_QWORD *)(v319 + v318)
         + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamRightCalibration;
    swift_beginAccess();
    v231 = v274;
    outlined init with copy of (Int32, Matrix2dPB)(v230, v274, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    if (v216(v231, 1, v201) == 1)
    {
      v232 = (uint64_t)v277;
      UnknownStorage.init()();
      v233 = *(int *)(v201 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v232 + v233) = static ImageCalibrationDataPB._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of Coordinate3DPB?(v231, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    }
    else
    {
      v232 = (uint64_t)v277;
      outlined init with take of Matrix2dPB(v231, (uint64_t)v277, type metadata accessor for ImageCalibrationDataPB);
    }
    v228 = specialized ImageCalibrationData.__allocating_init(protoBuf:)(v232);
  }
  v234 = *v212;
  v235 = v212[2];
  v291 = v228;
  swift_retain();
  CMTime.seconds.getter();
  v237 = v236;
  v238 = *(_QWORD *)(v319 + v318)
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__detectionOutputs;
  swift_beginAccess();
  v239 = v287;
  outlined init with copy of (Int32, Matrix2dPB)(v238, v287, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  v240 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v284 + 48))(v239, 1, v229);
  v277 = v344;
  v289 = v235;
  v290 = v234;
  v241 = v275;
  v242 = v288;
  if (v240 == 1)
  {
    v243 = MEMORY[0x24BEE4AF8];
    *v288 = MEMORY[0x24BEE4AF8];
    v242[1] = v243;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v239, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v239, (uint64_t)v288, type metadata accessor for DetectionResultsByChiralityPB);
  }
  v245 = v279;
  v244 = v280;
  v246 = v315;
  v287 = HIDWORD(v315);
  v288 = (_QWORD *)(v276 | (v241 << 32));
  v247 = swift_bridgeObjectRetain();
  v248 = specialized Array<A>.init(protoBuf:)(v247);
  swift_bridgeObjectRelease();
  v249 = swift_bridgeObjectRetain();
  v250 = specialized Array<A>.init(protoBuf:)(v249);
  swift_bridgeObjectRelease();
  outlined destroy of Matrix3x3PB((uint64_t)v242, type metadata accessor for DetectionResultsByChiralityPB);
  v318 = v248;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v251 = CACurrentMediaTime();
  outlined destroy of Matrix3x3PB(v319, type metadata accessor for HandsKitDataPB);
  LOBYTE(v325[5]) = v244;
  BYTE8(v325[8]) = v245;
  *(_QWORD *)&v325[0] = v317;
  v252 = v282;
  *((_QWORD *)&v325[0] + 1) = v282;
  *(_QWORD *)&v325[1] = v283;
  v253 = v281;
  *((_QWORD *)&v325[1] + 1) = v281;
  v254 = v278;
  *(_QWORD *)&v325[2] = v278;
  *((_QWORD *)&v325[2] + 1) = v310;
  *(_QWORD *)&v325[3] = v312;
  *((_QWORD *)&v325[3] + 1) = v311;
  *(_QWORD *)&v325[4] = v309;
  *((_QWORD *)&v325[4] + 1) = v296;
  *(_QWORD *)((char *)&v325[5] + 4) = __PAIR64__(v295, v191);
  HIDWORD(v325[5]) = v294;
  *(_QWORD *)&v325[6] = v322;
  *((_QWORD *)&v325[6] + 1) = v321;
  *(_QWORD *)&v325[7] = v314;
  *((_QWORD *)&v325[7] + 1) = v313;
  *(_QWORD *)&v325[8] = v293;
  *(_QWORD *)&v325[9] = v248;
  v285 = v250;
  *((_QWORD *)&v325[9] + 1) = v250;
  *(_QWORD *)&v325[10] = v324;
  *((_QWORD *)&v325[10] + 1) = MEMORY[0x24BEE4AF8];
  LODWORD(v325[11]) = v306;
  BYTE8(v325[24]) = 0;
  *(_QWORD *)((char *)&v325[24] + 12) = value;
  *(_QWORD *)((char *)&v325[25] + 12) = epoch;
  *(_QWORD *)((char *)&v325[26] + 4) = v290;
  *(_QWORD *)((char *)&v325[26] + 12) = v288;
  *(_QWORD *)((char *)&v325[27] + 4) = v289;
  BYTE12(v325[27]) = 0;
  *((_QWORD *)&v325[11] + 1) = 0;
  *(_QWORD *)&v325[12] = 0xE000000000000000;
  *((_QWORD *)&v325[12] + 1) = v323;
  v325[13] = v304;
  v325[14] = v303;
  v325[15] = v302;
  v325[16] = v301;
  v325[17] = v300;
  v325[18] = v299;
  v325[19] = v298;
  v325[20] = v297;
  *(_QWORD *)&v325[21] = v305;
  *((_QWORD *)&v325[21] + 1) = value;
  *(_QWORD *)&v325[22] = __PAIR64__(v287, v246);
  *((_QWORD *)&v325[22] + 1) = epoch;
  *(_QWORD *)&v325[23] = v290;
  *((_QWORD *)&v325[23] + 1) = v288;
  *(_QWORD *)&v325[24] = v289;
  *(_QWORD *)((char *)&v325[25] + 4) = __PAIR64__(v287, v246);
  *(_QWORD *)&v325[28] = 0;
  *((_QWORD *)&v325[28] + 1) = v237;
  LOBYTE(v325[29]) = 0;
  *((_QWORD *)&v325[29] + 1) = v292;
  *(_QWORD *)&v325[30] = v291;
  *((_QWORD *)&v325[30] + 1) = v308;
  memset(&v325[31], 0, 40);
  *((CFTimeInterval *)&v325[33] + 1) = v251;
  *(_QWORD *)&v325[34] = v307;
  v255 = v283;
  outlined copy of HandsKitDataInternal?(v282);
  outlined retain of HandsKitData(v325);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v257 = v310;
  v256 = v311;
  v258 = v312;
  v259 = v309;
  outlined consume of HandsKitDataInternal?(v252);
  v260 = v317;
  swift_bridgeObjectRelease();
  memcpy(v286, v325, 0x228uLL);
  *(_QWORD *)v326 = v260;
  *(_QWORD *)&v326[8] = v252;
  *(_QWORD *)&v326[16] = v255;
  *(_QWORD *)&v326[24] = v253;
  *(_QWORD *)&v326[32] = v254;
  *(_QWORD *)&v326[40] = v257;
  *(_QWORD *)&v326[48] = v258;
  *(_QWORD *)&v326[56] = v256;
  *(_QWORD *)&v326[64] = v259;
  *(_QWORD *)&v326[72] = v296;
  v261 = v359;
  v326[80] = v362;
  v262 = v358;
  *(_DWORD *)&v326[84] = v191;
  *(_DWORD *)&v326[88] = v295;
  *(_DWORD *)&v326[92] = v294;
  *(_QWORD *)&v326[96] = v322;
  *(_QWORD *)&v326[104] = v321;
  *(_QWORD *)&v326[112] = v314;
  *(_QWORD *)&v326[120] = v313;
  *(_QWORD *)&v326[128] = v293;
  v326[136] = v361;
  *(_QWORD *)&v326[144] = v318;
  *(_QWORD *)&v326[152] = v285;
  *(_QWORD *)&v326[160] = v324;
  *(_QWORD *)&v326[168] = MEMORY[0x24BEE4AF8];
  *(_DWORD *)&v326[176] = v306;
  *(_QWORD *)&v326[184] = 0;
  *(_QWORD *)&v326[192] = 0xE000000000000000;
  v327 = v323;
  v328 = v304;
  v329 = v303;
  v330 = v302;
  v331 = v301;
  v332 = v300;
  v333 = v299;
  v334 = v298;
  v335 = v297;
  v336 = v305;
  v263 = value;
  v337 = value;
  v264 = v315;
  v265 = epoch;
  v338 = v315;
  v267 = v287;
  v266 = v288;
  v339 = v287;
  v340 = epoch;
  v269 = v289;
  v268 = v290;
  v341 = v290;
  v342 = v288;
  v343 = v289;
  v270 = (uint64_t)v277;
  *v277 = v360;
  *(_QWORD *)(v270 + 4) = v263;
  v344[3] = v264;
  v344[4] = v267;
  *(_QWORD *)(v270 + 20) = v265;
  *(_QWORD *)(v270 + 28) = v268;
  *(_QWORD *)(v270 + 36) = v266;
  *(_QWORD *)(v270 + 44) = v269;
  *(_BYTE *)(v270 + 52) = v261;
  v345 = 0;
  v346 = v237;
  v347 = v262;
  v348 = v292;
  v349 = v291;
  v350 = v308;
  v353 = 0;
  v352 = 0u;
  v351 = 0u;
  v354 = v251;
  v355 = v307;
  return outlined release of HandsKitData(v326);
}

void *HandsKitData.init(imageData:worldPoseTransform:sessionID:frame:hands:frameArrivalTimeMark:enrolmentResults:internalData:detectionSpecs:detectionOutputs:referenceHands:mcamLeftCalibration:mcamRightCalibration:objectInteractionInfoByHandID:isDroppedFrame:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, __n128 a10@<Q0>, __n128 a11@<Q1>, __n128 a12@<Q2>, __n128 a13@<Q3>, double a14@<D4>, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, char a20)
{
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v59;
  unint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t j;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  _OWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  void *result;
  simd_float4 v97;
  simd_float4 v98;
  simd_float4 v99;
  simd_float4 v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *__dst;
  _BYTE v133[64];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE __src[552];
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  _BYTE v163[128];
  _BYTE v164[144];
  simd_float4x4 v165;

  *(__n128 *)&v133[32] = a12;
  *(__n128 *)&v133[48] = a13;
  *(__n128 *)v133 = a10;
  *(__n128 *)&v133[16] = a11;
  outlined init with take of ImageData?(a4, (uint64_t)v163, &demangling cache variable for type metadata for Frame?);
  v120 = *a6;
  v119 = *((_BYTE *)a6 + 8);
  v28 = *((_DWORD *)a6 + 3);
  v29 = a6[2];
  v136 = a6[4];
  v137 = a6[3];
  v134 = a6[6];
  v135 = a6[5];
  v118 = a6[7];
  v117 = *((_BYTE *)a6 + 64);
  v129 = a7[1];
  v130 = *a7;
  v144 = a7[2];
  v143 = a7[3];
  v30 = a7[5];
  v142 = a7[4];
  v139 = a7[7];
  v140 = a7[6];
  v127 = a15[1];
  v128 = *a15;
  v124 = a19[1];
  v125 = *a19;
  v122 = a19[3];
  v123 = a19[2];
  v121 = a19[4];
  v31 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v32 = one-time initialization token for N301CameraOrder;
  v138 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v32 != -1)
    swift_once();
  v33 = specialized static HandsKitData.determineMasterTimestamp(imageData:preferredCameraOrder:useMidExposure:)(a1, static HandsKitData.N301CameraOrder, 0);
  v35 = v34;
  v37 = v36;
  outlined init with take of ImageData?((uint64_t)v163, (uint64_t)v164, &demangling cache variable for type metadata for Frame?);
  v131 = a8;
  __dst = a9;
  v146 = a3;
  if (_s5Hands5FrameVSgWOg((uint64_t)v164) == 1)
  {
    if (v33 < 0)
    {
      result = (void *)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v38 = a1;
    outlined init with take of ImageData?((uint64_t)v163, (uint64_t)__src, &demangling cache variable for type metadata for Frame?);
    Frame.init(frameID:masterTimestamp:midExposureTimestamp:previousFrame:)(v33, v33, v35, v37, 0, 0, 0, 1, (uint64_t)&v149, (uint64_t)__src);
    v116 = *((_QWORD *)&v149 + 1);
    v39 = v149;
    v115 = v150;
    v114 = DWORD1(v150);
    v112 = v151;
    v113 = *((_QWORD *)&v150 + 1);
    v110 = v153;
    v111 = v152;
    v109 = v154;
    v40 = v156;
    v107 = v157;
    v108 = v155;
    v105 = v159;
    v106 = v158;
    v104 = v160;
    v103 = v161;
    v102 = v162;
  }
  else
  {
    v38 = a1;
    outlined init with take of ImageData?((uint64_t)v163, (uint64_t)__src, &demangling cache variable for type metadata for Frame?);
    v39 = *(_QWORD *)__src;
    v111 = *(_QWORD *)&__src[40];
    v112 = *(_QWORD *)&__src[32];
    v110 = *(_QWORD *)&__src[48];
    v109 = __src[56];
    v107 = *(_QWORD *)&__src[76];
    v40 = *(_QWORD *)&__src[68];
    v108 = *(_QWORD *)&__src[60];
    v105 = *(_QWORD *)&__src[92];
    v106 = *(_QWORD *)&__src[84];
    v104 = *(_QWORD *)&__src[100];
    v103 = __src[108];
    v102 = *(_QWORD *)&__src[112];
    v116 = *(_QWORD *)&__src[8];
    v149 = *(_OWORD *)__src;
    v115 = *(_DWORD *)&__src[16];
    v150 = *(_OWORD *)&__src[16];
    v113 = *(_QWORD *)&__src[24];
    v114 = *(_DWORD *)&__src[20];
  }
  v141 = v30;
  v41 = a18;
  v147 = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v42 = swift_bridgeObjectRetain();
  v145 = v38;
  v43 = specialized _copyCollectionToContiguousArray<A>(_:)(v42);
  v44 = *(_QWORD *)(v43 + 16);
  if (v44)
  {
    v101 = v39;
    swift_retain();
    v45 = v44 - 1;
    v46 = MEMORY[0x24BEE4AF8];
    v47 = 32;
    for (i = v45; ; --i)
    {
      v49 = *(_OWORD *)(v43 + v47);
      v50 = *(_OWORD *)(v43 + v47 + 16);
      v51 = *(_OWORD *)(v43 + v47 + 48);
      *(_OWORD *)&__src[32] = *(_OWORD *)(v43 + v47 + 32);
      *(_OWORD *)&__src[48] = v51;
      *(_OWORD *)__src = v49;
      *(_OWORD *)&__src[16] = v50;
      v52 = *(_OWORD *)(v43 + v47 + 64);
      v53 = *(_OWORD *)(v43 + v47 + 80);
      v54 = *(_OWORD *)(v43 + v47 + 112);
      *(_OWORD *)&__src[96] = *(_OWORD *)(v43 + v47 + 96);
      *(_OWORD *)&__src[112] = v54;
      *(_OWORD *)&__src[64] = v52;
      *(_OWORD *)&__src[80] = v53;
      v55 = *(_OWORD *)(v43 + v47 + 128);
      v56 = *(_OWORD *)(v43 + v47 + 144);
      v57 = *(_OWORD *)(v43 + v47 + 176);
      *(_OWORD *)&__src[160] = *(_OWORD *)(v43 + v47 + 160);
      *(_OWORD *)&__src[176] = v57;
      *(_OWORD *)&__src[128] = v55;
      *(_OWORD *)&__src[144] = v56;
      if ((unint64_t)(*(_QWORD *)&__src[72] - 10) > 2)
      {
        outlined retain of ImageData((uint64_t)__src);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v149 = v46;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v46 + 16) + 1, 1);
          v46 = v149;
        }
        v60 = *(_QWORD *)(v46 + 16);
        v59 = *(_QWORD *)(v46 + 24);
        if (v60 >= v59 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
          v46 = v149;
        }
        *(_QWORD *)(v46 + 16) = v60 + 1;
        v61 = (_OWORD *)(v46 + 192 * v60);
        v62 = *(_OWORD *)__src;
        v63 = *(_OWORD *)&__src[16];
        v64 = *(_OWORD *)&__src[48];
        v61[4] = *(_OWORD *)&__src[32];
        v61[5] = v64;
        v61[2] = v62;
        v61[3] = v63;
        v65 = *(_OWORD *)&__src[64];
        v66 = *(_OWORD *)&__src[80];
        v67 = *(_OWORD *)&__src[112];
        v61[8] = *(_OWORD *)&__src[96];
        v61[9] = v67;
        v61[6] = v65;
        v61[7] = v66;
        v68 = *(_OWORD *)&__src[128];
        v69 = *(_OWORD *)&__src[144];
        v70 = *(_OWORD *)&__src[176];
        v61[12] = *(_OWORD *)&__src[160];
        v61[13] = v70;
        v61[10] = v68;
        v61[11] = v69;
      }
      if (!i)
        break;
      v47 += 192;
    }
    swift_release();
    v71 = MEMORY[0x24BEE4AF8];
    for (j = 32; ; j += 192)
    {
      v73 = *(_OWORD *)(v43 + j);
      v74 = *(_OWORD *)(v43 + j + 16);
      v75 = *(_OWORD *)(v43 + j + 48);
      *(_OWORD *)&__src[32] = *(_OWORD *)(v43 + j + 32);
      *(_OWORD *)&__src[48] = v75;
      *(_OWORD *)__src = v73;
      *(_OWORD *)&__src[16] = v74;
      v76 = *(_OWORD *)(v43 + j + 64);
      v77 = *(_OWORD *)(v43 + j + 80);
      v78 = *(_OWORD *)(v43 + j + 112);
      *(_OWORD *)&__src[96] = *(_OWORD *)(v43 + j + 96);
      *(_OWORD *)&__src[112] = v78;
      *(_OWORD *)&__src[64] = v76;
      *(_OWORD *)&__src[80] = v77;
      v79 = *(_OWORD *)(v43 + j + 128);
      v80 = *(_OWORD *)(v43 + j + 144);
      v81 = *(_OWORD *)(v43 + j + 176);
      *(_OWORD *)&__src[160] = *(_OWORD *)(v43 + j + 160);
      *(_OWORD *)&__src[176] = v81;
      *(_OWORD *)&__src[128] = v79;
      *(_OWORD *)&__src[144] = v80;
      if ((unint64_t)(*(_QWORD *)&__src[72] - 10) < 3)
      {
        outlined retain of ImageData((uint64_t)__src);
        v82 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v149 = v71;
        if ((v82 & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v71 + 16) + 1, 1);
          v71 = v149;
        }
        v84 = *(_QWORD *)(v71 + 16);
        v83 = *(_QWORD *)(v71 + 24);
        if (v84 >= v83 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
          v71 = v149;
        }
        *(_QWORD *)(v71 + 16) = v84 + 1;
        v85 = (_OWORD *)(v71 + 192 * v84);
        v86 = *(_OWORD *)__src;
        v87 = *(_OWORD *)&__src[16];
        v88 = *(_OWORD *)&__src[48];
        v85[4] = *(_OWORD *)&__src[32];
        v85[5] = v88;
        v85[2] = v86;
        v85[3] = v87;
        v89 = *(_OWORD *)&__src[64];
        v90 = *(_OWORD *)&__src[80];
        v91 = *(_OWORD *)&__src[112];
        v85[8] = *(_OWORD *)&__src[96];
        v85[9] = v91;
        v85[6] = v89;
        v85[7] = v90;
        v92 = *(_OWORD *)&__src[128];
        v93 = *(_OWORD *)&__src[144];
        v94 = *(_OWORD *)&__src[176];
        v85[12] = *(_OWORD *)&__src[160];
        v85[13] = v94;
        v85[10] = v92;
        v85[11] = v93;
      }
      if (!v45)
        break;
      --v45;
    }
    swift_release();
    v39 = v101;
    v41 = a18;
  }
  else
  {
    swift_release();
    v46 = MEMORY[0x24BEE4AF8];
    v71 = MEMORY[0x24BEE4AF8];
  }
  specialized Array.append<A>(contentsOf:)(v71);
  v165 = __invert_f4(*(simd_float4x4 *)v133);
  v99 = v165.columns[1];
  v100 = v165.columns[0];
  v97 = v165.columns[3];
  v98 = v165.columns[2];
  swift_bridgeObjectRetain();
  CMTime.seconds.getter();
  *(_QWORD *)&__src[72] = v120;
  __src[80] = v119;
  *(_QWORD *)&__src[128] = v118;
  __src[136] = v117;
  *(_DWORD *)&__src[176] = 2;
  *(_QWORD *)&__src[184] = a2;
  *(_OWORD *)&__src[208] = *(_OWORD *)v133;
  *(_OWORD *)&__src[224] = *(_OWORD *)&v133[16];
  *(_OWORD *)&__src[240] = *(_OWORD *)&v133[32];
  *(_OWORD *)&__src[256] = *(_OWORD *)&v133[48];
  *(simd_float4 *)&__src[272] = v100;
  *(simd_float4 *)&__src[288] = v99;
  *(simd_float4 *)&__src[304] = v98;
  *(simd_float4 *)&__src[320] = v97;
  *(_QWORD *)&__src[336] = v39;
  *(_QWORD *)&__src[344] = v116;
  *(_DWORD *)&__src[352] = v115;
  *(_DWORD *)&__src[356] = v114;
  *(_QWORD *)&__src[360] = v113;
  *(_QWORD *)&__src[368] = v112;
  *(_QWORD *)&__src[376] = v111;
  *(_QWORD *)&__src[384] = v110;
  __src[392] = v109;
  *(_QWORD *)&__src[396] = v108;
  *(_QWORD *)&__src[412] = v107;
  *(_QWORD *)&__src[420] = v106;
  *(_QWORD *)&__src[428] = v105;
  *(_QWORD *)&__src[436] = v104;
  __src[444] = v103;
  *(_QWORD *)&__src[404] = v40;
  *(_QWORD *)&__src[448] = v102;
  __src[464] = a20 & 1;
  *(_QWORD *)&__src[472] = a17;
  *(_QWORD *)&__src[480] = v41;
  *(_QWORD *)&__src[496] = v125;
  *(_QWORD *)&__src[504] = v124;
  *(_QWORD *)&__src[512] = v123;
  *(_QWORD *)&__src[520] = v122;
  *(_QWORD *)&__src[528] = v121;
  *(_QWORD *)&__src[64] = v139;
  *(_QWORD *)&__src[200] = v145;
  *(_QWORD *)&__src[488] = v46;
  *(_QWORD *)__src = v147;
  *(_QWORD *)&__src[8] = v130;
  *(_QWORD *)&__src[16] = v129;
  *(_QWORD *)&__src[24] = v144;
  *(_QWORD *)&__src[32] = v143;
  *(_QWORD *)&__src[40] = v142;
  *(_QWORD *)&__src[48] = v141;
  *(_QWORD *)&__src[56] = v140;
  *(_DWORD *)&__src[84] = v28;
  *(_QWORD *)&__src[88] = v29;
  *(_QWORD *)&__src[96] = v137;
  *(_QWORD *)&__src[104] = v136;
  *(_QWORD *)&__src[112] = v135;
  *(_QWORD *)&__src[120] = v134;
  *(_QWORD *)&__src[144] = v128;
  *(_QWORD *)&__src[152] = v127;
  *(_QWORD *)&__src[160] = a16;
  *(_QWORD *)&__src[168] = v131;
  *(_QWORD *)&__src[192] = v146;
  *(_QWORD *)&__src[456] = v95;
  *(double *)&__src[536] = a14;
  *(_QWORD *)&__src[544] = v138;
  outlined copy of HandsKitDataInternal?(v130);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of HandsKitData(__src);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of HandsKitDataInternal?(v130);
  swift_bridgeObjectRelease();
  outlined release of HandsKitData(__src);
  return memcpy(__dst, __src, 0x228uLL);
}

void *HandsKitData.init(updateData:withImages:)@<X0>(void *__src@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  __int128 v30;
  __int128 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  __n128 v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  _QWORD v61[8];
  _OWORD __srca[35];
  uint64_t v63;
  __int128 v64;
  _BYTE v65[96];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD __dst[36];

  memcpy(__dst, __src, 0x228uLL);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v61[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    v5 = v61[0];
    v6 = v4 - 1;
    for (i = 32; ; i += 192)
    {
      v8 = *(_OWORD *)(a2 + i + 144);
      v67 = *(_OWORD *)(a2 + i + 128);
      v68 = v8;
      v9 = *(_OWORD *)(a2 + i + 176);
      v69 = *(_OWORD *)(a2 + i + 160);
      v70 = v9;
      v10 = *(_OWORD *)(a2 + i + 80);
      *(_OWORD *)&v65[48] = *(_OWORD *)(a2 + i + 64);
      *(_OWORD *)&v65[64] = v10;
      v11 = *(_OWORD *)(a2 + i + 112);
      *(_OWORD *)&v65[80] = *(_OWORD *)(a2 + i + 96);
      v66 = v11;
      v12 = *(_OWORD *)(a2 + i + 16);
      v64 = *(_OWORD *)(a2 + i);
      *(_OWORD *)v65 = v12;
      v13 = *(_OWORD *)(a2 + i + 48);
      *(_OWORD *)&v65[16] = *(_OWORD *)(a2 + i + 32);
      *(_OWORD *)&v65[32] = v13;
      outlined retain of ImageData((uint64_t)&v64);
      v61[0] = v5;
      v15 = *(_QWORD *)(v5 + 16);
      v14 = *(_QWORD *)(v5 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v5 = v61[0];
      }
      v16 = *(_QWORD *)&v65[56];
      BYTE8(v53) = v65[64];
      *(_OWORD *)((char *)&__srca[6] + 7) = *(_OWORD *)&v65[80];
      *(_OWORD *)((char *)&__srca[7] + 7) = v66;
      *(_OWORD *)((char *)&__srca[4] + 7) = *(_OWORD *)&v65[48];
      *(_OWORD *)((char *)&__srca[5] + 7) = *(_OWORD *)&v65[64];
      *(_OWORD *)((char *)&__srca[10] + 7) = v69;
      *(_OWORD *)((char *)&__srca[11] + 7) = v70;
      *(_OWORD *)((char *)&__srca[8] + 7) = v67;
      *(_OWORD *)((char *)&__srca[9] + 7) = v68;
      *(_OWORD *)((char *)__srca + 7) = v64;
      *(_OWORD *)((char *)&__srca[1] + 7) = *(_OWORD *)v65;
      *(_OWORD *)((char *)&__srca[2] + 7) = *(_OWORD *)&v65[16];
      *(_OWORD *)((char *)&__srca[3] + 7) = *(_OWORD *)&v65[32];
      *(_QWORD *)(v5 + 16) = v15 + 1;
      v17 = v5 + 208 * v15;
      *(_QWORD *)(v17 + 32) = v16;
      *(_BYTE *)(v17 + 40) = BYTE8(v53);
      *(_OWORD *)(v17 + 41) = __srca[0];
      v18 = __srca[1];
      v19 = __srca[2];
      v20 = __srca[3];
      *(_OWORD *)(v17 + 105) = __srca[4];
      *(_OWORD *)(v17 + 89) = v20;
      *(_OWORD *)(v17 + 73) = v19;
      *(_OWORD *)(v17 + 57) = v18;
      v21 = __srca[5];
      v22 = __srca[6];
      v23 = __srca[7];
      *(_OWORD *)(v17 + 169) = __srca[8];
      *(_OWORD *)(v17 + 153) = v23;
      *(_OWORD *)(v17 + 137) = v22;
      *(_OWORD *)(v17 + 121) = v21;
      v24 = __srca[9];
      v25 = __srca[10];
      v26 = __srca[11];
      *(_QWORD *)(v17 + 232) = *(_QWORD *)((char *)&__srca[11] + 15);
      *(_OWORD *)(v17 + 217) = v26;
      *(_OWORD *)(v17 + 201) = v25;
      *(_OWORD *)(v17 + 185) = v24;
      if (!v6)
        break;
      --v6;
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v5 + 16))
      goto LABEL_8;
LABEL_10:
    v27 = MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_10;
LABEL_8:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, ImageData>);
  v27 = static _DictionaryStorage.allocate(capacity:)();
LABEL_11:
  v63 = v27;
  v28 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v28, 1, &v63);
  swift_bridgeObjectRelease();
  v43 = v63;
  v41 = (__n128)__dst[14];
  v42 = (__n128)__dst[13];
  v64 = __dst[21];
  *(_QWORD *)v65 = *(_QWORD *)&__dst[22];
  *(_OWORD *)&v65[8] = *(_OWORD *)((char *)&__dst[22] + 8);
  v38 = (__n128)__dst[16];
  v39 = (__n128)__dst[15];
  v40 = *((_QWORD *)&__dst[11] + 1);
  v45 = *(_QWORD *)&__dst[12];
  *(_OWORD *)&v65[24] = *(_OWORD *)((char *)&__dst[23] + 8);
  v65[40] = BYTE8(__dst[24]);
  *(_OWORD *)&v65[44] = *(_OWORD *)((char *)&__dst[24] + 12);
  *(_OWORD *)&v65[60] = *(_OWORD *)((char *)&__dst[25] + 12);
  *(_OWORD *)&v65[76] = *(_OWORD *)((char *)&__dst[26] + 12);
  v65[92] = BYTE12(__dst[27]);
  *(_QWORD *)&v66 = *(_QWORD *)&__dst[28];
  _s5Hands5FrameVSgWOi_((uint64_t)&v64);
  outlined init with take of ImageData?((uint64_t)&v64, (uint64_t)v61, &demangling cache variable for type metadata for Frame?);
  v29 = *((double *)&__dst[33] + 1);
  v54 = __dst[5];
  v55 = DWORD1(__dst[5]);
  v56 = *((_QWORD *)&__dst[5] + 1);
  v57 = __dst[6];
  v58 = __dst[7];
  v59 = *(_QWORD *)&__dst[8];
  v60 = BYTE8(__dst[8]);
  v30 = __dst[0];
  v49 = *((_QWORD *)&__dst[0] + 1);
  v50 = __dst[1];
  v51 = __dst[2];
  v52 = __dst[3];
  v53 = __dst[4];
  v48 = __dst[9];
  v37 = *((_QWORD *)&__dst[29] + 1);
  v33 = *(_QWORD *)&__dst[30];
  v34 = *((_QWORD *)&__dst[10] + 1);
  v35 = *(_QWORD *)&__dst[10];
  v36 = __dst[31];
  v31 = __dst[32];
  v46[0] = __dst[31];
  v46[1] = __dst[32];
  v47 = *(_QWORD *)&__dst[33];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of HandsKitDataInternal?(*((uint64_t *)&v30 + 1));
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of ObjectInteractionResultsByHand?(v36, *((uint64_t *)&v36 + 1), v31, *((uint64_t *)&v31 + 1));
  HandsKitData.init(imageData:worldPoseTransform:sessionID:frame:hands:frameArrivalTimeMark:enrolmentResults:internalData:detectionSpecs:detectionOutputs:referenceHands:mcamLeftCalibration:mcamRightCalibration:objectInteractionInfoByHandID:isDroppedFrame:)(v43, v40, v45, (uint64_t)v61, v30, (uint64_t *)&v53 + 1, &v49, v34, __srca, v42, v41, v39, v38, v29, (uint64_t *)&v48, v35, v37, v33, (uint64_t *)v46,
    0);
  outlined release of HandsKitData(__dst);
  return memcpy(a3, __srca, 0x228uLL);
}

void one-time initialization function for N301CameraOrder()
{
  static HandsKitData.N301CameraOrder = (uint64_t)&outlined read-only object #0 of one-time initialization function for N301CameraOrder;
}

uint64_t static HandsKitData.N301CameraOrder.getter()
{
  return static HandsKitData.N301CameraOrder.getter(&one-time initialization token for N301CameraOrder);
}

void one-time initialization function for MCPCameraOrder()
{
  static HandsKitData.MCPCameraOrder = (uint64_t)&outlined read-only object #0 of one-time initialization function for MCPCameraOrder;
}

uint64_t static HandsKitData.MCPCameraOrder.getter()
{
  return static HandsKitData.N301CameraOrder.getter(&one-time initialization token for MCPCameraOrder);
}

uint64_t static HandsKitData.N301CameraOrder.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t HandsKitData.updateFrame(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t result;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 60);
  v5 = *(_BYTE *)(a1 + 108);
  v6 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(v1 + 336) = *(_QWORD *)a1;
  *(_QWORD *)(v1 + 344) = v2;
  v7 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v1 + 352) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v1 + 356) = v7;
  v8 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v1 + 360) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v1 + 376) = v8;
  *(_BYTE *)(v1 + 392) = v3;
  *(_QWORD *)(v1 + 396) = v4;
  *(_QWORD *)(v1 + 404) = *(_QWORD *)(a1 + 68);
  *(_OWORD *)(v1 + 412) = *(_OWORD *)(a1 + 76);
  *(_OWORD *)(v1 + 428) = *(_OWORD *)(a1 + 92);
  *(_BYTE *)(v1 + 444) = v5;
  *(_QWORD *)(v1 + 448) = v6;
  result = CMTime.seconds.getter();
  *(_QWORD *)(v1 + 456) = v10;
  return result;
}

uint64_t HandsKitData.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  int32x4_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int32x4_t v89;
  uint64_t v90;
  int32x4_t v91;
  int8x16_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  int64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int32x4_t v212;
  int32x4_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int32x4_t v220;
  int8x16_t v221;
  int32x4_t v222;
  int32x4_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  __int128 v255;
  _OWORD v256[3];
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v237 = (uint64_t)&v189 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v236 = (uint64_t)&v189 - v8;
  v246 = type metadata accessor for DetectionResultsByChiralityPB(0);
  v235 = *(_QWORD *)(v246 - 8);
  MEMORY[0x24BDAC7A8](v246, v9);
  v234 = (uint64_t *)((char *)&v189 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageCalibrationDataPB?);
  MEMORY[0x24BDAC7A8](v11, v12);
  v242 = (uint64_t)&v189 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v15);
  v241 = (uint64_t)&v189 - v16;
  v17 = type metadata accessor for ImageCalibrationDataPB(0);
  v239 = *(_QWORD *)(v17 - 8);
  v240 = v17;
  MEMORY[0x24BDAC7A8](v17, v18);
  v205 = (uint64_t)&v189 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20, v21);
  v204 = (uint64_t)&v189 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v23, v24);
  v231 = (uint64_t)&v189 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26, v27);
  v229 = (uint64_t)&v189 - v28;
  v29 = type metadata accessor for Matrix2dPB(0);
  v227 = *(_QWORD *)(v29 - 8);
  v228 = v29;
  MEMORY[0x24BDAC7A8](v29, v30);
  v226 = (uint64_t)&v189 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32, v33);
  v245 = (char *)&v189 - v34;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataInternalPB?);
  MEMORY[0x24BDAC7A8](v35, v36);
  v203 = (uint64_t)&v189 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38, v39);
  v202 = (uint64_t)&v189 - v40;
  v41 = type metadata accessor for HandsKitDataInternalPB(0);
  v200 = *(_QWORD *)(v41 - 8);
  v201 = v41;
  MEMORY[0x24BDAC7A8](v41, v42);
  v199 = (uint64_t)&v189 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v44, v45);
  v198 = (char **)((char *)&v189 - v46);
  MEMORY[0x24BDAC7A8](v47, v48);
  v224 = (char *)&v189 - v49;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnrollmentResultsPB?);
  MEMORY[0x24BDAC7A8](v50, v51);
  v219 = (uint64_t)&v189 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v53, v54);
  v218 = (uint64_t)&v189 - v55;
  v56 = type metadata accessor for EnrollmentResultsPB(0);
  v216 = *(_QWORD *)(v56 - 8);
  v217 = v56;
  MEMORY[0x24BDAC7A8](v56, v57);
  v215 = (uint64_t)&v189 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for ImageDataPB(0);
  v249 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59, v60);
  v190 = (char *)&v189 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for HandDescriptor();
  v238 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62, v63);
  v65 = (char *)&v189 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for HandDescriptorPB(0);
  v253 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66, v67);
  v251 = (uint64_t)&v189 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v69, v70);
  v250 = (uint64_t)&v189 - v71;
  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v72, v73);
  v247 = (uint64_t)&v189 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v75, v76);
  v78 = (char *)&v189 - v77;
  v79 = type metadata accessor for CMTimeProtobuf(0);
  v80 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79, v81);
  v83 = (char *)&v189 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = v1->i64[0];
  v214 = v1->i64[1];
  v84 = v1[1].i64[0];
  v191 = v1[1].i64[1];
  v192 = v84;
  v85 = v1[2].i64[0];
  v196 = v1[2].i64[1];
  v197 = v85;
  v86 = v1[3].i64[0];
  v194 = v1[3].i64[1];
  v195 = v86;
  v193 = v1[4].i64[0];
  v211 = v1[4].i64[1];
  v210 = v1[5].u8[0];
  v87 = v1[5].i32[1];
  v88 = v1[5].i64[1];
  v89 = v1[6];
  v212 = v1[7];
  v213 = v89;
  v209 = v1[8].i64[0];
  v208 = v1[8].u8[8];
  v90 = v1[9].i64[0];
  v232 = v1[9].i64[1];
  v233 = v90;
  v244 = v1[10].i64[0];
  LODWORD(v90) = v1[11].i32[0];
  v91 = v1[13];
  v222 = v1[14];
  v223 = v91;
  v92 = (int8x16_t)v1[15];
  v220 = v1[16];
  v221 = v92;
  v93 = v1[21].i64[1];
  v248 = v1[21].i64[0];
  LODWORD(v82) = v1[22].i32[0];
  v206 = v90;
  v207 = v82;
  v225 = v1[29].i64[1];
  v230 = v1[30].i64[0];
  v252 = v1[30].i64[1];
  UnknownStorage.init()();
  v94 = *(int *)(type metadata accessor for HandsKitDataPB(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v94) = static HandsKitDataPB._StorageClass.defaultInstance;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandsKitDataPB._StorageClass(0);
    swift_allocObject();
    v189 = v83;
    v95 = swift_retain();
    v83 = v189;
    *(_QWORD *)(a1 + v94) = HandsKitDataPB._StorageClass.init(copying:)(v95);
    swift_release();
  }
  v96 = (_DWORD *)(*(_QWORD *)(a1 + v94)
                 + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__version);
  swift_beginAccess();
  *v96 = v206;
  UnknownStorage.init()();
  *(_QWORD *)v83 = v93;
  *((_DWORD *)v83 + 2) = v207;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandsKitDataPB._StorageClass(0);
    swift_allocObject();
    v97 = swift_retain();
    *(_QWORD *)(a1 + v94) = HandsKitDataPB._StorageClass.init(copying:)(v97);
    swift_release();
  }
  v98 = *(_QWORD *)(a1 + v94);
  outlined init with take of Matrix2dPB((uint64_t)v83, (uint64_t)v78, type metadata accessor for CMTimeProtobuf);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v78, 0, 1, v79);
  v99 = (uint64_t)v78;
  v100 = v247;
  outlined init with take of ImageData?(v99, v247, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v101 = v98
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__masterCameraTimestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v100, v101, &demangling cache variable for type metadata for CMTimeProtobuf?);
  swift_endAccess();
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandsKitDataPB._StorageClass(0);
    swift_allocObject();
    v102 = swift_retain();
    *(_QWORD *)(a1 + v94) = HandsKitDataPB._StorageClass.init(copying:)(v102);
    swift_release();
  }
  v103 = (_QWORD *)(*(_QWORD *)(a1 + v94)
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__frameID);
  swift_beginAccess();
  *v103 = v248;
  v104 = v243;
  v105 = *(_QWORD *)(v243 + 16);
  v106 = MEMORY[0x24BEE4AF8];
  v248 = a1;
  v247 = v94;
  if (v105)
  {
    *(_QWORD *)&v255 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v105, 0);
    v107 = v104 + ((*(unsigned __int8 *)(v238 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v238 + 80));
    v108 = *(_QWORD *)(v238 + 72);
    v106 = v255;
    v109 = v250;
    do
    {
      outlined init with copy of TrackingUpdateDataPB(v107, (uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      HandDescriptor.toProtoBuf()(v109);
      outlined destroy of Matrix3x3PB((uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v106 + 16) + 1, 1);
        v106 = v255;
      }
      v111 = *(_QWORD *)(v106 + 16);
      v110 = *(_QWORD *)(v106 + 24);
      if (v111 >= v110 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1);
        v106 = v255;
      }
      *(_QWORD *)(v106 + 16) = v111 + 1;
      v109 = v250;
      outlined init with take of Matrix2dPB(v250, v106+ ((*(unsigned __int8 *)(v253 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v253 + 80))+ *(_QWORD *)(v253 + 72) * v111, type metadata accessor for HandDescriptorPB);
      v107 += v108;
      --v105;
    }
    while (v105);
    swift_bridgeObjectRelease();
    a1 = v248;
    v94 = v247;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v113 = v244;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for HandsKitDataPB._StorageClass(0);
    swift_allocObject();
    v114 = swift_retain();
    *(_QWORD *)(a1 + v94) = HandsKitDataPB._StorageClass.init(copying:)(v114);
    swift_release();
  }
  v115 = *(_QWORD *)(a1 + v94);
  swift_beginAccess();
  *(_QWORD *)(v115 + 16) = v106;
  swift_bridgeObjectRelease();
  v116 = *(_QWORD *)(v113 + 16);
  v117 = MEMORY[0x24BEE4AF8];
  if (v116)
  {
    *(_QWORD *)&v255 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v116, 0);
    v118 = v113 + ((*(unsigned __int8 *)(v238 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v238 + 80));
    v119 = *(_QWORD *)(v238 + 72);
    v117 = v255;
    v120 = v251;
    do
    {
      outlined init with copy of TrackingUpdateDataPB(v118, (uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      HandDescriptor.toProtoBuf()(v120);
      outlined destroy of Matrix3x3PB((uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v117 + 16) + 1, 1);
        v117 = v255;
      }
      v122 = *(_QWORD *)(v117 + 16);
      v121 = *(_QWORD *)(v117 + 24);
      if (v122 >= v121 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v121 > 1, v122 + 1, 1);
        v117 = v255;
      }
      *(_QWORD *)(v117 + 16) = v122 + 1;
      v120 = v251;
      outlined init with take of Matrix2dPB(v251, v117+ ((*(unsigned __int8 *)(v253 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v253 + 80))+ *(_QWORD *)(v253 + 72) * v122, type metadata accessor for HandDescriptorPB);
      v118 += v119;
      --v116;
    }
    while (v116);
    swift_bridgeObjectRelease();
    a1 = v248;
    v94 = v247;
  }
  v123 = swift_isUniquelyReferenced_nonNull_native();
  v124 = (uint64_t)v245;
  if ((v123 & 1) == 0)
  {
    type metadata accessor for HandsKitDataPB._StorageClass(0);
    swift_allocObject();
    v125 = swift_retain();
    *(_QWORD *)(a1 + v94) = HandsKitDataPB._StorageClass.init(copying:)(v125);
    swift_release();
  }
  v126 = (_QWORD *)(*(_QWORD *)(a1 + v94)
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__refHandDescriptors);
  swift_beginAccess();
  *v126 = v117;
  swift_bridgeObjectRelease();
  v127 = v252;
  v128 = *(_QWORD *)(v252 + 16);
  v129 = MEMORY[0x24BEE4AF8];
  if (v128)
  {
    v254 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v128, 0);
    v130 = 32;
    v129 = v254;
    v131 = (uint64_t)v190;
    do
    {
      v261 = *(_OWORD *)(v127 + v130 + 128);
      v262 = *(_OWORD *)(v127 + v130 + 144);
      v263 = *(_OWORD *)(v127 + v130 + 160);
      v264 = *(_OWORD *)(v127 + v130 + 176);
      v257 = *(_OWORD *)(v127 + v130 + 64);
      v258 = *(_OWORD *)(v127 + v130 + 80);
      v259 = *(_OWORD *)(v127 + v130 + 96);
      v260 = *(_OWORD *)(v127 + v130 + 112);
      v255 = *(_OWORD *)(v127 + v130);
      v256[0] = *(_OWORD *)(v127 + v130 + 16);
      v256[1] = *(_OWORD *)(v127 + v130 + 32);
      v256[2] = *(_OWORD *)(v127 + v130 + 48);
      ImageData.toProtoBuf()(v131);
      v254 = v129;
      v133 = *(_QWORD *)(v129 + 16);
      v132 = *(_QWORD *)(v129 + 24);
      if (v133 >= v132 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v132 > 1, v133 + 1, 1);
        v129 = v254;
      }
      *(_QWORD *)(v129 + 16) = v133 + 1;
      outlined init with take of Matrix2dPB(v131, v129+ ((*(unsigned __int8 *)(v249 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v249 + 80))+ *(_QWORD *)(v249 + 72) * v133, type metadata accessor for ImageDataPB);
      v130 += 192;
      --v128;
      v127 = v252;
    }
    while (v128);
    swift_bridgeObjectRelease();
    a1 = v248;
    v94 = v247;
    v124 = (uint64_t)v245;
  }
  v134 = swift_isUniquelyReferenced_nonNull_native();
  v135 = (uint64_t)v224;
  if ((v134 & 1) == 0)
  {
    type metadata accessor for HandsKitDataPB._StorageClass(0);
    swift_allocObject();
    v136 = swift_retain();
    *(_QWORD *)(a1 + v94) = HandsKitDataPB._StorageClass.init(copying:)(v136);
    swift_release();
  }
  v137 = (_QWORD *)(*(_QWORD *)(a1 + v94)
                  + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__inputImages);
  swift_beginAccess();
  *v137 = v129;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v255 = v211;
  BYTE8(v255) = v210;
  HIDWORD(v255) = v87;
  *(_QWORD *)&v256[0] = v88;
  *(int32x4_t *)((char *)v256 + 8) = v213;
  *(int32x4_t *)((char *)&v256[1] + 8) = v212;
  *((_QWORD *)&v256[2] + 1) = v209;
  LOBYTE(v257) = v208;
  v138 = v215;
  EnrollmentResults.toProtoBuf()(v215);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandsKitDataPB._StorageClass(0);
    swift_allocObject();
    v139 = swift_retain();
    *(_QWORD *)(a1 + v94) = HandsKitDataPB._StorageClass.init(copying:)(v139);
    swift_release();
  }
  v140 = *(_QWORD *)(a1 + v94);
  v141 = v138;
  v142 = v218;
  outlined init with take of Matrix2dPB(v141, v218, type metadata accessor for EnrollmentResultsPB);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v216 + 56))(v142, 0, 1, v217);
  v143 = v219;
  outlined init with take of ImageData?(v142, v219, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  v144 = v140
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__enrollmentResult;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v143, v144, &demangling cache variable for type metadata for EnrollmentResultsPB?);
  swift_endAccess();
  swift_release();
  v145 = v246;
  if (v214)
  {
    v146 = v124;
    *(_QWORD *)&v255 = v214;
    *((_QWORD *)&v255 + 1) = v192;
    *(_QWORD *)&v256[0] = v191;
    v147 = v198;
    BYTE8(v256[0]) = v197;
    *(_QWORD *)&v256[1] = v196;
    *((_QWORD *)&v256[1] + 1) = v195;
    *(_QWORD *)&v256[2] = v194;
    *((_QWORD *)&v256[2] + 1) = v193;
    HandsKitDataInternal.toProtoBuf()(v198);
    outlined init with take of Matrix2dPB((uint64_t)v147, v135, type metadata accessor for HandsKitDataInternalPB);
    v148 = v199;
    outlined init with copy of TrackingUpdateDataPB(v135, v199, type metadata accessor for HandsKitDataInternalPB);
    v149 = v135;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsKitDataPB._StorageClass(0);
      swift_allocObject();
      v150 = swift_retain();
      *(_QWORD *)(a1 + v94) = HandsKitDataPB._StorageClass.init(copying:)(v150);
      swift_release();
    }
    v151 = *(_QWORD *)(a1 + v94);
    v152 = v202;
    outlined init with take of Matrix2dPB(v148, v202, type metadata accessor for HandsKitDataInternalPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v200 + 56))(v152, 0, 1, v201);
    v153 = v203;
    outlined init with take of ImageData?(v152, v203, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
    v154 = v151
         + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__internalData;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v153, v154, &demangling cache variable for type metadata for HandsKitDataInternalPB?);
    swift_endAccess();
    swift_release();
    outlined destroy of Matrix3x3PB(v149, type metadata accessor for HandsKitDataInternalPB);
    v124 = v146;
    v145 = v246;
  }
  v155 = specialized Matrix2d.init(simd4x4float:)(v223, v222, v221, v220);
  Matrix2d.toProtoBuf()(v155, v156 & 1, v124);
  swift_bridgeObjectRelease();
  v157 = v226;
  outlined init with copy of TrackingUpdateDataPB(v124, v226, type metadata accessor for Matrix2dPB);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandsKitDataPB._StorageClass(0);
    swift_allocObject();
    v158 = swift_retain();
    *(_QWORD *)(a1 + v94) = HandsKitDataPB._StorageClass.init(copying:)(v158);
    swift_release();
  }
  v159 = *(_QWORD *)(a1 + v94);
  v160 = v157;
  v161 = v229;
  outlined init with take of Matrix2dPB(v160, v229, type metadata accessor for Matrix2dPB);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v227 + 56))(v161, 0, 1, v228);
  v162 = v231;
  outlined init with take of ImageData?(v161, v231, &demangling cache variable for type metadata for Matrix2dPB?);
  v163 = v159
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__worldPoseTransform;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v162, v163, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_endAccess();
  swift_release();
  if (v225)
  {
    swift_retain();
    v164 = v204;
    ImageCalibrationData.toProtoBuf()(v204);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsKitDataPB._StorageClass(0);
      swift_allocObject();
      v165 = swift_retain();
      *(_QWORD *)(a1 + v94) = HandsKitDataPB._StorageClass.init(copying:)(v165);
      swift_release();
    }
    v166 = *(_QWORD *)(a1 + v94);
    v167 = v164;
    v168 = v241;
    outlined init with take of Matrix2dPB(v167, v241, type metadata accessor for ImageCalibrationDataPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v239 + 56))(v168, 0, 1, v240);
    v169 = v242;
    outlined init with take of ImageData?(v168, v242, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    v170 = v166
         + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamLeftCalibration;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v169, v170, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  if (v230)
  {
    swift_retain();
    v171 = v205;
    ImageCalibrationData.toProtoBuf()(v205);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandsKitDataPB._StorageClass(0);
      swift_allocObject();
      v172 = swift_retain();
      *(_QWORD *)(a1 + v94) = HandsKitDataPB._StorageClass.init(copying:)(v172);
      swift_release();
    }
    v173 = *(_QWORD *)(a1 + v94);
    v174 = v171;
    v175 = v241;
    outlined init with take of Matrix2dPB(v174, v241, type metadata accessor for ImageCalibrationDataPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v239 + 56))(v175, 0, 1, v240);
    v176 = v242;
    outlined init with take of ImageData?(v175, v242, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    v177 = v173
         + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__mcamRightCalibration;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v176, v177, &demangling cache variable for type metadata for ImageCalibrationDataPB?);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  v178 = v233;
  v179 = v234;
  swift_bridgeObjectRetain();
  v180 = v232;
  swift_bridgeObjectRetain();
  UnknownStorage.init()();
  *v179 = Array<A>.toProtoBuf()(v178);
  v181 = Array<A>.toProtoBuf()(v180);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v179[1] = v181;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandsKitDataPB._StorageClass(0);
    swift_allocObject();
    v182 = swift_retain();
    *(_QWORD *)(a1 + v94) = HandsKitDataPB._StorageClass.init(copying:)(v182);
    swift_release();
  }
  v183 = *(_QWORD *)(a1 + v94);
  v184 = (uint64_t)v179;
  v185 = v236;
  outlined init with take of Matrix2dPB(v184, v236, type metadata accessor for DetectionResultsByChiralityPB);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v235 + 56))(v185, 0, 1, v145);
  v186 = v237;
  outlined init with take of ImageData?(v185, v237, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  v187 = v183
       + OBJC_IVAR____TtCV5Hands14HandsKitDataPBP33_2A9165D94D341D516233AD188B0F052E13_StorageClass__detectionOutputs;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v186, v187, &demangling cache variable for type metadata for DetectionResultsByChiralityPB?);
  swift_endAccess();
  swift_release();
  return outlined destroy of Matrix3x3PB(v124, type metadata accessor for Matrix2dPB);
}

uint64_t HandsKitData.toProtoBufData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for HandsKitDataPB(0);
  MEMORY[0x24BDAC7A8](v0, v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  HandsKitData.toProtoBuf()((uint64_t)v3);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
  v4 = Message.serializedData(partial:)();
  outlined destroy of Matrix3x3PB((uint64_t)v3, type metadata accessor for HandsKitDataPB);
  return v4;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HandsKitData.toProtoBufJson()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String result;
  uint64_t v15;

  v0 = type metadata accessor for JSONEncodingOptions();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0, v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for HandsKitDataPB(0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  HandsKitData.toProtoBuf()((uint64_t)v8);
  JSONEncodingOptions.init()();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
  v9 = Message.jsonString(options:)();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  outlined destroy of Matrix3x3PB((uint64_t)v8, type metadata accessor for HandsKitDataPB);
  v12 = v9;
  v13 = v11;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

Swift::Void __swiftcall HandsKitData.transformCalibrationData(from:)(simd_float4x4 *from)
{
  uint64_t v1;
  simd_float4x4 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  float32x2_t *v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  simd_float4x4 v15;

  v3 = *(_QWORD *)(v1 + 488);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v15 = __invert_f4(v2);
    v13 = (float32x4_t)v15.columns[1];
    v14 = (float32x4_t)v15.columns[0];
    v11 = (float32x4_t)v15.columns[3];
    v12 = (float32x4_t)v15.columns[2];
    v5 = (uint64_t *)(v3 + 96);
    do
    {
      v7 = *v5;
      v5 += 24;
      v6 = (float32x2_t *)v7;
      swift_beginAccess();
      v8 = *(float32x4_t *)(v7 + 240);
      v9 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(_OWORD *)v6[26].f32)), v13, v6[26], 1), v12, *(float32x4_t *)v6[26].f32, 2), v11, *(float32x4_t *)v6[26].f32, 3);
      v10 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(_OWORD *)v6[28].f32)), v13, v6[28], 1), v12, *(float32x4_t *)v6[28].f32, 2), v11, *(float32x4_t *)v6[28].f32, 3);
      *(float32x4_t *)(v7 + 192) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(_OWORD *)(v7 + 192))), v13, *(float32x2_t *)(v7 + 192), 1), v12, *(float32x4_t *)(v7 + 192), 2), v11, *(float32x4_t *)(v7 + 192), 3);
      *(float32x4_t *)(v7 + 208) = v9;
      *(float32x4_t *)(v7 + 224) = v10;
      *(float32x4_t *)(v7 + 240) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v8.f32[0]), v13, *(float32x2_t *)v8.f32, 1), v12, v8, 2), v11, v8, 3);
      *(_OWORD *)(v7 + 336) = 0u;
      *(_OWORD *)(v7 + 352) = 0u;
      *(_OWORD *)(v7 + 368) = 0u;
      *(_OWORD *)(v7 + 384) = 0u;
      *(_BYTE *)(v7 + 400) = 1;
      --v4;
    }
    while (v4);
  }
}

Swift::Void __swiftcall HandsKitData.transformHandsCoordinates(from:)(simd_float4x4 *from)
{
  unint64_t *v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float32x2_t *v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t *v27;
  unint64_t *v28;
  unint64_t v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v47 = v4;
  v48 = v5;
  v45 = v2;
  v46 = v3;
  v6 = *v1;
  v50 = *(_QWORD *)(*v1 + 16);
  if (!v50)
    return;
  v28 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_25:
    v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  v7 = 0;
  v29 = v6;
  while (1)
  {
    if (v50 == v7)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v7 >= *(_QWORD *)(v6 + 16))
      goto LABEL_23;
    v14 = type metadata accessor for HandDescriptor();
    v15 = v6
        + ((*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v7;
    v16 = (float32x2_t *)(v15 + *(int *)(v14 + 80));
    if ((v16[2].i8[0] & 1) != 0)
    {
      if ((*(_BYTE *)(v15 + 192) & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      v18 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, COERCE_FLOAT(*v16)), v46, *v16, 1), v47, *(float32x4_t *)v16->f32, 2), v48);
      v18.i32[3] = v31;
      *(float32x4_t *)v16->f32 = v18;
      v16[2].i8[0] = 0;
      if ((*(_BYTE *)(v15 + 192) & 1) != 0)
      {
LABEL_10:
        v17 = *(_QWORD *)(v15 + 16);
        if (!v17)
          goto LABEL_5;
        goto LABEL_14;
      }
    }
    v19 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, COERCE_FLOAT(*(_OWORD *)(v15 + 160))), v46, *(float32x2_t *)(v15 + 160), 1), v47, *(float32x4_t *)(v15 + 160), 2), v48);
    v19.i32[3] = v30;
    v20 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, COERCE_FLOAT(*(_OWORD *)(v15 + 176))), v46, *(float32x2_t *)(v15 + 176), 1), v47, *(float32x4_t *)(v15 + 176), 2), v48);
    v20.i32[3] = v32;
    *(float32x4_t *)(v15 + 160) = v19;
    *(float32x4_t *)(v15 + 176) = v20;
    *(_BYTE *)(v15 + 192) = 0;
    v17 = *(_QWORD *)(v15 + 16);
    if (!v17)
      goto LABEL_5;
LABEL_14:
    if (!*(_QWORD *)(v17 + 16))
      goto LABEL_24;
    v21 = *(_QWORD *)(v15 + 64);
    v22 = *(_QWORD *)(v15 + 72);
    v23 = *(_QWORD *)(v15 + 80);
    v24 = *(_QWORD *)(v15 + 104);
    v43 = *(_QWORD *)(v15 + 96);
    v44 = *(_QWORD *)(v15 + 88);
    v42 = *(_QWORD *)(v15 + 112);
    v49 = *(_QWORD *)(v15 + 120);
    v41 = *(_QWORD *)(v15 + 128);
    v25 = *(_QWORD *)(v17 + 32);
    v26 = *(_QWORD *)(v17 + 40);
    v35 = *(float32x4_t *)(v17 + 48);
    v36 = *(float32x4_t *)(v17 + 64);
    v37 = *(float32x4_t *)(v17 + 80);
    v38 = *(float32x4_t *)(v17 + 96);
    v33 = *(float32x4_t *)(v17 + 112);
    v34 = *(float32x4_t *)(v17 + 128);
    v39 = *(float32x4_t *)(v17 + 144);
    v40 = *(float32x4_t *)(v17 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27 = (float32x4_t *)v17;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (!*(_QWORD *)(v17 + 16))
        break;
      goto LABEL_4;
    }
    v27 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v17);
    if (!v27[1].i64[0])
      break;
LABEL_4:
    v27[2].i64[0] = v25;
    v27[2].i64[1] = v26;
    v27[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v35.f32[0]), v46, *(float32x2_t *)v35.f32, 1), v47, v35, 2), v48, v35, 3);
    v27[4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v36.f32[0]), v46, *(float32x2_t *)v36.f32, 1), v47, v36, 2), v48, v36, 3);
    v27[5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v37.f32[0]), v46, *(float32x2_t *)v37.f32, 1), v47, v37, 2), v48, v37, 3);
    v27[6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v38.f32[0]), v46, *(float32x2_t *)v38.f32, 1), v47, v38, 2), v48, v38, 3);
    v27[7] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v33.f32[0]), v46, *(float32x2_t *)v33.f32, 1), v47, v33, 2), v48, v33, 3);
    v27[8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v34.f32[0]), v46, *(float32x2_t *)v34.f32, 1), v47, v34, 2), v48, v34, 3);
    v27[9] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v39.f32[0]), v46, *(float32x2_t *)v39.f32, 1), v47, v39, 2), v48, v39, 3);
    v27[10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v40.f32[0]), v46, *(float32x2_t *)v40.f32, 1), v47, v40, 2), v48, v40, 3);
    swift_bridgeObjectRelease();
    v8 = swift_bridgeObjectRetain();
    v9 = specialized static HandPose.calculateCoordinatesFromJointTransforms(_:)(v8);
    swift_bridgeObjectRelease();
    type metadata accessor for HandsKitUtils();
    v10 = swift_bridgeObjectRetain();
    static HandsKitUtils.calculatePalmCenter(_:)(v10, &v51);
    swift_bridgeObjectRelease();
    outlined consume of HandPose?(v17);
    v11 = v51;
    v13 = v52;
    v12 = v53;
    *(_QWORD *)(v15 + 16) = v27;
    *(_QWORD *)(v15 + 24) = v9;
    v6 = v29;
    *(_OWORD *)(v15 + 32) = v11;
    *(_QWORD *)(v15 + 48) = v13;
    *(_QWORD *)(v15 + 56) = v12;
    *(_QWORD *)(v15 + 64) = v21;
    *(_QWORD *)(v15 + 72) = v22;
    *(_QWORD *)(v15 + 80) = v23;
    *(_QWORD *)(v15 + 88) = v44;
    *(_QWORD *)(v15 + 96) = v43;
    *(_QWORD *)(v15 + 104) = v24;
    *(_QWORD *)(v15 + 112) = v42;
    *(_QWORD *)(v15 + 120) = v49;
    *(_QWORD *)(v15 + 128) = v41 & 0xFFFFFFFF00000101;
LABEL_5:
    if (v50 == ++v7)
      goto LABEL_20;
  }
  __break(1u);
LABEL_20:
  *v28 = v6;
}

Swift::Void __swiftcall HandsKitData.transformReferenceHandsCoordinates(from:)(simd_float4x4 *from)
{
  uint64_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float32x2_t *v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v47 = v4;
  v48 = v5;
  v45 = v2;
  v46 = v3;
  v6 = *(_QWORD *)(v1 + 160);
  v50 = *(_QWORD *)(v6 + 16);
  if (!v50)
    return;
  v28 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_25:
    v6 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  v7 = 0;
  v29 = v6;
  while (1)
  {
    if (v50 == v7)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v7 >= *(_QWORD *)(v6 + 16))
      goto LABEL_23;
    v14 = type metadata accessor for HandDescriptor();
    v15 = v6
        + ((*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v7;
    v16 = (float32x2_t *)(v15 + *(int *)(v14 + 80));
    if ((v16[2].i8[0] & 1) != 0)
    {
      if ((*(_BYTE *)(v15 + 192) & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      v18 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, COERCE_FLOAT(*v16)), v46, *v16, 1), v47, *(float32x4_t *)v16->f32, 2), v48);
      v18.i32[3] = v31;
      *(float32x4_t *)v16->f32 = v18;
      v16[2].i8[0] = 0;
      if ((*(_BYTE *)(v15 + 192) & 1) != 0)
      {
LABEL_10:
        v17 = *(_QWORD *)(v15 + 16);
        if (!v17)
          goto LABEL_5;
        goto LABEL_14;
      }
    }
    v19 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, COERCE_FLOAT(*(_OWORD *)(v15 + 160))), v46, *(float32x2_t *)(v15 + 160), 1), v47, *(float32x4_t *)(v15 + 160), 2), v48);
    v19.i32[3] = v30;
    v20 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, COERCE_FLOAT(*(_OWORD *)(v15 + 176))), v46, *(float32x2_t *)(v15 + 176), 1), v47, *(float32x4_t *)(v15 + 176), 2), v48);
    v20.i32[3] = v32;
    *(float32x4_t *)(v15 + 160) = v19;
    *(float32x4_t *)(v15 + 176) = v20;
    *(_BYTE *)(v15 + 192) = 0;
    v17 = *(_QWORD *)(v15 + 16);
    if (!v17)
      goto LABEL_5;
LABEL_14:
    if (!*(_QWORD *)(v17 + 16))
      goto LABEL_24;
    v21 = *(_QWORD *)(v15 + 64);
    v22 = *(_QWORD *)(v15 + 72);
    v23 = *(_QWORD *)(v15 + 80);
    v24 = *(_QWORD *)(v15 + 104);
    v43 = *(_QWORD *)(v15 + 96);
    v44 = *(_QWORD *)(v15 + 88);
    v42 = *(_QWORD *)(v15 + 112);
    v49 = *(_QWORD *)(v15 + 120);
    v41 = *(_QWORD *)(v15 + 128);
    v25 = *(_QWORD *)(v17 + 32);
    v26 = *(_QWORD *)(v17 + 40);
    v35 = *(float32x4_t *)(v17 + 48);
    v36 = *(float32x4_t *)(v17 + 64);
    v37 = *(float32x4_t *)(v17 + 80);
    v38 = *(float32x4_t *)(v17 + 96);
    v33 = *(float32x4_t *)(v17 + 112);
    v34 = *(float32x4_t *)(v17 + 128);
    v39 = *(float32x4_t *)(v17 + 144);
    v40 = *(float32x4_t *)(v17 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27 = (float32x4_t *)v17;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (!*(_QWORD *)(v17 + 16))
        break;
      goto LABEL_4;
    }
    v27 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v17);
    if (!v27[1].i64[0])
      break;
LABEL_4:
    v27[2].i64[0] = v25;
    v27[2].i64[1] = v26;
    v27[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v35.f32[0]), v46, *(float32x2_t *)v35.f32, 1), v47, v35, 2), v48, v35, 3);
    v27[4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v36.f32[0]), v46, *(float32x2_t *)v36.f32, 1), v47, v36, 2), v48, v36, 3);
    v27[5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v37.f32[0]), v46, *(float32x2_t *)v37.f32, 1), v47, v37, 2), v48, v37, 3);
    v27[6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v38.f32[0]), v46, *(float32x2_t *)v38.f32, 1), v47, v38, 2), v48, v38, 3);
    v27[7] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v33.f32[0]), v46, *(float32x2_t *)v33.f32, 1), v47, v33, 2), v48, v33, 3);
    v27[8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v34.f32[0]), v46, *(float32x2_t *)v34.f32, 1), v47, v34, 2), v48, v34, 3);
    v27[9] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v39.f32[0]), v46, *(float32x2_t *)v39.f32, 1), v47, v39, 2), v48, v39, 3);
    v27[10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, v40.f32[0]), v46, *(float32x2_t *)v40.f32, 1), v47, v40, 2), v48, v40, 3);
    swift_bridgeObjectRelease();
    v8 = swift_bridgeObjectRetain();
    v9 = specialized static HandPose.calculateCoordinatesFromJointTransforms(_:)(v8);
    swift_bridgeObjectRelease();
    type metadata accessor for HandsKitUtils();
    v10 = swift_bridgeObjectRetain();
    static HandsKitUtils.calculatePalmCenter(_:)(v10, &v51);
    swift_bridgeObjectRelease();
    outlined consume of HandPose?(v17);
    v11 = v51;
    v13 = v52;
    v12 = v53;
    *(_QWORD *)(v15 + 16) = v27;
    *(_QWORD *)(v15 + 24) = v9;
    v6 = v29;
    *(_OWORD *)(v15 + 32) = v11;
    *(_QWORD *)(v15 + 48) = v13;
    *(_QWORD *)(v15 + 56) = v12;
    *(_QWORD *)(v15 + 64) = v21;
    *(_QWORD *)(v15 + 72) = v22;
    *(_QWORD *)(v15 + 80) = v23;
    *(_QWORD *)(v15 + 88) = v44;
    *(_QWORD *)(v15 + 96) = v43;
    *(_QWORD *)(v15 + 104) = v24;
    *(_QWORD *)(v15 + 112) = v42;
    *(_QWORD *)(v15 + 120) = v49;
    *(_QWORD *)(v15 + 128) = v41 & 0xFFFFFFFF00000101;
LABEL_5:
    if (v50 == ++v7)
      goto LABEL_20;
  }
  __break(1u);
LABEL_20:
  *(_QWORD *)(v28 + 160) = v6;
}

float32x4_t *HandsKitData.fromHeadsetToWorld(transforms:)(float32x4_t *a1)
{
  float32x4_t *v1;
  float32x4_t *v2;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  if (!a1[1].i64[0])
  {
    __break(1u);
    goto LABEL_5;
  }
  v1 = a1;
  v7 = v2[13];
  v8 = v2[14];
  v10 = v2[15];
  v11 = v2[16];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v9 = a1[5];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_5:
    v1 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
  v1[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v4.f32[0]), v8, *(float32x2_t *)v4.f32, 1), v10, v4, 2), v11, v4, 3);
  v1[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v5.f32[0]), v8, *(float32x2_t *)v5.f32, 1), v10, v5, 2), v11, v5, 3);
  v1[4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v6.f32[0]), v8, *(float32x2_t *)v6.f32, 1), v10, v6, 2), v11, v6, 3);
  v1[5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v9.f32[0]), v8, *(float32x2_t *)v9.f32, 1), v10, v9, 2), v11, v9, 3);
  return v1;
}

float32x4_t *HandsKitData.fromWorldToHeadset(transforms:)(float32x4_t *a1)
{
  float32x4_t *v1;
  float32x4_t *v2;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  if (!a1[1].i64[0])
  {
    __break(1u);
    goto LABEL_5;
  }
  v1 = a1;
  v7 = v2[17];
  v8 = v2[18];
  v10 = v2[19];
  v11 = v2[20];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v9 = a1[5];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_5:
    v1 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
  v1[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v4.f32[0]), v8, *(float32x2_t *)v4.f32, 1), v10, v4, 2), v11, v4, 3);
  v1[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v5.f32[0]), v8, *(float32x2_t *)v5.f32, 1), v10, v5, 2), v11, v5, 3);
  v1[4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v6.f32[0]), v8, *(float32x2_t *)v6.f32, 1), v10, v6, 2), v11, v6, 3);
  v1[5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v9.f32[0]), v8, *(float32x2_t *)v9.f32, 1), v10, v9, 2), v11, v9, 3);
  return v1;
}

void __swiftcall HandsKitData.fromHeadsetToWorld(transform:)(simd_float4x4 *__return_ptr retstr, simd_float4x4 *transform)
{
  ;
}

void __swiftcall HandsKitData.fromWorldToHeadset(transform:)(simd_float4x4 *__return_ptr retstr, simd_float4x4 *transform)
{
  ;
}

uint64_t HandsKitData.fromHeadsetToWorld(handPose:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float32x4_t *v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  int v13;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  char v27;
  int v28;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  v8 = *(_OWORD *)(a1 + 64);
  v9 = *(_OWORD *)(a1 + 80);
  v10 = *(_OWORD *)(a1 + 96);
  v11 = *(_BYTE *)(a1 + 112);
  v12 = *(_BYTE *)(a1 + 113);
  v13 = *(_DWORD *)(a1 + 116);
  v18 = v2[13];
  v17 = v2[14];
  v16 = v2[15];
  v15 = v2[16];
  v19[0] = *(_QWORD *)a1;
  v19[1] = v4;
  v20 = v5;
  v21 = v6;
  v22 = v7;
  v23 = v8;
  v24 = v9;
  v25 = v10;
  v26 = v11;
  v27 = v12;
  v28 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return HandPose.init(_:from:)((uint64_t)v19, a2, v18, v17, v16, v15);
}

uint64_t HandsKitData.fromWorldToHeadset(handPose:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float32x4_t *v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  char v12;
  int v13;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  char v27;
  int v28;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  v8 = *(_OWORD *)(a1 + 64);
  v9 = *(_OWORD *)(a1 + 80);
  v10 = *(_OWORD *)(a1 + 96);
  v11 = *(_BYTE *)(a1 + 112);
  v12 = *(_BYTE *)(a1 + 113);
  v13 = *(_DWORD *)(a1 + 116);
  v18 = v2[17];
  v17 = v2[18];
  v16 = v2[19];
  v15 = v2[20];
  v19[0] = *(_QWORD *)a1;
  v19[1] = v4;
  v20 = v5;
  v21 = v6;
  v22 = v7;
  v23 = v8;
  v24 = v9;
  v25 = v10;
  v26 = v11;
  v27 = v12;
  v28 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return HandPose.init(_:from:)((uint64_t)v19, a2, v18, v17, v16, v15);
}

uint64_t static HandsKitData.CreateSequenceProtobufData(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  _BYTE v27[552];
  _QWORD v28[70];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataPB?);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HandsKitDataSequencePB(0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (_QWORD *)((char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v26[0] = v6;
  UnknownStorage.init()();
  v10 = a1 + 64;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a1 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_5;
    }
    v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v22 >= v14)
      goto LABEL_21;
    v23 = *(_QWORD *)(v10 + 8 * v22);
    ++v16;
    if (!v23)
    {
      v16 = v22 + 1;
      if (v22 + 1 >= v14)
        goto LABEL_21;
      v23 = *(_QWORD *)(v10 + 8 * v16);
      if (!v23)
      {
        v16 = v22 + 2;
        if (v22 + 2 >= v14)
          goto LABEL_21;
        v23 = *(_QWORD *)(v10 + 8 * v16);
        if (!v23)
          break;
      }
    }
LABEL_20:
    v13 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_5:
    v19 = (const void *)(*(_QWORD *)(a1 + 56) + 560 * v18);
    memcpy(v28, v19, 0x228uLL);
    v20 = v28[42];
    memcpy(v27, v19, sizeof(v27));
    outlined retain of HandsKitData(v28);
    HandsKitData.toProtoBuf()((uint64_t)v5);
    v21 = type metadata accessor for HandsKitDataPB(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v5, 0, 1, v21);
    specialized Dictionary.subscript.setter((uint64_t)v5, v20);
    result = (uint64_t)outlined release of HandsKitData(v28);
  }
  v24 = v22 + 3;
  if (v24 >= v14)
  {
LABEL_21:
    swift_release();
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataSequencePB and conformance HandsKitDataSequencePB, type metadata accessor for HandsKitDataSequencePB, (uint64_t)&protocol conformance descriptor for HandsKitDataSequencePB);
    v25 = Message.serializedData(partial:)();
    outlined destroy of Matrix3x3PB((uint64_t)v9, type metadata accessor for HandsKitDataSequencePB);
    return v25;
  }
  v23 = *(_QWORD *)(v10 + 8 * v24);
  if (v23)
  {
    v16 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    v16 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v16 >= v14)
      goto LABEL_21;
    v23 = *(_QWORD *)(v10 + 8 * v16);
    ++v24;
    if (v23)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t static HandsKitData.DecodeSequenceProtobufData(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE v17[16];
  _OWORD v18[2];
  uint64_t v19;

  v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v4, v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitDataSequencePB?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for HandsKitDataSequencePB(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsKitDataSequencePB and conformance HandsKitDataSequencePB, type metadata accessor for HandsKitDataSequencePB, (uint64_t)&protocol conformance descriptor for HandsKitDataSequencePB);
  Message.init(serializedData:extensions:partial:options:)();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  outlined init with take of Matrix2dPB((uint64_t)v9, (uint64_t)v14, type metadata accessor for HandsKitDataSequencePB);
  *(_QWORD *)&v18[0] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v15 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v15, v18);
  swift_bridgeObjectRelease();
  outlined destroy of Matrix3x3PB((uint64_t)v14, type metadata accessor for HandsKitDataSequencePB);
  return *(_QWORD *)&v18[0];
}

double static HandsKitData.strippedHandsKitData(from:stripPixelBuffer:stripWarperMeshBin:stripWarperMeshBuffer:stripJpegData:stripRawData:stripCropData:stripPoseModelLatent:)@<D0>(const void *a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, int a5@<W4>, char a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  char v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  double result;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  _OWORD v104[35];
  _OWORD v105[5];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  int v129;
  int v130;
  __int128 v131;
  __int128 v132;
  char v133;
  __int128 v134;
  char v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[72];

  v93 = a7;
  v94 = a8;
  v92 = a5;
  LODWORD(v96) = a2;
  v95 = a9;
  v13 = type metadata accessor for HandDescriptor();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13, v15);
  v99 = (uint64_t)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v18);
  v101 = (uint64_t)&v90 - v19;
  memcpy(v144, a1, 0x228uLL);
  v20 = *(_QWORD *)(v144[61] + 16);
  v21 = MEMORY[0x24BEE4AF8];
  if (v20)
  {
    v91 = v14;
    v143 = MEMORY[0x24BEE4AF8];
    v100 = v144[61];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    v22 = v100;
    v21 = v143;
    v23 = a6;
    v24 = v20 - 1;
    v25 = 32;
    v97 = a4 & 1;
    v98 = a3 & 1;
    LODWORD(v96) = v96 & 1;
    v26 = v92 & 1;
    v27 = v23 & 1;
    while (1)
    {
      v28 = (_OWORD *)(v22 + v25);
      v29 = v28[9];
      v104[8] = v28[8];
      v104[9] = v29;
      v30 = v28[11];
      v104[10] = v28[10];
      v104[11] = v30;
      v31 = v28[5];
      v104[4] = v28[4];
      v104[5] = v31;
      v32 = v28[7];
      v104[6] = v28[6];
      v104[7] = v32;
      v33 = v28[1];
      v104[0] = *v28;
      v104[1] = v33;
      v34 = v28[3];
      v104[2] = v28[2];
      v104[3] = v34;
      closure #1 in static HandsKitData.strippedHandsKitData(from:stripPixelBuffer:stripWarperMeshBin:stripWarperMeshBuffer:stripJpegData:stripRawData:stripCropData:stripPoseModelLatent:)((uint64_t)v104, v98, v97, v96, v26, v27, v105);
      v143 = v21;
      v36 = *(_QWORD *)(v21 + 16);
      v35 = *(_QWORD *)(v21 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        v21 = v143;
      }
      *(_QWORD *)(v21 + 16) = v36 + 1;
      v37 = (_OWORD *)(v21 + 192 * v36);
      v38 = v105[0];
      v39 = v105[1];
      v40 = v105[3];
      v37[4] = v105[2];
      v37[5] = v40;
      v37[2] = v38;
      v37[3] = v39;
      v41 = v105[4];
      v42 = v106;
      v43 = v108;
      v37[8] = v107;
      v37[9] = v43;
      v37[6] = v41;
      v37[7] = v42;
      v44 = v109;
      v45 = v110;
      v46 = v112;
      v37[12] = v111;
      v37[13] = v46;
      v37[10] = v44;
      v37[11] = v45;
      if (!v24)
        break;
      v25 += 192;
      --v24;
      v22 = v100;
    }
    swift_bridgeObjectRelease();
    v47 = v101;
    v14 = v91;
  }
  else
  {
    v47 = v101;
  }
  memcpy(v104, v144, 0x228uLL);
  outlined retain of HandsKitData(v144);
  HandsKitData.init(updateData:withImages:)(v104, v21, v105);
  v48 = *(_QWORD *)(*(_QWORD *)&v105[0] + 16);
  v49 = MEMORY[0x24BEE4AF8];
  if (v48)
  {
    *(_QWORD *)&v104[0] = MEMORY[0x24BEE4AF8];
    v50 = *(_QWORD *)&v105[0];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48, 0);
    v51 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v96 = v50;
    v100 = v51;
    v52 = v50 + v51;
    v53 = *(_QWORD *)(v14 + 72);
    v97 = v94 & 1;
    v98 = v93 & 1;
    do
    {
      v54 = v99;
      outlined init with copy of TrackingUpdateDataPB(v52, v99, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      closure #2 in static HandsKitData.strippedHandsKitData(from:stripPixelBuffer:stripWarperMeshBin:stripWarperMeshBuffer:stripJpegData:stripRawData:stripCropData:stripPoseModelLatent:)(v54, v98, v97, v47);
      outlined destroy of Matrix3x3PB(v54, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v49 = *(_QWORD *)&v104[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v49 + 16) + 1, 1);
        v49 = *(_QWORD *)&v104[0];
      }
      v56 = *(_QWORD *)(v49 + 16);
      v55 = *(_QWORD *)(v49 + 24);
      if (v56 >= v55 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
        v49 = *(_QWORD *)&v104[0];
      }
      *(_QWORD *)(v49 + 16) = v56 + 1;
      v57 = v49 + v100 + v56 * v53;
      v47 = v101;
      outlined init with take of Matrix2dPB(v101, v57, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v52 += v53;
      --v48;
    }
    while (v48);
    swift_bridgeObjectRelease();
  }
  v58 = v95;
  v59 = (_QWORD *)(v95 + 396);
  swift_bridgeObjectRelease();
  v60 = *((_QWORD *)&v105[4] + 1);
  v61 = v106;
  v62 = DWORD1(v106);
  v63 = v109;
  v64 = *((_QWORD *)&v112 + 1);
  v65 = v114;
  v66 = v115;
  v67 = v116;
  v68 = v117;
  v69 = v118;
  v70 = v119;
  v71 = v120;
  v72 = v121;
  v73 = v124;
  v74 = v126;
  v75 = v128;
  v76 = v112;
  v77 = v129;
  v78 = v130;
  v79 = v135;
  v80 = v136;
  v81 = v137;
  v82 = v140;
  result = v141;
  v84 = v142;
  LOBYTE(v143) = BYTE8(v109);
  v103 = v127;
  v102 = v133;
  *(_QWORD *)v58 = v49;
  *(_OWORD *)(v58 + 8) = *(_OWORD *)((char *)v105 + 8);
  *(_OWORD *)(v58 + 24) = *(_OWORD *)((char *)&v105[1] + 8);
  *(_OWORD *)(v58 + 40) = *(_OWORD *)((char *)&v105[2] + 8);
  *(_OWORD *)(v58 + 56) = *(_OWORD *)((char *)&v105[3] + 8);
  *(_QWORD *)(v58 + 72) = v60;
  *(_BYTE *)(v58 + 80) = v61;
  *(_DWORD *)(v58 + 84) = v62;
  *(_QWORD *)(v58 + 88) = *((_QWORD *)&v106 + 1);
  v85 = v108;
  *(_OWORD *)(v58 + 96) = v107;
  *(_OWORD *)(v58 + 112) = v85;
  *(_QWORD *)(v58 + 128) = v63;
  *(_BYTE *)(v58 + 136) = v143;
  v86 = v111;
  *(_OWORD *)(v58 + 144) = v110;
  *(_OWORD *)(v58 + 160) = v86;
  *(_DWORD *)(v58 + 176) = v76;
  *(_QWORD *)(v58 + 184) = v64;
  *(_OWORD *)(v58 + 192) = v113;
  *(_OWORD *)(v58 + 208) = v65;
  *(_OWORD *)(v58 + 224) = v66;
  *(_OWORD *)(v58 + 240) = v67;
  *(_OWORD *)(v58 + 256) = v68;
  *(_OWORD *)(v58 + 272) = v69;
  *(_OWORD *)(v58 + 288) = v70;
  *(_OWORD *)(v58 + 304) = v71;
  v87 = v122;
  *(_OWORD *)(v58 + 320) = v72;
  *(_OWORD *)(v58 + 336) = v87;
  *(_QWORD *)(v58 + 352) = v123;
  *(_QWORD *)(v58 + 360) = v73;
  *(_OWORD *)(v58 + 368) = v125;
  *(_QWORD *)(v58 + 384) = v74;
  *(_BYTE *)(v58 + 392) = v103;
  *v59 = v75;
  *(_DWORD *)(v58 + 404) = v77;
  *(_DWORD *)(v58 + 408) = v78;
  v88 = v132;
  *(_OWORD *)(v58 + 412) = v131;
  *(_OWORD *)(v58 + 428) = v88;
  *(_BYTE *)(v58 + 444) = v102;
  *(_OWORD *)(v58 + 448) = v134;
  *(_BYTE *)(v58 + 464) = v79;
  *(_OWORD *)(v58 + 472) = v80;
  *(_QWORD *)(v58 + 488) = v81;
  v89 = v139;
  *(_OWORD *)(v58 + 496) = v138;
  *(_OWORD *)(v58 + 512) = v89;
  *(_QWORD *)(v58 + 528) = v82;
  *(double *)(v58 + 536) = result;
  *(_QWORD *)(v58 + 544) = v84;
  return result;
}

size_t closure #1 in static HandsKitData.strippedHandsKitData(from:stripPixelBuffer:stripWarperMeshBin:stripWarperMeshBuffer:stripJpegData:stripRawData:stripCropData:stripPoseModelLatent:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, _OWORD *a7@<X8>)
{
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  void *v17;
  id v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint32x2_t *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  char v37;
  uint64_t v38;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  char v52;
  _OWORD v53[4];

  v9 = *(void **)a1;
  v48 = *(_QWORD *)(a1 + 16);
  v49 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 64);
  v30 = *(void **)(a1 + 56);
  v38 = *(_QWORD *)(a1 + 72);
  v37 = *(_BYTE *)(a1 + 80);
  v45 = *(_DWORD *)(a1 + 84);
  v44 = *(_QWORD *)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 120);
  v13 = *(_QWORD *)(a1 + 128);
  v46 = *(_QWORD *)(a1 + 136);
  v47 = *(_QWORD *)(a1 + 24);
  v42 = *(_QWORD *)(a1 + 144);
  v43 = *(_QWORD *)(a1 + 104);
  v41 = *(_QWORD *)(a1 + 152);
  swift_beginAccess();
  v14 = *(_OWORD *)(v10 + 80);
  v53[0] = *(_OWORD *)(v10 + 64);
  v53[1] = v14;
  v53[2] = *(_OWORD *)(v10 + 96);
  swift_beginAccess();
  v35 = *(__n128 *)(v10 + 112);
  swift_beginAccess();
  v33 = *(__n128 *)(v10 + 208);
  v34 = *(__n128 *)(v10 + 192);
  v31 = *(__n128 *)(v10 + 224);
  v32 = *(__n128 *)(v10 + 240);
  swift_beginAccess();
  v15 = 0;
  v16 = *(_BYTE *)(v10 + 24);
  v51 = *(_QWORD *)(v10 + 16);
  v52 = v16;
  if ((a2 & 1) == 0)
  {
    swift_beginAccess();
    v15 = *(_QWORD *)(v10 + 128);
    swift_bridgeObjectRetain();
  }
  if ((a3 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    swift_beginAccess();
    v17 = *(void **)(v10 + 136);
    v18 = v17;
  }
  swift_beginAccess();
  v19 = *(double *)(v10 + 144);
  swift_beginAccess();
  v20 = *(_QWORD *)(v10 + 28);
  v21 = *(_QWORD *)(v10 + 36);
  v22 = *(_QWORD *)(v10 + 44);
  type metadata accessor for ImageCalibrationData();
  swift_allocObject();
  v23 = (uint32x2_t *)ImageCalibrationData.init(intrinsicsMatrix:radialDistortion:extrinsicMatrix:forCameraModel:warperMeshBin:warperMesh:imageSize:arrivalTimeStamp:)(v53, &v51, v15, (uint64_t)v17, v20, v21, v22, v35, v34, v33, v31, v32, v19);
  if ((a4 & 1) != 0)
  {
    v24 = 0;
    v9 = 0;
  }
  else
  {
    v24 = v30;
    v25 = v30;
    v26 = v9;
  }
  v27 = v43;
  v51 = v38;
  v52 = v37;
  if ((a5 & 1) == 0)
  {
    outlined copy of Data?(v43, v11);
    if ((a6 & 1) == 0)
      goto LABEL_11;
LABEL_13:
    v12 = 0;
    v13 = 0xF000000000000000;
    goto LABEL_14;
  }
  v27 = 0;
  v11 = 0xF000000000000000;
  if ((a6 & 1) != 0)
    goto LABEL_13;
LABEL_11:
  outlined copy of Data?(v12, v13);
LABEL_14:
  v28 = swift_bridgeObjectRetain();
  return ImageData.init(image:andTimestamp:andMidExposureTimestamp:andExpirationTimestamp:andCalibrationData:forCameraSource:withImageRotation:detectionPixelBuffer:withKey:jpegData:rawImageData:prewittCurrent:prewittPulseWidth:aeAverage:darkestHandAverage:brightestHandAverage:)(v24, v49, v48, v47, 0, 0, 0, v46, a7, v23, (uint64_t)&v51, v45, v9, v44, v28, v27, v11, v12, v13,
           v42,
           v41,
           -1,
           -1,
           -1);
}

uint64_t closure #2 in static HandsKitData.strippedHandsKitData(from:stripPixelBuffer:stripWarperMeshBin:stripWarperMeshBuffer:stripJpegData:stripRawData:stripCropData:stripPoseModelLatent:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t i;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  char v51;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  char v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t result;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  int64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int v96;
  unint64_t v97;
  uint64_t v98;
  _OWORD v99[9];
  _OWORD v100[2];
  char v101;
  char v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _OWORD v112[3];
  _QWORD *v113;

  v79 = a4;
  v78 = a3;
  v83 = a2;
  v5 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TrackingUpdateDataPB(a1, (uint64_t)v8, v9);
  v10 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v11 = *(int *)(v5 + 92);
  v76 = v5;
  v77 = v11;
  v12 = *(_QWORD *)&v8[v11];
  v13 = *(_QWORD *)(v12 + 64);
  v80 = v8;
  v81 = v12 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v82 = (unint64_t)(v14 + 63) >> 6;
  v84 = v12;
  swift_bridgeObjectRetain();
  for (i = 0; ; i = v86)
  {
    if (v16)
    {
      v31 = __clz(__rbit64(v16));
      v32 = (v16 - 1) & v16;
      v33 = v31 | (i << 6);
      goto LABEL_22;
    }
    v34 = i + 1;
    if (__OFADD__(i, 1))
      goto LABEL_39;
    if (v34 >= v82)
      break;
    v35 = *(_QWORD *)(v81 + 8 * v34);
    ++i;
    if (!v35)
    {
      i = v34 + 1;
      if (v34 + 1 >= v82)
        break;
      v35 = *(_QWORD *)(v81 + 8 * i);
      if (!v35)
      {
        i = v34 + 2;
        if (v34 + 2 >= v82)
          break;
        v35 = *(_QWORD *)(v81 + 8 * i);
        if (!v35)
        {
          v36 = v34 + 3;
          if (v36 >= v82)
            break;
          v35 = *(_QWORD *)(v81 + 8 * v36);
          if (!v35)
          {
            while (1)
            {
              i = v36 + 1;
              if (__OFADD__(v36, 1))
                goto LABEL_40;
              if (i >= v82)
                goto LABEL_34;
              v35 = *(_QWORD *)(v81 + 8 * i);
              ++v36;
              if (v35)
                goto LABEL_21;
            }
          }
          i = v36;
        }
      }
    }
LABEL_21:
    v32 = (v35 - 1) & v35;
    v33 = __clz(__rbit64(v35)) + (i << 6);
LABEL_22:
    v37 = *(_QWORD *)(v84 + 48) + 16 * v33;
    v38 = *(_QWORD *)v37;
    v39 = *(_BYTE *)(v37 + 8);
    v40 = (__int128 *)(*(_QWORD *)(v84 + 56) + 176 * v33);
    v42 = v40[1];
    v41 = v40[2];
    v103 = *v40;
    v104 = v42;
    v105 = v41;
    v43 = v40[6];
    v45 = v40[3];
    v44 = v40[4];
    v108 = v40[5];
    v109 = v43;
    v106 = v45;
    v107 = v44;
    v47 = v40[8];
    v46 = v40[9];
    v48 = v40[7];
    *(_OWORD *)((char *)v112 + 9) = *(__int128 *)((char *)v40 + 153);
    v111 = v47;
    v112[0] = v46;
    v110 = v48;
    v85 = v32;
    v86 = i;
    if ((v83 & 1) != 0)
    {
      v97 = 0xC000000000000000;
      v98 = 0;
    }
    else
    {
      v97 = *((_QWORD *)&v112[0] + 1);
      v98 = *(_QWORD *)&v112[0];
      outlined retain of PoseImageCrop((uint64_t)&v103);
    }
    v88 = v103;
    v49 = BYTE8(v103);
    v89 = v105;
    v90 = v106;
    v91 = v107;
    v92 = v108;
    v93 = v109;
    v94 = v110;
    v95 = v111;
    v50 = *(_QWORD *)&v112[1];
    v96 = BYTE8(v112[1]);
    v87 = v104;
    v51 = BYTE8(v104);
    outlined retain of PoseImageCrop((uint64_t)&v103);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v113 = v10;
    v53 = v38;
    v54 = v39;
    v56 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v39);
    v57 = v10[2];
    v58 = (v55 & 1) == 0;
    v59 = v57 + v58;
    if (__OFADD__(v57, v58))
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    v60 = v55;
    if (v10[3] >= v59)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, isUniquelyReferenced_nonNull_native);
      v61 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v54);
      if ((v60 & 1) != (v62 & 1))
        goto LABEL_41;
      v56 = v61;
    }
    v102 = v49;
    v101 = v51;
    if ((v60 & 1) != 0)
    {
      v10 = v113;
      v18 = v113[7] + 176 * v56;
      v20 = *(_OWORD *)(v18 + 16);
      v19 = *(_OWORD *)(v18 + 32);
      v99[0] = *(_OWORD *)v18;
      v99[1] = v20;
      v99[2] = v19;
      v21 = *(_OWORD *)(v18 + 96);
      v23 = *(_OWORD *)(v18 + 48);
      v22 = *(_OWORD *)(v18 + 64);
      v99[5] = *(_OWORD *)(v18 + 80);
      v99[6] = v21;
      v99[3] = v23;
      v99[4] = v22;
      v25 = *(_OWORD *)(v18 + 128);
      v24 = *(_OWORD *)(v18 + 144);
      v26 = *(_OWORD *)(v18 + 112);
      *(_OWORD *)((char *)v100 + 9) = *(_OWORD *)(v18 + 153);
      v99[8] = v25;
      v100[0] = v24;
      v99[7] = v26;
      outlined release of PoseImageCrop((uint64_t)v99);
      *(_QWORD *)v18 = v88;
      *(_BYTE *)(v18 + 8) = v102;
      *(_QWORD *)(v18 + 16) = v87;
      *(_BYTE *)(v18 + 24) = v101;
      v27 = v90;
      *(_OWORD *)(v18 + 32) = v89;
      *(_OWORD *)(v18 + 48) = v27;
      v28 = v92;
      *(_OWORD *)(v18 + 64) = v91;
      *(_OWORD *)(v18 + 80) = v28;
      v29 = v94;
      *(_OWORD *)(v18 + 96) = v93;
      *(_OWORD *)(v18 + 112) = v29;
      *(_OWORD *)(v18 + 128) = v95;
      v30 = v97;
      *(_QWORD *)(v18 + 144) = v98;
      *(_QWORD *)(v18 + 152) = v30;
      *(_QWORD *)(v18 + 160) = v50;
      *(_BYTE *)(v18 + 168) = v96;
    }
    else
    {
      v10 = v113;
      v113[(v56 >> 6) + 8] |= 1 << v56;
      v63 = v10[6] + 16 * v56;
      *(_QWORD *)v63 = v53;
      *(_BYTE *)(v63 + 8) = v54;
      v64 = v10[7] + 176 * v56;
      *(_QWORD *)v64 = v88;
      *(_BYTE *)(v64 + 8) = v102;
      *(_QWORD *)(v64 + 16) = v87;
      *(_BYTE *)(v64 + 24) = v101;
      v65 = v90;
      *(_OWORD *)(v64 + 32) = v89;
      *(_OWORD *)(v64 + 48) = v65;
      v66 = v92;
      *(_OWORD *)(v64 + 64) = v91;
      *(_OWORD *)(v64 + 80) = v66;
      v67 = v94;
      *(_OWORD *)(v64 + 96) = v93;
      *(_OWORD *)(v64 + 112) = v67;
      *(_OWORD *)(v64 + 128) = v95;
      v68 = v97;
      *(_QWORD *)(v64 + 144) = v98;
      *(_QWORD *)(v64 + 152) = v68;
      *(_QWORD *)(v64 + 160) = v50;
      *(_BYTE *)(v64 + 168) = v96;
      v69 = v10[2];
      v70 = __OFADD__(v69, 1);
      v71 = v69 + 1;
      if (v70)
        goto LABEL_38;
      v10[2] = v71;
    }
    swift_bridgeObjectRelease();
    outlined release of PoseImageCrop((uint64_t)&v103);
    v16 = v85;
  }
LABEL_34:
  swift_release();
  v72 = (uint64_t)v80;
  v73 = v77;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v72 + v73) = v10;
  if ((v78 & 1) != 0)
  {
    v74 = *(int *)(v76 + 116);
    swift_bridgeObjectRelease();
    v72 = (uint64_t)v80;
    *(_QWORD *)&v80[v74] = MEMORY[0x24BEE4AF8];
  }
  outlined init with copy of TrackingUpdateDataPB(v72, v79, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  return outlined destroy of Matrix3x3PB(v72, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = 16 * v6;
        Hasher.init(_seed:)();
        lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
        dispatch thunk of Hashable.hash(into:)();
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + v9);
          if (16 * v3 != v9 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v12 = 16 * v6;
        Hasher.init(_seed:)();
        lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
        dispatch thunk of Hashable.hash(into:)();
        result = Hasher._finalize()();
        v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + v12);
          if (16 * v3 != v12 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (__int128 *)(v17 + (v3 << 6));
          v19 = (__int128 *)(v17 + (v6 << 6));
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 4))
          {
            v9 = *v19;
            v10 = v19[1];
            v11 = v19[3];
            v18[2] = v19[2];
            v18[3] = v11;
            *v18 = v9;
            v18[1] = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_QWORD *)(v11 + 8 * v3);
          v13 = (_QWORD *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  Swift::UInt v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        result = Hasher._finalize()();
        v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (__int128 *)(v17 + (v3 << 6));
          v19 = (__int128 *)(v17 + (v6 << 6));
          if (v3 << 6 != v6 << 6 || (v3 = v6, v18 >= v19 + 4))
          {
            v9 = *v19;
            v10 = v19[1];
            v11 = v19[3];
            v18[2] = v19[2];
            v18[3] = v11;
            *v18 = v9;
            v18[1] = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11)
            goto LABEL_6;
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        v14 = (_QWORD *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1)
          *v14 = *v10;
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for HandsKitDataPB(0) - 8) + 72);
        v17 = v16 * v3;
        result = v15 + v16 * v3;
        v18 = v16 * v6;
        v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = 16 * v6;
        Hasher.init(_seed:)();
        lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
        dispatch thunk of Hashable.hash(into:)();
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + v9);
          if (16 * v3 != v9 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 192 * v3;
          v15 = (const void *)(v14 + 192 * v6);
          if (v3 != v6 || (v3 = v6, result >= (unint64_t)v15 + 192))
          {
            result = (unint64_t)memmove((void *)result, v15, 0xC0uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1)
              *v15 = *v11;
            v16 = *(_QWORD *)(a2 + 56);
            v17 = (_OWORD *)(v16 + 32 * v3);
            v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v17 >= v18 + 2))
            {
              v9 = v18[1];
              *v17 = *v18;
              v17[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  const void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            result = v15 + 96 * v3;
            v16 = (const void *)(v15 + 96 * v6);
            if (v3 != v6 || (v3 = v6, result >= (unint64_t)v16 + 96))
            {
              result = (unint64_t)memmove((void *)result, v16, 0x60uLL);
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Logger() - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_DWORD *)(v9 + 4 * v6);
        result = MEMORY[0x242637B88](*(_QWORD *)(a2 + 40), *v10, 4);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11)
            goto LABEL_6;
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        v14 = (_DWORD *)(v9 + 4 * v3);
        if (v3 != v6 || v14 >= v10 + 1)
          *v14 = *v10;
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ImageCalibrationDataPB(0) - 8) + 72);
        v17 = v16 * v3;
        result = v15 + v16 * v3;
        v18 = v16 * v6;
        v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized Sequence<>.max()(unint64_t result, uint64_t a2, unint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;

  v3 = a3 >> 1;
  if (a3 >> 1 == a2)
  {
    v4 = 0;
    return v4 | ((unint64_t)(v3 == a2) << 32);
  }
  if ((uint64_t)(a3 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    v5 = *(float *)(result + 4 * a2);
    if (a2 + 1 == v3)
    {
LABEL_10:
      v4 = LODWORD(v5);
      return v4 | ((unint64_t)(v3 == a2) << 32);
    }
    if (a2 + 1 < v3)
    {
      v6 = ~a2 + v3;
      v7 = (float *)(result + 4 * a2 + 4);
      do
      {
        v8 = *v7++;
        v9 = v8;
        if (v5 < v8)
          v5 = v9;
        --v6;
      }
      while (v6);
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static HandsKitData.determineMasterTimestamp(imageData:preferredCameraOrder:useMidExposure:)(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t result;
  int v14;
  char v15;
  uint64_t v16;
  __int128 v17[12];
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v6 = (unint64_t)CMTime.init(seconds:preferredTimescale:)(0.0, 1000000);
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = (char *)(a2 + 40);
    while (1)
    {
      if (*(_QWORD *)(a1 + 16))
      {
        v9 = specialized __RawDictionaryStorage.find<A>(_:)(*((_QWORD *)v8 - 1), *v8);
        if ((v10 & 1) != 0)
          break;
      }
      v8 += 16;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    v11 = *(_QWORD *)(a1 + 56) + 192 * v9;
    v12 = (unint64_t *)(v11 + 8);
    if ((a3 & 1) != 0)
      v12 = (unint64_t *)(v11 + 32);
    v6 = *v12;
    swift_bridgeObjectRelease();
    return v6;
  }
LABEL_10:
  result = specialized Dictionary.startIndex.getter(a1);
  if ((v15 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 36) == v14)
    {
      if (result != 1 << *(_BYTE *)(a1 + 32))
      {
        specialized Dictionary.subscript.getter((uint64_t)&v16, v17, result, v14, 0, a1);
        v25 = v17[8];
        v26 = v17[9];
        v27 = v17[10];
        v28 = v17[11];
        v21 = v17[4];
        v22 = v17[5];
        v23 = v17[6];
        v24 = v17[7];
        v18[0] = v17[0];
        v18[1] = v17[1];
        v19 = v17[2];
        v20 = v17[3];
        outlined release of ImageData((uint64_t)v18);
        if ((a3 & 1) != 0)
          return v19;
        else
          return *((_QWORD *)&v18[0] + 1);
      }
      return v6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in HandsKitData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
}

uint64_t destroy for HandsKitData(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 520))
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HandsKitData(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  __int128 v34;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = v6[1];
    *v4 = *v6;
    *(_OWORD *)(a1 + 24) = v10;
    v11 = v6[3];
    *(_OWORD *)(a1 + 40) = v6[2];
    *(_OWORD *)(a1 + 56) = v11;
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v13;
  v14 = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 120) = v14;
  *(_QWORD *)(a1 + 128) = v15;
  v16 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v16;
  v17 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v17;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  v18 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v18;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v19 = *(_OWORD *)(a2 + 208);
  v20 = *(_OWORD *)(a2 + 224);
  v21 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v21;
  *(_OWORD *)(a1 + 208) = v19;
  *(_OWORD *)(a1 + 224) = v20;
  v22 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v22;
  v23 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v23;
  v24 = *(_OWORD *)(a2 + 336);
  v25 = *(_OWORD *)(a2 + 352);
  v26 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v26;
  *(_OWORD *)(a1 + 336) = v24;
  *(_OWORD *)(a1 + 352) = v25;
  v27 = *(_OWORD *)(a2 + 400);
  v28 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v28;
  *(_OWORD *)(a1 + 400) = v27;
  v29 = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = v29;
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  v30 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v30;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  v31 = (_OWORD *)(a1 + 496);
  v32 = (_OWORD *)(a2 + 496);
  v33 = *(_QWORD *)(a2 + 520);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v33)
  {
    *v31 = *v32;
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 520) = v33;
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v34 = *(_OWORD *)(a2 + 512);
    *v31 = *v32;
    *(_OWORD *)(a1 + 512) = v34;
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  }
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HandsKitData(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 8);
  v6 = (__int128 *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v5)
    {
      *(_QWORD *)(a1 + 8) = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of HandsKitDataInternal(a1 + 8);
      v7 = *(_OWORD *)(a2 + 56);
      v9 = *v6;
      v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = v7;
      *v4 = v9;
      *(_OWORD *)(a1 + 24) = v8;
    }
  }
  else if (v5)
  {
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v6;
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v12;
    *v4 = v10;
    *(_OWORD *)(a1 + 24) = v11;
  }
  v13 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v13;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_DWORD *)(a1 + 356) = *(_DWORD *)(a2 + 356);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  v15 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
  *(_OWORD *)(a1 + 368) = v15;
  *(_QWORD *)(a1 + 396) = *(_QWORD *)(a2 + 396);
  *(_DWORD *)(a1 + 404) = *(_DWORD *)(a2 + 404);
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 412) = *(_QWORD *)(a2 + 412);
  v16 = *(_OWORD *)(a2 + 420);
  *(_OWORD *)(a1 + 429) = *(_OWORD *)(a2 + 429);
  *(_OWORD *)(a1 + 420) = v16;
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = (_OWORD *)(a1 + 496);
  v18 = (_OWORD *)(a2 + 496);
  v19 = *(_QWORD *)(a2 + 520);
  if (*(_QWORD *)(a1 + 520))
  {
    if (v19)
    {
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
      *(_DWORD *)(a1 + 508) = *(_DWORD *)(a2 + 508);
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of ObjectInteractionResultsByHand(a1 + 496);
      v21 = *(_QWORD *)(a2 + 528);
      v22 = *(_OWORD *)(a2 + 512);
      *v17 = *v18;
      *(_OWORD *)(a1 + 512) = v22;
      *(_QWORD *)(a1 + 528) = v21;
    }
  }
  else
  {
    v20 = *v18;
    if (v19)
    {
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      *v17 = v20;
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      v23 = *(_OWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      *v17 = v20;
      *(_OWORD *)(a1 + 512) = v23;
    }
  }
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of HandsKitDataInternal(uint64_t a1)
{
  destroy for HandsKitDataInternal();
  return a1;
}

uint64_t outlined destroy of ObjectInteractionResultsByHand(uint64_t a1)
{
  destroy for ObjectInteractionResultsByHand();
  return a1;
}

void *__swift_memcpy552_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x228uLL);
}

uint64_t assignWithTake for HandsKitData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of HandsKitDataInternal(a1 + 8);
  }
  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v6;
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v7;
LABEL_6:
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  v8 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v9;
  v10 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v10;
  v11 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v11;
  v12 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v12;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
  *(_QWORD *)(a1 + 396) = *(_QWORD *)(a2 + 396);
  *(_DWORD *)(a1 + 404) = *(_DWORD *)(a2 + 404);
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 412) = *(_QWORD *)(a2 + 412);
  *(_OWORD *)(a1 + 429) = *(_OWORD *)(a2 + 429);
  *(_OWORD *)(a1 + 420) = *(_OWORD *)(a2 + 420);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  swift_release();
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_release();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 520))
  {
LABEL_10:
    v14 = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = v14;
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    goto LABEL_11;
  }
  v13 = *(_QWORD *)(a2 + 520);
  if (!v13)
  {
    outlined destroy of ObjectInteractionResultsByHand(a1 + 496);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  swift_release();
LABEL_11:
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HandsKitData(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 552))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandsKitData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 552) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 552) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandsKitData()
{
  return &type metadata for HandsKitData;
}

uint64_t outlined release of PoseImageCrop(uint64_t a1)
{
  outlined consume of Data?(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
  return a1;
}

uint64_t _s5Hands12CameraSourceO_AA9ImageDataVtSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double _s5Hands12CameraSourceO_AA9ImageDataVtSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t type metadata accessor for PinchFilterHelper()
{
  return objc_opt_self();
}

BOOL specialized static PinchFilterHelper.rotationFilter(_:_:_:_:_:_:_:)(_BOOL8 result, uint64_t a2, uint64_t a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  float v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  BOOL v17;

  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v8 = *(float *)(a2 + 32 + 4 * v7 - 4);
  if (v8 <= a7 || result)
    return a4 < a5;
  v9 = a3 - 1;
  if (__OFSUB__(a3, 1))
    goto LABEL_33;
  if (v9 < 0)
  {
LABEL_34:
    __break(1u);
    return result;
  }
  if (a3 == 1)
    return a4 < a5;
  v10 = 0;
  v11 = 0;
  v12 = 0.0;
LABEL_8:
  if (v11 <= v9)
    v13 = a3 - 1;
  else
    v13 = v11;
  if (v11 <= v7)
    v14 = *(_QWORD *)(a2 + 16);
  else
    v14 = v11;
  do
  {
    if (v13 == v11)
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (v14 == v11)
      goto LABEL_31;
    v15 = *(float *)(a2 + 32 + 4 * v11);
    v16 = vabds_f32(v15, v8);
    v17 = v16 <= v12 || v15 == 0.0;
    if (!v17)
      v12 = v16;
    if (v12 > a6)
    {
      result = 0;
      v10 = 1;
      v17 = a3 - 2 == v11++;
      if (v17)
        return result;
      goto LABEL_8;
    }
    ++v11;
  }
  while (v9 != v11);
  if ((v10 & 1) == 0)
    return a4 < a5;
  return 0;
}

uint64_t specialized static PinchFilterHelper.computeHoverDistanceUnsureScore(_:_:_:_:_:_:_:)(uint64_t result, char a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float *v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  unint64_t v19;
  float v20;
  float v21;
  unint64_t v22;

  v6 = a5 - 1;
  if (__OFSUB__(a5, 1))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (a5 == 1)
  {
    if ((result & 1) != 0 || (a2 & 1) == 0 || (a3 & 1) == 0)
      return result;
LABEL_27:
    v22 = *(_QWORD *)(a4 + 16);
    if (v22 >= 3)
    {
      if (v22 != 3)
        return result;
LABEL_39:
      __break(1u);
      return result;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((a5 & 0x8000000000000000) != 0)
    goto LABEL_36;
  v7 = *(_QWORD *)(a6 + 16);
  if (v7 < a5)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = a6 + 32;
  v10 = a5 - 2;
  v11 = (float *)(a6 + 40);
  v12 = 0.0;
  do
  {
    if (v8 == v6)
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v8 == v7)
      goto LABEL_31;
    if (v8 == a5)
      goto LABEL_32;
    v14 = v8 + 1;
    v15 = *(float *)(v9 + 4 * v8);
    v16 = *(float *)(v9 + 4 * (v8 + 1));
    v17 = v8 + 2;
    if (v17 != a5)
    {
      if (v17 >= (uint64_t)a5)
        goto LABEL_33;
      v18 = v11;
      v19 = v10;
      do
      {
        v20 = *v18++;
        v21 = v20;
        if (v20 < v16)
          v16 = v21;
        --v19;
      }
      while (v19);
    }
    v13 = v15 - v16;
    if (v13 > v12)
      v12 = v13;
    --v10;
    ++v11;
    v8 = v14;
  }
  while (v14 != v6);
  if ((result & 1) == 0 && (a2 & 1) != 0 && (a3 & 1) != 0)
    goto LABEL_27;
  return result;
}

uint64_t specialized static PinchFilterHelper.computeMakeUnsureScore(_:_:_:_:_:_:_:)(uint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7)
{
  unint64_t v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  float *v23;
  uint64_t v24;
  float v25;
  float v26;

  if (a5 < a4 && a7 != 0.0 && a6 != 0.0)
  {
    v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v8 = *(float *)(a2 + 32);
    if (v8 < a4)
    {
      v9 = result - 2;
      if (__OFSUB__(result, 2))
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      if ((v9 & 0x8000000000000000) != 0)
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      if (result != 2)
      {
        v10 = result - 1;
        if (result < 1)
        {
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (v7 < v10)
        {
LABEL_41:
          __break(1u);
          return result;
        }
        v11 = 0;
        if (v10 <= 1)
          v12 = 1;
        else
          v12 = result - 1;
        v13 = v12 - 1;
        v14 = result - 3;
        v15 = (float *)(a2 + 40);
        v16 = 0.0;
        v17 = *(float *)(a2 + 32);
        while (v11 != v9)
        {
          if (v11 == v7)
            goto LABEL_32;
          if (v11 == v10)
            goto LABEL_33;
          if (v11 == v13)
            goto LABEL_34;
          v19 = v11 + 1;
          v20 = *(float *)(a2 + 32 + 4 * (v11 + 1));
          v21 = v11 + 2;
          v22 = v20;
          if (v21 != v10)
          {
            if (v21 >= v10)
              goto LABEL_35;
            if (v9 >= v10)
              goto LABEL_36;
            v23 = v15;
            v24 = v14;
            v22 = v20;
            do
            {
              v25 = *v23++;
              v26 = v25;
              if (v25 < v22)
                v22 = v26;
              --v24;
            }
            while (v24);
          }
          v18 = v17 - v22;
          --v14;
          if (v18 > v16)
            v16 = v18;
          ++v15;
          v17 = v20;
          v11 = v19;
          if (v19 == v9)
            return result;
        }
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
  }
  return result;
}

uint64_t specialized static PinchFilterHelper.FittedLineSlope(_:)(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  float32x4_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  int64_t v20;
  float *v21;
  float v22;
  float v23;
  unint64_t v24;
  float *v25;
  unint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  float32x4_t *v30;
  unint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float *v34;
  float32x4_t *v36;
  float32x4_t *v37;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v36 = (float32x4_t *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = 0;
    v4 = v36;
    v5 = v36[1].u64[0];
    do
    {
      v37 = v4;
      v6 = v4[1].u64[1];
      v7 = v5 + 1;
      if (v5 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v5 + 1, 1);
        v4 = v37;
      }
      v4[1].i64[0] = v7;
      v4[2].f32[v5++] = (float)v3++;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = (float32x4_t *)MEMORY[0x24BEE4AF8];
    v7 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v7)
      return swift_bridgeObjectRelease();
  }
  if (v7 < 2)
  {
    v8 = 0;
    v9 = 0.0;
LABEL_13:
    v12 = v7 - v8;
    v13 = &v4[2].f32[v8];
    do
    {
      v14 = *v13++;
      v9 = v9 + v14;
      --v12;
    }
    while (v12);
    goto LABEL_15;
  }
  v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
  v10 = &v4[2].f32[1];
  v9 = 0.0;
  v11 = v7 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v9 = (float)(v9 + *(v10 - 1)) + *v10;
    v10 += 2;
    v11 -= 2;
  }
  while (v11);
  if (v7 != v8)
    goto LABEL_13;
LABEL_15:
  v15 = 0.0;
  v16 = 0.0;
  if (v2)
  {
    if (v2 == 1)
    {
      v17 = 0;
    }
    else
    {
      v17 = v2 & 0x7FFFFFFFFFFFFFFELL;
      v18 = (float *)(a1 + 36);
      v19 = v2 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v16 = (float)(v16 + *(v18 - 1)) + *v18;
        v18 += 2;
        v19 -= 2;
      }
      while (v19);
      if (v2 == v17)
      {
LABEL_23:
        v23 = (float)(v4[2].f32[0] * *(float *)(a1 + 32)) + 0.0;
        v24 = v2 - 1;
        if (v2 != 1 && v7 != 1)
        {
          v25 = &v4[2].f32[1];
          v26 = v7 - 2;
          if (v7 <= 2)
            v27 = 2;
          else
            v27 = v7;
          v28 = (float *)(a1 + 36);
          v29 = v27 - 2;
          while (1)
          {
            v23 = v23 + (float)(*v25 * *v28);
            if (!v26)
              break;
            if (!v29)
            {
              __break(1u);
              goto LABEL_39;
            }
            ++v28;
            ++v25;
            --v29;
            --v26;
            if (!--v24)
              goto LABEL_32;
          }
        }
        goto LABEL_32;
      }
    }
    v20 = v2 - v17;
    v21 = (float *)(a1 + 4 * v17 + 32);
    do
    {
      v22 = *v21++;
      v16 = v16 + v22;
      --v20;
    }
    while (v20);
    goto LABEL_23;
  }
LABEL_32:
  if (v7 >= 8)
  {
    v24 = v7 & 0xFFFFFFFFFFFFFFF8;
    v30 = v4 + 3;
    v15 = 0.0;
    v31 = v7 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v32 = vmulq_f32(v30[-1], v30[-1]);
      v33 = vmulq_f32(*v30, *v30);
      v15 = (float)((float)((float)((float)((float)((float)((float)(v15 + v32.f32[0]) + v32.f32[1]) + v32.f32[2])
                                          + v32.f32[3])
                                  + v33.f32[0])
                          + v33.f32[1])
                  + v33.f32[2])
          + v33.f32[3];
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    goto LABEL_40;
  }
  v24 = 0;
  do
  {
LABEL_39:
    v34 = &v4->f32[v24++];
    v15 = v15 + (float)(v34[8] * v34[8]);
LABEL_40:
    ;
  }
  while (v7 != v24);
  return swift_bridgeObjectRelease();
}

void specialized static PinchFilterHelper.computeUnsureScoreFactor(_:_:_:_:_:)(float a1, float a2, float a3, float a4, float a5)
{
  float v6;
  _QWORD v7[4];

  if (a5 <= 0.0)
  {
    v7[3] = MEMORY[0x24BEE0D00];
    v7[0] = 0xD00000000000001ELL;
    v7[1] = 0x800000023D9C8B10;
    specialized static HLog.E(file:function:line:_:_:)(0xD000000000000090, 0x800000023D9C8A70, 134, (uint64_t)v7, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
  }
  else
  {
    v6 = a4 - a3;
    expf((float)-(float)(a1 - a2) / a5);
    expf((float)-v6 / a5);
  }
}

float specialized static PinchFilterHelper.fusePinchScore(score:uncertain:weight:enable_nonlinear:)(char a1, float a2, float a3, float a4)
{
  float v5;
  float v7;
  float v8;

  if ((a1 & 1) == 0)
    return (float)((float)(a4 - a2) * a3) + a2;
  v5 = 0.5;
  if (a2 <= 0.5)
  {
    if (a2 < 0.5)
    {
      if (a2 == 0.0)
      {
        return a3 * 0.5;
      }
      else
      {
        v8 = logf((float)(1.0 - a2) / a2);
        return 1.0 / (float)(expf((float)(1.0 - a3) / (float)(1.0 / v8)) + 1.0);
      }
    }
  }
  else if (a2 == 1.0)
  {
    return (float)(a3 * -0.5) + 1.0;
  }
  else
  {
    v7 = logf((float)(1.0 - a2) / a2);
    return (float)(-1.0 / (float)(expf((float)(1.0 - a3) / (float)(-1.0 / v7)) + 1.0)) + 1.0;
  }
  return v5;
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in RecoverRepetitivePinchInternalData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB and conformance RecoverRepetitivePinchInternalDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB);
}

__n128 RecoverRepetitivePinchInternalData.init(protoBuf:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unsigned int (*v63)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v64)(_QWORD, uint64_t, _QWORD);
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t (*v71)(_QWORD, uint64_t, _QWORD);
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, uint64_t, uint64_t);
  char v104;
  int v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  int v122;
  int v123;
  int v124;
  int v125;
  __n128 result;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  __n128 v228;
  __int128 v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  char *v273;
  char *v274;
  _DWORD *v275;
  char *v276;
  _QWORD *v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  __int16 v282;
  char v283;
  __int16 v284;
  char v285;
  __int16 v286;
  char v287;
  __int16 v288;
  char v289;
  __int16 v290;
  char v291;
  __int16 v292;
  char v293;
  int v294;
  __int16 v295;
  __int16 v296;
  char v297;
  __int16 v298;
  char v299;
  __int16 v300;
  char v301;
  __int16 v302;
  char v303;
  __int16 v304;
  char v305;
  _DWORD v306[2];
  __int16 v307;
  char v308;
  __int16 v309;
  char v310;
  _DWORD v311[2];
  _DWORD v312[2];
  __int16 v313;
  char v314;
  int v315;
  __int16 v316;
  __int16 v317;
  char v318;
  __int16 v319;
  char v320;
  __int16 v321;
  char v322;
  __int16 v323;
  char v324;
  __int16 v325;
  char v326;
  __int16 v327;
  char v328;
  int v329;
  __int16 v330;
  __int16 v331;
  char v332;
  __int16 v333;
  char v334;
  __int16 v335;
  char v336;
  __int16 v337;
  char v338;
  __int16 v339;
  char v340;
  _DWORD v341[2];
  char v342;
  char v343;
  _DWORD v344[2];
  _DWORD v345[3];
  char v346;
  int v347;
  __int16 v348;
  int v349;
  __int128 v350;
  uint64_t v351;
  unsigned __int8 v352;
  __int16 v353;
  char v354;
  __int128 v355;
  uint64_t v356;
  unsigned __int8 v357;
  _BYTE v358[7];
  uint64_t v359;
  unsigned __int8 v360;
  _BYTE v361[7];
  uint64_t v362;
  unsigned __int8 v363;
  __int16 v364;
  char v365;
  int v366;
  char v367;
  __int16 v368;
  char v369;
  int v370;
  char v371;
  _BYTE v372[7];
  uint64_t v373;
  unsigned __int8 v374;
  __int16 v375;
  char v376;
  int v377;
  unsigned __int8 v378;
  __int16 v379;
  char v380;
  int v381;
  unsigned __int8 v382;
  __int16 v383;
  char v384;
  int v385;
  unsigned __int8 v386;
  __int16 v387;
  char v388;
  int v389;
  unsigned __int8 v390;
  __int16 v391;
  char v392;
  int v393;
  unsigned __int16 v394;
  int v395;
  __int16 v396;
  __int128 v397;
  __n128 v398;
  uint64_t v399;
  uint64_t v400;
  unsigned __int8 v401;
  __int16 v402;
  char v403;
  int v404;
  unsigned __int8 v405;
  __int16 v406;
  char v407;
  int v408;
  unsigned __int8 v409;
  __int16 v410;
  char v411;
  int v412;
  unsigned __int8 v413;
  __int16 v414;
  char v415;
  int v416;
  unsigned __int8 v417;
  __int16 v418;
  char v419;
  int v420;
  unsigned __int8 v421;
  __int16 v422;
  char v423;
  int v424;
  unsigned __int16 v425;
  _BYTE v426[2];
  unsigned __int16 v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unsigned __int8 v431;
  __int16 v432;
  char v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unsigned __int8 v437;
  _BYTE v438[7];
  uint64_t v439;
  unsigned __int8 v440;
  _BYTE v441[7];
  uint64_t v442;
  unsigned __int8 v443;
  __int16 v444;
  char v445;
  int v446;
  unsigned __int8 v447;
  __int16 v448;
  char v449;
  int v450;
  unsigned __int8 v451;
  _BYTE v452[7];
  uint64_t v453;
  unsigned __int8 v454;
  __int16 v455;
  char v456;
  int v457;
  unsigned __int8 v458;
  __int16 v459;
  char v460;
  int v461;
  unsigned __int8 v462;
  __int16 v463;
  char v464;
  int v465;
  unsigned __int8 v466;
  __int16 v467;
  char v468;
  int v469;
  unsigned __int8 v470;
  __int16 v471;
  char v472;
  int v473;
  unsigned __int8 v474;
  unsigned __int8 v475;
  int v476;
  __int16 v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unsigned __int8 v484;
  __int16 v485;
  char v486;
  int v487;
  unsigned __int8 v488;
  __int16 v489;
  char v490;
  int v491;
  unsigned __int8 v492;
  __int16 v493;
  char v494;
  int v495;
  unsigned __int8 v496;
  __int16 v497;
  char v498;
  int v499;
  unsigned __int8 v500;
  __int16 v501;
  char v502;
  int v503;
  unsigned __int8 v504;
  __int16 v505;
  char v506;
  int v507;
  unsigned __int8 v508;
  unsigned __int8 v509;
  _BYTE v510[2];
  unsigned __int16 v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unsigned __int8 v515;
  __int16 v516;
  char v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unsigned __int8 v521;
  _BYTE v522[7];
  uint64_t v523;
  unsigned __int8 v524;
  _BYTE v525[7];
  uint64_t v526;
  unsigned __int8 v527;
  __int16 v528;
  char v529;
  int v530;
  unsigned __int8 v531;
  __int16 v532;
  char v533;
  int v534;
  unsigned __int8 v535;
  _BYTE v536[7];
  uint64_t v537;
  unsigned __int8 v538;
  __int16 v539;
  char v540;
  int v541;
  unsigned __int8 v542;
  __int16 v543;
  char v544;
  int v545;
  unsigned __int8 v546;
  __int16 v547;
  char v548;
  int v549;
  unsigned __int8 v550;
  __int16 v551;
  char v552;
  int v553;
  unsigned __int8 v554;
  __int16 v555;
  char v556;
  int v557;
  unsigned __int8 v558;
  unsigned __int8 v559;
  int v560;
  __int16 v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unsigned __int8 v568;
  __int16 v569;
  char v570;
  int v571;
  unsigned __int8 v572;
  __int16 v573;
  char v574;
  int v575;
  unsigned __int8 v576;
  __int16 v577;
  char v578;
  int v579;
  unsigned __int8 v580;
  __int16 v581;
  char v582;
  int v583;
  unsigned __int8 v584;
  __int16 v585;
  char v586;
  int v587;
  unsigned __int8 v588;
  __int16 v589;
  char v590;
  int v591;
  unsigned __int8 v592;
  unsigned __int8 v593;
  __int16 v594;
  char v595;
  __int16 v596;
  char v597;
  __int16 v598;
  char v599;
  __int16 v600;
  char v601;
  __int16 v602;
  char v603;
  __int16 v604;
  char v605;
  int v606;
  __int16 v607;
  __int16 v608;
  char v609;
  __int16 v610;
  char v611;
  __int16 v612;
  char v613;
  __int16 v614;
  char v615;
  __int16 v616;
  char v617;
  _DWORD v618[2];
  __int16 v619;
  char v620;
  __int16 v621;
  char v622;
  _DWORD v623[2];
  _DWORD v624[2];
  __int16 v625;
  char v626;
  __int16 v627;
  char v628;
  __int16 v629;
  char v630;
  __int16 v631;
  char v632;
  __int16 v633;
  char v634;
  __int16 v635;
  char v636;
  __int16 v637;
  char v638;
  int v639;
  __int16 v640;
  __int16 v641;
  char v642;
  __int16 v643;
  char v644;
  __int16 v645;
  char v646;
  __int16 v647;
  char v648;
  __int16 v649;
  char v650;
  _DWORD v651[2];
  __int16 v652;
  char v653;
  __int16 v654;
  char v655;
  _DWORD v656[2];
  _DWORD v657[2];
  __int16 v658;
  char v659;
  __int16 v660;
  char v661;
  __int16 v662;
  char v663;
  __int16 v664;
  char v665;
  __int16 v666;
  char v667;
  __int16 v668;
  char v669;
  __int16 v670;
  char v671;
  int v672;
  __int16 v673;
  __int16 v674;
  char v675;
  __int16 v676;
  char v677;
  __int16 v678;
  char v679;
  __int16 v680;
  char v681;
  __int16 v682;
  char v683;
  _DWORD v684[2];
  __int16 v685;
  char v686;
  __int16 v687;
  char v688;
  _DWORD v689[2];
  _DWORD v690[2];
  __int16 v691;
  char v692;
  __int16 v693;
  char v694;
  __int16 v695;
  char v696;
  __int16 v697;
  char v698;
  __int16 v699;
  char v700;
  __int16 v701;
  char v702;
  __int16 v703;
  char v704;
  int v705;
  __int16 v706;
  __int16 v707;
  char v708;
  __int16 v709;
  char v710;
  __int16 v711;
  char v712;
  __int16 v713;
  char v714;
  __int16 v715;
  char v716;
  _BYTE v717[7];
  __int16 v718;
  char v719;
  __int16 v720;
  char v721;
  _BYTE v722[7];
  _BYTE v723[7];
  __int16 v724;
  char v725;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  v6 = MEMORY[0x24BDAC7A8](v4, v5);
  v272 = (uint64_t)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6, v8);
  v266 = (uint64_t)&v127 - v10;
  MEMORY[0x24BDAC7A8](v9, v11);
  v259 = (uint64_t)&v127 - v12;
  *(_QWORD *)&v280 = type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  v277 = *(_QWORD **)(v280 - 8);
  v14 = MEMORY[0x24BDAC7A8](v280, v13);
  v271 = (uint64_t *)((char *)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = MEMORY[0x24BDAC7A8](v14, v16);
  v265 = (uint64_t *)((char *)&v127 - v18);
  MEMORY[0x24BDAC7A8](v17, v19);
  v258 = (uint64_t *)((char *)&v127 - v20);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  v23 = MEMORY[0x24BDAC7A8](v21, v22);
  v270 = (uint64_t)&v127 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23, v25);
  v261 = (uint64_t)&v127 - v27;
  MEMORY[0x24BDAC7A8](v26, v28);
  v275 = (int *)((char *)&v127 - v29);
  *(_QWORD *)&v279 = type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
  v260 = *(_QWORD *)(v279 - 8);
  v31 = MEMORY[0x24BDAC7A8](v279, v30);
  v274 = (char *)&v127 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v31, v33);
  v276 = (char *)&v127 - v35;
  MEMORY[0x24BDAC7A8](v34, v36);
  v273 = (char *)&v127 - v37;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MissedPinchStatePB?);
  v40 = MEMORY[0x24BDAC7A8](v38, v39);
  v42 = (char *)&v127 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40, v43);
  v45 = (char *)&v127 - v44;
  v46 = type metadata accessor for MissedPinchStatePB(0);
  v269 = *(_QWORD *)(v46 - 8);
  v48 = MEMORY[0x24BDAC7A8](v46, v47);
  v50 = (uint64_t *)((char *)&v127 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v48, v51);
  v53 = (uint64_t *)((char *)&v127 - v52);
  v692 = v725;
  v691 = v724;
  *(_DWORD *)((char *)v690 + 3) = *(_DWORD *)&v723[3];
  v690[0] = *(_DWORD *)v723;
  *(_DWORD *)((char *)v689 + 3) = *(_DWORD *)&v722[3];
  v689[0] = *(_DWORD *)v722;
  v688 = v721;
  v687 = v720;
  v686 = v719;
  v685 = v718;
  *(_DWORD *)((char *)v684 + 3) = *(_DWORD *)&v717[3];
  v684[0] = *(_DWORD *)v717;
  v683 = v716;
  v682 = v715;
  v681 = v714;
  v680 = v713;
  v679 = v712;
  v678 = v711;
  v677 = v710;
  v676 = v709;
  v675 = v708;
  v674 = v707;
  v673 = v706;
  v672 = v705;
  v671 = v704;
  v670 = v703;
  v669 = v702;
  v668 = v701;
  v667 = v700;
  v666 = v699;
  v665 = v698;
  v664 = v697;
  v663 = v696;
  v662 = v695;
  v661 = v694;
  v660 = v693;
  v659 = v725;
  v658 = v724;
  *(_DWORD *)((char *)v657 + 3) = *(_DWORD *)&v723[3];
  v657[0] = *(_DWORD *)v723;
  *(_DWORD *)((char *)v656 + 3) = *(_DWORD *)&v722[3];
  v656[0] = *(_DWORD *)v722;
  v655 = v721;
  v654 = v720;
  v653 = v719;
  v652 = v718;
  *(_DWORD *)((char *)v651 + 3) = *(_DWORD *)&v717[3];
  v651[0] = *(_DWORD *)v717;
  v650 = v716;
  v649 = v715;
  v648 = v714;
  v647 = v713;
  v646 = v712;
  v645 = v711;
  v644 = v710;
  v643 = v709;
  v642 = v708;
  v641 = v707;
  v640 = v706;
  v639 = v705;
  v638 = v704;
  v637 = v703;
  v636 = v702;
  v635 = v701;
  v634 = v700;
  v633 = v699;
  v632 = v698;
  v631 = v697;
  v630 = v696;
  v629 = v695;
  v628 = v694;
  v627 = v693;
  v626 = v725;
  v625 = v724;
  *(_DWORD *)((char *)v624 + 3) = *(_DWORD *)&v723[3];
  v624[0] = *(_DWORD *)v723;
  *(_DWORD *)((char *)v623 + 3) = *(_DWORD *)&v722[3];
  v623[0] = *(_DWORD *)v722;
  v622 = v721;
  v621 = v720;
  v620 = v719;
  v619 = v718;
  *(_DWORD *)((char *)v618 + 3) = *(_DWORD *)&v717[3];
  v618[0] = *(_DWORD *)v717;
  v617 = v716;
  v616 = v715;
  v615 = v714;
  v614 = v713;
  v613 = v712;
  v612 = v711;
  v611 = v710;
  v610 = v709;
  v609 = v708;
  v608 = v707;
  v607 = v706;
  v606 = v705;
  v605 = v704;
  v604 = v703;
  v603 = v702;
  v602 = v701;
  v601 = v700;
  v600 = v699;
  v599 = v698;
  v598 = v697;
  v597 = v696;
  v596 = v695;
  v595 = v694;
  v594 = v693;
  v54 = *(int *)(type metadata accessor for RecoverRepetitivePinchInternalDataPB(0) + 20);
  v281 = a1;
  v278 = v54;
  v55 = *(_QWORD *)(a1 + v54);
  v56 = v55
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchState;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v56, (uint64_t)v45, &demangling cache variable for type metadata for MissedPinchStatePB?);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v269 + 48);
  if (v57(v45, 1, v46) == 1)
  {
    *v53 = 0;
    v53[1] = 0;
    v53[2] = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v45, &demangling cache variable for type metadata for MissedPinchStatePB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v45, (uint64_t)v53, type metadata accessor for MissedPinchStatePB);
  }
  v269 = *v53;
  v268 = v53[1];
  v267 = v53[2];
  outlined destroy of Matrix3x3PB((uint64_t)v53, type metadata accessor for MissedPinchStatePB);
  v58 = v55
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchByBreakState;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v58, (uint64_t)v42, &demangling cache variable for type metadata for MissedPinchStatePB?);
  if (v57(v42, 1, v46) == 1)
  {
    *v50 = 0;
    v50[1] = 0;
    v50[2] = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v42, &demangling cache variable for type metadata for MissedPinchStatePB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v42, (uint64_t)v50, type metadata accessor for MissedPinchStatePB);
  }
  v59 = v277;
  v60 = v276;
  v61 = v273;
  v264 = *v50;
  v263 = v50[1];
  v262 = v50[2];
  outlined destroy of Matrix3x3PB((uint64_t)v50, type metadata accessor for MissedPinchStatePB);
  v62 = v55
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__scrollData;
  swift_beginAccess();
  v63 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v275;
  outlined init with copy of (Int32, Matrix2dPB)(v62, (uint64_t)v275, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  v64 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v260 + 48);
  v65 = v279;
  v66 = v64(v63, 1, v279);
  v67 = v280;
  if (v66 == 1)
  {
    *(_QWORD *)v61 = 0;
    UnknownStorage.init()();
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v59[7])(&v61[*(int *)(v65 + 24)], 1, 1, v67);
    outlined destroy of Coordinate3DPB?((uint64_t)v63, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v63, (uint64_t)v61, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  }
  v260 = *(_QWORD *)v61;
  v68 = (uint64_t)&v61[*(int *)(v65 + 24)];
  v69 = v259;
  outlined init with copy of (Int32, Matrix2dPB)(v68, v259, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  v275 = (_DWORD *)v59[6];
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v275)(v69, 1, v67) == 1)
  {
    v70 = v258;
    *v258 = 0;
    v70[1] = 0;
    UnknownStorage.init()();
    v71 = v64;
    v72 = v69;
    v73 = (char *)v70 + *(int *)(v67 + 28);
    v74 = v67;
    v75 = type metadata accessor for CMTimeProtobuf(0);
    v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56);
    v76(v73, 1, 1, v75);
    v77 = *(int *)(v74 + 32);
    v59 = v277;
    v78 = v75;
    v61 = v273;
    v76((char *)v70 + v77, 1, 1, v78);
    v79 = v72;
    v64 = v71;
    v60 = v276;
    outlined destroy of Coordinate3DPB?(v79, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  }
  else
  {
    v70 = v258;
    outlined init with take of Matrix2dPB(v69, (uint64_t)v258, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  }
  PinchRecoveryAnalyticsData.init(protoBuf:)(v70, (uint64_t)v510);
  outlined destroy of Matrix3x3PB((uint64_t)v61, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  LODWORD(v273) = v510[0];
  LODWORD(v259) = v510[1];
  LODWORD(v258) = v511;
  v257 = v512;
  v256 = v513;
  v255 = v514;
  v254 = v515;
  v691 = v516;
  v692 = v517;
  v253 = v518;
  v252 = v519;
  v251 = v520;
  v250 = v521;
  *(_DWORD *)((char *)v690 + 3) = *(_DWORD *)&v522[3];
  v690[0] = *(_DWORD *)v522;
  v249 = v523;
  v248 = v524;
  *(_DWORD *)((char *)v689 + 3) = *(_DWORD *)&v525[3];
  v689[0] = *(_DWORD *)v525;
  v247 = v526;
  v246 = v527;
  v688 = v529;
  v687 = v528;
  v245 = v530;
  v244 = v531;
  v686 = v533;
  v685 = v532;
  v243 = v534;
  v242 = v535;
  *(_DWORD *)((char *)v684 + 3) = *(_DWORD *)&v536[3];
  v684[0] = *(_DWORD *)v536;
  v241 = v537;
  v240 = v538;
  v683 = v540;
  v682 = v539;
  v239 = v541;
  v238 = v542;
  v681 = v544;
  v680 = v543;
  v237 = v545;
  v236 = v546;
  v679 = v548;
  v678 = v547;
  v235 = v549;
  v234 = v550;
  v677 = v552;
  v676 = v551;
  v233 = v553;
  v675 = v556;
  v674 = v555;
  v673 = v561;
  v672 = v560;
  v671 = v570;
  v670 = v569;
  v669 = v574;
  v668 = v573;
  v667 = v578;
  v666 = v577;
  v665 = v582;
  v664 = v581;
  v663 = v586;
  v232 = v554;
  v662 = v585;
  v661 = v590;
  v660 = v589;
  v80 = *(_QWORD *)(v281 + v278)
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__tapData;
  v225 = v557;
  v224 = v558;
  v223 = v559;
  v222 = v562;
  v220 = v564;
  v221 = v563;
  v218 = v566;
  v219 = v565;
  v217 = v567;
  v216 = v568;
  v215 = v571;
  v214 = v572;
  v213 = v575;
  v212 = v576;
  v211 = v579;
  v210 = v580;
  v209 = v583;
  v208 = v584;
  v207 = v587;
  v206 = v588;
  v205 = v591;
  v204 = v592;
  v203 = v593;
  swift_beginAccess();
  v81 = v261;
  outlined init with copy of (Int32, Matrix2dPB)(v80, v261, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  v82 = v279;
  if (v64(v81, 1, v279) == 1)
  {
    *(_QWORD *)v60 = 0;
    UnknownStorage.init()();
    v83 = v280;
    ((void (*)(char *, uint64_t, uint64_t, _QWORD))v59[7])(&v60[*(int *)(v82 + 24)], 1, 1, v280);
    outlined destroy of Coordinate3DPB?(v81, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v81, (uint64_t)v60, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
    v83 = v280;
  }
  v84 = v266;
  v190 = *(_QWORD *)v60;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&v60[*(int *)(v82 + 24)], v266, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v275)(v84, 1, v83) == 1)
  {
    v85 = v265;
    *v265 = 0;
    v85[1] = 0;
    UnknownStorage.init()();
    v86 = (char *)v85 + *(int *)(v83 + 28);
    v87 = v83;
    v88 = type metadata accessor for CMTimeProtobuf(0);
    v89 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56);
    v89(v86, 1, 1, v88);
    v90 = *(int *)(v87 + 32);
    v59 = v277;
    v91 = v88;
    v60 = v276;
    v89((char *)v85 + v90, 1, 1, v91);
    outlined destroy of Coordinate3DPB?(v84, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  }
  else
  {
    v85 = v265;
    outlined init with take of Matrix2dPB(v84, (uint64_t)v265, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  }
  v92 = v274;
  v277 = (_QWORD *)(a2 + 340);
  PinchRecoveryAnalyticsData.init(protoBuf:)(v85, (uint64_t)v426);
  outlined destroy of Matrix3x3PB((uint64_t)v60, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  v189 = v426[0];
  v188 = v426[1];
  v187 = v427;
  v185 = v429;
  v186 = v428;
  v184 = v430;
  v183 = v431;
  v658 = v432;
  v659 = v433;
  v181 = v435;
  v182 = v434;
  v180 = v436;
  v179 = v437;
  *(_DWORD *)((char *)v657 + 3) = *(_DWORD *)&v438[3];
  v657[0] = *(_DWORD *)v438;
  v178 = v439;
  v177 = v440;
  *(_DWORD *)((char *)v656 + 3) = *(_DWORD *)&v441[3];
  v656[0] = *(_DWORD *)v441;
  v176 = v442;
  v175 = v443;
  v655 = v445;
  v654 = v444;
  v173 = v447;
  v174 = v446;
  v653 = v449;
  v652 = v448;
  v171 = v451;
  v172 = v450;
  *(_DWORD *)((char *)v651 + 3) = *(_DWORD *)&v452[3];
  v651[0] = *(_DWORD *)v452;
  v170 = v453;
  v650 = v456;
  v649 = v455;
  v168 = v457;
  v169 = v454;
  v648 = v460;
  v647 = v459;
  v166 = v461;
  v167 = v458;
  v646 = v464;
  v645 = v463;
  v164 = v465;
  v165 = v462;
  v644 = v468;
  v643 = v467;
  v162 = v469;
  v163 = v466;
  v642 = v472;
  v641 = v471;
  v640 = v477;
  v639 = v476;
  v638 = v486;
  v637 = v485;
  v636 = v490;
  v635 = v489;
  v634 = v494;
  v633 = v493;
  v632 = v498;
  v631 = v497;
  v630 = v502;
  v629 = v501;
  v628 = v506;
  v627 = v505;
  v93 = *(_QWORD *)(v281 + v278)
      + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__pinchData;
  v160 = v473;
  v161 = v470;
  v158 = v475;
  v159 = v474;
  v156 = v479;
  v157 = v478;
  v154 = v481;
  v155 = v480;
  v152 = v483;
  v153 = v482;
  v150 = v487;
  v151 = v484;
  v148 = v491;
  v149 = v488;
  v146 = v495;
  v147 = v492;
  v144 = v499;
  v145 = v496;
  v142 = v503;
  v143 = v500;
  v140 = v507;
  v141 = v504;
  v138 = v509;
  v139 = v508;
  swift_beginAccess();
  v94 = v93;
  v95 = v270;
  outlined init with copy of (Int32, Matrix2dPB)(v94, v270, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  v96 = v279;
  if (v64(v95, 1, v279) == 1)
  {
    *(_QWORD *)v92 = 0;
    UnknownStorage.init()();
    v97 = v280;
    ((void (*)(char *, uint64_t, uint64_t, _QWORD))v59[7])(&v92[*(int *)(v96 + 24)], 1, 1, v280);
    outlined destroy of Coordinate3DPB?(v95, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v95, (uint64_t)v92, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
    v97 = v280;
  }
  v137 = *(_QWORD *)v92;
  v98 = v272;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)&v92[*(int *)(v96 + 24)], v272, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v275)(v98, 1, v97) == 1)
  {
    v99 = v271;
    *v271 = 0;
    v99[1] = 0;
    UnknownStorage.init()();
    v100 = (char *)v99 + *(int *)(v97 + 28);
    v101 = v97;
    v102 = type metadata accessor for CMTimeProtobuf(0);
    v103 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56);
    v103(v100, 1, 1, v102);
    v103((char *)v99 + *(int *)(v101 + 32), 1, 1, v102);
    v92 = v274;
    outlined destroy of Coordinate3DPB?(v98, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  }
  else
  {
    v99 = v271;
    outlined init with take of Matrix2dPB(v98, (uint64_t)v271, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  }
  PinchRecoveryAnalyticsData.init(protoBuf:)(v99, (uint64_t)&v349);
  outlined destroy of Matrix3x3PB((uint64_t)v92, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
  v136 = v349;
  v135 = v351;
  v134 = v352;
  v625 = v353;
  v626 = v354;
  v279 = v355;
  v280 = v350;
  v133 = v356;
  v132 = v357;
  v624[0] = *(_DWORD *)v358;
  *(_DWORD *)((char *)v624 + 3) = *(_DWORD *)&v358[3];
  v131 = v359;
  v130 = v360;
  v623[0] = *(_DWORD *)v361;
  *(_DWORD *)((char *)v623 + 3) = *(_DWORD *)&v361[3];
  v129 = v362;
  v621 = v364;
  v622 = v365;
  v127 = v366;
  v128 = v363;
  v104 = v367;
  v619 = v368;
  v620 = v369;
  v105 = v370;
  v106 = v371;
  *(_DWORD *)((char *)v618 + 3) = *(_DWORD *)&v372[3];
  v618[0] = *(_DWORD *)v372;
  v107 = v373;
  LODWORD(v276) = v374;
  v617 = v376;
  v616 = v375;
  LODWORD(v275) = v377;
  LODWORD(v274) = v378;
  v615 = v380;
  v614 = v379;
  LODWORD(v272) = v381;
  LODWORD(v271) = v382;
  v613 = v384;
  v612 = v383;
  LODWORD(v270) = v385;
  LODWORD(v266) = v386;
  v611 = v388;
  v610 = v387;
  LODWORD(v265) = v389;
  LODWORD(v261) = v390;
  v609 = v392;
  v608 = v391;
  v231 = v393;
  v230 = v394;
  v607 = v396;
  v606 = v395;
  v228 = v398;
  v229 = v397;
  v227 = v399;
  v226 = v400;
  v605 = v403;
  v604 = v402;
  v603 = v407;
  v602 = v406;
  v601 = v411;
  v600 = v410;
  v599 = v415;
  v598 = v414;
  v597 = v419;
  v197 = v401;
  v596 = v418;
  v595 = v423;
  v194 = v404;
  v594 = v422;
  v108 = v281;
  v109 = (_BYTE *)(*(_QWORD *)(v281 + v278)
                 + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__genericPinch);
  v191 = v405;
  v192 = v408;
  v193 = v409;
  v195 = v412;
  v196 = v413;
  v198 = v416;
  v199 = v417;
  v200 = v420;
  v201 = v421;
  v202 = v424;
  LODWORD(v278) = v425;
  swift_beginAccess();
  LOBYTE(v109) = *v109;
  outlined destroy of Matrix3x3PB(v108, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
  v110 = v268;
  *(_QWORD *)a2 = v269;
  *(_QWORD *)(a2 + 8) = v110;
  v111 = v264;
  *(_QWORD *)(a2 + 16) = v267;
  *(_QWORD *)(a2 + 24) = v111;
  v112 = v262;
  *(_QWORD *)(a2 + 32) = v263;
  *(_QWORD *)(a2 + 40) = v112;
  *(_QWORD *)(a2 + 48) = v260;
  *(_BYTE *)(a2 + 56) = (_BYTE)v273;
  *(_BYTE *)(a2 + 57) = v259;
  *(_WORD *)(a2 + 58) = (_WORD)v258;
  *(_QWORD *)(a2 + 60) = v257;
  *(_QWORD *)(a2 + 68) = v256;
  *(_QWORD *)(a2 + 76) = v255;
  *(_BYTE *)(a2 + 84) = v254;
  v113 = v252;
  *(_QWORD *)(a2 + 88) = v253;
  *(_QWORD *)(a2 + 96) = v113;
  *(_QWORD *)(a2 + 104) = v251;
  *(_BYTE *)(a2 + 112) = v250;
  *(_QWORD *)(a2 + 120) = v249;
  *(_BYTE *)(a2 + 128) = v248;
  *(_QWORD *)(a2 + 136) = v247;
  *(_BYTE *)(a2 + 144) = v246;
  *(_DWORD *)(a2 + 148) = v245;
  *(_BYTE *)(a2 + 152) = v244;
  *(_DWORD *)(a2 + 156) = v243;
  *(_BYTE *)(a2 + 160) = v242;
  *(_QWORD *)(a2 + 168) = v241;
  *(_BYTE *)(a2 + 176) = v240;
  *(_DWORD *)(a2 + 180) = v239;
  *(_BYTE *)(a2 + 184) = v238;
  *(_DWORD *)(a2 + 188) = v237;
  *(_BYTE *)(a2 + 192) = v236;
  *(_DWORD *)(a2 + 196) = v235;
  *(_BYTE *)(a2 + 200) = v234;
  *(_DWORD *)(a2 + 204) = v233;
  *(_BYTE *)(a2 + 208) = v232;
  *(_DWORD *)(a2 + 212) = v225;
  *(_BYTE *)(a2 + 216) = v224;
  *(_BYTE *)(a2 + 217) = v223;
  v114 = v221;
  *(_QWORD *)(a2 + 224) = v222;
  *(_QWORD *)(a2 + 232) = v114;
  v115 = v219;
  *(_QWORD *)(a2 + 240) = v220;
  *(_QWORD *)(a2 + 248) = v115;
  v116 = v217;
  *(_QWORD *)(a2 + 256) = v218;
  *(_QWORD *)(a2 + 264) = v116;
  *(_BYTE *)(a2 + 272) = v216;
  *(_DWORD *)(a2 + 276) = v215;
  *(_BYTE *)(a2 + 280) = v214;
  *(_DWORD *)(a2 + 284) = v213;
  *(_BYTE *)(a2 + 288) = v212;
  *(_DWORD *)(a2 + 292) = v211;
  *(_BYTE *)(a2 + 296) = v210;
  *(_DWORD *)(a2 + 300) = v209;
  *(_BYTE *)(a2 + 304) = v208;
  *(_DWORD *)(a2 + 308) = v207;
  *(_BYTE *)(a2 + 312) = v206;
  *(_DWORD *)(a2 + 316) = v205;
  *(_BYTE *)(a2 + 320) = v204;
  *(_BYTE *)(a2 + 321) = v203;
  *(_QWORD *)(a2 + 328) = v190;
  *(_BYTE *)(a2 + 336) = v189;
  *(_BYTE *)(a2 + 337) = v188;
  *(_WORD *)(a2 + 338) = v187;
  v117 = v277;
  v118 = v185;
  *v277 = v186;
  v117[1] = v118;
  v117[2] = v184;
  *(_BYTE *)(a2 + 364) = v183;
  v119 = v181;
  *(_QWORD *)(a2 + 368) = v182;
  *(_QWORD *)(a2 + 376) = v119;
  *(_QWORD *)(a2 + 384) = v180;
  *(_BYTE *)(a2 + 392) = v179;
  *(_QWORD *)(a2 + 400) = v178;
  *(_BYTE *)(a2 + 408) = v177;
  *(_QWORD *)(a2 + 416) = v176;
  *(_BYTE *)(a2 + 424) = v175;
  *(_DWORD *)(a2 + 428) = v174;
  *(_BYTE *)(a2 + 432) = v173;
  *(_DWORD *)(a2 + 436) = v172;
  *(_BYTE *)(a2 + 440) = v171;
  *(_QWORD *)(a2 + 448) = v170;
  *(_BYTE *)(a2 + 456) = v169;
  *(_DWORD *)(a2 + 460) = v168;
  *(_BYTE *)(a2 + 464) = v167;
  *(_DWORD *)(a2 + 468) = v166;
  *(_BYTE *)(a2 + 472) = v165;
  *(_DWORD *)(a2 + 476) = v164;
  *(_BYTE *)(a2 + 480) = v163;
  *(_DWORD *)(a2 + 484) = v162;
  *(_BYTE *)(a2 + 488) = v161;
  *(_DWORD *)(a2 + 492) = v160;
  *(_BYTE *)(a2 + 496) = v159;
  *(_BYTE *)(a2 + 497) = v158;
  v120 = v156;
  *(_QWORD *)(a2 + 504) = v157;
  *(_QWORD *)(a2 + 512) = v120;
  *(_QWORD *)(a2 + 520) = v155;
  *(_QWORD *)(a2 + 528) = v154;
  *(_QWORD *)(a2 + 536) = v153;
  *(_QWORD *)(a2 + 544) = v152;
  *(_BYTE *)(a2 + 552) = v151;
  *(_DWORD *)(a2 + 556) = v150;
  *(_BYTE *)(a2 + 560) = v149;
  *(_DWORD *)(a2 + 564) = v148;
  *(_BYTE *)(a2 + 568) = v147;
  *(_DWORD *)(a2 + 572) = v146;
  *(_BYTE *)(a2 + 576) = v145;
  *(_DWORD *)(a2 + 580) = v144;
  *(_BYTE *)(a2 + 584) = v143;
  *(_DWORD *)(a2 + 588) = v142;
  *(_BYTE *)(a2 + 592) = v141;
  *(_DWORD *)(a2 + 596) = v140;
  *(_BYTE *)(a2 + 600) = v139;
  *(_BYTE *)(a2 + 601) = v138;
  *(_QWORD *)(a2 + 608) = v137;
  *(_DWORD *)(a2 + 616) = v136;
  v117[37] = v135;
  *(_BYTE *)(a2 + 644) = v134;
  *(_QWORD *)(a2 + 664) = v133;
  *(_BYTE *)(a2 + 672) = v132;
  *(_QWORD *)(a2 + 680) = v131;
  *(_BYTE *)(a2 + 688) = v130;
  *(_QWORD *)(a2 + 696) = v129;
  *(_BYTE *)(a2 + 704) = v128;
  *(_DWORD *)(a2 + 708) = v127;
  *(_BYTE *)(a2 + 712) = v104;
  *(_DWORD *)(a2 + 716) = v105;
  *(_BYTE *)(a2 + 720) = v106;
  *(_QWORD *)(a2 + 728) = v107;
  *(_WORD *)(a2 + 273) = v670;
  *(_WORD *)(a2 + 281) = v668;
  *(_WORD *)(a2 + 289) = v666;
  *(_WORD *)(a2 + 297) = v664;
  *(_WORD *)(a2 + 305) = v662;
  *(_WORD *)(a2 + 313) = v660;
  *(_DWORD *)(a2 + 322) = v347;
  *(_WORD *)(a2 + 365) = v658;
  *(_DWORD *)((char *)v345 + 3) = *(_DWORD *)((char *)v657 + 3);
  v345[0] = v657[0];
  *(_DWORD *)(a2 + 396) = *(_DWORD *)((char *)v345 + 3);
  *(_DWORD *)(a2 + 393) = v345[0];
  *(_DWORD *)((char *)v344 + 3) = *(_DWORD *)((char *)v656 + 3);
  v344[0] = v656[0];
  *(_DWORD *)(a2 + 412) = *(_DWORD *)((char *)v344 + 3);
  *(_DWORD *)(a2 + 409) = v344[0];
  *(_WORD *)(a2 + 425) = v654;
  *(_WORD *)(a2 + 433) = v652;
  *(_WORD *)(a2 + 85) = v691;
  *(_BYTE *)(a2 + 87) = v692;
  *(_DWORD *)(a2 + 113) = v690[0];
  *(_DWORD *)(a2 + 116) = *(_DWORD *)((char *)v690 + 3);
  *(_DWORD *)(a2 + 129) = v689[0];
  *(_DWORD *)(a2 + 132) = *(_DWORD *)((char *)v689 + 3);
  *(_BYTE *)(a2 + 147) = v688;
  *(_WORD *)(a2 + 145) = v687;
  *(_BYTE *)(a2 + 155) = v686;
  *(_WORD *)(a2 + 153) = v685;
  *(_DWORD *)(a2 + 161) = v684[0];
  *(_DWORD *)(a2 + 164) = *(_DWORD *)((char *)v684 + 3);
  *(_WORD *)(a2 + 177) = v682;
  *(_BYTE *)(a2 + 179) = v683;
  *(_WORD *)(a2 + 185) = v680;
  *(_BYTE *)(a2 + 187) = v681;
  *(_BYTE *)(a2 + 195) = v679;
  *(_WORD *)(a2 + 193) = v678;
  *(_BYTE *)(a2 + 203) = v677;
  *(_WORD *)(a2 + 201) = v676;
  *(_BYTE *)(a2 + 211) = v675;
  *(_WORD *)(a2 + 209) = v674;
  *(_WORD *)(a2 + 222) = v673;
  *(_DWORD *)(a2 + 218) = v672;
  *(_BYTE *)(a2 + 275) = v671;
  *(_BYTE *)(a2 + 283) = v669;
  *(_BYTE *)(a2 + 291) = v667;
  *(_BYTE *)(a2 + 299) = v665;
  *(_BYTE *)(a2 + 307) = v663;
  *(_BYTE *)(a2 + 315) = v661;
  v346 = v659;
  v343 = v655;
  v342 = v653;
  *(_DWORD *)((char *)v341 + 3) = *(_DWORD *)((char *)v651 + 3);
  v341[0] = v651[0];
  v340 = v650;
  v339 = v649;
  v338 = v648;
  v337 = v647;
  v336 = v646;
  v335 = v645;
  v334 = v644;
  v333 = v643;
  v332 = v642;
  v331 = v641;
  v330 = v640;
  v329 = v639;
  v328 = v638;
  v327 = v637;
  v326 = v636;
  v325 = v635;
  v324 = v634;
  v323 = v633;
  v322 = v632;
  v321 = v631;
  v320 = v630;
  v319 = v629;
  v318 = v628;
  v317 = v627;
  v314 = v626;
  v313 = v625;
  *(_DWORD *)((char *)v312 + 3) = *(_DWORD *)((char *)v624 + 3);
  v312[0] = v624[0];
  *(_DWORD *)((char *)v311 + 3) = *(_DWORD *)((char *)v623 + 3);
  v311[0] = v623[0];
  v310 = v622;
  v309 = v621;
  v308 = v620;
  v307 = v619;
  *(_DWORD *)((char *)v306 + 3) = *(_DWORD *)((char *)v618 + 3);
  v306[0] = v618[0];
  v305 = v617;
  v304 = v616;
  v303 = v615;
  v302 = v614;
  v301 = v613;
  v300 = v612;
  v299 = v611;
  v298 = v610;
  v297 = v609;
  v296 = v608;
  v295 = v607;
  v294 = v606;
  v293 = v605;
  v292 = v604;
  v291 = v603;
  v290 = v602;
  v289 = v601;
  v288 = v600;
  v287 = v599;
  v286 = v598;
  v285 = v597;
  v284 = v596;
  v283 = v595;
  v282 = v594;
  *(_WORD *)(a2 + 326) = v348;
  *(_BYTE *)(a2 + 367) = v346;
  *(_BYTE *)(a2 + 427) = v343;
  *(_BYTE *)(a2 + 435) = v342;
  *(_DWORD *)(a2 + 444) = *(_DWORD *)((char *)v341 + 3);
  *(_DWORD *)(a2 + 441) = v341[0];
  *(_BYTE *)(a2 + 459) = v340;
  *(_WORD *)(a2 + 457) = v339;
  *(_BYTE *)(a2 + 467) = v338;
  *(_WORD *)(a2 + 465) = v337;
  *(_BYTE *)(a2 + 475) = v336;
  *(_WORD *)(a2 + 473) = v335;
  *(_BYTE *)(a2 + 483) = v334;
  *(_WORD *)(a2 + 481) = v333;
  *(_BYTE *)(a2 + 491) = v332;
  *(_WORD *)(a2 + 489) = v331;
  *(_WORD *)(a2 + 502) = v330;
  *(_DWORD *)(a2 + 498) = v329;
  *(_BYTE *)(a2 + 555) = v328;
  *(_WORD *)(a2 + 553) = v327;
  *(_BYTE *)(a2 + 563) = v326;
  *(_WORD *)(a2 + 561) = v325;
  *(_BYTE *)(a2 + 571) = v324;
  *(_WORD *)(a2 + 569) = v323;
  *(_BYTE *)(a2 + 579) = v322;
  *(_WORD *)(a2 + 577) = v321;
  *(_BYTE *)(a2 + 587) = v320;
  *(_WORD *)(a2 + 585) = v319;
  *(_BYTE *)(a2 + 595) = v318;
  *(_WORD *)(a2 + 593) = v317;
  *(_WORD *)(a2 + 606) = v316;
  *(_DWORD *)(a2 + 602) = v315;
  *(_OWORD *)(v117 + 35) = v280;
  v121 = v313;
  *(_BYTE *)(a2 + 647) = v314;
  *(_WORD *)(a2 + 645) = v121;
  *(_OWORD *)(a2 + 648) = v279;
  v122 = v312[0];
  *(_DWORD *)(a2 + 676) = *(_DWORD *)((char *)v312 + 3);
  *(_DWORD *)(a2 + 673) = v122;
  v123 = v311[0];
  *(_DWORD *)(a2 + 692) = *(_DWORD *)((char *)v311 + 3);
  *(_DWORD *)(a2 + 689) = v123;
  LOWORD(v123) = v309;
  *(_BYTE *)(a2 + 707) = v310;
  *(_WORD *)(a2 + 705) = v123;
  LOWORD(v123) = v307;
  *(_BYTE *)(a2 + 715) = v308;
  *(_WORD *)(a2 + 713) = v123;
  v124 = v306[0];
  *(_DWORD *)(a2 + 724) = *(_DWORD *)((char *)v306 + 3);
  *(_DWORD *)(a2 + 721) = v124;
  *(_BYTE *)(a2 + 736) = (_BYTE)v276;
  LOWORD(v124) = v304;
  *(_BYTE *)(a2 + 739) = v305;
  *(_WORD *)(a2 + 737) = v124;
  *(_DWORD *)(a2 + 740) = (_DWORD)v275;
  *(_BYTE *)(a2 + 744) = (_BYTE)v274;
  LOWORD(v124) = v302;
  *(_BYTE *)(a2 + 747) = v303;
  *(_WORD *)(a2 + 745) = v124;
  *(_DWORD *)(a2 + 748) = v272;
  *(_BYTE *)(a2 + 752) = (_BYTE)v271;
  LOWORD(v124) = v300;
  *(_BYTE *)(a2 + 755) = v301;
  *(_WORD *)(a2 + 753) = v124;
  *(_DWORD *)(a2 + 756) = v270;
  *(_BYTE *)(a2 + 760) = v266;
  LOWORD(v124) = v298;
  *(_BYTE *)(a2 + 763) = v299;
  *(_WORD *)(a2 + 761) = v124;
  *(_DWORD *)(a2 + 764) = (_DWORD)v265;
  *(_BYTE *)(a2 + 768) = v261;
  LOWORD(v124) = v296;
  *(_BYTE *)(a2 + 771) = v297;
  *(_WORD *)(a2 + 769) = v124;
  *(_DWORD *)(a2 + 772) = v231;
  *(_WORD *)(a2 + 776) = v230;
  v125 = v294;
  *(_WORD *)(a2 + 782) = v295;
  *(_DWORD *)(a2 + 778) = v125;
  result = v228;
  *(_OWORD *)(a2 + 784) = v229;
  *(__n128 *)(a2 + 800) = result;
  *(_QWORD *)(a2 + 816) = v227;
  *(_QWORD *)(a2 + 824) = v226;
  *(_BYTE *)(a2 + 832) = v197;
  LOWORD(v125) = v292;
  *(_BYTE *)(a2 + 835) = v293;
  *(_WORD *)(a2 + 833) = v125;
  *(_DWORD *)(a2 + 836) = v194;
  *(_BYTE *)(a2 + 840) = v191;
  LOWORD(v125) = v290;
  *(_BYTE *)(a2 + 843) = v291;
  *(_WORD *)(a2 + 841) = v125;
  *(_DWORD *)(a2 + 844) = v192;
  *(_BYTE *)(a2 + 848) = v193;
  LOWORD(v125) = v288;
  *(_BYTE *)(a2 + 851) = v289;
  *(_WORD *)(a2 + 849) = v125;
  *(_DWORD *)(a2 + 852) = v195;
  *(_BYTE *)(a2 + 856) = v196;
  LOWORD(v125) = v286;
  *(_BYTE *)(a2 + 859) = v287;
  *(_WORD *)(a2 + 857) = v125;
  *(_DWORD *)(a2 + 860) = v198;
  *(_BYTE *)(a2 + 864) = v199;
  LOWORD(v125) = v284;
  *(_BYTE *)(a2 + 867) = v285;
  *(_WORD *)(a2 + 865) = v125;
  *(_DWORD *)(a2 + 868) = v200;
  *(_BYTE *)(a2 + 872) = v201;
  LOWORD(v125) = v282;
  *(_BYTE *)(a2 + 875) = v283;
  *(_WORD *)(a2 + 873) = v125;
  *(_DWORD *)(a2 + 876) = v202;
  *(_WORD *)(a2 + 880) = v278;
  *(_BYTE *)(a2 + 882) = (_BYTE)v109;
  return result;
}

uint64_t RecoverRepetitivePinchInternalData.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;

  v90 = v1 + 51;
  v3 = type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  v76 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v4);
  v87 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v88 = (uint64_t)&v61 - v8;
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v61 - v11;
  MEMORY[0x24BDAC7A8](v13, v14);
  v83 = (uint64_t)&v61 - v15;
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v61 - v18;
  MEMORY[0x24BDAC7A8](v20, v21);
  v78 = (uint64_t)&v61 - v22;
  v23 = type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
  MEMORY[0x24BDAC7A8](v23, v24);
  v85 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26, v27);
  v89 = (uint64_t *)((char *)&v61 - v28);
  MEMORY[0x24BDAC7A8](v29, v30);
  v32 = (uint64_t *)((char *)&v61 - v31);
  v33 = type metadata accessor for MissedPinchStatePB(0);
  MEMORY[0x24BDAC7A8](v33, v34);
  v36 = (uint64_t *)((char *)&v61 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = v1[1];
  v69 = *v1;
  v68 = v1[2];
  v84 = v1[3];
  v71 = v1[4];
  v70 = v1[5];
  v72 = v1[6];
  v62 = v1[15];
  v73 = *((unsigned __int8 *)v1 + 128);
  v63 = v1[17];
  v74 = *((unsigned __int8 *)v1 + 144);
  v75 = v1[41];
  v64 = v1[50];
  v77 = *((unsigned __int8 *)v1 + 408);
  v65 = v1[52];
  v79 = *((unsigned __int8 *)v90 + 16);
  v80 = v1[76];
  v66 = v1[85];
  v81 = *((unsigned __int8 *)v1 + 688);
  v67 = v1[87];
  v82 = *((unsigned __int8 *)v1 + 704);
  v86 = *((unsigned __int8 *)v1 + 882);
  UnknownStorage.init()();
  v38 = (uint64_t *)*(int *)(type metadata accessor for RecoverRepetitivePinchInternalDataPB(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  v90 = v38;
  *(uint64_t *)((char *)v38 + a1) = static RecoverRepetitivePinchInternalDataPB._StorageClass.defaultInstance;
  swift_retain();
  UnknownStorage.init()();
  *v36 = v69;
  v36[1] = v37;
  v36[2] = v68;
  RecoverRepetitivePinchInternalDataPB.missedPinchState.setter((uint64_t)v36);
  UnknownStorage.init()();
  v39 = v71;
  *v36 = v84;
  v36[1] = v39;
  v36[2] = v70;
  RecoverRepetitivePinchInternalDataPB.missedPinchByBreakState.setter((uint64_t)v36);
  UnknownStorage.init()();
  v84 = v23;
  v40 = (uint64_t)v32 + *(int *)(v23 + 24);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56);
  v41(v40, 1, 1, v3);
  *v32 = v72;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  UnknownStorage.init()();
  v42 = &v19[*(int *)(v3 + 28)];
  v43 = type metadata accessor for CMTimeProtobuf(0);
  v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
  v44(v42, 1, 1, v43);
  v44(&v19[*(int *)(v3 + 32)], 1, 1, v43);
  if ((v73 & 1) == 0)
    *(_QWORD *)v19 = v62;
  if ((v74 & 1) == 0)
    *((_QWORD *)v19 + 1) = v63;
  v45 = (uint64_t)v19;
  v46 = v78;
  outlined init with take of Matrix2dPB(v45, v78, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  outlined destroy of Coordinate3DPB?(v40, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  outlined init with take of Matrix2dPB(v46, v40, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  v41(v40, 0, 1, v3);
  RecoverRepetitivePinchInternalDataPB.scrollData.setter((uint64_t)v32);
  v47 = v84;
  v48 = v89;
  UnknownStorage.init()();
  v49 = (uint64_t)v48 + *(int *)(v47 + 24);
  v41(v49, 1, 1, v3);
  *v48 = v75;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  UnknownStorage.init()();
  v44(&v12[*(int *)(v3 + 28)], 1, 1, v43);
  v44(&v12[*(int *)(v3 + 32)], 1, 1, v43);
  if ((v77 & 1) == 0)
    *(_QWORD *)v12 = v64;
  v50 = v85;
  if ((v79 & 1) == 0)
    *((_QWORD *)v12 + 1) = v65;
  v51 = (uint64_t)v12;
  v52 = v83;
  outlined init with take of Matrix2dPB(v51, v83, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  outlined destroy of Coordinate3DPB?(v49, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  outlined init with take of Matrix2dPB(v52, v49, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  v41(v49, 0, 1, v3);
  RecoverRepetitivePinchInternalDataPB.tapData.setter((uint64_t)v89);
  UnknownStorage.init()();
  v53 = (uint64_t)v50 + *(int *)(v47 + 24);
  v41(v53, 1, 1, v3);
  *v50 = v80;
  v54 = v87;
  *(_QWORD *)v87 = 0;
  *((_QWORD *)v54 + 1) = 0;
  UnknownStorage.init()();
  v44(&v54[*(int *)(v3 + 28)], 1, 1, v43);
  v44(&v54[*(int *)(v3 + 32)], 1, 1, v43);
  if ((v81 & 1) == 0)
    *(_QWORD *)v54 = v66;
  if ((v82 & 1) == 0)
    *((_QWORD *)v54 + 1) = v67;
  v55 = v88;
  outlined init with take of Matrix2dPB((uint64_t)v54, v88, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  outlined destroy of Coordinate3DPB?(v53, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  outlined init with take of Matrix2dPB(v55, v53, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  v41(v53, 0, 1, v3);
  RecoverRepetitivePinchInternalDataPB.pinchData.setter((uint64_t)v50);
  v56 = v90;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for RecoverRepetitivePinchInternalDataPB._StorageClass(0);
    swift_allocObject();
    v57 = swift_retain();
    v58 = RecoverRepetitivePinchInternalDataPB._StorageClass.init(copying:)(v57);
    v56 = v90;
    *(uint64_t *)((char *)v90 + a1) = v58;
    swift_release();
  }
  v59 = (_BYTE *)(*(uint64_t *)((char *)v56 + a1)
                + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__genericPinch);
  result = swift_beginAccess();
  *v59 = v86;
  return result;
}

uint64_t RecoverRepetitivePinchInternalData.RecoveryGestureData.toProtoBuf()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v3 = type metadata accessor for PinchRecoveryAnalyticsDataPB(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v23 - v10;
  v12 = *v1;
  v13 = *((_BYTE *)v1 + 80);
  v14 = v1[11];
  v23 = v1[9];
  v24 = v14;
  v15 = *((_BYTE *)v1 + 96);
  v16 = type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
  UnknownStorage.init()();
  v17 = (uint64_t)a1 + *(int *)(v16 + 24);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v18(v17, 1, 1, v3);
  *a1 = v12;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  UnknownStorage.init()();
  v19 = &v7[*(int *)(v3 + 28)];
  v20 = type metadata accessor for CMTimeProtobuf(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v19, 1, 1, v20);
  v21(&v7[*(int *)(v3 + 32)], 1, 1, v20);
  if ((v13 & 1) == 0)
    *(_QWORD *)v7 = v23;
  if ((v15 & 1) == 0)
    *((_QWORD *)v7 + 1) = v24;
  outlined init with take of Matrix2dPB((uint64_t)v7, (uint64_t)v11, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  outlined destroy of Coordinate3DPB?(v17, &demangling cache variable for type metadata for PinchRecoveryAnalyticsDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v11, v17, type metadata accessor for PinchRecoveryAnalyticsDataPB);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v18)(v17, 0, 1, v3);
}

void *__swift_memcpy883_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x373uLL);
}

uint64_t getEnumTagSinglePayload for RecoverRepetitivePinchInternalData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 883))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 882);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RecoverRepetitivePinchInternalData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 872) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 882) = 0;
    *(_WORD *)(result + 880) = 0;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 883) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 883) = 0;
    if (a2)
      *(_BYTE *)(result + 882) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecoverRepetitivePinchInternalData()
{
  return &type metadata for RecoverRepetitivePinchInternalData;
}

void *__swift_memcpy274_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x112uLL);
}

uint64_t getEnumTagSinglePayload for RecoverRepetitivePinchInternalData.RecoveryGestureData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 274))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RecoverRepetitivePinchInternalData.RecoveryGestureData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 272) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 274) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 274) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecoverRepetitivePinchInternalData.RecoveryGestureData()
{
  return &type metadata for RecoverRepetitivePinchInternalData.RecoveryGestureData;
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in RecoverRepetitivePinchInternalData.RecoveryGestureData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB and conformance RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB);
}

uint64_t HandCenterFilter.init(noiseStd:withVelocityLimit:)(float a1, float a2)
{
  uint64_t v2;
  int v3;
  int v4;
  id v5;
  double v6;
  double v7;
  _QWORD v9[4];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  *(float *)(v2 + 48) = a2;
  *(float *)(v2 + 52) = a1;
  *(_OWORD *)(v2 + 32) = 0u;
  v10 = xmmword_23D9A6CC0;
  v11 = 0;
  v12 = 0;
  v9[3] = MEMORY[0x24BEE0D00];
  v9[0] = 0xD000000000000021;
  v9[1] = 0x800000023D9C8C00;
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000064, 0x800000023D9C8B90, 23, (uint64_t *)&v10, (uint64_t)v9, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  v4 = *(_DWORD *)(v2 + 48);
  v3 = *(_DWORD *)(v2 + 52);
  v5 = objc_allocWithZone((Class)Position3DFilter);
  LODWORD(v6) = v3;
  LODWORD(v7) = v4;
  *(_QWORD *)(v2 + 16) = objc_msgSend(v5, sel_initWithNoiseStd_withVelocityLimit_isPredictive_, 1, v6, v7);
  return v2;
}

uint64_t HandCenterFilter.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HandCenterFilter()
{
  return objc_opt_self();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys5Int32VSfG_Sfs5NeverOTg504_ss5d30VS2fIgyyd_AB3key_Sf5valuetSfs5E153OIegnrzr_TR0100_s5Hands14JointTransformV24computeUnifiedConfidence15occlusionValues11uncertainty10jointIndexSfSDys5a5VSfG_N18SitFZSfAI_SftXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v23 = *(_QWORD *)(a1 + 16);
  v24 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v24;
  result = specialized Dictionary.startIndex.getter(a1);
  v6 = result;
  v7 = v23;
  v8 = 0;
  v9 = a1 + 64;
  v10 = a1 + 80;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v12 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_24;
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v6);
    v15 = *(_QWORD *)(v24 + 16);
    v14 = *(_QWORD *)(v24 + 24);
    if (v15 >= v14 >> 1)
    {
      v21 = v10;
      v22 = v5;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      v10 = v21;
      v5 = v22;
      v7 = v23;
    }
    *(_QWORD *)(v24 + 16) = v15 + 1;
    *(_DWORD *)(v24 + 4 * v15 + 32) = v13;
    v11 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v11)
      goto LABEL_25;
    v16 = *(_QWORD *)(v9 + 8 * v12);
    if ((v16 & (1 << v6)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_27;
    v17 = v16 & (-2 << (v6 & 0x3F));
    if (v17)
    {
      v11 = __clz(__rbit64(v17)) | v6 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v18 = v12 + 1;
      v19 = (unint64_t)(v11 + 63) >> 6;
      if (v12 + 1 < v19)
      {
        v20 = *(_QWORD *)(v9 + 8 * v18);
        if (v20)
        {
LABEL_20:
          v11 = __clz(__rbit64(v20)) + (v18 << 6);
        }
        else
        {
          while (v19 - 2 != v12)
          {
            v20 = *(_QWORD *)(v10 + 8 * v12++);
            if (v20)
            {
              v18 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v8;
    v6 = v11;
    if (v8 == v7)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys5Int32VSfG_AG_Sfts5NeverOTg5051_s5Hands14JointTransformV8protoBufAcA0bC2PBV_tcfcs5D28V_SftAH3key_Sf5valuet_tXEfU_Tf1cn_nTm(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v26 = *(_QWORD *)(a1 + 16);
  v27 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v27;
  result = specialized Dictionary.startIndex.getter(a1);
  v6 = result;
  v7 = v26;
  v8 = 0;
  v9 = a1 + 64;
  v10 = a1 + 80;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v12 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_24;
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v6);
    v14 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * v6);
    v16 = *(_QWORD *)(v27 + 16);
    v15 = *(_QWORD *)(v27 + 24);
    if (v16 >= v15 >> 1)
    {
      v24 = v9;
      v25 = v5;
      v23 = v10;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v10 = v23;
      v9 = v24;
      v5 = v25;
      v7 = v26;
    }
    *(_QWORD *)(v27 + 16) = v16 + 1;
    v17 = v27 + 8 * v16;
    *(_DWORD *)(v17 + 32) = v13;
    *(_DWORD *)(v17 + 36) = v14;
    v11 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v11)
      goto LABEL_25;
    v18 = *(_QWORD *)(v9 + 8 * v12);
    if ((v18 & (1 << v6)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v5)
      goto LABEL_27;
    v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      v11 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = v12 + 1;
      v21 = (unint64_t)(v11 + 63) >> 6;
      if (v12 + 1 < v21)
      {
        v22 = *(_QWORD *)(v9 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v11 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v12)
          {
            v22 = *(_QWORD *)(v10 + 8 * v12++);
            if (v22)
            {
              v20 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v8;
    v6 = v11;
    if (v8 == v7)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

__n128 JointTransform.init(withTransform:rawTransform:uncertainty:occlusionValues:jointIndex:)@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>, __n128 a7@<Q3>, __n128 a8@<Q4>, __n128 a9@<Q5>, __n128 a10@<Q6>, __n128 a11@<Q7>, float a12)
{
  uint64_t v15;
  unsigned __int32 v16;
  unsigned __int32 v17;
  __n128 result;

  v15 = swift_bridgeObjectRetain();
  specialized static JointTransform.computeUnifiedConfidence(occlusionValues:uncertainty:jointIndex:)(v15, a2, a12);
  v17 = v16;
  swift_bridgeObjectRelease();
  a3->n128_u32[0] = v17;
  a3->n128_f32[1] = a12;
  a3->n128_u64[1] = a1;
  a3[1] = a4;
  a3[2] = a5;
  a3[3] = a6;
  a3[4] = a7;
  a3[5] = a8;
  a3[6] = a9;
  a3[7] = a10;
  result = a11;
  a3[8] = a11;
  return result;
}

float32x4_t JointTransform.init(_:from:)@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>, float32x4_t a6@<Q3>)
{
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t result;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)(a1 + 16))), a4, *(float32x2_t *)(a1 + 16), 1), a5, *(float32x4_t *)(a1 + 16), 2), a6, *(float32x4_t *)(a1 + 16), 3);
  v8 = *(float32x4_t *)(a1 + 128);
  v9 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)(a1 + 32))), a4, *(float32x2_t *)(a1 + 32), 1), a5, *(float32x4_t *)(a1 + 32), 2), a6, *(float32x4_t *)(a1 + 32), 3);
  v10 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)(a1 + 48))), a4, *(float32x2_t *)(a1 + 48), 1), a5, *(float32x4_t *)(a1 + 48), 2), a6, *(float32x4_t *)(a1 + 48), 3);
  v11 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)(a1 + 64))), a4, *(float32x2_t *)(a1 + 64), 1), a5, *(float32x4_t *)(a1 + 64), 2), a6, *(float32x4_t *)(a1 + 64), 3);
  v12 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)(a1 + 80))), a4, *(float32x2_t *)(a1 + 80), 1), a5, *(float32x4_t *)(a1 + 80), 2), a6, *(float32x4_t *)(a1 + 80), 3);
  v13 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)(a1 + 96))), a4, *(float32x2_t *)(a1 + 96), 1), a5, *(float32x4_t *)(a1 + 96), 2), a6, *(float32x4_t *)(a1 + 96), 3);
  v14 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)(a1 + 112))), a4, *(float32x2_t *)(a1 + 112), 1), a5, *(float32x4_t *)(a1 + 112), 2), a6, *(float32x4_t *)(a1 + 112), 3);
  a2->i64[0] = *(_QWORD *)a1;
  a2->i64[1] = v6;
  a2[1] = v7;
  a2[2] = v9;
  a2[3] = v10;
  a2[4] = v11;
  a2[5] = v12;
  a2[6] = v13;
  result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, v8.f32[0]), a4, *(float32x2_t *)v8.f32, 1), a5, v8, 2), a6, v8, 3);
  a2[7] = v14;
  a2[8] = result;
  return result;
}

uint64_t JointTransform.init(protoBuf:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  simd_float4x4 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  simd_float4x4 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  int v149;
  int *v150;
  int v151;
  uint64_t result;
  _DWORD *v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _DWORD *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181[26];
  simd_float4x4_optional v182;
  simd_float4x4_optional v183;
  _OWORD v184[4];
  char v185;
  _OWORD v186[4];
  char v187;

  v171 = a2;
  v3 = type metadata accessor for JointTransformPB(0);
  v5 = MEMORY[0x24BDAC7A8](v3, v4);
  *(_QWORD *)&v172 = (char *)&v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v7);
  *(_QWORD *)&v179 = (char *)&v158 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  v11 = MEMORY[0x24BDAC7A8](v9, v10);
  v165 = (uint64_t)&v158 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11, v13);
  v159 = (uint64_t)&v158 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14, v16);
  v170 = (uint64_t)&v158 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17, v19);
  *(_QWORD *)&v176 = (char *)&v158 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20, v22);
  v161 = (uint64_t)&v158 - v24;
  MEMORY[0x24BDAC7A8](v23, v25);
  *(_QWORD *)&v178 = (char *)&v158 - v26;
  *(_QWORD *)&v175 = type metadata accessor for Matrix2dPB(0);
  *(_QWORD *)&v174 = *(_QWORD *)(v175 - 8);
  v28 = MEMORY[0x24BDAC7A8](v175, v27);
  v164 = (uint64_t *)((char *)&v158 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = MEMORY[0x24BDAC7A8](v28, v30);
  v162 = (uint64_t *)((char *)&v158 - v32);
  v34 = MEMORY[0x24BDAC7A8](v31, v33);
  v169 = (uint64_t *)((char *)&v158 - v35);
  v37 = MEMORY[0x24BDAC7A8](v34, v36);
  v166 = (uint64_t *)((char *)&v158 - v38);
  v40 = MEMORY[0x24BDAC7A8](v37, v39);
  v160 = (uint64_t *)((char *)&v158 - v41);
  MEMORY[0x24BDAC7A8](v40, v42);
  v44 = (char *)&v158 - v43;
  v45 = type metadata accessor for TransformMatrixPB(0);
  v46 = *(_QWORD *)(v45 - 8);
  v48 = MEMORY[0x24BDAC7A8](v45, v47);
  v168 = (uint64_t)&v158 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v48, v50);
  *(_QWORD *)&v177 = (char *)&v158 - v51;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  v54 = MEMORY[0x24BDAC7A8](v52, v53);
  v167 = (uint64_t)&v158 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = MEMORY[0x24BDAC7A8](v54, v56);
  *(_QWORD *)&v173 = (char *)&v158 - v58;
  v60 = MEMORY[0x24BDAC7A8](v57, v59);
  v62 = (char *)&v158 - v61;
  MEMORY[0x24BDAC7A8](v60, v63);
  v65 = (char *)&v158 - v64;
  v163 = v3;
  v66 = *(int *)(v3 + 20);
  v67 = *(_QWORD *)(a1 + v66)
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformMatrix;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v67, (uint64_t)v65, &demangling cache variable for type metadata for TransformMatrixPB?);
  v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  LODWORD(v67) = v68(v65, 1, v45);
  outlined destroy of Coordinate3DPB?((uint64_t)v65, &demangling cache variable for type metadata for TransformMatrixPB?);
  v180 = v66;
  v69 = *(_QWORD *)(a1 + v66);
  if ((_DWORD)v67 == 1)
  {
    v158 = v45;
    v70 = v69 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transform;
    swift_beginAccess();
    v71 = v70;
    v72 = v178;
    outlined init with copy of (Int32, Matrix2dPB)(v71, v178, &demangling cache variable for type metadata for Matrix2dPB?);
    v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v174 + 48);
    v74 = v175;
    if (v73(v72, 1, v175) == 1)
    {
      v75 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)v44 = MEMORY[0x24BEE4AF8];
      v44[8] = 0;
      *((_QWORD *)v44 + 2) = v75;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v72, &demangling cache variable for type metadata for Matrix2dPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v72, (uint64_t)v44, type metadata accessor for Matrix2dPB);
    }
    v86 = *(_QWORD *)v44;
    swift_bridgeObjectRetain();
    outlined destroy of Matrix3x3PB((uint64_t)v44, type metadata accessor for Matrix2dPB);
    v87 = *(_QWORD *)(v86 + 16);
    swift_bridgeObjectRelease();
    v88 = v179;
    outlined init with copy of JointTransformPB(a1, v179);
    if (v87)
    {
      outlined destroy of Matrix3x3PB(v88, type metadata accessor for JointTransformPB);
      v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v68;
    }
    else
    {
      v93 = *(_QWORD *)(v88 + *(int *)(v163 + 20))
          + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transform;
      swift_beginAccess();
      v94 = v93;
      v95 = v161;
      outlined init with copy of (Int32, Matrix2dPB)(v94, v161, &demangling cache variable for type metadata for Matrix2dPB?);
      v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v68;
      if (v73(v95, 1, v74) == 1)
      {
        v96 = MEMORY[0x24BEE4AF8];
        v97 = v160;
        *v160 = MEMORY[0x24BEE4AF8];
        *((_BYTE *)v97 + 8) = 0;
        v97[2] = v96;
        UnknownStorage.init()();
        outlined destroy of Coordinate3DPB?(v95, &demangling cache variable for type metadata for Matrix2dPB?);
      }
      else
      {
        v97 = v160;
        outlined init with take of Matrix2dPB(v95, (uint64_t)v160, type metadata accessor for Matrix2dPB);
      }
      v98 = v97[2];
      swift_bridgeObjectRetain();
      outlined destroy of Matrix3x3PB((uint64_t)v97, type metadata accessor for Matrix2dPB);
      v99 = *(_QWORD *)(v98 + 16);
      swift_bridgeObjectRelease();
      outlined destroy of Matrix3x3PB(v88, type metadata accessor for JointTransformPB);
      if (!v99)
      {
        v178 = 0u;
        v179 = 0u;
        v176 = 0u;
        v177 = 0u;
        v78 = v158;
        goto LABEL_20;
      }
    }
    v100 = *(_QWORD *)(a1 + v180)
         + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transform;
    swift_beginAccess();
    v101 = v100;
    v102 = v176;
    outlined init with copy of (Int32, Matrix2dPB)(v101, v176, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v73(v102, 1, v74) == 1)
    {
      v103 = MEMORY[0x24BEE4AF8];
      v104 = v166;
      *v166 = MEMORY[0x24BEE4AF8];
      *((_BYTE *)v104 + 8) = 0;
      v104[2] = v103;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v102, &demangling cache variable for type metadata for Matrix2dPB?);
    }
    else
    {
      v104 = v166;
      outlined init with take of Matrix2dPB(v102, (uint64_t)v166, type metadata accessor for Matrix2dPB);
    }
    specialized Matrix2d.init(protoBuf:)(v104);
    Matrix2d.toSimd4x4Float()(&v182);
    swift_bridgeObjectRelease();
    outlined init with take of ImageData?((uint64_t)&v182, (uint64_t)v186, &demangling cache variable for type metadata for simd_float4x4?);
    v78 = v158;
    if ((v187 & 1) != 0)
    {
      __break(1u);
      goto LABEL_45;
    }
    v178 = v186[1];
    v179 = v186[0];
    v176 = v186[3];
    v177 = v186[2];
  }
  else
  {
    v76 = v175;
    v77 = v69
        + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformMatrix;
    swift_beginAccess();
    outlined init with copy of (Int32, Matrix2dPB)(v77, (uint64_t)v62, &demangling cache variable for type metadata for TransformMatrixPB?);
    v78 = v45;
    v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v68;
    if (v68(v62, 1, v45) == 1)
    {
      v80 = v177;
      UnknownStorage.init()();
      v81 = v80 + *(int *)(v45 + 20);
      v82 = type metadata accessor for Matrix3x3PB(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v81, 1, 1, v82);
      v83 = v80 + *(int *)(v45 + 24);
      v84 = type metadata accessor for Coordinate3DPB(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v83, 1, 1, v84);
      outlined destroy of Coordinate3DPB?((uint64_t)v62, &demangling cache variable for type metadata for TransformMatrixPB?);
    }
    else
    {
      v80 = v177;
      outlined init with take of Matrix2dPB((uint64_t)v62, v177, type metadata accessor for TransformMatrixPB);
    }
    TransformMatrixPB.toSIMD4x4()(v85);
    v178 = v90;
    v179 = v89;
    v176 = v92;
    v177 = v91;
    outlined destroy of Matrix3x3PB(v80, type metadata accessor for TransformMatrixPB);
    v74 = v76;
  }
LABEL_20:
  v105 = v173;
  v106 = v180;
  v107 = *(_QWORD *)(a1 + v180)
       + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRawMatrix;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v107, v105, &demangling cache variable for type metadata for TransformMatrixPB?);
  LODWORD(v107) = v79(v105, 1, v78);
  outlined destroy of Coordinate3DPB?(v105, &demangling cache variable for type metadata for TransformMatrixPB?);
  v108 = *(_QWORD *)(a1 + v106);
  if ((_DWORD)v107 != 1)
  {
    v115 = v108
         + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRawMatrix;
    swift_beginAccess();
    v116 = v167;
    outlined init with copy of (Int32, Matrix2dPB)(v115, v167, &demangling cache variable for type metadata for TransformMatrixPB?);
    if (v79(v116, 1, v78) == 1)
    {
      v117 = v168;
      UnknownStorage.init()();
      v118 = v117 + *(int *)(v78 + 20);
      v119 = type metadata accessor for Matrix3x3PB(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56))(v118, 1, 1, v119);
      v120 = v117 + *(int *)(v78 + 24);
      v121 = type metadata accessor for Coordinate3DPB(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 56))(v120, 1, 1, v121);
      outlined destroy of Coordinate3DPB?(v116, &demangling cache variable for type metadata for TransformMatrixPB?);
    }
    else
    {
      v117 = v168;
      outlined init with take of Matrix2dPB(v116, v168, type metadata accessor for TransformMatrixPB);
    }
    TransformMatrixPB.toSIMD4x4()(v122);
    v174 = v127;
    v175 = v126;
    v172 = v129;
    v173 = v128;
    outlined destroy of Matrix3x3PB(v117, type metadata accessor for TransformMatrixPB);
    goto LABEL_39;
  }
  v109 = v108
       + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRaw;
  swift_beginAccess();
  v110 = v109;
  v111 = v170;
  outlined init with copy of (Int32, Matrix2dPB)(v110, v170, &demangling cache variable for type metadata for Matrix2dPB?);
  v112 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v174 + 48);
  if (v112(v111, 1, v74) == 1)
  {
    v113 = MEMORY[0x24BEE4AF8];
    v114 = v169;
    *v169 = MEMORY[0x24BEE4AF8];
    *((_BYTE *)v114 + 8) = 0;
    v114[2] = v113;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v111, &demangling cache variable for type metadata for Matrix2dPB?);
  }
  else
  {
    v114 = v169;
    outlined init with take of Matrix2dPB(v111, (uint64_t)v169, type metadata accessor for Matrix2dPB);
  }
  v123 = *v114;
  swift_bridgeObjectRetain();
  outlined destroy of Matrix3x3PB((uint64_t)v114, type metadata accessor for Matrix2dPB);
  v124 = *(_QWORD *)(v123 + 16);
  swift_bridgeObjectRelease();
  v125 = v172;
  outlined init with copy of JointTransformPB(a1, v172);
  if (v124)
  {
    outlined destroy of Matrix3x3PB(v125, type metadata accessor for JointTransformPB);
  }
  else
  {
    v130 = *(_QWORD *)(v125 + *(int *)(v163 + 20))
         + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRaw;
    swift_beginAccess();
    v131 = v130;
    v132 = v159;
    outlined init with copy of (Int32, Matrix2dPB)(v131, v159, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v112(v132, 1, v74) == 1)
    {
      v133 = MEMORY[0x24BEE4AF8];
      v134 = v162;
      *v162 = MEMORY[0x24BEE4AF8];
      *((_BYTE *)v134 + 8) = 0;
      v134[2] = v133;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v132, &demangling cache variable for type metadata for Matrix2dPB?);
    }
    else
    {
      v134 = v162;
      outlined init with take of Matrix2dPB(v132, (uint64_t)v162, type metadata accessor for Matrix2dPB);
    }
    v135 = v134[2];
    swift_bridgeObjectRetain();
    outlined destroy of Matrix3x3PB((uint64_t)v134, type metadata accessor for Matrix2dPB);
    v136 = *(_QWORD *)(v135 + 16);
    swift_bridgeObjectRelease();
    outlined destroy of Matrix3x3PB(v172, type metadata accessor for JointTransformPB);
    v174 = v178;
    v175 = v179;
    v172 = v176;
    v173 = v177;
    if (!v136)
      goto LABEL_39;
  }
  v137 = *(_QWORD *)(a1 + v180)
       + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRaw;
  swift_beginAccess();
  v138 = v137;
  v139 = v165;
  outlined init with copy of (Int32, Matrix2dPB)(v138, v165, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v112(v139, 1, v74) == 1)
  {
    v140 = MEMORY[0x24BEE4AF8];
    v141 = v164;
    *v164 = MEMORY[0x24BEE4AF8];
    *((_BYTE *)v141 + 8) = 0;
    v141[2] = v140;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v139, &demangling cache variable for type metadata for Matrix2dPB?);
  }
  else
  {
    v141 = v164;
    outlined init with take of Matrix2dPB(v139, (uint64_t)v164, type metadata accessor for Matrix2dPB);
  }
  specialized Matrix2d.init(protoBuf:)(v141);
  Matrix2d.toSimd4x4Float()(&v183);
  swift_bridgeObjectRelease();
  outlined init with take of ImageData?((uint64_t)&v183, (uint64_t)v184, &demangling cache variable for type metadata for simd_float4x4?);
  if ((v185 & 1) != 0)
  {
LABEL_45:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v174 = v184[1];
  v175 = v184[0];
  v172 = v184[3];
  v173 = v184[2];
LABEL_39:
  v142 = *(_QWORD *)(a1 + v180);
  swift_beginAccess();
  v143 = swift_bridgeObjectRetain();
  v144 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys5Int32VSfG_AG_Sfts5NeverOTg5051_s5Hands14JointTransformV8protoBufAcA0bC2PBV_tcfcs5D28V_SftAH3key_Sf5valuet_tXEfU_Tf1cn_nTm(v143);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v144 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int32, Float>);
    v145 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v145 = MEMORY[0x24BEE4B00];
  }
  v181[0] = v145;
  v146 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v146, 1, v181);
  swift_bridgeObjectRelease();
  v147 = v181[0];
  v148 = (int *)(v142
               + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__uncertainty);
  swift_beginAccess();
  v149 = *v148;
  v150 = (int *)(v142
               + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__unifiedConfidence);
  swift_beginAccess();
  v151 = *v150;
  result = outlined destroy of Matrix3x3PB(a1, type metadata accessor for JointTransformPB);
  v153 = v171;
  *v171 = v151;
  v153[1] = v149;
  *((_QWORD *)v153 + 1) = v147;
  v154 = v178;
  *((_OWORD *)v153 + 1) = v179;
  *((_OWORD *)v153 + 2) = v154;
  v155 = v176;
  *((_OWORD *)v153 + 3) = v177;
  *((_OWORD *)v153 + 4) = v155;
  v156 = v174;
  *((_OWORD *)v153 + 5) = v175;
  *((_OWORD *)v153 + 6) = v156;
  v157 = v172;
  *((_OWORD *)v153 + 7) = v173;
  *((_OWORD *)v153 + 8) = v157;
  return result;
}

void JointTransform.init()(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *MEMORY[0x24BDAEE00];
  v3 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v4 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v5 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  *(_OWORD *)(a1 + 16) = *MEMORY[0x24BDAEE00];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v2;
  *(_OWORD *)(a1 + 96) = v3;
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 128) = v5;
  *(_DWORD *)(a1 + 4) = 1148846080;
  *(_QWORD *)(a1 + 8) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int32 : Float]);
  Dictionary.reserveCapacity(_:)(2);
  *(_DWORD *)a1 = 0;
}

unint64_t JointTransform.init(withTransform:rawTransform:uncertainty:occlusionValues:unifiedConfidence:)@<X0>(unint64_t result@<X0>, __n128 *a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>, __n128 a6@<Q3>, __n128 a7@<Q4>, __n128 a8@<Q5>, __n128 a9@<Q6>, __n128 a10@<Q7>, unsigned __int32 a11, unsigned __int32 a12)
{
  a2->n128_u32[0] = a12;
  a2->n128_u32[1] = a11;
  a2->n128_u64[1] = result;
  a2[1] = a3;
  a2[2] = a4;
  a2[3] = a5;
  a2[4] = a6;
  a2[5] = a7;
  a2[6] = a8;
  a2[7] = a9;
  a2[8] = a10;
  return result;
}

uint64_t JointTransform.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  int8x16_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int8x16_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t result;
  __n128 v49;
  __n128 v50;
  int8x16_t v51;
  int8x16_t v52;
  __n128 v53;
  __n128 v54;
  int8x16_t v55;
  int8x16_t v56;
  uint64_t v57[3];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v49 - v9;
  v11 = type metadata accessor for TransformMatrixPB(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v49 - v18;
  v20 = v1->i32[0];
  v21 = v1->i32[1];
  v52 = v1[1];
  v51 = v1[2];
  v50 = (__n128)v1[3];
  v49 = (__n128)v1[4];
  v22 = v1[5];
  v55 = v1[6];
  v56 = v22;
  v23 = (__n128)v1[7];
  v53 = (__n128)v1[8];
  v54 = v23;
  UnknownStorage.init()();
  v24 = *(int *)(type metadata accessor for JointTransformPB(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v24) = static JointTransformPB._StorageClass.defaultInstance;
  swift_retain();
  TransformMatrixPB.init(simd4x4float:)((uint64_t)v19, v52, v51, v50, v49);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v52.i64[0] = (uint64_t)v15;
    type metadata accessor for JointTransformPB._StorageClass(0);
    swift_allocObject();
    v25 = swift_retain();
    v26 = specialized JointTransformPB._StorageClass.init(copying:)(v25);
    v15 = (char *)v52.i64[0];
    swift_release();
    *(_QWORD *)(a1 + v24) = v26;
    swift_release();
  }
  v27 = *(_QWORD *)(a1 + v24);
  outlined init with take of Matrix2dPB((uint64_t)v19, (uint64_t)v10, type metadata accessor for TransformMatrixPB);
  v28 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56);
  v28(v10, 0, 1, v11);
  outlined init with take of ImageData?((uint64_t)v10, (uint64_t)v6, &demangling cache variable for type metadata for TransformMatrixPB?);
  v29 = v27
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformMatrix;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of TransformMatrixPB?((uint64_t)v6, v29);
  swift_endAccess();
  swift_release();
  TransformMatrixPB.init(simd4x4float:)((uint64_t)v15, v56, v55, v54, v53);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for JointTransformPB._StorageClass(0);
    swift_allocObject();
    v30 = swift_retain();
    v31 = specialized JointTransformPB._StorageClass.init(copying:)(v30);
    swift_release();
    *(_QWORD *)(a1 + v24) = v31;
    swift_release();
  }
  v32 = *(_QWORD *)(a1 + v24);
  outlined init with take of Matrix2dPB((uint64_t)v15, (uint64_t)v10, type metadata accessor for TransformMatrixPB);
  v28(v10, 0, 1, v11);
  outlined init with take of ImageData?((uint64_t)v10, (uint64_t)v6, &demangling cache variable for type metadata for TransformMatrixPB?);
  v33 = v32
      + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRawMatrix;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of TransformMatrixPB?((uint64_t)v6, v33);
  swift_endAccess();
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for JointTransformPB._StorageClass(0);
    swift_allocObject();
    v34 = swift_retain();
    v35 = specialized JointTransformPB._StorageClass.init(copying:)(v34);
    swift_release();
    *(_QWORD *)(a1 + v24) = v35;
    swift_release();
  }
  v36 = (_DWORD *)(*(_QWORD *)(a1 + v24)
                 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__uncertainty);
  swift_beginAccess();
  *v36 = v21;
  v37 = swift_bridgeObjectRetain();
  v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys5Int32VSfG_AG_Sfts5NeverOTg5051_s5Hands14JointTransformV8protoBufAcA0bC2PBV_tcfcs5D28V_SftAH3key_Sf5valuet_tXEfU_Tf1cn_nTm(v37);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v38 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int32, Float>);
    v39 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v39 = MEMORY[0x24BEE4B00];
  }
  v57[0] = v39;
  v40 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v40, 1, v57);
  swift_bridgeObjectRelease();
  v41 = v57[0];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for JointTransformPB._StorageClass(0);
    swift_allocObject();
    v42 = swift_retain();
    v43 = specialized JointTransformPB._StorageClass.init(copying:)(v42);
    swift_release();
    *(_QWORD *)(a1 + v24) = v43;
    swift_release();
  }
  v44 = (uint64_t *)(*(_QWORD *)(a1 + v24)
                  + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__occlusionValues);
  swift_beginAccess();
  *v44 = v41;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for JointTransformPB._StorageClass(0);
    swift_allocObject();
    v45 = swift_retain();
    v46 = specialized JointTransformPB._StorageClass.init(copying:)(v45);
    swift_release();
    *(_QWORD *)(a1 + v24) = v46;
    swift_release();
  }
  v47 = (_DWORD *)(*(_QWORD *)(a1 + v24)
                 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__unifiedConfidence);
  result = swift_beginAccess();
  *v47 = v20;
  return result;
}

uint64_t JointTransform.almostEqual(to:withThreshold:)(float32x4_t *a1, double a2, double a3)
{
  float32x4_t *v3;
  float v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unsigned int v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t result;
  float v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;

  v4 = a1->f32[0];
  v5 = a1->f32[1];
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = v3->f32[0];
  v11 = v3->f32[1];
  v12 = v3[1];
  v13 = v3[2];
  v14 = v3[3];
  v15 = v3[4];
  *(float *)&a3 = a2;
  v36 = v6;
  v37 = *(float *)&a3;
  v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  v17 = vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(v3[6], a1[6])), (int8x16_t)vcgeq_f32(v16, vabdq_f32(v3[5], a1[5]))), vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(v3[7], a1[7])), (int8x16_t)vcgeq_f32(v16, vabdq_f32(v3[8], a1[8])))));
  v35 = v7;
  v33 = v9;
  v34 = v8;
  v31 = v13;
  v32 = v12;
  v29 = v15;
  v30 = v14;
  if ((v17 & 0x80000000) == 0)
  {
    v28 = v16;
    _StringGuts.grow(_:)(46);
    v18._countAndFlagsBits = 0xD000000000000022;
    v18._object = (void *)0x800000023D9C8C30;
    String.append(_:)(v18);
    type metadata accessor for simd_float4x4(0);
    _print_unlocked<A, B>(_:_:)();
    v19._countAndFlagsBits = 0x20726568746F202CLL;
    v19._object = (void *)0xE800000000000000;
    String.append(_:)(v19);
    _print_unlocked<A, B>(_:_:)();
    swift_bridgeObjectRelease();
    v16 = v28;
    v15 = v29;
    v14 = v30;
    v13 = v31;
    v12 = v32;
    v9 = v33;
    v8 = v34;
    v7 = v35;
    v6 = v36;
  }
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(v13, v7)), (int8x16_t)vcgeq_f32(v16, vabdq_f32(v12, v6))), vandq_s8((int8x16_t)vcgeq_f32(v16, vabdq_f32(v14, v8)), (int8x16_t)vcgeq_f32(v16, vabdq_f32(v15, v9))))) & 0x80000000) != 0)
  {
    result = v17 >> 31;
  }
  else
  {
    _StringGuts.grow(_:)(43);
    v20._object = (void *)0x800000023D9C8C60;
    v20._countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v20);
    type metadata accessor for simd_float4x4(0);
    _print_unlocked<A, B>(_:_:)();
    v21._countAndFlagsBits = 0x20726568746F202CLL;
    v21._object = (void *)0xE800000000000000;
    String.append(_:)(v21);
    _print_unlocked<A, B>(_:_:)();
    swift_bridgeObjectRelease();
    result = 0;
  }
  v23 = v37;
  if (vabds_f32(v11, v5) > v37)
  {
    _StringGuts.grow(_:)(45);
    v24._countAndFlagsBits = 0xD000000000000021;
    v24._object = (void *)0x800000023D9C8C80;
    String.append(_:)(v24);
    Float.write<A>(to:)();
    v25._countAndFlagsBits = 0x20726568746F202CLL;
    v25._object = (void *)0xE800000000000000;
    String.append(_:)(v25);
    Float.write<A>(to:)();
    swift_bridgeObjectRelease();
    v23 = v37;
    result = 0;
  }
  if (vabds_f32(v10, v4) > v23)
  {
    _StringGuts.grow(_:)(51);
    v26._countAndFlagsBits = 0xD000000000000027;
    v26._object = (void *)0x800000023D9C8CB0;
    String.append(_:)(v26);
    Float.write<A>(to:)();
    v27._countAndFlagsBits = 0x20726568746F202CLL;
    v27._object = (void *)0xE800000000000000;
    String.append(_:)(v27);
    Float.write<A>(to:)();
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

__n128 one-time initialization function for _logisticRegression()
{
  float64x2_t v0;
  __n128 v1;
  double v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for _logisticRegression);
  v1.n128_u64[0] = (unint64_t)vcvt_f32_f64(v0);
  *(float *)v0.f64 = v2;
  v1.n128_u64[1] = LODWORD(v0.f64[0]);
  v5 = v1;
  type metadata accessor for LogisticRegression3();
  v3 = swift_allocObject();
  result = v5;
  *(__n128 *)(v3 + 16) = v5;
  *(_DWORD *)(v3 + 32) = -1070717551;
  static JointTransform._logisticRegression = v3;
  return result;
}

float JointTransform.unifiedConfidence.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

float JointTransform.uncertainty.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

uint64_t JointTransform.occlusionValues.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 JointTransform.transformValue.getter()
{
  __n128 *v0;

  return v0[1];
}

__n128 JointTransform.transformRawValue.getter()
{
  __n128 *v0;

  return v0[5];
}

void specialized static JointTransform.computeUnifiedConfidence(occlusionValues:uncertainty:jointIndex:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  int8x16_t v13;

  if (a2 < 0 || a2 && a2 != 26 && a2 != 25)
  {
    v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys5Int32VSfG_Sfs5NeverOTg504_ss5d30VS2fIgyyd_AB3key_Sf5valuetSfs5E153OIegnrzr_TR0100_s5Hands14JointTransformV24computeUnifiedConfidence15occlusionValues11uncertainty10jointIndexSfSDys5a5VSfG_N18SitFZSfAI_SftXEfU_Tf3nnnpf_nTf1cn_n(a1);
    if (*(_QWORD *)(v4 + 16))
      _ZF = a3 == -1.0;
    else
      _ZF = 1;
    if (_ZF)
    {
      swift_bridgeObjectRelease();
      return;
    }
    if (one-time initialization token for _logisticRegression != -1)
      swift_once();
    v6 = specialized Sequence<>.max()(v4);
    if ((v6 & 0x100000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v7 = v6;
      v8 = specialized Sequence<>.min()(v4);
      swift_bridgeObjectRelease();
      if ((v8 & 0x100000000) == 0)
      {
        __asm { FMOV            V1.2S, #1.0 }
        *(float32x2_t *)v13.i8 = vsub_f32(_D1, (float32x2_t)__PAIR64__(v8, v7));
        *(float *)&v13.i32[2] = -a3;
        v13.i32[3] = 0;
        LogisticRegression3.predictProbability(_:)(v13);
        return;
      }
    }
    __break(1u);
  }
}

uint64_t specialized static JointTransform.overrideUnsupervisedUnifiedConfidences(_:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  int v5;

  v2 = *a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v4 = *(_QWORD *)(v2 + 16);
    if (v4)
      goto LABEL_3;
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v2);
  v2 = result;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
    goto LABEL_9;
LABEL_3:
  if (v4 < 6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v5 = *(_DWORD *)(v2 + 32);
  *(_DWORD *)(v2 + 752) = v5;
  if (v4 < 0xB)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *(_DWORD *)(v2 + 1472) = v5;
  if (v4 < 0x10)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *(_DWORD *)(v2 + 2192) = v5;
  if (v4 >= 0x15)
  {
    *(_DWORD *)(v2 + 2912) = v5;
    *a1 = v2;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type JointTransformPB and conformance JointTransformPB()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type JointTransformPB and conformance JointTransformPB;
  if (!lazy protocol witness table cache variable for type JointTransformPB and conformance JointTransformPB)
  {
    v1 = type metadata accessor for JointTransformPB(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for JointTransformPB, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransformPB and conformance JointTransformPB);
  }
  return result;
}

uint64_t initializeWithCopy for JointTransform(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JointTransform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

__n128 __swift_memcpy144_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for JointTransform(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for JointTransform(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JointTransform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for JointTransform()
{
  return &type metadata for JointTransform;
}

uint64_t outlined assign with take of TransformMatrixPB?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransformMatrixPB?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

Swift::String __swiftcall MonoThumbIndexTapPipeline.getModelName(_:)(HandsKitConfig *a1)
{
  NSString *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v1 = -[HandsKitConfig MonoThumbIndexTapModel](a1, sel_MonoThumbIndexTapModel);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5 = v2;
  v6 = v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t MonoThumbIndexTapPipeline.saveResults(hand:modelOutput:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v26)(_BYTE *, uint64_t, uint64_t);
  char *v27;
  _BYTE *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _BYTE v33[4];
  int v34;
  _BYTE *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v35 = &v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = &v33[-v8];
  v10 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v14 = &v33[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = &v33[-v17];
  v19 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v37 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19, v20);
  v22 = &v33[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = *a2;
  v34 = *((_DWORD *)a2 + 5);
  v36 = *((unsigned __int8 *)a2 + 24);
  UnknownStorage.init()();
  v38 = v19;
  v24 = (uint64_t)&v22[*(int *)(v19 + 20)];
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v25(v24, 1, 1, v10);
  outlined init with copy of RawThumbIndexTapFeaturesPB?(v24, (uint64_t)v9);
  v26 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48);
  if (v26(v9, 1, v10) == 1)
  {
    *v18 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    UnknownStorage.init()();
    v27 = (char *)v18 + *(int *)(v10 + 24);
    *(_DWORD *)v27 = 0;
    v27[4] = 1;
    outlined destroy of Coordinate3DPB?((uint64_t)v9, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v9, (uint64_t)v18, type metadata accessor for RawThumbIndexTapFeaturesPB);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  *v18 = v23;
  outlined destroy of Coordinate3DPB?(v24, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  outlined init with take of Matrix2dPB((uint64_t)v18, v24, type metadata accessor for RawThumbIndexTapFeaturesPB);
  v25(v24, 0, 1, v10);
  if ((v36 & 1) == 0)
  {
    v28 = v35;
    outlined init with copy of RawThumbIndexTapFeaturesPB?(v24, (uint64_t)v35);
    if (v26(v28, 1, v10) == 1)
    {
      *v14 = MEMORY[0x24BEE4AF8];
      UnknownStorage.init()();
      v29 = (char *)v14 + *(int *)(v10 + 24);
      *(_DWORD *)v29 = 0;
      v29[4] = 1;
      outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB((uint64_t)v28, (uint64_t)v14, type metadata accessor for RawThumbIndexTapFeaturesPB);
    }
    v30 = (char *)v14 + *(int *)(v10 + 24);
    *(_DWORD *)v30 = v34;
    v30[4] = 0;
    outlined destroy of Coordinate3DPB?(v24, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    outlined init with take of Matrix2dPB((uint64_t)v14, v24, type metadata accessor for RawThumbIndexTapFeaturesPB);
    v25(v24, 0, 1, v10);
  }
  v31 = v39 + *(int *)(type metadata accessor for HandDescriptor() + 68);
  outlined destroy of Coordinate3DPB?(v31, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  outlined init with take of Matrix2dPB((uint64_t)v22, v31, type metadata accessor for ThumbIndexTapFeaturesPB);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v31, 0, 1, v38);
}

uint64_t type metadata accessor for MonoThumbIndexTapPipeline()
{
  return objc_opt_self();
}

uint64_t outlined init with copy of RawThumbIndexTapFeaturesPB?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *specialized static MonoThumbIndexTapPipeline.getInstance(config:)(void *a1)
{
  id v2;
  Swift::String v3;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;

  if (objc_msgSend(a1, sel_UseMonoActionModel))
  {
    v2 = objc_msgSend(a1, sel_MonoThumbIndexTapModel);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v3 = String.lowercased()();
    if (v3._countAndFlagsBits == 0x6F72687473736170 && v3._object == (void *)0xEB00000000686775)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
    {
      type metadata accessor for MonoPinchModelInference();
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_BYTE *)(v7 + 32) = 0;
      v8 = a1;
      objc_msgSend(0, sel_resetAllBuffers);
      *(_QWORD *)(v7 + 24) = 0;
      *(_BYTE *)(v7 + 32) = objc_msgSend(v8, sel_UseMonoUnsure);

      type metadata accessor for MonoThumbIndexTapPipeline();
      swift_allocObject();
      v6 = specialized PinchPipeline.init(config:inference:)(v8, v7);

      swift_release();
      return v6;
    }
  }
  return 0;
}

id @nonobjc NSFileHandle.__allocating_init(forWritingTo:)(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  id v9;
  uint64_t v10;
  id v12;
  NSURL *v13;

  v13 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v13);
  v3 = v2;
  v12 = 0;
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForWritingToURL_error_, v2, &v12);

  v5 = v12;
  if (v4)
  {
    v6 = type metadata accessor for URL();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v8 = v5;
    v7(a1, v6);
  }
  else
  {
    v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

uint64_t FileWritter.deleteFile()(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  id v12;
  Swift::String v14;
  id v15;
  void *v16;
  Swift::String v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a1, sel_closeFile);
  v5 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v6 = (void *)MEMORY[0x2426372E8](a2, a3);
  v7 = objc_msgSend(v5, sel_fileExistsAtPath_, v6);

  if (v7
    && (v8 = (void *)MEMORY[0x2426372E8](a2, a3),
        v9 = objc_msgSend(v5, sel_isDeletableFileAtPath_, v8),
        v8,
        v9))
  {
    v10 = (void *)MEMORY[0x2426372E8](a2, a3);
    v21 = 0;
    v11 = objc_msgSend(v5, sel_removeItemAtPath_error_, v10, &v21);

    if (v11)
    {
      v12 = v21;

      return 1;
    }
    v15 = v21;
    v16 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v21 = (id)0xD00000000000001ALL;
    v22 = 0x800000023D9C8ED0;
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = a2;
    v17._object = a3;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v18 = xmmword_23D9AC550;
    v19 = 0;
    v20 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v18, 0xD00000000000006ALL, 0x800000023D9C8D70, 43, (uint64_t)&v21, MEMORY[0x24BEE4AF8]);

  }
  else
  {
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v21 = (id)0xD00000000000001ALL;
    v22 = 0x800000023D9C8ED0;
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = a2;
    v14._object = a3;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v18 = xmmword_23D9AC550;
    v19 = 0;
    v20 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v18, 0xD00000000000006ALL, 0x800000023D9C8D70, 48, (uint64_t)&v21, MEMORY[0x24BEE4AF8]);

  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v21);
  return 0;
}

uint64_t HandyLoggerFileSinkNeo.__allocating_init(withPath:jsonFormat:)(uint64_t a1, uint64_t a2, int a3)
{
  swift_allocObject();
  return HandyLoggerFileSinkNeo.init(withPath:jsonFormat:)(a1, a2, a3);
}

uint64_t HandyLoggerFileSinkNeo.init(withPath:jsonFormat:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  char v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  void *v45;
  Swift::String v46;
  _QWORD v48[2];
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  int v51;
  id aBlock;
  unint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  uint64_t (*v56)();
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = v3;
  v51 = a3;
  v61 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v7, v8);
  v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v9, v10);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v12 = *(_QWORD *)(v11 - 8);
  v50 = v11;
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = a2;
  v48[1] = type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v16 = *MEMORY[0x24BEE5758];
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v49(v15, v16, v11);
  static DispatchQoS.unspecified.getter();
  aBlock = (id)MEMORY[0x24BEE4AF8];
  v48[0] = lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(_QWORD *)(v4 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v49(v15, v16, v50);
  static DispatchQoS.unspecified.getter();
  aBlock = (id)MEMORY[0x24BEE4AF8];
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(_QWORD *)(v4 + 104) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  *(_QWORD *)(v4 + 64) = v17;
  v18 = v17;
  v19 = (void *)MEMORY[0x2426372E8](0xD000000000000018, 0x800000023D9C8D50);
  objc_msgSend(v18, sel_setDateFormat_, v19);

  v20 = 0;
  v21 = v51;
  *(_BYTE *)(v4 + 80) = v51;
  if ((v21 & 1) != 0)
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    v20 = JSONEncoder.init()();
  }
  *(_QWORD *)(v4 + 72) = v20;
  v22 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v23 = *(_QWORD *)(v4 + 40);
  v24 = *(_QWORD *)(v4 + 48);
  swift_bridgeObjectRetain();
  v25 = (void *)MEMORY[0x2426372E8](v23, v24);
  swift_bridgeObjectRelease();
  LOBYTE(v24) = objc_msgSend(v22, sel_fileExistsAtPath_, v25);

  if ((v24 & 1) == 0)
  {
    v26 = *(_QWORD *)(v4 + 40);
    v27 = *(_QWORD *)(v4 + 48);
    swift_bridgeObjectRetain();
    v28 = (void *)MEMORY[0x2426372E8](v26, v27);
    swift_bridgeObjectRelease();
    aBlock = 0;
    LODWORD(v27) = objc_msgSend(v22, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v28, 1, 0, &aBlock);

    if (!(_DWORD)v27)
    {
      v42 = aBlock;
      v43 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      aBlock = 0;
      v53 = 0xE000000000000000;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      aBlock = (id)0xD000000000000022;
      v53 = 0x800000023D9C8DE0;
      v44 = *(_QWORD *)(v4 + 40);
      v45 = *(void **)(v4 + 48);
      swift_bridgeObjectRetain();
      v46._countAndFlagsBits = v44;
      v46._object = v45;
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v55 = (void *)MEMORY[0x24BEE0D00];
      type metadata accessor for HandyLoggerNeo();
      v58 = xmmword_23D9AC550;
      v59 = 0;
      v60 = 0;
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v58, 0xD00000000000006ALL, 0x800000023D9C8D70, 106, (uint64_t)&aBlock, MEMORY[0x24BEE4AF8]);

      __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
      outlined consume of FileWritter?(*(void **)(v4 + 16));
      swift_bridgeObjectRelease();

      swift_release();
      type metadata accessor for HandyLoggerFileSinkNeo();
      swift_deallocPartialClassInstance();
      return 0;
    }
    v29 = aBlock;
  }
  *(_QWORD *)(v4 + 96) = 0;
  v30 = *(NSObject **)(v4 + 104);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = partial apply for closure #1 in HandyLoggerFileSinkNeo.init(withPath:jsonFormat:);
  *(_QWORD *)(v31 + 24) = v4;
  v56 = _sIg_Ieg_TRTA_0;
  v57 = v31;
  aBlock = (id)MEMORY[0x24BDAC760];
  v53 = 1107296256;
  v54 = thunk for @escaping @callee_guaranteed () -> ();
  v55 = &block_descriptor_4;
  v32 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v30, v32);
  _Block_release(v32);
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v30 & 1) != 0)
    __break(1u);
  v33 = HandyLoggerFileSinkNeo.generateLogFilePath()();
  v35 = specialized FileWritter.init(withPath:)(v33, v34);
  v37 = v36;
  v39 = v38;

  v40 = *(void **)(v4 + 16);
  *(_QWORD *)(v4 + 16) = v35;
  *(_QWORD *)(v4 + 24) = v37;
  *(_QWORD *)(v4 + 32) = v39;
  outlined consume of FileWritter?(v40);
  v41 = *(_QWORD *)(v4 + 16);
  swift_release();
  if (!v41)
  {
    swift_release();
    return 0;
  }
  return v4;
}

uint64_t HandyLoggerFileSinkNeo.deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    objc_msgSend(v1, sel_closeFile);
    v1 = *(void **)(v0 + 16);
  }
  outlined consume of FileWritter?(v1);
  swift_bridgeObjectRelease();

  swift_release();
  return v0;
}

uint64_t HandyLoggerFileSinkNeo.__deallocating_deinit()
{
  HandyLoggerFileSinkNeo.deinit();
  return swift_deallocClassInstance();
}

void HandyLoggerFileSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  specialized HandyLoggerFileSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(a1, a2, a4, a5, a6, a7, a8, a9);
}

void closure #1 in HandyLoggerFileSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(BOOL *a1@<X8>)
{
  void *v1;

  lazy protocol witness table accessor for type Data and conformance Data();
  NSFileHandle.write<A>(contentsOf:)();
  if (v1)

  *a1 = v1 != 0;
}

Swift::Void __swiftcall HandyLoggerFileSinkNeo.flush()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  OS_dispatch_queue.sync<A>(execute:)();
}

void closure #1 in HandyLoggerFileSinkNeo.flush()(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  void *v3;

  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    outlined copy of FileWritter?(*(void **)(a1 + 16));
    objc_msgSend(v3, sel_synchronizeFile);
    swift_bridgeObjectRelease();

  }
  *a2 = v3 == 0;
}

Swift::Void __swiftcall HandyLoggerFileSinkNeo.clearLogs()()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];

  v1 = *(_QWORD *)(v0 + 96);
  v2 = __CFADD__(v1, 1);
  v3 = v1 + 1;
  if (v2)
  {
    __break(1u);
    goto LABEL_5;
  }
  *(_QWORD *)(v0 + 96) = v3;
  v4 = *(NSObject **)(v0 + 56);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in HandyLoggerFileSinkNeo.clearLogs();
  *(_QWORD *)(v5 + 24) = v0;
  v7[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v7[5] = v5;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_7;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v6);
  _Block_release(v6);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v4 & 1) != 0)
LABEL_5:
    __break(1u);
}

void *closure #1 in HandyLoggerFileSinkNeo.clearLogs()(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v3 = *(void **)(a1 + 32);
    outlined copy of FileWritter?(*(void **)(a1 + 16));
    FileWritter.deleteFile()(v2, v4, v3);
    swift_bridgeObjectRelease();

  }
  v5 = HandyLoggerFileSinkNeo.generateLogFilePath()();
  v7 = specialized FileWritter.init(withPath:)(v5, v6);
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  return outlined consume of FileWritter?(v8);
}

uint64_t HandyLoggerFileSinkNeo.generateLogFilePath()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  Class isa;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v1 = v0;
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v31 - v9;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11, v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  v16 = *(void **)(v0 + 64);
  static Date.now.getter();
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v18 = objc_msgSend(v16, sel_stringFromDate_, isa);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  swift_bridgeObjectRelease();
  v33 = v19;
  v34 = v21;
  v22._countAndFlagsBits = 0x636E6174736E695FLL;
  v22._object = (void *)0xEA00000000005F65;
  String.append(_:)(v22);
  v32 = *(_QWORD *)(v1 + 88);
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x746E656D6765735FLL;
  v24._object = (void *)0xE90000000000005FLL;
  String.append(_:)(v24);
  v32 = *(_QWORD *)(v1 + 96);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v1 + 80) == 1)
  {
    v26 = 0xE900000000000074;
    v27 = 0x78742E6E6F736A5FLL;
  }
  else
  {
    v27 = 1954051118;
    v26 = 0xE400000000000000;
  }
  String.append(_:)(*(Swift::String *)&v27);
  URL.init(fileURLWithPath:)();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v28 = *(void (**)(char *, uint64_t))(v3 + 8);
  v28(v6, v2);
  v29 = URL.path.getter();
  v28(v10, v2);
  return v29;
}

void *outlined consume of FileWritter?(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for HandyLoggerFileSinkNeo()
{
  return objc_opt_self();
}

void partial apply for closure #1 in HandyLoggerFileSinkNeo.init(withPath:jsonFormat:)()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = static HandyLoggerFileSinkNeo._classInstanceID;
  *(_QWORD *)(v0 + 88) = static HandyLoggerFileSinkNeo._classInstanceID;
  v2 = __CFADD__(v1, 1);
  v3 = v1 + 1;
  if (v2)
    __break(1u);
  else
    static HandyLoggerFileSinkNeo._classInstanceID = v3;
}

uint64_t sub_23D743128()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t specialized HandyLoggerFileSinkNeo.getLogAsJson(dateTime:level:logArea:file:line:msg:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  Class isa;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  void *v39;
  void *v40;
  _QWORD v41[2];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v44 = a1;
  v45 = a8;
  v43 = a6;
  v47 = a10;
  v46 = a9;
  v51 = *MEMORY[0x24BDAC8D0];
  v15 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v15, v16);
  v41[1] = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *a5;
  v18 = *((_QWORD *)a5 + 2);
  v19 = *((_QWORD *)a5 + 3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A96F0;
  *(_QWORD *)(inited + 32) = 0x6C6576654C676F6CLL;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v21 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = a3;
  *(_QWORD *)(inited + 56) = a4;
  *(_QWORD *)(inited + 72) = v21;
  *(_QWORD *)(inited + 80) = 0x61657241676F6CLL;
  *(_QWORD *)(inited + 88) = 0xE700000000000000;
  v48 = v42;
  v49 = v18;
  v50 = v19;
  swift_bridgeObjectRetain();
  *(_QWORD *)(inited + 96) = LogArea.description.getter();
  *(_QWORD *)(inited + 104) = v22;
  *(_QWORD *)(inited + 120) = v21;
  *(_QWORD *)(inited + 128) = 0x68746150656C6966;
  v23 = v43;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  *(_QWORD *)(inited + 144) = v23;
  *(_QWORD *)(inited + 152) = a7;
  *(_QWORD *)(inited + 168) = v21;
  *(_QWORD *)(inited + 176) = 0x6D754E656E696CLL;
  v24 = MEMORY[0x24BEE1768];
  v25 = v45;
  *(_QWORD *)(inited + 184) = 0xE700000000000000;
  *(_QWORD *)(inited + 192) = v25;
  *(_QWORD *)(inited + 216) = v24;
  *(_QWORD *)(inited + 224) = 0x6D617453656D6974;
  *(_QWORD *)(inited + 232) = 0xE900000000000070;
  *(_QWORD *)(inited + 240) = v44;
  *(_QWORD *)(inited + 248) = a2;
  *(_QWORD *)(inited + 264) = v21;
  *(_QWORD *)(inited + 272) = 0x6567617373656DLL;
  *(_QWORD *)(inited + 312) = v21;
  v26 = v46;
  v27 = v47;
  *(_QWORD *)(inited + 280) = 0xE700000000000000;
  *(_QWORD *)(inited + 288) = v26;
  *(_QWORD *)(inited + 296) = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v28 = (void *)objc_opt_self();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v48 = 0;
  v30 = objc_msgSend(v28, sel_dataWithJSONObject_options_error_, isa, 0, &v48);

  v31 = (id)v48;
  if (v30)
  {
    v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

    static String.Encoding.utf8.getter();
    v35 = String.init(data:encoding:)();
    if (v36)
    {
      *(_QWORD *)&v48 = v35;
      *((_QWORD *)&v48 + 1) = v36;
      v37._countAndFlagsBits = 10;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      outlined consume of Data._Representation(v32, v34);
      return v48;
    }
    outlined consume of Data._Representation(v32, v34);
  }
  else
  {
    v39 = v31;
    v40 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return 0;
}

uint64_t specialized HandyLoggerFileSinkNeo.getLogAsText(dateTime:level:logArea:file:line:msg:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10)
{
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;

  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 58;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16._countAndFlagsBits = a3;
  v16._object = a4;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 58;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = a6;
  v18._object = a7;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 58;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 58;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = LogArea.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 58;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24._object = a10;
  v24._countAndFlagsBits = a9;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 10;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  return a1;
}

void specialized HandyLoggerFileSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(int a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  Class isa;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  id v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t DynamicType;
  void *v75;
  _QWORD v76[3];
  uint64_t v77;
  void *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[32];

  v9 = v8;
  v69 = a6;
  v72 = a4;
  v73 = a5;
  v71 = a3;
  v70 = a1;
  v68 = type metadata accessor for String.Encoding();
  v67 = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8](v68, v13);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for JSONEncodingOptions();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16, v18);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(void **)(v9 + 16);
  if (v21)
  {
    v64 = *(_OWORD *)a2;
    v65 = *(_QWORD *)(a2 + 16);
    v66 = *(_QWORD *)(a2 + 24);
    v22 = *(_QWORD *)(v9 + 32);
    v62 = *(_QWORD *)(v9 + 24);
    outlined init with copy of Any(a7, (uint64_t)v82);
    v23 = v21;
    swift_bridgeObjectRetain();
    if (swift_dynamicCast())
    {
      v24 = (void *)*((_QWORD *)&v79 + 1);
      v25 = v79;
      v26 = *(_QWORD *)(a8 + 16);
      v63 = v23;
      v27 = v22;
      if (v26)
      {
        swift_bridgeObjectRetain();
        v25 = String.init(format:_:)();
        v29 = v28;
        swift_bridgeObjectRelease();
        v24 = v29;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message);
      if (!swift_dynamicCast())
      {
        swift_bridgeObjectRelease();

        __swift_destroy_boxed_opaque_existential_0((uint64_t)v82);
        return;
      }
      v63 = v23;
      v27 = v22;
      outlined init with take of PinchCancellationModule(&v79, (uint64_t)v76);
      __swift_project_boxed_opaque_existential_1(v76, v77);
      DynamicType = swift_getDynamicType();
      v75 = v78;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message.Type);
      v60 = String.init<A>(describing:)();
      v61 = v30;
      v31 = v77;
      v32 = v78;
      __swift_project_boxed_opaque_existential_1(v76, v77);
      default argument 0 of Message.jsonString(options:)(v31, v32);
      v33 = Message.jsonString(options:)();
      v35 = v34;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
      DynamicType = v60;
      v75 = v61;
      v36._countAndFlagsBits = 58;
      v36._object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      v37._countAndFlagsBits = v33;
      v37._object = v35;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v25 = DynamicType;
      v24 = v75;
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v76);
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v82);
    v38 = *(void **)(v9 + 64);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v40 = objc_msgSend(v38, sel_stringFromDate_, isa);

    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

    v44 = *(unsigned __int8 *)(v9 + 80);
    v46 = HandyLoggerLogLevel.description.getter(v70);
    if (v44 == 1)
    {
      v79 = v64;
      v80 = v65;
      v81 = v66;
      specialized HandyLoggerFileSinkNeo.getLogAsJson(dateTime:level:logArea:file:line:msg:)(v41, v43, v46, (uint64_t)v45, &v79, v71, (uint64_t)v72, v73, v25, (uint64_t)v24);
      v48 = v47;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v48)
        goto LABEL_13;
    }
    else
    {
      v79 = v64;
      v80 = v65;
      v81 = v66;
      specialized HandyLoggerFileSinkNeo.getLogAsText(dateTime:level:logArea:file:line:msg:)(v41, v43, v46, v45, (uint64_t)&v79, v71, v72, v73, v25, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v49 = v68;
    v50 = v67;
    static String.Encoding.utf8.getter();
    v51 = String.data(using:allowLossyConversion:)();
    v53 = v52;
    swift_bridgeObjectRelease();
    v54 = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v15, v49);
    if (v53 >> 60 == 15)
    {
LABEL_13:
      swift_bridgeObjectRelease();

      return;
    }
    MEMORY[0x24BDAC7A8](v54, v55);
    v56 = v63;
    v57 = v62;
    *(&v59 - 6) = (uint64_t)v63;
    *(&v59 - 5) = v57;
    *(&v59 - 4) = v27;
    *(&v59 - 3) = v51;
    v58 = v53;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_bridgeObjectRelease();

    outlined consume of Data?(v51, v53);
  }
}

id specialized FileWritter.init(withPath:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  Swift::String v12;
  id v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v9 = (void *)MEMORY[0x2426372E8](a1, a2);
  objc_msgSend(v8, sel_createFileAtPath_contents_attributes_, v9, 0, 0);

  v10 = (void *)MEMORY[0x2426372E8](a1, a2);
  v11 = objc_msgSend(v8, sel_isWritableFileAtPath_, v10);

  if ((v11 & 1) != 0)
  {
    type metadata accessor for NSDictionary(0, &lazy cache variable for type metadata for NSFileHandle);
    URL.init(fileURLWithPath:)();
    v13 = @nonobjc NSFileHandle.__allocating_init(forWritingTo:)((uint64_t)v7);
    objc_msgSend(v13, sel_seekToEndOfFile);

  }
  else
  {
    v19 = 0;
    v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v19 = 0xD000000000000026;
    v20 = 0x800000023D9C8EF0;
    v12._countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v21 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v16 = xmmword_23D9AC550;
    v17 = 0;
    v18 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v16, 0xD00000000000006ALL, 0x800000023D9C8D70, 21, (uint64_t)&v19, MEMORY[0x24BEE4AF8]);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v19);
    return 0;
  }
  return v13;
}

void partial apply for closure #1 in HandyLoggerFileSinkNeo.flush()(BOOL *a1@<X8>)
{
  uint64_t v1;

  closure #1 in HandyLoggerFileSinkNeo.flush()(v1, a1);
}

void *partial apply for closure #1 in HandyLoggerFileSinkNeo.clearLogs()()
{
  uint64_t v0;

  return closure #1 in HandyLoggerFileSinkNeo.clearLogs()(v0);
}

uint64_t sub_23D743E80()
{
  return swift_deallocObject();
}

uint64_t method lookup function for HandyLoggerFileSinkNeo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HandyLoggerFileSinkNeo.__allocating_init(withPath:jsonFormat:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of HandyLoggerFileSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of HandyLoggerFileSinkNeo.flush()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of HandyLoggerFileSinkNeo.clearLogs()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t destroy for FileWritter(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for FileWritter(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FileWritter(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FileWritter(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FileWritter(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FileWritter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for FileWritter()
{
  return &unk_250E3A6D8;
}

void *outlined copy of FileWritter?(void *result)
{
  id v1;

  if (result)
  {
    v1 = result;
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

void partial apply for closure #1 in HandyLoggerFileSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(BOOL *a1@<X8>)
{
  closure #1 in HandyLoggerFileSinkNeo.sink(atLevel:withLogArea:privacy:inFile:onLine:atTime:message:withArgs:)(a1);
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x242638C74](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t UberPoseActionPipeline.State.getPreviousHand(_:forAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v3 = v2;
  v51 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v49 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v47 - v10;
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v47 - v14;
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (char *)&v47 - v18;
  v20 = type metadata accessor for HandDescriptor();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20, v22);
  v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v47 - v27;
  MEMORY[0x24BDAC7A8](v29, v30);
  v32 = (char *)&v47 - v31;
  outlined init with copy of HandDescriptor?(a1, (uint64_t)v19);
  v50 = v21;
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v34 = &unk_256CD4000;
  if (v33(v19, 1, v20) == 1)
  {
    outlined destroy of HandDescriptor?((uint64_t)v19);
LABEL_3:
    v35 = v51;
    v36 = v3 + v34[289];
    swift_beginAccess();
    return outlined init with copy of HandDescriptor?(v36, v35);
  }
  outlined init with take of HandDescriptor((uint64_t)v19, (uint64_t)v32);
  v48 = v3;
  v38 = v3 + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_prevHand;
  swift_beginAccess();
  outlined init with copy of HandDescriptor?(v38, (uint64_t)v15);
  v39 = v33(v15, 1, v20);
  outlined destroy of HandDescriptor?((uint64_t)v15);
  outlined init with copy of HandDescriptor((uint64_t)v32, (uint64_t)v28);
  if (v39 != 1)
  {
    outlined init with copy of HandDescriptor?(v38, (uint64_t)v11);
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v11, 1, v20);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v40 = *((_QWORD *)v11 + 18);
      v41 = *((_QWORD *)v28 + 18);
      outlined destroy of HandDescriptor((uint64_t)v28);
      outlined destroy of HandDescriptor((uint64_t)v11);
      outlined init with copy of HandDescriptor((uint64_t)v32, (uint64_t)v24);
      if (v40 != v41)
        goto LABEL_11;
      v42 = v49;
      outlined init with copy of HandDescriptor?(v38, v49);
      v43 = v20;
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v33)(v42, 1, v20);
      if ((_DWORD)result != 1)
      {
        v44 = *(unsigned __int8 *)(v42 + 136);
        v45 = v24[136];
        outlined destroy of HandDescriptor((uint64_t)v24);
        outlined destroy of HandDescriptor(v42);
        v3 = v48;
        v34 = (_QWORD *)&unk_256CD4000;
        if (v44 == v45)
        {
          outlined destroy of HandDescriptor((uint64_t)v32);
          goto LABEL_3;
        }
        goto LABEL_12;
      }
    }
    __break(1u);
    return result;
  }
  outlined destroy of HandDescriptor((uint64_t)v28);
  outlined init with copy of HandDescriptor((uint64_t)v32, (uint64_t)v24);
LABEL_11:
  v43 = v20;
  outlined destroy of HandDescriptor((uint64_t)v24);
LABEL_12:
  v56 = xmmword_23D9A6CC0;
  v57 = 0;
  v58 = 0;
  v53 = 0;
  v54 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v53 = 0xD000000000000012;
  v54 = 0x800000023D9C93B0;
  v52 = *((_QWORD *)v32 + 18);
  v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v55 = MEMORY[0x24BEE0D00];
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000066, 0x800000023D9C9040, 31, (uint64_t *)&v56, (uint64_t)&v53, MEMORY[0x24BEE4AF8]);
  outlined destroy of HandDescriptor((uint64_t)v32);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v53);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v51, 1, 1, v43);
}

uint64_t UberPoseActionPipeline.State.setPreviousHand(_:frame:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26[10];
  uint64_t v27;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (uint64_t *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)v26 - v9;
  outlined init with copy of HandDescriptor?(a1, (uint64_t)v6);
  v11 = type metadata accessor for HandDescriptor();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v6, 1, v11);
  v27 = v1;
  if (v13 == 1)
  {
    outlined destroy of HandDescriptor?((uint64_t)v6);
  }
  else
  {
    v26[0] = a1;
    v15 = v6[2];
    v14 = v6[3];
    v16 = v6[4];
    v17 = v6[5];
    v18 = v6[6];
    v19 = v6[7];
    v20 = v6[8];
    v21 = v6[9];
    v22 = v6[10];
    v23 = v6[16];
    v26[1] = v6[11];
    v26[2] = v22;
    v26[8] = v16;
    v26[9] = v14;
    v26[6] = v18;
    v26[7] = v17;
    v26[4] = v20;
    v26[5] = v19;
    v26[3] = v21;
    outlined copy of HandPose?(v15);
    outlined destroy of HandDescriptor((uint64_t)v6);
    if (v15)
    {
      outlined consume of HandPose?(v15);
      if ((v23 & 1) != 0)
      {
        outlined init with copy of HandDescriptor?(v26[0], (uint64_t)v10);
        goto LABEL_6;
      }
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
LABEL_6:
  v24 = v27 + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_prevHand;
  swift_beginAccess();
  outlined assign with take of HandDescriptor?((uint64_t)v10, v24);
  return swift_endAccess();
}

Swift::Void __swiftcall UberPoseActionPipeline.State.reconfig(_:)(HandsKitConfig *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  float v4;
  float v5;
  char v6;
  int v7;
  char v8;
  NSArray *v9;
  uint64_t v10;
  int64_t v11;
  void **v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  char v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  _OWORD v23[2];
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  swift_retain();
  GeometricPoseFilter.reconfig(_:)(a1);
  swift_release();
  -[HandsKitConfig RigidTransformJointVisibilityThreshold](a1, sel_RigidTransformJointVisibilityThreshold);
  v5 = v4;
  v6 = -[HandsKitConfig PerformJointAngleValidation](a1, sel_PerformJointAngleValidation);
  v7 = -[HandsKitConfig AllowedNumberOfInvalidJointAngles](a1, sel_AllowedNumberOfInvalidJointAngles);
  v8 = -[HandsKitConfig EnableCoreAnalytics](a1, sel_EnableCoreAnalytics);
  type metadata accessor for HandPoseBuilder();
  swift_allocObject();
  v2[3] = HandPoseBuilder.init(_:_:_:_:)(v6, v7, v8, v5);
  swift_release();
  v9 = -[HandsKitConfig GTInjections](a1, sel_GTInjections);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v27 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v12 = (void **)(v10 + 40);
    do
    {
      v13 = (uint64_t)*(v12 - 1);
      v14 = *v12;
      swift_bridgeObjectRetain();
      v15._countAndFlagsBits = v13;
      v15._object = v14;
      switch(_findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UberPoseActionPipeline.State.reconfig(_:), v15))
      {
        case 0:
          goto LABEL_6;
        case 1:
          swift_bridgeObjectRelease();
          v16 = 1;
          break;
        case 2:
          swift_bridgeObjectRelease();
          v16 = 2;
          break;
        case 3:
          swift_bridgeObjectRelease();
          v16 = 3;
          break;
        default:
          v24 = 0;
          v25 = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          swift_bridgeObjectRelease();
          v24 = 0xD00000000000001DLL;
          v25 = 0x800000023D9C9390;
          v17._countAndFlagsBits = v13;
          v17._object = v14;
          String.append(_:)(v17);
          v26 = MEMORY[0x24BEE0D00];
          type metadata accessor for HandyLoggerNeo();
          memset(v23, 0, sizeof(v23));
          static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v23, 0xD000000000000066, 0x800000023D9C9040, 49, (uint64_t)&v24, MEMORY[0x24BEE4AF8]);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)&v24);
LABEL_6:
          swift_bridgeObjectRelease();
          v16 = 0;
          break;
      }
      v18 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v27;
      }
      v20 = *(_QWORD *)(v18 + 16);
      v19 = *(_QWORD *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v18 = v27;
      }
      v12 += 2;
      *(_QWORD *)(v18 + 16) = v20 + 1;
      *(_BYTE *)(v18 + v20 + 32) = v16;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x24BEE4AF8];
  }
  v21 = specialized Set.init<A>(_:)(v18);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_gtInjections) = v21;
  swift_bridgeObjectRelease();
  v22 = -[HandsKitConfig EnableCameraPairTransitionCorrection](a1, sel_EnableCameraPairTransitionCorrection);
  *((_BYTE *)v2 + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_enableCameraPairTransitionCorrection) = v22;
  (*(void (**)(void))(*v2 + 272))();
}

Swift::Void __swiftcall UberPoseActionPipeline.State.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = *(void **)(v6 + 16);
  *(_QWORD *)(v6 + 16) = 0;
  swift_retain();

  v8 = type metadata accessor for HandDescriptor();
  v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v5, 1, 1, v8);
  v10 = v6 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__prevHand;
  swift_beginAccess();
  outlined assign with take of HandDescriptor?((uint64_t)v5, v10);
  swift_endAccess();
  swift_release();
  swift_retain();
  HandPoseBuilder.reset()();
  swift_release();
  v9(v5, 1, 1, v8);
  v11 = v1 + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_prevHand;
  swift_beginAccess();
  outlined assign with take of HandDescriptor?((uint64_t)v5, v11);
  swift_endAccess();
}

uint64_t UberPoseActionPipeline.State.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined destroy of HandDescriptor?(v0 + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_prevHand);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall UberPoseActionPipeline.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  NSString *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  _QWORD v29[4];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = -[HandsKitConfig UberPoseModel](a1, sel_UberPoseModel);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  UberPoseActionPipeline.initializePosePipeline(_:_:)((uint64_t)a1, v5, v7);
  swift_bridgeObjectRelease();
  swift_retain();
  UberPoseActionPipeline.State.reconfig(_:)(a1);
  swift_release();
  v8 = *(_QWORD *)(v2 + 16);
  if (!v8)
    return;
  v9 = *(_QWORD *)(v8 + 128);
  if (!v9)
    return;
  if ((*(_BYTE *)(v2 + 64) & 1) != 0)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 208);
    if ((v10 & 0x8000000000000000) != 0 || HIDWORD(v10))
      goto LABEL_22;
    if (v10 >> 30)
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    v11 = (4 * v10);
    v12 = objc_allocWithZone((Class)FeatureFifo);
    swift_retain();
    swift_retain();
    v13 = objc_msgSend(v12, sel_initWithFifoDepth_withBufSize_, 7, v11);
    v14 = *(void **)(v2 + 32);
    *(_QWORD *)(v2 + 32) = v13;

  }
  v30 = xmmword_23D9A6CC0;
  v31 = 0;
  v32 = 0;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v29[0] = 0xD000000000000014;
  v29[1] = 0x800000023D9C9370;
  if (*(_BYTE *)(v2 + 64))
    v15 = 0x796C6E6F2DLL;
  else
    v15 = 0x6E6F69746361;
  if (*(_BYTE *)(v2 + 64))
    v16 = 0xE500000000000000;
  else
    v16 = 0xE600000000000000;
  v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x203A6C65646F6D20;
  v18._object = (void *)0xE800000000000000;
  String.append(_:)(v18);
  v19 = -[HandsKitConfig UberPoseModel](a1, sel_UberPoseModel);
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 8250;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  if (!*(_QWORD *)(v8 + 120))
    goto LABEL_21;
  swift_retain();
  v25 = ModelParams.contents()();
  swift_release();
  if (*(_QWORD *)(v8 + 128))
  {
    swift_retain();
    v26 = ModelParams.contents()();
    swift_release();
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = 10;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 46;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  v29[3] = MEMORY[0x24BEE0D00];
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000066, 0x800000023D9C9040, 93, (uint64_t *)&v30, (uint64_t)v29, MEMORY[0x24BEE4AF8]);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
}

uint64_t UberPoseActionPipeline.initializePosePipeline(_:_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  id v10;
  uint64_t v11;
  id v12;

  v4 = v3;
  v5 = (void *)result;
  v6 = *(_QWORD *)(v3 + 16);
  if (!v6)
    goto LABEL_9;
  v7 = *(_QWORD *)(v6 + 120);
  if (!v7)
  {
    __break(1u);
    return result;
  }
  result = *(_QWORD *)(v7 + 16);
  if (result != a2 || *(_QWORD *)(v7 + 24) != a3)
  {
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0)
    {
LABEL_9:
      v9 = *(_BYTE *)(v3 + 64);
      v10 = v5;
      v11 = specialized UberModelParams.__allocating_init(config:isPoseOnly:)(v10, v9);

      *(_QWORD *)(v3 + 16) = v11;
      swift_retain();
      swift_release();
      v12 = static UberPoseActionPipeline.createModel(modelParams:)(v11);
      swift_release();
      *(_QWORD *)(v4 + 24) = v12;
      return swift_release();
    }
  }
  return result;
}

id static UberPoseActionPipeline.createModel(modelParams:)(uint64_t a1)
{
  uint64_t ObjCClassFromMetadata;
  id result;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v4 = *(_QWORD *)(a1 + 120);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = *(void **)(v4 + 40);
    v7 = result;
    swift_bridgeObjectRetain();
    v8 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of UberModelParams.directBindInputNames());
    swift_arrayDestroy();
    v9 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #1 of UberModelParams.directBindInputNames());
    swift_arrayDestroy();
    v10 = specialized Set.union<A>(_:)(v9, v8);
    specialized E5RTRegressor.__allocating_init(bundle:modelPath:directBindInputNames:directBindOutputNames:configName:)(v7, v5, v6, v10, MEMORY[0x24BEE4B08], 1852399981, 0xE400000000000000);
    v12 = v11;

    return (id)v12;
  }
  else
  {
    __break(1u);
    __break(1u);
    __break(1u);
  }
  return result;
}

void UberPoseActionPipeline.run(forHand:withHandsKitData:ps_handle:)(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, _QWORD);
  uint64_t v34;
  void *v35;
  void *v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  _QWORD *v39;
  int v40;
  __int32 v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, _OWORD *);
  uint64_t v62;
  char *v63;
  char *v64;
  __int32 v65;
  char *v66;
  void (*v67)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[35];
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD v80[35];

  v5 = v4;
  v71 = a3;
  v75 = a4;
  v74 = type metadata accessor for HandDescriptor();
  v8 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74, v9);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v72 = (uint64_t)&v62 - v14;
  MEMORY[0x24BDAC7A8](v15, v16);
  v73 = (uint64_t)&v62 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v70 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v62 - v23;
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v62 - v27;
  memcpy(v80, a2, 0x228uLL);
  if (!*(_QWORD *)(a1 + 200) || (v29 = v5[2]) == 0)
  {
    lazy protocol witness table accessor for type StereoPoseDetectorModelError and conformance StereoPoseDetectorModelError();
    v42 = (void *)swift_allocError();
    *(_QWORD *)v43 = 1;
    *(_QWORD *)(v43 + 8) = 0;
    *(_QWORD *)(v43 + 16) = 0;
    *(_QWORD *)(v43 + 24) = 0;
    *(_BYTE *)(v43 + 32) = 3;
    swift_willThrow();
    *(_QWORD *)&v76[0] = 0;
    *((_QWORD *)&v76[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    v55._object = (void *)0x800000023D9C90B0;
    v55._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v55);
    *(_QWORD *)&v77 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    v56._countAndFlagsBits = 46;
    v56._object = (void *)0xE100000000000000;
    String.append(_:)(v56);
    *((_QWORD *)&v76[1] + 1) = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v77 = xmmword_23D9A6CC0;
    v79 = 0;
    v78 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v77, 0xD000000000000066, 0x800000023D9C9040, 198, (uint64_t)v76, MEMORY[0x24BEE4AF8]);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)v76);
    outlined init with copy of HandDescriptor(a1, v75);
    return;
  }
  swift_retain();
  specialized ImageVariantModelParams.hasImageWidthChanged(_:)();
  if ((v30 & 1) != 0)
  {
    if (!*(_QWORD *)(v29 + 120))
    {
      __break(1u);
      return;
    }
    swift_retain();
    ModelParams.configure()();
    swift_release();
    if (*(_QWORD *)(v29 + 128))
    {
      swift_retain();
      ModelParams.configure()();
      swift_release();
    }
    v5[3] = static UberPoseActionPipeline.createModel(modelParams:)(v29);
    swift_release();
  }
  v69 = v29;
  v31 = v5[7];
  outlined init with copy of HandDescriptor(a1, (uint64_t)v24);
  v32 = v74;
  v67 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56);
  v67(v24, 0, 1, v74);
  v33 = *(void (**)(char *, _QWORD))(*(_QWORD *)v31 + 248);
  swift_retain();
  v33(v24, 0);
  v34 = v32;
  swift_release();
  outlined destroy of HandDescriptor?((uint64_t)v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v28, 1, v32) == 1)
  {
    v35 = (void *)v5[4];
    if (v35)
      objc_msgSend(v35, sel_resetAllBuffers);
    v36 = (void *)v5[6];
    v5[6] = 0;

    v37 = *(void (**)(uint64_t))(*(_QWORD *)v5[7] + 272);
    v38 = swift_retain();
    v37(v38);
    swift_release();
    v34 = v74;
  }
  v39 = v5;
  v40 = *(unsigned __int8 *)(a1 + 136);
  v68 = v39;
  LODWORD(v39) = *(unsigned __int8 *)(v39[7]
                                    + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_enableCameraPairTransitionCorrection);
  v66 = v11;
  v64 = v24;
  if ((_DWORD)v39 == 1)
  {
    outlined init with copy of HandDescriptor(a1, (uint64_t)v24);
    v67(v24, 0, 1, v34);
    v41 = specialized static CameraPairTransition.determineState(_:_:)((uint64_t)v24, (uint64_t)v28);
    outlined destroy of HandDescriptor?((uint64_t)v24);
  }
  else
  {
    v41 = 0;
  }
  v44 = v69;
  v65 = v41;
  memcpy(v76, v80, 0x228uLL);
  v45 = v41;
  v46 = v68;
  UberPoseActionPipeline.handleCameraTransition(_:_:_:_:_:_:)(a1, (uint64_t)v28, (uint64_t)v76, v45, v69, v73);
  Hands_trace_CBridge_0();
  memcpy(v76, v80, 0x228uLL);
  v71 = a1;
  UberPoseActionPipeline.setInputs(forHand:withPrevHand:withHandsKitData:withModelParams:)(a1, (uint64_t)v28, v76, v44, v72);
  v63 = v28;
  Hands_trace_CBridge_0();
  Hands_trace_CBridge_0();
  if (v46[3])
  {
    swift_retain();
    specialized E5RTRegressor.runNetwork(_:)();
    v47 = (uint64_t)v70;
    swift_release();
    v48 = v73;
  }
  else
  {
    v48 = v73;
    v47 = (uint64_t)v70;
  }
  v49 = (uint64_t)v63;
  Hands_trace_CBridge_0();
  Hands_trace_CBridge_0();
  memcpy(v76, v80, 0x228uLL);
  outlined init with copy of HandDescriptor(v48, v47);
  LODWORD(v71) = v40;
  v50 = v74;
  v51 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v67;
  v67((char *)v47, 0, 1, v74);
  v52 = (uint64_t)v66;
  v53 = v49;
  v54 = v68;
  UberPoseActionPipeline.getOutputs(forHand:withPrevHand:withHandsKitData:withModelParams:generateAlternatePose:withCameraTransition:withAlternateCamerasHand:)(v72, v53, (uint64_t)v76, v69, 0, v65, v47, (uint64_t)v66);
  outlined destroy of HandDescriptor?(v47);
  Hands_trace_CBridge_0();
  v57 = v54[7];
  v58 = v52;
  v59 = v52;
  v60 = (uint64_t)v64;
  outlined init with copy of HandDescriptor(v59, (uint64_t)v64);
  v51(v60, 0, 1, v50);
  v76[4] = v80[25];
  v76[5] = v80[26];
  v76[6] = v80[27];
  *(_QWORD *)&v76[7] = *(_QWORD *)&v80[28];
  v76[0] = v80[21];
  v76[1] = v80[22];
  v76[2] = v80[23];
  v76[3] = v80[24];
  v61 = *(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v57 + 256);
  swift_retain();
  v61(v60, v76);
  swift_release();
  swift_release();
  outlined destroy of HandDescriptor?(v60);
  outlined destroy of HandDescriptor(v72);
  outlined destroy of HandDescriptor(v73);
  outlined destroy of HandDescriptor?((uint64_t)v63);
  outlined init with take of HandDescriptor(v58, v75);
}

void specialized ImageVariantModelParams.hasImageWidthChanged(_:)()
{
  __asm { BR              X9 }
}

{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 120))
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x23D7461B4);
}

uint64_t sub_23D745AB4()
{
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t UberPoseActionPipeline.handleCameraTransition(_:_:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[456];
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v60 = a5;
  v10 = a4;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v11, v12);
  v57 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v49 - v16;
  v18 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v18, v19);
  MEMORY[0x24BDAC7A8](v20, v21);
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)&v49 - v24;
  MEMORY[0x24BDAC7A8](v26, v27);
  if ((v10 - 1) > 1)
    return outlined init with copy of HandDescriptor(a1, a6);
  v58 = v31;
  v53 = v30;
  v54 = a1;
  v55 = (uint64_t)&v49 - v29;
  v56 = a6;
  v33 = *(_QWORD *)(a3 + 456);
  v34 = v28;
  v35 = v32;
  outlined init with copy of HandDescriptor(a1, (uint64_t)v25);
  outlined init with copy of HandDescriptor?(a2, (uint64_t)v17);
  v51 = v35;
  v52 = v34;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v17, 1, v34);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v37 = *((_QWORD *)v17 + 25);
    v38 = *((_QWORD *)v17 + 26);
    outlined copy of HandPose?(v37);
    outlined destroy of HandDescriptor((uint64_t)v17);
    outlined consume of HandPose?(*((_QWORD *)v25 + 25));
    *((_QWORD *)v25 + 25) = v37;
    *((_QWORD *)v25 + 26) = v38;
    Hands_trace_CBridge_0();
    memcpy(v61, (const void *)a3, sizeof(v61));
    v62 = v33;
    v39 = *(_OWORD *)(a3 + 512);
    v65 = *(_OWORD *)(a3 + 496);
    v66 = v39;
    v67 = *(_OWORD *)(a3 + 528);
    v68 = *(_QWORD *)(a3 + 544);
    v40 = *(_OWORD *)(a3 + 480);
    v63 = *(_OWORD *)(a3 + 464);
    v64 = v40;
    v41 = v59;
    UberPoseActionPipeline.setInputs(forHand:withPrevHand:withHandsKitData:withModelParams:)((uint64_t)v25, a2, v61, v60, v58);
    v49 = (const void *)a3;
    v50 = a2;
    Hands_trace_CBridge_0();
    Hands_trace_CBridge_0();
    if (*(_QWORD *)(v41 + 24))
    {
      swift_retain();
      specialized E5RTRegressor.runNetwork(_:)();
      swift_release();
    }
    Hands_trace_CBridge_0();
    Hands_trace_CBridge_0();
    memcpy(v61, v49, sizeof(v61));
    v62 = v33;
    v42 = *(_OWORD *)(a3 + 512);
    v65 = *(_OWORD *)(a3 + 496);
    v66 = v42;
    v67 = *(_OWORD *)(a3 + 528);
    v68 = *(_QWORD *)(a3 + 544);
    v43 = *(_OWORD *)(a3 + 480);
    v63 = *(_OWORD *)(a3 + 464);
    v64 = v43;
    v44 = (uint64_t)v57;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v57, 1, 1, v52);
    v45 = v53;
    v46 = v58;
    UberPoseActionPipeline.getOutputs(forHand:withPrevHand:withHandsKitData:withModelParams:generateAlternatePose:withCameraTransition:withAlternateCamerasHand:)(v58, v50, (uint64_t)v61, v60, 1, 0, v44, v53);
    outlined destroy of HandDescriptor?(v44);
    v47 = v45;
    v48 = v55;
    outlined init with take of HandDescriptor(v47, v55);
    Hands_trace_CBridge_0();
    outlined destroy of HandDescriptor(v46);
    outlined destroy of HandDescriptor((uint64_t)v25);
    return outlined init with take of HandDescriptor(v48, v56);
  }
  return result;
}

void *UberPoseActionPipeline.setInputs(forHand:withPrevHand:withHandsKitData:withModelParams:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *result;
  float32x2_t *v17;
  int v18;
  float32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[560];
  _BYTE v31[552];

  v28 = a2;
  v10 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v10, v11);
  v27 = (uint64_t)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v14);
  v26 = (uint64_t)&v26 - v15;
  result = memcpy(v31, a3, sizeof(v31));
  v17 = *(float32x2_t **)(a4 + 120);
  if (!v17)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v18 = v17[40].i8[0] & 1;
  type metadata accessor for PoseModelUtils();
  v19 = v17[13];
  memcpy(v30, a3, 0x228uLL);
  v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_gtInjections);
  swift_bridgeObjectRetain();
  static PoseModelUtils.preprocessInput(hand:olderHand:cropShape:handsKitData:gtInjections:xCanonicalization:rotateCrops:)(a1, v28, v30, v20, v18, 1, a5, v19);
  swift_bridgeObjectRelease();
  memcpy(v30, v31, 0x228uLL);
  v21 = v29;
  UberPoseActionPipeline.prepareCoverGlassMap(forHand:withHandsKitData:withModelParams:)(a5, (uint64_t)v30, a4);
  if (v21)
    return (void *)outlined destroy of HandDescriptor(a5);
  v22 = a4;
  memcpy(v30, v31, 0x228uLL);
  UberPoseActionPipeline.prepareRectifiedCropsInputs(forHand:withHandsKitData:withModelParams:)(a5, (uint64_t)v30, a4);
  outlined init with copy of HandDescriptor(a5, v27);
  result = memcpy(v30, v31, 0x228uLL);
  v23 = *(_QWORD *)(a4 + 120);
  if (!v23)
    goto LABEL_11;
  v24 = *(_QWORD *)(v5 + 24);
  if (!v24)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  type metadata accessor for PoseModelInference();
  v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_gtInjections);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static PoseModelInference.setPoseInputs(forHand:withHandsKitData:withPoseModel:gtInjections:)(v27, (uint64_t)v30, v23, v24, 0, 0, v25, v26);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of HandDescriptor(v27);
  outlined destroy of HandDescriptor(a5);
  outlined init with take of HandDescriptor(v26, a5);
  if ((*(_BYTE *)(v5 + 64) & 1) == 0)
  {
    memcpy(v30, v31, 0x228uLL);
    UberPoseActionPipeline.preparePinchInputs(forHand:withHandsKitData:withModelParams:)(a5, (uint64_t)v30, v22);
  }
  return (void *)UberPoseActionPipeline.finalizeInputs(withModelParams:)(v22);
}

uint64_t UberPoseActionPipeline.getOutputs(forHand:withPrevHand:withHandsKitData:withModelParams:generateAlternatePose:withCameraTransition:withAlternateCamerasHand:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, __int32 a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  void (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int16 *v101;
  __int16 *v102;
  uint64_t *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int32 v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE v133[336];
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  __int16 v143;
  char v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  __int16 v153;
  char v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _BYTE v168[336];
  __int16 v169;
  char v170;
  __int16 v171;
  char v172;

  v107 = a1;
  v109 = a7;
  v108 = a6;
  v110 = a5;
  v111 = a2;
  v11 = (uint64_t *)(a3 + 396);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v96 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v16);
  v97 = (char *)&v94 - v17;
  v18 = type metadata accessor for HandDescriptor();
  v99 = *(_QWORD *)(v18 - 8);
  v100 = v18;
  MEMORY[0x24BDAC7A8](v18, v19);
  v95 = (uint64_t)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v94 - v23;
  MEMORY[0x24BDAC7A8](v25, v26);
  v131 = (uint64_t)&v94 - v27;
  memcpy(v168, (const void *)a3, sizeof(v168));
  v28 = *(_QWORD *)(a3 + 336);
  v112 = *(_QWORD *)(a3 + 344);
  v29 = *(unsigned int *)(a3 + 352);
  v30 = *(unsigned int *)(a3 + 356);
  v31 = *(_QWORD *)(a3 + 360);
  v32 = *(_QWORD *)(a3 + 368);
  v33 = *(_QWORD *)(a3 + 376);
  v34 = *(_QWORD *)(a3 + 384);
  v35 = *(unsigned __int8 *)(a3 + 392);
  v171 = *(_WORD *)(a3 + 393);
  v172 = *(_BYTE *)(a3 + 395);
  v36 = *v11;
  v37 = *(_DWORD *)(a3 + 404);
  result = *(unsigned int *)(a3 + 408);
  v39 = v11[2];
  v40 = v11[3];
  v41 = v11[4];
  v42 = v11[5];
  v43 = *(unsigned __int8 *)(a3 + 444);
  v170 = *(_BYTE *)(a3 + 447);
  v169 = *(_WORD *)(a3 + 445);
  v44 = *(_QWORD *)(a3 + 448);
  v45 = *(_OWORD *)(a3 + 536);
  v166 = *(_OWORD *)(a3 + 520);
  v167 = v45;
  v46 = *(_OWORD *)(a3 + 504);
  v164 = *(_OWORD *)(a3 + 488);
  v165 = v46;
  v47 = *(_OWORD *)(a3 + 472);
  v162 = *(_OWORD *)(a3 + 456);
  v163 = v47;
  v98 = a4;
  v130 = *(_QWORD *)(a4 + 120);
  if (!v130)
  {
    __break(1u);
    goto LABEL_26;
  }
  v113 = v44;
  v114 = v43;
  v115 = v42;
  v116 = v41;
  v117 = v40;
  v118 = v39;
  v119 = result;
  v120 = v37;
  v121 = v36;
  v122 = v35;
  v123 = v34;
  v124 = v33;
  v125 = v32;
  v126 = v28;
  v127 = v30;
  v128 = v29;
  v129 = v31;
  v104 = v24;
  v105 = a8;
  v48 = *(_QWORD *)(v132 + 24);
  if (!v48)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  v49 = type metadata accessor for PoseModelInference();
  memcpy(v133, (const void *)a3, sizeof(v133));
  v134 = v126;
  v135 = v112;
  v136 = v128;
  v137 = v127;
  v138 = v129;
  v139 = v125;
  v140 = v124;
  v141 = v123;
  v142 = v122;
  v50 = *(_WORD *)(a3 + 393);
  v102 = &v143;
  v103 = &v145;
  v143 = v50;
  v144 = *(_BYTE *)(a3 + 395);
  v145 = v121;
  v146 = v120;
  v147 = v119;
  v148 = v118;
  v149 = v117;
  v150 = v116;
  v151 = v115;
  v152 = v114;
  v51 = *(_WORD *)(a3 + 445);
  v101 = &v153;
  v153 = v51;
  v154 = *(_BYTE *)(a3 + 447);
  v155 = v113;
  v52 = *(_OWORD *)(a3 + 504);
  v158 = *(_OWORD *)(a3 + 488);
  v159 = v52;
  v53 = *(_OWORD *)(a3 + 536);
  v160 = *(_OWORD *)(a3 + 520);
  v161 = v53;
  v54 = *(_OWORD *)(a3 + 472);
  v156 = *(_OWORD *)(a3 + 456);
  v157 = v54;
  v55 = *(_QWORD *)(v132 + 56);
  v57 = *(_QWORD *)(v55 + 16);
  v56 = *(_QWORD *)(v55 + 24);
  v58 = *(_QWORD *)(v55 + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_gtInjections);
  swift_retain_n();
  v59 = v130;
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v60 = v110;
  v61 = v109;
  v109 = v49;
  static PoseModelInference.processHandPose(forHand:withPrevHand:withCameraTransition:withAlternateCamerasHand:withHandsKitData:withPoseModel:handPoseBuilder:geometricFilter:gtInjections:generateAlternatePose:)(v107, v111, v108, v61, v133, v59, v48, 0, v131, 0, MEMORY[0x24BEE4AF8], v56, v57, v58, v110 & 1);
  swift_release();
  v62 = v48;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v60 & 1) != 0)
  {
    v63 = v131;
    v64 = *(void **)(v132 + 32);
    if (v64)
    {
      v65 = *(unsigned int *)(v132 + 40);
      v66 = *(unsigned int *)(v132 + 44);
      v67 = v64;
      objc_msgSend(v67, sel_resetHeadToIndex_andDepth_, v65, v66);

    }
    swift_release();
    swift_release();
    v68 = v63;
    return outlined init with take of HandDescriptor(v68, v105);
  }
  v69 = v132;
  memcpy(v133, v168, sizeof(v133));
  v134 = v126;
  v70 = v112;
  v135 = v112;
  v136 = v128;
  v137 = v127;
  v138 = v129;
  v139 = v125;
  v140 = v124;
  v141 = v123;
  v142 = v122;
  v71 = v103;
  *v102 = v171;
  v144 = v172;
  *v71 = v121;
  v146 = v120;
  v147 = v119;
  v72 = v117;
  v71[2] = v118;
  v71[3] = v72;
  v73 = v115;
  v71[4] = v116;
  v71[5] = v73;
  v152 = v114;
  *v101 = v169;
  v154 = v170;
  v155 = v113;
  v160 = v166;
  v161 = v167;
  v158 = v164;
  v159 = v165;
  v156 = v162;
  v157 = v163;
  v74 = v130;
  swift_retain();
  swift_retain();
  v75 = (uint64_t)v104;
  v76 = v106;
  static PoseModelInference.postProcessOutputs(forHand:withPrevHand:withHandsKitData:withPoseModel:)(v131, v111, v74, v62, (uint64_t)v104);
  if (v76)
  {
    outlined destroy of HandDescriptor(v131);
    swift_release_n();
    return swift_release_n();
  }
  swift_release();
  swift_release();
  if (*(_BYTE *)(v69 + 64) == 1)
  {
    outlined destroy of HandDescriptor(v131);
    swift_release();
    swift_release();
    v68 = v75;
    return outlined init with take of HandDescriptor(v68, v105);
  }
  v111 = v62;
  v77 = v75 + *(int *)(v100 + 100);
  v78 = *(_QWORD *)v77;
  if (*(_BYTE *)(v77 + 8) == 1)
  {
    if (v78 >= 3)
      goto LABEL_15;
LABEL_22:
    memcpy(v133, v168, sizeof(v133));
    v134 = v126;
    v135 = v70;
    v136 = v128;
    v137 = v127;
    v138 = v129;
    v139 = v125;
    v140 = v124;
    v141 = v123;
    v142 = v122;
    v143 = v171;
    v144 = v172;
    *v71 = v121;
    v146 = v120;
    v147 = v119;
    v91 = v117;
    v71[2] = v118;
    v71[3] = v91;
    v92 = v115;
    v71[4] = v116;
    v71[5] = v92;
    v152 = v114;
    v153 = v169;
    v154 = v170;
    v155 = v113;
    v160 = v166;
    v161 = v167;
    v158 = v164;
    v159 = v165;
    v156 = v162;
    v157 = v163;
    UberPoseActionPipeline.postProcessPinchOutputs(forHand:withHandsKitData:withModelParams:withTimestamp:)(v75, v98, v105);
    swift_release();
    swift_release();
LABEL_24:
    outlined destroy of HandDescriptor(v75);
    return outlined destroy of HandDescriptor(v131);
  }
  if (v78 != 3)
    goto LABEL_22;
LABEL_15:
  v79 = *(void **)(v69 + 32);
  if (v79)
    objc_msgSend(v79, sel_resetHeadToIndex_andDepth_, *(unsigned int *)(v69 + 40), *(unsigned int *)(v69 + 44));
  v80 = *(_QWORD *)(v69 + 56);
  v81 = v100;
  v82 = (uint64_t)v96;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v96, 1, 1, v100);
  v83 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v80 + 248);
  swift_retain();
  v84 = (uint64_t)v97;
  v83(v82, 1);
  swift_release();
  outlined destroy of HandDescriptor?(v82);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v84, 1, v81) != 1)
  {
    v93 = v95;
    outlined init with take of HandDescriptor(v84, v95);
    type metadata accessor for PinchHelper();
    static PinchHelper.copyActionResultToHand(from:to:)(v93, v75, v105);
    swift_release();
    swift_release();
    outlined destroy of HandDescriptor(v93);
    goto LABEL_24;
  }
  outlined destroy of HandDescriptor?(v84);
  v85 = *(void **)(v69 + 32);
  v86 = v131;
  if (v85)
    objc_msgSend(v85, sel_resetAllBuffers);
  v87 = *(void **)(v69 + 48);
  *(_QWORD *)(v69 + 48) = 0;

  v88 = *(void (**)(uint64_t))(**(_QWORD **)(v69 + 56) + 272);
  v89 = swift_retain();
  v88(v89);
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of HandDescriptor(v86);
  v90 = v105;
  outlined init with copy of HandDescriptor(v75, v105);
  *(_BYTE *)(v90 + 4) = 0;
  *(_BYTE *)(v90 + 137) = 0;
  return outlined destroy of HandDescriptor(v75);
}

uint64_t UberPoseActionPipeline.prepareCoverGlassMap(forHand:withHandsKitData:withModelParams:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  void *v42;
  __CVBuffer *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  void *v52;
  IOSurfaceRef IOSurface;
  __IOSurface *v54;
  Swift::String v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  void *v59;
  IOSurfaceRef v60;
  Swift::String v61;
  uint64_t v62;
  __CVBuffer *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[4];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __CVBuffer *v93;

  v4 = *(_QWORD *)(a3 + 120);
  if (v4 && *(_BYTE *)(v4 + 112) == 1)
  {
    v5 = *(_QWORD *)(result + 200);
    if (!v5 || *(_QWORD *)(v5 + 16) != 2)
      goto LABEL_24;
    v6 = 16;
    v7 = *(_BYTE *)(result + 136) ? 0 : 16;
    if (!*(_BYTE *)(result + 136))
      v6 = 0;
    if (*(_QWORD *)(v3 + 24) && (v8 = *(_QWORD *)(a2 + 200), *(_QWORD *)(v8 + 16)))
    {
      v9 = v5 + 32;
      v10 = v9 + v7;
      v11 = *(_QWORD *)v10;
      v12 = *(_BYTE *)(v10 + 8);
      v13 = v9 + v6;
      v14 = *(_QWORD *)v13;
      v15 = *(_BYTE *)(v13 + 8);
      swift_retain();
      swift_retain();
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
      if ((v17 & 1) != 0)
      {
        v18 = (__int128 *)(*(_QWORD *)(v8 + 56) + 192 * v16);
        v19 = *v18;
        v20 = v18[1];
        v21 = v18[3];
        v83 = v18[2];
        v84 = v21;
        v82 = v20;
        v22 = v18[4];
        v23 = v18[5];
        v24 = v18[7];
        v87 = v18[6];
        v88 = v24;
        v85 = v22;
        v86 = v23;
        v25 = v18[8];
        v26 = v18[9];
        v27 = v18[11];
        v91 = v18[10];
        v92 = v27;
        v89 = v25;
        v90 = v26;
        v81 = v19;
        if (*(_QWORD *)(v8 + 16))
        {
          outlined retain of ImageData((uint64_t)&v81);
          v28 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
          if ((v29 & 1) != 0)
          {
            v30 = (__int128 *)(*(_QWORD *)(v8 + 56) + 192 * v28);
            v32 = v30[2];
            v31 = v30[3];
            v33 = v30[1];
            v69 = *v30;
            v70 = v33;
            v71 = v32;
            v72 = v31;
            v34 = v30[4];
            v35 = v30[5];
            v36 = v30[7];
            v75 = v30[6];
            v76 = v36;
            v73 = v34;
            v74 = v35;
            v37 = v30[8];
            v38 = v30[9];
            v39 = v30[11];
            v79 = v30[10];
            v80 = v39;
            v77 = v37;
            v78 = v38;
            v40 = v85;
            swift_beginAccess();
            v41 = *(void **)(v40 + 136);
            if (v41)
            {
              swift_beginAccess();
              v42 = *(void **)(v73 + 136);
              if (v42)
              {
                outlined retain of ImageData((uint64_t)&v69);
                v93 = v41;
                v43 = v42;
                Hands_trace_CBridge_0();
                v44 = *(_QWORD *)(v4 + 56);
                if (*(_QWORD *)(v44 + 16))
                {
                  swift_bridgeObjectRetain();
                  v45 = specialized __RawDictionaryStorage.find<A>(_:)(19);
                  if ((v46 & 1) == 0)
                  {
LABEL_41:
                    swift_bridgeObjectRelease();
                    __break(1u);
LABEL_42:
                    result = swift_bridgeObjectRelease();
                    __break(1u);
                    return result;
                  }
                  v47 = *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v45);
                  swift_retain();
                  swift_bridgeObjectRelease();
                  v48 = *(_QWORD *)(v4 + 56);
                  if (*(_QWORD *)(v48 + 16))
                  {
                    swift_bridgeObjectRetain();
                    v49 = specialized __RawDictionaryStorage.find<A>(_:)(20);
                    if ((v50 & 1) != 0)
                    {
                      v64 = *(_QWORD *)(*(_QWORD *)(v48 + 56) + 8 * v49);
                      swift_retain();
                      swift_bridgeObjectRelease();
                      v51 = *(_QWORD *)(v47 + 16);
                      v52 = *(void **)(v47 + 24);
                      swift_bridgeObjectRetain();
                      IOSurface = CVPixelBufferGetIOSurface(v93);
                      v63 = v43;
                      if (IOSurface)
                      {
                        v54 = IOSurface;
                        v55._countAndFlagsBits = v51;
                        v55._object = v52;
                        E5RTRegressor.setInput(_:fromIOSurface:)(v55, v54);
                        if (v56)
                        {
LABEL_34:

                          swift_release();
                          swift_release();
                          swift_bridgeObjectRelease();

LABEL_38:
                          outlined release of ImageData((uint64_t)&v69);
                          outlined release of ImageData((uint64_t)&v81);
                          swift_release();
                          return swift_release();
                        }
                        swift_bridgeObjectRelease();

                        v43 = v63;
                      }
                      else
                      {
                        swift_bridgeObjectRelease();
                      }
                      v58 = *(_QWORD *)(v64 + 16);
                      v59 = *(void **)(v64 + 24);
                      swift_bridgeObjectRetain();
                      v60 = CVPixelBufferGetIOSurface(v43);
                      if (v60)
                      {
                        v54 = v60;
                        v61._countAndFlagsBits = v58;
                        v61._object = v59;
                        E5RTRegressor.setInput(_:fromIOSurface:)(v61, v54);
                        if (v62)
                          goto LABEL_34;
                        swift_bridgeObjectRelease();

                        v43 = v63;
                      }
                      else
                      {
                        swift_bridgeObjectRelease();
                      }
                      Hands_trace_CBridge_0();

                      swift_release();
                      swift_release();
                      goto LABEL_38;
                    }
                    goto LABEL_42;
                  }
                }
                else
                {
                  __break(1u);
                }
                __break(1u);
                goto LABEL_41;
              }
            }
            v68[3] = MEMORY[0x24BEE0D00];
            v68[0] = 0xD000000000000020;
            v68[1] = 0x800000023D9C9240;
            type metadata accessor for HandyLoggerNeo();
            v65 = xmmword_23D9A6CC0;
            v66 = 0;
            v67 = 0;
            outlined retain of ImageData((uint64_t)&v69);
            static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v65, 0xD000000000000066, 0x800000023D9C9040, 351, (uint64_t)v68, MEMORY[0x24BEE4AF8]);
            swift_release();
            swift_release();
            outlined release of ImageData((uint64_t)&v69);
            outlined release of ImageData((uint64_t)&v81);
            v57 = (__int128 *)v68;
            return __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
          }
          outlined release of ImageData((uint64_t)&v81);
        }
      }
      swift_release();
    }
    else
    {
LABEL_24:
      swift_retain();
    }
    *((_QWORD *)&v82 + 1) = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v81 = 0xD00000000000001FLL;
    *((_QWORD *)&v81 + 1) = 0x800000023D9C9220;
    type metadata accessor for HandyLoggerNeo();
    v69 = xmmword_23D9A6CC0;
    v70 = 0uLL;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v69, 0xD000000000000066, 0x800000023D9C9040, 345, (uint64_t)&v81, MEMORY[0x24BEE4AF8]);
    swift_release();
    v57 = &v81;
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v57);
  }
  return result;
}

uint64_t UberPoseActionPipeline.prepareRectifiedCropsInputs(forHand:withHandsKitData:withModelParams:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int32x4_t *v33;
  uint64_t v34;
  char v35;
  float32x4_t *v36;
  uint64_t v37;
  char v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  _OWORD *v51;
  uint64_t v52;
  char v53;
  float32x4_t *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  __CVBuffer *v65;
  IOSurfaceRef IOSurface;
  __IOSurface *v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  void *v72;
  IOSurfaceRef v73;
  Swift::String v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  id v129;
  int32x4_t v130;
  simd_float3x3 v131;
  float32x4_t v132;
  float32x4_t v133;
  __int128 v134;
  __int128 v135;
  int32x4_t v136;
  __int128 v137;
  simd_float3x3 v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  char v156;
  float32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  simd_float3x3 v187;
  simd_float3x3 v188;

  v5 = v4;
  v186 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a3 + 120);
  if (!v6)
    goto LABEL_35;
  v8 = *(_QWORD *)(a1 + 200);
  if (!v8 || *(_QWORD *)(v8 + 16) != 2)
    goto LABEL_35;
  v9 = 16;
  v10 = *(_BYTE *)(a1 + 136) ? 0 : 16;
  if (!*(_BYTE *)(a1 + 136))
    v9 = 0;
  if (!*(_QWORD *)(v3 + 24))
    goto LABEL_35;
  v11 = *(_QWORD *)(a2 + 200);
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_35;
  v12 = v8 + 32;
  v13 = v12 + v10;
  v14 = *(_QWORD *)v13;
  v15 = *(_BYTE *)(v13 + 8);
  v16 = v12 + v9;
  v17 = *(_QWORD *)v16;
  v156 = *(_BYTE *)(v16 + 8);
  swift_retain();
  swift_retain();
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
  if ((v19 & 1) == 0)
  {
    swift_release();
LABEL_34:
    swift_release();
LABEL_35:
    *((_QWORD *)&v175 + 1) = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v174 = 0xD000000000000024;
    *((_QWORD *)&v174 + 1) = 0x800000023D9C91F0;
    type metadata accessor for HandyLoggerNeo();
    v162 = xmmword_23D9A6CC0;
    v163 = 0uLL;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v162, 0xD000000000000066, 0x800000023D9C9040, 377, (uint64_t)&v174, MEMORY[0x24BEE4AF8]);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v174);
  }
  v20 = (__int128 *)(*(_QWORD *)(v11 + 56) + 192 * v18);
  v22 = v20[2];
  v21 = v20[3];
  v23 = v20[1];
  v174 = *v20;
  v175 = v23;
  v176 = v22;
  v177 = v21;
  v24 = v20[4];
  v25 = v20[5];
  v26 = v20[7];
  v180 = v20[6];
  v181 = v26;
  v178 = v24;
  v179 = v25;
  v27 = v20[8];
  v28 = v20[9];
  v29 = v20[11];
  v184 = v20[10];
  v185 = v29;
  v182 = v27;
  v183 = v28;
  v30 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for HandDescriptor() + 92));
  if (!*(_QWORD *)(v30 + 16))
  {
LABEL_33:
    swift_release();
    goto LABEL_34;
  }
  outlined retain of ImageData((uint64_t)&v174);
  v31 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
  if ((v32 & 1) == 0)
    goto LABEL_32;
  if (!*(_QWORD *)(v30 + 16))
    goto LABEL_32;
  v33 = (int32x4_t *)(*(_QWORD *)(v30 + 56) + 176 * v31);
  v148 = v33[3];
  v153 = v33[2];
  v143 = v33[4];
  v34 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
  if ((v35 & 1) == 0)
    goto LABEL_32;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_32;
  v36 = (float32x4_t *)(*(_QWORD *)(v30 + 56) + 176 * v34);
  v139 = v36[5];
  v140 = v36[6];
  v141 = v36[7];
  v37 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v156);
  if ((v38 & 1) == 0)
    goto LABEL_32;
  v39 = (__int128 *)(*(_QWORD *)(v11 + 56) + 192 * v37);
  v40 = *v39;
  v41 = v39[1];
  v42 = v39[3];
  v164 = v39[2];
  v165 = v42;
  v163 = v41;
  v43 = v39[4];
  v44 = v39[5];
  v45 = v39[7];
  v168 = v39[6];
  v169 = v45;
  v166 = v43;
  v167 = v44;
  v46 = v39[8];
  v47 = v39[9];
  v48 = v39[11];
  v172 = v39[10];
  v173 = v48;
  v170 = v46;
  v171 = v47;
  v162 = v40;
  if (!*(_QWORD *)(v30 + 16))
  {
LABEL_32:
    outlined release of ImageData((uint64_t)&v174);
    goto LABEL_33;
  }
  outlined retain of ImageData((uint64_t)&v162);
  v49 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v156);
  if ((v50 & 1) == 0
    || !*(_QWORD *)(v30 + 16)
    || (v51 = (_OWORD *)(*(_QWORD *)(v30 + 56) + 176 * v49),
        v135 = v51[3],
        v137 = v51[2],
        v134 = v51[4],
        v52 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v156),
        (v53 & 1) == 0))
  {
    outlined release of ImageData((uint64_t)&v162);
    goto LABEL_32;
  }
  v54 = (float32x4_t *)(*(_QWORD *)(v30 + 56) + 176 * v52);
  v132 = v54[5];
  v133 = v54[6];
  v157 = v54[7];
  Hands_trace_CBridge_0();
  v55 = *(_QWORD *)(v6 + 56);
  if (!*(_QWORD *)(v55 + 16))
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  swift_bridgeObjectRetain();
  v56 = specialized __RawDictionaryStorage.find<A>(_:)(3);
  if ((v57 & 1) == 0)
  {
LABEL_68:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_69;
  }
  v58 = *(_QWORD *)(*(_QWORD *)(v55 + 56) + 8 * v56);
  swift_retain();
  swift_bridgeObjectRelease();
  v59 = *(_QWORD *)(v6 + 56);
  if (!*(_QWORD *)(v59 + 16))
    goto LABEL_61;
  swift_bridgeObjectRetain();
  v60 = specialized __RawDictionaryStorage.find<A>(_:)(7);
  if ((v61 & 1) == 0)
  {
LABEL_69:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_70;
  }
  v62 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v60);
  swift_retain();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v177 + 1))
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  v63 = *(_QWORD *)(v58 + 16);
  v64 = *(void **)(v58 + 24);
  v65 = (__CVBuffer *)*((id *)&v177 + 1);
  swift_bridgeObjectRetain();
  IOSurface = CVPixelBufferGetIOSurface(v65);
  if (IOSurface)
  {
    v67 = IOSurface;
    v68._countAndFlagsBits = v63;
    v68._object = v64;
    E5RTRegressor.setInput(_:fromIOSurface:)(v68, v67);
    v5 = v69;
    if (v69)
    {
LABEL_40:
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();

LABEL_48:
      outlined release of ImageData((uint64_t)&v162);
      outlined release of ImageData((uint64_t)&v174);
      swift_release();
      return swift_release();
    }
    swift_bridgeObjectRelease();

    v65 = v67;
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  if (!*((_QWORD *)&v165 + 1))
    goto LABEL_71;
  v71 = *(_QWORD *)(v62 + 16);
  v72 = *(void **)(v62 + 24);
  v65 = (__CVBuffer *)*((id *)&v165 + 1);
  swift_bridgeObjectRetain();
  v73 = CVPixelBufferGetIOSurface(v65);
  if (v73)
  {
    v67 = v73;
    v74._countAndFlagsBits = v71;
    v74._object = v72;
    E5RTRegressor.setInput(_:fromIOSurface:)(v74, v67);
    v5 = v75;
    if (v75)
      goto LABEL_40;
    swift_bridgeObjectRelease();

    v65 = v67;
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  Hands_trace_CBridge_0();
  Hands_trace_CBridge_0();
  v76 = (void *)objc_opt_self();
  objc_msgSend(v76, sel_shiftIntrinsics_, *(double *)v153.i64, *(double *)v148.i64, *(double *)v143.i64);
  v131 = __invert_f3(v187);
  v77 = v178;
  swift_beginAccess();
  v130 = *(int32x4_t *)(v77 + 112);
  swift_beginAccess();
  v129 = v76;
  objc_msgSend(v76, sel_shiftIntrinsics_, *(double *)(v77 + 64), *(double *)(v77 + 80), *(double *)(v77 + 96));
  v144 = v78;
  v149 = v79;
  v154 = v80;
  v81 = *(_QWORD *)(v6 + 56);
  if (!*(_QWORD *)(v81 + 16))
    goto LABEL_62;
  swift_bridgeObjectRetain();
  v82 = specialized __RawDictionaryStorage.find<A>(_:)(4);
  if ((v83 & 1) == 0)
  {
LABEL_72:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_73;
  }
  v84 = *(_QWORD *)(*(_QWORD *)(v81 + 56) + 8 * v82);
  swift_retain();
  swift_bridgeObjectRelease();
  v85 = vzip1q_s32(v144, v154);
  v86 = vzip1q_s32(v149, (int32x4_t)0);
  v87 = vzip1q_s32(v85, v86);
  v88 = vzip2q_s32(v85, v86);
  v87.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v154, 0).i32[2];
  v89 = vzip1q_s32(vdupq_laneq_s32(v144, 2), vdupq_laneq_s32(v149, 2));
  v88.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v154, 1).i32[2];
  v89.i32[2] = v154.i32[2];
  v159 = v87;
  v160 = v88;
  v161 = v89;
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v84 + 16), *(void **)(v84 + 24), v159.i8, 16, 12, 3, *(_QWORD *)(v84 + 32), *(_QWORD *)(v84 + 40));
  if (v5)
  {
    swift_release();
    swift_release();
LABEL_47:
    swift_release();
    goto LABEL_48;
  }
  v90 = *(_QWORD *)(v6 + 56);
  if (!*(_QWORD *)(v90 + 16))
    goto LABEL_63;
  swift_bridgeObjectRetain();
  v91 = specialized __RawDictionaryStorage.find<A>(_:)(5);
  if ((v92 & 1) == 0)
  {
LABEL_73:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_74;
  }
  v155 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v139, v131.columns[0].f32[0]), v140, *(float32x2_t *)v131.columns[0].f32, 1), v141, (float32x4_t)v131.columns[0], 2);
  v145 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v139, v131.columns[2].f32[0]), v140, *(float32x2_t *)v131.columns[2].f32, 1), v141, (float32x4_t)v131.columns[2], 2);
  v150 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v139, v131.columns[1].f32[0]), v140, *(float32x2_t *)v131.columns[1].f32, 1), v141, (float32x4_t)v131.columns[1], 2);
  v93 = *(_QWORD *)(*(_QWORD *)(v90 + 56) + 8 * v91);
  swift_retain();
  swift_bridgeObjectRelease();
  v94 = vzip1q_s32(v155, v145);
  v95 = vzip1q_s32(v150, (int32x4_t)0);
  v96 = vzip1q_s32(v94, v95);
  v97 = vzip2q_s32(v94, v95);
  v96.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v145, 0).i32[2];
  v98 = vzip1q_s32(vdupq_laneq_s32(v155, 2), vdupq_laneq_s32(v150, 2));
  v97.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v145, 1).i32[2];
  v98.i32[2] = v145.i32[2];
  v159 = v96;
  v160 = v97;
  v161 = v98;
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v93 + 16), *(void **)(v93 + 24), v159.i8, 16, 12, 3, *(_QWORD *)(v93 + 32), *(_QWORD *)(v93 + 40));
  v99 = *(_QWORD *)(v6 + 56);
  if (!*(_QWORD *)(v99 + 16))
    goto LABEL_64;
  swift_bridgeObjectRetain();
  v100 = specialized __RawDictionaryStorage.find<A>(_:)(6);
  if ((v101 & 1) == 0)
  {
LABEL_74:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_75;
  }
  v102 = *(_QWORD *)(*(_QWORD *)(v99 + 56) + 8 * v100);
  swift_retain();
  swift_bridgeObjectRelease();
  v159 = v130;
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v102 + 16), *(void **)(v102 + 24), v159.i8, 16, 16, 1, *(_QWORD *)(v102 + 32), *(_QWORD *)(v102 + 40));
  objc_msgSend(v129, sel_shiftIntrinsics_, *(double *)&v137, *(double *)&v135, *(double *)&v134);
  v138 = __invert_f3(v188);
  v103 = v166;
  swift_beginAccess();
  v136 = *(int32x4_t *)(v103 + 112);
  swift_beginAccess();
  objc_msgSend(v129, sel_shiftIntrinsics_, *(double *)(v103 + 64), *(double *)(v103 + 80), *(double *)(v103 + 96));
  v142 = v104;
  v146 = v105;
  v151 = v106;
  v107 = *(_QWORD *)(v6 + 56);
  if (!*(_QWORD *)(v107 + 16))
    goto LABEL_65;
  swift_bridgeObjectRetain();
  v108 = specialized __RawDictionaryStorage.find<A>(_:)(8);
  if ((v109 & 1) == 0)
  {
LABEL_75:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_76;
  }
  v110 = *(_QWORD *)(*(_QWORD *)(v107 + 56) + 8 * v108);
  swift_retain();
  swift_bridgeObjectRelease();
  v111 = vzip1q_s32(v142, v151);
  v112 = vzip1q_s32(v146, (int32x4_t)0);
  v113 = vzip1q_s32(v111, v112);
  v114 = vzip2q_s32(v111, v112);
  v113.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v151, 0).i32[2];
  v115 = vzip1q_s32(vdupq_laneq_s32(v142, 2), vdupq_laneq_s32(v146, 2));
  v114.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v151, 1).i32[2];
  v115.i32[2] = v151.i32[2];
  v159 = v113;
  v160 = v114;
  v161 = v115;
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v110 + 16), *(void **)(v110 + 24), v159.i8, 16, 12, 3, *(_QWORD *)(v110 + 32), *(_QWORD *)(v110 + 40));
  v116 = *(_QWORD *)(v6 + 56);
  if (!*(_QWORD *)(v116 + 16))
    goto LABEL_66;
  swift_bridgeObjectRetain();
  v117 = specialized __RawDictionaryStorage.find<A>(_:)(9);
  if ((v118 & 1) == 0)
  {
LABEL_76:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_77;
  }
  v152 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, v138.columns[0].f32[0]), v133, *(float32x2_t *)v138.columns[0].f32, 1), v157, (float32x4_t)v138.columns[0], 2);
  v147 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, v138.columns[1].f32[0]), v133, *(float32x2_t *)v138.columns[1].f32, 1), v157, (float32x4_t)v138.columns[1], 2);
  v158 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v132, v138.columns[2].f32[0]), v133, *(float32x2_t *)v138.columns[2].f32, 1), v157, (float32x4_t)v138.columns[2], 2);
  v119 = *(_QWORD *)(*(_QWORD *)(v116 + 56) + 8 * v117);
  swift_retain();
  swift_bridgeObjectRelease();
  v120 = vzip1q_s32(v152, v158);
  v121 = vzip1q_s32(v147, (int32x4_t)0);
  v122 = vzip1q_s32(v120, v121);
  v123 = vzip2q_s32(v120, v121);
  v122.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v158, 0).i32[2];
  v124 = vzip1q_s32(vdupq_laneq_s32(v152, 2), vdupq_laneq_s32(v147, 2));
  v123.i32[2] = vdupq_lane_s32(*(int32x2_t *)&v158, 1).i32[2];
  v124.i32[2] = v158.i32[2];
  v159 = v122;
  v160 = v123;
  v161 = v124;
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v119 + 16), *(void **)(v119 + 24), v159.i8, 16, 12, 3, *(_QWORD *)(v119 + 32), *(_QWORD *)(v119 + 40));
  v125 = *(_QWORD *)(v6 + 56);
  if (!*(_QWORD *)(v125 + 16))
    goto LABEL_67;
  swift_bridgeObjectRetain();
  v126 = specialized __RawDictionaryStorage.find<A>(_:)(10);
  if ((v127 & 1) != 0)
  {
    v128 = *(_QWORD *)(*(_QWORD *)(v125 + 56) + 8 * v126);
    swift_retain();
    swift_bridgeObjectRelease();
    v159 = v136;
    E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v128 + 16), *(void **)(v128 + 24), v159.i8, 16, 16, 1, *(_QWORD *)(v128 + 32), *(_QWORD *)(v128 + 40));
    Hands_trace_CBridge_0();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_47;
  }
LABEL_77:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void UberPoseActionPipeline.preparePinchInputs(forHand:withHandsKitData:withModelParams:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  uint64_t v18;
  char v19;
  __int128 *v20;
  int32x4_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  char **v48;
  void *v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  float v73;
  char *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  float32x2x2_t v78;
  float32x2x2_t v79;
  int32x4_t v80;
  int32x4_t v81;
  float *v82;
  float *v83;
  int32x4_t v84;
  uint64_t v85;
  int32x4_t v86;
  uint64_t v87;
  float32x2_t v88;
  int32x4_t v89;
  uint64_t v90;
  int32x4_t v91;
  int v92;
  uint64_t v93;
  id v94;
  float32x4_t v95[4];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int32x4_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  int32x4_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;

  v5 = v4;
  v120 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 200);
  if (!v6 || *(_QWORD *)(v6 + 16) != 2)
    goto LABEL_30;
  v8 = 16;
  if (*(_BYTE *)(a1 + 136))
    v8 = 0;
  v9 = *(_QWORD *)(a3 + 120);
  if (!v9)
    goto LABEL_30;
  v10 = *(_QWORD *)(a3 + 128);
  if (!v10)
    goto LABEL_30;
  v11 = v3;
  if (!*(_QWORD *)(v3 + 24))
    goto LABEL_30;
  v12 = *(void **)(v3 + 32);
  if (!v12)
    goto LABEL_30;
  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
    goto LABEL_30;
  v13 = *(_QWORD *)(a2 + 200);
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_30;
  v92 = *(unsigned __int8 *)(a1 + 136);
  v14 = v6 + v8;
  v15 = *(_QWORD *)(v14 + 32);
  v16 = *(_BYTE *)(v14 + 40);
  v88 = *(float32x2_t *)(a1 + 176);
  v90 = *(_QWORD *)(a1 + 184);
  swift_retain();
  swift_retain();
  swift_retain();
  v93 = v10;
  v17 = v12;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
  if ((v19 & 1) == 0)
  {
    swift_release();
    swift_release();
    swift_release();

LABEL_30:
    *((_QWORD *)&v109 + 1) = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v108 = 0xD000000000000021;
    *((_QWORD *)&v108 + 1) = 0x800000023D9C91C0;
    type metadata accessor for HandyLoggerNeo();
    v96 = xmmword_23D9A6CC0;
    v97 = 0uLL;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v96, 0xD000000000000066, 0x800000023D9C9040, 431, (uint64_t)&v108, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v108);
    return;
  }
  v20 = (__int128 *)(*(_QWORD *)(v13 + 56) + 192 * v18);
  v22 = v20[2];
  v21 = (int32x4_t)v20[3];
  v23 = v20[1];
  v108 = *v20;
  v109 = v23;
  v110 = v22;
  v111 = v21;
  v24 = v20[4];
  v25 = v20[5];
  v26 = v20[7];
  v114 = v20[6];
  v115 = v26;
  v112 = v24;
  v113 = v25;
  v27 = v20[8];
  v28 = v20[9];
  v29 = v20[11];
  v118 = v20[10];
  v119 = v29;
  v116 = v27;
  v117 = v28;
  outlined retain of ImageData((uint64_t)&v108);
  Hands_trace_CBridge_0();
  *(_DWORD *)(v11 + 40) = objc_msgSend(v17, sel_currentIndex);
  *(_DWORD *)(v11 + 44) = objc_msgSend(v17, sel_currentDepth);
  v30 = *(_QWORD *)(v93 + 208);
  if ((unint64_t)(v30 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_51;
  }
  v31 = 4 * v30;
  if (!objc_msgSend(v17, sel_currentDepth))
  {
    v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEC8]), sel_initWithLength_, v31);
    if (!v36)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    v37 = v36;
    objc_msgSend(v36, sel_resetBytesInRange_, 0, v31);
    v38 = objc_retainAutorelease(v37);
    objc_msgSend(v17, sel_pushBuffer_, objc_msgSend(v38, sel_bytes));
    v39 = objc_retainAutorelease(v38);
    objc_msgSend(v17, sel_pushBuffer_, objc_msgSend(v39, sel_bytes));
    v40 = objc_retainAutorelease(v39);
    objc_msgSend(v17, sel_pushBuffer_, objc_msgSend(v40, sel_bytes));
    v41 = objc_retainAutorelease(v40);
    objc_msgSend(v17, sel_pushBuffer_, objc_msgSend(v41, sel_bytes));
    v42 = objc_retainAutorelease(v41);
    objc_msgSend(v17, sel_pushBuffer_, objc_msgSend(v42, sel_bytes));
    v43 = objc_retainAutorelease(v42);
    objc_msgSend(v17, sel_pushBuffer_, objc_msgSend(v43, sel_bytes));
    v44 = objc_retainAutorelease(v43);
    objc_msgSend(v17, sel_pushBuffer_, objc_msgSend(v44, sel_bytes));

  }
  v87 = v9;
  if (!*(_QWORD *)(v11 + 48))
  {
    if ((unsigned __int128)(v31 * (__int128)7) >> 64 != (7 * v31) >> 63)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEC8]), sel_initWithLength_, 7 * v31);
    v46 = *(void **)(v11 + 48);
    *(_QWORD *)(v11 + 48) = v45;

  }
  v94 = v17;
  v47 = 0;
  v48 = &selRef_downScaleIntrinsics_;
  do
  {
    v49 = *(void **)(v11 + 48);
    if (!v49)
      goto LABEL_55;
    v50 = v47 * v31;
    if ((unsigned __int128)(v47 * (__int128)v31) >> 64 != (v47 * v31) >> 63)
    {
      __break(1u);
      goto LABEL_45;
    }
    v51 = v49;
    v52 = objc_msgSend(v94, sel_getNextBuffer);
    if (!v52)
      goto LABEL_56;
    ++v47;
    objc_msgSend(v51, sel_replaceBytesInRange_withBytes_, v50, v31, v52);

  }
  while (v47 != 7);
  v48 = (char **)v87;
  v53 = *(_QWORD *)(v87 + 56);
  if (!*(_QWORD *)(v53 + 16))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  swift_bridgeObjectRetain();
  v54 = specialized __RawDictionaryStorage.find<A>(_:)(16);
  if ((v55 & 1) == 0)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_59;
  }
  v56 = *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * v54);
  swift_retain();
  swift_bridgeObjectRelease();
  v57 = *(void **)(v11 + 48);
  if (!v57)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  E5RTRegressor.setNamedInput(_:fromRawPointer:)(v56, (char *)objc_msgSend(objc_retainAutorelease(v57), sel_bytes));
  if (v5)
  {
    swift_release();
    outlined release of ImageData((uint64_t)&v108);
    swift_release();
    swift_release();
    goto LABEL_34;
  }
  v58 = *(_QWORD *)(v87 + 56);
  if (!*(_QWORD *)(v58 + 16))
LABEL_53:
    __break(1u);
  swift_bridgeObjectRetain();
  v59 = specialized __RawDictionaryStorage.find<A>(_:)(14);
  if ((v60 & 1) == 0)
  {
LABEL_61:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_62;
  }
  v61 = *(_QWORD *)(*(_QWORD *)(v58 + 56) + 8 * v59);
  swift_retain();
  swift_bridgeObjectRelease();
  *(float32x2_t *)&v96 = v88;
  *((_QWORD *)&v96 + 1) = v90;
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v61 + 16), *(void **)(v61 + 24), (char *)&v96, 16, 12, 1, *(_QWORD *)(v61 + 32), *(_QWORD *)(v61 + 40));
  v62 = *(_QWORD *)(v87 + 56);
  if (*(_QWORD *)(v62 + 16))
  {
    swift_bridgeObjectRetain();
    v63 = specialized __RawDictionaryStorage.find<A>(_:)(11);
    if ((v64 & 1) != 0)
    {
      v85 = *(_QWORD *)(*(_QWORD *)(v62 + 56) + 8 * v63);
      swift_retain();
      swift_bridgeObjectRelease();
      ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v95);
      *(float32x2_t *)v65.f32 = v88;
      v65.i64[1] = v90;
      v66 = vaddq_f32(v95[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v95[0], v88.f32[0]), v95[1], v88, 1), v95[2], v65, 2));
      v67 = vmulq_f32(v66, v66);
      *(_QWORD *)&v68 = 0;
      *((_QWORD *)&v68 + 1) = COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1))).f32[0]));
      v96 = v68;
      E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v85 + 16), *(void **)(v85 + 24), (char *)&v96, 16, 12, 1, *(_QWORD *)(v85 + 32), *(_QWORD *)(v85 + 40));
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v69 = *(_QWORD *)(v87 + 56);
  if (!*(_QWORD *)(v69 + 16))
  {
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  swift_bridgeObjectRetain();
  v70 = specialized __RawDictionaryStorage.find<A>(_:)(13);
  if ((v71 & 1) == 0)
  {
LABEL_62:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_63;
  }
  v72 = *(_QWORD *)(*(_QWORD *)(v69 + 56) + 8 * v70);
  swift_retain();
  swift_bridgeObjectRelease();
  v73 = 0.0;
  if (v92)
    v73 = 1.0;
  *(float *)&v96 = v73;
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v72 + 16), *(void **)(v72 + 24), (char *)&v96, 4, 4, 1, *(_QWORD *)(v72 + 32), *(_QWORD *)(v72 + 40));
  v104 = v116;
  v105 = v117;
  v106 = v118;
  v107 = v119;
  v100 = v112;
  v101 = v113;
  v102 = v114;
  v103 = v115;
  v96 = v108;
  v97 = v109;
  v98 = v110;
  v99 = v111;
  specialized static PoseModelUtils.getInvReferenceTransform(forHand:mainCameraImage:)(a1, (uint64_t)&v96);
  v5 = 0;
LABEL_45:
  v84 = v34;
  v86 = v35;
  v89 = v32;
  v91 = v33;
  v74 = v48[7];
  if (!*((_QWORD *)v74 + 2))
    goto LABEL_57;
  swift_bridgeObjectRetain();
  v75 = specialized __RawDictionaryStorage.find<A>(_:)(12);
  if ((v76 & 1) == 0)
  {
LABEL_63:
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }
  v77 = *(_QWORD *)(*((_QWORD *)v74 + 7) + 8 * v75);
  swift_retain();
  swift_bridgeObjectRelease();
  v78 = (float32x2x2_t)vzip1q_s32(v89, v84);
  v79 = (float32x2x2_t)vzip2q_s32(v89, v84);
  v80 = vzip1q_s32(v91, v86);
  v81 = vzip2q_s32(v91, v86);
  v82 = (float *)&v96;
  vst2_f32(v82, v78);
  v82 += 4;
  v83 = (float *)&v98;
  vst2_f32(v83, v79);
  *(int32x4_t *)v82 = vzip2q_s32((int32x4_t)v78, v80);
  v99 = vzip2q_s32((int32x4_t)v79, v81);
  E5RTRegressor.setInput(_:fromRawPointer:withStride:withWidth:withHeight:start:end:)(*(_QWORD *)(v77 + 16), *(void **)(v77 + 24), (char *)&v96, 16, 16, 4, *(_QWORD *)(v77 + 32), *(_QWORD *)(v77 + 40));
  if (v5)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of ImageData((uint64_t)&v108);
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    Hands_trace_CBridge_0();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of ImageData((uint64_t)&v108);
    swift_release();
    swift_release();
LABEL_34:
    swift_release();

  }
}

uint64_t UberPoseActionPipeline.finalizeInputs(withModelParams:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  _QWORD v42[4];
  uint64_t v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 aBlock;
  uint64_t (*v59)(uint64_t);
  void *v60;
  uint64_t (*v61)();
  uint64_t v62;
  _OWORD v63[2];
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  v3 = v2;
  v56 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56, v6);
  v48 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v12 = (char *)v42 - v11;
  result = *(_QWORD *)(a1 + 120);
  if (!result || (v14 = *(_QWORD *)(v1 + 24)) == 0)
  {
    v60 = (void *)MEMORY[0x24BEE0D00];
    *(_QWORD *)&aBlock = 0xD000000000000022;
    *((_QWORD *)&aBlock + 1) = 0x800000023D9C9130;
    type metadata accessor for HandyLoggerNeo();
    v64 = xmmword_23D9A6CC0;
    v65 = 0;
    v66 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v64, 0xD000000000000066, 0x800000023D9C9040, 483, (uint64_t)&aBlock, MEMORY[0x24BEE4AF8]);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)&aBlock);
  }
  v15 = *(_QWORD *)(result + 88);
  if (*(_QWORD *)(v15 + 16))
  {
    v16 = *(_QWORD *)(v15 + 16);
    v57 = v14 + 40;
    v47 = v10 + 7;
    v42[3] = result;
    swift_retain();
    v42[1] = v14;
    swift_retain();
    swift_bridgeObjectRetain();
    v42[2] = v15;
    v17 = (void **)(v15 + 40);
    v55 = 0x800000023D9C7580;
    v46 = 0x800000023D9C9160;
    v45 = xmmword_23D9AB750;
    v18 = v5;
    v19 = v16;
    v44 = v12;
    v43 = v5;
    while (1)
    {
      v20 = (uint64_t)*(v17 - 1);
      v21 = *v17;
      v22 = v57;
      swift_beginAccess();
      v23 = *(_QWORD *)(*(_QWORD *)v22 + 16);
      swift_bridgeObjectRetain();
      if (v23)
      {
        swift_bridgeObjectRetain();
        specialized __RawDictionaryStorage.find<A>(_:)(v20, (uint64_t)v21);
        if ((v24 & 1) != 0)
        {
          swift_endAccess();
          swift_retain();
          swift_bridgeObjectRelease();
          InputPortInfo.finalizeInput()();
          v3 = v25;
          swift_bridgeObjectRelease();
          if (v25)
          {
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            return swift_release();
          }
          swift_release();
          goto LABEL_6;
        }
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      *(_QWORD *)&aBlock = 0;
      *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      *(_QWORD *)&aBlock = 0xD00000000000001ELL;
      *((_QWORD *)&aBlock + 1) = v55;
      v26._countAndFlagsBits = v20;
      v26._object = v21;
      String.append(_:)(v26);
      v66 = MEMORY[0x24BEE0D00];
      v64 = aBlock;
      v27 = type metadata accessor for HandyLoggerNeo();
      if (static HandyLoggerNeo._currentLogLevel > 3)
      {
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v64);
        swift_bridgeObjectRelease();
      }
      else
      {
        v54 = v27;
        v49 = v19;
        v50 = v3;
        v28 = (void *)MEMORY[0x2426372E8](0xD00000000000005ALL, v46);
        v29 = objc_msgSend(v28, sel_lastPathComponent);

        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v51 = v30;

        static Date.now.getter();
        v31 = v12;
        if (one-time initialization token for _dispatchQ != -1)
          swift_once();
        v53 = (id)static HandyLoggerNeo._dispatchQ;
        v32 = v48;
        v33 = v31;
        v34 = v56;
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v48, v33, v56);
        outlined init with copy of Any((uint64_t)&v64, (uint64_t)v63);
        v35 = (*(unsigned __int8 *)(v18 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
        v36 = (v47 + v35) & 0xFFFFFFFFFFFFFFF8;
        v37 = swift_allocObject();
        *(_DWORD *)(v37 + 16) = 3;
        *(_QWORD *)(v37 + 24) = v54;
        *(_OWORD *)(v37 + 32) = v45;
        *(_QWORD *)(v37 + 48) = 0;
        *(_QWORD *)(v37 + 56) = 0;
        *(_DWORD *)(v37 + 64) = 1;
        v38 = v51;
        *(_QWORD *)(v37 + 72) = v52;
        *(_QWORD *)(v37 + 80) = v38;
        *(_QWORD *)(v37 + 88) = 480;
        (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v37 + v35, v32, v34);
        outlined init with take of Any(v63, (_OWORD *)(v37 + v36));
        *(_QWORD *)(v37 + ((v36 + 39) & 0xFFFFFFFFFFFFFFF8)) = MEMORY[0x24BEE4AF8];
        v39 = swift_allocObject();
        *(_QWORD *)(v39 + 16) = partial apply for closure #1 in static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:);
        *(_QWORD *)(v39 + 24) = v37;
        v61 = _sIg_Ieg_TRTA_0;
        v62 = v39;
        *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
        *((_QWORD *)&aBlock + 1) = 1107296256;
        v59 = thunk for @escaping @callee_guaranteed () -> ();
        v60 = &block_descriptor_5;
        v40 = _Block_copy(&aBlock);
        v41 = v53;
        swift_retain();
        swift_release();
        dispatch_sync(v41, v40);

        _Block_release(v40);
        LOBYTE(v40) = swift_isEscapingClosureAtFileLocation();
        result = swift_release();
        if ((v40 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        v18 = v43;
        v12 = v44;
        (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v56);
        swift_release();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v64);
        swift_bridgeObjectRelease();
        v3 = v50;
        v19 = v49;
      }
LABEL_6:
      v17 += 2;
      if (!--v19)
      {
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t UberPoseActionPipeline.postProcessPinchOutputs(forHand:withHandsKitData:withModelParams:withTimestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  char v15;
  int v16;
  int v17;
  char v18;
  uint64_t result;
  id v20;
  int32x2_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE v26[32];
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;

  v6 = *(_QWORD *)(a2 + 128);
  if (v6 && (v7 = *(_QWORD *)(v3 + 24)) != 0 && (v8 = *(void **)(v3 + 32)) != 0)
  {
    v25 = (_BYTE *)(a3 + 268);
    type metadata accessor for PinchModelInference();
    v9 = *(unsigned int *)(a1 + 264);
    v24 = a1;
    v10 = *(_BYTE *)(a1 + 268);
    swift_retain();
    swift_retain();
    v11 = v8;
    LOBYTE(v27) = v10;
    v12 = static PinchModelInference.getPinchModelOutput(_:_:_:)((uint64_t)&v27, v7, v6, v9 | ((unint64_t)v10 << 32));
    objc_msgSend(v11, sel_pushBuffer_, v12);
    if (*(_DWORD *)(v3 + 44))
    {
      swift_release();
      swift_release();

      v13 = v27;
      v14 = v28;
      v15 = BYTE4(v28);
      v16 = v29;
      v17 = v30;
      v18 = v31;
    }
    else
    {
      swift_bridgeObjectRelease();
      v20 = v11;
      objc_msgSend(v20, sel_pushBuffer_, v12);
      objc_msgSend(v20, sel_pushBuffer_, v12);
      objc_msgSend(v20, sel_pushBuffer_, v12);
      objc_msgSend(v20, sel_pushBuffer_, v12);
      objc_msgSend(v20, sel_pushBuffer_, v12);
      objc_msgSend(v20, sel_pushBuffer_, v12);
      v21.i32[0] = 0;
      v22 = specialized Array.init(repeating:count:)(*(_QWORD *)(v6 + 200), v21);
      v23 = *(_QWORD *)(v6 + 200);
      v26[0] = v10;
      RawPinchFeatures.init(_:_:_:_:)((Hands::RawPinchFeatures *)v26, (Swift::OpaquePointer)v22, (Swift::OpaquePointer)&outlined read-only object #0 of UberPoseActionPipeline.postProcessPinchOutputs(forHand:withHandsKitData:withModelParams:withTimestamp:), (Swift::Float_optional *)(v9 | ((unint64_t)v10 << 32)), v23);
      swift_release();
      swift_release();

      v13 = *(_QWORD *)v26;
      v14 = *(_DWORD *)&v26[8];
      v15 = v26[12];
      v16 = *(_DWORD *)&v26[16];
      v17 = *(_DWORD *)&v26[20];
      v18 = v26[24];
    }
    outlined init with copy of HandDescriptor(v24, a3);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a3 + 256) = v13;
    *(_DWORD *)(a3 + 264) = v14;
    *v25 = v15;
    *(_DWORD *)(a3 + 272) = v16;
    *(_DWORD *)(a3 + 276) = v17;
    *(_BYTE *)(a3 + 280) = v18;
  }
  else
  {
    v31 = MEMORY[0x24BEE0D00];
    v27 = 0xD000000000000028;
    v28 = 0x800000023D9C9100;
    type metadata accessor for HandyLoggerNeo();
    *(_OWORD *)v26 = xmmword_23D9A6CC0;
    *(_QWORD *)&v26[16] = 0;
    *(_QWORD *)&v26[24] = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v26, 0xD000000000000066, 0x800000023D9C9040, 498, (uint64_t)&v27, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v27);
    return outlined init with copy of HandDescriptor(a1, a3);
  }
  return result;
}

uint64_t UberPoseActionPipeline.deinit()
{
  uint64_t v0;
  _QWORD v2[4];

  v2[3] = MEMORY[0x24BEE0D00];
  v2[0] = 0xD000000000000018;
  v2[1] = 0x800000023D9C93D0;
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000066, 0x800000023D9C9040, 515, (uint64_t)v2, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
  swift_release();
  swift_release();

  swift_release();
  return v0;
}

uint64_t UberPoseActionPipeline.__deallocating_deinit()
{
  UberPoseActionPipeline.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UberPoseActionPipeline()
{
  return objc_opt_self();
}

uint64_t ObjC metadata update function for UberPoseActionPipeline.State()
{
  return type metadata accessor for UberPoseActionPipeline.State();
}

uint64_t type metadata accessor for UberPoseActionPipeline.State()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UberPoseActionPipeline.State;
  if (!type metadata singleton initialization cache for UberPoseActionPipeline.State)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for UberPoseActionPipeline.State()
{
  unint64_t v0;

  type metadata accessor for HandDescriptor?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void protocol witness for PoseActionPipeline.reconfig(_:) in conformance UberPoseActionPipeline(HandsKitConfig *a1)
{
  UberPoseActionPipeline.reconfig(_:)(a1);
}

void protocol witness for PoseActionPipeline.run(forHand:withHandsKitData:ps_handle:) in conformance UberPoseActionPipeline(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  UberPoseActionPipeline.run(forHand:withHandsKitData:ps_handle:)(a1, a2, a3, a4);
}

unint64_t lazy protocol witness table accessor for type StereoPoseDetectorModelError and conformance StereoPoseDetectorModelError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StereoPoseDetectorModelError and conformance StereoPoseDetectorModelError;
  if (!lazy protocol witness table cache variable for type StereoPoseDetectorModelError and conformance StereoPoseDetectorModelError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for StereoPoseDetectorModelError, &type metadata for StereoPoseDetectorModelError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StereoPoseDetectorModelError and conformance StereoPoseDetectorModelError);
  }
  return result;
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Int *v11;
  Swift::Int v12;
  Swift::Int v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (Swift::Int *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::Int a2, char a3)
{
  uint64_t *v3;
  char v4;
  uint64_t v7;
  int v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v4 = a3;
  v7 = *v3;
  v8 = a3 & 1;
  Hasher.init(_seed:)();
  lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v7 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v7 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    while (1)
    {
      if (v8)
        __asm { BR              X13 }
      if (*(_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v11) == a2)
        break;
      v11 = (v11 + 1) & v12;
      if (((*(_QWORD *)(v7 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_8;
    }
    swift_bridgeObjectRelease();
    result = 0;
    v14 = *(_QWORD *)(*v3 + 48) + 16 * v11;
    a2 = *(_QWORD *)v14;
    v4 = *(_BYTE *)(v14 + 8);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, v11, isUniquelyReferenced_nonNull_native);
    *v3 = v16;
    swift_bridgeObjectRelease();
    result = 1;
  }
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<Int>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<UInt64>);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v5 = v3;
  v8 = *v3;
  v9 = static Hasher._hash(seed:_:)();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v5;
    *v5 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v11, isUniquelyReferenced_nonNull_native, a3);
    *v5 = v16;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(v8 + 48);
  if (*(_QWORD *)(v12 + 8 * v11) != a2)
  {
    v13 = ~v10;
    do
    {
      v11 = (v11 + 1) & v13;
      if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v12 + 8 * v11) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

void specialized Set._Variant.insert(_:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

uint64_t sub_23D749E74()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v5;
  _BYTE *v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v2 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v1 + 32));
  if (((*(_QWORD *)(v1 + 56 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8)) >> v2) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v5;
  *v5 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)(v0, v2, isUniquelyReferenced_nonNull_native);
  *v5 = v7;
  swift_bridgeObjectRelease();
  result = 1;
  *v6 = (_BYTE)v0;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CameraSource>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = *(_QWORD *)(v2 + 48) + 16 * v15;
      v20 = *(_QWORD *)v19;
      v21 = *(_BYTE *)(v19 + 8);
      Hasher.init(_seed:)();
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      dispatch thunk of Hashable.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = *(_QWORD *)(v4 + 48) + 16 * v12;
      *(_QWORD *)v13 = v20;
      *(_BYTE *)(v13 + 8) = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<HandsKitGTInjection>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x23D74ACDCLL);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        Hasher.init(_seed:)();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<UInt64>);
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = static _SetStorage.resize(original:capacity:move:)();
  v6 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v4 + 56);
    v9 = 1 << *(_BYTE *)(v4 + 32);
    v28 = -1 << v9;
    v29 = v3;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v30 = 1 << *(_BYTE *)(v4 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_33;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_33;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_33;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_33:
                if (v30 >= 64)
                  bzero((void *)(v4 + 56), 8 * v12);
                else
                  *v8 = v28;
                v3 = v29;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v7 >= v12)
                    goto LABEL_33;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_23:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, char a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  Swift::Int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v9 > v8)
      {
        result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_15;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v10 = *v4;
    Hasher.init(_seed:)();
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v10 + 32);
    a3 = result & ~v11;
    if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v12 = ~v11;
      while (1)
      {
        if ((a2 & 1) != 0)
          __asm { BR              X13 }
        if (*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * a3) == v7)
          break;
        a3 = (a3 + 1) & v12;
        if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          goto LABEL_15;
      }
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
  }
LABEL_15:
  v13 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v14 = *(_QWORD *)(v13 + 48) + 16 * a3;
  *(_QWORD *)v14 = v7;
  *(_BYTE *)(v14 + 8) = a2 & 1;
  v15 = *(_QWORD *)(v13 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
    JUMPOUT(0x23D74AF1CLL);
  }
  *(_QWORD *)(v13 + 16) = v17;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v6 = result;
  v7 = *(_QWORD *)(*v4 + 16);
  v8 = *(_QWORD *)(*v4 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)specialized _NativeSet.copy()(a4);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v9, a4);
  }
  v10 = *v4;
  result = static Hasher._hash(seed:_:)();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v10 + 48);
    if (*(_QWORD *)(v12 + 8 * a2) == v6)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v12 + 8 * a2) == v6)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * a2) = v6;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *specialized _NativeSet.insertNew(_:at:isUnique:)(void *result, unint64_t a2, char a3)
{
  uint64_t v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;

  v5 = (char)result;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
      goto LABEL_8;
    }
    if (v7 <= v6)
    {
      specialized _NativeSet.copyAndResize(capacity:)();
LABEL_8:
      Hasher.init(_seed:)();
      __asm { BR              X10 }
    }
    result = specialized _NativeSet.copy()();
  }
  v8 = *v12;
  *(_QWORD *)(*v12 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v8 + 48) + a2) = v13;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
    JUMPOUT(0x23D74B540);
  }
  *(_QWORD *)(v8 + 16) = v11;
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CameraSource>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v19 = v18;
    *(_BYTE *)(v19 + 8) = v17;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<Int>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<UInt64>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<HandsKitGTInjection>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CameraSource>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    Hasher.init(_seed:)();
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = *(_QWORD *)(v4 + 48) + 16 * v12;
    *(_QWORD *)v13 = v20;
    *(_BYTE *)(v13 + 8) = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<HandsKitGTInjection>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x23D74C6F4);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        Hasher.init(_seed:)();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.copyAndResize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<UInt64>);
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = static _SetStorage.resize(original:capacity:move:)();
  v6 = result;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v28 = v3;
  v7 = 0;
  v8 = v4 + 56;
  v9 = 1 << *(_BYTE *)(v4 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v12)
      goto LABEL_33;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_33;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_33;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_33:
    result = swift_release();
    v3 = v28;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_33;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t sub_23D74C8A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 40) >= 0x1AuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = (v3 + 96) & ~v3;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23D74C95C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t specialized UberPoseActionPipeline.State.init(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  char v12;

  v2 = v1;
  v4 = v1 + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_prevHand;
  v5 = type metadata accessor for HandDescriptor();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  *(_QWORD *)(v2 + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_gtInjections) = MEMORY[0x24BEE4B08];
  *(_BYTE *)(v2 + OBJC_IVAR____TtCC5Hands22UberPoseActionPipeline5State_enableCameraPairTransitionCorrection) = 1;
  type metadata accessor for GeometricPoseFilter();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = objc_msgSend(objc_allocWithZone((Class)HandsKitConfig), sel_init);
  v6(v7 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__prevHand, 1, 1, v5);
  v8 = v7 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__prevTimeStamp;
  *(_QWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 24) = 1;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__isPassthrough) = 0;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__expectedTimeDeltaForOneFrame) = 0;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__filterInWorldCoordinates) = 0;
  v9 = OBJC_IVAR____TtC5Hands19GeometricPoseFilter__isPredictive;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC5Hands19GeometricPoseFilter__runningFrameRate) = 0;
  *(_BYTE *)(v7 + v9) = 0;
  GeometricPoseFilter.reconfig(_:)(a1);
  *(_QWORD *)(v2 + 16) = v7;
  -[HandsKitConfig RigidTransformJointVisibilityThreshold](a1, sel_RigidTransformJointVisibilityThreshold);
  v11 = v10;
  LOBYTE(v7) = -[HandsKitConfig PerformJointAngleValidation](a1, sel_PerformJointAngleValidation);
  LODWORD(v5) = -[HandsKitConfig AllowedNumberOfInvalidJointAngles](a1, sel_AllowedNumberOfInvalidJointAngles);
  v12 = -[HandsKitConfig EnableCoreAnalytics](a1, sel_EnableCoreAnalytics);
  type metadata accessor for HandPoseBuilder();
  swift_allocObject();
  *(_QWORD *)(v2 + 24) = HandPoseBuilder.init(_:_:_:_:)(v7, v5, v12, v11);
  UberPoseActionPipeline.State.reconfig(_:)(a1);
  return v2;
}

uint64_t specialized UberPoseActionPipeline.init(options:state:isPoseOnly:)(HandsKitConfig *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  _QWORD v11[4];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_BYTE *)(v3 + 64) = a3;
  if (a2)
  {
    v5 = a2;
  }
  else
  {
    type metadata accessor for UberPoseActionPipeline.State();
    swift_allocObject();
    v5 = specialized UberPoseActionPipeline.State.init(_:)(a1);
  }
  *(_QWORD *)(v3 + 56) = v5;
  v12 = xmmword_23D9A6CC0;
  v13 = 0;
  v14 = 0;
  swift_retain();
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v11[0] = 0xD000000000000016;
  v11[1] = 0x800000023D9C93F0;
  if (*(_BYTE *)(v3 + 64))
    v6 = 0x796C6E6F2DLL;
  else
    v6 = 0x6E6F6974636120;
  if (*(_BYTE *)(v3 + 64))
    v7 = 0xE500000000000000;
  else
    v7 = 0xE700000000000000;
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x6E696C6570695020;
  v9._object = (void *)0xEC0000002E2E2E65;
  String.append(_:)(v9);
  v11[3] = MEMORY[0x24BEE0D00];
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000066, 0x800000023D9C9040, 78, (uint64_t *)&v12, (uint64_t)v11, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
  UberPoseActionPipeline.reconfig(_:)(a1);
  return v3;
}

void one-time initialization function for kJointsOfInterest()
{
  static OperationalEnvelopeProcess.kJointsOfInterest = (uint64_t)&outlined read-only object #0 of one-time initialization function for kJointsOfInterest;
}

uint64_t OperationalEnvelopeProcess.init(_:)(void *a1)
{
  uint64_t v1;
  int v3;
  unsigned int v4;
  void *v5;

  *(_DWORD *)(v1 + 16) = 1056964608;
  *(_WORD *)(v1 + 20) = 257;
  objc_msgSend(a1, sel_OperationalEnvelopeEdgeThreshold);
  *(_DWORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 20) = objc_msgSend(a1, sel_EnableGracefulFailureCloseToHMD);
  *(_BYTE *)(v1 + 21) = objc_msgSend(a1, sel_EnableGracefulFailureHandOutOfFOV);
  v4 = objc_msgSend(a1, sel_PosePipelineType);

  v5 = &outlined read-only object #1 of OperationalEnvelopeProcess.init(_:);
  if (v4 == 2)
    v5 = &outlined read-only object #0 of OperationalEnvelopeProcess.init(_:);
  *(_QWORD *)(v1 + 24) = v5;
  return v1;
}

void OperationalEnvelopeProcess.process(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int32x4_t *v88;
  uint64_t v89;
  simd_float4 v90;
  simd_float4 v91;
  simd_float4 v92;
  simd_float4 v93;
  uint64_t v94;
  float32x4_t v95;
  float32x4_t v96;
  _BYTE *v97;
  int32x4_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  __int128 v135;
  int v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  unint64_t v156;
  _BYTE v157[560];
  _OWORD v158[36];
  simd_float4x4 v159;

  v2 = v1;
  v4 = type metadata accessor for HandDescriptor();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (int32x4_t *)((char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v94 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v94)
  {
    v9 = 0;
    v97 = (char *)&v158[24] + 8;
    v86 = v4;
    v87 = v1;
    v85 = v5;
    v88 = (int32x4_t *)((char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    while (1)
    {
      v10 = *(_QWORD *)a1;
      if (v9 >= *(_QWORD *)(*(_QWORD *)a1 + 16))
        break;
      v156 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v155 = *(_QWORD *)(v5 + 72) * v9;
      outlined init with copy of HandDescriptor(v10 + v156 + v155, (uint64_t)v8);
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)(a1 + 24);
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 40);
      v16 = *(_QWORD *)(a1 + 48);
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 64);
      v19 = *(_QWORD *)(a1 + 72);
      v20 = *(unsigned __int8 *)(a1 + 80);
      v21 = *(_DWORD *)(a1 + 84);
      v22 = *(_DWORD *)(a1 + 88);
      v23 = *(_DWORD *)(a1 + 92);
      v24 = *(_QWORD *)(a1 + 96);
      v25 = *(_QWORD *)(a1 + 104);
      v26 = *(_QWORD *)(a1 + 112);
      v27 = *(_QWORD *)(a1 + 120);
      v28 = *(_QWORD *)(a1 + 128);
      v154 = *(unsigned __int8 *)(a1 + 136);
      v153 = *(_QWORD *)(a1 + 144);
      v152 = *(_QWORD *)(a1 + 152);
      v151 = *(_QWORD *)(a1 + 160);
      v150 = *(_QWORD *)(a1 + 168);
      v149 = *(_DWORD *)(a1 + 176);
      v148 = *(_QWORD *)(a1 + 184);
      v29 = *(_QWORD *)(a1 + 200);
      v147 = *(_QWORD *)(a1 + 192);
      v30 = *(_OWORD *)(a1 + 208);
      v31 = *(_OWORD *)(a1 + 224);
      v32 = *(_OWORD *)(a1 + 240);
      v33 = *(_OWORD *)(a1 + 256);
      v34 = *(_OWORD *)(a1 + 272);
      v35 = *(_OWORD *)(a1 + 288);
      v36 = *(_OWORD *)(a1 + 304);
      v37 = *(_OWORD *)(a1 + 320);
      v146 = *(_QWORD *)(a1 + 336);
      v145 = *(_QWORD *)(a1 + 344);
      v144 = *(_DWORD *)(a1 + 352);
      v143 = *(_DWORD *)(a1 + 356);
      v38 = *(_QWORD *)(a1 + 536);
      v39 = *(_QWORD *)(a1 + 368);
      v124 = *(_QWORD *)(a1 + 360);
      *(_QWORD *)&v125 = v39;
      v40 = *(_QWORD *)(a1 + 384);
      *((_QWORD *)&v125 + 1) = *(_QWORD *)(a1 + 376);
      v126 = v40;
      v127 = *(unsigned __int8 *)(a1 + 392);
      v128 = *(_QWORD *)(a1 + 396);
      v129 = *(_QWORD *)(a1 + 404);
      v41 = *(_QWORD *)(a1 + 420);
      v130 = *(_QWORD *)(a1 + 412);
      v131 = v41;
      v132 = *(_QWORD *)(a1 + 428);
      v133 = *(_QWORD *)(a1 + 436);
      v134 = *(unsigned __int8 *)(a1 + 444);
      v135 = *(_OWORD *)(a1 + 448);
      v136 = *(unsigned __int8 *)(a1 + 464);
      v137 = *(_QWORD *)(a1 + 472);
      v138 = *(_OWORD *)(a1 + 480);
      v139 = *(_OWORD *)(a1 + 496);
      v140 = *(_OWORD *)(a1 + 512);
      v141 = *(_QWORD *)(a1 + 528);
      v142 = *(_QWORD *)(a1 + 544);
      LODWORD(v41) = *(unsigned __int8 *)(v2 + 20);
      v105 = v31;
      v106 = v30;
      v103 = v33;
      v104 = v32;
      v101 = v35;
      v102 = v34;
      v99 = v37;
      v100 = v36;
      v122 = v12;
      v123 = v11;
      v120 = v14;
      v121 = v13;
      v118 = v16;
      v119 = v15;
      v116 = v18;
      v117 = v17;
      v115 = v19;
      v114 = v20;
      v113 = v22;
      v112 = v23;
      v110 = v25;
      v111 = v24;
      v108 = v27;
      v109 = v26;
      v107 = v28;
      if ((_DWORD)v41 == 1 && v8[12].i64[1] && (v89 = v8[12].i64[1], (v8[12].i8[0] & 1) == 0))
      {
        v62 = *(_QWORD *)(v89 + 16);
        if (v62)
        {
          v63 = v89;
          v98 = v88[11];
          *(_QWORD *)&v158[0] = v10;
          *((_QWORD *)&v158[0] + 1) = v11;
          *(_QWORD *)&v158[1] = v12;
          *((_QWORD *)&v158[1] + 1) = v13;
          *(_QWORD *)&v158[2] = v14;
          *((_QWORD *)&v158[2] + 1) = v15;
          *(_QWORD *)&v158[3] = v16;
          *((_QWORD *)&v158[3] + 1) = v17;
          *(_QWORD *)&v158[4] = v18;
          *((_QWORD *)&v158[4] + 1) = v19;
          LOBYTE(v158[5]) = v20;
          *(_QWORD *)((char *)&v158[5] + 4) = __PAIR64__(v22, v21);
          HIDWORD(v158[5]) = v23;
          *(_QWORD *)&v158[6] = v24;
          *((_QWORD *)&v158[6] + 1) = v25;
          *(_QWORD *)&v158[7] = v26;
          *((_QWORD *)&v158[7] + 1) = v27;
          *(_QWORD *)&v158[8] = v28;
          BYTE8(v158[8]) = v154;
          *(_QWORD *)&v158[9] = v153;
          *((_QWORD *)&v158[9] + 1) = v152;
          *(_QWORD *)&v158[10] = v151;
          *((_QWORD *)&v158[10] + 1) = v150;
          LODWORD(v158[11]) = v149;
          *((_QWORD *)&v158[11] + 1) = v148;
          *(_QWORD *)&v158[12] = v147;
          v158[13] = v30;
          v158[14] = v31;
          v158[15] = v32;
          v158[16] = v33;
          v158[17] = v34;
          v158[18] = v35;
          v158[19] = v36;
          v158[20] = v37;
          *((_QWORD *)&v158[12] + 1) = v29;
          *(_QWORD *)&v158[21] = v146;
          *((_QWORD *)&v158[21] + 1) = v145;
          *(_QWORD *)&v158[22] = __PAIR64__(v143, v144);
          *((_QWORD *)&v158[22] + 1) = v124;
          v158[23] = v125;
          *(_QWORD *)&v158[24] = v126;
          v64 = v97;
          *v97 = v127;
          *(_QWORD *)(v64 + 4) = v128;
          *(_QWORD *)((char *)&v158[25] + 4) = v129;
          *(_QWORD *)(v64 + 20) = v130;
          *(_QWORD *)(v64 + 28) = v131;
          *(_QWORD *)(v64 + 36) = v132;
          *(_QWORD *)(v64 + 44) = v133;
          v64[52] = v134;
          v158[28] = v135;
          LOBYTE(v158[29]) = v136;
          *((_QWORD *)&v158[29] + 1) = v137;
          v158[30] = v138;
          v158[31] = v139;
          v158[32] = v140;
          *(_QWORD *)&v158[33] = v141;
          *((_QWORD *)&v158[33] + 1) = v38;
          *(_QWORD *)&v158[34] = v142;
          outlined retain of HandsKitData(v158);
          v96 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.i8, 1);
          v95 = (float32x4_t)vdupq_laneq_s32(v98, 2);
          swift_bridgeObjectRetain();
          v65 = (char *)(v63 + 40);
          v42 = INFINITY;
          do
          {
            if (*(_QWORD *)(v29 + 16))
            {
              v81 = specialized __RawDictionaryStorage.find<A>(_:)(*((_QWORD *)v65 - 1), *v65);
              if ((v82 & 1) != 0)
              {
                v83 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 192 * v81 + 64);
                if ((*(_BYTE *)(v83 + 400) & 1) != 0)
                {
                  swift_beginAccess();
                  v159 = __invert_f4(*(simd_float4x4 *)(v83 + 192));
                  *(simd_float4x4 *)(v83 + 256) = v159;
                  v159.columns[0].i32[3] = v92.i32[3];
                  v159.columns[1].i32[3] = v93.i32[3];
                  v159.columns[2].i32[3] = v91.i32[3];
                  *(_BYTE *)(v83 + 320) = 0;
                  v159.columns[3].i32[3] = v90.i32[3];
                  *(simd_float4x4 *)(v83 + 336) = v159;
                  *(_BYTE *)(v83 + 400) = 0;
                  v66 = v159.columns[0].i64[1];
                  v92 = v159.columns[0];
                  v93 = v159.columns[1];
                  v67 = v159.columns[0].i64[0];
                  v68 = v159.columns[1].i64[1];
                  v69 = v159.columns[1].i64[0];
                  v70 = v159.columns[2].i64[1];
                  v90 = v159.columns[3];
                  v91 = v159.columns[2];
                  v71 = v159.columns[2].i64[0];
                  v72 = v159.columns[3].i64[1];
                  v73 = v159.columns[3].i64[0];
                }
                else
                {
                  v73 = *(_QWORD *)(v83 + 384);
                  v72 = *(_QWORD *)(v83 + 392);
                  v71 = *(_QWORD *)(v83 + 368);
                  v70 = *(_QWORD *)(v83 + 376);
                  v69 = *(_QWORD *)(v83 + 352);
                  v68 = *(_QWORD *)(v83 + 360);
                  v67 = *(_QWORD *)(v83 + 336);
                  v66 = *(_QWORD *)(v83 + 344);
                }
                v74.i64[0] = v67;
                v74.i64[1] = v66;
                v75.i64[0] = v69;
                v75.i64[1] = v68;
                v76 = vmlaq_f32(vmulq_n_f32(v74, *(float *)v98.i32), v96, v75);
                v75.i64[0] = v71;
                v75.i64[1] = v70;
                v77.i64[0] = v73;
                v77.i64[1] = v72;
                v78 = vaddq_f32(vmlaq_f32(v76, v95, v75), v77);
                v79 = vmulq_f32(v78, v78);
                v80 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 2), vaddq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1))).f32[0]);
                if (v80 < v42)
                  v42 = v80;
              }
            }
            v65 += 16;
            --v62;
          }
          while (v62);
          swift_bridgeObjectRelease();
          outlined release of HandsKitData(v158);
          v4 = v86;
          v2 = v87;
          v5 = v85;
        }
        else
        {
          v42 = INFINITY;
        }
        v8 = v88;
      }
      else
      {
        v42 = INFINITY;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      v44 = v122;
      v43 = v123;
      v46 = v120;
      v45 = v121;
      v48 = v118;
      v47 = v119;
      v50 = v116;
      v49 = v117;
      v51 = v115;
      v52 = v114;
      v53 = v113;
      v54 = v112;
      v56 = v110;
      v55 = v111;
      v58 = v108;
      v57 = v109;
      v59 = v107;
      if (v9 >= *(_QWORD *)(v10 + 16))
        goto LABEL_31;
      *(float *)(v10 + v156 + v155 + *(int *)(v4 + 136)) = v42;
      *((_QWORD *)&v158[0] + 1) = v43;
      *(_QWORD *)&v158[1] = v44;
      *((_QWORD *)&v158[1] + 1) = v45;
      *(_QWORD *)&v158[2] = v46;
      *((_QWORD *)&v158[2] + 1) = v47;
      *(_QWORD *)&v158[3] = v48;
      *((_QWORD *)&v158[3] + 1) = v49;
      *(_QWORD *)&v158[4] = v50;
      *((_QWORD *)&v158[4] + 1) = v51;
      LOBYTE(v158[5]) = v52;
      *((_QWORD *)&v158[5] + 1) = __PAIR64__(v54, v53);
      *(_QWORD *)&v158[6] = v55;
      *((_QWORD *)&v158[6] + 1) = v56;
      *(_QWORD *)&v158[7] = v57;
      *((_QWORD *)&v158[7] + 1) = v58;
      *(_QWORD *)&v158[8] = v59;
      BYTE8(v158[8]) = v154;
      *(_QWORD *)&v158[9] = v153;
      *((_QWORD *)&v158[9] + 1) = v152;
      *(_QWORD *)&v158[10] = v151;
      *((_QWORD *)&v158[10] + 1) = v150;
      LODWORD(v158[11]) = v149;
      *((_QWORD *)&v158[11] + 1) = v148;
      *(_QWORD *)&v158[12] = v147;
      *((_QWORD *)&v158[12] + 1) = v29;
      *(_QWORD *)&v158[21] = v146;
      *((_QWORD *)&v158[21] + 1) = v145;
      *(_QWORD *)&v158[22] = __PAIR64__(v143, v144);
      *((_QWORD *)&v158[22] + 1) = v124;
      v158[23] = v125;
      *(_QWORD *)&v158[24] = v126;
      v60 = v97;
      *v97 = v127;
      *(_QWORD *)(v60 + 4) = v128;
      *(_QWORD *)((char *)&v158[25] + 4) = v129;
      *(_QWORD *)(v60 + 20) = v130;
      *(_QWORD *)(v60 + 28) = v131;
      *(_QWORD *)(v60 + 36) = v132;
      *(_QWORD *)(v60 + 44) = v133;
      v60[52] = v134;
      v158[28] = v135;
      LOBYTE(v158[29]) = v136;
      *((_QWORD *)&v158[29] + 1) = v137;
      v158[30] = v138;
      v158[31] = v139;
      v158[32] = v140;
      *(_QWORD *)&v158[33] = v141;
      *(_QWORD *)&v158[34] = v142;
      *(_QWORD *)&v158[0] = v10;
      DWORD1(v158[5]) = v21;
      v158[13] = v106;
      v158[14] = v105;
      v158[15] = v104;
      v158[16] = v103;
      v158[17] = v102;
      v158[18] = v101;
      v158[19] = v100;
      v158[20] = v99;
      *((_QWORD *)&v158[33] + 1) = v38;
      memcpy(v157, v158, 0x228uLL);
      outlined retain of HandsKitData(v158);
      v61 = OperationalEnvelopeProcess.calulcateJointVisibilty(_:_:)((uint64_t)v8, (uint64_t)v157);
      outlined release of HandsKitData(v158);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      if (v9 >= *(_QWORD *)(v10 + 16))
        goto LABEL_32;
      ++v9;
      *(_QWORD *)(v10 + v156 + *(int *)(v4 + 136) + v155 + 8) = v61;
      swift_bridgeObjectRelease();
      *(_QWORD *)a1 = v10;
      outlined destroy of HandDescriptor((uint64_t)v8);
      if (v9 == v94)
        return;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
}

unint64_t OperationalEnvelopeProcess.calulcateJointVisibilty(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  __int128 *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  void *v36;
  float v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  float32x2_t v41;
  float32x2_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  float v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int32 v71;
  __int32 v72;
  __int32 v73;
  __int32 v74;
  int v75;
  _QWORD *v76;
  _OWORD v77[4];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  simd_float4x4 v87;

  v86 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v2 + 21) != 1 || !*(_QWORD *)(a1 + 16) || (*(_BYTE *)(a1 + 128) & 1) == 0)
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = *(_QWORD *)(a2 + 200);
  v5 = *(_QWORD *)(a1 + 24);
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v65 = result;
    v8 = v6 + 32;
    v68 = v5 + 32;
    swift_bridgeObjectRetain();
    v9 = 0;
    v59 = v4;
    v60 = v2;
    v63 = v6;
    v64 = v5;
    v61 = v6 + 32;
    v62 = v7;
    while (1)
    {
      if (v9 >= *(_QWORD *)(v6 + 16))
        goto LABEL_53;
      if (!*(_QWORD *)(v4 + 16))
        goto LABEL_9;
      v10 = v8 + 16 * v9;
      v67 = *(_QWORD *)v10;
      v66 = *(_BYTE *)(v10 + 8);
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)v10, v66);
      if ((v12 & 1) == 0)
        goto LABEL_9;
      v13 = (_OWORD *)(*(_QWORD *)(v4 + 56) + 192 * v11);
      v15 = v13[2];
      v14 = v13[3];
      v16 = v13[1];
      v77[0] = *v13;
      v77[1] = v16;
      v77[2] = v15;
      v77[3] = v14;
      v17 = v13[4];
      v18 = v13[5];
      v19 = v13[7];
      v80 = v13[6];
      v81 = v19;
      v78 = v17;
      v79 = v18;
      v20 = v13[8];
      v21 = v13[9];
      v22 = v13[11];
      v84 = v13[10];
      v85 = v22;
      v82 = v20;
      v83 = v21;
      outlined retain of ImageData((uint64_t)v77);
      if (one-time initialization token for kJointsOfInterest != -1)
        swift_once();
      v23 = static OperationalEnvelopeProcess.kJointsOfInterest;
      v24 = *(_QWORD *)(static OperationalEnvelopeProcess.kJointsOfInterest + 16);
      if (!v24)
      {
        v33 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
        if (v33)
          goto LABEL_27;
LABEL_39:
        v37 = 0.0;
        goto LABEL_40;
      }
      v25 = *(_QWORD *)(v5 + 16);
      swift_bridgeObjectRetain();
      v26 = 0;
      v27 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v29 = *(_QWORD *)(v23 + 8 * v26 + 32);
        if ((v29 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
        }
        if ((uint64_t)v29 < v25)
        {
          if (v29 >= *(_QWORD *)(v5 + 16))
            goto LABEL_52;
          v30 = (__int128 *)(v68 + 32 * v29);
          v69 = v30[1];
          v70 = *v30;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
          v32 = v27[2];
          v31 = v27[3];
          if (v32 >= v31 >> 1)
            v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v27);
          v27[2] = v32 + 1;
          v28 = &v27[4 * v32];
          *((_OWORD *)v28 + 2) = v70;
          *((_OWORD *)v28 + 3) = v69;
        }
        ++v26;
      }
      while (v24 != v26);
      swift_bridgeObjectRelease();
      v33 = v27[2];
      if (!v33)
        goto LABEL_39;
LABEL_27:
      v34 = v78;
      v35 = (_BYTE *)(v78 + 320);
      v36 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      v37 = 0.0;
      v38 = 48;
      do
      {
        v39 = v75;
        if ((v35[80] & 1) != 0)
        {
          v87 = __invert_f4(*(simd_float4x4 *)(v34 + 192));
          *(simd_float4x4 *)(v34 + 256) = v87;
          v87.columns[0].i32[3] = v71;
          v87.columns[1].i32[3] = v72;
          v87.columns[2].i32[3] = v73;
          *v35 = 0;
          v87.columns[3].i32[3] = v74;
          *(simd_float4x4 *)(v34 + 336) = v87;
          v35[80] = 0;
          v39 = v75;
        }
        LOBYTE(v76) = 0;
        if (*(_BYTE *)(v34 + 24))
          v40 = *(_QWORD *)(v34 + 16) != 0;
        else
          v40 = -1;
        v75 = v39;
        objc_msgSend(v36, sel_project3DPointTo2D_withIntrinsics_withDistortion_withImageDimensions_withCameraModel_andValidResultPtr_, v40, &v76, v59);
        if (v76 == 1)
        {
          v42 = vadd_f32(v41, (float32x2_t)0xBF000000BF000000);
          if (sqrtf(vaddv_f32(vmul_f32(v42, v42))) < *(float *)(v60 + 16))
            v37 = v37 + 1.0;
        }
        v38 += 32;
        --v33;
      }
      while (v33);
      swift_bridgeObjectRelease();
      v4 = v59;
LABEL_40:
      swift_bridgeObjectRelease();
      v43 = *(_QWORD *)(static OperationalEnvelopeProcess.kJointsOfInterest + 16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v76 = (_QWORD *)v65;
      v46 = specialized __RawDictionaryStorage.find<A>(_:)(v67, v66);
      v47 = *(_QWORD *)(v65 + 16);
      v48 = (v45 & 1) == 0;
      v49 = v47 + v48;
      v5 = v64;
      if (__OFADD__(v47, v48))
        goto LABEL_54;
      v50 = v45;
      if (*(_QWORD *)(v65 + 24) < v49)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, isUniquelyReferenced_nonNull_native);
        v51 = specialized __RawDictionaryStorage.find<A>(_:)(v67, v66);
        if ((v50 & 1) == (v52 & 1))
        {
          v46 = v51;
          goto LABEL_46;
        }
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
LABEL_46:
      v53 = v37 / (float)v43;
      v54 = v76;
      v65 = (unint64_t)v76;
      if ((v50 & 1) != 0)
      {
        *(float *)(v76[7] + 4 * v46) = v53;
        goto LABEL_8;
      }
      v76[(v46 >> 6) + 8] |= 1 << v46;
      v55 = v54[6] + 16 * v46;
      *(_QWORD *)v55 = v67;
      *(_BYTE *)(v55 + 8) = v66;
      *(float *)(v54[7] + 4 * v46) = v53;
      v56 = v54[2];
      v57 = __OFADD__(v56, 1);
      v58 = v56 + 1;
      if (v57)
        goto LABEL_55;
      v54[2] = v58;
LABEL_8:
      swift_bridgeObjectRelease();
      outlined release of ImageData((uint64_t)v77);
      v7 = v62;
      v6 = v63;
      v8 = v61;
LABEL_9:
      if (++v9 == v7)
      {
        swift_bridgeObjectRelease();
        return v65;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for OperationalEnvelopeProcess()
{
  return objc_opt_self();
}

uint64_t PinchPipeline.loadModelParams(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  BOOL v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  BOOL v15;
  char v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  int v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = v1;
  v5 = (*(uint64_t (**)(void))(*v1 + 216))();
  v6 = v4;
  v7 = v1[3];
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 16) == v5 && *(_QWORD *)(v7 + 24) == (_QWORD)v4;
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v10 = objc_msgSend(a1, sel_AllowInternalModel);
  type metadata accessor for PinchModelParams();
  swift_allocObject();
  v11 = PinchModelParams.init(modelNameOrPath:allowInternalModel:configurationName:)(v5, (uint64_t)v6, v10, 0);
  v2[3] = v11;
  swift_retain();
  swift_release();
  v12 = *(_QWORD *)(v11 + 32);
  v13 = *(void **)(v11 + 40);
  v14 = String.lowercased()();
  v15 = v14._countAndFlagsBits == 0x6F72687473736170 && v14._object == (void *)0xEB00000000686775;
  if (v15
    || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        (v16 & 1) != 0))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for EspressoBuilder();
    static EspressoBuilder.createModel(_:_:)(v12, v13, (uint64_t)&v23);
    swift_bridgeObjectRelease();
    if (v25)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelRegressor);
      type metadata accessor for E5RTRegressor();
      v21 = swift_dynamicCast();
      v22 = v26;
      if (!v21)
        v22 = 0;
    }
    else
    {
      outlined destroy of ModelRegressor?((uint64_t)&v23);
      v22 = 0;
    }
    v2[4] = v22;
    swift_release();
  }
  v23 = xmmword_23D9A9550;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v26 = 0xD00000000000001FLL;
  v27 = 0x800000023D9C9630;
  v17._countAndFlagsBits = v5;
  v17._object = v6;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 8250;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19 = ModelParams.contents()();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 46;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v28 = MEMORY[0x24BEE0D00];
  specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000072, 0x800000023D9C94D0, 54, (uint64_t *)&v23, (uint64_t)&v26, MEMORY[0x24BEE4AF8]);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v26);
}

uint64_t PinchPipeline.run(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  void (*v53)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  int v62;
  int v63;
  char v64;
  _BYTE v65[176];
  _BYTE v66[176];
  _OWORD v67[9];
  _OWORD v68[2];
  __int128 __dst;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;

  v4 = *(_QWORD *)(a1 + 200);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 16)) == 0)
  {
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v74 = 0xD000000000000023;
    *((_QWORD *)&v74 + 1) = 0x800000023D9C95D0;
    if (*(_QWORD *)(a1 + 200))
      swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CameraSource]?);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    *((_QWORD *)&v75 + 1) = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    __dst = xmmword_23D9A9560;
    v71 = 0;
    v70 = 0;
    v10 = MEMORY[0x24BEE4AF8];
    v11 = 74;
    goto LABEL_31;
  }
  v6 = (_QWORD **)v2;
  if (v5 == 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(v2 + 24);
    if (!v8)
      goto LABEL_30;
  }
  else
  {
    v7 = 16;
    if (*(_BYTE *)(a1 + 136))
      v7 = 0;
    v8 = *(_QWORD *)(v2 + 24);
    if (!v8)
      goto LABEL_30;
  }
  v12 = *(_QWORD *)(v2 + 32);
  if (!v12)
    goto LABEL_30;
  v13 = *(_QWORD *)(a2 + 200);
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_30;
  v14 = *(_QWORD *)(a2 + 456);
  v15 = v4 + v7;
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_BYTE *)(v15 + 40);
  swift_retain();
  swift_retain();
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
  if ((v19 & 1) == 0)
    goto LABEL_29;
  v20 = (__int128 *)(*(_QWORD *)(v13 + 56) + 192 * v18);
  v22 = v20[2];
  v21 = v20[3];
  v23 = v20[1];
  v74 = *v20;
  v75 = v23;
  v76 = v22;
  v77 = v21;
  v24 = v20[4];
  v25 = v20[5];
  v26 = v20[7];
  v80 = v20[6];
  v81 = v26;
  v78 = v24;
  v79 = v25;
  v27 = v20[8];
  v28 = v20[9];
  v29 = v20[11];
  v84 = v20[10];
  v85 = v29;
  v82 = v27;
  v83 = v28;
  v30 = type metadata accessor for HandDescriptor();
  v31 = *(_QWORD *)(a1 + *(int *)(v30 + 92));
  if (*(_QWORD *)(v31 + 16))
  {
    outlined retain of ImageData((uint64_t)&v74);
    v32 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    if ((v33 & 1) != 0)
    {
      v34 = (_OWORD *)(*(_QWORD *)(v31 + 56) + 176 * v32);
      v36 = v34[1];
      v35 = v34[2];
      v67[0] = *v34;
      v67[1] = v36;
      v67[2] = v35;
      v37 = v34[3];
      v38 = v34[4];
      v39 = v34[6];
      v67[5] = v34[5];
      v67[6] = v39;
      v67[3] = v37;
      v67[4] = v38;
      v40 = v34[7];
      v41 = v34[8];
      v42 = v34[9];
      *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)((char *)v34 + 153);
      v67[8] = v41;
      v68[0] = v42;
      v67[7] = v40;
      memmove(&__dst, v34, 0xA9uLL);
      _s5Hands13PoseImageCropVSgWOi_(&__dst);
      outlined retain of PoseImageCrop((uint64_t)v67);
    }
    else
    {
      _s5Hands13PoseImageCropVSgWOi0_((uint64_t)v67);
      outlined init with take of PoseImageCrop?((uint64_t)v67, (uint64_t)&__dst);
    }
  }
  else
  {
    _s5Hands13PoseImageCropVSgWOi0_((uint64_t)v67);
    outlined init with take of PoseImageCrop?((uint64_t)v67, (uint64_t)&__dst);
    outlined retain of ImageData((uint64_t)&v74);
  }
  outlined init with take of PoseImageCrop?((uint64_t)&__dst, (uint64_t)v66);
  outlined init with take of PoseImageCrop?((uint64_t)v66, (uint64_t)v67);
  if (_s5Hands13PoseImageCropVSgWOg((uint64_t)v67) != 1)
  {
    v43 = v72;
    v44 = v73;
    outlined init with take of PoseImageCrop?((uint64_t)&__dst, (uint64_t)v65);
    outlined copy of Data?(v43, v44);
    outlined release of PoseImageCrop?((uint64_t)v65);
    if (v44 >> 60 != 15)
    {
      v58 = v43;
      v45 = *(_QWORD *)(a1 + *(int *)(v30 + 116));
      v46 = *(_QWORD *)(v45 + 16);
      if (!v46)
      {
LABEL_27:
        Hands_trace_CBridge_0();
        v49 = specialized static PinchPreprocessing.createNormalizedPoseFeatureVectorWithRefTransform(input:modelParams:)(a1);
        v51 = v50;
        v52 = specialized static PinchPreprocessing.generateInferenceInput(_:_:_:)(a1, v49, v50, v58, v44);
        outlined consume of Data._Representation(v49, v51);
        Hands_trace_CBridge_0();
        Hands_trace_CBridge_0();
        v53 = *(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v6[2] + 168);
        swift_retain();
        v53(&v59, v52, a1, v14, v12, v8);
        swift_release();
        v54 = v59;
        LODWORD(v49) = v60;
        LOBYTE(v53) = v61;
        v55 = v62;
        v56 = v63;
        LOBYTE(v52) = v64;
        Hands_trace_CBridge_0();
        v59 = v54;
        v60 = v49;
        v61 = (char)v53;
        v62 = v55;
        v63 = v56;
        v64 = (char)v52;
        ((void (*)(uint64_t, uint64_t *))(*v6)[30])(a1, &v59);
        swift_release();
        outlined release of ImageData((uint64_t)&v74);
        swift_release();
        swift_release();
        outlined consume of Data?(v58, v44);
        return swift_bridgeObjectRelease();
      }
      v47 = (unint64_t *)(v45 + 40);
      while (1)
      {
        v48 = *v47;
        v47 += 2;
        if (v48 >> 60 == 15)
          break;
        if (!--v46)
          goto LABEL_27;
      }
      outlined consume of Data?(v43, v44);
      outlined release of ImageData((uint64_t)&v74);
LABEL_29:
      swift_release();
      swift_release();
      goto LABEL_30;
    }
  }
  swift_release();
  swift_release();
  outlined release of ImageData((uint64_t)&v74);
LABEL_30:
  *((_QWORD *)&v75 + 1) = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v74 = 0xD000000000000032;
  *((_QWORD *)&v74 + 1) = 0x800000023D9C9550;
  type metadata accessor for HandyLoggerNeo();
  __dst = xmmword_23D9A9560;
  v71 = 0;
  v70 = 0;
  v10 = MEMORY[0x24BEE4AF8];
  v11 = 89;
LABEL_31:
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&__dst, 0xD000000000000072, 0x800000023D9C94D0, v11, (uint64_t)&v74, v10);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v74);
}

uint64_t PinchPipeline.saveResults(hand:modelOutput:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  int v7;
  char v8;
  uint64_t result;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  v5 = *((_BYTE *)a2 + 12);
  v6 = *((_DWORD *)a2 + 4);
  v7 = *((_DWORD *)a2 + 5);
  v8 = *((_BYTE *)a2 + 24);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 256) = v3;
  *(_DWORD *)(a1 + 264) = v4;
  *(_BYTE *)(a1 + 268) = v5;
  *(_DWORD *)(a1 + 272) = v6;
  *(_DWORD *)(a1 + 276) = v7;
  *(_BYTE *)(a1 + 280) = v8;
  return result;
}

Swift::String __swiftcall PinchPipeline.getModelName(_:)(HandsKitConfig *a1)
{
  NSString *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  v1 = -[HandsKitConfig PinchModel](a1, sel_PinchModel);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5 = v2;
  v6 = v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t type metadata accessor for PinchPipeline()
{
  return objc_opt_self();
}

uint64_t outlined init with take of PoseImageCrop?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseImageCrop?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of PoseImageCrop?(uint64_t a1)
{
  outlined consume of PoseImageCrop?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_BYTE *)(a1 + 168));
  return a1;
}

uint64_t outlined destroy of ModelRegressor?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelRegressor?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *specialized PinchPipeline.init(config:inference:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  void *v5;
  void *v6;
  id v7;

  v2[3] = 0;
  v2[4] = 0;
  v5 = (void *)objc_opt_self();
  v6 = (void *)MEMORY[0x2426372E8](0xD000000000000014, 0x800000023D9C9650);
  v7 = objc_msgSend(v5, sel_createHighPriorityQueueWithKey_, v6);

  v2[5] = v7;
  v2[2] = a2;
  swift_retain();
  PinchPipeline.loadModelParams(_:)(a1);
  return v2;
}

uint64_t storeEnumTagSinglePayload for PinchPipelineError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D74E9C0 + 4 * byte_23D9AC715[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D74E9F4 + 4 * byte_23D9AC710[v4]))();
}

uint64_t sub_23D74E9F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D74E9FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D74EA04);
  return result;
}

uint64_t sub_23D74EA10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D74EA18);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D74EA1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D74EA24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PinchPipelineError()
{
  return &type metadata for PinchPipelineError;
}

unint64_t lazy protocol witness table accessor for type PinchPipelineError and conformance PinchPipelineError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchPipelineError and conformance PinchPipelineError;
  if (!lazy protocol witness table cache variable for type PinchPipelineError and conformance PinchPipelineError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchPipelineError, &type metadata for PinchPipelineError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchPipelineError and conformance PinchPipelineError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchPipelineError and conformance PinchPipelineError;
  if (!lazy protocol witness table cache variable for type PinchPipelineError and conformance PinchPipelineError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchPipelineError, &type metadata for PinchPipelineError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchPipelineError and conformance PinchPipelineError);
  }
  return result;
}

Swift::Void __swiftcall MakeRejectorBreakSourceObjectInteractionState.resetPinchAcceptors()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v7;
    if (!v13)
    {
      v7 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_23;
      v13 = *(_QWORD *)(v2 + 8 * v7);
      if (!v13)
      {
        v7 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_23;
        v13 = *(_QWORD *)(v2 + 8 * v7);
        if (!v13)
        {
          v7 = v12 + 3;
          if (v12 + 3 >= v6)
            goto LABEL_23;
          v13 = *(_QWORD *)(v2 + 8 * v7);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v13 - 1) & v13;
    v9 = __clz(__rbit64(v13)) + (v7 << 6);
LABEL_5:
    v10 = *(void (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v1 + 56) + 8 * v9) + 248);
    v11 = swift_retain();
    v10(v11);
    swift_release();
  }
  v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_23:
    swift_release();
    *(_QWORD *)(v0 + 296) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    return;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v7 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v7 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v7);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

Swift::Void __swiftcall MakeRejectorBreakSourceObjectInteractionState.initializeVariables()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  MEMORY[0x24BDAC7A8](v1, v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 320) = 0;
  *(_BYTE *)(v0 + 328) = 1;
  *(_QWORD *)(v0 + 336) = 0;
  *(_BYTE *)(v0 + 344) = 1;
  *(_QWORD *)(v0 + 352) = 0;
  *(_WORD *)(v0 + 360) = 1;
  UnknownStorage.init()();
  v5 = *(int *)(v1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)&v4[v5] = static ObjectInteractionStateInternalPB._StorageClass.defaultInstance;
  v6 = v0 + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__internalData;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of ObjectInteractionStateInternalPB((uint64_t)v4, v6);
  swift_endAccess();
}

uint64_t MakeRejectorBreakSourceObjectInteractionState.updateRemainingInternalData(_:)(char *__src)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int16 v9;
  int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  CMTimeValue value;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t *v40;
  int64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Bool v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  CMTimeValue v86;
  CMTimeEpoch v87;
  uint64_t v88;
  double Seconds;
  double v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  CMTimeEpoch v98;
  CMTimeValue v99;
  uint64_t v100;
  CMTime time[15];
  int v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  int v110;
  char v111;
  __int16 v112;
  char v113;
  int v114;
  int v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  CMTimeValue v122;
  int v123;
  int v124;
  CMTimeEpoch v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  _OWORD v136[2];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _OWORD v147[2];
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  __int16 v154;
  char v155;
  uint64_t v156;
  int v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  _BYTE __dst[360];
  CMTime v164;

  v2 = v1;
  result = (uint64_t)memcpy(__dst, __src, sizeof(__dst));
  v5 = *((_DWORD *)__src + 90);
  v6 = *(_OWORD *)(__src + 412);
  v160 = *(_OWORD *)(__src + 396);
  v161 = v6;
  v162 = *(_OWORD *)(__src + 428);
  v7 = *(_OWORD *)(__src + 380);
  v158 = *(_OWORD *)(__src + 364);
  v159 = v7;
  v8 = *((_DWORD *)__src + 111);
  v156 = *((_QWORD *)__src + 56);
  v157 = *((_DWORD *)__src + 114);
  v96 = __src[460];
  v9 = *(_WORD *)(__src + 461);
  v155 = __src[463];
  v154 = v9;
  v10 = *((_DWORD *)__src + 116);
  v11 = *((_DWORD *)__src + 117);
  v12 = *(_OWORD *)(__src + 520);
  v150 = *(_OWORD *)(__src + 504);
  v151 = v12;
  v152 = *(_OWORD *)(__src + 536);
  v153 = *((_QWORD *)__src + 69);
  v13 = *(_OWORD *)(__src + 488);
  v148 = *(_OWORD *)(__src + 472);
  v149 = v13;
  v14 = *((unsigned int *)__src + 142);
  v97 = *((unsigned int *)__src + 143);
  v98 = *((_QWORD *)__src + 72);
  v99 = *((_QWORD *)__src + 70);
  *(_OWORD *)((char *)v147 + 14) = *(_OWORD *)(__src + 758);
  v15 = *(_OWORD *)(__src + 744);
  v16 = *(_OWORD *)(__src + 712);
  v146 = *(_OWORD *)(__src + 728);
  v147[0] = v15;
  v17 = *(_OWORD *)(__src + 680);
  v144 = *(_OWORD *)(__src + 696);
  v145 = v16;
  v18 = *(_OWORD *)(__src + 648);
  v142 = *(_OWORD *)(__src + 664);
  v143 = v17;
  v19 = *(_OWORD *)(__src + 616);
  v140 = *(_OWORD *)(__src + 632);
  v141 = v18;
  v20 = *(_OWORD *)(__src + 584);
  v138 = *(_OWORD *)(__src + 600);
  v139 = v19;
  v137 = v20;
  v21 = *(unsigned __int8 *)(v1
                           + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__serializeInternalData);
  if (v21 == 2)
  {
    __break(1u);
LABEL_65:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if ((v21 & 1) != 0)
  {
    v22 = *(_QWORD *)(v1 + 320);
    if ((*(_BYTE *)(v1 + 328) & 1) == 0 && ((v22 & 0x8000000000000000) != 0 || HIDWORD(v22)))
      goto LABEL_65;
    v23 = v1 + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__internalData;
    swift_beginAccess();
    v100 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    v24 = *(int *)(v100 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v25 = *(_QWORD *)(v23 + v24);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v24) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v25);
      swift_release();
    }
    v26 = *(_QWORD *)(v23 + v24);
    swift_beginAccess();
    *(_DWORD *)(v26 + 16) = v22;
    swift_endAccess();
    v27 = *(_QWORD *)(v2 + 296);
    v28 = *(_QWORD *)(v27 + 16);
    value = MEMORY[0x24BEE4AF8];
    if (v28)
    {
      v95 = v2;
      time[0].value = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
      value = time[0].value;
      v30 = (_BYTE *)(v27 + 40);
      do
      {
        v31 = *((_QWORD *)v30 - 1);
        if (*v30 == 1)
          v31 = qword_23D9ACA08[v31];
        time[0].value = value;
        v33 = *(_QWORD *)(value + 16);
        v32 = *(_QWORD *)(value + 24);
        if (v33 >= v32 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
          value = time[0].value;
        }
        *(_QWORD *)(value + 16) = v33 + 1;
        *(_QWORD *)(value + 8 * v33 + 32) = v31;
        v30 += 16;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease();
      v2 = v95;
    }
    v34 = specialized Sequence<>.min()(value);
    v36 = v35;
    swift_bridgeObjectRelease();
    if ((v36 & 1) != 0)
    {
      LODWORD(v34) = 0;
    }
    else if ((v34 & 0x8000000000000000) != 0 || HIDWORD(v34))
    {
      goto LABEL_65;
    }
    swift_beginAccess();
    v37 = *(int *)(v100 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v38 = *(_QWORD *)(v23 + v37);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v37) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v38);
      swift_release();
    }
    v39 = *(_QWORD *)(v23 + v37);
    swift_beginAccess();
    *(_DWORD *)(v39 + 28) = v34;
    v40 = *(int64_t **)(v2 + 312);
    swift_beginAccess();
    v41 = specialized CircularBuffer.last.getter(v40[5], v40[6], v40[7]);
    if ((v41 & 0x100000000) != 0)
      v42 = INFINITY;
    else
      v42 = *(float *)&v41;
    v43 = *(int *)(v100 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v44 = *(_QWORD *)(v23 + v43);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v43) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v44);
      swift_release();
    }
    v45 = *(_QWORD *)(v23 + v43);
    swift_beginAccess();
    *(float *)(v45 + 36) = v42;
    swift_endAccess();
    v164.epoch = v98;
    v164.value = v99;
    *(_QWORD *)&v164.timescale = v14 | (v97 << 32);
    v46 = MakeRejectorBreakSourceObjectInteractionState.isInEatingState(_:)(v164);
    swift_beginAccess();
    v47 = *(int *)(v100 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v48 = *(_QWORD *)(v23 + v47);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v47) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v48);
      swift_release();
    }
    v49 = *(_QWORD *)(v23 + v47);
    swift_beginAccess();
    *(_BYTE *)(v49 + 71) = v46;
    swift_endAccess();
    memcpy(time, __dst, sizeof(time));
    v102 = v5;
    v105 = v160;
    v106 = v161;
    v107 = v162;
    v103 = v158;
    v104 = v159;
    v108 = v8;
    v109 = v156;
    v110 = v157;
    v111 = v96;
    v112 = v154;
    v113 = v155;
    v114 = v10;
    v115 = v11;
    v118 = v150;
    v119 = v151;
    v120 = v152;
    v116 = v148;
    v117 = v149;
    v121 = v153;
    v122 = v99;
    v123 = v14;
    v124 = v97;
    v125 = v98;
    *(_OWORD *)((char *)v136 + 14) = *(_OWORD *)((char *)v147 + 14);
    v135 = v146;
    v136[0] = v147[0];
    v133 = v144;
    v134 = v145;
    v131 = v142;
    v132 = v143;
    v129 = v140;
    v130 = v141;
    v127 = v138;
    v128 = v139;
    v126 = v137;
    v50 = MakeRejectorBreakSourceObjectInteractionState.isRecentEating(_:threshold:)((uint64_t)time, *(float *)(v2 + 40));
    swift_beginAccess();
    v51 = *(int *)(v100 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v52 = *(_QWORD *)(v23 + v51);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v51) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v52);
      swift_release();
    }
    v53 = *(_QWORD *)(v23 + v51);
    swift_beginAccess();
    *(_BYTE *)(v53 + 68) = v50;
    v54 = *(_QWORD *)(v2 + 312);
    swift_beginAccess();
    v55 = specialized CircularBuffer.last.getter(*(_QWORD *)(v54 + 40), *(_QWORD *)(v54 + 48), *(_QWORD *)(v54 + 56));
    if ((v55 & 0x100000000) != 0)
      v56 = INFINITY;
    else
      v56 = *(float *)&v55;
    v57 = *(float *)(v54 + 196);
    v58 = *(int *)(v100 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v59 = *(_QWORD *)(v23 + v58);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v58) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v59);
      swift_release();
    }
    v60 = *(_QWORD *)(v23 + v58);
    swift_beginAccess();
    *(_BYTE *)(v60 + 70) = v56 < v57;
    swift_endAccess();
    memcpy(time, __dst, sizeof(time));
    v102 = v5;
    v105 = v160;
    v106 = v161;
    v107 = v162;
    v103 = v158;
    v104 = v159;
    v108 = v8;
    v109 = v156;
    v110 = v157;
    v111 = v96;
    v112 = v154;
    v113 = v155;
    v114 = v10;
    v115 = v11;
    v118 = v150;
    v119 = v151;
    v120 = v152;
    v116 = v148;
    v117 = v149;
    v121 = v153;
    v122 = v99;
    v123 = v14;
    v124 = v97;
    v125 = v98;
    *(_OWORD *)((char *)v136 + 14) = *(_OWORD *)((char *)v147 + 14);
    v135 = v146;
    v136[0] = v147[0];
    v133 = v144;
    v134 = v145;
    v131 = v142;
    v132 = v143;
    v129 = v140;
    v130 = v141;
    v127 = v138;
    v128 = v139;
    v126 = v137;
    v61 = MakeRejectorBreakSourceObjectInteractionState.isRecentIntentionalUIInteraction(_:)((uint64_t)time);
    swift_beginAccess();
    v62 = *(int *)(v100 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v63 = *(_QWORD *)(v23 + v62);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v62) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v63);
      swift_release();
    }
    v64 = *(_QWORD *)(v23 + v62);
    swift_beginAccess();
    *(_BYTE *)(v64 + 69) = v61;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v65 = *(_QWORD *)(v23 + v62);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v62) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v65);
      swift_release();
    }
    v66 = *(_QWORD *)(v23 + v62);
    swift_beginAccess();
    *(_DWORD *)(v66 + 72) = v8;
    v67 = *(_DWORD *)(*(_QWORD *)(v2 + 304) + 80);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v68 = *(_QWORD *)(v23 + v62);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v62) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v68);
      swift_release();
    }
    v69 = *(_QWORD *)(v23 + v62);
    swift_beginAccess();
    *(_DWORD *)(v69 + 40) = v67;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v70 = *(_QWORD *)(v23 + v62);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v62) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v70);
      swift_release();
    }
    v71 = *(_QWORD *)(v23 + v62);
    swift_beginAccess();
    *(_DWORD *)(v71 + 76) = v5;
    v72 = *(_BYTE *)(*(_QWORD *)(v2 + 304) + 84);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v73 = *(_QWORD *)(v23 + v62);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v62) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v73);
      swift_release();
    }
    v74 = *(_QWORD *)(v23 + v62);
    swift_beginAccess();
    *(_BYTE *)(v74 + 104) = v72;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v75 = *(_QWORD *)(v23 + v62);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v62) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v75);
      swift_release();
    }
    v76 = *(_QWORD *)(v23 + v62);
    swift_beginAccess();
    *(_DWORD *)(v76 + 88) = v10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v77 = *(_QWORD *)(v23 + v62);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v62) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v77);
      swift_release();
    }
    v78 = *(_QWORD *)(v23 + v62);
    swift_beginAccess();
    *(_DWORD *)(v78 + 84) = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v79 = *(_QWORD *)(v23 + v62);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v62) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v79);
      swift_release();
    }
    v80 = *(_QWORD *)(v23 + v62);
    swift_beginAccess();
    *(_BYTE *)(v80 + 80) = v96 & 1;
    v81 = *(_QWORD *)(*(_QWORD *)(v2 + 312) + 184);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v82 = *(_QWORD *)(v23 + v62);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v62) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v82);
      swift_release();
    }
    v83 = *(_QWORD *)(v23 + v62);
    swift_beginAccess();
    *(_QWORD *)(v83 + 96) = v81;
    swift_endAccess();
    v84 = *(_QWORD *)(v2 + 312);
    v85 = -1.0;
    if ((*(_BYTE *)(v84 + 180) & 1) == 0)
    {
      v86 = *(_QWORD *)(v84 + 156);
      v87 = *(_QWORD *)(v84 + 172);
      v88 = *(_QWORD *)(v84 + 164);
      swift_retain();
      if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
      {
        time[0].value = v99;
        time[0].timescale = v14;
        time[0].flags = v97;
        time[0].epoch = v98;
        Seconds = CMTimeGetSeconds(time);
        time[0].value = v86;
        *(_QWORD *)&time[0].timescale = v88;
        time[0].epoch = v87;
        v90 = CMTimeGetSeconds(time);
        swift_release();
        v91 = Seconds - v90;
        v85 = fabsf(v91);
      }
      else
      {
        swift_release();
        v85 = INFINITY;
      }
    }
    swift_beginAccess();
    v92 = *(int *)(v100 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v93 = *(_QWORD *)(v23 + v92);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v23 + v92) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v93);
      swift_release();
    }
    v94 = *(_QWORD *)(v23 + v92);
    swift_beginAccess();
    *(float *)(v94 + 108) = v85;
    return swift_endAccess();
  }
  return result;
}

uint64_t MakeRejectorBreakSourceObjectInteractionState.predict(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  float v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  float v25;
  char v26;
  char v27;
  char v28;
  char v29;
  uint64_t result;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;
  float v42;
  CMTimeValue v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  _DWORD *v51;
  _QWORD *v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  CMTimeValue v72;
  uint64_t v73;
  __int128 *v74;
  CMTimeEpoch v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  char v106;
  char v107;
  char v108;
  Swift::Bool v109;
  _DWORD *v110;
  __int128 *v111;
  _OWORD *v112;
  __int128 *v113;
  _DWORD *v114;
  __int16 v115;
  int v116;
  uint64_t v117;
  char v118;
  char v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  int v126;
  char v127;
  char v128;
  char v129;
  char v130;
  char v131;
  CMTimeEpoch v132;
  uint64_t v133;
  CMTimeValue v134;
  char v135;
  __int128 __src;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _BYTE v142[29];
  char v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int16 v148;
  char v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _BYTE v160[19];
  float v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  int v166;
  float v167;
  __int128 v168;
  uint64_t v169;
  char v170;
  char v171;
  char v172;
  char v173;
  int v174;
  uint64_t v175;
  char v176;
  _BYTE v177[7];
  uint64_t v178;
  char v179;
  _BYTE v180[7];
  uint64_t v181;
  char v182;
  char v183;
  char v184;
  char v185;
  char v186;
  _BYTE v187[15];
  float v188;
  __int128 v189;
  CMTimeValue v190;
  int v191;
  int v192;
  CMTimeEpoch v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  _OWORD v204[2];
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  _OWORD v215[2];
  __int128 v216;
  _QWORD v217[2];
  _DWORD v218[2];
  _DWORD v219[2];
  __int128 v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  int v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  _OWORD v237[2];
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int16 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  _OWORD v249[3];
  CMTime v250;

  v5 = a1[5];
  v247 = a1[4];
  v248 = v5;
  v249[0] = a1[6];
  *(_OWORD *)((char *)v249 + 13) = *(__int128 *)((char *)a1 + 109);
  v6 = a1[1];
  v243 = *a1;
  v244 = v6;
  v7 = a1[3];
  v245 = a1[2];
  v246 = v7;
  v116 = *((unsigned __int8 *)a1 + 125);
  v8 = *(__int128 *)((char *)a1 + 142);
  v9 = *(__int128 *)((char *)a1 + 174);
  v240 = *(__int128 *)((char *)a1 + 158);
  v241 = v9;
  v242 = *((_WORD *)a1 + 95);
  v10 = *(__int128 *)((char *)a1 + 126);
  v239 = v8;
  v238 = v10;
  v135 = *((_BYTE *)a1 + 192);
  v11 = (__int128 *)((char *)a1 + 193);
  v12 = *(__int128 *)((char *)a1 + 193);
  v13 = *(__int128 *)((char *)a1 + 209);
  v14 = *(__int128 *)((char *)a1 + 225);
  v230 = *(__int128 *)((char *)a1 + 241);
  v229 = v14;
  v228 = v13;
  v227 = v12;
  v15 = *(__int128 *)((char *)a1 + 257);
  v16 = *(__int128 *)((char *)a1 + 273);
  v17 = *(__int128 *)((char *)a1 + 289);
  v234 = *(__int128 *)((char *)a1 + 305);
  v233 = v17;
  v232 = v16;
  v231 = v15;
  v18 = *(__int128 *)((char *)a1 + 321);
  v19 = *(__int128 *)((char *)a1 + 337);
  v20 = *(__int128 *)((char *)a1 + 353);
  *(_DWORD *)((char *)v237 + 15) = *((_DWORD *)a1 + 92);
  v237[0] = v20;
  v236 = v19;
  v235 = v18;
  v21 = *((float *)a1 + 93);
  v22 = (__int128 *)((char *)a1 + 376);
  v23 = *(__int128 *)((char *)a1 + 424);
  v224 = *(__int128 *)((char *)a1 + 408);
  v225 = v23;
  v226 = *((_DWORD *)a1 + 110);
  v24 = *(__int128 *)((char *)a1 + 376);
  v223 = *(__int128 *)((char *)a1 + 392);
  v222 = v24;
  v25 = *((float *)a1 + 111);
  v220 = a1[28];
  v221 = *((_QWORD *)a1 + 58);
  v26 = *((_BYTE *)a1 + 472);
  v27 = *((_BYTE *)a1 + 473);
  v28 = *((_BYTE *)a1 + 474);
  v29 = *((_BYTE *)a1 + 475);
  result = *((unsigned int *)a1 + 119);
  v31 = *((_QWORD *)a1 + 60);
  v32 = *((_BYTE *)a1 + 488);
  v219[0] = *(_DWORD *)((char *)a1 + 489);
  *(_DWORD *)((char *)v219 + 3) = *((_DWORD *)a1 + 123);
  v33 = *((_QWORD *)a1 + 62);
  v34 = *((_BYTE *)a1 + 504);
  v218[0] = *(_DWORD *)((char *)a1 + 505);
  *(_DWORD *)((char *)v218 + 3) = *((_DWORD *)a1 + 127);
  v35 = *((_QWORD *)a1 + 64);
  v36 = *((_BYTE *)a1 + 520);
  v37 = *((_BYTE *)a1 + 521);
  v38 = *((_BYTE *)a1 + 522);
  v39 = *((_BYTE *)a1 + 523);
  v40 = *((_BYTE *)a1 + 524);
  v41 = *(_QWORD *)((char *)a1 + 525);
  *(_QWORD *)((char *)v217 + 7) = *(_QWORD *)((char *)a1 + 532);
  v217[0] = v41;
  v42 = *((float *)a1 + 135);
  v216 = a1[34];
  v43 = *((_QWORD *)a1 + 70);
  v44 = *((unsigned int *)a1 + 142);
  *(_OWORD *)((char *)v215 + 14) = *(__int128 *)((char *)a1 + 758);
  v215[0] = *(__int128 *)((char *)a1 + 744);
  v45 = *(__int128 *)((char *)a1 + 712);
  v214 = *(__int128 *)((char *)a1 + 728);
  v213 = v45;
  v46 = *(__int128 *)((char *)a1 + 680);
  v212 = *(__int128 *)((char *)a1 + 696);
  v211 = v46;
  v47 = *(__int128 *)((char *)a1 + 648);
  v210 = *(__int128 *)((char *)a1 + 664);
  v209 = v47;
  v48 = *(__int128 *)((char *)a1 + 616);
  v208 = *(__int128 *)((char *)a1 + 632);
  v207 = v48;
  v49 = *(__int128 *)((char *)a1 + 584);
  v206 = *(__int128 *)((char *)a1 + 600);
  v205 = v49;
  if ((*(_BYTE *)(v2 + 16) & 1) == 0)
  {
    *(_QWORD *)a2 = 0;
    *(_WORD *)(a2 + 8) = 256;
    *(_QWORD *)(a2 + 16) = 0;
    *(_WORD *)(a2 + 24) = 256;
    *(_QWORD *)(a2 + 32) = 0;
    *(_WORD *)(a2 + 40) = 256;
    *(_QWORD *)(a2 + 48) = 0;
    *(_WORD *)(a2 + 56) = 256;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 2;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 138) = 0u;
    return result;
  }
  v114 = (_DWORD *)((char *)a1 + 505);
  v119 = v38;
  v117 = *((unsigned int *)a1 + 143);
  v120 = v36;
  v121 = v35;
  v132 = *((_QWORD *)a1 + 72);
  v133 = v44;
  v122 = v34;
  v123 = v33;
  v124 = v32;
  v125 = v31;
  v126 = result;
  v127 = v28;
  v128 = v27;
  v129 = v26;
  v130 = v40;
  v131 = v39;
  v134 = v43;
  if (v116 == 2)
  {
    __break(1u);
    return result;
  }
  v111 = (__int128 *)((char *)a1 + 126);
  v113 = a1 + 28;
  v118 = v29;
  v50 = v29 & 1;
  Hands_trace_CBridge_2();
  MakeRejectorBreakSourceObjectInteractionState.initializeVariables()();
  v112 = (_OWORD *)a2;
  if (*(_BYTE *)(v2 + 282) == 1)
  {
    v51 = (_DWORD *)((char *)a1 + 489);
    if ((v135 & 1) == 0)
    {
      v52 = (_QWORD *)((char *)a1 + 525);
      v53 = a1 + 34;
      if (!v50 || (LOBYTE(v50) = 1, v21 < (float)(1.0 - v42)))
      {
        LOBYTE(v50) = 0;
        *(_BYTE *)(v2 + 361) = 1;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v51 = (_DWORD *)((char *)a1 + 489);
  }
  v52 = (_QWORD *)((char *)a1 + 525);
  v53 = a1 + 34;
LABEL_11:
  v54 = a1[5];
  v140 = a1[4];
  v141 = v54;
  *(_OWORD *)v142 = a1[6];
  *(_OWORD *)&v142[13] = *(__int128 *)((char *)a1 + 109);
  v55 = a1[1];
  __src = *a1;
  v137 = v55;
  v56 = a1[3];
  v138 = a1[2];
  v139 = v56;
  v57 = *v111;
  v145 = *(__int128 *)((char *)a1 + 142);
  v58 = *(__int128 *)((char *)a1 + 174);
  v146 = *(__int128 *)((char *)a1 + 158);
  *(_BYTE *)(v2 + 282) = v50;
  v143 = v116;
  v147 = v58;
  v148 = *((_WORD *)a1 + 95);
  v144 = v57;
  v149 = v135;
  v59 = v11[9];
  v158 = v11[8];
  v159 = v59;
  *(_OWORD *)v160 = v11[10];
  v60 = v11[5];
  v154 = v11[4];
  v155 = v60;
  v61 = v11[7];
  v156 = v11[6];
  v157 = v61;
  *(_DWORD *)&v160[15] = *(_DWORD *)((char *)v11 + 175);
  v62 = v11[1];
  v150 = *v11;
  v151 = v62;
  v63 = v11[3];
  v152 = v11[2];
  v153 = v63;
  v161 = v21;
  v64 = v22[3];
  v164 = v22[2];
  v165 = v64;
  v65 = v22[1];
  v162 = *v22;
  v163 = v65;
  v166 = *((_DWORD *)v22 + 16);
  v167 = v25;
  v168 = *v113;
  v169 = *((_QWORD *)a1 + 58);
  v170 = v129;
  v171 = v128;
  v172 = v127;
  v173 = v118;
  v174 = v126;
  v175 = v125;
  v176 = v124;
  v110 = v51;
  *(_DWORD *)v177 = *v51;
  *(_DWORD *)&v177[3] = *(_DWORD *)((char *)v51 + 3);
  v178 = v123;
  v179 = v122;
  *(_DWORD *)v180 = *v114;
  *(_DWORD *)&v180[3] = *((_DWORD *)a1 + 127);
  v181 = v121;
  v182 = v120;
  v183 = v37;
  v184 = v119;
  v185 = v131;
  v186 = v130;
  *(_QWORD *)&v187[7] = *(_QWORD *)((char *)v52 + 7);
  *(_QWORD *)v187 = *v52;
  v188 = v42;
  v189 = *v53;
  v190 = v134;
  v191 = v133;
  v192 = v117;
  v193 = v132;
  v66 = *(__int128 *)((char *)a1 + 632);
  v196 = *(__int128 *)((char *)a1 + 616);
  v197 = v66;
  v67 = *(__int128 *)((char *)a1 + 600);
  v194 = *(__int128 *)((char *)a1 + 584);
  v195 = v67;
  v68 = *(__int128 *)((char *)a1 + 696);
  v200 = *(__int128 *)((char *)a1 + 680);
  v201 = v68;
  v69 = *(__int128 *)((char *)a1 + 664);
  v198 = *(__int128 *)((char *)a1 + 648);
  v199 = v69;
  *(_OWORD *)((char *)v204 + 14) = *(__int128 *)((char *)a1 + 758);
  v70 = *(__int128 *)((char *)a1 + 744);
  v71 = *(__int128 *)((char *)a1 + 712);
  v203 = *(__int128 *)((char *)a1 + 728);
  v204[0] = v70;
  v202 = v71;
  v72 = *(_QWORD *)(v2 + 164);
  v73 = *(_QWORD *)(v2 + 172);
  v74 = v22;
  v75 = *(_QWORD *)(v2 + 180);
  swift_retain();
  HandApproachingMouthManager.process(_:_:)((uint64_t)&__src, v72, v73, v75);
  swift_release();
  MakeRejectorBreakSourceObjectInteractionState.updateStrictEatingMode()();
  v76 = a1[4];
  v77 = a1[5];
  v78 = a1[6];
  v79 = *(__int128 *)((char *)a1 + 109);
  v80 = *a1;
  v81 = a1[1];
  v82 = a1[2];
  v83 = a1[3];
  v148 = *((_WORD *)a1 + 95);
  v84 = *(__int128 *)((char *)a1 + 158);
  v85 = *(__int128 *)((char *)a1 + 174);
  v86 = *v111;
  v87 = *(__int128 *)((char *)a1 + 142);
  *(_OWORD *)v160 = v11[10];
  *(_DWORD *)&v160[15] = *(_DWORD *)((char *)v11 + 175);
  v89 = v11[8];
  v88 = v11[9];
  v91 = v11[6];
  v90 = v11[7];
  v93 = v11[4];
  v92 = v11[5];
  v95 = v11[2];
  v94 = v11[3];
  v97 = *v11;
  v96 = v11[1];
  v98 = v74[2];
  v99 = v74[3];
  v101 = *v74;
  v100 = v74[1];
  v166 = *((_DWORD *)v74 + 16);
  v102 = *v113;
  v169 = *((_QWORD *)a1 + 58);
  *(_DWORD *)v177 = *v110;
  *(_DWORD *)&v177[3] = *(_DWORD *)((char *)v110 + 3);
  *(_DWORD *)v180 = *v114;
  *(_DWORD *)&v180[3] = *((_DWORD *)a1 + 127);
  *(_QWORD *)&v187[7] = *(_QWORD *)((char *)a1 + 532);
  *(_QWORD *)v187 = *(_QWORD *)((char *)a1 + 525);
  v140 = v76;
  v141 = v77;
  *(_OWORD *)v142 = v78;
  *(_OWORD *)&v142[13] = v79;
  __src = v80;
  v137 = v81;
  v138 = v82;
  v139 = v83;
  v145 = v87;
  v146 = v84;
  v147 = v85;
  v144 = v86;
  v158 = v89;
  v159 = v88;
  v156 = v91;
  v157 = v90;
  v154 = v93;
  v155 = v92;
  v153 = v94;
  v152 = v95;
  v151 = v96;
  v150 = v97;
  v164 = v98;
  v165 = v99;
  v143 = v116;
  v149 = v135;
  v161 = v21;
  v162 = v101;
  v163 = v100;
  v167 = v25;
  v168 = v102;
  v170 = v129;
  v171 = v128;
  v172 = v127;
  v173 = v118;
  v174 = v126;
  v175 = v125;
  v176 = v124;
  v178 = v123;
  v179 = v122;
  v181 = v121;
  v182 = v120;
  v183 = v37;
  v184 = v119;
  v185 = v131;
  v186 = v130;
  v188 = v42;
  v189 = v216;
  v190 = v134;
  v191 = v133;
  v192 = v117;
  v193 = v132;
  v196 = v207;
  v197 = v208;
  v194 = v205;
  v195 = v206;
  v200 = v211;
  v201 = v212;
  v198 = v209;
  v199 = v210;
  *(_OWORD *)((char *)v204 + 14) = *(_OWORD *)((char *)v215 + 14);
  v203 = v214;
  v204[0] = v215[0];
  v202 = v213;
  v103 = MakeRejectorBreakSourceObjectInteractionState.getEnterObjectInteractionStateReason(_:)((uint64_t)&__src);
  if ((v104 & 0x100) == 0)
  {
    v105 = v103;
    v106 = v104;
    if ((*(_BYTE *)(v2 + 160) & 1) == 0)
      MakeRejectorBreakSourceObjectInteractionState.resetPinchAcceptors()();
    *(_BYTE *)(v2 + 160) = 1;
    *(_QWORD *)(v2 + 336) = v105;
    *(_BYTE *)(v2 + 344) = v106 & 1;
    *(_QWORD *)(v2 + 164) = v134;
    *(_DWORD *)(v2 + 172) = v133;
    *(_DWORD *)(v2 + 176) = v117;
    *(_QWORD *)(v2 + 180) = v132;
  }
  v140 = v247;
  v141 = v248;
  *(_OWORD *)v142 = v249[0];
  *(_OWORD *)&v142[13] = *(_OWORD *)((char *)v249 + 13);
  __src = v243;
  v137 = v244;
  v138 = v245;
  v139 = v246;
  v145 = v239;
  v146 = v240;
  *(_OWORD *)v160 = v237[0];
  v148 = v242;
  *(_DWORD *)&v160[15] = *(_DWORD *)((char *)v237 + 15);
  v166 = v226;
  v169 = v221;
  *(_DWORD *)v177 = v219[0];
  *(_DWORD *)&v177[3] = *(_DWORD *)((char *)v219 + 3);
  *(_DWORD *)v180 = v218[0];
  *(_DWORD *)&v180[3] = *(_DWORD *)((char *)v218 + 3);
  *(_QWORD *)&v187[7] = *(_QWORD *)((char *)v217 + 7);
  *(_QWORD *)v187 = v217[0];
  v143 = v116;
  v147 = v241;
  v144 = v238;
  v149 = v135;
  v158 = v235;
  v159 = v236;
  v154 = v231;
  v155 = v232;
  v156 = v233;
  v157 = v234;
  v150 = v227;
  v151 = v228;
  v152 = v229;
  v153 = v230;
  v161 = v21;
  v164 = v224;
  v165 = v225;
  v162 = v222;
  v163 = v223;
  v167 = v25;
  v168 = v220;
  v170 = v129;
  v171 = v128;
  v172 = v127;
  v173 = v118;
  v174 = v126;
  v175 = v125;
  v176 = v124;
  v178 = v123;
  v179 = v122;
  v181 = v121;
  v182 = v120;
  v183 = v37;
  v184 = v119;
  v185 = v131;
  v186 = v130;
  v188 = v42;
  v189 = v216;
  v190 = v134;
  v191 = v133;
  v192 = v117;
  v193 = v132;
  v196 = v207;
  v197 = v208;
  v194 = v205;
  v195 = v206;
  v200 = v211;
  v201 = v212;
  v198 = v209;
  v199 = v210;
  *(_OWORD *)((char *)v204 + 14) = *(_OWORD *)((char *)v215 + 14);
  v203 = v214;
  v204[0] = v215[0];
  v202 = v213;
  v115 = MakeRejectorBreakSourceObjectInteractionState.processExitObjectInteractionState(_:)((unsigned int *)&__src);
  *(_DWORD *)v177 = v219[0];
  *(_DWORD *)v180 = v218[0];
  *(_QWORD *)&v187[7] = *(_QWORD *)((char *)v217 + 7);
  *(_QWORD *)v187 = v217[0];
  v143 = v116;
  v148 = v242;
  v149 = v135;
  v158 = v235;
  v159 = v236;
  *(_OWORD *)v160 = v237[0];
  v154 = v231;
  v155 = v232;
  v156 = v233;
  v157 = v234;
  *(_DWORD *)&v160[15] = *(_DWORD *)((char *)v237 + 15);
  v145 = v239;
  v146 = v240;
  v147 = v241;
  v150 = v227;
  v151 = v228;
  v152 = v229;
  v153 = v230;
  v164 = v224;
  v165 = v225;
  v162 = v222;
  v163 = v223;
  v166 = v226;
  v169 = v221;
  v170 = v129;
  v171 = v128;
  v172 = v127;
  v173 = v118;
  v174 = v126;
  v175 = v125;
  v176 = v124;
  *(_DWORD *)&v177[3] = *(_DWORD *)((char *)v219 + 3);
  v178 = v123;
  v179 = v122;
  *(_DWORD *)&v180[3] = *(_DWORD *)((char *)v218 + 3);
  v181 = v121;
  v182 = v120;
  v183 = v37;
  v184 = v119;
  v202 = v213;
  v203 = v214;
  v204[0] = v215[0];
  *(_OWORD *)((char *)v204 + 14) = *(_OWORD *)((char *)v215 + 14);
  v198 = v209;
  v199 = v210;
  v200 = v211;
  v201 = v212;
  v194 = v205;
  v195 = v206;
  v196 = v207;
  v197 = v208;
  v140 = v247;
  v141 = v248;
  *(_OWORD *)v142 = v249[0];
  *(_OWORD *)&v142[13] = *(_OWORD *)((char *)v249 + 13);
  __src = v243;
  v137 = v244;
  v138 = v245;
  v139 = v246;
  v185 = v131;
  v107 = *(_BYTE *)(v2 + 160);
  v186 = v130;
  if (v25 < 0.25)
    v108 = v107;
  else
    v108 = 0;
  v144 = v238;
  v161 = v21;
  v167 = v25;
  v168 = v220;
  v188 = v42;
  v189 = v216;
  v190 = v134;
  v191 = v133;
  v192 = v117;
  v193 = v132;
  MakeRejectorBreakSourceObjectInteractionState.updateRemainingInternalData(_:)((char *)&__src);
  *(_QWORD *)&v250.timescale = v133 | (v117 << 32);
  v250.value = v134;
  v250.epoch = v132;
  v109 = MakeRejectorBreakSourceObjectInteractionState.isInEatingState(_:)(v250);
  MakeRejectorBreakSourceObjectInteractionState.createUnitResult(previousPinchDown:isInObjectInteractionState:pinchAcceptorsOutput:shouldBreakPinch:inEatingState:lastFrameInEatingState:)(v135 & 1, v107, v115 & 0x101, v108, v109, *(_BYTE *)(v2 + 283), v112);
  *(_BYTE *)(v2 + 283) = v109;
  return Hands_trace_CBridge_2();
}

double MakeRejectorBreakSourceObjectInteractionState.createUnitResult(previousPinchDown:isInObjectInteractionState:pinchAcceptorsOutput:shouldBreakPinch:inEatingState:lastFrameInEatingState:)@<D0>(char a1@<W0>, char a2@<W1>, __int16 a3@<W2>, char a4@<W5>, char a5@<W6>, unsigned __int8 a6@<W7>, _OWORD *a7@<X8>)
{
  uint64_t v7;
  _BYTE *v12;
  int v13;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double result;
  __int128 v35;
  uint64_t v38[5];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[2];

  *(_QWORD *)&v39 = 0;
  WORD4(v39) = 256;
  *(_QWORD *)&v40 = 0;
  WORD4(v40) = 256;
  *(_QWORD *)&v41 = 0;
  v12 = (_BYTE *)(v7 + 281);
  WORD4(v41) = 256;
  v13 = a6;
  *(_QWORD *)&v42 = 0;
  WORD4(v42) = 256;
  v43 = 0u;
  v44 = 0u;
  *(_QWORD *)&v45 = 0;
  *((_QWORD *)&v45 + 1) = 2;
  v46 = 0u;
  memset(v47, 0, 26);
  v38[3] = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v38[4] = lazy protocol witness table accessor for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB(&lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionStateInternalPB);
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v38);
  v15 = v7 + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__internalData;
  swift_beginAccess();
  outlined init with copy of ObjectInteractionStateInternalPB(v15, (uint64_t)boxed_opaque_existential_0);
  outlined assign with take of PinchInternalDataType?((uint64_t)v38, (uint64_t)&v43);
  if (*(_BYTE *)(v7 + 17) != 1)
  {
    if ((a5 & 1) == 0 || v13 == 2)
      goto LABEL_10;
LABEL_7:
    if ((v13 & 1) == 0)
    {
      if ((a2 & 1) == 0)
        goto LABEL_25;
      *(_QWORD *)(v7 + 336) = 3;
      *(_BYTE *)(v7 + 344) = 1;
    }
LABEL_10:
    if ((a2 & 1) == 0 || (a3 & 1) != 0)
      goto LABEL_25;
    if ((a1 & 1) == 0)
    {
      v16 = (char *)&v40 + 8;
      v17 = (char *)&v40 + 9;
      *(_QWORD *)&v40 = 4;
      goto LABEL_24;
    }
    if ((a4 & 1) != 0)
    {
      v16 = (char *)&v41 + 8;
      v17 = (char *)&v41 + 9;
      *(_QWORD *)&v41 = 6;
LABEL_24:
      *v16 = 1;
      *v17 = 0;
    }
LABEL_25:
    if ((a3 & 0x100) != 0)
    {
      *(_QWORD *)&v41 = 0;
      WORD4(v41) = 256;
      *(_QWORD *)&v40 = 0;
      WORD4(v40) = 256;
      *(_QWORD *)&v39 = 6;
      WORD4(v39) = 1;
    }
    v19 = *(_QWORD *)(v7 + 336);
    v18 = *(unsigned __int8 *)(v7 + 344);
    v20 = *(_QWORD *)(v7 + 352);
    if (*(_BYTE *)(v7 + 160))
      v25 = 256;
    else
      v25 = 0;
    v26 = v25 & 0xFFFFFFFFFFFFFFFELL | a5 & 1;
    v27 = 0x10000;
    if (!*v12)
      v27 = 0;
    v23 = v26 | v27;
    if (*(_BYTE *)(v7 + 361))
      v28 = 256;
    else
      v28 = 0;
    v24 = v28 | *(unsigned __int8 *)(v7 + 360);
LABEL_36:
    v29 = *(unsigned __int8 *)(v7 + 328);
    v30 = *(_QWORD *)(v7 + 320);
    *((_QWORD *)&v45 + 1) = v23;
    *(_QWORD *)&v46 = v30;
    *((_QWORD *)&v46 + 1) = v29;
    *(_QWORD *)&v47[0] = v19;
    *((_QWORD *)&v47[0] + 1) = v18;
    *(_QWORD *)&v47[1] = v20;
    WORD4(v47[1]) = v24;
    goto LABEL_37;
  }
  if ((a5 & 1) != 0)
  {
    if (v13 == 2)
      goto LABEL_10;
    goto LABEL_7;
  }
  *(_QWORD *)(v7 + 336) = 0;
  v18 = 1;
  *(_BYTE *)(v7 + 344) = 1;
  if ((v13 & 1) != 0)
  {
    v19 = 0;
    v20 = 11;
    *(_QWORD *)(v7 + 352) = 11;
    *(_BYTE *)(v7 + 360) = 1;
    v21 = 256;
    if (!*(_BYTE *)(v7 + 160))
      v21 = 0;
    v22 = 0x10000;
    if (!*v12)
      v22 = 0;
    v23 = v22 | v21;
    if (*(_BYTE *)(v7 + 361))
      v24 = 257;
    else
      v24 = 1;
    goto LABEL_36;
  }
LABEL_37:
  v31 = v46;
  a7[6] = v45;
  a7[7] = v31;
  a7[8] = v47[0];
  *(_OWORD *)((char *)a7 + 138) = *(_OWORD *)((char *)v47 + 10);
  v32 = v42;
  a7[2] = v41;
  a7[3] = v32;
  v33 = v44;
  a7[4] = v43;
  a7[5] = v33;
  result = *(double *)&v39;
  v35 = v40;
  *a7 = v39;
  a7[1] = v35;
  return result;
}

Swift::Bool __swiftcall MakeRejectorBreakSourceObjectInteractionState.isInEatingState(_:)(CMTime a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  _QWORD *v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  CMTimeValue v22;
  CMTimeFlags v23;
  CMTimeScale v24;
  CMTimeEpoch v25;
  float v26;
  int v27;
  float v28;
  double Seconds;
  float v30;
  float v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  _BOOL4 v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  CMTimeFlags flags;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  CMTimeScale timescale;
  CMTimeValue value;
  CMTimeEpoch epoch;
  int v51;
  CMTime time;

  value = a1.value;
  epoch = a1.epoch;
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
  if (!v2)
  {
LABEL_48:
    LOBYTE(a1.value) = 0;
    return a1.value;
  }
  v3 = 0;
  timescale = a1.timescale;
  flags = a1.flags;
LABEL_5:
  v4 = *(_QWORD *)(v1 + 56);
  if (v3 >= *(_QWORD *)(v4 + 16))
    goto LABEL_51;
  v47 = *(unsigned __int8 *)(v4 + v3 + 32);
  if ((v47 & 1) == 0 && *(_BYTE *)(v1 + 44) != 1)
    goto LABEL_4;
  v5 = *(_QWORD *)(v1 + 48);
  if (v3 >= *(_QWORD *)(v5 + 16))
    goto LABEL_52;
  v6 = *(_QWORD *)(v1 + 72);
  if (v3 >= *(_QWORD *)(v6 + 16))
    goto LABEL_53;
  v7 = *(_QWORD *)(v5 + 8 * v3 + 32);
  v8 = *(float *)(v6 + 4 * v3 + 32);
  v9 = *(_QWORD **)(v1 + 312);
  v10 = *(float *)(v1 + 64);
  LOBYTE(a1.value) = swift_beginAccess();
  v11 = v9[15];
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    if (!v7)
      goto LABEL_47;
    goto LABEL_4;
  }
  v41 = v3;
  v13 = v9[14];
  v14 = v9[16];
  if (v12 == v13)
    v15 = v9[16];
  else
    v15 = 0;
  if (*(_QWORD *)(v11 + 24) >= 2uLL)
  {
    v16 = __OFSUB__(v14, 1);
    v17 = v14 - 1;
    if (v16)
      goto LABEL_54;
    v18 = v17 + v13;
    if (__OFADD__(v17, v13))
      goto LABEL_55;
    if (!v13)
      goto LABEL_56;
    if (v13 == -1 && v18 == 0x8000000000000000)
      goto LABEL_58;
    swift_retain();
    LOBYTE(a1.value) = swift_bridgeObjectRetain();
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_57;
    if (v15 >= v12)
    {
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      return a1.value;
    }
    v43 = v18 % v13;
    v44 = v7;
    v45 = v11 + 32;
    v46 = 0;
    while (1)
    {
      v19 = v11;
      v20 = v9;
      v21 = v45 + 72 * v15;
      v22 = *(_QWORD *)v21;
      v24 = *(_DWORD *)(v21 + 8);
      v23 = *(_DWORD *)(v21 + 12);
      v25 = *(_QWORD *)(v21 + 16);
      v26 = *(float *)(v21 + 24);
      v51 = *(unsigned __int8 *)(v21 + 28);
      v27 = *(unsigned __int8 *)(v21 + 64);
      v28 = *(float *)(v21 + 68);
      swift_bridgeObjectRetain();
      if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
      {
        time.value = value;
        time.timescale = timescale;
        time.flags = flags;
        time.epoch = epoch;
        Seconds = CMTimeGetSeconds(&time);
        time.value = v22;
        time.timescale = v24;
        time.flags = v23;
        time.epoch = v25;
        v30 = Seconds - CMTimeGetSeconds(&time);
        v31 = fabsf(v30);
      }
      else
      {
        v31 = INFINITY;
      }
      v11 = v19;
      if (v26 >= v10)
        v32 = v47;
      else
        v32 = 0;
      v9 = v20;
      v33 = *((unsigned __int8 *)v20 + 220);
      LOBYTE(a1.value) = swift_bridgeObjectRelease();
      if (v33 == 1)
      {
        v34 = v51 ^ 1;
        v35 = v44;
        if (v26 < v10)
        {
          v36 = 1;
          goto LABEL_37;
        }
      }
      else
      {
        v36 = 1;
        v34 = 1;
        v35 = v44;
        if (v26 < v10)
          goto LABEL_37;
      }
      v36 = v28 < *((float *)v20 + 50);
LABEL_37:
      v37 = v27 | v34 ^ 1;
      if (v31 >= v8)
        v37 = 1;
      if (((v37 | v32) & 1) == 0 && v36)
      {
        if (v46 == -1)
          goto LABEL_50;
        ++v46;
      }
      if (v15 == v43)
      {
        swift_release();
        LOBYTE(a1.value) = swift_bridgeObjectRelease();
        v2 = v39;
        v1 = v40;
        v3 = v41;
        if (v46 >= v35)
          goto LABEL_47;
LABEL_4:
        if (++v3 == v2)
          goto LABEL_48;
        goto LABEL_5;
      }
      v15 = (v15 + 1) % v12;
      v12 = *(_QWORD *)(v19 + 16);
      if (v15 >= v12)
        goto LABEL_49;
    }
  }
  v3 = v41;
  if (v7)
    goto LABEL_4;
LABEL_47:
  LOBYTE(a1.value) = 1;
  return a1.value;
}

uint64_t MakeRejectorBreakSourceObjectInteractionState.getEnterObjectInteractionStateReason(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  CMTimeValue v4;
  uint64_t v5;
  uint64_t v6;
  CMTimeEpoch v7;
  __int128 *v8;
  Swift::Float v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  BOOL v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  _DWORD __dst[144];
  CMTimeValue v39;
  int v40;
  int v41;
  CMTimeEpoch v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[3];
  CMTime v54;
  CMTime v55;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 560);
  v5 = *(unsigned int *)(a1 + 568);
  v6 = *(unsigned int *)(a1 + 572);
  v7 = *(_QWORD *)(a1 + 576);
  v8 = (__int128 *)(a1 + 584);
  v9 = *(float *)(v1 + 92);
  swift_retain();
  v54.value = v4;
  *(_QWORD *)&v54.timescale = v5 | (v6 << 32);
  v54.epoch = v7;
  __dst[2] = HandApproachingMouthManager.isRestrictedCloseToMouth(_:_:)(v54, v9);
  swift_release();
  memcpy(&__dst[4], (const void *)a1, 0x230uLL);
  v39 = v4;
  v40 = v5;
  v41 = v6;
  v42 = v7;
  v10 = v8[9];
  v51 = v8[8];
  v52 = v10;
  v53[0] = v8[10];
  *(_OWORD *)((char *)v53 + 14) = *(__int128 *)((char *)v8 + 174);
  v11 = v8[5];
  v47 = v8[4];
  v48 = v11;
  v12 = v8[7];
  v49 = v8[6];
  v50 = v12;
  v13 = v8[1];
  v43 = *v8;
  v44 = v13;
  v14 = v8[3];
  v45 = v8[2];
  v46 = v14;
  v15 = MakeRejectorBreakSourceObjectInteractionState.isRecentInteraction(_:threshold:)((uint64_t)&__dst[4], *(float *)(v1 + 40));
  if ((__dst[2] & 1) != 0 && v15)
  {
    *(_QWORD *)(v1 + 188) = v4;
    *(_DWORD *)(v1 + 196) = v5;
    *(_DWORD *)(v1 + 200) = v6;
    *(_QWORD *)(v1 + 204) = v7;
  }
  memcpy(&__dst[4], (const void *)a1, 0x230uLL);
  v39 = v4;
  v40 = v5;
  v41 = v6;
  v42 = v7;
  v16 = v8[9];
  v51 = v8[8];
  v52 = v16;
  v53[0] = v8[10];
  *(_OWORD *)((char *)v53 + 14) = *(__int128 *)((char *)v8 + 174);
  v17 = v8[5];
  v47 = v8[4];
  v48 = v17;
  v18 = v8[7];
  v49 = v8[6];
  v50 = v18;
  v19 = v8[1];
  v43 = *v8;
  v44 = v19;
  v20 = v8[3];
  v45 = v8[2];
  v46 = v20;
  v37 = MakeRejectorBreakSourceObjectInteractionState.isRecentEating(_:threshold:)((uint64_t)&__dst[4], *(float *)(v1 + 40));
  memcpy(&__dst[4], (const void *)a1, 0x230uLL);
  v39 = v4;
  v40 = v5;
  v41 = v6;
  v42 = v7;
  v21 = v8[9];
  v51 = v8[8];
  v52 = v21;
  v53[0] = v8[10];
  *(_OWORD *)((char *)v53 + 14) = *(__int128 *)((char *)v8 + 174);
  v22 = v8[5];
  v47 = v8[4];
  v48 = v22;
  v23 = v8[7];
  v49 = v8[6];
  v50 = v23;
  v24 = v8[1];
  v43 = *v8;
  v44 = v24;
  v25 = v8[3];
  v45 = v8[2];
  v46 = v25;
  v36 = MakeRejectorBreakSourceObjectInteractionState.isRecentIntentionalUIInteraction(_:)((uint64_t)&__dst[4]);
  memcpy(&__dst[4], (const void *)a1, 0x230uLL);
  v39 = v4;
  v40 = v5;
  v41 = v6;
  v42 = v7;
  v26 = v8[9];
  v51 = v8[8];
  v52 = v26;
  v53[0] = v8[10];
  *(_OWORD *)((char *)v53 + 14) = *(__int128 *)((char *)v8 + 174);
  v27 = v8[5];
  v47 = v8[4];
  v48 = v27;
  v28 = v8[7];
  v49 = v8[6];
  v50 = v28;
  v29 = v8[1];
  v43 = *v8;
  v44 = v29;
  v30 = v8[3];
  v45 = v8[2];
  v46 = v30;
  v31 = MakeRejectorBreakSourceObjectInteractionState.isInteractingWithObject(_:)(&__dst[4]);
  if ((v37 & __dst[2] & 1) != 0)
    return 3;
  if (v36 || (v31 & 1) == 0)
  {
LABEL_11:
    if (*(_BYTE *)(v2 + 109) == 1 && (*(_BYTE *)(v2 + 283) & 1) == 0)
    {
      v55.value = v4;
      *(_QWORD *)&v55.timescale = v5 | (v6 << 32);
      v55.epoch = v7;
      if (MakeRejectorBreakSourceObjectInteractionState.isInEatingState(_:)(v55))
        return 3;
    }
    return 0;
  }
  v33 = *(_QWORD *)(v1 + 304);
  result = swift_beginAccess();
  v34 = *(_QWORD *)(v33 + 96);
  v35 = *(_QWORD *)(v34 + 16);
  if (!v35)
  {
    __break(1u);
    return result;
  }
  result = *(unsigned __int8 *)(v34 + 80 * v35 + 8);
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result == 2)
      return 2;
    goto LABEL_11;
  }
  return result;
}

Swift::Void __swiftcall MakeRejectorBreakSourceObjectInteractionState.updateStrictEatingMode()()
{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;

  if (*(_BYTE *)(v0 + 108) != 1)
    return;
  v1 = *(_QWORD **)(v0 + 312);
  v2 = *(_BYTE *)(v0 + 280);
  swift_beginAccess();
  v4 = v1[14];
  v3 = v1[15];
  v5 = v1[16];
  v6 = *(_QWORD *)(v3 + 16);
  if (!v6 || *(_QWORD *)(v3 + 24) <= 1uLL)
  {
    specialized CircularBuffer.lastAddedElementPtr.getter(v1[14], v1[15], v1[16]);
    goto LABEL_5;
  }
  v8 = specialized CircularBuffer.lastAddedElementPtr.getter(v1[14], v1[15], v1[16]);
  v10 = v9;
  swift_retain();
  swift_bridgeObjectRetain();
  if ((v10 & 1) != 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_5:
    v7 = 0;
LABEL_6:
    *(_BYTE *)(v0 + 281) = v7 >= *(_QWORD *)(v0 + 96);
    return;
  }
  if (v6 != v4)
    v5 = 0;
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(v3 + 16);
      if (v5 >= v11)
        break;
      if ((*(_BYTE *)(v3 + 32 + 72 * v5 + 64) & 1) == 0
        && ((v2 & 1) != 0 || (static CMTime.> infix(_:_:)() & 1) != 0)
        && __OFADD__(v7++, 1))
      {
        goto LABEL_23;
      }
      if (v5 == v8)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
      v5 = (v5 + 1) % v11;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
}

uint64_t MakeRejectorBreakSourceObjectInteractionState.isInteractingWithObject(_:)(void *__src)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _BYTE __dst[776];

  v2 = v1;
  if (*(_BYTE *)(v1 + 18) != 1
    || (memcpy(__dst, __src, 0x306uLL),
        swift_retain(),
        SceneSegmentationProcessingAdapter.run(_:)((uint64_t)__dst),
        swift_release(),
        v3 = *(_QWORD *)(v1 + 304),
        *(_BYTE *)(v3 + 85) != 1))
  {
    v20 = v2 + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__internalData;
    swift_beginAccess();
    v21 = *(int *)(type metadata accessor for ObjectInteractionStateInternalPB(0) + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v22 = *(_QWORD *)(v20 + v21);
      type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
      swift_allocObject();
      *(_QWORD *)(v20 + v21) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v22);
      swift_release();
    }
    v23 = *(_QWORD *)(v20 + v21);
    swift_beginAccess();
    *(_DWORD *)(v23 + 20) = 0;
    swift_endAccess();
    return 0;
  }
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 96);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = (unint64_t *)(v4 + 80 * v5);
    v9 = *v6;
    v7 = v6 - 6;
    v8 = v9;
    if ((v9 & 0x8000000000000000) == 0 && !HIDWORD(v8))
    {
      v10 = v2 + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__internalData;
      swift_beginAccess();
      v11 = type metadata accessor for ObjectInteractionStateInternalPB(0);
      v12 = *(int *)(v11 + 20);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v13 = *(_QWORD *)(v10 + v12);
        type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
        swift_allocObject();
        *(_QWORD *)(v10 + v12) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v13);
        swift_release();
      }
      v14 = *(_QWORD *)(v10 + v12);
      swift_beginAccess();
      *(_DWORD *)(v14 + 20) = v8;
      swift_endAccess();
      v15 = *((unsigned __int8 *)v7 + 56);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v16 = *(int *)(v11 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v17 = *(_QWORD *)(v10 + v16);
        type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
        swift_allocObject();
        *(_QWORD *)(v10 + v16) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v17);
        swift_release();
      }
      v18 = *(_QWORD *)(v10 + v16);
      v19 = 1;
      swift_beginAccess();
      *(_DWORD *)(v18 + 24) = v15;
      swift_endAccess();
      return v19;
    }
  }
  else
  {
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL MakeRejectorBreakSourceObjectInteractionState.isRecentIntentionalUIInteraction(_:)(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  double Seconds;
  float v36;
  float v37;
  _BOOL8 result;
  float32x4_t v39;
  float32x4_t v40;
  __int128 v41;
  _BYTE time[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[2];

  v2 = *(_OWORD *)(a1 + 208);
  v53 = *(_OWORD *)(a1 + 192);
  v54 = v2;
  v55 = *(_OWORD *)(a1 + 224);
  v3 = *(_OWORD *)(a1 + 144);
  v49 = *(_OWORD *)(a1 + 128);
  v50 = v3;
  v4 = *(_OWORD *)(a1 + 176);
  v51 = *(_OWORD *)(a1 + 160);
  v52 = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v45 = *(_OWORD *)(a1 + 64);
  v46 = v5;
  v6 = *(_OWORD *)(a1 + 112);
  v47 = *(_OWORD *)(a1 + 96);
  v48 = v6;
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)time = *(_OWORD *)a1;
  *(_OWORD *)&time[16] = v7;
  v8 = *(_OWORD *)(a1 + 48);
  v43 = *(_OWORD *)(a1 + 32);
  v44 = v8;
  v9 = *(_QWORD *)(a1 + 240);
  v10 = *(_QWORD *)(a1 + 264);
  v11 = *(_QWORD *)(a1 + 352);
  v12 = *(_OWORD *)(a1 + 536);
  v75 = *(_OWORD *)(a1 + 520);
  v76 = v12;
  v13 = *(_OWORD *)(a1 + 472);
  v71 = *(_OWORD *)(a1 + 456);
  v72 = v13;
  v14 = *(_OWORD *)(a1 + 504);
  v73 = *(_OWORD *)(a1 + 488);
  v74 = v14;
  v15 = *(_OWORD *)(a1 + 408);
  v67 = *(_OWORD *)(a1 + 392);
  v68 = v15;
  v16 = *(_OWORD *)(a1 + 440);
  v69 = *(_OWORD *)(a1 + 424);
  v70 = v16;
  v17 = *(_OWORD *)(a1 + 376);
  v65 = *(_OWORD *)(a1 + 360);
  v66 = v17;
  v18 = *(_QWORD *)(a1 + 552);
  v19 = *(_QWORD *)(a1 + 560);
  v20 = *(_DWORD *)(a1 + 568);
  v21 = *(_DWORD *)(a1 + 572);
  v22 = *(_OWORD *)(a1 + 728);
  v90 = *(_OWORD *)(a1 + 712);
  v91 = v22;
  v92[0] = *(_OWORD *)(a1 + 744);
  *(_OWORD *)((char *)v92 + 14) = *(_OWORD *)(a1 + 758);
  v23 = *(_OWORD *)(a1 + 664);
  v86 = *(_OWORD *)(a1 + 648);
  v87 = v23;
  v24 = *(_OWORD *)(a1 + 696);
  v88 = *(_OWORD *)(a1 + 680);
  v89 = v24;
  v25 = *(_OWORD *)(a1 + 600);
  v26 = *(_OWORD *)(a1 + 616);
  v27 = *(_OWORD *)(a1 + 632);
  v28 = *(_QWORD *)(a1 + 576);
  v82 = *(_OWORD *)(a1 + 584);
  v83 = v25;
  v84 = v26;
  v85 = v27;
  v56 = v9;
  v41 = *(_OWORD *)(a1 + 248);
  v57 = v41;
  v58 = v10;
  v29 = *(_OWORD *)(a1 + 288);
  v59 = *(_OWORD *)(a1 + 272);
  v60 = v29;
  v30 = *(_OWORD *)(a1 + 320);
  v61 = *(_OWORD *)(a1 + 304);
  v62 = v30;
  v63 = *(_OWORD *)(a1 + 336);
  v77 = v18;
  v64 = v11;
  v78 = v19;
  v79 = v20;
  v80 = v21;
  v81 = v28;
  MakeRejectorBreakSourceObjectInteractionState.updateLastIntentionalUIInteraction(_:)((uint64_t)time);
  v31 = *(_QWORD *)(v1 + 212);
  v32 = *(_DWORD *)(v1 + 220);
  v33 = *(_DWORD *)(v1 + 224);
  v34 = *(_QWORD *)(v1 + 228);
  if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
  {
    *(_QWORD *)time = v19;
    *(_QWORD *)&time[8] = __PAIR64__(v21, v20);
    *(_QWORD *)&time[16] = v28;
    Seconds = CMTimeGetSeconds((CMTime *)time);
    *(_QWORD *)time = v31;
    *(_QWORD *)&time[8] = __PAIR64__(v33, v32);
    *(_QWORD *)&time[16] = v34;
    v36 = Seconds - CMTimeGetSeconds((CMTime *)time);
    v37 = fabsf(v36);
  }
  else
  {
    v37 = INFINITY;
  }
  result = 0;
  if (*(float *)(v1 + 36) >= v37 && v9)
  {
    if (*(_QWORD *)(v41 + 16) < 7uLL)
    {
      __break(1u);
    }
    else
    {
      v39 = vsubq_f32(*(float32x4_t *)(v41 + 240), *(float32x4_t *)(v1 + 240));
      v40 = vmulq_f32(v39, v39);
      return *(float *)(v1 + 32) >= sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
    }
  }
  return result;
}

uint64_t MakeRejectorBreakSourceObjectInteractionState.updateLastIntentionalUIInteraction(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (*(_BYTE *)(result + 192) == 1)
  {
    v2 = *(_QWORD *)(result + 240);
    v3 = *(float *)(result + 444);
    v4 = *(_QWORD *)(result + 560);
    v5 = *(unsigned int *)(result + 568);
    v6 = *(unsigned int *)(result + 572);
    v7 = *(_QWORD *)(result + 576);
    if (*(float *)(v1 + 104) < v3)
    {
      *(_QWORD *)(v1 + 256) = v4;
      *(_QWORD *)(v1 + 264) = v5 | (v6 << 32);
      *(_QWORD *)(v1 + 272) = v7;
      *(_BYTE *)(v1 + 280) = 0;
    }
    if (*(float *)(v1 + 28) < v3 && v2 != 0)
    {
      v9 = *(_QWORD *)(result + 248);
      if (*(_QWORD *)(v9 + 16) < 7uLL)
      {
        __break(1u);
      }
      else
      {
        *(_OWORD *)(v1 + 240) = *(_OWORD *)(v9 + 240);
        *(_QWORD *)(v1 + 212) = v4;
        *(_DWORD *)(v1 + 220) = v5;
        *(_DWORD *)(v1 + 224) = v6;
        *(_QWORD *)(v1 + 228) = v7;
      }
    }
  }
  return result;
}

BOOL MakeRejectorBreakSourceObjectInteractionState.isRecentEating(_:threshold:)(uint64_t a1, float a2)
{
  uint64_t v2;
  CMTimeValue v4;
  CMTimeScale v5;
  CMTimeFlags v6;
  CMTimeEpoch v7;
  CMTimeValue v8;
  CMTimeScale v9;
  CMTimeFlags v10;
  CMTimeEpoch v11;
  double Seconds;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CMTime time;

  v4 = *(_QWORD *)(a1 + 560);
  v5 = *(_DWORD *)(a1 + 568);
  v6 = *(_DWORD *)(a1 + 572);
  v7 = *(_QWORD *)(a1 + 576);
  v8 = *(_QWORD *)(v2 + 188);
  v9 = *(_DWORD *)(v2 + 196);
  v10 = *(_DWORD *)(v2 + 200);
  v11 = *(_QWORD *)(v2 + 204);
  if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
  {
    time.value = v4;
    time.timescale = v5;
    time.flags = v6;
    time.epoch = v7;
    Seconds = CMTimeGetSeconds(&time);
    time.value = v8;
    time.timescale = v9;
    time.flags = v10;
    time.epoch = v11;
    v13 = Seconds - CMTimeGetSeconds(&time);
    v14 = fabsf(v13);
  }
  else
  {
    v14 = INFINITY;
  }
  v15 = v2 + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__internalData;
  swift_beginAccess();
  v16 = *(int *)(type metadata accessor for ObjectInteractionStateInternalPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v17 = *(_QWORD *)(v15 + v16);
    type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)(v15 + v16) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v17);
    swift_release();
  }
  v18 = *(_QWORD *)(v15 + v16);
  swift_beginAccess();
  *(float *)(v18 + 48) = v14;
  swift_endAccess();
  return v14 < a2;
}

BOOL MakeRejectorBreakSourceObjectInteractionState.isRecentInteraction(_:threshold:)(uint64_t a1, float a2)
{
  uint64_t v2;
  CMTimeValue v4;
  CMTimeScale v5;
  CMTimeFlags v6;
  CMTimeEpoch v7;
  CMTimeValue v8;
  CMTimeScale v9;
  CMTimeFlags v10;
  CMTimeEpoch v11;
  double Seconds;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CMTime time;

  v4 = *(_QWORD *)(a1 + 560);
  v5 = *(_DWORD *)(a1 + 568);
  v6 = *(_DWORD *)(a1 + 572);
  v7 = *(_QWORD *)(a1 + 576);
  v8 = *(_QWORD *)(v2 + 164);
  v9 = *(_DWORD *)(v2 + 172);
  v10 = *(_DWORD *)(v2 + 176);
  v11 = *(_QWORD *)(v2 + 180);
  if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
  {
    time.value = v4;
    time.timescale = v5;
    time.flags = v6;
    time.epoch = v7;
    Seconds = CMTimeGetSeconds(&time);
    time.value = v8;
    time.timescale = v9;
    time.flags = v10;
    time.epoch = v11;
    v13 = Seconds - CMTimeGetSeconds(&time);
    v14 = fabsf(v13);
  }
  else
  {
    v14 = INFINITY;
  }
  v15 = v2 + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__internalData;
  swift_beginAccess();
  v16 = *(int *)(type metadata accessor for ObjectInteractionStateInternalPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v17 = *(_QWORD *)(v15 + v16);
    type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)(v15 + v16) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v17);
    swift_release();
  }
  v18 = *(_QWORD *)(v15 + v16);
  swift_beginAccess();
  *(float *)(v18 + 44) = v14;
  swift_endAccess();
  return v14 < a2;
}

uint64_t MakeRejectorBreakSourceObjectInteractionState.processExitObjectInteractionState(_:)(unsigned int *__src)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  __int16 v15;
  unint64_t v16;
  int v17;
  char __dst[560];
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];

  memcpy(__dst, __src, sizeof(__dst));
  v3 = *((_QWORD *)__src + 70);
  v4 = __src[142];
  v5 = __src[143];
  v6 = *((_QWORD *)__src + 72);
  v7 = *(_OWORD *)(__src + 182);
  v32 = *(_OWORD *)(__src + 178);
  v33 = v7;
  v34[0] = *(_OWORD *)(__src + 186);
  *(_OWORD *)((char *)v34 + 14) = *(_OWORD *)((char *)__src + 758);
  v8 = *(_OWORD *)(__src + 166);
  v28 = *(_OWORD *)(__src + 162);
  v29 = v8;
  v9 = *(_OWORD *)(__src + 174);
  v30 = *(_OWORD *)(__src + 170);
  v31 = v9;
  v10 = *(_OWORD *)(__src + 150);
  v24 = *(_OWORD *)(__src + 146);
  v25 = v10;
  v11 = *(_OWORD *)(__src + 158);
  v26 = *(_OWORD *)(__src + 154);
  v27 = v11;
  v20 = v3;
  v21 = v4;
  v22 = v5;
  v23 = v6;
  v12 = MakeRejectorBreakSourceObjectInteractionState.shouldExitObjectInteractionState(_:)(__dst);
  v15 = v12;
  v16 = v13;
  if ((v12 & 0x10000) != 0)
  {
    MakeRejectorBreakSourceObjectInteractionState.exitObjectInteractionState(_:)(v13, v14 & 1);
    if (v16 - 9 <= 1)
    {
      *(_QWORD *)(v1 + 256) = v3;
      *(_QWORD *)(v1 + 264) = v4 | (v5 << 32);
      *(_QWORD *)(v1 + 272) = v6;
      *(_BYTE *)(v1 + 280) = 0;
    }
    v17 = 0x10000;
  }
  else
  {
    v17 = 0;
  }
  return v15 & 0x101 | v17;
}

uint64_t MakeRejectorBreakSourceObjectInteractionState.shouldExitObjectInteractionState(_:)(char *__src)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  unint64_t RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  double Seconds;
  float v77;
  float v78;
  float v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int64_t v85;
  int64_t v86;
  unint64_t v87;
  unint64_t v88;
  void (*v89)(_BYTE *, _QWORD);
  int64_t v90;
  unint64_t v91;
  int64_t v92;
  uint64_t v93;
  int64_t v94;
  float v95;
  int v96;
  char v97;
  int v98;
  int v99;
  int v100;
  int v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char *__srca;
  int v117;
  int v118;
  _BYTE time[560];
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _OWORD v134[2];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _OWORD v145[2];
  _BYTE __dst[560];

  memcpy(__dst, __src, sizeof(__dst));
  v3 = *((_QWORD *)__src + 70);
  v118 = *((_DWORD *)__src + 142);
  __srca = __src;
  v117 = *((_DWORD *)__src + 143);
  v4 = *((_QWORD *)__src + 72);
  v5 = __src + 584;
  v6 = *(_OWORD *)(__src + 728);
  v143 = *(_OWORD *)(__src + 712);
  v144 = v6;
  v145[0] = *(_OWORD *)(__src + 744);
  *(_OWORD *)((char *)v145 + 14) = *(_OWORD *)(__src + 758);
  v7 = *(_OWORD *)(__src + 664);
  v139 = *(_OWORD *)(__src + 648);
  v140 = v7;
  v8 = *(_OWORD *)(__src + 696);
  v141 = *(_OWORD *)(__src + 680);
  v142 = v8;
  v9 = *(_OWORD *)(__src + 600);
  v106 = v1;
  v10 = *(_QWORD *)(v1 + 288);
  v11 = 1 << *(_BYTE *)(v10 + 32);
  v12 = -1;
  v135 = *(_OWORD *)(__src + 584);
  v136 = v9;
  v13 = v10 + 64;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v14 = v12 & *(_QWORD *)(v10 + 64);
  v15 = *(_OWORD *)(__src + 632);
  v16 = (unint64_t)(v11 + 63) >> 6;
  v17 = 0;
  v137 = v5[2];
  v138 = v15;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_5;
    }
    v26 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    if (v26 >= v16)
      goto LABEL_23;
    v27 = *(_QWORD *)(v13 + 8 * v26);
    ++v17;
    if (!v27)
    {
      v17 = v26 + 1;
      if (v26 + 1 >= v16)
        goto LABEL_23;
      v27 = *(_QWORD *)(v13 + 8 * v17);
      if (!v27)
      {
        v17 = v26 + 2;
        if (v26 + 2 >= v16)
          goto LABEL_23;
        v27 = *(_QWORD *)(v13 + 8 * v17);
        if (!v27)
        {
          v17 = v26 + 3;
          if (v26 + 3 >= v16)
            goto LABEL_23;
          v27 = *(_QWORD *)(v13 + 8 * v17);
          if (!v27)
            break;
        }
      }
    }
LABEL_22:
    v14 = (v27 - 1) & v27;
    v19 = __clz(__rbit64(v27)) + (v17 << 6);
LABEL_5:
    v20 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v19);
    memcpy(time, __srca, sizeof(time));
    v120 = v3;
    v121 = v118;
    v122 = v117;
    v123 = v4;
    v21 = v5[9];
    v132 = v5[8];
    v133 = v21;
    v134[0] = v5[10];
    *(_OWORD *)((char *)v134 + 14) = *(_OWORD *)((char *)v5 + 174);
    v22 = v5[5];
    v128 = v5[4];
    v129 = v22;
    v23 = v5[7];
    v130 = v5[6];
    v131 = v23;
    v24 = v5[1];
    v124 = *v5;
    v125 = v24;
    v25 = v5[3];
    v126 = v5[2];
    v127 = v25;
    (*(void (**)(_BYTE *))(*(_QWORD *)v20 + 256))(time);
  }
  v28 = v26 + 4;
  if (v28 < v16)
  {
    v27 = *(_QWORD *)(v13 + 8 * v28);
    if (!v27)
    {
      while (1)
      {
        v17 = v28 + 1;
        if (__OFADD__(v28, 1))
          break;
        if (v17 >= v16)
          goto LABEL_23;
        v27 = *(_QWORD *)(v13 + 8 * v17);
        ++v28;
        if (v27)
          goto LABEL_22;
      }
LABEL_87:
      __break(1u);
LABEL_88:
      swift_bridgeObjectRetain();
      v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v113 = v4;
      if (!v46)
        goto LABEL_89;
      goto LABEL_40;
    }
    v17 = v28;
    goto LABEL_22;
  }
LABEL_23:
  v29 = v106;
  if (*(_BYTE *)(v106 + 160) != 1)
  {
    *(_QWORD *)(v106 + 296) = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  v30 = 0;
  if (!*(_QWORD *)(*(_QWORD *)(v106 + 296) + 16))
  {
LABEL_36:
    memcpy(time, __srca, sizeof(time));
    v120 = v3;
    v121 = v118;
    v122 = v117;
    v123 = v4;
    v39 = v5[9];
    v132 = v5[8];
    v133 = v39;
    v134[0] = v5[10];
    *(_OWORD *)((char *)v134 + 14) = *(_OWORD *)((char *)v5 + 174);
    v40 = v5[5];
    v128 = v5[4];
    v129 = v40;
    v41 = v5[7];
    v130 = v5[6];
    v131 = v41;
    v42 = v5[1];
    v124 = *v5;
    v125 = v42;
    v43 = v5[3];
    v126 = v5[2];
    v127 = v43;
    v44 = MakeRejectorBreakSourceObjectInteractionState.evaluateSubstate(_:)((uint64_t)time);
    *(_QWORD *)(v29 + 320) = v44;
    *(_BYTE *)(v29 + 328) = 1;
    *(_QWORD *)(v29 + 296) = *(&off_250E3AAD0 + v44);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  swift_retain();
  v31 = swift_bridgeObjectRetain();
  RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands15PinchAcceptorIDOG_AF0eF0Cs5NeverOTg5067_s5Hands45MakeRejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n(v31, v106);
  swift_bridgeObjectRelease();
  swift_release();
  if (RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n >> 62)
  {
LABEL_130:
    swift_bridgeObjectRetain();
    v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v14 = (unint64_t)v30;
    if (v33)
      goto LABEL_27;
    goto LABEL_35;
  }
  v33 = *(_QWORD *)((RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n & 0xFFFFFFFFFFFFF8)
                  + 0x10);
  v14 = 0;
  if (!v33)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    v29 = v106;
    goto LABEL_36;
  }
LABEL_27:
  v34 = 4;
  while (1)
  {
    v35 = v34 - 4;
    if ((RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n & 0xC000000000000001) != 0)
    {
      v36 = MEMORY[0x24263790C](v34 - 4, RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n);
      v37 = v34 - 3;
      if (__OFADD__(v35, 1))
        goto LABEL_86;
    }
    else
    {
      v36 = swift_retain();
      v37 = v34 - 3;
      if (__OFADD__(v35, 1))
        goto LABEL_86;
    }
    v38 = *(unsigned __int8 *)(v36 + 49);
    swift_release();
    if (v38 == 1)
      break;
    ++v34;
    if (v37 == v33)
      goto LABEL_35;
  }
  swift_bridgeObjectRelease();
  v29 = v106;
LABEL_38:
  swift_retain();
  v45 = swift_bridgeObjectRetain();
  v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands15PinchAcceptorIDOG_AF0eF0Cs5NeverOTg5067_s5Hands45MakeRejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n(v45, v29);
  swift_bridgeObjectRelease();
  swift_release();
  if (v14 >> 62)
    goto LABEL_88;
  v46 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  v113 = v4;
  if (!v46)
  {
LABEL_89:
    RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n = 0;
    v115 = 0;
    v105 = 0;
    v107 = 0;
    LODWORD(v4) = 1;
    goto LABEL_90;
  }
LABEL_40:
  v47 = 0;
  v115 = 0;
  v105 = 0;
  v107 = 0;
  v48 = 0;
  v111 = v3;
  v112 = v14 & 0xC000000000000001;
  v109 = v14 & 0xFFFFFFFFFFFFFF8;
  v110 = v46;
  v104 = v14 + 32;
  v49 = 1;
  while (2)
  {
    v102 = v49;
    v103 = v47;
    while (2)
    {
      while (2)
      {
        if (v112)
        {
          v50 = MEMORY[0x24263790C](v48, v14);
          v51 = v113;
        }
        else
        {
          v51 = v113;
          if (v48 >= *(_QWORD *)(v109 + 16))
            goto LABEL_85;
          v50 = *(_QWORD *)(v104 + 8 * v48);
          swift_retain();
        }
        v108 = v48;
        if (__OFADD__(v48++, 1))
        {
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
        memcpy(time, __srca, sizeof(time));
        v120 = v3;
        v121 = v118;
        v122 = v117;
        v123 = v51;
        v53 = v5[9];
        v132 = v5[8];
        v133 = v53;
        v134[0] = v5[10];
        *(_OWORD *)((char *)v134 + 14) = *(_OWORD *)((char *)v5 + 174);
        v54 = v5[5];
        v128 = v5[4];
        v129 = v54;
        v55 = v5[7];
        v130 = v5[6];
        v131 = v55;
        v56 = v5[1];
        v124 = *v5;
        v125 = v56;
        v57 = v5[3];
        v126 = v5[2];
        v127 = v57;
        (*(void (**)(_BYTE *))(*(_QWORD *)v50 + 264))(time);
        v58 = *(unsigned __int8 *)(v50 + 32);
        v59 = *(unsigned __int8 *)(v50 + 33);
        v60 = *(unsigned __int8 *)(v50 + 34);
        v114 = *(_QWORD *)(v50 + 40);
        v4 = *(unsigned __int8 *)(v50 + 48);
        swift_release();
        if (v58 != 1)
        {
LABEL_67:
          if (v59)
          {
            if ((v60 & 1) != 0)
            {
              v115 = 1;
              RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n = v114;
              v47 = v114;
              v49 = v4;
              v105 = 1;
              goto LABEL_74;
            }
            v105 = 1;
          }
          else if (v60)
          {
            v115 = 1;
            RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n = v114;
            v47 = v114;
            v49 = v4;
            goto LABEL_74;
          }
          v3 = v111;
          if (v48 == v110)
          {
LABEL_80:
            RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n = v103;
            LODWORD(v4) = v102;
            goto LABEL_90;
          }
          continue;
        }
        break;
      }
      if ((v59 & 1) == 0)
      {
        if ((v60 & 1) != 0)
        {
LABEL_73:
          v115 = 1;
          RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n = v114;
          v47 = v114;
          v49 = v4;
          v107 = 1;
LABEL_74:
          v72 = v110;
          goto LABEL_75;
        }
        if (v48 == v110)
        {
          v107 = 1;
          RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n = v103;
          LODWORD(v4) = v102;
          v3 = v111;
          goto LABEL_90;
        }
        v61 = v108 + 5;
        v3 = v111;
        while (1)
        {
          v62 = v61 - 4;
          if (v112)
          {
            v63 = MEMORY[0x24263790C](v61 - 4, v14);
            v4 = v113;
            v48 = v61 - 3;
            if (__OFADD__(v62, 1))
              goto LABEL_83;
          }
          else
          {
            v4 = v113;
            if (v62 >= *(_QWORD *)(v109 + 16))
              goto LABEL_85;
            v63 = *(_QWORD *)(v14 + 8 * v61);
            swift_retain();
            v48 = v61 - 3;
            if (__OFADD__(v62, 1))
              goto LABEL_83;
          }
          v64 = v3;
          v65 = v14;
          memcpy(time, __srca, sizeof(time));
          v120 = v64;
          v121 = v118;
          v122 = v117;
          v123 = v4;
          v66 = v5[9];
          v132 = v5[8];
          v133 = v66;
          v134[0] = v5[10];
          *(_OWORD *)((char *)v134 + 14) = *(_OWORD *)((char *)v5 + 174);
          v67 = v5[5];
          v128 = v5[4];
          v129 = v67;
          v68 = v5[7];
          v130 = v5[6];
          v131 = v68;
          v69 = v5[1];
          v124 = *v5;
          v125 = v69;
          v70 = v5[3];
          v126 = v5[2];
          v127 = v70;
          (*(void (**)(_BYTE *))(*(_QWORD *)v63 + 264))(time);
          v71 = *(unsigned __int8 *)(v63 + 32);
          v59 = *(unsigned __int8 *)(v63 + 33);
          v60 = *(unsigned __int8 *)(v63 + 34);
          v114 = *(_QWORD *)(v63 + 40);
          v4 = *(unsigned __int8 *)(v63 + 48);
          swift_release();
          if (v71 != 1)
            break;
          v14 = v65;
          if (v59)
            goto LABEL_63;
          if ((v60 & 1) != 0)
            goto LABEL_73;
          ++v61;
          v3 = v111;
          if (v48 == v110)
          {
            v107 = 1;
            goto LABEL_80;
          }
        }
        v107 = 1;
        v14 = v65;
        goto LABEL_67;
      }
LABEL_63:
      v72 = v110;
      if ((v60 & 1) == 0)
      {
        v105 = 1;
        v107 = 1;
        v3 = v111;
        if (v48 == v110)
        {
          RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n = v103;
          LODWORD(v4) = v102;
          v107 = 1;
          goto LABEL_90;
        }
        continue;
      }
      break;
    }
    v115 = 1;
    RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n = v114;
    v47 = v114;
    v49 = v4;
    v105 = 1;
    v107 = 1;
LABEL_75:
    v3 = v111;
    if (v48 != v72)
      continue;
    break;
  }
LABEL_90:
  swift_bridgeObjectRelease();
  LODWORD(__srca) = v4;
  if (*(_BYTE *)(v106 + 160) == 1)
  {
    RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n = *(_QWORD *)(v106 + 164);
    v73 = *(_DWORD *)(v106 + 172);
    v74 = *(_DWORD *)(v106 + 176);
    v75 = *(_QWORD *)(v106 + 180);
    v4 = v113;
    if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
    {
      *(_QWORD *)time = v3;
      *(_DWORD *)&time[8] = v118;
      *(_DWORD *)&time[12] = v117;
      *(_QWORD *)&time[16] = v113;
      Seconds = CMTimeGetSeconds((CMTime *)time);
      *(_QWORD *)time = RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n;
      *(_DWORD *)&time[8] = v73;
      *(_DWORD *)&time[12] = v74;
      *(_QWORD *)&time[16] = v75;
      v77 = Seconds - CMTimeGetSeconds((CMTime *)time);
      v78 = fabsf(v77);
    }
    else
    {
      v78 = INFINITY;
    }
    v79 = *(float *)(v106 + 24);
    v80 = v79 <= v78;
    LODWORD(__srca) = v80 | __srca;
    v115 |= v80;
    v105 &= v79 > v78;
  }
  else
  {
    v4 = v113;
  }
  v81 = *(_QWORD *)(v106 + 288);
  v5 = (_OWORD *)(v81 + 64);
  v82 = 1 << *(_BYTE *)(v81 + 32);
  v83 = -1;
  if (v82 < 64)
    v83 = ~(-1 << v82);
  v84 = v83 & *(_QWORD *)(v81 + 64);
  v85 = (unint64_t)(v82 + 63) >> 6;
  v30 = &v124;
  swift_bridgeObjectRetain();
  v86 = 0;
  while (2)
  {
    if (v84)
    {
      v87 = __clz(__rbit64(v84));
      v84 &= v84 - 1;
      v88 = v87 | (v86 << 6);
LABEL_101:
      RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n = *(_QWORD *)(*(_QWORD *)(v81 + 56) + 8 * v88);
      memcpy(time, __dst, sizeof(time));
      v120 = v3;
      v121 = v118;
      v122 = v117;
      v123 = v4;
      v132 = v143;
      v133 = v144;
      v134[0] = v145[0];
      *(_OWORD *)((char *)v134 + 14) = *(_OWORD *)((char *)v145 + 14);
      v128 = v139;
      v129 = v140;
      v130 = v141;
      v131 = v142;
      v124 = v135;
      v125 = v136;
      v126 = v137;
      v127 = v138;
      v89 = *(void (**)(_BYTE *, _QWORD))(*(_QWORD *)RejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n
                                                   + 272);
      swift_retain();
      v89(time, v115 & 1);
      swift_release();
      continue;
    }
    break;
  }
  v90 = v86 + 1;
  if (__OFADD__(v86, 1))
  {
    __break(1u);
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  if (v90 >= v85)
    goto LABEL_119;
  v91 = *((_QWORD *)v5 + v90);
  ++v86;
  if (v91)
    goto LABEL_118;
  v86 = v90 + 1;
  if (v90 + 1 >= v85)
    goto LABEL_119;
  v91 = *((_QWORD *)v5 + v86);
  if (v91)
    goto LABEL_118;
  v86 = v90 + 2;
  if (v90 + 2 >= v85)
    goto LABEL_119;
  v91 = *((_QWORD *)v5 + v86);
  if (v91)
    goto LABEL_118;
  v86 = v90 + 3;
  if (v90 + 3 >= v85)
    goto LABEL_119;
  v91 = *((_QWORD *)v5 + v86);
  if (v91)
  {
LABEL_118:
    v84 = (v91 - 1) & v91;
    v88 = __clz(__rbit64(v91)) + (v86 << 6);
    goto LABEL_101;
  }
  v92 = v90 + 4;
  if (v92 < v85)
  {
    v91 = *((_QWORD *)v5 + v92);
    if (!v91)
    {
      while (1)
      {
        v86 = v92 + 1;
        if (__OFADD__(v92, 1))
          goto LABEL_129;
        if (v86 >= v85)
          goto LABEL_119;
        v91 = *((_QWORD *)v5 + v86);
        ++v92;
        if (v91)
          goto LABEL_118;
      }
    }
    v86 = v92;
    goto LABEL_118;
  }
LABEL_119:
  swift_release();
  if ((v115 & 1) != 0)
  {
    v93 = *(_QWORD *)(v106 + 312);
    swift_beginAccess();
    v94 = specialized CircularBuffer.last.getter(*(_QWORD *)(v93 + 40), *(_QWORD *)(v93 + 48), *(_QWORD *)(v93 + 56));
    v95 = *(float *)&v94;
    if ((v94 & 0x100000000) != 0)
      v95 = INFINITY;
    v96 = v95 >= *(float *)(v93 + 196);
    v97 = v96 & v105;
    v98 = v96 << 16;
    v99 = v107;
  }
  else
  {
    v98 = 0;
    v97 = v105;
    v99 = v107;
  }
  if ((v97 & 1) != 0)
    v100 = 256;
  else
    v100 = 0;
  return v98 | v99 | v100;
}

uint64_t MakeRejectorBreakSourceObjectInteractionState.exitObjectInteractionState(_:)(unint64_t a1, char a2)
{
  uint64_t v2;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v5 = a2 & 1;
  *(_BYTE *)(v2 + 282) = 0;
  *(_BYTE *)(v2 + 160) = 0;
  v6 = *(_QWORD *)(v2 + 304);
  swift_beginAccess();
  *(_QWORD *)(v6 + 96) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 352) = a1;
  *(_BYTE *)(v2 + 360) = v5;
  if ((a2 & 1) != 0)
  {
    a1 = qword_23D9ACA08[a1];
  }
  else if ((a1 & 0x8000000000000000) != 0 || HIDWORD(a1))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v7 = v2 + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__internalData;
  swift_beginAccess();
  v8 = *(int *)(type metadata accessor for ObjectInteractionStateInternalPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v9 = *(_QWORD *)(v7 + v8);
    type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
    swift_allocObject();
    *(_QWORD *)(v7 + v8) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v9);
    swift_release();
  }
  v10 = *(_QWORD *)(v7 + v8);
  swift_beginAccess();
  *(_DWORD *)(v10 + 32) = a1;
  return swift_endAccess();
}

uint64_t MakeRejectorBreakSourceObjectInteractionState.evaluateSubstate(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  CMTimeValue v4;
  uint64_t v5;
  uint64_t v6;
  CMTimeEpoch v7;
  float32x4_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  CMTimeFlags v18;
  CMTimeScale v19;
  CMTimeEpoch v20;
  float32x4_t v21;
  double Seconds;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float32x2_t *v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  CMTimeValue v59;
  uint64_t v60;
  unint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  CMTime time;

  if ((*(_BYTE *)(v1 + 281) & 1) != 0)
    return 12;
  v3 = v1;
  v4 = *(_QWORD *)(a1 + 560);
  v5 = *(unsigned int *)(a1 + 568);
  v6 = *(unsigned int *)(a1 + 572);
  v7 = *(_QWORD *)(a1 + 576);
  v9 = *(_QWORD *)(a1 + 240);
  v8 = *(float32x4_t **)(a1 + 248);
  v10 = *(_QWORD *)(v3 + 304);
  result = swift_beginAccess();
  if (!v9)
    return 8;
  if (v8[1].i64[0] < 7uLL)
  {
    __break(1u);
    goto LABEL_57;
  }
  v11 = *(_QWORD *)(v10 + 96);
  v62 = v8[15];
  v12 = *(float *)(v3 + 84);
  v13 = *(float *)(v3 + 88);
  swift_bridgeObjectRetain();
  swift_retain();
  HandApproachingMouthManager.isNearRecentHandApproachingMouthEventTrajectory(_:_:_:_:)(v4, v5 | (v6 << 32), v7, v62, v12, v13);
  v15 = v14;
  swift_release();
  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  v16 = *(_QWORD *)(v11 + 16);
  if (v16)
  {
    v61 = *(_QWORD *)(v11 + 16);
    v60 = 80 * v16;
    v17 = 80 * v16 + v11;
    v59 = *(_QWORD *)(v17 - 48);
    v19 = *(_DWORD *)(v17 - 40);
    v18 = *(_DWORD *)(v17 - 36);
    v20 = *(_QWORD *)(v17 - 32);
    if ((CMTime.isValid.getter() & 1) != 0 && (CMTime.isValid.getter() & 1) != 0)
    {
      time.value = v4;
      time.timescale = v5;
      time.flags = v6;
      time.epoch = v7;
      Seconds = CMTimeGetSeconds(&time);
      time.value = v59;
      time.timescale = v19;
      time.flags = v18;
      time.epoch = v20;
      v21.f32[0] = Seconds - CMTimeGetSeconds(&time);
      v23 = fabsf(v21.f32[0]);
    }
    else
    {
      v23 = INFINITY;
    }
    if (v61 >= 2)
    {
      v30 = 0;
      v31 = 0;
      v25 = v61 & 0x7FFFFFFFFFFFFFFELL;
      v32 = (uint64_t *)(v11 + 160);
      v33 = v61 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v34 = *(v32 - 10);
        v36 = *v32;
        v32 += 20;
        v35 = v36;
        if (v30 <= v34)
          v30 = v34;
        if (v31 <= v35)
          v31 = v35;
        v33 -= 2;
      }
      while (v33);
      if (v30 <= v31)
        v24 = v31;
      else
        v24 = v30;
      if (v61 == v25)
      {
LABEL_32:
        v41 = v62.f32[2];
        v42 = (float32x2_t *)(v11 + v60 - 48);
        *(float32x2_t *)v21.f32 = vsub_f32(*(float32x2_t *)v62.f32, v42[4]);
        v63 = v21;
        v43 = v42[5].f32[0];
        swift_bridgeObjectRelease();
        v44 = v63;
        v44.f32[2] = v41 - v43;
        v45 = vmulq_f32(v44, v44);
        v46 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0]);
        v47 = v3 + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__internalData;
        swift_beginAccess();
        v48 = *(int *)(type metadata accessor for ObjectInteractionStateInternalPB(0) + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v49 = *(_QWORD *)(v47 + v48);
          type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
          swift_allocObject();
          *(_QWORD *)(v47 + v48) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v49);
          swift_release();
        }
        v50 = *(_QWORD *)(v47 + v48);
        swift_beginAccess();
        *(float *)(v50 + 56) = v46;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v51 = *(_QWORD *)(v47 + v48);
          type metadata accessor for ObjectInteractionStateInternalPB._StorageClass();
          swift_allocObject();
          *(_QWORD *)(v47 + v48) = specialized ObjectInteractionStateInternalPB._StorageClass.init(copying:)(v51);
          swift_release();
        }
        v52 = *(_QWORD *)(v47 + v48);
        swift_beginAccess();
        *(float *)(v52 + 64) = (float)v24;
        result = swift_endAccess();
        v53 = *(_QWORD *)(v3 + 112);
        v54 = *(_QWORD *)(v53 + 16);
        if (v54)
        {
          if (v46 >= *(float *)(v53 + 32))
          {
            v56 = *(_QWORD *)(v3 + 136);
            if (*(_QWORD *)(v56 + 16) >= 3uLL)
            {
              if (*(float *)(v56 + 40) < v23)
              {
                if (v54 < 2)
                {
LABEL_60:
                  __break(1u);
                  goto LABEL_61;
                }
                if (*(float *)(v53 + 36) < v46)
                {
                  v57 = *(_QWORD *)(v3 + 128);
                  if (*(_QWORD *)(v57 + 16) < 2uLL)
                  {
LABEL_62:
                    __break(1u);
                    goto LABEL_63;
                  }
                  if (*(_QWORD *)(v57 + 40) >= v24)
                  {
                    v58 = *(_QWORD *)(v3 + 120);
                    if (!*(_QWORD *)(v58 + 16))
                    {
LABEL_63:
                      __break(1u);
                      return result;
                    }
                    if ((int64_t)v61 < *(_QWORD *)(v58 + 32))
                      return 3;
                  }
                }
              }
              if (*(float *)(v56 + 36) < v23)
              {
                if (v54 < 3)
                {
LABEL_61:
                  __break(1u);
                  goto LABEL_62;
                }
                if (*(float *)(v53 + 40) < v46)
                  return 2;
              }
              return 1;
            }
LABEL_59:
            __break(1u);
            goto LABEL_60;
          }
          v55 = *(_QWORD *)(v3 + 128);
          if (*(_QWORD *)(v55 + 16))
          {
            if (*(_QWORD *)(v55 + 32) >= v24)
              return 4;
            else
              return 5;
          }
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    v37 = v61 - v25;
    v38 = (uint64_t *)(v11 + 80 * v25 + 80);
    do
    {
      v40 = *v38;
      v38 += 10;
      v39 = v40;
      if (v24 <= v40)
        v24 = v39;
      --v37;
    }
    while (v37);
    goto LABEL_32;
  }
  swift_bridgeObjectRelease();
  v26 = *(float *)(v3 + 80);
  v27 = *(float *)(v3 + 88);
  swift_retain();
  HandApproachingMouthManager.minDistanceToRecentHandApproachingMouthEventTrajectory(_:_:_:)(v4, v5 | (v6 << 32), v7, v62, v27);
  v29 = v28;
  swift_release();
  if (v26 >= v29)
    return 9;
  else
    return 11;
}

uint64_t MakeRejectorBreakSourceObjectInteractionState.deinit()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  _OWORD v4[4];
  _OWORD v5[2];

  v1 = *(_OWORD *)(v0 + 72);
  v4[2] = *(_OWORD *)(v0 + 56);
  v4[3] = v1;
  v5[0] = *(_OWORD *)(v0 + 88);
  *(_QWORD *)((char *)v5 + 14) = *(_QWORD *)(v0 + 102);
  v2 = *(_OWORD *)(v0 + 40);
  v4[0] = *(_OWORD *)(v0 + 24);
  v4[1] = v2;
  outlined release of MakeRejectorBreakSourceObjectInteractionState.ThresholdConfig((uint64_t)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of ObjectInteractionStateInternalPB(v0 + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__internalData);
  return v0;
}

uint64_t MakeRejectorBreakSourceObjectInteractionState.__deallocating_deinit()
{
  MakeRejectorBreakSourceObjectInteractionState.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for MakeRejectorBreakSourceObjectInteractionState()
{
  return type metadata accessor for MakeRejectorBreakSourceObjectInteractionState();
}

uint64_t type metadata accessor for MakeRejectorBreakSourceObjectInteractionState()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MakeRejectorBreakSourceObjectInteractionState;
  if (!type metadata singleton initialization cache for MakeRejectorBreakSourceObjectInteractionState)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MakeRejectorBreakSourceObjectInteractionState()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ObjectInteractionStateInternalPB(319);
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

__n128 __swift_memcpy124_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 108) = *(__int128 *)((char *)a2 + 108);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MakeRejectorBreakSourceObjectInteractionState.LongTermStates(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[124])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeRejectorBreakSourceObjectInteractionState.LongTermStates(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 120) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 124) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 124) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MakeRejectorBreakSourceObjectInteractionState.LongTermStates()
{
  return &type metadata for MakeRejectorBreakSourceObjectInteractionState.LongTermStates;
}

uint64_t destroy for MakeRejectorBreakSourceObjectInteractionState.AcceptorThresholdConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MakeRejectorBreakSourceObjectInteractionState.AcceptorThresholdConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MakeRejectorBreakSourceObjectInteractionState.AcceptorThresholdConfig(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy36_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MakeRejectorBreakSourceObjectInteractionState.AcceptorThresholdConfig(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MakeRejectorBreakSourceObjectInteractionState.AcceptorThresholdConfig(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeRejectorBreakSourceObjectInteractionState.AcceptorThresholdConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MakeRejectorBreakSourceObjectInteractionState.AcceptorThresholdConfig()
{
  return &type metadata for MakeRejectorBreakSourceObjectInteractionState.AcceptorThresholdConfig;
}

uint64_t destroy for MakeRejectorBreakSourceObjectInteractionState.ThresholdConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MakeRejectorBreakSourceObjectInteractionState.ThresholdConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MakeRejectorBreakSourceObjectInteractionState.ThresholdConfig(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  return a1;
}

__n128 __swift_memcpy86_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 78) = *(_QWORD *)(a2 + 78);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for MakeRejectorBreakSourceObjectInteractionState.ThresholdConfig(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  return a1;
}

uint64_t getEnumTagSinglePayload for MakeRejectorBreakSourceObjectInteractionState.ThresholdConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 86))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeRejectorBreakSourceObjectInteractionState.ThresholdConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 84) = 0;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 86) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 86) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MakeRejectorBreakSourceObjectInteractionState.ThresholdConfig()
{
  return &type metadata for MakeRejectorBreakSourceObjectInteractionState.ThresholdConfig;
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in ObjectInteractionStateInternalPB()
{
  return lazy protocol witness table accessor for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB(&lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionStateInternalPB);
}

void protocol witness for PinchAlgorithmUnit.reset() in conformance MakeRejectorBreakSourceObjectInteractionState()
{
  MakeRejectorBreakSourceObjectInteractionState.resetPinchAcceptors()();
  SceneSegmentationProcessingAdapter.reset()();
}

uint64_t protocol witness for PinchAlgorithmUnit.predict(_:) in conformance MakeRejectorBreakSourceObjectInteractionState@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return MakeRejectorBreakSourceObjectInteractionState.predict(_:)(a1, a2);
}

uint64_t protocol witness for PinchInternalDataType.save(into:) in conformance ObjectInteractionStateInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = type metadata accessor for HandDescriptorInternal();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = a1 + *(int *)(v5 + 48);
    outlined destroy of ObjectInteractionStateInternalPB?(v7);
    outlined init with copy of ObjectInteractionStateInternalPB(v2, v7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(v7, 0, 1, a2);
  }
  return result;
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance ObjectInteractionStateInternalPB@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ObjectInteractionStateInternalPB(v1, a1);
}

uint64_t instantiation function for generic protocol witness table for ObjectInteractionStateInternalPB(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB(&lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionStateInternalPB);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t outlined destroy of ObjectInteractionStateInternalPB?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ObjectInteractionStateInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands15PinchAcceptorIDOG_AF0eF0Cs5NeverOTg5067_s5Hands45MakeRejectorBreakSourceObjectInteractionStateC23getActivee17AcceptorsSayAA0K8F19CGyFAfA0kM2IDOXEfU_AF0klmnopQ0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char *v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v11 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    v6 = (char *)(a1 + 40);
    while (*(_QWORD *)(*(_QWORD *)(a2 + 288) + 16))
    {
      v7 = *v6;
      v8 = *((_QWORD *)v6 - 1);
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v9 & 1) == 0)
      {
        result = swift_bridgeObjectRelease();
        if (!*(_QWORD *)(*(_QWORD *)(a2 + 288) + 16))
          break;
        swift_bridgeObjectRetain();
        specialized __RawDictionaryStorage.find<A>(_:)(1, 1);
        if ((v10 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          __break(1u);
          return v11;
        }
      }
      swift_retain();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized ContiguousArray._endMutation()();
      v6 += 16;
      if (!--v3)
        return v11;
    }
    __break(1u);
  }
  return result;
}

id specialized MakeRejectorBreakSourceObjectInteractionState.ThresholdConfig.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned __int8 v60;
  int v61;
  int v62;
  uint64_t v63;
  id v64;
  uint64_t v65;

  objc_msgSend(a1, sel_TimeToExitObjectInteractionStateAfterInactivity);
  v5 = v4;
  v64 = a1;
  v6 = objc_msgSend(a1, sel_UseHandCloseToMouthToGateObjectInteractionStateNumberOfRepetitionThresholds);
  type metadata accessor for NSNumber();
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v9 = MEMORY[0x24BEE4AF8];
  v63 = a2;
  if (v8)
  {
    v65 = MEMORY[0x24BEE4AF8];
    result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
    {
      __break(1u);
      goto LABEL_46;
    }
    v11 = 0;
    v12 = v65;
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
        v13 = (id)MEMORY[0x24263790C](v11, v7);
      else
        v13 = *(id *)(v7 + 8 * v11 + 32);
      v14 = v13;
      v15 = Int32.init(truncating:)();

      if (v15 < 0)
        v16 = -1;
      else
        v16 = v15;
      v18 = *(_QWORD *)(v65 + 16);
      v17 = *(_QWORD *)(v65 + 24);
      if (v18 >= v17 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      ++v11;
      *(_QWORD *)(v65 + 16) = v18 + 1;
      *(_QWORD *)(v65 + 8 * v18 + 32) = v16;
    }
    while (v8 != v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = MEMORY[0x24BEE4AF8];
  }
  v19 = objc_msgSend(v64, sel_UseHandCloseToMouthToGateObjectInteractionStateRequireObjects);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v20 >> 62))
  {
    v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v21)
      goto LABEL_19;
LABEL_30:
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x24BEE4AF8];
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v21)
    goto LABEL_30;
LABEL_19:
  result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
  if (v21 < 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v22 = 0;
  v23 = v9;
  do
  {
    if ((v20 & 0xC000000000000001) != 0)
      v24 = (id)MEMORY[0x24263790C](v22, v20);
    else
      v24 = *(id *)(v20 + 8 * v22 + 32);
    v25 = v24;
    v26 = Bool.init(truncating:)();

    v28 = *(_QWORD *)(v9 + 16);
    v27 = *(_QWORD *)(v9 + 24);
    if (v28 >= v27 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
    ++v22;
    *(_QWORD *)(v9 + 16) = v28 + 1;
    *(_BYTE *)(v9 + v28 + 32) = v26 & 1;
  }
  while (v21 != v22);
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x24BEE4AF8];
LABEL_31:
  objc_msgSend(v64, sel_UseHandCloseToMouthToGateObjectInteractionStateLastObjectInteractionTimeThreshold);
  v30 = v29;
  v31 = objc_msgSend(v64, sel_TimeToUseHandCloseToMouthToGateObjectInteractionStates);
  v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v61 = v30;
  v62 = v5;
  if (!(v32 >> 62))
  {
    v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v33)
      goto LABEL_33;
LABEL_43:
    swift_bridgeObjectRelease();
    v35 = MEMORY[0x24BEE4AF8];
LABEL_44:
    objc_msgSend(v64, sel_OisTimeBetweenEating);
    v42 = objc_msgSend(v64, sel_UseHandCloseToMouthToGateObjectInteractionStateAllowEnterWithoutObject);
    objc_msgSend(v64, sel_OisTimeToPreventEnterObjectInteractionStateAfterIntentional);
    objc_msgSend(v64, sel_OisDistanceToPreventEnterObjectInteractionStateAfterIntentional);
    objc_msgSend(v64, sel_OisTimeToReenterOisDueToRecentEating);
    v44 = v43;
    objc_msgSend(v64, sel_OisTimeBetweenEating);
    v46 = v45;
    objc_msgSend(v64, sel_OisTimeToPreventEnterObjectInteractionStateAfterIntentional);
    v48 = v47;
    objc_msgSend(v64, sel_OisDistanceToPreventEnterObjectInteractionStateAfterIntentional);
    v50 = v49;
    objc_msgSend(v64, sel_OisTooFarHandToMouthTracjectoryDistanceThreshold);
    v52 = v51;
    objc_msgSend(v64, sel_OisNearHandToMouthTracjectoryDistanceThreshold);
    v54 = v53;
    objc_msgSend(v64, sel_OisNearHandToMouthTracjectoryTimeThreshold);
    v56 = v55;
    v57 = (int)objc_msgSend(v64, sel_OisStrictEatingModeNumberOfRepetitionsToEnter);
    objc_msgSend(v64, sel_OisIntentionScoreThresholdToPreventStrictEatingMode);
    v59 = v58;
    v60 = objc_msgSend(v64, sel_OisStrictEatingModeEnabled);
    result = objc_msgSend(v64, sel_OisEnterOISWhenEnterEatingMode);
    *(_DWORD *)v63 = v62;
    *(_DWORD *)(v63 + 4) = 1063675494;
    *(_DWORD *)(v63 + 8) = v50;
    *(_DWORD *)(v63 + 12) = v48;
    *(_DWORD *)(v63 + 16) = v46;
    *(_BYTE *)(v63 + 20) = v42;
    *(_QWORD *)(v63 + 24) = v12;
    *(_QWORD *)(v63 + 32) = v23;
    *(_DWORD *)(v63 + 40) = v61;
    *(_QWORD *)(v63 + 48) = v35;
    *(_DWORD *)(v63 + 56) = v52;
    *(_DWORD *)(v63 + 60) = v54;
    *(_DWORD *)(v63 + 64) = v56;
    *(_DWORD *)(v63 + 68) = v44;
    *(_QWORD *)(v63 + 72) = v57;
    *(_DWORD *)(v63 + 80) = v59;
    *(_BYTE *)(v63 + 84) = v60;
    *(_BYTE *)(v63 + 85) = (_BYTE)result;
    return result;
  }
  swift_bridgeObjectRetain();
  v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v33)
    goto LABEL_43;
LABEL_33:
  result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33 & ~(v33 >> 63), 0);
  if ((v33 & 0x8000000000000000) == 0)
  {
    v34 = 0;
    v35 = v9;
    do
    {
      if ((v32 & 0xC000000000000001) != 0)
        v36 = (id)MEMORY[0x24263790C](v34, v32);
      else
        v36 = *(id *)(v32 + 8 * v34 + 32);
      v37 = v36;
      Float.init(truncating:)();
      v39 = v38;

      v41 = *(_QWORD *)(v9 + 16);
      v40 = *(_QWORD *)(v9 + 24);
      if (v41 >= v40 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
      ++v34;
      *(_QWORD *)(v9 + 16) = v41 + 1;
      *(_DWORD *)(v9 + 4 * v41 + 32) = v39;
    }
    while (v33 != v34);
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
LABEL_47:
  __break(1u);
  return result;
}

id specialized MakeRejectorBreakSourceObjectInteractionState.AcceptorThresholdConfig.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  void *v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;

  v3 = objc_msgSend(a1, sel_AcceptorThresholdDistanceToObject);
  type metadata accessor for NSNumber();
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = MEMORY[0x24BEE4AF8];
  v53 = a2;
  if (v5)
  {
    v56 = MEMORY[0x24BEE4AF8];
    result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0)
    {
      __break(1u);
      goto LABEL_56;
    }
    v8 = 0;
    v9 = v56;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x24263790C](v8, v4);
      else
        v10 = *(id *)(v4 + 8 * v8 + 32);
      v11 = v10;
      Float.init(truncating:)();
      v13 = v12;

      v15 = *(_QWORD *)(v56 + 16);
      v14 = *(_QWORD *)(v56 + 24);
      if (v15 >= v14 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      ++v8;
      *(_QWORD *)(v56 + 16) = v15 + 1;
      *(_DWORD *)(v56 + 4 * v15 + 32) = v13;
    }
    while (v5 != v8);
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
  v16 = objc_msgSend(a1, sel_AcceptorThresholdNumberOfObjectInteractions);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v17 >> 62))
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v18)
      goto LABEL_16;
LABEL_27:
    swift_bridgeObjectRelease();
    v20 = MEMORY[0x24BEE4AF8];
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v18)
    goto LABEL_27;
LABEL_16:
  result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 & ~(v18 >> 63), 0);
  if (v18 < 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v19 = 0;
  v20 = v6;
  do
  {
    if ((v17 & 0xC000000000000001) != 0)
      v21 = (id)MEMORY[0x24263790C](v19, v17);
    else
      v21 = *(id *)(v17 + 8 * v19 + 32);
    v22 = v21;
    v23 = Int.init(truncating:)();

    v25 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    if (v25 >= v24 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
    ++v19;
    *(_QWORD *)(v20 + 16) = v25 + 1;
    *(_QWORD *)(v20 + 8 * v25 + 32) = v23;
  }
  while (v18 != v19);
  swift_bridgeObjectRelease();
  v6 = MEMORY[0x24BEE4AF8];
LABEL_28:
  v26 = objc_msgSend(a1, sel_AcceptorThresholdSizeOfObjectInPixels);
  v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v54 = v9;
  if (!(v27 >> 62))
  {
    v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v28)
      goto LABEL_30;
LABEL_40:
    swift_bridgeObjectRelease();
    v30 = MEMORY[0x24BEE4AF8];
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v28)
    goto LABEL_40;
LABEL_30:
  result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28 & ~(v28 >> 63), 0);
  if (v28 < 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v29 = 0;
  v30 = v6;
  v31 = v27 & 0xC000000000000001;
  v32 = v27;
  do
  {
    if (v31)
      v33 = (id)MEMORY[0x24263790C](v29, v27);
    else
      v33 = *(id *)(v27 + 8 * v29 + 32);
    v34 = v33;
    v35 = Int.init(truncating:)();

    v37 = *(_QWORD *)(v30 + 16);
    v36 = *(_QWORD *)(v30 + 24);
    if (v37 >= v36 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
    ++v29;
    *(_QWORD *)(v30 + 16) = v37 + 1;
    *(_QWORD *)(v30 + 8 * v37 + 32) = v35;
    v27 = v32;
  }
  while (v28 != v29);
  swift_bridgeObjectRelease();
  v6 = MEMORY[0x24BEE4AF8];
  v9 = v54;
LABEL_41:
  v38 = objc_msgSend(a1, sel_AcceptorThresholdTimeSinceLastInteraction);
  v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v39 >> 62))
  {
    v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v40)
      goto LABEL_43;
LABEL_53:
    swift_bridgeObjectRelease();
    v43 = MEMORY[0x24BEE4AF8];
LABEL_54:
    result = objc_msgSend(a1, sel_OisPinchAcceptorMinDistanceToMouth);
    *(_QWORD *)v53 = v9;
    *(_QWORD *)(v53 + 8) = v20;
    *(_QWORD *)(v53 + 16) = v30;
    *(_QWORD *)(v53 + 24) = v43;
    *(_DWORD *)(v53 + 32) = v52;
    return result;
  }
  swift_bridgeObjectRetain();
  v40 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v40)
    goto LABEL_53;
LABEL_43:
  result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40 & ~(v40 >> 63), 0);
  if ((v40 & 0x8000000000000000) == 0)
  {
    v41 = v40;
    v42 = 0;
    v43 = v6;
    v44 = v39 & 0xC000000000000001;
    v45 = v39;
    do
    {
      if (v44)
        v46 = (id)MEMORY[0x24263790C](v42, v39);
      else
        v46 = *(id *)(v39 + 8 * v42 + 32);
      v47 = v46;
      Float.init(truncating:)();
      v49 = v48;

      v51 = *(_QWORD *)(v43 + 16);
      v50 = *(_QWORD *)(v43 + 24);
      if (v51 >= v50 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
      ++v42;
      *(_QWORD *)(v43 + 16) = v51 + 1;
      *(_DWORD *)(v43 + 4 * v51 + 32) = v49;
      v39 = v45;
    }
    while (v41 != v42);
    swift_bridgeObjectRelease();
    v9 = v54;
    goto LABEL_54;
  }
LABEL_58:
  __break(1u);
  return result;
}

uint64_t specialized MakeRejectorBreakSourceObjectInteractionState.init(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _OWORD *v18;
  id v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  id v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  id v65;
  __int128 v66;
  __int128 v67;
  id v68;
  __int128 v69;
  uint64_t result;
  _OWORD v71[4];
  _OWORD v72[4];
  _BYTE v73[22];
  _OWORD v74[2];
  int v75;

  v2 = v1;
  *(_DWORD *)(v1 + 16) = 257;
  *(_QWORD *)(v1 + 320) = 0;
  *(_BYTE *)(v1 + 328) = 1;
  *(_QWORD *)(v1 + 336) = 0;
  *(_BYTE *)(v1 + 344) = 1;
  *(_QWORD *)(v1 + 352) = 0;
  *(_WORD *)(v1 + 360) = 1;
  v4 = v1 + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__internalData;
  UnknownStorage.init()();
  v5 = *(int *)(type metadata accessor for ObjectInteractionStateInternalPB(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(v4 + v5) = static ObjectInteractionStateInternalPB._StorageClass.defaultInstance;
  v6 = OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__serializeInternalData;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC5Hands45MakeRejectorBreakSourceObjectInteractionState__serializeInternalData) = 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(PinchAcceptorID, PinchAcceptor)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9AC830;
  *(_QWORD *)(inited + 32) = 1;
  *(_BYTE *)(inited + 40) = 1;
  type metadata accessor for PinchAcceptorAcceptAllMake();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 1;
  *(_BYTE *)(v8 + 24) = 1;
  *(_BYTE *)(v8 + 34) = 0;
  *(_QWORD *)(v8 + 40) = 1;
  *(_WORD *)(v8 + 48) = 1;
  *(_WORD *)(v8 + 32) = 1;
  *(_QWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 56) = 2;
  *(_BYTE *)(inited + 64) = 1;
  type metadata accessor for PinchAcceptorAcceptGoodMake();
  v9 = swift_allocObject();
  swift_retain();
  v10 = a1;
  v11 = specialized PinchAcceptorAcceptGoodMake.init(_:_:)(v10, 2, 1, v9);

  swift_release();
  *(_QWORD *)(inited + 72) = v11;
  *(_QWORD *)(inited + 80) = 3;
  *(_BYTE *)(inited + 88) = 1;
  type metadata accessor for PinchAcceptorDuringTouch();
  v12 = swift_allocObject();
  v13 = v10;
  objc_msgSend(v13, sel_OisPinchAcceptorDuringTouchOcclusionThreshold);
  v15 = v14;
  v16 = objc_msgSend(v13, sel_OisPinchAcceptorMinTouchFrameToAllowMake);
  if ((v16 & 0x80000000) != 0)
    goto LABEL_6;
  *(_DWORD *)(v12 + 128) = v15;
  *(_QWORD *)(v12 + 136) = v16;
  v17 = specialized PichAcceptorWithMakeCandidate.init(_:_:)(v13, 3, 1, v12);

  swift_release();
  *(_QWORD *)(inited + 96) = v17;
  *(_QWORD *)(inited + 104) = 4;
  *(_BYTE *)(inited + 112) = 1;
  type metadata accessor for PinchAcceptorSelectionAtBreak();
  v18 = (_OWORD *)swift_allocObject();
  v19 = v13;
  specialized SelectionRecoveryInBreakProcessing.ThresholdConfig.init(_:)(v19, (uint64_t)v71);
  v20 = v71[1];
  v18[8] = v71[0];
  v18[9] = v20;
  v21 = v71[3];
  v18[10] = v71[2];
  v18[11] = v21;
  v22 = specialized PichAcceptorWithMakeCandidate.init(_:_:)(v19, 4, 1, (uint64_t)v18);

  swift_release();
  *(_QWORD *)(inited + 120) = v22;
  *(_QWORD *)(inited + 128) = 5;
  *(_BYTE *)(inited + 136) = 1;
  type metadata accessor for PinchAcceptorDuringTouchForScroll();
  v23 = swift_allocObject();
  *(_DWORD *)(v23 + 128) = 1065353216;
  v24 = v19;
  objc_msgSend(v24, sel_OisPinchAcceptorScrollMovementRange);
  v26 = v25;
  v27 = objc_msgSend(v24, sel_OisPinchAcceptorMinTouchFrameToAllowMake);
  if ((v27 & 0x80000000) != 0)
  {
LABEL_6:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v23 + 136) = v26;
    *(_QWORD *)(v23 + 144) = v27;
    v28 = specialized PichAcceptorWithMakeCandidate.init(_:_:)(v24, 5, 1, v23);

    swift_release();
    *(_QWORD *)(inited + 144) = v28;
    *(_QWORD *)(inited + 152) = 6;
    *(_BYTE *)(inited + 160) = 1;
    type metadata accessor for PinchAcceptorHighIntentionMake();
    v29 = swift_allocObject();
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v29 + 128) = _D0;
    v35 = v24;
    *(_QWORD *)(v29 + 136) = specialized PinchAcceptorHighIntentionMake.ThresholdConfig.init(_:)(v35);
    *(_DWORD *)(v29 + 144) = v36;
    *(_QWORD *)(v29 + 152) = v37;
    v38 = specialized PichAcceptorWithMakeCandidate.init(_:_:)(v35, 6, 1, v29);
    swift_release();
    *(_QWORD *)(inited + 168) = v38;
    *(_QWORD *)(inited + 176) = 7;
    *(_BYTE *)(inited + 184) = 1;
    type metadata accessor for PinchAcceptorRepeatedPinch();
    v39 = swift_allocObject();
    v40 = v35;
    objc_msgSend(v40, sel_RecoveryMakeBreakSimilarityThreshold);
    *(_DWORD *)(v39 + 128) = v41;
    *(_OWORD *)(v39 + 144) = 0u;
    *(_OWORD *)(v39 + 160) = 0u;
    *(_OWORD *)(v39 + 176) = 0u;
    *(_OWORD *)(v39 + 192) = 0u;
    *(_OWORD *)(v39 + 208) = 0u;
    *(_OWORD *)(v39 + 220) = 0u;
    v42 = specialized PichAcceptorWithMakeCandidate.init(_:_:)(v40, 7, 1, v39);

    swift_release();
    *(_QWORD *)(inited + 192) = v42;
    *(_QWORD *)(inited + 200) = 8;
    *(_BYTE *)(inited + 208) = 1;
    type metadata accessor for PinchAcceptorStaticHand();
    v43 = swift_allocObject();
    v44 = v40;
    LOBYTE(v42) = objc_msgSend(v44, sel_UseStaticHandStateForOIS);
    objc_msgSend(v44, sel_OisPinchAcceptorStaticHandHoverDistanceReductionThreshold);
    v46 = v45;
    objc_msgSend(v44, sel_OisPinchAcceptorStaticHandIntentionThreshold);
    *(_BYTE *)(v43 + 52) = v42;
    *(_DWORD *)(v43 + 56) = v46;
    *(_DWORD *)(v43 + 60) = v47;

    *(_QWORD *)(v43 + 16) = 8;
    *(_BYTE *)(v43 + 24) = 1;
    *(_WORD *)(v43 + 32) = 0;
    *(_BYTE *)(v43 + 34) = 0;
    *(_QWORD *)(v43 + 40) = 8;
    *(_WORD *)(v43 + 48) = 1;
    *(_QWORD *)(inited + 216) = v43;
    *(_QWORD *)(inited + 224) = 10;
    *(_BYTE *)(inited + 232) = 1;
    type metadata accessor for PinchAcceptorHighConfidencePinch();
    v48 = swift_allocObject();
    v49 = v44;
    v50 = specialized PinchAcceptorHighConfidencePinch.init(_:_:)(10, 1, v48);

    swift_release();
    *(_QWORD *)(inited + 240) = v50;
    *(_QWORD *)(inited + 248) = 9;
    *(_BYTE *)(inited + 256) = 1;
    type metadata accessor for PinchAcceptorConsecutivePinchAttempt();
    v51 = swift_allocObject();
    v52 = v49;
    swift_retain();
    CMTime.init(value:timescale:)(0, 1);
    *(CMTime *)(v51 + 64) = CMTime.init(value:timescale:)(0, 1);
    *(_QWORD *)(v51 + 96) = 0;
    *(_QWORD *)(v51 + 104) = 0;
    *(_WORD *)(v51 + 112) = 0;
    v53 = v52;
    objc_msgSend(v53, sel_OisMaxMovementSecondAttemptExit);
    v55 = v54;
    objc_msgSend(v53, sel_OisMaxTimeSecondAttemptExit);
    v57 = v56;

    *(_DWORD *)(v51 + 52) = v55;
    *(_DWORD *)(v51 + 56) = v57;
    CMTime.init(value:timescale:)(0, 1);
    *(CMTime *)(v51 + 64) = CMTime.init(value:timescale:)(0, 1);
    *(_QWORD *)(v51 + 96) = 0;
    *(_QWORD *)(v51 + 104) = 0;
    *(_WORD *)(v51 + 112) = 0;

    swift_release();
    *(_QWORD *)(v51 + 16) = 9;
    *(_BYTE *)(v51 + 24) = 1;
    *(_WORD *)(v51 + 32) = 0;
    *(_BYTE *)(v51 + 34) = 0;
    *(_QWORD *)(v51 + 40) = 9;
    *(_WORD *)(v51 + 48) = 1;
    *(_QWORD *)(inited + 264) = v51;
    v58 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v59 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v2 + 288) = v58;
    *(_QWORD *)(v2 + 296) = v59;
    v60 = v53;
    v61 = specialized SceneSegmentationProcessing.__allocating_init(_:)(v60);

    type metadata accessor for SceneSegmentationProcessingAdapter();
    v62 = swift_allocObject();
    *(_OWORD *)(v62 + 48) = 0u;
    *(_QWORD *)(v62 + 24) = 0;
    *(_QWORD *)(v62 + 32) = 0;
    *(_QWORD *)(v62 + 16) = 0;
    *(_QWORD *)(v62 + 64) = -1;
    *(_BYTE *)(v62 + 72) = 0;
    *(_QWORD *)(v62 + 76) = 0x3F800000BF800000;
    *(_WORD *)(v62 + 84) = 0;
    *(_QWORD *)(v62 + 96) = v59;
    *(_QWORD *)(v62 + 104) = 20;
    *(_QWORD *)(v62 + 88) = v61;
    *(_QWORD *)(v2 + 304) = v62;
    type metadata accessor for HandApproachingMouthManager();
    swift_allocObject();
    v63 = v60;
    v64 = specialized HandApproachingMouthManager.init(_:)(v63);

    *(_QWORD *)(v2 + 312) = v64;
    v65 = v63;
    specialized MakeRejectorBreakSourceObjectInteractionState.ThresholdConfig.init(_:)(v65, (uint64_t)v72);

    v66 = v72[3];
    *(_OWORD *)(v2 + 56) = v72[2];
    *(_OWORD *)(v2 + 72) = v66;
    *(_OWORD *)(v2 + 88) = *(_OWORD *)v73;
    *(_QWORD *)(v2 + 102) = *(_QWORD *)&v73[14];
    v67 = v72[1];
    *(_OWORD *)(v2 + 24) = v72[0];
    *(_OWORD *)(v2 + 40) = v67;
    v68 = v65;
    specialized MakeRejectorBreakSourceObjectInteractionState.AcceptorThresholdConfig.init(_:)(v68, (uint64_t)v74);

    v69 = v74[1];
    *(_OWORD *)(v2 + 112) = v74[0];
    *(_OWORD *)(v2 + 128) = v69;
    *(_DWORD *)(v2 + 144) = v75;
    *(_BYTE *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 164) = 0u;
    *(_OWORD *)(v2 + 180) = 0u;
    *(_OWORD *)(v2 + 196) = 0u;
    *(_OWORD *)(v2 + 212) = 0u;
    *(_QWORD *)(v2 + 228) = 0;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_QWORD *)(v2 + 272) = 0;
    *(_BYTE *)(v2 + 280) = 1;
    *(_WORD *)(v2 + 281) = 0;
    *(_BYTE *)(v2 + 283) = 0;
    *(_BYTE *)(v2 + 16) = objc_msgSend(v68, sel_EnableObjectInteractionState);
    *(_BYTE *)(v2 + 17) = objc_msgSend(v68, sel_UseHandCloseToMouthToGateObjectInteractionState);
    *(_BYTE *)(v2 + 18) = objc_msgSend(v68, sel_UseSegmentationOIHForObjectInteractionState);
    *(_BYTE *)(v2 + 19) = objc_msgSend(v68, sel_UseStaticHandStateForOIS);
    *(_BYTE *)(v2 + v6) = objc_msgSend(v68, sel_SerializeInternalData);
    MakeRejectorBreakSourceObjectInteractionState.resetPinchAcceptors()();
    SceneSegmentationProcessingAdapter.reset()();
    return v2;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ObjectInteractionStateInternalPB(255);
    result = MEMORY[0x242638C74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of PinchInternalDataType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInternalDataType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t Hands_trace_CBridge_2()
{
  return kdebug_trace();
}

uint64_t outlined assign with take of ObjectInteractionStateInternalPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of MakeRejectorBreakSourceObjectInteractionState.ThresholdConfig(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of ObjectInteractionStateInternalPB(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DoubleTapStateMachine.State()
{
  unsigned __int8 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DoubleTapStateMachine.State()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DoubleTapStateMachine.State()
{
  unsigned __int8 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DoubleTapStateMachine.State@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized DoubleTapStateMachine.State.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DoubleTapStateMachine.State(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

Swift::Void __swiftcall DoubleTapStateMachine.reset()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 176) = 0;
  swift_beginAccess();
  *(_QWORD *)(v0 + 184) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 192) = 0;
  *(_BYTE *)(v0 + 200) = 1;
  *(_QWORD *)(v0 + 208) = 0;
  *(_BYTE *)(v0 + 216) = 1;
  *(_QWORD *)(v0 + 224) = 0;
  *(_BYTE *)(v0 + 232) = 1;
  *(_QWORD *)(v0 + 240) = 0;
  *(_BYTE *)(v0 + 248) = 1;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_QWORD *)(v0 + 272) = 0;
  *(_BYTE *)(v0 + 280) = 1;
  *(_QWORD *)(v0 + 288) = 0;
  *(_BYTE *)(v0 + 296) = 1;
  *(_QWORD *)(v0 + 304) = 0;
  *(_BYTE *)(v0 + 312) = 1;
  *(_QWORD *)(v0 + 320) = 0;
  *(_BYTE *)(v0 + 328) = 1;
}

BOOL DoubleTapStateMachine.update(withDistance:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  unint64_t v25;
  double v26;
  unsigned int v27;
  double v28;
  double v29;
  double v30;
  double v31;
  BOOL v32;
  double v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  double v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  double v59;
  double v60;
  double v62;
  double v63;
  double v64;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  BOOL v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;

  v2 = v1;
  v3 = a1;
  v4 = *(double *)(a1 + 24);
  v5 = *(double *)(a1 + 40);
  swift_retain();
  NoiseEstimator.update(withDist:)(v3);
  swift_release();
  v6 = (uint64_t *)(v1 + 184);
  swift_beginAccess();
  v7 = *(_QWORD *)(*v6 + 16);
  if (v7)
  {
    v8 = *v6 + 48 * v7;
    v4 = *(double *)(v8 + 8);
    v5 = *(double *)(v8 + 24);
  }
  swift_beginAccess();
  v9 = *v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_127:
    v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
    *v6 = v9;
  }
  v15 = *(_QWORD *)(v9 + 16);
  v14 = *(_QWORD *)(v9 + 24);
  if (v15 >= v14 >> 1)
  {
    v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, (_QWORD *)v9);
    *v6 = v9;
  }
  *(_QWORD *)(v9 + 16) = v15 + 1;
  v16 = (_OWORD *)(v9 + 48 * v15);
  v17 = *(_OWORD *)v3;
  v18 = *(_OWORD *)(v3 + 32);
  v16[3] = *(_OWORD *)(v3 + 16);
  v16[4] = v18;
  v16[2] = v17;
  v19 = (_QWORD *)*v6;
  v20 = *(_QWORD *)(*v6 + 16);
  if (!v20)
  {
    v9 = 0;
    goto LABEL_15;
  }
  v21 = 0;
  v9 = 0;
  v22 = *(double *)(v3 + 16);
  v23 = v22 - *(double *)(v2 + 48);
  while (1)
  {
    v24 = *(double *)&v19[v21 + 6];
    if (v24 < v23)
      break;
    ++v9;
    v21 += 6;
    if (v20 == v9)
    {
      v9 = *(_QWORD *)(*v6 + 16);
      goto LABEL_15;
    }
  }
  v25 = v9 + 1;
  if (__OFADD__(v9, 1))
    goto LABEL_129;
  v72 = v3;
  if (v25 != v20)
  {
    v48 = v21 * 8 + 120;
    do
    {
      if (v25 >= v20)
      {
        __break(1u);
        goto LABEL_107;
      }
      v50 = (char *)v19 + v48;
      v52 = *(double *)((char *)v19 + v48 - 24);
      v23 = v22 - *(double *)(v2 + 48);
      if (v52 >= v23)
      {
        if (v25 != v9)
        {
          if (v9 >= v20)
          {
            __break(1u);
            goto LABEL_127;
          }
          v53 = (uint64_t)&v19[6 * v9 + 4];
          v54 = *(_QWORD *)v53;
          v55 = *(_BYTE *)(v53 + 8);
          v74 = *(_OWORD *)(v53 + 32);
          v75 = *(_OWORD *)(v53 + 16);
          v56 = *((_QWORD *)v50 - 5);
          v3 = *((unsigned __int8 *)v19 + v48 - 32);
          v73 = *(_OWORD *)((char *)v19 + v48 - 16);
          v57 = *(_QWORD *)((char *)v19 + v48);
          v58 = swift_isUniquelyReferenced_nonNull_native();
          *v6 = (uint64_t)v19;
          if ((v58 & 1) == 0)
          {
            v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
            *v6 = (uint64_t)v19;
          }
          v49 = &v19[6 * v9];
          v49[4] = v56;
          *((_BYTE *)v49 + 40) = v3;
          *((double *)v49 + 6) = v52;
          *(_OWORD *)(v49 + 7) = v73;
          v49[9] = v57;
          v50 = (char *)(*v6 + v48);
          *((_QWORD *)v50 - 5) = v54;
          *(v50 - 32) = v55;
          *(_OWORD *)(v50 - 24) = v75;
          v23 = *(double *)&v74;
          *(_OWORD *)(v50 - 8) = v74;
          v19 = (_QWORD *)*v6;
        }
        if (__OFADD__(v9++, 1))
        {
          __break(1u);
          goto LABEL_114;
        }
        v20 = v19[2];
      }
      ++v25;
      v48 += 48;
    }
    while (v25 != v20);
  }
  v3 = v72;
  if ((uint64_t)v20 < v9)
  {
    __break(1u);
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
LABEL_15:
  specialized Array.replaceSubrange<A>(_:with:)(v9, v20);
  swift_endAccess();
  v22 = *(double *)(v3 + 16);
  if ((*(_BYTE *)(v2 + 216) & 1) != 0)
  {
    *(double *)(v2 + 208) = v22;
    *(_BYTE *)(v2 + 216) = 0;
    v26 = v22;
  }
  else
  {
    v26 = *(double *)(v2 + 208);
  }
  v9 = v2 + 264;
  v27 = *(unsigned __int8 *)(v2 + 176);
  v28 = *(double *)(v3 + 40);
  v29 = *(double *)(v2 + 24);
  if (v29 > v28)
    goto LABEL_134;
  v30 = 2.0;
  if (v27 < 3)
    v30 = 1.0;
  v31 = v30 * *(double *)(v2 + 16);
  v32 = v31 >= *(double *)(v3 + 24) || v29 > v5;
  if (!v32 && v31 < v4)
  {
    *(_BYTE *)(v2 + 176) = 0;
    *(double *)(v2 + 208) = v22;
    *(_BYTE *)(v2 + 216) = 0;
  }
  else
  {
LABEL_134:
    if (*(_BYTE *)(v2 + 176))
    {
      v4 = v22 - v26;
      switch(*(_BYTE *)(v2 + 176))
      {
        case 1:
          goto LABEL_35;
        case 2:
          v34 = *(double *)(v3 + 32);
          v35 = *(_BYTE *)(v2 + 232);
          goto LABEL_45;
        case 3:
          goto LABEL_83;
        case 4:
          v59 = *(double *)(v3 + 32);
          goto LABEL_64;
        case 5:
          goto LABEL_76;
        default:
          goto LABEL_96;
      }
    }
  }
  if (v28 >= v29 || *(double *)(v2 + 32) >= *(double *)(v3 + 32))
    goto LABEL_96;
  *(_BYTE *)(v2 + 176) = 1;
  *(double *)(v2 + 208) = v22;
  *(_BYTE *)(v2 + 216) = 0;
  v4 = v22 - v22;
LABEL_35:
  *(_QWORD *)(v2 + 224) = 0;
  *(_BYTE *)(v2 + 232) = 1;
  *(_QWORD *)(v2 + 240) = 0;
  *(_BYTE *)(v2 + 248) = 1;
  *(_QWORD *)(v2 + 256) = 0;
  *(_BYTE *)v9 = 1;
  *(_QWORD *)(v2 + 272) = 0;
  *(_BYTE *)(v2 + 280) = 1;
  *(_QWORD *)(v2 + 288) = 0;
  *(_BYTE *)(v2 + 296) = 1;
  *(_QWORD *)(v2 + 304) = 0;
  *(_BYTE *)(v2 + 312) = 1;
  *(_QWORD *)(v2 + 320) = 0;
  *(_BYTE *)(v2 + 328) = 1;
  swift_beginAccess();
  v36 = *(_QWORD *)(v2 + 184);
  v37 = *(_QWORD *)(v36 + 16);
  if (!v37)
  {
LABEL_130:
    __break(1u);
    JUMPOUT(0x23D75582CLL);
  }
  v38 = *(double *)(v36 + 64);
  v39 = v37 - 1;
  if (v39)
  {
    v40 = (double *)(v36 + 112);
    v41 = v38;
    do
    {
      v42 = *v40;
      v40 += 6;
      v43 = v42;
      if (v41 < v42)
      {
        v38 = v43;
        v41 = v43;
      }
      --v39;
    }
    while (v39);
  }
  *(double *)(v2 + 224) = v38;
  *(_BYTE *)(v2 + 232) = 0;
  v34 = *(double *)(v3 + 32);
  if (v34 / v38 < *(double *)(v2 + 56) && v34 < *(double *)(v2 + 40) && *(double *)(v2 + 120) <= v4)
  {
    v35 = 0;
    *(_BYTE *)(v2 + 176) = 2;
    *(double *)(v2 + 208) = v22;
    *(_BYTE *)(v2 + 216) = 0;
    v4 = v22 - v22;
LABEL_45:
    v44 = *(double *)(v2 + 240);
    if (*(_BYTE *)(v2 + 248))
      v44 = INFINITY;
    if (v34 >= v44)
      v45 = v44;
    else
      v45 = v34;
    *(double *)(v2 + 240) = v45;
    *(_BYTE *)(v2 + 248) = 0;
    *(double *)(v2 + 288) = v4;
    *(_BYTE *)(v2 + 296) = 0;
    if ((v35 & 1) != 0)
    {
      v78 = MEMORY[0x24BEE0D00];
      v76 = 0xD000000000000024;
      v77 = 0x800000023D9C9A00;
      v46 = MEMORY[0x24BEE4AF8];
      v47 = 265;
LABEL_102:
      specialized static HLog.E(file:function:line:_:_:)(0xD000000000000077, 0x800000023D9C9930, v47, (uint64_t)&v76, v46);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v76);
      return 0;
    }
    v62 = *(double *)(v2 + 224) - v45;
    v63 = v34 - v45;
    if (*(double *)(v2 + 136) <= v4)
    {
      *(_BYTE *)(v2 + 176) = 0;
      *(double *)(v2 + 208) = v22;
      *(_BYTE *)(v2 + 216) = 0;
    }
    if (*(double *)(v2 + 64) <= v63 / v62 && *(double *)(v2 + 72) < v63)
    {
      *(_BYTE *)(v2 + 176) = 3;
      *(double *)(v2 + 208) = v22;
      *(_BYTE *)(v2 + 216) = 0;
      v4 = v22 - v22;
      v26 = v22;
LABEL_83:
      if ((*(_BYTE *)v9 & 1) != 0)
      {
        v59 = *(double *)(v3 + 32);
        v64 = 0.0;
        if (v59 >= 0.0)
          v64 = *(double *)(v3 + 32);
      }
      else
      {
        v64 = *(double *)(v2 + 256);
        v59 = *(double *)(v3 + 32);
        if (v64 <= v59)
          v64 = *(double *)(v3 + 32);
      }
      *(double *)(v2 + 256) = v64;
      *(_BYTE *)v9 = 0;
      *(double *)(v2 + 320) = v4;
      *(_BYTE *)(v2 + 328) = 0;
      if ((*(_BYTE *)(v2 + 248) & 1) != 0)
      {
        v78 = MEMORY[0x24BEE0D00];
        v76 = 0xD000000000000021;
        v77 = 0x800000023D9C99D0;
        v46 = MEMORY[0x24BEE4AF8];
        v47 = 289;
        goto LABEL_102;
      }
      if (*(double *)(v2 + 152) <= v4)
      {
        *(_BYTE *)(v2 + 176) = 0;
        *(double *)(v2 + 208) = v22;
        v26 = v22;
        *(_BYTE *)(v2 + 216) = 0;
      }
      if (*(double *)(v2 + 144) <= v22 - v26 && *(double *)(v2 + 80) < (v64 - v59) / (v64 - *(double *)(v2 + 240)))
      {
        *(_BYTE *)(v2 + 176) = 4;
        *(double *)(v2 + 208) = v22;
        *(_BYTE *)(v2 + 216) = 0;
        v4 = v22 - v22;
        v26 = v22;
LABEL_64:
        *(_QWORD *)&v18 = *(_QWORD *)(v2 + 272);
        if (*(_BYTE *)(v2 + 280))
          *(double *)&v18 = INFINITY;
        if (v59 < *(double *)&v18)
          *(double *)&v18 = v59;
        *(_QWORD *)(v2 + 272) = v18;
        *(_BYTE *)(v2 + 280) = 0;
        *(double *)(v2 + 304) = v4;
        *(_BYTE *)(v2 + 312) = 0;
        v60 = *(double *)&v18 + *(double *)(v2 + 88);
        if (*(double *)(v2 + 136) <= v4)
        {
          *(_BYTE *)(v2 + 176) = 0;
          *(double *)(v2 + 208) = v22;
          v26 = v22;
          *(_BYTE *)(v2 + 216) = 0;
        }
        if (*(double *)(v2 + 128) <= v22 - v26 && v60 <= v59)
        {
          *(_BYTE *)(v2 + 176) = 5;
          *(double *)(v2 + 208) = v22;
          *(_BYTE *)(v2 + 216) = 0;
          v23 = v22 - v22;
          if (v27 != 5)
          {
            if ((*(_BYTE *)(v2 + 232) & 1) != 0 || (*(_BYTE *)(v2 + 248) & 1) != 0 || (*(_BYTE *)v9 & 1) != 0)
            {
              v78 = MEMORY[0x24BEE0D00];
              v76 = 0xD00000000000001DLL;
              v77 = 0x800000023D9C99B0;
              v46 = MEMORY[0x24BEE4AF8];
              v47 = 333;
              goto LABEL_102;
            }
            v13 = *(double *)(v2 + 240);
            v66 = *(double *)(v2 + 256);
            v24 = *(double *)(v2 + 224) - v13;
            v11 = v66 - v13;
            v12 = v66 - *(double *)&v18;
            if (v12 >= *(double *)(v2 + 112))
LABEL_107:
              LODWORD(v50) = *(double *)(v2 + 96) > vabdd_f64(v13, *(double *)&v18);
            else
              LODWORD(v50) = 0;
            if (v24 + v11 + v12 <= *(double *)(v2 + 168) * *(double *)(*(_QWORD *)(v2 + 336) + 56))
              LODWORD(v50) = 0;
            if ((*(_BYTE *)(v9 + 32) & 1) != 0 || (*(_BYTE *)(v9 + 64) & 1) != 0)
            {
              v78 = MEMORY[0x24BEE0D00];
              v76 = 0xD00000000000001DLL;
              v77 = 0x800000023D9C99B0;
              v46 = MEMORY[0x24BEE4AF8];
              v47 = 367;
              goto LABEL_102;
            }
LABEL_114:
            v67 = *(double *)(v2 + 288);
            if (v4 >= v67)
              v68 = *(double *)(v2 + 288);
            else
              v68 = v4;
            if (v67 > v4)
              v69 = *(double *)(v2 + 288);
            else
              v69 = v4;
            v70 = v67 + v4;
            v71 = v68 / v69 < *(double *)(v2 + 104) || v70 < *(double *)(v2 + 320);
            if (!v71 && ((v50 ^ 1) & 1) == 0)
            {
              *(double *)(v2 + 192) = v22;
              *(_BYTE *)(v2 + 200) = 0;
            }
          }
          v4 = v23;
LABEL_76:
          if (*(double *)(v2 + 160) <= v4)
          {
            *(_BYTE *)(v2 + 176) = 0;
            *(double *)(v2 + 208) = v22;
            *(_BYTE *)(v2 + 216) = 0;
          }
        }
      }
    }
  }
LABEL_96:
  if ((*(_BYTE *)(v2 + 200) & 1) == 0)
    return *(double *)(v2 + 192) == v22;
  return 0;
}

uint64_t DoubleTapStateMachine.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DoubleTapStateMachine()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for DoubleTapStateMachine.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23D7558D8 + 4 * byte_23D9ACA75[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23D75590C + 4 * byte_23D9ACA70[v4]))();
}

uint64_t sub_23D75590C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D755914(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D75591CLL);
  return result;
}

uint64_t sub_23D755928(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D755930);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23D755934(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D75593C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DoubleTapStateMachine.State()
{
  return &type metadata for DoubleTapStateMachine.State;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t getEnumTagSinglePayload for DoubleTapStateMachine.Config(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DoubleTapStateMachine.Config(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 160) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DoubleTapStateMachine.Config()
{
  return &type metadata for DoubleTapStateMachine.Config;
}

unint64_t lazy protocol witness table accessor for type DoubleTapStateMachine.State and conformance DoubleTapStateMachine.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DoubleTapStateMachine.State and conformance DoubleTapStateMachine.State;
  if (!lazy protocol witness table cache variable for type DoubleTapStateMachine.State and conformance DoubleTapStateMachine.State)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for DoubleTapStateMachine.State, &type metadata for DoubleTapStateMachine.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DoubleTapStateMachine.State and conformance DoubleTapStateMachine.State);
  }
  return result;
}

uint64_t specialized DoubleTapStateMachine.State.init(rawValue:)(uint64_t result)
{
  if (result >= 6)
    return 6;
  else
    return result;
}

double specialized DoubleTapStateMachine.Config.init(_:)@<D0>(void *a1@<X0>, double *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  double v16;
  float v17;
  double v18;
  float v19;
  double v20;
  float v21;
  double v22;
  float v23;
  double v24;
  float v25;
  double v26;
  float v27;
  double v28;
  float v29;
  double v30;
  float v31;
  double result;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;

  objc_msgSend(a1, sel_MiddleDoubleTapIdleDist);
  v43 = v4;
  objc_msgSend(a1, sel_MiddleDoubleTapIdleAngle);
  v42 = v5;
  objc_msgSend(a1, sel_MiddleDoubleTapReadyDist);
  v41 = v6;
  objc_msgSend(a1, sel_MiddleDoubleTapTap1Dist);
  v40 = v7;
  objc_msgSend(a1, sel_MiddleDoubleTapTap1DropDur);
  v39 = v8;
  objc_msgSend(a1, sel_MiddleDoubleTapTap1DropFrac);
  v38 = v9;
  objc_msgSend(a1, sel_MiddleDoubleTapBounceRiseFrac);
  v37 = v10;
  objc_msgSend(a1, sel_MiddleDoubleTapBounceDist);
  v36 = v11;
  objc_msgSend(a1, sel_MiddleDoubleTapTap2DropFrac);
  v35 = v12;
  objc_msgSend(a1, sel_MiddleDoubleTapRiseDist);
  v34 = v13;
  objc_msgSend(a1, sel_MiddleDoubleTapMaxTapDistDiff);
  v33 = v14;
  objc_msgSend(a1, sel_MiddleDoubleTapMinTapDurDiff);
  v16 = v15;
  objc_msgSend(a1, sel_MiddleDoubleTapMinBounceDropDist);
  v18 = v17;
  objc_msgSend(a1, sel_MiddleDoubleTapMinReadyDur);
  v20 = v19;
  objc_msgSend(a1, sel_MiddleDoubleTapMinTapDur);
  v22 = v21;
  objc_msgSend(a1, sel_MiddleDoubleTapMaxTapDur);
  v24 = v23;
  objc_msgSend(a1, sel_MiddleDoubleTapMinBounceDur);
  v26 = v25;
  objc_msgSend(a1, sel_MiddleDoubleTapMaxBounceDur);
  v28 = v27;
  objc_msgSend(a1, sel_MiddleDoubleTapMinResetDur);
  v30 = v29;
  objc_msgSend(a1, sel_MiddleDoubleTapMinTravelDistNoiseRatio);
  result = v31;
  *a2 = v43;
  a2[1] = v42;
  a2[2] = v41;
  a2[3] = v40;
  a2[4] = v39;
  a2[5] = v38;
  a2[6] = v37;
  a2[7] = v36;
  a2[8] = v35;
  a2[9] = v34;
  a2[10] = v33;
  a2[11] = v16;
  a2[12] = v18;
  a2[13] = v20;
  a2[14] = v22;
  a2[15] = v24;
  a2[16] = v26;
  a2[17] = v28;
  a2[18] = v30;
  a2[19] = result;
  return result;
}

uint64_t specialized DoubleTapStateMachine.init(_:)(void *a1)
{
  uint64_t v1;
  id v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[10];
  _OWORD v20[10];

  v3 = objc_msgSend(objc_allocWithZone((Class)HandsKitConfig), sel_init);
  specialized DoubleTapStateMachine.Config.init(_:)(v3, (double *)v19);

  v4 = v19[7];
  *(_OWORD *)(v1 + 112) = v19[6];
  *(_OWORD *)(v1 + 128) = v4;
  v5 = v19[9];
  *(_OWORD *)(v1 + 144) = v19[8];
  *(_OWORD *)(v1 + 160) = v5;
  v6 = v19[3];
  *(_OWORD *)(v1 + 48) = v19[2];
  *(_OWORD *)(v1 + 64) = v6;
  v7 = v19[5];
  *(_OWORD *)(v1 + 80) = v19[4];
  *(_OWORD *)(v1 + 96) = v7;
  v8 = v19[1];
  *(_OWORD *)(v1 + 16) = v19[0];
  *(_OWORD *)(v1 + 32) = v8;
  *(_BYTE *)(v1 + 176) = 0;
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 184) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 192) = 0;
  *(_BYTE *)(v1 + 200) = 1;
  *(_QWORD *)(v1 + 208) = 0;
  *(_BYTE *)(v1 + 216) = 1;
  *(_QWORD *)(v1 + 224) = 0;
  *(_BYTE *)(v1 + 232) = 1;
  *(_QWORD *)(v1 + 240) = 0;
  *(_BYTE *)(v1 + 248) = 1;
  *(_QWORD *)(v1 + 256) = 0;
  *(_BYTE *)(v1 + 264) = 1;
  *(_QWORD *)(v1 + 272) = 0;
  *(_BYTE *)(v1 + 280) = 1;
  *(_QWORD *)(v1 + 288) = 0;
  *(_BYTE *)(v1 + 296) = 1;
  *(_QWORD *)(v1 + 304) = 0;
  *(_BYTE *)(v1 + 312) = 1;
  *(_QWORD *)(v1 + 320) = 0;
  *(_BYTE *)(v1 + 328) = 1;
  v10 = a1;
  specialized DoubleTapStateMachine.Config.init(_:)(v10, (double *)v20);

  v11 = v20[7];
  *(_OWORD *)(v1 + 112) = v20[6];
  *(_OWORD *)(v1 + 128) = v11;
  v12 = v20[9];
  *(_OWORD *)(v1 + 144) = v20[8];
  *(_OWORD *)(v1 + 160) = v12;
  v13 = v20[3];
  *(_OWORD *)(v1 + 48) = v20[2];
  *(_OWORD *)(v1 + 64) = v13;
  v14 = v20[5];
  *(_OWORD *)(v1 + 80) = v20[4];
  *(_OWORD *)(v1 + 96) = v14;
  v15 = v20[1];
  *(_OWORD *)(v1 + 16) = v20[0];
  *(_OWORD *)(v1 + 32) = v15;
  v16 = (int)objc_msgSend(v10, sel_MiddleDoubleTapNoiseWindowSize);
  type metadata accessor for NoiseEstimator();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 24) = v9;
  *(_QWORD *)(v17 + 32) = v9;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v1 + 336) = v17;
  return v1;
}

Swift::Void __swiftcall PipelineStatistics.reconfig(_:)(HandsKitConfig *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  CFTimeInterval v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  CFTimeInterval v16;
  __int128 v17;
  __int128 v18;
  HandsKitConfig *v19;
  CFTimeInterval v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  CFTimeInterval v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  unsigned int v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  HandsKitConfig *v49;
  unint64_t v50;
  _OWORD *v51;
  _BYTE __dst[385];
  _BYTE v53[7];
  char v54;
  _BYTE v55[7];
  _BYTE v56[7];
  _BYTE v57[7];
  char v58;
  _BYTE v59[7];
  char v60;
  _BYTE v61[7];
  char v62;
  _BYTE v63[7];
  char v64;
  _BYTE v65[7];
  char v66;
  _QWORD v67[48];
  unint64_t v68;
  unint64_t v69;
  _QWORD v70[4];
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  char v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;

  v2 = v1;
  v51 = (_OWORD *)(v1 + 312);
  *(_BYTE *)(v1 + 832) = 0;
  *(double *)(v1 + 792) = 1.0 / ((double)-[HandsKitConfig FrameRate](a1, sel_FrameRate) * 0.9);
  *(_BYTE *)(v1 + 808) = -[HandsKitConfig PrintStatistics](a1, sel_PrintStatistics);
  v71 = xmmword_23D9A8B80;
  v73 = 0;
  v72 = 0;
  v67[0] = 0;
  v67[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v68 = 0xD000000000000017;
  v69 = 0x800000023D9C9BD0;
  v4 = -[HandsKitConfig EnableCoreAnalytics](a1, sel_EnableCoreAnalytics);
  v5 = v4 == 0;
  if (v4)
    v6 = 1702195828;
  else
    v6 = 0x65736C6166;
  if (v5)
    v7 = 0xE500000000000000;
  else
    v7 = 0xE400000000000000;
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v70[3] = MEMORY[0x24BEE0D00];
  v70[0] = v68;
  v70[1] = v69;
  v9 = MEMORY[0x24BEE4AF8];
  specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD00000000000006CLL, 0x800000023D9C9B30, 45, 0, (uint64_t *)&v71, (uint64_t)v70, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v70);
  v43 = specialized Dictionary.init(dictionaryLiteral:)(v9);
  v49 = a1;
  v10 = CACurrentMediaTime();
  v47 = specialized Dictionary.init(dictionaryLiteral:)(v9);
  v45 = specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
  v11 = v74;
  v37 = v76;
  v39 = v75;
  v12 = v77;
  v41 = v80;
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
  v13 = v81;
  v34 = v83;
  v35 = v82;
  v14 = v84;
  v15 = v87;
  v16 = CACurrentMediaTime();
  swift_beginAccess();
  memcpy(__dst, (const void *)(v2 + 408), 0x180uLL);
  *(_QWORD *)(v2 + 408) = v43;
  *(_QWORD *)(v2 + 416) = 0;
  *(_DWORD *)(v2 + 424) = 0;
  *(_QWORD *)(v2 + 432) = 0;
  *(_BYTE *)(v2 + 440) = 1;
  *(_QWORD *)(v2 + 448) = 0;
  *(_BYTE *)(v2 + 456) = 1;
  *(_QWORD *)(v2 + 464) = 0;
  *(_BYTE *)(v2 + 472) = 1;
  *(_QWORD *)(v2 + 480) = 0;
  *(_BYTE *)(v2 + 488) = 1;
  *(CFTimeInterval *)(v2 + 496) = v10;
  *(_QWORD *)(v2 + 504) = 0;
  *(_BYTE *)(v2 + 512) = 1;
  *(_QWORD *)(v2 + 528) = 0;
  *(_QWORD *)(v2 + 520) = 0;
  *(_QWORD *)(v2 + 536) = 0;
  *(_QWORD *)(v2 + 544) = v47;
  *(_QWORD *)(v2 + 552) = v45;
  *(_BYTE *)(v2 + 560) = v11;
  *(_OWORD *)(v2 + 568) = v39;
  *(_OWORD *)(v2 + 584) = v37;
  *(_QWORD *)(v2 + 600) = v12;
  v17 = v79;
  *(_OWORD *)(v2 + 608) = v78;
  *(_OWORD *)(v2 + 624) = v17;
  *(_QWORD *)(v2 + 640) = v41;
  *(_BYTE *)(v2 + 648) = v13;
  *(_OWORD *)(v2 + 656) = v35;
  *(_OWORD *)(v2 + 672) = v34;
  *(_QWORD *)(v2 + 688) = v14;
  v18 = v86;
  v51[24] = v85;
  v51[25] = v18;
  *(_QWORD *)(v2 + 728) = v15;
  *(_QWORD *)(v2 + 752) = 0;
  *(_QWORD *)(v2 + 736) = 0;
  *(_QWORD *)(v2 + 744) = 0;
  *(_BYTE *)(v2 + 760) = 1;
  *(CFTimeInterval *)(v2 + 768) = v16;
  *(_QWORD *)(v2 + 776) = v49;
  *(_QWORD *)(v2 + 784) = 0;
  outlined release of PipelineStatisticsData((uint64_t)__dst);
  v46 = specialized Dictionary.init(dictionaryLiteral:)(v9);
  v19 = v49;
  v20 = CACurrentMediaTime();
  v50 = specialized Dictionary.init(dictionaryLiteral:)(v9);
  v48 = specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
  v21 = v88;
  v40 = v90;
  v42 = v89;
  v22 = v91;
  v44 = v94;
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized Dictionary.init(dictionaryLiteral:)(v9);
  specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
  v23 = v95;
  v36 = v97;
  v38 = v96;
  v24 = v98;
  v25 = v101;
  v26 = CACurrentMediaTime();
  v66 = 1;
  v64 = 1;
  v62 = 1;
  v60 = 1;
  v58 = 1;
  v54 = 1;
  swift_beginAccess();
  memcpy(v67, (const void *)(v2 + 24), sizeof(v67));
  *(_QWORD *)(v2 + 24) = v46;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_BYTE *)(v2 + 56) = v66;
  *(_DWORD *)(v2 + 57) = *(_DWORD *)v65;
  *(_DWORD *)(v2 + 60) = *(_DWORD *)&v65[3];
  *(_QWORD *)(v2 + 64) = 0;
  *(_BYTE *)(v2 + 72) = v64;
  *(_DWORD *)(v2 + 73) = *(_DWORD *)v63;
  *(_DWORD *)(v2 + 76) = *(_DWORD *)&v63[3];
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = v62;
  *(_DWORD *)(v2 + 89) = *(_DWORD *)v61;
  *(_DWORD *)(v2 + 92) = *(_DWORD *)&v61[3];
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = v60;
  *(_DWORD *)(v2 + 105) = *(_DWORD *)v59;
  *(_DWORD *)(v2 + 108) = *(_DWORD *)&v59[3];
  *(CFTimeInterval *)(v2 + 112) = v20;
  *(_QWORD *)(v2 + 120) = 0;
  *(_BYTE *)(v2 + 128) = v58;
  v27 = *(_DWORD *)v57;
  *(_DWORD *)(v2 + 132) = *(_DWORD *)&v57[3];
  *(_DWORD *)(v2 + 129) = v27;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = v50;
  *(_QWORD *)(v2 + 168) = v48;
  *(_BYTE *)(v2 + 176) = v21;
  *(_DWORD *)(v2 + 180) = *(_DWORD *)&v56[3];
  *(_DWORD *)(v2 + 177) = *(_DWORD *)v56;
  *(_OWORD *)(v2 + 184) = v42;
  *(_OWORD *)(v2 + 200) = v40;
  *(_QWORD *)(v2 + 216) = v22;
  v28 = v93;
  *(_OWORD *)(v2 + 224) = v92;
  *(_OWORD *)(v2 + 240) = v28;
  *(_QWORD *)(v2 + 256) = v44;
  *(_BYTE *)(v2 + 264) = v23;
  v29 = *(_DWORD *)v55;
  *(_DWORD *)(v2 + 268) = *(_DWORD *)&v55[3];
  *(_DWORD *)(v2 + 265) = v29;
  *(_OWORD *)(v2 + 272) = v38;
  *(_OWORD *)(v2 + 288) = v36;
  *(_QWORD *)(v2 + 304) = v24;
  v30 = v100;
  *v51 = v99;
  v51[1] = v30;
  *(_QWORD *)(v2 + 344) = v25;
  *(_QWORD *)(v2 + 352) = 0;
  *(_QWORD *)(v2 + 360) = 0;
  *(_QWORD *)(v2 + 368) = 0;
  *(_BYTE *)(v2 + 376) = v54;
  v31 = *(_DWORD *)v53;
  *(_DWORD *)(v2 + 380) = *(_DWORD *)&v53[3];
  *(_DWORD *)(v2 + 377) = v31;
  *(CFTimeInterval *)(v2 + 384) = v26;
  *(_QWORD *)(v2 + 392) = v19;
  *(_QWORD *)(v2 + 400) = 0;
  outlined release of PipelineStatisticsData((uint64_t)v67);
  v32 = -[HandsKitConfig EnableCoreAnalytics](v19, sel_EnableCoreAnalytics);
  v33 = 0;
  if (v32)
    v33 = !-[HandsKitConfig ARKitReplayMode](v19, sel_ARKitReplayMode);
  static PipelineStatistics.enableCoreAnalytics = v33;
}

uint64_t PipelineStatistics.__deallocating_deinit()
{
  uint64_t v0;
  _BYTE v2[384];
  _BYTE v3[384];
  _BYTE __dst[384];

  if (*(_BYTE *)(v0 + 808) == 1)
  {
    swift_beginAccess();
    memcpy(__dst, (const void *)(v0 + 408), sizeof(__dst));
    outlined retain of PipelineStatisticsData((uint64_t)__dst);
    PipelineStatisticsData.printStatistics()();
    outlined release of PipelineStatisticsData((uint64_t)__dst);
  }

  memcpy(v2, (const void *)(v0 + 24), sizeof(v2));
  outlined release of PipelineStatisticsData((uint64_t)v2);
  memcpy(v3, (const void *)(v0 + 408), sizeof(v3));
  outlined release of PipelineStatisticsData((uint64_t)v3);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PipelineStatistics()
{
  return objc_opt_self();
}

_QWORD *PipelineStatistics.runSync(withInput:)@<X0>(void *__src@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double v6;
  double v7;
  double v8;
  void *v9;
  uint64_t v10;
  CFTimeInterval v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTimeInterval v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  _BYTE v29[560];
  _BYTE __srca[392];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[24];
  _BYTE v57[384];
  _BYTE v58[384];
  _BYTE v59[384];
  _QWORD __dst[72];

  v3 = v2;
  memcpy(__dst, __src, 0x228uLL);
  memcpy(v29, __src, 0x228uLL);
  v6 = *(double *)(v3 + 792);
  swift_beginAccess();
  PipelineStatisticsData.updateWithFrame(_:expectedFrameTimeDelta:expectedCameraTSDelta:)((uint64_t)v29, v6, 0.001);
  swift_endAccess();
  v7 = *(double *)(v3 + 768);
  if (CACurrentMediaTime() - v7 > 5.0)
  {
    if (*(_BYTE *)(v3 + 808) == 1)
    {
      memcpy(v59, (const void *)(v3 + 408), sizeof(v59));
      outlined retain of PipelineStatisticsData((uint64_t)v59);
      PipelineStatisticsData.printStatistics()();
      outlined release of PipelineStatisticsData((uint64_t)v59);
    }
    if (static PipelineStatistics.enableCoreAnalytics == 1)
    {
      memcpy(v58, (const void *)(v3 + 408), sizeof(v58));
      swift_beginAccess();
      outlined retain of PipelineStatisticsData((uint64_t)v58);
      PipelineStatisticsData.aggregate(with:)((uint64_t)v58);
      swift_endAccess();
      outlined release of PipelineStatisticsData((uint64_t)v58);
    }
    memcpy(v57, (const void *)(v3 + 408), sizeof(v57));
    outlined retain of PipelineStatisticsData((uint64_t)v57);
    specialized PipelineStatisticsData.init(fromPrev:)((uint64_t)v57, __srca);
    memcpy(v29, (const void *)(v3 + 408), 0x180uLL);
    memcpy((void *)(v3 + 408), __srca, 0x180uLL);
    outlined release of PipelineStatisticsData((uint64_t)v29);
  }
  if (static PipelineStatistics.enableCoreAnalytics == 1)
  {
    swift_beginAccess();
    v8 = *(double *)(v3 + 384);
    if (CACurrentMediaTime() - v8 > 300.0)
    {
      v28 = a2;
      memcpy(v56, (const void *)(v3 + 24), sizeof(v56));
      outlined retain of PipelineStatisticsData((uint64_t)v56);
      PipelineStatisticsData.sendPipelineHealthEvent()();
      PipelineStatisticsData.sendPipelineLatencyEvent()();
      PipelineStatisticsData.sendFramePctByHandExistenceEvent()();
      v52 = *(_OWORD *)((char *)&v56[11] + 8);
      v53 = *(_OWORD *)((char *)&v56[12] + 8);
      v54 = *(_OWORD *)((char *)&v56[13] + 8);
      v55 = *((_QWORD *)&v56[14] + 1);
      v50 = *(_OWORD *)((char *)&v56[9] + 8);
      v51 = *(_OWORD *)((char *)&v56[10] + 8);
      HandStatisticsData.sendCoreAnalytics()();
      v46 = v56[17];
      v47 = v56[18];
      v48 = v56[19];
      v49 = *(_QWORD *)&v56[20];
      v44 = v56[15];
      v45 = v56[16];
      HandStatisticsData.sendCoreAnalytics()();
      outlined release of PipelineStatisticsData((uint64_t)v56);
      v9 = *(void **)(v3 + 16);
      v10 = MEMORY[0x24BEE4AF8];
      v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      v27 = v9;
      v11 = CACurrentMediaTime();
      v26 = specialized Dictionary.init(dictionaryLiteral:)(v10);
      v25 = specialized Dictionary.init(dictionaryLiteral:)(v10);
      specialized Dictionary.init(dictionaryLiteral:)(v10);
      specialized Dictionary.init(dictionaryLiteral:)(v10);
      specialized Dictionary.init(dictionaryLiteral:)(v10);
      specialized Dictionary.init(dictionaryLiteral:)(v10);
      specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
      LOBYTE(v9) = __srca[384];
      v21 = v32;
      v22 = v31;
      v12 = v33;
      v23 = v36;
      specialized Dictionary.init(dictionaryLiteral:)(v10);
      specialized Dictionary.init(dictionaryLiteral:)(v10);
      specialized Dictionary.init(dictionaryLiteral:)(v10);
      specialized Dictionary.init(dictionaryLiteral:)(v10);
      specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
      LOBYTE(v10) = v37;
      v19 = v39;
      v20 = v38;
      v13 = v40;
      v14 = v43;
      v15 = CACurrentMediaTime();
      memcpy(v29, (const void *)(v3 + 24), 0x180uLL);
      *(_QWORD *)(v3 + 24) = v24;
      *(_QWORD *)(v3 + 32) = 0;
      *(_DWORD *)(v3 + 40) = 0;
      *(_QWORD *)(v3 + 48) = 0;
      *(_BYTE *)(v3 + 56) = 1;
      *(_QWORD *)(v3 + 64) = 0;
      *(_BYTE *)(v3 + 72) = 1;
      *(_QWORD *)(v3 + 80) = 0;
      *(_BYTE *)(v3 + 88) = 1;
      *(_QWORD *)(v3 + 96) = 0;
      *(_BYTE *)(v3 + 104) = 1;
      *(CFTimeInterval *)(v3 + 112) = v11;
      *(_QWORD *)(v3 + 120) = 0;
      *(_BYTE *)(v3 + 128) = 1;
      *(_QWORD *)(v3 + 136) = 0;
      *(_QWORD *)(v3 + 144) = 0;
      *(_QWORD *)(v3 + 152) = 0;
      *(_QWORD *)(v3 + 160) = v26;
      *(_QWORD *)(v3 + 168) = v25;
      *(_BYTE *)(v3 + 176) = (_BYTE)v9;
      a2 = v28;
      *(_OWORD *)(v3 + 184) = v22;
      *(_OWORD *)(v3 + 200) = v21;
      *(_QWORD *)(v3 + 216) = v12;
      v16 = v35;
      *(_OWORD *)(v3 + 224) = v34;
      *(_OWORD *)(v3 + 240) = v16;
      *(_QWORD *)(v3 + 256) = v23;
      *(_BYTE *)(v3 + 264) = v10;
      *(_OWORD *)(v3 + 272) = v20;
      *(_OWORD *)(v3 + 288) = v19;
      *(_QWORD *)(v3 + 304) = v13;
      v17 = v42;
      *(_OWORD *)(v3 + 312) = v41;
      *(_OWORD *)(v3 + 328) = v17;
      *(_QWORD *)(v3 + 344) = v14;
      *(_QWORD *)(v3 + 352) = 0;
      *(_QWORD *)(v3 + 360) = 0;
      *(_QWORD *)(v3 + 368) = 0;
      *(_BYTE *)(v3 + 376) = 1;
      *(CFTimeInterval *)(v3 + 384) = v15;
      *(_QWORD *)(v3 + 392) = v27;
      *(_QWORD *)(v3 + 400) = 0;
      outlined release of PipelineStatisticsData((uint64_t)v29);
    }
  }
  memcpy(v29, __dst, 0x228uLL);
  PipelineStatistics.printHandRadius(_:)((uint64_t)v29);
  memcpy(a2, __dst, 0x228uLL);
  return outlined retain of HandsKitData(__dst);
}

uint64_t PipelineStatistics.printHandRadius(_:)(uint64_t result)
{
  uint64_t v1;
  Swift::String v2;
  _OWORD v3[2];
  _QWORD v4[4];

  if ((*(_BYTE *)(v1 + 832) & 1) == 0)
  {
    if (*(_QWORD *)(*(_QWORD *)result + 16))
    {
      type metadata accessor for HandDescriptor();
      v4[0] = 0;
      v4[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      v2._object = (void *)0x800000023D9C9BA0;
      v2._countAndFlagsBits = 0xD000000000000028;
      String.append(_:)(v2);
      Float.write<A>(to:)();
      v4[3] = MEMORY[0x24BEE0D00];
      memset(v3, 0, sizeof(v3));
      specialized static HLog.I(file:function:line:privacy:logArea:_:_:)(0xD00000000000006CLL, 0x800000023D9C9B30, 88, 2, (uint64_t *)v3, (uint64_t)v4, MEMORY[0x24BEE4AF8]);
      result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v4);
      *(_BYTE *)(v1 + 832) = 1;
    }
  }
  return result;
}

uint64_t specialized PipelineStatistics.init(options:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  CFTimeInterval v3;
  CFTimeInterval v4;
  unint64_t v5;
  CFTimeInterval v6;
  CFTimeInterval v7;
  void *v8;
  HandsKitConfig *v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  id v17;
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _BYTE v47[7];
  _BYTE v48[7];
  _BYTE v49[7];
  _BYTE v50[7];
  _BYTE v51[7];
  _BYTE v52[7];
  _BYTE v53[7];
  _BYTE v54[7];

  *(_QWORD *)(v1 + 16) = objc_msgSend(objc_allocWithZone((Class)HandsKitConfig), sel_init);
  v16 = objc_msgSend(objc_allocWithZone((Class)HandsKitConfig), (SEL)&selRef_setOisDistanceToPreventEnterObjectInteractionStateAfterIntentional_);
  v2 = MEMORY[0x24BEE4AF8];
  v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v3 = CACurrentMediaTime();
  v14 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  v12 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
  v4 = CACurrentMediaTime();
  *(_QWORD *)(v1 + 24) = v11;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 56) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  *(_BYTE *)(v1 + 72) = 1;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 1;
  *(_QWORD *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 104) = 1;
  *(CFTimeInterval *)(v1 + 112) = v3;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 1;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = v14;
  *(_QWORD *)(v1 + 168) = v12;
  *(_BYTE *)(v1 + 176) = v19;
  *(_OWORD *)(v1 + 184) = v20;
  *(_OWORD *)(v1 + 200) = v21;
  *(_QWORD *)(v1 + 216) = v22;
  *(_OWORD *)(v1 + 224) = v23;
  *(_OWORD *)(v1 + 240) = v24;
  *(_QWORD *)(v1 + 256) = v25;
  *(_BYTE *)(v1 + 264) = v26;
  *(_OWORD *)(v1 + 272) = v27;
  *(_OWORD *)(v1 + 288) = v28;
  *(_QWORD *)(v1 + 304) = v29;
  *(_OWORD *)(v1 + 312) = v30;
  *(_OWORD *)(v1 + 328) = v31;
  *(_QWORD *)(v1 + 344) = v32;
  *(_QWORD *)(v1 + 352) = 0;
  *(_QWORD *)(v1 + 360) = 0;
  *(_QWORD *)(v1 + 368) = 0;
  *(_BYTE *)(v1 + 376) = 1;
  *(CFTimeInterval *)(v1 + 384) = v4;
  *(_QWORD *)(v1 + 392) = v16;
  *(_QWORD *)(v1 + 400) = 0;
  v17 = objc_msgSend(objc_allocWithZone((Class)HandsKitConfig), sel_init);
  v5 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  v6 = CACurrentMediaTime();
  v15 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  v13 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized Dictionary.init(dictionaryLiteral:)(v2);
  specialized HandStatisticsData.init(is_left:countNum:cameraTransitionCount:detectedInCamCount:poseRunInCamCount:hpStatusCount:rejectionCount:)();
  v7 = CACurrentMediaTime();
  *(_QWORD *)(v1 + 408) = v5;
  *(_QWORD *)(v1 + 416) = 0;
  *(_DWORD *)(v1 + 424) = 0;
  *(_QWORD *)(v1 + 432) = 0;
  *(_BYTE *)(v1 + 440) = 1;
  *(_DWORD *)(v1 + 441) = *(_DWORD *)v54;
  *(_DWORD *)(v1 + 444) = *(_DWORD *)&v54[3];
  *(_QWORD *)(v1 + 448) = 0;
  *(_BYTE *)(v1 + 456) = 1;
  *(_DWORD *)(v1 + 457) = *(_DWORD *)v53;
  *(_DWORD *)(v1 + 460) = *(_DWORD *)&v53[3];
  *(_QWORD *)(v1 + 464) = 0;
  *(_BYTE *)(v1 + 472) = 1;
  *(_DWORD *)(v1 + 473) = *(_DWORD *)v52;
  *(_DWORD *)(v1 + 476) = *(_DWORD *)&v52[3];
  *(_QWORD *)(v1 + 480) = 0;
  *(_BYTE *)(v1 + 488) = 1;
  *(_DWORD *)(v1 + 489) = *(_DWORD *)v51;
  *(_DWORD *)(v1 + 492) = *(_DWORD *)&v51[3];
  *(CFTimeInterval *)(v1 + 496) = v6;
  *(_QWORD *)(v1 + 504) = 0;
  *(_BYTE *)(v1 + 512) = 1;
  *(_DWORD *)(v1 + 516) = *(_DWORD *)&v50[3];
  *(_DWORD *)(v1 + 513) = *(_DWORD *)v50;
  *(_QWORD *)(v1 + 536) = 0;
  *(_QWORD *)(v1 + 520) = 0;
  *(_QWORD *)(v1 + 528) = 0;
  *(_QWORD *)(v1 + 544) = v15;
  *(_QWORD *)(v1 + 552) = v13;
  *(_BYTE *)(v1 + 560) = v33;
  *(_DWORD *)(v1 + 564) = *(_DWORD *)&v49[3];
  *(_DWORD *)(v1 + 561) = *(_DWORD *)v49;
  *(_OWORD *)(v1 + 568) = v34;
  *(_OWORD *)(v1 + 584) = v35;
  *(_QWORD *)(v1 + 600) = v36;
  *(_OWORD *)(v1 + 608) = v37;
  *(_OWORD *)(v1 + 624) = v38;
  *(_QWORD *)(v1 + 640) = v39;
  *(_BYTE *)(v1 + 648) = v40;
  *(_DWORD *)(v1 + 652) = *(_DWORD *)&v48[3];
  *(_DWORD *)(v1 + 649) = *(_DWORD *)v48;
  *(_OWORD *)(v1 + 656) = v41;
  *(_OWORD *)(v1 + 672) = v42;
  *(_QWORD *)(v1 + 688) = v43;
  *(_OWORD *)(v1 + 696) = v44;
  *(_OWORD *)(v1 + 712) = v45;
  *(_QWORD *)(v1 + 728) = v46;
  *(_QWORD *)(v1 + 744) = 0;
  *(_QWORD *)(v1 + 736) = 0;
  *(_QWORD *)(v1 + 752) = 0;
  *(_BYTE *)(v1 + 760) = 1;
  *(_DWORD *)(v1 + 764) = *(_DWORD *)&v47[3];
  *(_DWORD *)(v1 + 761) = *(_DWORD *)v47;
  *(CFTimeInterval *)(v1 + 768) = v7;
  *(_QWORD *)(v1 + 776) = v17;
  *(_QWORD *)(v1 + 792) = 0;
  *(_QWORD *)(v1 + 784) = 0;
  *(_QWORD *)(v1 + 800) = 0x3F50624DD2F1A9FCLL;
  *(_BYTE *)(v1 + 808) = 1;
  *(_OWORD *)(v1 + 816) = xmmword_23D9ACBD0;
  *(_BYTE *)(v1 + 832) = 0;
  v8 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  v9 = a1;

  PipelineStatistics.reconfig(_:)(v9);
  return v1;
}

uint64_t destroy for RawActionFeatures()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RawActionFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RawActionFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RawActionFeatures(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RawActionFeatures(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RawActionFeatures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RawActionFeatures()
{
  return &type metadata for RawActionFeatures;
}

uint64_t ThumbIndexTapPostProcessing._process(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t v49;
  uint64_t result;
  float v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[2];
  _QWORD v63[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  MEMORY[0x24BDAC7A8](v2, v3);
  v60 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v59 = (uint64_t)&v56 - v7;
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v56 - v10;
  v12 = type metadata accessor for RawThumbIndexTapFeaturesPB(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v58 = (uint64_t *)((char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16, v17);
  v57 = (uint64_t *)((char *)&v56 - v18);
  MEMORY[0x24BDAC7A8](v19, v20);
  v22 = (uint64_t *)((char *)&v56 - v21);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  MEMORY[0x24BDAC7A8](v23, v24);
  v26 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for ThumbIndexTapFeaturesPB(0);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27, v29);
  v31 = (char *)&v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for HandDescriptor();
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v32 + 68), (uint64_t)v26, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v26, &demangling cache variable for type metadata for ThumbIndexTapFeaturesPB?);
    v63[0] = 0;
    v63[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v33._object = (void *)0x800000023D9C9D40;
    v33._countAndFlagsBits = 0xD000000000000031;
    String.append(_:)(v33);
    *(_QWORD *)&v62[0] = *(_QWORD *)(a1 + 144);
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v63[3] = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    memset(v62, 0, sizeof(v62));
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v62, 0xD000000000000076, 0x800000023D9C9CC0, 53, (uint64_t)v63, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v63);
    if (*(_BYTE *)(a1 + 281) == 1)
    {
      v35 = *(_QWORD *)(a1 + 144);
LABEL_24:
      swift_beginAccess();
      specialized Set._Variant.insert(_:)((uint64_t *)v62, v35);
      return swift_endAccess();
    }
    goto LABEL_9;
  }
  outlined init with take of Matrix2dPB((uint64_t)v26, (uint64_t)v31, type metadata accessor for ThumbIndexTapFeaturesPB);
  v36 = (uint64_t)&v31[*(int *)(v27 + 20)];
  outlined init with copy of (Int32, Matrix2dPB)(v36, (uint64_t)v11, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v37(v11, 1, v12) == 1)
  {
    *v22 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v38 = (char *)v22 + *(int *)(v12 + 24);
    *(_DWORD *)v38 = 0;
    v38[4] = 1;
    outlined destroy of Coordinate3DPB?((uint64_t)v11, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v11, (uint64_t)v22, type metadata accessor for RawThumbIndexTapFeaturesPB);
  }
  v39 = *v22;
  swift_bridgeObjectRetain();
  outlined destroy of Matrix3x3PB((uint64_t)v22, type metadata accessor for RawThumbIndexTapFeaturesPB);
  v40 = *(_QWORD *)(v39 + 16);
  swift_bridgeObjectRelease();
  if (v40 <= 4)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v31, type metadata accessor for ThumbIndexTapFeaturesPB);
    *(_BYTE *)(a1 + 281) = 0;
LABEL_9:
    v41 = *(_QWORD *)(a1 + 144);
LABEL_10:
    swift_beginAccess();
    specialized Set._Variant.remove(_:)(v41);
    return swift_endAccess();
  }
  v42 = v61;
  if (specialized Set.contains(_:)(*(_QWORD *)(a1 + 144), *(_QWORD *)(v61 + 24)))
  {
    v43 = v59;
    outlined init with copy of (Int32, Matrix2dPB)(v36, v59, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    if (v37((char *)v43, 1, v12) == 1)
    {
      v44 = v57;
      *v57 = MEMORY[0x24BEE4AF8];
      UnknownStorage.init()();
      v45 = (char *)v44 + *(int *)(v12 + 24);
      *(_DWORD *)v45 = 0;
      v45[4] = 1;
      outlined destroy of Coordinate3DPB?(v43, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    }
    else
    {
      v44 = v57;
      outlined init with take of Matrix2dPB(v43, (uint64_t)v57, type metadata accessor for RawThumbIndexTapFeaturesPB);
    }
    v49 = *v44;
    swift_bridgeObjectRetain();
    result = outlined destroy of Matrix3x3PB((uint64_t)v44, type metadata accessor for RawThumbIndexTapFeaturesPB);
    if (*(_QWORD *)(v49 + 16) >= 3uLL)
    {
      v51 = *(float *)(v49 + 40);
      v52 = *(float *)(v42 + 20);
      swift_bridgeObjectRelease();
      outlined destroy of Matrix3x3PB((uint64_t)v31, type metadata accessor for ThumbIndexTapFeaturesPB);
      *(_BYTE *)(a1 + 281) = v51 > v52;
      if (v51 <= v52)
      {
LABEL_19:
        v41 = *(_QWORD *)(a1 + 144);
        goto LABEL_10;
      }
LABEL_23:
      v35 = *(_QWORD *)(a1 + 144);
      goto LABEL_24;
    }
    __break(1u);
  }
  else
  {
    v46 = v60;
    outlined init with copy of (Int32, Matrix2dPB)(v36, v60, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    if (v37((char *)v46, 1, v12) == 1)
    {
      v47 = v58;
      *v58 = MEMORY[0x24BEE4AF8];
      UnknownStorage.init()();
      v48 = (char *)v47 + *(int *)(v12 + 24);
      *(_DWORD *)v48 = 0;
      v48[4] = 1;
      outlined destroy of Coordinate3DPB?(v46, &demangling cache variable for type metadata for RawThumbIndexTapFeaturesPB?);
    }
    else
    {
      v47 = v58;
      outlined init with take of Matrix2dPB(v46, (uint64_t)v58, type metadata accessor for RawThumbIndexTapFeaturesPB);
    }
    v53 = *v47;
    swift_bridgeObjectRetain();
    result = outlined destroy of Matrix3x3PB((uint64_t)v47, type metadata accessor for RawThumbIndexTapFeaturesPB);
    if (*(_QWORD *)(v53 + 16) >= 5uLL)
    {
      v54 = *(float *)(v53 + 48);
      v55 = *(float *)(v42 + 16);
      swift_bridgeObjectRelease();
      outlined destroy of Matrix3x3PB((uint64_t)v31, type metadata accessor for ThumbIndexTapFeaturesPB);
      *(_BYTE *)(a1 + 281) = v55 < v54;
      if (v55 >= v54)
        goto LABEL_19;
      goto LABEL_23;
    }
  }
  __break(1u);
  return result;
}

uint64_t ThumbIndexTapPostProcessing.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ThumbIndexTapPostProcessing()
{
  return objc_opt_self();
}

uint64_t specialized ThumbIndexTapPostProcessing.init(config:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;

  *(_QWORD *)(v1 + 16) = 0x3E99999A3F4CCCCDLL;
  v3 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v1 + 32) = v3;
  *(_QWORD *)(v1 + 40) = 5;
  objc_msgSend(a1, sel_MonoThumbIndexTapActivationThreshold);
  *(_DWORD *)(v1 + 16) = v4;
  objc_msgSend(a1, sel_MonoThumbIndexTapDeactivationThreshold);
  *(_DWORD *)(v1 + 20) = v5;
  *(_QWORD *)(v1 + 24) = v3;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v3;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t *initializeBufferWithCopyOfBuffer for PinchInfoPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 24);
    v13 = (_OWORD *)((char *)v4 + v12);
    v14 = (_OWORD *)((char *)a2 + v12);
    v15 = type metadata accessor for PinchStatusPB(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchStatusPB?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = v14[1];
      *v13 = *v14;
      v13[1] = v19;
      v11((char *)v13 + *(int *)(v15 + 32), (char *)v14 + *(int *)(v15 + 32), v10);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t type metadata accessor for PinchStatusPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchStatusPB);
}

uint64_t destroy for PinchInfoPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for PinchStatusPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 32), v5);
  return result;
}

_QWORD *initializeWithCopy for PinchInfoPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for PinchStatusPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchStatusPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithCopy for PinchInfoPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for PinchStatusPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
      *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
      v11(&v13[*(int *)(v15 + 32)], &v14[*(int *)(v15 + 32)], v9);
      return a1;
    }
    outlined destroy of PinchStatusPB((uint64_t)v13);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchStatusPB?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v13[*(int *)(v15 + 32)], &v14[*(int *)(v15 + 32)], v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t outlined destroy of PinchStatusPB(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PinchStatusPB(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *initializeWithTake for PinchInfoPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for PinchStatusPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchStatusPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for PinchInfoPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  __int128 v19;
  uint64_t v20;
  __int128 v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for PinchStatusPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v22 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v22;
      v11(&v13[*(int *)(v15 + 32)], &v14[*(int *)(v15 + 32)], v9);
      return a1;
    }
    outlined destroy of PinchStatusPB((uint64_t)v13);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchStatusPB?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  v19 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v19;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[*(int *)(v15 + 32)], &v14[*(int *)(v15 + 32)], v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchInfoPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D758154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 20);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchStatusPB?);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PinchInfoPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7581D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 20);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchStatusPB?);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t type metadata accessor for PinchInfoPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for PinchInfoPB);
}

void type metadata completion function for PinchInfoPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PinchStatusPB?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for PinchStatusPB?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PinchStatusPB?)
  {
    type metadata accessor for PinchStatusPB(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PinchStatusPB?);
  }
}

ValueMetadata *type metadata accessor for PinchBreakRejectorPB()
{
  return &type metadata for PinchBreakRejectorPB;
}

ValueMetadata *type metadata accessor for PinchMakeRejectorPB()
{
  return &type metadata for PinchMakeRejectorPB;
}

ValueMetadata *type metadata accessor for PinchBreakSourcePB()
{
  return &type metadata for PinchBreakSourcePB;
}

ValueMetadata *type metadata accessor for PinchMakeSourcePB()
{
  return &type metadata for PinchMakeSourcePB;
}

_QWORD *initializeBufferWithCopyOfBuffer for PinchStatusPB(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 32);
    v7 = (char *)a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PinchStatusPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 32);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_OWORD *initializeWithCopy for PinchStatusPB(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for PinchStatusPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v4 = *(int *)(a3 + 32);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *initializeWithTake for PinchStatusPB(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_OWORD *assignWithTake for PinchStatusPB(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchStatusPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7585E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PinchStatusPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D75862C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 32);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for PinchStatusPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PinchMakeSourcePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PinchMakeSourcePB((uint64_t (*)(void))specialized PinchMakeSourcePB.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PinchMakeSourcePB@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PinchMakeSourcePB(a1, (uint64_t (*)(_QWORD))specialized PinchMakeSourcePB.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchMakeSourcePB()
{
  lazy protocol witness table accessor for type PinchMakeSourcePB and conformance PinchMakeSourcePB();
  return Enum.hash(into:)();
}

unint64_t lazy protocol witness table accessor for type PinchMakeSourcePB and conformance PinchMakeSourcePB()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchMakeSourcePB and conformance PinchMakeSourcePB;
  if (!lazy protocol witness table cache variable for type PinchMakeSourcePB and conformance PinchMakeSourcePB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchMakeSourcePB, &type metadata for PinchMakeSourcePB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchMakeSourcePB and conformance PinchMakeSourcePB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchMakeSourcePB and conformance PinchMakeSourcePB;
  if (!lazy protocol witness table cache variable for type PinchMakeSourcePB and conformance PinchMakeSourcePB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchMakeSourcePB, &type metadata for PinchMakeSourcePB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchMakeSourcePB and conformance PinchMakeSourcePB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchMakeSourcePB and conformance PinchMakeSourcePB;
  if (!lazy protocol witness table cache variable for type PinchMakeSourcePB and conformance PinchMakeSourcePB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchMakeSourcePB, &type metadata for PinchMakeSourcePB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchMakeSourcePB and conformance PinchMakeSourcePB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchMakeSourcePB and conformance PinchMakeSourcePB;
  if (!lazy protocol witness table cache variable for type PinchMakeSourcePB and conformance PinchMakeSourcePB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchMakeSourcePB, &type metadata for PinchMakeSourcePB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchMakeSourcePB and conformance PinchMakeSourcePB);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static PinchMakeSourcePB.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PinchBreakSourcePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PinchMakeSourcePB(specialized PinchBreakSourcePB.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PinchBreakSourcePB@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PinchMakeSourcePB(a1, (uint64_t (*)(_QWORD))specialized PinchBreakSourcePB.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchBreakSourcePB()
{
  lazy protocol witness table accessor for type PinchBreakSourcePB and conformance PinchBreakSourcePB();
  return Enum.hash(into:)();
}

unint64_t lazy protocol witness table accessor for type PinchBreakSourcePB and conformance PinchBreakSourcePB()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchBreakSourcePB and conformance PinchBreakSourcePB;
  if (!lazy protocol witness table cache variable for type PinchBreakSourcePB and conformance PinchBreakSourcePB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchBreakSourcePB, &type metadata for PinchBreakSourcePB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchBreakSourcePB and conformance PinchBreakSourcePB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchBreakSourcePB and conformance PinchBreakSourcePB;
  if (!lazy protocol witness table cache variable for type PinchBreakSourcePB and conformance PinchBreakSourcePB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchBreakSourcePB, &type metadata for PinchBreakSourcePB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchBreakSourcePB and conformance PinchBreakSourcePB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchBreakSourcePB and conformance PinchBreakSourcePB;
  if (!lazy protocol witness table cache variable for type PinchBreakSourcePB and conformance PinchBreakSourcePB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchBreakSourcePB, &type metadata for PinchBreakSourcePB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchBreakSourcePB and conformance PinchBreakSourcePB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchBreakSourcePB and conformance PinchBreakSourcePB;
  if (!lazy protocol witness table cache variable for type PinchBreakSourcePB and conformance PinchBreakSourcePB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchBreakSourcePB, &type metadata for PinchBreakSourcePB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchBreakSourcePB and conformance PinchBreakSourcePB);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PinchBreakSourcePB@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static PinchBreakSourcePB.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PinchMakeRejectorPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PinchMakeSourcePB((uint64_t (*)(void))specialized PinchMakeRejectorPB.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PinchMakeRejectorPB@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PinchMakeSourcePB(a1, (uint64_t (*)(_QWORD))specialized PinchMakeRejectorPB.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchMakeRejectorPB()
{
  lazy protocol witness table accessor for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB();
  return Enum.hash(into:)();
}

unint64_t lazy protocol witness table accessor for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB;
  if (!lazy protocol witness table cache variable for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchMakeRejectorPB, &type metadata for PinchMakeRejectorPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB;
  if (!lazy protocol witness table cache variable for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchMakeRejectorPB, &type metadata for PinchMakeRejectorPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB;
  if (!lazy protocol witness table cache variable for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchMakeRejectorPB, &type metadata for PinchMakeRejectorPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB;
  if (!lazy protocol witness table cache variable for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchMakeRejectorPB, &type metadata for PinchMakeRejectorPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchMakeRejectorPB and conformance PinchMakeRejectorPB);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeRejectorPB@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static PinchMakeRejectorPB.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchBreakRejectorPB()
{
  lazy protocol witness table accessor for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB();
  return Enum.hash(into:)();
}

unint64_t lazy protocol witness table accessor for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB;
  if (!lazy protocol witness table cache variable for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchBreakRejectorPB, &type metadata for PinchBreakRejectorPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB;
  if (!lazy protocol witness table cache variable for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchBreakRejectorPB, &type metadata for PinchBreakRejectorPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB;
  if (!lazy protocol witness table cache variable for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchBreakRejectorPB, &type metadata for PinchBreakRejectorPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB;
  if (!lazy protocol witness table cache variable for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchBreakRejectorPB, &type metadata for PinchBreakRejectorPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchBreakRejectorPB and conformance PinchBreakRejectorPB);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PinchBreakRejectorPB@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static PinchBreakRejectorPB.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PinchGestureStatusPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PinchMakeSourcePB((uint64_t (*)(void))specialized PinchGestureStatusPB.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PinchMakeSourcePB@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = a1();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PinchGestureStatusPB@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PinchMakeSourcePB(a1, (uint64_t (*)(_QWORD))specialized PinchGestureStatusPB.init(rawValue:), a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PinchMakeSourcePB@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;
  char v6;

  result = a2(*a1);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 9) = v6 & 1;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchGestureStatusPB()
{
  lazy protocol witness table accessor for type PinchGestureStatusPB and conformance PinchGestureStatusPB();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PinchGestureStatusPB@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB(&one-time initialization token for allCases, &static PinchGestureStatusPB.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PinchMakeSourcePB@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchMakeSourcePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchMakeSourcePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchBreakSourcePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchBreakSourcePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchMakeRejectorPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchMakeRejectorPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchBreakRejectorPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchBreakRejectorPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchGestureStatusPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchGestureStatusPB._protobuf_nameMap, a1);
}

uint64_t PinchStatusPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PinchStatusPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!v0[2] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
      {
        if (!v0[3] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PinchStatusPB(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PinchStatusPB@<X0>(_OWORD *a1@<X8>)
{
  *a1 = 0u;
  a1[1] = 0u;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchStatusPB()
{
  return 0x61745368636E6950;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PinchStatusPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PinchStatusPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PinchStatusPB())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchStatusPB()
{
  return PinchStatusPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchStatusPB()
{
  return PinchStatusPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchStatusPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchStatusPB and conformance PinchStatusPB, type metadata accessor for PinchStatusPB, (uint64_t)&protocol conformance descriptor for PinchStatusPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchStatusPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchStatusPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchStatusPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchStatusPB and conformance PinchStatusPB, type metadata accessor for PinchStatusPB, (uint64_t)&protocol conformance descriptor for PinchStatusPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchStatusPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchStatusPB and conformance PinchStatusPB, type metadata accessor for PinchStatusPB, (uint64_t)&protocol conformance descriptor for PinchStatusPB);
  return Message.hash(into:)();
}

uint64_t PinchInfoPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
    }
    else if (result == 1)
    {
      closure #1 in PinchInfoPB.decodeMessage<A>(decoder:)();
    }
  }
  return result;
}

uint64_t closure #1 in PinchInfoPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for PinchInfoPB(0);
  type metadata accessor for PinchStatusPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchStatusPB and conformance PinchStatusPB, type metadata accessor for PinchStatusPB, (uint64_t)&protocol conformance descriptor for PinchStatusPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t PinchInfoPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in PinchInfoPB.traverse<A>(visitor:)((uint64_t)v0);
  if (!v1)
  {
    if (*v0)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    type metadata accessor for PinchInfoPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in PinchInfoPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchStatusPB?);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PinchStatusPB(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PinchInfoPB(0);
  outlined init with copy of PinchStatusPB?(a1 + *(int *)(v11 + 24), (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v5, &demangling cache variable for type metadata for PinchStatusPB?);
  outlined init with take of PinchStatusPB((uint64_t)v5, (uint64_t)v10);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchStatusPB and conformance PinchStatusPB, type metadata accessor for PinchStatusPB, (uint64_t)&protocol conformance descriptor for PinchStatusPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of PinchStatusPB((uint64_t)v10);
}

uint64_t protocol witness for Message.init() in conformance PinchInfoPB@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for PinchStatusPB(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PinchInfoPB()
{
  return 0x666E4968636E6950;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PinchInfoPB()
{
  return PinchInfoPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PinchInfoPB()
{
  return PinchInfoPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PinchInfoPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB, type metadata accessor for PinchInfoPB, (uint64_t)&protocol conformance descriptor for PinchInfoPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PinchInfoPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PinchInfoPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PinchInfoPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB, type metadata accessor for PinchInfoPB, (uint64_t)&protocol conformance descriptor for PinchInfoPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PinchInfoPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB, type metadata accessor for PinchInfoPB, (uint64_t)&protocol conformance descriptor for PinchInfoPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in PinchInfoPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB, type metadata accessor for PinchInfoPB, (uint64_t)&protocol conformance descriptor for PinchInfoPB);
}

uint64_t base witness table accessor for Message in PinchInfoPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB, type metadata accessor for PinchInfoPB, (uint64_t)&protocol conformance descriptor for PinchInfoPB);
}

uint64_t base witness table accessor for Hashable in PinchInfoPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB, type metadata accessor for PinchInfoPB, (uint64_t)&protocol conformance descriptor for PinchInfoPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchInfoPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB, type metadata accessor for PinchInfoPB, (uint64_t)&protocol conformance descriptor for PinchInfoPB);
}

uint64_t base witness table accessor for Equatable in PinchStatusPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchStatusPB and conformance PinchStatusPB, type metadata accessor for PinchStatusPB, (uint64_t)&protocol conformance descriptor for PinchStatusPB);
}

uint64_t base witness table accessor for Message in PinchStatusPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchStatusPB and conformance PinchStatusPB, type metadata accessor for PinchStatusPB, (uint64_t)&protocol conformance descriptor for PinchStatusPB);
}

uint64_t base witness table accessor for Hashable in PinchStatusPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchStatusPB and conformance PinchStatusPB, type metadata accessor for PinchStatusPB, (uint64_t)&protocol conformance descriptor for PinchStatusPB);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PinchGestureStatusPB()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PinchGestureStatusPB] and conformance [A], &demangling cache variable for type metadata for [PinchGestureStatusPB]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PinchBreakRejectorPB()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PinchBreakRejectorPB] and conformance [A], &demangling cache variable for type metadata for [PinchBreakRejectorPB]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PinchMakeRejectorPB()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PinchMakeRejectorPB] and conformance [A], &demangling cache variable for type metadata for [PinchMakeRejectorPB]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PinchBreakSourcePB()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PinchBreakSourcePB] and conformance [A], &demangling cache variable for type metadata for [PinchBreakSourcePB]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PinchMakeSourcePB()
{
  return lazy protocol witness table accessor for type [CameraModel] and conformance [A](&lazy protocol witness table cache variable for type [PinchMakeSourcePB] and conformance [A], &demangling cache variable for type metadata for [PinchMakeSourcePB]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PinchStatusPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchStatusPB and conformance PinchStatusPB, type metadata accessor for PinchStatusPB, (uint64_t)&protocol conformance descriptor for PinchStatusPB);
}

uint64_t specialized static PinchStatusPB.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*a1 == *(_QWORD *)a2
    && a1[1] == *((_QWORD *)a2 + 1)
    && a1[2] == *((_QWORD *)a2 + 2)
    && a1[3] == *((_QWORD *)a2 + 3))
  {
    v13 = type metadata accessor for PinchStatusPB(0);
    v14 = (char *)a1 + *(int *)(v13 + 32);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, &a2[*(int *)(v13 + 32)], v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t outlined init with copy of PinchStatusPB?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchStatusPB?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PinchStatusPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PinchStatusPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static PinchInfoPB.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  char *v34;
  char v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;

  v46 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46, v4);
  v48 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v47 = (char *)&v45 - v8;
  v9 = type metadata accessor for PinchStatusPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v50 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PinchStatusPB?, PinchStatusPB?));
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchStatusPB?);
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (uint64_t *)((char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v45 - v23;
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v45 - v27;
  v29 = type metadata accessor for PinchInfoPB(0);
  v30 = *(int *)(v29 + 24);
  v51 = a1;
  outlined init with copy of PinchStatusPB?((uint64_t)&a1[v30], (uint64_t)v28);
  v31 = *(int *)(v29 + 24);
  v52 = a2;
  outlined init with copy of PinchStatusPB?((uint64_t)&a2[v31], (uint64_t)v24);
  v32 = (uint64_t)&v16[*(int *)(v13 + 48)];
  outlined init with copy of PinchStatusPB?((uint64_t)v28, (uint64_t)v16);
  outlined init with copy of PinchStatusPB?((uint64_t)v24, v32);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v33((uint64_t)v16, 1, v9) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for PinchStatusPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for PinchStatusPB?);
    if (v33(v32, 1, v9) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v16, &demangling cache variable for type metadata for PinchStatusPB?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of PinchStatusPB?((uint64_t)v16, (uint64_t)v20);
  if (v33(v32, 1, v9) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for PinchStatusPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for PinchStatusPB?);
    outlined destroy of PinchStatusPB((uint64_t)v20);
LABEL_6:
    outlined destroy of Coordinate3DPB?((uint64_t)v16, &demangling cache variable for type metadata for (PinchStatusPB?, PinchStatusPB?));
LABEL_10:
    v42 = 0;
    return v42 & 1;
  }
  v34 = v50;
  outlined init with take of PinchStatusPB(v32, (uint64_t)v50);
  v35 = specialized static PinchStatusPB.== infix(_:_:)(v20, v34);
  outlined destroy of PinchStatusPB((uint64_t)v34);
  outlined destroy of Coordinate3DPB?((uint64_t)v24, &demangling cache variable for type metadata for PinchStatusPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for PinchStatusPB?);
  outlined destroy of PinchStatusPB((uint64_t)v20);
  outlined destroy of Coordinate3DPB?((uint64_t)v16, &demangling cache variable for type metadata for PinchStatusPB?);
  if ((v35 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v36 = v52;
  if (*(_QWORD *)v51 != *(_QWORD *)v52)
    goto LABEL_10;
  v37 = v49;
  v38 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  v40 = v46;
  v39 = v47;
  v38(v47, &v51[*(int *)(v29 + 20)], v46);
  v41 = v48;
  v38(v48, &v36[*(int *)(v29 + 20)], v40);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  v43 = *(void (**)(char *, uint64_t))(v37 + 8);
  v43(v41, v40);
  v43(v39, v40);
  return v42 & 1;
}

ValueMetadata *type metadata accessor for PinchGestureStatusPB()
{
  return &type metadata for PinchGestureStatusPB;
}

unint64_t lazy protocol witness table accessor for type PinchGestureStatusPB and conformance PinchGestureStatusPB()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchGestureStatusPB and conformance PinchGestureStatusPB;
  if (!lazy protocol witness table cache variable for type PinchGestureStatusPB and conformance PinchGestureStatusPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchGestureStatusPB, &type metadata for PinchGestureStatusPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchGestureStatusPB and conformance PinchGestureStatusPB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchGestureStatusPB and conformance PinchGestureStatusPB;
  if (!lazy protocol witness table cache variable for type PinchGestureStatusPB and conformance PinchGestureStatusPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchGestureStatusPB, &type metadata for PinchGestureStatusPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchGestureStatusPB and conformance PinchGestureStatusPB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchGestureStatusPB and conformance PinchGestureStatusPB;
  if (!lazy protocol witness table cache variable for type PinchGestureStatusPB and conformance PinchGestureStatusPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchGestureStatusPB, &type metadata for PinchGestureStatusPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchGestureStatusPB and conformance PinchGestureStatusPB);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchGestureStatusPB and conformance PinchGestureStatusPB;
  if (!lazy protocol witness table cache variable for type PinchGestureStatusPB and conformance PinchGestureStatusPB)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchGestureStatusPB, &type metadata for PinchGestureStatusPB);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchGestureStatusPB and conformance PinchGestureStatusPB);
  }
  return result;
}

uint64_t ThumbTapStatistics.isSignalActiveFor(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DerivedHandAttributes?(a1, (uint64_t)v9);
  v10 = type metadata accessor for DerivedHandAttributes(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v9, &demangling cache variable for type metadata for DerivedHandAttributes?);
    return 0;
  }
  else
  {
    outlined init with copy of HandDescriptor((uint64_t)v9, (uint64_t)v5);
    outlined destroy of Matrix3x3PB((uint64_t)v9, type metadata accessor for DerivedHandAttributes);
    v11 = v5[281];
    outlined destroy of Matrix3x3PB((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  }
  return v11;
}

uint64_t ThumbTapStatistics.__allocating_init(is_left:signal:)(char a1, char a2)
{
  swift_allocObject();
  return SignalStatistics.init(is_left:signal:)(a1, a2);
}

uint64_t ThumbTapStatistics.__allocating_init(fromPrev:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = specialized SignalStatistics.init(fromPrev:)(a1);
  swift_release();
  return v2;
}

uint64_t ThumbTapStatistics.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtC5Hands16SignalStatistics_handLastSignalStart, &demangling cache variable for type metadata for HandDescriptor?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ThumbTapStatistics()
{
  return type metadata accessor for ThumbTapStatistics();
}

uint64_t type metadata accessor for ThumbTapStatistics()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ThumbTapStatistics;
  if (!type metadata singleton initialization cache for ThumbTapStatistics)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ThumbTapStatistics()
{
  return swift_updateClassMetadata2();
}

uint64_t outlined init with copy of DerivedHandAttributes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DerivedHandAttributes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PinchGenerator.init(pinchFrameFeatureProcessor:pinchPostProcessingUnits:serializeInternalData:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeEpoch epoch;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v17[592];
  _BYTE v18[788];
  char v19;
  _BYTE __src[360];
  _BYTE v21[124];
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void *v29;
  void *v30;
  _BYTE v31[341];
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  CMTimeValue v35;
  CMTimeScale v36;
  int v37;
  CMTimeEpoch v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  __int16 v54;
  _BYTE v55[784];
  CMTime v56;

  _s5Hands18PinchFrameFeaturesVSgWOi0_(v18);
  outlined init with take of PinchFrameFeatures?((uint64_t)v18, v3 + 16);
  *(_QWORD *)(v3 + 792) = 0;
  *(_QWORD *)(v3 + 800) = MEMORY[0x24BEE4AF8];
  *(_WORD *)(v3 + 808) = 0;
  *(_OWORD *)(v3 + 816) = 0u;
  *(_OWORD *)(v3 + 832) = 0u;
  v19 = 1;
  v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v4 + 16) = 7;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 56) = 0;
  DerivedFeatures.init()((uint64_t)v17);
  v56 = CMTime.init(value:timescale:)(0, 1);
  value = v56.value;
  timescale = v56.timescale;
  epoch = v56.epoch;
  v8 = HIDWORD(*(_QWORD *)&v56.timescale);
  v12 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v13 = *MEMORY[0x24BDAEE00];
  v10 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v11 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  __src[344] = 1;
  memcpy(&__src[8], v17, 0x14DuLL);
  memset(v21, 0, sizeof(v21));
  v22 = v19;
  v23 = 2;
  v25 = 0;
  v24 = 0;
  v28 = 1;
  v29 = &outlined read-only object #0 of PinchGenerator.init(pinchFrameFeatureProcessor:pinchPostProcessingUnits:serializeInternalData:);
  v30 = &outlined read-only object #1 of PinchGenerator.init(pinchFrameFeatureProcessor:pinchPostProcessingUnits:serializeInternalData:);
  v26 = v4;
  v27 = 0;
  memcpy(v31, __src, sizeof(v31));
  v32 = 8;
  v33 = xmmword_23D9AD6D0;
  v34 = 0x3CA3D70A3F6B851FLL;
  v35 = value;
  v36 = timescale;
  v37 = v8;
  v38 = epoch;
  v39 = &outlined read-only object #0 of PostProcessingMetaData.init();
  v40 = v13;
  v41 = v12;
  v42 = v11;
  v43 = v10;
  v50 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0;
  v47 = 0;
  v49 = 0;
  v48 = 0;
  v51 = -1;
  v52 = 0;
  v53 = 0x3F800000BF800000;
  v54 = 0;
  _s5Hands13PoseImageCropVSgWOi_(v21);
  outlined init with take of PinchFrameFeatures?(v3 + 16, (uint64_t)v55);
  outlined init with take of PinchFrameFeatures?((uint64_t)v21, v3 + 16);
  outlined retain of PinchFrameFeatures?(v55, outlined consume of PinchFrameFeatures?);
  *(_QWORD *)(v3 + 792) = a1;
  swift_release();
  *(_QWORD *)(v3 + 800) = a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 + 808) = a3;
  return v3;
}

Swift::Void __swiftcall PinchGenerator.reset()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeEpoch epoch;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[596];
  char v24;
  _BYTE __src[360];
  _BYTE v26[124];
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  void *v35;
  _BYTE v36[341];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  CMTimeValue v40;
  CMTimeScale v41;
  int v42;
  CMTimeEpoch v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  __int16 v59;
  _BYTE v60[784];
  CMTime v61;

  v1 = v0;
  v24 = 1;
  v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v2 + 16) = 7;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  DerivedFeatures.init()((uint64_t)v23);
  v61 = CMTime.init(value:timescale:)(0, 1);
  value = v61.value;
  timescale = v61.timescale;
  epoch = v61.epoch;
  v6 = HIDWORD(*(_QWORD *)&v61.timescale);
  v18 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v19 = *MEMORY[0x24BDAEE00];
  v16 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v17 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  __src[344] = 1;
  memcpy(&__src[8], v23, 0x14DuLL);
  memset(v26, 0, sizeof(v26));
  v27 = v24;
  v28 = 2;
  v30 = 0;
  v29 = 0;
  v33 = 1;
  v34 = &outlined read-only object #0 of PinchGenerator.reset();
  v35 = &outlined read-only object #1 of PinchGenerator.reset();
  v31 = v2;
  v32 = 0;
  memcpy(v36, __src, sizeof(v36));
  v37 = 8;
  v38 = xmmword_23D9AD6D0;
  v39 = 0x3CA3D70A3F6B851FLL;
  v40 = value;
  v41 = timescale;
  v42 = v6;
  v43 = epoch;
  v44 = &outlined read-only object #0 of PostProcessingMetaData.init();
  v45 = v19;
  v46 = v18;
  v47 = v17;
  v48 = v16;
  v55 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0;
  v52 = 0;
  v54 = 0;
  v53 = 0;
  v56 = -1;
  v57 = 0;
  v58 = 0x3F800000BF800000;
  v59 = 0;
  _s5Hands13PoseImageCropVSgWOi_(v26);
  outlined init with take of PinchFrameFeatures?((uint64_t)(v1 + 2), (uint64_t)v60);
  outlined init with take of PinchFrameFeatures?((uint64_t)v26, (uint64_t)(v1 + 2));
  outlined retain of PinchFrameFeatures?(v60, outlined consume of PinchFrameFeatures?);
  if (!v1[99])
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  swift_retain();
  swift_retain();
  PinchUncertaintyFilters.reset()();
  swift_release();
  swift_release();
  v7 = v1[100];
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = v7 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Detection2DComputePipelineProtocol(v9, (uint64_t)v20);
      v10 = v21;
      v11 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
      v9 += 40;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  v12 = v1[102];
  if (!v12)
    goto LABEL_11;
  *(_QWORD *)(v12 + 112) = 0;
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 216) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v14 = v1[103];
  if (!v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *(_QWORD *)(v14 + 112) = 0;
  *(_QWORD *)(v14 + 216) = v13;
  swift_bridgeObjectRelease();
  v15 = v1[104];
  if (v15)
  {
    *(_QWORD *)(v15 + 112) = 0;
    *(_QWORD *)(v15 + 216) = v13;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t PinchGenerator.checkIfMakeRejectedByOIS(_:_:)(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[784];
  _BYTE v8[784];

  if ((a1[4] & 1) != 0)
  {
    outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v7);
    outlined init with take of PinchFrameFeatures?((uint64_t)v7, (uint64_t)v8);
    result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v8);
    if ((_DWORD)result != 1)
    {
      *(_BYTE *)(v2 + 490) = 0;
      return result;
    }
    __break(1u);
    goto LABEL_8;
  }
  v5 = a1[2];
  v6 = *a1;
  outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v7);
  outlined init with take of PinchFrameFeatures?((uint64_t)v7, (uint64_t)v8);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v8);
  if ((_DWORD)result == 1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  *(_BYTE *)(v2 + 490) = (((v5 & 2) == 0) & (v6 >> 1) | a2) & ((v5 & 0x10) >> 4);
  return result;
}

uint64_t PinchGenerator.updateOisCoreAnalyticsData(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  char v17;
  char v18;
  uint64_t v20[97];
  char v21;
  char v22;
  char v23;
  _OWORD v24[8];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  char v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  char v63;
  __int16 v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char v82;
  int v83;
  int v84;
  char v85;
  char v86;
  _OWORD v87[8];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  __int128 v93;
  char v94;
  char v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  char v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  int v113;
  char v114;
  uint64_t v115;
  char v116;
  char v117;
  char v118;
  char v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  char v126;
  __int16 v127;
  char v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  char v145;
  int v146;
  int v147;
  char v148;
  char v149;
  _BYTE v150[784];
  _BYTE v151[800];

  outlined init with take of PinchFrameFeatures?(v1 + 16, (uint64_t)v150);
  outlined init with take of PinchFrameFeatures?((uint64_t)v150, (uint64_t)v87);
  outlined init with take of PinchFrameFeatures?((uint64_t)v150, (uint64_t)v151);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v151);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    outlined init with take of PinchFrameFeatures?((uint64_t)v150, (uint64_t)v20);
    v3 = v116;
    v4 = v117;
    v5 = v118;
    v6 = v119;
    v7 = v120;
    v8 = v122;
    v25 = v88;
    v76 = v139;
    v27 = v90;
    v16 = v121;
    v17 = v123;
    v28 = v91;
    v29 = v92;
    v31 = v94;
    v32 = v95;
    v18 = v125;
    v30 = v93;
    v33 = v96;
    v34 = v97;
    v42 = v105;
    v44 = v107;
    v46 = v109;
    v9 = v126;
    v43 = v106;
    v47 = v110;
    v48 = v111;
    v49 = v112;
    v23 = v121;
    v22 = v123;
    v21 = v125;
    v51 = v114;
    v58 = v121;
    v60 = v123;
    v62 = v125;
    v77 = v140;
    v79 = v142;
    v81 = v144;
    v82 = v145;
    v85 = v148;
    v86 = v149;
    v10 = v127;
    v11 = v128;
    v24[2] = v87[2];
    v24[3] = v87[3];
    v24[0] = v87[0];
    v24[1] = v87[1];
    v24[6] = v87[6];
    v24[7] = v87[7];
    v24[4] = v87[4];
    v24[5] = v87[5];
    v74 = v137;
    v75 = v138;
    v70 = v133;
    v71 = v134;
    v73 = v136;
    v72 = v135;
    v66 = v129;
    v67 = v130;
    v69 = v132;
    v68 = v131;
    v26 = v89;
    v35 = v98;
    v36 = v99;
    v37 = v100;
    v38 = v101;
    v39 = v102;
    v40 = v103;
    v41 = v104;
    v45 = v108;
    v50 = v113;
    v52 = v115;
    v53 = v116;
    v54 = v117;
    v55 = v118;
    v56 = v119;
    v57 = v120;
    v59 = v122;
    v12 = v124;
    v61 = v124;
    v63 = v126;
    v64 = v127;
    v65 = v128;
    v78 = v141;
    v80 = v143;
    v83 = v146;
    v84 = v147;
    outlined retain of PinchFrameFeatures(v20);
    outlined release of PinchFrameFeatures((uint64_t *)v24);
    result = type metadata accessor for HandDescriptor();
    v13 = a1 + *(int *)(result + 152);
    *(_BYTE *)v13 = v3;
    *(_BYTE *)(v13 + 1) = v4;
    *(_BYTE *)(v13 + 2) = v5;
    *(_BYTE *)(v13 + 3) = v6;
    *(_QWORD *)(v13 + 8) = v7;
    *(_BYTE *)(v13 + 16) = v16;
    *(_QWORD *)(v13 + 24) = v8;
    *(_BYTE *)(v13 + 32) = v17;
    *(_QWORD *)(v13 + 40) = v12;
    *(_BYTE *)(v13 + 48) = v18;
    *(_BYTE *)(v13 + 49) = v9;
    *(_BYTE *)(v13 + 50) = v10;
    *(_BYTE *)(v13 + 52) = v11;
    v14 = a1 + *(int *)(result + 132);
    if (*(_BYTE *)(v14 + 8))
      v15 = *(_QWORD *)v14 != 0;
    else
      v15 = *(_QWORD *)v14 == 1;
    *(_BYTE *)(v13 + 51) = v15;
  }
  return result;
}

uint64_t PinchGenerator.updateOisEnterExitEvents(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v15;
  uint64_t v16[4];
  _OWORD v17[49];
  uint64_t v18[98];
  _OWORD v19[49];
  _QWORD v20[98];
  _BYTE v21[784];
  _QWORD v22[98];

  v3 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v7 = v6;
  v8 = v3;
  v9 = type metadata accessor for HandPinchEvent(0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v21);
  outlined init with take of PinchFrameFeatures?((uint64_t)v21, (uint64_t)v22);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v22);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (v22[60])
  {
    outlined init with take of PinchFrameFeatures?((uint64_t)v21, (uint64_t)v20);
    memcpy(v19, v20, 0x306uLL);
    static HandPinchEvent.generateObjectInteractionStateEvent(hand:pinchFrameFeatures:timestamp:pinchSuppressionEvent:start:)(v8, (uint64_t)v19, v7, v5, 0, 1, (uint64_t)v12);
    v19[0] = xmmword_23D9AB690;
    v19[1] = 0uLL;
    v18[3] = v9;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v18);
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v12, (uint64_t)boxed_opaque_existential_0, type metadata accessor for HandPinchEvent);
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000089, 0x800000023D9CA450, 161, (uint64_t *)v19, (uint64_t)v18, MEMORY[0x24BEE4AF8]);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for HandPinchEvent);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  }
  outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v19);
  outlined init with take of PinchFrameFeatures?((uint64_t)v19, (uint64_t)v20);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v20);
  if ((_DWORD)result == 1)
    goto LABEL_9;
  if (v20[62])
  {
    outlined init with take of PinchFrameFeatures?((uint64_t)v19, (uint64_t)v18);
    memcpy(v17, v18, 0x306uLL);
    static HandPinchEvent.generateObjectInteractionStateEvent(hand:pinchFrameFeatures:timestamp:pinchSuppressionEvent:start:)(v8, (uint64_t)v17, v7, v5, 0, 0, (uint64_t)v12);
    v17[0] = xmmword_23D9AB690;
    v17[1] = 0uLL;
    v16[3] = v9;
    v15 = __swift_allocate_boxed_opaque_existential_0(v16);
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v12, (uint64_t)v15, type metadata accessor for HandPinchEvent);
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000089, 0x800000023D9CA450, 166, (uint64_t *)v17, (uint64_t)v16, MEMORY[0x24BEE4AF8]);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for HandPinchEvent);
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  }
  return result;
}

uint64_t PinchGenerator.updateOisPinchSupressionEvents(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t *boxed_opaque_existential_0;
  uint64_t *v20;
  _QWORD v21[2];
  uint64_t v22[4];
  _OWORD v23[49];
  _BYTE v24[784];
  uint64_t v25[98];
  _OWORD v26[49];
  _BYTE v27[784];
  _BYTE v28[784];
  _BYTE v29[784];
  _BYTE v30[784];
  _BYTE v31[784];
  _BYTE v32[800];

  v3 = MEMORY[0x24BDAC7A8](a1, a2);
  v21[1] = v4;
  v6 = v5;
  v8 = v7;
  v9 = v3;
  v10 = type metadata accessor for HandPinchEvent(0);
  v12 = MEMORY[0x24BDAC7A8](v10, v11);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v15);
  v17 = (char *)v21 - v16;
  outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v31);
  outlined init with take of PinchFrameFeatures?((uint64_t)v31, (uint64_t)v32);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v32);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v32[521] == 1)
  {
    outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v29);
    outlined init with take of PinchFrameFeatures?((uint64_t)v29, (uint64_t)v30);
    result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v30);
    if ((_DWORD)result == 1)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    *(_BYTE *)(v2 + 491) = 0;
    outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v27);
    outlined init with take of PinchFrameFeatures?((uint64_t)v27, (uint64_t)v28);
    result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v28);
    if ((_DWORD)result == 1)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    memcpy(v26, v28, 0x306uLL);
    static HandPinchEvent.generateObjectInteractionStateEvent(hand:pinchFrameFeatures:timestamp:pinchSuppressionEvent:start:)(v9, (uint64_t)v26, v8, v6, 1, 0, (uint64_t)v17);
    v26[0] = xmmword_23D9AB690;
    v26[1] = 0uLL;
    v25[3] = v10;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v25);
    outlined init with copy of TrackingUpdateDataPB((uint64_t)v17, (uint64_t)boxed_opaque_existential_0, type metadata accessor for HandPinchEvent);
    specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000089, 0x800000023D9CA450, 175, (uint64_t *)v26, (uint64_t)v25, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
    outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v25);
    outlined init with take of PinchFrameFeatures?((uint64_t)v25, (uint64_t)v26);
    result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v26);
    if ((_DWORD)result == 1)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    *(_BYTE *)(v2 + 538) = 1;
    outlined destroy of Matrix3x3PB((uint64_t)v17, type metadata accessor for HandPinchEvent);
  }
  outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v29);
  outlined init with take of PinchFrameFeatures?((uint64_t)v29, (uint64_t)v30);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v30);
  if ((_DWORD)result == 1)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((v30[475] & 1) == 0)
  {
    result = outlined init with take of PinchFrameFeatures?((uint64_t)v29, (uint64_t)v28);
    if (v28[474] == 1)
    {
      outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v26);
      outlined init with take of PinchFrameFeatures?((uint64_t)v26, (uint64_t)v27);
      result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v27);
      if ((_DWORD)result == 1)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      *(_BYTE *)(v2 + 491) = 1;
      outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v24);
      outlined init with take of PinchFrameFeatures?((uint64_t)v24, (uint64_t)v25);
      result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v25);
      if ((_DWORD)result == 1)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      memcpy(v23, v25, 0x306uLL);
      static HandPinchEvent.generateObjectInteractionStateEvent(hand:pinchFrameFeatures:timestamp:pinchSuppressionEvent:start:)(v9, (uint64_t)v23, v8, v6, 1, 1, (uint64_t)v14);
      v23[0] = xmmword_23D9AB690;
      v23[1] = 0uLL;
      v22[3] = v10;
      v20 = __swift_allocate_boxed_opaque_existential_0(v22);
      outlined init with copy of TrackingUpdateDataPB((uint64_t)v14, (uint64_t)v20, type metadata accessor for HandPinchEvent);
      specialized static HLog.I(file:function:line:logArea:_:_:)(0xD000000000000089, 0x800000023D9CA450, 183, (uint64_t *)v23, (uint64_t)v22, MEMORY[0x24BEE4AF8]);
      outlined destroy of Matrix3x3PB((uint64_t)v14, type metadata accessor for HandPinchEvent);
      result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
    }
  }
  if ((*(_BYTE *)(v9 + 4) & 1) == 0)
    return result;
  outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v27);
  outlined init with take of PinchFrameFeatures?((uint64_t)v27, (uint64_t)v28);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v28);
  if ((_DWORD)result == 1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v28[475] != 1)
    return result;
  outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v25);
  outlined init with take of PinchFrameFeatures?((uint64_t)v25, (uint64_t)v26);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v26);
  if ((_DWORD)result == 1)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  *(_BYTE *)(v2 + 491) = 0;
  return result;
}

uint64_t PinchGenerator.process(_:_:thresholdSearchMode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  float v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;
  BOOL v86;
  uint64_t result;
  _QWORD *v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  char v133;
  char v134;
  int v135;
  char v136;
  uint64_t v137;
  char v138;
  __int128 v139;
  unsigned int v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  int v145;
  char v146;
  char v147;
  char v148;
  char v149;
  char v150;
  char v151;
  char v152;
  char v153;
  uint64_t v154;
  int v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  char v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  char v170;
  _OWORD __src[49];
  _OWORD v172[49];
  _BYTE v173[7];
  _BYTE v174[7];
  char v175;
  int v176;
  char v177;
  int v178;
  __int16 v179;
  _OWORD v180[49];
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  char v193;
  char v194;
  char v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  _OWORD __dst[49];
  _BYTE v209[784];
  _BYTE v210[784];
  _OWORD v211[49];
  _OWORD v212[2];
  _OWORD v213[2];
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;

  v3 = MEMORY[0x24BDAC7A8](a1, a2);
  v170 = v5;
  v7 = v6;
  v8 = v4[1];
  v221 = *v4;
  v222 = v8;
  v9 = *((_QWORD *)v4 + 4);
  v166 = *((unsigned int *)v4 + 10);
  v165 = *((unsigned int *)v4 + 11);
  v10 = *((_QWORD *)v4 + 6);
  v11 = *(__int128 *)((char *)v4 + 104);
  v12 = *(__int128 *)((char *)v4 + 136);
  v218 = *(__int128 *)((char *)v4 + 120);
  v219 = v12;
  v220 = *(__int128 *)((char *)v4 + 152);
  v13 = *(__int128 *)((char *)v4 + 72);
  v214 = *(__int128 *)((char *)v4 + 56);
  v215 = v13;
  v216 = *(__int128 *)((char *)v4 + 88);
  v217 = v11;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_121;
  v14 = v3;
  if ((*(_BYTE *)(v3 + 280) & 1) != 0)
    goto LABEL_121;
  if (!*(_QWORD *)(v2 + 792))
    goto LABEL_119;
  v15 = v4;
  v164 = v9;
  v169 = v2 + 16;
  outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v209);
  outlined init with take of PinchFrameFeatures?((uint64_t)v209, (uint64_t)v210);
  if (_s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v210) == 1)
  {
LABEL_120:
    __break(1u);
LABEL_121:
    lazy protocol witness table accessor for type PinchModelError and conformance PinchModelError();
    swift_allocError();
    *v88 = 0;
    v88[1] = 0;
    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  memcpy(__dst, v210, 0x306uLL);
  v16 = v15[1];
  v180[0] = *v15;
  v180[1] = v16;
  v17 = *(_OWORD *)((char *)v15 + 88);
  *(_OWORD *)((char *)&v180[6] + 8) = *(_OWORD *)((char *)v15 + 104);
  v18 = *(_OWORD *)((char *)v15 + 136);
  *(_OWORD *)((char *)&v180[7] + 8) = *(_OWORD *)((char *)v15 + 120);
  *(_OWORD *)((char *)&v180[8] + 8) = v18;
  *(_OWORD *)((char *)&v180[9] + 8) = *(_OWORD *)((char *)v15 + 152);
  v19 = *(_OWORD *)((char *)v15 + 72);
  *(_OWORD *)((char *)&v180[3] + 8) = *(_OWORD *)((char *)v15 + 56);
  *(_OWORD *)((char *)&v180[4] + 8) = v19;
  *(_QWORD *)&v180[2] = v164;
  *((_QWORD *)&v180[2] + 1) = __PAIR64__(v165, v166);
  *(_QWORD *)&v180[3] = v10;
  *(_OWORD *)((char *)&v180[5] + 8) = v17;
  swift_retain();
  outlined retain of PinchFrameFeatures?(v209, outlined copy of PinchFrameFeatures?);
  PinchFrameFeatureProcessor.update(_:_:_:)((uint64_t)__dst, v14);
  swift_release();
  outlined retain of PinchFrameFeatures?(v209, outlined consume of PinchFrameFeatures?);
  v206 = 0u;
  v207 = 0u;
  v20 = *(_QWORD *)(v2 + 800);
  v21 = *(_QWORD *)(v20 + 16);
  v167 = v14;
  v157 = v7;
  v158 = v10;
  if (v21)
  {
    v22 = (_QWORD *)(v20 + 32);
    v23 = (_BYTE *)(v2 + 808);
    swift_bridgeObjectRetain();
    while (1)
    {
      v25 = v22[3];
      v24 = v22[4];
      __swift_project_boxed_opaque_existential_1(v22, v25);
      memcpy(__dst, v211, 0x306uLL);
      (*(void (**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t))(v24 + 16))(v172, __dst, v25, v24);
      v212[0] = v172[0];
      v212[1] = v172[1];
      v213[0] = v172[2];
      *(_OWORD *)((char *)v213 + 10) = *(_OWORD *)((char *)&v172[2] + 10);
      PinchStatus.merge(stateMask:)((uint64_t)v212);
      if (*v23 == 1 && (v170 & 1) == 0)
      {
        outlined init with copy of PinchInternalDataType?((uint64_t)&v172[4], (uint64_t)__dst);
        v26 = *((_QWORD *)&__dst[1] + 1);
        if (*((_QWORD *)&__dst[1] + 1))
        {
          v27 = *(_QWORD *)&__dst[2];
          __swift_project_boxed_opaque_existential_1(__dst, *((uint64_t *)&__dst[1] + 1));
          v28 = type metadata accessor for HandDescriptor();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v167 + *(int *)(v28 + 96), v26, v27);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)__dst);
        }
        else
        {
          outlined destroy of PinchInternalDataType?((uint64_t)__dst);
        }
      }
      v29 = DWORD2(v172[6]);
      v30 = *(_QWORD *)&v172[7];
      v31 = BYTE8(v172[7]);
      v32 = *(_QWORD *)&v172[8];
      v33 = BYTE8(v172[8]);
      v34 = *(_QWORD *)&v172[9];
      v35 = WORD4(v172[9]);
      outlined destroy of UnitResult((uint64_t)v172);
      if (v29 != 2)
      {
        BYTE8(v211[29]) = v29 & 1;
        BYTE9(v211[29]) = BYTE2(v29) & 1;
        *(_QWORD *)&v211[32] = v30;
        BYTE8(v211[32]) = v31 & 1;
        BYTE8(v211[30]) = v33 & 1;
        *(_QWORD *)&v211[30] = v32;
        *(_QWORD *)&v211[31] = v34;
        BYTE8(v211[31]) = v35 & 1;
        *(_WORD *)((char *)&v211[32] + 9) = HIBYTE(v35) & 1;
        outlined init with take of PinchFrameFeatures?(v169, (uint64_t)v180);
        outlined init with take of PinchFrameFeatures?((uint64_t)v180, (uint64_t)__dst);
        if (_s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)__dst) == 1)
        {
          __break(1u);
LABEL_119:
          __break(1u);
          goto LABEL_120;
        }
        BYTE12(v211[32]) = *(_QWORD *)&__dst[30] == 3;
      }
      v22 += 5;
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        v37 = *((_QWORD *)&v206 + 1);
        v36 = v206;
        v38 = *((_QWORD *)&v207 + 1);
        v39 = v207;
        v14 = v167;
        goto LABEL_18;
      }
    }
  }
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v36 = 0;
LABEL_18:
  v155 = LOBYTE(v211[12]);
  if ((v211[12] & 1) == 0)
  {
    if ((v36 & 2) == 0 || (v39 & 2) != 0)
    {
      if ((v36 & 0x40) == 0)
      {
        if (BYTE1(v211[12]) == 1)
          goto LABEL_76;
        goto LABEL_64;
      }
    }
    else if ((v36 & 0x40) == 0)
    {
      if ((v39 & 4) != 0)
      {
        if (BYTE1(v211[12]) != 1)
          goto LABEL_95;
      }
      else
      {
        if ((v39 & 0x10) == 0)
        {
          if (!BYTE1(v211[12]))
          {
            v40 = 0;
            v168 = 1;
LABEL_96:
            v151 = v40;
            v37 = 0;
            v38 = 0;
            v42 = 1;
            goto LABEL_97;
          }
LABEL_42:
          if ((v37 & 2) != 0)
          {
            v168 = 1;
            if ((v38 & 2) == 0 || (v40 = 1, (v37 & 0x80) != 0))
            {
              v153 = 0;
              v37 = 0;
              v38 = 0;
              v151 = 1;
              goto LABEL_108;
            }
          }
          else
          {
            v168 = 1;
            if ((v37 & 0x80) != 0)
            {
              v37 = 0;
              v38 = 0;
              goto LABEL_105;
            }
            v40 = 1;
          }
          goto LABEL_96;
        }
        if (!BYTE1(v211[12]))
        {
LABEL_95:
          v168 = 0;
          v40 = 0;
          goto LABEL_96;
        }
      }
LABEL_76:
      if ((v37 & 2) != 0)
      {
        v168 = 0;
        v40 = 1;
        if ((v38 & 2) != 0 && (v37 & 0x80) == 0)
          goto LABEL_96;
      }
      else
      {
        v168 = 0;
        v40 = 1;
        if ((v37 & 0x80) == 0)
          goto LABEL_96;
      }
      v151 = 1;
      v37 = 0;
      v38 = 0;
LABEL_82:
      v42 = 0;
      goto LABEL_97;
    }
    if ((v39 & 4) != 0)
    {
      if (BYTE1(v211[12]) == 1)
        goto LABEL_76;
    }
    else
    {
      if ((v39 & 0x10) == 0)
      {
        if ((BYTE1(v211[12]) & 1) == 0)
        {
          v40 = 0;
          if ((v36 & 2) != 0)
          {
            v168 = 1;
            if ((v39 & 2) == 0 || (v36 & 0x80) != 0)
              goto LABEL_96;
          }
          else
          {
            v168 = 1;
            if ((v36 & 0x80) != 0)
              goto LABEL_96;
          }
          v37 = 0;
          v38 = 0;
          v151 = 0;
          v153 = 0;
          goto LABEL_108;
        }
        goto LABEL_42;
      }
      if (BYTE1(v211[12]))
        goto LABEL_76;
    }
    if ((v36 & 2) != 0)
    {
      v168 = 0;
      if ((v39 & 2) == 0 || (v36 & 0x80) != 0)
        goto LABEL_65;
      goto LABEL_74;
    }
LABEL_64:
    v168 = 0;
    if ((v36 & 0x80) != 0)
    {
LABEL_65:
      v40 = 0;
      goto LABEL_96;
    }
LABEL_74:
    v37 = 0;
    v38 = 0;
    v42 = 0;
    v151 = 0;
LABEL_97:
    v153 = v42;
    goto LABEL_108;
  }
  if ((v37 & 2) == 0)
  {
    if ((v37 & 0x40) == 0)
    {
      if ((BYTE1(v211[12]) & 1) != 0)
      {
        v168 = 1;
        if ((v37 & 0x80) == 0)
          goto LABEL_88;
        goto LABEL_51;
      }
LABEL_53:
      v41 = 0;
      if ((v36 & 2) == 0)
      {
        v168 = 1;
        if ((v36 & 0x80) != 0)
          goto LABEL_89;
        goto LABEL_55;
      }
      v168 = 1;
      if ((v39 & 2) == 0 || (v36 & 0x80) != 0)
        goto LABEL_89;
      goto LABEL_55;
    }
    if ((BYTE1(v211[12]) & 1) != 0)
    {
      v168 = 0;
      v41 = 1;
      if ((v37 & 0x80) == 0)
        goto LABEL_89;
      goto LABEL_55;
    }
LABEL_59:
    if ((v36 & 2) == 0)
    {
      v168 = 0;
      v41 = 0;
      if ((v36 & 0x80) != 0)
        goto LABEL_89;
      goto LABEL_55;
    }
    v168 = 0;
    if ((v39 & 2) == 0)
    {
      v41 = 0;
      goto LABEL_89;
    }
    v41 = 0;
    if ((v36 & 0x80) != 0)
    {
LABEL_89:
      v153 = 1;
      if ((v37 & 0x40) == 0)
      {
LABEL_90:
        v151 = v41;
        v36 = 0;
        v39 = 0;
        goto LABEL_108;
      }
      goto LABEL_107;
    }
LABEL_55:
    v153 = 0;
    if ((v37 & 0x40) == 0)
      goto LABEL_90;
    goto LABEL_107;
  }
  if ((v38 & 2) != 0 && (v37 & 0x40) == 0)
  {
    if ((BYTE1(v211[12]) & 1) == 0)
      goto LABEL_53;
    v168 = 1;
    if ((v37 & 0x80) != 0)
    {
      v36 = 0;
      v39 = 0;
LABEL_105:
      v153 = 0;
      v151 = 1;
      goto LABEL_108;
    }
LABEL_88:
    v41 = 1;
    goto LABEL_89;
  }
  if ((BYTE1(v211[12]) & 1) == 0)
    goto LABEL_59;
  if ((v38 & 2) == 0)
  {
    v168 = 0;
LABEL_51:
    v41 = 1;
    v153 = 0;
    if ((v37 & 0x40) == 0)
      goto LABEL_90;
    goto LABEL_107;
  }
  if ((v37 & 0x80) == 0)
  {
    v168 = 0;
    goto LABEL_88;
  }
  v168 = 0;
  v41 = 1;
  if ((v37 & 0x40) == 0)
  {
    v151 = 1;
    v36 = 0;
    v39 = 0;
    goto LABEL_82;
  }
  v153 = 0;
LABEL_107:
  v151 = v41;
  v36 = 0;
  v39 = 0;
  *(_BYTE *)(v14 + 137) = 1;
LABEL_108:
  *(_QWORD *)&__dst[0] = v36;
  *((_QWORD *)&__dst[0] + 1) = v37;
  *(_QWORD *)&__dst[1] = v39;
  *((_QWORD *)&__dst[1] + 1) = v38;
  v43 = v38;
  PinchGenerator.oihCoreAnalyticsHandling(_:_:)((uint64_t)__dst);
  v163 = v36;
  *(_QWORD *)&v181 = v36;
  *(_QWORD *)&v156 = v37;
  *((_QWORD *)&v181 + 1) = v37;
  *((_QWORD *)&v156 + 1) = v39;
  v182 = v39;
  v154 = v43;
  v183 = v43;
  v190 = v211[6];
  v191 = v211[7];
  v192 = *(_QWORD *)&v211[8];
  v186 = v211[2];
  v187 = v211[3];
  v188 = v211[4];
  v189 = v211[5];
  v184 = v211[0];
  v185 = v211[1];
  v160 = *(_QWORD *)&v211[29];
  v44 = BYTE8(v211[32]);
  v162 = BYTE9(v211[32]);
  v205 = *(_QWORD *)&v211[43];
  v161 = BYTE10(v211[32]);
  __dst[8] = v211[8];
  v113 = BYTE8(v211[31]);
  v114 = BYTE8(v211[30]);
  v195 = BYTE8(v211[30]);
  v194 = BYTE8(v211[31]);
  v193 = BYTE8(v211[32]);
  BYTE1(__dst[12]) = v151;
  BYTE8(__dst[30]) = BYTE8(v211[30]);
  BYTE8(__dst[31]) = BYTE8(v211[31]);
  DWORD2(__dst[32]) = DWORD2(v211[32]);
  v202 = v211[40];
  v203 = v211[41];
  v204 = v211[42];
  v198 = v211[36];
  v199 = v211[37];
  v200 = v211[38];
  v201 = v211[39];
  v196 = v211[34];
  v197 = v211[35];
  __dst[6] = v211[6];
  __dst[7] = v211[7];
  *(_OWORD *)((char *)&__dst[12] + 8) = *(_OWORD *)((char *)&v211[12] + 8);
  *(_QWORD *)&__dst[43] = *(_QWORD *)&v211[43];
  *(_OWORD *)((char *)&__dst[13] + 8) = *(_OWORD *)((char *)&v211[13] + 8);
  __dst[34] = v211[34];
  __dst[35] = v211[35];
  __dst[38] = v211[38];
  __dst[39] = v211[39];
  __dst[36] = v211[36];
  __dst[37] = v211[37];
  __dst[41] = v211[41];
  __dst[42] = v211[42];
  __dst[40] = v211[40];
  v139 = v211[46];
  __dst[46] = v211[46];
  __dst[2] = v211[2];
  __dst[3] = v211[3];
  __dst[4] = v211[4];
  __dst[5] = v211[5];
  __dst[0] = v211[0];
  __dst[1] = v211[1];
  v137 = *((_QWORD *)&v211[8] + 1);
  v128 = *((_QWORD *)&v211[9] + 1);
  v129 = *(_QWORD *)&v211[9];
  __dst[9] = v211[9];
  v127 = v211[10];
  LOBYTE(__dst[10]) = v211[10];
  v125 = *(_QWORD *)&v211[11];
  v126 = *((_QWORD *)&v211[10] + 1);
  *((_QWORD *)&__dst[10] + 1) = *((_QWORD *)&v211[10] + 1);
  *(_QWORD *)&__dst[11] = *(_QWORD *)&v211[11];
  LOBYTE(__dst[12]) = v155;
  v123 = *((_QWORD *)&v211[15] + 1);
  v124 = *(_QWORD *)&v211[15];
  __dst[15] = v211[15];
  v121 = *((_QWORD *)&v211[16] + 1);
  v122 = *(_QWORD *)&v211[16];
  __dst[16] = v211[16];
  v119 = *((_QWORD *)&v211[17] + 1);
  v120 = *(_QWORD *)&v211[17];
  __dst[17] = v211[17];
  v117 = *((_QWORD *)&v211[18] + 1);
  v118 = *(_QWORD *)&v211[18];
  __dst[18] = v211[18];
  v115 = *((_QWORD *)&v211[19] + 1);
  v116 = *(_QWORD *)&v211[19];
  __dst[19] = v211[19];
  v94 = *((_QWORD *)&v211[20] + 1);
  v92 = *(_QWORD *)&v211[20];
  __dst[20] = v211[20];
  v93 = *((_QWORD *)&v211[21] + 1);
  __dst[21] = v211[21];
  v90 = *(_QWORD *)&v211[22];
  v91 = *(_QWORD *)&v211[21];
  *(_QWORD *)&__dst[22] = *(_QWORD *)&v211[22];
  v140 = HIDWORD(v211[22]);
  v45 = DWORD2(v211[22]);
  *(_OWORD *)((char *)&__dst[22] + 8) = *(_OWORD *)((char *)&v211[22] + 8);
  v97 = v211[23];
  v130 = BYTE8(v211[23]);
  BYTE8(__dst[23]) = BYTE8(v211[23]);
  v98 = *((_QWORD *)&v211[24] + 1);
  v96 = *(_QWORD *)&v211[24];
  __dst[24] = v211[24];
  v141 = *((_QWORD *)&v211[25] + 1);
  v95 = *(_QWORD *)&v211[25];
  __dst[25] = v211[25];
  v142 = v211[26];
  __dst[26] = v211[26];
  v143 = v211[27];
  __dst[27] = v211[27];
  v144 = *(_QWORD *)&v211[28];
  *(_QWORD *)&__dst[28] = *(_QWORD *)&v211[28];
  v145 = DWORD2(v211[28]);
  DWORD2(__dst[28]) = DWORD2(v211[28]);
  v146 = BYTE12(v211[28]);
  BYTE12(__dst[28]) = BYTE12(v211[28]);
  *(_QWORD *)&__dst[29] = *(_QWORD *)&v211[29];
  v147 = BYTE8(v211[29]);
  DWORD2(__dst[29]) = DWORD2(v211[29]);
  v148 = BYTE9(v211[29]);
  v149 = BYTE10(v211[29]);
  v150 = BYTE11(v211[29]);
  v99 = *(_QWORD *)&v211[30];
  v100 = *(_QWORD *)&v211[31];
  *(_QWORD *)&__dst[30] = *(_QWORD *)&v211[30];
  *(_QWORD *)&__dst[31] = *(_QWORD *)&v211[31];
  v102 = *(_QWORD *)&v211[32];
  *(_QWORD *)&__dst[32] = *(_QWORD *)&v211[32];
  v152 = BYTE11(v211[32]);
  v136 = BYTE12(v211[32]);
  BYTE12(__dst[32]) = BYTE12(v211[32]);
  v131 = *((_QWORD *)&v211[33] + 1);
  v105 = *(_QWORD *)&v211[33];
  __dst[33] = v211[33];
  v111 = *(_QWORD *)&v211[44];
  *(_QWORD *)&__dst[44] = *(_QWORD *)&v211[44];
  v109 = HIDWORD(v211[44]);
  v110 = DWORD2(v211[44]);
  *(_OWORD *)((char *)&__dst[44] + 8) = *(_OWORD *)((char *)&v211[44] + 8);
  v108 = *(_QWORD *)&v211[45];
  v112 = *(_QWORD *)&v211[47];
  *(_QWORD *)&__dst[47] = *(_QWORD *)&v211[47];
  v138 = BYTE8(v211[47]);
  BYTE8(__dst[47]) = BYTE8(v211[47]);
  v132 = HIDWORD(v211[47]);
  HIDWORD(__dst[47]) = HIDWORD(v211[47]);
  v135 = v211[48];
  LODWORD(__dst[48]) = v211[48];
  v133 = BYTE4(v211[48]);
  WORD2(__dst[48]) = WORD2(v211[48]);
  v134 = BYTE5(v211[48]);
  memcpy(v180, __dst, 0x306uLL);
  v172[0] = v221;
  v172[1] = v222;
  *(_OWORD *)((char *)&v172[6] + 8) = v217;
  *(_OWORD *)((char *)&v172[7] + 8) = v218;
  *(_OWORD *)((char *)&v172[8] + 8) = v219;
  *(_OWORD *)((char *)&v172[9] + 8) = v220;
  *(_OWORD *)((char *)&v172[3] + 8) = v214;
  *(_OWORD *)((char *)&v172[4] + 8) = v215;
  *(_QWORD *)&v172[2] = v164;
  *((_QWORD *)&v172[2] + 1) = __PAIR64__(v165, v166);
  *(_QWORD *)&v172[3] = v158;
  *(_OWORD *)((char *)&v172[5] + 8) = v216;
  outlined retain of PinchFrameFeatures((uint64_t *)__dst);
  v89 = PinchGenerator.legacyPinchGenerationAdapter(_:_:_:)((uint64_t)__src, &v181, (uint64_t)v180, (uint64_t)v172);
  outlined release of PinchFrameFeatures((uint64_t *)__dst);
  v46 = *(_QWORD *)&__src[0];
  v47 = BYTE8(__src[0]);
  v48 = BYTE9(__src[0]);
  v49 = BYTE10(__src[0]);
  v50 = *(_QWORD *)&__src[1];
  v159 = BYTE8(__src[1]);
  v51 = BYTE8(__src[2]);
  v53 = *((_QWORD *)&__src[3] + 1);
  v52 = *(_QWORD *)&__src[3];
  v54 = *(_QWORD *)&__src[4];
  v55 = DWORD2(__src[4]);
  v56 = *(_QWORD *)&__src[5];
  v57 = *(_QWORD *)&__src[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v106 = v50;
  v107 = v57;
  v103 = v48;
  v104 = v49;
  v101 = v47;
  if ((v155 ^ v168) != 1)
  {
    v66 = HIDWORD(v137);
    LODWORD(v67) = v137;
    v62 = HIDWORD(v46);
    v60 = HIDWORD(v54);
    v59 = v53;
    v68 = v130;
    v70 = v128;
    v69 = v129;
    v71 = v127;
    v73 = v125;
    v72 = v126;
    v75 = v123;
    v74 = v124;
    v77 = v121;
    v76 = v122;
    v78 = v119;
    v79 = v118;
    v58 = v157;
    goto LABEL_113;
  }
  v58 = v157;
  if ((v170 & 1) != 0)
  {
    v66 = HIDWORD(v137);
    LODWORD(v67) = v137;
    v62 = HIDWORD(v46);
    v60 = HIDWORD(v54);
    v59 = v53;
    v68 = v130;
    v70 = v128;
    v69 = v129;
    v71 = v127;
    v73 = v125;
    v72 = v126;
    v75 = v123;
    v74 = v124;
    v77 = v121;
    v76 = v122;
    v78 = v119;
    v79 = v118;
LABEL_113:
    v81 = v116;
    v80 = v117;
    v82 = v115;
    v84 = v113;
    v83 = v114;
    v85 = v44;
    v63 = v98;
    v65 = v96;
    v64 = v95;
    goto LABEL_114;
  }
  *(_QWORD *)&v180[0] = v46;
  BYTE8(v180[0]) = v47;
  BYTE9(v180[0]) = v48;
  BYTE10(v180[0]) = v49;
  *(_QWORD *)&v180[1] = v50;
  BYTE8(v180[1]) = v159;
  *(_QWORD *)&v180[2] = v57;
  BYTE8(v180[2]) = v51;
  v180[3] = __PAIR128__(v53, v52);
  v59 = v53;
  v60 = HIDWORD(v54);
  *(_QWORD *)&v180[4] = v54;
  v61 = v55;
  v62 = HIDWORD(v46);
  DWORD2(v180[4]) = v61;
  *(_QWORD *)&v180[5] = v56;
  v63 = v98;
  swift_bridgeObjectRetain();
  v64 = v95;
  swift_bridgeObjectRetain();
  v65 = v96;
  swift_bridgeObjectRetain();
  specialized static LegacyPinchFilterAdapter.createLegacyHandTrace(_:_:_:_:_:_:_:)(v168, v167, v164, v166 | (v165 << 32), v158, v98, v95, v96, (uint64_t)v180);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v66 = HIDWORD(v137);
  LODWORD(v67) = v137;
  v68 = v130;
  v70 = v128;
  v69 = v129;
  v71 = v127;
  v73 = v125;
  v72 = v126;
  v75 = v123;
  v74 = v124;
  v77 = v121;
  v76 = v122;
  v78 = v119;
  v80 = v117;
  v79 = v118;
  v82 = v115;
  v81 = v116;
  v84 = v113;
  v83 = v114;
  v85 = v44;
LABEL_114:
  *(_QWORD *)&__src[9] = v69;
  *((_QWORD *)&__src[9] + 1) = v70;
  LOBYTE(__src[10]) = v71;
  *((_QWORD *)&__src[10] + 1) = v72;
  *(_QWORD *)&__src[11] = v73;
  *(_QWORD *)&__src[15] = v74;
  *((_QWORD *)&__src[15] + 1) = v75;
  *(_QWORD *)&__src[16] = v76;
  *((_QWORD *)&__src[16] + 1) = v77;
  *(_QWORD *)&__src[17] = v120;
  *((_QWORD *)&__src[17] + 1) = v78;
  *(_QWORD *)&__src[18] = v79;
  *((_QWORD *)&__src[18] + 1) = v80;
  *(_QWORD *)&__src[19] = v81;
  *((_QWORD *)&__src[19] + 1) = v82;
  if (v68)
    v86 = *((float *)&v131 + 1) >= (float)(1.0 - v67);
  else
    v86 = *(float *)&v131 < v67;
  *(_QWORD *)&__src[8] = v192;
  __src[7] = v191;
  __src[2] = v186;
  __src[3] = v187;
  __src[5] = v189;
  __src[6] = v190;
  __src[4] = v188;
  __src[0] = v184;
  __src[1] = v185;
  *((_QWORD *)&__src[8] + 1) = __PAIR64__(v66, LODWORD(v67));
  LOBYTE(__src[12]) = v168;
  BYTE1(__src[12]) = v153;
  *((_QWORD *)&__src[12] + 1) = v163;
  __src[13] = v156;
  *(_QWORD *)&__src[14] = v154;
  *(_QWORD *)&__src[20] = v92;
  *((_QWORD *)&__src[20] + 1) = v94;
  *(_QWORD *)&__src[21] = v91;
  *((_QWORD *)&__src[21] + 1) = v93;
  *(_QWORD *)&__src[22] = v90;
  *((_QWORD *)&__src[22] + 1) = __PAIR64__(v140, v45);
  *(_QWORD *)&__src[23] = __PAIR64__(LODWORD(v89), v97);
  BYTE8(__src[23]) = v86;
  *(_QWORD *)&__src[24] = v65;
  *((_QWORD *)&__src[24] + 1) = v63;
  *(_QWORD *)&__src[25] = v64;
  *((_QWORD *)&__src[25] + 1) = v141;
  __src[26] = v142;
  __src[27] = v143;
  *(_QWORD *)&__src[28] = v144;
  DWORD2(__src[28]) = v145;
  BYTE12(__src[28]) = v146;
  *(_QWORD *)&__src[29] = v160;
  BYTE8(__src[29]) = v147;
  BYTE9(__src[29]) = v148;
  BYTE10(__src[29]) = v149;
  BYTE11(__src[29]) = v150;
  *(_QWORD *)&__src[30] = v99;
  BYTE8(__src[30]) = v83;
  *(_QWORD *)&__src[31] = v100;
  BYTE8(__src[31]) = v84;
  *(_QWORD *)&__src[32] = v102;
  BYTE8(__src[32]) = v85;
  BYTE9(__src[32]) = v162;
  BYTE10(__src[32]) = v161;
  BYTE11(__src[32]) = v152;
  BYTE12(__src[32]) = v136;
  *(_QWORD *)&__src[33] = v105;
  *((_QWORD *)&__src[33] + 1) = v131;
  __src[34] = v196;
  __src[35] = v197;
  __src[38] = v200;
  __src[39] = v201;
  __src[36] = v198;
  __src[37] = v199;
  *(_QWORD *)&__src[43] = v205;
  __src[41] = v203;
  __src[42] = v204;
  __src[40] = v202;
  *(_QWORD *)&__src[44] = v111;
  *((_QWORD *)&__src[44] + 1) = __PAIR64__(v109, v110);
  *(_QWORD *)&__src[45] = v108;
  __src[46] = v139;
  *(_QWORD *)&__src[47] = v112;
  BYTE8(__src[47]) = v138;
  HIDWORD(__src[47]) = v132;
  LODWORD(__src[48]) = v135;
  BYTE4(__src[48]) = v133;
  BYTE5(__src[48]) = v134;
  memcpy(v172, __src, 0x306uLL);
  _s5Hands13PoseImageCropVSgWOi_(v172);
  outlined init with take of PinchFrameFeatures?(v169, (uint64_t)v180);
  outlined init with take of PinchFrameFeatures?((uint64_t)v172, v169);
  outlined retain of PinchFrameFeatures((uint64_t *)__src);
  outlined retain of PinchFrameFeatures?(v180, outlined consume of PinchFrameFeatures?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = (uint64_t)outlined release of PinchFrameFeatures((uint64_t *)__src);
  v175 = v159;
  *(_BYTE *)v58 = v168;
  *(_BYTE *)(v58 + 1) = v153;
  *(_DWORD *)(v58 + 2) = v178;
  *(_WORD *)(v58 + 6) = v179;
  *(_QWORD *)(v58 + 8) = v163;
  *(_OWORD *)(v58 + 16) = v156;
  *(_QWORD *)(v58 + 32) = v154;
  *(_BYTE *)(v58 + 40) = v86;
  *(_DWORD *)(v58 + 41) = v181;
  *(_DWORD *)(v58 + 44) = *(_DWORD *)((char *)&v181 + 3);
  *(_DWORD *)(v58 + 48) = HIDWORD(v54);
  *(_DWORD *)(v58 + 52) = v62;
  *(_BYTE *)(v58 + 56) = v101;
  *(_BYTE *)(v58 + 57) = v103;
  *(_BYTE *)(v58 + 58) = v104;
  *(_DWORD *)(v58 + 59) = v176;
  *(_BYTE *)(v58 + 63) = v177;
  *(_QWORD *)(v58 + 64) = v106;
  *(_BYTE *)(v58 + 72) = v175;
  *(_DWORD *)(v58 + 73) = *(_DWORD *)v174;
  *(_DWORD *)(v58 + 76) = *(_DWORD *)&v174[3];
  *(_QWORD *)(v58 + 80) = v107;
  *(_BYTE *)(v58 + 88) = v51;
  *(_DWORD *)(v58 + 89) = *(_DWORD *)v173;
  *(_DWORD *)(v58 + 92) = *(_DWORD *)&v173[3];
  *(_QWORD *)(v58 + 96) = v52;
  *(_DWORD *)(v58 + 104) = v59;
  *(_DWORD *)(v58 + 108) = HIDWORD(v53);
  *(_DWORD *)(v58 + 112) = v54;
  *(_DWORD *)(v58 + 116) = v60;
  *(_DWORD *)(v58 + 120) = v53;
  *(_QWORD *)(v58 + 128) = v56;
  return result;
}

float PinchGenerator.legacyPinchGenerationAdapter(_:_:_:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  int v8;
  float v9;
  uint64_t v10;
  char v11;
  int v12;
  int v13;
  int v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  int v27;
  char v28;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  _OWORD v34[3];

  v6 = *a2;
  v7 = a2[1];
  v9 = *(float *)(a3 + 136);
  v8 = *(_DWORD *)(a3 + 140);
  v10 = *(_QWORD *)(a3 + 144);
  v11 = *(_BYTE *)(a3 + 192);
  v12 = *(_DWORD *)(a3 + 428);
  v13 = *(_DWORD *)(a3 + 436);
  v14 = *(_DWORD *)(a3 + 440);
  v15 = *(float *)(a4 + 8);
  v16 = *(float *)(a4 + 12);
  v17 = *(_QWORD *)(v4 + 800);
  v32 = *(_DWORD *)(a3 + 456);
  v30 = *a2;
  v31 = v7;
  if (*(_QWORD *)(v17 + 16) < 2uLL)
  {
    v18 = 0;
    goto LABEL_9;
  }
  outlined init with copy of Detection2DComputePipelineProtocol(v17 + 72, (uint64_t)v34);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchAlgorithmUnit);
  type metadata accessor for MakeBreakRejectorUnsure();
  if ((swift_dynamicCast() & 1) == 0)
  {
    v18 = 0;
    v6 = v30;
    v7 = v31;
LABEL_9:
    v20 = 0.0;
    v19 = 1;
    if ((v7 & 4) == 0)
      goto LABEL_27;
    if (v15 >= v9)
      goto LABEL_14;
    goto LABEL_11;
  }
  v18 = *(_QWORD *)(v33 + 40);
  v19 = *(unsigned __int8 *)(v33 + 48);
  v20 = *(float *)(v33 + 52);
  swift_release();
  v7 = v31;
  if ((v31 & 4) != 0)
  {
    v6 = v30;
    if (v15 >= v9)
    {
LABEL_14:
      v21 = 1.0;
      v22 = 1.0 - v9;
      v20 = 0.0;
      goto LABEL_15;
    }
LABEL_11:
    v20 = 0.0;
    if (v15 >= 0.0)
      goto LABEL_27;
    v21 = 1.0;
    v22 = 1.0 - v9;
LABEL_15:
    if (v16 >= v21)
      v23 = v18;
    else
      v23 = 0;
    if (v16 < v21)
      v24 = 1;
    else
      v24 = v19;
    if (v16 < v22)
      v18 = v23;
    else
      v18 = 0;
    if (v16 < v22)
      v19 = v24;
    else
      v19 = 1;
    goto LABEL_27;
  }
  if (v15 >= v9 || v20 > v15)
  {
    v6 = v30;
    if (v16 >= (float)(1.0 - v9))
    {
      v18 = 0;
      v19 = 1;
    }
    else if ((float)(1.0 - v20) > v16)
    {
      v18 = 0;
      v19 = 1;
    }
  }
  else
  {
    v6 = v30;
  }
LABEL_27:
  v25 = *(_QWORD *)(v4 + 800);
  if (*(_QWORD *)(v25 + 16) <= 2uLL)
  {
    v26 = &outlined read-only object #0 of PinchGenerator.legacyPinchGenerationAdapter(_:_:_:);
  }
  else
  {
    outlined init with copy of Detection2DComputePipelineProtocol(v25 + 112, (uint64_t)v34);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchAlgorithmUnit);
    type metadata accessor for MakeRejectorObjectInHand();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v26 = *(void **)(v33 + 24);
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      v26 = &outlined read-only object #0 of PinchGenerator.legacyPinchGenerationAdapter(_:_:_:);
    }
    v6 = v30;
    v7 = v31;
  }
  v27 = v19 | ((v7 & 4) >> 2);
  if ((v7 & 4) != 0)
    v18 = 2;
  v34[0] = v6;
  v34[1] = v7;
  v28 = specialized static LegacyPinchFilterAdapter.getLegacyPinchFilterPinchDown(_:_:)(v11, (uint64_t *)v34);
  *(float *)a1 = v20;
  *(float *)(a1 + 4) = v9;
  *(_BYTE *)(a1 + 8) = v28 & 1;
  *(_WORD *)(a1 + 9) = 0;
  *(_QWORD *)(a1 + 16) = v18;
  *(_BYTE *)(a1 + 24) = v27 & 1;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = v26;
  *(_DWORD *)(a1 + 56) = v8;
  *(_DWORD *)(a1 + 60) = v12;
  *(_DWORD *)(a1 + 64) = v13;
  *(_DWORD *)(a1 + 68) = v32;
  *(_DWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 80) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  return v20;
}

void PinchGenerator.oisCoreAnalyticsHandleExitReason(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  __n128 v16;
  _QWORD aBlock[6];
  uint64_t v18[97];
  char v19;
  char v20;
  char v21;
  _OWORD v22[8];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  char v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char v81;
  int v82;
  int v83;
  char v84;
  char v85;
  _BYTE v86[784];
  _OWORD v87[8];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  __int128 v93;
  char v94;
  char v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  char v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  int v113;
  char v114;
  uint64_t v115;
  char v116;
  char v117;
  char v118;
  char v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  char v146;
  int v147;
  int v148;
  char v149;
  char v150;
  _BYTE v151[784];
  _BYTE v152[496];
  uint64_t v153;

  v3 = MEMORY[0x24BDAC7A8](a1, a2);
  outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v151);
  outlined init with take of PinchFrameFeatures?((uint64_t)v151, (uint64_t)v152);
  if (_s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v152) == 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v153 && *(_QWORD *)(v3 + 16))
  {
    v15 = *(_QWORD *)(v3 + 128);
    v16 = *(__n128 *)(v3 + 48);
    outlined init with take of PinchFrameFeatures?((uint64_t)v151, (uint64_t)v87);
    outlined init with take of PinchFrameFeatures?((uint64_t)v151, (uint64_t)v18);
    v22[6] = v87[6];
    v22[7] = v87[7];
    v23 = v88;
    v22[2] = v87[2];
    v22[3] = v87[3];
    v22[4] = v87[4];
    v22[5] = v87[5];
    v22[0] = v87[0];
    v22[1] = v87[1];
    v21 = v121;
    v20 = v123;
    v19 = v125;
    v73 = v138;
    v74 = v139;
    v75 = v140;
    v69 = v134;
    v70 = v135;
    v72 = v137;
    v71 = v136;
    v65 = v130;
    v66 = v131;
    v68 = v133;
    v67 = v132;
    v24 = v89;
    v25 = v90;
    v26 = v91;
    v27 = v92;
    v28 = v93;
    v29 = v94;
    v30 = v95;
    v31 = v96;
    v32 = v97;
    v33 = v98;
    v34 = v99;
    v35 = v100;
    v36 = v101;
    v37 = v102;
    v38 = v103;
    v39 = v104;
    v40 = v105;
    v41 = v106;
    v42 = v107;
    v43 = v108;
    v44 = v109;
    v45 = v110;
    v46 = v111;
    v14 = DWORD1(v112);
    v47 = v112;
    v48 = v113;
    v49 = v114;
    v50 = v115;
    v51 = v116;
    v52 = v117;
    v53 = v118;
    v54 = v119;
    v55 = v120;
    v56 = v121;
    v57 = v122;
    v58 = v123;
    v59 = v124;
    v60 = v125;
    v61 = v126;
    v62 = v127;
    v63 = v128;
    v64 = v129;
    v76 = v141;
    v77 = v142;
    v78 = v143;
    v79 = v144;
    v80 = v145;
    v81 = v146;
    v82 = v147;
    v83 = v148;
    v84 = v149;
    v85 = v150;
    outlined retain of PinchFrameFeatures(v18);
    outlined release of PinchFrameFeatures((uint64_t *)v22);
    outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v86);
    outlined init with take of PinchFrameFeatures?((uint64_t)v86, (uint64_t)v87);
    if (_s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v87) != 1)
    {
      v4 = v122;
      if (v123 == 1)
        v4 = qword_23D9AD758[v122];
      v5 = *(_QWORD *)(v2 + 840);
      if (v5)
      {
        *(_BYTE *)(v5 + 16) = BYTE1(v15) & 1;
        *(_QWORD *)(v5 + 24) = specialized static StatisticUtils.Location3DBucket.resolve(handCenter:)(v16);
        *(_QWORD *)(v5 + 32) = v6;
        *(_QWORD *)(v5 + 40) = v7;
        *(_BYTE *)(v5 + 48) = v8 & 1;
        *(_DWORD *)(v5 + 52) = v14;
        *(_QWORD *)(v5 + 56) = v4;
        v9 = *(_QWORD *)(v2 + 840);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 64);
          v11 = *(_QWORD *)(v9 + 72);
          swift_retain();
          v12 = (void *)MEMORY[0x2426372E8](v10, v11);
          aBlock[4] = partial apply for closure #1 in OISExitReasonAnalytics.sendCoreAnalytics();
          aBlock[5] = v9;
          aBlock[0] = MEMORY[0x24BDAC760];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
          aBlock[3] = &block_descriptor_10_0;
          v13 = _Block_copy(aBlock);
          swift_retain();
          swift_release();
          AnalyticsSendEventLazy();
          _Block_release(v13);
          swift_release();

          return;
        }
LABEL_14:
        __break(1u);
        return;
      }
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t PinchGenerator.oisCoreAnalyticsHandlePinchRejection(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  Swift::Int suppressedFrames;
  Swift::Int pinchEventType;
  Swift::Float pinchDuration;
  Swift::Float pinchMovement;
  void *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[98];
  _OWORD v72[8];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  _BYTE v79[333];
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char v100;
  int v101;
  int v102;
  char v103;
  char v104;
  _OWORD v105[8];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  __int128 v111;
  _BYTE v112[333];
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  char v133;
  int v134;
  int v135;
  char v136;
  char v137;
  _BYTE v138[784];
  _QWORD v139[97];
  char v140;
  char v141;
  char v142;
  _OWORD v143[8];
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  __int128 v149;
  char v150;
  char v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  char v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  int v176;
  char v177;
  uint64_t v178;
  char v179;
  char v180;
  char v181;
  char v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  char v189;
  char v190;
  char v191;
  char v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  char v209;
  int v210;
  int v211;
  char v212;
  char v213;
  _OWORD v214[8];
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  __int128 v220;
  char v221;
  char v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  char v241;
  __int128 v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  int v247;
  char v248;
  uint64_t v249;
  char v250;
  char v251;
  char v252;
  char v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  char v259;
  char v260;
  char v261;
  char v262;
  char v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  char v280;
  int v281;
  int v282;
  char v283;
  char v284;
  _BYTE v285[784];
  _BYTE v286[800];
  Hands::ObjectAnalyticsData v287;

  v68 = MEMORY[0x24BDAC7A8](a1, a2);
  v70 = type metadata accessor for HandDescriptor();
  v4 = MEMORY[0x24BDAC7A8](v70, v3);
  v60 = (uint64_t)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4, v6);
  v61 = (uint64_t)&v49 - v7;
  v69 = v2;
  *(_QWORD *)&v59 = v2 + 16;
  outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v285);
  outlined init with take of PinchFrameFeatures?((uint64_t)v285, (uint64_t)v214);
  outlined init with take of PinchFrameFeatures?((uint64_t)v285, (uint64_t)v286);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v286);
  if ((_DWORD)result == 1)
    goto LABEL_24;
  v9 = v225;
  v10 = v226;
  v11 = v227;
  v12 = v228;
  v13 = v229;
  v14 = v230;
  v15 = v232;
  v144 = v215;
  v142 = v255;
  v141 = v257;
  v140 = v259;
  v203 = v274;
  v146 = v217;
  v66 = v234;
  v67 = v233;
  v147 = v218;
  v148 = v219;
  v150 = v221;
  v151 = v222;
  v170 = v241;
  v172 = v243;
  v169 = v240;
  v173 = v244;
  v174 = v245;
  v175 = v246;
  v177 = v248;
  v179 = v250;
  v180 = v251;
  v181 = v252;
  v182 = v253;
  v183 = v254;
  v184 = v255;
  v186 = v257;
  v188 = v259;
  v189 = v260;
  v190 = v261;
  v191 = v262;
  v192 = v263;
  v209 = v280;
  v212 = v283;
  v64 = v236;
  v65 = v235;
  v149 = v220;
  v152 = v223;
  v153 = v224;
  v213 = v284;
  v62 = v238;
  v63 = v237;
  v185 = v256;
  v187 = v258;
  v204 = v275;
  v206 = v277;
  v208 = v279;
  v16 = v239;
  v143[3] = v214[3];
  v143[2] = v214[2];
  v143[0] = v214[0];
  v143[1] = v214[1];
  v143[7] = v214[7];
  v143[6] = v214[6];
  v143[4] = v214[4];
  v143[5] = v214[5];
  v201 = v272;
  v202 = v273;
  v197 = v268;
  v198 = v269;
  v200 = v271;
  v199 = v270;
  v193 = v264;
  v194 = v265;
  v196 = v267;
  v195 = v266;
  v145 = v216;
  v154 = v225;
  v155 = v226;
  v156 = v227;
  v157 = v228;
  v158 = v229;
  v159 = v230;
  v17 = v231;
  v160 = v231;
  v161 = v232;
  v162 = v233;
  v163 = v234;
  v164 = v235;
  v165 = v236;
  v166 = v237;
  v167 = v238;
  v168 = v239;
  v171 = v242;
  v176 = v247;
  v178 = v249;
  v205 = v276;
  v207 = v278;
  v210 = v281;
  v211 = v282;
  outlined retain of PinchFrameFeatures?(v285, outlined copy of PinchFrameFeatures?);
  v53 = v16;
  v57 = v12;
  v58 = v11;
  v55 = v14;
  v56 = v13;
  v54 = v17;
  v52 = v15;
  outlined copy of HandPose?(v9);
  result = (uint64_t)outlined release of PinchFrameFeatures((uint64_t *)v143);
  v18 = v68;
  v19 = v70;
  if (!v9)
    goto LABEL_7;
  v50 = v9;
  v51 = v10;
  outlined init with take of PinchFrameFeatures?(v59, (uint64_t)v138);
  outlined init with take of PinchFrameFeatures?((uint64_t)v138, (uint64_t)v105);
  outlined init with take of PinchFrameFeatures?((uint64_t)v138, (uint64_t)v139);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v139);
  if ((_DWORD)result == 1)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  outlined init with take of PinchFrameFeatures?((uint64_t)v138, (uint64_t)v71);
  v20 = v116;
  v21 = v117;
  v22 = v118;
  v23 = v119;
  v72[6] = v105[6];
  v72[7] = v105[7];
  v73 = v106;
  v72[2] = v105[2];
  v72[3] = v105[3];
  v72[5] = v105[5];
  v72[4] = v105[4];
  v72[0] = v105[0];
  v72[1] = v105[1];
  memcpy(v79, v112, sizeof(v79));
  v74 = v107;
  v75 = v108;
  v76 = v109;
  v77 = v110;
  v78 = v111;
  v80 = v113;
  v81 = v114;
  v82 = v115;
  v83 = v116;
  v84 = v117;
  v85 = v118;
  v86 = v119;
  v87 = v120;
  v88 = v121;
  v89 = v122;
  v90 = v123;
  v91 = v124;
  v92 = v125;
  v93 = v126;
  v94 = v127;
  v95 = v128;
  v96 = v129;
  v97 = v130;
  v98 = v131;
  v99 = v132;
  v100 = v133;
  v101 = v134;
  v102 = v135;
  v103 = v136;
  v104 = v137;
  outlined retain of PinchFrameFeatures(v71);
  result = (uint64_t)outlined release of PinchFrameFeatures((uint64_t *)v72);
  if (*(_QWORD *)(v51 + 16) < 7uLL)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v59 = *(_OWORD *)(v51 + 240);
  result = outlined consume of HandPose?(v50);
  v18 = v68;
  v24 = *(_QWORD *)(v69 + 824);
  v19 = v70;
  if (!v24)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  *(_QWORD *)(v24 + 160) = v20;
  *(_DWORD *)(v24 + 168) = v21;
  *(_DWORD *)(v24 + 172) = v22;
  *(_QWORD *)(v24 + 176) = v23;
  *(_OWORD *)(v24 + 192) = v59;
LABEL_7:
  v25 = v69;
  if (!*(_QWORD *)(v69 + 824))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v26 = *MEMORY[0x24BDC0D88];
  v27 = *(unsigned int *)(MEMORY[0x24BDC0D88] + 8);
  v28 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 16);
  v68 = *(unsigned int *)(MEMORY[0x24BDC0D88] + 12);
  v29 = static CMTime.== infix(_:_:)();
  v30 = v61;
  outlined init with copy of TrackingUpdateDataPB(v18, v61, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if ((v29 & 1) != 0)
  {
    v31 = *(_BYTE *)(v30 + *(int *)(v19 + 152) + 3);
    result = outlined destroy of Matrix3x3PB(v30, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if ((v31 & 1) != 0)
    {
      v32 = *(_QWORD *)(v25 + 824);
      if (!v32)
      {
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        return result;
      }
      v33 = *(_QWORD *)(v32 + 176);
      *(_QWORD *)(v32 + 120) = *(_QWORD *)(v32 + 160);
      *(_QWORD *)(v32 + 128) = *(_QWORD *)(v32 + 168);
      *(_QWORD *)(v32 + 136) = v33;
      *(_OWORD *)(v32 + 144) = *(_OWORD *)(v32 + 192);
    }
  }
  else
  {
    result = outlined destroy of Matrix3x3PB(v30, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  }
  if (*(_BYTE *)(v18 + *(int *)(v19 + 152) + 50) == 1)
  {
    v67 = v27;
    v34 = *(_QWORD **)(v25 + 824);
    if (!v34)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v35 = *(_BYTE *)(v18 + 136);
    swift_retain();
    v287 = ObjectCoreAnalytics.getCoreAnalyticsDataOIS(_:)(Hands_PinchEventType_PinchMakeRejectedByOIS);
    v27 = v18;
    suppressedFrames = v287.suppressedFrames;
    pinchEventType = v287.pinchEventType;
    pinchDuration = v287.pinchDuration;
    pinchMovement = v287.pinchMovement;
    v40 = (void *)MEMORY[0x2426372E8](v34[2], v34[3]);
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = v34;
    *(_BYTE *)(v41 + 24) = v35;
    *(_QWORD *)(v41 + 32) = suppressedFrames;
    *(_QWORD *)(v41 + 40) = pinchEventType;
    *(Swift::Float *)(v41 + 48) = pinchDuration;
    *(Swift::Float *)(v41 + 52) = pinchMovement;
    v139[4] = partial apply for closure #1 in ObjectCoreAnalytics.sendCoreAnalyticsDataOIS(_:_:);
    v139[5] = v41;
    v139[0] = MEMORY[0x24BDAC760];
    v139[1] = 1107296256;
    v139[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    v139[3] = &block_descriptor_7_0;
    v42 = _Block_copy(v139);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    v43 = v42;
    v18 = v27;
    _Block_release(v43);

    v34[14] = 0;
    v34[27] = MEMORY[0x24BEE4AF8];
    swift_release();
    result = swift_bridgeObjectRelease();
    v25 = v69;
    v19 = v70;
    LODWORD(v27) = v67;
  }
  if (!*(_QWORD *)(v25 + 824))
    goto LABEL_26;
  v44 = static CMTime.!= infix(_:_:)();
  v45 = v60;
  outlined init with copy of TrackingUpdateDataPB(v18, v60, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if ((v44 & 1) == 0)
    return outlined destroy of Matrix3x3PB(v45, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v46 = *(_BYTE *)(v45 + *(int *)(v19 + 152) + 3);
  result = outlined destroy of Matrix3x3PB(v45, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if ((v46 & 1) == 0)
  {
    v47 = *(_QWORD *)(v25 + 824);
    if (v47)
    {
      *(_QWORD *)(v47 + 120) = v26;
      v48 = v68;
      *(_DWORD *)(v47 + 128) = v27;
      *(_DWORD *)(v47 + 132) = v48;
      *(_QWORD *)(v47 + 136) = v28;
      *(_OWORD *)(v47 + 144) = 0u;
      return result;
    }
    goto LABEL_31;
  }
  return result;
}

uint64_t PinchGenerator.oisCoreAnalyticsHandlePinchCancellation(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  char v45;
  Swift::Int suppressedFrames;
  Swift::Int pinchEventType;
  Swift::Float pinchDuration;
  Swift::Float pinchMovement;
  void *v50;
  uint64_t v51;
  void *v52;
  const void *v53;
  char v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[98];
  _OWORD v82[8];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  __int128 v88;
  _BYTE v89[333];
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  char v110;
  int v111;
  int v112;
  char v113;
  char v114;
  _OWORD v115[8];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  __int128 v121;
  _BYTE v122[333];
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  char v143;
  int v144;
  int v145;
  char v146;
  char v147;
  _BYTE v148[784];
  _QWORD v149[97];
  char v150;
  char v151;
  char v152;
  _OWORD v153[8];
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  __int128 v159;
  char v160;
  char v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  char v180;
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  int v186;
  char v187;
  uint64_t v188;
  char v189;
  char v190;
  char v191;
  char v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  char v198;
  char v199;
  char v200;
  char v201;
  char v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  char v219;
  int v220;
  int v221;
  char v222;
  char v223;
  _OWORD v224[8];
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  __int128 v230;
  char v231;
  char v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  __int128 v250;
  char v251;
  __int128 v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  int v257;
  char v258;
  uint64_t v259;
  char v260;
  char v261;
  char v262;
  char v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  char v267;
  uint64_t v268;
  char v269;
  char v270;
  char v271;
  char v272;
  char v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  __int128 v288;
  uint64_t v289;
  char v290;
  int v291;
  int v292;
  char v293;
  char v294;
  _BYTE v295[784];
  _BYTE v296[800];
  Hands::ObjectAnalyticsData v297;

  v3 = MEMORY[0x24BDAC7A8](a1, a2);
  v79 = v4;
  v5 = v3;
  v6 = type metadata accessor for HandDescriptor();
  v8 = MEMORY[0x24BDAC7A8](v6, v7);
  v78 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8, v10);
  v60 = (uint64_t)&v57 - v12;
  MEMORY[0x24BDAC7A8](v11, v13);
  v71 = (uint64_t)&v57 - v14;
  v59 = *(_QWORD *)(v5 + 8);
  v70 = *(unsigned __int8 *)(v5 + 32);
  v80 = v2;
  *(_QWORD *)&v69 = v2 + 16;
  outlined init with take of PinchFrameFeatures?(v2 + 16, (uint64_t)v295);
  outlined init with take of PinchFrameFeatures?((uint64_t)v295, (uint64_t)v224);
  outlined init with take of PinchFrameFeatures?((uint64_t)v295, (uint64_t)v296);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v296);
  if ((_DWORD)result == 1)
    goto LABEL_29;
  v16 = v235;
  v17 = v236;
  v18 = v237;
  v19 = v238;
  v20 = v239;
  v21 = v240;
  v22 = v242;
  v154 = v225;
  v152 = v265;
  v151 = v267;
  v150 = v269;
  v213 = v284;
  v156 = v227;
  v76 = v244;
  v77 = v243;
  v157 = v228;
  v158 = v229;
  v160 = v231;
  v161 = v232;
  v180 = v251;
  v182 = v253;
  v179 = v250;
  v183 = v254;
  v184 = v255;
  v185 = v256;
  v187 = v258;
  v189 = v260;
  v190 = v261;
  v191 = v262;
  v192 = v263;
  v193 = v264;
  v194 = v265;
  v196 = v267;
  v198 = v269;
  v199 = v270;
  v200 = v271;
  v201 = v272;
  v202 = v273;
  v219 = v290;
  v222 = v293;
  v74 = v246;
  v75 = v245;
  v159 = v230;
  v162 = v233;
  v163 = v234;
  v223 = v294;
  v72 = v248;
  v73 = v247;
  v195 = v266;
  v197 = v268;
  v214 = v285;
  v216 = v287;
  v218 = v289;
  v23 = v249;
  v153[3] = v224[3];
  v153[2] = v224[2];
  v153[0] = v224[0];
  v153[1] = v224[1];
  v153[7] = v224[7];
  v153[6] = v224[6];
  v153[4] = v224[4];
  v153[5] = v224[5];
  v211 = v282;
  v212 = v283;
  v207 = v278;
  v208 = v279;
  v210 = v281;
  v209 = v280;
  v203 = v274;
  v204 = v275;
  v206 = v277;
  v205 = v276;
  v155 = v226;
  v164 = v235;
  v165 = v236;
  v166 = v237;
  v167 = v238;
  v168 = v239;
  v169 = v240;
  v24 = v241;
  v170 = v241;
  v171 = v242;
  v172 = v243;
  v173 = v244;
  v174 = v245;
  v175 = v246;
  v176 = v247;
  v177 = v248;
  v178 = v249;
  v181 = v252;
  v186 = v257;
  v188 = v259;
  v215 = v286;
  v217 = v288;
  v220 = v291;
  v221 = v292;
  outlined retain of PinchFrameFeatures?(v295, outlined copy of PinchFrameFeatures?);
  v62 = v23;
  v67 = v18;
  v68 = v17;
  v65 = v20;
  v66 = v19;
  v61 = v21;
  v63 = v22;
  v64 = v24;
  outlined copy of HandPose?(v16);
  result = (uint64_t)outlined release of PinchFrameFeatures((uint64_t *)v153);
  v26 = (uint64_t)v78;
  v25 = v79;
  v27 = v80;
  if (!v16)
    goto LABEL_7;
  v58 = v16;
  outlined init with take of PinchFrameFeatures?(v69, (uint64_t)v148);
  outlined init with take of PinchFrameFeatures?((uint64_t)v148, (uint64_t)v115);
  outlined init with take of PinchFrameFeatures?((uint64_t)v148, (uint64_t)v149);
  result = _s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v149);
  if ((_DWORD)result == 1)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  outlined init with take of PinchFrameFeatures?((uint64_t)v148, (uint64_t)v81);
  v28 = v126;
  v29 = v127;
  v30 = v128;
  v31 = v129;
  v82[6] = v115[6];
  v82[7] = v115[7];
  v83 = v116;
  v82[3] = v115[3];
  v82[5] = v115[5];
  v82[4] = v115[4];
  v82[1] = v115[1];
  v82[2] = v115[2];
  v82[0] = v115[0];
  memcpy(v89, v122, sizeof(v89));
  v84 = v117;
  v85 = v118;
  v86 = v119;
  v87 = v120;
  v88 = v121;
  v90 = v123;
  v91 = v124;
  v92 = v125;
  v93 = v126;
  v94 = v127;
  v95 = v128;
  v96 = v129;
  v97 = v130;
  v98 = v131;
  v99 = v132;
  v100 = v133;
  v101 = v134;
  v102 = v135;
  v103 = v136;
  v104 = v137;
  v105 = v138;
  v106 = v139;
  v107 = v140;
  v108 = v141;
  v109 = v142;
  v110 = v143;
  v111 = v144;
  v112 = v145;
  v113 = v146;
  v114 = v147;
  outlined retain of PinchFrameFeatures(v81);
  result = (uint64_t)outlined release of PinchFrameFeatures((uint64_t *)v82);
  if (*(_QWORD *)(v68 + 16) < 7uLL)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v69 = *(_OWORD *)(v68 + 240);
  result = outlined consume of HandPose?(v58);
  v25 = v79;
  v27 = v80;
  v32 = *(_QWORD *)(v80 + 832);
  v26 = (uint64_t)v78;
  if (!v32)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  *(_QWORD *)(v32 + 160) = v28;
  *(_DWORD *)(v32 + 168) = v29;
  *(_DWORD *)(v32 + 172) = v30;
  *(_QWORD *)(v32 + 176) = v31;
  *(_OWORD *)(v32 + 192) = v69;
LABEL_7:
  if (!*(_QWORD *)(v27 + 832))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v33 = *MEMORY[0x24BDC0D88];
  v34 = *(_DWORD *)(MEMORY[0x24BDC0D88] + 12);
  v35 = *(_QWORD *)(MEMORY[0x24BDC0D88] + 16);
  v77 = *(unsigned int *)(MEMORY[0x24BDC0D88] + 8);
  v36 = static CMTime.== infix(_:_:)();
  v37 = v71;
  outlined init with copy of TrackingUpdateDataPB(v25, v71, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if ((v36 & 1) != 0)
  {
    v38 = *(_BYTE *)(v37 + 4);
    result = outlined destroy of Matrix3x3PB(v37, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if ((v38 & 1) != 0)
    {
      v39 = *(_QWORD *)(v27 + 832);
      if (!v39)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      v40 = *(_QWORD *)(v39 + 176);
      *(_QWORD *)(v39 + 120) = *(_QWORD *)(v39 + 160);
      *(_QWORD *)(v39 + 128) = *(_QWORD *)(v39 + 168);
      *(_QWORD *)(v39 + 136) = v40;
      *(_OWORD *)(v39 + 144) = *(_OWORD *)(v39 + 192);
    }
    if ((v70 & 1) != 0)
      return result;
  }
  else
  {
    result = outlined destroy of Matrix3x3PB(v37, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if ((v70 & 1) != 0)
      return result;
  }
  v41 = v60;
  outlined init with copy of TrackingUpdateDataPB(v25, v60, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if ((v59 & 0x40) != 0)
  {
    v42 = v41;
    v43 = *(_BYTE *)(v41 + 137);
    result = outlined destroy of Matrix3x3PB(v42, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    if ((v43 & 1) != 0)
    {
      v44 = *(_QWORD **)(v27 + 832);
      if (!v44)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        return result;
      }
      v45 = *(_BYTE *)(v25 + 136);
      swift_retain();
      v297 = ObjectCoreAnalytics.getCoreAnalyticsDataOIS(_:)(Hands_PinchEventType_PinchCancelByOIS);
      suppressedFrames = v297.suppressedFrames;
      pinchEventType = v297.pinchEventType;
      pinchDuration = v297.pinchDuration;
      pinchMovement = v297.pinchMovement;
      v50 = (void *)MEMORY[0x2426372E8](v44[2], v44[3]);
      v51 = swift_allocObject();
      *(_QWORD *)(v51 + 16) = v44;
      *(_BYTE *)(v51 + 24) = v45;
      *(_QWORD *)(v51 + 32) = suppressedFrames;
      *(_QWORD *)(v51 + 40) = pinchEventType;
      *(Swift::Float *)(v51 + 48) = pinchDuration;
      *(Swift::Float *)(v51 + 52) = pinchMovement;
      v149[4] = partial apply for closure #1 in ObjectCoreAnalytics.sendCoreAnalyticsDataOIS(_:_:);
      v149[5] = v51;
      v149[0] = MEMORY[0x24BDAC760];
      v149[1] = 1107296256;
      v149[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
      v149[3] = &block_descriptor_6;
      v52 = _Block_copy(v149);
      swift_retain();
      swift_release();
      AnalyticsSendEventLazy();
      v53 = v52;
      v25 = v79;
      _Block_release(v53);

      v44[14] = 0;
      v44[27] = MEMORY[0x24BEE4AF8];
      swift_release();
      result = swift_bridgeObjectRelease();
      v27 = v80;
      v26 = (uint64_t)v78;
    }
  }
  else
  {
    result = outlined destroy of Matrix3x3PB(v41, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  }
  if (!*(_QWORD *)(v27 + 832))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v54 = static CMTime.!= infix(_:_:)();
  outlined init with copy of TrackingUpdateDataPB(v25, v26, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if ((v54 & 1) == 0)
    return outlined destroy of Matrix3x3PB(v26, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  v55 = *(unsigned __int8 *)(v26 + 4);
  result = outlined destroy of Matrix3x3PB(v26, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  if (v55 != 2 && (v55 & 1) == 0)
  {
    v56 = *(_QWORD *)(v27 + 832);
    if (v56)
    {
      *(_QWORD *)(v56 + 120) = v33;
      *(_DWORD *)(v56 + 128) = v77;
      *(_DWORD *)(v56 + 132) = v34;
      *(_QWORD *)(v56 + 136) = v35;
      *(_OWORD *)(v56 + 144) = 0u;
      return result;
    }
    goto LABEL_36;
  }
  return result;
}

uint64_t PinchGenerator.oihCoreAnalyticsHandling(_:_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (*(_BYTE *)(v1 + 809) == 1)
  {
    v2 = *(_QWORD *)(v1 + 816);
    if ((*(_BYTE *)result & 2) == 0
      || ((*(_QWORD *)(result + 16) & 2) == 0 ? (v3 = (*(_QWORD *)(result + 16) & 0x20) == 0) : (v3 = 1), v3))
    {
      if (v2 && *(uint64_t *)(v2 + 112) >= 1)
      {
        swift_retain();
        ObjectCoreAnalytics.sendCoreAnalyticsDataOIH()();
        return swift_release();
      }
    }
    else if (v2)
    {
      v4 = *(_QWORD *)(v2 + 112);
      v5 = __OFADD__(v4, 1);
      v6 = v4 + 1;
      if (v5)
        __break(1u);
      else
        *(_QWORD *)(v2 + 112) = v6;
    }
  }
  return result;
}

Swift::Void __swiftcall PinchGenerator.oisClearInternalStates()()
{
  uint64_t v0;
  int v1;
  _BYTE v2[784];
  _BYTE v3[784];
  uint64_t v4[97];
  char v5;
  char v6;
  char v7;
  _OWORD v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  char v35;
  uint64_t v36;
  unsigned __int8 v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  int v68;
  int v69;
  char v70;
  char v71;
  _OWORD v72[8];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  char v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  char v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int v98;
  char v99;
  uint64_t v100;
  unsigned __int8 v101;
  char v102;
  char v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  char v131;
  int v132;
  int v133;
  char v134;
  char v135;
  _BYTE v136[784];
  _BYTE v137[800];

  ((void (*)())MEMORY[0x24BDAC7A8])();
  outlined init with take of PinchFrameFeatures?(v0 + 16, (uint64_t)v136);
  outlined init with take of PinchFrameFeatures?((uint64_t)v136, (uint64_t)v72);
  outlined init with take of PinchFrameFeatures?((uint64_t)v136, (uint64_t)v137);
  if (_s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v137) == 1)
  {
    __break(1u);
    goto LABEL_8;
  }
  outlined init with take of PinchFrameFeatures?((uint64_t)v136, (uint64_t)v4);
  v1 = v101;
  v8[6] = v72[6];
  v8[7] = v72[7];
  v9 = v73;
  v8[2] = v72[2];
  v8[3] = v72[3];
  v8[5] = v72[5];
  v8[4] = v72[4];
  v8[1] = v72[1];
  v8[0] = v72[0];
  v7 = v106;
  v6 = v108;
  v5 = v110;
  v59 = v123;
  v60 = v124;
  v61 = v125;
  v55 = v119;
  v56 = v120;
  v58 = v122;
  v57 = v121;
  v51 = v115;
  v52 = v116;
  v54 = v118;
  v53 = v117;
  v10 = v74;
  v11 = v75;
  v12 = v76;
  v13 = v77;
  v14 = v78;
  v15 = v79;
  v16 = v80;
  v17 = v81;
  v18 = v82;
  v19 = v83;
  v20 = v84;
  v21 = v85;
  v22 = v86;
  v23 = v87;
  v24 = v88;
  v25 = v89;
  v26 = v90;
  v27 = v91;
  v28 = v92;
  v29 = v93;
  v30 = v94;
  v31 = v95;
  v32 = v96;
  v33 = v97;
  v34 = v98;
  v35 = v99;
  v36 = v100;
  v37 = v101;
  v38 = v102;
  v39 = v103;
  v40 = v104;
  v41 = v105;
  v42 = v106;
  v43 = v107;
  v44 = v108;
  v45 = v109;
  v46 = v110;
  v47 = v111;
  v48 = v112;
  v49 = v113;
  v50 = v114;
  v62 = v126;
  v63 = v127;
  v64 = v128;
  v65 = v129;
  v66 = v130;
  v67 = v131;
  v68 = v132;
  v69 = v133;
  v70 = v134;
  v71 = v135;
  outlined retain of PinchFrameFeatures(v4);
  outlined release of PinchFrameFeatures((uint64_t *)v8);
  if (v1 != 2 && (v1 & 1) == 0)
  {
    outlined init with take of PinchFrameFeatures?(v0 + 16, (uint64_t)v2);
    outlined init with take of PinchFrameFeatures?((uint64_t)v2, (uint64_t)v3);
    if (_s5Hands18PinchFrameFeaturesVSgWOg((uint64_t)v3) != 1)
    {
      *(_DWORD *)(v0 + 488) = 2;
      *(_QWORD *)(v0 + 496) = 0;
      *(_BYTE *)(v0 + 504) = 1;
      *(_QWORD *)(v0 + 512) = 0;
      *(_BYTE *)(v0 + 520) = 1;
      *(_QWORD *)(v0 + 528) = 0;
      *(_BYTE *)(v0 + 536) = 1;
      *(_DWORD *)(v0 + 537) = 0;
      return;
    }
LABEL_8:
    __break(1u);
  }
}

uint64_t PinchGenerator.deinit()
{
  uint64_t v0;
  _BYTE v2[784];

  outlined init with take of PinchFrameFeatures?(v0 + 16, (uint64_t)v2);
  outlined retain of PinchFrameFeatures?(v2, outlined consume of PinchFrameFeatures?);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t PinchGenerator.__deallocating_deinit()
{
  PinchGenerator.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PinchGenerator()
{
  return objc_opt_self();
}

uint64_t *outlined release of PinchFrameFeatures(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[30];
  v6 = a1[83];
  v7 = a1[82];
  v4 = a1[85];
  v5 = a1[84];
  outlined consume of HandPose?(*a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of HandPose?(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ObjectInteractionResultsByHand?(v7, v6, v5, v4);
  return a1;
}

uint64_t outlined copy of PinchFrameFeatures?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a19)
  {
    v34 = STACK[0x398];
    v32 = STACK[0x388];
    v33 = STACK[0x390];
    v31 = STACK[0x380];
    outlined copy of HandPose?(result);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of HandPose?(a31);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return outlined copy of ObjectInteractionResultsByHand?(v31, v32, v33, v34);
  }
  return result;
}

uint64_t sub_23D75F768()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

unint64_t partial apply for closure #1 in ObjectCoreAnalytics.sendCoreAnalyticsDataOIS(_:_:)()
{
  uint64_t v0;

  return closure #1 in ObjectCoreAnalytics.sendCoreAnalyticsDataOIS(_:_:)(*(_QWORD **)(v0 + 16));
}

unint64_t partial apply for closure #1 in OISExitReasonAnalytics.sendCoreAnalytics()()
{
  uint64_t v0;

  return closure #1 in OISExitReasonAnalytics.sendCoreAnalytics()(v0);
}

uint64_t specialized PinchGenerator.__allocating_init(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t BreakSourceAction;
  uint64_t v5;
  uint64_t BreakRejectorUnsure;
  id v7;
  uint64_t v8;
  uint64_t RejectorObjectInHand;
  id v10;
  uint64_t v11;
  uint64_t RejectorBreakSourceObjectInteractionState;
  id v13;
  uint64_t v14;
  uint64_t BreakSourceHomeUI;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  type metadata accessor for PinchFrameFeatureProcessor();
  swift_allocObject();
  v2 = specialized PinchFrameFeatureProcessor.init(_:)(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PinchAlgorithmUnit>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_23D9A8140;
  BreakSourceAction = type metadata accessor for MakeBreakSourceAction();
  v5 = swift_allocObject();
  *(_QWORD *)(v3 + 56) = BreakSourceAction;
  *(_QWORD *)(v3 + 64) = &protocol witness table for MakeBreakSourceAction;
  *(_QWORD *)(v3 + 32) = v5;
  BreakRejectorUnsure = type metadata accessor for MakeBreakRejectorUnsure();
  swift_allocObject();
  v7 = a1;
  v8 = specialized MakeBreakRejectorUnsure.init(_:)(v7);

  *(_QWORD *)(v3 + 96) = BreakRejectorUnsure;
  *(_QWORD *)(v3 + 104) = &protocol witness table for MakeBreakRejectorUnsure;
  *(_QWORD *)(v3 + 72) = v8;
  RejectorObjectInHand = type metadata accessor for MakeRejectorObjectInHand();
  swift_allocObject();
  v10 = v7;
  v11 = specialized MakeRejectorObjectInHand.init(_:)(v10);

  *(_QWORD *)(v3 + 136) = RejectorObjectInHand;
  *(_QWORD *)(v3 + 144) = &protocol witness table for MakeRejectorObjectInHand;
  *(_QWORD *)(v3 + 112) = v11;
  RejectorBreakSourceObjectInteractionState = type metadata accessor for MakeRejectorBreakSourceObjectInteractionState();
  swift_allocObject();
  v13 = v10;
  v14 = specialized MakeRejectorBreakSourceObjectInteractionState.init(_:)(v13);

  *(_QWORD *)(v3 + 176) = RejectorBreakSourceObjectInteractionState;
  *(_QWORD *)(v3 + 184) = &protocol witness table for MakeRejectorBreakSourceObjectInteractionState;
  *(_QWORD *)(v3 + 152) = v14;
  BreakSourceHomeUI = type metadata accessor for MakeBreakSourceHomeUI();
  swift_allocObject();
  v16 = specialized MakeBreakSourceHomeUI.init(_:)();
  *(_QWORD *)(v3 + 216) = BreakSourceHomeUI;
  *(_QWORD *)(v3 + 224) = &protocol witness table for MakeBreakSourceHomeUI;
  *(_QWORD *)(v3 + 192) = v16;
  LOBYTE(v14) = objc_msgSend(v13, sel_SerializeInternalData);
  type metadata accessor for PinchGenerator();
  v17 = swift_allocObject();
  PinchGenerator.init(pinchFrameFeatureProcessor:pinchPostProcessingUnits:serializeInternalData:)(v2, v3, v14);
  swift_retain();
  *(_BYTE *)(v17 + 809) = objc_msgSend(v13, sel_EnableCoreAnalytics);
  type metadata accessor for ObjectCoreAnalytics();
  swift_allocObject();
  v18 = v13;
  v19 = specialized ObjectCoreAnalytics.init(_:)(v18);

  *(_QWORD *)(v17 + 816) = v19;
  swift_release();
  swift_allocObject();
  v20 = v18;
  v21 = specialized ObjectCoreAnalytics.init(_:)(v20);

  *(_QWORD *)(v17 + 824) = v21;
  swift_release();
  swift_allocObject();
  v22 = v20;
  v23 = specialized ObjectCoreAnalytics.init(_:)(v22);

  *(_QWORD *)(v17 + 832) = v23;
  swift_release();
  type metadata accessor for OISExitReasonAnalytics();
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = specialized static StatisticUtils.Location3DBucket.resolve(handCenter:)((__n128)0);
  *(_QWORD *)(v24 + 32) = v25;
  *(_QWORD *)(v24 + 40) = v26;
  *(_BYTE *)(v24 + 48) = v27 & 1;
  *(_DWORD *)(v24 + 52) = 0;
  *(_OWORD *)(v24 + 56) = xmmword_23D9AD6E0;
  *(_QWORD *)(v24 + 72) = 0x800000023D9CA4E0;

  *(_QWORD *)(v17 + 840) = v24;
  swift_release();
  swift_release();
  return v17;
}

unint64_t lazy protocol witness table accessor for type PinchModelError and conformance PinchModelError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchModelError and conformance PinchModelError;
  if (!lazy protocol witness table cache variable for type PinchModelError and conformance PinchModelError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchModelError, &type metadata for PinchModelError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchModelError and conformance PinchModelError);
  }
  return result;
}

#error "23D75FC84: call analysis failed (funcsize=104)"

uint64_t outlined consume of PinchFrameFeatures?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a19)
  {
    v34 = STACK[0x398];
    v32 = STACK[0x388];
    v33 = STACK[0x390];
    v31 = STACK[0x380];
    outlined consume of HandPose?(result);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of HandPose?(a31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of ObjectInteractionResultsByHand?(v31, v32, v33, v34);
  }
  return result;
}

uint64_t outlined destroy of UnitResult(uint64_t a1)
{
  destroy for UnitResult(a1);
  return a1;
}

uint64_t outlined init with copy of PinchInternalDataType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInternalDataType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PinchInternalDataType?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInternalDataType?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void _s5Hands18PinchFrameFeaturesVSgWOi0_(void *a1)
{
  bzero(a1, 0x306uLL);
}

void protocol witness for Enum.init(rawValue:) in conformance PoseFAResultRowValidity(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  specialized PinchGestureStatusPB.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance PoseFAResultRowValidity(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  specialized PinchGestureStatusPB.init(rawValue:)();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PoseFAResultRowValidity()
{
  lazy protocol witness table accessor for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity();
  return Enum.hash(into:)();
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PoseFAResultRowValidity@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  *a1 = static PoseFAResultRowValidity.allCases;
  return swift_bridgeObjectRetain();
}

uint64_t HandsFAResultRowPB.joints.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseJointsDataPB?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v19 - v10;
  v12 = *(int *)(type metadata accessor for HandsFAResultRowPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandsFAResultRowPB._StorageClass(0);
    swift_allocObject();
    v13 = swift_retain();
    v14 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v13);
    swift_release();
    *(_QWORD *)(v2 + v12) = v14;
    swift_release();
  }
  v15 = *(_QWORD *)(v2 + v12);
  outlined init with take of Matrix2dPB(a1, (uint64_t)v11, type metadata accessor for PoseJointsDataPB);
  v16 = type metadata accessor for PoseJointsDataPB(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v11, 0, 1, v16);
  outlined init with take of PoseJointsDataPB?((uint64_t)v11, (uint64_t)v7);
  v17 = v15 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__joints;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?((uint64_t)v7, v17, &demangling cache variable for type metadata for PoseJointsDataPB?);
  swift_endAccess();
  return swift_release();
}

uint64_t HandsFAResultRowPB.objectInteractionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionFADataPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for HandsFAResultRowPB(0) + 20))
     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v7, (uint64_t)v6, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
  v8 = (int *)type metadata accessor for ObjectInteractionFADataPB(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48))(v6, 1, v8) != 1)
    return outlined init with take of Matrix2dPB((uint64_t)v6, a1, type metadata accessor for ObjectInteractionFADataPB);
  UnknownStorage.init()();
  v9 = a1 + v8[5];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v8[6];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v8[7];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v8[8];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1 + v8[9];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v8[10];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  *(_BYTE *)(a1 + v8[11]) = 2;
  *(_BYTE *)(a1 + v8[12]) = 2;
  *(_BYTE *)(a1 + v8[13]) = 2;
  *(_BYTE *)(a1 + v8[14]) = 2;
  return outlined destroy of Coordinate3DPB?((uint64_t)v6, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PoseFAResultRowValidity@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PoseFAResultRowValidity._protobuf_nameMap, a1);
}

uint64_t ObjectInteractionFADataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 5:
        case 6:
          type metadata accessor for ObjectInteractionFADataPB(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for ObjectInteractionFADataPB(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 7:
        case 8:
        case 9:
        case 10:
          type metadata accessor for ObjectInteractionFADataPB(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t ObjectInteractionFADataPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in ObjectInteractionFADataPB.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in ObjectInteractionFADataPB.traverse<A>(visitor:)(v0);
    closure #3 in ObjectInteractionFADataPB.traverse<A>(visitor:)(v0);
    closure #4 in ObjectInteractionFADataPB.traverse<A>(visitor:)(v0);
    closure #5 in ObjectInteractionFADataPB.traverse<A>(visitor:)(v0);
    closure #6 in ObjectInteractionFADataPB.traverse<A>(visitor:)(v0);
    closure #7 in ObjectInteractionFADataPB.traverse<A>(visitor:)(v0);
    closure #8 in ObjectInteractionFADataPB.traverse<A>(visitor:)(v0);
    closure #9 in ObjectInteractionFADataPB.traverse<A>(visitor:)(v0);
    closure #10 in ObjectInteractionFADataPB.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in ObjectInteractionFADataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ObjectInteractionFADataPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 20) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in ObjectInteractionFADataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ObjectInteractionFADataPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in ObjectInteractionFADataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ObjectInteractionFADataPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 28) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in ObjectInteractionFADataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ObjectInteractionFADataPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 32) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #5 in ObjectInteractionFADataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ObjectInteractionFADataPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in ObjectInteractionFADataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ObjectInteractionFADataPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 40) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #7 in ObjectInteractionFADataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ObjectInteractionFADataPB(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 44)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #8 in ObjectInteractionFADataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ObjectInteractionFADataPB(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 48)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #9 in ObjectInteractionFADataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ObjectInteractionFADataPB(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 52)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #10 in ObjectInteractionFADataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for ObjectInteractionFADataPB(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 56)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t protocol witness for Message.init() in conformance ObjectInteractionFADataPB@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a2 + v8;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1[10];
  v12 = a2 + a1[9];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a2 + v11;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v14) = 2;
  v15 = a1[14];
  *(_BYTE *)(a2 + a1[13]) = 2;
  *(_BYTE *)(a2 + v15) = 2;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance ObjectInteractionFADataPB()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance ObjectInteractionFADataPB()
{
  return ObjectInteractionFADataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance ObjectInteractionFADataPB()
{
  return ObjectInteractionFADataPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance ObjectInteractionFADataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionFADataPB and conformance ObjectInteractionFADataPB, type metadata accessor for ObjectInteractionFADataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionFADataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance ObjectInteractionFADataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static ObjectInteractionFADataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ObjectInteractionFADataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionFADataPB and conformance ObjectInteractionFADataPB, type metadata accessor for ObjectInteractionFADataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionFADataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ObjectInteractionFADataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionFADataPB and conformance ObjectInteractionFADataPB, type metadata accessor for ObjectInteractionFADataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionFADataPB);
  return Message.hash(into:)();
}

uint64_t one-time initialization function for defaultInstance()
{
  uint64_t result;

  type metadata accessor for HandsFAResultRowPB._StorageClass(0);
  swift_allocObject();
  result = HandsFAResultRowPB._StorageClass.init()();
  static HandsFAResultRowPB._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  type metadata accessor for TrackingDataBlobPB._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__handsKitData;
  v2 = type metadata accessor for HandsKitDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__trackingInfos;
  v4 = type metadata accessor for TrackingInfosPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__intermediateData;
  v6 = type metadata accessor for TrackingIntermediateDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v0
     + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__schedulingData;
  v8 = type metadata accessor for SchedulingDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v0 + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__state;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v0
      + OBJC_IVAR____TtCV5Hands18TrackingDataBlobPBP33_98C26C9B02D4CAEA7B6BBFA543896C9813_StorageClass__detectionSpec;
  v11 = type metadata accessor for DetectionSpecPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  static TrackingDataBlobPB._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for RecoverRepetitivePinchInternalDataPB._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchState;
  v2 = type metadata accessor for MissedPinchStatePB(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__missedPinchByBreakState, 1, 1, v2);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__genericPinch) = 0;
  v4 = v0
     + OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__scrollData;
  v5 = type metadata accessor for RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(v0+ OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__tapData, 1, 1, v5);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(v0+ OBJC_IVAR____TtCV5Hands36RecoverRepetitivePinchInternalDataPBP33_4DBF21DDD2DA306A2FA8BABAC9C4072513_StorageClass__pinchData, 1, 1, v5);
  static RecoverRepetitivePinchInternalDataPB._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for JointTransformPB._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transform;
  v2 = type metadata accessor for Matrix2dPB(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRaw, 1, 1, v2);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__uncertainty) = 0;
  v4 = OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__occlusionValues;
  *(_QWORD *)(v0 + v4) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v5 = v0
     + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformMatrix;
  v6 = type metadata accessor for TransformMatrixPB(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v0+ OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__transformRawMatrix, 1, 1, v6);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV5Hands16JointTransformPBP33_6B8A5941434804F0391CB90615FD3D5313_StorageClass__unifiedConfidence) = 0;
  static JointTransformPB._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for HandDescriptorPB._StorageClass(0);
  swift_allocObject();
  result = HandDescriptorPB._StorageClass.init()();
  static HandDescriptorPB._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for HandGTDescriptorPB._StorageClass(0);
  swift_allocObject();
  result = HandGTDescriptorPB._StorageClass.init()();
  static HandGTDescriptorPB._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for TrackingInfoPB._StorageClass(0);
  swift_allocObject();
  result = TrackingInfoPB._StorageClass.init()();
  static TrackingInfoPB._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PinchModelFramePB._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  v1 = v0 + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__handsKitInput;
  v2 = type metadata accessor for HandsKitDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__leftHandFrameData;
  v4 = type metadata accessor for PinchModelFrameIOPB(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__rightHandFrameData, 1, 1, v4);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands17PinchModelFramePBP33_C8CC4B7CF74CB7DA06D36012086814D313_StorageClass__enabledCameras) = MEMORY[0x24BEE4AF8];
  static PinchModelFramePB._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for UnsureInternalPB._StorageClass();
  result = swift_allocObject();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 39) = 0;
  *(_QWORD *)(result + 52) = 0;
  *(_QWORD *)(result + 44) = 0;
  static UnsureInternalPB._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
  swift_allocObject();
  result = HandDescriptorInternalPB._StorageClass.init()();
  static HandDescriptorInternalPB._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for HandsKitDataPB._StorageClass(0);
  swift_allocObject();
  result = HandsKitDataPB._StorageClass.init()();
  static HandsKitDataPB._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for HandPinchEvent._StorageClass(0);
  swift_allocObject();
  result = HandPinchEvent._StorageClass.init()();
  static HandPinchEvent._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  type metadata accessor for ImageCalibrationDataPB._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsics;
  v2 = type metadata accessor for Matrix2dPB(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__distortionParameters) = MEMORY[0x24BEE4AF8];
  v3(v0 + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsics, 1, 1, v2);
  v5 = v0
     + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__cameraModel;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__imageSize) = v4;
  v6 = v0
     + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__arrivalTimestamp;
  v7 = type metadata accessor for CMTimeProtobuf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__warperMesh) = v4;
  v8 = v0
     + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__intrinsicsMatrix;
  v9 = type metadata accessor for Matrix3x3PB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v0
      + OBJC_IVAR____TtCV5Hands22ImageCalibrationDataPBP33_2B3CF2BC01A03AB7356ECFA806B7E84113_StorageClass__extrinsicsTransform;
  v11 = type metadata accessor for TransformMatrixPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  static ImageCalibrationDataPB._StorageClass.defaultInstance = v0;
  return result;
}

uint64_t HandsFAResultRowPB._StorageClass.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  *(_DWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_WORD *)(v0 + 48) = 513;
  *(_DWORD *)(v0 + 52) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_DWORD *)(v0 + 76) = 0;
  *(_BYTE *)(v0 + 80) = 1;
  *(_QWORD *)(v0 + 88) = 0;
  *(_BYTE *)(v0 + 96) = 1;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  v1 = v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__joints;
  *(_BYTE *)(v0 + 128) = 1;
  v2 = type metadata accessor for PoseJointsDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDown) = 2;
  v3 = v0
     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__worldPoseTransform;
  v4 = type metadata accessor for Matrix2dPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairTrue;
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = v0
     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairFalse;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gesture);
  *v7 = 0;
  v7[1] = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gradeApproval) = 2;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__meshTntFingerLabel) = 2;
  v8 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality0);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(v0
                + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality1);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(v0
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__goodPoseTwoViews);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)(v0
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__visibleManualTwoViews);
  *v11 = 0;
  v11[1] = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handInMCam) = 2;
  v12 = v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__motionSpeed;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handFullyInFov) = 2;
  v13 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gestureVideoID;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predictedHandIsLeft) = 2;
  v14 = v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handCenter;
  v15 = type metadata accessor for Coordinate3DPB(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v14, 1, 1, v15);
  v17 = v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handSize;
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__hoverUncertainty;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v16(v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__upVector, 1, 1, v15);
  v19 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__primaryCameraID;
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  v20 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__secondaryCameraID;
  *(_DWORD *)v20 = 0;
  *(_BYTE *)(v20 + 4) = 1;
  v21 = OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations;
  v22 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + v21) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v23 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInternalData;
  v24 = type metadata accessor for PinchInternalDataPB();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__scheduledDetection;
  *(_DWORD *)v25 = 0;
  *(_BYTE *)(v25 + 4) = 1;
  v26 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__dtHoverDistance;
  *(_QWORD *)v26 = 0;
  *(_BYTE *)(v26 + 8) = 1;
  v27 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
  v28 = type metadata accessor for ObjectInteractionFADataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceScore) = v22;
  v29 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceClass;
  *(_QWORD *)v29 = 0;
  *(_WORD *)(v29 + 8) = 256;
  v16(v0+ OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detection3DHandCenter, 1, 1, v15);
  v16(v0+ OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predicted3DHandCenter, 1, 1, v15);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detectionSpecs) = v22;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cropBoundingBox) = v22;
  v30 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__trackingHealthScore;
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 1;
  v31 = v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
  v32 = type metadata accessor for CMTimeProtobuf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTap) = 2;
  v33 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTapInternalData;
  v34 = type metadata accessor for MiddleDoubleTapInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v35 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cancellationReason;
  *(_QWORD *)v35 = 0;
  *(_BYTE *)(v35 + 8) = 1;
  v36 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtVisibility;
  v37 = type metadata accessor for PartialHandMultiCam(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  v38 = v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInfo;
  v39 = type metadata accessor for PinchInfoPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
  v40 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__actionInternal;
  v41 = type metadata accessor for ActionInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  v42 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__unsureInternal;
  v43 = type metadata accessor for UnsureInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 1, 1, v43);
  v44 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__recoverRepetitivePinchInternal;
  v45 = type metadata accessor for RecoverRepetitivePinchInternalDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 1, 1, v45);
  v46 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateInternal;
  v47 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 1, 1, v47);
  v48 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateStatus;
  *(_QWORD *)v48 = 0;
  *(_WORD *)(v48 + 8) = 256;
  v49 = v0
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__homePinchInternal;
  v50 = type metadata accessor for HomePinchInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 1, 1, v50);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDownHomeUserInterface) = 2;
  return v0;
}

uint64_t HandsFAResultRowPB._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__joints, &demangling cache variable for type metadata for PoseJointsDataPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__worldPoseTransform, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handCenter, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__upVector, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInternalData, &demangling cache variable for type metadata for PinchInternalDataPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detection3DHandCenter, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predicted3DHandCenter, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTapInternalData, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtVisibility, &demangling cache variable for type metadata for PartialHandMultiCam?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInfo, &demangling cache variable for type metadata for PinchInfoPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__actionInternal, &demangling cache variable for type metadata for ActionInternalPB?);
  outlined destroy of Coordinate3DPB?(v0 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__unsureInternal, &demangling cache variable for type metadata for UnsureInternalPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__recoverRepetitivePinchInternal, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateInternal, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__homePinchInternal, &demangling cache variable for type metadata for HomePinchInternalPB?);
  return v0;
}

uint64_t HandsFAResultRowPB._StorageClass.__deallocating_deinit()
{
  HandsFAResultRowPB._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HandsFAResultRowPB._StorageClass()
{
  return type metadata accessor for HandsFAResultRowPB._StorageClass(0);
}

uint64_t type metadata accessor for HandsFAResultRowPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandsFAResultRowPB._StorageClass);
}

void type metadata completion function for HandsFAResultRowPB._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PoseJointsDataPB?, (void (*)(uint64_t))type metadata accessor for PoseJointsDataPB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for Matrix2dPB?, (void (*)(uint64_t))type metadata accessor for Matrix2dPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, (unint64_t *)&lazy cache variable for type metadata for Coordinate3DPB?, (void (*)(uint64_t))type metadata accessor for Coordinate3DPB);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PinchInternalDataPB?, (void (*)(uint64_t))type metadata accessor for PinchInternalDataPB);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ObjectInteractionFADataPB?, (void (*)(uint64_t))type metadata accessor for ObjectInteractionFADataPB);
          if (v4 <= 0x3F)
          {
            type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CMTimeProtobuf?, (void (*)(uint64_t))type metadata accessor for CMTimeProtobuf);
            if (v5 <= 0x3F)
            {
              type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for MiddleDoubleTapInternalPB?, (void (*)(uint64_t))type metadata accessor for MiddleDoubleTapInternalPB);
              if (v6 <= 0x3F)
              {
                type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PartialHandMultiCam?, (void (*)(uint64_t))type metadata accessor for PartialHandMultiCam);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for PinchInfoPB?, (void (*)(uint64_t))type metadata accessor for PinchInfoPB);
                  if (v8 <= 0x3F)
                  {
                    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ActionInternalPB?, (void (*)(uint64_t))type metadata accessor for ActionInternalPB);
                    if (v9 <= 0x3F)
                    {
                      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for UnsureInternalPB?, (void (*)(uint64_t))type metadata accessor for UnsureInternalPB);
                      if (v10 <= 0x3F)
                      {
                        type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?, (void (*)(uint64_t))type metadata accessor for RecoverRepetitivePinchInternalDataPB);
                        if (v11 <= 0x3F)
                        {
                          type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ObjectInteractionStateInternalPB?, (void (*)(uint64_t))type metadata accessor for ObjectInteractionStateInternalPB);
                          if (v12 <= 0x3F)
                          {
                            type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HomePinchInternalPB?, (void (*)(uint64_t))type metadata accessor for HomePinchInternalPB);
                            if (v13 <= 0x3F)
                              swift_updateClassMetadata2();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t type metadata accessor for ObjectInteractionFADataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for ObjectInteractionFADataPB);
}

ValueMetadata *type metadata accessor for PoseFAResultRowValidity()
{
  return &type metadata for PoseFAResultRowValidity;
}

_QWORD *initializeBufferWithCopyOfBuffer for ObjectInteractionFADataPB(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v20 = a3[9];
    v21 = a3[10];
    v22 = (char *)a1 + v20;
    v23 = (char *)a2 + v20;
    *(_DWORD *)v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    v24 = (char *)a1 + v21;
    v25 = (char *)a2 + v21;
    *(_DWORD *)v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    v26 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v26) = *((_BYTE *)a2 + v26);
    v27 = a3[14];
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *((_BYTE *)a1 + v27) = *((_BYTE *)a2 + v27);
  }
  return a1;
}

uint64_t destroy for ObjectInteractionFADataPB(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for ObjectInteractionFADataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  v25 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  v26 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  return a1;
}

uint64_t assignWithCopy for ObjectInteractionFADataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v10;
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  LOBYTE(v10) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v10;
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  LOBYTE(v10) = *(_BYTE *)(v22 + 4);
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = v10;
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = a2 + v23;
  LOBYTE(v10) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v10;
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t initializeWithTake for ObjectInteractionFADataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  v25 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  v26 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  return a1;
}

uint64_t assignWithTake for ObjectInteractionFADataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  v25 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  v26 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for ObjectInteractionFADataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D763010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 44));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for ObjectInteractionFADataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7630B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 44)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for ObjectInteractionFADataPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrackingFAInternalDataPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for TrackingFAInternalDataPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for TrackingFAInternalDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for TrackingFAInternalDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for TrackingFAInternalDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for TrackingFAInternalDataPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingFAInternalDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for TrackingFAInternalDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D7634DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TrackingFAInternalDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingFAInternalDataPB);
}

uint64_t type metadata completion function for TrackingFAInternalDataPB()
{
  return type metadata completion function for TrackingFAInternalDataPB();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HandsFAResultTablePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D76357C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for HandsFAResultTablePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D763604(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for HandsFAResultTablePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandsFAResultTablePB);
}

unint64_t lazy protocol witness table accessor for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity;
  if (!lazy protocol witness table cache variable for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PoseFAResultRowValidity, &type metadata for PoseFAResultRowValidity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity;
  if (!lazy protocol witness table cache variable for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PoseFAResultRowValidity, &type metadata for PoseFAResultRowValidity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity;
  if (!lazy protocol witness table cache variable for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PoseFAResultRowValidity, &type metadata for PoseFAResultRowValidity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity;
  if (!lazy protocol witness table cache variable for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PoseFAResultRowValidity, &type metadata for PoseFAResultRowValidity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity);
  }
  return result;
}

uint64_t HandsFAResultRowPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3;
  v8 = *(int *)(type metadata accessor for HandsFAResultRowPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandsFAResultRowPB._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    v10 = specialized HandsFAResultRowPB._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v4 + v8) = v10;
    swift_release();
  }
  v11 = swift_retain();
  closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(v11, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t (*v12)(uint64_t);
  unint64_t *v13;
  void *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t (*v17)(uint64_t);
  unint64_t *v18;
  void *v19;
  uint64_t *v20;
  unint64_t (*v21)();
  void (*v22)(uint64_t, uint64_t, uint64_t);

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #5 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #8 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #9 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 11:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__joints;
          v12 = type metadata accessor for PoseJointsDataPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type PoseJointsDataPB and conformance PoseJointsDataPB;
          v14 = &protocol conformance descriptor for PoseJointsDataPB;
          goto LABEL_6;
        case 12:
        case 17:
        case 18:
        case 23:
        case 25:
        case 27:
        case 47:
        case 59:
          closure #12 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 13:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__worldPoseTransform;
          v12 = type metadata accessor for Matrix2dPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB;
          v14 = &protocol conformance descriptor for Matrix2dPB;
          goto LABEL_6;
        case 14:
        case 15:
        case 26:
        case 32:
        case 33:
        case 36:
          closure #14 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 16:
        case 19:
        case 20:
        case 21:
        case 22:
          closure #16 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 24:
          v15 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__motionSpeed;
          goto LABEL_40;
        case 28:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handCenter;
          goto LABEL_5;
        case 29:
          v15 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handSize;
          goto LABEL_40;
        case 30:
          v15 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__hoverUncertainty;
          goto LABEL_40;
        case 31:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__upVector;
          goto LABEL_5;
        case 34:
          closure #34 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)();
          break;
        case 35:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInternalData;
          v12 = (uint64_t (*)(uint64_t))type metadata accessor for PinchInternalDataPB;
          v13 = &lazy protocol witness table cache variable for type PinchInternalDataPB and conformance PinchInternalDataPB;
          v14 = &protocol conformance descriptor for PinchInternalDataPB;
          goto LABEL_6;
        case 37:
          v15 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__dtHoverDistance;
          goto LABEL_40;
        case 38:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
          v12 = type metadata accessor for ObjectInteractionFADataPB;
          v13 = &lazy protocol witness table cache variable for type ObjectInteractionFADataPB and conformance ObjectInteractionFADataPB;
          v14 = &protocol conformance descriptor for ObjectInteractionFADataPB;
          goto LABEL_6;
        case 39:
          v16 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceScore;
          v17 = type metadata accessor for HandPresence;
          v18 = (unint64_t *)&lazy protocol witness table cache variable for type HandPresence and conformance HandPresence;
          v19 = &protocol conformance descriptor for HandPresence;
          goto LABEL_38;
        case 40:
          v20 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceClass;
          v21 = lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category;
          goto LABEL_52;
        case 41:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detection3DHandCenter;
          goto LABEL_5;
        case 42:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predicted3DHandCenter;
LABEL_5:
          v12 = type metadata accessor for Coordinate3DPB;
          v13 = &lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB;
          v14 = &protocol conformance descriptor for Coordinate3DPB;
          goto LABEL_6;
        case 43:
          v16 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detectionSpecs;
          v17 = type metadata accessor for DetectionSpecItemPB;
          v18 = (unint64_t *)&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB;
          v19 = &protocol conformance descriptor for DetectionSpecItemPB;
          goto LABEL_38;
        case 44:
          v16 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cropBoundingBox;
          v17 = type metadata accessor for CropBoxPB;
          v18 = (unint64_t *)&lazy protocol witness table cache variable for type CropBoxPB and conformance CropBoxPB;
          v19 = &protocol conformance descriptor for CropBoxPB;
LABEL_38:
          closure #39 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (uint64_t)v16, v17, v18, (uint64_t)v19);
          break;
        case 45:
          v15 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__trackingHealthScore;
LABEL_40:
          v22 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C100];
          goto LABEL_41;
        case 46:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
          v12 = type metadata accessor for CMTimeProtobuf;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf;
          v14 = &protocol conformance descriptor for CMTimeProtobuf;
          goto LABEL_6;
        case 48:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTapInternalData;
          v12 = type metadata accessor for MiddleDoubleTapInternalPB;
          v13 = &lazy protocol witness table cache variable for type MiddleDoubleTapInternalPB and conformance MiddleDoubleTapInternalPB;
          v14 = &protocol conformance descriptor for MiddleDoubleTapInternalPB;
          goto LABEL_6;
        case 49:
          v15 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cancellationReason;
          v22 = (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C138];
LABEL_41:
          closure #24 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, v15, v22);
          break;
        case 50:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtVisibility;
          v12 = type metadata accessor for PartialHandMultiCam;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type PartialHandMultiCam and conformance PartialHandMultiCam;
          v14 = &protocol conformance descriptor for PartialHandMultiCam;
          goto LABEL_6;
        case 52:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInfo;
          v12 = type metadata accessor for PinchInfoPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB;
          v14 = &protocol conformance descriptor for PinchInfoPB;
          goto LABEL_6;
        case 53:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__actionInternal;
          v12 = type metadata accessor for ActionInternalPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB;
          v14 = &protocol conformance descriptor for ActionInternalPB;
          goto LABEL_6;
        case 54:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__unsureInternal;
          v12 = type metadata accessor for UnsureInternalPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB;
          v14 = &protocol conformance descriptor for UnsureInternalPB;
          goto LABEL_6;
        case 55:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__recoverRepetitivePinchInternal;
          v12 = type metadata accessor for RecoverRepetitivePinchInternalDataPB;
          v13 = &lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB and conformance RecoverRepetitivePinchInternalDataPB;
          v14 = &protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB;
          goto LABEL_6;
        case 56:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateInternal;
          v12 = type metadata accessor for ObjectInteractionStateInternalPB;
          v13 = &lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB;
          v14 = &protocol conformance descriptor for ObjectInteractionStateInternalPB;
          goto LABEL_6;
        case 57:
          v20 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateStatus;
          v21 = lazy protocol witness table accessor for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus;
LABEL_52:
          closure #40 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (uint64_t)v20, (void (*)(uint64_t))v21);
          break;
        case 58:
          v11 = &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__homePinchInternal;
          v12 = type metadata accessor for HomePinchInternalPB;
          v13 = (unint64_t *)&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB;
          v14 = &protocol conformance descriptor for HomePinchInternalPB;
LABEL_6:
          closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(a2, a1, a3, a4, (uint64_t)v11, v12, v13, (uint64_t)v14);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  lazy protocol witness table accessor for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity();
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t closure #5 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularStringField(value:)();
  return swift_endAccess();
}

uint64_t closure #34 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for ProtobufInt32();
  type metadata accessor for ImageCalibrationDataPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
  dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
  return swift_endAccess();
}

uint64_t closure #39 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  swift_beginAccess();
  a6(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(a7, a6, a8);
  dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #24 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = a2 + *a5;
  swift_beginAccess();
  a6(v9, a3, a4);
  return swift_endAccess();
}

uint64_t closure #40 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7;

  v7 = swift_beginAccess();
  a6(v7);
  dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  swift_beginAccess();
  a6(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(a7, a6, a8);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in HandsFAResultRowPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  return swift_endAccess();
}

uint64_t HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for HandsFAResultRowPB(0);
  v7 = swift_retain();
  closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 24);
  v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v10 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v4)
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (!*(_DWORD *)(a1 + 32) || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
  {
    swift_beginAccess();
    if (!*(_QWORD *)(a1 + 40)
      || (lazy protocol witness table accessor for type PoseFAResultRowValidity and conformance PoseFAResultRowValidity(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v4))
    {
      result = closure #1 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1);
      if (!v4)
      {
        closure #2 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1);
        closure #3 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1);
        closure #4 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1);
        closure #5 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1);
        closure #6 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1);
        closure #7 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1);
        closure #8 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #9 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDown);
        closure #10 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #11 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairTrue);
        closure #11 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairFalse);
        closure #13 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gesture);
        closure #9 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gradeApproval);
        closure #9 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__meshTntFingerLabel);
        closure #13 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality0);
        closure #13 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality1);
        closure #13 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__goodPoseTwoViews);
        closure #13 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__visibleManualTwoViews);
        closure #9 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handInMCam);
        closure #21 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__motionSpeed);
        closure #9 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handFullyInFov);
        closure #11 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gestureVideoID);
        closure #9 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predictedHandIsLeft);
        closure #25 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #21 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handSize);
        closure #21 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__hoverUncertainty);
        closure #28 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #11 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__primaryCameraID);
        closure #11 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__secondaryCameraID);
        v12 = a1
            + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations;
        swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v12 + 16))
        {
          type metadata accessor for ProtobufInt32();
          type metadata accessor for ImageCalibrationDataPB(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageCalibrationDataPB and conformance ImageCalibrationDataPB, type metadata accessor for ImageCalibrationDataPB, (uint64_t)&protocol conformance descriptor for ImageCalibrationDataPB);
          swift_bridgeObjectRetain();
          dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
          swift_bridgeObjectRelease();
        }
        closure #31 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #11 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__scheduledDetection);
        closure #21 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__dtHoverDistance);
        closure #34 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        v13 = a1
            + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceScore;
        swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v13 + 16))
        {
          type metadata accessor for HandPresence(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandPresence and conformance HandPresence, type metadata accessor for HandPresence, (uint64_t)&protocol conformance descriptor for HandPresence);
          swift_bridgeObjectRetain();
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
          swift_bridgeObjectRelease();
        }
        closure #35 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceClass, (void (*)(uint64_t))lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category);
        closure #36 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #37 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        v14 = a1
            + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detectionSpecs;
        swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v14 + 16))
        {
          type metadata accessor for DetectionSpecItemPB(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type DetectionSpecItemPB and conformance DetectionSpecItemPB, type metadata accessor for DetectionSpecItemPB, (uint64_t)&protocol conformance descriptor for DetectionSpecItemPB);
          swift_bridgeObjectRetain();
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
          swift_bridgeObjectRelease();
        }
        v15 = a1
            + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cropBoundingBox;
        swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v15 + 16))
        {
          type metadata accessor for CropBoxPB(0);
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CropBoxPB and conformance CropBoxPB, type metadata accessor for CropBoxPB, (uint64_t)&protocol conformance descriptor for CropBoxPB);
          swift_bridgeObjectRetain();
          dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
          swift_bridgeObjectRelease();
        }
        closure #21 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__trackingHealthScore);
        closure #39 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #9 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTap);
        closure #41 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #42 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1);
        closure #43 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #44 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #45 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #46 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #47 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #48 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        closure #35 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateStatus, (void (*)(uint64_t))lazy protocol witness table accessor for type ObjectInteractionStateStatus and conformance ObjectInteractionStateStatus);
        closure #50 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4);
        return closure #9 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3, a4, &OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDownHomeUserInterface);
      }
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_BYTE *)(a1 + 49) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 56) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 72) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 80) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #5 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 96) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 112))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #7 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 128) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #8 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseJointsDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PoseJointsDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__joints;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PoseJointsDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PoseJointsDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PoseJointsDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PoseJointsDataPB and conformance PoseJointsDataPB, type metadata accessor for PoseJointsDataPB, (uint64_t)&protocol conformance descriptor for PoseJointsDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PoseJointsDataPB);
}

uint64_t closure #10 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__worldPoseTransform;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t closure #13 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1 + *a5;
  result = swift_beginAccess();
  if (*(_QWORD *)(v5 + 8))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #25 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #28 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__upVector;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #31 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PinchInternalDataPB();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInternalData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PinchInternalDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PinchInternalDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInternalDataPB and conformance PinchInternalDataPB, (uint64_t (*)(uint64_t))type metadata accessor for PinchInternalDataPB, (uint64_t)&protocol conformance descriptor for PinchInternalDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
}

uint64_t closure #11 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1 + *a5;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v5 + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #34 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionFADataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ObjectInteractionFADataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for ObjectInteractionFADataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionFADataPB and conformance ObjectInteractionFADataPB, type metadata accessor for ObjectInteractionFADataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionFADataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for ObjectInteractionFADataPB);
}

uint64_t closure #36 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detection3DHandCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #37 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predicted3DHandCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #21 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1 + *a5;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v5 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #39 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CMTimeProtobuf);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
}

uint64_t closure #41 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MiddleDoubleTapInternalPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTapInternalData;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for MiddleDoubleTapInternalPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MiddleDoubleTapInternalPB and conformance MiddleDoubleTapInternalPB, type metadata accessor for MiddleDoubleTapInternalPB, (uint64_t)&protocol conformance descriptor for MiddleDoubleTapInternalPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for MiddleDoubleTapInternalPB);
}

uint64_t closure #42 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1
     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cancellationReason;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #43 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PartialHandMultiCam(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtVisibility;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PartialHandMultiCam?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PartialHandMultiCam?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PartialHandMultiCam);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PartialHandMultiCam and conformance PartialHandMultiCam, type metadata accessor for PartialHandMultiCam, (uint64_t)&protocol conformance descriptor for PartialHandMultiCam);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PartialHandMultiCam);
}

uint64_t closure #44 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInfoPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PinchInfoPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInfo;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for PinchInfoPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for PinchInfoPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for PinchInfoPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type PinchInfoPB and conformance PinchInfoPB, type metadata accessor for PinchInfoPB, (uint64_t)&protocol conformance descriptor for PinchInfoPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for PinchInfoPB);
}

uint64_t closure #45 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ActionInternalPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__actionInternal;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for ActionInternalPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ActionInternalPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for ActionInternalPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ActionInternalPB and conformance ActionInternalPB, type metadata accessor for ActionInternalPB, (uint64_t)&protocol conformance descriptor for ActionInternalPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for ActionInternalPB);
}

uint64_t closure #46 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UnsureInternalPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__unsureInternal;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for UnsureInternalPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for UnsureInternalPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for UnsureInternalPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnsureInternalPB and conformance UnsureInternalPB, type metadata accessor for UnsureInternalPB, (uint64_t)&protocol conformance descriptor for UnsureInternalPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for UnsureInternalPB);
}

uint64_t closure #47 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RecoverRepetitivePinchInternalDataPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__recoverRepetitivePinchInternal;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RecoverRepetitivePinchInternalDataPB and conformance RecoverRepetitivePinchInternalDataPB, type metadata accessor for RecoverRepetitivePinchInternalDataPB, (uint64_t)&protocol conformance descriptor for RecoverRepetitivePinchInternalDataPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
}

uint64_t closure #48 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateInternal;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for ObjectInteractionStateInternalPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionStateInternalPB and conformance ObjectInteractionStateInternalPB, type metadata accessor for ObjectInteractionStateInternalPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionStateInternalPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for ObjectInteractionStateInternalPB);
}

uint64_t closure #35 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t result;

  v7 = a1 + *a5;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v7 + 9) & 1) == 0)
  {
    a6(result);
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #50 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for HomePinchInternalPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__homePinchInternal;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for HomePinchInternalPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for HomePinchInternalPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for HomePinchInternalPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HomePinchInternalPB and conformance HomePinchInternalPB, type metadata accessor for HomePinchInternalPB, (uint64_t)&protocol conformance descriptor for HomePinchInternalPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for HomePinchInternalPB);
}

uint64_t closure #9 in closure #1 in HandsFAResultRowPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _BYTE *v5;
  uint64_t result;

  v5 = (_BYTE *)(a1 + *a5);
  result = swift_beginAccess();
  if (*v5 != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #1 in static HandsFAResultRowPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t result;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  uint64_t v190;
  int v191;
  char v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  double v196;
  char v197;
  uint64_t v198;
  double *v199;
  char v200;
  uint64_t v201;
  int v202;
  char v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  double v207;
  char v208;
  uint64_t v209;
  double *v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  double v219;
  char v220;
  uint64_t v221;
  double *v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t (*v229)(uint64_t, uint64_t, uint64_t);
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  unsigned __int8 *v237;
  int v238;
  unsigned __int8 *v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int (*v246)(uint64_t, uint64_t, uint64_t);
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  int *v253;
  int v254;
  char v255;
  uint64_t v256;
  int *v257;
  int v258;
  char v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  unsigned __int8 *v266;
  int v267;
  unsigned __int8 *v268;
  int v269;
  unsigned __int8 *v270;
  int v271;
  unsigned __int8 *v272;
  int v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  unsigned __int8 *v294;
  int v295;
  unsigned __int8 *v296;
  int v297;
  uint64_t v298;
  double v299;
  char v300;
  uint64_t v301;
  unsigned __int8 *v302;
  int v303;
  unsigned __int8 *v304;
  int v305;
  int *v306;
  int v307;
  char v308;
  uint64_t v309;
  unsigned __int8 *v310;
  int v311;
  unsigned __int8 *v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int (*v319)(uint64_t, uint64_t, uint64_t);
  float *v320;
  float *v321;
  char v322;
  uint64_t v323;
  double v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  double v328;
  char v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  float *v336;
  float *v337;
  char v338;
  int *v339;
  int v340;
  char v341;
  uint64_t v342;
  int *v343;
  int v344;
  char v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  char v351;
  char v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int (*v358)(uint64_t, uint64_t, uint64_t);
  uint64_t v359;
  uint64_t v360;
  char v361;
  int *v362;
  int v363;
  char v364;
  uint64_t v365;
  uint64_t v366;
  double v367;
  char v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int (*v375)(uint64_t, uint64_t, uint64_t);
  uint64_t v376;
  uint64_t v377;
  char v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t v382;
  char v383;
  uint64_t *v384;
  uint64_t v385;
  char v386;
  char v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  float *v394;
  float *v395;
  char v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  float *v402;
  float *v403;
  char v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t *v407;
  uint64_t v408;
  char v409;
  uint64_t *v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  char v414;
  uint64_t v415;
  double v416;
  char v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int (*v424)(uint64_t, uint64_t, uint64_t);
  uint64_t v425;
  uint64_t v426;
  char v427;
  unsigned __int8 *v428;
  int v429;
  unsigned __int8 *v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unsigned int (*v437)(uint64_t, uint64_t, uint64_t);
  uint64_t v438;
  uint64_t v439;
  char v440;
  uint64_t *v441;
  uint64_t v442;
  char v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unsigned int (*v450)(uint64_t, uint64_t, uint64_t);
  uint64_t *v451;
  uint64_t *v452;
  char v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int (*v459)(uint64_t, uint64_t, uint64_t);
  char *v460;
  char *v461;
  char v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int (*v468)(uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v469;
  unsigned __int8 *v470;
  char v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  unsigned int (*v477)(uint64_t, uint64_t, uint64_t);
  uint64_t v478;
  uint64_t v479;
  char v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int (*v486)(uint64_t, uint64_t, uint64_t);
  uint64_t v487;
  uint64_t v488;
  char v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  unsigned int (*v495)(uint64_t, uint64_t, uint64_t);
  uint64_t v496;
  uint64_t v497;
  char v498;
  uint64_t v499;
  uint64_t v500;
  char v501;
  char v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unsigned int (*v509)(uint64_t, uint64_t, uint64_t);
  char *v510;
  _QWORD *v511;
  char v512;
  unsigned __int8 *v513;
  int v514;
  unsigned __int8 *v515;
  int v516;
  uint64_t v517;
  char *v518;
  uint64_t v519;
  float *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  float *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  float *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  float *v545;
  uint64_t v546;
  float *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t *v566;
  uint64_t v567;
  uint64_t *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  char *v573;
  uint64_t v574;
  char *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unsigned __int8 *v580;
  uint64_t v581;
  unsigned __int8 *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  _QWORD *v608;
  uint64_t v609;
  char *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;

  v609 = type metadata accessor for HomePinchInternalPB(0);
  v606 = *(_QWORD *)(v609 - 8);
  MEMORY[0x24BDAC7A8](v609, v4);
  v610 = (char *)&v517 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v605 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HomePinchInternalPB?, HomePinchInternalPB?));
  MEMORY[0x24BDAC7A8](v605, v6);
  v8 = (char *)&v517 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v608 = (uint64_t *)((char *)&v517 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12, v13);
  v607 = (uint64_t)&v517 - v14;
  v602 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v599 = *(_QWORD *)(v602 - 8);
  MEMORY[0x24BDAC7A8](v602, v15);
  v603 = (uint64_t)&v517 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v598 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ObjectInteractionStateInternalPB?, ObjectInteractionStateInternalPB?));
  MEMORY[0x24BDAC7A8](v598, v17);
  v604 = (uint64_t)&v517 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  MEMORY[0x24BDAC7A8](v19, v20);
  v601 = (uint64_t)&v517 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v23);
  v600 = (uint64_t)&v517 - v24;
  v595 = type metadata accessor for RecoverRepetitivePinchInternalDataPB(0);
  v592 = *(_QWORD *)(v595 - 8);
  MEMORY[0x24BDAC7A8](v595, v25);
  v596 = (uint64_t)&v517 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v591 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RecoverRepetitivePinchInternalDataPB?, RecoverRepetitivePinchInternalDataPB?));
  MEMORY[0x24BDAC7A8](v591, v27);
  v597 = (uint64_t)&v517 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v29, v30);
  v594 = (uint64_t)&v517 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32, v33);
  v593 = (uint64_t)&v517 - v34;
  v588 = type metadata accessor for UnsureInternalPB(0);
  v585 = *(_QWORD *)(v588 - 8);
  MEMORY[0x24BDAC7A8](v588, v35);
  v589 = (uint64_t)&v517 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v584 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UnsureInternalPB?, UnsureInternalPB?));
  MEMORY[0x24BDAC7A8](v584, v37);
  v590 = (uint64_t)&v517 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
  MEMORY[0x24BDAC7A8](v39, v40);
  v587 = (uint64_t)&v517 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v42, v43);
  v586 = (uint64_t)&v517 - v44;
  v581 = type metadata accessor for ActionInternalPB(0);
  v578 = *(_QWORD *)(v581 - 8);
  MEMORY[0x24BDAC7A8](v581, v45);
  v582 = (unsigned __int8 *)&v517 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v577 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ActionInternalPB?, ActionInternalPB?));
  MEMORY[0x24BDAC7A8](v577, v47);
  v583 = (uint64_t)&v517 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
  MEMORY[0x24BDAC7A8](v49, v50);
  v580 = (unsigned __int8 *)&v517 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v52, v53);
  v579 = (uint64_t)&v517 - v54;
  v574 = type metadata accessor for PinchInfoPB(0);
  v571 = *(_QWORD *)(v574 - 8);
  MEMORY[0x24BDAC7A8](v574, v55);
  v575 = (char *)&v517 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v570 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PinchInfoPB?, PinchInfoPB?));
  MEMORY[0x24BDAC7A8](v570, v57);
  v576 = (uint64_t)&v517 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInfoPB?);
  MEMORY[0x24BDAC7A8](v59, v60);
  v573 = (char *)&v517 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v62, v63);
  v572 = (uint64_t)&v517 - v64;
  v567 = type metadata accessor for PartialHandMultiCam(0);
  v564 = *(_QWORD *)(v567 - 8);
  MEMORY[0x24BDAC7A8](v567, v65);
  v568 = (uint64_t *)((char *)&v517 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0));
  v563 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PartialHandMultiCam?, PartialHandMultiCam?));
  MEMORY[0x24BDAC7A8](v563, v67);
  v569 = (uint64_t)&v517 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
  MEMORY[0x24BDAC7A8](v69, v70);
  v566 = (uint64_t *)((char *)&v517 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v72, v73);
  v565 = (uint64_t)&v517 - v74;
  v560 = type metadata accessor for MiddleDoubleTapInternalPB(0);
  v557 = *(_QWORD *)(v560 - 8);
  MEMORY[0x24BDAC7A8](v560, v75);
  v561 = (uint64_t)&v517 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v556 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MiddleDoubleTapInternalPB?, MiddleDoubleTapInternalPB?));
  MEMORY[0x24BDAC7A8](v556, v77);
  v562 = (uint64_t)&v517 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  MEMORY[0x24BDAC7A8](v79, v80);
  v559 = (uint64_t)&v517 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v82, v83);
  v558 = (uint64_t)&v517 - v84;
  v553 = type metadata accessor for CMTimeProtobuf(0);
  v550 = *(_QWORD *)(v553 - 8);
  MEMORY[0x24BDAC7A8](v553, v85);
  v554 = (uint64_t)&v517 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  v549 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
  MEMORY[0x24BDAC7A8](v549, v87);
  v555 = (uint64_t)&v517 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v89, v90);
  v552 = (uint64_t)&v517 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v92, v93);
  v551 = (uint64_t)&v517 - v94;
  v537 = type metadata accessor for ObjectInteractionFADataPB(0);
  v534 = *(_QWORD *)(v537 - 8);
  MEMORY[0x24BDAC7A8](v537, v95);
  v538 = (uint64_t)&v517 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  v533 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ObjectInteractionFADataPB?, ObjectInteractionFADataPB?));
  MEMORY[0x24BDAC7A8](v533, v97);
  v539 = (uint64_t)&v517 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionFADataPB?);
  MEMORY[0x24BDAC7A8](v99, v100);
  v536 = (uint64_t)&v517 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v102, v103);
  v535 = (uint64_t)&v517 - v104;
  v530 = type metadata accessor for PinchInternalDataPB();
  v527 = *(_QWORD *)(v530 - 8);
  MEMORY[0x24BDAC7A8](v530, v105);
  v531 = (uint64_t)&v517 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
  v526 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PinchInternalDataPB?, PinchInternalDataPB?));
  MEMORY[0x24BDAC7A8](v526, v107);
  v532 = (uint64_t)&v517 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v109, v110);
  v529 = (uint64_t)&v517 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v112, v113);
  v528 = (uint64_t)&v517 - v114;
  v546 = type metadata accessor for Coordinate3DPB(0);
  v521 = *(_QWORD *)(v546 - 8);
  MEMORY[0x24BDAC7A8](v546, v115);
  v547 = (float *)((char *)&v517 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0));
  v543 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
  MEMORY[0x24BDAC7A8](v543, v117);
  v548 = (uint64_t)&v517 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v119, v120);
  v542 = (uint64_t)&v517 - v121;
  MEMORY[0x24BDAC7A8](v122, v123);
  v525 = (uint64_t)&v517 - v124;
  MEMORY[0x24BDAC7A8](v125, v126);
  v522 = (uint64_t)&v517 - v127;
  v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v128, v129);
  v545 = (float *)((char *)&v517 - ((v130 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v131, v132);
  v544 = (uint64_t)&v517 - v133;
  MEMORY[0x24BDAC7A8](v134, v135);
  v541 = (float *)((char *)&v517 - v136);
  MEMORY[0x24BDAC7A8](v137, v138);
  v540 = (uint64_t)&v517 - v139;
  MEMORY[0x24BDAC7A8](v140, v141);
  v524 = (float *)((char *)&v517 - v142);
  MEMORY[0x24BDAC7A8](v143, v144);
  v523 = (uint64_t)&v517 - v145;
  MEMORY[0x24BDAC7A8](v146, v147);
  v520 = (float *)((char *)&v517 - v148);
  MEMORY[0x24BDAC7A8](v149, v150);
  v519 = (uint64_t)&v517 - v151;
  v615 = type metadata accessor for Matrix2dPB(0);
  v614 = *(_QWORD *)(v615 - 8);
  MEMORY[0x24BDAC7A8](v615, v152);
  v611 = (uint64_t)&v517 - ((v153 + 15) & 0xFFFFFFFFFFFFFFF0);
  v613 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
  MEMORY[0x24BDAC7A8](v613, v154);
  v618 = (uint64_t)&v517 - ((v155 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v156, v157);
  v612 = (uint64_t)&v517 - ((v158 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v159, v160);
  v617 = (uint64_t)&v517 - v161;
  v162 = type metadata accessor for PoseJointsDataPB(0);
  v163 = *(_QWORD *)(v162 - 8);
  MEMORY[0x24BDAC7A8](v162, v164);
  v616 = (uint64_t)&v517 - ((v165 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PoseJointsDataPB?, PoseJointsDataPB?));
  MEMORY[0x24BDAC7A8](v166, v167);
  v619 = (uint64_t)&v517 - ((v168 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseJointsDataPB?);
  MEMORY[0x24BDAC7A8](v169, v170);
  v172 = (char *)&v517 - ((v171 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v173, v174);
  v176 = (char *)&v517 - v175;
  swift_beginAccess();
  v620 = a1;
  v177 = *(_QWORD *)(a1 + 16);
  v178 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v179 = *(_QWORD *)(a2 + 16);
  v180 = *(_QWORD *)(a2 + 24);
  v621 = a2;
  if (v177 == v179 && v178 == v180
    || (v181 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v181 & 1) != 0))
  {
    v518 = v8;
    v183 = v620;
    swift_beginAccess();
    v184 = *(_DWORD *)(v183 + 32);
    v185 = v621;
    swift_beginAccess();
    if (v184 != *(_DWORD *)(v185 + 32))
      return 0;
    swift_beginAccess();
    v186 = *(_QWORD *)(v183 + 40);
    v187 = *(unsigned __int8 *)(v183 + 48);
    swift_beginAccess();
    if ((specialized == infix<A>(_:_:)(v186, v187, *(_QWORD *)(v185 + 40), *(unsigned __int8 *)(v185 + 48)) & 1) == 0)
      return 0;
    swift_beginAccess();
    v188 = *(unsigned __int8 *)(v183 + 49);
    swift_beginAccess();
    v189 = *(unsigned __int8 *)(v185 + 49);
    if (v188 == 2)
    {
      if (v189 != 2)
        return 0;
    }
    else if (v189 == 2 || ((((v189 & 1) == 0) ^ v188) & 1) == 0)
    {
      return 0;
    }
    v190 = v620;
    swift_beginAccess();
    v191 = *(_DWORD *)(v190 + 52);
    v192 = *(_BYTE *)(v190 + 56);
    v193 = v621;
    swift_beginAccess();
    v194 = *(_BYTE *)(v193 + 56);
    if ((v192 & 1) != 0)
    {
      if (!*(_BYTE *)(v193 + 56))
        return 0;
    }
    else
    {
      if (v191 != *(_DWORD *)(v193 + 52))
        v194 = 1;
      if ((v194 & 1) != 0)
        return 0;
    }
    v195 = v620;
    swift_beginAccess();
    v196 = *(double *)(v195 + 64);
    v197 = *(_BYTE *)(v195 + 72);
    v198 = v621;
    v199 = (double *)(v621 + 64);
    swift_beginAccess();
    v200 = *(_BYTE *)(v198 + 72);
    if ((v197 & 1) != 0)
    {
      if (!*(_BYTE *)(v198 + 72))
        return 0;
    }
    else
    {
      if (v196 != *v199)
        v200 = 1;
      if ((v200 & 1) != 0)
        return 0;
    }
    v201 = v620;
    swift_beginAccess();
    v202 = *(_DWORD *)(v201 + 76);
    v203 = *(_BYTE *)(v201 + 80);
    v204 = v621;
    swift_beginAccess();
    v205 = *(_BYTE *)(v204 + 80);
    if ((v203 & 1) != 0)
    {
      if (!*(_BYTE *)(v204 + 80))
        return 0;
    }
    else
    {
      if (v202 != *(_DWORD *)(v204 + 76))
        v205 = 1;
      if ((v205 & 1) != 0)
        return 0;
    }
    v206 = v620;
    swift_beginAccess();
    v207 = *(double *)(v206 + 88);
    v208 = *(_BYTE *)(v206 + 96);
    v209 = v621;
    v210 = (double *)(v621 + 88);
    swift_beginAccess();
    v211 = *(_BYTE *)(v209 + 96);
    if ((v208 & 1) != 0)
    {
      if (!*(_BYTE *)(v209 + 96))
        return 0;
    }
    else
    {
      if (v207 != *v210)
        v211 = 1;
      if ((v211 & 1) != 0)
        return 0;
    }
    v212 = v620;
    swift_beginAccess();
    v213 = *(_QWORD *)(v212 + 104);
    v214 = *(_QWORD *)(v212 + 112);
    v215 = v621;
    swift_beginAccess();
    v216 = *(_QWORD *)(v215 + 112);
    if (!v214)
    {
      if (v216)
        return 0;
LABEL_42:
      v218 = v620;
      swift_beginAccess();
      v219 = *(double *)(v218 + 120);
      v220 = *(_BYTE *)(v218 + 128);
      v221 = v621;
      v222 = (double *)(v621 + 120);
      swift_beginAccess();
      v223 = *(_BYTE *)(v221 + 128);
      if ((v220 & 1) == 0)
      {
        if (v219 != *v222)
          v223 = 1;
        if ((v223 & 1) != 0)
          return 0;
LABEL_48:
        v224 = v620
             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__joints;
        swift_beginAccess();
        outlined init with copy of (Int32, Matrix2dPB)(v224, (uint64_t)v176, &demangling cache variable for type metadata for PoseJointsDataPB?);
        v225 = v621;
        v226 = v621
             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__joints;
        swift_beginAccess();
        v227 = v619;
        v228 = v619 + *(int *)(v166 + 48);
        outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v176, v619, &demangling cache variable for type metadata for PoseJointsDataPB?);
        outlined init with copy of (Int32, Matrix2dPB)(v226, v228, &demangling cache variable for type metadata for PoseJointsDataPB?);
        v229 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v163 + 48);
        if (v229(v227, 1, v162) == 1)
        {
          v230 = v620;
          swift_retain();
          swift_retain();
          outlined destroy of Coordinate3DPB?((uint64_t)v176, &demangling cache variable for type metadata for PoseJointsDataPB?);
          v231 = v229(v228, 1, v162);
          v232 = v230;
          v233 = v225;
          if (v231 == 1)
          {
            outlined destroy of Coordinate3DPB?(v619, &demangling cache variable for type metadata for PoseJointsDataPB?);
            goto LABEL_56;
          }
        }
        else
        {
          outlined init with copy of (Int32, Matrix2dPB)(v227, (uint64_t)v172, &demangling cache variable for type metadata for PoseJointsDataPB?);
          if (v229(v228, 1, v162) != 1)
          {
            v234 = v616;
            outlined init with take of Matrix2dPB(v228, v616, type metadata accessor for PoseJointsDataPB);
            v235 = v620;
            swift_retain();
            v233 = v621;
            swift_retain();
            v236 = specialized static PoseJointsDataPB.== infix(_:_:)((uint64_t)v172, v234);
            outlined destroy of Matrix3x3PB(v234, type metadata accessor for PoseJointsDataPB);
            outlined destroy of Coordinate3DPB?((uint64_t)v176, &demangling cache variable for type metadata for PoseJointsDataPB?);
            outlined destroy of Matrix3x3PB((uint64_t)v172, type metadata accessor for PoseJointsDataPB);
            v232 = v235;
            outlined destroy of Coordinate3DPB?(v227, &demangling cache variable for type metadata for PoseJointsDataPB?);
            if ((v236 & 1) == 0)
              goto LABEL_68;
LABEL_56:
            v237 = (unsigned __int8 *)(v232
                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDown);
            swift_beginAccess();
            v238 = *v237;
            v239 = (unsigned __int8 *)(v233
                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDown);
            swift_beginAccess();
            v240 = *v239;
            if (v238 == 2)
            {
              if (v240 != 2)
                goto LABEL_68;
            }
            else if (v240 == 2 || ((((v240 & 1) == 0) ^ v238) & 1) == 0)
            {
              goto LABEL_68;
            }
            v241 = v620
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__worldPoseTransform;
            swift_beginAccess();
            v242 = v617;
            outlined init with copy of (Int32, Matrix2dPB)(v241, v617, &demangling cache variable for type metadata for Matrix2dPB?);
            v243 = v621
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__worldPoseTransform;
            swift_beginAccess();
            v244 = v618;
            v245 = v618 + *(int *)(v613 + 48);
            outlined init with copy of (Int32, Matrix2dPB)(v242, v618, &demangling cache variable for type metadata for Matrix2dPB?);
            outlined init with copy of (Int32, Matrix2dPB)(v243, v245, &demangling cache variable for type metadata for Matrix2dPB?);
            v246 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v614 + 48);
            v247 = v615;
            if (v246(v244, 1, v615) == 1)
            {
              outlined destroy of Coordinate3DPB?(v617, &demangling cache variable for type metadata for Matrix2dPB?);
              if (v246(v245, 1, v247) == 1)
              {
                outlined destroy of Coordinate3DPB?(v618, &demangling cache variable for type metadata for Matrix2dPB?);
                goto LABEL_72;
              }
            }
            else
            {
              v248 = v612;
              outlined init with copy of (Int32, Matrix2dPB)(v618, v612, &demangling cache variable for type metadata for Matrix2dPB?);
              if (v246(v245, 1, v247) != 1)
              {
                v251 = v611;
                outlined init with take of Matrix2dPB(v245, v611, type metadata accessor for Matrix2dPB);
                v252 = specialized static Matrix2dPB.== infix(_:_:)(v248, v251);
                outlined destroy of Matrix3x3PB(v251, type metadata accessor for Matrix2dPB);
                outlined destroy of Coordinate3DPB?(v617, &demangling cache variable for type metadata for Matrix2dPB?);
                outlined destroy of Matrix3x3PB(v248, type metadata accessor for Matrix2dPB);
                outlined destroy of Coordinate3DPB?(v618, &demangling cache variable for type metadata for Matrix2dPB?);
                if ((v252 & 1) == 0)
                  goto LABEL_68;
LABEL_72:
                v253 = (int *)(v620
                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairTrue);
                swift_beginAccess();
                v254 = *v253;
                v255 = *((_BYTE *)v253 + 4);
                v256 = v621
                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairTrue;
                swift_beginAccess();
                if ((v255 & 1) != 0)
                {
                  if ((*(_BYTE *)(v256 + 4) & 1) == 0)
                    goto LABEL_68;
                }
                else if ((*(_BYTE *)(v256 + 4) & 1) != 0 || v254 != *(_DWORD *)v256)
                {
                  goto LABEL_68;
                }
                v257 = (int *)(v620
                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairFalse);
                swift_beginAccess();
                v258 = *v257;
                v259 = *((_BYTE *)v257 + 4);
                v260 = v621
                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairFalse;
                swift_beginAccess();
                if ((v259 & 1) != 0)
                {
                  if ((*(_BYTE *)(v260 + 4) & 1) == 0)
                    goto LABEL_68;
                }
                else if ((*(_BYTE *)(v260 + 4) & 1) != 0 || v258 != *(_DWORD *)v260)
                {
                  goto LABEL_68;
                }
                v261 = (uint64_t *)(v620
                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gesture);
                swift_beginAccess();
                v262 = *v261;
                v263 = v261[1];
                v264 = (_QWORD *)(v621
                                + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gesture);
                swift_beginAccess();
                v265 = v264[1];
                if (v263)
                {
                  if (!v265
                    || (v262 != *v264 || v263 != v265) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                  {
                    goto LABEL_68;
                  }
                }
                else if (v265)
                {
                  goto LABEL_68;
                }
                v266 = (unsigned __int8 *)(v620
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gradeApproval);
                swift_beginAccess();
                v267 = *v266;
                v268 = (unsigned __int8 *)(v621
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gradeApproval);
                swift_beginAccess();
                v269 = *v268;
                if (v267 == 2)
                {
                  if (v269 != 2)
                    goto LABEL_68;
                }
                else if (v269 == 2 || ((((v269 & 1) == 0) ^ v267) & 1) == 0)
                {
                  goto LABEL_68;
                }
                v270 = (unsigned __int8 *)(v620
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__meshTntFingerLabel);
                swift_beginAccess();
                v271 = *v270;
                v272 = (unsigned __int8 *)(v621
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__meshTntFingerLabel);
                swift_beginAccess();
                v273 = *v272;
                if (v271 == 2)
                {
                  if (v273 != 2)
                    goto LABEL_68;
                }
                else if (v273 == 2 || ((((v273 & 1) == 0) ^ v271) & 1) == 0)
                {
                  goto LABEL_68;
                }
                v274 = (uint64_t *)(v620
                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality0);
                swift_beginAccess();
                v275 = *v274;
                v276 = v274[1];
                v277 = (_QWORD *)(v621
                                + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality0);
                swift_beginAccess();
                v278 = v277[1];
                if (v276)
                {
                  if (!v278
                    || (v275 != *v277 || v276 != v278) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                  {
                    goto LABEL_68;
                  }
                }
                else if (v278)
                {
                  goto LABEL_68;
                }
                v279 = (uint64_t *)(v620
                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality1);
                swift_beginAccess();
                v280 = *v279;
                v281 = v279[1];
                v282 = (_QWORD *)(v621
                                + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality1);
                swift_beginAccess();
                v283 = v282[1];
                if (v281)
                {
                  if (!v283
                    || (v280 != *v282 || v281 != v283) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                  {
                    goto LABEL_68;
                  }
                }
                else if (v283)
                {
                  goto LABEL_68;
                }
                v284 = (uint64_t *)(v620
                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__goodPoseTwoViews);
                swift_beginAccess();
                v285 = *v284;
                v286 = v284[1];
                v287 = (_QWORD *)(v621
                                + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__goodPoseTwoViews);
                swift_beginAccess();
                v288 = v287[1];
                if (v286)
                {
                  if (!v288
                    || (v285 != *v287 || v286 != v288) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                  {
                    goto LABEL_68;
                  }
                }
                else if (v288)
                {
                  goto LABEL_68;
                }
                v289 = (uint64_t *)(v620
                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__visibleManualTwoViews);
                swift_beginAccess();
                v290 = *v289;
                v291 = v289[1];
                v292 = (_QWORD *)(v621
                                + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__visibleManualTwoViews);
                swift_beginAccess();
                v293 = v292[1];
                if (v291)
                {
                  if (!v293
                    || (v290 != *v292 || v291 != v293) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                  {
                    goto LABEL_68;
                  }
                }
                else if (v293)
                {
                  goto LABEL_68;
                }
                v294 = (unsigned __int8 *)(v620
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handInMCam);
                swift_beginAccess();
                v295 = *v294;
                v296 = (unsigned __int8 *)(v621
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handInMCam);
                swift_beginAccess();
                v297 = *v296;
                if (v295 == 2)
                {
                  if (v297 != 2)
                    goto LABEL_68;
                }
                else if (v297 == 2 || ((((v297 & 1) == 0) ^ v295) & 1) == 0)
                {
                  goto LABEL_68;
                }
                v298 = v620
                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__motionSpeed;
                swift_beginAccess();
                v299 = *(double *)v298;
                v300 = *(_BYTE *)(v298 + 8);
                v301 = v621
                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__motionSpeed;
                swift_beginAccess();
                if ((v300 & 1) != 0)
                {
                  if ((*(_BYTE *)(v301 + 8) & 1) == 0)
                    goto LABEL_68;
                }
                else if ((*(_BYTE *)(v301 + 8) & 1) != 0 || v299 != *(double *)v301)
                {
                  goto LABEL_68;
                }
                v302 = (unsigned __int8 *)(v620
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handFullyInFov);
                swift_beginAccess();
                v303 = *v302;
                v304 = (unsigned __int8 *)(v621
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handFullyInFov);
                swift_beginAccess();
                v305 = *v304;
                if (v303 == 2)
                {
                  if (v305 != 2)
                    goto LABEL_68;
                }
                else if (v305 == 2 || ((((v305 & 1) == 0) ^ v303) & 1) == 0)
                {
                  goto LABEL_68;
                }
                v306 = (int *)(v620
                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gestureVideoID);
                swift_beginAccess();
                v307 = *v306;
                v308 = *((_BYTE *)v306 + 4);
                v309 = v621
                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gestureVideoID;
                swift_beginAccess();
                if ((v308 & 1) != 0)
                {
                  if ((*(_BYTE *)(v309 + 4) & 1) == 0)
                    goto LABEL_68;
                }
                else if ((*(_BYTE *)(v309 + 4) & 1) != 0 || v307 != *(_DWORD *)v309)
                {
                  goto LABEL_68;
                }
                v310 = (unsigned __int8 *)(v620
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predictedHandIsLeft);
                swift_beginAccess();
                v311 = *v310;
                v312 = (unsigned __int8 *)(v621
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predictedHandIsLeft);
                swift_beginAccess();
                v313 = *v312;
                if (v311 == 2)
                {
                  if (v313 != 2)
                    goto LABEL_68;
                }
                else if (v313 == 2 || ((((v313 & 1) == 0) ^ v311) & 1) == 0)
                {
                  goto LABEL_68;
                }
                v314 = v620
                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handCenter;
                swift_beginAccess();
                v315 = v519;
                outlined init with copy of (Int32, Matrix2dPB)(v314, v519, &demangling cache variable for type metadata for Coordinate3DPB?);
                v316 = v621
                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handCenter;
                swift_beginAccess();
                v317 = v522;
                v318 = v522 + *(int *)(v543 + 48);
                outlined init with copy of (Int32, Matrix2dPB)(v315, v522, &demangling cache variable for type metadata for Coordinate3DPB?);
                outlined init with copy of (Int32, Matrix2dPB)(v316, v318, &demangling cache variable for type metadata for Coordinate3DPB?);
                v319 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v521 + 48);
                if (v319(v317, 1, v546) == 1)
                {
                  outlined destroy of Coordinate3DPB?(v519, &demangling cache variable for type metadata for Coordinate3DPB?);
                  if (v319(v318, 1, v546) == 1)
                  {
                    outlined destroy of Coordinate3DPB?(v522, &demangling cache variable for type metadata for Coordinate3DPB?);
                    goto LABEL_159;
                  }
                }
                else
                {
                  outlined init with copy of (Int32, Matrix2dPB)(v522, (uint64_t)v520, &demangling cache variable for type metadata for Coordinate3DPB?);
                  if (v319(v318, 1, v546) != 1)
                  {
                    v320 = v547;
                    outlined init with take of Matrix2dPB(v318, (uint64_t)v547, type metadata accessor for Coordinate3DPB);
                    v321 = v520;
                    v322 = specialized static Coordinate3DPB.== infix(_:_:)(v520, v320);
                    outlined destroy of Matrix3x3PB((uint64_t)v320, type metadata accessor for Coordinate3DPB);
                    outlined destroy of Coordinate3DPB?(v519, &demangling cache variable for type metadata for Coordinate3DPB?);
                    outlined destroy of Matrix3x3PB((uint64_t)v321, type metadata accessor for Coordinate3DPB);
                    outlined destroy of Coordinate3DPB?(v522, &demangling cache variable for type metadata for Coordinate3DPB?);
                    if ((v322 & 1) == 0)
                      goto LABEL_68;
LABEL_159:
                    v323 = v620
                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handSize;
                    swift_beginAccess();
                    v324 = *(double *)v323;
                    v325 = *(_BYTE *)(v323 + 8);
                    v326 = v621
                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handSize;
                    swift_beginAccess();
                    if ((v325 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v326 + 8) & 1) == 0)
                        goto LABEL_68;
                    }
                    else if ((*(_BYTE *)(v326 + 8) & 1) != 0 || v324 != *(double *)v326)
                    {
                      goto LABEL_68;
                    }
                    v327 = v620
                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__hoverUncertainty;
                    swift_beginAccess();
                    v328 = *(double *)v327;
                    v329 = *(_BYTE *)(v327 + 8);
                    v330 = v621
                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__hoverUncertainty;
                    swift_beginAccess();
                    if ((v329 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v330 + 8) & 1) == 0)
                        goto LABEL_68;
                    }
                    else if ((*(_BYTE *)(v330 + 8) & 1) != 0 || v328 != *(double *)v330)
                    {
                      goto LABEL_68;
                    }
                    v331 = v620
                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__upVector;
                    swift_beginAccess();
                    v332 = v523;
                    outlined init with copy of (Int32, Matrix2dPB)(v331, v523, &demangling cache variable for type metadata for Coordinate3DPB?);
                    v333 = v621
                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__upVector;
                    swift_beginAccess();
                    v334 = v525;
                    v335 = v525 + *(int *)(v543 + 48);
                    outlined init with copy of (Int32, Matrix2dPB)(v332, v525, &demangling cache variable for type metadata for Coordinate3DPB?);
                    outlined init with copy of (Int32, Matrix2dPB)(v333, v335, &demangling cache variable for type metadata for Coordinate3DPB?);
                    if (v319(v334, 1, v546) == 1)
                    {
                      outlined destroy of Coordinate3DPB?(v523, &demangling cache variable for type metadata for Coordinate3DPB?);
                      if (v319(v335, 1, v546) == 1)
                      {
                        outlined destroy of Coordinate3DPB?(v525, &demangling cache variable for type metadata for Coordinate3DPB?);
                        goto LABEL_176;
                      }
                    }
                    else
                    {
                      outlined init with copy of (Int32, Matrix2dPB)(v525, (uint64_t)v524, &demangling cache variable for type metadata for Coordinate3DPB?);
                      if (v319(v335, 1, v546) != 1)
                      {
                        v336 = v547;
                        outlined init with take of Matrix2dPB(v335, (uint64_t)v547, type metadata accessor for Coordinate3DPB);
                        v337 = v524;
                        v338 = specialized static Coordinate3DPB.== infix(_:_:)(v524, v336);
                        outlined destroy of Matrix3x3PB((uint64_t)v336, type metadata accessor for Coordinate3DPB);
                        outlined destroy of Coordinate3DPB?(v523, &demangling cache variable for type metadata for Coordinate3DPB?);
                        outlined destroy of Matrix3x3PB((uint64_t)v337, type metadata accessor for Coordinate3DPB);
                        outlined destroy of Coordinate3DPB?(v525, &demangling cache variable for type metadata for Coordinate3DPB?);
                        if ((v338 & 1) == 0)
                          goto LABEL_68;
LABEL_176:
                        v339 = (int *)(v620
                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__primaryCameraID);
                        swift_beginAccess();
                        v340 = *v339;
                        v341 = *((_BYTE *)v339 + 4);
                        v342 = v621
                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__primaryCameraID;
                        swift_beginAccess();
                        if ((v341 & 1) != 0)
                        {
                          if ((*(_BYTE *)(v342 + 4) & 1) == 0)
                            goto LABEL_68;
                        }
                        else if ((*(_BYTE *)(v342 + 4) & 1) != 0 || v340 != *(_DWORD *)v342)
                        {
                          goto LABEL_68;
                        }
                        v343 = (int *)(v620
                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__secondaryCameraID);
                        swift_beginAccess();
                        v344 = *v343;
                        v345 = *((_BYTE *)v343 + 4);
                        v346 = v621
                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__secondaryCameraID;
                        swift_beginAccess();
                        if ((v345 & 1) != 0)
                        {
                          if ((*(_BYTE *)(v346 + 4) & 1) == 0)
                            goto LABEL_68;
                        }
                        else if ((*(_BYTE *)(v346 + 4) & 1) != 0 || v344 != *(_DWORD *)v346)
                        {
                          goto LABEL_68;
                        }
                        v347 = (uint64_t *)(v620
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
                        swift_beginAccess();
                        v348 = *v347;
                        v349 = (uint64_t *)(v621
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
                        swift_beginAccess();
                        v350 = *v349;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        specialized static Dictionary<>.== infix(_:_:)(v348, v350);
                        v352 = v351;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v352 & 1) == 0)
                          goto LABEL_68;
                        v353 = v620
                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInternalData;
                        swift_beginAccess();
                        v354 = v528;
                        outlined init with copy of (Int32, Matrix2dPB)(v353, v528, &demangling cache variable for type metadata for PinchInternalDataPB?);
                        v355 = v621
                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInternalData;
                        swift_beginAccess();
                        v356 = v532;
                        v357 = v532 + *(int *)(v526 + 48);
                        outlined init with copy of (Int32, Matrix2dPB)(v354, v532, &demangling cache variable for type metadata for PinchInternalDataPB?);
                        outlined init with copy of (Int32, Matrix2dPB)(v355, v357, &demangling cache variable for type metadata for PinchInternalDataPB?);
                        v358 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v527 + 48);
                        if (v358(v356, 1, v530) == 1)
                        {
                          outlined destroy of Coordinate3DPB?(v528, &demangling cache variable for type metadata for PinchInternalDataPB?);
                          if (v358(v357, 1, v530) == 1)
                          {
                            outlined destroy of Coordinate3DPB?(v532, &demangling cache variable for type metadata for PinchInternalDataPB?);
                            goto LABEL_194;
                          }
                        }
                        else
                        {
                          outlined init with copy of (Int32, Matrix2dPB)(v532, v529, &demangling cache variable for type metadata for PinchInternalDataPB?);
                          if (v358(v357, 1, v530) != 1)
                          {
                            v359 = v531;
                            outlined init with take of Matrix2dPB(v357, v531, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
                            v360 = v529;
                            v361 = specialized static PinchInternalDataPB.== infix(_:_:)(v529, v359);
                            outlined destroy of Matrix3x3PB(v359, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
                            outlined destroy of Coordinate3DPB?(v528, &demangling cache variable for type metadata for PinchInternalDataPB?);
                            outlined destroy of Matrix3x3PB(v360, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
                            outlined destroy of Coordinate3DPB?(v532, &demangling cache variable for type metadata for PinchInternalDataPB?);
                            if ((v361 & 1) == 0)
                              goto LABEL_68;
LABEL_194:
                            v362 = (int *)(v620
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__scheduledDetection);
                            swift_beginAccess();
                            v363 = *v362;
                            v364 = *((_BYTE *)v362 + 4);
                            v365 = v621
                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__scheduledDetection;
                            swift_beginAccess();
                            if ((v364 & 1) != 0)
                            {
                              if ((*(_BYTE *)(v365 + 4) & 1) == 0)
                                goto LABEL_68;
                            }
                            else if ((*(_BYTE *)(v365 + 4) & 1) != 0 || v363 != *(_DWORD *)v365)
                            {
                              goto LABEL_68;
                            }
                            v366 = v620
                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__dtHoverDistance;
                            swift_beginAccess();
                            v367 = *(double *)v366;
                            v368 = *(_BYTE *)(v366 + 8);
                            v369 = v621
                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__dtHoverDistance;
                            swift_beginAccess();
                            if ((v368 & 1) != 0)
                            {
                              if ((*(_BYTE *)(v369 + 8) & 1) == 0)
                                goto LABEL_68;
                            }
                            else if ((*(_BYTE *)(v369 + 8) & 1) != 0 || v367 != *(double *)v369)
                            {
                              goto LABEL_68;
                            }
                            v370 = v620
                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
                            swift_beginAccess();
                            v371 = v535;
                            outlined init with copy of (Int32, Matrix2dPB)(v370, v535, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
                            v372 = v621
                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
                            swift_beginAccess();
                            v373 = v539;
                            v374 = v539 + *(int *)(v533 + 48);
                            outlined init with copy of (Int32, Matrix2dPB)(v371, v539, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
                            outlined init with copy of (Int32, Matrix2dPB)(v372, v374, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
                            v375 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v534 + 48);
                            if (v375(v373, 1, v537) == 1)
                            {
                              outlined destroy of Coordinate3DPB?(v535, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
                              if (v375(v374, 1, v537) == 1)
                              {
                                outlined destroy of Coordinate3DPB?(v539, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
                                goto LABEL_211;
                              }
                            }
                            else
                            {
                              outlined init with copy of (Int32, Matrix2dPB)(v539, v536, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
                              if (v375(v374, 1, v537) != 1)
                              {
                                v376 = v538;
                                outlined init with take of Matrix2dPB(v374, v538, type metadata accessor for ObjectInteractionFADataPB);
                                v377 = v536;
                                v378 = specialized static ObjectInteractionFADataPB.== infix(_:_:)(v536, v376);
                                outlined destroy of Matrix3x3PB(v376, type metadata accessor for ObjectInteractionFADataPB);
                                outlined destroy of Coordinate3DPB?(v535, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
                                outlined destroy of Matrix3x3PB(v377, type metadata accessor for ObjectInteractionFADataPB);
                                outlined destroy of Coordinate3DPB?(v539, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
                                if ((v378 & 1) == 0)
                                  goto LABEL_68;
LABEL_211:
                                v379 = (uint64_t *)(v620
                                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceScore);
                                swift_beginAccess();
                                v380 = *v379;
                                v381 = (uint64_t *)(v621
                                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceScore);
                                swift_beginAccess();
                                v382 = *v381;
                                swift_bridgeObjectRetain();
                                swift_bridgeObjectRetain();
                                v383 = specialized static Array<A>.== infix(_:_:)(v380, v382);
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                if ((v383 & 1) == 0)
                                  goto LABEL_68;
                                v384 = (uint64_t *)(v620
                                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceClass);
                                swift_beginAccess();
                                v385 = *v384;
                                v386 = *((_BYTE *)v384 + 8);
                                v387 = *((_BYTE *)v384 + 9);
                                v388 = v621
                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceClass;
                                swift_beginAccess();
                                if ((v387 & 1) != 0)
                                {
                                  if ((*(_BYTE *)(v388 + 9) & 1) == 0)
                                    goto LABEL_68;
                                }
                                else if ((*(_BYTE *)(v388 + 9) & 1) != 0
                                       || (specialized == infix<A>(_:_:)(v385, v386 & 1, *(_QWORD *)v388, *(_BYTE *)(v388 + 8) & 1) & 1) == 0)
                                {
                                  goto LABEL_68;
                                }
                                v389 = v620
                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detection3DHandCenter;
                                swift_beginAccess();
                                v390 = v540;
                                outlined init with copy of (Int32, Matrix2dPB)(v389, v540, &demangling cache variable for type metadata for Coordinate3DPB?);
                                v391 = v621
                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detection3DHandCenter;
                                swift_beginAccess();
                                v392 = v542;
                                v393 = v542 + *(int *)(v543 + 48);
                                outlined init with copy of (Int32, Matrix2dPB)(v390, v542, &demangling cache variable for type metadata for Coordinate3DPB?);
                                outlined init with copy of (Int32, Matrix2dPB)(v391, v393, &demangling cache variable for type metadata for Coordinate3DPB?);
                                if (v319(v392, 1, v546) == 1)
                                {
                                  outlined destroy of Coordinate3DPB?(v540, &demangling cache variable for type metadata for Coordinate3DPB?);
                                  if (v319(v393, 1, v546) == 1)
                                  {
                                    outlined destroy of Coordinate3DPB?(v542, &demangling cache variable for type metadata for Coordinate3DPB?);
                                    goto LABEL_224;
                                  }
                                }
                                else
                                {
                                  outlined init with copy of (Int32, Matrix2dPB)(v542, (uint64_t)v541, &demangling cache variable for type metadata for Coordinate3DPB?);
                                  if (v319(v393, 1, v546) != 1)
                                  {
                                    v394 = v547;
                                    outlined init with take of Matrix2dPB(v393, (uint64_t)v547, type metadata accessor for Coordinate3DPB);
                                    v395 = v541;
                                    v396 = specialized static Coordinate3DPB.== infix(_:_:)(v541, v394);
                                    outlined destroy of Matrix3x3PB((uint64_t)v394, type metadata accessor for Coordinate3DPB);
                                    outlined destroy of Coordinate3DPB?(v540, &demangling cache variable for type metadata for Coordinate3DPB?);
                                    outlined destroy of Matrix3x3PB((uint64_t)v395, type metadata accessor for Coordinate3DPB);
                                    outlined destroy of Coordinate3DPB?(v542, &demangling cache variable for type metadata for Coordinate3DPB?);
                                    if ((v396 & 1) == 0)
                                      goto LABEL_68;
LABEL_224:
                                    v397 = v620
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predicted3DHandCenter;
                                    swift_beginAccess();
                                    v398 = v544;
                                    outlined init with copy of (Int32, Matrix2dPB)(v397, v544, &demangling cache variable for type metadata for Coordinate3DPB?);
                                    v399 = v621
                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predicted3DHandCenter;
                                    swift_beginAccess();
                                    v400 = v548;
                                    v401 = v548 + *(int *)(v543 + 48);
                                    outlined init with copy of (Int32, Matrix2dPB)(v398, v548, &demangling cache variable for type metadata for Coordinate3DPB?);
                                    outlined init with copy of (Int32, Matrix2dPB)(v399, v401, &demangling cache variable for type metadata for Coordinate3DPB?);
                                    if (v319(v400, 1, v546) == 1)
                                    {
                                      outlined destroy of Coordinate3DPB?(v544, &demangling cache variable for type metadata for Coordinate3DPB?);
                                      if (v319(v401, 1, v546) == 1)
                                      {
                                        outlined destroy of Coordinate3DPB?(v548, &demangling cache variable for type metadata for Coordinate3DPB?);
                                        goto LABEL_231;
                                      }
                                    }
                                    else
                                    {
                                      outlined init with copy of (Int32, Matrix2dPB)(v548, (uint64_t)v545, &demangling cache variable for type metadata for Coordinate3DPB?);
                                      if (v319(v401, 1, v546) != 1)
                                      {
                                        v402 = v547;
                                        outlined init with take of Matrix2dPB(v401, (uint64_t)v547, type metadata accessor for Coordinate3DPB);
                                        v403 = v545;
                                        v404 = specialized static Coordinate3DPB.== infix(_:_:)(v545, v402);
                                        outlined destroy of Matrix3x3PB((uint64_t)v402, type metadata accessor for Coordinate3DPB);
                                        outlined destroy of Coordinate3DPB?(v544, &demangling cache variable for type metadata for Coordinate3DPB?);
                                        outlined destroy of Matrix3x3PB((uint64_t)v403, type metadata accessor for Coordinate3DPB);
                                        outlined destroy of Coordinate3DPB?(v548, &demangling cache variable for type metadata for Coordinate3DPB?);
                                        if ((v404 & 1) == 0)
                                          goto LABEL_68;
LABEL_231:
                                        v405 = (uint64_t *)(v620
                                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detectionSpecs);
                                        swift_beginAccess();
                                        v406 = *v405;
                                        v407 = (uint64_t *)(v621
                                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detectionSpecs);
                                        swift_beginAccess();
                                        v408 = *v407;
                                        swift_bridgeObjectRetain();
                                        swift_bridgeObjectRetain();
                                        v409 = specialized static Array<A>.== infix(_:_:)(v406, v408);
                                        swift_bridgeObjectRelease();
                                        swift_bridgeObjectRelease();
                                        if ((v409 & 1) == 0)
                                          goto LABEL_68;
                                        v410 = (uint64_t *)(v620
                                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cropBoundingBox);
                                        swift_beginAccess();
                                        v411 = *v410;
                                        v412 = (uint64_t *)(v621
                                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cropBoundingBox);
                                        swift_beginAccess();
                                        v413 = *v412;
                                        swift_bridgeObjectRetain();
                                        swift_bridgeObjectRetain();
                                        v414 = specialized static Array<A>.== infix(_:_:)(v411, v413);
                                        swift_bridgeObjectRelease();
                                        swift_bridgeObjectRelease();
                                        if ((v414 & 1) == 0)
                                          goto LABEL_68;
                                        v415 = v620
                                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__trackingHealthScore;
                                        swift_beginAccess();
                                        v416 = *(double *)v415;
                                        v417 = *(_BYTE *)(v415 + 8);
                                        v418 = v621
                                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__trackingHealthScore;
                                        swift_beginAccess();
                                        if ((v417 & 1) != 0)
                                        {
                                          if ((*(_BYTE *)(v418 + 8) & 1) == 0)
                                            goto LABEL_68;
                                        }
                                        else if ((*(_BYTE *)(v418 + 8) & 1) != 0 || v416 != *(double *)v418)
                                        {
                                          goto LABEL_68;
                                        }
                                        v419 = v620
                                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
                                        swift_beginAccess();
                                        v420 = v551;
                                        outlined init with copy of (Int32, Matrix2dPB)(v419, v551, &demangling cache variable for type metadata for CMTimeProtobuf?);
                                        v421 = v621
                                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
                                        swift_beginAccess();
                                        v422 = v555;
                                        v423 = v555 + *(int *)(v549 + 48);
                                        outlined init with copy of (Int32, Matrix2dPB)(v420, v555, &demangling cache variable for type metadata for CMTimeProtobuf?);
                                        outlined init with copy of (Int32, Matrix2dPB)(v421, v423, &demangling cache variable for type metadata for CMTimeProtobuf?);
                                        v424 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v550 + 48);
                                        if (v424(v422, 1, v553) == 1)
                                        {
                                          outlined destroy of Coordinate3DPB?(v551, &demangling cache variable for type metadata for CMTimeProtobuf?);
                                          if (v424(v423, 1, v553) == 1)
                                          {
                                            outlined destroy of Coordinate3DPB?(v555, &demangling cache variable for type metadata for CMTimeProtobuf?);
                                            goto LABEL_245;
                                          }
                                        }
                                        else
                                        {
                                          outlined init with copy of (Int32, Matrix2dPB)(v555, v552, &demangling cache variable for type metadata for CMTimeProtobuf?);
                                          if (v424(v423, 1, v553) != 1)
                                          {
                                            v425 = v554;
                                            outlined init with take of Matrix2dPB(v423, v554, type metadata accessor for CMTimeProtobuf);
                                            v426 = v552;
                                            v427 = specialized static CMTimeProtobuf.== infix(_:_:)(v552, v425);
                                            outlined destroy of Matrix3x3PB(v425, type metadata accessor for CMTimeProtobuf);
                                            outlined destroy of Coordinate3DPB?(v551, &demangling cache variable for type metadata for CMTimeProtobuf?);
                                            outlined destroy of Matrix3x3PB(v426, type metadata accessor for CMTimeProtobuf);
                                            outlined destroy of Coordinate3DPB?(v555, &demangling cache variable for type metadata for CMTimeProtobuf?);
                                            if ((v427 & 1) == 0)
                                              goto LABEL_68;
LABEL_245:
                                            v428 = (unsigned __int8 *)(v620
                                                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTap);
                                            swift_beginAccess();
                                            v429 = *v428;
                                            v430 = (unsigned __int8 *)(v621
                                                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTap);
                                            swift_beginAccess();
                                            v431 = *v430;
                                            if (v429 == 2)
                                            {
                                              if (v431 != 2)
                                                goto LABEL_68;
                                            }
                                            else if (v431 == 2 || ((((v431 & 1) == 0) ^ v429) & 1) == 0)
                                            {
                                              goto LABEL_68;
                                            }
                                            v432 = v620
                                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTapInternalData;
                                            swift_beginAccess();
                                            v433 = v558;
                                            outlined init with copy of (Int32, Matrix2dPB)(v432, v558, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
                                            v434 = v621
                                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTapInternalData;
                                            swift_beginAccess();
                                            v435 = v562;
                                            v436 = v562 + *(int *)(v556 + 48);
                                            outlined init with copy of (Int32, Matrix2dPB)(v433, v562, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
                                            outlined init with copy of (Int32, Matrix2dPB)(v434, v436, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
                                            v437 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v557 + 48);
                                            if (v437(v435, 1, v560) == 1)
                                            {
                                              outlined destroy of Coordinate3DPB?(v558, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
                                              if (v437(v436, 1, v560) == 1)
                                              {
                                                outlined destroy of Coordinate3DPB?(v562, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
                                                goto LABEL_257;
                                              }
                                            }
                                            else
                                            {
                                              outlined init with copy of (Int32, Matrix2dPB)(v562, v559, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
                                              if (v437(v436, 1, v560) != 1)
                                              {
                                                v438 = v561;
                                                outlined init with take of Matrix2dPB(v436, v561, type metadata accessor for MiddleDoubleTapInternalPB);
                                                v439 = v559;
                                                v440 = specialized static MiddleDoubleTapInternalPB.== infix(_:_:)(v559, v438);
                                                outlined destroy of Matrix3x3PB(v438, type metadata accessor for MiddleDoubleTapInternalPB);
                                                outlined destroy of Coordinate3DPB?(v558, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
                                                outlined destroy of Matrix3x3PB(v439, type metadata accessor for MiddleDoubleTapInternalPB);
                                                outlined destroy of Coordinate3DPB?(v562, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
                                                if ((v440 & 1) == 0)
                                                  goto LABEL_68;
LABEL_257:
                                                v441 = (uint64_t *)(v620
                                                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cancellationReason);
                                                swift_beginAccess();
                                                v442 = *v441;
                                                v443 = *((_BYTE *)v441 + 8);
                                                v444 = v621
                                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cancellationReason;
                                                swift_beginAccess();
                                                if ((v443 & 1) != 0)
                                                {
                                                  if ((*(_BYTE *)(v444 + 8) & 1) == 0)
                                                    goto LABEL_68;
                                                }
                                                else if ((*(_BYTE *)(v444 + 8) & 1) != 0 || v442 != *(_QWORD *)v444)
                                                {
                                                  goto LABEL_68;
                                                }
                                                v445 = v620
                                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtVisibility;
                                                swift_beginAccess();
                                                v446 = v565;
                                                outlined init with copy of (Int32, Matrix2dPB)(v445, v565, &demangling cache variable for type metadata for PartialHandMultiCam?);
                                                v447 = v621
                                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtVisibility;
                                                swift_beginAccess();
                                                v448 = v569;
                                                v449 = v569 + *(int *)(v563 + 48);
                                                outlined init with copy of (Int32, Matrix2dPB)(v446, v569, &demangling cache variable for type metadata for PartialHandMultiCam?);
                                                outlined init with copy of (Int32, Matrix2dPB)(v447, v449, &demangling cache variable for type metadata for PartialHandMultiCam?);
                                                v450 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v564 + 48);
                                                if (v450(v448, 1, v567) == 1)
                                                {
                                                  outlined destroy of Coordinate3DPB?(v565, &demangling cache variable for type metadata for PartialHandMultiCam?);
                                                  if (v450(v449, 1, v567) == 1)
                                                  {
                                                    outlined destroy of Coordinate3DPB?(v569, &demangling cache variable for type metadata for PartialHandMultiCam?);
                                                    goto LABEL_269;
                                                  }
                                                }
                                                else
                                                {
                                                  outlined init with copy of (Int32, Matrix2dPB)(v569, (uint64_t)v566, &demangling cache variable for type metadata for PartialHandMultiCam?);
                                                  if (v450(v449, 1, v567) != 1)
                                                  {
                                                    v451 = v568;
                                                    outlined init with take of Matrix2dPB(v449, (uint64_t)v568, type metadata accessor for PartialHandMultiCam);
                                                    v452 = v566;
                                                    v453 = specialized static PartialHandMultiCam.== infix(_:_:)(v566, v451);
                                                    outlined destroy of Matrix3x3PB((uint64_t)v451, type metadata accessor for PartialHandMultiCam);
                                                    outlined destroy of Coordinate3DPB?(v565, &demangling cache variable for type metadata for PartialHandMultiCam?);
                                                    outlined destroy of Matrix3x3PB((uint64_t)v452, type metadata accessor for PartialHandMultiCam);
                                                    outlined destroy of Coordinate3DPB?(v569, &demangling cache variable for type metadata for PartialHandMultiCam?);
                                                    if ((v453 & 1) == 0)
                                                      goto LABEL_68;
LABEL_269:
                                                    v454 = v620
                                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInfo;
                                                    swift_beginAccess();
                                                    v455 = v572;
                                                    outlined init with copy of (Int32, Matrix2dPB)(v454, v572, &demangling cache variable for type metadata for PinchInfoPB?);
                                                    v456 = v621
                                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInfo;
                                                    swift_beginAccess();
                                                    v457 = v576;
                                                    v458 = v576 + *(int *)(v570 + 48);
                                                    outlined init with copy of (Int32, Matrix2dPB)(v455, v576, &demangling cache variable for type metadata for PinchInfoPB?);
                                                    outlined init with copy of (Int32, Matrix2dPB)(v456, v458, &demangling cache variable for type metadata for PinchInfoPB?);
                                                    v459 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v571 + 48);
                                                    if (v459(v457, 1, v574) == 1)
                                                    {
                                                      outlined destroy of Coordinate3DPB?(v572, &demangling cache variable for type metadata for PinchInfoPB?);
                                                      if (v459(v458, 1, v574) == 1)
                                                      {
                                                        outlined destroy of Coordinate3DPB?(v576, &demangling cache variable for type metadata for PinchInfoPB?);
                                                        goto LABEL_276;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      outlined init with copy of (Int32, Matrix2dPB)(v576, (uint64_t)v573, &demangling cache variable for type metadata for PinchInfoPB?);
                                                      if (v459(v458, 1, v574) != 1)
                                                      {
                                                        v460 = v575;
                                                        outlined init with take of Matrix2dPB(v458, (uint64_t)v575, type metadata accessor for PinchInfoPB);
                                                        v461 = v573;
                                                        v462 = specialized static PinchInfoPB.== infix(_:_:)(v573, v460);
                                                        outlined destroy of Matrix3x3PB((uint64_t)v460, type metadata accessor for PinchInfoPB);
                                                        outlined destroy of Coordinate3DPB?(v572, &demangling cache variable for type metadata for PinchInfoPB?);
                                                        outlined destroy of Matrix3x3PB((uint64_t)v461, type metadata accessor for PinchInfoPB);
                                                        outlined destroy of Coordinate3DPB?(v576, &demangling cache variable for type metadata for PinchInfoPB?);
                                                        if ((v462 & 1) == 0)
                                                          goto LABEL_68;
LABEL_276:
                                                        v463 = v620
                                                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__actionInternal;
                                                        swift_beginAccess();
                                                        v464 = v579;
                                                        outlined init with copy of (Int32, Matrix2dPB)(v463, v579, &demangling cache variable for type metadata for ActionInternalPB?);
                                                        v465 = v621
                                                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__actionInternal;
                                                        swift_beginAccess();
                                                        v466 = v583;
                                                        v467 = v583 + *(int *)(v577 + 48);
                                                        outlined init with copy of (Int32, Matrix2dPB)(v464, v583, &demangling cache variable for type metadata for ActionInternalPB?);
                                                        outlined init with copy of (Int32, Matrix2dPB)(v465, v467, &demangling cache variable for type metadata for ActionInternalPB?);
                                                        v468 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v578 + 48);
                                                        if (v468(v466, 1, v581) == 1)
                                                        {
                                                          outlined destroy of Coordinate3DPB?(v579, &demangling cache variable for type metadata for ActionInternalPB?);
                                                          if (v468(v467, 1, v581) == 1)
                                                          {
                                                            outlined destroy of Coordinate3DPB?(v583, &demangling cache variable for type metadata for ActionInternalPB?);
                                                            goto LABEL_283;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          outlined init with copy of (Int32, Matrix2dPB)(v583, (uint64_t)v580, &demangling cache variable for type metadata for ActionInternalPB?);
                                                          if (v468(v467, 1, v581) != 1)
                                                          {
                                                            v469 = v582;
                                                            outlined init with take of Matrix2dPB(v467, (uint64_t)v582, type metadata accessor for ActionInternalPB);
                                                            v470 = v580;
                                                            v471 = specialized static ActionInternalPB.== infix(_:_:)(v580, v469);
                                                            outlined destroy of Matrix3x3PB((uint64_t)v469, type metadata accessor for ActionInternalPB);
                                                            outlined destroy of Coordinate3DPB?(v579, &demangling cache variable for type metadata for ActionInternalPB?);
                                                            outlined destroy of Matrix3x3PB((uint64_t)v470, type metadata accessor for ActionInternalPB);
                                                            outlined destroy of Coordinate3DPB?(v583, &demangling cache variable for type metadata for ActionInternalPB?);
                                                            if ((v471 & 1) == 0)
                                                              goto LABEL_68;
LABEL_283:
                                                            v472 = v620
                                                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__unsureInternal;
                                                            swift_beginAccess();
                                                            v473 = v586;
                                                            outlined init with copy of (Int32, Matrix2dPB)(v472, v586, &demangling cache variable for type metadata for UnsureInternalPB?);
                                                            v474 = v621
                                                                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__unsureInternal;
                                                            swift_beginAccess();
                                                            v475 = v590;
                                                            v476 = v590 + *(int *)(v584 + 48);
                                                            outlined init with copy of (Int32, Matrix2dPB)(v473, v590, &demangling cache variable for type metadata for UnsureInternalPB?);
                                                            outlined init with copy of (Int32, Matrix2dPB)(v474, v476, &demangling cache variable for type metadata for UnsureInternalPB?);
                                                            v477 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v585 + 48);
                                                            if (v477(v475, 1, v588) == 1)
                                                            {
                                                              outlined destroy of Coordinate3DPB?(v586, &demangling cache variable for type metadata for UnsureInternalPB?);
                                                              if (v477(v476, 1, v588) == 1)
                                                              {
                                                                outlined destroy of Coordinate3DPB?(v590, &demangling cache variable for type metadata for UnsureInternalPB?);
                                                                goto LABEL_290;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              outlined init with copy of (Int32, Matrix2dPB)(v590, v587, &demangling cache variable for type metadata for UnsureInternalPB?);
                                                              if (v477(v476, 1, v588) != 1)
                                                              {
                                                                v478 = v589;
                                                                outlined init with take of Matrix2dPB(v476, v589, type metadata accessor for UnsureInternalPB);
                                                                v479 = v587;
                                                                v480 = specialized static UnsureInternalPB.== infix(_:_:)(v587, v478);
                                                                outlined destroy of Matrix3x3PB(v478, type metadata accessor for UnsureInternalPB);
                                                                outlined destroy of Coordinate3DPB?(v586, &demangling cache variable for type metadata for UnsureInternalPB?);
                                                                outlined destroy of Matrix3x3PB(v479, type metadata accessor for UnsureInternalPB);
                                                                outlined destroy of Coordinate3DPB?(v590, &demangling cache variable for type metadata for UnsureInternalPB?);
                                                                if ((v480 & 1) == 0)
                                                                  goto LABEL_68;
LABEL_290:
                                                                v481 = v620
                                                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__recoverRepetitivePinchInternal;
                                                                swift_beginAccess();
                                                                v482 = v593;
                                                                outlined init with copy of (Int32, Matrix2dPB)(v481, v593, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
                                                                v483 = v621
                                                                     + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__recoverRepetitivePinchInternal;
                                                                swift_beginAccess();
                                                                v484 = v597;
                                                                v485 = v597 + *(int *)(v591 + 48);
                                                                outlined init with copy of (Int32, Matrix2dPB)(v482, v597, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
                                                                outlined init with copy of (Int32, Matrix2dPB)(v483, v485, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
                                                                v486 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v592 + 48);
                                                                if (v486(v484, 1, v595) == 1)
                                                                {
                                                                  outlined destroy of Coordinate3DPB?(v593, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
                                                                  if (v486(v485, 1, v595) == 1)
                                                                  {
                                                                    outlined destroy of Coordinate3DPB?(v597, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
                                                                    goto LABEL_297;
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  outlined init with copy of (Int32, Matrix2dPB)(v597, v594, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
                                                                  if (v486(v485, 1, v595) != 1)
                                                                  {
                                                                    v487 = v596;
                                                                    outlined init with take of Matrix2dPB(v485, v596, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
                                                                    v488 = v594;
                                                                    v489 = specialized static RecoverRepetitivePinchInternalDataPB.== infix(_:_:)(v594, v487);
                                                                    outlined destroy of Matrix3x3PB(v487, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
                                                                    outlined destroy of Coordinate3DPB?(v593, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
                                                                    outlined destroy of Matrix3x3PB(v488, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
                                                                    outlined destroy of Coordinate3DPB?(v597, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
                                                                    if ((v489 & 1) == 0)
                                                                      goto LABEL_68;
LABEL_297:
                                                                    v490 = v620
                                                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateInternal;
                                                                    swift_beginAccess();
                                                                    v491 = v600;
                                                                    outlined init with copy of (Int32, Matrix2dPB)(v490, v600, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
                                                                    v492 = v621
                                                                         + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateInternal;
                                                                    swift_beginAccess();
                                                                    v493 = v604;
                                                                    v494 = v604 + *(int *)(v598 + 48);
                                                                    outlined init with copy of (Int32, Matrix2dPB)(v491, v604, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
                                                                    outlined init with copy of (Int32, Matrix2dPB)(v492, v494, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
                                                                    v495 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v599 + 48);
                                                                    if (v495(v493, 1, v602) == 1)
                                                                    {
                                                                      outlined destroy of Coordinate3DPB?(v600, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
                                                                      if (v495(v494, 1, v602) == 1)
                                                                      {
                                                                        outlined destroy of Coordinate3DPB?(v604, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
LABEL_304:
                                                                        v499 = v620
                                                                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateStatus;
                                                                        swift_beginAccess();
                                                                        v500 = *(_QWORD *)v499;
                                                                        v501 = *(_BYTE *)(v499 + 8);
                                                                        v502 = *(_BYTE *)(v499 + 9);
                                                                        v503 = v621
                                                                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateStatus;
                                                                        swift_beginAccess();
                                                                        if ((v502 & 1) != 0)
                                                                        {
                                                                          if ((*(_BYTE *)(v503 + 9) & 1) == 0)
                                                                            goto LABEL_68;
                                                                        }
                                                                        else if ((*(_BYTE *)(v503 + 9) & 1) != 0
                                                                               || !specialized == infix<A>(_:_:)(v500, v501 & 1, *(_QWORD *)v503, *(_BYTE *)(v503 + 8) & 1))
                                                                        {
                                                                          goto LABEL_68;
                                                                        }
                                                                        v504 = v620
                                                                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__homePinchInternal;
                                                                        swift_beginAccess();
                                                                        v505 = v607;
                                                                        outlined init with copy of (Int32, Matrix2dPB)(v504, v607, &demangling cache variable for type metadata for HomePinchInternalPB?);
                                                                        v506 = v621
                                                                             + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__homePinchInternal;
                                                                        swift_beginAccess();
                                                                        v507 = (uint64_t)v518;
                                                                        v508 = (uint64_t)&v518[*(int *)(v605 + 48)];
                                                                        outlined init with copy of (Int32, Matrix2dPB)(v505, (uint64_t)v518, &demangling cache variable for type metadata for HomePinchInternalPB?);
                                                                        outlined init with copy of (Int32, Matrix2dPB)(v506, v508, &demangling cache variable for type metadata for HomePinchInternalPB?);
                                                                        v509 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v606 + 48);
                                                                        if (v509(v507, 1, v609) == 1)
                                                                        {
                                                                          outlined destroy of Coordinate3DPB?(v607, &demangling cache variable for type metadata for HomePinchInternalPB?);
                                                                          if (v509(v508, 1, v609) == 1)
                                                                          {
                                                                            outlined destroy of Coordinate3DPB?((uint64_t)v518, &demangling cache variable for type metadata for HomePinchInternalPB?);
                                                                            goto LABEL_316;
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v518, (uint64_t)v608, &demangling cache variable for type metadata for HomePinchInternalPB?);
                                                                          if (v509(v508, 1, v609) != 1)
                                                                          {
                                                                            v510 = v610;
                                                                            outlined init with take of Matrix2dPB(v508, (uint64_t)v610, type metadata accessor for HomePinchInternalPB);
                                                                            v511 = v608;
                                                                            v512 = specialized static HomePinchInternalPB.== infix(_:_:)(v608, v510);
                                                                            outlined destroy of Matrix3x3PB((uint64_t)v510, type metadata accessor for HomePinchInternalPB);
                                                                            outlined destroy of Coordinate3DPB?(v607, &demangling cache variable for type metadata for HomePinchInternalPB?);
                                                                            outlined destroy of Matrix3x3PB((uint64_t)v511, type metadata accessor for HomePinchInternalPB);
                                                                            outlined destroy of Coordinate3DPB?((uint64_t)v518, &demangling cache variable for type metadata for HomePinchInternalPB?);
                                                                            if ((v512 & 1) != 0)
                                                                            {
LABEL_316:
                                                                              v513 = (unsigned __int8 *)(v620 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDownHomeUserInterface);
                                                                              swift_beginAccess();
                                                                              v514 = *v513;
                                                                              swift_release();
                                                                              v515 = (unsigned __int8 *)(v621 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDownHomeUserInterface);
                                                                              swift_beginAccess();
                                                                              v516 = *v515;
                                                                              swift_release();
                                                                              if (v514 == 2)
                                                                              {
                                                                                if (v516 != 2)
                                                                                  return 0;
                                                                              }
                                                                              else if (v516 == 2
                                                                                     || ((((v516 & 1) == 0) ^ v514) & 1) == 0)
                                                                              {
                                                                                return 0;
                                                                              }
                                                                              return 1;
                                                                            }
LABEL_68:
                                                                            swift_release();
                                                                            swift_release();
                                                                            return 0;
                                                                          }
                                                                          outlined destroy of Coordinate3DPB?(v607, &demangling cache variable for type metadata for HomePinchInternalPB?);
                                                                          outlined destroy of Matrix3x3PB((uint64_t)v608, type metadata accessor for HomePinchInternalPB);
                                                                        }
                                                                        v249 = &demangling cache variable for type metadata for (HomePinchInternalPB?, HomePinchInternalPB?);
                                                                        v250 = (uint64_t)v518;
LABEL_67:
                                                                        outlined destroy of Coordinate3DPB?(v250, v249);
                                                                        goto LABEL_68;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      outlined init with copy of (Int32, Matrix2dPB)(v604, v601, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
                                                                      if (v495(v494, 1, v602) != 1)
                                                                      {
                                                                        v496 = v603;
                                                                        outlined init with take of Matrix2dPB(v494, v603, type metadata accessor for ObjectInteractionStateInternalPB);
                                                                        v497 = v601;
                                                                        v498 = specialized static ObjectInteractionStateInternalPB.== infix(_:_:)(v601, v496);
                                                                        outlined destroy of Matrix3x3PB(v496, type metadata accessor for ObjectInteractionStateInternalPB);
                                                                        outlined destroy of Coordinate3DPB?(v600, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
                                                                        outlined destroy of Matrix3x3PB(v497, type metadata accessor for ObjectInteractionStateInternalPB);
                                                                        outlined destroy of Coordinate3DPB?(v604, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
                                                                        if ((v498 & 1) == 0)
                                                                          goto LABEL_68;
                                                                        goto LABEL_304;
                                                                      }
                                                                      outlined destroy of Coordinate3DPB?(v600, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
                                                                      outlined destroy of Matrix3x3PB(v601, type metadata accessor for ObjectInteractionStateInternalPB);
                                                                    }
                                                                    v249 = &demangling cache variable for type metadata for (ObjectInteractionStateInternalPB?, ObjectInteractionStateInternalPB?);
                                                                    v250 = v604;
                                                                    goto LABEL_67;
                                                                  }
                                                                  outlined destroy of Coordinate3DPB?(v593, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
                                                                  outlined destroy of Matrix3x3PB(v594, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
                                                                }
                                                                v249 = &demangling cache variable for type metadata for (RecoverRepetitivePinchInternalDataPB?, RecoverRepetitivePinchInternalDataPB?);
                                                                v250 = v597;
                                                                goto LABEL_67;
                                                              }
                                                              outlined destroy of Coordinate3DPB?(v586, &demangling cache variable for type metadata for UnsureInternalPB?);
                                                              outlined destroy of Matrix3x3PB(v587, type metadata accessor for UnsureInternalPB);
                                                            }
                                                            v249 = &demangling cache variable for type metadata for (UnsureInternalPB?, UnsureInternalPB?);
                                                            v250 = v590;
                                                            goto LABEL_67;
                                                          }
                                                          outlined destroy of Coordinate3DPB?(v579, &demangling cache variable for type metadata for ActionInternalPB?);
                                                          outlined destroy of Matrix3x3PB((uint64_t)v580, type metadata accessor for ActionInternalPB);
                                                        }
                                                        v249 = &demangling cache variable for type metadata for (ActionInternalPB?, ActionInternalPB?);
                                                        v250 = v583;
                                                        goto LABEL_67;
                                                      }
                                                      outlined destroy of Coordinate3DPB?(v572, &demangling cache variable for type metadata for PinchInfoPB?);
                                                      outlined destroy of Matrix3x3PB((uint64_t)v573, type metadata accessor for PinchInfoPB);
                                                    }
                                                    v249 = &demangling cache variable for type metadata for (PinchInfoPB?, PinchInfoPB?);
                                                    v250 = v576;
                                                    goto LABEL_67;
                                                  }
                                                  outlined destroy of Coordinate3DPB?(v565, &demangling cache variable for type metadata for PartialHandMultiCam?);
                                                  outlined destroy of Matrix3x3PB((uint64_t)v566, type metadata accessor for PartialHandMultiCam);
                                                }
                                                v249 = &demangling cache variable for type metadata for (PartialHandMultiCam?, PartialHandMultiCam?);
                                                v250 = v569;
                                                goto LABEL_67;
                                              }
                                              outlined destroy of Coordinate3DPB?(v558, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
                                              outlined destroy of Matrix3x3PB(v559, type metadata accessor for MiddleDoubleTapInternalPB);
                                            }
                                            v249 = &demangling cache variable for type metadata for (MiddleDoubleTapInternalPB?, MiddleDoubleTapInternalPB?);
                                            v250 = v562;
                                            goto LABEL_67;
                                          }
                                          outlined destroy of Coordinate3DPB?(v551, &demangling cache variable for type metadata for CMTimeProtobuf?);
                                          outlined destroy of Matrix3x3PB(v552, type metadata accessor for CMTimeProtobuf);
                                        }
                                        v249 = &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?);
                                        v250 = v555;
                                        goto LABEL_67;
                                      }
                                      outlined destroy of Coordinate3DPB?(v544, &demangling cache variable for type metadata for Coordinate3DPB?);
                                      outlined destroy of Matrix3x3PB((uint64_t)v545, type metadata accessor for Coordinate3DPB);
                                    }
                                    v249 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
                                    v250 = v548;
                                    goto LABEL_67;
                                  }
                                  outlined destroy of Coordinate3DPB?(v540, &demangling cache variable for type metadata for Coordinate3DPB?);
                                  outlined destroy of Matrix3x3PB((uint64_t)v541, type metadata accessor for Coordinate3DPB);
                                }
                                v249 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
                                v250 = v542;
                                goto LABEL_67;
                              }
                              outlined destroy of Coordinate3DPB?(v535, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
                              outlined destroy of Matrix3x3PB(v536, type metadata accessor for ObjectInteractionFADataPB);
                            }
                            v249 = &demangling cache variable for type metadata for (ObjectInteractionFADataPB?, ObjectInteractionFADataPB?);
                            v250 = v539;
                            goto LABEL_67;
                          }
                          outlined destroy of Coordinate3DPB?(v528, &demangling cache variable for type metadata for PinchInternalDataPB?);
                          outlined destroy of Matrix3x3PB(v529, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
                        }
                        v249 = &demangling cache variable for type metadata for (PinchInternalDataPB?, PinchInternalDataPB?);
                        v250 = v532;
                        goto LABEL_67;
                      }
                      outlined destroy of Coordinate3DPB?(v523, &demangling cache variable for type metadata for Coordinate3DPB?);
                      outlined destroy of Matrix3x3PB((uint64_t)v524, type metadata accessor for Coordinate3DPB);
                    }
                    v249 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
                    v250 = v525;
                    goto LABEL_67;
                  }
                  outlined destroy of Coordinate3DPB?(v519, &demangling cache variable for type metadata for Coordinate3DPB?);
                  outlined destroy of Matrix3x3PB((uint64_t)v520, type metadata accessor for Coordinate3DPB);
                }
                v249 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
                v250 = v522;
                goto LABEL_67;
              }
              outlined destroy of Coordinate3DPB?(v617, &demangling cache variable for type metadata for Matrix2dPB?);
              outlined destroy of Matrix3x3PB(v248, type metadata accessor for Matrix2dPB);
            }
            v249 = &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?);
            v250 = v618;
            goto LABEL_67;
          }
          swift_retain();
          swift_retain();
          outlined destroy of Coordinate3DPB?((uint64_t)v176, &demangling cache variable for type metadata for PoseJointsDataPB?);
          outlined destroy of Matrix3x3PB((uint64_t)v172, type metadata accessor for PoseJointsDataPB);
        }
        outlined destroy of Coordinate3DPB?(v619, &demangling cache variable for type metadata for (PoseJointsDataPB?, PoseJointsDataPB?));
        goto LABEL_68;
      }
      if (*(_BYTE *)(v221 + 128))
        goto LABEL_48;
      return 0;
    }
    if (!v216)
      return 0;
    if (v213 == *(_QWORD *)(v621 + 104) && v214 == v216)
      goto LABEL_42;
    v217 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v217 & 1) != 0)
      goto LABEL_42;
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance HandsFAResultRowPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static HandsFAResultRowPB._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandsFAResultRowPB()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandsFAResultRowPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandsFAResultRowPB.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandsFAResultRowPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HandsFAResultRowPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandsFAResultRowPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultRowPB and conformance HandsFAResultRowPB, type metadata accessor for HandsFAResultRowPB, (uint64_t)&protocol conformance descriptor for HandsFAResultRowPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandsFAResultRowPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandsFAResultRowPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandsFAResultRowPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultRowPB and conformance HandsFAResultRowPB, type metadata accessor for HandsFAResultRowPB, (uint64_t)&protocol conformance descriptor for HandsFAResultRowPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandsFAResultRowPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultRowPB and conformance HandsFAResultRowPB, type metadata accessor for HandsFAResultRowPB, (uint64_t)&protocol conformance descriptor for HandsFAResultRowPB);
  return Message.hash(into:)();
}

uint64_t HandsFAResultTablePB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for HandsFAResultRowPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultRowPB and conformance HandsFAResultRowPB, type metadata accessor for HandsFAResultRowPB, (uint64_t)&protocol conformance descriptor for HandsFAResultRowPB);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t HandsFAResultTablePB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for HandsFAResultRowPB(0),
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultRowPB and conformance HandsFAResultRowPB, type metadata accessor for HandsFAResultRowPB, (uint64_t)&protocol conformance descriptor for HandsFAResultRowPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for HandsFAResultTablePB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance HandsFAResultTablePB()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance HandsFAResultTablePB()
{
  return HandsFAResultTablePB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance HandsFAResultTablePB()
{
  return HandsFAResultTablePB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance HandsFAResultTablePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultTablePB and conformance HandsFAResultTablePB, type metadata accessor for HandsFAResultTablePB, (uint64_t)&protocol conformance descriptor for HandsFAResultTablePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance HandsFAResultTablePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static HandsFAResultTablePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance HandsFAResultTablePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultTablePB and conformance HandsFAResultTablePB, type metadata accessor for HandsFAResultTablePB, (uint64_t)&protocol conformance descriptor for HandsFAResultTablePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HandsFAResultTablePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultTablePB and conformance HandsFAResultTablePB, type metadata accessor for HandsFAResultTablePB, (uint64_t)&protocol conformance descriptor for HandsFAResultTablePB);
  return Message.hash(into:)();
}

uint64_t TrackingFAInternalFramePB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for RejectedHandPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RejectedHandPB and conformance RejectedHandPB, type metadata accessor for RejectedHandPB, (uint64_t)&protocol conformance descriptor for RejectedHandPB);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t TrackingFAInternalFramePB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_DWORD *)v0 || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (type metadata accessor for RejectedHandPB(0),
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type RejectedHandPB and conformance RejectedHandPB, type metadata accessor for RejectedHandPB, (uint64_t)&protocol conformance descriptor for RejectedHandPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for TrackingFAInternalFramePB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance TrackingFAInternalFramePB@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEE4AF8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingFAInternalFramePB()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingFAInternalFramePB()
{
  return TrackingFAInternalFramePB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingFAInternalFramePB()
{
  return TrackingFAInternalFramePB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingFAInternalFramePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalFramePB and conformance TrackingFAInternalFramePB, type metadata accessor for TrackingFAInternalFramePB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalFramePB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingFAInternalFramePB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingFAInternalFramePB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingFAInternalFramePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalFramePB and conformance TrackingFAInternalFramePB, type metadata accessor for TrackingFAInternalFramePB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalFramePB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingFAInternalFramePB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalFramePB and conformance TrackingFAInternalFramePB, type metadata accessor for TrackingFAInternalFramePB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalFramePB);
  return Message.hash(into:)();
}

uint64_t TrackingFAInternalDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for TrackingFAInternalFramePB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalFramePB and conformance TrackingFAInternalFramePB, type metadata accessor for TrackingFAInternalFramePB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalFramePB);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t TrackingFAInternalDataPB.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[2] + 16)
      || (type metadata accessor for TrackingFAInternalFramePB(0),
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalFramePB and conformance TrackingFAInternalFramePB, type metadata accessor for TrackingFAInternalFramePB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalFramePB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for TrackingFAInternalDataPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance TrackingFAInternalDataPB@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = MEMORY[0x24BEE4AF8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingFAInternalDataPB()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingFAInternalDataPB()
{
  return TrackingFAInternalDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingFAInternalDataPB()
{
  return TrackingFAInternalDataPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingFAInternalDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalDataPB and conformance TrackingFAInternalDataPB, type metadata accessor for TrackingFAInternalDataPB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingFAInternalDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingFAInternalDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingFAInternalDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalDataPB and conformance TrackingFAInternalDataPB, type metadata accessor for TrackingFAInternalDataPB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingFAInternalDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalDataPB and conformance TrackingFAInternalDataPB, type metadata accessor for TrackingFAInternalDataPB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalDataPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in TrackingFAInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalDataPB and conformance TrackingFAInternalDataPB, type metadata accessor for TrackingFAInternalDataPB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalDataPB);
}

uint64_t base witness table accessor for Message in TrackingFAInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalDataPB and conformance TrackingFAInternalDataPB, type metadata accessor for TrackingFAInternalDataPB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalDataPB);
}

uint64_t base witness table accessor for Hashable in TrackingFAInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalDataPB and conformance TrackingFAInternalDataPB, type metadata accessor for TrackingFAInternalDataPB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalDataPB);
}

uint64_t base witness table accessor for Equatable in TrackingFAInternalFramePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalFramePB and conformance TrackingFAInternalFramePB, type metadata accessor for TrackingFAInternalFramePB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalFramePB);
}

uint64_t type metadata accessor for TrackingFAInternalFramePB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingFAInternalFramePB);
}

uint64_t base witness table accessor for Message in TrackingFAInternalFramePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalFramePB and conformance TrackingFAInternalFramePB, type metadata accessor for TrackingFAInternalFramePB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalFramePB);
}

uint64_t base witness table accessor for Hashable in TrackingFAInternalFramePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalFramePB and conformance TrackingFAInternalFramePB, type metadata accessor for TrackingFAInternalFramePB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalFramePB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingFAInternalFramePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalFramePB and conformance TrackingFAInternalFramePB, type metadata accessor for TrackingFAInternalFramePB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalFramePB);
}

uint64_t base witness table accessor for Equatable in HandsFAResultTablePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultTablePB and conformance HandsFAResultTablePB, type metadata accessor for HandsFAResultTablePB, (uint64_t)&protocol conformance descriptor for HandsFAResultTablePB);
}

uint64_t base witness table accessor for Message in HandsFAResultTablePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultTablePB and conformance HandsFAResultTablePB, type metadata accessor for HandsFAResultTablePB, (uint64_t)&protocol conformance descriptor for HandsFAResultTablePB);
}

uint64_t base witness table accessor for Hashable in HandsFAResultTablePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultTablePB and conformance HandsFAResultTablePB, type metadata accessor for HandsFAResultTablePB, (uint64_t)&protocol conformance descriptor for HandsFAResultTablePB);
}

uint64_t base witness table accessor for Equatable in HandsFAResultRowPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultRowPB and conformance HandsFAResultRowPB, type metadata accessor for HandsFAResultRowPB, (uint64_t)&protocol conformance descriptor for HandsFAResultRowPB);
}

uint64_t type metadata accessor for HandsFAResultRowPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for HandsFAResultRowPB);
}

uint64_t base witness table accessor for Message in HandsFAResultRowPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultRowPB and conformance HandsFAResultRowPB, type metadata accessor for HandsFAResultRowPB, (uint64_t)&protocol conformance descriptor for HandsFAResultRowPB);
}

uint64_t base witness table accessor for Hashable in HandsFAResultRowPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultRowPB and conformance HandsFAResultRowPB, type metadata accessor for HandsFAResultRowPB, (uint64_t)&protocol conformance descriptor for HandsFAResultRowPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandsFAResultRowPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultRowPB and conformance HandsFAResultRowPB, type metadata accessor for HandsFAResultRowPB, (uint64_t)&protocol conformance descriptor for HandsFAResultRowPB);
}

uint64_t base witness table accessor for Equatable in ObjectInteractionFADataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionFADataPB and conformance ObjectInteractionFADataPB, type metadata accessor for ObjectInteractionFADataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionFADataPB);
}

uint64_t base witness table accessor for Message in ObjectInteractionFADataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionFADataPB and conformance ObjectInteractionFADataPB, type metadata accessor for ObjectInteractionFADataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionFADataPB);
}

uint64_t base witness table accessor for Hashable in ObjectInteractionFADataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionFADataPB and conformance ObjectInteractionFADataPB, type metadata accessor for ObjectInteractionFADataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionFADataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ObjectInteractionFADataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ObjectInteractionFADataPB and conformance ObjectInteractionFADataPB, type metadata accessor for ObjectInteractionFADataPB, (uint64_t)&protocol conformance descriptor for ObjectInteractionFADataPB);
}

unint64_t lazy protocol witness table accessor for type [PoseFAResultRowValidity] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [PoseFAResultRowValidity] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PoseFAResultRowValidity] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PoseFAResultRowValidity]);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PoseFAResultRowValidity] and conformance [A]);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingFAInternalDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingFAInternalDataPB and conformance TrackingFAInternalDataPB, type metadata accessor for TrackingFAInternalDataPB, (uint64_t)&protocol conformance descriptor for TrackingFAInternalDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in HandsFAResultTablePB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandsFAResultTablePB and conformance HandsFAResultTablePB, type metadata accessor for HandsFAResultTablePB, (uint64_t)&protocol conformance descriptor for HandsFAResultTablePB);
}

uint64_t specialized static TrackingFAInternalFramePB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) != 0)
  {
    v13 = type metadata accessor for TrackingFAInternalFramePB(0);
    v14 = a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static ObjectInteractionFADataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  _DWORD *v15;
  char v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  char v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  double *v25;
  char v26;
  double *v27;
  int v28;
  uint64_t v29;
  double *v30;
  char v31;
  double *v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  char v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  char v41;
  _DWORD *v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char v57;
  void (*v58)(char *, uint64_t);
  uint64_t v60;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v60 - v11;
  v13 = (int *)type metadata accessor for ObjectInteractionFADataPB(0);
  v14 = v13[5];
  v15 = (_DWORD *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 4);
  v17 = (_DWORD *)(a2 + v14);
  v18 = *(unsigned __int8 *)(a2 + v14 + 4);
  if ((v16 & 1) != 0)
  {
    if (!v18)
      goto LABEL_58;
  }
  else
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_58;
  }
  v19 = v13[6];
  v20 = (_DWORD *)(a1 + v19);
  v21 = *(_BYTE *)(a1 + v19 + 4);
  v22 = (_DWORD *)(a2 + v19);
  v23 = *(unsigned __int8 *)(a2 + v19 + 4);
  if ((v21 & 1) != 0)
  {
    if (!v23)
      goto LABEL_58;
  }
  else
  {
    if (*v20 != *v22)
      LOBYTE(v23) = 1;
    if ((v23 & 1) != 0)
      goto LABEL_58;
  }
  v24 = v13[7];
  v25 = (double *)(a1 + v24);
  v26 = *(_BYTE *)(a1 + v24 + 8);
  v27 = (double *)(a2 + v24);
  v28 = *(unsigned __int8 *)(a2 + v24 + 8);
  if ((v26 & 1) != 0)
  {
    if (!v28)
      goto LABEL_58;
  }
  else
  {
    if (*v25 != *v27)
      LOBYTE(v28) = 1;
    if ((v28 & 1) != 0)
      goto LABEL_58;
  }
  v29 = v13[8];
  v30 = (double *)(a1 + v29);
  v31 = *(_BYTE *)(a1 + v29 + 8);
  v32 = (double *)(a2 + v29);
  v33 = *(unsigned __int8 *)(a2 + v29 + 8);
  if ((v31 & 1) != 0)
  {
    if (!v33)
      goto LABEL_58;
  }
  else
  {
    if (*v30 != *v32)
      LOBYTE(v33) = 1;
    if ((v33 & 1) != 0)
      goto LABEL_58;
  }
  v34 = v13[9];
  v35 = (_DWORD *)(a1 + v34);
  v36 = *(_BYTE *)(a1 + v34 + 4);
  v37 = (_DWORD *)(a2 + v34);
  v38 = *(unsigned __int8 *)(a2 + v34 + 4);
  if ((v36 & 1) != 0)
  {
    if (!v38)
      goto LABEL_58;
  }
  else
  {
    if (*v35 != *v37)
      LOBYTE(v38) = 1;
    if ((v38 & 1) != 0)
      goto LABEL_58;
  }
  v39 = v13[10];
  v40 = (_DWORD *)(a1 + v39);
  v41 = *(_BYTE *)(a1 + v39 + 4);
  v42 = (_DWORD *)(a2 + v39);
  v43 = *(unsigned __int8 *)(a2 + v39 + 4);
  if ((v41 & 1) != 0)
  {
    if (!v43)
      goto LABEL_58;
  }
  else
  {
    if (*v40 != *v42)
      LOBYTE(v43) = 1;
    if ((v43 & 1) != 0)
      goto LABEL_58;
  }
  v44 = v13[11];
  v45 = *(unsigned __int8 *)(a1 + v44);
  v46 = *(unsigned __int8 *)(a2 + v44);
  if (v45 == 2)
  {
    if (v46 != 2)
      goto LABEL_58;
  }
  else if (v46 == 2 || ((((v46 & 1) == 0) ^ v45) & 1) == 0)
  {
    goto LABEL_58;
  }
  v47 = v13[12];
  v48 = *(unsigned __int8 *)(a1 + v47);
  v49 = *(unsigned __int8 *)(a2 + v47);
  if (v48 == 2)
  {
    if (v49 != 2)
      goto LABEL_58;
  }
  else if (v49 == 2 || ((((v49 & 1) == 0) ^ v48) & 1) == 0)
  {
    goto LABEL_58;
  }
  v50 = v13[13];
  v51 = *(unsigned __int8 *)(a1 + v50);
  v52 = *(unsigned __int8 *)(a2 + v50);
  if (v51 == 2)
  {
    if (v52 != 2)
      goto LABEL_58;
  }
  else if (v52 == 2 || ((((v52 & 1) == 0) ^ v51) & 1) == 0)
  {
    goto LABEL_58;
  }
  v53 = v13[14];
  v54 = *(unsigned __int8 *)(a1 + v53);
  v55 = *(unsigned __int8 *)(a2 + v53);
  if (v54 == 2)
  {
    if (v55 == 2)
      goto LABEL_57;
LABEL_58:
    v57 = 0;
    return v57 & 1;
  }
  if (v55 == 2 || ((((v55 & 1) == 0) ^ v54) & 1) == 0)
    goto LABEL_58;
LABEL_57:
  v56 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v56(v12, a1, v4);
  v56(v8, a2, v4);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v57 = dispatch thunk of static Equatable.== infix(_:_:)();
  v58 = *(void (**)(char *, uint64_t))(v5 + 8);
  v58(v8, v4);
  v58(v12, v4);
  return v57 & 1;
}

uint64_t specialized static TrackingFAInternalDataPB.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v20 - v11;
  v13 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(a1[2], *((_QWORD *)a2 + 2)) & 1) != 0)
    {
      v15 = type metadata accessor for TrackingFAInternalDataPB(0);
      v16 = (char *)a1 + *(int *)(v15 + 24);
      v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v17(v12, v16, v4);
      v17(v8, &a2[*(int *)(v15 + 24)], v4);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v8, v4);
      v18(v12, v4);
    }
    else
    {
      v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t specialized static HandsFAResultTablePB.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    v13 = type metadata accessor for HandsFAResultTablePB(0);
    v14 = (char *)a1 + *(int *)(v13 + 20);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 20), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static HandsFAResultRowPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(type metadata accessor for HandsFAResultRowPB(0) + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  if (v14 == v15
    || (swift_retain(),
        swift_retain(),
        v16 = closure #1 in static HandsFAResultRowPB.== infix(_:_:)(v14, v15),
        swift_release(),
        swift_release(),
        (v16 & 1) != 0))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized HandsFAResultRowPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(void);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _DWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  _DWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _BYTE *v147;
  _BYTE *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _BYTE *v209;
  _BYTE *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _BYTE *v241;
  _BYTE *v242;
  uint64_t v244;
  _DWORD *v245;
  _QWORD *v246;
  uint64_t v247;
  _DWORD *v248;
  _QWORD *v249;
  _DWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  uint64_t v254;
  _BYTE *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  _BYTE *v262;
  _BYTE *v263;
  _QWORD *v264;
  _QWORD *v265;
  _QWORD *v266;
  _QWORD *v267;
  _BYTE *v268;
  uint64_t v269;
  _BYTE *v270;
  uint64_t v271;
  _BYTE *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  _BYTE *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _BYTE *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v315 = (uint64_t)&v244 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  MEMORY[0x24BDAC7A8](v6, v7);
  v314 = (uint64_t)&v244 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v9, v10);
  v313 = (uint64_t)&v244 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v312 = (uint64_t)&v244 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
  MEMORY[0x24BDAC7A8](v15, v16);
  v311 = (uint64_t)&v244 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInfoPB?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v310 = (uint64_t)&v244 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
  MEMORY[0x24BDAC7A8](v21, v22);
  v309 = (uint64_t)&v244 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  MEMORY[0x24BDAC7A8](v24, v25);
  v308 = (uint64_t)&v244 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v27, v28);
  v307 = (uint64_t)&v244 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionFADataPB?);
  MEMORY[0x24BDAC7A8](v30, v31);
  v301 = (uint64_t)&v244 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v33, v34);
  v294 = (uint64_t)&v244 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v36, v37);
  v283 = (uint64_t)&v244 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v39, v40);
  v261 = (uint64_t)&v244 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseJointsDataPB?);
  MEMORY[0x24BDAC7A8](v42, v43);
  v257 = (uint64_t)&v244 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  *(_DWORD *)(v1 + 32) = 0;
  v245 = (_DWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 40) = 0;
  v246 = (_QWORD *)(v1 + 40);
  *(_WORD *)(v1 + 48) = 513;
  *(_DWORD *)(v1 + 52) = 0;
  v247 = v1 + 49;
  v248 = (_DWORD *)(v1 + 52);
  *(_BYTE *)(v1 + 56) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  v249 = (_QWORD *)(v1 + 64);
  *(_BYTE *)(v1 + 72) = 1;
  *(_DWORD *)(v1 + 76) = 0;
  v250 = (_DWORD *)(v1 + 76);
  *(_BYTE *)(v1 + 80) = 1;
  *(_QWORD *)(v1 + 88) = 0;
  v251 = (_QWORD *)(v1 + 88);
  *(_BYTE *)(v1 + 96) = 1;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  v253 = (_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 104) = 0;
  v252 = (_QWORD *)(v1 + 104);
  v45 = v1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__joints;
  v254 = v1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__joints;
  *(_BYTE *)(v1 + 128) = 1;
  v46 = type metadata accessor for PoseJointsDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 1, 1, v46);
  v255 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDown);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDown) = 2;
  v47 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__worldPoseTransform;
  v256 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__worldPoseTransform;
  v48 = type metadata accessor for Matrix2dPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v47, 1, 1, v48);
  v49 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairTrue;
  v258 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairTrue;
  *(_DWORD *)v49 = 0;
  *(_BYTE *)(v49 + 4) = 1;
  v50 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairFalse;
  v259 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairFalse;
  *(_DWORD *)v50 = 0;
  *(_BYTE *)(v50 + 4) = 1;
  v51 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gesture);
  v260 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gesture);
  *v51 = 0;
  v51[1] = 0;
  v262 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gradeApproval);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gradeApproval) = 2;
  v263 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__meshTntFingerLabel);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__meshTntFingerLabel) = 2;
  v52 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality0);
  v264 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality0);
  *v52 = 0;
  v52[1] = 0;
  v53 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality1);
  v265 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality1);
  *v53 = 0;
  v53[1] = 0;
  v54 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__goodPoseTwoViews);
  v266 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__goodPoseTwoViews);
  *v54 = 0;
  v54[1] = 0;
  v55 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__visibleManualTwoViews);
  v267 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__visibleManualTwoViews);
  *v55 = 0;
  v55[1] = 0;
  v268 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handInMCam);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handInMCam) = 2;
  v56 = v1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__motionSpeed;
  v269 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__motionSpeed;
  *(_QWORD *)v56 = 0;
  *(_BYTE *)(v56 + 8) = 1;
  v270 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handFullyInFov);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handFullyInFov) = 2;
  v57 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gestureVideoID;
  v271 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gestureVideoID;
  *(_DWORD *)v57 = 0;
  *(_BYTE *)(v57 + 4) = 1;
  v272 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predictedHandIsLeft);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predictedHandIsLeft) = 2;
  v58 = v1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handCenter;
  v273 = v1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handCenter;
  v59 = type metadata accessor for Coordinate3DPB(0);
  v60 = *(void (**)(void))(*(_QWORD *)(v59 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v60)(v58, 1, 1, v59);
  v61 = v1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handSize;
  v274 = v1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handSize;
  *(_QWORD *)v61 = 0;
  *(_BYTE *)(v61 + 8) = 1;
  v62 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__hoverUncertainty;
  v275 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__hoverUncertainty;
  *(_QWORD *)v62 = 0;
  *(_BYTE *)(v62 + 8) = 1;
  v276 = v1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__upVector;
  v60();
  v63 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__primaryCameraID;
  v277 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__primaryCameraID;
  *(_DWORD *)v63 = 0;
  *(_BYTE *)(v63 + 4) = 1;
  v64 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__secondaryCameraID;
  v278 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__secondaryCameraID;
  *(_DWORD *)v64 = 0;
  *(_BYTE *)(v64 + 4) = 1;
  v65 = (unint64_t *)(v1
                           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
  v279 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
  v66 = MEMORY[0x24BEE4AF8];
  *v65 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v67 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInternalData;
  v280 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInternalData;
  v68 = type metadata accessor for PinchInternalDataPB();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 1, 1, v68);
  v69 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__scheduledDetection;
  v281 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__scheduledDetection;
  *(_DWORD *)v69 = 0;
  *(_BYTE *)(v69 + 4) = 1;
  v70 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__dtHoverDistance;
  v282 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__dtHoverDistance;
  *(_QWORD *)v70 = 0;
  *(_BYTE *)(v70 + 8) = 1;
  v71 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
  v284 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
  v72 = type metadata accessor for ObjectInteractionFADataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v71, 1, 1, v72);
  v285 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceScore);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceScore) = v66;
  v73 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceClass;
  v286 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceClass;
  *(_QWORD *)v73 = 0;
  *(_WORD *)(v73 + 8) = 256;
  v287 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detection3DHandCenter;
  v60();
  v288 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predicted3DHandCenter;
  v60();
  v289 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detectionSpecs);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detectionSpecs) = v66;
  v290 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cropBoundingBox);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cropBoundingBox) = v66;
  v74 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__trackingHealthScore;
  v291 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__trackingHealthScore;
  *(_QWORD *)v74 = 0;
  *(_BYTE *)(v74 + 8) = 1;
  v75 = v1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
  v292 = v1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
  v76 = type metadata accessor for CMTimeProtobuf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v75, 1, 1, v76);
  v293 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTap);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTap) = 2;
  v77 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTapInternalData;
  v295 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTapInternalData;
  v78 = type metadata accessor for MiddleDoubleTapInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v77, 1, 1, v78);
  v79 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cancellationReason;
  v296 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cancellationReason;
  *(_QWORD *)v79 = 0;
  *(_BYTE *)(v79 + 8) = 1;
  v80 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtVisibility;
  v297 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtVisibility;
  v81 = type metadata accessor for PartialHandMultiCam(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v80, 1, 1, v81);
  v82 = v1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInfo;
  v298 = v1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInfo;
  v83 = type metadata accessor for PinchInfoPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v82, 1, 1, v83);
  v84 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__actionInternal;
  v299 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__actionInternal;
  v85 = type metadata accessor for ActionInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v84, 1, 1, v85);
  v86 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__unsureInternal;
  v300 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__unsureInternal;
  v87 = type metadata accessor for UnsureInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v86, 1, 1, v87);
  v88 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__recoverRepetitivePinchInternal;
  v302 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__recoverRepetitivePinchInternal;
  v89 = type metadata accessor for RecoverRepetitivePinchInternalDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v88, 1, 1, v89);
  v90 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateInternal;
  v303 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateInternal;
  v91 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v90, 1, 1, v91);
  v92 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateStatus;
  v304 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateStatus;
  *(_QWORD *)v92 = 0;
  *(_WORD *)(v92 + 8) = 256;
  v93 = v1
      + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__homePinchInternal;
  v305 = v1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__homePinchInternal;
  v94 = type metadata accessor for HomePinchInternalPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56))(v93, 1, 1, v94);
  v306 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDownHomeUserInterface);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDownHomeUserInterface) = 2;
  swift_beginAccess();
  v95 = *(_QWORD *)(a1 + 16);
  v96 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v95;
  *(_QWORD *)(v1 + 24) = v96;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LODWORD(v95) = *(_DWORD *)(a1 + 32);
  v97 = v245;
  swift_beginAccess();
  *v97 = v95;
  swift_beginAccess();
  v98 = *(_QWORD *)(a1 + 40);
  LOBYTE(v97) = *(_BYTE *)(a1 + 48);
  v99 = v246;
  swift_beginAccess();
  *v99 = v98;
  *(_BYTE *)(v1 + 48) = (_BYTE)v97;
  swift_beginAccess();
  LOBYTE(v98) = *(_BYTE *)(a1 + 49);
  swift_beginAccess();
  *(_BYTE *)(v1 + 49) = v98;
  swift_beginAccess();
  LODWORD(v98) = *(_DWORD *)(a1 + 52);
  LOBYTE(v97) = *(_BYTE *)(a1 + 56);
  v100 = v248;
  swift_beginAccess();
  *v100 = v98;
  *(_BYTE *)(v1 + 56) = (_BYTE)v97;
  swift_beginAccess();
  v101 = *(_QWORD *)(a1 + 64);
  LOBYTE(v97) = *(_BYTE *)(a1 + 72);
  v102 = v249;
  swift_beginAccess();
  *v102 = v101;
  *(_BYTE *)(v1 + 72) = (_BYTE)v97;
  swift_beginAccess();
  LODWORD(v101) = *(_DWORD *)(a1 + 76);
  LOBYTE(v97) = *(_BYTE *)(a1 + 80);
  v103 = v250;
  swift_beginAccess();
  *v103 = v101;
  *(_BYTE *)(v1 + 80) = (_BYTE)v97;
  swift_beginAccess();
  v104 = *(_QWORD *)(a1 + 88);
  LOBYTE(v97) = *(_BYTE *)(a1 + 96);
  v105 = v251;
  swift_beginAccess();
  *v105 = v104;
  *(_BYTE *)(v1 + 96) = (_BYTE)v97;
  swift_beginAccess();
  v107 = *(_QWORD *)(a1 + 104);
  v106 = *(_QWORD *)(a1 + 112);
  v108 = v252;
  swift_beginAccess();
  *v108 = v107;
  *(_QWORD *)(v1 + 112) = v106;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v109 = *(_QWORD *)(a1 + 120);
  LOBYTE(v97) = *(_BYTE *)(a1 + 128);
  v110 = v253;
  swift_beginAccess();
  *v110 = v109;
  *(_BYTE *)(v1 + 128) = (_BYTE)v97;
  v111 = a1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__joints;
  swift_beginAccess();
  v112 = v257;
  outlined init with copy of (Int32, Matrix2dPB)(v111, v257, &demangling cache variable for type metadata for PoseJointsDataPB?);
  v113 = v254;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v112, v113, &demangling cache variable for type metadata for PoseJointsDataPB?);
  swift_endAccess();
  v114 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDown);
  swift_beginAccess();
  LOBYTE(v114) = *v114;
  v115 = v255;
  swift_beginAccess();
  *v115 = (_BYTE)v114;
  v116 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__worldPoseTransform;
  swift_beginAccess();
  v117 = v261;
  outlined init with copy of (Int32, Matrix2dPB)(v116, v261, &demangling cache variable for type metadata for Matrix2dPB?);
  v118 = v256;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v117, v118, &demangling cache variable for type metadata for Matrix2dPB?);
  swift_endAccess();
  v119 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairTrue;
  swift_beginAccess();
  LODWORD(v117) = *(_DWORD *)v119;
  LOBYTE(v119) = *(_BYTE *)(v119 + 4);
  v120 = v258;
  swift_beginAccess();
  *(_DWORD *)v120 = v117;
  *(_BYTE *)(v120 + 4) = v119;
  v121 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__stereoPairFalse;
  swift_beginAccess();
  LODWORD(v117) = *(_DWORD *)v121;
  LOBYTE(v121) = *(_BYTE *)(v121 + 4);
  v122 = v259;
  swift_beginAccess();
  *(_DWORD *)v122 = v117;
  *(_BYTE *)(v122 + 4) = v121;
  v123 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gesture);
  swift_beginAccess();
  v125 = *v123;
  v124 = v123[1];
  v126 = v260;
  swift_beginAccess();
  *v126 = v125;
  v126[1] = v124;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gradeApproval);
  swift_beginAccess();
  LOBYTE(v127) = *v127;
  v128 = v262;
  swift_beginAccess();
  *v128 = (_BYTE)v127;
  v129 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__meshTntFingerLabel);
  swift_beginAccess();
  LOBYTE(v129) = *v129;
  v130 = v263;
  swift_beginAccess();
  *v130 = (_BYTE)v129;
  v131 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality0);
  swift_beginAccess();
  v133 = *v131;
  v132 = v131[1];
  v134 = v264;
  swift_beginAccess();
  *v134 = v133;
  v134[1] = v132;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v135 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtQuality1);
  swift_beginAccess();
  v137 = *v135;
  v136 = v135[1];
  v138 = v265;
  swift_beginAccess();
  *v138 = v137;
  v138[1] = v136;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v139 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__goodPoseTwoViews);
  swift_beginAccess();
  v141 = *v139;
  v140 = v139[1];
  v142 = v266;
  swift_beginAccess();
  *v142 = v141;
  v142[1] = v140;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v143 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__visibleManualTwoViews);
  swift_beginAccess();
  v145 = *v143;
  v144 = v143[1];
  v146 = v267;
  swift_beginAccess();
  *v146 = v145;
  v146[1] = v144;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v147 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handInMCam);
  swift_beginAccess();
  LOBYTE(v147) = *v147;
  v148 = v268;
  swift_beginAccess();
  *v148 = (_BYTE)v147;
  v149 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__motionSpeed);
  swift_beginAccess();
  v150 = *v149;
  LOBYTE(v149) = *((_BYTE *)v149 + 8);
  v151 = v269;
  swift_beginAccess();
  *(_QWORD *)v151 = v150;
  *(_BYTE *)(v151 + 8) = (_BYTE)v149;
  v152 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handFullyInFov);
  swift_beginAccess();
  LOBYTE(v152) = *v152;
  v153 = v270;
  swift_beginAccess();
  *v153 = (_BYTE)v152;
  v154 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gestureVideoID;
  swift_beginAccess();
  LODWORD(v153) = *(_DWORD *)v154;
  LOBYTE(v154) = *(_BYTE *)(v154 + 4);
  v155 = v271;
  swift_beginAccess();
  *(_DWORD *)v155 = (_DWORD)v153;
  *(_BYTE *)(v155 + 4) = v154;
  v156 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predictedHandIsLeft);
  swift_beginAccess();
  LOBYTE(v156) = *v156;
  v157 = v272;
  swift_beginAccess();
  *v157 = (_BYTE)v156;
  v158 = a1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handCenter;
  swift_beginAccess();
  v159 = v283;
  outlined init with copy of (Int32, Matrix2dPB)(v158, v283, &demangling cache variable for type metadata for Coordinate3DPB?);
  v160 = v273;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v159, v160, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v161 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handSize);
  swift_beginAccess();
  v162 = *v161;
  LOBYTE(v161) = *((_BYTE *)v161 + 8);
  v163 = v274;
  swift_beginAccess();
  *(_QWORD *)v163 = v162;
  *(_BYTE *)(v163 + 8) = (_BYTE)v161;
  v164 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__hoverUncertainty);
  swift_beginAccess();
  v165 = *v164;
  LOBYTE(v164) = *((_BYTE *)v164 + 8);
  v166 = v275;
  swift_beginAccess();
  *(_QWORD *)v166 = v165;
  *(_BYTE *)(v166 + 8) = (_BYTE)v164;
  v167 = a1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__upVector;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v167, v159, &demangling cache variable for type metadata for Coordinate3DPB?);
  v168 = v276;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v159, v168, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v169 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__primaryCameraID;
  swift_beginAccess();
  LODWORD(v165) = *(_DWORD *)v169;
  LOBYTE(v169) = *(_BYTE *)(v169 + 4);
  v170 = v277;
  swift_beginAccess();
  *(_DWORD *)v170 = v165;
  *(_BYTE *)(v170 + 4) = v169;
  v171 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__secondaryCameraID;
  swift_beginAccess();
  LODWORD(v165) = *(_DWORD *)v171;
  LOBYTE(v171) = *(_BYTE *)(v171 + 4);
  v172 = v278;
  swift_beginAccess();
  *(_DWORD *)v172 = v165;
  *(_BYTE *)(v172 + 4) = v171;
  v173 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__calibrations);
  swift_beginAccess();
  v174 = *v173;
  v175 = v279;
  swift_beginAccess();
  *v175 = v174;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v176 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInternalData;
  swift_beginAccess();
  v177 = v294;
  outlined init with copy of (Int32, Matrix2dPB)(v176, v294, &demangling cache variable for type metadata for PinchInternalDataPB?);
  v178 = v280;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v177, v178, &demangling cache variable for type metadata for PinchInternalDataPB?);
  swift_endAccess();
  v179 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__scheduledDetection;
  swift_beginAccess();
  LODWORD(v177) = *(_DWORD *)v179;
  LOBYTE(v179) = *(_BYTE *)(v179 + 4);
  v180 = v281;
  swift_beginAccess();
  *(_DWORD *)v180 = v177;
  *(_BYTE *)(v180 + 4) = v179;
  v181 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__dtHoverDistance);
  swift_beginAccess();
  v182 = *v181;
  LOBYTE(v181) = *((_BYTE *)v181 + 8);
  v183 = v282;
  swift_beginAccess();
  *(_QWORD *)v183 = v182;
  *(_BYTE *)(v183 + 8) = (_BYTE)v181;
  v184 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionData;
  swift_beginAccess();
  v185 = v301;
  outlined init with copy of (Int32, Matrix2dPB)(v184, v301, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
  v186 = v284;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v185, v186, &demangling cache variable for type metadata for ObjectInteractionFADataPB?);
  swift_endAccess();
  v187 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceScore);
  swift_beginAccess();
  v188 = *v187;
  v189 = v285;
  swift_beginAccess();
  *v189 = v188;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v190 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__handPresenceClass);
  swift_beginAccess();
  v191 = *v190;
  LOBYTE(v189) = *((_BYTE *)v190 + 8);
  LOBYTE(v190) = *((_BYTE *)v190 + 9);
  v192 = v286;
  swift_beginAccess();
  *(_QWORD *)v192 = v191;
  *(_BYTE *)(v192 + 8) = (_BYTE)v189;
  *(_BYTE *)(v192 + 9) = (_BYTE)v190;
  v193 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detection3DHandCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v193, v159, &demangling cache variable for type metadata for Coordinate3DPB?);
  v194 = v287;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v159, v194, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v195 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__predicted3DHandCenter;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v195, v159, &demangling cache variable for type metadata for Coordinate3DPB?);
  v196 = v288;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v159, v196, &demangling cache variable for type metadata for Coordinate3DPB?);
  swift_endAccess();
  v197 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__detectionSpecs);
  swift_beginAccess();
  v198 = *v197;
  v199 = v289;
  swift_beginAccess();
  *v199 = v198;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v200 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cropBoundingBox);
  swift_beginAccess();
  v201 = *v200;
  v202 = v290;
  swift_beginAccess();
  *v202 = v201;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v203 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__trackingHealthScore);
  swift_beginAccess();
  v204 = *v203;
  LOBYTE(v203) = *((_BYTE *)v203 + 8);
  v205 = v291;
  swift_beginAccess();
  *(_QWORD *)v205 = v204;
  *(_BYTE *)(v205 + 8) = (_BYTE)v203;
  v206 = a1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__timestamp;
  swift_beginAccess();
  v207 = v307;
  outlined init with copy of (Int32, Matrix2dPB)(v206, v307, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v208 = v292;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v207, v208, &demangling cache variable for type metadata for CMTimeProtobuf?);
  swift_endAccess();
  v209 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTap);
  swift_beginAccess();
  LOBYTE(v209) = *v209;
  v210 = v293;
  swift_beginAccess();
  *v210 = (_BYTE)v209;
  v211 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__middleDoubleTapInternalData;
  swift_beginAccess();
  v212 = v308;
  outlined init with copy of (Int32, Matrix2dPB)(v211, v308, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  v213 = v295;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v212, v213, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  swift_endAccess();
  v214 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__cancellationReason);
  swift_beginAccess();
  v215 = *v214;
  LOBYTE(v214) = *((_BYTE *)v214 + 8);
  v216 = v296;
  swift_beginAccess();
  *(_QWORD *)v216 = v215;
  *(_BYTE *)(v216 + 8) = (_BYTE)v214;
  v217 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__gtVisibility;
  swift_beginAccess();
  v218 = v309;
  outlined init with copy of (Int32, Matrix2dPB)(v217, v309, &demangling cache variable for type metadata for PartialHandMultiCam?);
  v219 = v297;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v218, v219, &demangling cache variable for type metadata for PartialHandMultiCam?);
  swift_endAccess();
  v220 = a1 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchInfo;
  swift_beginAccess();
  v221 = v310;
  outlined init with copy of (Int32, Matrix2dPB)(v220, v310, &demangling cache variable for type metadata for PinchInfoPB?);
  v222 = v298;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v221, v222, &demangling cache variable for type metadata for PinchInfoPB?);
  swift_endAccess();
  v223 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__actionInternal;
  swift_beginAccess();
  v224 = v311;
  outlined init with copy of (Int32, Matrix2dPB)(v223, v311, &demangling cache variable for type metadata for ActionInternalPB?);
  v225 = v299;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v224, v225, &demangling cache variable for type metadata for ActionInternalPB?);
  swift_endAccess();
  v226 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__unsureInternal;
  swift_beginAccess();
  v227 = v312;
  outlined init with copy of (Int32, Matrix2dPB)(v226, v312, &demangling cache variable for type metadata for UnsureInternalPB?);
  v228 = v300;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v227, v228, &demangling cache variable for type metadata for UnsureInternalPB?);
  swift_endAccess();
  v229 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__recoverRepetitivePinchInternal;
  swift_beginAccess();
  v230 = v313;
  outlined init with copy of (Int32, Matrix2dPB)(v229, v313, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  v231 = v302;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v230, v231, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  swift_endAccess();
  v232 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateInternal;
  swift_beginAccess();
  v233 = v314;
  outlined init with copy of (Int32, Matrix2dPB)(v232, v314, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  v234 = v303;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v233, v234, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  swift_endAccess();
  v235 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__objectInteractionStateStatus);
  swift_beginAccess();
  v236 = *v235;
  LOBYTE(v234) = *((_BYTE *)v235 + 8);
  LOBYTE(v235) = *((_BYTE *)v235 + 9);
  v237 = v304;
  swift_beginAccess();
  *(_QWORD *)v237 = v236;
  *(_BYTE *)(v237 + 8) = v234;
  *(_BYTE *)(v237 + 9) = (_BYTE)v235;
  v238 = a1
       + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__homePinchInternal;
  swift_beginAccess();
  v239 = v315;
  outlined init with copy of (Int32, Matrix2dPB)(v238, v315, &demangling cache variable for type metadata for HomePinchInternalPB?);
  v240 = v305;
  swift_beginAccess();
  outlined assign with take of HomePinchInternalPB?(v239, v240, &demangling cache variable for type metadata for HomePinchInternalPB?);
  swift_endAccess();
  v241 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV5Hands18HandsFAResultRowPBP33_14D04A5C22BCB754C74E0E011DB6028413_StorageClass__pinchDownHomeUserInterface);
  swift_beginAccess();
  LOBYTE(v241) = *v241;
  v242 = v306;
  swift_beginAccess();
  *v242 = (_BYTE)v241;
  return v1;
}

uint64_t outlined init with take of PoseJointsDataPB?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseJointsDataPB?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrackingFAInternalFramePB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    a1[1] = a2[1];
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for TrackingFAInternalFramePB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for TrackingFAInternalFramePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for TrackingFAInternalFramePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for TrackingFAInternalFramePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for TrackingFAInternalFramePB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingFAInternalFramePB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_1Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TrackingFAInternalFramePB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D76EF1C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for TrackingFAInternalFramePB()
{
  return type metadata completion function for TrackingFAInternalDataPB();
}

uint64_t getEnumTagSinglePayload for HandsFAResultRowPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D76F024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for HandsFAResultRowPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D76F0AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LogMessage.OneOf_Content(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Google_Protobuf_Any();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for LogMessage.OneOf_Content(uint64_t a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_bridgeObjectRelease();
  v2 = type metadata accessor for Google_Protobuf_Any();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

_QWORD *initializeWithCopy for LogMessage.OneOf_Content(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for Google_Protobuf_Any();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for LogMessage.OneOf_Content(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of Matrix3x3PB((uint64_t)a1, type metadata accessor for LogMessage.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for Google_Protobuf_Any();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for LogMessage.OneOf_Content(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for LogMessage.OneOf_Content);
}

void *initializeWithTake for LogMessage.OneOf_Content(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Google_Protobuf_Any();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for LogMessage.OneOf_Content(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of Matrix3x3PB((uint64_t)a1, type metadata accessor for LogMessage.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Google_Protobuf_Any();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LogMessage.OneOf_Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for LogMessage.OneOf_Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for LogMessage.OneOf_Content()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for LogMessage.OneOf_Content()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Google_Protobuf_Any();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LogMessage(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    v10 = a3[8];
    __dst = (_QWORD *)(a1 + v10);
    v11 = (uint64_t *)((char *)a2 + v10);
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    v12 = type metadata accessor for LogMessage.OneOf_Content(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v17 = type metadata accessor for Google_Protobuf_Any();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(__dst, v11, v17);
      }
      else
      {
        v18 = v11[1];
        *__dst = *v11;
        __dst[1] = v18;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v19 = a3[9];
    v20 = (char *)v4 + v19;
    v21 = (uint64_t)a2 + v19;
    v22 = type metadata accessor for UnknownStorage();
    v23 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    v23(v20, v21, v22);
    v24 = a3[10];
    v25 = (_DWORD *)((char *)v4 + v24);
    v26 = (_DWORD *)((char *)a2 + v24);
    v27 = type metadata accessor for CMTimeProtobuf(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[2] = v26[2];
      v23((char *)v25 + *(int *)(v27 + 24), (uint64_t)v26 + *(int *)(v27 + 24), v22);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
  }
  return v4;
}

uint64_t destroy for LogMessage(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[8];
  v5 = type metadata accessor for LogMessage.OneOf_Content(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Google_Protobuf_Any();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v7 = a1 + a2[9];
  v8 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v12(v7, v8);
  v9 = a1 + a2[10];
  v10 = type metadata accessor for CMTimeProtobuf(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9 + *(int *)(v10 + 24), v8);
  return result;
}

uint64_t initializeWithCopy for LogMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(int *)(a3 + 32);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v11 = type metadata accessor for LogMessage.OneOf_Content(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    v15 = a3;
  }
  else
  {
    v15 = a3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v16 = type metadata accessor for Google_Protobuf_Any();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v9, v10, v16);
    }
    else
    {
      v17 = v10[1];
      *v9 = *v10;
      v9[1] = v17;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v18 = *(int *)(v15 + 36);
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for UnknownStorage();
  v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  v22(v19, v20, v21);
  v23 = *(int *)(v15 + 40);
  v24 = (_DWORD *)(a1 + v23);
  v25 = (_DWORD *)(a2 + v23);
  v26 = type metadata accessor for CMTimeProtobuf(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[2] = v25[2];
    v22((char *)v24 + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v21);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithCopy for LogMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_DWORD *, uint64_t, uint64_t);
  int v29;
  uint64_t v30;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  v9 = type metadata accessor for LogMessage.OneOf_Content(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v14 = type metadata accessor for Google_Protobuf_Any();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v7, v8, v14);
      }
      else
      {
        *v7 = *v8;
        v7[1] = v8[1];
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_14;
    }
LABEL_7:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_14;
  }
  if (v13)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for LogMessage.OneOf_Content);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for LogMessage.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v16 = type metadata accessor for Google_Protobuf_Any();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v7, v8, v16);
    }
    else
    {
      *v7 = *v8;
      v7[1] = v8[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for UnknownStorage();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 24);
  v22(v18, v19, v20);
  v23 = a3[10];
  v24 = (_DWORD *)(a1 + v23);
  v25 = (_DWORD *)(a2 + v23);
  v26 = type metadata accessor for CMTimeProtobuf(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v19) = v28(v24, 1, v26);
  v29 = v28(v25, 1, v26);
  if (!(_DWORD)v19)
  {
    if (!v29)
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[2] = v25[2];
      v22((uint64_t)v24 + *(int *)(v26 + 24), (uint64_t)v25 + *(int *)(v26 + 24), v20);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v24, type metadata accessor for CMTimeProtobuf);
    goto LABEL_19;
  }
  if (v29)
  {
LABEL_19:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[2] = v25[2];
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))((char *)v24 + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v20);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t initializeWithTake for LogMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for LogMessage.OneOf_Content(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = type metadata accessor for Google_Protobuf_Any();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v7, v8, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(v10 + 64));
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[9];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for UnknownStorage();
  v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v18 = a3[10];
  v19 = (_DWORD *)(a1 + v18);
  v20 = (_DWORD *)(a2 + v18);
  v21 = type metadata accessor for CMTimeProtobuf(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[2] = v20[2];
    v17((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v16);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for LogMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_DWORD *, uint64_t, uint64_t);
  int v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  v9 = a3[8];
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for LogMessage.OneOf_Content(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      if (a1 == a2)
        goto LABEL_14;
      outlined destroy of Matrix3x3PB((uint64_t)v10, type metadata accessor for LogMessage.OneOf_Content);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v19 = type metadata accessor for Google_Protobuf_Any();
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v10, v11, v19);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      v18 = *(_QWORD *)(v13 + 64);
LABEL_8:
      memcpy(v10, v11, v18);
      goto LABEL_14;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v10, type metadata accessor for LogMessage.OneOf_Content);
LABEL_7:
    v18 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?)
                                - 8)
                    + 64);
    goto LABEL_8;
  }
  if (v16)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = type metadata accessor for Google_Protobuf_Any();
    (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v10, v11, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(v13 + 64));
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_14:
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for UnknownStorage();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v25(v21, v22, v23);
  v26 = a3[10];
  v27 = (_DWORD *)(a1 + v26);
  v28 = (_DWORD *)(a2 + v26);
  v29 = type metadata accessor for CMTimeProtobuf(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v30 + 48);
  LODWORD(v22) = v31(v27, 1, v29);
  v32 = v31(v28, 1, v29);
  if (!(_DWORD)v22)
  {
    if (!v32)
    {
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[2] = v28[2];
      v25((uint64_t)v27 + *(int *)(v29 + 24), (uint64_t)v28 + *(int *)(v29 + 24), v23);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v27, type metadata accessor for CMTimeProtobuf);
    goto LABEL_19;
  }
  if (v32)
  {
LABEL_19:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[2] = v28[2];
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v27 + *(int *)(v29 + 24), (char *)v28 + *(int *)(v29 + 24), v23);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for LogMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D77032C(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[8];
    }
    else
    {
      v12 = type metadata accessor for UnknownStorage();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for LogMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D770404(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[8];
    }
    else
    {
      v12 = type metadata accessor for UnknownStorage();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for LogMessage(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for LogMessage);
}

void type metadata completion function for LogMessage()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for LogMessage.OneOf_Content?, (void (*)(uint64_t))type metadata accessor for LogMessage.OneOf_Content);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for CMTimeProtobuf?, (void (*)(uint64_t))type metadata accessor for CMTimeProtobuf);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t LogMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in LogMessage.decodeMessage<A>(decoder:)();
          break;
        case 2:
        case 4:
        case 5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 6:
          closure #6 in LogMessage.decodeMessage<A>(decoder:)(a1, v5);
          break;
        case 7:
          closure #7 in LogMessage.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in LogMessage.decodeMessage<A>(decoder:)()
{
  type metadata accessor for LogMessage(0);
  type metadata accessor for CMTimeProtobuf(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #6 in LogMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = 0;
  v16 = 0;
  result = dispatch thunk of Decoder.decodeSingularStringField(value:)();
  if (v2)
    return swift_bridgeObjectRelease();
  v9 = v16;
  if (v16)
  {
    v17 = v15;
    v10 = (_QWORD *)(a2 + *(int *)(type metadata accessor for LogMessage(0) + 32));
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v10, (uint64_t)v7, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    v11 = type metadata accessor for LogMessage.OneOf_Content(0);
    v14 = *(_QWORD *)(v11 - 8);
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v11);
    outlined destroy of Coordinate3DPB?((uint64_t)v7, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    if (v12 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of Coordinate3DPB?((uint64_t)v10, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    *v10 = v17;
    v10[1] = v9;
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v11);
  }
  return result;
}

uint64_t closure #7 in LogMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t, __n128);
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v48 = a3;
  v49 = a4;
  v50 = a1;
  v51 = a2;
  v4 = type metadata accessor for Google_Protobuf_Any();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v44 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v41 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LogMessage.OneOf_Content(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16, v18);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21, v22);
  v24 = (char *)&v41 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x24BDAC7A8](v25, v26);
  v46 = (char *)&v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28, v29);
  v32 = (char *)&v41 - v31;
  v45 = v5;
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
  v33((char *)&v41 - v31, 1, 1, v4, v30);
  v42 = v50 + *(int *)(type metadata accessor for LogMessage(0) + 32);
  outlined init with copy of (Int32, Matrix2dPB)(v42, (uint64_t)v15, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
  v43 = v17;
  LODWORD(v50) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  if ((_DWORD)v50 == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v15, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v15, (uint64_t)v24, type metadata accessor for LogMessage.OneOf_Content);
    outlined init with take of Matrix2dPB((uint64_t)v24, (uint64_t)v20, type metadata accessor for LogMessage.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v32, &demangling cache variable for type metadata for Google_Protobuf_Any?);
      v34 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      v34(v11, v20, v4);
      v34(v32, v11, v4);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v33)(v32, 0, 1, v4);
    }
    else
    {
      outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for LogMessage.OneOf_Content);
    }
  }
  v35 = (uint64_t)v46;
  v36 = v47;
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Google_Protobuf_Any and conformance Google_Protobuf_Any, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BDE8], MEMORY[0x24BE5BDE0]);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v36)
    return outlined destroy of Coordinate3DPB?((uint64_t)v32, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v32, v35, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  v38 = v45;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v35, 1, v4) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v32, &demangling cache variable for type metadata for Google_Protobuf_Any?);
    return outlined destroy of Coordinate3DPB?(v35, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 32);
    v39(v44, v35, v4);
    if ((_DWORD)v50 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of Coordinate3DPB?((uint64_t)v32, &demangling cache variable for type metadata for Google_Protobuf_Any?);
    v40 = v42;
    outlined destroy of Coordinate3DPB?(v42, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    v39((char *)v40, (uint64_t)v44, v4);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v16);
  }
}

uint64_t LogMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = closure #1 in LogMessage.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0)
      v14 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFLL;
    if (v14)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (*(_DWORD *)(v3 + 16))
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    v15 = *(_QWORD *)(v3 + 32);
    v16 = HIBYTE(v15) & 0xF;
    if ((v15 & 0x2000000000000000) == 0)
      v16 = *(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFLL;
    if (v16)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v17 = *(_QWORD *)(v3 + 48);
    v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0)
      v18 = *(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFLL;
    if (v18)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v19 = type metadata accessor for LogMessage(0);
    outlined init with copy of (Int32, Matrix2dPB)(v3 + *(int *)(v19 + 32), (uint64_t)v11, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    v20 = type metadata accessor for LogMessage.OneOf_Content(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v11, 1, v20) != 1)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        closure #3 in LogMessage.traverse<A>(visitor:)(v3, a1, a2, a3);
        outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for LogMessage.OneOf_Content);
      }
      else
      {
        swift_bridgeObjectRelease();
        closure #2 in LogMessage.traverse<A>(visitor:)(v3);
      }
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in LogMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CMTimeProtobuf(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LogMessage(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 40), (uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for CMTimeProtobuf);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for CMTimeProtobuf);
}

uint64_t closure #2 in LogMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LogMessage(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
  v7 = type metadata accessor for LogMessage.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v5, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  result = outlined destroy of Matrix3x3PB((uint64_t)v5, type metadata accessor for LogMessage.OneOf_Content);
  __break(1u);
  return result;
}

uint64_t closure #3 in LogMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[2];

  v17[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Google_Protobuf_Any();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LogMessage(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 32), (uint64_t)v8, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
  v15 = type metadata accessor for LogMessage.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v8, 1, v15) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Google_Protobuf_Any and conformance Google_Protobuf_Any, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BDE8], MEMORY[0x24BE5BDE0]);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  result = outlined destroy of Matrix3x3PB((uint64_t)v8, type metadata accessor for LogMessage.OneOf_Content);
  __break(1u);
  return result;
}

uint64_t protocol witness for Message.init() in conformance LogMessage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0xE000000000000000;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0xE000000000000000;
  v4 = a2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for LogMessage.OneOf_Content(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  UnknownStorage.init()();
  v6 = a2 + *(int *)(a1 + 40);
  v7 = type metadata accessor for CMTimeProtobuf(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance LogMessage()
{
  return 0x617373654D676F4CLL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance LogMessage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance LogMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance LogMessage())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance LogMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LogMessage.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance LogMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LogMessage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance LogMessage()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessage and conformance LogMessage, type metadata accessor for LogMessage, (uint64_t)&protocol conformance descriptor for LogMessage);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance LogMessage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static LogMessage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LogMessage()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessage and conformance LogMessage, type metadata accessor for LogMessage, (uint64_t)&protocol conformance descriptor for LogMessage);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LogMessage()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessage and conformance LogMessage, type metadata accessor for LogMessage, (uint64_t)&protocol conformance descriptor for LogMessage);
  return Message.hash(into:)();
}

uint64_t LogMessageBundle.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
  }
  return result;
}

uint64_t LogMessageBundle.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for LogMessageBundle(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance LogMessageBundle()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance LogMessageBundle()
{
  return LogMessageBundle.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance LogMessageBundle()
{
  return LogMessageBundle.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance LogMessageBundle()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessageBundle and conformance LogMessageBundle, type metadata accessor for LogMessageBundle, (uint64_t)&protocol conformance descriptor for LogMessageBundle);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance LogMessageBundle@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static LogMessageBundle._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LogMessageBundle()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessageBundle and conformance LogMessageBundle, type metadata accessor for LogMessageBundle, (uint64_t)&protocol conformance descriptor for LogMessageBundle);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LogMessageBundle()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessageBundle and conformance LogMessageBundle, type metadata accessor for LogMessageBundle, (uint64_t)&protocol conformance descriptor for LogMessageBundle);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in LogMessageBundle()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessageBundle and conformance LogMessageBundle, type metadata accessor for LogMessageBundle, (uint64_t)&protocol conformance descriptor for LogMessageBundle);
}

uint64_t type metadata accessor for LogMessageBundle(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for LogMessageBundle);
}

uint64_t base witness table accessor for Message in LogMessageBundle()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessageBundle and conformance LogMessageBundle, type metadata accessor for LogMessageBundle, (uint64_t)&protocol conformance descriptor for LogMessageBundle);
}

uint64_t base witness table accessor for Hashable in LogMessageBundle()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessageBundle and conformance LogMessageBundle, type metadata accessor for LogMessageBundle, (uint64_t)&protocol conformance descriptor for LogMessageBundle);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in LogMessageBundle()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessageBundle and conformance LogMessageBundle, type metadata accessor for LogMessageBundle, (uint64_t)&protocol conformance descriptor for LogMessageBundle);
}

uint64_t base witness table accessor for Equatable in LogMessage()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessage and conformance LogMessage, type metadata accessor for LogMessage, (uint64_t)&protocol conformance descriptor for LogMessage);
}

uint64_t base witness table accessor for Message in LogMessage()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessage and conformance LogMessage, type metadata accessor for LogMessage, (uint64_t)&protocol conformance descriptor for LogMessage);
}

uint64_t base witness table accessor for Hashable in LogMessage()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessage and conformance LogMessage, type metadata accessor for LogMessage, (uint64_t)&protocol conformance descriptor for LogMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in LogMessage()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type LogMessage and conformance LogMessage, type metadata accessor for LogMessage, (uint64_t)&protocol conformance descriptor for LogMessage);
}

uint64_t specialized static LogMessage.OneOf_Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v30;

  v4 = type metadata accessor for Google_Protobuf_Any();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LogMessage.OneOf_Content(0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (uint64_t *)((char *)&v30 - v15);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LogMessage.OneOf_Content, LogMessage.OneOf_Content));
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = &v20[*(int *)(v21 + 48)];
  outlined init with copy of LogMessage.OneOf_Content(a1, (uint64_t)v20);
  outlined init with copy of LogMessage.OneOf_Content(a2, (uint64_t)v22);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of LogMessage.OneOf_Content((uint64_t)v20, (uint64_t)v16);
    v26 = *v16;
    v25 = v16[1];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      if (v26 == *(_QWORD *)v22 && v25 == *((_QWORD *)v22 + 1))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0)
        {
          outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for LogMessage.OneOf_Content);
          goto LABEL_8;
        }
      }
      outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for LogMessage.OneOf_Content);
      v23 = 1;
      return v23 & 1;
    }
    swift_bridgeObjectRelease();
LABEL_7:
    outlined destroy of Coordinate3DPB?((uint64_t)v20, &demangling cache variable for type metadata for (LogMessage.OneOf_Content, LogMessage.OneOf_Content));
LABEL_8:
    v23 = 0;
    return v23 & 1;
  }
  outlined init with copy of LogMessage.OneOf_Content((uint64_t)v20, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v22, v4);
  v23 = static Google_Protobuf_Any.== infix(_:_:)();
  v24 = *(void (**)(char *, uint64_t))(v5 + 8);
  v24(v8, v4);
  v24(v12, v4);
  outlined destroy of Matrix3x3PB((uint64_t)v20, type metadata accessor for LogMessage.OneOf_Content);
  return v23 & 1;
}

uint64_t specialized static LogMessageBundle.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    v13 = type metadata accessor for LogMessageBundle(0);
    v14 = (char *)a1 + *(int *)(v13 + 20);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 20), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static LogMessage.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  char *v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;

  v88 = a2;
  v80 = type metadata accessor for UnknownStorage();
  v76 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80, v3);
  v75 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v74 = (char *)&v73 - v7;
  v86 = type metadata accessor for LogMessage.OneOf_Content(0);
  v78 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86, v8);
  v73 = (uint64_t)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LogMessage.OneOf_Content?, LogMessage.OneOf_Content?));
  MEMORY[0x24BDAC7A8](v77, v10);
  v81 = (uint64_t)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogMessage.OneOf_Content?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v85 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v16);
  v83 = (char *)&v73 - v17;
  MEMORY[0x24BDAC7A8](v18, v19);
  v84 = (char *)&v73 - v20;
  v21 = type metadata accessor for CMTimeProtobuf(0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21, v23);
  v82 = (uint64_t)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?));
  MEMORY[0x24BDAC7A8](v25, v26);
  v28 = (char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CMTimeProtobuf?);
  MEMORY[0x24BDAC7A8](v29, v30);
  v32 = (char *)&v73 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33, v34);
  v36 = (char *)&v73 - v35;
  MEMORY[0x24BDAC7A8](v37, v38);
  v40 = (char *)&v73 - v39;
  v41 = type metadata accessor for LogMessage(0);
  v42 = *(int *)(v41 + 40);
  v87 = a1;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)a1 + v42, (uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v79 = v41;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v88 + *(int *)(v41 + 40), (uint64_t)v36, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v43 = (uint64_t)&v28[*(int *)(v25 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v40, (uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v36, v43, &demangling cache variable for type metadata for CMTimeProtobuf?);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v44((uint64_t)v28, 1, v21) != 1)
  {
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v28, (uint64_t)v32, &demangling cache variable for type metadata for CMTimeProtobuf?);
    if (v44(v43, 1, v21) != 1)
    {
      v59 = v82;
      outlined init with take of Matrix2dPB(v43, v82, type metadata accessor for CMTimeProtobuf);
      if (*(_QWORD *)v32 == *(_QWORD *)v59 && *((_DWORD *)v32 + 2) == *(_DWORD *)(v59 + 8))
      {
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v60 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of Matrix3x3PB(v59, type metadata accessor for CMTimeProtobuf);
        outlined destroy of Coordinate3DPB?((uint64_t)v36, &demangling cache variable for type metadata for CMTimeProtobuf?);
        outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
        outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for CMTimeProtobuf);
        outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
        if ((v60 & 1) == 0)
          goto LABEL_26;
        goto LABEL_4;
      }
      outlined destroy of Matrix3x3PB(v59, type metadata accessor for CMTimeProtobuf);
      outlined destroy of Coordinate3DPB?((uint64_t)v36, &demangling cache variable for type metadata for CMTimeProtobuf?);
      outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
      outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for CMTimeProtobuf);
      v58 = (uint64_t)v28;
      v57 = &demangling cache variable for type metadata for CMTimeProtobuf?;
LABEL_25:
      outlined destroy of Coordinate3DPB?(v58, v57);
      goto LABEL_26;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v36, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
    outlined destroy of Matrix3x3PB((uint64_t)v32, type metadata accessor for CMTimeProtobuf);
LABEL_19:
    v57 = &demangling cache variable for type metadata for (CMTimeProtobuf?, CMTimeProtobuf?);
    v58 = (uint64_t)v28;
    goto LABEL_25;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v36, &demangling cache variable for type metadata for CMTimeProtobuf?);
  outlined destroy of Coordinate3DPB?((uint64_t)v40, &demangling cache variable for type metadata for CMTimeProtobuf?);
  if (v44(v43, 1, v21) != 1)
    goto LABEL_19;
  outlined destroy of Coordinate3DPB?((uint64_t)v28, &demangling cache variable for type metadata for CMTimeProtobuf?);
LABEL_4:
  v46 = v87;
  v45 = v88;
  v48 = (uint64_t)v85;
  v47 = v86;
  v50 = (uint64_t)v83;
  v49 = (uint64_t)v84;
  if (*v87 == *v88 && v87[1] == v88[1] || (v51 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((_DWORD *)v46 + 4) != *((_DWORD *)v45 + 4))
    {
LABEL_26:
      v51 = 0;
      return v51 & 1;
    }
    if (v46[3] == v45[3] && v46[4] == v45[4] || (v51 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (v46[5] == v45[5] && v46[6] == v45[6] || (v51 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        v52 = v79;
        outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v46 + *(int *)(v79 + 32), v49, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
        outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v45 + *(int *)(v52 + 32), v50, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
        v53 = v81;
        v54 = v81 + *(int *)(v77 + 48);
        outlined init with copy of (Int32, Matrix2dPB)(v49, v81, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
        v55 = v53;
        outlined init with copy of (Int32, Matrix2dPB)(v50, v54, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
        v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
        if (v56(v55, 1, v47) == 1)
        {
          outlined destroy of Coordinate3DPB?(v50, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
          v55 = v81;
          outlined destroy of Coordinate3DPB?(v49, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
          if (v56(v54, 1, v47) == 1)
          {
            outlined destroy of Coordinate3DPB?(v55, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
LABEL_32:
            v64 = v79;
            v65 = v80;
            v66 = (char *)v46 + *(int *)(v79 + 36);
            v67 = v76;
            v68 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
            v69 = v74;
            v68(v74, v66, v80);
            v70 = (char *)v45 + *(int *)(v64 + 36);
            v71 = v75;
            v68(v75, v70, v65);
            lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
            v51 = dispatch thunk of static Equatable.== infix(_:_:)();
            v72 = *(void (**)(char *, uint64_t))(v67 + 8);
            v72(v71, v65);
            v72(v69, v65);
            return v51 & 1;
          }
        }
        else
        {
          outlined init with copy of (Int32, Matrix2dPB)(v55, v48, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
          if (v56(v54, 1, v47) != 1)
          {
            v62 = v73;
            outlined init with take of Matrix2dPB(v54, v73, type metadata accessor for LogMessage.OneOf_Content);
            v63 = specialized static LogMessage.OneOf_Content.== infix(_:_:)(v48, v62);
            outlined destroy of Matrix3x3PB(v62, type metadata accessor for LogMessage.OneOf_Content);
            outlined destroy of Coordinate3DPB?(v50, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
            outlined destroy of Coordinate3DPB?(v49, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
            outlined destroy of Matrix3x3PB(v48, type metadata accessor for LogMessage.OneOf_Content);
            outlined destroy of Coordinate3DPB?(v55, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
            if ((v63 & 1) != 0)
              goto LABEL_32;
            goto LABEL_26;
          }
          outlined destroy of Coordinate3DPB?(v50, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
          outlined destroy of Coordinate3DPB?(v49, &demangling cache variable for type metadata for LogMessage.OneOf_Content?);
          outlined destroy of Matrix3x3PB(v48, type metadata accessor for LogMessage.OneOf_Content);
        }
        v57 = &demangling cache variable for type metadata for (LogMessage.OneOf_Content?, LogMessage.OneOf_Content?);
        v58 = v55;
        goto LABEL_25;
      }
    }
  }
  return v51 & 1;
}

uint64_t outlined init with copy of LogMessage.OneOf_Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LogMessage.OneOf_Content(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for LogMessageBundle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D77293C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for LogMessageBundle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D7729C4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t SequenceMetadata.sequenceID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

float SequenceMetadata.handRadius.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

Hands::SequenceMetadata_optional __swiftcall FASequencePopulate.populate()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  void *v20;
  float v21;
  int v22;
  _QWORD v23[2];
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  Hands::SequenceMetadata_optional result;

  v24 = v0;
  v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v2, v3);
  v4 = type metadata accessor for SequenceMetadataPB(0);
  MEMORY[0x24BDAC7A8](v4, v5);
  v23[0] = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(_QWORD *)(v1 + 16);
  URL.init(fileURLWithPath:)();
  Data.init(contentsOf:options:)();
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SequenceMetadataPB and conformance SequenceMetadataPB, type metadata accessor for SequenceMetadataPB, (uint64_t)&protocol conformance descriptor for SequenceMetadataPB);
  Message.init(serializedData:extensions:partial:options:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v13 = v23[0];
  v14 = *(_QWORD *)(v23[0] + *(int *)(v4 + 20));
  swift_beginAccess();
  v16 = *(_QWORD *)(v14 + 16);
  v15 = *(_QWORD *)(v14 + 24);
  swift_beginAccess();
  v17 = *(_DWORD *)(v14 + 120);
  v18 = *(unsigned __int8 *)(v14 + 124);
  swift_bridgeObjectRetain();
  v19 = outlined destroy of Matrix3x3PB(v13, type metadata accessor for SequenceMetadataPB);
  if (v18)
    v22 = 0;
  else
    v22 = v17;
  v12 = v24;
  *v24 = v16;
  v12[1] = v15;
  *((_DWORD *)v12 + 4) = v22;
  result.value.sequenceID._object = v20;
  result.value.sequenceID._countAndFlagsBits = v19;
  result.value.handRadius = v21;
  return result;
}

uint64_t FAProtoBufReferenceHandsPopulation.__allocating_init(protobufPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t FAProtoBufReferenceHandsPopulation.init(protobufPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t FAProtoBufReferenceHandsPopulation.populate(accordingTo:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t result;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(uint64_t, uint64_t, uint64_t);
  _QWORD *v85;
  uint64_t v86;
  _DWORD *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  _QWORD *v99;
  _QWORD *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  unint64_t v129;
  unint64_t v130;
  _OWORD *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  unsigned __int8 *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  _QWORD *v145;
  char v146;
  simd_float4x4 *v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  char *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  simd_float4x4 v236;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialHandMultiCam?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v190 = (char *)&v173 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v209 = (char *)&v173 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PoseSpecPB?);
  MEMORY[0x24BDAC7A8](v10, v11);
  v210 = (char *)&v173 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PoseSpecPB(0);
  v193 = *(_QWORD *)(v13 - 8);
  v194 = v13;
  MEMORY[0x24BDAC7A8](v13, v14);
  v189 = (char **)((char *)&v173 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for JointTransformPB(0);
  v185 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16, v17);
  v215 = (char *)&v173 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19, v20);
  v22 = (char *)&v173 - v21;
  v211 = type metadata accessor for HandPosePB(0);
  v206 = *(_QWORD *)(v211 - 8);
  MEMORY[0x24BDAC7A8](v211, v23);
  v184 = (char **)((char *)&v173 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPosePB?);
  MEMORY[0x24BDAC7A8](v25, v26);
  v183 = (uint64_t)&v173 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28, v29);
  v205 = (uint64_t)&v173 - v30;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptorInternal?);
  MEMORY[0x24BDAC7A8](v31, v32);
  v204 = (char *)&v173 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for HandDescriptor();
  v203 = *(_QWORD *)(v192 - 8);
  MEMORY[0x24BDAC7A8](v192, v34);
  v191 = (char *)&v173 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36, v37);
  v214 = (uint64_t *)((char *)&v173 - v38);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v39, v40);
  v202 = (uint64_t)&v173 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v42, v43);
  v201 = (uint64_t)&v173 - v44;
  MEMORY[0x24BDAC7A8](v45, v46);
  v200 = (uint64_t)&v173 - v47;
  v208 = type metadata accessor for Coordinate3DPB(0);
  v199 = *(_QWORD *)(v208 - 8);
  MEMORY[0x24BDAC7A8](v208, v48);
  v198 = (char **)((char *)&v173 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v50, v51);
  v197 = (char *)&v173 - v52;
  MEMORY[0x24BDAC7A8](v53, v54);
  v196 = (char **)((char *)&v173 - v55);
  v195 = type metadata accessor for HandGTDescriptorPB(0);
  v207 = *(_QWORD *)(v195 - 8);
  MEMORY[0x24BDAC7A8](v195, v56);
  v58 = (char *)&v173 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v59, v60);
  *(_QWORD *)&v224 = (char *)&v173 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v223 = type metadata accessor for FrameLabelPB(0);
  MEMORY[0x24BDAC7A8](v223, v62);
  v64 = (char *)&v173 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for URL();
  v66 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65, v67);
  v69 = (char *)&v173 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)&v225 = *(_QWORD *)(v2 + 16);
  URL.init(fileURLWithPath:)();
  v71 = Data.init(contentsOf:options:)();
  v182 = v70;
  v176 = v69;
  v177 = v66;
  v217 = v58;
  v178 = v65;
  *(_QWORD *)&v228 = 0;
  v226 = 0u;
  v227 = 0u;
  v72 = v71;
  v74 = v73;
  outlined copy of Data._Representation(v71, v73);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type FrameLabelPB and conformance FrameLabelPB, type metadata accessor for FrameLabelPB, (uint64_t)&protocol conformance descriptor for FrameLabelPB);
  Message.init(serializedData:extensions:partial:options:)();
  v174 = v72;
  v175 = v74;
  v75 = *((_QWORD *)v64 + 1);
  v188 = *(_QWORD *)(v75 + 16);
  if (v188)
  {
    v173 = v64;
    v76 = v207;
    v187 = v75 + ((*(unsigned __int8 *)(v207 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v207 + 80));
    v180 = v214 + 11;
    result = swift_bridgeObjectRetain();
    v78 = 0;
    v179 = xmmword_23D9A3E10;
    v213 = MEMORY[0x24BEE4AF8];
    v79 = v208;
    v80 = (uint64_t)v217;
    v186 = v75;
    while (v78 < *(_QWORD *)(v75 + 16))
    {
      outlined init with copy of TrackingUpdateDataPB(v187 + *(_QWORD *)(v76 + 72) * v78, v80, type metadata accessor for HandGTDescriptorPB);
      v216 = *(int *)(v195 + 20);
      v81 = *(_QWORD *)(v80 + v216)
          + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
      swift_beginAccess();
      v82 = v81;
      v83 = v200;
      outlined init with copy of (Int32, Matrix2dPB)(v82, v200, &demangling cache variable for type metadata for Coordinate3DPB?);
      v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v199 + 48);
      if (v84(v83, 1, v79) == 1)
      {
        v85 = v196;
        *v196 = 0;
        *((_DWORD *)v85 + 2) = 0;
        UnknownStorage.init()();
        v86 = v83;
        v87 = v85;
        outlined destroy of Coordinate3DPB?(v86, &demangling cache variable for type metadata for Coordinate3DPB?);
      }
      else
      {
        v90 = v83;
        v87 = v196;
        outlined init with take of Matrix2dPB(v90, (uint64_t)v196, type metadata accessor for Coordinate3DPB);
      }
      v89 = (uint64_t)v197;
      LODWORD(v88) = *v87;
      v225 = v88;
      outlined destroy of Matrix3x3PB((uint64_t)v87, type metadata accessor for Coordinate3DPB);
      v91 = *(_QWORD *)&v217[v216]
          + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
      swift_beginAccess();
      v92 = v91;
      v93 = v201;
      outlined init with copy of (Int32, Matrix2dPB)(v92, v201, &demangling cache variable for type metadata for Coordinate3DPB?);
      if (v84(v93, 1, v79) == 1)
      {
        *(_QWORD *)v89 = 0;
        *(_DWORD *)(v89 + 8) = 0;
        UnknownStorage.init()();
        outlined destroy of Coordinate3DPB?(v93, &demangling cache variable for type metadata for Coordinate3DPB?);
      }
      else
      {
        outlined init with take of Matrix2dPB(v93, v89, type metadata accessor for Coordinate3DPB);
      }
      LODWORD(v94) = *(_DWORD *)(v89 + 4);
      v224 = v94;
      outlined destroy of Matrix3x3PB(v89, type metadata accessor for Coordinate3DPB);
      v95 = *(_QWORD *)&v217[v216]
          + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__center;
      swift_beginAccess();
      v96 = v95;
      v97 = v202;
      outlined init with copy of (Int32, Matrix2dPB)(v96, v202, &demangling cache variable for type metadata for Coordinate3DPB?);
      v98 = v84(v97, 1, v79);
      v212 = v78;
      v99 = v198;
      if (v98 == 1)
      {
        *v198 = 0;
        *((_DWORD *)v99 + 2) = 0;
        UnknownStorage.init()();
        outlined destroy of Coordinate3DPB?(v97, &demangling cache variable for type metadata for Coordinate3DPB?);
      }
      else
      {
        outlined init with take of Matrix2dPB(v97, (uint64_t)v198, type metadata accessor for Coordinate3DPB);
      }
      v100 = v209;
      *(_QWORD *)&v101 = __PAIR64__(v224, v225);
      *((_QWORD *)&v101 + 1) = *((unsigned int *)v99 + 2);
      v225 = v101;
      outlined destroy of Matrix3x3PB((uint64_t)v99, type metadata accessor for Coordinate3DPB);
      v103 = v216;
      v102 = (uint64_t)v217;
      v104 = *(_QWORD *)&v217[v216];
      swift_beginAccess();
      if (*(_BYTE *)(v104 + 20))
        v105 = 0;
      else
        v105 = *(unsigned int *)(v104 + 16);
      v106 = (unsigned __int8 *)(v104
                               + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__isLeft);
      swift_beginAccess();
      LODWORD(v106) = *v106;
      v226 = v225;
      v227 = v225;
      v107 = type metadata accessor for HandDescriptorInternal();
      v108 = (uint64_t)v204;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 56))(v204, 1, 1, v107);
      v109 = (uint64_t)v214;
      HandDescriptor.init(handID:isLeft:handRadius:handCenter:internalData:)(v105, (int)v106, (uint64_t)&v226, v108, (uint64_t)v214, 0.0);
      v110 = v104
           + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handPose;
      swift_beginAccess();
      v111 = v205;
      outlined init with copy of (Int32, Matrix2dPB)(v110, v205, &demangling cache variable for type metadata for HandPosePB?);
      v112 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v206 + 48);
      LODWORD(v110) = v112(v111, 1, v211);
      outlined destroy of Coordinate3DPB?(v111, &demangling cache variable for type metadata for HandPosePB?);
      v113 = (uint64_t)v210;
      if ((_DWORD)v110 != 1)
      {
        v114 = *(_QWORD *)(v102 + v103)
             + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__handPose;
        swift_beginAccess();
        v115 = v183;
        outlined init with copy of (Int32, Matrix2dPB)(v114, v183, &demangling cache variable for type metadata for HandPosePB?);
        v116 = v211;
        if (v112(v115, 1, v211) == 1)
        {
          v117 = v184;
          *v184 = MEMORY[0x24BEE4AF8];
          *((_DWORD *)v117 + 2) = 0;
          UnknownStorage.init()();
          v118 = (char *)v117 + *(int *)(v116 + 28);
          v119 = type metadata accessor for Matrix2dPB(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56))(v118, 1, 1, v119);
          outlined destroy of Coordinate3DPB?(v115, &demangling cache variable for type metadata for HandPosePB?);
        }
        else
        {
          v117 = v184;
          outlined init with take of Matrix2dPB(v115, (uint64_t)v184, type metadata accessor for HandPosePB);
        }
        v120 = v185;
        v121 = *v117;
        swift_bridgeObjectRetain();
        outlined destroy of Matrix3x3PB((uint64_t)v117, type metadata accessor for HandPosePB);
        v122 = *(_QWORD *)(v121 + 16);
        if (v122)
        {
          v235 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v122, 0);
          v123 = *(unsigned __int8 *)(v120 + 80);
          v181 = v121;
          v124 = v121 + ((v123 + 32) & ~v123);
          v125 = *(_QWORD *)(v120 + 72);
          v126 = v235;
          v127 = (uint64_t)v215;
          do
          {
            outlined init with copy of TrackingUpdateDataPB(v124, (uint64_t)v22, type metadata accessor for JointTransformPB);
            outlined init with copy of TrackingUpdateDataPB((uint64_t)v22, v127, type metadata accessor for JointTransformPB);
            JointTransform.init(protoBuf:)(v127, &v226);
            outlined destroy of Matrix3x3PB((uint64_t)v22, type metadata accessor for JointTransformPB);
            v128 = v226;
            v224 = v228;
            v225 = v227;
            v222 = v230;
            v223 = v229;
            v220 = v232;
            v221 = v231;
            v218 = v234;
            v219 = v233;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v126 + 16) + 1, 1);
              v127 = (uint64_t)v215;
              v126 = v235;
            }
            v130 = *(_QWORD *)(v126 + 16);
            v129 = *(_QWORD *)(v126 + 24);
            if (v130 >= v129 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v129 > 1, v130 + 1, 1);
              v127 = (uint64_t)v215;
              v126 = v235;
            }
            *(_QWORD *)(v126 + 16) = v130 + 1;
            v131 = (_OWORD *)(v126 + 144 * v130);
            v131[2] = v128;
            v132 = v224;
            v131[3] = v225;
            v131[4] = v132;
            v133 = v222;
            v131[5] = v223;
            v131[6] = v133;
            v134 = v220;
            v131[7] = v221;
            v131[8] = v134;
            v135 = v218;
            v131[9] = v219;
            v131[10] = v135;
            v124 += v125;
            --v122;
          }
          while (v122);
          swift_bridgeObjectRelease();
          v100 = v209;
          v103 = v216;
        }
        else
        {
          swift_bridgeObjectRelease();
          v126 = MEMORY[0x24BEE4AF8];
        }
        v136 = (unsigned __int8 *)(*(_QWORD *)&v217[v103]
                                 + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__isLeft);
        swift_beginAccess();
        v137 = *v136;
        v138 = swift_bridgeObjectRetain();
        v139 = specialized static HandPose.calculateCoordinatesFromJointTransforms(_:)(v138);
        swift_bridgeObjectRelease();
        type metadata accessor for HandsKitUtils();
        v140 = swift_bridgeObjectRetain();
        static HandsKitUtils.calculatePalmCenter(_:)(v140, &v226);
        swift_bridgeObjectRelease();
        v225 = v226;
        v141 = *((_QWORD *)&v227 + 1);
        v142 = v227;
        if (v137)
          v143 = 257;
        else
          v143 = 1;
        v109 = (uint64_t)v214;
        result = outlined consume of HandPose?(v214[2]);
        *(_QWORD *)(v109 + 16) = v126;
        *(_QWORD *)(v109 + 24) = v139;
        *(_OWORD *)(v109 + 32) = v225;
        *(_QWORD *)(v109 + 48) = v142;
        *(_QWORD *)(v109 + 56) = v141;
        v144 = v179;
        *(_OWORD *)(v109 + 64) = v179;
        *(_QWORD *)(v109 + 80) = 0x3F80000000000000;
        v145 = v180;
        *v180 = 0;
        v145[1] = 0;
        *(_OWORD *)(v109 + 104) = v144;
        *(_QWORD *)(v109 + 120) = 0x3F80000000000000;
        *(_QWORD *)(v109 + 128) = v143;
        if (!*(_QWORD *)(v182 + 16))
          goto LABEL_50;
        result = specialized __RawDictionaryStorage.find<A>(_:)(2, 1);
        if ((v146 & 1) == 0)
          goto LABEL_51;
        *(double *)v236.columns[0].i64 = ImageCalibrationData.headsetToCameraTransform.getter();
        __invert_f4(v236);
        HandDescriptor.transformHandsCoordinates(from:)(v147);
        v113 = (uint64_t)v210;
        v103 = v216;
        v102 = (uint64_t)v217;
      }
      v148 = *(_QWORD *)(v102 + v103);
      v149 = (_BYTE *)(v148
                     + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__pinchDown);
      swift_beginAccess();
      *(_BYTE *)(v109 + 4) = *v149 & 1;
      v150 = v148
           + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__poseSpec;
      swift_beginAccess();
      outlined init with copy of (Int32, Matrix2dPB)(v150, v113, &demangling cache variable for type metadata for PoseSpecPB?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v193 + 48))(v113, 1, v194) == 1)
      {
        v151 = v189;
        v152 = MEMORY[0x24BEE4AF8];
        *v189 = MEMORY[0x24BEE4AF8];
        v151[1] = 0;
        *((_BYTE *)v151 + 16) = 1;
        v151[3] = v152;
        UnknownStorage.init()();
        outlined destroy of Coordinate3DPB?(v113, &demangling cache variable for type metadata for PoseSpecPB?);
      }
      else
      {
        v151 = v189;
        outlined init with take of Matrix2dPB(v113, (uint64_t)v189, type metadata accessor for PoseSpecPB);
      }
      v153 = (uint64_t)v190;
      v154 = v212;
      PoseSpec.init(protoBuf:)(v151, &v226);
      v155 = v226;
      v156 = (uint64_t)v214;
      outlined consume of HandPose?(v214[25]);
      *(_OWORD *)(v156 + 200) = v155;
      v157 = *(_QWORD *)&v217[v216]
           + OBJC_IVAR____TtCV5Hands18HandGTDescriptorPBP33_8900FD0A6C0353EAD96D373BBF2A42BD13_StorageClass__partialHand;
      swift_beginAccess();
      outlined init with copy of (Int32, Matrix2dPB)(v157, v153, &demangling cache variable for type metadata for PartialHandMultiCam?);
      v158 = type metadata accessor for PartialHandMultiCam(0);
      v159 = *(_QWORD *)(v158 - 8);
      v160 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v159 + 48))(v153, 1, v158);
      v161 = (uint64_t)v191;
      if (v160 == 1)
      {
        v162 = MEMORY[0x24BEE4AF8];
        *v100 = MEMORY[0x24BEE4AF8];
        v100[1] = v162;
        UnknownStorage.init()();
        outlined destroy of Coordinate3DPB?(v153, &demangling cache variable for type metadata for PartialHandMultiCam?);
      }
      else
      {
        outlined init with take of Matrix2dPB(v153, (uint64_t)v100, type metadata accessor for PartialHandMultiCam);
      }
      v79 = v208;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v100, 0, 1, v158);
      v163 = (uint64_t)v214;
      outlined assign with take of PartialHandMultiCam?((uint64_t)v100, (uint64_t)v214 + *(int *)(v192 + 144));
      outlined init with copy of TrackingUpdateDataPB(v163, v161, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v164 = v213;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v164 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v164 + 16) + 1, 1, v164, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandDescriptor>, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v166 = *(_QWORD *)(v164 + 16);
      v165 = *(_QWORD *)(v164 + 24);
      v213 = v164;
      v167 = v203;
      if (v166 >= v165 >> 1)
      {
        v169 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v165 > 1, v166 + 1, 1, v213, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandDescriptor>, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
        v167 = v203;
        v213 = v169;
      }
      v78 = v154 + 1;
      v168 = v213;
      *(_QWORD *)(v213 + 16) = v166 + 1;
      outlined init with take of Matrix2dPB(v161, v168+ ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80))+ *(_QWORD *)(v167 + 72) * v166, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v80 = (uint64_t)v217;
      outlined destroy of Matrix3x3PB((uint64_t)v217, type metadata accessor for HandGTDescriptorPB);
      result = outlined destroy of Matrix3x3PB((uint64_t)v214, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
      v76 = v207;
      v75 = v186;
      if (v78 == v188)
      {
        outlined consume of Data._Representation(v174, v175);
        swift_bridgeObjectRelease();
        v170 = v178;
        v64 = v173;
        goto LABEL_48;
      }
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined consume of Data._Representation(v174, v175);
    swift_bridgeObjectRelease();
    v213 = MEMORY[0x24BEE4AF8];
    v170 = v178;
LABEL_48:
    v172 = v176;
    v171 = v177;
    outlined destroy of Matrix3x3PB((uint64_t)v64, type metadata accessor for FrameLabelPB);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v172, v170);
    return v213;
  }
  return result;
}

uint64_t FAProtoBufReferenceHandsPopulation.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for ReferenceHandsPopulation.populate(accordingTo:) in conformance FAProtoBufReferenceHandsPopulation(uint64_t a1)
{
  return FAProtoBufReferenceHandsPopulation.populate(accordingTo:)(a1);
}

uint64_t FAProtoBufImageDataPopulation.populate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v96;
  void *v97;
  uint64_t v98;
  void *v99;
  id v100;
  void *v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  unint64_t v124;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  char v130;
  unint64_t v131;
  Swift::String v132;
  uint64_t result;
  char v134[8];
  uint64_t v135;
  __int128 *v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  unint64_t v161;
  void *v162;
  unint64_t v163;
  _QWORD *v164;
  unint64_t *v165;
  _QWORD v166[24];
  _OWORD v167[12];
  _BYTE v168[192];
  _BYTE v169[192];
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _OWORD v175[13];

  v1 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v1, v2);
  v140 = (char *)&v137 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for ImageDataPB(0);
  MEMORY[0x24BDAC7A8](v143, v4);
  v138 = (unint64_t)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v7);
  v137 = (uint64_t)&v137 - v8;
  MEMORY[0x24BDAC7A8](v9, v10);
  v139 = (char *)&v137 - v11;
  MEMORY[0x24BDAC7A8](v12, v13);
  v145 = (uint64_t)&v137 - v14;
  v15 = type metadata accessor for URL();
  v141 = *(_QWORD *)(v15 - 8);
  v142 = v15;
  MEMORY[0x24BDAC7A8](v15, v16);
  v144 = (char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BEE4AF8];
  v174 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v165 = &v174;
  specialized Sequence.forEach(_:)(outlined read-only object #0 of FAProtoBufImageDataPopulation.populate(), (uint64_t)&outlined read-only object #1 of FAProtoBufImageDataPopulation.populate(), (void (*)(uint64_t, uint64_t, uint64_t *))partial apply for closure #1 in FAProtoBufImageDataPopulation.populate());
  v153 = 0;
  v19 = specialized Dictionary.init(dictionaryLiteral:)(v18);
  v173 = v19;
  v146 = v0;
  v20 = *(_QWORD *)(v0 + 16);
  v149 = *(_QWORD *)(v20 + 16);
  if (!v149)
  {
    v131 = v19;
    goto LABEL_87;
  }
  v148 = v20 + 32;
  v151 = v20;
  swift_bridgeObjectRetain();
  v21 = v151;
  v22 = 0;
  while (2)
  {
    if (v22 >= *(_QWORD *)(v21 + 16))
      goto LABEL_89;
    v152 = v22;
    v23 = (uint64_t *)(v148 + 16 * v22);
    v25 = *v23;
    v24 = v23[1];
    swift_bridgeObjectRetain();
    v26 = (void *)MEMORY[0x2426372E8](v25, v24);
    v27 = objc_msgSend(v26, sel_lastPathComponent);

    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v29;

    *(_QWORD *)&v170 = 95;
    *((_QWORD *)&v170 + 1) = 0xE100000000000000;
    MEMORY[0x24BDAC7A8](v31, v32);
    v136 = &v170;
    swift_bridgeObjectRetain();
    v33 = v153;
    v34 = (_QWORD *)specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v134, v28, v30);
    v153 = v33;
    swift_bridgeObjectRelease();
    if (v34[2] < 3uLL)
      goto LABEL_93;
    v35 = v34[8];
    v36 = v34[9];
    v37 = v34[10];
    v38 = v34[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v39 = MEMORY[0x242637378](v35, v36, v37, v38);
    v41 = v40;
    swift_bridgeObjectRelease();
    v42 = *(_QWORD *)"DownCamLeft" == v39 && *(_QWORD *)"eft" == v41;
    v155 = v39;
    v156 = v41;
    if (!v42
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (*(_QWORD *)"DownCamRight" != v155 || *(_QWORD *)"ight" != v156))
    {
      v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v45 = v155;
      v46 = v156;
      if ((v44 & 1) == 0)
      {
        v126 = &unk_250E33E48;
        v127 = 2;
        while (1)
        {
          v128 = v127 + 1;
          if (__OFADD__(v127, 1))
            break;
          if (*(v126 - 1) == v45 && *v126 == v46)
            goto LABEL_17;
          v130 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v45 = v155;
          v46 = v156;
          if ((v130 & 1) != 0)
            goto LABEL_17;
          v126 += 2;
          ++v127;
          if (v128 == 4)
            goto LABEL_82;
        }
LABEL_92:
        __break(1u);
LABEL_93:
        swift_bridgeObjectRelease();
        __break(1u);
LABEL_94:
        swift_bridgeObjectRelease();
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        LODWORD(v136) = 0;
        v135 = 754;
        v134[0] = 2;
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
LABEL_17:
    v147 = v25;
    v150 = v24;
    v47 = *(_QWORD *)(v146 + 24);
    v160 = *(id *)(v47 + 16);
    if (!v160)
    {
LABEL_82:
      swift_bridgeObjectRelease();
      goto LABEL_3;
    }
    v159 = v47 + 32;
    swift_bridgeObjectRetain();
    v48 = 0;
    v154 = v47;
    while (1)
    {
      if (v48 >= *(_QWORD *)(v47 + 16))
      {
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      v161 = v48;
      v49 = (uint64_t *)(v159 + 16 * v48);
      v51 = *v49;
      v50 = (void *)v49[1];
      swift_bridgeObjectRetain();
      v158 = v51;
      v162 = v50;
      v52 = (void *)MEMORY[0x2426372E8](v51, v50);
      v53 = objc_msgSend(v52, sel_lastPathComponent);

      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v56 = v55;

      v57 = HIBYTE(v56) & 0xF;
      if ((v56 & 0x2000000000000000) == 0)
        v57 = v54 & 0xFFFFFFFFFFFFLL;
      if (!v57)
      {
        v76 = (_QWORD *)MEMORY[0x24BEE4AF8];
        goto LABEL_51;
      }
      v58 = 7;
      if (((v56 >> 60) & ((v54 & 0x800000000000000) == 0)) != 0)
        v58 = 11;
      v157 = v58 | (v57 << 16);
      v59 = 4 * v57;
      swift_bridgeObjectRetain();
      v60 = 15;
      v61 = 15;
      v62 = 15;
      v163 = v56;
      v164 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        if (String.subscript.getter() == 95 && v64 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v65 & 1) == 0)
          {
            v60 = String.index(after:)();
            continue;
          }
        }
        if (v61 >> 14 != v60 >> 14)
        {
          if (v60 >> 14 < v61 >> 14)
            goto LABEL_96;
          v66 = String.subscript.getter();
          v68 = v67;
          v70 = v69;
          v72 = v71;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v73 = v164;
          else
            v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v164[2] + 1, 1, v164);
          v75 = v73[2];
          v74 = v73[3];
          if (v75 >= v74 >> 1)
            v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v74 > 1), v75 + 1, 1, v73);
          v73[2] = v75 + 1;
          v164 = v73;
          v63 = &v73[4 * v75];
          v63[4] = v66;
          v63[5] = v68;
          v63[6] = v70;
          v63[7] = v72;
        }
        v60 = String.index(after:)();
        v61 = v60;
        v62 = v60;
      }
      while (v59 != v60 >> 14);
      if (v59 == v61 >> 14)
      {
        swift_bridgeObjectRelease();
        v47 = v154;
        v76 = v164;
        goto LABEL_51;
      }
      v47 = v154;
      if (v59 < v62 >> 14)
        goto LABEL_96;
      v77 = String.subscript.getter();
      v79 = v78;
      v81 = v80;
      v83 = v82;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v84 = v164;
      else
        v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v164[2] + 1, 1, v164);
      v86 = v84[2];
      v85 = v84[3];
      if (v86 >= v85 >> 1)
        v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v85 > 1), v86 + 1, 1, v84);
      v84[2] = v86 + 1;
      v87 = &v84[4 * v86];
      v87[4] = v77;
      v87[5] = v79;
      v87[6] = v81;
      v87[7] = v83;
      v76 = v84;
LABEL_51:
      swift_bridgeObjectRelease();
      if (v76[2] > 2uLL)
        break;
LABEL_19:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v48 = v161 + 1;
      if ((id)(v161 + 1) == v160)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_3:
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
    }
    v88 = v76[8];
    v89 = v76[9];
    v90 = v76[10];
    v91 = v76[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v92 = MEMORY[0x242637378](v88, v89, v90, v91);
    v94 = v93;
    swift_bridgeObjectRelease();
    if (v92 == v155 && v94 == v156)
    {
      v94 = v156;
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_19;
      v155 = v92;
    }
    swift_bridgeObjectRelease();
    v96 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
    v97 = v162;
    swift_bridgeObjectRetain();
    v98 = v158;
    v99 = (void *)MEMORY[0x2426372E8](v158, v97);
    swift_bridgeObjectRelease();
    v100 = objc_msgSend(v96, sel_initWithContentsOfFile_, v99);

    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    v101 = v153;
    v102 = Data.init(contentsOf:options:)();
    if (!v101)
    {
      v104 = (_QWORD *)v102;
      v105 = v103;
      v172 = 0;
      v171 = 0u;
      v170 = 0u;
      outlined copy of Data._Representation(v102, v103);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ImageDataPB and conformance ImageDataPB, type metadata accessor for ImageDataPB, (uint64_t)&protocol conformance descriptor for ImageDataPB);
      Message.init(serializedData:extensions:partial:options:)();
      v164 = v104;
      v153 = 0;
      v106 = v174;
      if (!*(_QWORD *)(v174 + 16))
        goto LABEL_94;
      v107 = specialized __RawDictionaryStorage.find<A>(_:)(v155, v94);
      if ((v108 & 1) == 0)
        goto LABEL_94;
      v109 = *(_QWORD *)(v106 + 56) + 16 * v107;
      v110 = *(_QWORD *)v109;
      v111 = *(unsigned __int8 *)(v109 + 8);
      swift_bridgeObjectRelease();
      v112 = (uint64_t)v139;
      if ((v111 & 1) != 0)
        goto LABEL_69;
      if (v110 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_90;
      if (v110 > 0x7FFFFFFF)
        goto LABEL_91;
LABEL_69:
      LODWORD(v161) = v111;
      v163 = v105;
      v113 = v110;
      Hands_trace_CBridge_3();
      outlined init with copy of TrackingUpdateDataPB(v145, v112, type metadata accessor for ImageDataPB);
      if (!v100)
        goto LABEL_95;
      v114 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v116 = v115;
      v117 = v137;
      outlined init with copy of TrackingUpdateDataPB(v112, v137, type metadata accessor for ImageDataPB);
      v118 = *(int *)(v143 + 44);
      v160 = v100;
      v119 = (uint64_t *)(v117 + v118);
      v120 = *(_QWORD *)(v117 + v118);
      v121 = *(_QWORD *)(v117 + v118 + 8);
      outlined copy of Data._Representation(v114, v116);
      outlined consume of Data?(v120, v121);
      *v119 = v114;
      v119[1] = v116;
      v122 = v138;
      outlined init with copy of TrackingUpdateDataPB(v117, v138, type metadata accessor for ImageDataPB);
      ImageData.init(protoBuf:)(v122, (uint64_t)v168);
      outlined consume of Data._Representation(v114, v116);
      outlined destroy of Matrix3x3PB(v112, type metadata accessor for ImageDataPB);
      outlined destroy of Matrix3x3PB(v117, type metadata accessor for ImageDataPB);
      outlined init with take of ImageData?((uint64_t)v168, (uint64_t)v169);
      outlined init with take of ImageData?((uint64_t)v169, (uint64_t)&v170);
      _s5Hands9ImageDataVSgWOg((uint64_t)&v170);
      swift_bridgeObjectRelease();
      Hands_trace_CBridge_3();
      swift_bridgeObjectRelease();
      outlined init with take of ImageData?((uint64_t)v169, (uint64_t)v168);
      if (_s5Hands9ImageDataVSgWOg((uint64_t)v168) == 1)
      {
        specialized Dictionary._Variant.removeValue(forKey:)(v113, v161, v166);
        outlined init with take of ImageData?((uint64_t)v166, (uint64_t)v167);
        v123 = v167;
      }
      else
      {
        outlined init with take of ImageData?((uint64_t)v169, (uint64_t)v167);
        v175[8] = v167[8];
        v175[9] = v167[9];
        v175[10] = v167[10];
        v175[11] = v167[11];
        v175[4] = v167[4];
        v175[5] = v167[5];
        v175[6] = v167[6];
        v175[7] = v167[7];
        v175[0] = v167[0];
        v175[1] = v167[1];
        v175[2] = v167[2];
        v175[3] = v167[3];
        outlined retain of ImageData((uint64_t)v167);
        v124 = v173;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v166[0] = v124;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v175, v113, v161, isUniquelyReferenced_nonNull_native);
        v173 = v166[0];
        swift_bridgeObjectRelease();
        v123 = v169;
      }
      outlined release of ImageData?((uint64_t)v123);

      outlined consume of Data._Representation((uint64_t)v164, v163);
      outlined destroy of Matrix3x3PB(v145, type metadata accessor for ImageDataPB);
      (*(void (**)(char *, uint64_t))(v141 + 8))(v144, v142);
LABEL_4:
      v21 = v151;
      v22 = v152 + 1;
      if (v152 + 1 == v149)
      {
        swift_bridgeObjectRelease();
        goto LABEL_86;
      }
      continue;
    }
    break;
  }

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v141 + 8))(v144, v142);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v170 = 0;
  *((_QWORD *)&v170 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v170 = 0xD00000000000001FLL;
  *((_QWORD *)&v170 + 1) = 0x800000023D9CB210;
  v132._countAndFlagsBits = v98;
  v132._object = v162;
  String.append(_:)(v132);
  swift_bridgeObjectRelease();
  *((_QWORD *)&v171 + 1) = MEMORY[0x24BEE0D00];
  specialized static HLog.E(file:function:line:_:_:)(0xD00000000000005BLL, 0x800000023D9CB110, 132, (uint64_t)&v170, MEMORY[0x24BEE4AF8]);

  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v170);
LABEL_86:
  v131 = v173;
LABEL_87:
  swift_bridgeObjectRelease();
  return v131;
}

uint64_t closure #1 in FAProtoBufImageDataPopulation.populate()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;

  v7 = *(_QWORD *)a3;
  v8 = *(_BYTE *)(a3 + 8);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, v8, a1, a2, isUniquelyReferenced_nonNull_native);
  *a4 = v11;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t static FAProtoBufImageDataPopulation.getCameraIDFromPath(_:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  _QWORD v13[2];

  v0 = (void *)MEMORY[0x2426372E8]();
  v1 = objc_msgSend(v0, sel_lastPathComponent);

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v13[0] = 95;
  v13[1] = 0xE100000000000000;
  v12[2] = v13;
  swift_bridgeObjectRetain();
  v5 = (_QWORD *)specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v12, v2, v4);
  swift_bridgeObjectRelease();
  if (v5[2] < 3uLL)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = v5[8];
    v7 = v5[9];
    v8 = v5[10];
    v9 = v5[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x242637378](v6, v7, v8, v9);
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t FAProtoBufImageDataPopulation.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FAProtoBufImageDataPopulation.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ImageDataPopulation.populate() in conformance FAProtoBufImageDataPopulation()
{
  return FAProtoBufImageDataPopulation.populate()();
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = String.index(after:)();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = String.subscript.getter();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = String.index(after:)();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = String.subscript.getter();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = String.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

