void Kalman3d::Kalman3d(Kalman3d *this, float a2, float a3, float a4, float a5)
{
  uint64_t i;
  _BYTE *v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  char *v23;
  uint64_t j;
  uint64_t v25;
  char *v26;
  uint64_t k;
  _BYTE v29[36];
  _BYTE __src[432];

  for (i = 0; i != 36; i += 12)
  {
    v10 = &v29[i];
    *(_QWORD *)v10 = *(_QWORD *)((char *)&unk_23D9A3EB0 + i);
    *((_DWORD *)v10 + 2) = *(_DWORD *)((char *)&unk_23D9A3EB0 + i + 8);
  }
  v11 = 0;
  v12 = *(float32x4_t *)MEMORY[0x24BDAEDF8];
  v13 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v14 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v15 = &__src[32];
  v16 = v29;
  do
  {
    v17 = 0;
    v18 = v15;
    do
    {
      v19 = *(float *)&v16[v17];
      v20 = vmulq_n_f32(v12, v19);
      v21 = vmulq_n_f32(v13, v19);
      *((_DWORD *)v18 - 6) = v20.i32[2];
      *((_QWORD *)v18 - 4) = v20.i64[0];
      v22 = vmulq_n_f32(v14, v19);
      *((_DWORD *)v18 - 2) = v21.i32[2];
      *((_QWORD *)v18 - 2) = v21.i64[0];
      *((_DWORD *)v18 + 2) = v22.i32[2];
      *(_QWORD *)v18 = v22.i64[0];
      v18 += 48;
      v17 += 4;
    }
    while (v17 != 12);
    ++v11;
    v16 += 12;
    v15 += 144;
  }
  while (v11 != 3);
  v23 = (char *)this + 480;
  memcpy((char *)this + 480, __src, 0x1B0uLL);
  for (j = 0; j != 3; ++j)
  {
    v25 = 0;
    v26 = v23;
    do
    {
      for (k = 0; k != 48; k += 16)
        *(float32x4_t *)&v26[k] = vmulq_n_f32(*(float32x4_t *)&v26[k], a2);
      ++v25;
      v26 += 144;
    }
    while (v25 != 3);
    v23 += 48;
  }
  *((float *)this + 228) = a3;
  *((float *)this + 229) = a4;
  *((float *)this + 230) = a5;
  Kalman3d::reset(this);
}

void *Kalman3d::reset(Kalman3d *this)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  _BYTE v16[36];
  _BYTE __src[432];

  v1 = 0;
  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 0;
  do
  {
    v2 = &v16[v1];
    *(_QWORD *)v2 = *(_QWORD *)((char *)&unk_23D9A3ED4 + v1);
    *((_DWORD *)v2 + 2) = *(_DWORD *)((char *)&unk_23D9A3ED4 + v1 + 8);
    v1 += 12;
  }
  while (v1 != 36);
  v3 = 0;
  v4 = *(float32x4_t *)MEMORY[0x24BDAEDF8];
  v5 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v6 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v7 = &__src[32];
  v8 = v16;
  do
  {
    v9 = 0;
    v10 = v7;
    do
    {
      v11 = *(float *)&v8[v9];
      v12 = vmulq_n_f32(v4, v11);
      v13 = vmulq_n_f32(v5, v11);
      *((_DWORD *)v10 - 6) = v12.i32[2];
      *((_QWORD *)v10 - 4) = v12.i64[0];
      v14 = vmulq_n_f32(v6, v11);
      *((_DWORD *)v10 - 2) = v13.i32[2];
      *((_QWORD *)v10 - 2) = v13.i64[0];
      *((_DWORD *)v10 + 2) = v14.i32[2];
      *(_QWORD *)v10 = v14.i64[0];
      v10 += 48;
      v9 += 4;
    }
    while (v9 != 12);
    ++v3;
    v8 += 12;
    v7 += 144;
  }
  while (v3 != 3);
  return memcpy((char *)this + 48, __src, 0x1B0uLL);
}

uint64_t Kalman3d::Kalman3d(uint64_t a1, __int128 *a2, void *__src, const void *a4, float a5, float a6, float a7)
{
  __int128 v12;
  __int128 v13;

  v12 = *a2;
  v13 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v13;
  *(_OWORD *)a1 = v12;
  memcpy((void *)(a1 + 48), __src, 0x1B0uLL);
  memcpy((void *)(a1 + 480), a4, 0x1B0uLL);
  *(float *)(a1 + 912) = a5;
  *(float *)(a1 + 916) = a6;
  *(float *)(a1 + 920) = a7;
  return a1;
}

{
  __int128 v12;
  __int128 v13;

  v12 = *a2;
  v13 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v13;
  *(_OWORD *)a1 = v12;
  memcpy((void *)(a1 + 48), __src, 0x1B0uLL);
  memcpy((void *)(a1 + 480), a4, 0x1B0uLL);
  *(float *)(a1 + 912) = a5;
  *(float *)(a1 + 916) = a6;
  *(float *)(a1 + 920) = a7;
  return a1;
}

void *Kalman3d::update(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, __int128 *a4)
{
  __int128 v4;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  float32x4_t *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  int v24;
  float32x4_t v25;
  int v26;
  float32x4_t v27;
  int v28;
  float32x4_t v29;
  int v30;
  float32x4_t v31;
  int v32;
  _QWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  simd_float3 v36;
  simd_float3 v37;
  simd_float3 v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  __int128 *v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float v89;
  uint64_t v90;
  float v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t *v97;
  uint64_t j;
  float32x4_t *v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int v104;
  int v105;
  __int32 v106;
  uint64_t v107;
  float32x4_t v108;
  float v109;
  int v110;
  int v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  _QWORD *v115;
  _DWORD *v116;
  uint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  uint64_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  uint64_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  uint64_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  int v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  uint64_t v167;
  float32x4_t *v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  __int32 v178;
  __int32 v179;
  int v180;
  int v181;
  __int32 v182;
  int v183;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  __int128 *v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  float32x4_t v192;
  float32x4_t v193;
  _OWORD *f32;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  _OWORD *v201;
  __int128 v202;
  __int128 v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  unint64_t v208;
  uint64_t v210;
  _DWORD *v211;
  uint64_t i;
  int32x4_t v213;
  float32x4_t v214;
  int32x4_t v215;
  float32x4_t v216;
  int32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  uint64_t v221;
  __int32 v222;
  uint64_t v223;
  __int32 v224;
  uint64_t v225;
  __int32 v226;
  uint64_t v227;
  __int32 v228;
  uint64_t v229;
  __int32 v230;
  uint64_t v231;
  __int32 v232;
  uint64_t v233;
  __int32 v234;
  uint64_t v235;
  __int32 v236;
  uint64_t v237;
  __int32 v238;
  uint64_t v239;
  __int32 v240;
  uint64_t v241;
  __int32 v242;
  uint64_t v243;
  __int32 v244;
  uint64_t v245;
  __int32 v246;
  uint64_t v247;
  __int32 v248;
  uint64_t v249;
  __int32 v250;
  uint64_t v251;
  __int32 v252;
  uint64_t v253;
  __int32 v254;
  uint64_t v255;
  __int32 v256;
  uint64_t v257;
  __int32 v258;
  uint64_t v259;
  __int32 v260;
  uint64_t v261;
  __int32 v262;
  uint64_t v263;
  __int32 v264;
  uint64_t v265;
  __int32 v266;
  uint64_t v267;
  __int32 v268;
  _OWORD __src[27];
  __int128 v270;
  __int128 v271;
  __int128 v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  simd_float3x3 v276;
  simd_float3x3 v277;
  simd_float3x3 v278;
  simd_float3x3 v279;

  v9 = atomic_load((unsigned __int8 *)_ZGVZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(_ZGVZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H))
  {
    *(_QWORD *)&_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H = 1065353216;
    DWORD2(_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H) = 0;
    __cxa_guard_release(_ZGVZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H);
  }
  v10 = atomic_load((unsigned __int8 *)_ZGVZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E2HT);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(_ZGVZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E2HT))
  {
    *(_QWORD *)&_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E2HT = _ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H;
    DWORD2(_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E2HT) = DWORD2(_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H);
    __cxa_guard_release(_ZGVZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E2HT);
  }
  v11 = atomic_load((unsigned __int8 *)&_ZGVZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1I);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&_ZGVZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1I))
  {
    v210 = 0;
    v211 = &unk_23D9A3EF8;
    do
    {
      for (i = 0; i != 9; ++i)
        _ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1I[9 * (v210 / 3u)
                                                                        + 3 * (i / 3u)
                                                                        + v210 % 3u].i32[i % 3u] = v211[i];
      ++v210;
      v211 += 9;
    }
    while (v210 != 9);
    __cxa_guard_release(&_ZGVZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1I);
  }
  v12 = a1 + 3;
  v276.columns[0] = (simd_float3)vaddq_f32(a1[3], *a3);
  v276.columns[1] = (simd_float3)vaddq_f32(a1[4], a3[1]);
  v276.columns[2] = (simd_float3)vaddq_f32(a1[5], a3[2]);
  v215 = (int32x4_t)v276.columns[2];
  v217 = (int32x4_t)v276.columns[0];
  v276.columns[0].i32[3] = 0;
  v213 = (int32x4_t)v276.columns[1];
  v276.columns[1].i32[3] = 0;
  v276.columns[2].i32[3] = 0;
  v277 = __invert_f3(v276);
  v18 = 0;
  v19 = *a1;
  v20 = vsubq_f32(*a2, *a1);
  v21 = (float32x4_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E2HT;
  LODWORD(v22) = vshrq_n_u64((uint64x2_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E2HT, 0x20uLL).u32[0];
  do
  {
    v23 = vaddq_f32(vmulq_n_f32(a1[v18 + 3], v21.f32[0]), vmulq_n_f32(a1[v18 + 12], v22));
    v24 = v17;
    v25 = vaddq_f32(vmulq_n_f32(a1[v18 + 5], v21.f32[0]), vmulq_n_f32(a1[v18 + 14], v22));
    v26 = v13;
    v27 = vaddq_f32(v23, vmulq_laneq_f32(a1[v18 + 21], v21, 2));
    v28 = v16;
    v29 = vaddq_f32(vaddq_f32(vmulq_n_f32(a1[v18 + 4], v21.f32[0]), vmulq_n_f32(a1[v18 + 13], v22)), vmulq_laneq_f32(a1[v18 + 22], v21, 2));
    v30 = v15;
    v31 = vaddq_f32(v25, vmulq_laneq_f32(a1[v18 + 23], v21, 2));
    v32 = v14;
    v33 = &__src[v18];
    DWORD2(__src[v18]) = v27.i32[2];
    *v33 = v27.i64[0];
    DWORD2(__src[v18 + 1]) = v29.i32[2];
    v34 = (_DWORD *)&__src[v18 + 2] + 2;
    v18 += 3;
    v13 = v26;
    *v34 = v31.i32[2];
    v17 = v24;
    v33[2] = v29.i64[0];
    v33[4] = v31.i64[0];
    v15 = v30;
    v16 = v28;
  }
  while (v18 != 9);
  v35 = 0;
  v36 = v277.columns[0];
  v36.i32[3] = 0;
  v37 = v277.columns[1];
  v37.i32[3] = 0;
  v38 = v277.columns[2];
  v38.i32[3] = 0;
  v39 = (float32x4_t)__src[0];
  v40 = (float32x4_t)__src[1];
  v41 = (float32x4_t)__src[2];
  v273 = (float32x4_t)v36;
  v274 = (float32x4_t)v37;
  v275 = (float32x4_t)v38;
  do
  {
    *(float32x4_t *)((char *)&v218 + v35 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(_OWORD *)((char *)&v273 + v35 * 4))), v40, *(float32x2_t *)&v273.f32[v35], 1), v41, *(float32x4_t *)((char *)&v273 + v35 * 4), 2);
    v35 += 4;
  }
  while (v35 != 12);
  v42 = 0;
  v43 = v218;
  v44 = v219;
  v45 = v220;
  v46 = (float32x4_t)__src[3];
  v47 = (float32x4_t)__src[4];
  v48 = (float32x4_t)__src[5];
  v273 = (float32x4_t)v36;
  v274 = (float32x4_t)v37;
  v275 = (float32x4_t)v38;
  do
  {
    *(float32x4_t *)((char *)&v218 + v42 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, COERCE_FLOAT(*(_OWORD *)((char *)&v273 + v42 * 4))), v47, *(float32x2_t *)&v273.f32[v42], 1), v48, *(float32x4_t *)((char *)&v273 + v42 * 4), 2);
    v42 += 4;
  }
  while (v42 != 12);
  v49 = 0;
  v50 = v44;
  v50.i32[3] = 0;
  v52 = v218;
  v51 = v219;
  v53 = v220;
  v54 = (float32x4_t)__src[6];
  v55 = (float32x4_t)__src[7];
  v56 = (float32x4_t)__src[8];
  v273 = (float32x4_t)v36;
  v274 = (float32x4_t)v37;
  v275 = (float32x4_t)v38;
  do
  {
    *(float32x4_t *)((char *)&v218 + v49 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v54, COERCE_FLOAT(*(_OWORD *)((char *)&v273 + v49 * 4))), v55, *(float32x2_t *)&v273.f32[v49], 1), v56, *(float32x4_t *)((char *)&v273 + v49 * 4), 2);
    v49 += 4;
  }
  while (v49 != 12);
  v58 = _ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1I[0];
  v57 = xmmword_256CAA680;
  v59 = (float32x4_t)xmmword_256CAA690;
  v60 = (int32x4_t)vsubq_f32(_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1I[0], v43);
  v61 = (int32x4_t)vsubq_f32(xmmword_256CAA680, v44);
  v62 = (int32x4_t)vsubq_f32((float32x4_t)xmmword_256CAA690, v45);
  v63 = vzip1q_s32(v60, v62);
  v64 = vzip2q_s32(v60, v62);
  v65 = (float32x4_t)vtrn2q_s32(v60, v61);
  v65.i32[2] = v62.i32[1];
  v66 = (float32x4_t)vzip1q_s32(v64, vdupq_laneq_s32(v61, 2));
  v67 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1);
  v68 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2);
  v69 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v63, v61), v20.f32[0]), v65, *(float32x2_t *)v20.f32, 1), v66, v20, 2);
  v70 = vzip2q_s32((int32x4_t)v277.columns[0], (int32x4_t)v277.columns[2]);
  v71 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v277.columns[0], (int32x4_t)v277.columns[2]), (int32x4_t)v277.columns[1]);
  v277.columns[0] = (simd_float3)vtrn2q_s32((int32x4_t)v277.columns[0], (int32x4_t)v277.columns[1]);
  v277.columns[0].i32[2] = v277.columns[2].i32[1];
  v72 = vmulq_f32(v69, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v71, v69.f32[0]), (float32x4_t)v277.columns[0], *(float32x2_t *)v69.f32, 1), (float32x4_t)vzip1q_s32(v70, vdupq_laneq_s32((int32x4_t)v277.columns[1], 2)), v69, 2));
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1))).f32[0] <= 0.25)
  {
    v129 = v218;
    v130 = v219;
    v131 = v220;
    v131.i32[3] = 0;
    v130.i32[3] = 0;
    v129.i32[3] = 0;
    v53.i32[3] = 0;
    v51.i32[3] = 0;
    v52.i32[3] = 0;
    v45.i32[3] = 0;
    v43.i32[3] = 0;
  }
  else
  {
    v73 = 0;
    v270 = xmmword_23D9A3E10;
    v271 = xmmword_23D9A3E20;
    v272 = xmmword_23D9A3E30;
    v74 = (float32x4_t)vzip1q_s32(v217, v213);
    v74.i32[2] = v215.i32[0];
    v75 = (float32x4_t)vzip2q_s32(vzip1q_s32(v217, v215), vdupq_lane_s32(*(int32x2_t *)v213.i8, 1));
    v76 = (float32x4_t)vzip2q_s32(v217, v213);
    v76.i32[2] = v215.i32[2];
    do
    {
      if (a4)
        v77 = a4;
      else
        v77 = &v270;
      v78 = (float32x4_t)v77[v73];
      v79 = (int32x4_t)vmulq_f32(v78, v78);
      v79.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v79, 2), vadd_f32(*(float32x2_t *)v79.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.i8, 1))).u32[0];
      v80 = vrsqrte_f32((float32x2_t)v79.u32[0]);
      v81 = vmul_f32(v80, vrsqrts_f32((float32x2_t)v79.u32[0], vmul_f32(v80, v80)));
      v82 = vmulq_n_f32(v78, vmul_f32(v81, vrsqrts_f32((float32x2_t)v79.u32[0], vmul_f32(v81, v81))).f32[0]);
      v83 = vmulq_f32(v82, v20);
      v84 = vmulq_n_f32(v82, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).f32[0]);
      v85 = (int32x4_t)a3[1];
      v86 = (float32x4_t)vtrn2q_s32(*(int32x4_t *)a3, v85);
      v86.i32[2] = HIDWORD(a3[2].i64[0]);
      v87 = vmulq_f32(v84, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32(*(int32x4_t *)a3, (int32x4_t)a3[2]), v85), v84.f32[0]), v86, *(float32x2_t *)v84.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)a3, (int32x4_t)a3[2]), vdupq_laneq_s32(v85, 2)), v84, 2));
      v87.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), vaddq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1))).f32[0]);
      v88 = vmulq_f32(v82, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v82.f32[0]), v75, *(float32x2_t *)v82.f32, 1), v76, v82, 2));
      v89 = (float)(v87.f32[0] + v87.f32[0])
          - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))).f32[0];
      if (v89 > 0.0)
      {
        v90 = 0;
        v91 = v89 * 0.25;
        v92 = vmulq_lane_f32(v82, *(float32x2_t *)v82.f32, 1);
        v93 = vmulq_laneq_f32(v82, v82, 2);
        v94 = vmulq_n_f32(vmulq_n_f32(v82, v82.f32[0]), v89 * 0.25);
        v95 = vmulq_n_f32(v92, v89 * 0.25);
        v96 = vmulq_n_f32(v93, v91);
        v97 = a1;
        do
        {
          for (j = 0; j != 9; j += 3)
          {
            v99 = &v97[j];
            v100 = v97[j + 5];
            v101 = vaddq_f32(v94, v97[j + 3]);
            v102 = vaddq_f32(v95, v97[j + 4]);
            v97[j + 3].i32[2] = v101.i32[2];
            v103 = vaddq_f32(v96, v100);
            v99[3].i64[0] = v101.i64[0];
            v97[j + 4].i32[2] = v102.i32[2];
            v99[4].i64[0] = v102.i64[0];
            v97[j + 5].i32[2] = v103.i32[2];
            v99[5].i64[0] = v103.i64[0];
          }
          ++v90;
          v97 += 9;
        }
        while (v90 != 3);
      }
      ++v73;
    }
    while (v73 != 3);
    v214 = v68;
    v216 = v67;
    v278.columns[0] = (simd_float3)vaddq_f32(a1[3], *a3);
    v278.columns[1] = (simd_float3)vaddq_f32(a1[4], a3[1]);
    v278.columns[2] = (simd_float3)vaddq_f32(a1[5], a3[2]);
    v279 = __invert_f3(v278);
    v107 = 0;
    v108 = (float32x4_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E2HT;
    LODWORD(v109) = vshrq_n_u64((uint64x2_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E2HT, 0x20uLL).u32[0];
    do
    {
      v110 = v105;
      v23 = vaddq_f32(vmulq_n_f32(a1[v107 + 5], v108.f32[0]), vmulq_n_f32(a1[v107 + 14], v109));
      v111 = v104;
      v25.i32[3] = v106;
      v112 = vaddq_f32(vaddq_f32(vmulq_n_f32(a1[v107 + 3], v108.f32[0]), vmulq_n_f32(a1[v107 + 12], v109)), vmulq_laneq_f32(a1[v107 + 21], v108, 2));
      v113 = vaddq_f32(vaddq_f32(vmulq_n_f32(a1[v107 + 4], v108.f32[0]), vmulq_n_f32(a1[v107 + 13], v109)), vmulq_laneq_f32(a1[v107 + 22], v108, 2));
      v114 = vaddq_f32(v23, vmulq_laneq_f32(a1[v107 + 23], v108, 2));
      v115 = &__src[v107];
      DWORD2(__src[v107]) = v112.i32[2];
      *v115 = v112.i64[0];
      DWORD2(__src[v107 + 1]) = v113.i32[2];
      v116 = (_DWORD *)&__src[v107 + 2] + 2;
      v107 += 3;
      v104 = v111;
      *v116 = v114.i32[2];
      v105 = v110;
      v115[2] = v113.i64[0];
      v115[4] = v114.i64[0];
    }
    while (v107 != 9);
    v117 = 0;
    v279.columns[0].i32[3] = 0;
    v279.columns[1].i32[3] = 0;
    v279.columns[2].i32[3] = 0;
    v118 = (float32x4_t)__src[0];
    v119 = (float32x4_t)__src[1];
    v120 = (float32x4_t)__src[2];
    v273 = (float32x4_t)v279.columns[0];
    v274 = (float32x4_t)v279.columns[1];
    v275 = (float32x4_t)v279.columns[2];
    do
    {
      *(float32x4_t *)((char *)&v218 + v117 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v118, COERCE_FLOAT(*(_OWORD *)((char *)&v273 + v117 * 4))), v119, *(float32x2_t *)&v273.f32[v117], 1), v120, *(float32x4_t *)((char *)&v273 + v117 * 4), 2);
      v117 += 4;
    }
    while (v117 != 12);
    v121 = 0;
    v43 = v218;
    v50 = v219;
    v45 = v220;
    v122 = (float32x4_t)__src[3];
    v123 = (float32x4_t)__src[4];
    v124 = (float32x4_t)__src[5];
    v273 = (float32x4_t)v279.columns[0];
    v274 = (float32x4_t)v279.columns[1];
    v275 = (float32x4_t)v279.columns[2];
    v67 = v216;
    v68 = v214;
    do
    {
      *(float32x4_t *)((char *)&v218 + v121 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v122, COERCE_FLOAT(*(_OWORD *)((char *)&v273 + v121 * 4))), v123, *(float32x2_t *)&v273.f32[v121], 1), v124, *(float32x4_t *)((char *)&v273 + v121 * 4), 2);
      v121 += 4;
    }
    while (v121 != 12);
    v125 = 0;
    v52 = v218;
    v51 = v219;
    v53 = v220;
    v126 = (float32x4_t)__src[6];
    v127 = (float32x4_t)__src[7];
    v128 = (float32x4_t)__src[8];
    v273 = (float32x4_t)v279.columns[0];
    v274 = (float32x4_t)v279.columns[1];
    v275 = (float32x4_t)v279.columns[2];
    do
    {
      *(float32x4_t *)((char *)&v218 + v125 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v126, COERCE_FLOAT(*(_OWORD *)((char *)&v273 + v125 * 4))), v127, *(float32x2_t *)&v273.f32[v125], 1), v128, *(float32x4_t *)((char *)&v273 + v125 * 4), 2);
      v125 += 4;
    }
    while (v125 != 12);
    v129 = v218;
    v130 = v219;
    v131 = v220;
    v19 = *a1;
    v58 = _ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1I[0];
    v57 = xmmword_256CAA680;
    v59 = (float32x4_t)xmmword_256CAA690;
  }
  v132 = 0;
  v133 = vaddq_f32(v19, vmlaq_f32(vmlaq_f32(vmulq_n_f32(v43, v20.f32[0]), v67, v50), v68, v45));
  v134 = a1[1];
  v135 = a1[2];
  a1->i32[2] = v133.i32[2];
  a1->i64[0] = v133.i64[0];
  v136 = vaddq_f32(v134, vmlaq_f32(vmlaq_f32(vmulq_n_f32(v52, v20.f32[0]), v67, v51), v68, v53));
  a1[1].i32[2] = v136.i32[2];
  a1[1].i64[0] = v136.i64[0];
  v137 = vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v129, v20.f32[0]), v67, v130), v68, v131), v135);
  a1[2].i32[2] = v137.i32[2];
  a1[2].i64[0] = v137.i64[0];
  v138 = HIDWORD(_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H);
  v139 = vsubq_f32(v58, vmulq_n_f32(v43, *(float *)&_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H));
  v218.i32[2] = v139.i32[2];
  v140 = vsubq_f32(v57, vmulq_n_f32(v50, *(float *)&_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H));
  v219.i32[2] = v140.i32[2];
  v218.i64[0] = v139.i64[0];
  v219.i64[0] = v140.i64[0];
  v141 = vsubq_f32(v59, vmulq_n_f32(v45, *(float *)&_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H));
  v220.i32[2] = v141.i32[2];
  v142 = vsubq_f32((float32x4_t)xmmword_256CAA6A0, vmulq_n_f32(v52, *(float *)&_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H));
  v222 = v142.i32[2];
  v143 = vsubq_f32(*(float32x4_t *)algn_256CAA6B0, vmulq_n_f32(v51, *(float *)&_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H));
  v224 = v143.i32[2];
  v220.i64[0] = v141.i64[0];
  v221 = v142.i64[0];
  v144 = vsubq_f32((float32x4_t)xmmword_256CAA6C0, vmulq_n_f32(v53, *(float *)&_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H));
  v226 = v144.i32[2];
  v141.i32[0] = vshrq_n_u64((uint64x2_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H, 0x20uLL).u32[0];
  v223 = v143.i64[0];
  v225 = v144.i64[0];
  v145 = vsubq_f32(unk_256CAA6D0, vmulq_n_f32(v129, *(float *)&_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H));
  v146 = vsubq_f32((float32x4_t)xmmword_256CAA6E0, vmulq_n_f32(v130, *(float *)&_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H));
  v228 = v145.i32[2];
  v230 = v146.i32[2];
  v147 = vsubq_f32(unk_256CAA6F0, vmulq_n_f32(v131, *(float *)&_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H));
  v227 = v145.i64[0];
  v229 = v146.i64[0];
  v232 = v147.i32[2];
  v148 = vsubq_f32((float32x4_t)xmmword_256CAA700, vmulq_n_f32(v43, v141.f32[0]));
  v149 = vsubq_f32(unk_256CAA710, vmulq_n_f32(v50, v141.f32[0]));
  v234 = v148.i32[2];
  v150 = vsubq_f32((float32x4_t)xmmword_256CAA720, vmulq_n_f32(v45, v141.f32[0]));
  v231 = v147.i64[0];
  v233 = v148.i64[0];
  v236 = v149.i32[2];
  v238 = v150.i32[2];
  v235 = v149.i64[0];
  v237 = v150.i64[0];
  v151 = vsubq_f32(unk_256CAA730, vmulq_n_f32(v52, v141.f32[0]));
  v152 = vsubq_f32((float32x4_t)xmmword_256CAA740, vmulq_n_f32(v51, v141.f32[0]));
  v240 = v151.i32[2];
  v242 = v152.i32[2];
  v153 = vsubq_f32(unk_256CAA750, vmulq_n_f32(v53, v141.f32[0]));
  v239 = v151.i64[0];
  v241 = v152.i64[0];
  v244 = v153.i32[2];
  v154 = vsubq_f32((float32x4_t)xmmword_256CAA760, vmulq_n_f32(v129, v141.f32[0]));
  v155 = vsubq_f32(unk_256CAA770, vmulq_n_f32(v130, v141.f32[0]));
  v246 = v154.i32[2];
  v156 = vsubq_f32((float32x4_t)xmmword_256CAA780, vmulq_n_f32(v131, v141.f32[0]));
  v248 = v155.i32[2];
  v247 = v155.i64[0];
  v250 = v156.i32[2];
  v249 = v156.i64[0];
  v156.i32[3] = HIDWORD(xmmword_256CAA7A0);
  v157 = unk_256CAA7BC;
  v158 = vsubq_f32(unk_256CAA790, vmulq_laneq_f32(v43, (float32x4_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H, 2));
  v159 = vsubq_f32((float32x4_t)xmmword_256CAA7A0, vmulq_laneq_f32(v50, (float32x4_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H, 2));
  v160 = vsubq_f32(unk_256CAA7B0, vmulq_laneq_f32(v45, (float32x4_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H, 2));
  v252 = v158.i32[2];
  v251 = v158.i64[0];
  v254 = v159.i32[2];
  v253 = v159.i64[0];
  v256 = v160.i32[2];
  v255 = v160.i64[0];
  v161 = vsubq_f32((float32x4_t)xmmword_256CAA7C0, vmulq_laneq_f32(v52, (float32x4_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H, 2));
  v162 = vsubq_f32(unk_256CAA7D0, vmulq_laneq_f32(v51, (float32x4_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H, 2));
  v163 = vsubq_f32((float32x4_t)xmmword_256CAA7E0, vmulq_laneq_f32(v53, (float32x4_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H, 2));
  v258 = v161.i32[2];
  v257 = v161.i64[0];
  v260 = v162.i32[2];
  v259 = v162.i64[0];
  v262 = v163.i32[2];
  v261 = v163.i64[0];
  v164 = vsubq_f32(unk_256CAA7F0, vmulq_laneq_f32(v129, (float32x4_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H, 2));
  v165 = vsubq_f32((float32x4_t)xmmword_256CAA800, vmulq_laneq_f32(v130, (float32x4_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H, 2));
  v166 = vsubq_f32(unk_256CAA810, vmulq_laneq_f32(v131, (float32x4_t)_ZZN8Kalman3d6updateERKDv3_fRK13simd_float3x3PK13simd_float4x4E1H, 2));
  v264 = v164.i32[2];
  v263 = v164.i64[0];
  v266 = v165.i32[2];
  v265 = v165.i64[0];
  v268 = v166.i32[2];
  v267 = v166.i64[0];
  v243 = v153.i64[0];
  v245 = v154.i64[0];
  do
  {
    v167 = 0;
    v168 = &v218 + 3 * v132;
    v169 = *v168;
    v170 = v168[1];
    v171 = v168[2];
    v172 = v168[9];
    v173 = v168[10];
    v174 = v168[11];
    v175 = v168[18];
    v176 = v168[19];
    v177 = v168[20];
    v178 = v23.i32[3];
    v179 = v156.i32[3];
    v180 = v138;
    v181 = v28;
    v182 = v25.i32[3];
    v183 = v157;
    v184 = HIDWORD(v4);
    v185 = v32;
    v186 = v30;
    do
    {
      v187 = 0;
      v188 = (__int128 *)&v12[9 * v167];
      v189 = v188[1];
      v190 = v188[2];
      v270 = *v188;
      v271 = v189;
      v272 = v190;
      do
      {
        *(float32x4_t *)((char *)&v273 + v187) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v169, COERCE_FLOAT(*(__int128 *)((char *)&v270 + v187))), v170, *(float32x2_t *)((char *)&v270 + v187), 1), v171, *(float32x4_t *)((char *)&v270 + v187), 2);
        v187 += 16;
      }
      while (v187 != 48);
      v191 = 0;
      v192 = v273;
      v156 = v274;
      v193 = v275;
      f32 = (_OWORD *)v12[9 * v167].f32;
      v195 = f32[4];
      v196 = f32[5];
      v270 = f32[3];
      v271 = v195;
      v272 = v196;
      do
      {
        *(float32x4_t *)((char *)&v273 + v191) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v172, COERCE_FLOAT(*(__int128 *)((char *)&v270 + v191))), v173, *(float32x2_t *)((char *)&v270 + v191), 1), v174, *(float32x4_t *)((char *)&v270 + v191), 2);
        v191 += 16;
      }
      while (v191 != 48);
      v197 = 0;
      v156.i32[3] = v179;
      v199 = v273;
      v198 = v274;
      v200 = v275;
      v201 = (_OWORD *)v12[9 * v167].f32;
      v202 = v201[7];
      v203 = v201[8];
      v270 = v201[6];
      v271 = v202;
      v272 = v203;
      do
      {
        *(float32x4_t *)((char *)&v273 + v197) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v175, COERCE_FLOAT(*(__int128 *)((char *)&v270 + v197))), v176, *(float32x2_t *)((char *)&v270 + v197), 1), v177, *(float32x4_t *)((char *)&v270 + v197), 2);
        v197 += 16;
      }
      while (v197 != 48);
      v23.i32[3] = v178;
      v25.i32[3] = v182;
      v28 = v181;
      v204 = vaddq_f32(v192, v199);
      v157 = v183;
      v138 = v180;
      v205 = vaddq_f32(v204, v273);
      v30 = v186;
      v206 = vaddq_f32(vaddq_f32(v156, v198), v274);
      v32 = v185;
      v207 = vaddq_f32(vaddq_f32(v193, v200), v275);
      HIDWORD(v4) = v184;
      v208 = (unint64_t)&__src[9 * v167 + 3 * v132];
      *(_QWORD *)v208 = v205.i64[0];
      *(_DWORD *)(v208 | 8) = v205.i32[2];
      *(_DWORD *)(v208 + 24) = v206.i32[2];
      ++v167;
      v178 = v23.i32[3];
      v179 = v156.i32[3];
      *(_QWORD *)(v208 + 16) = v206.i64[0];
      *(_QWORD *)(v208 + 32) = v207.i64[0];
      v180 = v138;
      v183 = v157;
      *(_DWORD *)(v208 + 40) = v207.i32[2];
      v185 = v32;
    }
    while (v167 != 3);
    ++v132;
  }
  while (v132 != 3);
  return memcpy(&a1[3], __src, 0x1B0uLL);
}

float32x4_t Kalman3d::predict(float32x4_t *this)
{
  unsigned __int8 v1;
  float32x4_t *v2;
  unsigned __int8 v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v13;
  float32x4_t v14;
  const float *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  _BYTE *v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  _BYTE *v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const float *v47;
  float32x4_t v48;
  const float *v49;
  float32x4_t v50;
  float32x4_t v51;
  char *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  char *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t result;
  int v84;
  uint64_t i;
  int *v86;
  int v87;
  float32x4_t *v88;
  Kalman3d *v89;
  Kalman3d *v90;
  _BYTE v91[16];
  _BYTE v92[416];
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;

  if ((v1 & 1) == 0)
  {
    v89 = (Kalman3d *)this;
    this = (float32x4_t *)v89;
    if (v84)
    {
      for (i = 0; i != 9; i += 3)
      {
        v86 = &Kalman3d::predict(void)::A[i];
        *(_QWORD *)v86 = *(_QWORD *)((char *)&unk_23D9A403C + i * 4);
        v86[2] = *(_DWORD *)((char *)&unk_23D9A403C + i * 4 + 8);
      }
      this = (float32x4_t *)v89;
    }
  }
  v2 = this + 16;
  if ((v3 & 1) == 0)
  {
    v88 = this + 16;
    v90 = (Kalman3d *)this;
    v2 = v88;
    this = (float32x4_t *)v90;
    if (v87)
    {
      Kalman3d::predict(void)::AT[0] = Kalman3d::predict(void)::A[0];
      *(_DWORD *)algn_256CAA85C = unk_256CAA834;
      dword_256CAA860 = dword_256CAA840;
      unk_256CAA864 = *(_DWORD *)algn_256CAA82C;
      dword_256CAA868 = dword_256CAA838;
      unk_256CAA86C = unk_256CAA844;
      dword_256CAA870 = dword_256CAA830;
      unk_256CAA874 = unk_256CAA83C;
      dword_256CAA878 = dword_256CAA848;
      v2 = v88;
      this = (float32x4_t *)v90;
    }
  }
  v4 = 0;
  v5 = *this;
  v6 = vmulq_n_f32(this[1], this[57].f32[0]);
  v7.i64[0] = 0x8000000080000000;
  v7.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v13 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v6), (int8x16_t)vcgtzq_f32(v6)), vorrq_s8(vandq_s8((int8x16_t)v6, v7), _Q3), (int8x16_t)0);
  v14 = vabsq_f32(v6);
  v15 = &this[57].f32[1];
  v16 = vld1q_dup_f32(v15);
  v16.i32[3] = 0;
  v17 = vnegq_f32(v14);
  v17.i32[3] = 0;
  v18 = vmaxnmq_f32(v16, v17);
  v18.i32[3] = 0;
  v14.i32[3] = 0;
  v19 = vmlsq_f32(v6, v13, vminnmq_f32(v18, v14));
  v20 = vmulq_n_f32(this[2], this[57].f32[2]);
  this[1] = v19;
  this[2] = v20;
  do
  {
    *(&v93 + v4) = vaddq_f32(vaddq_f32(vmulq_n_f32(v5, *(float *)&Kalman3d::predict(void)::A[v4]), vmulq_n_f32(v19, *(float *)&Kalman3d::predict(void)::A[v4 + 3])), vmulq_n_f32(v20, *(float *)&Kalman3d::predict(void)::A[v4 + 6]));
    ++v4;
  }
  while (v4 != 3);
  v21 = 0;
  v22 = v93.i64[0];
  v23 = v94;
  v24 = v95;
  this->i32[2] = v93.i32[2];
  this->i64[0] = v22;
  this[1].i32[2] = v23.i32[2];
  this[2].i32[2] = v24.i32[2];
  this[1].i64[0] = v23.i64[0];
  this[2].i64[0] = v24.i64[0];
  v25 = v92;
  do
  {
    v26 = &this[3 * v21 + 3];
    v27 = *v26;
    v28 = v26[1];
    v29 = v26[2];
    v30 = v26[9];
    v31 = v26[10];
    v32 = v26[11];
    v33 = v26[18];
    v34 = v26[19];
    v35 = v26[20];
    v36 = v25;
    v37 = 2u;
    do
    {
      v38 = *(float *)&Kalman3d::predict(void)::AT[v37 - 2];
      v39 = *(float *)&Kalman3d::predict(void)::AT[v37 - 1];
      v40 = *(float *)&Kalman3d::predict(void)::AT[v37];
      v41 = vaddq_f32(vaddq_f32(vmulq_n_f32(v27, v38), vmulq_n_f32(v30, v39)), vmulq_n_f32(v33, v40));
      v42 = vaddq_f32(vaddq_f32(vmulq_n_f32(v28, v38), vmulq_n_f32(v31, v39)), vmulq_n_f32(v34, v40));
      v43 = vaddq_f32(vaddq_f32(vmulq_n_f32(v29, v38), vmulq_n_f32(v32, v39)), vmulq_n_f32(v35, v40));
      *((_DWORD *)v36 - 2) = v41.i32[2];
      *((_QWORD *)v36 - 2) = v41.i64[0];
      *((_DWORD *)v36 + 2) = v42.i32[2];
      *(_QWORD *)v36 = v42.i64[0];
      *((_DWORD *)v36 + 6) = v43.i32[2];
      *((_QWORD *)v36 + 2) = v43.i64[0];
      v37 += 3;
      v36 += 144;
    }
    while (v37 != 11);
    ++v21;
    v25 += 48;
  }
  while (v21 != 3);
  v44 = 0;
  v45 = 32;
  do
  {
    v46 = 0;
    v47 = (const float *)&Kalman3d::predict(void)::A[v44];
    v48 = vld1q_dup_f32(v47);
    v49 = v47 + 3;
    v50 = vld1q_dup_f32(v49);
    v47 += 6;
    v51 = vld1q_dup_f32(v47);
    v52 = (char *)&v93 + v45;
    do
    {
      v53 = vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)&v91[v46], v48), vmulq_f32(*(float32x4_t *)&v92[v46 + 32], v50)), vmulq_f32(*(float32x4_t *)&v92[v46 + 80], v51));
      v54 = vaddq_f32(vaddq_f32(vmulq_f32(v48, *(float32x4_t *)&v91[v46 + 16]), vmulq_f32(v50, *(float32x4_t *)&v92[v46 + 48])), vmulq_f32(v51, *(float32x4_t *)&v92[v46 + 96]));
      v55 = vaddq_f32(vaddq_f32(vmulq_f32(v48, *(float32x4_t *)&v92[v46 + 16]), vmulq_f32(v50, *(float32x4_t *)&v92[v46 + 64])), vmulq_f32(v51, *(float32x4_t *)&v92[v46 + 112]));
      v56 = &v52[v46];
      *(_DWORD *)&v52[v46 - 24] = v53.i32[2];
      *((_QWORD *)v56 - 4) = v53.i64[0];
      *(_DWORD *)&v52[v46 - 8] = v54.i32[2];
      *((_QWORD *)v56 - 2) = v54.i64[0];
      *(_DWORD *)&v52[v46 + 8] = v55.i32[2];
      *(_QWORD *)v56 = v55.i64[0];
      v46 += 144;
    }
    while (v46 != 432);
    ++v44;
    v45 += 48;
  }
  while (v44 != 3);
  v57 = vaddq_f32(v93, this[30]);
  v58 = vaddq_f32(v94, this[31]);
  v59 = vaddq_f32(v95, this[32]);
  v60 = vaddq_f32(v96, this[33]);
  v61 = vaddq_f32(v97, this[34]);
  v62 = vaddq_f32(v98, this[35]);
  v63 = vaddq_f32(v99, this[36]);
  v64 = vaddq_f32(v100, this[37]);
  v65 = vaddq_f32(v101, this[38]);
  v66 = vaddq_f32(v102, this[39]);
  v67 = vaddq_f32(v103, this[40]);
  v68 = vaddq_f32(v104, this[41]);
  v69 = vaddq_f32(v105, this[42]);
  v70 = vaddq_f32(v106, this[43]);
  v71 = vaddq_f32(v107, this[44]);
  v72 = vaddq_f32(v108, this[45]);
  v73 = vaddq_f32(v109, this[46]);
  v74 = vaddq_f32(v110, this[47]);
  v75 = vaddq_f32(v111, this[48]);
  v76 = vaddq_f32(v112, this[49]);
  v77 = vaddq_f32(v113, this[50]);
  v78 = vaddq_f32(v114, this[51]);
  v79 = vaddq_f32(v115, this[52]);
  v80 = vaddq_f32(v116, this[53]);
  v81 = vaddq_f32(v117, this[54]);
  v82 = vaddq_f32(v118, this[55]);
  result = vaddq_f32(v119, this[56]);
  this[3].i32[2] = v57.i32[2];
  this[4].i32[2] = v58.i32[2];
  this[3].i64[0] = v57.i64[0];
  this[4].i64[0] = v58.i64[0];
  this[5].i32[2] = v59.i32[2];
  this[5].i64[0] = v59.i64[0];
  this[6].i32[2] = v60.i32[2];
  this[7].i32[2] = v61.i32[2];
  this[6].i64[0] = v60.i64[0];
  this[7].i64[0] = v61.i64[0];
  this[8].i32[2] = v62.i32[2];
  this[8].i64[0] = v62.i64[0];
  this[9].i32[2] = v63.i32[2];
  this[10].i32[2] = v64.i32[2];
  this[9].i64[0] = v63.i64[0];
  this[10].i64[0] = v64.i64[0];
  this[11].i32[2] = v65.i32[2];
  this[11].i64[0] = v65.i64[0];
  this[12].i32[2] = v66.i32[2];
  this[13].i32[2] = v67.i32[2];
  this[12].i64[0] = v66.i64[0];
  this[13].i64[0] = v67.i64[0];
  this[14].i32[2] = v68.i32[2];
  this[14].i64[0] = v68.i64[0];
  this[15].i32[2] = v69.i32[2];
  v2->i32[2] = v70.i32[2];
  this[15].i64[0] = v69.i64[0];
  v2->i64[0] = v70.i64[0];
  v2[1].i32[2] = v71.i32[2];
  v2[1].i64[0] = v71.i64[0];
  v2[2].i32[2] = v72.i32[2];
  v2[3].i32[2] = v73.i32[2];
  v2[2].i64[0] = v72.i64[0];
  v2[3].i64[0] = v73.i64[0];
  v2[4].i32[2] = v74.i32[2];
  v2[4].i64[0] = v74.i64[0];
  v2[5].i32[2] = v75.i32[2];
  v2[6].i32[2] = v76.i32[2];
  v2[5].i64[0] = v75.i64[0];
  v2[6].i64[0] = v76.i64[0];
  v2[7].i32[2] = v77.i32[2];
  v2[7].i64[0] = v77.i64[0];
  v2[8].i32[2] = v78.i32[2];
  v2[9].i32[2] = v79.i32[2];
  v2[8].i64[0] = v78.i64[0];
  v2[9].i64[0] = v79.i64[0];
  v2[10].i32[2] = v80.i32[2];
  v2[10].i64[0] = v80.i64[0];
  v2[11].i32[2] = v81.i32[2];
  v2[12].i32[2] = v82.i32[2];
  v2[11].i64[0] = v81.i64[0];
  v2[12].i64[0] = v82.i64[0];
  v2[13].i32[2] = result.i32[2];
  v2[13].i64[0] = result.i64[0];
  return result;
}

void *Kalman3d::I@<X0>(void *a1@<X8>)
{
  unsigned __int8 v3;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t i;
  void *v9;

  if ((v3 & 1) == 0)
  {
    v9 = a1;
    a1 = v9;
    if (v5)
    {
      v6 = 0;
      v7 = &unk_23D9A3EF8;
      do
      {
        for (i = 0; i != 9; ++i)
          Kalman3d::I(void)::I[36 * (v6 / 3u)
                             + 12 * (i / 3u)
                             + 4 * (v6 % 3u)
                             + i % 3u] = v7[i];
        ++v6;
        v7 += 9;
      }
      while (v6 != 9);
      a1 = v9;
    }
  }
  return memcpy(a1, Kalman3d::I(void)::I, 0x1B0uLL);
}

void Kalman1d::Kalman1d(Kalman1d *this, float a2, float a3, float a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  *(float *)this = a3;
  *((float *)this + 1) = a4;
  v4 = vmulq_n_f32((float32x4_t)xmmword_23D9A3E40, a2);
  v5 = vmulq_n_f32((float32x4_t)xmmword_23D9A3E50, a2);
  v6 = vmulq_n_f32((float32x4_t)xmmword_23D9A3E60, a2);
  *((_DWORD *)this + 22) = v4.i32[2];
  *((_DWORD *)this + 26) = v5.i32[2];
  *((_QWORD *)this + 10) = v4.i64[0];
  *((_QWORD *)this + 12) = v5.i64[0];
  *((_DWORD *)this + 30) = v6.i32[2];
  *((_QWORD *)this + 14) = v6.i64[0];
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 1065353216;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 8) = 0;
  __asm { FMOV            V6.4S, #10.0 }
  v12 = vaddq_f32(*((float32x4_t *)this + 2), vmulq_f32(*((float32x4_t *)this + 5), _Q6));
  v13 = vaddq_f32(*((float32x4_t *)this + 3), vmulq_f32(*((float32x4_t *)this + 6), _Q6));
  v14 = vaddq_f32(*((float32x4_t *)this + 4), vmulq_f32(*((float32x4_t *)this + 7), _Q6));
  *((_DWORD *)this + 10) = v12.i32[2];
  *((_DWORD *)this + 14) = v13.i32[2];
  *((_QWORD *)this + 4) = v12.i64[0];
  *((_QWORD *)this + 6) = v13.i64[0];
  *((_DWORD *)this + 18) = v14.i32[2];
  *((_QWORD *)this + 8) = v14.i64[0];
}

{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  *(float *)this = a3;
  *((float *)this + 1) = a4;
  v4 = vmulq_n_f32((float32x4_t)xmmword_23D9A3E40, a2);
  v5 = vmulq_n_f32((float32x4_t)xmmword_23D9A3E50, a2);
  v6 = vmulq_n_f32((float32x4_t)xmmword_23D9A3E60, a2);
  *((_DWORD *)this + 22) = v4.i32[2];
  *((_DWORD *)this + 26) = v5.i32[2];
  *((_QWORD *)this + 10) = v4.i64[0];
  *((_QWORD *)this + 12) = v5.i64[0];
  *((_DWORD *)this + 30) = v6.i32[2];
  *((_QWORD *)this + 14) = v6.i64[0];
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 1065353216;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 8) = 0;
  __asm { FMOV            V6.4S, #10.0 }
  v12 = vaddq_f32(*((float32x4_t *)this + 2), vmulq_f32(*((float32x4_t *)this + 5), _Q6));
  v13 = vaddq_f32(*((float32x4_t *)this + 3), vmulq_f32(*((float32x4_t *)this + 6), _Q6));
  v14 = vaddq_f32(*((float32x4_t *)this + 4), vmulq_f32(*((float32x4_t *)this + 7), _Q6));
  *((_DWORD *)this + 10) = v12.i32[2];
  *((_DWORD *)this + 14) = v13.i32[2];
  *((_QWORD *)this + 4) = v12.i64[0];
  *((_QWORD *)this + 6) = v13.i64[0];
  *((_DWORD *)this + 18) = v14.i32[2];
  *((_QWORD *)this + 8) = v14.i64[0];
}

float32x4_t Kalman1d::reset(Kalman1d *this)
{
  float32x4_t result;
  float32x4_t v7;
  float32x4_t v8;

  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = 1065353216;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 8) = 0;
  __asm { FMOV            V6.4S, #10.0 }
  result = vaddq_f32(*((float32x4_t *)this + 2), vmulq_f32(*((float32x4_t *)this + 5), _Q6));
  v7 = vaddq_f32(*((float32x4_t *)this + 3), vmulq_f32(*((float32x4_t *)this + 6), _Q6));
  v8 = vaddq_f32(*((float32x4_t *)this + 4), vmulq_f32(*((float32x4_t *)this + 7), _Q6));
  *((_DWORD *)this + 10) = result.i32[2];
  *((_QWORD *)this + 4) = result.i64[0];
  *((_DWORD *)this + 14) = v7.i32[2];
  *((_QWORD *)this + 6) = v7.i64[0];
  *((_DWORD *)this + 18) = v8.i32[2];
  *((_QWORD *)this + 8) = v8.i64[0];
  return result;
}

__n128 Kalman1d::Kalman1d(uint64_t a1, _OWORD *a2, __int128 *a3, uint64_t a4, float a5, float a6)
{
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  *(float *)a1 = a5;
  *(float *)(a1 + 4) = a6;
  *(_OWORD *)(a1 + 16) = *a2;
  v6 = *a3;
  v7 = a3[2];
  *(_OWORD *)(a1 + 48) = a3[1];
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  result = *(__n128 *)a4;
  v9 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 112) = v9;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  *(float *)a1 = a5;
  *(float *)(a1 + 4) = a6;
  *(_OWORD *)(a1 + 16) = *a2;
  v6 = *a3;
  v7 = a3[2];
  *(_OWORD *)(a1 + 48) = a3[1];
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  result = *(__n128 *)a4;
  v9 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 112) = v9;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

double Kalman1d::update(float32x4_t *this, float a2, float a3)
{
  unsigned __int8 v3;
  float32x4_t *v4;
  unsigned __int8 v5;
  float32x4_t *v6;
  unsigned __int8 v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  double result;
  __int128 v30;
  __int128 v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  Kalman1d *v44;
  Kalman1d *v45;
  Kalman1d *v46;
  _OWORD v47[3];
  double v48;
  __int32 v49;
  __int128 v50;
  __int128 v51;

  v4 = (float32x4_t *)&unk_256CAA000;
  if ((v3 & 1) == 0)
  {
    v44 = (Kalman1d *)this;
    v38 = a2;
    v41 = a3;
    v4 = (float32x4_t *)&unk_256CAA000;
    a2 = v38;
    a3 = v41;
    v33 = v32;
    this = (float32x4_t *)v44;
    if (v33)
    {
      Kalman1d::update(float,float)::H = xmmword_23D9A3E10;
      v4 = (float32x4_t *)&unk_256CAA000;
      a2 = v38;
      a3 = v41;
      this = (float32x4_t *)v44;
    }
  }
  v6 = (float32x4_t *)&unk_256CAA000;
  if ((v5 & 1) == 0)
  {
    v45 = (Kalman1d *)this;
    v39 = a2;
    v42 = a3;
    v6 = (float32x4_t *)&unk_256CAA000;
    v4 = (float32x4_t *)&unk_256CAA000;
    a2 = v39;
    a3 = v42;
    v35 = v34;
    this = (float32x4_t *)v45;
    if (v35)
    {
      Kalman1d::update(float,float)::HT = Kalman1d::update(float,float)::H;
      v6 = (float32x4_t *)&unk_256CAA000;
      v4 = (float32x4_t *)&unk_256CAA000;
      a2 = v39;
      a3 = v42;
      this = (float32x4_t *)v45;
    }
  }
  if ((v7 & 1) == 0)
  {
    v46 = (Kalman1d *)this;
    v40 = a2;
    v43 = a3;
    v6 = (float32x4_t *)&unk_256CAA000;
    v4 = (float32x4_t *)&unk_256CAA000;
    a2 = v40;
    a3 = v43;
    v37 = v36;
    this = (float32x4_t *)v46;
    if (v37)
    {
      DWORD2(Kalman1d::update(float,float)::I) = 0;
      *(_QWORD *)&Kalman1d::update(float,float)::I = 1065353216;
      dword_256CAAAA8 = 0;
      qword_256CAAAA0 = 0x3F80000000000000;
      DWORD2(xmmword_256CAAAB0) = 1065353216;
      *(_QWORD *)&xmmword_256CAAAB0 = 0;
      v6 = (float32x4_t *)&unk_256CAA000;
      v4 = (float32x4_t *)&unk_256CAA000;
      a2 = v40;
      a3 = v43;
      this = (float32x4_t *)v46;
    }
  }
  v8 = this[2];
  v9 = 1.0 / (float)(v8.f32[0] + a3);
  v10 = this[1];
  v11 = a2 - v10.f32[0];
  v12 = this[3];
  v13 = this[4];
  v14 = v6[167];
  v15 = vmulq_n_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, v14.f32[0]), v12, *(float32x2_t *)v14.f32, 1), v13, v14, 2), v9);
  if ((float)(v9 * (float)((float)(1.0 - v15.f32[0]) * (float)(v11 * (float)(v11 * (float)(1.0 - v15.f32[0]))))) > 0.25)
  {
    v16 = 0;
    v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1);
    v18 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2);
    v19 = fabsf(v11);
    v20 = sqrtf(a3);
    v8.f32[0] = (float)((float)((float)((float)(v20 * v19) + (float)(v20 * v19)) - a3) - v8.f32[0]) * 0.25;
    v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 0);
    do
    {
      this[v16 + 2] = vaddq_f32(v21, this[v16 + 2]);
      ++v16;
    }
    while (v16 != 3);
    v8 = this[2];
    v12 = this[3];
    v13 = this[4];
    v15 = vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v8, v14.f32[0]), v17, v12), v18, v13), 1.0 / (float)(v8.f32[0] + a3));
  }
  v22 = 0;
  v23 = vmlaq_n_f32(v10, v15, v11);
  v23.i32[3] = 0;
  v24 = vmaxnmq_f32(v23, (float32x4_t)xmmword_23D9A3E70);
  v24.i32[3] = 0;
  this[1] = vminnmq_f32(v24, (float32x4_t)xmmword_23D9A3E80);
  v25 = v4[165];
  v26 = vsubq_f32((float32x4_t)Kalman1d::update(float,float)::I, vmulq_n_f32(v15, v25.f32[0]));
  v27 = vsubq_f32(*(float32x4_t *)&qword_256CAAAA0, vmulq_lane_f32(v15, *(float32x2_t *)v25.f32, 1));
  v28 = vsubq_f32((float32x4_t)xmmword_256CAAAB0, vmulq_laneq_f32(v15, v25, 2));
  v47[0] = v8;
  v47[1] = v12;
  v47[2] = v13;
  do
  {
    *(float32x4_t *)((char *)&v48 + v22 * 16) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(v47[v22])), v27, *(float32x2_t *)&v47[v22], 1), v28, (float32x4_t)v47[v22], 2);
    ++v22;
  }
  while (v22 != 3);
  result = v48;
  v30 = v50;
  v31 = v51;
  this[2].i32[2] = v49;
  this[3].i32[2] = DWORD2(v30);
  *(double *)this[2].i64 = result;
  this[3].i64[0] = v30;
  this[4].i32[2] = DWORD2(v31);
  this[4].i64[0] = v31;
  return result;
}

float32x4_t Kalman1d::predict(Kalman1d *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  uint64_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t result;
  float32x4_t v14;
  float32x4_t v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  int v22;
  int v23;
  Kalman1d *v24;
  Kalman1d *v25;
  float32x4_t v26;
  __int128 v27;
  float32x4_t v28;
  __int128 v29;
  __int128 v30;
  float32x4_t v31;
  __int128 v32;

  if ((v1 & 1) == 0)
  {
    v24 = this;
    this = v24;
    if (v16)
    {
      v17 = 0;
      v18 = &unk_23D9A403C;
      do
      {
        v19 = 0;
        v20 = (float32x4_t *)(&v30 + v17);
        v21 = *v20;
        do
        {
          v22 = v18[v19];
          v26 = v21;
          *(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3))) = v22;
          v21 = v26;
          ++v19;
        }
        while (v19 != 3);
        v20->i32[2] = v26.i32[2];
        v20->i64[0] = v21.i64[0];
        ++v17;
        v18 += 3;
      }
      while (v17 != 3);
      DWORD2(Kalman1d::predict(void)::A) = DWORD2(v30);
      *(_DWORD *)algn_256CAAAE8 = v31.i32[2];
      *(_QWORD *)&Kalman1d::predict(void)::A = v30;
      qword_256CAAAE0 = v31.i64[0];
      DWORD2(xmmword_256CAAAF0) = DWORD2(v32);
      *(_QWORD *)&xmmword_256CAAAF0 = v32;
      this = v24;
    }
  }
  if ((v2 & 1) == 0)
  {
    v25 = this;
    this = v25;
    if (v23)
    {
      *(_DWORD *)algn_256CAAB28 = DWORD1(xmmword_256CAAAF0);
      DWORD2(Kalman1d::predict(void)::AT) = xmmword_256CAAAF0;
      *(_QWORD *)&Kalman1d::predict(void)::AT = vzip1q_s32((int32x4_t)Kalman1d::predict(void)::A, *(int32x4_t *)&qword_256CAAAE0).u64[0];
      qword_256CAAB20 = vtrn2q_s32((int32x4_t)Kalman1d::predict(void)::A, *(int32x4_t *)&qword_256CAAAE0).u64[0];
      DWORD2(xmmword_256CAAB30) = DWORD2(xmmword_256CAAAF0);
      *(_QWORD *)&xmmword_256CAAB30 = vzip1q_s32(vdupq_laneq_s32((int32x4_t)Kalman1d::predict(void)::A, 2), vdupq_laneq_s32(*(int32x4_t *)&qword_256CAAAE0, 2)).u64[0];
      this = v25;
    }
  }
  v3 = 0;
  v4 = (float32x4_t)Kalman1d::predict(void)::A;
  v5 = *(float32x4_t *)&qword_256CAAAE0;
  v6 = (float32x4_t)xmmword_256CAAAF0;
  v7 = *((float32x4_t *)this + 2);
  v8 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)Kalman1d::predict(void)::A, COERCE_FLOAT(*((_OWORD *)this + 1))), *(float32x4_t *)&qword_256CAAAE0, *(float32x2_t *)((char *)this + 16), 1), (float32x4_t)xmmword_256CAAAF0, *((float32x4_t *)this + 1), 2);
  v8.i32[3] = 0;
  v9 = vmaxnmq_f32(v8, (float32x4_t)xmmword_23D9A3E70);
  v9.i32[3] = 0;
  *((float32x4_t *)this + 1) = vminnmq_f32(v9, (float32x4_t)xmmword_23D9A3E80);
  v10 = *((float32x4_t *)this + 3);
  v11 = *((float32x4_t *)this + 4);
  v27 = Kalman1d::predict(void)::AT;
  v28 = *(float32x4_t *)&qword_256CAAB20;
  v29 = xmmword_256CAAB30;
  do
  {
    *(__int128 *)((char *)&v30 + v3) = (__int128)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(*(__int128 *)((char *)&v27 + v3))), v10, *(float32x2_t *)((char *)&v27 + v3), 1), v11, *(float32x4_t *)((char *)&v27 + v3), 2);
    v3 += 16;
  }
  while (v3 != 48);
  v12 = 0;
  v27 = v30;
  v28 = v31;
  v29 = v32;
  do
  {
    *(__int128 *)((char *)&v30 + v12) = (__int128)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(*(__int128 *)((char *)&v27 + v12))), v5, *(float32x2_t *)((char *)&v27 + v12), 1), v6, *(float32x4_t *)((char *)&v27 + v12), 2);
    v12 += 16;
  }
  while (v12 != 48);
  result = vaddq_f32((float32x4_t)v30, *((float32x4_t *)this + 5));
  v14 = vaddq_f32(v31, *((float32x4_t *)this + 6));
  v15 = vaddq_f32((float32x4_t)v32, *((float32x4_t *)this + 7));
  *((_DWORD *)this + 10) = result.i32[2];
  *((_DWORD *)this + 14) = v14.i32[2];
  *((_QWORD *)this + 4) = result.i64[0];
  *((_QWORD *)this + 6) = v14.i64[0];
  *((_DWORD *)this + 18) = v15.i32[2];
  *((_QWORD *)this + 8) = v15.i64[0];
  return result;
}

double Kalman1d::I(Kalman1d *this)
{
  unsigned __int8 v1;

  {
    DWORD2(Kalman1d::I(void)::I) = 0;
    *(_QWORD *)&Kalman1d::I(void)::I = 1065353216;
    DWORD2(Kalman1d::I(void)::I) = 0;
    *(_QWORD *)&Kalman1d::I(void)::I = 0x3F80000000000000;
    DWORD2(Kalman1d::I(void)::I) = 1065353216;
    *(_QWORD *)&Kalman1d::I(void)::I = 0;
  }
  return *(double *)&Kalman1d::I(void)::I;
}

void KalmanQuat::KalmanQuat(KalmanQuat *this, float a2, float a3, float a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  v4 = vmulq_n_f32((float32x4_t)xmmword_23D9A3E40, a2);
  *((_DWORD *)this + 26) = v4.i32[2];
  v5 = vmulq_n_f32((float32x4_t)xmmword_23D9A3E50, a2);
  v6 = vmulq_n_f32((float32x4_t)xmmword_23D9A3E60, a2);
  *((_DWORD *)this + 30) = v5.i32[2];
  *((_QWORD *)this + 12) = v4.i64[0];
  *((_QWORD *)this + 14) = v5.i64[0];
  *((_DWORD *)this + 34) = v6.i32[2];
  *((_QWORD *)this + 16) = v6.i64[0];
  *((float *)this + 36) = a3;
  *((float *)this + 37) = a4;
  *(_OWORD *)this = xmmword_23D9A3E90;
  *((_OWORD *)this + 1) = xmmword_23D9A3E90;
  *((_OWORD *)this + 2) = xmmword_23D9A3E90;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 6) = 1065353216;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 10) = 0;
  __asm { FMOV            V6.4S, #10.0 }
  v12 = vaddq_f32(*((float32x4_t *)this + 3), vmulq_f32(*((float32x4_t *)this + 6), _Q6));
  v13 = vaddq_f32(*((float32x4_t *)this + 4), vmulq_f32(*((float32x4_t *)this + 7), _Q6));
  v14 = vaddq_f32(*((float32x4_t *)this + 5), vmulq_f32(*((float32x4_t *)this + 8), _Q6));
  *((_DWORD *)this + 14) = v12.i32[2];
  *((_DWORD *)this + 18) = v13.i32[2];
  *((_QWORD *)this + 6) = v12.i64[0];
  *((_QWORD *)this + 8) = v13.i64[0];
  *((_DWORD *)this + 22) = v14.i32[2];
  *((_QWORD *)this + 10) = v14.i64[0];
}

float32x4_t KalmanQuat::reset(KalmanQuat *this)
{
  float32x4_t result;
  float32x4_t v7;
  float32x4_t v8;

  *(_OWORD *)this = xmmword_23D9A3E90;
  *((_OWORD *)this + 1) = xmmword_23D9A3E90;
  *((_OWORD *)this + 2) = xmmword_23D9A3E90;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 6) = 1065353216;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 10) = 0;
  __asm { FMOV            V6.4S, #10.0 }
  result = vaddq_f32(*((float32x4_t *)this + 3), vmulq_f32(*((float32x4_t *)this + 6), _Q6));
  v7 = vaddq_f32(*((float32x4_t *)this + 4), vmulq_f32(*((float32x4_t *)this + 7), _Q6));
  v8 = vaddq_f32(*((float32x4_t *)this + 5), vmulq_f32(*((float32x4_t *)this + 8), _Q6));
  *((_DWORD *)this + 14) = result.i32[2];
  *((_QWORD *)this + 6) = result.i64[0];
  *((_DWORD *)this + 18) = v7.i32[2];
  *((_QWORD *)this + 8) = v7.i64[0];
  *((_DWORD *)this + 22) = v8.i32[2];
  *((_QWORD *)this + 10) = v8.i64[0];
  return result;
}

uint64_t KalmanQuat::KalmanQuat(uint64_t result, __int128 *a2, __int128 *a3, __int128 *a4, float a5, float a6)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v6 = *a2;
  v7 = a2[2];
  *(_OWORD *)(result + 16) = a2[1];
  *(_OWORD *)(result + 32) = v7;
  *(_OWORD *)result = v6;
  v8 = *a3;
  v9 = a3[2];
  *(_OWORD *)(result + 64) = a3[1];
  *(_OWORD *)(result + 80) = v9;
  *(_OWORD *)(result + 48) = v8;
  v10 = *a4;
  v11 = a4[2];
  *(_OWORD *)(result + 112) = a4[1];
  *(_OWORD *)(result + 128) = v11;
  *(_OWORD *)(result + 96) = v10;
  *(float *)(result + 144) = a5;
  *(float *)(result + 148) = a6;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v6 = *a2;
  v7 = a2[2];
  *(_OWORD *)(result + 16) = a2[1];
  *(_OWORD *)(result + 32) = v7;
  *(_OWORD *)result = v6;
  v8 = *a3;
  v9 = a3[2];
  *(_OWORD *)(result + 64) = a3[1];
  *(_OWORD *)(result + 80) = v9;
  *(_OWORD *)(result + 48) = v8;
  v10 = *a4;
  v11 = a4[2];
  *(_OWORD *)(result + 112) = a4[1];
  *(_OWORD *)(result + 128) = v11;
  *(_OWORD *)(result + 96) = v10;
  *(float *)(result + 144) = a5;
  *(float *)(result + 148) = a6;
  return result;
}

double KalmanQuat::update(KalmanQuat *this, float32x4_t *a2, float a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float v20;
  float v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  int32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  simd_quatf v34;
  int8x16_t v35;
  int32x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  unsigned int v39;
  __int128 v40;
  int8x16_t v41;
  unsigned int v42;
  uint64_t v43;
  __int128 v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  double result;
  __int128 v49;
  __int128 v50;
  int32x4_t v51;
  __int8 v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  __int128 v57;
  simd_quatf v58;
  simd_quatf v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float v64;
  simd_quatf v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  _OWORD v69[3];
  double v70;
  int v71;
  __int128 v72;
  __int128 v73;

  {
    KalmanQuat::update(simd_quatf const&,float)::H = xmmword_23D9A3E10;
  }
  {
    KalmanQuat::update(simd_quatf const&,float)::HT = KalmanQuat::update(simd_quatf const&,float)::H;
  }
  {
    DWORD2(KalmanQuat::update(simd_quatf const&,float)::I) = 0;
    *(_QWORD *)&KalmanQuat::update(simd_quatf const&,float)::I = 1065353216;
    dword_256CAABE8 = 0;
    qword_256CAABE0 = 0x3F80000000000000;
    DWORD2(xmmword_256CAABF0) = 1065353216;
    *(_QWORD *)&xmmword_256CAABF0 = 0;
  }
  v9 = *((float32x4_t *)this + 3);
  v64 = 1.0 / (float)(v9.f32[0] + a3);
  v66 = v9;
  v60 = *((float32x4_t *)this + 5);
  v61 = *((float32x4_t *)this + 4);
  v51 = (int32x4_t)KalmanQuat::update(simd_quatf const&,float)::HT;
  v67 = vmulq_n_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, *(float *)&KalmanQuat::update(simd_quatf const&,float)::HT), v61, *(float32x2_t *)&KalmanQuat::update(simd_quatf const&,float)::HT, 1), v60, (float32x4_t)KalmanQuat::update(simd_quatf const&,float)::HT, 2), v64);
  v10 = vmulq_f32(*(float32x4_t *)this, (float32x4_t)xmmword_23D9A3EA0);
  v53 = *a2;
  v55 = (int32x4_t)vnegq_f32(*a2);
  v58 = *(simd_quatf *)this;
  v11 = (int8x16_t)vtrn2q_s32(*(int32x4_t *)a2, vtrn1q_s32(*(int32x4_t *)a2, v55));
  v12 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8(*(int8x16_t *)a2, (int8x16_t)v55, 8uLL), *(float32x2_t *)v10.f32, 1), (float32x4_t)vextq_s8(v11, v11, 8uLL), v10.f32[0]);
  v13 = (float32x4_t)vrev64q_s32(*(int32x4_t *)a2);
  v13.i32[3] = v55.i32[2];
  v13.i32[0] = v55.i32[1];
  v14 = vaddq_f32(v12, vmlaq_laneq_f32(vmulq_laneq_f32(*a2, v10, 3), v13, v10, 2));
  v15 = vmulq_f32(v14, v14);
  v62 = v14;
  v16 = atan2f(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]), v14.f32[3]);
  v17 = v53;
  v18 = (int8x16_t)v55;
  v19 = v67;
  v20 = v16 + v16;
  v21 = 6.28318531 - v20;
  if (v20 <= 3.14159265)
    v21 = v20;
  if ((float)(v64 * (float)((float)(1.0 - v67.f32[0]) * (float)(v21 * (float)(v21 * (float)(1.0 - v67.f32[0]))))) > 0.25)
  {
    v22 = 0;
    v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 1);
    v24 = (float32x4_t)vdupq_laneq_s32(v51, 2);
    v19.f32[0] = fabsf(v21);
    v25 = sqrtf(a3);
    v19.f32[0] = (float)((float)((float)((float)(v25 * v19.f32[0]) + (float)(v25 * v19.f32[0])) - a3) - v66.f32[0])
               * 0.25;
    v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 0);
    do
    {
      *(float32x4_t *)((char *)this + v22 + 48) = vaddq_f32(v26, *(float32x4_t *)((char *)this + v22 + 48));
      v22 += 16;
    }
    while (v22 != 48);
    v66 = *((float32x4_t *)this + 3);
    v60 = *((float32x4_t *)this + 5);
    v61 = *((float32x4_t *)this + 4);
    v19 = vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v66, *(float *)v51.i32), v23, v61), v24, v60), 1.0 / (float)(v66.f32[0] + a3));
    v17 = *a2;
    v18 = (int8x16_t)vnegq_f32(*a2);
  }
  v68 = v19;
  v27 = (int32x4_t)vnegq_f32(v62);
  v28 = (int8x16_t)vtrn2q_s32((int32x4_t)v62, vtrn1q_s32((int32x4_t)v62, v27));
  v29 = (float32x4_t)vextq_s8(v28, v28, 8uLL);
  v30 = (float32x4_t)vextq_s8((int8x16_t)v62, (int8x16_t)v27, 8uLL);
  v31 = (float32x4_t)vrev64q_s32((int32x4_t)v62);
  v31.i32[0] = v27.i32[1];
  v31.i32[3] = v27.i32[2];
  v54 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32(v30, *(float32x2_t *)((char *)this + 16), 1), v29, COERCE_FLOAT(*((_OWORD *)this + 1))), vmlaq_laneq_f32(vmulq_laneq_f32(v62, *((float32x4_t *)this + 1), 3), v31, *((float32x4_t *)this + 1), 2));
  v56 = *((float32x4_t *)this + 1);
  v63 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32(v30, *(float32x2_t *)((char *)this + 32), 1), v29, COERCE_FLOAT(*((_OWORD *)this + 2))), vmlaq_laneq_f32(vmulq_laneq_f32(v62, *((float32x4_t *)this + 2), 3), v31, *((float32x4_t *)this + 2), 2));
  v65 = (simd_quatf)*((_OWORD *)this + 2);
  v32 = vmulq_f32((float32x4_t)v58, v17);
  v33 = (float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL);
  *(float32x2_t *)v33.f32 = vadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v33.f32);
  v32.f32[0] = vaddv_f32(*(float32x2_t *)v33.f32);
  v33.i32[0] = 0;
  _simd_slerp_internal((float32x4_t)v58, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v32, v33)), 0), v18, (int8x16_t)v17), v19.f32[0]);
  v59 = v34;
  v35 = (int8x16_t)vmulq_f32(v56, v54);
  v36 = (int32x2_t)vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
  v37 = (int8x16_t)vnegq_f32(v54);
  v38 = (int8x16_t)vmulq_f32((float32x4_t)v65, v63);
  *(float32x2_t *)v38.i8 = vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
  *(int8x8_t *)v38.i8 = vmvn_s8((int8x8_t)vcgez_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v38.i8, v36), (float32x2_t)vzip2_s32(*(int32x2_t *)v38.i8, v36))));
  v52 = v38.i8[0];
  if ((v38.i8[4] & 1) != 0)
    v39 = -1;
  else
    v39 = 0;
  _simd_slerp_internal(v56, (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v39), v37, (int8x16_t)v54), v68.f32[1]);
  v57 = v40;
  v41 = (int8x16_t)vnegq_f32(v63);
  if ((v52 & 1) != 0)
    v42 = -1;
  else
    v42 = 0;
  _simd_slerp_internal((float32x4_t)v65, (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v42), v41, (int8x16_t)v63), v68.f32[2]);
  v43 = 0;
  *(simd_quatf *)this = v59;
  *((_OWORD *)this + 1) = v57;
  *((_OWORD *)this + 2) = v44;
  v45 = vsubq_f32((float32x4_t)KalmanQuat::update(simd_quatf const&,float)::I, vmulq_n_f32(v68, *(float *)&KalmanQuat::update(simd_quatf const&,float)::H));
  v46 = vsubq_f32(*(float32x4_t *)&qword_256CAABE0, vmulq_lane_f32(v68, *(float32x2_t *)&KalmanQuat::update(simd_quatf const&,float)::H, 1));
  v47 = vsubq_f32((float32x4_t)xmmword_256CAABF0, vmulq_laneq_f32(v68, (float32x4_t)KalmanQuat::update(simd_quatf const&,float)::H, 2));
  v69[0] = v66;
  v69[1] = v61;
  v69[2] = v60;
  do
  {
    *(float32x4_t *)((char *)&v70 + v43 * 16) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, COERCE_FLOAT(v69[v43])), v46, *(float32x2_t *)&v69[v43], 1), v47, (float32x4_t)v69[v43], 2);
    ++v43;
  }
  while (v43 != 3);
  result = v70;
  v49 = v72;
  v50 = v73;
  *((_DWORD *)this + 14) = v71;
  *((_DWORD *)this + 18) = DWORD2(v49);
  *((double *)this + 6) = result;
  *((_QWORD *)this + 8) = v49;
  *((_DWORD *)this + 22) = DWORD2(v50);
  *((_QWORD *)this + 10) = v50;
  return result;
}

float32x4_t KalmanQuat::predict(float32x4_t *this)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  float32x4_t v4;
  int32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float v19;
  int8x16_t v20;
  unsigned int v21;
  float32x4_t v22;
  unsigned int v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x4_t v28;
  unsigned __int32 v29;
  float32x2_t v30;
  float32x2_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x4_t v34;
  unsigned __int32 v35;
  float32x2_t v36;
  float32x2_t v37;
  int8x16_t v38;
  float32x2_t v39;
  unsigned __int32 v40;
  float32x2_t v41;
  float32x2_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  float32x4_t result;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  int v59;
  simd_quatf v60;
  float32x4_t v61;
  __int8 v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  __int128 v70;
  float32x4_t v71;
  __int128 v72;
  __int128 v73;
  float32x4_t v74;
  __int128 v75;

  {
    v54 = 0;
    v55 = &unk_23D9A403C;
    do
    {
      v56 = 0;
      v57 = (float32x4_t *)(&v73 + v54);
      v58 = *v57;
      do
      {
        v59 = v55[v56];
        v69 = v58;
        *(_DWORD *)((unint64_t)&v69 & 0xFFFFFFFFFFFFFFF3 | (4 * (v56 & 3))) = v59;
        v58 = v69;
        ++v56;
      }
      while (v56 != 3);
      v57->i32[2] = v69.i32[2];
      v57->i64[0] = v58.i64[0];
      ++v54;
      v55 += 3;
    }
    while (v54 != 3);
    DWORD2(KalmanQuat::predict(void)::A) = DWORD2(v73);
    *(_DWORD *)algn_256CAAC28 = v74.i32[2];
    *(_QWORD *)&KalmanQuat::predict(void)::A = v73;
    qword_256CAAC20 = v74.i64[0];
    DWORD2(xmmword_256CAAC30) = DWORD2(v75);
    *(_QWORD *)&xmmword_256CAAC30 = v75;
  }
  {
    *(_DWORD *)algn_256CAAC68 = DWORD1(xmmword_256CAAC30);
    DWORD2(KalmanQuat::predict(void)::AT) = xmmword_256CAAC30;
    *(_QWORD *)&KalmanQuat::predict(void)::AT = vzip1q_s32((int32x4_t)KalmanQuat::predict(void)::A, *(int32x4_t *)&qword_256CAAC20).u64[0];
    qword_256CAAC60 = vtrn2q_s32((int32x4_t)KalmanQuat::predict(void)::A, *(int32x4_t *)&qword_256CAAC20).u64[0];
    DWORD2(xmmword_256CAAC70) = DWORD2(xmmword_256CAAC30);
    *(_QWORD *)&xmmword_256CAAC70 = vzip1q_s32(vdupq_laneq_s32((int32x4_t)KalmanQuat::predict(void)::A, 2), vdupq_laneq_s32(*(int32x4_t *)&qword_256CAAC20, 2)).u64[0];
  }
  v4 = this[1];
  v5 = (int32x4_t)vnegq_f32(v4);
  v6 = (int8x16_t)vtrn2q_s32((int32x4_t)v4, vtrn1q_s32((int32x4_t)v4, v5));
  v7 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v5, 8uLL), *(float32x2_t *)this->f32, 1), (float32x4_t)vextq_s8(v6, v6, 8uLL), COERCE_FLOAT(*this));
  v8 = (float32x4_t)vrev64q_s32((int32x4_t)v4);
  v8.i32[0] = v5.i32[1];
  v8.i32[3] = v5.i32[2];
  v9 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v4, *this, 3), v8, *this, 2), v7);
  v68 = this[2];
  v65 = v4;
  v67 = (int32x4_t)vnegq_f32(v68);
  v10 = (int8x16_t)vtrn2q_s32((int32x4_t)v68, vtrn1q_s32((int32x4_t)v68, v67));
  v61 = (float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v67, 8uLL);
  v63 = (float32x4_t)vextq_s8(v10, v10, 8uLL);
  v11 = (float32x4_t)vrev64q_s32((int32x4_t)v68);
  v11.i32[3] = v67.i32[2];
  v11.i32[0] = v67.i32[1];
  v60 = (simd_quatf)v11;
  v12 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32(v61, *(float32x2_t *)v9.f32, 1), v63, v9.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32(v68, v9, 3), v11, v9, 2));
  v13 = vmulq_f32(v9, v12);
  v14 = (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
  *(float32x2_t *)v13.f32 = vadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v14.f32);
  v13.f32[0] = vaddv_f32(*(float32x2_t *)v13.f32);
  v14.i32[0] = 0;
  _simd_slerp_internal(v12, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v13, v14)), 0), (int8x16_t)vnegq_f32(v9), (int8x16_t)v9), 0.5);
  v64 = v15;
  v16 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v68, v65, 3), (float32x4_t)v60, v65, 2), vmlaq_n_f32(vmulq_lane_f32(v61, *(float32x2_t *)v65.f32, 1), v63, v65.f32[0]));
  v17 = (int8x16_t)vmulq_f32(v16, (float32x4_t)xmmword_23D9A3E90);
  *(float32x2_t *)v17.i8 = vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
  v18 = (int8x16_t)vnegq_f32(v16);
  v19 = this[9].f32[1];
  v20 = (int8x16_t)vmulq_f32(v68, (float32x4_t)xmmword_23D9A3E90);
  *(float32x2_t *)v20.i8 = vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
  *(int8x8_t *)v17.i8 = vmvn_s8((int8x8_t)vcgez_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v20.i8, *(int32x2_t *)v17.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v20.i8, *(int32x2_t *)v17.i8))));
  v62 = v17.i8[0];
  if ((v17.i8[4] & 1) != 0)
    v21 = -1;
  else
    v21 = 0;
  _simd_slerp_internal((float32x4_t)_PromotedConst, (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v21), v18, (int8x16_t)v16), this[9].f32[0]);
  v66 = v22;
  if ((v62 & 1) != 0)
    v23 = -1;
  else
    v23 = 0;
  _simd_slerp_internal((float32x4_t)_PromotedConst, (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v23), (int8x16_t)v67, (int8x16_t)v68), v19);
  v25 = (float32x4_t)xmmword_23D9A3E90;
  v26 = (int8x16_t)vmulq_f32(v64, v64);
  v27 = vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
  v28 = (float32x4_t)xmmword_23D9A3E90;
  if (vaddv_f32(v27) != 0.0)
  {
    v29 = vadd_f32(v27, (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1)).u32[0];
    v30 = vrsqrte_f32((float32x2_t)v29);
    v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29, vmul_f32(v30, v30)));
    v28 = vmulq_n_f32(v64, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29, vmul_f32(v31, v31))).f32[0]);
  }
  v32 = (int8x16_t)vmulq_f32(v66, v66);
  v33 = vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
  v34 = (float32x4_t)xmmword_23D9A3E90;
  if (vaddv_f32(v33) != 0.0)
  {
    v35 = vadd_f32(v33, (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1)).u32[0];
    v36 = vrsqrte_f32((float32x2_t)v35);
    v37 = vmul_f32(v36, vrsqrts_f32((float32x2_t)v35, vmul_f32(v36, v36)));
    v34 = vmulq_n_f32(v66, vmul_f32(v37, vrsqrts_f32((float32x2_t)v35, vmul_f32(v37, v37))).f32[0]);
  }
  v38 = (int8x16_t)vmulq_f32(v24, v24);
  v39 = vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
  if (vaddv_f32(v39) != 0.0)
  {
    v40 = vadd_f32(v39, (float32x2_t)vdup_lane_s32((int32x2_t)v39, 1)).u32[0];
    v41 = vrsqrte_f32((float32x2_t)v40);
    v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40, vmul_f32(v41, v41)));
    v25 = vmulq_n_f32(v24, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40, vmul_f32(v42, v42))).f32[0]);
  }
  v43 = 0;
  *this = v28;
  this[1] = v34;
  this[2] = v25;
  v44 = (float32x4_t)KalmanQuat::predict(void)::A;
  v45 = *(float32x4_t *)&qword_256CAAC20;
  v46 = (float32x4_t)xmmword_256CAAC30;
  v47 = this[3];
  v48 = this[4];
  v49 = this[5];
  v70 = KalmanQuat::predict(void)::AT;
  v71 = *(float32x4_t *)&qword_256CAAC60;
  v72 = xmmword_256CAAC70;
  do
  {
    *(__int128 *)((char *)&v73 + v43) = (__int128)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(__int128 *)((char *)&v70 + v43))), v48, *(float32x2_t *)((char *)&v70 + v43), 1), v49, *(float32x4_t *)((char *)&v70 + v43), 2);
    v43 += 16;
  }
  while (v43 != 48);
  v50 = 0;
  v70 = v73;
  v71 = v74;
  v72 = v75;
  do
  {
    *(__int128 *)((char *)&v73 + v50) = (__int128)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, COERCE_FLOAT(*(__int128 *)((char *)&v70 + v50))), v45, *(float32x2_t *)((char *)&v70 + v50), 1), v46, *(float32x4_t *)((char *)&v70 + v50), 2);
    v50 += 16;
  }
  while (v50 != 48);
  result = vaddq_f32((float32x4_t)v73, this[6]);
  v52 = vaddq_f32(v74, this[7]);
  v53 = vaddq_f32((float32x4_t)v75, this[8]);
  this[3].i32[2] = result.i32[2];
  this[4].i32[2] = v52.i32[2];
  this[3].i64[0] = result.i64[0];
  this[4].i64[0] = v52.i64[0];
  this[5].i32[2] = v53.i32[2];
  this[5].i64[0] = v53.i64[0];
  return result;
}

double KalmanQuat::I(KalmanQuat *this)
{
  return *(double *)&_PromotedConst_7;
}

void _simd_slerp_internal(float32x4_t a1, float32x4_t a2, float a3)
{
  float v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  float v11;
  float v12;

  v5 = 1.0 - a3;
  v6 = vsubq_f32(a1, a2);
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  v8 = vaddq_f32(a1, a2);
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0)
    sinf(v11);
  if ((float)(v5 * v11) != 0.0)
    sinf(v5 * v11);
  v12 = v11 * a3;
  if (v12 != 0.0)
    sinf(v12);
}

void sub_23D6A3500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  void *v36;
  char isKindOfClass;
  void *v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  id v43;

  if (a2)
  {

    if (a2 == 2)
    {
      v27 = objc_begin_catch(exception_object);
      v28 = (void *)MEMORY[0x24BDD17C8];
      v43 = v27;
      objc_msgSend(v27, "description");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "stringWithFormat:", CFSTR("JSON build from dictionary failed.  Error = %@ in dictionary"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      +[HandyLoggerNeo logAtLevel:withPrivacy:withLogArea:inFile:onLine:message:](_TtC5Hands14HandyLoggerNeo, "logAtLevel:withPrivacy:withLogArea:inFile:onLine:message:", 4, 1, CFSTR("Default"), CFSTR("/Library/Caches/com.apple.xbs/Sources/Hands/HandsKit/Utils/FoundationExtensions.mm"), 40, v29);

      if (objc_msgSend(v22, "count") == 1)
      {
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@"));
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        +[HandyLoggerNeo logAtLevel:withPrivacy:withLogArea:inFile:onLine:message:](_TtC5Hands14HandyLoggerNeo, "logAtLevel:withPrivacy:withLogArea:inFile:onLine:message:", 4, 1, CFSTR("Default"), CFSTR("/Library/Caches/com.apple.xbs/Sources/Hands/HandsKit/Utils/FoundationExtensions.mm"), 42, v30);

      }
      a13 = 0u;
      a14 = 0u;
      a11 = 0u;
      a12 = 0u;
      v31 = v22;
      v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &a11, &a19, 16);
      if (v32)
      {
        v33 = *(_QWORD *)a12;
        do
        {
          for (i = 0; i != v32; ++i)
          {
            if (*(_QWORD *)a12 != v33)
              objc_enumerationMutation(v31);
            v35 = *(_QWORD *)(*((_QWORD *)&a11 + 1) + 8 * i);
            objc_msgSend(v31, "objectForKeyedSubscript:", v35);
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();

            if ((isKindOfClass & 1) != 0)
            {
              objc_msgSend(v31, "objectForKeyedSubscript:", v35);
              v38 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              a17 = v35;
              objc_msgSend(v31, "objectForKeyedSubscript:", v35);
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              a18 = (uint64_t)v40;
              objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &a18, &a17, 1);
              v38 = (void *)objc_claimAutoreleasedReturnValue();

            }
            v39 = (id)objc_msgSend(v38, "handsKit_jsonDataWithPrettyPrint:", v21);

          }
          v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &a11, &a19, 16);
        }
        while (v32);
      }

      objc_end_catch();
      JUMPOUT(0x23D6A34B4);
    }
    objc_begin_catch(exception_object);
    v41 = v19;
    objc_end_catch();
    JUMPOUT(0x23D6A34BCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_23D6A388C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float32x2_t nis::out_prod_3(float32x2_t *a1, float *a2)
{
  return vmul_n_f32(*a1, *a2);
}

double nis::out_prod_2(uint64_t *a1, unint64_t *a2, double a3, int32x4_t a4)
{
  float32x4_t v4;
  double result;

  v4.i64[0] = *a1;
  v4.i64[1] = *a1;
  a4.i64[0] = *a2;
  *(_QWORD *)&result = vmulq_f32(v4, (float32x4_t)vzip1q_s32(a4, a4)).u64[0];
  return result;
}

double nis::make_rotation_orthogonal(float32x4_t *this, const simd_float3x3 *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v4;
  float32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  float32x2_t v29;
  float v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  __int128 v49;
  int8x16_t v50;
  float32x4_t v51;
  uint64_t v52;
  __int32 v53;
  float32x4_t v54;
  uint64_t v55;
  __int32 v56;

  v4 = 0;
  v5 = *this;
  v6 = (int8x16_t)this[1];
  v7 = this[2];
  v8 = *(float32x4_t *)MEMORY[0x24BDAEDF8];
  v9 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 16);
  v10 = *(float32x4_t *)(MEMORY[0x24BDAEDF8] + 32);
  v46 = *(float32x4_t *)MEMORY[0x24BDAEDF8];
  v47 = v9;
  v48 = v10;
  a3.i64[0] = *MEMORY[0x24BDAEDF0];
  a4.i64[0] = *(_QWORD *)(MEMORY[0x24BDAEDF0] + 8);
  v11 = -1.0;
  if (v5.f32[0] < 0.0)
    v11 = 1.0;
  v12 = vmulq_f32(v5, v5);
  v13 = vsubq_f32(v5, (float32x4_t)COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0])* (float)(int)v11));
  v14 = vdivq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0));
  v15 = vmulq_f32(v14, v14);
  *(float32x2_t *)v16.f32 = vmul_lane_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32, 1);
  *(float32x2_t *)v14.f32 = vmul_laneq_f32(*(float32x2_t *)v14.f32, v14, 2);
  *(int32x2_t *)v17.f32 = vzip1_s32(*(int32x2_t *)v15.f32, *(int32x2_t *)v16.f32);
  *(int32x2_t *)&v16.u32[2] = vdup_lane_s32(*(int32x2_t *)v14.f32, 1);
  v17.i64[1] = v14.i64[0];
  v18 = 2.0
      / vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
  v14.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  v19 = vmulq_n_f32(v17, v18);
  v20 = vmulq_n_f32(v16, v18);
  v21 = vmulq_n_f32(v14, v18);
  v22 = vsubq_f32(v8, v19);
  v23 = vsubq_f32(v9, v20);
  v24 = v23;
  v24.i32[3] = 0;
  v25 = vsubq_f32(v10, v21);
  v49 = (__int128)v5;
  v50 = v6;
  v51 = v7;
  do
  {
    *(float32x4_t *)((char *)&v52 + v4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(__int128 *)((char *)&v49 + v4))), v23, *(float32x2_t *)((char *)&v49 + v4), 1), v25, *(float32x4_t *)((char *)&v49 + v4), 2);
    v4 += 16;
  }
  while (v4 != 48);
  v26 = 0;
  v22.i32[3] = 0;
  v25.i32[3] = 0;
  v27 = v54;
  v49 = (__int128)v22;
  v50 = (int8x16_t)v24;
  v51 = v25;
  do
  {
    *(float32x4_t *)((char *)&v52 + v26) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*(__int128 *)((char *)&v49 + v26))), v9, *(float32x2_t *)((char *)&v49 + v26), 1), v10, *(float32x4_t *)((char *)&v49 + v26), 2);
    v26 += 16;
  }
  while (v26 != 48);
  v28 = 0;
  v46.i32[2] = v53;
  v47.i32[2] = v54.i32[2];
  v48.i32[2] = v56;
  v46.i64[0] = v52;
  v47.i64[0] = v54.i64[0];
  v48.i64[0] = v55;
  v29 = (float32x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL).u64[0];
  v30 = -1.0;
  if (v27.f32[1] < 0.0)
    v30 = 1.0;
  v31 = vmulq_f32(v27, v27);
  v32 = vsub_f32(v29, (float32x2_t)COERCE_UNSIGNED_INT(sqrtf(COERCE_FLOAT(vaddq_f32(v31, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&v31, 2)).i32[1]))* (float)(int)v30));
  v33 = vdiv_f32(v32, (float32x2_t)vdup_lane_s32((int32x2_t)v32, 0));
  v34 = vmul_f32(v33, v33);
  v31.f32[0] = 2.0 / vaddv_f32(v34);
  v35 = vmul_lane_f32(v33, v33, 1);
  *(float32x2_t *)a3.i8 = vsub_f32(*(float32x2_t *)a3.i8, vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v34, (int32x2_t)v35), v31.f32[0]));
  *(float32x2_t *)a4.i8 = vsub_f32(*(float32x2_t *)a4.i8, vmul_n_f32(v35, v31.f32[0]));
  v36 = vextq_s8((int8x16_t)0, (int8x16_t)0, 4uLL);
  v37 = vextq_s8(v36, a3, 0xCuLL);
  v38 = vextq_s8(v36, a4, 0xCuLL);
  v39 = v46;
  v40 = v47;
  v41 = v48;
  v49 = xmmword_23D9A3E10;
  v50 = v37;
  v51 = (float32x4_t)v38;
  do
  {
    *(float32x4_t *)((char *)&v52 + v28) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(__int128 *)((char *)&v49 + v28))), v40, *(float32x2_t *)((char *)&v49 + v28), 1), v41, *(float32x4_t *)((char *)&v49 + v28), 2);
    v28 += 16;
  }
  while (v28 != 48);
  v42 = 0;
  v46.i32[2] = v53;
  v47.i32[2] = v54.i32[2];
  v46.i64[0] = v52;
  v47.i64[0] = v54.i64[0];
  v48.i32[2] = v56;
  v48.i64[0] = v55;
  do
  {
    v43 = *(float32x4_t *)((char *)&v46 + v42 * 16);
    v44 = vmulq_f32(this[v42], v43);
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0] < 0.0)*(float32x4_t *)((char *)&v46 + v42 * 16) = vnegq_f32(v43);
    ++v42;
  }
  while (v42 != 3);
  return *(double *)v46.i64;
}

double nis::make_rot(float32x4_t *a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;

  v1 = *(float32x4_t *)MEMORY[0x24BDAEDF8];
  v2 = *a1;
  v3 = vmulq_f32(v2, v2);
  v4 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]);
  if (v4 >= 0.000001)
  {
    v5 = -1.0;
    if (v2.f32[0] < 0.0)
      v5 = 1.0;
    v6 = vsubq_f32(v2, (float32x4_t)COERCE_UNSIGNED_INT(v4 * (float)(int)v5));
    v7 = vdivq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 0));
    v8 = vmulq_f32(v7, v7);
    *(int32x2_t *)v9.f32 = vzip1_s32(*(int32x2_t *)v8.f32, (int32x2_t)vmul_lane_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32, 1));
    *(float32x2_t *)&v9.u32[2] = vmul_laneq_f32(*(float32x2_t *)v7.f32, v7, 2);
    v1 = vsubq_f32(v1, vmulq_n_f32(v9, 2.0/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]));
    v10 = vmulq_f32(v2, v1);
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0] < 0.0)v1.i64[0] = vnegq_f32(v1).u64[0];
  }
  return *(double *)v1.i64;
}

double nis::roll(float32x4_t *this, const simd_float3x3 *a2, float a3)
{
  __float2 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  _OWORD v12[3];
  __int128 v13;

  v4 = __sincosf_stret(a3);
  v5 = 0;
  LODWORD(v6) = 0;
  LODWORD(v7) = 0;
  DWORD1(v7) = LODWORD(v4.__cosval);
  *((_QWORD *)&v7 + 1) = LODWORD(v4.__sinval);
  *((float *)&v6 + 1) = -v4.__sinval;
  *((_QWORD *)&v6 + 1) = LODWORD(v4.__cosval);
  v8 = *this;
  v9 = this[1];
  v10 = this[2];
  v12[0] = xmmword_23D9A3E10;
  v12[1] = v7;
  v12[2] = v6;
  do
  {
    *(__int128 *)((char *)&v13 + v5 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(v12[v5])), v9, *(float32x2_t *)&v12[v5], 1), v10, (float32x4_t)v12[v5], 2);
    ++v5;
  }
  while (v5 != 3);
  return *(double *)&v13;
}

float nis::roll_dist(int32x4_t *this, const simd_float3x3 *a2, const simd_float3x3 *a3)
{
  uint64_t v3;
  int32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  simd_float3 v8;
  simd_float3 v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12;
  float v13;
  float v14;
  __float2 v15;
  float v16;
  _OWORD v18[4];
  int32x4_t v19;
  float32x4_t v20;

  v3 = 0;
  v4 = this[1];
  v5 = (float32x4_t)vzip1q_s32(*this, v4);
  v5.i32[2] = (__int32)this[2];
  v6 = (float32x4_t)vzip2q_s32(vzip1q_s32(*this, this[2]), vdupq_lane_s32(*(int32x2_t *)v4.i8, 1));
  v7 = (float32x4_t)vzip2q_s32(*this, v4);
  v7.i32[2] = this[2].i64[1];
  v8 = a2->columns[1];
  v9 = a2->columns[2];
  v18[0] = a2->columns[0];
  v18[1] = v8;
  v18[2] = v9;
  do
  {
    v18[v3 + 3] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, COERCE_FLOAT(v18[v3])), v6, *(float32x2_t *)&v18[v3], 1), v7, (float32x4_t)v18[v3], 2);
    ++v3;
  }
  while (v3 != 3);
  v10 = vsubq_f32(v20, (float32x4_t)vdupq_laneq_s32(v19, 2));
  v11 = v10.f32[1];
  v12 = vaddq_f32((float32x4_t)v19, (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2));
  v13 = v12.f32[1];
  if (fabsf(v12.f32[1]) >= 0.00000001)
    v14 = atanf(v10.f32[1] / v12.f32[1]);
  else
    v14 = flt_23D9A40C8[v10.f32[1] >= 0.0];
  v15 = __sincosf_stret(v14);
  if ((float)((float)(v11 * v15.__sinval) + (float)(v15.__cosval * v13)) < 0.0)
  {
    if (v14 <= 0.0)
      v16 = 3.1416;
    else
      v16 = -3.1416;
    return v14 + v16;
  }
  return v14;
}

double nis::make_rotation_orthogonal(int8x16_t *this, const simd_float3x3 *a2)
{
  int8x16_t v2;
  int8x16_t v3;
  int8x16_t v4;
  float32x4_t v6;
  __int128 v7;
  __int128 v8;

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *this;
  v3 = this[1];
  v4 = this[2];
  v6.i32[2] = this->i64[1];
  DWORD2(v7) = v3.i32[2];
  v6.i64[0] = v2.i64[0];
  *(_QWORD *)&v7 = v3.i64[0];
  DWORD2(v8) = v4.i32[2];
  *(_QWORD *)&v8 = v4.i64[0];
  return nis::make_rotation_orthogonal(&v6, a2, v2, v3);
}

void nis::GeometricFilter::local_to_global(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *f32;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD v23[4];
  _OWORD v24[4];

  bzero(&a2[4], 0x680uLL);
  v4 = 0;
  v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  v6 = a1[3];
  v7 = *a1;
  v8 = a1[1];
  a2[2] = a1[2];
  a2[3] = v6;
  v9 = a1[2];
  v10 = a1[3];
  do
  {
    v11 = 0;
    v12 = v10;
    v13 = v9;
    v14 = v8;
    v15 = v7;
    do
    {
      v16 = *((unsigned int *)&nis::FINGERS + 5 * v4 + v11);
      if ((v16 & 0x80000000) != 0)
        break;
      v17 = 0;
      f32 = (_OWORD *)a1[4 * v16].f32;
      v19 = f32[1];
      v20 = f32[2];
      v21 = f32[3];
      v23[0] = *f32;
      v23[1] = v19;
      v23[2] = v20;
      v23[3] = v21;
      do
      {
        v24[v17] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(v23[v17])), v14, *(float32x2_t *)&v23[v17], 1), v13, (float32x4_t)v23[v17], 2), v12, (float32x4_t)v23[v17], 3);
        ++v17;
      }
      while (v17 != 4);
      v15 = (float32x4_t)v24[0];
      v14 = (float32x4_t)v24[1];
      v13 = (float32x4_t)v24[2];
      v12 = (float32x4_t)v24[3];
      v22 = (_OWORD *)a2[4 * v16].f32;
      *v22 = v24[0];
      v22[1] = v14;
      v22[2] = v13;
      v22[3] = v12;
      ++v11;
    }
    while (v11 != 5);
    ++v4;
  }
  while (v4 != 6);
}

void nis::GeometricFilter::global_to_local(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD v19[4];
  _OWORD v20[4];
  simd_float4x4 v21;

  bzero(a2 + 4, 0x680uLL);
  v4 = 0;
  v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  v6 = a1[3];
  a2[2] = a1[2];
  a2[3] = v6;
  do
  {
    v7 = 0;
    for (i = 0; i != 5; ++i)
    {
      v9 = *((unsigned int *)&nis::FINGERS + 5 * v4 + i);
      if ((v9 & 0x80000000) != 0)
        break;
      v21 = __invert_f4(*(simd_float4x4 *)&a1[4 * v7]);
      v10 = 0;
      v11 = &a1[4 * v9];
      v12 = v11[1];
      v13 = v11[2];
      v14 = v11[3];
      v19[0] = *v11;
      v19[1] = v12;
      v19[2] = v13;
      v19[3] = v14;
      do
      {
        v20[v10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v21.columns[0], COERCE_FLOAT(v19[v10])), (float32x4_t)v21.columns[1], *(float32x2_t *)&v19[v10], 1), (float32x4_t)v21.columns[2], (float32x4_t)v19[v10], 2), (float32x4_t)v21.columns[3], (float32x4_t)v19[v10], 3);
        ++v10;
      }
      while (v10 != 4);
      v15 = v20[1];
      v16 = v20[2];
      v17 = v20[3];
      v18 = &a2[4 * v9];
      *v18 = v20[0];
      v18[1] = v15;
      v18[2] = v16;
      v18[3] = v17;
      v7 = v9;
    }
    ++v4;
  }
  while (v4 != 6);
}

void *nis::GeometricFilter::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const simd_float3x3 *v6;
  unint64_t i;
  int8x16_t v8;
  int8x16_t v9;
  __int128 v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  void *result;
  _OWORD v17[108];
  float32x4_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  float32x4_t v50[108];

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v5 = v2;
  bzero(v50, 0x6C0uLL);
  for (i = 0; i != 1728; i += 64)
  {
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v8 = *(int8x16_t *)(v4 + i);
    v9 = *(int8x16_t *)(v4 + i + 16);
    v10 = *(_OWORD *)(v4 + i + 32);
    v18.i32[2] = *(_QWORD *)(v4 + i + 8);
    DWORD2(v19) = v9.i32[2];
    v18.i64[0] = v8.i64[0];
    *(_QWORD *)&v19 = v9.i64[0];
    DWORD2(v20) = DWORD2(v10);
    *(_QWORD *)&v20 = v10;
    *(double *)v11.i64 = nis::make_rotation_orthogonal(&v18, v6, v8, v9);
    v11.i32[3] = 0;
    v12 = *(float32x4_t *)(v4 + i + 48);
    v13.i32[3] = 0;
    v14.i32[3] = 0;
    v15 = &v50[i / 0x10];
    *v15 = v11;
    v15[1] = v13;
    v15[2] = v14;
    v15[3] = v12;
  }
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v41 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  nis::GeometricFilter::local_to_global(v50, &v18);
  nis::GeometricFilter::filter_translations((float32x4_t *)v5, &v18);
  nis::GeometricFilter::filter_wrist_rot((simd_float4 *)v5);
  nis::GeometricFilter::fix_finger_rotations((_BYTE *)v5, v5 + 4304);
  if (!*(_BYTE *)(v5 + 1))
    nis::GeometricFilter::fix_finger_rotations((_BYTE *)v5, v5 + 6032);
  nis::GeometricFilter::global_to_local((_OWORD *)(v5 + 4304), v17);
  result = memcpy((void *)(v5 + 848), v17, 0x6C0uLL);
  if (!*(_BYTE *)(v5 + 1))
  {
    nis::GeometricFilter::global_to_local((_OWORD *)(v5 + 6032), v17);
    return memcpy((void *)(v5 + 2576), v17, 0x6C0uLL);
  }
  return result;
}

void nis::GeometricFilter::filter_translations(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t *v2;
  float32x4_t *v4;
  uint64_t v5;
  uint64_t *v6;
  float32x4_t v7;
  double v8;
  int8x16_t v9;
  __int128 v10;
  __int128 v11;
  float32x4_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  float32x4_t *v23;
  __int128 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  _BYTE __dst[64];
  uint64_t v29;

  v2 = a2;
  v29 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 269;
  memcpy(&a1[269], a2, 0x6C0uLL);
  if (!a1->i8[1])
    memcpy(&a1[377], v2, 0x6C0uLL);
  v5 = 0;
  v6 = &a1->i64[1];
  v23 = a1 + 14;
  do
  {
    v27 = v2[4 * v5 + 3];
    *(double *)v7.i64 = _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE4callERS1_f(v6[v5], &v27, -1.0);
    v10 = 0uLL;
    if (!a1->i8[1])
    {
      v25 = v7;
      *(double *)&v11 = _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE4callERS1_f(v23->i64[v5], &v27, -1.0);
      v10 = v11;
      v7 = v25;
    }
    if (!v5)
    {
      v24 = v10;
      v26 = v7;
      v12 = v2;
      v13 = *v6;
      if (*(_BYTE *)(*v6 + 692))
      {
        v14 = *(unsigned int *)(v13 + 688);
        if ((_DWORD)v14)
        {
          memcpy(__dst, (const void *)(v13 + 624), 4 * v14);
          for (i = 2; i != 28; ++i)
          {
            v16 = a1->i64[i];
            *(_DWORD *)(v16 + 688) = v14;
            memcpy((void *)(v16 + 624), __dst, 4 * v14);
            *(_BYTE *)(v16 + 693) = 1;
          }
        }
      }
      if (!a1->i8[1])
      {
        v19 = v23->i64[0];
        if (*(_BYTE *)(v23->i64[0] + 692))
        {
          v20 = *(unsigned int *)(v19 + 688);
          if ((_DWORD)v20)
          {
            memcpy(__dst, (const void *)(v19 + 624), 4 * v20);
            for (j = 0; j != 26; ++j)
            {
              v22 = a1[14].i64[j + 1];
              *(_DWORD *)(v22 + 688) = v20;
              memcpy((void *)(v22 + 624), __dst, 4 * v20);
              *(_BYTE *)(v22 + 693) = 1;
            }
          }
        }
      }
      v2 = v12;
      v6 = &a1->i64[1];
      v10 = v24;
      v7 = v26;
    }
    v17 = &v4[4 * v5];
    v7.i32[3] = v17[3].i32[3];
    v17[3] = v7;
    if (!a1->i8[1])
    {
      v18 = (uint64_t)&a1[4 * v5 + 377];
      HIDWORD(v10) = *(_DWORD *)(v18 + 60);
      *(_OWORD *)(v18 + 48) = v10;
      nis::GeometricFilter::fix_finger_bending((__int8 *)a1, v5, *(double *)v7.i64, *(double *)&v10, v8, v9);
      nis::GeometricFilter::fix_bone_length(a1, v5);
    }
    ++v5;
  }
  while (v5 != 27);
}

void nis::GeometricFilter::filter_wrist_rot(simd_float4 *this)
{
  simd_float4 v2;
  simd_float4 v3;
  int32x4_t *v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  simd_float4x4 v13;

  v2 = this[270];
  v13.columns[0] = this[269];
  v13.columns[1] = v2;
  v3 = this[272];
  v13.columns[2] = this[271];
  v13.columns[3] = v3;
  v4 = (int32x4_t *)&this[35];
  *(double *)v5.i64 = nis::RotationFilter::call((nis::RotationFilter *)&this[35], &v13);
  this[269] = v5;
  this[270] = v6;
  this[271] = v7;
  this[272] = v8;
  if (!this->i8[1])
  {
    *(double *)v9.i64 = nis::RotationFilter::predict_one(v4);
    this[377] = v9;
    this[378] = v10;
    this[379] = v11;
    this[380] = v12;
  }
}

__n128 nis::GeometricFilter::fix_finger_rotations(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  float32x4_t i;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  double rot;
  __int32 v14;
  __int32 v15;
  uint64_t v16;
  __int32 v17;
  uint64_t v18;
  const simd_float3x3 *v19;
  float v20;
  const simd_float3x3 *v21;
  __n128 result;
  __int32 v23;
  uint64_t v24;
  __int32 v25;
  uint64_t v26;
  __n128 v27;
  simd_float3 v28;
  simd_float3 v29;
  simd_float3 v30;
  simd_float3 v31;
  uint64_t v32;
  char *v34;
  float32x4_t v35;
  __n128 v36;
  __int128 v37;
  __int128 v38;
  int32x4_t v39;
  __int128 v40;
  __int128 v41;
  simd_float3x3 v42;
  float32x4_t v43[2];

  v3 = 0;
  v34 = (char *)&unk_23D9A410C;
  do
  {
    v4 = 0;
    v32 = v3;
    v5 = (_DWORD *)((char *)&nis::FINGERS + 20 * v3);
    LODWORD(v7) = *v5;
    v6 = v5[1];
    v7 = (int)v7;
    for (i = *(float32x4_t *)(a2 + ((uint64_t)(int)v7 << 6) + 48); ; i = v35)
    {
      v9 = v6;
      v10 = a2 + ((uint64_t)v6 << 6);
      v35 = *(float32x4_t *)(v10 + 48);
      v11 = vsubq_f32(v35, i);
      v43[0] = v11;
      if (*a1)
        v43[0] = vnegq_f32(v11);
      v12 = a2 + (v7 << 6);
      memset(&v42, 0, sizeof(v42));
      rot = nis::make_rot(v43);
      v42.columns[0].i32[2] = v14;
      v42.columns[1].i32[2] = v15;
      *(double *)v42.columns[0].i64 = rot;
      v42.columns[1].i64[0] = v16;
      v42.columns[2].i32[2] = v17;
      v42.columns[2].i64[0] = v18;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = *(_OWORD *)(v12 + 16);
      v36 = *(__n128 *)v12;
      v37 = *(_OWORD *)(v12 + 32);
      v39.i32[2] = *(_QWORD *)(v12 + 8);
      DWORD2(v40) = DWORD2(v38);
      v39.i64[0] = v36.n128_u64[0];
      *(_QWORD *)&v40 = v38;
      DWORD2(v41) = DWORD2(v37);
      *(_QWORD *)&v41 = v37;
      v20 = nis::roll_dist(&v39, &v42, v19);
      result.n128_f64[0] = nis::roll((float32x4_t *)&v42, v21, v20);
      v42.columns[1].i32[2] = v23;
      v42.columns[0].i64[0] = result.n128_u64[0];
      v42.columns[1].i64[0] = v24;
      v42.columns[2].i32[2] = v25;
      v42.columns[2].i64[0] = v26;
      v27 = result;
      v27.n128_u32[3] = v36.n128_u32[3];
      v28 = v42.columns[1];
      v29 = v42.columns[2];
      v30 = v42.columns[1];
      v30.i32[3] = HIDWORD(v38);
      v42.columns[0].i32[2] = result.n128_i32[2];
      *(__n128 *)v12 = v27;
      *(simd_float3 *)(v12 + 16) = v30;
      v31 = v29;
      v31.i32[3] = HIDWORD(v37);
      *(simd_float3 *)(v12 + 32) = v31;
      if (v4 == 12)
        break;
      v6 = *(_DWORD *)&v34[v4];
      if (v6 < 0)
        break;
      v4 += 4;
      v7 = v9;
    }
    result.n128_u32[3] = *(_DWORD *)(v10 + 12);
    v28.i32[3] = *(_DWORD *)(v10 + 28);
    *(__n128 *)v10 = result;
    *(simd_float3 *)(v10 + 16) = v28;
    v29.i32[3] = *(_DWORD *)(v10 + 44);
    *(simd_float3 *)(v10 + 32) = v29;
    v3 = v32 + 1;
    v34 += 20;
  }
  while (v32 != 5);
  return result;
}

double _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE4callERS1_f(uint64_t a1, float32x4_t *a2, float a3)
{
  uint32x4_t v6;
  float v7;
  uint32x4_t v8;
  float32x4_t v9;
  uint32x4_t v10;
  float v11;
  float v12;
  float v13;
  float32x4_t v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v20;
  float32x4_t v21;

  if (!*(_BYTE *)(a1 + 36))
  {
    v6 = (uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(*a2), (int8x16_t)vcgezq_f32(*a2)));
    v6.i32[3] = v6.i32[2];
    if ((vmaxvq_u32(v6) & 0x80000000) != 0)
      _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE4callERS1_f_cold_1();
  }
  *(_BYTE *)(a1 + 692) = 0;
  _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE21estimate_accelerationERKS1_(a1, (__int128 *)a2);
  if (*(_BYTE *)(a1 + 8))
  {
    *(_BYTE *)(a1 + 8) = 0;
    v8 = (uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(*a2), (int8x16_t)vcgezq_f32(*a2)));
    v8.i32[3] = v8.i32[2];
    if ((vmaxvq_u32(v8) & 0x80000000) != 0)
    {
      v9 = *(float32x4_t *)(a1 + 48);
    }
    else
    {
      *(float32x4_t *)(a1 + 48) = *a2;
      v9 = *a2;
    }
  }
  else
  {
    v10 = (uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(*a2), (int8x16_t)vcgezq_f32(*a2)));
    v10.i32[3] = v10.i32[2];
    if ((vmaxvq_u32(v10) & 0x80000000) != 0)
      *a2 = vaddq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(a1 + 64));
    _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE15calculate_thetaEff(a1, v7, a3);
    v11 = *(float *)(a1 + 696);
    v12 = 1.0 - (float)(v11 * v11);
    *(float *)(a1 + 704) = v12;
    v13 = (float)(1.0 - v11) * (float)(1.0 - v11);
    *(float *)(a1 + 708) = v13;
    if (*(_DWORD *)(a1 + 20))
    {
      v21 = vmlaq_n_f32(*(float32x4_t *)(a1 + 64), vsubq_f32(*a2, *(float32x4_t *)(a1 + 48)), v13);
      *(double *)v14.i64 = (**(double (***)(uint64_t, float32x4_t *))a1)(a1, &v21);
      v9 = vmlaq_n_f32(vaddq_f32(v14, *(float32x4_t *)(a1 + 48)), vsubq_f32(*a2, *(float32x4_t *)(a1 + 48)), *(float *)(a1 + 704));
    }
    else
    {
      v15 = 1.0 - v12;
      v16 = vmulq_n_f32(*a2, v12);
      v17 = *(float32x4_t *)(a1 + 48);
      v18 = *(float32x4_t *)(a1 + 64);
      v20 = vmlaq_n_f32(vmlaq_n_f32(v16, v17, v15), v18, v15);
      v21 = vmlaq_n_f32(vmulq_n_f32(vsubq_f32(*a2, v17), v13), v18, 1.0 - v13);
      (**(void (***)(uint64_t, float32x4_t *))a1)(a1, &v21);
      v9 = v20;
    }
    *(float32x4_t *)(a1 + 48) = v9;
    *(float32x4_t *)(a1 + 64) = v14;
  }
  return *(double *)v9.i64;
}

__int8 *nis::GeometricFilter::fix_finger_bending(__int8 *this, unsigned int a2, double a3, double a4, double a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;

  v6 = 0;
  v7 = a2 - 1;
  v8 = &nis::JOINTS_WITH_FIXED_BONE_LENGHTS;
  while (nis::JOINTS_THAT_CANNOT_BEND_BACK[v6] != (_DWORD)v7)
  {
    if (++v6 == 8)
      goto LABEL_6;
  }
  v8 = &nis::JOINTS_THAT_CANNOT_BEND_BACK[v6];
LABEL_6:
  if ((char *)v8 - (char *)nis::JOINTS_THAT_CANNOT_BEND_BACK != 32)
  {
    a6.i32[0] = 0;
    v9 = (unint64_t)&this[64 * (unint64_t)a2 + 6032];
    v11 = *(float32x4_t *)(v9 + 48);
    v10 = (float32x4_t *)(v9 + 48);
    v12 = v11;
    v13 = *(float32x4_t *)&this[64 * v7 + 6080];
    v14 = *(float32x4_t *)&this[64 * (unint64_t)(a2 - 2) + 6080];
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    v16 = vsubq_f32(vmulq_f32(vaddq_f32(v11, v14), v15), v13);
    v15.i8[0] = *this;
    v17 = vmulq_f32((float32x4_t)vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v15, a6), 0), *(int8x16_t *)&this[64 * v7 + 4320], (int8x16_t)vnegq_f32(*(float32x4_t *)&this[64 * v7 + 4320])), v16);
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0] < 0.0)
    {
      v18 = vsubq_f32(v13, v14);
      v19 = (int32x4_t)vmulq_f32(v18, v18);
      v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
      v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
      v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)));
      v22 = vmulq_n_f32(v18, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]);
      v23 = vsubq_f32(v12, v13);
      v24 = vmulq_f32(v23, v23);
      v25 = vmlaq_n_f32(v13, v22, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]));
      v25.i32[3] = v12.i32[3];
      *v10 = v25;
    }
  }
  return this;
}

void nis::GeometricFilter::fix_bone_length(float32x4_t *this, unsigned int a2)
{
  uint64_t v2;
  int *v3;
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;

  v2 = 0;
  v3 = (int *)&nis::OPTIM_THETA_SMOOTHING;
  while (nis::JOINTS_WITH_FIXED_BONE_LENGHTS[v2] != a2)
  {
    if (++v2 == 14)
      goto LABEL_6;
  }
  v3 = &nis::JOINTS_WITH_FIXED_BONE_LENGHTS[v2];
LABEL_6:
  if ((char *)v3 - (char *)nis::JOINTS_WITH_FIXED_BONE_LENGHTS != 56)
  {
    v4 = &this[4 * (unint64_t)a2 + 377];
    v6 = v4[3];
    v5 = v4 + 3;
    v14 = vsubq_f32(v6, this[4 * (unint64_t)(a2 - 1) + 380]);
    v15 = this[4 * (unint64_t)(a2 - 1) + 380];
    v7 = vmulq_f32(v14, v14);
    LODWORD(v13) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u32[0];
    v8 = sqrtf(v13);
    nis::LiveBandFilter::call((nis::LiveBandFilter *)this[27].i64[((unint64_t)((char *)v3- (char *)nis::JOINTS_WITH_FIXED_BONE_LENGHTS) >> 2)+ 1], v8);
    if (vabds_f32(v8, v9) > 0.000001)
    {
      v10 = vrsqrte_f32((float32x2_t)LODWORD(v13));
      v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)LODWORD(v13), vmul_f32(v10, v10)));
      v12 = vmlaq_n_f32(v15, vmulq_n_f32(v14, vmul_f32(v11, vrsqrts_f32((float32x2_t)LODWORD(v13), vmul_f32(v11, v11))).f32[0]), v9);
      v12.i32[3] = v5->i32[3];
      *v5 = v12;
    }
  }
}

void _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE21estimate_accelerationERKS1_(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _DWORD *v5;
  float32x4_t v6;
  uint32x4_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 693))
  {
    v4 = *(unsigned int *)(a1 + 688);
    *(_DWORD *)(a1 + 584) = v4;
    if ((_DWORD)v4)
      memmove((void *)(a1 + 520), (const void *)(a1 + 624), 4 * v4);
    *(_BYTE *)(a1 + 465) = 1;
  }
  v5 = (_DWORD *)(a1 + 96);
  if (*(_BYTE *)(a1 + 36))
  {
    *(double *)v6.i64 = _ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEE4callERKS1_((uint64_t)v5, a2);
  }
  else
  {
    *(_BYTE *)(a1 + 464) = 0;
    *(double *)v6.i64 = _ZN3nis9FIRFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEE4callERKS1_(v5, a2);
  }
  v7 = (uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v6), (int8x16_t)vcgezq_f32(v6)));
  v7.i32[3] = v7.i32[2];
  if ((vmaxvq_u32(v7) & 0x80000000) != 0)
  {
    *(_OWORD *)(a1 + 80) = 0u;
  }
  else
  {
    *(float32x4_t *)(a1 + 80) = v6;
    if (!*(_BYTE *)(a1 + 693))
    {
      if (*(_BYTE *)(a1 + 464))
      {
        v8 = *(unsigned int *)(a1 + 584);
        if ((_DWORD)v8)
          memmove((void *)(a1 + 624), (const void *)(a1 + 520), 4 * v8);
      }
      else
      {
        LODWORD(v8) = 0;
      }
      *(_DWORD *)(a1 + 688) = v8;
      *(_BYTE *)(a1 + 692) = (_DWORD)v8 != 0;
    }
    *(_BYTE *)(a1 + 693) = 0;
  }
}

void _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE15calculate_thetaEff(uint64_t a1, float a2, float a3)
{
  float v3;
  float v6;
  float v7;
  float v8;
  unsigned int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;

  v3 = a3;
  v20 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 695) = 0;
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  if (a3 < 0.0)
  {
    v3 = _ZNK3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE10interp_lutEf(a1, a2);
    if (v3 < 0.0)
    {
      v6 = *(float *)(a1 + 12) * *(float *)(a1 + 12);
      v7 = (float)(a2 * 4.0) * a2;
      if (*(_DWORD *)(a1 + 20))
        v6 = v6 * 5.0;
      else
        v7 = (float)((float)((float)(v7 * 0.0) * 0.0) * 0.0) * 0.0;
      v8 = (float)(v7 * (float)(1.0 - *(float *)(a1 + 16))) + (float)(*(float *)(a1 + 16) * v6);
      _ZNK3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE8get_polyEfPf(a1, (uint64_t)v18, a2);
      v9 = 0;
      v3 = 0.0;
      do
      {
        v10 = *(float *)(a1 + 700);
        v11 = v10 + (float)((float)v9 * 0.33333);
        if (v11 <= 1.0)
          v12 = v10 + (float)((float)v9 * 0.33333);
        else
          v12 = 1.0;
        if (v11 >= 0.0)
          v13 = v12;
        else
          v13 = 0.0;
        v14 = _ZNK3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE14newton_raphsonILi6ELi10EEEfPKff(v13, a1, (uint64_t)v18);
        if (v14 <= 1.0)
          v15 = v14;
        else
          v15 = 1.0;
        if (v14 >= 0.0)
          v16 = v15;
        else
          v16 = 0.0;
        v17 = _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE9eval_costEff(a1, v16, a2);
        if (v17 < v8)
        {
          v8 = v17;
          v3 = v16;
        }
        ++v9;
      }
      while (v9 != 4);
    }
    *(_BYTE *)(a1 + 695) = 1;
  }
  *(_DWORD *)(a1 + 700) = *(_DWORD *)(a1 + 696);
  *(float *)(a1 + 696) = v3;
}

double _ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEE4callERKS1_(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  float32x4_t v13;
  uint32x4_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  float32x4_t v19;
  const float *v20;
  unsigned int v21;
  float32x4_t v22;
  float32x4_t v23;
  int v24;
  const float *v25;
  uint64_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  _OWORD v32[4];
  _OWORD v33[16];

  *(_BYTE *)(a1 + 368) = 0;
  v3 = a1 + 16;
  v4 = *a2;
  v5 = *(_DWORD *)(a1 + 272);
  if (v5 < 0xF)
    v6 = v5 + 1;
  else
    v6 = 0;
  *(_DWORD *)(a1 + 272) = v6;
  *(_OWORD *)(v3 + 16 * v6) = v4;
  v7 = *(_DWORD *)(a1 + 276);
  if (v7 <= 0xF)
    *(_DWORD *)(a1 + 276) = v7 + 1;
  if ((_ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEE14any_nan_in_memEv((_DWORD *)a1) & 1) != 0)
  {
    memset(v33, 0, sizeof(v33));
    memset(&v32[2], 0, 32);
    v8 = *(_DWORD *)(a1 + 276);
    if (*(_DWORD *)(a1 + 364) < v8)
      v8 = *(_DWORD *)(a1 + 364);
    memset(v32, 0, 32);
    if (v8)
    {
      v9 = 0;
      v10 = 0;
      v11 = *(_DWORD *)(a1 + 272);
      do
      {
        v12 = v11 - (v9 & 0xF);
        if (v11 < (v9 & 0xFu))
          v12 += 16;
        v13 = *(float32x4_t *)(v3 + 16 * v12);
        v14 = (uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v13), (int8x16_t)vcgezq_f32(v13)));
        v14.i32[3] = v14.i32[2];
        if ((vmaxvq_u32(v14) & 0x80000000) == 0)
        {
          v33[v10] = v13;
          *((_DWORD *)v32 + v10++) = v9;
        }
        ++v9;
      }
      while (v8 != v9);
    }
    else
    {
      v10 = 0;
    }
    _ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEE19calculate_estimatorEjRNSt3__15arrayIjLm16EEE((_WORD *)a1, v10, (uint64_t)v32);
    v24 = *(_DWORD *)(a1 + 488);
    if (v24)
    {
      v19.i64[0] = 0;
      v19.i32[2] = 0;
      if (v24 == v10)
      {
        v25 = (const float *)(a1 + 424);
        v26 = v10;
        v27 = (float32x4_t *)v33;
        do
        {
          v28 = vld1q_dup_f32(v25++);
          v28.i32[3] = 0;
          v29 = *v27++;
          v30 = v29;
          v30.i32[3] = 0;
          v19.i32[3] = 0;
          v19 = vmlaq_f32(v19, v30, v28);
          --v26;
        }
        while (v26);
      }
      return *(double *)v19.i64;
    }
LABEL_32:
    v19.i64[0] = 0;
    return *(double *)v19.i64;
  }
  LODWORD(v15) = *(_DWORD *)(a1 + 276);
  v16 = *(_DWORD *)(a1 + 288);
  if (v15 >= v16)
    v15 = v16;
  else
    v15 = v15;
  if (!(_DWORD)v15)
    goto LABEL_32;
  v17 = 0;
  v18 = *(_DWORD *)(a1 + 272);
  v19.i64[0] = 0;
  v19.i32[2] = 0;
  do
  {
    v21 = v18 - (v17 & 0xF);
    if (v18 < (v17 & 0xFu))
      v21 += 16;
    v20 = (const float *)(a1 + 292 + 4 * v17);
    v22 = vld1q_dup_f32(v20);
    v22.i32[3] = 0;
    v23 = *(float32x4_t *)(v3 + 16 * v21);
    v23.i32[3] = 0;
    v19.i32[3] = 0;
    v19 = vmlaq_f32(v19, v23, v22);
    ++v17;
  }
  while (v15 != v17);
  return *(double *)v19.i64;
}

uint64_t _ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEE14any_nan_in_memEv(_DWORD *a1)
{
  unsigned int v1;
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint32x4_t v9;
  uint64_t v10;
  uint32x4_t v11;
  uint64_t v13;
  uint32x4_t v14;

  v1 = a1[69];
  if (v1 >= a1[91])
    v1 = a1[91];
  if (!v1)
    _ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEE14any_nan_in_memEv_cold_1();
  v2 = a1 + 4;
  v3 = ((_BYTE)v1 - 1) & 0xF;
  v4 = a1[68];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  LODWORD(v7) = v6 + 16;
  if (v5)
    v7 = v6;
  else
    v7 = v7;
  if (v7 <= v4)
  {
    do
    {
      v11 = (uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)&v2[4 * v7]), (int8x16_t)vcgezq_f32(*(float32x4_t *)&v2[4 * v7])));
      v11.i32[3] = v11.i32[2];
      v11.i32[0] = vmaxvq_u32(v11);
      v10 = (unsigned __int32)v11.i32[0] >> 31;
      if (v11.i32[0] < 0)
        break;
      LODWORD(v7) = v7 + 1;
    }
    while (v7 <= v4);
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = (uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)&v2[4 * v8]), (int8x16_t)vcgezq_f32(*(float32x4_t *)&v2[4 * v8])));
      v9.i32[3] = v9.i32[2];
      if ((vmaxvq_u32(v9) & 0x80000000) != 0)
        return 1;
      ++v8;
    }
    while (v8 <= v4);
    if (v7 <= 0xF)
    {
      v13 = v7 + 1;
      do
      {
        v14 = (uint32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)&a1[4 * v13]), (int8x16_t)vcgezq_f32(*(float32x4_t *)&a1[4 * v13])));
        v14.i32[3] = v14.i32[2];
        v14.i32[0] = vmaxvq_u32(v14);
        v10 = (unsigned __int32)v14.i32[0] >> 31;
        if (v14.i32[0] < 0)
          break;
      }
      while ((_DWORD)v13++ != 16);
    }
    else
    {
      return 0;
    }
  }
  return v10;
}

_WORD *_ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEE19calculate_estimatorEjRNSt3__15arrayIjLm16EEE(_WORD *result, unsigned int a2, uint64_t a3)
{
  _WORD *v3;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  float *v13;
  int v14[258];
  _DWORD v15[258];
  int v16[258];

  v3 = result;
  if (*((_BYTE *)result + 369))
  {
    result[184] = 0;
  }
  else if (*((_DWORD *)result + 90) >= a2)
  {
    *((_BYTE *)result + 368) = 0;
    *((_DWORD *)result + 122) = 0;
  }
  else
  {
    v6 = *((_DWORD *)result + 89);
    if (v6 + 1 < a2)
      v7 = (v6 + 1);
    else
      v7 = a2;
    v8 = v16;
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::Matrix(v16, a2, v7);
    v9 = 0;
    do
    {
      if ((_DWORD)v7)
      {
        v10 = -(float)*(unsigned int *)(a3 + 4 * v9);
        v11 = 1.0;
        v12 = v7;
        v13 = (float *)v8;
        do
        {
          *v13++ = v11;
          v11 = v11 * v10;
          --v12;
        }
        while (v12);
      }
      ++v9;
      v8 += 16;
    }
    while (v9 != a2);
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::transpose(v16, v14);
    nis::SVD<16u>::pinv((uint64_t)(v3 + 188), v14, v15);
    result = memcpy(v3 + 212, &v15[16 * (unint64_t)*((unsigned int *)v3 + 90)], 4 * a2);
    *((_DWORD *)v3 + 122) = a2;
    *((_BYTE *)v3 + 368) = 1;
  }
  return result;
}

void nis::SVD<16u>::pinv(uint64_t a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  float v12;
  _DWORD v13[258];
  _OWORD v14[4];
  _DWORD v15[258];
  int v16[258];

  v6 = a2[257];
  v7 = a2[256];
  if (v7 >= v6)
    v8 = v6;
  else
    v8 = v7;
  bzero(v16, 0x408uLL);
  bzero(v15, 0x408uLL);
  memset(v14, 0, sizeof(v14));
  if (nis::SVD<16u>::svd(a1, a2, v16, v14, v15, 1))
  {
    bzero(a3, 0x408uLL);
  }
  else
  {
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = v16;
      do
      {
        v11 = 0;
        v12 = 1.0 / *((float *)v14 + v9);
        do
        {
          *(float32x4_t *)&v10[v11] = vmulq_n_f32(*(float32x4_t *)&v10[v11], v12);
          v11 += 4;
        }
        while (v11 != 16);
        ++v9;
        v10 += 16;
      }
      while (v9 != v8);
    }
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::transpose(v16, v13);
    nis::matrix_inner_product<float,16u,std::plus<float>,std::multiplies<float>>((uint64_t)v15, (uint64_t)v13, a3);
  }
}

_DWORD *nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::transpose@<X0>(int *a1@<X0>, _DWORD *a2@<X8>)
{
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int *v9;
  int v10;

  result = nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::Matrix(a2, a1[257], a1[256]);
  v4 = a1[256];
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = a1[257];
    do
    {
      v7 = v6;
      v8 = result;
      v9 = a1;
      if ((_DWORD)v6)
      {
        do
        {
          v10 = *v9++;
          *v8 = v10;
          v8 += 16;
          --v7;
        }
        while (v7);
      }
      ++v5;
      a1 += 16;
      ++result;
    }
    while (v5 != v4);
  }
  return result;
}

_DWORD *nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::Matrix(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  bzero(a1, 0x400uLL);
  if (a2 >= 0x11)
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::Matrix();
  if (a3 >= 0x11)
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::Matrix();
  a1[256] = a2;
  a1[257] = a3;
  return a1;
}

uint64_t nis::SVD<16u>::svd(uint64_t a1, int *a2, _DWORD *a3, _OWORD *a4, _DWORD *a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  char *v34;
  uint64_t v35;
  signed int v37;
  void *__p[3];
  signed int v39;
  signed int v40;
  _BYTE v41[1024];
  _BYTE v42[1024];
  _BYTE v43[1024];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  bzero(v43, 0x400uLL);
  v11 = a2[256];
  v12 = a2[257];
  if ((_DWORD)v11)
  {
    v13 = 0;
    v14 = v43;
    do
    {
      v15 = a2;
      v16 = v12;
      if ((_DWORD)v12)
      {
        do
        {
          v17 = *v15++;
          *v14++ = v17;
          --v16;
        }
        while (v16);
      }
      ++v13;
      a2 += 16;
    }
    while (v13 != v11);
  }
  bzero(v42, 0x400uLL);
  bzero(v41, 0x400uLL);
  v39 = v12;
  v40 = v11;
  if ((int)v12 <= (int)v11)
    v18 = v11;
  else
    v18 = v12;
  v37 = 0;
  std::vector<float>::vector(__p, v18, &v37);
  v37 = v39;
  if (v40 >= v39)
    v19 = v39;
  else
    v19 = v40;
  if (a6)
  {
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::set_size(a3, v19, v39);
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::set_size(a5, v40, v19);
  }
  else
  {
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::set_size(a3, v39, v39);
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::set_size(a5, v40, v40);
  }
  sgesdd_NEWLAPACK();
  v20 = v40;
  if (v40)
  {
    v21 = 0;
    if (a6)
      v22 = v19;
    else
      v22 = v40;
    v23 = (int *)v41;
    do
    {
      v24 = v22;
      v25 = a5;
      if ((_DWORD)v22)
      {
        do
        {
          v26 = *v23++;
          *v25++ = v26;
          --v24;
        }
        while (v24);
      }
      ++v21;
      a5 += 16;
    }
    while (v21 != v20);
  }
  v27 = v39;
  if (a6)
    v28 = v19;
  else
    v28 = v39;
  if ((_DWORD)v28)
  {
    v29 = 0;
    v30 = (int *)v42;
    do
    {
      v31 = v27;
      v32 = a3;
      if ((_DWORD)v27)
      {
        do
        {
          v33 = *v30++;
          *v32++ = v33;
          --v31;
        }
        while (v31);
      }
      ++v29;
      a3 += 16;
    }
    while (v29 != v28);
  }
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  v34 = (char *)__p[0];
  if (v19)
  {
    v35 = 0;
    do
    {
      *(_DWORD *)((char *)a4 + v35) = *(_DWORD *)&v34[v35];
      v35 += 4;
    }
    while (4 * v19 != v35);
    goto LABEL_36;
  }
  if (__p[0])
  {
LABEL_36:
    __p[1] = v34;
    operator delete(v34);
  }
  return 0;
}

void sub_23D6A568C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *nis::matrix_inner_product<float,16u,std::plus<float>,std::multiplies<float>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v4;
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  float *v11;
  float v12;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  float v17;

  v4 = *(unsigned int *)(a1 + 1028);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 1028))
    nis::matrix_inner_product<float,16u,std::plus<float>,std::multiplies<float>>();
  result = nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::Matrix(a3, *(_DWORD *)(a1 + 1024), *(_DWORD *)(a2 + 1024));
  v7 = *(unsigned int *)(a1 + 1024);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(unsigned int *)(a2 + 1024);
    do
    {
      if ((_DWORD)v9)
      {
        for (i = 0; i != v9; ++i)
        {
          if ((_DWORD)v4)
          {
            v11 = (float *)(a2 + (i << 6));
            v12 = 0.0;
            v13 = 4 * v4;
            v14 = (float *)(a1 + (v8 << 6));
            do
            {
              v15 = *v14++;
              v16 = v15;
              v17 = *v11++;
              v12 = v12 + (float)(v16 * v17);
              v13 -= 4;
            }
            while (v13);
          }
          else
          {
            v12 = 0.0;
          }
          *(float *)&result[16 * v8 + i] = v12;
        }
      }
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

void nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::set_size(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  bzero(a1, 0x408uLL);
  if (a2 >= 0x11)
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::set_size();
  if (a3 >= 0x11)
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::set_size();
  a1[256] = a2;
  a1[257] = a3;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_23D6A582C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_250E2E488, MEMORY[0x24BEDAAF0]);
}

void sub_23D6A590C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

double _ZN3nis9FIRFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEE4callERKS1_(_DWORD *a1, __int128 *a2)
{
  _DWORD *v2;
  __int128 v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  float32x4_t v10;
  const float *v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;

  v2 = a1 + 4;
  v3 = *a2;
  v4 = a1[68];
  if (v4 < 0xF)
    v5 = v4 + 1;
  else
    v5 = 0;
  a1[68] = v5;
  *(_OWORD *)&v2[4 * v5] = v3;
  LODWORD(v6) = a1[69];
  if (v6 <= 0xF)
  {
    LODWORD(v6) = v6 + 1;
    a1[69] = v6;
  }
  v7 = a1[72];
  if (v6 >= v7)
    v6 = v7;
  else
    v6 = v6;
  if ((_DWORD)v6)
  {
    v8 = 0;
    v9 = a1[68];
    v10.i64[0] = 0;
    v10.i32[2] = 0;
    do
    {
      v12 = v9 - (v8 & 0xF);
      if (v9 < (v8 & 0xFu))
        v12 += 16;
      v11 = (const float *)&a1[v8 + 73];
      v13 = vld1q_dup_f32(v11);
      v13.i32[3] = 0;
      v14 = *(float32x4_t *)&v2[4 * v12];
      v14.i32[3] = 0;
      v10.i32[3] = 0;
      v10 = vmlaq_f32(v10, v14, v13);
      ++v8;
    }
    while (v6 != v8);
  }
  else
  {
    v10.i64[0] = 0;
  }
  return *(double *)v10.i64;
}

float _ZNK3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE10interp_lutEf(uint64_t a1, float a2)
{
  int v2;
  unint64_t v3;
  float *v4;
  float v5;
  unint64_t v6;
  float *v7;
  float *v8;
  float v9;
  char *v10;
  float result;

  if (!*(_BYTE *)(a1 + 694))
    return -1.0;
  v2 = *(_DWORD *)(a1 + 20);
  v3 = 512;
  v4 = (float *)&nis::ACC_TO_STD_RATIO;
  v5 = a2 / *(float *)(a1 + 12);
  do
  {
    v6 = v3 >> 1;
    v7 = &v4[v3 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v3 += ~(v3 >> 1);
    if (v9 < v5)
      v4 = v8;
    else
      v3 = v6;
  }
  while (v3);
  v10 = (char *)&nis::OPTIM_THETA_PREDICTION;
  if (!v2)
    v10 = (char *)&nis::OPTIM_THETA_SMOOTHING;
  if (v4 == (float *)&nis::ACC_TO_STD_RATIO)
    return *(float *)v10;
  if (v4 != (float *)&nis::OPTIM_THETA_PREDICTION)
    return *(float *)&v10[(char *)v4 - (char *)&nis::ACC_TO_STD_RATIO - 4]
         + (float)((float)(*(float *)&v10[(char *)v4 - (char *)&nis::ACC_TO_STD_RATIO]
                         - *(float *)&v10[(char *)v4 - (char *)&nis::ACC_TO_STD_RATIO - 4])
                 * (float)((float)(v5 - *(v4 - 1)) / (float)(*v4 - *(v4 - 1))));
  result = 0.00049938;
  if (v2)
    return 0.0;
  return result;
}

float _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE9eval_costEff(uint64_t a1, float a2, float a3)
{
  float v3;
  float v4;
  float v5;

  v3 = *(float *)(a1 + 12) * *(float *)(a1 + 12);
  v4 = (float)(a3 * 4.0) * a3;
  if (*(_DWORD *)(a1 + 20))
  {
    v5 = (float)((float)((float)(a2 * 4.0) + (float)(a2 * a2)) + 5.0) * (float)((float)(1.0 - a2) * v3);
  }
  else
  {
    v5 = (float)((float)((float)((float)(a2 * 3.0) + 1.0) + (float)(a2 * a2))
               + (float)((float)((float)(a2 * -5.0) * a2) * a2))
       * v3;
    v4 = (float)((float)((float)(v4 * a2) * a2) * a2) * a2;
  }
  return (float)((float)(v4
                       / (float)((float)(1.0 - a2)
                               * (float)((float)(1.0 - a2) * (float)((float)(1.0 - a2) * (float)(1.0 - a2)))))
               * (float)(1.0 - *(float *)(a1 + 16)))
       + (float)(*(float *)(a1 + 16)
               * (float)(v5 / (float)((float)(a2 + 1.0) * (float)((float)(a2 + 1.0) * (float)(a2 + 1.0)))));
}

uint64_t _ZNK3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE8get_polyEfPf(uint64_t result, uint64_t a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float32x2_t v7;
  float v8;
  float v9;
  float32_t v10;
  float v11;
  float32x4_t v12;

  v3 = *(float *)(result + 16);
  v4 = (float)(a3 * a3) * (float)(1.0 - v3);
  v5 = *(float *)(result + 12) * (float)(v3 * *(float *)(result + 12));
  if (*(_DWORD *)(result + 20))
  {
    v12.f32[0] = -v5;
    v6 = v5 * -10.0;
    v7 = vmla_n_f32(vmul_n_f32((float32x2_t)0xC20C000041F00000, v5), (float32x2_t)0x41C0000041800000, v4);
    v8 = v4 - v5;
    v9 = *(float *)(result + 12) * (float)(v3 * *(float *)(result + 12));
    v5 = (float)(v5 * 19.0) + (float)(v4 * 16.0);
    v10 = v6 + (float)(v4 * 4.0);
    v11 = v8 * 4.0;
    v12.f32[1] = v10;
    *(float32x2_t *)&v12.u32[2] = v7;
  }
  else
  {
    v9 = (float)(v4 + v5) * 4.0;
    v12 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_23D9A40A0, v5), (float32x4_t)xmmword_23D9A40B0, v4);
    v11 = -v5;
  }
  *(float *)a2 = v9;
  *(float32x4_t *)(a2 + 4) = v12;
  *(float *)(a2 + 20) = v5;
  *(float *)(a2 + 24) = v11;
  return result;
}

float _ZNK3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE14newton_raphsonILi6ELi10EEEfPKff(float a1, uint64_t a2, uint64_t a3)
{
  int v3;
  float v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float *v9;
  float v10;
  float v11;
  float v12;

  v3 = 0;
  v4 = INFINITY;
  v5 = a1;
  do
  {
    v6 = 0;
    v7 = 0.0;
    v8 = 1.0;
    v9 = (float *)(a3 + 24);
    v10 = 1.0;
    v11 = 0.0;
    do
    {
      v12 = *v9--;
      v11 = v11 + (float)(v12 * v10);
      v7 = v7 + (float)((float)(v12 * (float)v6) * v8);
      v8 = v10;
      v10 = a1 * v10;
      ++v6;
    }
    while (v6 != 7);
    a1 = a1 - (float)(v11 / v7);
    if (fabsf(v11) < fabsf(v4))
    {
      v4 = v11;
      v5 = a1;
    }
    ++v3;
  }
  while (v3 != 10);
  return v5;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_23D6A5E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_23D6A5EDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23D6A60C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_23D6A67C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_23D6A68B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23D6A6A10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23D6A6B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23D6A6C00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23D6A6D24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL hermes::kannalaRadialInverse<float>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v7;
  float v8;
  float v9;
  float v10;

  v3 = *a2;
  v4 = sqrtf((float)(a2[1] * a2[1]) + (float)(v3 * v3));
  if (v4 >= 0.000001)
  {
    v7 = 10;
    v8 = v4;
    do
    {
      v9 = v8 * v8;
      v8 = v4
         / (float)((float)((float)((float)((float)(*a1 * v9) + 1.0) + (float)(a1[1] * (float)(v9 * v9)))
                         + (float)(a1[2] * (float)(v9 * (float)(v9 * v9))))
                 + (float)(a1[3] * (float)(v9 * (float)(v9 * (float)(v9 * v9)))));
      --v7;
    }
    while (v7);
    v10 = tanf(v8) / v4;
    *a3 = v3 * v10;
    a3[1] = v10 * a2[1];
  }
  return v4 >= 0.000001;
}

BOOL hermes::kannalaRadial<float>(float *a1, float *a2, float *a3)
{
  float v3;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v15;

  v3 = a2[2];
  if (v3 >= 0.000001)
  {
    v6 = *a2;
    v5 = a2[1];
    v7 = (float)(v6 * v6) + (float)(v5 * v5);
    if (v7 >= 0.000001)
    {
      v9 = *a1;
      v10 = a1[1];
      v11 = a1[2];
      v15 = a1[3];
      v12 = sqrtf(v7);
      v13 = atan2f(v12, v3);
      v8 = (float)((float)((float)((float)(v13 + (float)(v9 * (float)(v13 * (float)(v13 * v13))))
                                 + (float)(v10 * (float)((float)(v13 * v13) * (float)(v13 * (float)(v13 * v13)))))
                         + (float)(v11
                                 * (float)((float)(v13 * v13)
                                         * (float)((float)(v13 * v13) * (float)(v13 * (float)(v13 * v13))))))
                 + (float)(v15
                         * (float)((float)(v13 * v13)
                                 * (float)((float)(v13 * v13)
                                         * (float)((float)(v13 * v13) * (float)(v13 * (float)(v13 * v13)))))))
         / v12;
    }
    else
    {
      v8 = 1.0 / v3;
    }
    *a3 = v6 * v8;
    a3[1] = v5 * v8;
  }
  return v3 >= 0.000001;
}

void sub_23D6A70AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23D6A7708(_Unwind_Exception *a1)
{
  nis::SVD<27u>::~SVD((uint64_t)&STACK[0xC60]);
  _Unwind_Resume(a1);
}

_DWORD *nis::matrix_inner_product<float,27u,std::plus<float>,std::multiplies<float>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v4;
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  float *v11;
  float v12;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  float v17;

  v4 = *(unsigned int *)(a1 + 2920);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 2920))
    nis::matrix_inner_product<float,16u,std::plus<float>,std::multiplies<float>>();
  result = nis::Matrix<float,27u,std::plus<float>,std::multiplies<float>>::Matrix(a3, *(_DWORD *)(a1 + 2916), *(_DWORD *)(a2 + 2916));
  v7 = *(unsigned int *)(a1 + 2916);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(unsigned int *)(a2 + 2916);
    do
    {
      if ((_DWORD)v9)
      {
        for (i = 0; i != v9; ++i)
        {
          if ((_DWORD)v4)
          {
            v11 = (float *)(a2 + 108 * i);
            v12 = 0.0;
            v13 = 4 * v4;
            v14 = (float *)(a1 + 108 * v8);
            do
            {
              v15 = *v14++;
              v16 = v15;
              v17 = *v11++;
              v12 = v12 + (float)(v16 * v17);
              v13 -= 4;
            }
            while (v13);
          }
          else
          {
            v12 = 0.0;
          }
          *(float *)&result[27 * v8 + i] = v12;
        }
      }
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t nis::SVD<27u>::svd()
{
  int v0;
  int v1;
  _DWORD *v2;
  _DWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  char *v33;
  uint64_t v34;
  signed int v36;
  void *__p[3];
  signed int v38;
  signed int v39;
  _BYTE v40[2916];
  _BYTE v41[2916];
  _BYTE v42[2924];

  MEMORY[0x24BDAC7A8]();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  *(_QWORD *)&v42[2916] = *MEMORY[0x24BDAC8D0];
  bzero(v42, 0xB64uLL);
  v10 = v9[729];
  v11 = v9[730];
  if ((_DWORD)v10)
  {
    v12 = 0;
    v13 = v42;
    do
    {
      v14 = v9;
      v15 = v11;
      if ((_DWORD)v11)
      {
        do
        {
          v16 = *v14++;
          *v13++ = v16;
          --v15;
        }
        while (v15);
      }
      ++v12;
      v9 += 27;
    }
    while (v12 != v10);
  }
  bzero(v41, 0xB64uLL);
  bzero(v40, 0xB64uLL);
  v38 = v11;
  v39 = v10;
  if ((int)v11 <= (int)v10)
    v17 = v10;
  else
    v17 = v11;
  v36 = 0;
  std::vector<float>::vector(__p, v17, &v36);
  v36 = v38;
  if (v39 >= v38)
    v18 = v38;
  else
    v18 = v39;
  if (v1)
  {
    nis::Matrix<float,27u,std::plus<float>,std::multiplies<float>>::set_size(v7, v18, v38);
    nis::Matrix<float,27u,std::plus<float>,std::multiplies<float>>::set_size(v3, v39, v18);
  }
  else
  {
    nis::Matrix<float,27u,std::plus<float>,std::multiplies<float>>::set_size(v7, v38, v38);
    nis::Matrix<float,27u,std::plus<float>,std::multiplies<float>>::set_size(v3, v39, v39);
  }
  sgesdd_NEWLAPACK();
  v19 = v39;
  if (v39)
  {
    v20 = 0;
    if (v1)
      v21 = v18;
    else
      v21 = v39;
    v22 = (int *)v40;
    do
    {
      v23 = v21;
      v24 = v3;
      if ((_DWORD)v21)
      {
        do
        {
          v25 = *v22++;
          *v24++ = v25;
          --v23;
        }
        while (v23);
      }
      ++v20;
      v3 += 27;
    }
    while (v20 != v19);
  }
  v26 = v38;
  if (v1)
    v27 = v18;
  else
    v27 = v38;
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = (int *)v41;
    do
    {
      v30 = v26;
      v31 = v7;
      if ((_DWORD)v26)
      {
        do
        {
          v32 = *v29++;
          *v31++ = v32;
          --v30;
        }
        while (v30);
      }
      ++v28;
      v7 += 27;
    }
    while (v28 != v27);
  }
  *(_OWORD *)((char *)v5 + 92) = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  v33 = (char *)__p[0];
  if (v18)
  {
    v34 = 0;
    do
    {
      *(_DWORD *)((char *)v5 + v34) = *(_DWORD *)&v33[v34];
      v34 += 4;
    }
    while (4 * v18 != v34);
    goto LABEL_36;
  }
  if (__p[0])
  {
LABEL_36:
    __p[1] = v33;
    operator delete(v33);
  }
  return 0;
}

void sub_23D6A7B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nis::SVD<27u>::~SVD(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

_DWORD *nis::Matrix<float,27u,std::plus<float>,std::multiplies<float>>::Matrix(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  bzero(a1, 0xB64uLL);
  if (a2 >= 0x1C)
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::Matrix();
  if (a3 >= 0x1C)
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::Matrix();
  a1[729] = a2;
  a1[730] = a3;
  return a1;
}

uint64_t nis::SVD<27u>::SVD(uint64_t a1)
{
  float v2;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  std::vector<int>::value_type __x[2];

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  __x[0] = 0;
  __x[1] = 27;
  std::vector<int>::resize((std::vector<int> *)(a1 + 24), 0xD8uLL, __x);
  v12 = 27;
  __x[0] = 27;
  v11 = 27;
  v10 = 0;
  v9 = -1;
  v8 = 65;
  v7 = 0;
  v6 = 0;
  v5 = 0;
  sgesdd_NEWLAPACK();
  v2 = log2f(*((float *)&v10 + 1));
  HIDWORD(v10) = exp2f(ceilf(v2 + 1.0));
  v4 = 0;
  std::vector<float>::resize(a1, (unint64_t)*((float *)&v10 + 1), &v4);
  return a1;
}

void sub_23D6A7CE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v7;
  int *value;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<int>::size_type v16;
  int *v17;
  int *v18;
  int *v19;
  std::vector<int>::size_type v20;
  int *v21;
  int *v22;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer i;
  int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void nis::Matrix<float,27u,std::plus<float>,std::multiplies<float>>::set_size(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  bzero(a1, 0xB6CuLL);
  if (a2 >= 0x1C)
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::set_size();
  if (a3 >= 0x1C)
    nis::Matrix<float,16u,std::plus<float>,std::multiplies<float>>::set_size();
  a1[729] = a2;
  a1[730] = a3;
}

void sub_23D6A80B4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x242637F54](v2, 0x1020C406E9D67A2);

  _Unwind_Resume(a1);
}

void sub_23D6A8498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::convertToMonoPoseEncodingData(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  id v12;
  id v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  id v33;
  id v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  id v41;
  id v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  id v48;
  id v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  id v55;

  v55 = a1;
  objc_msgSend(v55, "pose");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "length") != 140)
    __assert_rtn("copyNSDataToStdArray", "MonoPoseEstimatorWrapper.mm", 21, "dataIn.length == dataLen");
  v4 = objc_retainAutorelease(v3);
  v5 = (_OWORD *)objc_msgSend(v4, "bytes");
  *(_OWORD *)a2 = *v5;
  v6 = v5[1];
  v7 = v5[2];
  v8 = v5[4];
  *(_OWORD *)(a2 + 48) = v5[3];
  *(_OWORD *)(a2 + 64) = v8;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  v9 = v5[5];
  v10 = v5[6];
  v11 = v5[7];
  *(_OWORD *)(a2 + 124) = *(_OWORD *)((char *)v5 + 124);
  *(_OWORD *)(a2 + 96) = v10;
  *(_OWORD *)(a2 + 112) = v11;
  *(_OWORD *)(a2 + 80) = v9;

  objc_msgSend(v55, "poseStdDev");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "length") != 140)
    __assert_rtn("copyNSDataToStdArray", "MonoPoseEstimatorWrapper.mm", 21, "dataIn.length == dataLen");
  v13 = objc_retainAutorelease(v12);
  v14 = (_OWORD *)objc_msgSend(v13, "bytes");
  *(_OWORD *)(a2 + 140) = *v14;
  v15 = v14[1];
  v16 = v14[2];
  v17 = v14[4];
  *(_OWORD *)(a2 + 188) = v14[3];
  *(_OWORD *)(a2 + 204) = v17;
  *(_OWORD *)(a2 + 156) = v15;
  *(_OWORD *)(a2 + 172) = v16;
  v18 = v14[5];
  v19 = v14[6];
  v20 = v14[7];
  *(_OWORD *)(a2 + 264) = *(_OWORD *)((char *)v14 + 124);
  *(_OWORD *)(a2 + 236) = v19;
  *(_OWORD *)(a2 + 252) = v20;
  *(_OWORD *)(a2 + 220) = v18;

  objc_msgSend(v55, "wristRotation");
  v21 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v21, "length") != 16)
    __assert_rtn("copyNSDataToStdArray", "MonoPoseEstimatorWrapper.mm", 21, "dataIn.length == dataLen");
  v22 = objc_retainAutorelease(v21);
  *(_OWORD *)(a2 + 280) = *(_OWORD *)objc_msgSend(v22, "bytes");

  objc_msgSend(v55, "wristRotationStdDev");
  v23 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v23, "length") != 4)
    __assert_rtn("copyNSDataToStdArray", "MonoPoseEstimatorWrapper.mm", 21, "dataIn.length == dataLen");
  v24 = objc_retainAutorelease(v23);
  *(_DWORD *)(a2 + 296) = *(_DWORD *)objc_msgSend(v24, "bytes");

  objc_msgSend(v55, "boneScale");
  v25 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v25, "length") != 108)
    __assert_rtn("copyNSDataToStdArray", "MonoPoseEstimatorWrapper.mm", 21, "dataIn.length == dataLen");
  v26 = objc_retainAutorelease(v25);
  v27 = (__int128 *)objc_msgSend(v26, "bytes");
  v28 = *v27;
  v29 = v27[2];
  *(_OWORD *)(a2 + 316) = v27[1];
  *(_OWORD *)(a2 + 332) = v29;
  *(_OWORD *)(a2 + 300) = v28;
  v30 = v27[3];
  v31 = v27[4];
  v32 = v27[5];
  *(_OWORD *)(a2 + 392) = *(__int128 *)((char *)v27 + 92);
  *(_OWORD *)(a2 + 364) = v31;
  *(_OWORD *)(a2 + 380) = v32;
  *(_OWORD *)(a2 + 348) = v30;

  objc_msgSend(v55, "boneScaleStdDev");
  v33 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v33, "length") != 108)
    __assert_rtn("copyNSDataToStdArray", "MonoPoseEstimatorWrapper.mm", 21, "dataIn.length == dataLen");
  v34 = objc_retainAutorelease(v33);
  v35 = (__int128 *)objc_msgSend(v34, "bytes");
  v36 = *v35;
  v37 = v35[2];
  *(_OWORD *)(a2 + 424) = v35[1];
  *(_OWORD *)(a2 + 440) = v37;
  *(_OWORD *)(a2 + 408) = v36;
  v38 = v35[3];
  v39 = v35[4];
  v40 = v35[5];
  *(_OWORD *)(a2 + 500) = *(__int128 *)((char *)v35 + 92);
  *(_OWORD *)(a2 + 472) = v39;
  *(_OWORD *)(a2 + 488) = v40;
  *(_OWORD *)(a2 + 456) = v38;

  objc_msgSend(v55, "uvdJoints");
  v41 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v41, "length") != 96)
    __assert_rtn("copyNSDataToStdArray", "MonoPoseEstimatorWrapper.mm", 21, "dataIn.length == dataLen");
  v42 = objc_retainAutorelease(v41);
  v43 = (_OWORD *)objc_msgSend(v42, "bytes");
  v44 = v43[1];
  *(_OWORD *)(a2 + 516) = *v43;
  *(_OWORD *)(a2 + 532) = v44;
  v45 = v43[2];
  v46 = v43[3];
  v47 = v43[5];
  *(_OWORD *)(a2 + 580) = v43[4];
  *(_OWORD *)(a2 + 596) = v47;
  *(_OWORD *)(a2 + 548) = v45;
  *(_OWORD *)(a2 + 564) = v46;

  objc_msgSend(v55, "uvdJointsStdDev");
  v48 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v48, "length") != 96)
    __assert_rtn("copyNSDataToStdArray", "MonoPoseEstimatorWrapper.mm", 21, "dataIn.length == dataLen");
  v49 = objc_retainAutorelease(v48);
  v50 = (_OWORD *)objc_msgSend(v49, "bytes");
  v51 = v50[1];
  *(_OWORD *)(a2 + 612) = *v50;
  *(_OWORD *)(a2 + 628) = v51;
  v52 = v50[2];
  v53 = v50[3];
  v54 = v50[5];
  *(_OWORD *)(a2 + 676) = v50[4];
  *(_OWORD *)(a2 + 692) = v54;
  *(_OWORD *)(a2 + 644) = v52;
  *(_OWORD *)(a2 + 660) = v53;

}

void sub_23D6A8970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23D6A8B28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::default_delete<MonoPoseEstimator>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 6248);
    *(_QWORD *)(a2 + 6248) = 0;
    if (v3)
      MEMORY[0x242637F54](v3, 0x1000C40EAE168CDLL);
    v4 = *(_QWORD *)(a2 + 6240);
    *(_QWORD *)(a2 + 6240) = 0;
    if (v4)
      MEMORY[0x242637F54](v4, 0x1000C40EAE168CDLL);
    JUMPOUT(0x242637F54);
  }
}

void sub_23D6A8CBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23D6A8E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23D6A8F5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23D6A904C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23D6A9100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23D6A9174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void nis::LiveBandFilter::call(nis::LiveBandFilter *this, float a2)
{
  nis::MedianFilter::call((nis::LiveBandFilter *)((char *)this + 8), a2);
}

void sub_23D6A93A4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x242637F54](v2, 0x1020C40D4355A03);

  _Unwind_Resume(a1);
}

void nis::GeometricFilter::clear(nis::GeometricFilter *this, uint64_t a2)
{
  char *v2;
  uint64_t i;
  uint64_t v4;
  _QWORD *v5;
  uint64_t j;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t k;
  uint64_t m;
  _QWORD *v12;
  _QWORD *v13;
  _WORD v14[280];
  _BYTE v15[7200];
  uint64_t v16;

  v2 = (char *)MEMORY[0x24BDAC7A8](this, a2);
  v16 = *MEMORY[0x24BDAC8D0];
  nis::GeometricFilter::GeometricFilter((nis::GeometricFilter *)v14, *v2, v2[1], 30.0);
  *(_WORD *)v2 = v14[0];
  for (i = 4; i != 112; i += 4)
  {
    v4 = *(_QWORD *)&v14[i];
    *(_QWORD *)&v14[i] = 0;
    v5 = *(_QWORD **)&v2[i * 2];
    *(_QWORD *)&v2[i * 2] = v4;
    if (v5)
      _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_((uint64_t)&v2[i * 2], v5);
  }
  for (j = 112; j != 220; j += 4)
  {
    v7 = *(_QWORD *)&v14[j];
    *(_QWORD *)&v14[j] = 0;
    v8 = *(_QWORD **)&v2[j * 2];
    *(_QWORD *)&v2[j * 2] = v7;
    if (v8)
      _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_((uint64_t)&v2[j * 2], v8);
  }
  do
  {
    v9 = *(_QWORD *)&v14[j];
    *(_QWORD *)&v14[j] = 0;
    std::unique_ptr<nis::LiveBandFilter>::reset[abi:ne180100]((uint64_t *)&v2[j * 2], v9);
    j += 4;
  }
  while (j != 276);
  memcpy(v2 + 560, v15, 0x1C20uLL);
  for (k = 272; k != 216; k -= 4)
    std::unique_ptr<nis::LiveBandFilter>::reset[abi:ne180100]((uint64_t *)&v14[k], 0);
  for (m = 216; m != 108; m -= 4)
  {
    v12 = *(_QWORD **)&v14[m];
    *(_QWORD *)&v14[m] = 0;
    if (v12)
      _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_((uint64_t)&v14[m], v12);
  }
  do
  {
    v13 = *(_QWORD **)&v14[m];
    *(_QWORD *)&v14[m] = 0;
    if (v13)
      _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_((uint64_t)&v14[m], v13);
    m -= 4;
  }
  while (m * 2);
}

nis::GeometricFilter *nis::GeometricFilter::GeometricFilter(nis::GeometricFilter *this, char a2, char a3, float a4)
{
  char *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t i;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t j;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t k;
  uint64_t v22;
  _QWORD *v24;

  *(_BYTE *)this = a2;
  *((_BYTE *)this + 1) = a3;
  v7 = (char *)this + 224;
  bzero((char *)this + 8, 0x220uLL);
  v8 = MEMORY[0x24BDAEE00];
  v9 = *MEMORY[0x24BDAEE00];
  v10 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  *((_OWORD *)this + 35) = *MEMORY[0x24BDAEE00];
  *((_OWORD *)this + 36) = v10;
  v11 = *(_OWORD *)(v8 + 32);
  v12 = *(_OWORD *)(v8 + 48);
  *((_OWORD *)this + 37) = v11;
  *((_OWORD *)this + 38) = v12;
  *((_OWORD *)this + 39) = v9;
  *((_OWORD *)this + 40) = v10;
  *((_OWORD *)this + 41) = v11;
  *((_OWORD *)this + 42) = v12;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 95) = 0;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_DWORD *)this + 184) = 0;
  *((_BYTE *)this + 752) = 1;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_BYTE *)this + 784) = 1;
  *((_QWORD *)this + 100) = 0;
  *((_QWORD *)this + 101) = 0;
  *((float *)this + 172) = 2.0 / a4;
  *((_DWORD *)this + 173) = 1036831949;
  *((float *)this + 174) = 6.0 / a4;
  *((float *)this + 204) = a4;
  *(_OWORD *)((char *)this + 820) = xmmword_23D9A5AE0;
  bzero((char *)this + 848, 0x1B00uLL);
  for (i = 8; i != 224; i += 8)
  {
    v14 = operator new();
    _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEEC2Efjfbjjj(v14, 0, 0, 14, 3, 2, 0.015, 0.5);
    v24 = 0;
    v15 = *(_QWORD **)((char *)this + i);
    *(_QWORD *)((char *)this + i) = v14;
    if (v15)
    {
      _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_((uint64_t)this + i, v15);
      v16 = v24;
      v24 = 0;
      if (v16)
        _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_((uint64_t)&v24, v16);
    }
  }
  if ((a3 & 1) == 0)
  {
    for (j = 0; j != 216; j += 8)
    {
      v18 = operator new();
      _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEEC2Efjfbjjj(v18, 1u, 0, 14, 3, 2, 0.015, 0.1);
      v24 = 0;
      v19 = *(_QWORD **)&v7[j];
      *(_QWORD *)&v7[j] = v18;
      if (v19)
      {
        _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_((uint64_t)&v7[j], v19);
        v20 = v24;
        v24 = 0;
        if (v20)
          _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_((uint64_t)&v24, v20);
      }
    }
    for (k = 0; k != 112; k += 8)
    {
      v22 = operator new();
      *(_DWORD *)v22 = 990057071;
      *(_QWORD *)(v22 + 4) = 0xB0000000BLL;
      *(_DWORD *)(v22 + 12) = 0;
      *(_QWORD *)(v22 + 16) = v22 + 16;
      *(_QWORD *)(v22 + 24) = v22 + 16;
      *(_OWORD *)(v22 + 32) = 0u;
      *(_OWORD *)(v22 + 48) = 0u;
      *(_OWORD *)(v22 + 64) = 0u;
      *(_OWORD *)(v22 + 80) = 0u;
      *(_QWORD *)(v22 + 96) = 0;
      *(_QWORD *)(v22 + 104) = 15;
      std::unique_ptr<nis::LiveBandFilter>::reset[abi:ne180100]((uint64_t *)((char *)this + k + 440), v22);
    }
  }
  return this;
}

void sub_23D6A9890(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  for (i = 0; i != -112; i -= 8)
    std::unique_ptr<nis::LiveBandFilter>::reset[abi:ne180100]((uint64_t *)(v1 + 544 + i), 0);
  v4 = 432;
  while (1)
  {
    v5 = *(_QWORD **)(v1 + v4);
    *(_QWORD *)(v1 + v4) = 0;
    if (v5)
      _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_(v1 + v4, v5);
    v4 -= 8;
    if (v4 == 216)
    {
      while (1)
      {
        v6 = *(_QWORD **)(v1 + v4);
        *(_QWORD *)(v1 + v4) = 0;
        if (v6)
          _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_(v1 + v4, v6);
        v4 -= 8;
        if (!v4)
          _Unwind_Resume(a1);
      }
    }
  }
}

uint64_t _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEEC2Efjfbjjj(uint64_t a1, unsigned int a2, char a3, int a4, int a5, int a6, float a7, float a8)
{
  *(_QWORD *)a1 = &unk_250E2F068;
  *(_BYTE *)(a1 + 8) = 1;
  *(float *)(a1 + 12) = a7;
  *(float *)(a1 + 16) = a8;
  *(_DWORD *)(a1 + 20) = a2;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_BYTE *)(a1 + 36) = a3;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  _ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEEC2Ejjj(a1 + 96, a4, a5, a6);
  *(_BYTE *)(a1 + 592) = 1;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 696) = xmmword_23D9A5AF0;
  if (a2 >= 2)
    __assert_rtn("OneShekelFilter", "OneShekelFilter.hpp", 71, "num_samples_ahead <= 1");
  *(_QWORD *)(a1 + 704) = 0x3E8000003F400000;
  *(_BYTE *)(a1 + 694) = fabsf(a8 + -0.5) <= (float)((float)((float)(fabsf(a8) * 0.5) + 0.25) * 0.00000011921);
  return a1;
}

void sub_23D6A9A3C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  _ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEED1Ev(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEED1Ev(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &unk_250E2F090;
  v2 = (void *)a1[50];
  if (v2)
  {
    a1[51] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[47];
  if (v3)
  {
    a1[48] = v3;
    operator delete(v3);
  }
  return a1;
}

__n128 _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEE15adjust_velocityERKS1_(uint64_t a1, uint64_t a2)
{
  return *(__n128 *)a2;
}

uint64_t _ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEEC2Ejjj(uint64_t a1, int a2, int a3, int a4)
{
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v18;
  int v19;
  _OWORD v20[4];

  *(_DWORD *)(a1 + 288) = a2;
  v8 = (void *)(a1 + 292);
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 15;
  *(_QWORD *)a1 = &unk_250E2F090;
  *(_DWORD *)(a1 + 356) = a3;
  *(_DWORD *)(a1 + 360) = a4;
  *(_DWORD *)(a1 + 364) = a2;
  *(_WORD *)(a1 + 368) = 0;
  nis::SVD<16u>::SVD(a1 + 376);
  *(_DWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  v9 = *(_DWORD *)(a1 + 356);
  v10 = *(unsigned int *)(a1 + 364);
  if (v9 >= v10)
  {
    v18 = "_order < _len";
    v19 = 66;
    goto LABEL_20;
  }
  if (*(_DWORD *)(a1 + 360) > v9)
  {
    v18 = "_dest_pow <= _order";
    v19 = 67;
    goto LABEL_20;
  }
  if (v10 >= 0x11)
  {
    v18 = "_len <= mem_size";
    v19 = 68;
LABEL_20:
    __assert_rtn("SGFilter", "SGFilter.hpp", v19, v18);
  }
  if (a2 == 14 && a4 == 2)
  {
    v11 = *(unsigned int *)(a1 + 288);
    if (a3 == 3)
    {
      if ((_DWORD)v11)
      {
        v12 = 4 * v11;
        v13 = &unk_23D9A5B58;
LABEL_15:
        memcpy(v8, v13, v12);
      }
    }
    else if ((_DWORD)v11)
    {
      v12 = 4 * v11;
      v13 = &unk_23D9A5B90;
      goto LABEL_15;
    }
  }
  else
  {
    v14 = 0;
    memset(v20, 0, sizeof(v20));
    v15 = 4 * v10;
    do
    {
      *((_DWORD *)v20 + v14) = v14;
      ++v14;
      v15 -= 4;
    }
    while (v15);
    _ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEE19calculate_estimatorEjRNSt3__15arrayIjLm16EEE((_WORD *)a1, v10, (uint64_t)v20);
    v16 = *(unsigned int *)(a1 + 288);
    if ((_DWORD)v16)
      memmove(v8, (const void *)(a1 + 424), 4 * v16);
  }
  return a1;
}

void sub_23D6A9C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  nis::SVD<27u>::~SVD(v1);
  _Unwind_Resume(a1);
}

void _ZN3nis8SGFilterIDv3_fLj16ENS_15FilterUtilitiesIS1_Lj16EEEED0Ev(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &unk_250E2F090;
  v2 = (void *)a1[50];
  if (v2)
  {
    a1[51] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[47];
  if (v3)
  {
    a1[48] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x242637F54);
}

uint64_t nis::SVD<16u>::SVD(uint64_t a1)
{
  float v2;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  std::vector<int>::value_type __x[2];

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  __x[0] = 0;
  __x[1] = 16;
  std::vector<int>::resize((std::vector<int> *)(a1 + 24), 0x80uLL, __x);
  v12 = 16;
  __x[0] = 16;
  v11 = 16;
  v10 = 0;
  v9 = -1;
  v8 = 65;
  v7 = 0;
  v6 = 0;
  v5 = 0;
  sgesdd_NEWLAPACK();
  v2 = log2f(*((float *)&v10 + 1));
  HIDWORD(v10) = exp2f(ceilf(v2 + 1.0));
  v4 = 0;
  std::vector<float>::resize(a1, (unint64_t)*((float *)&v10 + 1), &v4);
  return a1;
}

void sub_23D6A9DE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    *a2 = &unk_250E2F068;
    a2[12] = &unk_250E2F090;
    v3 = (void *)a2[62];
    if (v3)
    {
      a2[63] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[59];
    if (v4)
    {
      a2[60] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x242637F54);
  }
}

_QWORD *std::__list_imp<float>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t *std::unique_ptr<nis::LiveBandFilter>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__list_imp<float>::clear((_QWORD *)(v2 + 16));
    JUMPOUT(0x242637F54);
  }
  return result;
}

void std::default_delete<nis::GeometricFilter>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    for (i = 544; i != 432; i -= 8)
      std::unique_ptr<nis::LiveBandFilter>::reset[abi:ne180100]((uint64_t *)(a2 + i), 0);
    while (1)
    {
      v4 = *(_QWORD **)(a2 + i);
      *(_QWORD *)(a2 + i) = 0;
      if (v4)
        _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_(a2 + i, v4);
      i -= 8;
      if (i == 216)
      {
        while (1)
        {
          v5 = *(_QWORD **)(a2 + i);
          *(_QWORD *)(a2 + i) = 0;
          if (v5)
            _ZNKSt3__114default_deleteIN3nis15OneShekelFilterIDv3_fNS1_15FilterUtilitiesIS3_Lj16EEEEEEclB8ne180100EPS6_(a2 + i, v5);
          i -= 8;
          if (!i)
            JUMPOUT(0x242637F54);
        }
      }
    }
  }
}

float nis::MedianFilter::pushToMem(nis::MedianFilter *this, float a2)
{
  char *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  float *v16;
  float result;
  uint64_t v18;
  int v19;
  float v20;
  char v21;
  char v22;

  v20 = a2;
  v3 = (char *)this + 32;
  v4 = *((_DWORD *)this + 24);
  v5 = *((_DWORD *)this + 25);
  if (v4 < 0xF)
    v6 = v4 + 1;
  else
    v6 = 0;
  *((_DWORD *)this + 24) = v6;
  *(float *)&v3[4 * v6] = a2;
  if (v5 <= 0xF)
    *((_DWORD *)this + 25) = v5 + 1;
  if (*((_DWORD *)this + 1) >= *(_DWORD *)this)
  {
    v7 = *((_DWORD *)this + 1) & 0xF;
    v8 = v6 >= v7;
    v9 = v6 - v7;
    if (!v8)
      v9 += 16;
    v19 = *(_DWORD *)&v3[4 * v9];
    v10 = (char *)this + 8;
    v11 = *((_QWORD *)this + 2);
    v21 = 0;
    v12 = (uint64_t *)std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__list_iterator<float,void *>,std::__list_iterator<float,void *>,float,std::__identity,std::__less<void,void>>(v11, (uint64_t)v10, (float *)&v19);
    v13 = *v12;
    *(_QWORD *)(v13 + 8) = v12[1];
    *(_QWORD *)v12[1] = v13;
    --*((_QWORD *)this + 3);
    operator delete(v12);
    --*((_DWORD *)this + 1);
  }
  v14 = *((_QWORD *)this + 2);
  v22 = 0;
  v15 = (uint64_t *)std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__list_iterator<float,void *>,std::__list_iterator<float,void *>,float,std::__identity,std::__less<void,void>>(v14, (uint64_t)this + 8, &v20);
  v16 = (float *)operator new(0x18uLL);
  result = v20;
  v16[4] = v20;
  v18 = *v15;
  *(_QWORD *)(v18 + 8) = v16;
  *(_QWORD *)v16 = v18;
  *v15 = (uint64_t)v16;
  *((_QWORD *)v16 + 1) = v15;
  ++*((_QWORD *)this + 3);
  ++*((_DWORD *)this + 1);
  return result;
}

float nis::MedianFilter::getMedian(nis::MedianFilter *this)
{
  float *v1;
  float result;
  unsigned int v3;
  float *v4;
  float *v5;
  unsigned int v6;

  v1 = (float *)*((_QWORD *)this + 2);
  result = 0.0;
  if (v1 != (float *)((char *)this + 8))
  {
    v3 = *((_DWORD *)this + 1);
    if (v3 >= 2)
    {
      v6 = v3 >> 1;
      while (1)
      {
        v4 = (float *)*((_QWORD *)v1 + 1);
        if (v4 == (float *)((char *)this + 8))
          break;
        v5 = v1;
        v1 = (float *)*((_QWORD *)v1 + 1);
        if (!--v6)
          goto LABEL_7;
      }
    }
    else
    {
      v4 = (float *)*((_QWORD *)this + 2);
      v5 = (float *)((char *)this + 8);
LABEL_7:
      result = v4[4];
      if ((v3 & 1) == 0)
        return (float)(result + v5[4]) * 0.5;
    }
  }
  return result;
}

float nis::MedianFilter::call(nis::MedianFilter *this, float a2)
{
  nis::MedianFilter::pushToMem(this, a2);
  return nis::MedianFilter::getMedian(this);
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__list_iterator<float,void *>,std::__list_iterator<float,void *>,float,std::__identity,std::__less<void,void>>(uint64_t result, uint64_t a2, float *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (result != a2)
  {
    v3 = 0;
    v4 = result;
    do
    {
      ++v3;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a2);
    do
    {
      v5 = v3 >> 1;
      v6 = result;
      if (v3 != 1)
      {
        v7 = v5 + 1;
        v6 = result;
        do
        {
          v6 = *(_QWORD *)(v6 + 8);
          --v7;
        }
        while (v7 > 1);
      }
      if (*(float *)(v6 + 16) < *a3)
      {
        result = *(_QWORD *)(v6 + 8);
        v5 = v3 + ~v5;
      }
      v3 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t MonoPoseEstimator::MonoPoseEstimator(uint64_t a1, __int128 *a2, char a3, char a4, float a5)
{
  _BYTE *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v10 = (_BYTE *)(a1 + 6236);
  Kalman3d::Kalman3d((Kalman3d *)(a1 + 352), 1.0e-11, 0.95, 0.001, 0.95);
  KalmanQuat::KalmanQuat((KalmanQuat *)(a1 + 1280), 0.00001, 0.75, 0.75);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 1440), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 1568), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 1696), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 1824), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 1952), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 2080), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 2208), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 2336), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 2464), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 2592), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 2720), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 2848), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 2976), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 3104), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 3232), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 3360), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 3488), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 3616), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 3744), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 3872), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 4000), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 4128), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 4256), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 4384), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 4512), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 4640), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 4768), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 4896), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 5024), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 5152), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 5280), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 5408), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 5536), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 5664), 0.00000001, 0.95, 0.95);
  Kalman1d::Kalman1d((Kalman1d *)(a1 + 5792), 0.00000001, 0.95, 0.95);
  *(float *)(a1 + 5920) = a5;
  *(_DWORD *)(a1 + 5924) = 1065353216;
  v11 = *a2;
  v12 = a2[1];
  *(_OWORD *)(a1 + 6160) = a2[2];
  *(_OWORD *)(a1 + 6144) = v12;
  *(_OWORD *)(a1 + 6128) = v11;
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  *(_OWORD *)(a1 + 6220) = *(__int128 *)((char *)a2 + 92);
  *(_OWORD *)(a1 + 6208) = v15;
  *(_OWORD *)(a1 + 6192) = v14;
  *(_OWORD *)(a1 + 6176) = v13;
  *v10 = a3;
  *(_OWORD *)(a1 + 6240) = 0u;
  v10[20] = a4;
  memset_pattern16((void *)(a1 + 5928), &unk_23D9A5C70, 0x64uLL);
  memset_pattern16((void *)(a1 + 6028), &unk_23D9A5C70, 0x64uLL);
  MonoPoseEstimator::reset((MonoPoseEstimator *)a1);
  return a1;
}

void sub_23D6AA604(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 6248);
  *(_QWORD *)(v1 + 6248) = 0;
  if (v4)
    MEMORY[0x242637F54](v4, 0x1000C40EAE168CDLL);
  MonoPoseEstimator::MonoPoseEstimator(v2);
  _Unwind_Resume(a1);
}

uint64_t MonoPoseEstimator::reset(MonoPoseEstimator *this)
{
  Kalman1d *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t result;

  *(_OWORD *)this = xmmword_23D9A3E90;
  Kalman3d::reset((Kalman3d *)((char *)this + 352));
  KalmanQuat::reset((KalmanQuat *)((char *)this + 1280));
  v2 = (Kalman1d *)((char *)this + 1440);
  v3 = 4480;
  do
  {
    v4 = (__n128)Kalman1d::reset(v2);
    v2 = (Kalman1d *)((char *)v2 + 128);
    v3 -= 128;
  }
  while (v3);
  v5 = *((_QWORD *)this + 780);
  *((_QWORD *)this + 780) = 0;
  if (v5)
    MEMORY[0x242637F54](v5, 0x1000C40EAE168CDLL, v4);
  result = *((_QWORD *)this + 781);
  *((_QWORD *)this + 781) = 0;
  if (result)
    JUMPOUT(0x242637F54);
  return result;
}

double MonoPoseEstimator::predict(MonoPoseEstimator *this, float a2)
{
  Kalman1d *v3;
  uint64_t v4;
  double result;

  v3 = (Kalman1d *)((char *)this + 1440);
  v4 = 4480;
  do
  {
    Kalman1d::predict(v3);
    v3 = (Kalman1d *)((char *)v3 + 128);
    v4 -= 128;
  }
  while (v4);
  KalmanQuat::predict((float32x4_t *)this + 80);
  *(_QWORD *)&result = Kalman3d::predict((float32x4_t *)this + 22).u64[0];
  return result;
}

double MonoPoseEstimator::processMonoRotation(uint64_t a1, float32x4_t *a2, _OWORD *a3)
{
  float32x4_t v3;
  int8x16_t v4;
  float32x2_t v5;
  float32x4_t v6;
  unsigned __int32 v7;
  float32x2_t v8;
  float32x2_t v9;
  uint64_t v10;
  float v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  float v15;
  float v17;
  float v18;
  float v19;
  float32x2_t v20;
  float32x2_t v21;
  unsigned __int32 v22;
  unsigned __int32 v23;
  float v24;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  float v29;
  unsigned int v30;
  float32x2_t v31;
  float32x2_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32x2_t v40;
  float32x2_t v41;
  int32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  double result;
  _OWORD v47[4];
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;

  v3 = *a2;
  v4 = (int8x16_t)vmulq_f32(v3, v3);
  v5 = vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
  v6 = (float32x4_t)xmmword_23D9A3E90;
  if (vaddv_f32(v5) != 0.0)
  {
    v7 = vadd_f32(v5, (float32x2_t)vdup_lane_s32((int32x2_t)v5, 1)).u32[0];
    v8 = vrsqrte_f32((float32x2_t)v7);
    v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7, vmul_f32(v8, v8)));
    v6 = vmulq_n_f32(v3, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7, vmul_f32(v9, v9))).f32[0]);
  }
  v10 = 0;
  v11 = -1.0;
  if (*(_BYTE *)(a1 + 6236))
    v11 = 1.0;
  v12 = a3[1];
  v13 = a3[2];
  v14 = a3[3];
  v47[0] = *a3;
  v47[1] = v12;
  v47[2] = v13;
  v47[3] = v14;
  do
  {
    *(float32x4_t *)((char *)&v48 + v10 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)LODWORD(v11), COERCE_FLOAT(v47[v10])), (float32x4_t)xmmword_23D9A3E20, *(float32x2_t *)&v47[v10], 1), (float32x4_t)xmmword_23D9A3E30, (float32x4_t)v47[v10], 2), (float32x4_t)xmmword_23D9A3E90, (float32x4_t)v47[v10], 3);
    ++v10;
  }
  while (v10 != 4);
  v15 = v50.f32[2] + (float)(*(float *)v48.i32 + *(float *)&v49.i32[1]);
  if (v15 >= 0.0)
  {
    v24 = sqrtf(v15 + 1.0);
    v25 = v24 + v24;
    v26 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v24 + v24));
    v27 = vmul_f32(v26, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v24 + v24), v26));
    LODWORD(v28) = vmul_f32(v27, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v24 + v24), v27)).u32[0];
    v34 = vmuls_lane_f32(v28, (float32x2_t)*(_OWORD *)&vsubq_f32((float32x4_t)vdupq_laneq_s32(v49, 2), v50), 1);
    v35 = vmuls_n_f32(vsubq_f32(v50, (float32x4_t)vdupq_laneq_s32(v48, 2)).f32[0], v28);
    v36 = vmuls_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.i8, 1), (float32x4_t)v49).f32[0], v28);
    v37 = v25 * 0.25;
  }
  else if (*(float *)v48.i32 < *(float *)&v49.i32[1] || *(float *)v48.i32 < v50.f32[2])
  {
    v17 = 1.0 - *(float *)v48.i32;
    if (*(float *)&v49.i32[1] >= v50.f32[2])
    {
      v38 = sqrtf(*(float *)&v49.i32[1] + (float)(v17 - v50.f32[2]));
      v39 = v38 + v38;
      v40 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v38 + v38));
      v41 = vmul_f32(v40, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v38 + v38), v40));
      v22 = vmul_f32(v41, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v38 + v38), v41)).u32[0];
      v34 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.i8, 1), (float32x4_t)v49).f32[0], *(float *)&v22);
      v35 = v39 * 0.25;
      v36 = vmuls_lane_f32(*(float *)&v22, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32(v49, 2), v50), 1);
      v23 = vsubq_f32(v50, (float32x4_t)vdupq_laneq_s32(v48, 2)).u32[0];
    }
    else
    {
      v18 = sqrtf(v50.f32[2] + (float)(v17 - *(float *)&v49.i32[1]));
      v19 = v18 + v18;
      v20 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v18 + v18));
      v21 = vmul_f32(v20, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v18 + v18), v20));
      v22 = vmul_f32(v21, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v18 + v18), v21)).u32[0];
      v34 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v48, 2), v50).f32[0], *(float *)&v22);
      v35 = vmuls_lane_f32(*(float *)&v22, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32(v49, 2), v50), 1);
      v36 = v19 * 0.25;
      v23 = vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.i8, 1), (float32x4_t)v49).u32[0];
    }
    v37 = vmuls_n_f32(*(float *)&v23, *(float *)&v22);
  }
  else
  {
    v29 = sqrtf(*(float *)v48.i32 + (float)((float)(1.0 - *(float *)&v49.i32[1]) - v50.f32[2]));
    *(float *)&v30 = v29 + v29;
    v31 = vrecpe_f32((float32x2_t)v30);
    v32 = vmul_f32(v31, vrecps_f32((float32x2_t)v30, v31));
    LODWORD(v33) = vmul_f32(v32, vrecps_f32((float32x2_t)v30, v32)).u32[0];
    v34 = *(float *)&v30 * 0.25;
    v35 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.i8, 1), (float32x4_t)v49).f32[0], v33);
    v36 = vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v48, 2), v50).f32[0], v33);
    v37 = vmuls_lane_f32(v33, (float32x2_t)*(_OWORD *)&vsubq_f32((float32x4_t)vdupq_laneq_s32(v49, 2), v50), 1);
  }
  v42 = (int32x4_t)vnegq_f32(v6);
  v43 = (int8x16_t)vtrn2q_s32((int32x4_t)v6, vtrn1q_s32((int32x4_t)v6, v42));
  v44 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v42, 8uLL), v35), (float32x4_t)vextq_s8(v43, v43, 8uLL), v34);
  v45 = (float32x4_t)vrev64q_s32((int32x4_t)v6);
  v45.i32[0] = v42.i32[1];
  v45.i32[3] = v42.i32[2];
  *(_QWORD *)&result = vaddq_f32(v44, vmlaq_n_f32(vmulq_n_f32(v6, v37), v45, v36)).u64[0];
  return result;
}

float MonoPoseEstimator::updateBoneScale(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  float v4;
  uint64_t v5;
  uint64_t j;
  float result;

  for (i = 0; i != 100; i += 4)
  {
    v4 = 1.0 / (float)(*(float *)(a3 + i) * *(float *)(a3 + i));
    v5 = a1 + i;
    *(float *)(v5 + 5928) = *(float *)(a1 + i + 5928) + (float)(*(float *)(a2 + i) * v4);
    *(float *)(v5 + 6028) = v4 + *(float *)(a1 + i + 6028);
  }
  for (j = 0; j != 25; ++j)
  {
    result = *(float *)(a1
                      + 5928
                      + 4
                      * MonoPoseEstimator::updateBoneScale(std::array<float,27ul> const&,std::array<float,27ul> const&)::index_lut[j])
           / *(float *)(a1
                      + 6028
                      + 4
                      * MonoPoseEstimator::updateBoneScale(std::array<float,27ul> const&,std::array<float,27ul> const&)::index_lut[j]);
    *(float *)(a1 + 6128 + j * 4) = result;
  }
  return result;
}

float32x4_t MonoPoseEstimator::processMonoPosition(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, float a9, char a10, float32x4_t *a11, float32x4_t *a12)
{
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float32x2_t v23;
  float32x2_t v24;
  simd_float3x3 v30;
  float v31;
  uint64_t v32;
  int32x4_t v33;
  simd_float4 v34;
  uint64_t v36;
  int32x4_t v37;
  int32x4_t v39;
  int32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  uint64_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float32x2_t v54;
  float32x4_t v55;
  float32x4_t result;
  float32x4_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  simd_float4 x;
  simd_float4 v63;
  simd_float3 v64;
  float32x4_t v65;
  __int32 v66;
  __int32 v67;
  __int32 v68;
  __int32 v69;
  __int32 v70;
  __int32 v71;
  float32x2_t v72;
  float v73;
  simd_float3x3 v74;
  float32x4_t v75;
  _DWORD v76[48];
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  simd_float3x3 v83;

  v14 = 0;
  v15 = 0;
  do
  {
    *(_QWORD *)&v76[2 * v15 + 32] = *(_QWORD *)(a2 + v14);
    v76[v15 + 24] = *(_DWORD *)(a2 + v14 + 8);
    *(_QWORD *)&v76[2 * v15 + 8] = *(_QWORD *)(a3 + v14);
    *(float *)&v76[v15++] = *(float *)(a3 + v14 + 8) + 0.05;
    v14 += 12;
  }
  while (v14 != 96);
  v16 = a7[2];
  v17 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a7, COERCE_FLOAT(*(_OWORD *)a4->f32)), a7[1], *a4, 1), v16, *(float32x4_t *)a4->f32, 2);
  v18 = *(float *)(a1 + 5920);
  if ((a10 & 1) != 0)
  {
    v19 = (float)(*(float *)(a1 + 5924) / (float)(v18 * v18)) * 8.0;
    v20 = v19 + v19;
  }
  else
  {
    v20 = 0.0;
  }
  v21 = 0;
  v22 = fabsf((float)(COERCE_FLOAT(a7[3].i64[1]) + v17.f32[2]) * (float)(v18 / a9));
  v23 = *a5;
  v23.i32[1] = HIDWORD(*(_QWORD *)&a5[2]);
  v24 = a5[4];
  v75 = 0u;
  __asm { FMOV            V0.4S, #1.0 }
  v57 = _Q0;
  v58 = v23;
  v30.columns[2].i8[0] = 0;
  v30.columns[2].i8[1] = 0;
  v30.columns[2].i8[2] = 0;
  v30.columns[2].i8[3] = 0;
  v30.columns[2].i8[4] = 0;
  v30.columns[2].i8[5] = 0;
  v30.columns[2].i8[6] = 0;
  v30.columns[2].i8[7] = 0;
  v30.columns[2].i8[8] = 0;
  v30.columns[2].i8[9] = 0;
  v30.columns[2].i8[10] = 0;
  v30.columns[2].i8[11] = 0;
  v30.columns[2].i8[12] = 0;
  v30.columns[2].i8[13] = 0;
  v30.columns[2].i8[14] = 0;
  v30.columns[2].i8[15] = 0;
  v30.columns[1].i8[0] = 0;
  v30.columns[1].i8[1] = 0;
  v30.columns[1].i8[2] = 0;
  v30.columns[1].i8[3] = 0;
  v30.columns[1].i8[4] = 0;
  v30.columns[1].i8[5] = 0;
  v30.columns[1].i8[6] = 0;
  v30.columns[1].i8[7] = 0;
  v30.columns[1].i8[8] = 0;
  v30.columns[1].i8[9] = 0;
  v30.columns[1].i8[10] = 0;
  v30.columns[1].i8[11] = 0;
  v30.columns[1].i8[12] = 0;
  v30.columns[1].i8[13] = 0;
  v30.columns[1].i8[14] = 0;
  v30.columns[1].i8[15] = 0;
  v30.columns[0] = 0uLL;
  v60 = a6[1];
  v61 = *a6;
  v59 = a6[2];
  do
  {
    v74 = v30;
    *(float32x2_t *)v30.columns[0].f32 = vdiv_f32(vsub_f32(*(float32x2_t *)&v76[2 * v21 + 32], v24), v58);
    v31 = v22 * *(float *)&v76[v21 + 24];
    *(float32x2_t *)v30.columns[2].f32 = vdiv_f32(*(float32x2_t *)&v76[2 * v21 + 8], v58);
    *(float32x2_t *)v16.f32 = vmul_n_f32(vmul_n_f32(vmul_f32(*(float32x2_t *)v30.columns[2].f32, *(float32x2_t *)v30.columns[2].f32), v31), v31);
    v72 = *(float32x2_t *)v30.columns[0].f32;
    v73 = v31;
    v16.f32[2] = (float)(v31 * (float)(v20 * v31))
               + (float)((float)(v22 * *(float *)&v76[v21]) * (float)(v22 * *(float *)&v76[v21]));
    v30.columns[2] = (simd_float3)vdivq_f32(v57, v16);
    v32 = _ZZNK17MonoPoseEstimator19processMonoPositionEfRKNSt3__15arrayIfLm24EEES4_RKDv3_fRK13simd_float3x3RK13simd_float4x4SD_RKNS1_IS5_Lm27EEEbRS5_RS8_E12SAMPLE_INDEX[v21];
    v30.columns[1].i8[0] = 0;
    v30.columns[1].i8[1] = 0;
    v30.columns[1].i8[2] = 0;
    v30.columns[1].i8[3] = 0;
    v30.columns[1].i32[1] = v30.columns[2].i32[1];
    v64 = v30.columns[2];
    v65 = (float32x4_t)v30.columns[1].u64[0];
    v33 = (int32x4_t)_simd_atan_f4((simd_float4)v30.columns[0]);
    v34 = (simd_float4)vnegq_f32((float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-*(float *)&v33.i32[1]), v33));
    v34.i32[3] = 0;
    x = v34;
    v63 = _simd_sin_f4(v34);
    _Q0 = _simd_cos_f4(x);
    v36 = 0;
    *(float *)v37.i32 = vmuls_lane_f32(_Q0.f32[1], (float32x4_t)_Q0, 2);
    _S16 = v63.i32[0];
    v37.i32[1] = vmuls_lane_f32(-_Q0.f32[1], (float32x4_t)v63, 2);
    v37.i64[1] = v63.u32[1];
    v39.i32[3] = 0;
    v39.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vmlas_n_f32(vmuls_lane_f32(vmuls_lane_f32(-v63.f32[0], *(float32x2_t *)v63.f32, 1), (float32x4_t)v63, 2), _Q0.f32[2], _Q0.f32[0])), COERCE_UNSIGNED_INT(vmlas_n_f32(vmuls_lane_f32(vmuls_lane_f32(v63.f32[0], (float32x4_t)_Q0, 2), *(float32x2_t *)v63.f32, 1), v63.f32[2], _Q0.f32[0])));
    *(float *)&v39.i32[2] = (float)-_Q0.f32[1] * v63.f32[0];
    __asm { FMLA            S4, S16, V0.S[2] }
    v41.i64[0] = __PAIR64__(_S4, COERCE_UNSIGNED_INT(vmlas_n_f32(vmuls_lane_f32(vmuls_lane_f32(-_Q0.f32[0], (float32x4_t)_Q0, 2), *(float32x2_t *)v63.f32, 1), v63.f32[2], v63.f32[0])));
    v41.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1));
    v77 = v37;
    v78 = v39;
    v79 = v41;
    do
    {
      *(float32x4_t *)((char *)&v80 + v36) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, COERCE_FLOAT(*(_OWORD *)((char *)&v77 + v36))), v60, *(float32x2_t *)&v77.i8[v36], 1), v59, *(float32x4_t *)((char *)&v77 + v36), 2);
      v36 += 16;
    }
    while (v36 != 48);
    v42 = 0;
    v43.i64[0] = 0;
    v43.i64[1] = v64.u32[2];
    v44 = (float32x4_t)v80;
    v45 = (float32x4_t)v81;
    v46 = (float32x4_t)v82;
    v47 = vzip1q_s32(v80, v82);
    v48 = vzip1q_s32(v47, v81);
    v48.i32[3] = v66;
    v49 = vzip2q_s32(v47, vdupq_lane_s32(*(int32x2_t *)v81.i8, 1));
    v49.i32[3] = v68;
    v50 = vzip1q_s32(vzip2q_s32(v80, v82), vdupq_laneq_s32(v81, 2));
    v50.i32[3] = v67;
    v77 = v48;
    v78 = v49;
    v79 = v50;
    do
    {
      *(float32x4_t *)((char *)&v80 + v42) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v64.u32[0], COERCE_FLOAT(*(_OWORD *)((char *)&v77 + v42))), v65, *(float32x2_t *)&v77.i8[v42], 1), v43, *(float32x4_t *)((char *)&v77 + v42), 2);
      v42 += 16;
    }
    while (v42 != 48);
    v51 = 0;
    v52 = v80;
    v16 = (float32x4_t)v81;
    v52.i32[3] = v69;
    v16.i32[3] = v70;
    v53 = v82;
    v53.i32[3] = v71;
    v77 = v52;
    v78 = (int32x4_t)v16;
    v79 = v53;
    do
    {
      *(float32x4_t *)((char *)&v80 + v51) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, COERCE_FLOAT(*(_OWORD *)((char *)&v77 + v51))), v45, *(float32x2_t *)&v77.i8[v51], 1), v46, *(float32x4_t *)((char *)&v77 + v51), 2);
      v51 += 16;
    }
    while (v51 != 48);
    v54 = vmul_n_f32(v72, v73);
    v55 = vaddq_f32(vsubq_f32(vaddq_f32(a6[3], vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*a6, v54.f32[0]), a6[1], v54, 1), a6[2], v73)), a8[v32]), a8[6]);
    v75 = vaddq_f32(v75, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v80, v55.f32[0]), (float32x4_t)v81, *(float32x2_t *)v55.f32, 1), (float32x4_t)v82, v55, 2));
    v30.columns[0] = (simd_float3)vaddq_f32((float32x4_t)v74.columns[0], (float32x4_t)v80);
    v30.columns[1] = (simd_float3)vaddq_f32((float32x4_t)v74.columns[1], (float32x4_t)v81);
    ++v21;
    v30.columns[2] = (simd_float3)vaddq_f32((float32x4_t)v74.columns[2], (float32x4_t)v82);
  }
  while (v21 != 8);
  v83 = __invert_f3(v30);
  a12->i32[2] = v83.columns[0].i32[2];
  a12->i64[0] = v83.columns[0].i64[0];
  a12[1].i32[2] = v83.columns[1].i32[2];
  a12[1].i64[0] = v83.columns[1].i64[0];
  a12[2].i32[2] = v83.columns[2].i32[2];
  a12[2].i64[0] = v83.columns[2].i64[0];
  result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a12, v75.f32[0]), a12[1], *(float32x2_t *)v75.f32, 1), a12[2], v75, 2);
  *a11 = result;
  return result;
}

uint64_t MonoPoseEstimator::update(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  simd_float4x4 *v4;
  simd_float4x4 *v5;
  float32x2_t *v6;
  float32x2_t *v7;
  uint64_t v8;
  float32x2_t *v9;
  float32x2_t *v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  simd_quatf v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  int v20;
  _OWORD *v21;
  simd_quatf *v22;
  uint64_t i;
  uint64_t v24;
  const void *WorldPoints;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t result;
  float32x4_t v30;
  float32x4_t __dst[27];
  float32x4_t v32[3];
  float32x4_t v33;
  simd_quatf v34;
  float32x4_t v35[4];
  _BYTE v36[4224];
  uint64_t v37;
  simd_float4x4 v38;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v7 = v6;
  v8 = v3;
  v10 = v9;
  v12 = v11;
  v13 = v2;
  v37 = *MEMORY[0x24BDAC8D0];
  v14 = v2 + 6236;
  if (v15)
    MonoPoseEstimator::updateBoneScale(v2, v3 + 300, v3 + 408);
  v38 = __invert_f4(*v5);
  v35[0] = (float32x4_t)v38.columns[0];
  v35[1] = (float32x4_t)v38.columns[1];
  v35[2] = (float32x4_t)v38.columns[2];
  v35[3] = (float32x4_t)v38.columns[3];
  *(double *)v16.vector.i64 = MonoPoseEstimator::processMonoRotation(v13, (float32x4_t *)(v8 + 280), v35);
  v34 = v16;
  v33.i32[2] = 0;
  v33.i64[0] = 0;
  if (*(_BYTE *)(v14 + 20))
  {
    v17 = 0;
    v18 = (float32x4_t *)(v13 + 1440);
    v19 = v13 + 208;
    do
    {
      *(_DWORD *)(v19 + v17) = *(_DWORD *)(v8 + v17);
      Kalman1d::update(v18, *(float *)(v8 + v17), *(float *)(v8 + 140 + v17) * *(float *)(v8 + 140 + v17));
      *(_DWORD *)(v19 + v17 - 176) = v18[1].i32[0];
      v17 += 4;
      v18 += 8;
    }
    while (v17 != 140);
    v20 = *(unsigned __int8 *)(v14 + 20);
    v21 = (_OWORD *)(v13 + 176);
    *(simd_quatf *)(v13 + 176) = v34;
    if (v20)
    {
      v22 = (simd_quatf *)(v13 + 1280);
      KalmanQuat::update((KalmanQuat *)(v13 + 1280), (float32x4_t *)&v34, *(float *)(v8 + 296) * *(float *)(v8 + 296));
    }
    else
    {
      v22 = &v34;
    }
  }
  else
  {
    for (i = 0; i != 140; i += 4)
    {
      v24 = v13 + i;
      *(_DWORD *)(v24 + 208) = *(_DWORD *)(v8 + i);
      *(_DWORD *)(v24 + 32) = *(_DWORD *)(v8 + i);
    }
    v21 = (_OWORD *)(v13 + 176);
    *(simd_quatf *)(v13 + 176) = v34;
    v22 = &v34;
  }
  *(simd_quatf *)v13 = *v22;
  __dst[0] = 0u;
  ArvinoRig::ArvinoRig((uint64_t)v36, (_OWORD *)(v13 + 208), (_DWORD *)(v13 + 5920), (__int128 *)(v13 + 6128), v21, __dst, *(_BYTE *)v14);
  WorldPoints = (const void *)ArvinoRig::getWorldPoints((ArvinoRig *)v36);
  memcpy(__dst, WorldPoints, sizeof(__dst));
  MonoPoseEstimator::processMonoPosition(v13, v8 + 516, v8 + 612, v10, v7, v35, (float32x4_t *)v5, __dst, v12, 0, &v33, v32);
  v26 = __dst[6];
  v27 = vsubq_f32(v33, __dst[6]);
  *(float32x4_t *)(v13 + 192) = v27;
  if (*(_BYTE *)(v14 + 20))
  {
    v30 = v26;
    Kalman3d::update((float32x4_t *)(v13 + 352), &v33, v32, (__int128 *)v35);
    v27 = vsubq_f32(*(float32x4_t *)(v13 + 352), v30);
  }
  *(float32x4_t *)(v13 + 16) = v27;
  v28 = *(_QWORD *)(v13 + 6240);
  *(_QWORD *)(v13 + 6240) = 0;
  if (v28)
    MEMORY[0x242637F54](v28, 0x1000C40EAE168CDLL);
  result = *(_QWORD *)(v13 + 6248);
  *(_QWORD *)(v13 + 6248) = 0;
  if (result)
    return MEMORY[0x242637F54](result, 0x1000C40EAE168CDLL);
  return result;
}

uint64_t MonoPoseEstimator::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t *v18;
  uint64_t v19;
  float32x2_t *v20;
  float v21;
  float v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float32x2_t v65;
  float32x2_t v66;
  float v67;
  float v68;
  float32x2_t v69;
  float32x4_t v70;
  float v71;
  float v72;
  float32x4_t v73;
  int8x16_t v74;
  float32x2_t v75;
  simd_quatf v76;
  unsigned __int32 v77;
  float32x2_t v78;
  float32x2_t v79;
  simd_quatf *v80;
  float *v81;
  const void *WorldPoints;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float v104;
  float v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int32x2_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  uint64_t v138;
  uint64_t result;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  int8x16_t v149;
  float v150;
  float v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  simd_float3x3 v155;
  float32x2_t *v156;
  float32x2_t *v157;
  simd_float3x3 v158;
  float32x2_t *v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  simd_float3 v165;
  simd_float3 v166;
  simd_float3 v167;
  float32x4_t v168;
  simd_float3 v169;
  simd_float3 v170;
  simd_float3 v171;
  float32x4_t v172;
  float32x4_t __dst[27];
  simd_quatf v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  _BYTE v183[4224];
  uint64_t v184;
  simd_float3x3 v185;
  simd_float3x3 v186;
  simd_float3x3 v187;
  simd_float3x3 v188;
  simd_float4x4 v189;
  simd_float4x4 v190;

  v9 = MEMORY[0x24BDAC7A8](a1, a2);
  v12 = v11;
  v159 = v13;
  v15 = v14;
  v17 = v16;
  v156 = v18;
  v19 = v10;
  v157 = v20;
  v22 = v21;
  v23 = v9;
  v184 = *MEMORY[0x24BDAC8D0];
  v24 = (char *)(v9 + 6236);
  if (a9)
  {
    MonoPoseEstimator::updateBoneScale(v9, v10 + 300, v10 + 408);
    MonoPoseEstimator::updateBoneScale(v23, v15 + 300, v15 + 408);
  }
  v189 = __invert_f4(*(simd_float4x4 *)v17);
  v179 = (float32x4_t)v189.columns[0];
  v180 = (float32x4_t)v189.columns[1];
  v181 = (float32x4_t)v189.columns[2];
  v182 = (float32x4_t)v189.columns[3];
  v190 = __invert_f4(*(simd_float4x4 *)v12);
  v25 = 0;
  v26 = 0;
  v148 = (float32x4_t)v190.columns[0];
  v175 = (float32x4_t)v190.columns[0];
  v176 = (float32x4_t)v190.columns[1];
  v177 = (float32x4_t)v190.columns[2];
  v178 = (float32x4_t)v190.columns[3];
  do
  {
    v27 = *(float *)(v19 + v26 + 140) * *(float *)(v19 + v26 + 140);
    v28 = *(float *)(v15 + v26 + 140) * *(float *)(v15 + v26 + 140);
    v29 = (float)(v27 * v28) / (float)(v27 + v28);
    v30 = *(float *)(v19 + v26);
    v31 = *(float *)(v15 + v26);
    v32 = v29 * (float)((float)(v30 / v27) + (float)(v31 / v28));
    Kalman1d::update((float32x4_t *)(v23 + v25 + 1440), v32, v29 * fmaxf((float)((float)(v30 - v31) * (float)(v30 - v31)) / (float)(v27 + v28), 1.0));
    *(float *)(v23 + v26 + 208) = v32;
    if (v24[20])
      v32 = *(float *)(v23 + v25 + 1456);
    *(float *)(v23 + v26 + 32) = v32;
    v26 += 4;
    v25 += 128;
  }
  while (v26 != 140);
  *(double *)v33.i64 = MonoPoseEstimator::processMonoRotation(v23, (float32x4_t *)(v19 + 280), &v179);
  v160 = v33;
  *(double *)v34.i64 = MonoPoseEstimator::processMonoRotation(v23, (float32x4_t *)(v15 + 280), &v175);
  v35 = vmulq_f32(v160, (float32x4_t)xmmword_23D9A3EA0);
  v36 = (int32x4_t)vnegq_f32(v34);
  v37 = (int8x16_t)vtrn2q_s32((int32x4_t)v34, vtrn1q_s32((int32x4_t)v34, v36));
  v38 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v36, 8uLL), *(float32x2_t *)v35.f32, 1), (float32x4_t)vextq_s8(v37, v37, 8uLL), v35.f32[0]);
  v39 = (float32x4_t)vrev64q_s32((int32x4_t)v34);
  v39.i32[0] = v36.i32[1];
  v149 = (int8x16_t)v36;
  v153 = v34;
  v39.i32[3] = v36.i32[2];
  v40 = vaddq_f32(v38, vmlaq_laneq_f32(vmulq_laneq_f32(v34, v35, 3), v39, v35, 2));
  v41 = vmulq_f32(v40, v40);
  v42 = atan2f(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]), v40.f32[3]);
  v43 = fabsf(v42 + v42);
  if ((float)(6.2832 - v43) < v43)
    v43 = 6.2832 - v43;
  v44 = v43 * v43;
  v45 = *(float *)(v19 + 296) * *(float *)(v19 + 296);
  v46 = *(float *)(v15 + 296) * *(float *)(v15 + 296);
  v47 = 1.0 / v45;
  v48 = 1.0 / v46;
  v49 = v44 / (float)(v45 + v46);
  if (v49 > 1.0)
  {
    v50 = 1.0 / v49;
    v47 = v47 * v50;
    v48 = v48 * v50;
  }
  v51 = v48 + v47;
  v52 = v48 / (float)(v48 + v47);
  v53 = vmulq_f32(v160, v153);
  v54 = (float32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL);
  *(float32x2_t *)v53.f32 = vadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v54.f32);
  v53.f32[0] = vaddv_f32(*(float32x2_t *)v53.f32);
  v54.i32[0] = 0;
  v55 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v53, v54)), 0), v149, (int8x16_t)v153);
  v56 = 1.0 - v52;
  v57 = vsubq_f32(v160, v55);
  v58 = (int8x16_t)vmulq_f32(v57, v57);
  v154 = v55;
  v59 = vaddq_f32(v160, v55);
  v60 = (int8x16_t)vmulq_f32(v59, v59);
  v61 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v58.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)))));
  v62 = 1.0;
  v63 = v61 + v61;
  if ((float)(v61 + v61) != 0.0)
    v62 = sinf(v61 + v61) / v63;
  v64 = v62;
  v65 = vrecpe_f32((float32x2_t)LODWORD(v62));
  v66 = vmul_f32(v65, vrecps_f32((float32x2_t)LODWORD(v64), v65));
  v69 = vrecps_f32((float32x2_t)LODWORD(v64), v66);
  LODWORD(v67) = vmul_f32(v66, v69).u32[0];
  v68 = 1.0;
  v69.i32[0] = 1.0;
  if ((float)(v63 * v56) != 0.0)
  {
    v150 = v67;
    v69.f32[0] = sinf(v63 * v56);
    v67 = v150;
    v69.f32[0] = v69.f32[0] / (float)(v63 * v56);
  }
  v69.f32[0] = v56 * (float)(v67 * v69.f32[0]);
  v70 = (float32x4_t)vdupq_lane_s32((int32x2_t)v69, 0);
  v71 = v63 * v52;
  if (v71 != 0.0)
  {
    v151 = v67;
    v146 = v70;
    v72 = sinf(v71);
    v70 = v146;
    v67 = v151;
    v68 = v72 / v71;
  }
  v73 = vmlaq_f32(vmulq_n_f32(v154, v52 * (float)(v67 * v68)), v160, v70);
  v74 = (int8x16_t)vmulq_f32(v73, v73);
  v75 = vadd_f32(*(float32x2_t *)v74.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
  if (vaddv_f32(v75) == 0.0)
  {
    v76 = (simd_quatf)xmmword_23D9A3E90;
  }
  else
  {
    v77 = vadd_f32(v75, (float32x2_t)vdup_lane_s32((int32x2_t)v75, 1)).u32[0];
    v78 = vrsqrte_f32((float32x2_t)v77);
    v79 = vmul_f32(v78, vrsqrts_f32((float32x2_t)v77, vmul_f32(v78, v78)));
    v76 = (simd_quatf)vmulq_n_f32(v73, vmul_f32(v79, vrsqrts_f32((float32x2_t)v77, vmul_f32(v79, v79))).f32[0]);
  }
  v174 = v76;
  KalmanQuat::update((KalmanQuat *)(v23 + 1280), (float32x4_t *)&v174, 1.0 / v51);
  *(simd_quatf *)(v23 + 176) = v174;
  if (v24[20])
    v80 = (simd_quatf *)(v23 + 1280);
  else
    v80 = &v174;
  *(simd_quatf *)v23 = *v80;
  v81 = (float *)(v23 + 5920);
  __dst[0] = 0u;
  ArvinoRig::ArvinoRig((uint64_t)v183, (_OWORD *)(v23 + 208), (_DWORD *)(v23 + 5920), (__int128 *)(v23 + 6128), (_OWORD *)(v23 + 176), __dst, *v24);
  WorldPoints = (const void *)ArvinoRig::getWorldPoints((ArvinoRig *)v183);
  memcpy(__dst, WorldPoints, sizeof(__dst));
  v172.i32[2] = 0;
  v172.i64[0] = 0;
  MonoPoseEstimator::processMonoPosition(v23, v19 + 516, v19 + 612, v157, v156, &v179, (float32x4_t *)v17, __dst, v22, a9, &v172, (float32x4_t *)&v169);
  v168.i32[2] = 0;
  v168.i64[0] = 0;
  MonoPoseEstimator::processMonoPosition(v23, v15 + 516, v15 + 612, v157, v159, &v175, (float32x4_t *)v12, __dst, v22, a9, &v168, (float32x4_t *)&v165);
  v185.columns[0] = v169;
  v185.columns[1] = v170;
  v185.columns[2] = v171;
  v142 = (float32x4_t)v169;
  v144 = (float32x4_t)v170;
  v152 = (float32x4_t)v171;
  v158 = __invert_f3(v185);
  v186.columns[0] = v165;
  v186.columns[1] = v166;
  v186.columns[2] = v167;
  v143 = (float32x4_t)v165;
  v145 = (float32x4_t)v166;
  v147 = (float32x4_t)v167;
  v187 = __invert_f3(v186);
  v155 = v187;
  v163 = 0u;
  v164 = 0u;
  v162 = 0u;
  v187.columns[0] = (simd_float3)vaddq_f32((float32x4_t)v158.columns[0], (float32x4_t)v187.columns[0]);
  v187.columns[1] = (simd_float3)vaddq_f32((float32x4_t)v158.columns[1], (float32x4_t)v187.columns[1]);
  v187.columns[2] = (simd_float3)vaddq_f32((float32x4_t)v158.columns[2], (float32x4_t)v187.columns[2]);
  v188 = __invert_f3(v187);
  v162.i32[2] = v188.columns[0].i32[2];
  v163.i32[2] = v188.columns[1].i32[2];
  v162.i64[0] = v188.columns[0].i64[0];
  v163.i64[0] = v188.columns[1].i64[0];
  v164.i32[2] = v188.columns[2].i32[2];
  v164.i64[0] = v188.columns[2].i64[0];
  v83 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v158.columns[0], v172.f32[0]), (float32x4_t)v158.columns[1], *(float32x2_t *)v172.f32, 1), (float32x4_t)v158.columns[2], v172, 2), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v155.columns[0], v168.f32[0]), (float32x4_t)v155.columns[1], *(float32x2_t *)v168.f32, 1), (float32x4_t)v155.columns[2], v168, 2));
  v161 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v162, v83.f32[0]), v163, *(float32x2_t *)v83.f32, 1), v164, v83, 2);
  v140 = v172;
  v141 = v168;
  v84 = vsubq_f32(v172, v161);
  v85 = vsubq_f32(v168, v161);
  v86 = (float32x4_t)vtrn2q_s32((int32x4_t)v158.columns[0], (int32x4_t)v158.columns[1]);
  v86.i32[2] = v158.columns[2].i32[1];
  v87 = vmulq_f32(v84, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v158.columns[0], (int32x4_t)v158.columns[2]), (int32x4_t)v158.columns[1]), v84.f32[0]), v86, *(float32x2_t *)v84.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v158.columns[0], (int32x4_t)v158.columns[2]), vdupq_laneq_s32((int32x4_t)v158.columns[1], 2)), v84, 2));
  v88 = (float32x4_t)vtrn2q_s32((int32x4_t)v155.columns[0], (int32x4_t)v155.columns[1]);
  v88.i32[2] = v155.columns[2].i32[1];
  v89 = vmulq_f32(v85, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v155.columns[0], (int32x4_t)v155.columns[2]), (int32x4_t)v155.columns[1]), v85.f32[0]), v88, *(float32x2_t *)v85.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v155.columns[0], (int32x4_t)v155.columns[2]), vdupq_laneq_s32((int32x4_t)v155.columns[1], 2)), v85, 2));
  v90 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), vaddq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1)));
  v91 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 2), vaddq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 1)));
  if ((vmovn_s32(vcgtq_f32(v91, v90)).u8[0] & 1) != 0)
    v90.f32[0] = v91.f32[0];
  if (v90.f32[0] > 1.0)
  {
    v92 = vmulq_n_f32(v162, v90.f32[0]);
    v93 = vmulq_n_f32(v163, v90.f32[0]);
    v162.i32[2] = v92.i32[2];
    v163.i32[2] = v93.i32[2];
    v94 = vmulq_n_f32(v164, v90.f32[0]);
    v162.i64[0] = v92.i64[0];
    v163.i64[0] = v93.i64[0];
    v164.i32[2] = v94.i32[2];
    v164.i64[0] = v94.i64[0];
  }
  Kalman3d::update((float32x4_t *)(v23 + 352), &v161, &v162, (__int128 *)&v179);
  v95 = v161;
  v96 = __dst[6];
  v97 = vsubq_f32(v161, __dst[6]);
  *(float32x4_t *)(v23 + 192) = v97;
  if (v24[20])
    v97 = vsubq_f32(*(float32x4_t *)(v23 + 352), v96);
  *(float32x4_t *)(v23 + 16) = v97;
  if (a9)
  {
    v98 = *(float32x4_t *)(v17 + 16);
    v99 = *(float32x4_t *)(v17 + 32);
    v100 = *(float32x4_t *)(v17 + 48);
    v101 = vaddq_f32(v100, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v17, v95.f32[0]), v98, *(float32x2_t *)v95.f32, 1), v99, v95, 2));
    v102 = vmulq_f32(v101, v101);
    v103 = vaddq_f32(v102, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v102.f32, 1));
    v103.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v102, 2), v103).f32[0]);
    v104 = *v81;
    v105 = *v81;
    if (v103.f32[0] < 0.4)
    {
      v106 = *(float32x4_t *)(v12 + 16);
      v107 = *(float32x4_t *)(v12 + 32);
      v108 = *(float32x4_t *)(v12 + 48);
      v109 = vaddq_f32(v108, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v12, v95.f32[0]), v106, *(float32x2_t *)v95.f32, 1), v107, v95, 2));
      v110 = vmulq_f32(v109, v109);
      v111 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 2), vaddq_f32(v110, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 1))).u64[0];
      *(float *)v111.i32 = sqrtf(*(float *)v111.i32);
      v105 = *v81;
      if (*(float *)v111.i32 < 0.4)
      {
        v112 = vdivq_f32(v109, (float32x4_t)vdupq_lane_s32(v111, 0));
        v113 = vaddq_f32(v178, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v112.f32[0]), v176, *(float32x2_t *)v112.f32, 1), v177, v112, 2));
        v114 = vdivq_f32(v101, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.f32, 0));
        v115 = vaddq_f32(v182, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v179, v114.f32[0]), v180, *(float32x2_t *)v114.f32, 1), v181, v114, 2));
        v116 = vaddq_f32(v100, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v17, v140.f32[0]), v98, *(float32x2_t *)v140.f32, 1), v99, v140, 2));
        v117 = vmulq_f32(v116, v116);
        v117.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v117, 2), vaddq_f32(v117, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v117.f32, 1))).u64[0];
        v117.f32[0] = sqrtf(v117.f32[0]);
        v118 = vdivq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v117.f32, 0));
        v119 = vaddq_f32(v182, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v179, v118.f32[0]), v180, *(float32x2_t *)v118.f32, 1), v181, v118, 2));
        v120 = vaddq_f32(v108, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v12, v141.f32[0]), v106, *(float32x2_t *)v141.f32, 1), v107, v141, 2));
        v121 = vmulq_f32(v120, v120);
        v122 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v121.f32, 1);
        v122.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v121, 2), vaddq_f32(v121, v122)).f32[0]);
        v123 = vdivq_f32(v120, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v122.f32, 0));
        v124 = vaddq_f32(v178, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v123.f32[0]), v176, *(float32x2_t *)v123.f32, 1), v177, v123, 2));
        v123.f32[0] = v103.f32[0] / v117.f32[0];
        v121.f32[0] = *(float *)v111.i32 / v122.f32[0];
        v125 = vmulq_f32(v115, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v162, v115.f32[0]), v163, *(float32x2_t *)v115.f32, 1), v164, v115, 2));
        v126 = vmulq_f32(v113, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v162, v113.f32[0]), v163, *(float32x2_t *)v113.f32, 1), v164, v113, 2));
        v127 = vmulq_f32(v119, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v142, v119.f32[0]), v144, *(float32x2_t *)v119.f32, 1), v152, v119, 2));
        v128 = vmulq_f32(v124, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v143, v124.f32[0]), v145, *(float32x2_t *)v124.f32, 1), v147, v124, 2));
        v129 = (float)(v103.f32[0] / v117.f32[0])
             * (float)((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v125, 2), vaddq_f32(v125, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v125.f32, 1))).f32[0]/ v103.f32[0])+ (float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))).f32[0]/ v117.f32[0]));
        v130 = (float)(*(float *)v111.i32 / v122.f32[0])
             * (float)((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 2), vaddq_f32(v128, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.f32, 1))).f32[0]/ v122.f32[0])+ (float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2), vaddq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1))).f32[0]/ *(float *)v111.i32));
        v131 = (float)((float)(v121.f32[0] * v129) + (float)(v123.f32[0] * v130)) / (float)(v130 + v129);
        v132 = 1.0 / (float)((float)(1.0 / v130) + (float)(1.0 / v129));
        v133 = *(float *)(v23 + 5924);
        v134 = (float)(v133 + v132)
             * fmaxf((float)((float)(v123.f32[0] - v121.f32[0]) * (float)(v123.f32[0] - v121.f32[0])) / (float)(v133 + v132), 1.0);
        v135 = 1.2;
        if (v131 <= 1.2)
          v135 = v131;
        if (v131 >= 0.83333)
          v136 = v135;
        else
          v136 = 0.83333;
        v105 = (float)((float)(v104 * v134) + (float)((float)(v104 * v136) * v133)) / (float)(v133 + v134);
        *(float *)(v23 + 5924) = (float)(1.0 / (float)((float)(1.0 / v133) + (float)(1.0 / (float)(v134 * 5.0))))
                               + 0.000001;
      }
    }
    v137 = v104 / 1.02;
    if (v105 >= (float)(v104 / 1.02))
    {
      v137 = v104 * 1.02;
      if ((float)(v104 * 1.02) >= v105)
        v137 = v105;
    }
    *v81 = v137;
  }
  v138 = *(_QWORD *)(v23 + 6240);
  *(_QWORD *)(v23 + 6240) = 0;
  if (v138)
    MEMORY[0x242637F54](v138, 0x1000C40EAE168CDLL);
  result = *(_QWORD *)(v23 + 6248);
  *(_QWORD *)(v23 + 6248) = 0;
  if (result)
    return MEMORY[0x242637F54](result, 0x1000C40EAE168CDLL);
  return result;
}

void *MonoPoseEstimator::getArvinoRig@<X0>(MonoPoseEstimator *this@<X0>, void *a2@<X8>)
{
  const void *v3;
  _OWORD *v5;
  _DWORD *v6;
  __int128 *v7;
  _OWORD *v8;
  uint64_t v9;

  v3 = (const void *)*((_QWORD *)this + 780);
  if (!v3)
  {
    v5 = (_OWORD *)((char *)this + 32);
    v6 = (_DWORD *)((char *)this + 5920);
    v7 = (__int128 *)((char *)this + 6128);
    v8 = (_OWORD *)((char *)this + 16);
    v3 = (const void *)operator new();
    ArvinoRig::ArvinoRig((uint64_t)v3, v5, v6, v7, this, v8, *((_BYTE *)this + 6236));
    v9 = *((_QWORD *)this + 780);
    *((_QWORD *)this + 780) = v3;
    if (v9)
    {
      MEMORY[0x242637F54](v9, 0x1000C40EAE168CDLL);
      v3 = (const void *)*((_QWORD *)this + 780);
    }
  }
  return memcpy(a2, v3, 0x1080uLL);
}

void sub_23D6ABC8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242637F54](v1, 0x1000C40EAE168CDLL);
  _Unwind_Resume(a1);
}

void *MonoPoseEstimator::getArvinoRigRaw@<X0>(MonoPoseEstimator *this@<X0>, void *a2@<X8>)
{
  const void *v3;
  _OWORD *v5;
  _DWORD *v6;
  __int128 *v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = (const void *)*((_QWORD *)this + 781);
  if (!v3)
  {
    v5 = (_OWORD *)((char *)this + 208);
    v6 = (_DWORD *)((char *)this + 5920);
    v7 = (__int128 *)((char *)this + 6128);
    v8 = (_OWORD *)((char *)this + 176);
    v9 = (_OWORD *)((char *)this + 192);
    v3 = (const void *)operator new();
    ArvinoRig::ArvinoRig((uint64_t)v3, v5, v6, v7, v8, v9, *((_BYTE *)this + 6236));
    v10 = *((_QWORD *)this + 781);
    *((_QWORD *)this + 781) = v3;
    if (v10)
    {
      MEMORY[0x242637F54](v10, 0x1000C40EAE168CDLL);
      v3 = (const void *)*((_QWORD *)this + 781);
    }
  }
  return memcpy(a2, v3, 0x1080uLL);
}

void sub_23D6ABD78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x242637F54](v1, 0x1000C40EAE168CDLL);
  _Unwind_Resume(a1);
}

uint64_t MonoPoseEstimator::getTransforms(MonoPoseEstimator *this, uint64_t a2)
{
  MonoPoseEstimator *v2;
  _QWORD v4[530];

  v2 = (MonoPoseEstimator *)MEMORY[0x24BDAC7A8](this, a2);
  v4[529] = *MEMORY[0x24BDAC8D0];
  MonoPoseEstimator::getArvinoRig(v2, v4);
  return ArvinoRig::getRigTransforms((ArvinoRig *)v4);
}

uint64_t MonoPoseEstimator::getTransformsRaw(MonoPoseEstimator *this, uint64_t a2)
{
  MonoPoseEstimator *v2;
  _QWORD v4[530];

  v2 = (MonoPoseEstimator *)MEMORY[0x24BDAC7A8](this, a2);
  v4[529] = *MEMORY[0x24BDAC8D0];
  MonoPoseEstimator::getArvinoRigRaw(v2, v4);
  return ArvinoRig::getRigTransforms((ArvinoRig *)v4);
}

void sub_23D6AC220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23D6AC464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t setHandsKitNISSelfocclusionValues(uint64_t result, int a2, float a3)
{
  *(float *)(result + 4 * a2 + 16) = a3;
  return result;
}

void sub_23D6ACE08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_23D6ACF3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_23D6ACFDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23D6AD0FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_23D6AD284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23D6AD3A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23D6AD488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23D6AEE90(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x242637F54](v2, 0x1020C4060DBFC40);

  _Unwind_Resume(a1);
}

void nis::PositionFilter::clear(nis::PositionFilter *this, double a2, double a3)
{
  _OWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v4 = (_OWORD *)((char *)this + 16);
  LODWORD(a3) = *((_DWORD *)this + 5);
  nis::PositionFilter::PositionFilter((nis::PositionFilter *)&v15, *((_BYTE *)this + 24), *((float *)this + 4), a3);
  v5 = v15;
  v15 = 0;
  v6 = *(_QWORD **)this;
  *(_QWORD *)this = v5;
  if (v6)
    std::default_delete<nis::OneShekelHandFilter>::operator()[abi:ne180100]((uint64_t)this, v6);
  v9 = (_QWORD *)*((_QWORD *)this + 1);
  v8 = (_QWORD *)((char *)this + 8);
  v7 = v9;
  v10 = v16;
  v16 = 0;
  *v8 = v10;
  if (v9)
  {
    std::default_delete<nis::OneShekelHandFilter>::operator()[abi:ne180100]((uint64_t)v8, v7);
    v11 = v16;
    v12 = v18;
    *v4 = v17;
    v4[1] = v12;
    v4[2] = v19;
    v16 = 0;
    if (v11)
      std::default_delete<nis::OneShekelHandFilter>::operator()[abi:ne180100]((uint64_t)&v16, v11);
  }
  else
  {
    v13 = v18;
    *v4 = v17;
    v4[1] = v13;
    v4[2] = v19;
    v16 = 0;
  }
  v14 = v15;
  v15 = 0;
  if (v14)
    std::default_delete<nis::OneShekelHandFilter>::operator()[abi:ne180100]((uint64_t)&v15, v14);
}

nis::PositionFilter *nis::PositionFilter::PositionFilter(nis::PositionFilter *this, char a2, float a3, double a4)
{
  uint64_t v7;
  int32x2_t v8;
  uint64_t v9;
  int32x4_t v11;
  int32x4_t v12;

  v7 = operator new();
  _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEEC2Efjfbjjj(v7, 0, 0, 14, 3, 2, a3, 0.5);
  *(float *)v8.i32 = -*(float *)&a4;
  *(_QWORD *)v7 = &unk_250E2F0D8;
  v11 = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
  v12 = vdupq_lane_s32(v8, 0);
  *(int32x4_t *)(v7 + 720) = v12;
  *(int32x4_t *)(v7 + 736) = v11;
  *(_QWORD *)this = v7;
  if ((a2 & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    v9 = operator new();
    _ZN3nis15OneShekelFilterIDv3_fNS_15FilterUtilitiesIS1_Lj16EEEEC2Efjfbjjj(v9, 1u, 0, 14, 2, 2, a3, 0.5);
    *(_QWORD *)v9 = &unk_250E2F0D8;
    *(int32x4_t *)(v9 + 720) = v12;
    *(int32x4_t *)(v9 + 736) = v11;
  }
  *((_QWORD *)this + 1) = v9;
  *((float *)this + 4) = a3;
  *((_DWORD *)this + 5) = LODWORD(a4);
  *((_BYTE *)this + 24) = a2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return this;
}

void sub_23D6AF1D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  MEMORY[0x242637F54](v2, 0x1091C402B5F1220);
  v4 = (_QWORD *)*v1;
  *v1 = 0;
  if (v4)
    std::default_delete<nis::OneShekelHandFilter>::operator()[abi:ne180100]((uint64_t)v1, v4);
  _Unwind_Resume(a1);
}

double nis::OneShekelHandFilter::adjust_velocity(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  double result;

  v2 = *a2;
  v3 = a1[45];
  v4 = a1[46];
  v2.i32[3] = 0;
  v3.i32[3] = 0;
  v5 = vmaxnmq_f32(v2, v3);
  v5.i32[3] = 0;
  v4.i32[3] = 0;
  *(_QWORD *)&result = vminnmq_f32(v5, v4).u64[0];
  return result;
}

void std::default_delete<nis::OneShekelHandFilter>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    *a2 = &unk_250E2F068;
    a2[12] = &unk_250E2F090;
    v3 = (void *)a2[62];
    if (v3)
    {
      a2[63] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[59];
    if (v4)
    {
      a2[60] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x242637F54);
  }
}

void std::default_delete<nis::PositionFilter>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v3 = a2 + 1;
    v4 = (_QWORD *)a2[1];
    *v3 = 0;
    if (v4)
      std::default_delete<nis::OneShekelHandFilter>::operator()[abi:ne180100]((uint64_t)v3, v4);
    v5 = (_QWORD *)*a2;
    *a2 = 0;
    if (v5)
      std::default_delete<nis::OneShekelHandFilter>::operator()[abi:ne180100]((uint64_t)a2, v5);
    JUMPOUT(0x242637F54);
  }
}

double nis::RotationFilter::call(nis::RotationFilter *this, const simd_float4x4 *a2)
{
  __int128 v3;
  __int128 v4;
  int32x4_t v5;
  int32x4_t v6;
  simd_float4 v7;
  float v8;
  float v9;
  float v10;
  float v12;
  float v13;
  simd_float4 v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float v21;
  float32_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float v38;
  unsigned int v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float v51;
  unsigned int v52;
  float v53;
  __int128 v54;
  float v55;
  __int128 v60;
  __int128 v66;
  float32x4_t v68;

  v3 = *((_OWORD *)this + 5);
  *(_OWORD *)this = *((_OWORD *)this + 4);
  *((_OWORD *)this + 1) = v3;
  v4 = *((_OWORD *)this + 7);
  *((_OWORD *)this + 2) = *((_OWORD *)this + 6);
  *((_OWORD *)this + 3) = v4;
  v5 = (int32x4_t)a2->columns[0];
  v6 = (int32x4_t)a2->columns[1];
  v7 = a2->columns[2];
  LODWORD(v8) = HIDWORD(a2->columns[1].i64[0]);
  v9 = COERCE_FLOAT(a2->columns[2].i64[1]);
  v10 = v9 + (float)(COERCE_FLOAT(*(_OWORD *)a2->columns) + v8);
  if (v10 >= 0.0)
  {
    v21 = sqrtf(v10 + 1.0);
    v22 = v21 + v21;
    v23 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v21 + v21));
    v24 = vmul_f32(v23, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v21 + v21), v23));
    v24.i32[0] = vmul_f32(v24, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v21 + v21), v24)).u32[0];
    *(float32x2_t *)v35.f32 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), *(int32x2_t *)v7.f32), (float32x2_t)vext_s8(*(int8x8_t *)v7.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), 4uLL)), v24.f32[0]);
    v25.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v5.i8, 1), *(float32x2_t *)v6.i8).u32[0];
    v25.f32[1] = v22;
    v24.i32[1] = 0.25;
    v37 = vmul_f32(v25, v24);
  }
  else if (*(float *)v5.i32 < v8 || *(float *)v5.i32 < v9)
  {
    v12 = 1.0 - *(float *)v5.i32;
    if (v8 >= v9)
    {
      v38 = sqrtf(v8 + (float)(v12 - v9));
      *(float *)&v39 = v38 + v38;
      v40 = vrecpe_f32((float32x2_t)v39);
      v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
      v42.i32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).u32[0];
      v41.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v5.i8, 1), *(float32x2_t *)v6.i8).u32[0];
      v41.i32[1] = v39;
      v43 = (float32x2_t)vrev64_s32(*(int32x2_t *)v7.f32);
      v44.i32[0] = vadd_f32(v43, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL)).u32[0];
      v44.i32[1] = vsub_f32(v43, (float32x2_t)vdup_laneq_s32(v5, 2)).i32[1];
      v37 = vmul_n_f32(v44, v42.f32[0]);
      v42.i32[1] = 0.25;
      *(float32x2_t *)v35.f32 = vmul_f32(v41, v42);
    }
    else
    {
      v13 = sqrtf(v9 + (float)(v12 - v8));
      v14 = a2->columns[0];
      v14.f32[0] = v13;
      v15 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL)), *(float32x2_t *)v7.f32);
      v16 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 0);
      v17 = vsub_f32(*(float32x2_t *)v5.i8, v16);
      v16.i32[0] = 2.0;
      v16.i32[0] = vmul_f32(*(float32x2_t *)v14.f32, v16).u32[0];
      v16.i32[1] = v17.i32[1];
      v18 = vrecpe_f32((float32x2_t)v16.u32[0]);
      v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v16.u32[0], v18));
      v17.i32[0] = vmul_f32(v19, vrecps_f32((float32x2_t)v16.u32[0], v19)).u32[0];
      *(float32x2_t *)v35.f32 = vmul_n_f32(v15, v17.f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
      _D2.i32[1] = v17.i32[0];
      v37 = vmul_f32(v16, _D2);
    }
  }
  else
  {
    v26 = (float32x2_t)__PAIR64__(v5.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v5.i32 + (float)((float)(1.0 - v8) - v9))));
    v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 0);
    v28 = vadd_f32(*(float32x2_t *)v5.i8, v27);
    v27.i32[0] = 2.0;
    v27.i32[0] = vmul_f32(v26, v27).u32[0];
    v27.i32[1] = v28.i32[1];
    v29 = vrecpe_f32((float32x2_t)v27.u32[0]);
    v30 = vmul_f32(v29, vrecps_f32((float32x2_t)v27.u32[0], v29));
    v26.i32[0] = vmul_f32(v30, vrecps_f32((float32x2_t)v27.u32[0], v30)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v26.i32[0];
    *(float32x2_t *)v35.f32 = vmul_f32(v27, _D5);
    v36.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), *(float32x2_t *)v7.f32).u32[0];
    v36.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(v6, 2), *(float32x2_t *)&v7).i32[1];
    v37 = vmul_n_f32(v36, v26.f32[0]);
  }
  *(float32x2_t *)&v35.u32[2] = v37;
  v68 = v35;
  nis::OneEuroFilter<simd_quatf,nis::ExpFilterCombiner<simd_quatf>,nis::FindVel<simd_quatf>,nis::SpeedFromVel<simd_quatf>,nis::ExpFilterCombiner<simd_quatf>>::call((float32x4_t *)this + 8, &v68);
  _S3 = _Q0.i32[1];
  _S5 = _Q0.i32[2];
  __asm { FMLS            S1, S5, V0.S[2] }
  _S7 = _Q0.i32[3];
  __asm { FMLA            S1, S7, V0.S[3] }
  v51 = vmlas_n_f32(vmuls_lane_f32(_Q0.f32[2], _Q0, 3), _Q0.f32[1], _Q0.f32[0]);
  *(float *)&v52 = v51 + v51;
  v53 = vmlas_n_f32(-(float)(_Q0.f32[1] * _Q0.f32[3]), _Q0.f32[2], _Q0.f32[0]);
  HIDWORD(v54) = 0;
  *(_QWORD *)&v54 = __PAIR64__(v52, _S1);
  *((float *)&v54 + 2) = v53 + v53;
  v55 = vmlas_n_f32(-(float)(_Q0.f32[2] * _Q0.f32[3]), _Q0.f32[1], _Q0.f32[0]);
  __asm
  {
    FMLA            S6, S3, V0.S[1]
    FMLA            S6, S7, V0.S[3]
    FMLS            S6, S0, V0.S[0]
    FMLA            S18, S5, V0.S[1]
  }
  HIDWORD(v60) = 0;
  *(float *)&v60 = v55 + v55;
  DWORD1(v60) = _S6;
  *((float *)&v60 + 2) = _S18 + _S18;
  __asm
  {
    FMLA            S17, S0, V0.S[2]
    FMLA            S16, S5, V0.S[1]
    FMLA            S7, S5, V0.S[2]
    FMLS            S7, S0, V0.S[0]
    FMLS            S7, S3, V0.S[1]
  }
  *(float *)&v66 = _S17 + _S17;
  *((float *)&v66 + 1) = _S16 + _S16;
  *((_QWORD *)&v66 + 1) = _S7;
  *((_OWORD *)this + 4) = v54;
  *((_OWORD *)this + 5) = v60;
  *((_OWORD *)this + 6) = v66;
  *((_OWORD *)this + 7) = xmmword_23D9A3E90;
  return *(double *)&v54;
}

void nis::OneEuroFilter<simd_quatf,nis::ExpFilterCombiner<simd_quatf>,nis::FindVel<simd_quatf>,nis::SpeedFromVel<simd_quatf>,nis::ExpFilterCombiner<simd_quatf>>::call(float32x4_t *a1, float32x4_t *a2)
{
  __int32 v4;
  int v5;
  float32x4_t v6;
  float v7;
  float32x4_t v8;
  int32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;

  v4 = a1[3].i32[0];
  if (v4 == 1)
  {
    a1[2] = *a2;
    if (a1[6].i8[0])
    {
      a1[6].i8[0] = 0;
      v6 = *a2;
    }
    else
    {
      nis::ExpFilterCombiner<simd_quatf>::combine(a2, a1 + 7, 1.0);
    }
    a1[7] = v6;
    v14 = a1 + 1;
    v15 = vmulq_f32(a1[1], (float32x4_t)xmmword_23D9A3EA0);
    v16 = (int32x4_t)vnegq_f32(v15);
    v17 = (int8x16_t)vtrn2q_s32((int32x4_t)v15, vtrn1q_s32((int32x4_t)v15, v16));
    v18 = (float32x4_t)vrev64q_s32((int32x4_t)v15);
    v18.i32[0] = v16.i32[1];
    v18.i32[3] = v16.i32[2];
    a1[1] = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v15, *a2, 3), v18, *a2, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 8uLL), *(float32x2_t *)a2->f32, 1), (float32x4_t)vextq_s8(v17, v17, 8uLL), COERCE_FLOAT(*a2)));
    if (a1[4].i8[0])
    {
      a1[4].i8[0] = 0;
      v19 = *v14;
    }
    else
    {
      nis::ExpFilterCombiner<simd_quatf>::combine(v14, a1 + 5, 1.0);
    }
    a1[5] = v19;
    v5 = a1[3].i32[0] + 1;
    goto LABEL_13;
  }
  if (!v4)
  {
    a1[1] = *a2;
    v5 = 1;
LABEL_13:
    a1[3].i32[0] = v5;
    return;
  }
  v7 = a1->f32[2];
  v8 = vmulq_f32(a1[2], (float32x4_t)xmmword_23D9A3EA0);
  v9 = (int32x4_t)vnegq_f32(v8);
  v10 = (int8x16_t)vtrn2q_s32((int32x4_t)v8, vtrn1q_s32((int32x4_t)v8, v9));
  v11 = (float32x4_t)vrev64q_s32((int32x4_t)v8);
  v11.i32[0] = v9.i32[1];
  v11.i32[3] = v9.i32[2];
  v12 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v8, *a2, 3), v11, *a2, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v9, 8uLL), *(float32x2_t *)a2->f32, 1), (float32x4_t)vextq_s8(v10, v10, 8uLL), COERCE_FLOAT(*a2)));
  v26 = v12;
  if (a1[4].i8[0])
  {
    a1[4].i8[0] = 0;
    v13 = v26;
  }
  else
  {
    nis::ExpFilterCombiner<simd_quatf>::combine(&v26, a1 + 5, (float)(v7 * 6.2832) / (float)((float)(v7 * 6.2832) + 1.0));
    v12 = v13;
  }
  a1[5] = v13;
  if (a1[6].i8[0])
  {
    a1[6].i8[0] = 0;
    a1[7] = *a2;
    v20 = *a2;
  }
  else
  {
    v21 = a1->f32[1];
    v22 = vmulq_f32(v12, v12);
    v25 = v12;
    v23 = atan2f(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]), v12.f32[3]);
    v24 = (float)(a1->f32[0] + (float)(v21 * (float)((float)(v23 + v23) * 57.296))) * 6.2832;
    nis::ExpFilterCombiner<simd_quatf>::combine(a2, a1 + 7, v24 / (float)(v24 + 1.0));
    v12 = v25;
    a1[7] = v20;
  }
  a1[1] = v12;
  a1[2] = v20;
}

double nis::RotationFilter::predict_one(int32x4_t *this)
{
  uint64_t v1;
  int32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  _OWORD v23[2];
  int32x4_t v24;
  int32x4_t v25;
  _OWORD v26[4];

  v1 = 0;
  v2 = this[1];
  v3 = this[2];
  v4 = this[3];
  v5 = vzip1q_s32(*this, v3);
  v6 = vzip2q_s32(*this, v3);
  v7 = vzip1q_s32(v2, v4);
  v8 = vzip2q_s32(v2, v4);
  v9 = (float32x4_t)vzip1q_s32(v5, v7);
  v10 = (float32x4_t)vzip2q_s32(v5, v7);
  v11 = (float32x4_t)vzip1q_s32(v6, v8);
  v12 = (float32x4_t)vzip2q_s32(v6, v8);
  v13 = this[4];
  v14 = this[5];
  v15 = this[6];
  v16 = this[7];
  v24 = v15;
  v25 = v16;
  do
  {
    v26[v1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v23[v1])), v10, *(float32x2_t *)&v23[v1], 1), v11, (float32x4_t)v23[v1], 2), v12, (float32x4_t)v23[v1], 3);
    ++v1;
  }
  while (v1 != 4);
  v17 = 0;
  v18 = (float32x4_t)v26[0];
  v19 = (float32x4_t)v26[1];
  v20 = (float32x4_t)v26[2];
  v21 = (float32x4_t)v26[3];
  v23[0] = v13;
  v23[1] = v14;
  v24 = v15;
  v25 = v16;
  do
  {
    v26[v17] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(v23[v17])), v19, *(float32x2_t *)&v23[v17], 1), v20, (float32x4_t)v23[v17], 2), v21, (float32x4_t)v23[v17], 3);
    ++v17;
  }
  while (v17 != 4);
  return *(double *)v26;
}

void nis::ExpFilterCombiner<simd_quatf>::combine(float32x4_t *a1, float32x4_t *a2, float a3)
{
  float v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float v12;
  float v13;
  float v14;

  v3 = 1.0 - a3;
  v4 = vmulq_f32(*a1, *a2);
  v5 = (float32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL);
  *(float32x2_t *)v4.f32 = vadd_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)v5.f32);
  v4.f32[0] = vaddv_f32(*(float32x2_t *)v4.f32);
  v5.i32[0] = 0;
  v6 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v4, v5)), 0), (int8x16_t)vnegq_f32(*a2), *(int8x16_t *)a2);
  v7 = 1.0 - v3;
  v8 = vsubq_f32(*a1, v6);
  v9 = (int8x16_t)vmulq_f32(v8, v8);
  v10 = vaddq_f32(*a1, v6);
  v11 = (int8x16_t)vmulq_f32(v10, v10);
  v12 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))));
  v13 = v12 + v12;
  if ((float)(v12 + v12) != 0.0)
    sinf(v13);
  if ((float)(v7 * v13) != 0.0)
    sinf(v7 * v13);
  v14 = v3 * v13;
  if (v14 != 0.0)
    sinf(v14);
}

uint64_t ArvinoRig::ArvinoRig(uint64_t a1, _OWORD *a2, _DWORD *a3, __int128 *a4, _OWORD *a5, _OWORD *a6, char a7)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_OWORD *)a1 = *a5;
  *(_OWORD *)(a1 + 16) = *a6;
  *(_OWORD *)(a1 + 32) = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[4];
  *(_OWORD *)(a1 + 80) = a2[3];
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v9;
  v11 = a2[5];
  v12 = a2[6];
  v13 = a2[7];
  *(_OWORD *)(a1 + 156) = *(_OWORD *)((char *)a2 + 124);
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 144) = v13;
  *(_OWORD *)(a1 + 112) = v11;
  *(_DWORD *)(a1 + 172) = *a3;
  v14 = *a4;
  v15 = a4[2];
  *(_OWORD *)(a1 + 192) = a4[1];
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 176) = v14;
  v16 = a4[3];
  v17 = a4[4];
  v18 = a4[5];
  *(_OWORD *)(a1 + 268) = *(__int128 *)((char *)a4 + 92);
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 224) = v16;
  *(_BYTE *)(a1 + 284) = a7;
  *(_BYTE *)(a1 + 3760) = 0;
  *(_BYTE *)(a1 + 4208) = 0;
  bzero((void *)(a1 + 1152), 0x361uLL);
  return a1;
}

{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_OWORD *)a1 = *a5;
  *(_OWORD *)(a1 + 16) = *a6;
  *(_OWORD *)(a1 + 32) = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[4];
  *(_OWORD *)(a1 + 80) = a2[3];
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v9;
  v11 = a2[5];
  v12 = a2[6];
  v13 = a2[7];
  *(_OWORD *)(a1 + 156) = *(_OWORD *)((char *)a2 + 124);
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 144) = v13;
  *(_OWORD *)(a1 + 112) = v11;
  *(_DWORD *)(a1 + 172) = *a3;
  v14 = *a4;
  v15 = a4[2];
  *(_OWORD *)(a1 + 192) = a4[1];
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 176) = v14;
  v16 = a4[3];
  v17 = a4[4];
  v18 = a4[5];
  *(_OWORD *)(a1 + 268) = *(__int128 *)((char *)a4 + 92);
  *(_OWORD *)(a1 + 240) = v17;
  *(_OWORD *)(a1 + 256) = v18;
  *(_OWORD *)(a1 + 224) = v16;
  *(_BYTE *)(a1 + 284) = a7;
  *(_BYTE *)(a1 + 3760) = 0;
  *(_BYTE *)(a1 + 4208) = 0;
  bzero((void *)(a1 + 1152), 0x361uLL);
  return a1;
}

uint64_t ArvinoRig::getRig(ArvinoRig *this)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  int v7;
  __int128 *v8;
  const float *v9;
  float32x4_t v10;
  __int128 *v11;
  __int128 *v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  float32x4_t v19;
  float32x4_t v20;
  simd_float4 v21;
  float32x4_t v35;
  simd_float4 v36;
  float32x4_t v46;
  simd_float4 v47;
  float32x4_t v57;
  simd_float4 v58;
  float32x4_t v68;
  simd_float4 v69;
  float32x4_t v79;
  simd_float4 v80;
  float32x4_t v90;
  simd_float4 v91;
  float32x4_t v101;
  simd_float4 v102;
  float32x4_t v112;
  simd_float4 v113;
  float32x4_t v123;
  simd_float4 v124;
  float32x4_t v134;
  simd_float4 v135;
  float32x4_t v145;
  simd_float4 v146;
  float32x4_t v156;
  simd_float4 v157;
  float32x4_t v167;
  simd_float4 v168;
  float32x4_t v178;
  simd_float4 v179;
  float32x4_t v189;
  simd_float4 v190;
  float32x4_t v200;
  simd_float4 v201;
  float32x4_t v211;
  simd_float4 v212;
  float32x4_t v222;
  simd_float4 v223;
  float32x4_t v233;
  simd_float4 v234;
  uint64_t v236;
  float32x4_t v245;
  float32x4_t v246;
  int32x4_t v247;
  int8x16_t v248;
  float32x4_t v249;
  float32x4_t v250;
  simd_float4 v252;
  simd_float4 v253;
  simd_float4 v254;
  simd_float4 v255;
  simd_float4 v256;
  simd_float4 v257;
  simd_float4 v258;
  simd_float4 v259;
  simd_float4 v260;
  simd_float4 v261;
  simd_float4 v262;
  simd_float4 v263;
  simd_float4 v264;
  simd_float4 v265;
  simd_float4 v266;
  simd_float4 v267;
  simd_float4 v268;
  simd_float4 x;
  simd_float4 xa;
  simd_float4 xb;
  simd_float4 xc;
  simd_float4 xd;
  simd_float4 xe;
  simd_float4 xf;
  simd_float4 xg;
  simd_float4 xh;
  simd_float4 xi;
  simd_float4 xj;
  simd_float4 xk;
  simd_float4 xl;
  simd_float4 xm;
  simd_float4 xn;
  simd_float4 xo;
  simd_float4 xp;
  simd_float4 xq;
  simd_float4 xr;
  simd_float4 xs;
  simd_float4 v289;
  simd_float4 v290;
  simd_float4 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;

  {
    ArvinoRig::getRig(void)::BASE_ROTATIONS_LEFT = xmmword_23D9A3E90;
    xmmword_256CAACB0 = xmmword_23D9A5F60;
    xmmword_256CAACC0 = xmmword_23D9A5F70;
    xmmword_256CAACD0 = xmmword_23D9A5F80;
    xmmword_256CAACE0 = xmmword_23D9A5F80;
    xmmword_256CAACF0 = xmmword_23D9A5F90;
    xmmword_256CAAD00 = xmmword_23D9A5FA0;
    xmmword_256CAAD10 = xmmword_23D9A5FB0;
    xmmword_256CAAD20 = xmmword_23D9A5FB0;
    xmmword_256CAAD30 = xmmword_23D9A5FC0;
    xmmword_256CAAD40 = xmmword_23D9A5FD0;
    xmmword_256CAAD50 = xmmword_23D9A5FE0;
    xmmword_256CAAD60 = xmmword_23D9A5FF0;
    xmmword_256CAAD70 = xmmword_23D9A6000;
    xmmword_256CAAD80 = xmmword_23D9A3E90;
    xmmword_256CAAD90 = xmmword_23D9A6010;
    xmmword_256CAADA0 = xmmword_23D9A6020;
    xmmword_256CAADB0 = xmmword_23D9A6030;
    xmmword_256CAADC0 = xmmword_23D9A6040;
    xmmword_256CAADD0 = xmmword_23D9A6050;
    xmmword_256CAADE0 = xmmword_23D9A6060;
    xmmword_256CAADF0 = xmmword_23D9A3E90;
    xmmword_256CAAE00 = xmmword_23D9A3E90;
    xmmword_256CAAE10 = xmmword_23D9A3E90;
    xmmword_256CAAE20 = xmmword_23D9A3E90;
    xmmword_256CAAE30 = xmmword_23D9A6070;
    xmmword_256CAAE40 = xmmword_23D9A6080;
  }
  {
    ArvinoRig::getRig(void)::BASE_TRANSLATIONS_LEFT = 0u;
    *(_OWORD *)algn_256CAAE70 = xmmword_23D9A6090;
    xmmword_256CAAE80 = xmmword_23D9A60A0;
    xmmword_256CAAE90 = (float32x4_t)xmmword_23D9A60B0;
    xmmword_256CAAEA0 = xmmword_23D9A60C0;
    xmmword_256CAAEB0 = (float32x4_t)xmmword_23D9A60D0;
    xmmword_256CAAEC0 = xmmword_23D9A60E0;
    xmmword_256CAAED0 = (float32x4_t)xmmword_23D9A60F0;
    xmmword_256CAAEE0 = xmmword_23D9A6100;
    xmmword_256CAAEF0 = (float32x4_t)xmmword_23D9A6110;
    xmmword_256CAAF00 = xmmword_23D9A6120;
    xmmword_256CAAF10 = (float32x4_t)xmmword_23D9A6130;
    xmmword_256CAAF20 = xmmword_23D9A6140;
    xmmword_256CAAF30 = (float32x4_t)xmmword_23D9A6150;
    xmmword_256CAAF40 = xmmword_23D9A6160;
    xmmword_256CAAF50 = (float32x4_t)xmmword_23D9A6170;
    xmmword_256CAAF60 = xmmword_23D9A6180;
    xmmword_256CAAF70 = (float32x4_t)xmmword_23D9A6190;
    xmmword_256CAAF80 = xmmword_23D9A61A0;
    xmmword_256CAAF90 = (float32x4_t)xmmword_23D9A61B0;
    xmmword_256CAAFA0 = xmmword_23D9A61C0;
    xmmword_256CAAFB0 = (float32x4_t)xmmword_23D9A61D0;
    xmmword_256CAAFC0 = xmmword_23D9A61E0;
    xmmword_256CAAFD0 = (float32x4_t)xmmword_23D9A61F0;
    xmmword_256CAAFE0 = xmmword_23D9A6200;
    xmmword_256CAAFF0 = 0u;
    xmmword_256CAB000 = xmmword_23D9A6210;
  }
  {
    ArvinoRig::getRig(void)::BASE_ROTATIONS_RIGHT = xmmword_23D9A3E10;
    *(_OWORD *)algn_256CAB030 = xmmword_256CAACB0;
    xmmword_256CAB040 = xmmword_256CAACC0;
    unk_256CAB050 = xmmword_256CAACD0;
    xmmword_256CAB060 = xmmword_256CAACE0;
    unk_256CAB070 = xmmword_256CAACF0;
    xmmword_256CAB080 = xmmword_256CAAD00;
    unk_256CAB090 = xmmword_256CAAD10;
    xmmword_256CAB0A0 = xmmword_256CAAD20;
    unk_256CAB0B0 = xmmword_256CAAD30;
    xmmword_256CAB0C0 = xmmword_256CAAD40;
    unk_256CAB0D0 = xmmword_256CAAD50;
    xmmword_256CAB0E0 = xmmword_256CAAD60;
    unk_256CAB0F0 = xmmword_256CAAD70;
    xmmword_256CAB100 = xmmword_256CAAD80;
    unk_256CAB110 = xmmword_256CAAD90;
    xmmword_256CAB120 = xmmword_256CAADA0;
    unk_256CAB130 = xmmword_256CAADB0;
    xmmword_256CAB140 = xmmword_256CAADC0;
    unk_256CAB150 = xmmword_256CAADD0;
    xmmword_256CAB160 = xmmword_256CAADE0;
    unk_256CAB170 = xmmword_256CAADF0;
    xmmword_256CAB180 = xmmword_256CAAE00;
    unk_256CAB190 = xmmword_256CAAE10;
    xmmword_256CAB1A0 = xmmword_256CAAE20;
    unk_256CAB1B0 = xmmword_256CAAE30;
    xmmword_256CAB1C0 = xmmword_256CAAE40;
  }
  {
    ArvinoRig::getRig(void)::BASE_TRANSLATIONS_RIGHT = (__int128)vnegq_f32((float32x4_t)ArvinoRig::getRig(void)::BASE_TRANSLATIONS_LEFT);
    *(float32x4_t *)algn_256CAB1F0 = vnegq_f32(*(float32x4_t *)algn_256CAAE70);
    xmmword_256CAB200 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAAE80);
    unk_256CAB210 = vnegq_f32(xmmword_256CAAE90);
    xmmword_256CAB220 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAAEA0);
    unk_256CAB230 = vnegq_f32(xmmword_256CAAEB0);
    xmmword_256CAB240 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAAEC0);
    unk_256CAB250 = vnegq_f32(xmmword_256CAAED0);
    xmmword_256CAB260 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAAEE0);
    unk_256CAB270 = vnegq_f32(xmmword_256CAAEF0);
    xmmword_256CAB280 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAAF00);
    unk_256CAB290 = vnegq_f32(xmmword_256CAAF10);
    xmmword_256CAB2A0 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAAF20);
    unk_256CAB2B0 = vnegq_f32(xmmword_256CAAF30);
    xmmword_256CAB2C0 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAAF40);
    unk_256CAB2D0 = vnegq_f32(xmmword_256CAAF50);
    xmmword_256CAB2E0 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAAF60);
    unk_256CAB2F0 = vnegq_f32(xmmword_256CAAF70);
    xmmword_256CAB300 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAAF80);
    unk_256CAB310 = vnegq_f32(xmmword_256CAAF90);
    xmmword_256CAB320 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAAFA0);
    unk_256CAB330 = vnegq_f32(xmmword_256CAAFB0);
    xmmword_256CAB340 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAAFC0);
    unk_256CAB350 = vnegq_f32(xmmword_256CAAFD0);
    xmmword_256CAB360 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAAFE0);
    unk_256CAB370 = vnegq_f32(xmmword_256CAAFF0);
    xmmword_256CAB380 = (__int128)vnegq_f32((float32x4_t)xmmword_256CAB000);
  }
  if (!*((_BYTE *)this + 2016))
  {
    v6 = 0;
    v7 = *((unsigned __int8 *)this + 284);
    v8 = &ArvinoRig::getRig(void)::BASE_TRANSLATIONS_LEFT;
    if (!*((_BYTE *)this + 284))
      v8 = &ArvinoRig::getRig(void)::BASE_TRANSLATIONS_RIGHT;
    *((_OWORD *)this + 99) = *((_OWORD *)this + 1);
    v9 = (const float *)((char *)this + 172);
    v10 = vld1q_dup_f32(v9);
    v11 = v8 + 1;
    do
    {
      *((float32x4_t *)this + v6 + 100) = vmulq_f32(vmulq_n_f32((float32x4_t)v11[v6], *((float *)this + v6 + 45)), v10);
      ++v6;
    }
    while (v6 != 26);
    if (v7)
      v12 = &ArvinoRig::getRig(void)::BASE_ROTATIONS_LEFT;
    else
      v12 = &ArvinoRig::getRig(void)::BASE_ROTATIONS_RIGHT;
    v13 = (int32x4_t)vnegq_f32(*(float32x4_t *)this);
    v14 = (int8x16_t)vtrn2q_s32(*(int32x4_t *)this, vtrn1q_s32(*(int32x4_t *)this, v13));
    v15 = (float32x4_t)vrev64q_s32(*(int32x4_t *)this);
    v15.i32[0] = v13.i32[1];
    v15.i32[3] = v13.i32[2];
    *((float32x4_t *)this + 72) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(*(float32x4_t *)this, *(float32x4_t *)v12, 3), v15, *(float32x4_t *)v12, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8(*(int8x16_t *)this, (int8x16_t)v13, 8uLL), *(float32x2_t *)v12, 1), (float32x4_t)vextq_s8(v14, v14, 8uLL), COERCE_FLOAT(*v12)));
    v16.i32[3] = 0;
    v317 = 0u;
    v318 = 0u;
    v315 = 0u;
    v316 = 0u;
    v313 = 0u;
    v314 = 0u;
    v311 = 0u;
    v312 = 0u;
    v309 = 0u;
    v310 = 0u;
    v307 = 0u;
    v308 = 0u;
    v305 = 0u;
    v306 = 0u;
    v303 = 0u;
    v304 = 0u;
    v301 = 0u;
    v302 = 0u;
    v299 = 0u;
    v300 = 0u;
    v297 = 0u;
    v298 = 0u;
    v295 = 0u;
    v296 = 0u;
    v293 = 0u;
    v294 = 0u;
    v292 = 0u;
    if ((v17 & 1) == 0
    {
      xmmword_256CAB3B0 = xmmword_23D9A6220;
      xmmword_256CAB3C0 = xmmword_23D9A6230;
      xmmword_256CAB3D0 = xmmword_23D9A6240;
      xmmword_256CAB3E0 = 0u;
      xmmword_256CAB3F0 = (__int128)vdupq_n_s32(0x3DB2B8C2u);
      xmmword_256CAB400 = xmmword_23D9A6250;
      xmmword_256CAB410 = xmmword_23D9A6260;
      xmmword_256CAB420 = xmmword_23D9A6260;
      unk_256CAB430 = 0u;
      xmmword_256CAB440 = xmmword_256CAB3F0;
      xmmword_256CAB450 = xmmword_23D9A6250;
      xmmword_256CAB460 = xmmword_23D9A6260;
      xmmword_256CAB470 = xmmword_23D9A6260;
      xmmword_256CAB480 = 0u;
      xmmword_256CAB490 = xmmword_256CAB3F0;
      xmmword_256CAB4A0 = xmmword_23D9A6250;
      xmmword_256CAB4B0 = xmmword_23D9A6260;
      xmmword_256CAB4C0 = xmmword_23D9A6260;
      unk_256CAB4D0 = 0u;
      xmmword_256CAB4E0 = xmmword_256CAB3F0;
      xmmword_256CAB4F0 = xmmword_23D9A6250;
      xmmword_256CAB500 = xmmword_23D9A6260;
      xmmword_256CAB510 = xmmword_23D9A6260;
      xmmword_256CAB520 = 0u;
      xmmword_256CAB530 = xmmword_23D9A6270;
      xmmword_256CAB540 = 0u;
    }
    if ((v18 & 1) == 0
    {
      xmmword_256CAB570 = xmmword_23D9A6280;
      xmmword_256CAB580 = xmmword_23D9A6290;
      xmmword_256CAB590 = xmmword_23D9A62A0;
      xmmword_256CAB5A0 = 0u;
      xmmword_256CAB5B0 = 0u;
      xmmword_256CAB5C0 = xmmword_23D9A62B0;
      xmmword_256CAB5D0 = xmmword_23D9A62B0;
      xmmword_256CAB5E0 = xmmword_23D9A62B0;
      unk_256CAB5F0 = 0u;
      xmmword_256CAB600 = 0u;
      xmmword_256CAB610 = xmmword_23D9A62B0;
      xmmword_256CAB620 = xmmword_23D9A62B0;
      xmmword_256CAB630 = xmmword_23D9A62B0;
      xmmword_256CAB640 = 0u;
      xmmword_256CAB650 = 0u;
      xmmword_256CAB660 = xmmword_23D9A62B0;
      xmmword_256CAB670 = xmmword_23D9A62B0;
      xmmword_256CAB680 = xmmword_23D9A62B0;
      unk_256CAB690 = 0u;
      xmmword_256CAB6A0 = 0u;
      xmmword_256CAB6B0 = xmmword_23D9A62B0;
      xmmword_256CAB6C0 = xmmword_23D9A62B0;
      xmmword_256CAB6D0 = xmmword_23D9A62B0;
      xmmword_256CAB6E0 = 0u;
      xmmword_256CAB6F0 = 0u;
      xmmword_256CAB700 = 0u;
    }
    v16.i64[0] = *((_QWORD *)this + 4);
    v16.i32[2] = *((_DWORD *)this + 10);
    v19 = vmlaq_f32((float32x4_t)xmmword_256CAB570, (float32x4_t)xmmword_256CAB3B0, v16);
    v20.i64[0] = 0x3F0000003F000000;
    v20.i64[1] = 0x3F0000003F000000;
    v21 = (simd_float4)vmulq_f32(v19, v20);
    v21.i32[3] = 0;
    x = v21;
    v289 = _simd_cos_f4(v21);
    _Q0 = _simd_sin_f4(x);
    _Q6 = v289;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-v289.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(v289.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v293 = _Q5;
    _Q0.i64[0] = 0;
    _Q0.i64[1] = *((unsigned int *)this + 11);
    v35 = vmlaq_f32((float32x4_t)xmmword_256CAB580, (float32x4_t)xmmword_256CAB3C0, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v36 = (simd_float4)vmulq_f32(v35, (float32x4_t)_Q0);
    v36.i32[3] = 0;
    xa = v36;
    v290 = _simd_cos_f4(v36);
    _Q0 = _simd_sin_f4(xa);
    _Q6 = v290;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-v290.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(v290.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v294 = _Q5;
    _Q0.i64[0] = 0;
    _Q0.i64[1] = *((unsigned int *)this + 12);
    v46 = vmlaq_f32((float32x4_t)xmmword_256CAB590, (float32x4_t)xmmword_256CAB3D0, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v47 = (simd_float4)vmulq_f32(v46, (float32x4_t)_Q0);
    v47.i32[3] = 0;
    xb = v47;
    v291 = _simd_cos_f4(v47);
    _Q0 = _simd_sin_f4(xb);
    _Q6 = v291;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    _S3 = vmuls_lane_f32(-v291.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(v291.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    DWORD2(_Q5) = _Q0.i32[0];
    __asm { FMLA            S2, S1, V6.S[2] }
    HIDWORD(_Q5) = _S2;
    _Q0.i32[3] = 1065353216;
    v295 = _Q5;
    v296 = xmmword_23D9A3E90;
    _Q0.i64[0] = *(_QWORD *)((char *)this + 52);
    _Q0.i32[2] = *((_DWORD *)this + 15);
    v57 = vmlaq_f32((float32x4_t)xmmword_256CAB5B0, (float32x4_t)xmmword_256CAB3F0, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v58 = (simd_float4)vmulq_f32(v57, (float32x4_t)_Q0);
    v58.i32[3] = 0;
    v252 = v58;
    xc = _simd_cos_f4(v58);
    _Q0 = _simd_sin_f4(v252);
    _Q6 = xc;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xc.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xc.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v297 = _Q5;
    _Q0.i32[0] = 0;
    _Q0.i32[1] = *((_DWORD *)this + 16);
    _Q0.i64[1] = *((unsigned int *)this + 17);
    v68 = vmlaq_f32((float32x4_t)xmmword_256CAB5C0, (float32x4_t)xmmword_256CAB400, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v69 = (simd_float4)vmulq_f32(v68, (float32x4_t)_Q0);
    v69.i32[3] = 0;
    v253 = v69;
    xd = _simd_cos_f4(v69);
    _Q0 = _simd_sin_f4(v253);
    _Q6 = xd;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xd.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xd.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v298 = _Q5;
    _Q0.i64[0] = 0;
    _Q0.i64[1] = *((unsigned int *)this + 18);
    v79 = vmlaq_f32((float32x4_t)xmmword_256CAB5D0, (float32x4_t)xmmword_256CAB410, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v80 = (simd_float4)vmulq_f32(v79, (float32x4_t)_Q0);
    v80.i32[3] = 0;
    v254 = v80;
    xe = _simd_cos_f4(v80);
    _Q0 = _simd_sin_f4(v254);
    _Q6 = xe;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xe.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xe.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v299 = _Q5;
    _Q0.i64[0] = 0;
    _Q0.i64[1] = *((unsigned int *)this + 19);
    v90 = vmlaq_f32((float32x4_t)xmmword_256CAB5E0, (float32x4_t)xmmword_256CAB420, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v91 = (simd_float4)vmulq_f32(v90, (float32x4_t)_Q0);
    v91.i32[3] = 0;
    v255 = v91;
    xf = _simd_cos_f4(v91);
    _Q0 = _simd_sin_f4(v255);
    _Q6 = xf;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xf.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xf.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    _Q0.i32[3] = 1065353216;
    v300 = _Q5;
    v301 = xmmword_23D9A3E90;
    _Q0.i64[0] = *((_QWORD *)this + 10);
    _Q0.i32[2] = *((_DWORD *)this + 22);
    v101 = vmlaq_f32((float32x4_t)xmmword_256CAB600, (float32x4_t)xmmword_256CAB440, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v102 = (simd_float4)vmulq_f32(v101, (float32x4_t)_Q0);
    v102.i32[3] = 0;
    v256 = v102;
    xg = _simd_cos_f4(v102);
    _Q0 = _simd_sin_f4(v256);
    _Q6 = xg;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xg.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xg.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v302 = _Q5;
    _Q0.i32[0] = 0;
    _Q0.i32[1] = *((_DWORD *)this + 23);
    _Q0.i64[1] = *((unsigned int *)this + 24);
    v112 = vmlaq_f32((float32x4_t)xmmword_256CAB610, (float32x4_t)xmmword_256CAB450, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v113 = (simd_float4)vmulq_f32(v112, (float32x4_t)_Q0);
    v113.i32[3] = 0;
    v257 = v113;
    xh = _simd_cos_f4(v113);
    _Q0 = _simd_sin_f4(v257);
    _Q6 = xh;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xh.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xh.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v303 = _Q5;
    _Q0.i64[0] = 0;
    _Q0.i64[1] = *((unsigned int *)this + 25);
    v123 = vmlaq_f32((float32x4_t)xmmword_256CAB620, (float32x4_t)xmmword_256CAB460, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v124 = (simd_float4)vmulq_f32(v123, (float32x4_t)_Q0);
    v124.i32[3] = 0;
    v258 = v124;
    xi = _simd_cos_f4(v124);
    _Q0 = _simd_sin_f4(v258);
    _Q6 = xi;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xi.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xi.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v304 = _Q5;
    _Q0.i64[0] = 0;
    _Q0.i64[1] = *((unsigned int *)this + 26);
    v134 = vmlaq_f32((float32x4_t)xmmword_256CAB630, (float32x4_t)xmmword_256CAB470, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v135 = (simd_float4)vmulq_f32(v134, (float32x4_t)_Q0);
    v135.i32[3] = 0;
    v259 = v135;
    xj = _simd_cos_f4(v135);
    _Q0 = _simd_sin_f4(v259);
    _Q6 = xj;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xj.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xj.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    DWORD1(_Q5) = _S4;
    __asm { FMLA            S0, S3, V6.S[2] }
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    _Q0.i32[3] = 1065353216;
    v305 = _Q5;
    v306 = xmmword_23D9A3E90;
    _Q0.i64[0] = *(_QWORD *)((char *)this + 108);
    _Q0.i32[2] = *((_DWORD *)this + 29);
    v145 = vmlaq_f32((float32x4_t)xmmword_256CAB650, (float32x4_t)xmmword_256CAB490, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v146 = (simd_float4)vmulq_f32(v145, (float32x4_t)_Q0);
    v146.i32[3] = 0;
    v260 = v146;
    xk = _simd_cos_f4(v146);
    _Q0 = _simd_sin_f4(v260);
    _Q6 = xk;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xk.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xk.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v307 = _Q5;
    _Q0.i32[0] = 0;
    _Q0.i32[1] = *((_DWORD *)this + 30);
    _Q0.i64[1] = *((unsigned int *)this + 31);
    v156 = vmlaq_f32((float32x4_t)xmmword_256CAB660, (float32x4_t)xmmword_256CAB4A0, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v157 = (simd_float4)vmulq_f32(v156, (float32x4_t)_Q0);
    v157.i32[3] = 0;
    v261 = v157;
    xl = _simd_cos_f4(v157);
    _Q0 = _simd_sin_f4(v261);
    _Q6 = xl;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xl.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xl.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v308 = _Q5;
    _Q0.i64[0] = 0;
    _Q0.i64[1] = *((unsigned int *)this + 32);
    v167 = vmlaq_f32((float32x4_t)xmmword_256CAB670, (float32x4_t)xmmword_256CAB4B0, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v168 = (simd_float4)vmulq_f32(v167, (float32x4_t)_Q0);
    v168.i32[3] = 0;
    v262 = v168;
    xm = _simd_cos_f4(v168);
    _Q0 = _simd_sin_f4(v262);
    _Q6 = xm;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xm.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xm.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v309 = _Q5;
    _Q0.i64[0] = 0;
    _Q0.i64[1] = *((unsigned int *)this + 33);
    v178 = vmlaq_f32((float32x4_t)xmmword_256CAB680, (float32x4_t)xmmword_256CAB4C0, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v179 = (simd_float4)vmulq_f32(v178, (float32x4_t)_Q0);
    v179.i32[3] = 0;
    v263 = v179;
    xn = _simd_cos_f4(v179);
    _Q0 = _simd_sin_f4(v263);
    _Q6 = xn;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xn.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xn.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    _Q0.i32[3] = 1065353216;
    v310 = _Q5;
    v311 = xmmword_23D9A3E90;
    _Q0.i64[0] = *((_QWORD *)this + 17);
    _Q0.i32[2] = *((_DWORD *)this + 36);
    v189 = vmlaq_f32((float32x4_t)xmmword_256CAB6A0, (float32x4_t)xmmword_256CAB4E0, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v190 = (simd_float4)vmulq_f32(v189, (float32x4_t)_Q0);
    v190.i32[3] = 0;
    v264 = v190;
    xo = _simd_cos_f4(v190);
    _Q0 = _simd_sin_f4(v264);
    _Q6 = xo;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xo.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xo.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v312 = _Q5;
    _Q0.i32[0] = 0;
    _Q0.i32[1] = *((_DWORD *)this + 37);
    _Q0.i64[1] = *((unsigned int *)this + 38);
    v200 = vmlaq_f32((float32x4_t)xmmword_256CAB6B0, (float32x4_t)xmmword_256CAB4F0, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v201 = (simd_float4)vmulq_f32(v200, (float32x4_t)_Q0);
    v201.i32[3] = 0;
    v265 = v201;
    xp = _simd_cos_f4(v201);
    _Q0 = _simd_sin_f4(v265);
    _Q6 = xp;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xp.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xp.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v313 = _Q5;
    _Q0.i64[0] = 0;
    _Q0.i64[1] = *((unsigned int *)this + 39);
    v211 = vmlaq_f32((float32x4_t)xmmword_256CAB6C0, (float32x4_t)xmmword_256CAB500, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v212 = (simd_float4)vmulq_f32(v211, (float32x4_t)_Q0);
    v212.i32[3] = 0;
    v266 = v212;
    xq = _simd_cos_f4(v212);
    _Q0 = _simd_sin_f4(v266);
    _Q6 = xq;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xq.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xq.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v314 = _Q5;
    _Q0.i64[0] = 0;
    _Q0.i64[1] = *((unsigned int *)this + 40);
    v222 = vmlaq_f32((float32x4_t)xmmword_256CAB6D0, (float32x4_t)xmmword_256CAB510, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v223 = (simd_float4)vmulq_f32(v222, (float32x4_t)_Q0);
    v223.i32[3] = 0;
    v267 = v223;
    xr = _simd_cos_f4(v223);
    _Q0 = _simd_sin_f4(v267);
    _Q6 = xr;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xr.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xr.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v315 = _Q5;
    v316 = xmmword_23D9A3E90;
    _Q0.i32[0] = 0;
    _Q0.i32[1] = *((_DWORD *)this + 41);
    _Q0.i64[1] = *((unsigned int *)this + 42);
    v233 = vmlaq_f32((float32x4_t)xmmword_256CAB6F0, (float32x4_t)xmmword_256CAB530, (float32x4_t)_Q0);
    _Q0.i64[0] = 0x3F0000003F000000;
    _Q0.i64[1] = 0x3F0000003F000000;
    v234 = (simd_float4)vmulq_f32(v233, (float32x4_t)_Q0);
    v234.i32[3] = 0;
    v268 = v234;
    xs = _simd_cos_f4(v234);
    _Q0 = _simd_sin_f4(v268);
    v236 = 0;
    _Q6 = xs;
    _S1 = vmuls_lane_f32(_Q6.f32[0], *(float32x2_t *)_Q6.f32, 1);
    __asm { FMLA            S2, S1, V6.S[2] }
    _S3 = vmuls_lane_f32(-xs.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S3, V0.S[2] }
    _S3 = vmuls_lane_f32(xs.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S4, S3, V6.S[2] }
    _S3 = vmuls_lane_f32(-_Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S0, S3, V6.S[2] }
    DWORD1(_Q5) = _S4;
    *((_QWORD *)&_Q5 + 1) = __PAIR64__(_S2, _Q0.u32[0]);
    v317 = _Q5;
    v318 = xmmword_23D9A3E90;
    do
    {
      v245 = (float32x4_t)v12[v236 + 1];
      v246 = *(float32x4_t *)((char *)&v292 + v236 * 16 + 16);
      v247 = (int32x4_t)vnegq_f32(v246);
      v248 = (int8x16_t)vtrn2q_s32((int32x4_t)v246, vtrn1q_s32((int32x4_t)v246, v247));
      v249 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v246, (int8x16_t)v247, 8uLL), *(float32x2_t *)v245.f32, 1), (float32x4_t)vextq_s8(v248, v248, 8uLL), v245.f32[0]);
      v250 = (float32x4_t)vrev64q_s32((int32x4_t)v246);
      v250.i32[0] = v247.i32[1];
      v250.i32[3] = v247.i32[2];
      *(float32x4_t *)((char *)this + v236 * 16 + 1168) = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v246, v245, 3), v250, v245, 2), v249);
      ++v236;
    }
    while (v236 != 26);
    *((_BYTE *)this + 2016) = 1;
  }
  return (uint64_t)this + 1152;
}

uint64_t ArvinoRig::getRigTransforms(ArvinoRig *this)
{
  uint64_t Rig;
  uint64_t v3;
  _OWORD *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;

  if (!*((_BYTE *)this + 3760))
  {
    Rig = ArvinoRig::getRig(this);
    v3 = 0;
    v4 = (_OWORD *)((char *)this + 2080);
    do
    {
      v5 = *(float *)(Rig + v3);
      v6 = *(float *)(Rig + v3 + 4);
      v7 = *(float *)(Rig + v3 + 8);
      v8 = *(float *)(Rig + v3 + 12);
      *(float *)&v9 = (float)-(float)((float)(v6 * v8) - (float)(v5 * v7))
                    - (float)((float)(v6 * v8) - (float)(v5 * v7));
      *(float *)&v10 = (float)-(float)((float)(v7 * v8) - (float)(v5 * v6))
                     - (float)((float)(v7 * v8) - (float)(v5 * v6));
      *(float *)&v11 = (float)((float)((float)(v5 * v5) - (float)(v6 * v6)) - (float)(v7 * v7)) + (float)(v8 * v8);
      *(float *)&v12 = (float)((float)(v5 * v8) + (float)(v6 * v7)) + (float)((float)(v5 * v8) + (float)(v6 * v7));
      *(float *)&v13 = (float)((float)(v6 * v8) + (float)(v7 * v5)) + (float)((float)(v6 * v8) + (float)(v7 * v5));
      *((float *)&v10 + 1) = (float)((float)((float)(v6 * v6) - (float)(v7 * v7)) + (float)(v8 * v8)) - (float)(v5 * v5);
      *(float *)&v14 = (float)-(float)((float)(v5 * v8) - (float)(v6 * v7))
                     - (float)((float)(v5 * v8) - (float)(v6 * v7));
      *((float *)&v11 + 1) = (float)((float)(v7 * v8) + (float)(v5 * v6)) + (float)((float)(v7 * v8) + (float)(v5 * v6));
      *(float *)&v15 = (float)((float)((float)(v8 * v8) + (float)(v7 * v7)) - (float)(v5 * v5)) - (float)(v6 * v6);
      *(_QWORD *)&v16 = __PAIR64__(v14, v13);
      *((_QWORD *)&v10 + 1) = v12;
      *((_QWORD *)&v16 + 1) = v15;
      *((_QWORD *)&v11 + 1) = v9;
      *(v4 - 3) = v11;
      *(v4 - 2) = v10;
      *(v4 - 1) = v16;
      *v4 = xmmword_23D9A3E90;
      v17 = *(_OWORD *)(Rig + v3 + 432);
      HIDWORD(v17) = 1.0;
      *v4 = v17;
      v4 += 4;
      v3 += 16;
    }
    while (v3 != 432);
    *((_BYTE *)this + 3760) = 1;
  }
  return (uint64_t)this + 2032;
}

uint64_t ArvinoRig::getWorldPoints(ArvinoRig *this)
{
  _BYTE *v2;
  uint64_t Rig;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  unsigned int v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  _BYTE v28[432];

  v2 = (char *)this + 4208;
  if (!*((_BYTE *)this + 4208))
  {
    Rig = ArvinoRig::getRig(this);
    v4 = 0;
    v5 = (char *)this + 3776;
    v6 = &ArvinoRig::getWorldPoints(void)::PARENT_BONES;
    do
    {
      v8 = *v6++;
      v7 = v8;
      if ((v8 & 0x80000000) != 0)
      {
        *(_OWORD *)&v5[v4] = *(_OWORD *)(Rig + v4 + 432);
        *(_OWORD *)&v28[v4] = *(_OWORD *)(Rig + v4);
      }
      else
      {
        v9 = *(float32x4_t *)&v28[16 * v7];
        v10 = *(float32x4_t *)(Rig + v4);
        v11 = (int32x4_t)vnegq_f32(v10);
        v12 = (int8x16_t)vtrn2q_s32((int32x4_t)v10, vtrn1q_s32((int32x4_t)v10, v11));
        v13 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v11, 8uLL), *(float32x2_t *)v9.f32, 1), (float32x4_t)vextq_s8(v12, v12, 8uLL), v9.f32[0]);
        v14 = (float32x4_t)vrev64q_s32((int32x4_t)v10);
        v14.i32[0] = v11.i32[1];
        v14.i32[3] = v11.i32[2];
        *(float32x4_t *)&v28[v4] = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v10, v9, 3), v14, v9, 2), v13);
        v15 = *(float32x4_t *)&v28[16 * v7];
        v16 = *(float32x4_t *)(Rig + v4 + 432);
        v17 = vmulq_f32(v15, (float32x4_t)xmmword_23D9A3EA0);
        v18 = (int32x4_t)vnegq_f32(v17);
        v19 = (int8x16_t)vtrn2q_s32((int32x4_t)v17, vtrn1q_s32((int32x4_t)v17, v18));
        v20 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v18, 8uLL), *(float32x2_t *)v16.f32, 1), (float32x4_t)vextq_s8(v19, v19, 8uLL), v16.f32[0]);
        v21 = (float32x4_t)vrev64q_s32((int32x4_t)v17);
        v21.i32[0] = v18.i32[1];
        v21.i32[3] = v18.i32[2];
        v22 = vmlaq_laneq_f32(v20, v21, v16, 2);
        v23 = (int32x4_t)vnegq_f32(v22);
        v24 = (int8x16_t)vtrn2q_s32((int32x4_t)v22, vtrn1q_s32((int32x4_t)v22, v23));
        v25 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v23, 8uLL), *(float32x2_t *)v15.f32, 1), (float32x4_t)vextq_s8(v24, v24, 8uLL), v15.f32[0]);
        v26 = (float32x4_t)vrev64q_s32((int32x4_t)v22);
        v26.i32[0] = v23.i32[1];
        v26.i32[3] = v23.i32[2];
        *(float32x4_t *)&v5[v4] = vaddq_f32(*(float32x4_t *)&v5[16 * v7], vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v22, v15, 3), v26, v15, 2), v25));
      }
      v4 += 16;
    }
    while (v4 != 432);
    *v2 = 1;
  }
  return (uint64_t)this + 3776;
}

void sub_23D6B12D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_23D6B1468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23D6B1520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23D6B167C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_23D6B1754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23D6B188C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_23D6B19B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23D6B1ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23D6B1B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_23D6B1BD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23D6B1C78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23D6B1DF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23D6B1E70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

Swift::Void __swiftcall GenericAccidental.reset()()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  int32x2_t v4;
  int32x2_t v5;
  _OWORD v6[3];
  char v7;
  _OWORD v8[3];
  _OWORD v9[2];

  v1 = *(_OWORD *)(v0 + 88);
  v2 = *(_OWORD *)(v0 + 120);
  v8[2] = *(_OWORD *)(v0 + 104);
  v9[0] = v2;
  *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)(v0 + 132);
  v8[0] = *(_OWORD *)(v0 + 72);
  v8[1] = v1;
  specialized GenericAccidental.InternalStates.init(_:)((uint64_t)v8, (uint64_t)v6);
  v3 = v6[1];
  *(_OWORD *)(v0 + 16) = v6[0];
  *(_OWORD *)(v0 + 32) = v3;
  *(_OWORD *)(v0 + 48) = v6[2];
  *(_BYTE *)(v0 + 64) = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4.i32[0] = 0;
  *(_QWORD *)(v0 + 16) = specialized Array.init(repeating:count:)(*(_QWORD *)(v0 + 80), v4);
  swift_bridgeObjectRelease();
  v5.i32[0] = 0;
  *(_QWORD *)(v0 + 24) = specialized Array.init(repeating:count:)(*(_QWORD *)(v0 + 88), v5);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 162) = 0;
}

uint64_t GenericAccidental.process(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v5;
  uint64_t result;

  GenericAccidental.updateMovementStates(_:_:)(a1, (uint64_t)a2);
  *(_BYTE *)(v2 + 64) = 0;
  v5 = GenericAccidental.checkIfAccidental(_:_:)(a1, a2);
  if (v5 > 0xC)
    return 0;
  result = 1;
  if (((1 << v5) & 0x340) != 0)
  {
    result = 0;
    *(_BYTE *)(v2 + 64) = 1;
    return result;
  }
  if (((1 << v5) & 0x1800) == 0)
    return 0;
  return result;
}

uint64_t GenericAccidental.checkIfAccidental(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v6;
  uint64_t v7;
  float *v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 16);
  if (!v4)
    return 0;
  v6 = *(float *)(v3 + 32);
  v7 = v4 - 1;
  if (v7)
  {
    v8 = (float *)(v3 + 36);
    do
    {
      v9 = *v8++;
      v10 = v9;
      if (v9 < v6)
        v6 = v10;
      --v7;
    }
    while (v7);
  }
  v11 = a2[2];
  if (v11 >= *(_QWORD *)(v2 + 120))
    return 4;
  if (*(_QWORD *)(v2 + 56) >= *(_QWORD *)(v2 + 128))
    return 10;
  v12 = *(unsigned __int8 *)(a1 + 112);
  v13 = specialized Sequence<>.max()(a2[1]);
  if ((v13 & 0x100000000) != 0)
  {
    v15 = *(_QWORD *)(v2 + 56);
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
    {
      __break(1u);
      JUMPOUT(0x23D6B2268);
    }
    *(_QWORD *)(v2 + 56) = v17;
    return 2;
  }
  if (*(float *)(v2 + 72) <= *(float *)&v13)
    return 2;
  if (*(float *)(v2 + 96) > v6 && (*(_BYTE *)(v2 + 162) != 1 || *(float *)(v2 + 144) > v6))
    return 1;
  if (v11 < 1)
    return 3;
  if ((*((_BYTE *)a2 + 25) & 1) != 0)
    return 5;
  if ((*((_BYTE *)a2 + 26) & 1) == 0)
    return 7;
  GenericAccidental.checkForLowHoverDistancePeriod(_:)(v6);
  if ((*(_BYTE *)(v2 + 36) & 1) == 0)
    __asm { BR              X9 }
  return 6;
}

void GenericAccidental.updateMovementStates(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _OWORD v16[10];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];

  v4 = *(_OWORD *)(a1 + 48);
  v16[2] = *(_OWORD *)(a1 + 32);
  v16[3] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v5;
  v6 = *(_OWORD *)(a1 + 144);
  v16[8] = *(_OWORD *)(a1 + 128);
  v16[9] = v6;
  v7 = *(_OWORD *)(a1 + 112);
  v16[6] = *(_OWORD *)(a1 + 96);
  v16[7] = v7;
  v19 = *(_OWORD *)(a1 + 176);
  v8 = *(_OWORD *)(a1 + 312);
  v27 = *(_OWORD *)(a1 + 296);
  v28[0] = v8;
  *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)(a1 + 321);
  v9 = *(_OWORD *)(a1 + 280);
  v25 = *(_OWORD *)(a1 + 264);
  v26 = v9;
  v22 = *(_OWORD *)(a1 + 216);
  v23 = *(_OWORD *)(a1 + 232);
  v24 = *(_OWORD *)(a1 + 248);
  v21 = *(_OWORD *)(a1 + 200);
  v10 = *(_OWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 160);
  v12 = *(_QWORD *)(a1 + 168);
  v13 = *(_QWORD *)(a1 + 192);
  v16[4] = *(_OWORD *)(a1 + 64);
  v16[5] = v10;
  v15 = v10;
  v17 = v11;
  v18 = v12;
  v20 = v13;
  specialized GenericAccidental.isHandStatic(_:)((uint64_t)v16);
  if ((v14 & 1) != 0 && (*(_BYTE *)(a2 + 24) & 1) == 0)
  {
    *(_BYTE *)(v2 + 160) = 1;
    *(_BYTE *)(v2 + 162) = 0;
    *(_OWORD *)(v2 + 176) = v15;
    *(_BYTE *)(v2 + 192) = 0;
  }
  if (*(_QWORD *)(v13 + 16) >= 2uLL)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x23D6B245CLL);
}

uint64_t GenericAccidental.isPossibleDroppingHand(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v1 + 136) == 1 && (*(_BYTE *)(v1 + 192) & 1) == 0)
  {
    v2 = *(_QWORD *)(result + 192);
    if (*(_QWORD *)(v2 + 16) >= 2uLL)
      __asm { BR              X10 }
    __break(1u);
    JUMPOUT(0x23D6B25CCLL);
  }
  return result;
}

Swift::Void __swiftcall GenericAccidental.checkForLowHoverDistancePeriod(_:)(Swift::Float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (*(_BYTE *)(v1 + 36) == 1)
  {
    v2 = *(_QWORD *)(v1 + 40);
  }
  else if (*(float *)(v1 + 112) >= a1)
  {
    v3 = *(_QWORD *)(v1 + 40);
    v4 = __OFADD__(v3, 1);
    v2 = v3 + 1;
    if (v4)
    {
      __break(1u);
      return;
    }
    *(_QWORD *)(v1 + 40) = v2;
  }
  else
  {
    v2 = 0;
    *(_QWORD *)(v1 + 40) = 0;
  }
  if (v2 >= *(_QWORD *)(v1 + 104))
    *(_BYTE *)(v1 + 36) = 1;
}

uint64_t GenericAccidental.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void protocol witness for PinchCancellationModule.reset() in conformance GenericAccidental()
{
  GenericAccidental.reset()();
}

uint64_t protocol witness for PinchCancellationModule.process(_:_:) in conformance GenericAccidental(uint64_t a1, uint64_t *a2)
{
  return GenericAccidental.process(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for PinchCancellationModule.updateAtMake(_:) in conformance GenericAccidental(uint64_t a1)
{
  GenericAccidental.reset()();
  return GenericAccidental.isPossibleDroppingHand(_:)(a1);
}

uint64_t protocol witness for PinchCancellationModule.shouldBreakOnly() in conformance GenericAccidental()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 64);
}

uint64_t default argument 0 of WarperMeshGenerator.createNoopCoverGlassBin(gridSize:)()
{
  return 41;
}

uint64_t default argument 0 of WarperMeshGenerator.getNoopCoverGlassBin(gridSize:)()
{
  return 41;
}

uint64_t default argument 0 of WarperMeshGenerator.getNoopCoverGlassMesh(gridSize:)()
{
  return 41;
}

double default argument 4 of static HLog.I(file:function:line:privacy:logArea:_:_:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void default argument 0 of HandyLoggerOSSinkNeo.init(config:)(_WORD *a1@<X8>)
{
  *a1 = 258;
}

uint64_t default argument 0 of LUTWarper.init(imageWidth:imageHeight:)()
{
  return 1280;
}

uint64_t default argument 1 of LUTWarper.init(imageWidth:imageHeight:)()
{
  return 1280;
}

void default argument 5 of VideoDataStructs.CalibrationData.init(intrinsicCalibration:distortionParameters:cameraToHeadsetTransform:arrivalTimeStamp:imageSize:cameraModel:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t default argument 1 of VideoDataStructs.CameraTrackInfo.init(streamName:hasFrameID:)()
{
  return 1;
}

uint64_t default argument 1 of static VideoDataStructs.CameraTrackInfo.createWarpedStreamKey(for:asBinned:)()
{
  return 0;
}

float default argument 0 of JpegEncoder.init(quality:)()
{
  return 0.5;
}

double default argument 4 of static HLog.E(file:function:line:privacy:logArea:_:_:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t default argument 3 of static HLog.V(file:function:line:privacy:logArea:_:_:)()
{
  return 1;
}

double default argument 4 of static HLog.V(file:function:line:privacy:logArea:_:_:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t default argument 3 of static HLog.D(file:function:line:privacy:logArea:_:_:)()
{
  return 1;
}

double default argument 4 of static HLog.D(file:function:line:privacy:logArea:_:_:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t default argument 3 of static HLog.I(file:function:line:privacy:logArea:_:_:)()
{
  return 1;
}

uint64_t default argument 3 of static HLog.W(file:function:line:privacy:logArea:_:_:)()
{
  return 1;
}

double default argument 4 of static HLog.W(file:function:line:privacy:logArea:_:_:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t default argument 3 of static HLog.E(file:function:line:privacy:logArea:_:_:)()
{
  return 1;
}

uint64_t default argument 3 of static HLog.F(file:function:line:privacy:logArea:_:_:)()
{
  return 1;
}

double default argument 4 of static HLog.F(file:function:line:privacy:logArea:_:_:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t default argument 2 of static CameraStreamUtils.findKey(forCameraSource:warped:mode640:binned:streamSource:)()
{
  return 0;
}

uint64_t default argument 3 of static CameraStreamUtils.findKey(forCameraSource:warped:mode640:binned:streamSource:)()
{
  return 0;
}

void default argument 4 of static CameraStreamUtils.findKey(forCameraSource:warped:mode640:binned:streamSource:)(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t type metadata accessor for GenericAccidental()
{
  return objc_opt_self();
}

void type metadata accessor for simd_quatf(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for simd_quatf);
}

void type metadata accessor for PosePipelineType(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for PosePipelineType);
}

void type metadata accessor for DisabledHandConfig(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for DisabledHandConfig);
}

void type metadata accessor for VTCompressionSessionRef(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for VTCompressionSessionRef);
}

__n128 __swift_memcpy48_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CMTimeRange(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CMTimeRange(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CMTimeRange(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for CMTimeRange);
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_float4x3(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for simd_float4x3(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x3(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for simd_float4x3);
}

void type metadata accessor for VTDecompressionSessionRef(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for VTDecompressionSessionRef);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for MTLSize(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for MTLSize(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for MTLSize);
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HandsMissingFingerBitMap(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HandsMissingFingerBitMap(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for HandsMissingFingerBitMap(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for HandsMissingFingerBitMap);
}

void type metadata accessor for VTPixelTransferSessionRef(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for VTPixelTransferSessionRef);
}

void type metadata accessor for ARVinoJointIndexes(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for ARVinoJointIndexes);
}

__n128 __swift_memcpy168_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for espresso_buffer_t(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 168))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for espresso_buffer_t(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 168) = v3;
  return result;
}

void type metadata accessor for espresso_buffer_t(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for espresso_buffer_t);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for espresso_network_t(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for espresso_network_t(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for espresso_network_t(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for espresso_network_t);
}

void type metadata accessor for CFDictionaryRef(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for CFDictionaryRef);
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for IOSurfaceRef);
}

void type metadata accessor for CVPixelBufferPoolRef(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for CVPixelBufferPoolRef);
}

__n128 __swift_memcpy33_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for GenericAccidental.MovementStates(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[33])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericAccidental.MovementStates(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericAccidental.MovementStates()
{
  return &type metadata for GenericAccidental.MovementStates;
}

__n128 __swift_memcpy76_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for GenericAccidental.ThresholdConfig(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 76))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 64);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericAccidental.ThresholdConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 76) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 76) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericAccidental.ThresholdConfig()
{
  return &type metadata for GenericAccidental.ThresholdConfig;
}

uint64_t initializeBufferWithCopyOfBuffer for GenericAccidental.InternalStates(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for GenericAccidental.InternalStates()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GenericAccidental.InternalStates(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GenericAccidental.InternalStates(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GenericAccidental.InternalStates(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericAccidental.InternalStates(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericAccidental.InternalStates(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericAccidental.InternalStates()
{
  return &type metadata for GenericAccidental.InternalStates;
}

__n128 __swift_memcpy24_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CMTime(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for CMTime(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for CMTime);
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for simd_float3x3);
}

void type metadata accessor for IOSurfacePropertyKey(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for IOSurfacePropertyKey);
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for simd_float4x4);
}

void type metadata accessor for CVBufferRef(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for CVBufferRef);
}

void type metadata accessor for HandyLoggerPrivacyLevel(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for HandyLoggerPrivacyLevel);
}

void type metadata accessor for HandyLoggerLogLevel(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for HandyLoggerLogLevel);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for CFStringRef);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  MEMORY[0x242638C74](&protocol conformance descriptor for CFStringRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  MEMORY[0x242638C74](&protocol conformance descriptor for CFStringRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PosePipelineType(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CVBufferRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x242638C74](&protocol conformance descriptor for CVBufferRef, a3);
  return static _CFObject.== infix(_:_:)();
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance PosePipelineType@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PosePipelineType(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance ARVinoJointIndexes@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ARVinoJointIndexes(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ARVinoJointIndexes(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance IOSurfacePropertyKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance IOSurfacePropertyKey(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance IOSurfacePropertyKey(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance IOSurfacePropertyKey(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance IOSurfacePropertyKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x2426372E8](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance IOSurfacePropertyKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance IOSurfacePropertyKey(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BEE0CD8]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance IOSurfacePropertyKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance IOSurfacePropertyKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IOSurfacePropertyKey()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ARVinoJointIndexes()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ARVinoJointIndexes()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ARVinoJointIndexes()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x242638C74](&protocol conformance descriptor for CFStringRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in CVBufferRef()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CVBufferRef and conformance CVBufferRef, (uint64_t (*)(uint64_t))type metadata accessor for CVBufferRef, (uint64_t)&protocol conformance descriptor for CVBufferRef);
}

uint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x242638C74](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IOSurfacePropertyKey()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CVBufferRef(uint64_t a1)
{
  MEMORY[0x242638C74](&protocol conformance descriptor for CVBufferRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CVBufferRef()
{
  MEMORY[0x242638C74](&protocol conformance descriptor for CVBufferRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CVBufferRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CVBufferRef);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  MEMORY[0x242638C74](a4, a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance IOSurfacePropertyKey@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x2426372E8](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance IOSurfacePropertyKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance IOSurfacePropertyKey()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type IOSurfacePropertyKey and conformance IOSurfacePropertyKey, (uint64_t (*)(uint64_t))type metadata accessor for IOSurfacePropertyKey, (uint64_t)&protocol conformance descriptor for IOSurfacePropertyKey);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type IOSurfacePropertyKey and conformance IOSurfacePropertyKey, (uint64_t (*)(uint64_t))type metadata accessor for IOSurfacePropertyKey, (uint64_t)&protocol conformance descriptor for IOSurfacePropertyKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t base witness table accessor for RawRepresentable in IOSurfacePropertyKey()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type IOSurfacePropertyKey and conformance IOSurfacePropertyKey, (uint64_t (*)(uint64_t))type metadata accessor for IOSurfacePropertyKey, (uint64_t)&protocol conformance descriptor for IOSurfacePropertyKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in IOSurfacePropertyKey()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type IOSurfacePropertyKey and conformance IOSurfacePropertyKey, (uint64_t (*)(uint64_t))type metadata accessor for IOSurfacePropertyKey, (uint64_t)&protocol conformance descriptor for IOSurfacePropertyKey);
}

uint64_t base witness table accessor for Equatable in ARVinoJointIndexes()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type ARVinoJointIndexes and conformance ARVinoJointIndexes, (uint64_t (*)(uint64_t))type metadata accessor for ARVinoJointIndexes, (uint64_t)&protocol conformance descriptor for ARVinoJointIndexes);
}

uint64_t base witness table accessor for Equatable in IOSurfacePropertyKey()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type IOSurfacePropertyKey and conformance IOSurfacePropertyKey, (uint64_t (*)(uint64_t))type metadata accessor for IOSurfacePropertyKey, (uint64_t)&protocol conformance descriptor for IOSurfacePropertyKey);
}

uint64_t base witness table accessor for Hashable in CVBufferRef()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CVBufferRef and conformance CVBufferRef, (uint64_t (*)(uint64_t))type metadata accessor for CVBufferRef, (uint64_t)&protocol conformance descriptor for CVBufferRef);
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t specialized GenericAccidental.InternalStates.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int32x2_t v6;
  uint64_t v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v4 + 16) = 2;
  *(_QWORD *)(v4 + 32) = 0;
  v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v5 + 16) = 3;
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 40) = 0;
  v6.i32[0] = 0;
  v7 = specialized Array.init(repeating:count:)(*(_QWORD *)(a1 + 8), v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8.i32[0] = 0;
  v9 = specialized Array.init(repeating:count:)(*(_QWORD *)(a1 + 16), v8);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

void specialized GenericAccidental.isHandStatic(_:)(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 192);
  if (*(_QWORD *)(v1 + 16))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x23D6B3BE8);
}

void type metadata accessor for e5rt_error_code_t(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for e5rt_error_code_t);
}

void type metadata accessor for CMTimeFlags(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, &lazy cache variable for type metadata for CMTimeFlags);
}

void type metadata accessor for espresso_storage_type_t(uint64_t a1)
{
  type metadata accessor for simd_quatf(a1, (unint64_t *)&lazy cache variable for type metadata for espresso_storage_type_t);
}

void type metadata accessor for simd_quatf(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HandPoseBuilderError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance HandPoseBuilderError()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance HandPoseBuilderError()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HandPoseBuilderError()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void one-time initialization function for kMetaCarpelJointIndices()
{
  static HandPoseBuilder.kMetaCarpelJointIndices = (uint64_t)&outlined read-only object #0 of one-time initialization function for kMetaCarpelJointIndices;
}

void one-time initialization function for kPoseArvinoLayers()
{
  static HandPoseBuilder.kPoseArvinoLayers = (uint64_t)&outlined read-only object #0 of one-time initialization function for kPoseArvinoLayers;
}

void one-time initialization function for kPrevJointIsWrist()
{
  static HandPoseBuilder.kPrevJointIsWrist = (uint64_t)&outlined read-only object #0 of one-time initialization function for kPrevJointIsWrist;
}

uint64_t HandPoseBuilder.init(_:_:_:_:)(char a1, int a2, char a3, float a4)
{
  uint64_t v4;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[12];
  _BYTE v19[176];

  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v4 + 32) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v4 + 40) = v9;
  *(_QWORD *)(v4 + 48) = v9;
  *(_QWORD *)(v4 + 56) = v9;
  *(_QWORD *)(v4 + 64) = v9;
  *(_QWORD *)(v4 + 72) = specialized Dictionary.init(dictionaryLiteral:)(v9);
  v10 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v11 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v12 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  *(_OWORD *)(v4 + 80) = *MEMORY[0x24BDAEE00];
  *(_OWORD *)(v4 + 96) = v10;
  *(_OWORD *)(v4 + 112) = v11;
  *(_OWORD *)(v4 + 128) = v12;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_WORD *)(v4 + 168) = 256;
  _s5Hands9ImageDataVSgWOi0_(v18);
  outlined init with take of ImageData?((uint64_t)v18, v4 + 176, &demangling cache variable for type metadata for ImageData?);
  outlined init with take of ImageData?((uint64_t)v18, v4 + 368, &demangling cache variable for type metadata for ImageData?);
  *(_OWORD *)(v4 + 560) = 0u;
  *(_OWORD *)(v4 + 576) = 0u;
  *(_WORD *)(v4 + 592) = 1;
  _s5Hands13PoseImageCropVSgWOi0_((uint64_t)v19);
  outlined init with take of ImageData?((uint64_t)v19, v4 + 608, &demangling cache variable for type metadata for PoseImageCrop?);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v4 + 72) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, isUniquelyReferenced_nonNull_native, (__n128)xmmword_23D9A3E10, (__n128)xmmword_23D9A3E20, (__n128)xmmword_23D9A3E30, (__n128)xmmword_23D9A3E90);
  *(_QWORD *)(v4 + 72) = v16;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  v14 = swift_isUniquelyReferenced_nonNull_native();
  v17 = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v4 + 72) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v14, (__n128)xmmword_23D9A6C90, (__n128)xmmword_23D9A6CA0, (__n128)xmmword_23D9A6CB0, (__n128)xmmword_23D9A3E90);
  *(_QWORD *)(v4 + 72) = v17;
  swift_bridgeObjectRelease();
  swift_endAccess();
  *(float *)(v4 + 16) = a4;
  *(_BYTE *)(v4 + 20) = a1;
  *(_DWORD *)(v4 + 24) = a2;
  *(_BYTE *)(v4 + 28) = a3;
  HandPoseBuilder.reset()();
  return v4;
}

Swift::Void __swiftcall HandPoseBuilder.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[12];
  _QWORD v12[24];
  _QWORD v13[24];
  _BYTE v14[176];
  _BYTE v15[176];

  v9 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v10 = *MEMORY[0x24BDAEE00];
  v7 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v8 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  type metadata accessor for simd_float4x4(0);
  v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v1 + 16) = 27;
  *(_OWORD *)(v1 + 32) = v10;
  *(_OWORD *)(v1 + 48) = v9;
  *(_OWORD *)(v1 + 64) = v8;
  *(_OWORD *)(v1 + 80) = v7;
  *(_OWORD *)(v1 + 96) = v10;
  *(_OWORD *)(v1 + 112) = v9;
  *(_OWORD *)(v1 + 128) = v8;
  *(_OWORD *)(v1 + 144) = v7;
  *(_OWORD *)(v1 + 160) = v10;
  *(_OWORD *)(v1 + 176) = v9;
  *(_OWORD *)(v1 + 192) = v8;
  *(_OWORD *)(v1 + 208) = v7;
  *(_OWORD *)(v1 + 224) = v10;
  *(_OWORD *)(v1 + 240) = v9;
  *(_OWORD *)(v1 + 256) = v8;
  *(_OWORD *)(v1 + 272) = v7;
  *(_OWORD *)(v1 + 288) = v10;
  *(_OWORD *)(v1 + 304) = v9;
  *(_OWORD *)(v1 + 320) = v8;
  *(_OWORD *)(v1 + 336) = v7;
  *(_OWORD *)(v1 + 352) = v10;
  *(_OWORD *)(v1 + 368) = v9;
  *(_OWORD *)(v1 + 384) = v8;
  *(_OWORD *)(v1 + 400) = v7;
  *(_OWORD *)(v1 + 416) = v10;
  *(_OWORD *)(v1 + 432) = v9;
  *(_OWORD *)(v1 + 448) = v8;
  *(_OWORD *)(v1 + 464) = v7;
  *(_OWORD *)(v1 + 480) = v10;
  *(_OWORD *)(v1 + 496) = v9;
  *(_OWORD *)(v1 + 512) = v8;
  *(_OWORD *)(v1 + 528) = v7;
  *(_OWORD *)(v1 + 544) = v10;
  *(_OWORD *)(v1 + 560) = v9;
  *(_OWORD *)(v1 + 576) = v8;
  *(_OWORD *)(v1 + 592) = v7;
  *(_OWORD *)(v1 + 608) = v10;
  *(_OWORD *)(v1 + 624) = v9;
  *(_OWORD *)(v1 + 640) = v8;
  *(_OWORD *)(v1 + 656) = v7;
  *(_OWORD *)(v1 + 672) = v10;
  *(_OWORD *)(v1 + 688) = v9;
  *(_OWORD *)(v1 + 704) = v8;
  *(_OWORD *)(v1 + 720) = v7;
  *(_OWORD *)(v1 + 736) = v10;
  *(_OWORD *)(v1 + 752) = v9;
  *(_OWORD *)(v1 + 768) = v8;
  *(_OWORD *)(v1 + 784) = v7;
  *(_OWORD *)(v1 + 800) = v10;
  *(_OWORD *)(v1 + 816) = v9;
  *(_OWORD *)(v1 + 832) = v8;
  *(_OWORD *)(v1 + 848) = v7;
  *(_OWORD *)(v1 + 864) = v10;
  *(_OWORD *)(v1 + 880) = v9;
  *(_OWORD *)(v1 + 896) = v8;
  *(_OWORD *)(v1 + 912) = v7;
  *(_OWORD *)(v1 + 928) = v10;
  *(_OWORD *)(v1 + 944) = v9;
  *(_OWORD *)(v1 + 960) = v8;
  *(_OWORD *)(v1 + 976) = v7;
  *(_OWORD *)(v1 + 992) = v10;
  *(_OWORD *)(v1 + 1008) = v9;
  *(_OWORD *)(v1 + 1024) = v8;
  *(_OWORD *)(v1 + 1040) = v7;
  *(_OWORD *)(v1 + 1056) = v10;
  *(_OWORD *)(v1 + 1072) = v9;
  *(_OWORD *)(v1 + 1088) = v8;
  *(_OWORD *)(v1 + 1104) = v7;
  *(_OWORD *)(v1 + 1120) = v10;
  *(_OWORD *)(v1 + 1136) = v9;
  *(_OWORD *)(v1 + 1152) = v8;
  *(_OWORD *)(v1 + 1168) = v7;
  *(_OWORD *)(v1 + 1184) = v10;
  *(_OWORD *)(v1 + 1200) = v9;
  *(_OWORD *)(v1 + 1216) = v8;
  *(_OWORD *)(v1 + 1232) = v7;
  *(_OWORD *)(v1 + 1248) = v10;
  *(_OWORD *)(v1 + 1264) = v9;
  *(_OWORD *)(v1 + 1280) = v8;
  *(_OWORD *)(v1 + 1296) = v7;
  *(_OWORD *)(v1 + 1312) = v10;
  *(_OWORD *)(v1 + 1328) = v9;
  *(_OWORD *)(v1 + 1344) = v8;
  *(_OWORD *)(v1 + 1360) = v7;
  *(_OWORD *)(v1 + 1376) = v10;
  *(_OWORD *)(v1 + 1392) = v9;
  *(_OWORD *)(v1 + 1408) = v8;
  *(_OWORD *)(v1 + 1424) = v7;
  *(_OWORD *)(v1 + 1440) = v10;
  *(_OWORD *)(v1 + 1456) = v9;
  *(_OWORD *)(v1 + 1472) = v8;
  *(_OWORD *)(v1 + 1488) = v7;
  *(_OWORD *)(v1 + 1504) = v10;
  *(_OWORD *)(v1 + 1520) = v9;
  *(_OWORD *)(v1 + 1536) = v8;
  *(_OWORD *)(v1 + 1552) = v7;
  *(_OWORD *)(v1 + 1568) = v10;
  *(_OWORD *)(v1 + 1584) = v9;
  *(_OWORD *)(v1 + 1600) = v8;
  *(_OWORD *)(v1 + 1616) = v7;
  *(_OWORD *)(v1 + 1632) = v10;
  *(_OWORD *)(v1 + 1648) = v9;
  *(_OWORD *)(v1 + 1664) = v8;
  *(_OWORD *)(v1 + 1680) = v7;
  *(_OWORD *)(v1 + 1696) = v10;
  *(_OWORD *)(v1 + 1712) = v9;
  *(_OWORD *)(v1 + 1728) = v8;
  *(_OWORD *)(v1 + 1744) = v7;
  swift_beginAccess();
  *(_QWORD *)(v0 + 32) = v1;
  swift_bridgeObjectRelease();
  v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v2 + 16) = 27;
  *(_OWORD *)(v2 + 32) = v10;
  *(_OWORD *)(v2 + 48) = v9;
  *(_OWORD *)(v2 + 64) = v8;
  *(_OWORD *)(v2 + 80) = v7;
  *(_OWORD *)(v2 + 96) = v10;
  *(_OWORD *)(v2 + 112) = v9;
  *(_OWORD *)(v2 + 128) = v8;
  *(_OWORD *)(v2 + 144) = v7;
  *(_OWORD *)(v2 + 160) = v10;
  *(_OWORD *)(v2 + 176) = v9;
  *(_OWORD *)(v2 + 192) = v8;
  *(_OWORD *)(v2 + 208) = v7;
  *(_OWORD *)(v2 + 224) = v10;
  *(_OWORD *)(v2 + 240) = v9;
  *(_OWORD *)(v2 + 256) = v8;
  *(_OWORD *)(v2 + 272) = v7;
  *(_OWORD *)(v2 + 288) = v10;
  *(_OWORD *)(v2 + 304) = v9;
  *(_OWORD *)(v2 + 320) = v8;
  *(_OWORD *)(v2 + 336) = v7;
  *(_OWORD *)(v2 + 352) = v10;
  *(_OWORD *)(v2 + 368) = v9;
  *(_OWORD *)(v2 + 384) = v8;
  *(_OWORD *)(v2 + 400) = v7;
  *(_OWORD *)(v2 + 416) = v10;
  *(_OWORD *)(v2 + 432) = v9;
  *(_OWORD *)(v2 + 448) = v8;
  *(_OWORD *)(v2 + 464) = v7;
  *(_OWORD *)(v2 + 480) = v10;
  *(_OWORD *)(v2 + 496) = v9;
  *(_OWORD *)(v2 + 512) = v8;
  *(_OWORD *)(v2 + 528) = v7;
  *(_OWORD *)(v2 + 544) = v10;
  *(_OWORD *)(v2 + 560) = v9;
  *(_OWORD *)(v2 + 576) = v8;
  *(_OWORD *)(v2 + 592) = v7;
  *(_OWORD *)(v2 + 608) = v10;
  *(_OWORD *)(v2 + 624) = v9;
  *(_OWORD *)(v2 + 640) = v8;
  *(_OWORD *)(v2 + 656) = v7;
  *(_OWORD *)(v2 + 672) = v10;
  *(_OWORD *)(v2 + 688) = v9;
  *(_OWORD *)(v2 + 704) = v8;
  *(_OWORD *)(v2 + 720) = v7;
  *(_OWORD *)(v2 + 736) = v10;
  *(_OWORD *)(v2 + 752) = v9;
  *(_OWORD *)(v2 + 768) = v8;
  *(_OWORD *)(v2 + 784) = v7;
  *(_OWORD *)(v2 + 800) = v10;
  *(_OWORD *)(v2 + 816) = v9;
  *(_OWORD *)(v2 + 832) = v8;
  *(_OWORD *)(v2 + 848) = v7;
  *(_OWORD *)(v2 + 864) = v10;
  *(_OWORD *)(v2 + 880) = v9;
  *(_OWORD *)(v2 + 896) = v8;
  *(_OWORD *)(v2 + 912) = v7;
  *(_OWORD *)(v2 + 928) = v10;
  *(_OWORD *)(v2 + 944) = v9;
  *(_OWORD *)(v2 + 960) = v8;
  *(_OWORD *)(v2 + 976) = v7;
  *(_OWORD *)(v2 + 992) = v10;
  *(_OWORD *)(v2 + 1008) = v9;
  *(_OWORD *)(v2 + 1024) = v8;
  *(_OWORD *)(v2 + 1040) = v7;
  *(_OWORD *)(v2 + 1056) = v10;
  *(_OWORD *)(v2 + 1072) = v9;
  *(_OWORD *)(v2 + 1088) = v8;
  *(_OWORD *)(v2 + 1104) = v7;
  *(_OWORD *)(v2 + 1120) = v10;
  *(_OWORD *)(v2 + 1136) = v9;
  *(_OWORD *)(v2 + 1152) = v8;
  *(_OWORD *)(v2 + 1168) = v7;
  *(_OWORD *)(v2 + 1184) = v10;
  *(_OWORD *)(v2 + 1200) = v9;
  *(_OWORD *)(v2 + 1216) = v8;
  *(_OWORD *)(v2 + 1232) = v7;
  *(_OWORD *)(v2 + 1248) = v10;
  *(_OWORD *)(v2 + 1264) = v9;
  *(_OWORD *)(v2 + 1280) = v8;
  *(_OWORD *)(v2 + 1296) = v7;
  *(_OWORD *)(v2 + 1312) = v10;
  *(_OWORD *)(v2 + 1328) = v9;
  *(_OWORD *)(v2 + 1344) = v8;
  *(_OWORD *)(v2 + 1360) = v7;
  *(_OWORD *)(v2 + 1376) = v10;
  *(_OWORD *)(v2 + 1392) = v9;
  *(_OWORD *)(v2 + 1408) = v8;
  *(_OWORD *)(v2 + 1424) = v7;
  *(_OWORD *)(v2 + 1440) = v10;
  *(_OWORD *)(v2 + 1456) = v9;
  *(_OWORD *)(v2 + 1472) = v8;
  *(_OWORD *)(v2 + 1488) = v7;
  *(_OWORD *)(v2 + 1504) = v10;
  *(_OWORD *)(v2 + 1520) = v9;
  *(_OWORD *)(v2 + 1536) = v8;
  *(_OWORD *)(v2 + 1552) = v7;
  *(_OWORD *)(v2 + 1568) = v10;
  *(_OWORD *)(v2 + 1584) = v9;
  *(_OWORD *)(v2 + 1600) = v8;
  *(_OWORD *)(v2 + 1616) = v7;
  *(_OWORD *)(v2 + 1632) = v10;
  *(_OWORD *)(v2 + 1648) = v9;
  *(_OWORD *)(v2 + 1664) = v8;
  *(_OWORD *)(v2 + 1680) = v7;
  *(_OWORD *)(v2 + 1696) = v10;
  *(_OWORD *)(v2 + 1712) = v9;
  *(_OWORD *)(v2 + 1728) = v8;
  *(_OWORD *)(v2 + 1744) = v7;
  swift_beginAccess();
  *(_QWORD *)(v0 + 40) = v2;
  swift_bridgeObjectRelease();
  v3 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v3 + 16) = 27;
  *(_OWORD *)(v3 + 32) = v10;
  *(_OWORD *)(v3 + 48) = v9;
  *(_OWORD *)(v3 + 64) = v8;
  *(_OWORD *)(v3 + 80) = v7;
  *(_OWORD *)(v3 + 96) = v10;
  *(_OWORD *)(v3 + 112) = v9;
  *(_OWORD *)(v3 + 128) = v8;
  *(_OWORD *)(v3 + 144) = v7;
  *(_OWORD *)(v3 + 160) = v10;
  *(_OWORD *)(v3 + 176) = v9;
  *(_OWORD *)(v3 + 192) = v8;
  *(_OWORD *)(v3 + 208) = v7;
  *(_OWORD *)(v3 + 224) = v10;
  *(_OWORD *)(v3 + 240) = v9;
  *(_OWORD *)(v3 + 256) = v8;
  *(_OWORD *)(v3 + 272) = v7;
  *(_OWORD *)(v3 + 288) = v10;
  *(_OWORD *)(v3 + 304) = v9;
  *(_OWORD *)(v3 + 320) = v8;
  *(_OWORD *)(v3 + 336) = v7;
  *(_OWORD *)(v3 + 352) = v10;
  *(_OWORD *)(v3 + 368) = v9;
  *(_OWORD *)(v3 + 384) = v8;
  *(_OWORD *)(v3 + 400) = v7;
  *(_OWORD *)(v3 + 416) = v10;
  *(_OWORD *)(v3 + 432) = v9;
  *(_OWORD *)(v3 + 448) = v8;
  *(_OWORD *)(v3 + 464) = v7;
  *(_OWORD *)(v3 + 480) = v10;
  *(_OWORD *)(v3 + 496) = v9;
  *(_OWORD *)(v3 + 512) = v8;
  *(_OWORD *)(v3 + 528) = v7;
  *(_OWORD *)(v3 + 544) = v10;
  *(_OWORD *)(v3 + 560) = v9;
  *(_OWORD *)(v3 + 576) = v8;
  *(_OWORD *)(v3 + 592) = v7;
  *(_OWORD *)(v3 + 608) = v10;
  *(_OWORD *)(v3 + 624) = v9;
  *(_OWORD *)(v3 + 640) = v8;
  *(_OWORD *)(v3 + 656) = v7;
  *(_OWORD *)(v3 + 672) = v10;
  *(_OWORD *)(v3 + 688) = v9;
  *(_OWORD *)(v3 + 704) = v8;
  *(_OWORD *)(v3 + 720) = v7;
  *(_OWORD *)(v3 + 736) = v10;
  *(_OWORD *)(v3 + 752) = v9;
  *(_OWORD *)(v3 + 768) = v8;
  *(_OWORD *)(v3 + 784) = v7;
  *(_OWORD *)(v3 + 800) = v10;
  *(_OWORD *)(v3 + 816) = v9;
  *(_OWORD *)(v3 + 832) = v8;
  *(_OWORD *)(v3 + 848) = v7;
  *(_OWORD *)(v3 + 864) = v10;
  *(_OWORD *)(v3 + 880) = v9;
  *(_OWORD *)(v3 + 896) = v8;
  *(_OWORD *)(v3 + 912) = v7;
  *(_OWORD *)(v3 + 928) = v10;
  *(_OWORD *)(v3 + 944) = v9;
  *(_OWORD *)(v3 + 960) = v8;
  *(_OWORD *)(v3 + 976) = v7;
  *(_OWORD *)(v3 + 992) = v10;
  *(_OWORD *)(v3 + 1008) = v9;
  *(_OWORD *)(v3 + 1024) = v8;
  *(_OWORD *)(v3 + 1040) = v7;
  *(_OWORD *)(v3 + 1056) = v10;
  *(_OWORD *)(v3 + 1072) = v9;
  *(_OWORD *)(v3 + 1088) = v8;
  *(_OWORD *)(v3 + 1104) = v7;
  *(_OWORD *)(v3 + 1120) = v10;
  *(_OWORD *)(v3 + 1136) = v9;
  *(_OWORD *)(v3 + 1152) = v8;
  *(_OWORD *)(v3 + 1168) = v7;
  *(_OWORD *)(v3 + 1184) = v10;
  *(_OWORD *)(v3 + 1200) = v9;
  *(_OWORD *)(v3 + 1216) = v8;
  *(_OWORD *)(v3 + 1232) = v7;
  *(_OWORD *)(v3 + 1248) = v10;
  *(_OWORD *)(v3 + 1264) = v9;
  *(_OWORD *)(v3 + 1280) = v8;
  *(_OWORD *)(v3 + 1296) = v7;
  *(_OWORD *)(v3 + 1312) = v10;
  *(_OWORD *)(v3 + 1328) = v9;
  *(_OWORD *)(v3 + 1344) = v8;
  *(_OWORD *)(v3 + 1360) = v7;
  *(_OWORD *)(v3 + 1376) = v10;
  *(_OWORD *)(v3 + 1392) = v9;
  *(_OWORD *)(v3 + 1408) = v8;
  *(_OWORD *)(v3 + 1424) = v7;
  *(_OWORD *)(v3 + 1440) = v10;
  *(_OWORD *)(v3 + 1456) = v9;
  *(_OWORD *)(v3 + 1472) = v8;
  *(_OWORD *)(v3 + 1488) = v7;
  *(_OWORD *)(v3 + 1504) = v10;
  *(_OWORD *)(v3 + 1520) = v9;
  *(_OWORD *)(v3 + 1536) = v8;
  *(_OWORD *)(v3 + 1552) = v7;
  *(_OWORD *)(v3 + 1568) = v10;
  *(_OWORD *)(v3 + 1584) = v9;
  *(_OWORD *)(v3 + 1600) = v8;
  *(_OWORD *)(v3 + 1616) = v7;
  *(_OWORD *)(v3 + 1632) = v10;
  *(_OWORD *)(v3 + 1648) = v9;
  *(_OWORD *)(v3 + 1664) = v8;
  *(_OWORD *)(v3 + 1680) = v7;
  *(_OWORD *)(v3 + 1696) = v10;
  *(_OWORD *)(v3 + 1712) = v9;
  *(_OWORD *)(v3 + 1728) = v8;
  *(_OWORD *)(v3 + 1744) = v7;
  *(_QWORD *)(v0 + 48) = v3;
  swift_bridgeObjectRelease();
  v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int32 : Float]);
  v5 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  v5[2] = 27;
  v5[4] = v4;
  v5[5] = v4;
  v5[6] = v4;
  v5[7] = v4;
  v5[8] = v4;
  v5[9] = v4;
  v5[10] = v4;
  v5[11] = v4;
  v5[12] = v4;
  v5[13] = v4;
  v5[14] = v4;
  v5[15] = v4;
  v5[16] = v4;
  v5[17] = v4;
  v5[18] = v4;
  v5[19] = v4;
  v5[20] = v4;
  v5[21] = v4;
  v5[22] = v4;
  v5[23] = v4;
  v5[24] = v4;
  v5[25] = v4;
  v5[26] = v4;
  v5[27] = v4;
  v5[28] = v4;
  v5[29] = v4;
  v5[30] = v4;
  swift_bridgeObjectRetain_n();
  swift_beginAccess();
  *(_QWORD *)(v0 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v6 + 16) = 27;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  swift_beginAccess();
  *(_QWORD *)(v0 + 64) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 144) = 0;
  *(_BYTE *)(v0 + 169) = 1;
  _s5Hands9ImageDataVSgWOi0_(v11);
  outlined init with take of ImageData?(v0 + 176, (uint64_t)v12, &demangling cache variable for type metadata for ImageData?);
  outlined init with take of ImageData?((uint64_t)v11, v0 + 176, &demangling cache variable for type metadata for ImageData?);
  outlined retain of ImageData?(v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
  outlined init with take of ImageData?(v0 + 368, (uint64_t)v13, &demangling cache variable for type metadata for ImageData?);
  outlined init with take of ImageData?((uint64_t)v11, v0 + 368, &demangling cache variable for type metadata for ImageData?);
  outlined retain of ImageData?(v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
  *(_OWORD *)(v0 + 560) = 0u;
  *(_OWORD *)(v0 + 576) = 0u;
  *(_BYTE *)(v0 + 592) = 1;
  _s5Hands13PoseImageCropVSgWOi0_((uint64_t)v14);
  outlined init with take of ImageData?(v0 + 608, (uint64_t)v15, &demangling cache variable for type metadata for PoseImageCrop?);
  outlined init with take of ImageData?((uint64_t)v14, v0 + 608, &demangling cache variable for type metadata for PoseImageCrop?);
  outlined retain of PoseImageCrop?((uint64_t)v15, outlined consume of PoseImageCrop?);
}

uint64_t HandPoseBuilder.set(Hand:withHandsKitData:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char v42;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[12];
  _QWORD v47[11];
  _OWORD v48[9];
  _OWORD v49[2];
  _BYTE v50[176];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v3 = *(_QWORD *)(a1 + 200);
  if (!v3 || *(_QWORD *)(v3 + 16) != 2)
  {
    lazy protocol witness table accessor for type HandPoseBuilderError and conformance HandPoseBuilderError();
    swift_allocError();
    v42 = 1;
    goto LABEL_16;
  }
  v4 = v2;
  v6 = *(_QWORD *)(a2 + 200);
  v7 = *(_BYTE *)(a1 + 136);
  v8 = 16;
  if (v7)
    v9 = 0;
  else
    v9 = 16;
  if (!*(_BYTE *)(a1 + 136))
    v8 = 0;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_14;
  v10 = v3 + 32;
  v11 = v10 + v9;
  v12 = *(_QWORD *)v11;
  v13 = *(unsigned __int8 *)(v11 + 8);
  v14 = (uint64_t *)(v10 + v8);
  v15 = *v14;
  v16 = *((_BYTE *)v14 + 8);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)v11, *(_BYTE *)(v11 + 8));
  if ((v18 & 1) == 0)
    goto LABEL_14;
  v19 = (__int128 *)(*(_QWORD *)(v6 + 56) + 192 * v17);
  v21 = v19[2];
  v20 = v19[3];
  v22 = v19[1];
  v61 = *v19;
  v62 = v22;
  v63 = v21;
  v64 = v20;
  v23 = v19[4];
  v24 = v19[5];
  v25 = v19[6];
  v68 = v19[7];
  v67 = v25;
  v65 = v23;
  v66 = v24;
  v26 = v19[8];
  v27 = v19[9];
  v28 = v19[10];
  v72 = v19[11];
  v71 = v28;
  v70 = v27;
  v69 = v26;
  v29 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for HandDescriptor() + 92));
  if (!*(_QWORD *)(v29 + 16))
  {
LABEL_14:
    lazy protocol witness table accessor for type HandPoseBuilderError and conformance HandPoseBuilderError();
    swift_allocError();
    v42 = 0;
LABEL_16:
    *v41 = v42;
    return swift_willThrow();
  }
  outlined retain of ImageData((uint64_t)&v61);
  v30 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
  if ((v31 & 1) == 0)
    goto LABEL_13;
  v32 = (__int128 *)(*(_QWORD *)(v29 + 56) + 176 * v30);
  v34 = v32[1];
  v33 = v32[2];
  v51 = *v32;
  v52 = v34;
  v53 = v33;
  v35 = v32[3];
  v36 = v32[4];
  v37 = v32[6];
  v56 = v32[5];
  v57 = v37;
  v54 = v35;
  v55 = v36;
  v38 = v32[7];
  v39 = v32[8];
  v40 = v32[9];
  *(_OWORD *)((char *)v60 + 9) = *(__int128 *)((char *)v32 + 153);
  v59 = v39;
  v60[0] = v40;
  v58 = v38;
  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
  {
LABEL_13:
    outlined release of ImageData((uint64_t)&v61);
    goto LABEL_14;
  }
  v73 = *(_QWORD *)(a1 + 184);
  v45 = *(_QWORD *)(a1 + 176);
  v44 = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(v4 + 144) = v12;
  *(_QWORD *)(v4 + 152) = v13;
  *(_QWORD *)(v4 + 160) = v15;
  *(_BYTE *)(v4 + 168) = v16;
  *(_BYTE *)(v4 + 169) = 0;
  v46[8] = v69;
  v46[9] = v70;
  v46[10] = v71;
  v46[11] = v72;
  v46[4] = v65;
  v46[5] = v66;
  v46[6] = v67;
  v46[7] = v68;
  v46[0] = v61;
  v46[1] = v62;
  v46[2] = v63;
  v46[3] = v64;
  _s5Hands13PoseImageCropVSgWOi_(v46);
  outlined init with take of ImageData?(v4 + 176, (uint64_t)v47, &demangling cache variable for type metadata for ImageData?);
  outlined init with take of ImageData?((uint64_t)v46, v4 + 176, &demangling cache variable for type metadata for ImageData?);
  outlined retain of PoseImageCrop((uint64_t)&v51);
  outlined retain of ImageData?(v47, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
  *(_BYTE *)(v4 + 593) = v7;
  *(_OWORD *)(v4 + 560) = v44;
  *(_QWORD *)(v4 + 576) = v45;
  *(_QWORD *)(v4 + 584) = v73;
  *(_BYTE *)(v4 + 592) = 0;
  v48[8] = v59;
  v49[0] = v60[0];
  *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)((char *)v60 + 9);
  v48[4] = v55;
  v48[5] = v56;
  v48[6] = v57;
  v48[7] = v58;
  v48[0] = v51;
  v48[1] = v52;
  v48[2] = v53;
  v48[3] = v54;
  _s5Hands13PoseImageCropVSgWOi_(v48);
  outlined init with take of ImageData?(v4 + 608, (uint64_t)v50, &demangling cache variable for type metadata for PoseImageCrop?);
  outlined init with take of ImageData?((uint64_t)v48, v4 + 608, &demangling cache variable for type metadata for PoseImageCrop?);
  return outlined retain of PoseImageCrop?((uint64_t)v50, outlined consume of PoseImageCrop?);
}

uint64_t HandPoseBuilder.set(gtInjections:withHandsKitData:)(uint64_t a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v33[16];
  _QWORD *v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _BYTE v40[552];
  _BYTE v41[552];
  uint64_t v42;

  v3 = v2;
  v42 = *MEMORY[0x24BDAC8D0];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v6, v7);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)v33 - v10;
  v39 = type metadata accessor for HandDescriptor();
  v12 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39, v13);
  v38 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = (_QWORD *)((char *)v33 - v17);
  result = (uint64_t)memcpy(v41, a2, sizeof(v41));
  if (*(_QWORD *)(a1 + 16))
  {
    memcpy(v40, a2, sizeof(v40));
    HandsKitData.getReferenceHandByChirality(isLeft:)(*(_BYTE *)(v3 + 593), (uint64_t)v11);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    v21 = v20(v11, 1, v39) == 1;
    v36 = v20;
    v37 = v3 + 592;
    if (v21)
    {
      result = outlined destroy of HandDescriptor?((uint64_t)v11);
      if (!*(_QWORD *)(a1 + 16))
        return result;
      goto LABEL_14;
    }
    outlined init with take of HandDescriptor((uint64_t)v11, (uint64_t)v18);
    v22 = v18[2];
    if (!v22)
    {
      result = outlined destroy of HandDescriptor((uint64_t)v18);
      if (!*(_QWORD *)(a1 + 16))
        return result;
      goto LABEL_14;
    }
    v24 = v18[3];
    v23 = v18[4];
    v33[13] = v18[5];
    v33[14] = v23;
    v25 = v18[6];
    v33[11] = v18[7];
    v33[12] = v25;
    v26 = v18[8];
    v33[9] = v18[9];
    v33[10] = v26;
    v27 = v18[10];
    v33[7] = v18[11];
    v33[8] = v27;
    v28 = v18[12];
    v33[5] = v18[13];
    v33[6] = v28;
    v29 = v18[14];
    v33[3] = v18[15];
    v33[4] = v29;
    v34 = v18;
    v35 = v22;
    v33[2] = v18[16];
    v30 = *(_QWORD *)(a1 + 16);
    v33[15] = v24;
    if (v30)
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v31 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a1 + 32));
      if (((*(_QWORD *)(a1 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) != 0)
        __asm { BR              X9 }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    outlined destroy of HandDescriptor((uint64_t)v34);
    result = outlined consume of HandPose?(v35);
    if (*(_QWORD *)(a1 + 16))
    {
LABEL_14:
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v32 = result & ~(-1 << *(_BYTE *)(a1 + 32));
      if (((*(_QWORD *)(a1 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) != 0)
        __asm { BR              X9 }
    }
  }
  return result;
}

uint64_t closure #1 in HandPoseBuilder.set(gtInjections:withHandsKitData:)(unsigned int a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  char v8;

  result = swift_beginAccess();
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(v7 + 16) <= a3)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(*(_QWORD *)(v7 + 8 * a3 + 32) + 16))
    specialized __RawDictionaryStorage.find<A>(_:)(a1);
  else
    v8 = 0;
  return v8 & 1;
}

uint64_t HandPoseBuilder.getUsableJoints(altJointTransforms:maxThreshold:minNumJoints:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  float v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;

  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 26, 0, MEMORY[0x24BEE4AF8]);
  v8 = v3 + 56;
  v58 = a1 + 32;
  v9 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  v10 = 0;
  while (2)
  {
    if (v10 == v9)
      goto LABEL_88;
    if (v10 >= *(_QWORD *)(*(_QWORD *)v8 + 16))
    {
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
      result = swift_release();
      __break(1u);
      return result;
    }
    v11 = 0;
    v12 = *(_QWORD *)(v58 + 144 * v10 + 8);
    v13 = v12 + 64;
    v14 = 1 << *(_BYTE *)(v12 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & *(_QWORD *)(v12 + 64);
    v17 = v10 + 1;
    v18 = *(_QWORD *)(*(_QWORD *)v8 + 8 * v10 + 32);
    v19 = (unint64_t)(v14 + 63) >> 6;
    v20 = 1.0;
    while (1)
    {
      if (v16)
      {
        v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v22 = v21 | (v11 << 6);
        goto LABEL_9;
      }
      v24 = v11 + 1;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        swift_bridgeObjectRelease();
        swift_release();
        v50 = MEMORY[0x24BEE4AF8];
        goto LABEL_79;
      }
      if (v24 >= v19)
        break;
      v25 = *(_QWORD *)(v13 + 8 * v24);
      ++v11;
      if (!v25)
      {
        v11 = v24 + 1;
        if (v24 + 1 >= v19)
          break;
        v25 = *(_QWORD *)(v13 + 8 * v11);
        if (!v25)
        {
          v11 = v24 + 2;
          if (v24 + 2 >= v19)
            break;
          v25 = *(_QWORD *)(v13 + 8 * v11);
          if (!v25)
          {
            v11 = v24 + 3;
            if (v24 + 3 >= v19)
              break;
            v25 = *(_QWORD *)(v13 + 8 * v11);
            if (!v25)
            {
              v26 = v24 + 4;
              if (v26 >= v19)
                break;
              v25 = *(_QWORD *)(v13 + 8 * v26);
              if (!v25)
              {
                while (1)
                {
                  v11 = v26 + 1;
                  if (__OFADD__(v26, 1))
                    break;
                  if (v11 >= v19)
                    goto LABEL_28;
                  v25 = *(_QWORD *)(v13 + 8 * v11);
                  ++v26;
                  if (v25)
                    goto LABEL_27;
                }
                __break(1u);
LABEL_87:
                __break(1u);
LABEL_88:
                __break(1u);
                goto LABEL_89;
              }
              v11 = v26;
            }
          }
        }
      }
LABEL_27:
      v16 = (v25 - 1) & v25;
      v22 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
      v23 = *(_QWORD *)(v12 + 56);
      if (*(float *)(v23 + 4 * v22) < v20)
        v20 = *(float *)(v23 + 4 * v22);
    }
LABEL_28:
    v27 = v18 + 64;
    v28 = 1 << *(_BYTE *)(v18 + 32);
    if (v28 < 64)
      v29 = ~(-1 << v28);
    else
      v29 = -1;
    v30 = v29 & *(_QWORD *)(v18 + 64);
    v31 = (unint64_t)(v28 + 63) >> 6;
    v32 = swift_bridgeObjectRetain();
    v33 = 0;
    v34 = 1.0;
    while (2)
    {
      if (v30)
      {
        v35 = __clz(__rbit64(v30));
        v30 &= v30 - 1;
        v36 = v35 | (v33 << 6);
LABEL_33:
        v37 = *(_QWORD *)(v32 + 56);
        if (*(float *)(v37 + 4 * v36) < v34)
          v34 = *(float *)(v37 + 4 * v36);
        continue;
      }
      break;
    }
    v38 = v33 + 1;
    if (__OFADD__(v33, 1))
      goto LABEL_84;
    if (v38 < v31)
    {
      v39 = *(_QWORD *)(v27 + 8 * v38);
      ++v33;
      if (!v39)
      {
        v33 = v38 + 1;
        if (v38 + 1 >= v31)
          goto LABEL_52;
        v39 = *(_QWORD *)(v27 + 8 * v33);
        if (!v39)
        {
          v33 = v38 + 2;
          if (v38 + 2 >= v31)
            goto LABEL_52;
          v39 = *(_QWORD *)(v27 + 8 * v33);
          if (!v39)
          {
            v33 = v38 + 3;
            if (v38 + 3 >= v31)
              goto LABEL_52;
            v39 = *(_QWORD *)(v27 + 8 * v33);
            if (!v39)
            {
              v40 = v38 + 4;
              if (v40 >= v31)
                goto LABEL_52;
              v39 = *(_QWORD *)(v27 + 8 * v40);
              if (!v39)
              {
                while (1)
                {
                  v33 = v40 + 1;
                  if (__OFADD__(v40, 1))
                    goto LABEL_87;
                  if (v33 >= v31)
                    goto LABEL_52;
                  v39 = *(_QWORD *)(v27 + 8 * v33);
                  ++v40;
                  if (v39)
                    goto LABEL_51;
                }
              }
              v33 = v40;
            }
          }
        }
      }
LABEL_51:
      v30 = (v39 - 1) & v39;
      v36 = __clz(__rbit64(v39)) + (v33 << 6);
      goto LABEL_33;
    }
LABEL_52:
    swift_release();
    if (v34 >= v20)
      v20 = v34;
    v42 = *((_QWORD *)v7 + 2);
    v41 = *((_QWORD *)v7 + 3);
    if (v42 >= v41 >> 1)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v7);
    *((_QWORD *)v7 + 2) = v42 + 1;
    *(float *)&v7[4 * v42 + 32] = v20;
    v10 = v17;
    if (v17 != 26)
      continue;
    break;
  }
  swift_bridgeObjectRetain_n();
  v43 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v7);
  swift_bridgeObjectRelease();
  v59 = v43;
  specialized MutableCollection<>.sort(by:)(&v59, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  swift_bridgeObjectRelease();
  v44 = v59;
  v45 = *(_QWORD *)(v59 + 16);
  if (a2 != 26)
  {
    v46 = 26;
    while (1)
    {
      v47 = a2 + v46;
      if (__OFADD__(a2, v46))
        goto LABEL_90;
      if (v47 >= 0)
        v48 = a2 + v46;
      else
        v48 = v47 + 1;
      if (v47 < -1)
        goto LABEL_91;
      v49 = v48 >> 1;
      if (v48 >> 1 >= (uint64_t)v45)
        goto LABEL_91;
      if (*(float *)(v59 + 40 + 16 * v49) < a3)
        a2 = v49 + 1;
      else
        v46 = v48 >> 1;
      if (a2 == v46)
      {
        if ((v46 & 0x8000000000000000) != 0)
          goto LABEL_92;
        if (v45 < v46)
          goto LABEL_93;
        if (!v46)
          goto LABEL_85;
        goto LABEL_74;
      }
    }
  }
  if (v45 < 0x1A)
    goto LABEL_93;
  v46 = 26;
LABEL_74:
  v59 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46, 0);
  v50 = v59;
  v51 = *(_QWORD *)(v59 + 16);
  v52 = 32;
  do
  {
    v53 = *(_QWORD *)(v44 + v52);
    v59 = v50;
    v54 = *(_QWORD *)(v50 + 24);
    if (v51 >= v54 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v51 + 1, 1);
      v50 = v59;
    }
    *(_QWORD *)(v50 + 16) = v51 + 1;
    *(_QWORD *)(v50 + 8 * v51 + 32) = v53;
    v52 += 16;
    ++v51;
    --v46;
  }
  while (v46);
  swift_bridgeObjectRelease();
  swift_release();
LABEL_79:
  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x24BDCF468]);
  dispatch thunk of SetAlgebra.init()();
  v55 = *(_QWORD *)(v50 + 16);
  if (v55)
  {
    v56 = v50 + 32;
    do
    {
      v56 += 8;
      dispatch thunk of SetAlgebra.insert(_:)();
      --v55;
    }
    while (v55);
  }
  return swift_bridgeObjectRelease();
}

void HandPoseBuilder.computeCorrectionTransform(forCameraTransition:withAlternateCamerasHand:)(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  float v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  float v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;

  v7 = type metadata accessor for IndexSet();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (char *)&v63 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (_QWORD *)((char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1 == 3 || !a1)
    goto LABEL_15;
  outlined init with copy of HandDescriptor?(a2, (uint64_t)v19);
  v20 = type metadata accessor for HandDescriptor();
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20) == 1)
  {
    outlined destroy of HandDescriptor?((uint64_t)v19);
LABEL_13:
    v83 = xmmword_23D9A6CC0;
    v84 = 0uLL;
    v90 = MEMORY[0x24BEE0D00];
    v88 = 0xD00000000000002BLL;
    v89 = 0x800000023D9C4300;
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 178;
LABEL_14:
    specialized static HLog.W(file:function:line:logArea:_:_:)(0xD00000000000005FLL, 0x800000023D9C42A0, v48, (uint64_t *)&v83, (uint64_t)&v88, v47);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v88);
LABEL_15:
    v49 = *MEMORY[0x24BDAEE00];
    v50 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
    v51 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
    v52 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
    v53 = 1.0;
LABEL_16:
    *(_OWORD *)a3 = v49;
    *(_OWORD *)(a3 + 16) = v50;
    *(_OWORD *)(a3 + 32) = v51;
    *(_OWORD *)(a3 + 48) = v52;
    *(float *)(a3 + 64) = v53;
    return;
  }
  v22 = v19[2];
  v21 = v19[3];
  v23 = v19[4];
  v24 = v19[5];
  v25 = v19[6];
  v26 = v19[7];
  v28 = v19[8];
  v27 = v19[9];
  v29 = v19[10];
  v30 = v19[11];
  v31 = v19[12];
  v32 = v19[13];
  v33 = v19[14];
  v34 = v19[15];
  v71 = v19[16];
  v72 = v34;
  v73 = v33;
  v74 = v32;
  v75 = v31;
  v76 = v30;
  v77 = v29;
  v78 = v21;
  *(_QWORD *)&v79 = v23;
  *(_QWORD *)&v80 = v24;
  *(_QWORD *)&v81 = v25;
  *(_QWORD *)&v82 = v27;
  outlined copy of HandPose?(v22);
  outlined destroy of HandDescriptor((uint64_t)v19);
  if (!v22)
    goto LABEL_13;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v3 + 32) + 16) != 27)
  {
    outlined consume of HandPose?(v22);
    v83 = xmmword_23D9A6CC0;
    v84 = 0uLL;
    v90 = MEMORY[0x24BEE0D00];
    v88 = 0xD000000000000023;
    v89 = 0x800000023D9C4330;
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 182;
    goto LABEL_14;
  }
  if (*(_QWORD *)(v22 + 16) != 27)
  {
    outlined consume of HandPose?(v22);
    v83 = xmmword_23D9A6CC0;
    v84 = 0uLL;
    v90 = MEMORY[0x24BEE0D00];
    v88 = 0xD00000000000002DLL;
    v89 = 0x800000023D9C4360;
    v47 = MEMORY[0x24BEE4AF8];
    v48 = 186;
    goto LABEL_14;
  }
  v68 = v26;
  v69 = v28;
  v70 = v3;
  *(_QWORD *)&v83 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 27, 0);
  v35 = v83;
  v36 = *(_QWORD *)(v83 + 16);
  v37 = v36 << 6;
  v67 = v22;
  v38 = (__int128 *)(v22 + 160);
  v39 = -1728;
  do
  {
    v40 = *(v38 - 3);
    v41 = *(v38 - 2);
    v42 = *(v38 - 1);
    v43 = *v38;
    *(_QWORD *)&v83 = v35;
    v44 = *(_QWORD *)(v35 + 24);
    v45 = v36 + 1;
    if (v36 >= v44 >> 1)
    {
      v66 = v40;
      v65 = v41;
      v64 = v42;
      v63 = v43;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v36 + 1, 1);
      v43 = v63;
      v42 = v64;
      v41 = v65;
      v40 = v66;
      v35 = v83;
    }
    *(_QWORD *)(v35 + 16) = v45;
    v46 = (_OWORD *)(v35 + v37 + v39);
    v46[110] = v40;
    v46[111] = v41;
    v46[112] = v42;
    v46[113] = v43;
    v38 += 9;
    v36 = v45;
    v39 += 64;
  }
  while (v39);
  v54 = v67;
  swift_bridgeObjectRelease();
  v55 = specialized static HandPose.calculateJointsFromTransforms(transforms:)(v35);
  swift_bridgeObjectRelease();
  v56 = v70;
  v57 = swift_bridgeObjectRetain();
  v58 = specialized static HandPose.calculateJointsFromTransforms(transforms:)(v57);
  swift_bridgeObjectRelease();
  HandPoseBuilder.getUsableJoints(altJointTransforms:maxThreshold:minNumJoints:)(v54, 9, *(float *)(v56 + 16));
  outlined consume of HandPose?(v54);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v15, v7);
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x24BDCF458]);
  *(_QWORD *)&v83 = dispatch thunk of Sequence._copyToContiguousArray()();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v83, specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  v59 = v83;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  swift_bridgeObjectRetain();
  v60 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD3VySfGs5NeverOTg50181_s5Hands15HandPoseBuilderC26computeCorrectionTransform19forCameraTransition020withAlternateCamerasB0So13simd_float4x4a9transform_Sf5scaletAA0i4PairJ0V5StateO_AA0B10DescriptorVSgtFs5D13VySfGSiXEfU0_SayAIGTf1cn_nTf4ng_nTm(v59, (uint64_t)v55);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  v61 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD3VySfGs5NeverOTg50181_s5Hands15HandPoseBuilderC26computeCorrectionTransform19forCameraTransition020withAlternateCamerasB0So13simd_float4x4a9transform_Sf5scaletAA0i4PairJ0V5StateO_AA0B10DescriptorVSgtFs5D13VySfGSiXEfU0_SayAIGTf1cn_nTf4ng_nTm(v59, (uint64_t)v58);
  swift_release();
  swift_bridgeObjectRelease_n();
  v62 = (void *)objc_opt_self();
  if (!(*(_QWORD *)(v61 + 16) >> 31))
  {
    objc_msgSend(v62, sel_getRigidTransform_from_withScaling_ofSize_, v60 + 32, v61 + 32, 1);
    v82 = v83;
    v81 = v84;
    v80 = v85;
    v79 = v86;
    v53 = v87;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v52 = v79;
    v51 = v80;
    v50 = v81;
    v49 = v82;
    goto LABEL_16;
  }
  __break(1u);
  swift_release();
  __break(1u);
}

uint64_t HandPoseBuilder.adjustForCameraPairTransition(_:applyJointTranslations:)(float32x4_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float32x4_t *v6;
  float v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __n128 v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t result;
  float32x4_t v21;
  float32x4_t v23;
  float32x4_t *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  _OWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  char v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;

  v4 = v2;
  v6 = a1;
  v37 = a1[1];
  v38 = *a1;
  v35 = a1[3];
  v36 = a1[2];
  v7 = a1[4].f32[0];
  v8 = v4 + 32;
  i = a1[16].i64[1];
  v10 = a1[17].i64[0];
  swift_beginAccess();
  v16 = *(float32x4_t **)(v4 + 32);
  if (!v16[1].i64[0])
    goto LABEL_30;
  v31 = v16[2];
  v32 = v16[3];
  v33 = v16[4];
  v34 = v16[5];
  v35 = CameraPairTransition.getCurrentTransformation()(*(double *)((char *)v6[4].i64 + 4), *(double *)v36.i64, v11, v12, v13, v14, v15);
  v36 = v17;
  v37 = v18;
  v38 = v19;
  v6 = (float32x4_t *)(v4 + 40);
  swift_beginAccess();
  v3 = *(_QWORD *)(v4 + 40);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 40) = v3;
  if ((result & 1) == 0)
    goto LABEL_31;
  if (*(_QWORD *)(v3 + 16))
  {
    do
    {
      *(float32x4_t *)(v3 + 32) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v31.f32[0]), v36, *(float32x2_t *)v31.f32, 1), v37, v31, 2), v38, v31, 3);
      *(float32x4_t *)(v3 + 48) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v32.f32[0]), v36, *(float32x2_t *)v32.f32, 1), v37, v32, 2), v38, v32, 3);
      *(float32x4_t *)(v3 + 64) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v33.f32[0]), v36, *(float32x2_t *)v33.f32, 1), v37, v33, 2), v38, v33, 3);
      *(float32x4_t *)(v3 + 80) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v34.f32[0]), v36, *(float32x2_t *)v34.f32, 1), v37, v34, 2), v38, v34, 3);
      swift_endAccess();
      v21.f32[0] = (float)(v7 * (float)((float)v10 / (float)i)) + (float)(1.0 - (float)((float)v10 / (float)i));
      if (!v10)
        v21.f32[0] = 1.0;
      if (v10 >= i || i <= 0)
        v21.f32[0] = v7;
      v34 = v21;
      v3 = -1664;
      for (i = 1; (unint64_t)i < *(_QWORD *)(*(_QWORD *)v8 + 16); ++i)
      {
        v24 = (float32x4_t *)(*(_QWORD *)v8 + v3);
        v37 = v24[111];
        v38 = v24[110];
        v35 = v24[113];
        v36 = v24[112];
        swift_beginAccess();
        v25 = (_QWORD *)v6->i64[0];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v6->i64[0] = (uint64_t)v25;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
          v6->i64[0] = (uint64_t)v25;
        }
        if ((unint64_t)i >= v25[2])
          goto LABEL_27;
        v27 = (_OWORD *)((char *)v25 + v3);
        v27[110] = v38;
        v27[111] = v37;
        v27[112] = v36;
        v27[113] = v35;
        v28 = (_QWORD *)v6->i64[0];
        result = swift_endAccess();
        if ((a2 & 1) != 0)
        {
          if ((unint64_t)i >= v28[2])
            goto LABEL_28;
          v38 = *(float32x4_t *)((char *)v28 + v3 + 1808);
          swift_beginAccess();
          v29 = (_QWORD *)v6->i64[0];
          v30 = swift_isUniquelyReferenced_nonNull_native();
          v6->i64[0] = (uint64_t)v29;
          if ((v30 & 1) == 0)
          {
            v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
            v6->i64[0] = (uint64_t)v29;
          }
          if ((unint64_t)i >= v29[2])
            goto LABEL_29;
          *(float32x2_t *)v23.f32 = vmul_n_f32(*(float32x2_t *)v38.f32, v34.f32[0]);
          v23.i64[1] = __PAIR64__(1.0, COERCE_UNSIGNED_INT(vmuls_lane_f32(v34.f32[0], v38, 2)));
          *(float32x4_t *)((char *)v29 + v3 + 1808) = v23;
          result = swift_endAccess();
        }
        v3 += 64;
        if (!v3)
          return result;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v3);
      v3 = result;
      v6->i64[0] = result;
    }
    while (*(_QWORD *)(result + 16));
  }
  __break(1u);
  return result;
}

void HandPoseBuilder.getPose(useAdjustedTransforms:)(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  float v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  char v59;
  int v60;
  _QWORD *v61;

  v3 = v2;
  if (*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16) == 27
    && (swift_beginAccess(), *(_QWORD *)(*(_QWORD *)(v3 + 40) + 16) == 27)
    && (swift_beginAccess(), *(_QWORD *)(*(_QWORD *)(v3 + 32) + 16) == 27)
    && (v36 = v3 + 64, swift_beginAccess(), *(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) == 27)
    && (v35 = v3 + 56, swift_beginAccess(), v6 = *(_QWORD *)(v3 + 56), *(_QWORD *)(v6 + 16) == 27)
    && *(_QWORD *)(*(_QWORD *)(v6 + 32) + 16) == 2
    && (*(_BYTE *)(v3 + 169) & 1) == 0)
  {
    v33 = (uint64_t *)(v3 + 32);
    v34 = (uint64_t *)(v3 + 40);
    v32 = a2;
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 27, 0, MEMORY[0x24BEE4AF8]);
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(v3 + 48);
      if (v10 >= *(_QWORD *)(v11 + 16))
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        return;
      }
      v12 = (_OWORD *)(v11 + 16 * v9);
      v13 = v12[2];
      v14 = v12[3];
      v15 = v12[4];
      v16 = v12[5];
      if ((a1 & 1) != 0)
      {
        v17 = *v34;
        if (v10 >= *(_QWORD *)(*v34 + 16))
          goto LABEL_26;
      }
      else
      {
        v17 = *v33;
        if (v10 >= *(_QWORD *)(*v33 + 16))
          goto LABEL_27;
      }
      if (v10 >= *(_QWORD *)(*(_QWORD *)v36 + 16))
        goto LABEL_24;
      v43 = v16;
      v45 = v15;
      v47 = v14;
      v49 = v13;
      if (v10 >= *(_QWORD *)(*(_QWORD *)v35 + 16))
        goto LABEL_25;
      v18 = (_OWORD *)(v17 + 16 * v9);
      v39 = v18[4];
      v41 = v18[5];
      v37 = v18[2];
      v38 = v18[3];
      v19 = *(float *)(*(_QWORD *)v36 + v9 + 32);
      v20 = *(_QWORD *)(*(_QWORD *)v35 + 8 * v10 + 32);
      swift_bridgeObjectRetain_n();
      specialized static JointTransform.computeUnifiedConfidence(occlusionValues:uncertainty:jointIndex:)(v20, v10, v19);
      v22 = v21;
      swift_bridgeObjectRelease();
      v24 = v8[2];
      v23 = v8[3];
      if (v24 >= v23 >> 1)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v8);
      v8[2] = v24 + 1;
      v25 = &v8[18 * v24];
      *((_DWORD *)v25 + 8) = v22;
      *((float *)v25 + 9) = v19;
      v25[5] = v20;
      *((_OWORD *)v25 + 3) = v49;
      *((_OWORD *)v25 + 4) = v47;
      *((_OWORD *)v25 + 5) = v45;
      *((_OWORD *)v25 + 6) = v43;
      *((_OWORD *)v25 + 7) = v37;
      *((_OWORD *)v25 + 8) = v38;
      *((_OWORD *)v25 + 9) = v39;
      *((_OWORD *)v25 + 10) = v41;
      v9 += 4;
      ++v10;
    }
    while (v9 != 108);
    v61 = v8;
    specialized static JointTransform.overrideUnsupervisedUnifiedConfidences(_:)((uint64_t *)&v61);
    v26 = (uint64_t)v61;
    v27 = *(unsigned __int8 *)(v3 + 593);
    v48 = *(_OWORD *)(v3 + 96);
    v50 = *(_OWORD *)(v3 + 80);
    v44 = *(_OWORD *)(v3 + 128);
    v46 = *(_OWORD *)(v3 + 112);
    v28 = swift_bridgeObjectRetain();
    v29 = specialized static HandPose.calculateCoordinatesFromJointTransforms(_:)(v28);
    swift_bridgeObjectRelease();
    type metadata accessor for HandsKitUtils();
    v30 = swift_bridgeObjectRetain();
    static HandsKitUtils.calculatePalmCenter(_:)(v30, &v51);
    swift_bridgeObjectRelease();
    v40 = v51;
    v42 = v52;
    *(_QWORD *)&v51 = v26;
    *((_QWORD *)&v51 + 1) = v29;
    v52 = v40;
    v53 = v42;
    v54 = v50;
    v55 = v48;
    v56 = v46;
    v57 = v44;
    v58 = 1;
    v59 = v27;
    v60 = 0;
    HandPose.validateJointAngles(_:_:_:)(*(_BYTE *)(v3 + 20), *(_BYTE *)(v3 + 28), *(_DWORD *)(v3 + 24));
    HandPoseBuilder.reset()();
    v31 = 257;
    if (!v27)
      v31 = 1;
    *(_QWORD *)v32 = v26;
    *(_QWORD *)(v32 + 8) = v29;
    *(_OWORD *)(v32 + 16) = v40;
    *(_OWORD *)(v32 + 32) = v42;
    *(_OWORD *)(v32 + 48) = v50;
    *(_OWORD *)(v32 + 64) = v48;
    *(_OWORD *)(v32 + 80) = v46;
    *(_OWORD *)(v32 + 96) = v44;
    *(_QWORD *)(v32 + 112) = v31;
  }
  else
  {
    lazy protocol witness table accessor for type HandPoseBuilderError and conformance HandPoseBuilderError();
    swift_allocError();
    *v7 = 3;
    swift_willThrow();
  }
}

uint64_t HandPoseBuilder.buildBlizzardOutputTransforms(withPoseModel:)(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v10;
  float v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  float32x4_t *v16;
  _BYTE *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  char isUniquelyReferenced_nonNull_native;
  float v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  _OWORD v94[4];
  unint64_t v95;
  int32x4_t v96[4];
  _BYTE v97[176];
  _BYTE v98[80];
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  _QWORD v102[24];
  _BYTE v103[64];
  uint64_t v104;
  float32x4_t v105[5];

  v5 = v4;
  v10 = *(unsigned __int8 *)(v4 + 593);
  if (*(_BYTE *)(v4 + 593))
    v11 = 1.0;
  else
    v11 = -1.0;
  outlined init with take of ImageData?(v4 + 176, (uint64_t)v102, &demangling cache variable for type metadata for ImageData?);
  outlined init with take of ImageData?((uint64_t)v102, (uint64_t)v103, &demangling cache variable for type metadata for ImageData?);
  if (_s5Hands9ImageDataVSgWOg((uint64_t)v103) == 1)
    goto LABEL_10;
  if ((*(_BYTE *)(v4 + 592) & 1) != 0)
    goto LABEL_10;
  v88.i64[0] = *(_QWORD *)(v4 + 576);
  v12 = *(_OWORD **)(v4 + 584);
  swift_beginAccess();
  v13 = *(_QWORD *)(v4 + 72);
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_10;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v15 & 1) == 0)
    goto LABEL_10;
  if ((*(_BYTE *)(a1 + 224) & 1) != 0)
    goto LABEL_10;
  v16 = (float32x4_t *)(*(_QWORD *)(v13 + 56) + (v14 << 6));
  v82 = *v16;
  v83 = v16[1];
  v84 = v16[2];
  v85 = v16[3];
  v90 = *(float *)(a1 + 220);
  outlined init with take of ImageData?(v5 + 608, (uint64_t)v97, &demangling cache variable for type metadata for PoseImageCrop?);
  outlined init with take of ImageData?((uint64_t)v97, (uint64_t)v98, &demangling cache variable for type metadata for PoseImageCrop?);
  if (_s5Hands13PoseImageCropVSgWOg((uint64_t)v98) == 1)
  {
LABEL_10:
    lazy protocol witness table accessor for type HandPoseBuilderError and conformance HandPoseBuilderError();
    swift_allocError();
    *v17 = 4;
    return swift_willThrow();
  }
  outlined retain of ImageData?(v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ImageData?);
  outlined retain of PoseImageCrop?((uint64_t)v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of PoseImageCrop?);
  if (one-time initialization token for kPoseArvinoLayers != -1)
    swift_once();
  v19 = static HandPoseBuilder.kPoseArvinoLayers;
  v86.i64[0] = a4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands18PoseDnnOutputLayerOG_SRySo13simd_float4x4aGSgs5NeverOTg5014_s5Hands15Hande23BuilderC29buildBlizzardg152Transforms33_C2E1F6CCE61A94F2BF836DCAB95B0C2004withC5ModelyAA0cT6ParamsC6params_AA13E5RTRegressorCSg5modelAHSg012handPresenceU0AL0z8PresenceT0SayAA0c3f2G5H60OG0z8PresenceG9Selectiont_tKFSRySo13simd_float4x4aGSgARXEfU_AF0E11ModelParamsC6params_AF13E5RTRegressorCSg5modelARSg18handPresenceParamsAV17handPresenceModelAI012handPresenceG9SelectiontTf1cn_nTf4ngX_n(v19, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  v21 = *(_QWORD *)(v20 + 16);
  if (!v21)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((*(_BYTE *)(v20 + 48) & 1) != 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v21 < 2)
    goto LABEL_29;
  v22 = (uint64_t)v12;
  v23 = *(_QWORD *)(v20 + 32);
  v12 = *(_OWORD **)(v20 + 56);
  a2 = *(_QWORD *)(v20 + 64);
  v24 = *(_BYTE *)(v20 + 72);
  result = swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
  {
LABEL_35:
    __break(1u);
    return result;
  }
  v20 = v104;
  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)v105);
  v25.i64[0] = v88.i64[0];
  v25.i64[1] = v22;
  v26 = vaddq_f32(v105[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v105[0], v88.f32[0]), v105[1], *(float32x2_t *)v88.f32, 1), v105[2], v25, 2));
  v86 = v99;
  v88 = v100;
  v92 = v101;
  v27 = *(int8x16_t *)(v23 + 16);
  v28 = *(int32x4_t *)(v23 + 32);
  v29 = *(int32x4_t *)(v23 + 48);
  v76 = vzip1q_s32(*(int32x4_t *)v23, v28);
  v78 = vzip1q_s32((int32x4_t)v27, v29);
  v80 = v26;
  v30 = (float32x4_t)vzip1q_s32(v76, v78);
  *(float32x2_t *)v26.f32 = vmul_n_f32(vadd_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v23, *(int8x16_t *)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), (float32x2_t)0xBF000000BF000000), v90 * 0.5);
  v26.f32[2] = (float)(v90 * 0.5) * (float)(*(float *)&v28.i32[3] + -0.5);
  v31 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v23, v28), vzip2q_s32((int32x4_t)v27, v29));
  v26.i32[3] = 0.5;
  v70 = v26;
  v72 = vaddq_f32(v30, v30);
  v74 = vaddq_f32(v31, v31);
  swift_beginAccess();
  v32 = *(float32x4_t *)(v20 + 192);
  v33 = *(float32x4_t *)(v20 + 208);
  v34 = *(float32x4_t *)(v20 + 224);
  v35 = *(float32x4_t *)(v20 + 240);
  v36 = vmlaq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v86.f32[0]), v33, *(float32x2_t *)v86.f32, 1), v34, v86, 2), (float32x4_t)0, v35);
  v37 = vmlaq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v88.f32[0]), v33, *(float32x2_t *)v88.f32, 1), v34, v88, 2), (float32x4_t)0, v35);
  v38 = vmlaq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v92.f32[0]), v33, *(float32x2_t *)v92.f32, 1), v34, v92, 2), (float32x4_t)0, v35);
  v39 = vaddq_f32(v35, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, v80.f32[0]), v33, *(float32x2_t *)v80.f32, 1), v34, v80, 2));
  v40 = (float32x4_t)vzip2q_s32(v76, v78);
  v41 = vaddq_f32(v40, v40);
  v42 = vaddq_f32(v70, v70);
  v43 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, v72.f32[0]), v37, *(float32x2_t *)v72.f32, 1), v38, v72, 2), v39, v72, 3);
  v44 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, v41.f32[0]), v37, *(float32x2_t *)v41.f32, 1), v38, v41, 2), v39, v41, 3);
  v45 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, v74.f32[0]), v37, *(float32x2_t *)v74.f32, 1), v38, v74, 2), v39, v74, 3);
  v46 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, v42.f32[0]), v37, *(float32x2_t *)v42.f32, 1), v38, v42, 2), v39, v42, 3);
  v47 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v43.f32[0]), v83, *(float32x2_t *)v43.f32, 1), v84, v43, 2), v85, v43, 3);
  v48 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v44.f32[0]), v83, *(float32x2_t *)v44.f32, 1), v84, v44, 2), v85, v44, 3);
  v49 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, v45.f32[0]), v83, *(float32x2_t *)v45.f32, 1), v84, v45, 2), v85, v45, 3);
  v50 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v82, v11 * v46.f32[0]), v83, vmuls_lane_f32(v11, *(float32x2_t *)v46.f32, 1)), v84, vmuls_lane_f32(v11, v46, 2));
  v83 = v48;
  v84 = v47;
  v96[0] = (int32x4_t)v47;
  v96[1] = (int32x4_t)v48;
  v51 = vaddq_f32(v85, v50);
  v85 = v49;
  v96[2] = (int32x4_t)v49;
  v96[3] = (int32x4_t)v51;
  v82 = v51;
  a1 = v5 + 32;
  swift_beginAccess();
  a3 = *(float32x4_t **)(v5 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 32) = a3;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if (a3[1].i64[0])
      goto LABEL_19;
LABEL_31:
    __break(1u);
LABEL_32:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)a1);
    a1 = result;
    a3->i64[0] = result;
    if (*(_QWORD *)(result + 16))
      goto LABEL_21;
    goto LABEL_33;
  }
LABEL_30:
  a3 = (float32x4_t *)specialized _ArrayBuffer._consumeAndCreateNew()(a3);
  *(_QWORD *)a1 = a3;
  if (!a3[1].i64[0])
    goto LABEL_31;
LABEL_19:
  a3[2] = v84;
  a3[3] = v83;
  a3[4] = v85;
  a3[5] = v82;
  swift_endAccess();
  a3 = (float32x4_t *)(v5 + 40);
  swift_beginAccess();
  a1 = *(_QWORD *)(v5 + 40);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 40) = a1;
  if ((result & 1) == 0)
    goto LABEL_32;
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_21:
  v67 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1);
  v68 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2);
  v69 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1);
  v71 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2);
  v73 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 1);
  v75 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 2);
  v77 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 0);
  v79 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1);
  v81 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v80, 2);
  *(float32x4_t *)(a1 + 32) = v84;
  *(float32x4_t *)(a1 + 48) = v83;
  *(float32x4_t *)(a1 + 64) = v85;
  *(float32x4_t *)(a1 + 80) = v82;
  swift_endAccess();
  v95 = 0;
  if (v12)
  {
    v53 = v90;
    if (a2)
    {
      v54 = &v12[4 * a2];
      do
      {
        v55 = v12[1];
        v56 = v12[2];
        v57 = v12[3];
        v94[0] = *v12;
        v94[1] = v55;
        v94[2] = v56;
        v94[3] = v57;
        closure #3 in HandPoseBuilder.buildBlizzardOutputTransforms(withPoseModel:)((uint64_t)v94, v96, &v95, v5, v11, v53);
        v53 = v90;
        v12 += 4;
      }
      while (v12 != v54);
    }
  }
  else
  {
    v53 = v90;
  }
  v59 = *(float32x4_t *)(v20 + 192);
  v58 = *(float32x4_t *)(v20 + 208);
  v60 = *(float32x4_t *)(v20 + 224);
  v61 = *(float32x4_t *)(v20 + 240);
  v62 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v59, v86.f32[0]), v67, v58), v68, v60), (float32x4_t)0, v61);
  v63 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v59, v88.f32[0]), v69, v58), v71, v60), (float32x4_t)0, v61);
  v64 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v59, v92.f32[0]), v73, v58), v75, v60), (float32x4_t)0, v61);
  v65 = vaddq_f32(v61, vmlaq_f32(vmlaq_f32(vmulq_f32(v59, v77), v79, v58), v81, v60));
  v93 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v62, v53), (float32x4_t)0, v63), (float32x4_t)0, v64), (float32x4_t)0, v65);
  v66 = vmulq_f32(v62, (float32x4_t)0);
  v89 = vmlaq_f32(vmlaq_n_f32(vmlaq_f32(v66, (float32x4_t)0, v63), v64, v53), (float32x4_t)0, v65);
  v91 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(v66, v63, v53), (float32x4_t)0, v64), (float32x4_t)0, v65);
  v87 = vaddq_f32(v65, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v62, v53 * -0.5), v63, v53 * -0.5), v64, v53 * -0.5));
  outlined retain of PoseImageCrop?((uint64_t)v97, outlined consume of PoseImageCrop?);
  result = (uint64_t)outlined retain of ImageData?(v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
  *(float32x4_t *)(v5 + 80) = v93;
  *(float32x4_t *)(v5 + 96) = v91;
  *(float32x4_t *)(v5 + 112) = v89;
  *(float32x4_t *)(v5 + 128) = v87;
  return result;
}

uint64_t closure #3 in HandPoseBuilder.buildBlizzardOutputTransforms(withPoseModel:)(uint64_t a1, int32x4_t *a2, unint64_t *a3, uint64_t a4, float a5, float a6)
{
  uint64_t v6;
  int32x4_t *v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  int8x16_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  float v17;
  int32x4_t v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  _OWORD *v21;
  uint64_t result;
  int32x4_t *v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;

  v11 = *(int8x16_t *)(a1 + 16);
  v12 = *(float32x4_t *)(a1 + 32);
  v13 = *(int32x4_t *)(a1 + 48);
  v14 = vzip1q_s32(*(int32x4_t *)a1, (int32x4_t)v12);
  v15 = vzip1q_s32((int32x4_t)v11, v13);
  v16 = vzip1q_s32(vzip2q_s32(*(int32x4_t *)a1, (int32x4_t)v12), vzip2q_s32((int32x4_t)v11, v13));
  v17 = (float)(a5 * 0.5) * a6;
  *(float32x2_t *)v18.i8 = vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)), v17);
  v18.i64[1] = __PAIR64__(1.0, COERCE_UNSIGNED_INT(vmuls_lane_f32(v17, v12, 3)));
  v26 = vzip2q_s32(v14, v15);
  v27 = vzip1q_s32(v14, v15);
  *a2 = v27;
  a2[1] = v26;
  v24 = v18;
  v25 = v16;
  a2[2] = v16;
  a2[3] = v18;
  v19 = *a3 + 1;
  if (__OFADD__(*a3, 1))
  {
    __break(1u);
  }
  else
  {
    v6 = a4;
    v8 = (uint64_t *)a3;
    v7 = a2;
    *a3 = v19;
    v9 = a4 + 32;
    swift_beginAccess();
    v10 = *(_QWORD **)(v6 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v6 + 32) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v19 & 0x8000000000000000) == 0)
        goto LABEL_4;
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
  }
  v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
  *(_QWORD *)v9 = v10;
  if ((v19 & 0x8000000000000000) != 0)
    goto LABEL_11;
LABEL_4:
  if (v19 >= v10[2])
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v21 = &v10[8 * v19];
  v21[2] = v27;
  v21[3] = v26;
  v21[4] = v25;
  v21[5] = v24;
  swift_endAccess();
  v9 = *v8;
  v26 = v7[1];
  v27 = *v7;
  v8 = (uint64_t *)(v6 + 40);
  v24 = v7[2];
  v25 = v7[3];
  swift_beginAccess();
  v7 = *(int32x4_t **)(v6 + 40);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 + 40) = v7;
  if ((result & 1) != 0)
  {
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_7;
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
LABEL_13:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
  v7 = (int32x4_t *)result;
  *v8 = result;
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_14;
LABEL_7:
  if (v9 < v7[1].i64[0])
  {
    v23 = &v7[4 * v9];
    v23[2] = v27;
    v23[3] = v26;
    v23[4] = v24;
    v23[5] = v25;
    return swift_endAccess();
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t HandPoseBuilder.deinit()
{
  uint64_t v0;
  _QWORD v2[24];
  _QWORD v3[24];
  _BYTE v4[176];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of ImageData?(v0 + 176, (uint64_t)v2, &demangling cache variable for type metadata for ImageData?);
  outlined retain of ImageData?(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
  outlined init with take of ImageData?(v0 + 368, (uint64_t)v3, &demangling cache variable for type metadata for ImageData?);
  outlined retain of ImageData?(v3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ImageData?);
  outlined init with take of ImageData?(v0 + 608, (uint64_t)v4, &demangling cache variable for type metadata for PoseImageCrop?);
  outlined retain of PoseImageCrop?((uint64_t)v4, outlined consume of PoseImageCrop?);
  return v0;
}

uint64_t HandPoseBuilder.__deallocating_deinit()
{
  HandPoseBuilder.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HandPoseBuilder()
{
  return objc_opt_self();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  float v15;
  uint64_t v16;
  float v17;
  float *v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  Swift::Int v27;
  float *v28;
  float *v29;
  Swift::Int v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  uint64_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if ((unint64_t)v3 >= 2)
    {
      v84 = *a1;
      v85 = *a1 + 16;
      v86 = -1;
      for (i = 1; i != v3; ++i)
      {
        v88 = v86;
        v89 = v85;
        do
        {
          v90 = *(float *)(v89 + 8);
          if (v90 >= *(float *)(v89 - 8))
            break;
          if (!v84)
            goto LABEL_145;
          v91 = *(_QWORD *)v89;
          *(_OWORD *)v89 = *(_OWORD *)(v89 - 16);
          *(float *)(v89 - 8) = v90;
          *(_QWORD *)(v89 - 16) = v91;
          v89 -= 16;
        }
        while (!__CFADD__(v88++, 1));
        v85 += 16;
        --v86;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_107:
      v93 = v12;
      v104 = v9;
      if (v13 >= 2)
      {
        v94 = *v101;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_136;
          if (!v94)
            goto LABEL_149;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v94 + 16 * v97), (char *)(v94 + 16 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v96 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_138;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_139;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Float));
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v104 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 40;
  v103 = *a1 + 8;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v105 = v6;
  v106 = v3;
  v107 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(float *)(v103 + 16 * v10);
      v16 = 16 * v14;
      v17 = *(float *)(v103 + 16 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (float *)(v102 + 16 * v14);
        while (v15 < v17 != *v18 >= *(v18 - 4))
        {
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14)
          goto LABEL_142;
        if (v14 < v10)
        {
          v19 = 16 * v10 - 16;
          v20 = v10;
          v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11)
                goto LABEL_148;
              v23 = (_OWORD *)(v11 + v16);
              v24 = (_OWORD *)(v11 + v19);
              v25 = *(_QWORD *)(v11 + v16);
              v26 = *(_DWORD *)(v11 + v16 + 8);
              if (v16 != v19 || v23 >= v24 + 1)
                *v23 = *v24;
              v22 = v11 + v19;
              *(_QWORD *)v22 = v25;
              *(_DWORD *)(v22 + 8) = v26;
            }
            ++v21;
            v19 -= 16;
            v16 += 16;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_50;
    if (__OFSUB__(v10, v14))
      goto LABEL_140;
    if (v10 - v14 >= v6)
      goto LABEL_50;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_143;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = (float *)(v11 + 16 * v10);
      do
      {
        v29 = v28;
        v30 = v14;
        do
        {
          v31 = v29[2];
          if (v31 >= *(v29 - 2))
            break;
          if (!v11)
            goto LABEL_146;
          v32 = *(_QWORD *)v29;
          *(_OWORD *)v29 = *((_OWORD *)v29 - 1);
          *(v29 - 2) = v31;
          *((_QWORD *)v29 - 2) = v32;
          v29 -= 4;
          ++v30;
        }
        while (v10 != v30);
        ++v10;
        v28 += 4;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_50:
    if (v10 < v14)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v34 = *((_QWORD *)v12 + 2);
    v33 = *((_QWORD *)v12 + 3);
    v13 = v34 + 1;
    v11 = v107;
    if (v34 >= v33 >> 1)
    {
      v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v12);
      v11 = v107;
      v12 = v83;
    }
    *((_QWORD *)v12 + 2) = v13;
    v35 = v12 + 32;
    v36 = &v12[16 * v34 + 32];
    *(_QWORD *)v36 = v14;
    *((_QWORD *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        v37 = v13 - 1;
        if (v13 >= 4)
        {
          v42 = &v35[16 * v13];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_124;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_125;
          v49 = v13 - 2;
          v50 = &v35[16 * v13 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_127;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_130;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_134;
            v65 = v40 < v75;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v66 = *((_QWORD *)v12 + 4);
            v67 = *((_QWORD *)v12 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_81;
          }
          v39 = *((_QWORD *)v12 + 4);
          v38 = *((_QWORD *)v12 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_126;
        v49 = v13 - 2;
        v55 = &v35[16 * v13 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_129;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_132;
        if (__OFADD__(v59, v64))
          goto LABEL_133;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_87:
          if (v65)
            v37 = v49;
          goto LABEL_89;
        }
LABEL_81:
        if ((v60 & 1) != 0)
          goto LABEL_128;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_131;
        if (v71 < v59)
          goto LABEL_15;
LABEL_89:
        v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11)
          goto LABEL_147;
        v77 = v12;
        v78 = &v35[16 * v76];
        v79 = *(_QWORD *)v78;
        v80 = &v35[16 * v37];
        v81 = *((_QWORD *)v80 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v11 + 16 * *(_QWORD *)v78), (char *)(v11 + 16 * *(_QWORD *)v80), v11 + 16 * v81, __dst);
        if (v1)
          goto LABEL_97;
        if (v81 < v79)
          goto LABEL_121;
        if (v37 > *((_QWORD *)v77 + 2))
          goto LABEL_122;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v35[16 * v76 + 8] = v81;
        v82 = *((_QWORD *)v77 + 2);
        if (v37 >= v82)
          goto LABEL_123;
        v12 = v77;
        v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((_QWORD *)v77 + 2) = v82 - 1;
        v11 = v107;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v10 >= v106)
    {
      v9 = v104;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  char v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  Swift::Int v94;
  Swift::Int v95;
  uint64_t v96;
  char *__dst;
  uint64_t v98;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v94 = result;
  v98 = v1;
  v91 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
      goto LABEL_104;
    }
    v93 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v93 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v92 = *a1 + 32;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v95 = v3;
  v96 = v10;
  do
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 16 * v9);
      v15 = 16 * v13;
      v16 = *(_QWORD *)(v10 + 16 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v17 = (_QWORD *)(v92 + 16 * v13);
        while (1)
        {
          v18 = *(v17 - 2);
          if (*((_BYTE *)v17 - 8) == 1)
            __asm { BR              X14 }
          if (v14 < v16 == *v17 >= v18)
            break;
          ++v9;
          v17 += 2;
          if (v3 == v9)
          {
            v9 = v3;
            if (v14 < v16)
              goto LABEL_24;
            goto LABEL_36;
          }
        }
      }
      if (v14 < v16)
      {
LABEL_24:
        if (v9 < v13)
          goto LABEL_139;
        if (v13 < v9)
        {
          v19 = 16 * v9 - 16;
          v20 = v9;
          v21 = v13;
          do
          {
            if (v21 != --v20)
            {
              if (!v10)
                goto LABEL_144;
              v23 = (_OWORD *)(v10 + v15);
              v24 = (_OWORD *)(v10 + v19);
              v25 = *(_QWORD *)(v10 + v15);
              v26 = *(_BYTE *)(v10 + v15 + 8);
              if (v15 != v19 || v23 >= v24 + 1)
                *v23 = *v24;
              v22 = v10 + v19;
              *(_QWORD *)v22 = v25;
              *(_BYTE *)(v22 + 8) = v26;
            }
            ++v21;
            v19 -= 16;
            v15 += 16;
          }
          while (v21 < v20);
        }
      }
    }
LABEL_36:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_137;
      if (v9 - v13 < v94)
      {
        v27 = v13 + v94;
        if (__OFADD__(v13, v94))
          goto LABEL_140;
        if (v27 >= v3)
          v27 = v3;
        if (v27 >= v13)
        {
          if (v9 != v27)
          {
            v28 = v10 + 16 * v9;
            do
            {
              v29 = v28;
              v30 = v13;
              do
              {
                v31 = *(_QWORD *)v29;
                v32 = *(_BYTE *)(v29 + 8);
                v33 = *(_QWORD *)(v29 - 16);
                if (*(_BYTE *)(v29 - 8) == 1)
                  __asm { BR              X16 }
                if (v31 >= v33)
                  break;
                if (!v10)
                  goto LABEL_142;
                *(_OWORD *)v29 = *(_OWORD *)(v29 - 16);
                *(_BYTE *)(v29 - 8) = v32;
                *(_QWORD *)(v29 - 16) = v31;
                v29 -= 16;
                ++v30;
              }
              while (v9 != v30);
              ++v9;
              v28 += 16;
            }
            while (v9 != v27);
            v9 = v27;
          }
          goto LABEL_54;
        }
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x23D6E3C10);
      }
    }
LABEL_54:
    if (v9 < v13)
      goto LABEL_132;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v35 = *((_QWORD *)v11 + 2);
    v34 = *((_QWORD *)v11 + 3);
    v12 = v35 + 1;
    v10 = v96;
    if (v35 >= v34 >> 1)
    {
      v10 = v96;
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1, v11);
    }
    *((_QWORD *)v11 + 2) = v12;
    v36 = v11 + 32;
    v37 = &v11[16 * v35 + 32];
    *(_QWORD *)v37 = v13;
    *((_QWORD *)v37 + 1) = v9;
    if (v35)
    {
      while (1)
      {
        v38 = v12 - 1;
        if (v12 >= 4)
        {
          v43 = &v36[16 * v12];
          v44 = *((_QWORD *)v43 - 8);
          v45 = *((_QWORD *)v43 - 7);
          v49 = __OFSUB__(v45, v44);
          v46 = v45 - v44;
          if (v49)
            goto LABEL_121;
          v48 = *((_QWORD *)v43 - 6);
          v47 = *((_QWORD *)v43 - 5);
          v49 = __OFSUB__(v47, v48);
          v41 = v47 - v48;
          v42 = v49;
          if (v49)
            goto LABEL_122;
          v50 = v12 - 2;
          v51 = &v36[16 * v12 - 32];
          v53 = *(_QWORD *)v51;
          v52 = *((_QWORD *)v51 + 1);
          v49 = __OFSUB__(v52, v53);
          v54 = v52 - v53;
          if (v49)
            goto LABEL_124;
          v49 = __OFADD__(v41, v54);
          v55 = v41 + v54;
          if (v49)
            goto LABEL_127;
          if (v55 >= v46)
          {
            v73 = &v36[16 * v38];
            v75 = *(_QWORD *)v73;
            v74 = *((_QWORD *)v73 + 1);
            v49 = __OFSUB__(v74, v75);
            v76 = v74 - v75;
            if (v49)
              goto LABEL_131;
            v66 = v41 < v76;
            goto LABEL_91;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v67 = *((_QWORD *)v11 + 4);
            v68 = *((_QWORD *)v11 + 5);
            v49 = __OFSUB__(v68, v67);
            v60 = v68 - v67;
            v61 = v49;
            goto LABEL_85;
          }
          v40 = *((_QWORD *)v11 + 4);
          v39 = *((_QWORD *)v11 + 5);
          v49 = __OFSUB__(v39, v40);
          v41 = v39 - v40;
          v42 = v49;
        }
        if ((v42 & 1) != 0)
          goto LABEL_123;
        v50 = v12 - 2;
        v56 = &v36[16 * v12 - 32];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        v59 = __OFSUB__(v57, v58);
        v60 = v57 - v58;
        v61 = v59;
        if (v59)
          goto LABEL_126;
        v62 = &v36[16 * v38];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v49 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v49)
          goto LABEL_129;
        if (__OFADD__(v60, v65))
          goto LABEL_130;
        if (v60 + v65 >= v41)
        {
          v66 = v41 < v65;
LABEL_91:
          if (v66)
            v38 = v50;
          goto LABEL_93;
        }
LABEL_85:
        if ((v61 & 1) != 0)
          goto LABEL_125;
        v69 = &v36[16 * v38];
        v71 = *(_QWORD *)v69;
        v70 = *((_QWORD *)v69 + 1);
        v49 = __OFSUB__(v70, v71);
        v72 = v70 - v71;
        if (v49)
          goto LABEL_128;
        if (v72 < v60)
          goto LABEL_15;
LABEL_93:
        v77 = v38 - 1;
        if (v38 - 1 >= v12)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v10)
          goto LABEL_143;
        v78 = &v36[16 * v77];
        v79 = *(_QWORD *)v78;
        v80 = &v36[16 * v38];
        v81 = *((_QWORD *)v80 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 16 * *(_QWORD *)v78), (char *)(v10 + 16 * *(_QWORD *)v80), v10 + 16 * v81, __dst);
        if (v98)
          goto LABEL_101;
        if (v81 < v79)
          goto LABEL_118;
        if (v38 > *((_QWORD *)v11 + 2))
          goto LABEL_119;
        *(_QWORD *)v78 = v79;
        *(_QWORD *)&v36[16 * v77 + 8] = v81;
        v82 = *((_QWORD *)v11 + 2);
        if (v38 >= v82)
          goto LABEL_120;
        v12 = v82 - 1;
        memmove(&v36[16 * v38], v80 + 16, 16 * (v82 - 1 - v38));
        *((_QWORD *)v11 + 2) = v82 - 1;
        v10 = v96;
        if (v82 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v95;
  }
  while (v9 < v95);
  v8 = v93;
LABEL_104:
  v83 = v11;
  v93 = v8;
  if (v12 >= 2)
  {
    v84 = *v91;
    do
    {
      v85 = v12 - 2;
      if (v12 < 2)
        goto LABEL_133;
      if (!v84)
        goto LABEL_145;
      v86 = v83;
      v87 = *(_QWORD *)&v83[16 * v85 + 32];
      v88 = *(_QWORD *)&v83[16 * v12 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * v87), (char *)(v84 + 16 * *(_QWORD *)&v83[16 * v12 + 16]), v84 + 16 * v88, __dst);
      if (v98)
        break;
      if (v88 < v87)
        goto LABEL_134;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
      if (v85 >= *((_QWORD *)v86 + 2))
        goto LABEL_135;
      v89 = &v86[16 * v85 + 32];
      *(_QWORD *)v89 = v87;
      *((_QWORD *)v89 + 1) = v88;
      v90 = *((_QWORD *)v86 + 2);
      if (v12 > v90)
        goto LABEL_136;
      memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v90 - v12));
      v83 = v86;
      *((_QWORD *)v86 + 2) = v90 - 1;
      v12 = v90 - 1;
    }
    while (v90 > 2);
  }
LABEL_101:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v93 + 16) = 0;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  Swift::Int v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  Swift::Int v123;
  Swift::Int v124;
  char v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  __int128 v131;
  __int128 v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_139;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_147;
  v123 = result;
  v135 = v1;
  v119 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v133 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
      goto LABEL_105;
    }
    v122 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v122 = v7;
    v133 = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v120 = *a1 + 144;
  v121 = *a1 + 16;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v124 = v3;
  v134 = v10;
  do
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v121 + (v9 << 7));
      v15 = v13 << 7;
      v16 = *(_QWORD *)(v121 + (v13 << 7));
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v17 = v120 + (v13 << 7);
        while (1)
        {
          v18 = *(_QWORD *)v17;
          if (*(_BYTE *)(v17 + 8) == 1)
            __asm { BR              X13 }
          if (v14 < v16 == *(_QWORD *)(v17 + 128) >= v18)
            break;
          ++v9;
          v17 += 128;
          if (v3 == v9)
          {
            v9 = v3;
            if (v14 < v16)
              goto LABEL_24;
            goto LABEL_37;
          }
        }
      }
      if (v14 < v16)
      {
LABEL_24:
        if (v9 < v13)
          goto LABEL_140;
        if (v13 < v9)
        {
          v19 = (v9 << 7) - 128;
          v20 = v9;
          v118 = v13;
          do
          {
            if (v13 != --v20)
            {
              if (!v10)
                goto LABEL_145;
              v30 = v11;
              v31 = (char *)(v10 + v15);
              v26 = *(_QWORD *)(v10 + v15);
              v32 = (char *)(v10 + v19);
              v25 = *(_BYTE *)(v10 + v15 + 8);
              v33 = *(_QWORD *)(v10 + v15 + 16);
              v34 = *(_BYTE *)(v10 + v15 + 24);
              v28 = *(_OWORD *)(v10 + v15 + 32);
              v35 = *(_QWORD *)(v10 + v15 + 48);
              v27 = *(_OWORD *)(v10 + v15 + 64);
              v23 = *(_QWORD *)(v10 + v15 + 80);
              v36 = *(_QWORD *)(v10 + v15 + 88);
              v24 = *(_QWORD *)(v10 + v15 + 96);
              v21 = *(_DWORD *)(v10 + v15 + 104);
              v22 = *(_BYTE *)(v10 + v15 + 108);
              v37 = *(_QWORD *)(v10 + v15 + 112);
              if (v15 != v19 || v31 >= v32 + 128)
              {
                v132 = *(_OWORD *)(v10 + v15 + 32);
                v131 = *(_OWORD *)(v10 + v15 + 64);
                v128 = *(_QWORD *)(v10 + v15 + 80);
                v129 = *(_QWORD *)(v10 + v15);
                v130 = *(_BYTE *)(v10 + v15 + 8);
                v127 = *(_QWORD *)(v10 + v15 + 96);
                v125 = *(_BYTE *)(v10 + v15 + 108);
                v126 = *(_DWORD *)(v10 + v15 + 104);
                memmove(v31, v32, 0x80uLL);
                v22 = v125;
                v21 = v126;
                v24 = v127;
                v23 = v128;
                v25 = v130;
                v26 = v129;
                v27 = v131;
                v28 = v132;
                v10 = v134;
              }
              v29 = v10 + v19;
              *(_QWORD *)v29 = v26;
              *(_BYTE *)(v29 + 8) = v25;
              *(_QWORD *)(v29 + 16) = v33;
              *(_BYTE *)(v29 + 24) = v34;
              *(_OWORD *)(v29 + 32) = v28;
              *(_QWORD *)(v29 + 48) = v35;
              *(_OWORD *)(v29 + 64) = v27;
              *(_QWORD *)(v29 + 80) = v23;
              *(_QWORD *)(v29 + 88) = v36;
              *(_QWORD *)(v29 + 96) = v24;
              *(_DWORD *)(v29 + 104) = v21;
              *(_BYTE *)(v29 + 108) = v22;
              *(_QWORD *)(v29 + 112) = v37;
              v11 = v30;
            }
            ++v13;
            v19 -= 128;
            v15 += 128;
          }
          while (v13 < v20);
          v3 = v124;
          v13 = v118;
        }
      }
    }
LABEL_37:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_138;
      if (v9 - v13 < v123)
      {
        v38 = v13 + v123;
        if (__OFADD__(v13, v123))
          goto LABEL_141;
        if (v38 >= v3)
          v38 = v3;
        if (v38 >= v13)
        {
          if (v9 != v38)
          {
            v39 = v10 + (v9 << 7);
            do
            {
              v40 = v13;
              v41 = v39;
              do
              {
                v42 = *(_QWORD *)(v41 + 16);
                v43 = *(_BYTE *)(v41 + 24);
                v44 = *(_QWORD *)(v41 - 112);
                if (*(_BYTE *)(v41 - 104) == 1)
                  __asm { BR              X15 }
                if (v42 >= v44)
                  break;
                if (!v10)
                  goto LABEL_143;
                v45 = *(_QWORD *)v41;
                v46 = *(_BYTE *)(v41 + 8);
                v47 = *(_OWORD *)(v41 + 32);
                v48 = *(_QWORD *)(v41 + 48);
                v49 = *(_OWORD *)(v41 + 64);
                v50 = *(_QWORD *)(v41 + 80);
                v51 = *(_QWORD *)(v41 + 96);
                v52 = *(_DWORD *)(v41 + 104);
                v53 = *(_BYTE *)(v41 + 108);
                v54 = *(_QWORD *)(v41 + 112);
                v55 = *(_QWORD *)(v41 + 88);
                v56 = *(_OWORD *)(v41 - 48);
                *(_OWORD *)(v41 + 64) = *(_OWORD *)(v41 - 64);
                *(_OWORD *)(v41 + 80) = v56;
                v57 = *(_OWORD *)(v41 - 16);
                *(_OWORD *)(v41 + 96) = *(_OWORD *)(v41 - 32);
                *(_OWORD *)(v41 + 112) = v57;
                v58 = *(_OWORD *)(v41 - 112);
                *(_OWORD *)v41 = *(_OWORD *)(v41 - 128);
                *(_OWORD *)(v41 + 16) = v58;
                v59 = *(_OWORD *)(v41 - 80);
                *(_OWORD *)(v41 + 32) = *(_OWORD *)(v41 - 96);
                *(_OWORD *)(v41 + 48) = v59;
                *(_BYTE *)(v41 - 120) = v46;
                *(_QWORD *)(v41 - 112) = v42;
                *(_BYTE *)(v41 - 104) = v43;
                *(_OWORD *)(v41 - 96) = v47;
                *(_QWORD *)(v41 - 80) = v48;
                *(_OWORD *)(v41 - 64) = v49;
                *(_QWORD *)(v41 - 48) = v50;
                *(_QWORD *)(v41 - 40) = v55;
                *(_QWORD *)(v41 - 32) = v51;
                *(_DWORD *)(v41 - 24) = v52;
                *(_BYTE *)(v41 - 20) = v53;
                *(_QWORD *)(v41 - 16) = v54;
                ++v40;
                *(_QWORD *)(v41 - 128) = v45;
                v41 -= 128;
              }
              while (v9 != v40);
              ++v9;
              v39 += 128;
            }
            while (v9 != v38);
            v9 = v38;
          }
          goto LABEL_55;
        }
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x23D82B684);
      }
    }
LABEL_55:
    if (v9 < v13)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v61 = *((_QWORD *)v11 + 2);
    v60 = *((_QWORD *)v11 + 3);
    v12 = v61 + 1;
    v10 = v134;
    if (v61 >= v60 >> 1)
    {
      v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v61 + 1, 1, v11);
      v10 = v134;
      v11 = v109;
    }
    *((_QWORD *)v11 + 2) = v12;
    v62 = v11 + 32;
    v63 = &v11[16 * v61 + 32];
    *(_QWORD *)v63 = v13;
    *((_QWORD *)v63 + 1) = v9;
    if (v61)
    {
      while (1)
      {
        v64 = v12 - 1;
        if (v12 >= 4)
        {
          v69 = &v62[16 * v12];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_122;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_123;
          v76 = v12 - 2;
          v77 = &v62[16 * v12 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_125;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_128;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_132;
            v92 = v67 < v102;
            goto LABEL_92;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v93 = *((_QWORD *)v11 + 4);
            v94 = *((_QWORD *)v11 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_86;
          }
          v66 = *((_QWORD *)v11 + 4);
          v65 = *((_QWORD *)v11 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_124;
        v76 = v12 - 2;
        v82 = &v62[16 * v12 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_127;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_130;
        if (__OFADD__(v86, v91))
          goto LABEL_131;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_92:
          if (v92)
            v64 = v76;
          goto LABEL_94;
        }
LABEL_86:
        if ((v87 & 1) != 0)
          goto LABEL_126;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_129;
        if (v98 < v86)
          goto LABEL_15;
LABEL_94:
        v103 = v64 - 1;
        if (v64 - 1 >= v12)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v10)
          goto LABEL_144;
        v104 = &v62[16 * v103];
        v105 = *(_QWORD *)v104;
        v106 = &v62[16 * v64];
        v107 = *((_QWORD *)v106 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + (*(_QWORD *)v104 << 7)), (char *)(v10 + (*(_QWORD *)v106 << 7)), v10 + (v107 << 7), v133);
        if (v135)
          goto LABEL_102;
        if (v107 < v105)
          goto LABEL_119;
        if (v64 > *((_QWORD *)v11 + 2))
          goto LABEL_120;
        *(_QWORD *)v104 = v105;
        *(_QWORD *)&v62[16 * v103 + 8] = v107;
        v108 = *((_QWORD *)v11 + 2);
        if (v64 >= v108)
          goto LABEL_121;
        v12 = v108 - 1;
        memmove(&v62[16 * v64], v106 + 16, 16 * (v108 - 1 - v64));
        *((_QWORD *)v11 + 2) = v108 - 1;
        v10 = v134;
        if (v108 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v124;
  }
  while (v9 < v124);
  v8 = v122;
LABEL_105:
  v110 = v11;
  v122 = v8;
  if (v12 >= 2)
  {
    v111 = *v119;
    do
    {
      v112 = v12 - 2;
      if (v12 < 2)
        goto LABEL_134;
      if (!v111)
        goto LABEL_146;
      v113 = v110;
      v114 = *(_QWORD *)&v110[16 * v112 + 32];
      v115 = *(_QWORD *)&v110[16 * v12 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v111 + (v114 << 7)), (char *)(v111 + (*(_QWORD *)&v110[16 * v12 + 16] << 7)), v111 + (v115 << 7), v133);
      if (v135)
        break;
      if (v115 < v114)
        goto LABEL_135;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v113 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v113);
      if (v112 >= *((_QWORD *)v113 + 2))
        goto LABEL_136;
      v116 = &v113[16 * v112 + 32];
      *(_QWORD *)v116 = v114;
      *((_QWORD *)v116 + 1) = v115;
      v117 = *((_QWORD *)v113 + 2);
      if (v12 > v117)
        goto LABEL_137;
      memmove(&v113[16 * v12 + 16], &v113[16 * v12 + 32], 16 * (v117 - v12));
      v110 = v113;
      *((_QWORD *)v113 + 2) = v117 - 1;
      v12 = v117 - 1;
    }
    while (v117 > 2);
  }
LABEL_102:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v122 + 16) = 0;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  Swift::Int v20;
  _QWORD *v21;
  Swift::Int v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  Swift::Int v107;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  double v27;
  Swift::Int v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  __int128 *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  double v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  Swift::Int v117;
  Swift::Int v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  double *v123;
  uint64_t v124;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v89 = (__int128 *)*a1;
      v90 = -1;
      v91 = 1;
      v92 = (__int128 *)*a1;
      do
      {
        v93 = *(double *)&v89[5 * v91];
        v94 = v90;
        v95 = v92;
        do
        {
          v96 = v95 + 5;
          if (v93 >= *(double *)v95)
            break;
          if (!v89)
            goto LABEL_142;
          v97 = v95[6];
          v98 = v95[7];
          v99 = v95[8];
          v100 = v95[9];
          v101 = v95[3];
          v95[7] = v95[2];
          v95[8] = v101;
          v95[9] = v95[4];
          v103 = *v95;
          v102 = v95[1];
          *(double *)v95 = v93;
          v95[1] = v97;
          v95[2] = v98;
          v95[3] = v99;
          v95[4] = v100;
          v95 -= 5;
          *v96 = v103;
          v96[1] = v102;
        }
        while (!__CFADD__(v94++, 1));
        ++v91;
        v92 += 5;
        --v90;
      }
      while (v91 != v3);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_147;
  v117 = result;
  v114 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v123 = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_104:
      v105 = v11;
      v116 = v8;
      if (v12 >= 2)
      {
        v106 = *v114;
        do
        {
          v107 = v12 - 2;
          if (v12 < 2)
            goto LABEL_133;
          if (!v106)
            goto LABEL_146;
          v108 = v105;
          v109 = *(_QWORD *)&v105[16 * v107 + 32];
          v110 = *(_QWORD *)&v105[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v106 + 80 * v109), (double *)(v106 + 80 * *(_QWORD *)&v105[16 * v12 + 16]), v106 + 80 * v110, v123);
          if (v1)
            break;
          if (v110 < v109)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v108 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v108);
          if (v107 >= *((_QWORD *)v108 + 2))
            goto LABEL_135;
          v111 = &v108[16 * v107 + 32];
          *(_QWORD *)v111 = v109;
          *((_QWORD *)v111 + 1) = v110;
          v112 = *((_QWORD *)v108 + 2);
          if (v12 > v112)
            goto LABEL_136;
          memmove(&v108[16 * v12 + 16], &v108[16 * v12 + 32], 16 * (v112 - v12));
          v105 = v108;
          *((_QWORD *)v108 + 2) = v112 - 1;
          v12 = v112 - 1;
        }
        while (v112 > 2);
      }
LABEL_94:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v116 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v116 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Double, value: simd_float4x4));
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v116 = v7;
    v123 = (double *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v115 = *a1 + 160;
  v113 = *a1 - 80;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v118 = v3;
  v124 = v10;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(double *)(v10 + 80 * v9);
      v15 = *(double *)(v10 + 80 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = (double *)(v115 + 80 * v13);
        v17 = v14;
        while (1)
        {
          v18 = v17;
          v17 = *v16;
          if (v14 < v15 == *v16 >= v18)
            break;
          ++v9;
          v16 += 10;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_139;
        if (v13 < v9)
        {
          v19 = 80 * v9;
          v20 = 80 * v13;
          v21 = v9;
          v22 = v13;
          do
          {
            if (v22 != --v21)
            {
              if (!v10)
                goto LABEL_145;
              v23 = v10 + v19;
              v24 = *(_QWORD *)(v10 + v20);
              v121 = *(_OWORD *)(v10 + v20 + 32);
              v122 = *(_OWORD *)(v10 + v20 + 16);
              v119 = *(_OWORD *)(v10 + v20 + 64);
              v120 = *(_OWORD *)(v10 + v20 + 48);
              memmove((void *)(v10 + v20), (const void *)(v10 + v19 - 80), 0x50uLL);
              v10 = v124;
              *(_QWORD *)(v23 - 80) = v24;
              *(_OWORD *)(v23 - 64) = v122;
              *(_OWORD *)(v23 - 48) = v121;
              *(_OWORD *)(v23 - 32) = v120;
              *(_OWORD *)(v23 - 16) = v119;
            }
            ++v22;
            v19 -= 80;
            v20 += 80;
          }
          while (v22 < v21);
          v3 = v118;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_137;
    if (v9 - v13 >= v117)
      goto LABEL_47;
    v25 = v13 + v117;
    if (__OFADD__(v13, v117))
      goto LABEL_140;
    if (v25 >= v3)
      v25 = v3;
    if (v25 < v13)
      break;
    if (v9 != v25)
    {
      v26 = v113 + 80 * v9;
      do
      {
        v27 = *(double *)(v10 + 80 * v9);
        v28 = v13;
        v29 = v26;
        do
        {
          v30 = (_OWORD *)(v29 + 80);
          if (v27 >= *(double *)v29)
            break;
          if (!v10)
            goto LABEL_143;
          v31 = *(_OWORD *)(v29 + 96);
          v32 = *(_OWORD *)(v29 + 112);
          v33 = *(_OWORD *)(v29 + 128);
          v34 = *(_OWORD *)(v29 + 144);
          v35 = *(_OWORD *)(v29 + 48);
          *(_OWORD *)(v29 + 112) = *(_OWORD *)(v29 + 32);
          *(_OWORD *)(v29 + 128) = v35;
          *(_OWORD *)(v29 + 144) = *(_OWORD *)(v29 + 64);
          v37 = *(_OWORD *)v29;
          v36 = *(_OWORD *)(v29 + 16);
          *(double *)v29 = v27;
          *(_OWORD *)(v29 + 16) = v31;
          *(_OWORD *)(v29 + 32) = v32;
          *(_OWORD *)(v29 + 48) = v33;
          *(_OWORD *)(v29 + 64) = v34;
          v29 -= 80;
          ++v28;
          *v30 = v37;
          v30[1] = v36;
        }
        while (v9 != v28);
        ++v9;
        v26 += 80;
      }
      while (v9 != v25);
      v9 = v25;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_132;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v39 = *((_QWORD *)v11 + 2);
    v38 = *((_QWORD *)v11 + 3);
    v12 = v39 + 1;
    v10 = v124;
    if (v39 >= v38 >> 1)
    {
      v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v11);
      v10 = v124;
      v11 = v88;
    }
    *((_QWORD *)v11 + 2) = v12;
    v40 = v11 + 32;
    v41 = &v11[16 * v39 + 32];
    *(_QWORD *)v41 = v13;
    *((_QWORD *)v41 + 1) = v9;
    if (v39)
    {
      while (1)
      {
        v42 = v12 - 1;
        if (v12 >= 4)
        {
          v47 = &v40[16 * v12];
          v48 = *((_QWORD *)v47 - 8);
          v49 = *((_QWORD *)v47 - 7);
          v53 = __OFSUB__(v49, v48);
          v50 = v49 - v48;
          if (v53)
            goto LABEL_121;
          v52 = *((_QWORD *)v47 - 6);
          v51 = *((_QWORD *)v47 - 5);
          v53 = __OFSUB__(v51, v52);
          v45 = v51 - v52;
          v46 = v53;
          if (v53)
            goto LABEL_122;
          v54 = v12 - 2;
          v55 = &v40[16 * v12 - 32];
          v57 = *(_QWORD *)v55;
          v56 = *((_QWORD *)v55 + 1);
          v53 = __OFSUB__(v56, v57);
          v58 = v56 - v57;
          if (v53)
            goto LABEL_124;
          v53 = __OFADD__(v45, v58);
          v59 = v45 + v58;
          if (v53)
            goto LABEL_127;
          if (v59 >= v50)
          {
            v77 = &v40[16 * v42];
            v79 = *(_QWORD *)v77;
            v78 = *((_QWORD *)v77 + 1);
            v53 = __OFSUB__(v78, v79);
            v80 = v78 - v79;
            if (v53)
              goto LABEL_131;
            v70 = v45 < v80;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v71 = *((_QWORD *)v11 + 4);
            v72 = *((_QWORD *)v11 + 5);
            v53 = __OFSUB__(v72, v71);
            v64 = v72 - v71;
            v65 = v53;
            goto LABEL_78;
          }
          v44 = *((_QWORD *)v11 + 4);
          v43 = *((_QWORD *)v11 + 5);
          v53 = __OFSUB__(v43, v44);
          v45 = v43 - v44;
          v46 = v53;
        }
        if ((v46 & 1) != 0)
          goto LABEL_123;
        v54 = v12 - 2;
        v60 = &v40[16 * v12 - 32];
        v62 = *(_QWORD *)v60;
        v61 = *((_QWORD *)v60 + 1);
        v63 = __OFSUB__(v61, v62);
        v64 = v61 - v62;
        v65 = v63;
        if (v63)
          goto LABEL_126;
        v66 = &v40[16 * v42];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v53 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v53)
          goto LABEL_129;
        if (__OFADD__(v64, v69))
          goto LABEL_130;
        if (v64 + v69 >= v45)
        {
          v70 = v45 < v69;
LABEL_84:
          if (v70)
            v42 = v54;
          goto LABEL_86;
        }
LABEL_78:
        if ((v65 & 1) != 0)
          goto LABEL_125;
        v73 = &v40[16 * v42];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v53 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v53)
          goto LABEL_128;
        if (v76 < v64)
          goto LABEL_15;
LABEL_86:
        v81 = v42 - 1;
        if (v42 - 1 >= v12)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v10)
          goto LABEL_144;
        v82 = v11;
        v83 = &v40[16 * v81];
        v84 = *(_QWORD *)v83;
        v85 = &v40[16 * v42];
        v86 = *((_QWORD *)v85 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v10 + 80 * *(_QWORD *)v83), (double *)(v10 + 80 * *(_QWORD *)v85), v10 + 80 * v86, v123);
        if (v1)
          goto LABEL_94;
        if (v86 < v84)
          goto LABEL_118;
        if (v42 > *((_QWORD *)v82 + 2))
          goto LABEL_119;
        *(_QWORD *)v83 = v84;
        *(_QWORD *)&v40[16 * v81 + 8] = v86;
        v87 = *((_QWORD *)v82 + 2);
        if (v42 >= v87)
          goto LABEL_120;
        v11 = v82;
        v12 = v87 - 1;
        memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
        *((_QWORD *)v82 + 2) = v87 - 1;
        v10 = v124;
        if (v87 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v118;
    if (v9 >= v118)
    {
      v8 = v116;
      goto LABEL_104;
    }
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  Swift::Int v95;
  Swift::Int v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(_QWORD *)(v79 + 8 * i);
        v82 = v78;
        do
        {
          v83 = *(_QWORD *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_QWORD *)(v79 + v82 + 8) = v83;
          *(_QWORD *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v95 = result;
  v96 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v94 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(_QWORD *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v96;
    v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v92 = v2;
  v93 = *v2 - 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v95)
      goto LABEL_47;
    v21 = v13 + v95;
    if (__OFADD__(v13, v95))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (uint64_t *)(v93 + 8 * v9);
      do
      {
        v23 = *(_QWORD *)(v10 + 8 * v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *v25;
          if (v23 >= *v25)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v97;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v8 = v94;
      v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  float v13;
  float v14;
  float *v15;
  _OWORD *v16;
  Swift::Int v17;
  Swift::Int v18;
  __int128 *v19;
  Swift::Int v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  __int128 *v71;
  Swift::Int v72;
  __int128 *v73;
  __int128 *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  Swift::Int v104;
  float *v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _BYTE v122[25];
  _BYTE v123[25];
  _BYTE v124[25];

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_139;
    if ((unint64_t)v3 >= 2)
    {
      v79 = *v2;
      v80 = *v2 + 112;
      v81 = -1;
      for (i = 1; i != v3; ++i)
      {
        v83 = v81;
        v84 = v80;
        do
        {
          if (*(float *)(v84 - 88) >= *(float *)(v84 + 24))
            break;
          if (!v79)
            goto LABEL_143;
          v85 = (_OWORD *)(v84 - 112);
          v121 = *(_OWORD *)(v84 + 64);
          *(_OWORD *)v124 = *(_OWORD *)(v84 + 80);
          *(_OWORD *)&v124[9] = *(_OWORD *)(v84 + 89);
          v109 = *(_OWORD *)v84;
          v112 = *(_OWORD *)(v84 + 16);
          v115 = *(_OWORD *)(v84 + 32);
          v118 = *(_OWORD *)(v84 + 48);
          v86 = *(_OWORD *)(v84 - 96);
          *(_OWORD *)v84 = *(_OWORD *)(v84 - 112);
          *(_OWORD *)(v84 + 16) = v86;
          v87 = *(_OWORD *)(v84 - 80);
          v88 = *(_OWORD *)(v84 - 64);
          v89 = *(_OWORD *)(v84 - 16);
          *(_OWORD *)(v84 + 80) = *(_OWORD *)(v84 - 32);
          *(_OWORD *)(v84 + 96) = v89;
          v90 = *(_OWORD *)(v84 - 48);
          *(_OWORD *)(v84 + 48) = v88;
          *(_OWORD *)(v84 + 64) = v90;
          *(_OWORD *)(v84 + 32) = v87;
          v85[4] = v121;
          v85[5] = *(_OWORD *)v124;
          *(_OWORD *)((char *)v85 + 89) = *(_OWORD *)&v124[9];
          *v85 = v109;
          v85[1] = v112;
          v84 -= 112;
          v85[2] = v115;
          v85[3] = v118;
        }
        while (!__CFADD__(v83++, 1));
        v80 += 112;
        --v81;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_148;
  v103 = result;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v105 = (float *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v92 = (char *)MEMORY[0x24BEE4AF8];
LABEL_105:
      v102 = v8;
      if (v11 >= 2)
      {
        v93 = *v2;
        do
        {
          v94 = v11 - 2;
          if (v11 < 2)
            goto LABEL_134;
          if (!v93)
            goto LABEL_147;
          v95 = v92;
          v96 = *(_QWORD *)&v92[16 * v94 + 32];
          v97 = *(_QWORD *)&v92[16 * v11 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v93 + 112 * v96), (float *)(v93 + 112 * *(_QWORD *)&v92[16 * v11 + 16]), v93 + 112 * v97, v105);
          if (v1)
            break;
          if (v97 < v96)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v95 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v95);
          if (v94 >= *((_QWORD *)v95 + 2))
            goto LABEL_136;
          v98 = &v95[16 * v94 + 32];
          *(_QWORD *)v98 = v96;
          *((_QWORD *)v98 + 1) = v97;
          v99 = *((_QWORD *)v95 + 2);
          if (v11 > v99)
            goto LABEL_137;
          memmove(&v95[16 * v11 + 16], &v95[16 * v11 + 32], 16 * (v99 - v11));
          v92 = v95;
          *((_QWORD *)v95 + 2) = v99 - 1;
          v11 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v102 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v102 = v7;
    v105 = (float *)(v7 + 32);
  }
  v9 = 0;
  v100 = v2;
  v10 = *v2;
  v101 = v10 + 24;
  v106 = (char *)MEMORY[0x24BEE4AF8];
  v104 = v3;
  while (1)
  {
    v12 = v9++;
    if (v9 < v3)
    {
      v13 = *(float *)(v101 + 112 * v9);
      v14 = *(float *)(v101 + 112 * v12);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = (float *)(v10 + 136 + 112 * v12);
        while (v14 < v13 != *v15 >= v15[28])
        {
          ++v9;
          v15 += 28;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v13)
      {
        if (v9 < v12)
          goto LABEL_140;
        if (v12 < v9)
        {
          v16 = (_OWORD *)(v10 - 112 + 112 * v9);
          v17 = v9;
          v18 = v12;
          v19 = (__int128 *)(v10 + 112 * v12);
          do
          {
            if (v18 != --v17)
            {
              if (!v10)
                goto LABEL_146;
              v119 = v19[4];
              *(_OWORD *)v122 = v19[5];
              *(_OWORD *)&v122[9] = *(__int128 *)((char *)v19 + 89);
              v107 = *v19;
              v110 = v19[1];
              v113 = v19[2];
              v116 = v19[3];
              memmove(v19, v16, 0x70uLL);
              v16[4] = v119;
              v16[5] = *(_OWORD *)v122;
              *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)&v122[9];
              *v16 = v107;
              v16[1] = v110;
              v16[2] = v113;
              v16[3] = v116;
            }
            ++v18;
            v16 -= 7;
            v19 += 7;
          }
          while (v18 < v17);
          v3 = v104;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v9, v12))
      goto LABEL_138;
    if (v9 - v12 >= v103)
      goto LABEL_39;
    v20 = v12 + v103;
    if (__OFADD__(v12, v103))
      goto LABEL_141;
    if (v20 >= v3)
      v20 = v3;
    if (v20 < v12)
      break;
    if (v9 != v20)
    {
      v71 = (__int128 *)(v10 + 112 * v9);
      v21 = v106;
      do
      {
        v72 = v12;
        v73 = v71;
        do
        {
          if (*((float *)v73 - 22) >= *((float *)v73 + 6))
            break;
          if (!v10)
            goto LABEL_144;
          v74 = v73 - 7;
          v120 = v73[4];
          *(_OWORD *)v123 = v73[5];
          *(_OWORD *)&v123[9] = *(__int128 *)((char *)v73 + 89);
          v108 = *v73;
          v111 = v73[1];
          v114 = v73[2];
          v117 = v73[3];
          v75 = *(v73 - 6);
          *v73 = *(v73 - 7);
          v73[1] = v75;
          v76 = *(v73 - 1);
          v77 = *(v73 - 3);
          v73[5] = *(v73 - 2);
          v73[6] = v76;
          v78 = *(v73 - 4);
          v73[2] = *(v73 - 5);
          v73[3] = v78;
          v73[4] = v77;
          *v74 = v108;
          v74[1] = v111;
          *(__int128 *)((char *)v74 + 89) = *(_OWORD *)&v123[9];
          v74[4] = v120;
          v74[5] = *(_OWORD *)v123;
          ++v72;
          v73 -= 7;
          v74[2] = v114;
          v74[3] = v117;
        }
        while (v9 != v72);
        ++v9;
        v71 += 7;
      }
      while (v9 != v20);
      v9 = v20;
      if (v20 < v12)
        goto LABEL_133;
      goto LABEL_40;
    }
LABEL_39:
    v21 = v106;
    if (v9 < v12)
      goto LABEL_133;
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
    v23 = *((_QWORD *)v21 + 2);
    v22 = *((_QWORD *)v21 + 3);
    v11 = v23 + 1;
    if (v23 >= v22 >> 1)
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v21);
    *((_QWORD *)v21 + 2) = v11;
    v24 = v21 + 32;
    v25 = &v21[16 * v23 + 32];
    *(_QWORD *)v25 = v12;
    *((_QWORD *)v25 + 1) = v9;
    v106 = v21;
    if (v23)
    {
      while (1)
      {
        v26 = v11 - 1;
        if (v11 >= 4)
        {
          v31 = &v24[16 * v11];
          v32 = *((_QWORD *)v31 - 8);
          v33 = *((_QWORD *)v31 - 7);
          v37 = __OFSUB__(v33, v32);
          v34 = v33 - v32;
          if (v37)
            goto LABEL_122;
          v36 = *((_QWORD *)v31 - 6);
          v35 = *((_QWORD *)v31 - 5);
          v37 = __OFSUB__(v35, v36);
          v29 = v35 - v36;
          v30 = v37;
          if (v37)
            goto LABEL_123;
          v38 = v11 - 2;
          v39 = &v24[16 * v11 - 32];
          v41 = *(_QWORD *)v39;
          v40 = *((_QWORD *)v39 + 1);
          v37 = __OFSUB__(v40, v41);
          v42 = v40 - v41;
          if (v37)
            goto LABEL_125;
          v37 = __OFADD__(v29, v42);
          v43 = v29 + v42;
          if (v37)
            goto LABEL_128;
          if (v43 >= v34)
          {
            v61 = &v24[16 * v26];
            v63 = *(_QWORD *)v61;
            v62 = *((_QWORD *)v61 + 1);
            v37 = __OFSUB__(v62, v63);
            v64 = v62 - v63;
            if (v37)
              goto LABEL_132;
            v54 = v29 < v64;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v55 = *((_QWORD *)v21 + 4);
            v56 = *((_QWORD *)v21 + 5);
            v37 = __OFSUB__(v56, v55);
            v48 = v56 - v55;
            v49 = v37;
            goto LABEL_70;
          }
          v28 = *((_QWORD *)v21 + 4);
          v27 = *((_QWORD *)v21 + 5);
          v37 = __OFSUB__(v27, v28);
          v29 = v27 - v28;
          v30 = v37;
        }
        if ((v30 & 1) != 0)
          goto LABEL_124;
        v38 = v11 - 2;
        v44 = &v24[16 * v11 - 32];
        v46 = *(_QWORD *)v44;
        v45 = *((_QWORD *)v44 + 1);
        v47 = __OFSUB__(v45, v46);
        v48 = v45 - v46;
        v49 = v47;
        if (v47)
          goto LABEL_127;
        v50 = &v24[16 * v26];
        v52 = *(_QWORD *)v50;
        v51 = *((_QWORD *)v50 + 1);
        v37 = __OFSUB__(v51, v52);
        v53 = v51 - v52;
        if (v37)
          goto LABEL_130;
        if (__OFADD__(v48, v53))
          goto LABEL_131;
        if (v48 + v53 >= v29)
        {
          v54 = v29 < v53;
LABEL_76:
          if (v54)
            v26 = v38;
          goto LABEL_78;
        }
LABEL_70:
        if ((v49 & 1) != 0)
          goto LABEL_126;
        v57 = &v24[16 * v26];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v37 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v37)
          goto LABEL_129;
        if (v60 < v48)
          goto LABEL_15;
LABEL_78:
        v65 = v26 - 1;
        if (v26 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v10)
          goto LABEL_145;
        v66 = &v24[16 * v65];
        v67 = *(_QWORD *)v66;
        v68 = &v24[16 * v26];
        v69 = *((_QWORD *)v68 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v10 + 112 * *(_QWORD *)v66), (float *)(v10 + 112 * *(_QWORD *)v68), v10 + 112 * v69, v105);
        if (v1)
          goto LABEL_95;
        if (v69 < v67)
          goto LABEL_119;
        if (v26 > *((_QWORD *)v106 + 2))
          goto LABEL_120;
        *(_QWORD *)v66 = v67;
        *(_QWORD *)&v24[16 * v65 + 8] = v69;
        v70 = *((_QWORD *)v106 + 2);
        if (v26 >= v70)
          goto LABEL_121;
        v21 = v106;
        v11 = v70 - 1;
        memmove(&v24[16 * v26], v68 + 16, 16 * (v70 - 1 - v26));
        *((_QWORD *)v106 + 2) = v70 - 1;
        if (v70 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v104;
    if (v9 >= v104)
    {
      v8 = v102;
      v92 = v106;
      v2 = v100;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int *v18;
  Swift::Int v19;
  Swift::Int v20;
  int *v21;
  int v22;
  Swift::Int v23;
  float *v24;
  float v25;
  Swift::Int v26;
  float *v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  float v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  float *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v80 = 0;
      v81 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v83 = *(float *)(v81 + 4 * i);
        v84 = v80;
        do
        {
          v85 = v81 + 4 * v84;
          if (v83 >= *(float *)v85)
            break;
          if (!v81)
            goto LABEL_140;
          *(_DWORD *)(v85 + 4) = *(_DWORD *)v85;
          *(float *)(v81 + 4 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v97 = result;
  v98 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (float *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_102:
      v96 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_131;
          if (!v86)
            goto LABEL_144;
          v88 = v11;
          v89 = v11 + 32;
          v90 = *(_QWORD *)&v11[16 * v87 + 32];
          v91 = *(_QWORD *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v86 + 4 * v90), (float *)(v86 + 4 * *(_QWORD *)&v89[16 * v12 - 16]), v86 + 4 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v88 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_133;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v90;
          *((_QWORD *)v92 + 1) = v91;
          v93 = *((_QWORD *)v88 + 2);
          if (v12 > v93)
            goto LABEL_134;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v96 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v98;
    v96 = v7;
    __dst = (float *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 - 4;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v99 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(float *)(v10 + 4 * v9);
      v15 = *(float *)(v10 + 4 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(float *)(v10 + 4 * v9);
          if (v14 < v15 == v16 >= v17)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v18 = (int *)(v95 + 4 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (int *)(v10 + 4 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_143;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_135;
    if (v9 - v13 >= v97)
      goto LABEL_46;
    v23 = v13 + v97;
    if (__OFADD__(v13, v97))
      goto LABEL_138;
    if (v23 >= v3)
      v23 = v3;
    if (v23 < v13)
      break;
    if (v9 != v23)
    {
      v24 = (float *)(v95 + 4 * v9);
      do
      {
        v25 = *(float *)(v10 + 4 * v9);
        v26 = v13;
        v27 = v24;
        do
        {
          v28 = *v27;
          if (v25 >= *v27)
            break;
          if (!v10)
            goto LABEL_141;
          *v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      v9 = v23;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v99;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          v39 = *((_QWORD *)v38 - 8);
          v40 = *((_QWORD *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_119;
          v43 = *((_QWORD *)v38 - 6);
          v42 = *((_QWORD *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_120;
          v45 = v12 - 2;
          v46 = &v31[16 * v12 - 32];
          v48 = *(_QWORD *)v46;
          v47 = *((_QWORD *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_122;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_125;
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_129;
            v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v62 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_77;
          }
          v35 = *((_QWORD *)v11 + 4);
          v34 = *((_QWORD *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_121;
        v45 = v12 - 2;
        v51 = &v31[16 * v12 - 32];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_124;
        v57 = &v31[16 * v33];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_127;
        if (__OFADD__(v55, v60))
          goto LABEL_128;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_83:
          if (v61)
            v33 = v45;
          goto LABEL_85;
        }
LABEL_77:
        if ((v56 & 1) != 0)
          goto LABEL_123;
        v64 = &v31[16 * v33];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_126;
        if (v67 < v55)
          goto LABEL_15;
LABEL_85:
        v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_142;
        v73 = &v31[16 * v72];
        v74 = *(_QWORD *)v73;
        v75 = v31;
        v76 = &v31[16 * v33];
        v77 = *((_QWORD *)v76 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((float *)(v10 + 4 * *(_QWORD *)v73), (float *)(v10 + 4 * *(_QWORD *)v76), v10 + 4 * v77, __dst);
        if (v1)
          goto LABEL_113;
        if (v77 < v74)
          goto LABEL_116;
        if (v33 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v75[16 * v72 + 8] = v77;
        v78 = *((_QWORD *)v11 + 2);
        if (v33 >= v78)
          goto LABEL_118;
        v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        v31 = v75;
        *((_QWORD *)v11 + 2) = v78 - 1;
        v10 = v99;
        if (v78 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v98;
    if (v9 >= v98)
    {
      v8 = v96;
      v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v26 = __dst;
  v27 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      v19 = 16 * v13;
      if (__dst != a2 || &a2[v19] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v20 = &v4[v19];
      v25 = &v4[v19];
      v27 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v21 = (char *)(a3 - 16);
        do
        {
          v22 = v21 + 16;
          if (*((float *)v20 - 2) >= *((float *)v6 - 2))
          {
            v25 = v20 - 16;
            if (v22 < v20 || v21 >= v20 || v22 != v20)
              *(_OWORD *)v21 = *((_OWORD *)v20 - 1);
            v23 = v6;
            v20 -= 16;
            if (v6 <= v7)
              break;
          }
          else
          {
            v23 = v6 - 16;
            if (v22 != v6 || v21 >= v6)
              *(_OWORD *)v21 = *(_OWORD *)v23;
            v27 = v6 - 16;
            if (v23 <= v7)
              break;
          }
          v21 -= 16;
          v6 = v23;
        }
        while (v20 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v27, &v26, &v25);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    v14 = 16 * v10;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14);
    v15 = &v4[v14];
    v25 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      v16 = v4;
      while (1)
      {
        if (*((float *)v6 + 2) >= *((float *)v16 + 2))
        {
          v4 = v16 + 16;
          v18 = v16;
          v17 = v6;
          if (v7 == v16)
          {
            v16 += 16;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v16 += 16;
          }
        }
        else
        {
          v17 = v6 + 16;
          v18 = v6;
          if (v7 == v6 && v7 < v17)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v18;
LABEL_22:
        v7 += 16;
        if (v16 < v15)
        {
          v6 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v26 = v4;
        v27 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  char *v26;
  char *v27;
  char *v28;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __dst;
  v28 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      v18 = 16 * v13;
      if (__dst != a2 || &a2[v18] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v19 = &v4[v18];
      v26 = &v4[v18];
      v28 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v20 = (char *)(a3 - 16);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 16;
          v24 = *((_QWORD *)v21 - 2);
          v21 -= 16;
          v23 = v24;
          if (v21[8] == 1)
            __asm { BR              X16 }
          if (*((_QWORD *)v19 - 2) >= v23)
          {
            v26 = v19 - 16;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
              *(_OWORD *)v20 = *((_OWORD *)v19 - 1);
            v21 = v6;
            v19 -= 16;
            if (v6 <= v7)
              goto LABEL_48;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v28 = v21;
            if (v21 <= v7)
              goto LABEL_48;
          }
          v20 -= 16;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_48;
        }
      }
      goto LABEL_48;
    }
  }
  else if (v8 >= -15)
  {
    v14 = 16 * v10;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14);
    v15 = &v4[v14];
    v26 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      do
      {
        v16 = *(_QWORD *)v4;
        if (v4[8] == 1)
          __asm { BR              X12 }
        if (*(_QWORD *)v6 >= v16)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v27 = v4;
          v17 = v6;
        }
        else
        {
          v17 = v6 + 16;
          if (v7 < v6 || v7 >= v17 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v15)
          break;
        v6 = v17;
      }
      while ((unint64_t)v17 < a3);
      v28 = v7;
    }
LABEL_48:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v28, &v27, &v26);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, float))
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v20;

  v20 = (unint64_t *)result;
  v6 = 0;
  v7 = 0;
  v8 = a3 + 64;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
      goto LABEL_5;
    }
    v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v12)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v6, a3);
    v16 = *(_QWORD *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      v7 = v15 + 1;
      if (v15 + 1 >= v12)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v6, a3);
      v16 = *(_QWORD *)(v8 + 8 * v7);
      if (!v16)
      {
        v7 = v15 + 2;
        if (v15 + 2 >= v12)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v6, a3);
        v16 = *(_QWORD *)(v8 + 8 * v7);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_5:
    result = a4(*(unsigned int *)(*(_QWORD *)(a3 + 48) + 4 * v14), *(float *)(*(_QWORD *)(a3 + 56) + 4 * v14));
    if ((result & 1) != 0)
    {
      *(unint64_t *)((char *)v20 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v6++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v6, a3);
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v12)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v6, a3);
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v12)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v6, a3);
    v16 = *(_QWORD *)(v8 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands18PoseDnnOutputLayerOG_SRySo13simd_float4x4aGSgs5NeverOTg5014_s5Hands15Hande23BuilderC29buildBlizzardg152Transforms33_C2E1F6CCE61A94F2BF836DCAB95B0C20LL04withC5ModelyAA0cT6ParamsC6params_AA13E5RTRegressorCSg5modelAHSg012handPresenceU0AL0z8PresenceT0SayAA0c3f2G5H60OG0z8PresenceG9Selectiont_tKFSRySo13simd_float4x4aGSgARXEfU_AF0E11ModelParamsC6params_AF13E5RTRegressorCSg5modelARSg18handPresenceParamsAV17handPresenceModelAI012handPresenceG9SelectiontTf1cn_nTf4ngX_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  int64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v24;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v24 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v24;
    v8 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v9 = *v8++;
      v10 = specialized static PoseModelInference.getEspressoOutputAsBuffer(_:_:)(v9, a2, a3);
      if (v4)
      {

        v13 = 0;
        v14 = 0;
        v4 = 0;
        v15 = 1;
      }
      else
      {
        v16 = (v11 - v10) / 64;
        if (v10)
          v17 = v10;
        else
          v17 = 0;
        if (!v10)
          v16 = 0;
        if ((v12 & 1) != 0)
          v13 = 0;
        else
          v13 = v17;
        if ((v12 & 1) != 0)
          v14 = 0;
        else
          v14 = v16;
        v15 = (v12 & 1) != 0;
      }
      v19 = *(_QWORD *)(v24 + 16);
      v18 = *(_QWORD *)(v24 + 24);
      if (v19 >= v18 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      *(_QWORD *)(v24 + 16) = v19 + 1;
      v20 = v24 + 24 * v19;
      *(_QWORD *)(v20 + 32) = v13;
      *(_QWORD *)(v20 + 40) = v14;
      *(_BYTE *)(v20 + 48) = v15;
      --v5;
    }
    while (v5);
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_s5SIMD3VySfGs5NeverOTg50181_s5Hands15HandPoseBuilderC26computeCorrectionTransform19forCameraTransition020withAlternateCamerasB0So13simd_float4x4a9transform_Sf5scaletAA0i4PairJ0V5StateO_AA0B10DescriptorVSgtFs5D13VySfGSiXEfU0_SayAIGTf1cn_nTf4ng_nTm(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    result = v14;
    v6 = (unint64_t *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v9 = *v6++;
      v8 = v9;
      if (v9 >= v7)
        break;
      v10 = *(_OWORD *)(a2 + 32 + 16 * v8);
      v15 = result;
      v12 = *(_QWORD *)(result + 16);
      v11 = *(_QWORD *)(result + 24);
      if (v12 >= v11 >> 1)
      {
        v13 = v10;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v10 = v13;
        result = v15;
      }
      *(_QWORD *)(result + 16) = v12 + 1;
      *(_OWORD *)(result + 16 * v12 + 32) = v10;
      if (!--v3)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized HandPoseBuilder.buildJointUncertainity(withPoseModel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  char **v7;
  char *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  int v11;
  char v12;
  _BYTE *v13;
  char *v14;
  unint64_t v15;
  char v16;

  result = specialized static PoseModelInference.getEspressoOutputAsBuffer(_:_:)(2, a1, a2);
  if (!v3)
  {
    if ((v5 & 1) != 0)
    {
      lazy protocol witness table accessor for type HandPoseBuilderError and conformance HandPoseBuilderError();
      swift_allocError();
      *v13 = 6;
      return swift_willThrow();
    }
    v6 = result;
    v7 = (char **)(v2 + 64);
    swift_beginAccess();
    v8 = *(char **)(v2 + 64);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 64) = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_30;
    while (1)
    {
      v10 = 0;
      *v7 = v8;
      while (1)
      {
        v11 = *(_DWORD *)(v6 + 4 * v10);
        v12 = swift_isUniquelyReferenced_nonNull_native();
        *v7 = v8;
        if ((v12 & 1) == 0)
        {
          v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
          *v7 = v8;
        }
        if (v10 >= *((_QWORD *)v8 + 2))
          break;
        *(_DWORD *)&v8[4 * v10 + 32] = v11;
        v8 = *v7;
        if (++v10 == 27)
        {
          swift_endAccess();
          if (one-time initialization token for kMetaCarpelJointIndices != -1)
            swift_once();
          v6 = static HandPoseBuilder.kMetaCarpelJointIndices;
          v8 = *(char **)(static HandPoseBuilder.kMetaCarpelJointIndices + 16);
          if (!v8)
            goto LABEL_23;
          swift_bridgeObjectRetain();
          v14 = 0;
          while (1)
          {
            v15 = *(_QWORD *)(v6 + 8 * (_QWORD)v14 + 32);
            swift_beginAccess();
            v10 = (unint64_t)*v7;
            v16 = swift_isUniquelyReferenced_nonNull_native();
            *v7 = (char *)v10;
            if ((v16 & 1) != 0)
            {
              if ((v15 & 0x8000000000000000) != 0)
                goto LABEL_21;
            }
            else
            {
              v10 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
              *v7 = (char *)v10;
              if ((v15 & 0x8000000000000000) != 0)
              {
LABEL_21:
                __break(1u);
LABEL_22:
                swift_bridgeObjectRelease();
LABEL_23:
                if (*((_QWORD *)*v7 + 2))
                {
                  v11 = *((_DWORD *)*v7 + 8);
                  swift_beginAccess();
                  v10 = (unint64_t)*v7;
                  result = swift_isUniquelyReferenced_nonNull_native();
                  *v7 = (char *)v10;
                  if ((result & 1) != 0)
                  {
LABEL_25:
                    if (*(_QWORD *)(v10 + 16) < 0x1AuLL)
                    {
                      __break(1u);
                    }
                    else
                    {
                      *(_DWORD *)(v10 + 132) = v11;
                      return swift_endAccess();
                    }
                    return result;
                  }
                }
                else
                {
                  __break(1u);
                }
                result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
                v10 = result;
                *v7 = (char *)result;
                goto LABEL_25;
              }
            }
            if (v15 >= *(_QWORD *)(v10 + 16))
              goto LABEL_29;
            ++v14;
            *(_DWORD *)(v10 + 4 * v15 + 32) = -1082130432;
            swift_endAccess();
            if (v8 == v14)
              goto LABEL_22;
          }
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
    }
  }
  return result;
}

uint64_t specialized HandPoseBuilder.buildJointOcclusions(withPoseModel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  int *v13;
  int v14;
  int v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  char v45;
  uint64_t v46;

  result = specialized static PoseModelInference.getEspressoOutputAsBuffer(_:_:)(4, a1, a2);
  if (!v3)
  {
    if ((v6 & 1) != 0
      || (v7 = result) == 0
      || ((v5 - result) & 0xFFFFFFFFFFFFFFFCLL) != 0xD8
      || (*(_BYTE *)(v2 + 169) & 1) != 0)
    {
      lazy protocol witness table accessor for type HandPoseBuilderError and conformance HandPoseBuilderError();
      swift_allocError();
      *v8 = 5;
      return swift_willThrow();
    }
    v45 = *(_BYTE *)(v2 + 168);
    v9 = (uint64_t *)(v2 + 56);
    v10 = *(_QWORD *)(v2 + 144);
    v11 = *(_QWORD *)(v2 + 160);
    v46 = *(_QWORD *)(v2 + 152);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int32, Float>);
    for (i = 0; i != 27; ++i)
    {
      v13 = (int *)(v7 + 4 * i);
      v14 = *v13;
      v15 = v13[27];
      if ((v46 & 1) == 0)
      {
        if (v10 < (uint64_t)0xFFFFFFFF80000000)
        {
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        if (v10 > 0x7FFFFFFF)
          goto LABEL_49;
      }
      if ((v45 & 1) == 0)
      {
        if (v11 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_50;
        if (v11 > 0x7FFFFFFF)
          goto LABEL_51;
      }
      v2 = static _DictionaryStorage.allocate(capacity:)();
      v16 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
      if ((v17 & 1) != 0)
        goto LABEL_52;
      *(_QWORD *)(v2 + 64 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v18 = 4 * v16;
      *(_DWORD *)(*(_QWORD *)(v2 + 48) + v18) = v10;
      *(_DWORD *)(*(_QWORD *)(v2 + 56) + v18) = v14;
      v19 = *(_QWORD *)(v2 + 16);
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
        goto LABEL_53;
      *(_QWORD *)(v2 + 16) = v21;
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v23 & 1) != 0)
        goto LABEL_54;
      *(_QWORD *)(v2 + 64 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      v24 = 4 * v22;
      *(_DWORD *)(*(_QWORD *)(v2 + 48) + v24) = v11;
      *(_DWORD *)(*(_QWORD *)(v2 + 56) + v24) = v15;
      v25 = *(_QWORD *)(v2 + 16);
      v20 = __OFADD__(v25, 1);
      v26 = v25 + 1;
      if (v20)
        goto LABEL_55;
      *(_QWORD *)(v2 + 16) = v26;
      swift_beginAccess();
      v27 = (_QWORD *)*v9;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v9 = (uint64_t)v27;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
        *v9 = (uint64_t)v27;
      }
      if (i >= v27[2])
        goto LABEL_56;
      v27[i + 4] = v2;
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for kMetaCarpelJointIndices != -1)
      goto LABEL_66;
    while (1)
    {
      v29 = static HandPoseBuilder.kMetaCarpelJointIndices;
      v30 = *(_QWORD *)(static HandPoseBuilder.kMetaCarpelJointIndices + 16);
      if (!v30)
        break;
      swift_bridgeObjectRetain();
      v31 = 0;
      while (1)
      {
        v32 = *(_QWORD *)(v29 + 8 * v31 + 32);
        if ((v46 & 1) == 0)
        {
          if (v10 < (uint64_t)0xFFFFFFFF80000000)
            goto LABEL_57;
          if (v10 > 0x7FFFFFFF)
            break;
        }
        if ((v45 & 1) == 0)
        {
          if (v11 < (uint64_t)0xFFFFFFFF80000000)
            goto LABEL_59;
          if (v11 > 0x7FFFFFFF)
            goto LABEL_60;
        }
        v2 = static _DictionaryStorage.allocate(capacity:)();
        v33 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
        if ((v34 & 1) != 0)
          goto LABEL_61;
        *(_QWORD *)(v2 + 64 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
        v35 = 4 * v33;
        *(_DWORD *)(*(_QWORD *)(v2 + 48) + v35) = v10;
        *(_DWORD *)(*(_QWORD *)(v2 + 56) + v35) = -1082130432;
        v36 = *(_QWORD *)(v2 + 16);
        v20 = __OFADD__(v36, 1);
        v37 = v36 + 1;
        if (v20)
          goto LABEL_62;
        *(_QWORD *)(v2 + 16) = v37;
        v38 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
        if ((v39 & 1) != 0)
          goto LABEL_63;
        *(_QWORD *)(v2 + 64 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v38;
        v40 = 4 * v38;
        *(_DWORD *)(*(_QWORD *)(v2 + 48) + v40) = v11;
        *(_DWORD *)(*(_QWORD *)(v2 + 56) + v40) = -1082130432;
        v41 = *(_QWORD *)(v2 + 16);
        v20 = __OFADD__(v41, 1);
        v42 = v41 + 1;
        if (v20)
          goto LABEL_64;
        *(_QWORD *)(v2 + 16) = v42;
        swift_beginAccess();
        v43 = (_QWORD *)*v9;
        v44 = swift_isUniquelyReferenced_nonNull_native();
        *v9 = (uint64_t)v43;
        if ((v44 & 1) != 0)
        {
          if ((v32 & 0x8000000000000000) != 0)
            goto LABEL_42;
        }
        else
        {
          v43 = specialized _ArrayBuffer._consumeAndCreateNew()(v43);
          *v9 = (uint64_t)v43;
          if ((v32 & 0x8000000000000000) != 0)
          {
LABEL_42:
            __break(1u);
LABEL_43:
            swift_bridgeObjectRelease();
            goto LABEL_44;
          }
        }
        if (v32 >= v43[2])
          goto LABEL_65;
        ++v31;
        v43[v32 + 4] = v2;
        swift_endAccess();
        swift_bridgeObjectRelease();
        if (v30 == v31)
          goto LABEL_43;
      }
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      swift_once();
    }
LABEL_44:
    if (*(_QWORD *)(*v9 + 16))
    {
      v2 = *(_QWORD *)(*v9 + 32);
      swift_beginAccess();
      v11 = *v9;
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      *v9 = v11;
      if ((result & 1) != 0)
        goto LABEL_46;
    }
    else
    {
      __break(1u);
    }
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v11);
    v11 = result;
    *v9 = result;
LABEL_46:
    if (*(_QWORD *)(v11 + 16) < 0x1AuLL)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v11 + 232) = v2;
      swift_endAccess();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandPoseBuilderError and conformance HandPoseBuilderError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandPoseBuilderError and conformance HandPoseBuilderError;
  if (!lazy protocol witness table cache variable for type HandPoseBuilderError and conformance HandPoseBuilderError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandPoseBuilderError, &type metadata for HandPoseBuilderError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandPoseBuilderError and conformance HandPoseBuilderError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandPoseBuilderError and conformance HandPoseBuilderError;
  if (!lazy protocol witness table cache variable for type HandPoseBuilderError and conformance HandPoseBuilderError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandPoseBuilderError, &type metadata for HandPoseBuilderError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandPoseBuilderError and conformance HandPoseBuilderError);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242638C5C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

double _s5Hands9ImageDataVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double _s5Hands13PoseImageCropVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 168) = 2;
  return result;
}

uint64_t outlined init with take of ImageData?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s5Hands9ImageDataVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t _s5Hands13PoseImageCropVSgWOg(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 168);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

uint64_t outlined copy of ImageData?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17)
{
  void *v18;
  id v19;
  id v20;

  if (a9)
  {
    v18 = (void *)result;
    swift_bridgeObjectRetain();
    v19 = v18;
    v20 = a8;
    swift_retain();
    outlined copy of Data?(a14, a15);
    return outlined copy of Data?(a16, a17);
  }
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined copy of PoseImageCrop?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,char a22)
{
  uint64_t result;

  if (a22 != 2)
    return outlined copy of Data?(a19, a20);
  return result;
}

uint64_t outlined retain of PoseImageCrop?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 168);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    v4);
  return a1;
}

void outlined consume of PoseImageCrop?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,char a22)
{
  if (a22 != 2)
    outlined consume of Data?(a19, a20);
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

_QWORD *outlined retain of ImageData?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23]);
  return a1;
}

uint64_t outlined consume of ImageData?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17)
{
  uint64_t result;

  result = a9;
  if (a9)
  {
    swift_release();

    swift_bridgeObjectRelease();
    outlined consume of Data?(a14, a15);
    return outlined consume of Data?(a16, a17);
  }
  return result;
}

uint64_t outlined init with copy of HandDescriptor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of HandDescriptor?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandDescriptor?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined copy of HandPose?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined destroy of HandDescriptor(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HandDescriptor();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of HandPose?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for IndexSet();
    result = MEMORY[0x242638C74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of HandDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HandDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in HandPoseBuilder.set(gtInjections:withHandsKitData:)(unsigned int a1)
{
  uint64_t v1;

  return closure #1 in HandPoseBuilder.set(gtInjections:withHandsKitData:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined retain of ImageData(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  id v9;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  swift_bridgeObjectRetain();
  v8 = v2;
  v9 = v3;
  swift_retain();
  outlined copy of Data?(v4, v5);
  outlined copy of Data?(v6, v7);
  return a1;
}

uint64_t outlined release of ImageData(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  swift_release();

  swift_bridgeObjectRelease();
  outlined consume of Data?(v4, v5);
  outlined consume of Data?(v6, v7);
  return a1;
}

uint64_t outlined retain of PoseImageCrop(uint64_t a1)
{
  outlined copy of Data?(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
  return a1;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HandPoseBuilderError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HandPoseBuilderError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23D6B96FC + 4 * byte_23D9A6CD5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23D6B9730 + 4 * byte_23D9A6CD0[v4]))();
}

uint64_t sub_23D6B9730(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D6B9738(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D6B9740);
  return result;
}

uint64_t sub_23D6B974C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D6B9754);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23D6B9758(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D6B9760(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for HandPoseBuilderError(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for HandPoseBuilderError(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HandPoseBuilderError()
{
  return &type metadata for HandPoseBuilderError;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, int32x2_t a2)
{
  uint64_t result;
  __int32 *v4;
  unint64_t v5;
  __int32 v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a1;
  v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    v5 = 0;
    v6 = a2.i32[0];
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2.i32[0];
  v7 = vdupq_lane_s32(a2, 0);
  v8 = (int32x4_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  unint64_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = vdupq_n_s32(a1);
  v8 = (int32x4_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<Int8>?);
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = (int64x2_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = (int64x2_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(unint64_t a1, double a2)
{
  uint64_t result;
  double *v4;
  unint64_t v5;
  double v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(result + 16) = a1;
  v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    v5 = 0;
    v6 = a2;
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a2;
  v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v8 = (int64x2_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t specialized Array.init(repeating:count:)(int a1, size_t a2)
{
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x24BEE4AF8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hungarian<Double>.Algorithm.State);
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return v4;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
      v4 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v5;
  }
  return result;
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_23D6B9E60()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_23D6B9F3C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  void *v0;

  Hasher.init(_seed:)();
  type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v0 = (void *)NSString.init(stringLiteral:)();
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int sub_23D6BA0B4()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_23D6BA194()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

unint64_t specialized Array.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > result)
  {
    v3 = a2 + 16 * result;
    v4 = *(_QWORD *)(v3 + 32);
    LOBYTE(v3) = *(_BYTE *)(v3 + 40);
    *(_QWORD *)a3 = v4;
    *(_BYTE *)(a3 + 8) = v3;
    return result;
  }
  __break(1u);
  return result;
}

{
  unint64_t v4;
  uint64_t v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = result;
    if (*(_QWORD *)(a2 + 16) > result)
    {
      v6 = type metadata accessor for HandDescriptor();
      return outlined init with copy of TrackingUpdateDataPB(a2+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * v4, a3, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
    }
  }
  __break(1u);
  return result;
}

unint64_t specialized Array.subscript.getter(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
LABEL_5:
    __break(1u);
  return result;
}

{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > result)
  {
    return *(unsigned int *)(a2 + 4 * result + 32);
  }
  __break(1u);
  return result;
}

{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > result)
  {
    return *(_QWORD *)(a2 + 8 * result + 32);
  }
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;
  char v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, CVBufferRef>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (id *)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = *((_BYTE *)v4 - 8);
    v7 = *v4;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = v2[6] + 16 * result;
    *(_QWORD *)v10 = v5;
    *(_BYTE *)(v10 + 8) = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int32, Matrix2dPB)(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int32, Matrix2dPB)(v6, (uint64_t)&v13, &demangling cache variable for type metadata for (CFStringRef, Any));
    v7 = v13;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int32, Matrix2dPB)(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CameraSource, [SIMD2<Float>]>);
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, simd_float4x4>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_BYTE *)v4 - 8);
    v16 = v4[1];
    v17 = *v4;
    v14 = v4[3];
    v15 = v4[2];
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = v2[6] + 16 * result;
    *(_QWORD *)v9 = v5;
    *(_BYTE *)(v9 + 8) = v6;
    v10 = (_OWORD *)(v2[7] + (result << 6));
    *v10 = v17;
    v10[1] = v16;
    v10[2] = v15;
    v10[3] = v14;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 5;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<PoseDnnOutputLayer, IONamedSlice>, (void (*)(uint64_t))PoseDnnOutputLayer.rawValue.getter, specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<PoseDnnInputLayer, IONamedSlice>, (void (*)(uint64_t))PoseDnnInputLayer.rawValue.getter, specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<PinchDnnInputLayer, IONamedSlice>, (void (*)(uint64_t))PinchDnnInputLayer.rawValue.getter, specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, espresso_buffer_t>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = *(_OWORD *)(a1 + 176);
  v43 = *(_OWORD *)(a1 + 160);
  v44 = v4;
  v45 = *(_OWORD *)(a1 + 192);
  v46 = *(_QWORD *)(a1 + 208);
  v5 = *(_OWORD *)(a1 + 112);
  v39 = *(_OWORD *)(a1 + 96);
  v40 = v5;
  v6 = *(_OWORD *)(a1 + 144);
  v41 = *(_OWORD *)(a1 + 128);
  v42 = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v35 = *(_OWORD *)(a1 + 32);
  v36 = v7;
  v8 = *(_OWORD *)(a1 + 80);
  v37 = *(_OWORD *)(a1 + 64);
  v38 = v8;
  v10 = *((_QWORD *)&v35 + 1);
  v9 = v35;
  outlined retain of (String, espresso_buffer_t)((uint64_t)&v35);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
  if ((v12 & 1) != 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  v13 = 216;
  while (1)
  {
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v2[6] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    v15 = v2[7] + 168 * result;
    v16 = v36;
    v17 = v38;
    *(_OWORD *)(v15 + 16) = v37;
    *(_OWORD *)(v15 + 32) = v17;
    *(_OWORD *)v15 = v16;
    v18 = v39;
    v19 = v40;
    v20 = v42;
    *(_OWORD *)(v15 + 80) = v41;
    *(_OWORD *)(v15 + 96) = v20;
    *(_OWORD *)(v15 + 48) = v18;
    *(_OWORD *)(v15 + 64) = v19;
    v21 = v43;
    v22 = v44;
    v23 = v45;
    *(_QWORD *)(v15 + 160) = v46;
    *(_OWORD *)(v15 + 128) = v22;
    *(_OWORD *)(v15 + 144) = v23;
    *(_OWORD *)(v15 + 112) = v21;
    v24 = v2[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      break;
    v2[2] = v26;
    if (!--v3)
      goto LABEL_9;
    v27 = v13 + 184;
    v28 = (__int128 *)(a1 + v13);
    v29 = v28[9];
    v43 = v28[8];
    v44 = v29;
    v45 = v28[10];
    v46 = *((_QWORD *)v28 + 22);
    v30 = v28[5];
    v39 = v28[4];
    v40 = v30;
    v31 = v28[7];
    v41 = v28[6];
    v42 = v31;
    v32 = v28[1];
    v35 = *v28;
    v36 = v32;
    v33 = v28[3];
    v37 = v28[2];
    v38 = v33;
    v10 = *((_QWORD *)&v35 + 1);
    v9 = v35;
    outlined retain of (String, espresso_buffer_t)((uint64_t)&v35);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    v13 = v27;
    if ((v34 & 1) != 0)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<PinchAcceptorID, PinchAcceptor>, (void (*)(uint64_t))lazy protocol witness table accessor for type PinchAcceptorID and conformance PinchAcceptorID, (uint64_t)&type metadata for PinchAcceptorID, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, InputPortInfo>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, OutputPortInfo>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, ContiguousArray<PrewiredInputPortInfo>>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, ContiguousArray<PrewiredOutputPortInfo>>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<MonoDnnOutputLayer, IONamedSlice>, (void (*)(uint64_t))MonoDnnOutputLayer.rawValue.getter, specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CameraSource, Float>, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<HandRejectionReason, UInt64>, (void (*)(uint64_t))lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason, (uint64_t)&type metadata for HandRejectionReason, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CameraSource, UInt64>, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<HandPresence.Category, UInt64>, (void (*)(uint64_t))lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category, (uint64_t)&type metadata for HandPresence.Category, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CameraSource, [StatisticUtils.CameraRegion : UInt64]>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<StatisticUtils.CameraRegion, UInt64>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *((unsigned __int16 *)v4 - 4) | (*((unsigned __int8 *)v4 - 6) << 16);
    v6 = *v4;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = v2[6] + 3 * result;
    *(_BYTE *)(v9 + 2) = BYTE2(v5);
    *(_WORD *)v9 = v5;
    *(_QWORD *)(v2[7] + 8 * result) = v6;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, ImageData>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = *(_OWORD *)(a1 + 208);
  v48 = *(_OWORD *)(a1 + 192);
  v49 = v4;
  v50 = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 144);
  v44 = *(_OWORD *)(a1 + 128);
  v45 = v5;
  v6 = *(_OWORD *)(a1 + 176);
  v46 = *(_OWORD *)(a1 + 160);
  v47 = v6;
  v7 = *(_OWORD *)(a1 + 80);
  v40 = *(_OWORD *)(a1 + 64);
  v41 = v7;
  v8 = *(_OWORD *)(a1 + 112);
  v42 = *(_OWORD *)(a1 + 96);
  v43 = v8;
  v9 = *(_OWORD *)(a1 + 48);
  v38 = *(_OWORD *)(a1 + 32);
  v39 = v9;
  v10 = v38;
  v11 = BYTE8(v38);
  outlined retain of (CameraSource, ImageData)(&v38);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v13 & 1) != 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  v14 = 240;
  while (1)
  {
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = v2[6] + 16 * result;
    *(_QWORD *)v15 = v10;
    *(_BYTE *)(v15 + 8) = v11 & 1;
    v16 = (_OWORD *)(v2[7] + 192 * result);
    v17 = v39;
    v18 = v40;
    v19 = v42;
    v16[2] = v41;
    v16[3] = v19;
    *v16 = v17;
    v16[1] = v18;
    v20 = v43;
    v21 = v44;
    v22 = v46;
    v16[6] = v45;
    v16[7] = v22;
    v16[4] = v20;
    v16[5] = v21;
    v23 = v47;
    v24 = v48;
    v25 = v50;
    v16[10] = v49;
    v16[11] = v25;
    v16[8] = v23;
    v16[9] = v24;
    v26 = v2[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      break;
    v2[2] = v28;
    if (!--v3)
      goto LABEL_9;
    v29 = v14 + 208;
    v30 = (__int128 *)(a1 + v14);
    v31 = v30[11];
    v48 = v30[10];
    v49 = v31;
    v50 = v30[12];
    v32 = v30[7];
    v44 = v30[6];
    v45 = v32;
    v33 = v30[9];
    v46 = v30[8];
    v47 = v33;
    v34 = v30[3];
    v40 = v30[2];
    v41 = v34;
    v35 = v30[5];
    v42 = v30[4];
    v43 = v35;
    v36 = v30[1];
    v38 = *v30;
    v39 = v36;
    v10 = v38;
    v11 = BYTE8(v38);
    outlined retain of (CameraSource, ImageData)(&v38);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    v14 = v29;
    if ((v37 & 1) != 0)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[3];

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, PoseImageCrop>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = *(_OWORD *)(a1 + 176);
  v43 = *(_OWORD *)(a1 + 160);
  v44 = v4;
  v45[0] = *(_OWORD *)(a1 + 192);
  *(_OWORD *)((char *)v45 + 9) = *(_OWORD *)(a1 + 201);
  v5 = *(_OWORD *)(a1 + 112);
  v39 = *(_OWORD *)(a1 + 96);
  v40 = v5;
  v6 = *(_OWORD *)(a1 + 144);
  v41 = *(_OWORD *)(a1 + 128);
  v42 = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v35 = *(_OWORD *)(a1 + 32);
  v36 = v7;
  v8 = *(_OWORD *)(a1 + 80);
  v37 = *(_OWORD *)(a1 + 64);
  v38 = v8;
  v9 = v35;
  v10 = BYTE8(v35);
  outlined retain of (CameraSource, PoseImageCrop)((uint64_t)&v35);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v12 & 1) != 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  v13 = 224;
  while (1)
  {
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = v2[6] + 16 * result;
    *(_QWORD *)v14 = v9;
    *(_BYTE *)(v14 + 8) = v10 & 1;
    v15 = (_OWORD *)(v2[7] + 176 * result);
    v16 = v36;
    v17 = v38;
    v15[1] = v37;
    v15[2] = v17;
    *v15 = v16;
    v18 = v39;
    v19 = v40;
    v20 = v42;
    v15[5] = v41;
    v15[6] = v20;
    v15[3] = v18;
    v15[4] = v19;
    v21 = v43;
    v22 = v44;
    v23 = v45[0];
    *(_OWORD *)((char *)v15 + 153) = *(_OWORD *)((char *)v45 + 9);
    v15[8] = v22;
    v15[9] = v23;
    v15[7] = v21;
    v24 = v2[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      break;
    v2[2] = v26;
    if (!--v3)
      goto LABEL_9;
    v27 = v13 + 192;
    v28 = (__int128 *)(a1 + v13);
    v29 = v28[9];
    v43 = v28[8];
    v44 = v29;
    v45[0] = v28[10];
    *(_OWORD *)((char *)v45 + 9) = *(__int128 *)((char *)v28 + 169);
    v30 = v28[5];
    v39 = v28[4];
    v40 = v30;
    v31 = v28[7];
    v41 = v28[6];
    v42 = v31;
    v32 = v28[1];
    v35 = *v28;
    v36 = v32;
    v33 = v28[3];
    v37 = v28[2];
    v38 = v33;
    v9 = v35;
    v10 = BYTE8(v35);
    outlined retain of (CameraSource, PoseImageCrop)((uint64_t)&v35);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    v13 = v27;
    if ((v34 & 1) != 0)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<HandPresence.Category, Float>, (void (*)(uint64_t))lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category, (uint64_t)&type metadata for HandPresence.Category, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, DetectionResult>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = *(_OWORD *)(a1 + 112);
  v32 = *(_OWORD *)(a1 + 96);
  v33 = v4;
  v34[0] = *(_OWORD *)(a1 + 128);
  *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)(a1 + 137);
  v5 = *(_OWORD *)(a1 + 48);
  v28 = *(_OWORD *)(a1 + 32);
  v29 = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v30 = *(_OWORD *)(a1 + 64);
  v31 = v6;
  v7 = v28;
  v8 = BYTE8(v28);
  outlined retain of (CameraSource, DetectionResult)((uint64_t)&v28);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v10 & 1) != 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  v11 = 160;
  while (1)
  {
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = v2[6] + 16 * result;
    *(_QWORD *)v12 = v7;
    *(_BYTE *)(v12 + 8) = v8 & 1;
    v13 = (_OWORD *)(v2[7] + 112 * result);
    v14 = v29;
    v15 = v31;
    v13[1] = v30;
    v13[2] = v15;
    *v13 = v14;
    v16 = v32;
    v17 = v33;
    v18 = v34[0];
    *(_OWORD *)((char *)v13 + 89) = *(_OWORD *)((char *)v34 + 9);
    v13[4] = v17;
    v13[5] = v18;
    v13[3] = v16;
    v19 = v2[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      break;
    v2[2] = v21;
    if (!--v3)
      goto LABEL_9;
    v22 = v11 + 128;
    v23 = (__int128 *)(a1 + v11);
    v24 = v23[5];
    v32 = v23[4];
    v33 = v24;
    v34[0] = v23[6];
    *(_OWORD *)((char *)v34 + 9) = *(__int128 *)((char *)v23 + 105);
    v25 = v23[1];
    v28 = *v23;
    v29 = v25;
    v26 = v23[3];
    v30 = v23[2];
    v31 = v26;
    v7 = v28;
    v8 = BYTE8(v28);
    outlined retain of (CameraSource, DetectionResult)((uint64_t)&v28);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    v11 = v22;
    if ((v27 & 1) != 0)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, CameraSource>);
}

{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, SIMD2<Float>>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *((_BYTE *)v4 - 8);
    v7 = *v4;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = v2[6] + 16 * result;
    *(_QWORD *)v10 = v5;
    *(_BYTE *)(v10 + 8) = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Logger));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v6 = (_QWORD *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Logger>);
  v7 = static _DictionaryStorage.allocate(capacity:)();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = (char *)v6 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int32, Matrix2dPB)(v13, (uint64_t)v6, &demangling cache variable for type metadata for (String, Logger));
    v15 = *v6;
    v16 = v6[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v6, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for Logger();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<JpegDecoder.InputMetaKey, VTDecompressionSessionRef>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<JpegDecoder.InputMetaKey, CVPixelBufferPoolRef>);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<IOSurfacePropertyKey, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int32, Matrix2dPB)(v6, (uint64_t)&v13, &demangling cache variable for type metadata for (IOSurfacePropertyKey, Any));
    v7 = v13;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CameraSource, WarperMeshCameraState>, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, CalibrationDataCache.CameraCalibrationInputs>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = *(_OWORD *)(a1 + 176);
  v45 = *(_OWORD *)(a1 + 160);
  v46 = v4;
  v5 = *(_OWORD *)(a1 + 208);
  v47 = *(_OWORD *)(a1 + 192);
  v48 = v5;
  v6 = *(_OWORD *)(a1 + 112);
  v41 = *(_OWORD *)(a1 + 96);
  v42 = v6;
  v7 = *(_OWORD *)(a1 + 144);
  v43 = *(_OWORD *)(a1 + 128);
  v44 = v7;
  v8 = *(_OWORD *)(a1 + 48);
  v37 = *(_OWORD *)(a1 + 32);
  v38 = v8;
  v9 = *(_OWORD *)(a1 + 80);
  v39 = *(_OWORD *)(a1 + 64);
  v40 = v9;
  v10 = v37;
  v11 = BYTE8(v37);
  outlined retain of (CameraSource, CalibrationDataCache.CameraCalibrationInputs)((uint64_t)&v37);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v13 & 1) != 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release();
    goto LABEL_11;
  }
  v14 = 224;
  while (1)
  {
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = v2[6] + 16 * result;
    *(_QWORD *)v15 = v10;
    *(_BYTE *)(v15 + 8) = v11 & 1;
    v16 = (_OWORD *)(v2[7] + 176 * result);
    v17 = v38;
    v18 = v40;
    v16[1] = v39;
    v16[2] = v18;
    *v16 = v17;
    v19 = v41;
    v20 = v42;
    v21 = v44;
    v16[5] = v43;
    v16[6] = v21;
    v16[3] = v19;
    v16[4] = v20;
    v22 = v45;
    v23 = v46;
    v24 = v48;
    v16[9] = v47;
    v16[10] = v24;
    v16[7] = v22;
    v16[8] = v23;
    v25 = v2[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      break;
    v2[2] = v27;
    if (!--v3)
      goto LABEL_9;
    v28 = v14 + 192;
    v29 = (__int128 *)(a1 + v14);
    v30 = v29[9];
    v45 = v29[8];
    v46 = v30;
    v31 = v29[11];
    v47 = v29[10];
    v48 = v31;
    v32 = v29[5];
    v41 = v29[4];
    v42 = v32;
    v33 = v29[7];
    v43 = v29[6];
    v44 = v33;
    v34 = v29[1];
    v37 = *v29;
    v38 = v34;
    v35 = v29[3];
    v39 = v29[2];
    v40 = v35;
    v10 = v37;
    v11 = BYTE8(v37);
    outlined retain of (CameraSource, CalibrationDataCache.CameraCalibrationInputs)((uint64_t)&v37);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    v14 = v28;
    if ((v36 & 1) != 0)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, UnsureLabel>);
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v7, v8);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (uint64_t *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *((_BYTE *)v4 - 16);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = v2[6] + 16 * result;
    *(_QWORD *)v11 = v5;
    *(_BYTE *)(v11 + 8) = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  int *i;
  unsigned int v5;
  int v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int32, Float>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (int *)(a1 + 36); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 4 * result;
      *(_DWORD *)(v3[6] + v9) = v5;
      *(_DWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  unsigned __int8 v5;
  unint64_t result;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Bool, simd_float4x4>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 48); ; i += 5)
    {
      v5 = *((_BYTE *)i - 16);
      v14 = i[1];
      v15 = *i;
      v12 = i[3];
      v13 = i[2];
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      v8 = (_OWORD *)(v3[7] + (result << 6));
      *v8 = v15;
      v8[1] = v14;
      v8[2] = v13;
      v8[3] = v12;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unsigned int v4;
  void *v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  id v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, IOSurfaceRef>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_DWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v16 = v5;
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_DWORD *)v8 - 2);
    v13 = (void *)*v8;
    v14 = v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v8 = v12;
    v5 = v13;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Bool, [HandRejectionReason : UInt64]>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  LOBYTE(v4) = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = (uint64_t *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4 & 1;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((unsigned __int8 *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, Int>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  char *i;
  Swift::UInt64 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectInteractionResultsByHand.HandIdentifier, ObjectInteractionInfo>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (char *)(a1 + 117); ; i += 96)
    {
      v22 = v1;
      v5 = *(_QWORD *)(i - 85);
      v6 = *(i - 77);
      v7 = *(_QWORD *)(i - 69);
      v8 = *(_QWORD *)(i - 61);
      v9 = *(_QWORD *)(i - 53);
      v23 = *(_OWORD *)(i - 37);
      v10 = *(_QWORD *)(i - 21);
      v11 = *(i - 13);
      v12 = *(_QWORD *)(i - 9);
      v13 = *(i - 1);
      v14 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
      if ((v16 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v17 = v3[6] + 16 * result;
      *(_QWORD *)v17 = v5;
      *(_BYTE *)(v17 + 8) = v6;
      v18 = v3[7] + 80 * result;
      *(_QWORD *)v18 = v7;
      *(_QWORD *)(v18 + 8) = v8;
      *(_QWORD *)(v18 + 16) = v9;
      *(_OWORD *)(v18 + 32) = v23;
      *(_QWORD *)(v18 + 48) = v10;
      *(_BYTE *)(v18 + 56) = v11;
      *(_QWORD *)(v18 + 60) = v12;
      *(_BYTE *)(v18 + 68) = v13;
      *(_BYTE *)(v18 + 69) = v14;
      v19 = v3[2];
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
        goto LABEL_10;
      v3[2] = v21;
      v1 = v22 - 1;
      if (v22 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  double *i;
  double v5;
  unint64_t result;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Double, simd_float4x4>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (double *)(a1 + 48); ; i += 10)
    {
      v5 = *(i - 2);
      v14 = *((_OWORD *)i + 1);
      v15 = *(_OWORD *)i;
      v12 = *((_OWORD *)i + 3);
      v13 = *((_OWORD *)i + 2);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(double *)(v3[6] + 8 * result) = v5;
      v8 = (_OWORD *)(v3[7] + (result << 6));
      *v8 = v15;
      v8[1] = v14;
      v8[2] = v13;
      v8[3] = v12;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (Int32, Matrix2dPB), &demangling cache variable for type metadata for _DictionaryStorage<Int32, Matrix2dPB>, type metadata accessor for Matrix2dPB);
}

{
  uint64_t v1;
  _QWORD *v3;
  _DWORD *i;
  uint64_t v5;
  int v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, Int32>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_DWORD *)(a1 + 40); ; i += 4)
    {
      v5 = *((_QWORD *)i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      *(_DWORD *)(v3[7] + 4 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UInt64, TrackingUpdateDataPB), &demangling cache variable for type metadata for _DictionaryStorage<UInt64, TrackingUpdateDataPB>, type metadata accessor for TrackingUpdateDataPB);
}

{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *i;
  uint64_t v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Bool>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_BYTE *)(a1 + 40); ; i += 16)
    {
      v5 = *((_QWORD *)i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      *(_BYTE *)(v3[7] + result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, PinchCancellationModule>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 48)
    {
      outlined init with copy of (Int32, Matrix2dPB)(i, (uint64_t)&v11, &demangling cache variable for type metadata for (Int, PinchCancellationModule));
      v5 = v11;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = outlined init with take of PinchCancellationModule(&v12, v3[7] + 40 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SignalStatistics.HandSignal, SignalStatistics>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, ValueStatistics<Double>>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 72); ; i += 14)
    {
      v21 = v1;
      v5 = *((_DWORD *)i - 10);
      v6 = *(i - 4);
      v7 = *((_DWORD *)i - 6);
      v8 = *(i - 2);
      v9 = *((_BYTE *)i - 8);
      v10 = *i;
      v11 = *((_BYTE *)i + 8);
      v12 = i[2];
      v13 = *((_BYTE *)i + 24);
      v25 = i[4];
      v24 = *((_BYTE *)i + 40);
      v14 = i[6];
      v23 = i[7];
      v22 = *((_BYTE *)i + 64);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v16 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      v17 = v3[7] + 104 * result;
      *(_QWORD *)v17 = v6;
      *(_DWORD *)(v17 + 8) = v7;
      *(_QWORD *)(v17 + 16) = v8;
      *(_BYTE *)(v17 + 24) = v9;
      *(_QWORD *)(v17 + 32) = v10;
      *(_BYTE *)(v17 + 40) = v11;
      *(_QWORD *)(v17 + 48) = v12;
      *(_BYTE *)(v17 + 56) = v13;
      *(_QWORD *)(v17 + 64) = v25;
      *(_BYTE *)(v17 + 72) = v24;
      *(_QWORD *)(v17 + 80) = v14;
      *(_QWORD *)(v17 + 88) = v23;
      *(_BYTE *)(v17 + 96) = v22;
      v18 = v3[2];
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (v19)
        goto LABEL_10;
      v3[2] = v20;
      v1 = v21 - 1;
      if (v21 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt v7;
  char v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<StatisticUtils.Location3DBucket, UInt64>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_QWORD *)(a1 + 64); ; i += 5)
    {
      v5 = *(i - 4);
      v6 = *(i - 3);
      v7 = *(i - 2);
      v8 = *((_BYTE *)i - 8);
      v9 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7, v8);
      if ((v11 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v12 = v3[6] + 32 * result;
      *(_QWORD *)v12 = v5;
      *(_QWORD *)(v12 + 8) = v6;
      *(_QWORD *)(v12 + 16) = v7;
      *(_BYTE *)(v12 + 24) = v8;
      *(_QWORD *)(v3[7] + 8 * result) = v9;
      v13 = v3[2];
      v14 = __OFADD__(v13, 1);
      v15 = v13 + 1;
      if (v14)
        goto LABEL_10;
      v3[2] = v15;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *i;
  Swift::UInt v5;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  char v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ARVinoJointIndexes, ValueStatistics<Float>>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_BYTE *)(a1 + 96); ; i += 72)
    {
      v22 = v1;
      v5 = *((_QWORD *)i - 8);
      v6 = *((_DWORD *)i - 14);
      v7 = *(_QWORD *)(i - 52);
      v8 = *(i - 44);
      v9 = *((_DWORD *)i - 10);
      v10 = *(i - 36);
      v11 = *((_DWORD *)i - 8);
      v12 = *(i - 28);
      v13 = *((_DWORD *)i - 6);
      v14 = *(i - 20);
      v15 = *((_QWORD *)i - 2);
      v24 = *((_QWORD *)i - 1);
      v23 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v17 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      v18 = v3[7] + (result << 6);
      *(_DWORD *)v18 = v6;
      *(_QWORD *)(v18 + 4) = v7;
      *(_BYTE *)(v18 + 12) = v8;
      *(_DWORD *)(v18 + 16) = v9;
      *(_BYTE *)(v18 + 20) = v10;
      *(_DWORD *)(v18 + 24) = v11;
      *(_BYTE *)(v18 + 28) = v12;
      *(_DWORD *)(v18 + 32) = v13;
      *(_BYTE *)(v18 + 36) = v14;
      *(_QWORD *)(v18 + 40) = v15;
      *(_QWORD *)(v18 + 48) = v24;
      *(_BYTE *)(v18 + 56) = v23;
      v19 = v3[2];
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
        goto LABEL_10;
      v3[2] = v21;
      v1 = v22 - 1;
      if (v22 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UInt64, HandsKitDataPB), &demangling cache variable for type metadata for _DictionaryStorage<UInt64, HandsKitDataPB>, type metadata accessor for HandsKitDataPB);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (Int32, ImageCalibrationDataPB), &demangling cache variable for type metadata for _DictionaryStorage<Int32, ImageCalibrationDataPB>, type metadata accessor for ImageCalibrationDataPB);
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  int v26;
  char v27;
  __int128 v28;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, TrackingUpdateData>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 128); ; i += 7)
    {
      v21 = v1;
      v5 = *((_QWORD *)i - 12);
      v6 = *((_QWORD *)i - 10);
      v7 = *((_QWORD *)i - 9);
      v8 = *((_QWORD *)i - 8);
      v9 = *((_QWORD *)i - 7);
      v10 = *((_BYTE *)i - 48);
      v11 = *((_BYTE *)i - 47);
      v12 = *((_DWORD *)i - 11);
      v26 = *((_DWORD *)i - 9);
      v27 = *((_BYTE *)i - 40);
      v13 = *((_QWORD *)i - 3);
      v24 = *((_BYTE *)i - 16);
      v25 = *((_BYTE *)i - 32);
      v22 = *((_BYTE *)i - 14);
      v23 = *((_BYTE *)i - 15);
      v14 = *(_QWORD *)((char *)i - 12);
      v28 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v16 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      v17 = v3[7] + 96 * result;
      *(_QWORD *)v17 = v6;
      *(_QWORD *)(v17 + 8) = v7;
      *(_QWORD *)(v17 + 16) = v8;
      *(_QWORD *)(v17 + 24) = v9;
      *(_BYTE *)(v17 + 32) = v10;
      *(_BYTE *)(v17 + 33) = v11;
      *(_DWORD *)(v17 + 36) = v12;
      *(_BYTE *)(v17 + 40) = v27;
      *(_DWORD *)(v17 + 44) = v26;
      *(_BYTE *)(v17 + 48) = v25;
      *(_QWORD *)(v17 + 56) = v13;
      *(_BYTE *)(v17 + 64) = v24;
      *(_BYTE *)(v17 + 65) = v23;
      *(_BYTE *)(v17 + 66) = v22;
      *(_QWORD *)(v17 + 68) = v14;
      *(_OWORD *)(v17 + 80) = v28;
      v18 = v3[2];
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (v19)
        goto LABEL_10;
      v3[2] = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v1 = v21 - 1;
      if (v21 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, WristCounts>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 40); ; i = (_OWORD *)((char *)i + 24))
    {
      v5 = *((_QWORD *)i - 1);
      v11 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      *(_OWORD *)(v3[7] + 16 * result) = v11;
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  uint64_t v5;
  unint64_t result;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, Coordinate3D>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 64); ; i += 3)
    {
      v5 = *((_QWORD *)i - 4);
      v12 = *i;
      v13 = *(i - 1);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      v8 = (_OWORD *)(v3[7] + 32 * result);
      *v8 = v13;
      v8[1] = v12;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (Int32, TrackingModuleIOPB), &demangling cache variable for type metadata for _DictionaryStorage<Int32, TrackingModuleIOPB>, type metadata accessor for TrackingModuleIOPB);
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t result;
  char v8;
  void **v9;
  _DWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  void **v14;
  void *v15;
  id v16;
  char v17;
  id v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<JpegEncoder.JpegRes, VTCompressionSessionRef>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(unsigned int *)(a1 + 32);
  v5 = *(unsigned int *)(a1 + 36);
  v6 = *(void **)(a1 + 40);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4 | (v5 << 32));
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v18 = v6;
    return (unint64_t)v3;
  }
  v9 = (void **)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (_DWORD *)(v3[6] + 8 * result);
    *v10 = v4;
    v10[1] = v5;
    *(_QWORD *)(v3[7] + 8 * result) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 2;
    v4 = *((unsigned int *)v9 - 2);
    v5 = *((unsigned int *)v9 - 1);
    v15 = *v9;
    v16 = v6;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4 | (v5 << 32));
    v9 = v14;
    v6 = v15;
    if ((v17 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t), uint64_t (*a4)(uint64_t, Swift::Int))
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  swift_retain();
  v9 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v10 = *((unsigned __int8 *)v9 - 8);
    v11 = *v9;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v10, a3, a4);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v7[6] + result) = v10;
    *(_QWORD *)(v7[7] + 8 * result) = v11;
    v14 = v7[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v7[2] = v16;
    v9 += 2;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 16)
    && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PinchDnnOutputLayer, IONamedSlice>),
        v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(),
        (v3 = *(_QWORD *)(a1 + 16)) != 0))
  {
    swift_retain();
    v4 = (_QWORD *)(a1 + 40);
    while (1)
    {
      v5 = *((_BYTE *)v4 - 8);
      v6 = *v4;
      swift_retain();
      specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
      *(_BYTE *)(v2[6] + v7) = v5;
      *(_QWORD *)(v2[7] + 8 * v7) = v6;
      v9 = v2[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v2[2] = v11;
      v4 += 2;
      if (!--v3)
      {
        swift_release();
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
  }
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_QWORD *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *((_BYTE *)v5 - 8);
    v8 = *v5;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = v3[6] + 16 * result;
    *(_QWORD *)v11 = v6;
    *(_BYTE *)(v11 + 8) = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  id *v6;
  unint64_t v7;
  Swift::UInt32 v8;
  uint64_t v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain();
  v6 = (id *)(a1 + 48);
  while (1)
  {
    v7 = *((unsigned __int8 *)v6 - 16);
    v9 = *((unsigned int *)v6 - 3);
    v8 = *((_DWORD *)v6 - 2);
    v2 = v2 & 0xFFFFFF00 | v7 | (v9 << 32);
    v10 = *v6;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v2, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = v4[6] + 12 * result;
    *(_BYTE *)v13 = v7;
    *(_DWORD *)(v13 + 4) = v9;
    *(_DWORD *)(v13 + 8) = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_BYTE *)(a1 + 56);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 3);
    v7 = *((_QWORD *)v5 - 2);
    v8 = *((_QWORD *)v5 - 1);
    v9 = *v5;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = v3[7] + 16 * result;
    *(_QWORD *)v13 = v8;
    *(_BYTE *)(v13 + 8) = v9;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v3[2] = v16;
    v5 += 32;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, Swift::Int))
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  swift_retain();
  v11 = (_QWORD *)(a1 + 48);
  while (1)
  {
    v12 = *(v11 - 2);
    v13 = *((_BYTE *)v11 - 8);
    v14 = *v11;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13, a3, a4, a5);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)((char *)v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v17 = v9[6] + 16 * result;
    *(_QWORD *)v17 = v12;
    *(_BYTE *)(v17 + 8) = v13;
    *(_QWORD *)(v9[7] + 8 * result) = v14;
    v18 = v9[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v11 += 3;
    v9[2] = v20;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  swift_retain();
  v11 = (_DWORD *)(a1 + 44);
  while (1)
  {
    v12 = *(_QWORD *)(v11 - 3);
    v13 = *((_BYTE *)v11 - 4);
    v14 = *v11;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13, a3, a4, a5);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)((char *)v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v17 = v9[6] + 16 * result;
    *(_QWORD *)v17 = v12;
    *(_BYTE *)(v17 + 8) = v13;
    *(_DWORD *)(v9[7] + 4 * result) = v14;
    v18 = v9[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v9[2] = v20;
    v11 += 4;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  if (!*(_QWORD *)(a1 + 16))
  {
    v9 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  swift_retain();
  v11 = (_QWORD *)(a1 + 48);
  while (1)
  {
    v12 = *(v11 - 2);
    v13 = *((_BYTE *)v11 - 8);
    v14 = *v11;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13, a3, a4, a5);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)((char *)v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v17 = v9[6] + 16 * result;
    *(_QWORD *)v17 = v12;
    *(_BYTE *)(v17 + 8) = v13;
    *(_QWORD *)(v9[7] + 8 * result) = v14;
    v18 = v9[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v9[2] = v20;
    v11 += 3;
    if (!--v10)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t static WarperMeshGenerator.kDefaultGridSize.getter()
{
  return 41;
}

uint64_t WarperMeshGenerator.__allocating_init()()
{
  uint64_t v0;

  type metadata accessor for WarperMeshGenerator();
  v0 = swift_allocObject();
  WarperMeshGenerator.init(imageWidth:imageHeight:)(1280, 1280);
  return v0;
}

uint64_t WarperMeshGenerator.__allocating_init(imageWidth:imageHeight:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  WarperMeshGenerator.init(imageWidth:imageHeight:)(a1, a2);
  return v4;
}

uint64_t type metadata accessor for WarperMeshGenerator()
{
  return objc_opt_self();
}

uint64_t WarperMeshGenerator.init(imageWidth:imageHeight:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  const __CFDictionary *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  CVPixelBufferPoolRef v40;
  __CVPixelBufferPool *v41;
  unint64_t v42;
  char *i;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  CVBufferRef_optional v48;
  CVBufferRef value;
  __CVBuffer *v50;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t result;
  void *v67;
  const __CFDictionary *v68;
  const __CFDictionary *v69;
  Swift::Int v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[4];
  CVPixelBufferPoolRef poolOut[2];

  poolOut[1] = *(CVPixelBufferPoolRef *)MEMORY[0x24BDAC8D0];
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 72) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 80) = specialized Dictionary.init(dictionaryLiteral:)(v5);
  v6 = (_QWORD *)(v2 + 80);
  *(_QWORD *)(v2 + 88) = specialized Dictionary.init(dictionaryLiteral:)(v5);
  *(_BYTE *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 8;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  if (a1 > 0x7FFFFFFF)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (a1 < (uint64_t)0xFFFFFFFF80000000 || a2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_30;
  if (a2 > 0x7FFFFFFF)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
  }
  poolOut[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23D9A7040;
  v8 = (void *)*MEMORY[0x24BDC5708];
  type metadata accessor for CFStringRef(0);
  *(_QWORD *)(v7 + 56) = v9;
  *(_QWORD *)(v7 + 32) = v8;
  v10 = MEMORY[0x24BEE3F88];
  *(_DWORD *)(v7 + 64) = a1;
  v11 = (void *)*MEMORY[0x24BDC5650];
  *(_QWORD *)(v7 + 120) = v9;
  *(_QWORD *)(v7 + 88) = v10;
  *(_QWORD *)(v7 + 96) = v11;
  if ((int)a2 + 0x40000000 < 0)
    goto LABEL_32;
  v12 = v9;
  v70 = a1;
  v71 = v2;
  v13 = (void **)MEMORY[0x24BDC56B8];
  *(_DWORD *)(v7 + 128) = 2 * a2;
  v67 = v8;
  v14 = *v13;
  *(_QWORD *)(v7 + 184) = v9;
  v15 = MEMORY[0x24BEE44F0];
  *(_QWORD *)(v7 + 152) = v10;
  *(_QWORD *)(v7 + 160) = v14;
  *(_DWORD *)(v7 + 192) = 1278226536;
  v16 = (void *)*MEMORY[0x24BDC5690];
  *(_QWORD *)(v7 + 248) = v9;
  *(_QWORD *)(v7 + 216) = v15;
  *(_QWORD *)(v7 + 224) = v16;
  v17 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v7 + 256) = 1;
  v18 = (void *)*MEMORY[0x24BDC55E8];
  *(_QWORD *)(v7 + 312) = v9;
  *(_QWORD *)(v7 + 280) = v17;
  *(_QWORD *)(v7 + 288) = v18;
  *(_BYTE *)(v7 + 320) = 1;
  v19 = (void *)*MEMORY[0x24BDC55E0];
  *(_QWORD *)(v7 + 376) = v9;
  *(_QWORD *)(v7 + 344) = v17;
  *(_QWORD *)(v7 + 352) = v19;
  *(_BYTE *)(v7 + 384) = 1;
  v20 = (void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)(v7 + 440) = v9;
  *(_QWORD *)(v7 + 408) = v17;
  *(_QWORD *)(v7 + 416) = v20;
  v21 = objc_allocWithZone(MEMORY[0x24BDBCE70]);
  v22 = v67;
  v23 = v11;
  v24 = v14;
  v25 = v16;
  v26 = v18;
  v27 = v19;
  v28 = v20;
  v29 = objc_msgSend(v21, sel_init);
  v30 = type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
  *(_QWORD *)(v7 + 448) = v29;
  v31 = (void *)*MEMORY[0x24BDC55D0];
  *(_QWORD *)(v7 + 472) = v30;
  *(_QWORD *)(v7 + 480) = v31;
  v32 = MEMORY[0x24BEE1768];
  *(_QWORD *)(v7 + 536) = MEMORY[0x24BEE1768];
  *(_QWORD *)(v7 + 504) = v12;
  *(_QWORD *)(v7 + 512) = 64;
  v33 = v31;
  v34 = (const __CFDictionary *)NSDictionary.init(dictionaryLiteral:)();
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_23D9A7050;
  v36 = (void *)*MEMORY[0x24BDC56D0];
  *(_QWORD *)(v35 + 32) = *MEMORY[0x24BDC56D0];
  *(_QWORD *)(v35 + 56) = v12;
  *(_QWORD *)(v35 + 64) = 8;
  v37 = (void *)*MEMORY[0x24BDC56F0];
  *(_QWORD *)(v35 + 88) = v32;
  *(_QWORD *)(v35 + 96) = v37;
  *(_QWORD *)(v35 + 152) = v32;
  *(_QWORD *)(v35 + 120) = v12;
  *(_QWORD *)(v35 + 128) = 8;
  v38 = v36;
  v39 = v37;
  v68 = (const __CFDictionary *)NSDictionary.init(dictionaryLiteral:)();
  v69 = v34;
  if (CVPixelBufferPoolCreate(0, v68, v34, poolOut))
  {
    v75[3] = MEMORY[0x24BEE0D00];
    v75[0] = 0xD000000000000044;
    v75[1] = 0x800000023D9C44A0;
    type metadata accessor for HandyLoggerNeo();
    v72 = xmmword_23D9A7060;
    v73 = 0;
    v74 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)&v72, 0xD000000000000054, 0x800000023D9C4440, 64, (uint64_t)v75, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v75);
  }
  v40 = poolOut[0];
  if (!poolOut[0])
    goto LABEL_34;
  *(CVPixelBufferPoolRef *)(v71 + 64) = poolOut[0];
  v41 = v40;
  v42 = 0;
  for (i = &byte_250E30AC0; ; i += 16)
  {
    if (v42 >= 7)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v46 = *((_QWORD *)i - 1);
    v47 = *i;
    v48.value = WarperMeshGenerator.createPixelBuffer(_:_:)(v70, v42).value;
    if (!v48.value)
      goto LABEL_33;
    value = v48.value;
    swift_beginAccess();
    v50 = value;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v72 = *v6;
    v52 = v72;
    *v6 = 0x8000000000000000;
    v54 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v47, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    v55 = *(_QWORD *)(v52 + 16);
    v56 = (v53 & 1) == 0;
    v57 = v55 + v56;
    if (__OFADD__(v55, v56))
      goto LABEL_27;
    v58 = v53;
    if (*(_QWORD *)(v52 + 24) < v57)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v61 = (_QWORD *)v72;
      if ((v53 & 1) == 0)
        goto LABEL_21;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v61 = (_QWORD *)v72;
      if ((v58 & 1) == 0)
      {
LABEL_21:
        v61[(v54 >> 6) + 8] |= 1 << v54;
        v62 = v61[6] + 16 * v54;
        *(_QWORD *)v62 = v46;
        *(_BYTE *)(v62 + 8) = v47;
        *(_QWORD *)(v61[7] + 8 * v54) = v50;
        v63 = v61[2];
        v64 = __OFADD__(v63, 1);
        v65 = v63 + 1;
        if (v64)
          goto LABEL_28;
        v61[2] = v65;
        goto LABEL_11;
      }
    }
LABEL_10:
    v44 = v61[7];
    v45 = 8 * v54;

    *(_QWORD *)(v44 + v45) = v50;
LABEL_11:
    ++v42;
    *v6 = v61;
    swift_bridgeObjectRelease();
    swift_endAccess();

    if (v42 == 7)
    {

      *(int64x2_t *)(v71 + 32) = vdupq_n_s64(0x29uLL);
      *(_BYTE *)(v71 + 96) = *(_QWORD *)(v71 + 16) == 640;

      return v71;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
  v59 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v47, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v58 & 1) == (v60 & 1))
  {
    v54 = v59;
    v61 = (_QWORD *)v72;
    if ((v58 & 1) == 0)
      goto LABEL_21;
    goto LABEL_10;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall WarperMeshGenerator.reset()()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v0[6] = 0;
  swift_bridgeObjectRelease();
  v1 = (void *)v0[7];
  v0[7] = 0;

  swift_beginAccess();
  v2 = MEMORY[0x24BEE4AF8];
  v0[9] = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v3 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  swift_beginAccess();
  v0[10] = v3;
  swift_bridgeObjectRelease();
  v4 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  swift_beginAccess();
  v0[11] = v4;
  swift_bridgeObjectRelease();
}

uint64_t WarperMeshGenerator.setGridSize(warperMeshBin:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  float v7;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = v2 * v3;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v4 + 0x4000000000000000 < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v5 = *(_QWORD *)(result + 16);
  if (v5 == 2 * v4)
    return result;
  if (v5 == 3362)
  {
    *(int64x2_t *)(v1 + 32) = vdupq_n_s64(0x29uLL);
LABEL_12:
    v6 = *(_QWORD *)(v1 + 16) == 640;
    goto LABEL_14;
  }
  if (v5 != 882)
  {
    v7 = sqrtf((float)(v5 >> 1));
    if ((~LODWORD(v7) & 0x7F800000) != 0)
    {
      if (v7 > -9.2234e18)
      {
        if (v7 < 9.2234e18)
        {
          *(_QWORD *)(v1 + 32) = (uint64_t)v7;
          *(_QWORD *)(v1 + 40) = (uint64_t)v7;
          if ((uint64_t)v7 != 41)
          {
            v6 = 0;
            goto LABEL_14;
          }
          goto LABEL_12;
        }
LABEL_20:
        __break(1u);
        return result;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = 0;
  *(int64x2_t *)(v1 + 32) = vdupq_n_s64(0x15uLL);
LABEL_14:
  *(_BYTE *)(v1 + 96) = v6;
  return result;
}

Swift::Bool __swiftcall WarperMeshGenerator.isSizeMatch(warperMeshWidth:warperMeshHeight:gridSize:)(Swift::Int warperMeshWidth, Swift::Int warperMeshHeight, Swift::Int gridSize)
{
  _QWORD *v3;
  Swift::Bool result;

  if (v3[2] != warperMeshWidth)
    return 0;
  if (v3[4] != gridSize)
    return 0;
  result = v3[5] == gridSize;
  if (v3[3] != warperMeshHeight)
    return 0;
  return result;
}

uint64_t WarperMeshGenerator.getIOSurfaces()()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

__CVBuffer *WarperMeshGenerator.createWarperMesh(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __CVBuffer *v10;
  int32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CVBuffer *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];

  v3 = v2;
  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  swift_beginAccess();
  v7 = *(_QWORD *)(v2 + 80);
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_27;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_27:
    v37[3] = MEMORY[0x24BEE0D00];
    v37[0] = 0xD000000000000015;
    v37[1] = 0x800000023D9C44F0;
    type metadata accessor for HandyLoggerNeo();
    v34 = xmmword_23D9A7070;
    v35 = 0;
    v36 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v34, 0xD000000000000054, 0x800000023D9C4440, 116, (uint64_t)v37, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v37);
    return 0;
  }
  v10 = (__CVBuffer *)*(id *)(*(_QWORD *)(v7 + 56) + 8 * v8);
  swift_bridgeObjectRelease();
  WarperMeshGenerator.setGridSize(warperMeshBin:)(a1);
  v12 = specialized static CoverglassUtils.decodeCoverGlassBin(_:_:)(a1, *(_BYTE *)(v3 + 96), v11);
  v13 = *(_QWORD *)(v3 + 16);
  v14 = *(_QWORD *)(v3 + 24);
  v15 = specialized static CoverglassUtils.upscaleCoverGlassArray(_:warperMeshWidth:warperMeshHeight:gridSizeWidth:gridSizeHeight:)(v12, v13, v14, *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
  v17 = v16;
  swift_bridgeObjectRelease();
  result = (__CVBuffer *)CVPixelBufferLockBaseAddress(v10, 0);
  if (v13 + 0x4000000000000000 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v19 = 2 * v13 + 63;
  if (__OFADD__(2 * v13, 63))
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v19 < 0)
    v19 = 2 * v13 + 126;
  v20 = 32 * (v19 >> 6);
  v21 = v20 * v14;
  if ((unsigned __int128)(v20 * (__int128)v14) >> 64 != (v20 * v14) >> 63)
    goto LABEL_39;
  if (v21 + 0x4000000000000000 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  result = (__CVBuffer *)CVPixelBufferGetBaseAddress(v10);
  if (result)
  {
    if (v14 < 0)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v14)
    {
      if (v13 < 0)
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      v22 = 0;
      while (v22 != v14)
      {
        v23 = v22 * v13;
        if ((unsigned __int128)(v22 * (__int128)v13) >> 64 != (v22 * v13) >> 63)
          goto LABEL_35;
        v24 = v22 * v20;
        if ((unsigned __int128)(v22 * (__int128)v20) >> 64 != (v22 * v20) >> 63)
          goto LABEL_36;
        if (v13)
        {
          v25 = *(_QWORD *)(v17 + 16);
          v26 = *(_QWORD *)(v15 + 16);
          v27 = v13;
          while (v23 < v25)
          {
            _S0 = *(_DWORD *)(v17 + 32 + 4 * v23);
            __asm { FCVT            H0, S0 }
            *((_WORD *)result + v24) = _S0;
            if (__OFADD__(v24, v21))
              goto LABEL_31;
            if (v23 >= v26)
              goto LABEL_32;
            _S0 = *(_DWORD *)(v15 + 32 + 4 * v23);
            __asm { FCVT            H0, S0 }
            *((_WORD *)result + v24 + v21) = _S0;
            if (__OFADD__(v24++, 1))
              goto LABEL_33;
            ++v23;
            if (!--v27)
              goto LABEL_14;
          }
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          break;
        }
LABEL_14:
        if (++v22 == v14)
          goto LABEL_28;
      }
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CVPixelBufferUnlockBaseAddress(v10, 0);
    return v10;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t WarperMeshGenerator.createNoopCoverGlassBin(gridSize:)(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v1 + 32) = result;
  *(_QWORD *)(v1 + 40) = result;
  if (result == 41)
  {
    v2 = *(_QWORD *)(v1 + 16) == 640;
    *(_BYTE *)(v1 + 96) = v2;
    if (v2)
    {
      v3 = 512;
      goto LABEL_7;
    }
  }
  else
  {
    *(_BYTE *)(v1 + 96) = 0;
  }
  v3 = 256;
LABEL_7:
  v4 = result * result;
  if ((unsigned __int128)(result * (__int128)result) >> 64 != (result * result) >> 63)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v4 + 0x4000000000000000 < 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  result = specialized Array.init(repeating:count:)(0, 2 * v4);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = __OFSUB__(v5, 1);
  v7 = v5 - 1;
  if (v6)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v8 = *(_QWORD *)(v1 + 40);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v9 = result;
    if (!v8)
      return v9;
    v10 = 0;
    v11 = 0;
    v12 = (float)v7;
    v13 = v3;
    v25 = *(_QWORD *)(v1 + 40);
    v26 = v1;
    while (v11 != v8)
    {
      v14 = *(_QWORD *)(v1 + 32);
      if (v14 < 0)
        goto LABEL_45;
      if (v14)
      {
        v15 = *(_QWORD *)(v1 + 16);
        if ((unsigned __int128)(v11 * (__int128)v15) >> 64 != (v11 * v15) >> 63)
          goto LABEL_46;
        v16 = (float)(v11 * v15) / v12;
        if ((~LODWORD(v16) & 0x7F800000) == 0)
          goto LABEL_47;
        if (v16 <= -2147500000.0)
          goto LABEL_48;
        if (v16 >= 2147500000.0)
          goto LABEL_49;
        v17 = v13 * (uint64_t)(int)v16;
        if (v17 != (int)v17)
          goto LABEL_50;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          v9 = result;
        }
        v18 = 0;
        v19 = v10;
        while (1)
        {
          v20 = v19;
          if ((unsigned __int128)(v18 * (__int128)v15) >> 64 != (v18 * v15) >> 63)
            break;
          v21 = (float)(v18 * v15) / v12;
          if ((~LODWORD(v21) & 0x7F800000) == 0)
            goto LABEL_37;
          if (v21 <= -2147500000.0)
            goto LABEL_38;
          if (v21 >= 2147500000.0)
            goto LABEL_39;
          v22 = v13 * (uint64_t)(int)v21;
          if (v22 != (int)v22)
            goto LABEL_40;
          if ((v10 & 0x8000000000000000) != 0)
            goto LABEL_41;
          v23 = *(_QWORD *)(v9 + 16);
          if (v20 >= v23)
            goto LABEL_42;
          v24 = v9 + 4 * v20;
          *(_DWORD *)(v24 + 32) = v22;
          if (v20 + 1 >= v23)
            goto LABEL_43;
          ++v18;
          *(_DWORD *)(v24 + 36) = v17;
          v19 = v20 + 2;
          if (v14 == v18)
          {
            v10 = v20 + 2;
            v8 = v25;
            v1 = v26;
            goto LABEL_13;
          }
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        break;
      }
LABEL_13:
      if (++v11 == v8)
        return v9;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
LABEL_54:
  __break(1u);
  return result;
}

uint64_t WarperMeshGenerator.getNoopCoverGlassBin(gridSize:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = *(_QWORD *)(v1 + 48);
  if (result)
  {
    v4 = a1 * a1;
    if ((unsigned __int128)(a1 * (__int128)a1) >> 64 == (a1 * a1) >> 63)
    {
      if (v4 + 0x4000000000000000 >= 0)
      {
        if (*(_QWORD *)(result + 16) == 2 * v4)
          return swift_bridgeObjectRetain();
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_5:
  *(_QWORD *)(v1 + 48) = WarperMeshGenerator.createNoopCoverGlassBin(gridSize:)(a1);
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(v1 + 48);
  if (result)
    return swift_bridgeObjectRetain();
LABEL_9:
  __break(1u);
  return result;
}

CVBufferRef __swiftcall WarperMeshGenerator.getNoopCoverGlassMesh(gridSize:)(CVBufferRef gridSize)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __CVBuffer *v6;
  void *v7;
  uint64_t v8;
  char v9;

  v2 = *(void **)(v1 + 56);
  if (v2)
    return (CVBufferRef)v2;
  v3 = *(_QWORD *)(v1 + 48);
  if (!v3)
    goto LABEL_6;
  v4 = (_QWORD)gridSize * (_QWORD)gridSize;
  if ((unsigned __int128)((uint64_t)gridSize * (__int128)(uint64_t)gridSize) >> 64 != (uint64_t)((_QWORD)gridSize
                                                                                             * (_QWORD)gridSize) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v4 + 0x4000000000000000 < 0)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(_QWORD *)(v3 + 16) == 2 * v4)
    goto LABEL_7;
LABEL_6:
  *(_QWORD *)(v1 + 48) = WarperMeshGenerator.createNoopCoverGlassBin(gridSize:)((uint64_t)gridSize);
  gridSize = (CVBufferRef)swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + 48))
  {
LABEL_7:
    v8 = 0;
    v9 = 0;
    v5 = swift_bridgeObjectRetain();
    v6 = WarperMeshGenerator.createWarperMesh(_:_:)(v5, (uint64_t)&v8);
    swift_bridgeObjectRelease();
    v7 = *(void **)(v1 + 56);
    *(_QWORD *)(v1 + 56) = v6;

    v2 = *(void **)(v1 + 56);
    if (v2)
      return (CVBufferRef)v2;
    goto LABEL_11;
  }
LABEL_12:
  __break(1u);
  return gridSize;
}

Swift::tuple_CVBufferRef_CVBufferRef_optional __swiftcall WarperMeshGenerator.getWarperMeshSplit(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  int32x2_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  void **v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  void *v22;
  id v23;
  NSDictionary v24;
  const __CFAllocator *v25;
  CVReturn v26;
  CVPixelBufferRef v27;
  CVReturn v28;
  CVPixelBufferRef v29;
  __CVBuffer *v30;
  __CVBuffer *v31;
  unint64_t v32;
  _OWORD *BaseAddress;
  __CVBuffer *v34;
  __CVBuffer *v35;
  unint64_t v36;
  __int128 *v37;
  _OWORD *v38;
  _OWORD *v39;
  __int128 *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  int *v48;
  _DWORD *v49;
  int *v50;
  int v51;
  int v52;
  __CVBuffer *v53;
  __CVBuffer *v54;
  Swift::tuple_CVBufferRef_CVBufferRef_optional result;
  CVPixelBufferRef v56;
  CVPixelBufferRef pixelBufferOut[27];

  pixelBufferOut[25] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  WarperMeshGenerator.setGridSize(warperMeshBin:)((uint64_t)a1._rawValue);
  v4 = specialized static CoverglassUtils.decodeCoverGlassBin(_:_:)((uint64_t)a1._rawValue, *(_BYTE *)(v1 + 96), v3);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = specialized static CoverglassUtils.upscaleCoverGlassArray(_:warperMeshWidth:warperMeshHeight:gridSizeWidth:gridSizeHeight:)(v4, v5, v6, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  v9 = v8;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  inited = swift_initStackObject();
  v11 = (void **)MEMORY[0x24BDC5690];
  *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
  v12 = *v11;
  *(_QWORD *)(inited + 32) = v12;
  v13 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 40) = 1;
  v14 = (void *)*MEMORY[0x24BDC55E8];
  *(_QWORD *)(inited + 64) = v13;
  *(_QWORD *)(inited + 72) = v14;
  *(_BYTE *)(inited + 80) = 1;
  v15 = (void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)(inited + 104) = v13;
  *(_QWORD *)(inited + 112) = v15;
  v16 = v12;
  v17 = v14;
  v18 = v15;
  v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  v21 = (void **)MEMORY[0x24BDC55E0];
  *(_QWORD *)(inited + 120) = v19;
  v22 = *v21;
  *(_QWORD *)(inited + 144) = v20;
  *(_QWORD *)(inited + 152) = v22;
  *(_QWORD *)(inited + 184) = v13;
  *(_BYTE *)(inited + 160) = 1;
  v23 = v22;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  _sSo11CFStringRefaABSHSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v24.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  pixelBufferOut[0] = 0;
  v25 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v26 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], v5, v6, 0x4C303066u, v24.super.isa, pixelBufferOut);
  v27 = pixelBufferOut[0];
  v56 = 0;
  v28 = CVPixelBufferCreate(v25, v5, v6, 0x4C303066u, v24.super.isa, &v56);
  v29 = v56;
  if (v26 | v28)
  {

LABEL_14:
    v27 = v29;
    goto LABEL_15;
  }
  if (v56)
  {
    if (v27)
    {
      v30 = v56;
      v31 = v27;
      CVPixelBufferLockBaseAddress(v31, 0);
      CVPixelBufferLockBaseAddress(v30, 0);
      v32 = v5 * v6;
      if ((unsigned __int128)(v5 * (__int128)v6) >> 64 == (v5 * v6) >> 63)
      {
        BaseAddress = CVPixelBufferGetBaseAddress(v31);
        v34 = (__CVBuffer *)CVPixelBufferGetBaseAddress(v30);
        if (BaseAddress)
        {
          if (v34)
          {
            if ((v32 & 0x8000000000000000) == 0)
            {
              if (!v32)
                goto LABEL_27;
              if (v32 - 1 < *(_QWORD *)(v7 + 16))
              {
                if (v32 - 1 < *(_QWORD *)(v9 + 16))
                {
                  if (v32 >= 0x10)
                  {
                    v36 = 0;
                    if ((unint64_t)(v34 - (__CVBuffer *)BaseAddress) >= 0x20
                      && (unint64_t)BaseAddress - v7 - 32 >= 0x20
                      && (unint64_t)(v9 + 32 - (_QWORD)BaseAddress) >= 0x20
                      && (unint64_t)v34 - v7 - 32 >= 0x20
                      && (unint64_t)v34 - v9 - 32 >= 0x20)
                    {
                      v36 = v32 & 0xFFFFFFFFFFFFFFF8;
                      v37 = (__int128 *)(v7 + 48);
                      v38 = (_OWORD *)((char *)v34 + 16);
                      v39 = BaseAddress + 1;
                      v40 = (__int128 *)(v9 + 48);
                      v41 = v32 & 0xFFFFFFFFFFFFFFF8;
                      do
                      {
                        v42 = *v37;
                        *(v39 - 1) = *(v37 - 1);
                        *v39 = v42;
                        v43 = *v40;
                        v37 += 2;
                        *(v38 - 1) = *(v40 - 1);
                        *v38 = v43;
                        v38 += 2;
                        v39 += 2;
                        v40 += 2;
                        v41 -= 8;
                      }
                      while (v41);
                      if (v32 == v36)
                        goto LABEL_27;
                    }
                  }
                  else
                  {
                    v36 = 0;
                  }
                  v44 = v32 - v36;
                  v45 = 4 * v36;
                  v46 = (_DWORD *)((char *)v34 + 4 * v36);
                  v47 = v45 + 32;
                  v48 = (int *)(v9 + v45 + 32);
                  v49 = (_DWORD *)((char *)BaseAddress + v45);
                  v50 = (int *)(v7 + v47);
                  do
                  {
                    v51 = *v50++;
                    *v49++ = v51;
                    v52 = *v48++;
                    *v46++ = v52;
                    --v44;
                  }
                  while (v44);
LABEL_27:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v53 = v30;
                  v54 = v31;
                  CVPixelBufferUnlockBaseAddress(v53, 0);
                  CVPixelBufferUnlockBaseAddress(v54, 0);

                  goto LABEL_16;
                }
LABEL_31:
                __break(1u);
              }
LABEL_30:
              __break(1u);
              goto LABEL_31;
            }
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_34;
      }
      __break(1u);
      goto LABEL_29;
    }
    goto LABEL_14;
  }
LABEL_15:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v29 = 0;
  v27 = 0;
LABEL_16:
  v34 = v29;
  v35 = v27;
LABEL_34:
  result.value._1 = v35;
  result.value._0 = v34;
  return result;
}

CVBufferRef_optional __swiftcall WarperMeshGenerator.createPixelBuffer(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  __CVPixelBufferPool *v7;
  CVReturn PixelBuffer;
  uint64_t v9;
  Swift::String v10;
  __CVBuffer *v11;
  IOSurfaceRef IOSurface;
  __IOSurface *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  const __CFDictionary *v25;
  uint64_t ID;
  char v27;
  __IOSurface *v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  CVPixelBufferRef pixelBufferOut[2];

  v3 = v2;
  pixelBufferOut[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v6 = *(void **)(v2 + 64);
  pixelBufferOut[0] = 0;
  v7 = v6;
  PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(0, v7, pixelBufferOut);
  v9 = MEMORY[0x24BEE0D00];
  if (PixelBuffer)
  {
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    v35 = 0xD00000000000002DLL;
    v36 = 0x800000023D9C4660;
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v37 = v9;
    type metadata accessor for HandyLoggerNeo();
    v32 = xmmword_23D9A7090;
    v33 = 0;
    v34 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(4u, 1, (uint64_t *)&v32, 0xD000000000000054, 0x800000023D9C4440, 238, (uint64_t)&v35, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v35);
  }
  if (pixelBufferOut[0])
  {
    v11 = pixelBufferOut[0];
    IOSurface = CVPixelBufferGetIOSurface(v11);
    if (IOSurface)
    {
      v13 = IOSurface;
      v35 = 0;
      v36 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      v35 = 0xD000000000000019;
      v36 = 0x800000023D9C4690;
      *(_QWORD *)&v32 = a1;
      v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 8251;
      v15._object = (void *)0xE200000000000000;
      String.append(_:)(v15);
      *(_QWORD *)&v32 = a2;
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 47;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      *(_QWORD *)&v32 = 8;
      v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19 = v35;
      v20 = v36;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_23D9A70A0;
      v22 = (void *)*MEMORY[0x24BDD8EE0];
      type metadata accessor for CFStringRef(0);
      *(_QWORD *)(v21 + 32) = v22;
      *(_QWORD *)(v21 + 88) = v9;
      *(_QWORD *)(v21 + 56) = v23;
      *(_QWORD *)(v21 + 64) = v19;
      *(_QWORD *)(v21 + 72) = v20;
      type metadata accessor for NSDictionary(0, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
      v24 = v22;
      v25 = (const __CFDictionary *)NSDictionary.init(dictionaryLiteral:)();
      IOSurfaceSetValues(v13, v25);
      ID = IOSurfaceGetID(v13);
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)(v3 + 88) + 16)
        || (specialized __RawDictionaryStorage.find<A>(_:)(ID), (v27 & 1) == 0))
      {
        swift_beginAccess();
        v28 = v13;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v31 = *(_QWORD *)(v3 + 88);
        *(_QWORD *)(v3 + 88) = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v28, ID, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(v3 + 88) = v31;
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_beginAccess();
        v13 = v28;
        MEMORY[0x2426374D4]();
        if (*(_QWORD *)((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
      }

      v7 = v11;
    }
    else
    {
      v25 = v11;
    }

  }
  return (CVBufferRef_optional)pixelBufferOut[0];
}

uint64_t WarperMeshGenerator.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t WarperMeshGenerator.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, char a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource, (uint64_t)&type metadata for CameraSource, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category, (uint64_t)&type metadata for HandPresence.Category, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type PinchAcceptorID and conformance PinchAcceptorID, (uint64_t)&type metadata for PinchAcceptorID, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(uint64_t))lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason, (uint64_t)&type metadata for HandRejectionReason, (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x242637B88](*(_QWORD *)(v1 + 40), a1, 4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(int a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  _BYTE v4[72];

  Hasher.init(_seed:)();
  StatisticUtils.CameraRegion.hash(into:)((uint64_t)v4, a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1 & 0xFFFFFF, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(uint64_t))PoseDnnOutputLayer.rawValue.getter, specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(uint64_t))PoseDnnInputLayer.rawValue.getter, specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(uint64_t))PinchDnnInputLayer.rawValue.getter, specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(uint64_t))MonoDnnOutputLayer.rawValue.getter, specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  _sSo11CFStringRefaABSHSCWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  _CFObject.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt64 a1, int a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2 & 1);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(double a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, a1);
}

void specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

uint64_t sub_23D6BE400()
{
  uint64_t v0;
  Swift::Int v1;

  String.hash(into:)();
  swift_bridgeObjectRelease();
  v1 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, Swift::UInt32 a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(HIDWORD(a1));
  Hasher._combine(_:)(a2);
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1 & 0xFFFFFFFF00000001, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Swift::Int v5;

  Hasher.init(_seed:)();
  a2(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v5 = Hasher._finalize()();
  return a3(a1, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, __int16 a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  if ((a2 & 0x100) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
  }
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2 & 0x1FF, v4);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, Swift::Int))
{
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;

  v8 = a2 & 1;
  v9 = Hasher.init(_seed:)();
  a3(v9);
  dispatch thunk of Hashable.hash(into:)();
  v10 = Hasher._finalize()();
  return a5(a1, v8, v10);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  char v8;
  Swift::Int v9;

  v8 = a4 & 1;
  Hasher.init(_seed:)();
  if ((a4 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
    Hasher._combine(_:)(BYTE1(a1) & 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(a1);
    Hasher._combine(_:)(a2);
    Hasher._combine(_:)(a3);
  }
  v9 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v8, v9);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1)
{
  unint64_t v2;
  Swift::Int v3;

  v2 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v2);
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    while ((a2 & 1) == 0)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * result) != a1)
      {
        result = (result + 1) & v7;
        if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
          continue;
      }
      return result;
    }
    return ((uint64_t (*)(void))((char *)&loc_23D6BEAE8 + 4 * byte_23D9A6E67[a1]))();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    while ((a2 & 1) == 0)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * result) != a1)
      {
        result = (result + 1) & v7;
        if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
          continue;
      }
      return result;
    }
    return ((uint64_t (*)(void))((char *)&loc_23D6BEC18 + 4 * byte_23D9A6E75[a1]))();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    while (1)
    {
      v8 = *(_QWORD *)(v3 + 48) + 16 * result;
      v9 = *(_QWORD *)v8;
      if (*(_BYTE *)(v8 + 8) == 1)
        v9 = qword_23D9A6FE0[v9];
      if ((a2 & 1) != 0)
        break;
      if (v9 != a1)
      {
        result = (result + 1) & v7;
        if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
          continue;
      }
      return result;
    }
    return ((uint64_t (*)(void))((char *)&loc_23D6C0480 + 4 * byte_23D9A6EFD[a1]))();
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    while ((a2 & 1) == 0)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * result) != a1)
      {
        result = (result + 1) & v7;
        if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
          continue;
      }
      return result;
    }
    return ((uint64_t (*)(void))((char *)&loc_23D6C0DB8 + 4 * byte_23D9A6F37[a1]))();
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_BYTE *)(v7 + result) != (a1 & 1))
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (((*(unsigned __int8 *)(v7 + result) ^ a1) & 1) == 0)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  char v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  char v22;
  unsigned __int8 v24;
  uint64_t v25;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = a1;
    if ((a1 & 1) != 0)
      v7 = 0x7468676972;
    else
      v7 = 1952867692;
    if ((a1 & 1) != 0)
      v8 = 0xE500000000000000;
    else
      v8 = 0xE400000000000000;
    v24 = BYTE2(a1);
    if ((a1 & 0x100) != 0)
      v9 = 0x7265776F6CLL;
    else
      v9 = 0x7265707075;
    v25 = v9;
    while (1)
    {
      v10 = (unsigned __int16 *)(*(_QWORD *)(v2 + 48) + 3 * v4);
      v11 = *v10 | (*((unsigned __int8 *)v10 + 2) << 16);
      if (*v10 == 2)
      {
        if (v6 == 2)
          return v4;
        goto LABEL_13;
      }
      if (v6 != 2)
        break;
LABEL_13:
      v4 = (v4 + 1) & v5;
      if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        return v4;
    }
    if ((*v10 & 1) != 0)
      v12 = 0x7468676972;
    else
      v12 = 1952867692;
    if ((*v10 & 1) != 0)
      v13 = 0xE500000000000000;
    else
      v13 = 0xE400000000000000;
    if (v12 == v7 && v13 == v8)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
        goto LABEL_13;
    }
    if ((v11 & 0x100) != 0)
      v16 = 0x7265776F6CLL;
    else
      v16 = 0x7265707075;
    if (v16 == v25)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      if ((v17 & 1) == 0)
        goto LABEL_13;
    }
    if (HIWORD(v11))
    {
      if (HIWORD(v11) == 1)
      {
        v18 = 0xE400000000000000;
        v19 = 1735289202;
        v20 = v24;
        if (v24)
          goto LABEL_38;
LABEL_44:
        v21 = 0xE600000000000000;
        if (v19 != 0x7265746E6563)
        {
LABEL_48:
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v22 & 1) != 0)
            return v4;
          goto LABEL_13;
        }
LABEL_47:
        if (v18 == v21)
        {
          swift_bridgeObjectRelease_n();
          return v4;
        }
        goto LABEL_48;
      }
      v18 = 0xE600000000000000;
      v19 = 0x6E696772616DLL;
      v20 = v24;
      if (!v24)
        goto LABEL_44;
    }
    else
    {
      v18 = 0xE600000000000000;
      v19 = 0x7265746E6563;
      v20 = v24;
      if (!v24)
        goto LABEL_44;
    }
LABEL_38:
    if (v20 == 1)
    {
      v21 = 0xE400000000000000;
      if (v19 != 1735289202)
        goto LABEL_48;
    }
    else
    {
      v21 = 0xE600000000000000;
      if (v19 != 0x6E696772616DLL)
        goto LABEL_48;
    }
    goto LABEL_47;
  }
  return v4;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for CFStringRef(0);
    v6 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    _sSo11CFStringRefaABSHSCWlTm_0(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    v7 = v6;
    v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = static _CFObject.== infix(_:_:)();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x242637894](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = (int *)(*(_QWORD *)(v2 + 48) + 8 * result);
      v9 = *v7;
      v8 = v7[1];
      if (v9 == (_DWORD)a1 && v8 == HIDWORD(a1))
        break;
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      if (!((*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * result) != a1) | (*(unsigned __int8 *)(*(_QWORD *)(v3 + 48)
                                                                                           + 16 * result
                                                                                           + 8) ^ a2) & 1))
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      v7 = ~v4;
      for (result = (result + 1) & v7;
            ((*(_QWORD *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  char v16;
  unint64_t v18;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v18 = HIDWORD(a1);
    v6 = ~v4;
    if ((a1 & 1) != 0)
      v7 = 0x4C41435359415247;
    else
      v7 = 4343634;
    if ((a1 & 1) != 0)
      v8 = 0xE900000000000045;
    else
      v8 = 0xE300000000000000;
    do
    {
      v10 = *(_QWORD *)(v3 + 48) + 12 * v5;
      v12 = *(_DWORD *)(v10 + 4);
      v11 = *(_DWORD *)(v10 + 8);
      if (*(_BYTE *)v10)
        v13 = 0x4C41435359415247;
      else
        v13 = 4343634;
      if (*(_BYTE *)v10)
        v14 = 0xE900000000000045;
      else
        v14 = 0xE300000000000000;
      if (v13 == v7 && v14 == v8)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
          goto LABEL_13;
      }
      if (v12 == (_DWORD)v18 && v11 == a2)
        return v5;
LABEL_13:
      v5 = (v5 + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = *(_QWORD *)(v3 + 48) + 16 * result;
      if ((*(_BYTE *)(v8 + 9) & 1) != 0)
      {
        if ((a2 & 0x100) != 0)
          return result;
      }
      else if ((a2 & 0x100) == 0)
      {
        v9 = *(_QWORD *)v8;
        if ((a2 & 1) != 0)
          return ((uint64_t (*)(void))((char *)&loc_23D6C0C88 + 4 * byte_23D9A6F29[a1]))();
        if (v9 == a1)
          return result;
      }
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v7 = -1 << *(_BYTE *)(v5 + 32);
  result = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v9 = ~v7;
    do
    {
      v10 = *(_QWORD *)(v5 + 48) + 32 * result;
      v11 = *(_QWORD *)v10;
      if (*(_BYTE *)(v10 + 24) == 1)
      {
        if ((a4 & 1) != 0
          && v11 == a1
          && ((a1 >> 8) & 1) != ((*(_QWORD *)v10 & 0x100) == 0))
        {
          return result;
        }
      }
      else if ((a4 & 1) == 0)
      {
        v13 = *(_QWORD *)(v10 + 8);
        v12 = *(_QWORD *)(v10 + 16);
        v14 = v11 == a1 && v13 == a2;
        if (v14 && v12 == a3)
          return result;
      }
      result = (result + 1) & v9;
    }
    while (((*(_QWORD *)(v5 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for CVarArg);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, (void (*)(_QWORD))type metadata accessor for HandDescriptor);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (CameraSource, simd_float4x4));
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (CameraSource, [SIMD2<Float>]));
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, (void (*)(_QWORD))type metadata accessor for PartialHand);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (UInt64, TrackingUpdateData));
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (CameraSource, SIMD2<Float>));
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (UInt64, [CameraSource : SIMD2<Float>]));
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (UInt64, Coordinate3D));
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (UInt64, [CameraSource : [SIMD2<Float>]]));
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (UInt64, [CameraSource : Float]));
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      a2(0);
      v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v4 + 16) = a1;
    }
    else
    {
      v4 = MEMORY[0x24BEE4AF8];
    }
    a2(0);
    return v4;
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::UInt8 v22;
  __int128 *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Bool, simd_float4x4>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
      v23 = (__int128 *)(*(_QWORD *)(v5 + 56) + (v18 << 6));
      v35 = v23[2];
      v36 = v23[3];
      v33 = *v23;
      v34 = v23[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v22;
      v16 = (_OWORD *)(*(_QWORD *)(v7 + 56) + (v15 << 6));
      *v16 = v33;
      v16[1] = v34;
      v16[2] = v35;
      v16[3] = v36;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, IOSurfaceRef>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v31 = 1 << *(_BYTE *)(v5 + 32);
    v32 = v3;
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v9[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v9[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_40;
              }
              if (v31 >= 64)
                bzero((void *)(v5 + 64), 8 * v33);
              else
                *v9 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v9[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v33)
                  goto LABEL_33;
                v21 = v9[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v19);
      v28 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0)
        v29 = v28;
      result = MEMORY[0x242637B88](*(_QWORD *)(v7 + 40), v27, 4);
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v17) = v27;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v28;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, CVBufferRef>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = *(_QWORD *)(v5 + 48) + 16 * v20;
    v30 = *(_QWORD *)v29;
    v31 = *(_BYTE *)(v29 + 8);
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
      v33 = v32;
    Hasher.init(_seed:)();
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = *(_QWORD *)(v7 + 48) + 16 * v17;
    *(_QWORD *)v18 = v30;
    *(_BYTE *)(v18 + 8) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t i;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, ImageData>);
  v56 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v54 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v52 = v2;
  v53 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v18 = v17 | (v13 << 6);
      if ((v56 & 1) != 0)
        goto LABEL_10;
      goto LABEL_23;
    }
    v29 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v29 >= v53)
      break;
    v30 = v54;
    v31 = v54[v29];
    ++v13;
    if (!v31)
    {
      v13 = v29 + 1;
      if (v29 + 1 >= v53)
        goto LABEL_33;
      v31 = v54[v13];
      if (!v31)
      {
        v32 = v29 + 2;
        if (v32 >= v53)
        {
LABEL_33:
          swift_release();
          v3 = v52;
          if ((v56 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v31 = v54[v32];
        if (!v31)
        {
          while (1)
          {
            v13 = v32 + 1;
            if (__OFADD__(v32, 1))
              goto LABEL_42;
            if (v13 >= v53)
              goto LABEL_33;
            v31 = v54[v13];
            ++v32;
            if (v31)
              goto LABEL_22;
          }
        }
        v13 = v32;
      }
    }
LABEL_22:
    v10 = (v31 - 1) & v31;
    v18 = __clz(__rbit64(v31)) + (v13 << 6);
    if ((v56 & 1) != 0)
    {
LABEL_10:
      v19 = *(_QWORD *)(v5 + 48) + 16 * v18;
      v20 = *(_QWORD *)v19;
      v21 = *(_BYTE *)(v19 + 8);
      v22 = *(_QWORD *)(v5 + 56) + 192 * v18;
      v23 = *(_QWORD *)v22;
      v24 = *(_QWORD *)(v22 + 16);
      v25 = *(_QWORD *)(v22 + 32);
      v57 = *(_QWORD *)(v22 + 24);
      v58 = *(_QWORD *)(v22 + 8);
      v26 = *(_QWORD *)(v22 + 40);
      v59 = *(_QWORD *)(v22 + 56);
      v60 = *(_QWORD *)(v22 + 48);
      v61 = *(_OWORD *)(v22 + 64);
      v27 = *(_BYTE *)(v22 + 80);
      v64 = *(_DWORD *)(v22 + 84);
      v66 = *(_QWORD *)(v22 + 88);
      v63 = *(_QWORD *)(v22 + 96);
      v67 = *(_OWORD *)(v22 + 144);
      v68 = *(_OWORD *)(v22 + 160);
      v65 = *(_OWORD *)(v22 + 128);
      v62 = *(_OWORD *)(v22 + 112);
      v69 = *(_QWORD *)(v22 + 104);
      v70 = *(_QWORD *)(v22 + 176);
      v28 = *(_QWORD *)(v22 + 184);
      goto LABEL_24;
    }
LABEL_23:
    v33 = *(_QWORD *)(v5 + 48) + 16 * v18;
    v20 = *(_QWORD *)v33;
    v21 = *(_BYTE *)(v33 + 8);
    v34 = (__int128 *)(*(_QWORD *)(v5 + 56) + 192 * v18);
    v36 = v34[2];
    v35 = v34[3];
    v37 = *v34;
    v72 = v34[1];
    v73 = v36;
    v71 = v37;
    v38 = v34[7];
    v40 = v34[4];
    v39 = v34[5];
    v77 = v34[6];
    v78 = v38;
    v75 = v40;
    v76 = v39;
    v41 = v34[11];
    v43 = v34[8];
    v42 = v34[9];
    v81 = v34[10];
    v82 = v41;
    v79 = v43;
    v80 = v42;
    v74 = v35;
    v28 = *((_QWORD *)&v41 + 1);
    v69 = *((_QWORD *)&v77 + 1);
    v70 = v41;
    v67 = v42;
    v68 = v81;
    v65 = v43;
    v62 = v78;
    v66 = *((_QWORD *)&v76 + 1);
    v63 = v77;
    v64 = DWORD1(v76);
    v27 = v76;
    v61 = v75;
    v26 = *((_QWORD *)&v36 + 1);
    v59 = *((_QWORD *)&v35 + 1);
    v60 = v35;
    v24 = v72;
    v25 = v36;
    v23 = v71;
    v57 = *((_QWORD *)&v72 + 1);
    v58 = *((_QWORD *)&v71 + 1);
    outlined retain of ImageData((uint64_t)&v71);
LABEL_24:
    Hasher.init(_seed:)();
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v44 = -1 << *(_BYTE *)(v7 + 32);
    v45 = result & ~v44;
    v46 = v45 >> 6;
    if (((-1 << v45) & ~*(_QWORD *)(v11 + 8 * (v45 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v45) & ~*(_QWORD *)(v11 + 8 * (v45 >> 6)))) | v45 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v47 = 0;
      v48 = (unint64_t)(63 - v44) >> 6;
      do
      {
        if (++v46 == v48 && (v47 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v49 = v46 == v48;
        if (v46 == v48)
          v46 = 0;
        v47 |= v49;
        v50 = *(_QWORD *)(v11 + 8 * v46);
      }
      while (v50 == -1);
      v14 = __clz(__rbit64(~v50)) + (v46 << 6);
    }
    LOBYTE(v71) = v27;
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 16 * v14;
    *(_QWORD *)v15 = v20;
    *(_BYTE *)(v15 + 8) = v21;
    v16 = *(_QWORD *)(v7 + 56) + 192 * v14;
    *(_QWORD *)v16 = v23;
    *(_QWORD *)(v16 + 8) = v58;
    *(_QWORD *)(v16 + 16) = v24;
    *(_QWORD *)(v16 + 24) = v57;
    *(_QWORD *)(v16 + 32) = v25;
    *(_QWORD *)(v16 + 40) = v26;
    *(_QWORD *)(v16 + 48) = v60;
    *(_QWORD *)(v16 + 56) = v59;
    *(_OWORD *)(v16 + 64) = v61;
    *(_BYTE *)(v16 + 80) = v27;
    *(_DWORD *)(v16 + 84) = v64;
    *(_QWORD *)(v16 + 88) = v66;
    *(_QWORD *)(v16 + 96) = v63;
    *(_QWORD *)(v16 + 104) = v69;
    *(_OWORD *)(v16 + 112) = v62;
    *(_OWORD *)(v16 + 128) = v65;
    *(_OWORD *)(v16 + 144) = v67;
    *(_OWORD *)(v16 + 160) = v68;
    *(_QWORD *)(v16 + 176) = v70;
    *(_QWORD *)(v16 + 184) = v28;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v52;
  v30 = v54;
  if ((v56 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v51 = 1 << *(_BYTE *)(v5 + 32);
  if (v51 >= 64)
    bzero(v30, ((unint64_t)(v51 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v30 = -1 << v51;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, Int>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt8 v23;
  Swift::UInt64 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  char v44;
  char v45;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectInteractionResultsByHand.HandIdentifier, ObjectInteractionInfo>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = a2;
    v8 = 0;
    v40 = (_QWORD *)(v5 + 64);
    v41 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = (uint64_t)v40;
        if (v18 >= v39)
          goto LABEL_31;
        v19 = v40[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v39)
            goto LABEL_31;
          v19 = v40[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v39)
            {
LABEL_31:
              if ((v38 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v37 = 1 << *(_BYTE *)(v5 + 32);
              if (v37 >= 64)
                bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v40 = -1 << v37;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v40[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v39)
                  goto LABEL_31;
                v19 = v40[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(v5 + 48) + 16 * v17;
      v22 = *(_QWORD *)(v5 + 56) + 80 * v17;
      v23 = *(_BYTE *)(v21 + 8);
      v24 = *(_QWORD *)v21;
      v44 = *(_BYTE *)(v22 + 68);
      v45 = *(_BYTE *)(v22 + 69);
      v25 = *(_QWORD *)(v22 + 60);
      v43 = *(_BYTE *)(v22 + 56);
      v26 = *(_QWORD *)(v22 + 48);
      v42 = *(_OWORD *)(v22 + 32);
      v27 = *(_QWORD *)(v22 + 16);
      v28 = *(_QWORD *)(v22 + 8);
      v29 = *(_QWORD *)v22;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v30 = -1 << *(_BYTE *)(v7 + 32);
      v31 = result & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v12 + 8 * v32);
        }
        while (v36 == -1);
        v13 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 16 * v13;
      *(_QWORD *)v14 = v24;
      *(_BYTE *)(v14 + 8) = v23;
      v15 = *(_QWORD *)(v7 + 56) + 80 * v13;
      *(_QWORD *)v15 = v29;
      *(_QWORD *)(v15 + 8) = v28;
      *(_QWORD *)(v15 + 16) = v27;
      *(_OWORD *)(v15 + 32) = v42;
      *(_QWORD *)(v15 + 48) = v26;
      *(_BYTE *)(v15 + 56) = v43;
      *(_QWORD *)(v15 + 60) = v25;
      *(_BYTE *)(v15 + 68) = v44;
      *(_BYTE *)(v15 + 69) = v45;
      ++*(_QWORD *)(v7 + 16);
      v5 = v41;
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, WarperMeshCameraState>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = *(_QWORD *)(v5 + 48) + 16 * v20;
    v30 = *(_QWORD *)v29;
    v31 = *(_BYTE *)(v29 + 8);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_retain();
    Hasher.init(_seed:)();
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = *(_QWORD *)(v7 + 48) + 16 * v17;
    *(_QWORD *)v18 = v30;
    *(_BYTE *)(v18 + 8) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  int64_t v42;
  uint64_t v43;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, EstimatedBoundingBox>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v40 = a2;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v43 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v41 = v2;
  v42 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_22;
    }
    v19 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
    if (v19 >= v42)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v43 + 8 * v19);
    ++v13;
    if (!v21)
    {
      v13 = v19 + 1;
      if (v19 + 1 >= v42)
        goto LABEL_31;
      v21 = *(_QWORD *)(v43 + 8 * v13);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v42)
        {
LABEL_31:
          swift_release();
          v3 = v41;
          if ((v40 & 1) == 0)
            goto LABEL_38;
          goto LABEL_34;
        }
        v21 = *(_QWORD *)(v43 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v13 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_40;
            if (v13 >= v42)
              goto LABEL_31;
            v21 = *(_QWORD *)(v43 + 8 * v13);
            ++v22;
            if (v21)
              goto LABEL_21;
          }
        }
        v13 = v22;
      }
    }
LABEL_21:
    v10 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v13 << 6);
LABEL_22:
    v23 = *(_QWORD *)(v5 + 48) + 16 * v18;
    v24 = *(_QWORD *)(v5 + 56) + 40 * v18;
    v25 = *(_BYTE *)(v23 + 8);
    v26 = *(_QWORD *)v23;
    v27 = *(_QWORD *)(v24 + 28);
    v28 = *(_BYTE *)(v24 + 24);
    v29 = *(_QWORD *)(v24 + 16);
    v31 = *(_QWORD *)v24;
    v30 = *(_QWORD *)(v24 + 8);
    Hasher.init(_seed:)();
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v7 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v11 + 8 * (v33 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v11 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v11 + 8 * v34);
      }
      while (v38 == -1);
      v14 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 16 * v14;
    *(_QWORD *)v15 = v26;
    *(_BYTE *)(v15 + 8) = v25;
    v16 = *(_QWORD *)(v7 + 56) + 40 * v14;
    *(_QWORD *)v16 = v31;
    *(_QWORD *)(v16 + 8) = v30;
    *(_QWORD *)(v16 + 16) = v29;
    *(_BYTE *)(v16 + 24) = v28;
    *(_QWORD *)(v16 + 28) = v27;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v41;
  v20 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v20, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<CameraSource, [SIMD2<Float>]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, simd_float4x4>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v36 = a2;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v2;
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_22;
    }
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
    if (v20 >= v11)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v38 + 8 * v20);
    ++v14;
    if (!v22)
    {
      v14 = v20 + 1;
      if (v20 + 1 >= v11)
        goto LABEL_31;
      v22 = *(_QWORD *)(v38 + 8 * v14);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v11)
        {
LABEL_31:
          swift_release();
          v3 = v37;
          if ((v36 & 1) == 0)
            goto LABEL_38;
          goto LABEL_34;
        }
        v22 = *(_QWORD *)(v38 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v14 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_40;
            if (v14 >= v11)
              goto LABEL_31;
            v22 = *(_QWORD *)(v38 + 8 * v14);
            ++v23;
            if (v22)
              goto LABEL_21;
          }
        }
        v14 = v23;
      }
    }
LABEL_21:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v14 << 6);
LABEL_22:
    v24 = *(_QWORD *)(v5 + 48) + 16 * v19;
    v25 = *(_BYTE *)(v24 + 8);
    v26 = *(_QWORD *)v24;
    v27 = (__int128 *)(*(_QWORD *)(v5 + 56) + (v19 << 6));
    v41 = v27[2];
    v42 = v27[3];
    v39 = *v27;
    v40 = v27[1];
    Hasher.init(_seed:)();
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 16 * v15;
    *(_QWORD *)v16 = v26;
    *(_BYTE *)(v16 + 8) = v25;
    v17 = (_OWORD *)(*(_QWORD *)(v7 + 56) + (v15 << 6));
    *v17 = v39;
    v17[1] = v40;
    v17[2] = v41;
    v17[3] = v42;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v37;
  v21 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v21, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ARVinoJointIndexes, [SIMD3<Float>]>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v31)
          goto LABEL_33;
        v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_33;
          v21 = v32[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v31)
                  goto LABEL_33;
                v21 = v32[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  _QWORD *v18;
  char v19;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PoseDnnOutputLayer, IONamedSlice>);
  v19 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_26;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v18 = (_QWORD *)(v5 + 64);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v17 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v17 > 1)
  {
    v11 = *(_QWORD *)(v5 + 72);
    v12 = 1;
    if (v11)
      goto LABEL_17;
    v12 = 2;
    if (v17 > 2)
    {
      v11 = *(_QWORD *)(v5 + 80);
      if (!v11)
      {
        v13 = 3;
        if (v17 > 3)
        {
          v11 = *(_QWORD *)(v5 + 88);
          if (v11)
          {
            v12 = 3;
            goto LABEL_17;
          }
          while (1)
          {
            v12 = v13 + 1;
            if (__OFADD__(v13, 1))
            {
              __break(1u);
              JUMPOUT(0x23D6C391CLL);
            }
            if (v12 >= v17)
              break;
            v11 = v18[v12];
            ++v13;
            if (v11)
              goto LABEL_17;
          }
        }
        goto LABEL_21;
      }
LABEL_17:
      v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_18:
      v14 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
      if ((v19 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      __asm { BR              X8 }
    }
  }
LABEL_21:
  swift_release();
  v3 = v2;
  if ((v19 & 1) != 0)
  {
    v15 = 1 << *(_BYTE *)(v5 + 32);
    if (v15 >= 64)
      bzero(v18, ((unint64_t)(v15 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v18 = -1 << v15;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_26:
  result = swift_release();
  *v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  _QWORD *v18;
  char v19;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PoseDnnInputLayer, IONamedSlice>);
  v19 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_26;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v18 = (_QWORD *)(v5 + 64);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v17 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v17 > 1)
  {
    v11 = *(_QWORD *)(v5 + 72);
    v12 = 1;
    if (v11)
      goto LABEL_17;
    v12 = 2;
    if (v17 > 2)
    {
      v11 = *(_QWORD *)(v5 + 80);
      if (!v11)
      {
        v13 = 3;
        if (v17 > 3)
        {
          v11 = *(_QWORD *)(v5 + 88);
          if (v11)
          {
            v12 = 3;
            goto LABEL_17;
          }
          while (1)
          {
            v12 = v13 + 1;
            if (__OFADD__(v13, 1))
            {
              __break(1u);
              JUMPOUT(0x23D6C3EECLL);
            }
            if (v12 >= v17)
              break;
            v11 = v18[v12];
            ++v13;
            if (v11)
              goto LABEL_17;
          }
        }
        goto LABEL_21;
      }
LABEL_17:
      v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_18:
      v14 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
      if ((v19 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      __asm { BR              X8 }
    }
  }
LABEL_21:
  swift_release();
  v3 = v2;
  if ((v19 & 1) != 0)
  {
    v15 = 1 << *(_BYTE *)(v5 + 32);
    if (v15 >= 64)
      bzero(v18, ((unint64_t)(v15 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v18 = -1 << v15;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_26:
  result = swift_release();
  *v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PinchDnnOutputLayer, IONamedSlice>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_28;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v18 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v18 <= 1)
  {
    swift_release();
    v11 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  v11 = (_QWORD *)(v5 + 64);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = 1;
  if (v12)
    goto LABEL_17;
  v13 = 2;
  if (v18 <= 2)
    goto LABEL_21;
  v12 = *(_QWORD *)(v5 + 80);
  if (v12)
  {
LABEL_17:
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_18:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
    if ((a2 & 1) == 0)
      swift_retain();
    Hasher.init(_seed:)();
    __asm { BR              X8 }
  }
  v14 = 3;
  if (v18 > 3)
  {
    v12 = *(_QWORD *)(v5 + 88);
    if (v12)
    {
      v13 = 3;
      goto LABEL_17;
    }
    while (1)
    {
      v13 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        JUMPOUT(0x23D6C42B4);
      }
      if (v13 >= v18)
        break;
      v12 = *(_QWORD *)(v5 + 64 + 8 * v13);
      ++v14;
      if (v12)
        goto LABEL_17;
    }
  }
LABEL_21:
  swift_release();
  if ((a2 & 1) == 0)
    goto LABEL_28;
LABEL_24:
  v16 = 1 << *(_BYTE *)(v5 + 32);
  if (v16 >= 64)
    bzero(v11, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v16;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_28:
  result = swift_release();
  *v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PinchDnnInputLayer, IONamedSlice>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_28;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v18 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v18 <= 1)
  {
    swift_release();
    v11 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  v11 = (_QWORD *)(v5 + 64);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = 1;
  if (v12)
    goto LABEL_17;
  v13 = 2;
  if (v18 <= 2)
    goto LABEL_21;
  v12 = *(_QWORD *)(v5 + 80);
  if (v12)
  {
LABEL_17:
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_18:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
    if ((a2 & 1) == 0)
      swift_retain();
    Hasher.init(_seed:)();
    __asm { BR              X8 }
  }
  v14 = 3;
  if (v18 > 3)
  {
    v12 = *(_QWORD *)(v5 + 88);
    if (v12)
    {
      v13 = 3;
      goto LABEL_17;
    }
    while (1)
    {
      v13 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        JUMPOUT(0x23D6C47ACLL);
      }
      if (v13 >= v18)
        break;
      v12 = *(_QWORD *)(v5 + 64 + 8 * v13);
      ++v14;
      if (v12)
        goto LABEL_17;
    }
  }
LABEL_21:
  swift_release();
  if ((a2 & 1) == 0)
    goto LABEL_28;
LABEL_24:
  v16 = 1 << *(_BYTE *)(v5 + 32);
  if (v16 >= 64)
    bzero(v11, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v16;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_28:
  result = swift_release();
  *v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, espresso_buffer_t>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v35 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_33;
        v23 = v35[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_33;
          v23 = v35[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v36 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v35[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v34)
                  goto LABEL_33;
                v23 = v35[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 168 * v21;
      v45 = *(_OWORD *)(v32 + 128);
      v46 = *(_OWORD *)(v32 + 144);
      v47 = *(_QWORD *)(v32 + 160);
      v41 = *(_OWORD *)(v32 + 64);
      v42 = *(_OWORD *)(v32 + 80);
      v43 = *(_OWORD *)(v32 + 96);
      v44 = *(_OWORD *)(v32 + 112);
      v37 = *(_OWORD *)v32;
      v38 = *(_OWORD *)(v32 + 16);
      v39 = *(_OWORD *)(v32 + 32);
      v40 = *(_OWORD *)(v32 + 48);
      if ((v36 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 168 * v17;
      *(_OWORD *)(v19 + 128) = v45;
      *(_OWORD *)(v19 + 144) = v46;
      *(_QWORD *)(v19 + 160) = v47;
      *(_OWORD *)(v19 + 64) = v41;
      *(_OWORD *)(v19 + 80) = v42;
      *(_OWORD *)(v19 + 96) = v43;
      *(_OWORD *)(v19 + 112) = v44;
      *(_OWORD *)v19 = v37;
      *(_OWORD *)(v19 + 16) = v38;
      *(_OWORD *)(v19 + 32) = v39;
      *(_OWORD *)(v19 + 48) = v40;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int32, Float>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 4 * v18;
      v23 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = MEMORY[0x242637B88](*(_QWORD *)(v7 + 40), v23, 4);
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 4 * v15;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, InputPortInfo>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, OutputPortInfo>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<JpegDecoder.InputMetaKey, VTDecompressionSessionRef>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, Int32>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v10;
    v31 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v22 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v17);
      result = static Hasher._hash(seed:_:)();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int64_t v34;
  _QWORD *v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[3];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, PoseImageCrop>);
  v58 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v57 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v56 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v22 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v23 = v22 | (v13 << 6);
      if ((v58 & 1) != 0)
        goto LABEL_10;
      goto LABEL_23;
    }
    v34 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v34 >= v56)
      break;
    v35 = (_QWORD *)(v5 + 64);
    v36 = *(_QWORD *)(v57 + 8 * v34);
    ++v13;
    if (!v36)
    {
      v13 = v34 + 1;
      if (v34 + 1 >= v56)
        goto LABEL_33;
      v36 = *(_QWORD *)(v57 + 8 * v13);
      if (!v36)
      {
        v37 = v34 + 2;
        if (v37 >= v56)
        {
LABEL_33:
          swift_release();
          if ((v58 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v36 = *(_QWORD *)(v57 + 8 * v37);
        if (!v36)
        {
          while (1)
          {
            v13 = v37 + 1;
            if (__OFADD__(v37, 1))
              goto LABEL_42;
            if (v13 >= v56)
              goto LABEL_33;
            v36 = *(_QWORD *)(v57 + 8 * v13);
            ++v37;
            if (v36)
              goto LABEL_22;
          }
        }
        v13 = v37;
      }
    }
LABEL_22:
    v10 = (v36 - 1) & v36;
    v23 = __clz(__rbit64(v36)) + (v13 << 6);
    if ((v58 & 1) != 0)
    {
LABEL_10:
      v24 = *(_QWORD *)(v5 + 48) + 16 * v23;
      v25 = *(_QWORD *)v24;
      v26 = *(_BYTE *)(v24 + 8);
      v27 = (__int128 *)(*(_QWORD *)(v5 + 56) + 176 * v23);
      v28 = v27[9];
      v77 = v27[8];
      v78[0] = v28;
      *(_OWORD *)((char *)v78 + 9) = *(__int128 *)((char *)v27 + 153);
      v29 = v27[5];
      v73 = v27[4];
      v74 = v29;
      v30 = v27[7];
      v75 = v27[6];
      v76 = v30;
      v31 = v27[1];
      v69 = *v27;
      v70 = v31;
      v33 = v27[2];
      v32 = v27[3];
      goto LABEL_24;
    }
LABEL_23:
    v38 = *(_QWORD *)(v5 + 48) + 16 * v23;
    v25 = *(_QWORD *)v38;
    v26 = *(_BYTE *)(v38 + 8);
    v39 = (__int128 *)(*(_QWORD *)(v5 + 56) + 176 * v23);
    v41 = v39[1];
    v40 = v39[2];
    v59 = *v39;
    v60 = v41;
    v61 = v40;
    v42 = v39[6];
    v44 = v39[3];
    v43 = v39[4];
    v64 = v39[5];
    v65 = v42;
    v62 = v44;
    v63 = v43;
    v46 = v39[8];
    v45 = v39[9];
    v47 = v39[7];
    *(_OWORD *)((char *)v68 + 9) = *(__int128 *)((char *)v39 + 153);
    v67 = v46;
    v68[0] = v45;
    v66 = v47;
    outlined retain of PoseImageCrop((uint64_t)&v59);
    v77 = v67;
    v78[0] = v68[0];
    *(_OWORD *)((char *)v78 + 9) = *(_OWORD *)((char *)v68 + 9);
    v73 = v63;
    v74 = v64;
    v75 = v65;
    v76 = v66;
    v69 = v59;
    v70 = v60;
    v33 = v61;
    v32 = v62;
LABEL_24:
    v71 = v33;
    v72 = v32;
    Hasher.init(_seed:)();
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v48 = -1 << *(_BYTE *)(v7 + 32);
    v49 = result & ~v48;
    v50 = v49 >> 6;
    if (((-1 << v49) & ~*(_QWORD *)(v11 + 8 * (v49 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v49) & ~*(_QWORD *)(v11 + 8 * (v49 >> 6)))) | v49 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v51 = 0;
      v52 = (unint64_t)(63 - v48) >> 6;
      do
      {
        if (++v50 == v52 && (v51 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v53 = v50 == v52;
        if (v50 == v52)
          v50 = 0;
        v51 |= v53;
        v54 = *(_QWORD *)(v11 + 8 * v50);
      }
      while (v54 == -1);
      v14 = __clz(__rbit64(~v54)) + (v50 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 16 * v14;
    *(_QWORD *)v15 = v25;
    *(_BYTE *)(v15 + 8) = v26;
    v16 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 176 * v14);
    v17 = v78[0];
    v16[8] = v77;
    v16[9] = v17;
    *(_OWORD *)((char *)v16 + 153) = *(_OWORD *)((char *)v78 + 9);
    v18 = v74;
    v16[4] = v73;
    v16[5] = v18;
    v19 = v76;
    v16[6] = v75;
    v16[7] = v19;
    v20 = v70;
    *v16 = v69;
    v16[1] = v20;
    v21 = v72;
    v16[2] = v71;
    v16[3] = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v35 = (_QWORD *)(v5 + 64);
  if ((v58 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v55 = 1 << *(_BYTE *)(v5 + 32);
  if (v55 >= 64)
    bzero(v35, ((unint64_t)(v55 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v35 = -1 << v55;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<CameraSource, Float>, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<HandRejectionReason, UInt64>, (void (*)(uint64_t))lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt8 v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Bool, [HandRejectionReason : UInt64]>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v29)
          goto LABEL_33;
        v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v29)
            goto LABEL_33;
          v20 = v30[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v8 >= v29)
                  goto LABEL_33;
                v20 = v30[v8];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v8 = v21;
          }
        }
LABEL_30:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v26 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v24 = v15 == v23;
          if (v15 == v23)
            v15 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<SignalStatistics.HandSignal, SignalStatistics>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v19 >= v29)
          goto LABEL_33;
        v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v29)
            goto LABEL_33;
          v20 = v30[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v8 >= v29)
                  goto LABEL_33;
                v20 = v30[v8];
                ++v21;
                if (v20)
                  goto LABEL_30;
              }
            }
            v8 = v21;
          }
        }
LABEL_30:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v26 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v18);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v24 = v15 == v23;
          if (v15 == v23)
            v15 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<HandPresence.Category, UInt64>, (void (*)(uint64_t))lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<CameraSource, UInt64>, (void (*)(uint64_t))lazy protocol witness table accessor for type CameraSource and conformance CameraSource);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char v41;
  int64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, ValueStatistics<Double>>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v41 = a2;
    v8 = 0;
    v43 = (uint64_t *)(v5 + 64);
    v44 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v38 = -1 << v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v39 = 1 << *(_BYTE *)(v5 + 32);
    v40 = v3;
    v42 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v45 = v8;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = (uint64_t)v43;
        if (v17 >= v42)
          goto LABEL_31;
        v18 = v43[v17];
        v19 = v8 + 1;
        if (!v18)
        {
          v19 = v17 + 1;
          if (v17 + 1 >= v42)
            goto LABEL_31;
          v18 = v43[v19];
          if (!v18)
          {
            v20 = v17 + 2;
            if (v20 >= v42)
            {
LABEL_31:
              if ((v41 & 1) == 0)
              {
                result = swift_release();
                v3 = v40;
                goto LABEL_38;
              }
              if (v39 >= 64)
                bzero(v43, 8 * v42);
              else
                *v43 = v38;
              v3 = v40;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v43[v20];
            if (!v18)
            {
              while (1)
              {
                v19 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v19 >= v42)
                  goto LABEL_31;
                v18 = v43[v19];
                ++v20;
                if (v18)
                  goto LABEL_21;
              }
            }
            v19 = v20;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v45 = v19;
        v16 = __clz(__rbit64(v18)) + (v19 << 6);
      }
      v21 = *(_QWORD *)(v5 + 56) + 104 * v16;
      v22 = *(unsigned int *)(*(_QWORD *)(v5 + 48) + 4 * v16);
      v50 = *(_BYTE *)(v21 + 96);
      v49 = *(_QWORD *)(v21 + 88);
      v23 = *(_QWORD *)(v21 + 80);
      v48 = *(_BYTE *)(v21 + 72);
      v47 = *(_QWORD *)(v21 + 64);
      v46 = *(_BYTE *)(v21 + 56);
      v24 = *(_QWORD *)(v21 + 48);
      v25 = *(_BYTE *)(v21 + 40);
      v26 = *(_QWORD *)(v21 + 32);
      v27 = *(_BYTE *)(v21 + 24);
      v28 = *(_QWORD *)(v21 + 16);
      v29 = *(_DWORD *)(v21 + 8);
      v30 = *(_QWORD *)v21;
      result = MEMORY[0x242637B88](*(_QWORD *)(v7 + 40), v22, 4);
      v31 = -1 << *(_BYTE *)(v7 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v12 + 8 * (v32 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v12 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v12 + 8 * v33);
        }
        while (v37 == -1);
        v13 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v13) = v22;
      v14 = *(_QWORD *)(v7 + 56) + 104 * v13;
      *(_QWORD *)v14 = v30;
      *(_DWORD *)(v14 + 8) = v29;
      *(_QWORD *)(v14 + 16) = v28;
      *(_BYTE *)(v14 + 24) = v27;
      *(_QWORD *)(v14 + 32) = v26;
      *(_BYTE *)(v14 + 40) = v25;
      *(_QWORD *)(v14 + 48) = v24;
      *(_BYTE *)(v14 + 56) = v46;
      *(_QWORD *)(v14 + 64) = v47;
      *(_BYTE *)(v14 + 72) = v48;
      *(_QWORD *)(v14 + 80) = v23;
      *(_QWORD *)(v14 + 88) = v49;
      *(_BYTE *)(v14 + 96) = v50;
      ++*(_QWORD *)(v7 + 16);
      v5 = v44;
      v8 = v45;
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ARVinoJointIndexes, ValueStatistics<Float>>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = a2;
    v8 = 0;
    v39 = (_QWORD *)(v5 + 64);
    v40 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v17 >= v38)
          goto LABEL_31;
        v18 = v39[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v38)
            goto LABEL_31;
          v18 = v39[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v38)
            {
LABEL_31:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v36 = 1 << *(_BYTE *)(v5 + 32);
              if (v36 >= 64)
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v36;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v39[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v38)
                  goto LABEL_31;
                v18 = v39[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = *(_QWORD *)(v5 + 56) + (v16 << 6);
      v45 = *(_BYTE *)(v21 + 56);
      v44 = *(_QWORD *)(v21 + 48);
      v22 = *(_QWORD *)(v21 + 40);
      v42 = *(_DWORD *)(v21 + 32);
      v43 = *(_BYTE *)(v21 + 36);
      v41 = *(_BYTE *)(v21 + 28);
      v23 = *(_DWORD *)(v21 + 24);
      v24 = *(_BYTE *)(v21 + 20);
      v25 = *(_DWORD *)(v21 + 16);
      v26 = *(_BYTE *)(v21 + 12);
      v27 = *(_QWORD *)(v21 + 4);
      v28 = *(_DWORD *)v21;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v7 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v20;
      v14 = *(_QWORD *)(v7 + 56) + (v13 << 6);
      *(_DWORD *)v14 = v28;
      *(_QWORD *)(v14 + 4) = v27;
      *(_BYTE *)(v14 + 12) = v26;
      *(_DWORD *)(v14 + 16) = v25;
      *(_BYTE *)(v14 + 20) = v24;
      *(_DWORD *)(v14 + 24) = v23;
      *(_BYTE *)(v14 + 28) = v41;
      *(_DWORD *)(v14 + 32) = v42;
      *(_BYTE *)(v14 + 36) = v43;
      *(_QWORD *)(v14 + 40) = v22;
      *(_QWORD *)(v14 + 48) = v44;
      *(_BYTE *)(v14 + 56) = v45;
      ++*(_QWORD *)(v7 + 16);
      v5 = v40;
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  int v21;
  Swift::UInt v22;
  Swift::UInt v23;
  Swift::UInt v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<StatisticUtils.Location3DBucket, UInt64>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v8 = 0;
    v36 = (_QWORD *)(v5 + 64);
    v37 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v36;
        if (v17 >= v35)
          goto LABEL_34;
        v18 = v36[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v35)
            goto LABEL_34;
          v18 = v36[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v35)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v36[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_43;
                if (v8 >= v35)
                  goto LABEL_34;
                v18 = v36[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 48) + 32 * v16;
      v21 = *(unsigned __int8 *)(v20 + 24);
      v23 = *(_QWORD *)(v20 + 8);
      v22 = *(_QWORD *)(v20 + 16);
      v24 = *(_QWORD *)v20;
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
      Hasher.init(_seed:)();
      if (v21 == 1)
      {
        Hasher._combine(_:)(1uLL);
        Hasher._combine(_:)(v24);
        Hasher._combine(_:)(BYTE1(v24) & 1);
      }
      else
      {
        Hasher._combine(_:)(0);
        Hasher._combine(_:)(v24);
        Hasher._combine(_:)(v23);
        Hasher._combine(_:)(v22);
      }
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v7 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v7 + 48) + 32 * v13;
      *(_QWORD *)v14 = v24;
      *(_QWORD *)(v14 + 8) = v23;
      *(_QWORD *)(v14 + 16) = v22;
      *(_BYTE *)(v14 + 24) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v25;
      ++*(_QWORD *)(v7 + 16);
      v5 = v37;
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  int64_t v34;
  uint64_t v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<StatisticUtils.CameraRegion, UInt64>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v32 = a2;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = v2;
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v34)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v35 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v34)
        goto LABEL_34;
      v20 = *(_QWORD *)(v35 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_34:
          swift_release();
          v3 = v33;
          if ((v32 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v34)
              goto LABEL_34;
            v20 = *(_QWORD *)(v35 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = *(unsigned __int16 *)(*(_QWORD *)(v5 + 48) + 3 * v17) | (*(unsigned __int8 *)(*(_QWORD *)(v5 + 48)
                                                                                      + 3 * v17
                                                                                      + 2) << 16);
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    Hasher.init(_seed:)();
    if (v22 == 2)
    {
      Hasher._combine(_:)(1uLL);
    }
    else
    {
      Hasher._combine(_:)(0);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 3 * v14;
    *(_BYTE *)(v15 + 2) = BYTE2(v22);
    *(_WORD *)v15 = v22;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v14) = v23;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v33;
  v19 = (_QWORD *)(v5 + 64);
  if ((v32 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v19, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<CameraSource, [StatisticUtils.CameraRegion : UInt64]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<HandPresence.Category, Float>, (void (*)(uint64_t))lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  _QWORD *v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[25];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[3];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, DetectionResult>);
  v50 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v49 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v48 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
        if ((v50 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        v30 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v30 >= v48)
          goto LABEL_33;
        v31 = v49[v30];
        ++v13;
        if (!v31)
        {
          v13 = v30 + 1;
          if (v30 + 1 >= v48)
            goto LABEL_33;
          v31 = v49[v13];
          if (!v31)
          {
            v32 = v30 + 2;
            if (v32 >= v48)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v50 & 1) != 0)
              {
                v47 = 1 << *(_BYTE *)(v5 + 32);
                if (v47 >= 64)
                  bzero(v49, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v49 = -1 << v47;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v31 = v49[v32];
            if (!v31)
            {
              while (1)
              {
                v13 = v32 + 1;
                if (__OFADD__(v32, 1))
                  goto LABEL_40;
                if (v13 >= v48)
                  goto LABEL_33;
                v31 = v49[v13];
                ++v32;
                if (v31)
                  goto LABEL_22;
              }
            }
            v13 = v32;
          }
        }
LABEL_22:
        v10 = (v31 - 1) & v31;
        v21 = __clz(__rbit64(v31)) + (v13 << 6);
        if ((v50 & 1) != 0)
        {
LABEL_10:
          v22 = *(_QWORD *)(v5 + 48) + 16 * v21;
          v23 = *(_QWORD *)v22;
          v24 = *(_BYTE *)(v22 + 8);
          v25 = (__int128 *)(*(_QWORD *)(v5 + 56) + 112 * v21);
          v26 = v25[5];
          v61 = v25[4];
          v62[0] = v26;
          *(_OWORD *)((char *)v62 + 9) = *(__int128 *)((char *)v25 + 89);
          v27 = v25[1];
          v57 = *v25;
          v58 = v27;
          v29 = v25[2];
          v28 = v25[3];
          goto LABEL_24;
        }
      }
      v33 = *(_QWORD *)(v5 + 48) + 16 * v21;
      v23 = *(_QWORD *)v33;
      v24 = *(_BYTE *)(v33 + 8);
      v34 = (__int128 *)(*(_QWORD *)(v5 + 56) + 112 * v21);
      v36 = v34[1];
      v35 = v34[2];
      v51 = *v34;
      v52 = v36;
      v53 = v35;
      v38 = v34[4];
      v37 = v34[5];
      v39 = v34[3];
      *(_OWORD *)&v56[9] = *(__int128 *)((char *)v34 + 89);
      v55 = v38;
      *(_OWORD *)v56 = v37;
      v54 = v39;
      outlined retain of DetectionResult((uint64_t)&v51);
      v61 = v55;
      v62[0] = *(_OWORD *)v56;
      *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)&v56[9];
      v57 = v51;
      v58 = v52;
      v29 = v53;
      v28 = v54;
LABEL_24:
      v59 = v29;
      v60 = v28;
      Hasher.init(_seed:)();
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      dispatch thunk of Hashable.hash(into:)();
      result = Hasher._finalize()();
      v40 = -1 << *(_BYTE *)(v7 + 32);
      v41 = result & ~v40;
      v42 = v41 >> 6;
      if (((-1 << v41) & ~*(_QWORD *)(v11 + 8 * (v41 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v11 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v43 = 0;
        v44 = (unint64_t)(63 - v40) >> 6;
        do
        {
          if (++v42 == v44 && (v43 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v45 = v42 == v44;
          if (v42 == v44)
            v42 = 0;
          v43 |= v45;
          v46 = *(_QWORD *)(v11 + 8 * v42);
        }
        while (v46 == -1);
        v14 = __clz(__rbit64(~v46)) + (v42 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v7 + 48) + 16 * v14;
      *(_QWORD *)v15 = v23;
      *(_BYTE *)(v15 + 8) = v24;
      v16 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 112 * v14);
      v17 = v62[0];
      v16[4] = v61;
      v16[5] = v17;
      *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v62 + 9);
      v18 = v58;
      *v16 = v57;
      v16[1] = v18;
      v19 = v60;
      v16[2] = v59;
      v16[3] = v19;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t i;
  char v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _OWORD __dst[36];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, HandsKitData>);
  v43 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v39 = v3;
    v8 = 0;
    v41 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v37 = -1 << v9;
    v38 = v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v40 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
        if ((v43 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        v27 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v41;
        if (v27 >= v40)
          goto LABEL_33;
        v28 = v41[v27];
        ++v8;
        if (!v28)
        {
          v8 = v27 + 1;
          if (v27 + 1 >= v40)
            goto LABEL_33;
          v28 = v41[v8];
          if (!v28)
          {
            v29 = v27 + 2;
            if (v29 >= v40)
            {
LABEL_33:
              if ((v43 & 1) == 0)
              {
                result = swift_release();
                v3 = v39;
                goto LABEL_40;
              }
              if (v38 >= 64)
                bzero(v41, 8 * v40);
              else
                *v41 = v37;
              v3 = v39;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v28 = v41[v29];
            if (!v28)
            {
              while (1)
              {
                v8 = v29 + 1;
                if (__OFADD__(v29, 1))
                  goto LABEL_42;
                if (v8 >= v40)
                  goto LABEL_33;
                v28 = v41[v8];
                ++v29;
                if (v28)
                  goto LABEL_22;
              }
            }
            v8 = v29;
          }
        }
LABEL_22:
        v11 = (v28 - 1) & v28;
        v16 = __clz(__rbit64(v28)) + (v8 << 6);
        if ((v43 & 1) != 0)
        {
LABEL_10:
          v17 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
          v18 = *(_QWORD *)(v5 + 56) + 560 * v16;
          v45 = *(_QWORD *)v18;
          v47 = *(_OWORD *)(v18 + 24);
          v48 = *(_OWORD *)(v18 + 8);
          v46 = *(_OWORD *)(v18 + 40);
          v44 = *(_OWORD *)(v18 + 56);
          v56 = *(_QWORD *)(v18 + 72);
          v19 = *(_BYTE *)(v18 + 80);
          v20 = *(_DWORD *)(v18 + 84);
          v21 = *(_QWORD *)(v18 + 88);
          v50 = *(_OWORD *)(v18 + 112);
          v51 = *(_OWORD *)(v18 + 96);
          v49 = *(_QWORD *)(v18 + 128);
          v22 = *(_BYTE *)(v18 + 136);
          v53 = *(_OWORD *)(v18 + 144);
          v54 = *(_OWORD *)(v18 + 160);
          v57 = *(_DWORD *)(v18 + 176);
          v60 = *(_QWORD *)(v18 + 184);
          v55 = *(_OWORD *)(v18 + 192);
          v62 = *(_OWORD *)(v18 + 240);
          v63 = *(_OWORD *)(v18 + 224);
          v58 = *(_OWORD *)(v18 + 208);
          v59 = *(_OWORD *)(v18 + 256);
          v61 = *(_OWORD *)(v18 + 272);
          v67 = *(_OWORD *)(v18 + 304);
          v68 = *(_OWORD *)(v18 + 288);
          v64 = *(_OWORD *)(v18 + 320);
          v65 = *(_OWORD *)(v18 + 336);
          v23 = *(_QWORD *)(v18 + 352);
          v75 = *(_QWORD *)(v18 + 360);
          v74 = *(_OWORD *)(v18 + 368);
          v24 = *(_BYTE *)(v18 + 392);
          v72 = *(_QWORD *)(v18 + 396);
          v73 = *(_QWORD *)(v18 + 384);
          v52 = *(_DWORD *)(v18 + 404);
          v71 = *(_DWORD *)(v18 + 408);
          v69 = *(_OWORD *)(v18 + 428);
          v70 = *(_OWORD *)(v18 + 412);
          v25 = *(_BYTE *)(v18 + 444);
          v66 = *(_OWORD *)(v18 + 448);
          v76 = *(_BYTE *)(v18 + 464);
          v77 = *(_QWORD *)(v18 + 472);
          v78 = *(_OWORD *)(v18 + 480);
          v80 = *(_OWORD *)(v18 + 512);
          v81 = *(_OWORD *)(v18 + 496);
          v79 = *(_QWORD *)(v18 + 528);
          v26 = *(_QWORD *)(v18 + 536);
          v82 = *(_QWORD *)(v18 + 544);
          goto LABEL_24;
        }
      }
      v17 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      memcpy(__dst, (const void *)(*(_QWORD *)(v5 + 56) + 560 * v16), 0x228uLL);
      v82 = *(_QWORD *)&__dst[34];
      v26 = *((_QWORD *)&__dst[33] + 1);
      v80 = __dst[32];
      v81 = __dst[31];
      v79 = *(_QWORD *)&__dst[33];
      v78 = __dst[30];
      v77 = *((_QWORD *)&__dst[29] + 1);
      v76 = __dst[29];
      v75 = *((_QWORD *)&__dst[22] + 1);
      v23 = *(_QWORD *)&__dst[22];
      v74 = __dst[23];
      v24 = BYTE8(__dst[24]);
      v72 = *(_QWORD *)((char *)&__dst[24] + 12);
      v73 = *(_QWORD *)&__dst[24];
      v71 = DWORD2(__dst[25]);
      v69 = *(_OWORD *)((char *)&__dst[26] + 12);
      v70 = *(_OWORD *)((char *)&__dst[25] + 12);
      v25 = BYTE12(__dst[27]);
      v68 = __dst[18];
      v66 = __dst[28];
      v67 = __dst[19];
      v64 = __dst[20];
      v65 = __dst[21];
      v62 = __dst[15];
      v63 = __dst[14];
      v61 = __dst[17];
      v60 = *((_QWORD *)&__dst[11] + 1);
      v58 = __dst[13];
      v59 = __dst[16];
      v52 = DWORD1(__dst[25]);
      v57 = __dst[11];
      v54 = __dst[10];
      v55 = __dst[12];
      v53 = __dst[9];
      v56 = *((_QWORD *)&__dst[4] + 1);
      v19 = __dst[5];
      v20 = DWORD1(__dst[5]);
      v21 = *((_QWORD *)&__dst[5] + 1);
      v50 = __dst[7];
      v51 = __dst[6];
      v49 = *(_QWORD *)&__dst[8];
      v22 = BYTE8(__dst[8]);
      v47 = *(_OWORD *)((char *)&__dst[1] + 8);
      v48 = *(_OWORD *)((char *)__dst + 8);
      v46 = *(_OWORD *)((char *)&__dst[2] + 8);
      v44 = *(_OWORD *)((char *)&__dst[3] + 8);
      v45 = *(_QWORD *)&__dst[0];
      outlined retain of HandsKitData(__dst);
LABEL_24:
      result = static Hasher._hash(seed:_:)();
      v30 = -1 << *(_BYTE *)(v7 + 32);
      v31 = result & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v12 + 8 * v32);
        }
        while (v36 == -1);
        v13 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      LOBYTE(__dst[0]) = v19;
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v17;
      v14 = *(_QWORD *)(v7 + 56) + 560 * v13;
      *(_QWORD *)v14 = v45;
      *(_OWORD *)(v14 + 8) = v48;
      *(_OWORD *)(v14 + 24) = v47;
      *(_OWORD *)(v14 + 40) = v46;
      *(_OWORD *)(v14 + 56) = v44;
      *(_QWORD *)(v14 + 72) = v56;
      *(_BYTE *)(v14 + 80) = v19;
      *(_DWORD *)(v14 + 84) = v20;
      *(_QWORD *)(v14 + 88) = v21;
      *(_OWORD *)(v14 + 96) = v51;
      *(_OWORD *)(v14 + 112) = v50;
      *(_QWORD *)(v14 + 128) = v49;
      *(_BYTE *)(v14 + 136) = v22;
      *(_OWORD *)(v14 + 144) = v53;
      *(_OWORD *)(v14 + 160) = v54;
      *(_DWORD *)(v14 + 176) = v57;
      *(_QWORD *)(v14 + 184) = v60;
      *(_OWORD *)(v14 + 192) = v55;
      *(_OWORD *)(v14 + 208) = v58;
      *(_OWORD *)(v14 + 224) = v63;
      *(_OWORD *)(v14 + 240) = v62;
      *(_OWORD *)(v14 + 256) = v59;
      *(_OWORD *)(v14 + 272) = v61;
      *(_OWORD *)(v14 + 288) = v68;
      *(_OWORD *)(v14 + 304) = v67;
      *(_OWORD *)(v14 + 320) = v64;
      *(_OWORD *)(v14 + 336) = v65;
      *(_QWORD *)(v14 + 352) = v23;
      *(_QWORD *)(v14 + 360) = v75;
      *(_OWORD *)(v14 + 368) = v74;
      *(_QWORD *)(v14 + 384) = v73;
      *(_BYTE *)(v14 + 392) = v24;
      *(_QWORD *)(v14 + 396) = v72;
      *(_DWORD *)(v14 + 404) = v52;
      *(_DWORD *)(v14 + 408) = v71;
      *(_OWORD *)(v14 + 412) = v70;
      *(_OWORD *)(v14 + 428) = v69;
      *(_BYTE *)(v14 + 444) = v25;
      *(_OWORD *)(v14 + 448) = v66;
      *(_BYTE *)(v14 + 464) = v76;
      *(_QWORD *)(v14 + 472) = v77;
      *(_OWORD *)(v14 + 480) = v78;
      *(_OWORD *)(v14 + 496) = v81;
      *(_OWORD *)(v14 + 512) = v80;
      *(_QWORD *)(v14 + 528) = v79;
      *(_QWORD *)(v14 + 536) = v26;
      *(_QWORD *)(v14 + 544) = v82;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CameraSource>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = *(_QWORD *)(v5 + 56) + v31;
    v36 = *(_QWORD *)v35;
    v37 = *(_BYTE *)(v35 + 8);
    if ((v42 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = *(_QWORD *)(v7 + 56) + v18;
    *(_QWORD *)v20 = v36;
    *(_BYTE *)(v20 + 8) = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<CameraSource, [DetectionResult]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _BYTE __dst[320];
  _BYTE __src[320];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, (TrackingInfo, Int)>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v29 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v30 = 1 << *(_BYTE *)(v5 + 32);
    v31 = v3;
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v16 = v15 | (v8 << 6);
        if ((a2 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v32)
          goto LABEL_33;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v32)
            goto LABEL_33;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v31;
                goto LABEL_40;
              }
              if (v30 >= 64)
                bzero((void *)(v5 + 64), 8 * v32);
              else
                *v9 = v29;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_33;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_22;
              }
            }
            v8 = v21;
          }
        }
LABEL_22:
        v12 = (v20 - 1) & v20;
        v16 = __clz(__rbit64(v20)) + (v8 << 6);
        if ((a2 & 1) != 0)
        {
LABEL_10:
          v17 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
          v18 = (_BYTE *)(*(_QWORD *)(v5 + 56) + 320 * v16);
          goto LABEL_24;
        }
      }
      v17 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      memcpy(__dst, (const void *)(*(_QWORD *)(v5 + 56) + 320 * v16), sizeof(__dst));
      outlined retain of (TrackingInfo, Int)((uint64_t)__dst);
      v18 = __dst;
LABEL_24:
      memcpy(__src, v18, sizeof(__src));
      result = static Hasher._hash(seed:_:)();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v17;
      result = (uint64_t)memcpy((void *)(*(_QWORD *)(v7 + 56) + 320 * v14), __src, 0x140uLL);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Int, UInt64>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CameraSource : SIMD2<Float>]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, SIMD2<Float>>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v35 = a2;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_22;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
    if (v19 >= v11)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v11)
        goto LABEL_31;
      v21 = *(_QWORD *)(v37 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v11)
        {
LABEL_31:
          swift_release();
          v3 = v36;
          if ((v35 & 1) == 0)
            goto LABEL_38;
          goto LABEL_34;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_40;
            if (v14 >= v11)
              goto LABEL_31;
            v21 = *(_QWORD *)(v37 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_21;
          }
        }
        v14 = v22;
      }
    }
LABEL_21:
    v10 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_22:
    v23 = *(_QWORD *)(v5 + 48) + 16 * v18;
    v24 = *(_BYTE *)(v23 + 8);
    v25 = *(_QWORD *)v23;
    v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    Hasher.init(_seed:)();
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v7 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 16 * v15;
    *(_QWORD *)v16 = v25;
    *(_BYTE *)(v16 + 8) = v24;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v26;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v20 = (_QWORD *)(v5 + 64);
  if ((v35 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  __int128 v35;
  __int128 v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, Coordinate3D>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v33;
                goto LABEL_38;
              }
              if (v32 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v31;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = (__int128 *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      v35 = *v23;
      v36 = v23[1];
      result = static Hasher._hash(seed:_:)();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v22;
      v16 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15);
      *v16 = v35;
      v16[1] = v36;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CameraSource : [SIMD2<Float>]]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, TrackingUpdateData>);
  v42 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v40 = (uint64_t *)(v5 + 64);
    v41 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = -1 << v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = 1 << *(_BYTE *)(v5 + 32);
    v38 = v3;
    v39 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v40;
        if (v20 >= v39)
          goto LABEL_33;
        v21 = v40[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v39)
            goto LABEL_33;
          v21 = v40[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v39)
            {
LABEL_33:
              if ((v42 & 1) == 0)
              {
                result = swift_release();
                v3 = v38;
                goto LABEL_40;
              }
              if (v37 >= 64)
                bzero(v40, 8 * v39);
              else
                *v40 = v36;
              v3 = v38;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v40[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v39)
                  goto LABEL_33;
                v21 = v40[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = *(_QWORD *)(v5 + 56) + 96 * v19;
      v47 = *(_OWORD *)(v28 + 16);
      v48 = *(_OWORD *)v28;
      v29 = *(_BYTE *)(v28 + 32);
      v30 = *(_BYTE *)(v28 + 33);
      v31 = *(_DWORD *)(v28 + 36);
      v32 = *(_BYTE *)(v28 + 40);
      v33 = *(_DWORD *)(v28 + 44);
      v34 = *(_QWORD *)(v28 + 56);
      v45 = *(_BYTE *)(v28 + 64);
      v46 = *(_BYTE *)(v28 + 48);
      v43 = *(_BYTE *)(v28 + 66);
      v44 = *(_BYTE *)(v28 + 65);
      v35 = *(_QWORD *)(v28 + 68);
      v49 = *(_OWORD *)(v28 + 80);
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 96 * v16;
      *(_OWORD *)v17 = v48;
      *(_OWORD *)(v17 + 16) = v47;
      *(_BYTE *)(v17 + 32) = v29;
      *(_BYTE *)(v17 + 33) = v30;
      *(_DWORD *)(v17 + 36) = v31;
      *(_BYTE *)(v17 + 40) = v32;
      *(_DWORD *)(v17 + 44) = v33;
      *(_BYTE *)(v17 + 48) = v46;
      *(_QWORD *)(v17 + 56) = v34;
      *(_BYTE *)(v17 + 64) = v45;
      *(_BYTE *)(v17 + 65) = v44;
      *(_BYTE *)(v17 + 66) = v43;
      *(_QWORD *)(v17 + 68) = v35;
      *(_OWORD *)(v17 + 80) = v49;
      ++*(_QWORD *)(v7 + 16);
      v5 = v41;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, WristCounts>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v31 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v29 = -1 << v10;
    v30 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                result = swift_release();
                v3 = v31;
                goto LABEL_38;
              }
              if (v30 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v29;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v33 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v17);
      result = static Hasher._hash(seed:_:)();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v15) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, TwoHandOcclusionCoreAnalytics>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, FilterHandPipeline>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<CameraSource, [Float]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<JpegDecoder.InputMetaKey, CVPixelBufferPoolRef>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int64, SIMD3<Float>>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v31 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v29 = -1 << v10;
    v30 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                result = swift_release();
                v3 = v31;
                goto LABEL_38;
              }
              if (v30 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v29;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v33 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v17);
      result = static Hasher._hash(seed:_:)();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v15) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<JpegEncoder.JpegRes, VTCompressionSessionRef>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v22 >= v13)
          goto LABEL_33;
        v23 = v33[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v13)
            goto LABEL_33;
          v23 = v33[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v33, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v32;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v33[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v9 >= v13)
                  goto LABEL_33;
                v23 = v33[v9];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v9 = v24;
          }
        }
LABEL_30:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      *(_QWORD *)&v7 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v29);
      v34 = v7;
      v30 = *(void **)(*(_QWORD *)(v5 + 56) + v29);
      if ((a2 & 1) == 0)
        v31 = v30;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(DWORD1(v34));
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        v7 = v34;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        v7 = v34;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v7;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v30;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v8;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CameraSource : Float]>);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v36 = a2;
    v35 = v4;
    v9 = 0;
    v10 = (uint64_t *)(v6 + 64);
    v11 = 1 << *(_BYTE *)(v6 + 32);
    v33 = -1 << v11;
    v34 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v20 >= v14)
          goto LABEL_31;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_31;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_31:
              if ((v36 & 1) == 0)
              {
                result = swift_release();
                v4 = v35;
                goto LABEL_38;
              }
              if (v34 >= 64)
                bzero((void *)(v6 + 64), 8 * v14);
              else
                *v10 = v33;
              v4 = v35;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_40;
                if (v9 >= v14)
                  goto LABEL_31;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v9 = v22;
          }
        }
LABEL_21:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = 8 * v19;
      v24 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v23);
      v25 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v23);
      result = static Hasher._hash(seed:_:)();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v15 + 8 * v28);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v6 + 64);
    v11 = 1 << *(_BYTE *)(v6 + 32);
    v32 = -1 << v11;
    v33 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v34 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_33;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_33;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero((void *)(v6 + 64), 8 * v34);
                else
                  *v10 = v32;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v9 >= v34)
                  goto LABEL_33;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v9 = v24;
          }
        }
LABEL_30:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v29);
      v31 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v29);
      if ((a2 & 1) == 0)
        swift_retain();
      result = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          v4 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v36)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_QWORD *)(v6 + 48) + 16 * v21;
    v31 = *(_QWORD *)v30;
    v32 = *(_BYTE *)(v30 + 8);
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = *(_QWORD *)(v8 + 48) + 16 * v18;
    *(_QWORD *)v19 = v31;
    *(_BYTE *)(v19 + 8) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v35;
  v23 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;
  id v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_33;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_33:
          swift_release();
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v15 >= v36)
              goto LABEL_33;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v15 = v26;
      }
    }
LABEL_30:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    v31 = *(_QWORD *)(v6 + 48) + 12 * v22;
    v32 = *(_BYTE *)v31;
    *(_QWORD *)&v14 = *(_QWORD *)(v31 + 4);
    v39 = v14;
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
      v34 = v33;
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v39);
    Hasher._combine(_:)(DWORD1(v39));
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v12 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v12 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      v14 = v39;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      v14 = v39;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v12 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = *(_QWORD *)(v8 + 48) + 12 * v19;
    *(_BYTE *)v20 = v32;
    *(_QWORD *)(v20 + 4) = v14;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v6 + 64);
    v11 = 1 << *(_BYTE *)(v6 + 32);
    v32 = -1 << v11;
    v33 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v34 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_33;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_33;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero((void *)(v6 + 64), 8 * v34);
                else
                  *v10 = v32;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v9 >= v34)
                  goto LABEL_33;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v9 = v24;
          }
        }
LABEL_30:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v29);
      v31 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v29);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for Matrix2dPB, &demangling cache variable for type metadata for _DictionaryStorage<Int32, Matrix2dPB>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for TrackingUpdateDataPB, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, TrackingUpdateDataPB>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for HandsKitDataPB, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, HandsKitDataPB>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;

  v3 = v2;
  v46 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46, v6);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Logger>);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (*(_QWORD *)(v8 + 16))
  {
    v41 = v2;
    v11 = 1 << *(_BYTE *)(v8 + 32);
    v12 = *(_QWORD *)(v8 + 64);
    v43 = (_QWORD *)(v8 + 64);
    if (v11 < 64)
      v13 = ~(-1 << v11);
    else
      v13 = -1;
    v14 = v13 & v12;
    v42 = (unint64_t)(v11 + 63) >> 6;
    v15 = v9 + 64;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v14)
      {
        v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v21 = v20 | (v17 << 6);
      }
      else
      {
        v22 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v42)
          goto LABEL_34;
        v23 = v43[v22];
        ++v17;
        if (!v23)
        {
          v17 = v22 + 1;
          if (v22 + 1 >= v42)
            goto LABEL_34;
          v23 = v43[v17];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v42)
            {
LABEL_34:
              swift_release();
              v3 = v41;
              if ((v44 & 1) != 0)
              {
                v39 = 1 << *(_BYTE *)(v8 + 32);
                if (v39 >= 64)
                  bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v43 = -1 << v39;
                *(_QWORD *)(v8 + 16) = 0;
              }
              break;
            }
            v23 = v43[v24];
            if (!v23)
            {
              while (1)
              {
                v17 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v17 >= v42)
                  goto LABEL_34;
                v23 = v43[v17];
                ++v24;
                if (v23)
                  goto LABEL_21;
              }
            }
            v17 = v24;
          }
        }
LABEL_21:
        v14 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v17 << 6);
      }
      v25 = *(_QWORD *)(v8 + 56);
      v26 = v8;
      v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
      v29 = *v27;
      v28 = v27[1];
      v30 = *(_QWORD *)(v5 + 72);
      v31 = v25 + v30 * v21;
      if ((v44 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v45, v31, v46);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v45, v31, v46);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v32 = -1 << *(_BYTE *)(v10 + 32);
      v33 = result & ~v32;
      v34 = v33 >> 6;
      if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v37 = v34 == v36;
          if (v34 == v36)
            v34 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)(v15 + 8 * v34);
        }
        while (v38 == -1);
        v18 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
      *v19 = v29;
      v19[1] = v28;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v45, v46);
      ++*(_QWORD *)(v10 + 16);
      v8 = v26;
    }
  }
  result = swift_release();
  *v3 = v10;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, type metadata accessor for ImageCalibrationDataPB, &demangling cache variable for type metadata for _DictionaryStorage<Int32, ImageCalibrationDataPB>);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;

  v5 = v4;
  v7 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_38;
  v37 = a2;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v40 = v7 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v7 + 64);
  v38 = v4;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_22;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
    if (v20 >= v39)
      break;
    v21 = (_QWORD *)(v7 + 64);
    v22 = *(_QWORD *)(v40 + 8 * v20);
    ++v15;
    if (!v22)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v39)
        goto LABEL_31;
      v22 = *(_QWORD *)(v40 + 8 * v15);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v39)
        {
LABEL_31:
          swift_release();
          v5 = v38;
          if ((v37 & 1) == 0)
            goto LABEL_38;
          goto LABEL_34;
        }
        v22 = *(_QWORD *)(v40 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v15 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_40;
            if (v15 >= v39)
              goto LABEL_31;
            v22 = *(_QWORD *)(v40 + 8 * v15);
            ++v23;
            if (v22)
              goto LABEL_21;
          }
        }
        v15 = v23;
      }
    }
LABEL_21:
    v12 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v15 << 6);
LABEL_22:
    v24 = *(_QWORD *)(v7 + 48) + 16 * v19;
    v25 = *(_BYTE *)(v24 + 8);
    v26 = *(_QWORD *)v24;
    v27 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v19);
    v28 = Hasher.init(_seed:)();
    a4(v28);
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = *(_QWORD *)(v9 + 48) + 16 * v16;
    *(_QWORD *)v17 = v26;
    *(_BYTE *)(v17 + 8) = v25;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v16) = v27;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release();
  v5 = v38;
  v21 = (_QWORD *)(v7 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 >= 64)
    bzero(v21, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v5 = v9;
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;

  v5 = v4;
  v7 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_38;
  v38 = a2;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v39 = v4;
  v40 = v7 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v7 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v12)
    {
      v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v20 = v19 | (v16 << 6);
      goto LABEL_22;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
    if (v21 >= v13)
      break;
    v22 = (_QWORD *)(v7 + 64);
    v23 = *(_QWORD *)(v40 + 8 * v21);
    ++v16;
    if (!v23)
    {
      v16 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_31;
      v23 = *(_QWORD *)(v40 + 8 * v16);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v13)
        {
LABEL_31:
          swift_release();
          v5 = v39;
          if ((v38 & 1) == 0)
            goto LABEL_38;
          goto LABEL_34;
        }
        v23 = *(_QWORD *)(v40 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v16 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_40;
            if (v16 >= v13)
              goto LABEL_31;
            v23 = *(_QWORD *)(v40 + 8 * v16);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v16 = v24;
      }
    }
LABEL_21:
    v12 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v7 + 48) + 16 * v20;
    v26 = *(_BYTE *)(v25 + 8);
    v27 = *(_QWORD *)v25;
    v28 = *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v20);
    v29 = Hasher.init(_seed:)();
    a4(v29);
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v9 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v14 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v14 + 8 * v32);
      }
      while (v36 == -1);
      v17 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = *(_QWORD *)(v9 + 48) + 16 * v17;
    *(_QWORD *)v18 = v27;
    *(_BYTE *)(v18 + 8) = v26;
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + 4 * v17) = v28;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release();
  v5 = v39;
  v22 = (_QWORD *)(v7 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v37 = 1 << *(_BYTE *)(v7 + 32);
  if (v37 >= 64)
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v37;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v5 = v9;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;

  v7 = v4;
  v9 = a3(0);
  v43 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v39 - v11;
  v13 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v44 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v15 = result;
  if (*(_QWORD *)(v13 + 16))
  {
    v40 = v7;
    v16 = 0;
    v17 = *(_QWORD *)(v13 + 64);
    v42 = (_QWORD *)(v13 + 64);
    v18 = 1 << *(_BYTE *)(v13 + 32);
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v20 = v19 & v17;
    v41 = (unint64_t)(v18 + 63) >> 6;
    v21 = result + 64;
    while (1)
    {
      if (v20)
      {
        v23 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        v24 = v23 | (v16 << 6);
      }
      else
      {
        v25 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v42;
        if (v25 >= v41)
          goto LABEL_34;
        v26 = v42[v25];
        ++v16;
        if (!v26)
        {
          v16 = v25 + 1;
          if (v25 + 1 >= v41)
            goto LABEL_34;
          v26 = v42[v16];
          if (!v26)
          {
            v27 = v25 + 2;
            if (v27 >= v41)
            {
LABEL_34:
              if ((v44 & 1) == 0)
              {
                result = swift_release();
                v7 = v40;
                goto LABEL_41;
              }
              v38 = 1 << *(_BYTE *)(v13 + 32);
              if (v38 >= 64)
                bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v42 = -1 << v38;
              v7 = v40;
              *(_QWORD *)(v13 + 16) = 0;
              break;
            }
            v26 = v42[v27];
            if (!v26)
            {
              while (1)
              {
                v16 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_43;
                if (v16 >= v41)
                  goto LABEL_34;
                v26 = v42[v16];
                ++v27;
                if (v26)
                  goto LABEL_21;
              }
            }
            v16 = v27;
          }
        }
LABEL_21:
        v20 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v16 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v24);
      v29 = *(_QWORD *)(v43 + 72);
      v30 = *(_QWORD *)(v13 + 56) + v29 * v24;
      if ((v44 & 1) != 0)
        outlined init with take of Matrix2dPB(v30, (uint64_t)v12, a3);
      else
        outlined init with copy of TrackingUpdateDataPB(v30, (uint64_t)v12, a3);
      result = static Hasher._hash(seed:_:)();
      v31 = -1 << *(_BYTE *)(v15 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v21 + 8 * (v32 >> 6))) != 0)
      {
        v22 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v21 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v21 + 8 * v33);
        }
        while (v37 == -1);
        v22 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v21 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v22) = v28;
      result = outlined init with take of Matrix2dPB((uint64_t)v12, *(_QWORD *)(v15 + 56) + v29 * v22, a3);
      ++*(_QWORD *)(v15 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v7 = v15;
  return result;
}

{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;

  v7 = v4;
  v9 = a3(0);
  v43 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v39 - v11;
  v13 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v44 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v15 = result;
  if (*(_QWORD *)(v13 + 16))
  {
    v40 = v7;
    v16 = 0;
    v17 = *(_QWORD *)(v13 + 64);
    v42 = (_QWORD *)(v13 + 64);
    v18 = 1 << *(_BYTE *)(v13 + 32);
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v20 = v19 & v17;
    v41 = (unint64_t)(v18 + 63) >> 6;
    v21 = result + 64;
    while (1)
    {
      if (v20)
      {
        v23 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        v24 = v23 | (v16 << 6);
      }
      else
      {
        v25 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v42;
        if (v25 >= v41)
          goto LABEL_34;
        v26 = v42[v25];
        ++v16;
        if (!v26)
        {
          v16 = v25 + 1;
          if (v25 + 1 >= v41)
            goto LABEL_34;
          v26 = v42[v16];
          if (!v26)
          {
            v27 = v25 + 2;
            if (v27 >= v41)
            {
LABEL_34:
              if ((v44 & 1) == 0)
              {
                result = swift_release();
                v7 = v40;
                goto LABEL_41;
              }
              v38 = 1 << *(_BYTE *)(v13 + 32);
              if (v38 >= 64)
                bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v42 = -1 << v38;
              v7 = v40;
              *(_QWORD *)(v13 + 16) = 0;
              break;
            }
            v26 = v42[v27];
            if (!v26)
            {
              while (1)
              {
                v16 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_43;
                if (v16 >= v41)
                  goto LABEL_34;
                v26 = v42[v16];
                ++v27;
                if (v26)
                  goto LABEL_21;
              }
            }
            v16 = v27;
          }
        }
LABEL_21:
        v20 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v16 << 6);
      }
      v28 = *(unsigned int *)(*(_QWORD *)(v13 + 48) + 4 * v24);
      v29 = *(_QWORD *)(v43 + 72);
      v30 = *(_QWORD *)(v13 + 56) + v29 * v24;
      if ((v44 & 1) != 0)
        outlined init with take of Matrix2dPB(v30, (uint64_t)v12, a3);
      else
        outlined init with copy of TrackingUpdateDataPB(v30, (uint64_t)v12, a3);
      result = MEMORY[0x242637B88](*(_QWORD *)(v15 + 40), v28, 4);
      v31 = -1 << *(_BYTE *)(v15 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v21 + 8 * (v32 >> 6))) != 0)
      {
        v22 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v21 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v21 + 8 * v33);
        }
        while (v37 == -1);
        v22 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v21 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_DWORD *)(*(_QWORD *)(v15 + 48) + 4 * v22) = v28;
      result = outlined init with take of Matrix2dPB((uint64_t)v12, *(_QWORD *)(v15 + 56) + v29 * v22, a3);
      ++*(_QWORD *)(v15 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v7 = v15;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Bool, simd_float4x4>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v25 = __clz(__rbit64(v23));
    v12 = (v23 - 1) & v23;
    v15 = v25 + (v9 << 6);
LABEL_12:
    v16 = (__int128 *)(*(_QWORD *)(v2 + 56) + (v15 << 6));
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = v16[3];
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v21 = (_OWORD *)(*(_QWORD *)(v4 + 56) + (v15 << 6));
    *v21 = v17;
    v21[1] = v18;
    v21[2] = v19;
    v21[3] = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, ImageData>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v41 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v41 >= v13)
      goto LABEL_26;
    v42 = *(_QWORD *)(v6 + 8 * v41);
    ++v9;
    if (!v42)
    {
      v9 = v41 + 1;
      if (v41 + 1 >= v13)
        goto LABEL_26;
      v42 = *(_QWORD *)(v6 + 8 * v9);
      if (!v42)
        break;
    }
LABEL_25:
    v12 = (v42 - 1) & v42;
    v15 = __clz(__rbit64(v42)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = 192 * v15;
    v20 = (__int128 *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = v20[7];
    v23 = v20[4];
    v22 = v20[5];
    v50 = v20[6];
    v51 = v21;
    v48 = v23;
    v49 = v22;
    v24 = v20[11];
    v26 = v20[8];
    v25 = v20[9];
    v54 = v20[10];
    v55 = v24;
    v52 = v26;
    v53 = v25;
    v28 = *v20;
    v27 = v20[1];
    v29 = v20[3];
    v46 = v20[2];
    v47 = v29;
    v44 = v28;
    v45 = v27;
    v30 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v30 = v18;
    *(_BYTE *)(v30 + 8) = v17;
    v31 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v19);
    v32 = v44;
    v33 = v45;
    v34 = v47;
    v31[2] = v46;
    v31[3] = v34;
    *v31 = v32;
    v31[1] = v33;
    v35 = v48;
    v36 = v49;
    v37 = v51;
    v31[6] = v50;
    v31[7] = v37;
    v31[4] = v35;
    v31[5] = v36;
    v38 = v52;
    v39 = v53;
    v40 = v55;
    v31[10] = v54;
    v31[11] = v40;
    v31[8] = v38;
    v31[9] = v39;
    result = (void *)outlined retain of ImageData((uint64_t)&v44);
  }
  v43 = v41 + 2;
  if (v43 >= v13)
    goto LABEL_26;
  v42 = *(_QWORD *)(v6 + 8 * v43);
  if (v42)
  {
    v9 = v43;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v42 = *(_QWORD *)(v6 + 8 * v9);
    ++v43;
    if (v42)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, Int>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectInteractionResultsByHand.HandIdentifier, ObjectInteractionInfo>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v31 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v31);
    ++v9;
    if (!v32)
    {
      v9 = v31 + 1;
      if (v31 + 1 >= v13)
        goto LABEL_26;
      v32 = *(_QWORD *)(v6 + 8 * v9);
      if (!v32)
        break;
    }
LABEL_25:
    v34 = __clz(__rbit64(v32));
    v12 = (v32 - 1) & v32;
    v15 = v34 + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = 80 * v15;
    v20 = *(_QWORD *)(v2 + 56) + v19;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 16);
    v23 = *(_OWORD *)(v20 + 32);
    result = *(void **)(v20 + 48);
    v24 = *(_BYTE *)(v20 + 56);
    v25 = *(_BYTE *)(v20 + 68);
    v26 = *(_BYTE *)(v20 + 69);
    v27 = *(_QWORD *)(v4 + 48) + v16;
    v28 = *(_QWORD *)(v20 + 60);
    v29 = *(_QWORD *)(v20 + 8);
    *(_QWORD *)v27 = v18;
    *(_BYTE *)(v27 + 8) = v17;
    v30 = *(_QWORD *)(v4 + 56) + v19;
    *(_QWORD *)v30 = v21;
    *(_QWORD *)(v30 + 8) = v29;
    *(_QWORD *)(v30 + 16) = v22;
    *(_OWORD *)(v30 + 32) = v23;
    *(_QWORD *)(v30 + 48) = result;
    *(_BYTE *)(v30 + 56) = v24;
    *(_QWORD *)(v30 + 60) = v28;
    *(_BYTE *)(v30 + 68) = v25;
    *(_BYTE *)(v30 + 69) = v26;
  }
  v33 = v31 + 2;
  if (v33 >= v13)
    goto LABEL_26;
  v32 = *(_QWORD *)(v6 + 8 * v33);
  if (v32)
  {
    v9 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v9);
    ++v33;
    if (v32)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, WarperMeshCameraState>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v21 = v18;
    *(_BYTE *)(v21 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, [SIMD2<Float>]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, simd_float4x4>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v30 = __clz(__rbit64(v28));
    v12 = (v28 - 1) & v28;
    v15 = v30 + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = v15 << 6;
    v20 = (__int128 *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *v20;
    v22 = v20[1];
    v23 = v20[2];
    v24 = v20[3];
    v25 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v25 = v18;
    *(_BYTE *)(v25 + 8) = v17;
    v26 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v19);
    *v26 = v21;
    v26[1] = v22;
    v26[2] = v23;
    v26[3] = v24;
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ARVinoJointIndexes, [SIMD3<Float>]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<PoseDnnOutputLayer, IONamedSlice>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<PoseDnnInputLayer, IONamedSlice>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<PinchDnnOutputLayer, IONamedSlice>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<PinchDnnInputLayer, IONamedSlice>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, espresso_buffer_t>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 168 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v35 = *(_OWORD *)(v21 + 128);
    v36 = *(_OWORD *)(v21 + 144);
    v37 = *(_QWORD *)(v21 + 160);
    v31 = *(_OWORD *)(v21 + 64);
    v32 = *(_OWORD *)(v21 + 80);
    v33 = *(_OWORD *)(v21 + 96);
    v34 = *(_OWORD *)(v21 + 112);
    v27 = *(_OWORD *)v21;
    v28 = *(_OWORD *)(v21 + 16);
    v29 = *(_OWORD *)(v21 + 32);
    v30 = *(_OWORD *)(v21 + 48);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    v23 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)(v23 + 128) = v35;
    *(_OWORD *)(v23 + 144) = v36;
    *(_QWORD *)(v23 + 160) = v37;
    *(_OWORD *)(v23 + 64) = v31;
    *(_OWORD *)(v23 + 80) = v32;
    *(_OWORD *)(v23 + 96) = v33;
    *(_OWORD *)(v23 + 112) = v34;
    *(_OWORD *)v23 = v27;
    *(_OWORD *)(v23 + 16) = v28;
    *(_OWORD *)(v23 + 32) = v29;
    *(_OWORD *)(v23 + 48) = v30;
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int32, Float>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, InputPortInfo>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, OutputPortInfo>);
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for Matrix2dPB, &demangling cache variable for type metadata for _DictionaryStorage<Int32, Matrix2dPB>);
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for TrackingUpdateDataPB, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, TrackingUpdateDataPB>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, Int32>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 4 * v15;
    v19 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, PoseImageCrop>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v39 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v39 >= v13)
      goto LABEL_26;
    v40 = *(_QWORD *)(v6 + 8 * v39);
    ++v9;
    if (!v40)
    {
      v9 = v39 + 1;
      if (v39 + 1 >= v13)
        goto LABEL_26;
      v40 = *(_QWORD *)(v6 + 8 * v9);
      if (!v40)
        break;
    }
LABEL_25:
    v12 = (v40 - 1) & v40;
    v15 = __clz(__rbit64(v40)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = 176 * v15;
    v20 = (__int128 *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = v20[6];
    v23 = v20[3];
    v22 = v20[4];
    v47 = v20[5];
    v48 = v21;
    v45 = v23;
    v46 = v22;
    v25 = v20[8];
    v24 = v20[9];
    v26 = v20[7];
    *(_OWORD *)((char *)v51 + 9) = *(__int128 *)((char *)v20 + 153);
    v50 = v25;
    v51[0] = v24;
    v49 = v26;
    v28 = v20[1];
    v27 = v20[2];
    v42 = *v20;
    v43 = v28;
    v44 = v27;
    v29 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v29 = v18;
    *(_BYTE *)(v29 + 8) = v17;
    v30 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v19);
    v31 = v42;
    v32 = v44;
    v30[1] = v43;
    v30[2] = v32;
    *v30 = v31;
    v33 = v45;
    v34 = v46;
    v35 = v48;
    v30[5] = v47;
    v30[6] = v35;
    v30[3] = v33;
    v30[4] = v34;
    v36 = v49;
    v37 = v50;
    v38 = v51[0];
    *(_OWORD *)((char *)v30 + 153) = *(_OWORD *)((char *)v51 + 9);
    v30[8] = v37;
    v30[9] = v38;
    v30[7] = v36;
    result = (void *)outlined retain of PoseImageCrop((uint64_t)&v42);
  }
  v41 = v39 + 2;
  if (v41 >= v13)
    goto LABEL_26;
  v40 = *(_QWORD *)(v6 + 8 * v41);
  if (v40)
  {
    v9 = v41;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v40 = *(_QWORD *)(v6 + 8 * v9);
    ++v41;
    if (v40)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, Float>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<HandRejectionReason, UInt64>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Bool, [HandRejectionReason : UInt64]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<SignalStatistics.HandSignal, SignalStatistics>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<HandPresence.Category, UInt64>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, UInt64>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<StatisticUtils.Location3DBucket, UInt64>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v26 = __clz(__rbit64(v24));
    v12 = (v24 - 1) & v24;
    v15 = v26 + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v18 = *(_QWORD *)(v17 + 16);
    v19 = *(_BYTE *)(v17 + 24);
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    *(_OWORD *)v22 = *(_OWORD *)v17;
    *(_QWORD *)(v22 + 16) = v18;
    *(_BYTE *)(v22 + 24) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<StatisticUtils.CameraRegion, UInt64>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v25 = __clz(__rbit64(v23));
    v12 = (v23 - 1) & v23;
    v15 = v25 + (v9 << 6);
LABEL_12:
    v16 = 3 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 3 * v15;
    v18 = *(_WORD *)v17;
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    *(_BYTE *)(v21 + 2) = *(_BYTE *)(v17 + 2);
    *(_WORD *)v21 = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, [StatisticUtils.CameraRegion : UInt64]>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<HandPresence.Category, Float>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[25];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, DetectionResult>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v33 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v33 >= v13)
      goto LABEL_26;
    v34 = *(_QWORD *)(v6 + 8 * v33);
    ++v9;
    if (!v34)
    {
      v9 = v33 + 1;
      if (v33 + 1 >= v13)
        goto LABEL_26;
      v34 = *(_QWORD *)(v6 + 8 * v9);
      if (!v34)
        break;
    }
LABEL_25:
    v12 = (v34 - 1) & v34;
    v15 = __clz(__rbit64(v34)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = 112 * v15;
    v20 = (__int128 *)(*(_QWORD *)(v2 + 56) + v19);
    v22 = v20[4];
    v21 = v20[5];
    v23 = v20[3];
    *(_OWORD *)&v41[9] = *(__int128 *)((char *)v20 + 89);
    v40 = v22;
    *(_OWORD *)v41 = v21;
    v39 = v23;
    v25 = v20[1];
    v24 = v20[2];
    v36 = *v20;
    v37 = v25;
    v38 = v24;
    v26 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v26 = v18;
    *(_BYTE *)(v26 + 8) = v17;
    v27 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v19);
    v28 = v36;
    v29 = v38;
    v27[1] = v37;
    v27[2] = v29;
    *v27 = v28;
    v30 = v39;
    v31 = v40;
    v32 = *(_OWORD *)v41;
    *(_OWORD *)((char *)v27 + 89) = *(_OWORD *)&v41[9];
    v27[4] = v31;
    v27[5] = v32;
    v27[3] = v30;
    result = (void *)outlined retain of DetectionResult((uint64_t)&v36);
  }
  v35 = v33 + 2;
  if (v35 >= v13)
    goto LABEL_26;
  v34 = *(_QWORD *)(v6 + 8 * v35);
  if (v34)
  {
    v9 = v35;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v34 = *(_QWORD *)(v6 + 8 * v9);
    ++v35;
    if (v34)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for HandsKitDataPB, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, HandsKitDataPB>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  _QWORD __dst[70];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, HandsKitData>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v22 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 560 * v15;
    memcpy(__dst, (const void *)(*(_QWORD *)(v2 + 56) + 560 * v15), 0x228uLL);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    memcpy((void *)(*(_QWORD *)(v4 + 56) + v18), __dst, 0x228uLL);
    result = outlined retain of HandsKitData(__dst);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v22;
    goto LABEL_28;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CameraSource>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v2 + 56) + v16;
    v21 = *(_QWORD *)v20;
    LOBYTE(v20) = *(_BYTE *)(v20 + 8);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    v23 = *(_QWORD *)(v4 + 56) + v16;
    *(_QWORD *)v23 = v21;
    *(_BYTE *)(v23 + 8) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[336];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, (TrackingInfo, Int)>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 320 * v15;
    memcpy(v22, (const void *)(*(_QWORD *)(v2 + 56) + 320 * v15), 0x140uLL);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    memcpy((void *)(*(_QWORD *)(v4 + 56) + v18), v22, 0x140uLL);
    result = (void *)outlined retain of (TrackingInfo, Int)((uint64_t)v22);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, UInt64>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CameraSource : SIMD2<Float>]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, SIMD2<Float>>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v25 = __clz(__rbit64(v23));
    v12 = (v23 - 1) & v23;
    v15 = v25 + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v21 = v18;
    *(_BYTE *)(v21 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, Coordinate3D>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v26 = __clz(__rbit64(v24));
    v12 = (v24 - 1) & v24;
    v15 = v26 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    v19 = (__int128 *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v20;
    v22[1] = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CameraSource : [SIMD2<Float>]]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  char v23;
  int v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, TrackingUpdateData>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v35 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v35 >= v13)
      goto LABEL_26;
    v36 = *(_QWORD *)(v6 + 8 * v35);
    ++v9;
    if (!v36)
    {
      v9 = v35 + 1;
      if (v35 + 1 >= v13)
        goto LABEL_26;
      v36 = *(_QWORD *)(v6 + 8 * v9);
      if (!v36)
        break;
    }
LABEL_25:
    v12 = (v36 - 1) & v36;
    v15 = __clz(__rbit64(v36)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 96 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_BYTE *)(v19 + 32);
    v21 = *(_BYTE *)(v19 + 33);
    v22 = *(_DWORD *)(v19 + 36);
    v23 = *(_BYTE *)(v19 + 40);
    v24 = *(_DWORD *)(v19 + 44);
    v25 = *(_BYTE *)(v19 + 48);
    v26 = *(_QWORD *)(v19 + 56);
    v27 = *(_BYTE *)(v19 + 64);
    v28 = *(_BYTE *)(v19 + 65);
    v29 = *(_BYTE *)(v19 + 66);
    v30 = *(_OWORD *)(v19 + 80);
    v31 = *(_QWORD *)(v19 + 68);
    v32 = *(_OWORD *)v19;
    v33 = *(_OWORD *)(v19 + 16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v34 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v34 = v32;
    *(_OWORD *)(v34 + 16) = v33;
    *(_BYTE *)(v34 + 32) = v20;
    *(_BYTE *)(v34 + 33) = v21;
    *(_DWORD *)(v34 + 36) = v22;
    *(_BYTE *)(v34 + 40) = v23;
    *(_DWORD *)(v34 + 44) = v24;
    *(_BYTE *)(v34 + 48) = v25;
    *(_QWORD *)(v34 + 56) = v26;
    *(_BYTE *)(v34 + 64) = v27;
    *(_BYTE *)(v34 + 65) = v28;
    *(_BYTE *)(v34 + 66) = v29;
    *(_QWORD *)(v34 + 68) = v31;
    *(_OWORD *)(v34 + 80) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v37 = v35 + 2;
  if (v37 >= v13)
    goto LABEL_26;
  v36 = *(_QWORD *)(v6 + 8 * v37);
  if (v36)
  {
    v9 = v37;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v36 = *(_QWORD *)(v6 + 8 * v9);
    ++v37;
    if (v36)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, WristCounts>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, TwoHandOcclusionCoreAnalytics>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, FilterHandPipeline>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35, v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Logger>);
  v32 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = *(_QWORD *)(v5 + 16);
  v36 = v6;
  if (!v7)
  {
    result = (void *)swift_release();
    v30 = v36;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return result;
  }
  v8 = v6;
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    v8 = v36;
  }
  v33 = v5 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v13 + 63) >> 6;
  v16 = v35;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v26 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v34)
      goto LABEL_26;
    v27 = *(_QWORD *)(v33 + 8 * v26);
    ++v12;
    if (!v27)
    {
      v12 = v26 + 1;
      if (v26 + 1 >= v34)
        goto LABEL_26;
      v27 = *(_QWORD *)(v33 + 8 * v12);
      if (!v27)
        break;
    }
LABEL_25:
    v15 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v12 << 6);
LABEL_12:
    v19 = 16 * v18;
    v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v22 = *v20;
    v21 = v20[1];
    v23 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v4, *(_QWORD *)(v5 + 56) + v23, v16);
    v24 = v36;
    v25 = (_QWORD *)(*(_QWORD *)(v36 + 48) + v19);
    *v25 = v22;
    v25[1] = v21;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v24 + 56) + v23, v4, v16);
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_26:
    result = (void *)swift_release();
    v29 = v32;
    v30 = v36;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v33 + 8 * v28);
  if (v27)
  {
    v12 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v12 >= v34)
      goto LABEL_26;
    v27 = *(_QWORD *)(v33 + 8 * v12);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(type metadata accessor for ImageCalibrationDataPB, &demangling cache variable for type metadata for _DictionaryStorage<Int32, ImageCalibrationDataPB>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int64, SIMD3<Float>>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CameraSource : Float]>);
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, IOSurfaceRef>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(void **)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, CVBufferRef>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v21 = v18;
    *(_BYTE *)(v21 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<JpegDecoder.InputMetaKey, VTDecompressionSessionRef>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<JpegDecoder.InputMetaKey, CVPixelBufferPoolRef>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<JpegEncoder.JpegRes, VTCompressionSessionRef>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, EstimatedBoundingBox>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (char *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (char *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = (char *)memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v31 = __clz(__rbit64(v29));
    v12 = (v29 - 1) & v29;
    v15 = v31 + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 16 * v15;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = 40 * v15;
    v20 = *(_QWORD *)(v2 + 56) + v19;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_BYTE *)(v20 + 24);
    result = *(char **)(v4 + 48);
    v25 = &result[v16];
    v26 = *(_QWORD *)(v20 + 28);
    *(_QWORD *)v25 = v18;
    v25[8] = v17;
    v27 = *(_QWORD *)(v4 + 56) + v19;
    *(_QWORD *)v27 = v21;
    *(_QWORD *)(v27 + 8) = v22;
    *(_QWORD *)(v27 + 16) = v23;
    *(_BYTE *)(v27 + 24) = v24;
    *(_QWORD *)(v27 + 28) = v26;
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_26;
      v19 = *(_QWORD *)(v7 + 8 * v10);
      if (!v19)
        break;
    }
LABEL_25:
    v13 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v14)
    goto LABEL_26;
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v26 = __clz(__rbit64(v24));
    v13 = (v24 - 1) & v24;
    v16 = v26 + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = *(_QWORD *)(v3 + 48) + 16 * v16;
    v19 = *(_QWORD *)v18;
    LOBYTE(v18) = *(_BYTE *)(v18 + 8);
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = *(_QWORD *)(v5 + 48) + v17;
    *(_QWORD *)v22 = v19;
    *(_BYTE *)(v22 + 8) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = *(_QWORD *)(v3 + 48) + 16 * v16;
    v19 = *(_QWORD *)v18;
    LOBYTE(v18) = *(_BYTE *)(v18 + 8);
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = *(_QWORD *)(v5 + 48) + v17;
    *(_QWORD *)v22 = v19;
    *(_BYTE *)(v22 + 8) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v26 = __clz(__rbit64(v24));
    v13 = (v24 - 1) & v24;
    v16 = v26 + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = *(_QWORD *)(v3 + 48) + 16 * v16;
    v19 = *(_QWORD *)v18;
    LOBYTE(v18) = *(_BYTE *)(v18 + 8);
    v20 = 4 * v16;
    v21 = *(_DWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = *(_QWORD *)(v5 + 48) + v17;
    *(_QWORD *)v22 = v19;
    *(_BYTE *)(v22 + 8) = v18;
    *(_DWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v22 = __clz(__rbit64(v20));
    v13 = (v20 - 1) & v20;
    v16 = v22 + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    result = (void *)swift_retain();
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, ValueStatistics<Double>>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = swift_release();
    *v1 = v4;
    return result;
  }
  result = v3 + 64;
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || result >= v2 + 64 + 8 * v7)
    result = (unint64_t)memmove((void *)result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v32 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v32 >= v13)
      goto LABEL_26;
    v33 = *(_QWORD *)(v6 + 8 * v32);
    ++v9;
    if (!v33)
    {
      v9 = v32 + 1;
      if (v32 + 1 >= v13)
        goto LABEL_26;
      v33 = *(_QWORD *)(v6 + 8 * v9);
      if (!v33)
        break;
    }
LABEL_25:
    v35 = __clz(__rbit64(v33));
    v12 = (v33 - 1) & v33;
    v15 = v35 + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 104 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_DWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    result = *(unsigned __int8 *)(v19 + 24);
    v23 = *(_QWORD *)(v19 + 32);
    v24 = *(_BYTE *)(v19 + 40);
    v25 = *(_QWORD *)(v19 + 48);
    v26 = *(_BYTE *)(v19 + 56);
    v27 = *(_QWORD *)(v19 + 64);
    v28 = *(_BYTE *)(v19 + 72);
    v29 = *(_QWORD *)(v19 + 80);
    v30 = *(_QWORD *)(v19 + 88);
    LOBYTE(v19) = *(_BYTE *)(v19 + 96);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v31 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v31 = v20;
    *(_DWORD *)(v31 + 8) = v21;
    *(_QWORD *)(v31 + 16) = v22;
    *(_BYTE *)(v31 + 24) = result;
    *(_QWORD *)(v31 + 32) = v23;
    *(_BYTE *)(v31 + 40) = v24;
    *(_QWORD *)(v31 + 48) = v25;
    *(_BYTE *)(v31 + 56) = v26;
    *(_QWORD *)(v31 + 64) = v27;
    *(_BYTE *)(v31 + 72) = v28;
    *(_QWORD *)(v31 + 80) = v29;
    *(_QWORD *)(v31 + 88) = v30;
    *(_BYTE *)(v31 + 96) = v19;
  }
  v34 = v32 + 2;
  if (v34 >= v13)
    goto LABEL_26;
  v33 = *(_QWORD *)(v6 + 8 * v34);
  if (v33)
  {
    v9 = v34;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v33 = *(_QWORD *)(v6 + 8 * v9);
    ++v34;
    if (v33)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  int v20;
  char v21;
  int v22;
  char v23;
  char v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ARVinoJointIndexes, ValueStatistics<Float>>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = swift_release();
    *v1 = v4;
    return result;
  }
  result = v3 + 64;
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || result >= v2 + 64 + 8 * v7)
    result = (unint64_t)memmove((void *)result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v32 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v32 >= v13)
      goto LABEL_26;
    v33 = *(_QWORD *)(v6 + 8 * v32);
    ++v9;
    if (!v33)
    {
      v9 = v32 + 1;
      if (v32 + 1 >= v13)
        goto LABEL_26;
      v33 = *(_QWORD *)(v6 + 8 * v9);
      if (!v33)
        break;
    }
LABEL_25:
    v35 = __clz(__rbit64(v33));
    v12 = (v33 - 1) & v33;
    v15 = v35 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = v15 << 6;
    v19 = (int *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = *((_BYTE *)v19 + 12);
    v22 = v19[4];
    v23 = *((_BYTE *)v19 + 20);
    result = v19[6];
    v24 = *((_BYTE *)v19 + 28);
    v25 = v19[8];
    v26 = *((_BYTE *)v19 + 36);
    v27 = *((_QWORD *)v19 + 5);
    v28 = *((_QWORD *)v19 + 6);
    v29 = *((_BYTE *)v19 + 56);
    v30 = *(_QWORD *)(v19 + 1);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v31 = *(_QWORD *)(v4 + 56) + v18;
    *(_DWORD *)v31 = v20;
    *(_QWORD *)(v31 + 4) = v30;
    *(_BYTE *)(v31 + 12) = v21;
    *(_DWORD *)(v31 + 16) = v22;
    *(_BYTE *)(v31 + 20) = v23;
    *(_DWORD *)(v31 + 24) = result;
    *(_BYTE *)(v31 + 28) = v24;
    *(_DWORD *)(v31 + 32) = v25;
    *(_BYTE *)(v31 + 36) = v26;
    *(_QWORD *)(v31 + 40) = v27;
    *(_QWORD *)(v31 + 48) = v28;
    *(_BYTE *)(v31 + 56) = v29;
  }
  v34 = v32 + 2;
  if (v34 >= v13)
    goto LABEL_26;
  v33 = *(_QWORD *)(v6 + 8 * v34);
  if (v33)
  {
    v9 = v34;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v33 = *(_QWORD *)(v6 + 8 * v9);
    ++v34;
    if (v33)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = v2;
  v6 = a1(0);
  v32 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v29 - v8;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = *v2;
  v11 = static _DictionaryStorage.copy(original:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v5 = v12;
    return result;
  }
  v30 = v5;
  result = (void *)(v11 + 64);
  v14 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v14)
    result = memmove(result, (const void *)(v10 + 64), 8 * v14);
  v31 = v10 + 64;
  v16 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v17 = 1 << *(_BYTE *)(v10 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v10 + 64);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v26 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v20)
      goto LABEL_26;
    v27 = *(_QWORD *)(v31 + 8 * v26);
    ++v16;
    if (!v27)
    {
      v16 = v26 + 1;
      if (v26 + 1 >= v20)
        goto LABEL_26;
      v27 = *(_QWORD *)(v31 + 8 * v16);
      if (!v27)
        break;
    }
LABEL_25:
    v19 = (v27 - 1) & v27;
    v22 = __clz(__rbit64(v27)) + (v16 << 6);
LABEL_12:
    v23 = 8 * v22;
    v24 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v22);
    v25 = *(_QWORD *)(v32 + 72) * v22;
    outlined init with copy of TrackingUpdateDataPB(*(_QWORD *)(v10 + 56) + v25, (uint64_t)v9, a1);
    *(_QWORD *)(*(_QWORD *)(v12 + 48) + v23) = v24;
    result = (void *)outlined init with take of Matrix2dPB((uint64_t)v9, *(_QWORD *)(v12 + 56) + v25, a1);
  }
  v28 = v26 + 2;
  if (v28 >= v20)
  {
LABEL_26:
    result = (void *)swift_release();
    v5 = v30;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v31 + 8 * v28);
  if (v27)
  {
    v16 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v16 >= v20)
      goto LABEL_26;
    v27 = *(_QWORD *)(v31 + 8 * v16);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = v2;
  v6 = a1(0);
  v32 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v29 - v8;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = *v2;
  v11 = static _DictionaryStorage.copy(original:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v5 = v12;
    return result;
  }
  v30 = v5;
  result = (void *)(v11 + 64);
  v14 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v14)
    result = memmove(result, (const void *)(v10 + 64), 8 * v14);
  v31 = v10 + 64;
  v16 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v17 = 1 << *(_BYTE *)(v10 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v10 + 64);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v26 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v20)
      goto LABEL_26;
    v27 = *(_QWORD *)(v31 + 8 * v26);
    ++v16;
    if (!v27)
    {
      v16 = v26 + 1;
      if (v26 + 1 >= v20)
        goto LABEL_26;
      v27 = *(_QWORD *)(v31 + 8 * v16);
      if (!v27)
        break;
    }
LABEL_25:
    v19 = (v27 - 1) & v27;
    v22 = __clz(__rbit64(v27)) + (v16 << 6);
LABEL_12:
    v23 = 4 * v22;
    v24 = *(_DWORD *)(*(_QWORD *)(v10 + 48) + 4 * v22);
    v25 = *(_QWORD *)(v32 + 72) * v22;
    outlined init with copy of TrackingUpdateDataPB(*(_QWORD *)(v10 + 56) + v25, (uint64_t)v9, a1);
    *(_DWORD *)(*(_QWORD *)(v12 + 48) + v23) = v24;
    result = (void *)outlined init with take of Matrix2dPB((uint64_t)v9, *(_QWORD *)(v12 + 56) + v25, a1);
  }
  v28 = v26 + 2;
  if (v28 >= v20)
  {
LABEL_26:
    result = (void *)swift_release();
    v5 = v30;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v31 + 8 * v28);
  if (v27)
  {
    v16 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v16 >= v20)
      goto LABEL_26;
    v27 = *(_QWORD *)(v31 + 8 * v16);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 12 * v16;
    v18 = *(_QWORD *)(v3 + 48) + 12 * v16;
    v19 = 8 * v16;
    v20 = *(void **)(*(_QWORD *)(v3 + 56) + v19);
    v21 = *(_QWORD *)(v5 + 48) + v17;
    v22 = *(_QWORD *)(v18 + 4);
    *(_BYTE *)v21 = *(_BYTE *)v18;
    *(_QWORD *)(v21 + 4) = v22;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v19) = v20;
    result = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x242637918);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  Swift::UInt v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ARVinoJointIndexes, [SIMD3<Float>]>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v5 = a1[4];
  v4 = a1[5];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v5;
    *(_QWORD *)(v3[7] + v9) = v4;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      break;
    v3[2] = v12;
    if (!--v1)
      goto LABEL_8;
    v13 = v8 + 2;
    v5 = *(v8 - 1);
    v14 = *v8;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    v8 = v13;
    v4 = v14;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, TwoHandOcclusionCoreAnalytics>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, FilterHandPipeline>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CameraSource : SIMD2<Float>]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CameraSource : Float]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, [CameraSource : [SIMD2<Float>]]>);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;

  v27 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    v13 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v14 = (uint64_t)v11 + *(int *)(v7 + 48);
    v15 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v16 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      outlined init with copy of (Int32, Matrix2dPB)(v15, (uint64_t)v11, v27);
      v17 = *v11;
      result = specialized __RawDictionaryStorage.find<A>(_:)(*v11);
      if ((v19 & 1) != 0)
        break;
      v20 = result;
      *(_QWORD *)((char *)v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v13[6] + 8 * result) = v17;
      v21 = v13[7];
      v22 = a4(0);
      result = outlined init with take of Matrix2dPB(v14, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v20, a4);
      v23 = v13[2];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (v24)
        goto LABEL_10;
      v13[2] = v25;
      v15 += v16;
      if (!--v12)
        return (unint64_t)v13;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t result;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;

  v27 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (unsigned int *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    v13 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v14 = (uint64_t)v11 + *(int *)(v7 + 48);
    v15 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v16 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      outlined init with copy of (Int32, Matrix2dPB)(v15, (uint64_t)v11, v27);
      v17 = *v11;
      result = specialized __RawDictionaryStorage.find<A>(_:)(*v11);
      if ((v19 & 1) != 0)
        break;
      v20 = result;
      *(_QWORD *)((char *)v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v13[6] + 4 * result) = v17;
      v21 = v13[7];
      v22 = a4(0);
      result = outlined init with take of Matrix2dPB(v14, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v20, a4);
      v23 = v13[2];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (v24)
        goto LABEL_10;
      v13[2] = v25;
      v15 += v16;
      if (!--v12)
        return (unint64_t)v13;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

_QWORD *specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char *v7;
  _QWORD *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  uint64_t v13[72];

  v1 = a1[2];
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, HandsKitData>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  memcpy(v13, a1 + 4, 0x238uLL);
  v4 = v13[0];
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(v13[0]);
  if ((v6 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v7 = (char *)(a1 + 76);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v5;
    *(_QWORD *)(v3[6] + 8 * v5) = v4;
    result = memcpy((void *)(v3[7] + 560 * v5), &v13[2], 0x228uLL);
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    outlined retain of (UInt64, HandsKitData)(v13);
    if (!--v1)
      return v3;
    memcpy(v13, v7, 0x238uLL);
    v4 = v13[0];
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(v13[0]);
    v7 += 576;
    if ((v12 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v2 = a1[2];
  if (!v2)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v6 = a1[4];
  v5 = a1[5];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v4;
  }
  v9 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v4[6] + v10) = v6;
    *(_QWORD *)(v4[7] + v10) = v5;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v4[2] = v13;
    if (!--v2)
      goto LABEL_8;
    v14 = v9 + 2;
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v2 = a1[2];
  if (!v2)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v6 = a1[4];
  v5 = a1[5];
  result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v4;
  }
  v9 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v4[6] + v10) = v6;
    *(_QWORD *)(v4[7] + v10) = v5;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v4[2] = v13;
    if (!--v2)
      goto LABEL_8;
    v14 = v9 + 2;
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t method lookup function for WarperMeshGenerator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WarperMeshGenerator.__allocating_init(imageWidth:imageHeight:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t dispatch thunk of WarperMeshGenerator.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of WarperMeshGenerator.isSizeMatch(warperMeshWidth:warperMeshHeight:gridSize:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of WarperMeshGenerator.getIOSurfaces()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of WarperMeshGenerator.createWarperMesh(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of WarperMeshGenerator.createNoopCoverGlassBin(gridSize:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of WarperMeshGenerator.getNoopCoverGlassBin(gridSize:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of WarperMeshGenerator.getNoopCoverGlassMesh(gridSize:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of WarperMeshGenerator.getWarperMeshSplit(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type HandPresence.Category and conformance HandPresence.Category()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandPresence.Category and conformance HandPresence.Category;
  if (!lazy protocol witness table cache variable for type HandPresence.Category and conformance HandPresence.Category)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandPresence.Category, &type metadata for HandPresence.Category);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandPresence.Category and conformance HandPresence.Category);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandPresence.Category and conformance HandPresence.Category;
  if (!lazy protocol witness table cache variable for type HandPresence.Category and conformance HandPresence.Category)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandPresence.Category, &type metadata for HandPresence.Category);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandPresence.Category and conformance HandPresence.Category);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandPresence.Category and conformance HandPresence.Category;
  if (!lazy protocol witness table cache variable for type HandPresence.Category and conformance HandPresence.Category)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandPresence.Category, &type metadata for HandPresence.Category);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandPresence.Category and conformance HandPresence.Category);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandPresence.Category and conformance HandPresence.Category;
  if (!lazy protocol witness table cache variable for type HandPresence.Category and conformance HandPresence.Category)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandPresence.Category, &type metadata for HandPresence.Category);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandPresence.Category and conformance HandPresence.Category);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CameraSource and conformance CameraSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraSource and conformance CameraSource;
  if (!lazy protocol witness table cache variable for type CameraSource and conformance CameraSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraSource, &type metadata for CameraSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraSource and conformance CameraSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraSource and conformance CameraSource;
  if (!lazy protocol witness table cache variable for type CameraSource and conformance CameraSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraSource, &type metadata for CameraSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraSource and conformance CameraSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraSource and conformance CameraSource;
  if (!lazy protocol witness table cache variable for type CameraSource and conformance CameraSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraSource, &type metadata for CameraSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraSource and conformance CameraSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraSource and conformance CameraSource;
  if (!lazy protocol witness table cache variable for type CameraSource and conformance CameraSource)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CameraSource, &type metadata for CameraSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraSource and conformance CameraSource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HandRejectionReason and conformance HandRejectionReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandRejectionReason and conformance HandRejectionReason;
  if (!lazy protocol witness table cache variable for type HandRejectionReason and conformance HandRejectionReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandRejectionReason, &type metadata for HandRejectionReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandRejectionReason and conformance HandRejectionReason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandRejectionReason and conformance HandRejectionReason;
  if (!lazy protocol witness table cache variable for type HandRejectionReason and conformance HandRejectionReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandRejectionReason, &type metadata for HandRejectionReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandRejectionReason and conformance HandRejectionReason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandRejectionReason and conformance HandRejectionReason;
  if (!lazy protocol witness table cache variable for type HandRejectionReason and conformance HandRejectionReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandRejectionReason, &type metadata for HandRejectionReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandRejectionReason and conformance HandRejectionReason);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HandRejectionReason and conformance HandRejectionReason;
  if (!lazy protocol witness table cache variable for type HandRejectionReason and conformance HandRejectionReason)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for HandRejectionReason, &type metadata for HandRejectionReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HandRejectionReason and conformance HandRejectionReason);
  }
  return result;
}

uint64_t outlined retain of (TrackingInfo, Int)(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined retain of (String, espresso_buffer_t)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with take of PinchCancellationModule(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined retain of DetectionResult(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type PinchAcceptorID and conformance PinchAcceptorID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchAcceptorID and conformance PinchAcceptorID;
  if (!lazy protocol witness table cache variable for type PinchAcceptorID and conformance PinchAcceptorID)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchAcceptorID, &type metadata for PinchAcceptorID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchAcceptorID and conformance PinchAcceptorID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchAcceptorID and conformance PinchAcceptorID;
  if (!lazy protocol witness table cache variable for type PinchAcceptorID and conformance PinchAcceptorID)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchAcceptorID, &type metadata for PinchAcceptorID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchAcceptorID and conformance PinchAcceptorID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchAcceptorID and conformance PinchAcceptorID;
  if (!lazy protocol witness table cache variable for type PinchAcceptorID and conformance PinchAcceptorID)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchAcceptorID, &type metadata for PinchAcceptorID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchAcceptorID and conformance PinchAcceptorID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PinchAcceptorID and conformance PinchAcceptorID;
  if (!lazy protocol witness table cache variable for type PinchAcceptorID and conformance PinchAcceptorID)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PinchAcceptorID, &type metadata for PinchAcceptorID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PinchAcceptorID and conformance PinchAcceptorID);
  }
  return result;
}

uint64_t outlined retain of (CameraSource, CalibrationDataCache.CameraCalibrationInputs)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t outlined retain of (CameraSource, PoseImageCrop)(uint64_t a1)
{
  outlined copy of Data?(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168));
  return a1;
}

uint64_t outlined retain of (CameraSource, DetectionResult)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *outlined retain of HandsKitData(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v6 = a1[63];
  v7 = a1[62];
  v4 = a1[65];
  v5 = a1[64];
  swift_bridgeObjectRetain();
  outlined copy of HandsKitDataInternal?(v2);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of ObjectInteractionResultsByHand?(v7, v6, v5, v4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of HandsKitDataInternal?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of ObjectInteractionResultsByHand?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

_QWORD *outlined retain of (UInt64, HandsKitData)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[3];
  v6 = a1[65];
  v7 = a1[64];
  v4 = a1[67];
  v5 = a1[66];
  swift_bridgeObjectRetain();
  outlined copy of HandsKitDataInternal?(v2);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of ObjectInteractionResultsByHand?(v7, v6, v5, v4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with copy of TrackingUpdateDataPB(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of Matrix2dPB(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_QWORD *outlined retain of (CameraSource, ImageData)(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  id v9;

  v2 = (void *)a1[2];
  v3 = (void *)a1[9];
  v4 = a1[15];
  v5 = a1[16];
  v6 = a1[17];
  v7 = a1[18];
  swift_bridgeObjectRetain();
  v8 = v2;
  v9 = v3;
  swift_retain();
  outlined copy of Data?(v4, v5);
  outlined copy of Data?(v6, v7);
  return a1;
}

uint64_t _sSo11CFStringRefaABSHSCWlTm_0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CFStringRef(255);
    result = MEMORY[0x242638C74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of (Int32, Matrix2dPB)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for NSDictionary(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 != 0;
  if ((a2 & 1) == 0)
    v4 = a1;
  v5 = a3 != 0;
  if ((a4 & 1) == 0)
    v5 = a3;
  return v4 == v5;
}

{
  if ((a2 & 1) != 0)
    a1 = qword_23D9A7140[a1];
  if ((a4 & 1) != 0)
    a3 = qword_23D9A7140[a3];
  return a1 == a3;
}

{
  if ((a2 & 1) != 0)
    a1 = qword_23D9A7230[a1];
  if ((a4 & 1) != 0)
    a3 = qword_23D9A7230[a3];
  return a1 == a3;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  char v2;

  if (a1 == a2)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7972616E6962;
  else
    v3 = 1852797802;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7972616E6962;
  else
    v5 = 1852797802;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7468676972;
  else
    v3 = 1952867692;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7468676972;
  else
    v5 = 1952867692;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x7265776F6CLL;
  else
    v2 = 0x7265707075;
  if ((a2 & 1) != 0)
    v3 = 0x7265776F6CLL;
  else
    v3 = 0x7265707075;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x4C41435359415247;
  else
    v3 = 4343634;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE900000000000045;
  if ((a2 & 1) != 0)
    v5 = 0x4C41435359415247;
  else
    v5 = 4343634;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000045;
  else
    v6 = 0xE300000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X11 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X9 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_23D6D2180(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23D6D2234 + 4 * byte_23D9A70B6[a2]))(0x726968635F736D6ELL);
}

uint64_t sub_23D6D2234(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x726968635F736D6ELL && v1 == 0xEF73656974696C61)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23D6D2394(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23D6D2410 + 4 * byte_23D9A70C0[a2]))(0x747065645F736D6ELL);
}

uint64_t sub_23D6D2410(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x747065645F736D6ELL && v1 == 0xED00006F76755F68)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)()
{
  void *v0;
  void *v1;
  char v2;

  type metadata accessor for NSString();
  v0 = (void *)NSString.init(stringLiteral:)();
  v1 = (void *)NSString.init(stringLiteral:)();
  v2 = static NSObject.== infix(_:_:)();

  return v2 & 1;
}

uint64_t sub_23D6D2634(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23D6D2694 + 4 * byte_23D9A70C8[a2]))(0x6552657275736E75);
}

uint64_t sub_23D6D2694(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x6552657275736E75 && v2 == v1)
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_23D6D2804(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23D6D2880 + 4 * byte_23D9A70D1[a2]))(808989233);
}

uint64_t sub_23D6D2880(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 808989233 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1735289202;
    else
      v3 = 0x6E696772616DLL;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE600000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1735289202;
      else
        v6 = 0x6E696772616DLL;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE600000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x7265746E6563;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x7265746E6563)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23D6D2C54(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23D6D2CB4 + 4 * byte_23D9A70DA[a2]))(0x6564696365646E55);
}

uint64_t sub_23D6D2CB4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6564696365646E55 && v1 == 0xE900000000000064)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23D6D2DBC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23D6D2E0C + 4 * byte_23D9A70E2[a2]))(0x73726568744FLL);
}

uint64_t sub_23D6D2E0C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x73726568744FLL && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

uint64_t sub_23D6D2F14(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23D6D301C + 4 * byte_23D9A70F1[a2]))(0xD000000000000013);
}

uint64_t sub_23D6D301C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000013 && v1 == 0x800000023D9C3DE0)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23D6D31AC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23D6D3220 + 4 * byte_23D9A7100[a2]))(0x6F6973756C63636FLL);
}

uint64_t sub_23D6D3220(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F6973756C63636FLL && v1 == 0xE90000000000006ELL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t static HandsPlaybackUtil.loadHandsKitDataFromData(filePath:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _BYTE v26[560];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[576];

  v25 = a1;
  v1 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v1, v2);
  v24 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for HandsKitDataPB(0);
  v6 = MEMORY[0x24BDAC7A8](v4, v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6, v9);
  v11 = (char *)&v22 - v10;
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(fileURLWithPath:)();
  v17 = Data.init(contentsOf:options:)();
  v19 = v18;
  v23 = v8;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  outlined copy of Data._Representation(v17, v19);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type HandsKitDataPB and conformance HandsKitDataPB, type metadata accessor for HandsKitDataPB, (uint64_t)&protocol conformance descriptor for HandsKitDataPB);
  Message.init(serializedData:extensions:partial:options:)();
  v20 = (uint64_t)v23;
  outlined init with copy of HandsKitDataPB((uint64_t)v11, (uint64_t)v23);
  HandsKitData.init(protoBuf:)(v20, v26);
  outlined consume of Data._Representation(v17, v19);
  outlined destroy of HandsKitDataPB((uint64_t)v11);
  memcpy(v30, v26, 0x228uLL);
  _s5Hands13PoseImageCropVSgWOi_(v30);
  return outlined init with take of HandsKitData?((uint64_t)v30, v25);
}

id static HandsPlaybackUtil.getAllVdatFilesFromPath(path:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t *i;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  Swift::String v22;
  char v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33[2];

  v33[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for URL();
  v32 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v9 = (void *)MEMORY[0x2426372E8](a1, a2);
  v33[0] = 0;
  v10 = objc_msgSend(v8, sel_contentsOfDirectoryAtPath_error_, v9, v33);

  v11 = v33[0];
  if (v10)
  {
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v11;

    swift_bridgeObjectRetain();
    v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg575_s5Hands0A12PlaybackUtilC23getAllVdatFilesFromPath4pathSaySSGSS_tFZS2SXEfU_SSTf1cn_nTf4ng_n(v12, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33[0] = (id)MEMORY[0x24BEE4AF8];
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = (void *)objc_opt_self();
      v31 = v14;
      for (i = (uint64_t *)(v14 + 40); ; i += 2)
      {
        v19 = *(i - 1);
        v18 = *i;
        swift_bridgeObjectRetain();
        v20 = (void *)MEMORY[0x2426372E8](v19, v18);
        v21 = objc_msgSend(v16, sel_fileURLWithPath_, v20, v31);

        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        URL.pathExtension.getter();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v4);
        v22 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v22._countAndFlagsBits == 1952539766 && v22._object == (void *)0xE400000000000000)
          break;
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v23 & 1) != 0)
          goto LABEL_10;
        swift_bridgeObjectRelease();
LABEL_5:
        if (!--v15)
        {
          swift_bridgeObjectRelease();
          return v33[0];
        }
      }
      swift_bridgeObjectRelease();
LABEL_10:
      v24 = v33[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1);
        v24 = v33[0];
      }
      v26 = v24[2];
      v25 = v24[3];
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v24 = v33[0];
      }
      v24[2] = v26 + 1;
      v27 = (char *)&v24[2 * v26];
      *((_QWORD *)v27 + 4) = v19;
      *((_QWORD *)v27 + 5) = v18;
      goto LABEL_5;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = v33[0];
    v30 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return (id)MEMORY[0x24BEE4AF8];
}

CVPixelBufferRef static HandsPlaybackUtil.createPixelBufferPNG(imageFilePath:source:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v5;
  id v6;
  void *v7;
  const __CFData *v8;
  CGDataProviderRef v9;
  CGDataProvider *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGImage *v22;
  size_t Height;
  uint64_t inited;
  void **v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  void **v35;
  void *v36;
  id v37;
  NSDictionary v38;
  OSType v39;
  CVReturn v40;
  CVPixelBufferRef v41;
  id v42;
  __CVBuffer *v43;
  id v44;
  id v45;
  Swift::String v46;
  char v47;
  size_t width;
  _QWORD v50[4];
  CVPixelBufferRef pixelBufferOut[3];

  pixelBufferOut[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  v5 = *a3;
  CACurrentMediaTime();
  v6 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
  swift_bridgeObjectRetain();
  v7 = (void *)MEMORY[0x2426372E8](a1, a2);
  swift_bridgeObjectRelease();
  v8 = (const __CFData *)objc_msgSend(v6, sel_initWithContentsOfFile_, v7);

  if (!v8)
    return 0;
  v9 = CGDataProviderCreateWithCFData(v8);
  if (!v9)
  {

    return 0;
  }
  v10 = v9;
  v11 = (void *)MEMORY[0x2426372E8](a1, a2);
  v12 = objc_msgSend(v11, sel_pathExtension);

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;

  if (v13 == 6778480 && v15 == 0xE300000000000000)
    goto LABEL_8;
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
    goto LABEL_9;
  v17 = (void *)MEMORY[0x2426372E8](a1, a2);
  v18 = objc_msgSend(v17, sel_pathExtension);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  if (v19 == 4673104 && v21 == 0xE300000000000000)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v47 & 1) != 0)
  {
LABEL_9:
    v22 = CGImageCreateWithPNGDataProvider(v10, 0, 0, kCGRenderingIntentDefault);
    if (v22)
      goto LABEL_10;
LABEL_20:

    return 0;
  }
  v22 = CGImageCreateWithJPEGDataProvider(v10, 0, 0, kCGRenderingIntentDefault);
  if (!v22)
    goto LABEL_20;
LABEL_10:
  width = CGImageGetWidth(v22);
  Height = CGImageGetHeight(v22);
  pixelBufferOut[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  inited = swift_initStackObject();
  v25 = (void **)MEMORY[0x24BDC5690];
  *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
  v26 = *v25;
  *(_QWORD *)(inited + 32) = v26;
  v27 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 40) = 1;
  v28 = (void *)*MEMORY[0x24BDC55E8];
  *(_QWORD *)(inited + 64) = v27;
  *(_QWORD *)(inited + 72) = v28;
  *(_BYTE *)(inited + 80) = 1;
  v29 = (void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)(inited + 104) = v27;
  *(_QWORD *)(inited + 112) = v29;
  v30 = v26;
  v31 = v28;
  v32 = v29;
  v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  v35 = (void **)MEMORY[0x24BDC55E0];
  *(_QWORD *)(inited + 120) = v33;
  v36 = *v35;
  *(_QWORD *)(inited + 144) = v34;
  *(_QWORD *)(inited + 152) = v36;
  *(_QWORD *)(inited + 184) = v27;
  *(_BYTE *)(inited + 160) = 1;
  v37 = v36;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v38.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (v5 >= 2)
    v39 = 1278226488;
  else
    v39 = 875704422;
  v40 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], width, Height, v39, v38.super.isa, pixelBufferOut);
  v41 = pixelBufferOut[0];
  if (v40 || !pixelBufferOut[0])
  {

    return 0;
  }
  v42 = objc_allocWithZone(MEMORY[0x24BDBF648]);
  v43 = v41;
  v44 = objc_msgSend(v42, sel_init);
  v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBF660]), sel_initWithCGImage_, v22);
  objc_msgSend(v44, sel_render_toCVPixelBuffer_, v45, v43);
  CACurrentMediaTime();
  v50[0] = 0;
  v50[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v46._object = (void *)0x800000023D9C4750;
  v46._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v46);
  Double.write<A>(to:)();
  v50[3] = MEMORY[0x24BEE0D00];
  specialized static HLog.I(file:function:line:_:_:)(0xD000000000000052, 0x800000023D9C46B0, 69, (uint64_t)v50, MEMORY[0x24BEE4AF8]);

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v50);
  return v41;
}

id HandsPlaybackUtil.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HandsPlaybackUtil.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandsPlaybackUtil();
  return objc_msgSendSuper2(&v2, sel_init);
}

id HandsPlaybackUtil.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandsPlaybackUtil();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>, &demangling cache variable for type metadata for [Float]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionSpecItem>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RejectedHand>, (uint64_t (*)(_QWORD))type metadata accessor for RejectedHand);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandDescriptor>, (uint64_t (*)(_QWORD))type metadata accessor for HandDescriptor);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizerPB>, type metadata accessor for LocalizerPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CropBoxPB>, type metadata accessor for CropBoxPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Coordinate2DPB>, type metadata accessor for Coordinate2DPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Matrix2dPB.FloatVectorPB>, type metadata accessor for Matrix2dPB.FloatVectorPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int32 : Float].Values>, &demangling cache variable for type metadata for [Int32 : Float].Values);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<EstimatedBoundingBoxPB>, type metadata accessor for EstimatedBoundingBoxPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(key: PoseDnnInputLayer, value: IONamedSlice)>, &demangling cache variable for type metadata for (key: PoseDnnInputLayer, value: IONamedSlice));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(PoseDnnOutputLayer, IONamedSlice)>, &demangling cache variable for type metadata for (PoseDnnOutputLayer, IONamedSlice));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(PoseDnnInputLayer, IONamedSlice)>, &demangling cache variable for type metadata for (PoseDnnInputLayer, IONamedSlice));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(key: PinchDnnInputLayer, value: IONamedSlice)>, &demangling cache variable for type metadata for (key: PinchDnnInputLayer, value: IONamedSlice));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(PinchDnnOutputLayer, IONamedSlice)>, &demangling cache variable for type metadata for (PinchDnnOutputLayer, IONamedSlice));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(PinchDnnInputLayer, IONamedSlice)>, &demangling cache variable for type metadata for (PinchDnnInputLayer, IONamedSlice));
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int64>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandPose>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Coordinate3DPB>, type metadata accessor for Coordinate3DPB);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<TrackingInfoPB>, type metadata accessor for TrackingInfoPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionSpecPB>, type metadata accessor for DetectionSpecPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RejectedHandPB>, type metadata accessor for RejectedHandPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionSpecItemPB>, type metadata accessor for DetectionSpecItemPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionResultPB>, type metadata accessor for DetectionResultPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ImageDataPB>, type metadata accessor for ImageDataPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandDescriptorPB>, type metadata accessor for HandDescriptorPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PoseImageCropPB>, type metadata accessor for PoseImageCropPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandPresence>, type metadata accessor for HandPresence);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureVectorPerFramePB>, type metadata accessor for FeatureVectorPerFramePB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<FeatureVectorPB>, type metadata accessor for FeatureVectorPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Int32, Matrix2dPB)>, &demangling cache variable for type metadata for (Int32, Matrix2dPB));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Matrix2dPB.VectorPB>, type metadata accessor for Matrix2dPB.VectorPB);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandStatisticsLogging.CountByRejectionReason>, type metadata accessor for HandStatisticsLogging.CountByRejectionReason);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandStatisticsLogging.CountByHandPresence>, type metadata accessor for HandStatisticsLogging.CountByHandPresence);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CountByCameraSource>, type metadata accessor for CountByCameraSource);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(UInt64, TrackingUpdateDataPB)>, &demangling cache variable for type metadata for (UInt64, TrackingUpdateDataPB));
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(UInt64, Int32)>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<DerivedHandAttributes?>, &demangling cache variable for type metadata for DerivedHandAttributes?);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(CameraSource, Float)>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(HandPresence.Category, Float)>);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<HandsKitGTInjection>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PoseDnnOutputLayer>);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[CameraSource : [Float]]>, &demangling cache variable for type metadata for [CameraSource : [Float]]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(CameraSource, [Float])>, &demangling cache variable for type metadata for (CameraSource, [Float]));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(CameraSource, [SIMD2<Float>])>, &demangling cache variable for type metadata for (CameraSource, [SIMD2<Float>]));
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionSpecItem>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeBufferPointer<simd_float4x4>?>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: Float)>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    memcpy(v13, v14, v8 << 6);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TrackingInfo>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 320);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 320 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionSpec>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DetectionResult>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 112 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ImageData>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 192);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[192 * v8])
      memmove(v12, v13, 192 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[192 * v8] || v12 >= &v13[192 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(timestamp: Double, matrix: simd_float4x4, quaternion: simd_quatf)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    memcpy(v12, v13, 96 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Double, value: simd_float4x4)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[80 * v8] || v12 >= &v13[80 * v8])
  {
    memcpy(v12, v13, 80 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(EstimatedBoundingBox, EstimatedBoundingBox)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 80 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CameraSource, EstimatedBoundingBox)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 56 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EstimatedBoundingBox>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 40 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PinchRecoveryAnalyticsData>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 272);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 272 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Coordinate3D>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<JointTransform>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 144);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[144 * v8])
      memmove(v12, v13, 144 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[144 * v8] || v12 >= &v13[144 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int32, Float)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, UInt64)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CameraSource, ImageData)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 208);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 208 * v8)
      memmove(v10 + 4, a4 + 4, 208 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 208 * v8 || v12 >= v13 + 208 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CameraSource, ImageData));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ARVinoJointIndexes, [SIMD3<Float>])>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ARVinoJointIndexes, [SIMD3<Float>]));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data?>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DerivedHandAttributes?>, &demangling cache variable for type metadata for DerivedHandAttributes?);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<HandPose?>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 95;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 7);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 4;
  v14 = a4 + 4;
  v15 = v8 << 7;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= (_QWORD *)((char *)v14 + v15))
      memmove(v10 + 4, a4 + 4, v15);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= (_QWORD *)((char *)v13 + v15) || v13 >= (_QWORD *)((char *)v14 + v15))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandPose?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CameraSource, DetectionResult)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 95;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 7);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 4;
  v14 = a4 + 4;
  v15 = v8 << 7;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= (_QWORD *)((char *)v14 + v15))
      memmove(v10 + 4, a4 + 4, v15);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= (_QWORD *)((char *)v13 + v15) || v13 >= (_QWORD *)((char *)v14 + v15))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CameraSource, DetectionResult));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    memcpy(v14, v15, 16 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 95;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 7);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = v9 << 7;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 16 * v9;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    memcpy(v14, v15, 16 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v9])
      memmove(v13, v14, v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 17;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 16 * v11)
      memmove(v13 + 4, a4 + 4, 16 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 16 * v11 || v16 >= v17 + 16 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v15 = (unint64_t)(v13 + 4);
  v16 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= v16 + 24 * v11)
      memmove(v13 + 4, a4 + 4, 24 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 24 * v11 || v15 >= v16 + 24 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSs5NeverOTg575_s5Hands0A12PlaybackUtilC23getAllVdatFilesFromPath4pathSaySSGSS_tFZS2SXEfU_SSTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  char *v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  id v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a2;
  v34 = a3;
  v5 = type metadata accessor for URL();
  v31 = *(_QWORD *)(v5 - 8);
  v32 = v5;
  v7 = MEMORY[0x24BDAC7A8](v5, v6);
  v30 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v9);
  v29 = (char *)&v27 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v27 = v3;
    v35 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v12 = v35;
    v28 = (id)objc_opt_self();
    v13 = a1 + 40;
    v14 = v32;
    do
    {
      swift_bridgeObjectRetain();
      v15 = (void *)MEMORY[0x2426372E8](v33, v34);
      v16 = objc_msgSend(v28, sel_fileURLWithPath_, v15);

      v17 = v30;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v18 = v29;
      URL.appendingPathComponent(_:)();
      v19 = *(void (**)(char *, uint64_t))(v31 + 8);
      v19(v17, v14);
      v20 = URL.path.getter();
      v22 = v21;
      v19(v18, v14);
      swift_bridgeObjectRelease();
      v35 = v12;
      v24 = *(_QWORD *)(v12 + 16);
      v23 = *(_QWORD *)(v12 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v12 = v35;
      }
      v13 += 16;
      *(_QWORD *)(v12 + 16) = v24 + 1;
      v25 = v12 + 16 * v24;
      *(_QWORD *)(v25 + 32) = v20;
      *(_QWORD *)(v25 + 40) = v22;
      --v11;
    }
    while (v11);
  }
  return v12;
}

void _s5Hands0A7KitDataVSgWOi0_(void *a1)
{
  bzero(a1, 0x228uLL);
}

uint64_t outlined init with take of HandsKitData?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HandsKitData?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of HandsKitDataPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HandsKitDataPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of HandsKitDataPB(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HandsKitDataPB(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

CVPixelBufferRef specialized static HandsPlaybackUtil.createPixelbufGrayscaleFromData(image:width:height:)(uint64_t a1, uint64_t a2, int64_t a3, size_t a4)
{
  uint64_t inited;
  void **v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  void *v18;
  id v19;
  NSDictionary v20;
  CVPixelBufferRef v21;
  __CVBuffer *v22;
  int64_t BytesPerRow;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  CVPixelBufferRef v27;
  __CVBuffer *pixelBuffer;
  Class isa;
  _OWORD v32[2];
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  CVPixelBufferRef pixelBufferOut[3];

  pixelBufferOut[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  pixelBufferOut[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  inited = swift_initStackObject();
  v7 = (void **)MEMORY[0x24BDC5690];
  *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
  v8 = *v7;
  *(_QWORD *)(inited + 32) = v8;
  v9 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 40) = 1;
  v10 = (void *)*MEMORY[0x24BDC55E8];
  *(_QWORD *)(inited + 64) = v9;
  *(_QWORD *)(inited + 72) = v10;
  *(_BYTE *)(inited + 80) = 1;
  v11 = (void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)(inited + 104) = v9;
  *(_QWORD *)(inited + 112) = v11;
  v12 = v8;
  v13 = v10;
  v14 = v11;
  v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  v17 = (void **)MEMORY[0x24BDC55E0];
  *(_QWORD *)(inited + 120) = v15;
  v18 = *v17;
  *(_QWORD *)(inited + 144) = v16;
  *(_QWORD *)(inited + 152) = v18;
  *(_QWORD *)(inited + 184) = v9;
  *(_BYTE *)(inited + 160) = 1;
  v19 = v18;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v20.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], a3, a4, 0x4C303038u, v20.super.isa, pixelBufferOut)
    || (v21 = pixelBufferOut[0]) == 0)
  {
    v35 = MEMORY[0x24BEE0D00];
    v33 = 0xD00000000000001DLL;
    v34 = 0x800000023D9C47D0;
    specialized static HLog.E(file:function:line:_:_:)(0xD000000000000052, 0x800000023D9C46B0, 86, (uint64_t)&v33, MEMORY[0x24BEE4AF8]);

    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v33);
    v27 = 0;
  }
  else
  {
    v22 = pixelBufferOut[0];
    CVPixelBufferLockBaseAddress(v22, 0);
    BytesPerRow = CVPixelBufferGetBytesPerRow(v22);
    isa = v20.super.isa;
    pixelBuffer = v22;
    if (CVPixelBufferGetBaseAddress(v22))
    {
      if ((a4 & 0x8000000000000000) != 0)
        __break(1u);
      if (a4)
      {
        v24 = 0;
        do
        {
          if ((unsigned __int128)(BytesPerRow * (__int128)v24) >> 64 != (BytesPerRow * v24) >> 63)
          {
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
LABEL_21:
            __break(1u);
            JUMPOUT(0x23D6D8B90);
          }
          v25 = v24 * a3;
          if ((unsigned __int128)(v24 * (__int128)a3) >> 64 != (v24 * a3) >> 63)
            goto LABEL_19;
          v26 = v25 + a3;
          if (__OFADD__(v25, a3))
            goto LABEL_20;
          if (v26 < v25)
            goto LABEL_21;
          if (v26 != v25)
            __asm { BR              X8 }
          ++v24;
        }
        while (a4 != v24);
      }
    }
    else
    {
      v35 = MEMORY[0x24BEE0D00];
      v33 = 0xD000000000000021;
      v34 = 0x800000023D9C47F0;
      type metadata accessor for HandyLoggerNeo();
      memset(v32, 0, sizeof(v32));
      static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v32, 0xD000000000000052, 0x800000023D9C46B0, 99, (uint64_t)&v33, MEMORY[0x24BEE4AF8]);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v33);
    }
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);

    v27 = v21;
  }

  return v27;
}

uint64_t type metadata accessor for HandsPlaybackUtil()
{
  return objc_opt_self();
}

uint64_t method lookup function for HandsPlaybackUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static HandsPlaybackUtil.loadHandsKitDataFromData(filePath:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static HandsPlaybackUtil.getAllVdatFilesFromPath(path:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static HandsPlaybackUtil.createPixelBufferPNG(imageFilePath:source:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static HandsPlaybackUtil.createPixelbufGrayscaleFromData(image:width:height:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

unint64_t SceneSegmentationNode.process(_:_:)@<X0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float32x4_t *v28;
  int v29;
  char isUniquelyReferenced_nonNull_native;
  int v31;
  Swift::UInt64 v32;
  uint64_t v33;
  char v34;
  unint64_t result;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  unint64_t v45;
  _BYTE v46[80];

  v4 = v3;
  v8 = type metadata accessor for HandDescriptor();
  v39 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2->i64[0];
  v12 = a2->i64[1];
  v14 = a2[8].i64[0];
  v15 = a2[9];
  v43 = a2[10];
  v44 = v15;
  v16 = a2[11];
  v41 = a2[12];
  v42 = v16;
  CMTime.seconds.getter();
  v18 = v17;
  type metadata accessor for SpatialSceneState.HandFrame();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v12;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = v43;
  *(float32x4_t *)(v19 + 32) = v44;
  *(float32x4_t *)(v19 + 48) = v20;
  v21 = v41;
  *(float32x4_t *)(v19 + 64) = v42;
  *(float32x4_t *)(v19 + 80) = v21;
  *(_QWORD *)(v19 + 96) = v13;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized CircularBuffer.add(_:)(v19);
  swift_endAccess();
  swift_release();
  Hands_trace_CBridge();
  v40 = v4;
  v22 = specialized PipelineMapper.findMapping(_:_:)(v13, 1);
  v23 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v24 = *(_QWORD *)(v13 + 16);
  if (!v24)
  {
    swift_retain();
LABEL_14:
    result = Hands_trace_CBridge();
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = v23;
    a3[4] = a1;
    return result;
  }
  v37[2] = v14;
  v38 = a3;
  v25 = v13 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
  v26 = *(_QWORD *)(v39 + 72);
  v37[1] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v39 = v26;
  while (1)
  {
    outlined init with copy of HandDescriptor(v25, (uint64_t)v11);
    if (!*(_QWORD *)(v22 + 16))
      goto LABEL_6;
    v32 = *((_QWORD *)v11 + 18);
    v33 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
    if ((v34 & 1) == 0)
      goto LABEL_6;
    result = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v33);
    v36 = *(_QWORD *)(v40 + 24);
    if ((v36 & 0xC000000000000001) == 0)
      break;
    v27 = v23;
    MEMORY[0x24263790C](result);
LABEL_5:
    SceneSegmentationProcessing.run(_:_:_:)((uint64_t)v11, a1, (uint64_t)v46, v44, v43, v42, v41);
    v28 = a1;
    v29 = v11[136];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v45 = v27;
    v31 = v29;
    a1 = v28;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v46, v32, v31, isUniquelyReferenced_nonNull_native);
    v23 = v45;
    swift_release();
    swift_bridgeObjectRelease();
    v26 = v39;
LABEL_6:
    outlined destroy of HandDescriptor((uint64_t)v11);
    v25 += v26;
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = v38;
      goto LABEL_14;
    }
  }
  if ((result & 0x8000000000000000) == 0)
  {
    if (result >= *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_16;
    v27 = v23;
    swift_retain();
    goto LABEL_5;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t SceneSegmentationNode.getWorldPoseTransform(timestamp:currentHeadPose:)@<X0>(uint64_t result@<X0>, int8x16_t *a2@<X8>, float64x2_t a3@<Q0>, float64x2_t a4@<Q7>)
{
  _QWORD *v4;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  simd_float4x4 *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  BOOL v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  double v56;
  int8x16_t v57;

  a4.f64[0] = *(float64_t *)(result + 8);
  v6 = *(int8x16_t *)(result + 16);
  v7 = *(int8x16_t *)(result + 32);
  v8 = *(int8x16_t *)(result + 48);
  v9 = *(int8x16_t *)(result + 64);
  if (vabdd_f64(a3.f64[0], a4.f64[0]) < 1.0e-15)
    goto LABEL_22;
  v10 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vcgeq_f64(a3, a4)).i64[0], 0);
  v11 = *(int8x16_t *)(MEMORY[0x24BDAEE00] + 16);
  v53 = vbslq_s8(v10, v6, *MEMORY[0x24BDAEE00]);
  v51 = vbslq_s8(v10, v7, v11);
  v12 = *(int8x16_t *)(MEMORY[0x24BDAEE00] + 32);
  v13 = *(int8x16_t *)(MEMORY[0x24BDAEE00] + 48);
  v47 = vbslq_s8(v10, v8, v12);
  v50 = vbslq_s8(v10, *MEMORY[0x24BDAEE00], v6);
  v48 = vbslq_s8(v10, v9, v13);
  v49 = vbslq_s8(v10, v11, v7);
  v45 = vbslq_s8(v10, v13, v9);
  v46 = vbslq_s8(v10, v12, v8);
  v56 = a3.f64[0];
  if (a4.f64[0] <= a3.f64[0])
    v14 = -1.0;
  else
    v14 = *(double *)(result + 8);
  if (a4.f64[0] <= a3.f64[0])
    v15 = *(double *)(result + 8);
  else
    v15 = -1.0;
  if (a4.f64[0] <= a3.f64[0])
    v16 = -INFINITY;
  else
    v16 = a3.f64[0] - a4.f64[0];
  if (a4.f64[0] <= a3.f64[0])
    v17 = a3.f64[0] - a4.f64[0];
  else
    v17 = INFINITY;
  swift_beginAccess();
  v18 = v4[4];
  v19 = v4[5];
  v20 = v4[6];
  if (!(v19 >> 62))
  {
    v21 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v21 || *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) < 2uLL)
      goto LABEL_17;
LABEL_32:
    result = specialized CircularBuffer.lastAddedElementPtr.getter(v18, v19, v20);
    if ((v33 & 1) != 0)
    {
LABEL_18:
      result = swift_bridgeObjectRelease();
      v6 = 0uLL;
      v22 = 1;
      if (v14 < 0.0 || v15 < 0.0)
      {
        v7 = 0uLL;
        v8 = 0uLL;
        v9 = 0uLL;
        goto LABEL_25;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Double, simd_float4x4)>);
      v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_23D9A7050;
      *(double *)(v23 + 32) = v15;
      *(int8x16_t *)(v23 + 48) = v50;
      *(int8x16_t *)(v23 + 64) = v49;
      *(int8x16_t *)(v23 + 80) = v46;
      *(int8x16_t *)(v23 + 96) = v45;
      *(double *)(v23 + 112) = v14;
      *(int8x16_t *)(v23 + 128) = v53;
      *(int8x16_t *)(v23 + 144) = v51;
      *(int8x16_t *)(v23 + 160) = v47;
      *(int8x16_t *)(v23 + 176) = v48;
      v24 = specialized Dictionary.init(dictionaryLiteral:)(v23);
      swift_setDeallocating();
      swift_deallocClassInstance();
      type metadata accessor for TemporalTransformSampler();
      swift_allocObject();
      result = TemporalTransformSampler.init(measurements:)(v24);
      if (!result)
      {
        v22 = 1;
        v7 = 0uLL;
        v8 = 0uLL;
        v9 = 0uLL;
        v6 = 0uLL;
        goto LABEL_25;
      }
      TemporalTransformSampler.getTransform(timestamp:)(v25, v56);
      v57 = v26;
      v54 = v28;
      v55 = v27;
      v52 = v29;
      result = swift_release();
      v9 = v52;
      v8 = v54;
      v7 = v55;
      v6 = v57;
LABEL_22:
      v22 = 0;
LABEL_25:
      *a2 = v6;
      a2[1] = v7;
      a2[2] = v8;
      a2[3] = v9;
      a2[4].i8[0] = v22;
      return result;
    }
    v34 = result;
    if (v21 == v18)
      v35 = v20;
    else
      v35 = 0;
    v36 = v19 & 0xC000000000000001;
    v43 = result + 1;
    v37 = __OFADD__(result, 1);
    v44 = v37;
    if (v36)
      goto LABEL_45;
LABEL_40:
    if ((v35 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v35 < *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      v38 = *(_QWORD *)(v19 + 32 + 8 * v35);
      for (result = swift_retain(); v35 != v34; v38 = result)
      {
        v39 = v35 + 1;
        if (__OFADD__(v35, 1))
          goto LABEL_63;
LABEL_47:
        if (v19 >> 62)
        {
          swift_bridgeObjectRetain();
          v40 = _CocoaArrayWrapper.endIndex.getter();
          result = swift_bridgeObjectRelease();
        }
        else
        {
          v40 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (!v40)
          goto LABEL_61;
        v41 = *(double *)(v38 + 24);
        v42 = v56 - v41;
        if (v56 - v41 >= 0.0)
        {
          if (v42 < v17)
          {
            v49 = *(int8x16_t *)(v38 + 48);
            v50 = *(int8x16_t *)(v38 + 32);
            v15 = *(double *)(v38 + 24);
            v17 = v56 - v41;
            v45 = *(int8x16_t *)(v38 + 80);
            v46 = *(int8x16_t *)(v38 + 64);
          }
        }
        else if (v16 < v42)
        {
          v51 = *(int8x16_t *)(v38 + 48);
          v53 = *(int8x16_t *)(v38 + 32);
          v14 = *(double *)(v38 + 24);
          v16 = v56 - v41;
          v47 = *(int8x16_t *)(v38 + 64);
          v48 = *(int8x16_t *)(v38 + 80);
        }
        result = swift_release();
        if (v35 == v34)
          goto LABEL_18;
        v35 = v39 % v40;
        if (!v36)
          goto LABEL_40;
LABEL_45:
        result = MEMORY[0x24263790C](v35, v19);
      }
      if (!v44)
      {
        v39 = v43;
        goto LABEL_47;
      }
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  swift_bridgeObjectRetain_n();
  v30 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v30)
  {
LABEL_17:
    specialized CircularBuffer.lastAddedElementPtr.getter(v18, v19, v20);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  v31 = _CocoaArrayWrapper.endIndex.getter();
  result = _CocoaArrayWrapper.endIndex.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    v32 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v31 < 0 || v32 < v31)
      goto LABEL_65;
    if (v31)
    {
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
    goto LABEL_17;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

uint64_t SceneSegmentationNode.getClosestHandFrame(timestamp:)(double a1)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  BOOL v24;

  swift_beginAccess();
  v4 = v1[4];
  v3 = v1[5];
  v5 = v1[6];
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v9)
      goto LABEL_4;
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    result = _CocoaArrayWrapper.endIndex.getter();
    if (result < 0)
    {
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      return result;
    }
    v11 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v10 < 0 || v11 < v10)
      goto LABEL_47;
    if (!v10)
    {
LABEL_4:
      specialized CircularBuffer.lastAddedElementPtr.getter(v4, v3, v5);
      goto LABEL_5;
    }
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v6 || *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) < 2uLL)
      goto LABEL_4;
  }
  result = specialized CircularBuffer.lastAddedElementPtr.getter(v4, v3, v5);
  if ((v12 & 1) == 0)
  {
    v13 = result;
    v7 = 0;
    if (v6 == v4)
      v14 = v5;
    else
      v14 = 0;
    v15 = v3 & 0xC000000000000001;
    v23 = result + 1;
    v16 = __OFADD__(result, 1);
    v24 = v16;
    v17 = INFINITY;
    if (v15)
      goto LABEL_26;
LABEL_21:
    if ((v14 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v14 < *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      v18 = *(_QWORD *)(v3 + 32 + 8 * v14);
      for (result = swift_retain(); v14 != v13; v18 = result)
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
          goto LABEL_45;
LABEL_28:
        if (v3 >> 62)
        {
          swift_bridgeObjectRetain();
          v20 = _CocoaArrayWrapper.endIndex.getter();
          result = swift_bridgeObjectRelease();
        }
        else
        {
          v20 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (!v20)
          goto LABEL_43;
        v21 = *(double *)(v18 + 24);
        if (v21 > a1)
          v22 = v21 - a1;
        else
          v22 = a1 - v21;
        if (v22 >= v17)
        {
          result = swift_release();
          v22 = v17;
          if (v14 == v13)
            goto LABEL_6;
        }
        else
        {
          result = swift_release();
          v7 = v18;
          if (v14 == v13)
            goto LABEL_6;
        }
        v14 = v19 % v20;
        v17 = v22;
        if (!v15)
          goto LABEL_21;
LABEL_26:
        result = MEMORY[0x24263790C](v14, v3);
      }
      if (!v24)
      {
        v19 = v23;
        goto LABEL_28;
      }
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_5:
  v7 = 0;
LABEL_6:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t SceneSegmentationNode.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SceneSegmentationNode()
{
  return objc_opt_self();
}

uint64_t Hands_trace_CBridge()
{
  return kdebug_trace();
}

uint64_t outlined init with copy of HandDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HandDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t KeyboardTypingSuppressor.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeyboardTypingSuppressor()
{
  return objc_opt_self();
}

void protocol witness for MiddleDoubleTapPostProcessingSuppressor.type.getter in conformance KeyboardTypingSuppressor(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

BOOL protocol witness for MiddleDoubleTapPostProcessingSuppressor.shouldSuppress(basedOn:atTime:) in conformance KeyboardTypingSuppressor(uint64_t a1)
{
  return specialized KeyboardTypingSuppressor.shouldSuppress(basedOn:atTime:)(a1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_s5SIMD3VySfGs5NeverOTg50101_s5Hands24KeyboardTypingSuppressorC24getDeviceFramePalmNormal33_C45A7DDDD10520905B356D865D3AE76CLLys5g31VySfGAA14HandDescriptorVFAHSo18deF6VXEfU_5Hands8HandPoseVTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    result = v16;
    v6 = (uint64_t *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 8);
    v8 = v7 + 32;
    v9 = *(_QWORD *)(v7 + 16);
    while (1)
    {
      v11 = *v6++;
      v10 = v11;
      if (v11 < 0)
        break;
      if (v10 >= v9)
        goto LABEL_10;
      v12 = *(_OWORD *)(v8 + 32 * v10);
      v17 = result;
      v14 = *(_QWORD *)(result + 16);
      v13 = *(_QWORD *)(result + 24);
      if (v14 >= v13 >> 1)
      {
        v15 = v12;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v12 = v15;
        result = v17;
      }
      *(_QWORD *)(result + 16) = v14 + 1;
      *(_OWORD *)(result + 16 * v14 + 32) = v12;
      if (!--v3)
        return result;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  return result;
}

_QWORD *specialized KeyboardTypingSuppressor.getDeviceFramePalmNormal(_:)(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[14];
  __int16 v19;
  int v20;

  v1 = result[2];
  if (v1)
  {
    v2 = result[3];
    v12 = result[4];
    v13 = result[6];
    v14 = result[8];
    v15 = result[5];
    v16 = result[7];
    v11 = result[10];
    v17 = result[9];
    v4 = result[11];
    v3 = result[12];
    v6 = result[13];
    v5 = result[14];
    v7 = result[15];
    v8 = result[16];
    v18[0] = result[2];
    v18[1] = v2;
    v18[2] = v12;
    v18[3] = v15;
    v18[4] = v13;
    v18[5] = v16;
    v18[6] = v14;
    v18[7] = v17;
    v18[8] = v11;
    v18[9] = v4;
    v18[10] = v3;
    v18[11] = v6;
    v18[12] = v5;
    v18[13] = v7;
    v19 = v8 & 0x101;
    v20 = HIDWORD(v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo18ARVinoJointIndexesVG_s5SIMD3VySfGs5NeverOTg50101_s5Hands24KeyboardTypingSuppressorC24getDeviceFramePalmNormal33_C45A7DDDD10520905B356D865D3AE76CLLys5g31VySfGAA14HandDescriptorVFAHSo18deF6VXEfU_5Hands8HandPoseVTf1cn_nTf4ng_n((uint64_t)&outlined read-only object #0 of KeyboardTypingSuppressor.getDeviceFramePalmNormal(_:), (uint64_t)v18);
    result = (_QWORD *)outlined consume of HandPose?(v1);
    v10 = *(_QWORD *)(v9 + 16);
    if (v10 < 2)
    {
      __break(1u);
    }
    else if (v10 != 2)
    {
      return (_QWORD *)swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  return result;
}

BOOL specialized KeyboardTypingSuppressor.shouldSuppress(basedOn:atTime:)(uint64_t a1)
{
  float *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float32x4_t v46;
  float v47;
  float v48;
  float32x4_t v49;
  float v50;
  float v51;
  float32x4_t v52;
  float v53;
  float v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  float v64;
  float32x4_t v65;
  float v66;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float v72;
  float v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;

  v3 = type metadata accessor for HandDescriptor();
  v5 = MEMORY[0x24BDAC7A8](v3, v4);
  v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v5, v8);
  v11 = (char *)&v75 - v10;
  v13 = MEMORY[0x24BDAC7A8](v9, v12);
  v15 = (uint64_t *)((char *)v75.i64 - v14);
  v17 = MEMORY[0x24BDAC7A8](v13, v16);
  v19 = (char *)&v75 - v18;
  v21 = MEMORY[0x24BDAC7A8](v17, v20);
  v23 = (char *)&v75 - v22;
  MEMORY[0x24BDAC7A8](v21, v24);
  v27 = (uint64_t *)((char *)v75.i64 - v26);
  if (*(_QWORD *)(a1 + 16) != 2)
    return 0;
  v28 = a1 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
  v29 = *(_QWORD *)(v25 + 72);
  swift_bridgeObjectRetain();
  outlined init with copy of HandDescriptor(v28, (uint64_t)v19);
  if ((v19[136] & 1) == 0)
  {
    outlined destroy of HandDescriptor((uint64_t)v19);
    outlined init with copy of HandDescriptor(v28 + v29, (uint64_t)v19);
    if ((v19[136] & 1) == 0)
    {
      outlined destroy of HandDescriptor((uint64_t)v19);
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  outlined init with take of HandDescriptor((uint64_t)v19, (uint64_t)v23);
  outlined init with take of HandDescriptor((uint64_t)v23, (uint64_t)v27);
  swift_bridgeObjectRetain();
  outlined init with copy of HandDescriptor(v28, (uint64_t)v7);
  if ((v7[136] & 1) != 0)
  {
    outlined destroy of HandDescriptor((uint64_t)v7);
    outlined init with copy of HandDescriptor(v28 + v29, (uint64_t)v7);
    if (v7[136] == 1)
    {
      outlined destroy of HandDescriptor((uint64_t)v7);
      swift_bridgeObjectRelease();
LABEL_30:
      outlined destroy of HandDescriptor((uint64_t)v27);
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  outlined init with take of HandDescriptor((uint64_t)v7, (uint64_t)v11);
  outlined init with take of HandDescriptor((uint64_t)v11, (uint64_t)v15);
  if (!v27[2])
    goto LABEL_29;
  if (!v15[2])
    goto LABEL_29;
  v30 = v27[4];
  v31.i64[0] = v30;
  v31.i64[1] = v27[5];
  v32 = v15[4];
  v33.i64[0] = v32;
  v33.i64[1] = v15[5];
  v34 = vsubq_f32(v31, v33);
  v35 = vmulq_f32(v34, v34);
  v36 = vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1));
  v37 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), v36).f32[0]);
  if (v1[8] < v37)
    goto LABEL_29;
  if (v37 < v1[7])
    goto LABEL_29;
  v36.i32[0] = v34.i32[1];
  if (v1[12] < fabsf(v34.f32[1]))
    goto LABEL_29;
  v77 = (int32x4_t)v31;
  v78 = v33;
  v75 = v36;
  specialized KeyboardTypingSuppressor.getDeviceFramePalmNormal(_:)(v27);
  v79 = v38;
  specialized KeyboardTypingSuppressor.getDeviceFramePalmNormal(_:)(v15);
  v41 = v79;
  v43 = v42;
  v44 = vmulq_f32(v41, v41);
  v45 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0]);
  v46 = vmulq_f32(v43, v43);
  v47 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]);
  if ((float)(v45 * v47) == 0.0)
  {
    v48 = 180.0;
  }
  else
  {
    v49 = vmulq_f32(v79, v43);
    v76 = v43;
    v50 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).f32[0]/ (float)(v45 * v47));
    v41 = v79;
    v43 = v76;
    v48 = v50 * 57.296;
  }
  if (v1[9] < v48)
    goto LABEL_29;
  if (v45 == 0.0)
  {
    v51 = 180.0;
  }
  else
  {
    v52 = vmulq_f32(v41, (float32x4_t)xmmword_23D9A6CA0);
    v76 = v43;
    v53 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0]/ v45);
    v43 = v76;
    v51 = v53 * 57.296;
  }
  v54 = v1[10];
  if (v54 < v51)
    goto LABEL_29;
  if (v47 == 0.0)
  {
    v55 = 180.0;
  }
  else
  {
    v56 = vmulq_f32(v43, (float32x4_t)xmmword_23D9A6CA0);
    v55 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0]/ v47)* 57.296;
  }
  if (v54 < v55)
    goto LABEL_29;
  v57 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v77, v77), (int8x16_t)v77, 0xCuLL), (float32x4_t)xmmword_23D9A72E0), (float32x4_t)xmmword_23D9A6CB0, (float32x4_t)v77);
  v39.i32[0] = v32;
  v40.i32[0] = v30;
  *(float32x2_t *)v60.f32 = vsub_f32((float32x2_t)__PAIR64__(v78.u32[1], v32), (float32x2_t)__PAIR64__(v77.u32[1], v30));
  v58 = v78.f32[2];
  v59 = *(float *)&v77.i32[2];
  v60.f32[2] = v78.f32[2] - *(float *)&v77.i32[2];
  v60.i32[3] = 0;
  v61 = vmulq_f32(v57, v57);
  v62 = vmulq_f32(v60, v60);
  v63 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), v61)).f32[0])* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2), vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).f32[0]);
  if (v63 == 0.0)
  {
    v64 = 180.0;
  }
  else
  {
    v65 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL), v60);
    v79 = v39;
    v77 = v40;
    v66 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))).f32[0]/ v63);
    v40.i32[0] = v77.i32[0];
    v39.i32[0] = v79.i32[0];
    v64 = v66 * 57.296;
  }
  if (v1[11] < v64)
  {
LABEL_29:
    outlined destroy of HandDescriptor((uint64_t)v15);
    goto LABEL_30;
  }
  v68 = vmlaq_f32(vmulq_f32(v78, (float32x4_t)xmmword_23D9A72F0), (float32x4_t)xmmword_23D9A6CA0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL));
  v69.i32[3] = 0;
  v69.f32[0] = *(float *)v40.i32 - v39.f32[0];
  v69.i32[1] = v75.i32[0];
  v69.f32[2] = v59 - v58;
  v70 = vmulq_f32(v68, v68);
  v71 = vmulq_f32(v69, v69);
  v72 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), v70)).f32[0])* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).f32[0]);
  if (v72 == 0.0)
  {
    v73 = 180.0;
  }
  else
  {
    v74 = vmulq_f32(v69, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL));
    v73 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 2), vaddq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 1))).f32[0]/ v72)* 57.296;
  }
  outlined destroy of HandDescriptor((uint64_t)v15);
  outlined destroy of HandDescriptor((uint64_t)v27);
  return v1[11] >= v73;
}

uint64_t AlgorithmSensitivity.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AlgorithmSensitivity()
{
  return objc_opt_self();
}

float32x2_t specialized static AlgorithmSensitivity.add_3DNoise(_center3D:noise_magnitude:)(uint64_t a1, float32x2_t a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int32 v6;
  float32x4_t v7;
  __int32 v8;
  int32x4_t v9;
  float32x4_t v10;
  __int32 v12;
  float32x4_t v13;

  v3 = specialized static BinaryFloatingPoint<>.random<A>(in:using:)(a1, -1.0, 1.0);
  v13.i64[0] = v4;
  v5 = specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v3, -1.0, 1.0);
  v12 = v6;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v5, -1.0, 1.0);
  v7 = v13;
  v7.i32[1] = v12;
  v7.i32[2] = v8;
  v9 = (int32x4_t)vmulq_f32(v7, v7);
  v10 = v7;
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  *(float32x2_t *)v7.f32 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32)));
  return vadd_f32(a2, vmul_n_f32((float32x2_t)*(_OWORD *)&vmulq_n_f32(v10, vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32))).f32[0]), a3));
}

uint64_t PixelBufferPoolManager.init(pixelFormat:)(int a1)
{
  uint64_t v1;
  uint64_t inited;
  void **v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  void **v14;
  void *v15;
  id v16;
  Class isa;

  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  inited = swift_initStackObject();
  v4 = (void **)MEMORY[0x24BDC5690];
  *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
  v5 = *v4;
  *(_QWORD *)(inited + 32) = v5;
  v6 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 40) = 1;
  v7 = (void *)*MEMORY[0x24BDC55E8];
  *(_QWORD *)(inited + 64) = v6;
  *(_QWORD *)(inited + 72) = v7;
  *(_BYTE *)(inited + 80) = 1;
  v8 = (void *)*MEMORY[0x24BDC5668];
  *(_QWORD *)(inited + 104) = v6;
  *(_QWORD *)(inited + 112) = v8;
  v9 = v5;
  v10 = v7;
  v11 = v8;
  v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  v14 = (void **)MEMORY[0x24BDC55E0];
  *(_QWORD *)(inited + 120) = v12;
  v15 = *v14;
  *(_QWORD *)(inited + 144) = v13;
  *(_QWORD *)(inited + 152) = v15;
  *(_QWORD *)(inited + 184) = v6;
  *(_BYTE *)(inited + 160) = 1;
  v16 = v15;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = isa;
  *(_DWORD *)(v1 + 24) = a1;
  return v1;
}

CVBufferRef __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PixelBufferPoolManager.getPixelBuffer(width:height:)(Swift::Int width, Swift::Int height)
{
  uint64_t v2;
  __CVBuffer *v3;
  void *v4;
  const __CFAllocator *v5;
  __CVPixelBufferPool *v6;
  CVReturn PixelBuffer;
  BOOL v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  CVPixelBufferRef pixelBufferOut[2];

  pixelBufferOut[1] = *(CVPixelBufferRef *)MEMORY[0x24BDAC8D0];
  specialized PixelBufferPoolManager.getPool(width:height:)(width, height);
  if (!v2)
  {
    pixelBufferOut[0] = 0;
    v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    v6 = v4;
    PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(v5, v6, pixelBufferOut);
    v3 = pixelBufferOut[0];
    if (PixelBuffer)
      v8 = 1;
    else
      v8 = pixelBufferOut[0] == 0;
    if (v8)
    {
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      v3 = (__CVBuffer *)MEMORY[0x24BEE17D8];
      v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = 120;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type PixelBufferPoolManagerError and conformance PixelBufferPoolManagerError();
      swift_allocError();
      *(_QWORD *)v12 = 0xD000000000000026;
      *(_QWORD *)(v12 + 8) = 0x800000023D9C4A10;
      *(_BYTE *)(v12 + 16) = 1;
      swift_willThrow();

    }
    else
    {

    }
  }
  return v3;
}

uint64_t PixelBufferPoolManager.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PixelBufferPoolManager()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    result = MEMORY[0x242638C74](&protocol conformance descriptor for CFStringRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

void specialized PixelBufferPoolManager.getPool(width:height:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  CVPixelBufferPoolRef *v5;
  void *v6;
  uint64_t inited;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  Class isa;
  const __CFAllocator *v22;
  const __CFDictionary *v23;
  CVPixelBufferPoolRef v24;
  uint64_t v25;

  v5 = (CVPixelBufferPoolRef *)(v2 + 32);
  swift_beginAccess();
  v6 = *(void **)(v2 + 32);
  if (!v6 || *(_QWORD *)(v2 + 40) != a1 || *(_QWORD *)(v2 + 48) != a2)
  {
    *(_QWORD *)(v2 + 32) = 0;

    *(_QWORD *)(v2 + 40) = a1;
    *(_QWORD *)(v2 + 48) = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
    v8 = (void *)*MEMORY[0x24BDC5668];
    *(_QWORD *)(inited + 32) = *MEMORY[0x24BDC5668];
    v9 = v8;
    v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    *(_QWORD *)(inited + 40) = v10;
    v12 = (void *)*MEMORY[0x24BDC56B8];
    *(_QWORD *)(inited + 64) = v11;
    *(_QWORD *)(inited + 72) = v12;
    v13 = MEMORY[0x24BEE44F0];
    *(_DWORD *)(inited + 80) = *(_DWORD *)(v2 + 24);
    v14 = (void *)*MEMORY[0x24BDC5708];
    v15 = MEMORY[0x24BEE1768];
    *(_QWORD *)(inited + 120) = a1;
    v16 = (void **)MEMORY[0x24BDC5650];
    *(_QWORD *)(inited + 104) = v13;
    *(_QWORD *)(inited + 112) = v14;
    v17 = *v16;
    *(_QWORD *)(inited + 144) = v15;
    *(_QWORD *)(inited + 152) = v17;
    *(_QWORD *)(inited + 184) = v15;
    *(_QWORD *)(inited + 160) = a2;
    v18 = v12;
    v19 = v14;
    v20 = v17;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v22 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    swift_beginAccess();
    v23 = isa;
    LODWORD(isa) = CVPixelBufferPoolCreate(v22, 0, v23, v5);
    swift_endAccess();

    if ((_DWORD)isa)
    {
      v24 = *v5;
      *v5 = 0;

      lazy protocol witness table accessor for type PixelBufferPoolManagerError and conformance PixelBufferPoolManagerError();
      swift_allocError();
      *(_QWORD *)v25 = 0xD000000000000022;
      *(_QWORD *)(v25 + 8) = 0x800000023D9C4A40;
      *(_BYTE *)(v25 + 16) = 0;
      swift_willThrow();

    }
    else
    {

      if (!*v5)
        __break(1u);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PixelBufferPoolManagerError and conformance PixelBufferPoolManagerError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PixelBufferPoolManagerError and conformance PixelBufferPoolManagerError;
  if (!lazy protocol witness table cache variable for type PixelBufferPoolManagerError and conformance PixelBufferPoolManagerError)
  {
    result = MEMORY[0x242638C74](&protocol conformance descriptor for PixelBufferPoolManagerError, &type metadata for PixelBufferPoolManagerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PixelBufferPoolManagerError and conformance PixelBufferPoolManagerError);
  }
  return result;
}

uint64_t outlined copy of PixelBufferPoolManagerError()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for PixelBufferPoolManagerError()
{
  return outlined consume of PixelBufferPoolManagerError();
}

uint64_t outlined consume of PixelBufferPoolManagerError()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for PixelBufferPoolManagerError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of PixelBufferPoolManagerError();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PixelBufferPoolManagerError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of PixelBufferPoolManagerError();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of PixelBufferPoolManagerError();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PixelBufferPoolManagerError(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of PixelBufferPoolManagerError();
  return a1;
}

uint64_t getEnumTagSinglePayload for PixelBufferPoolManagerError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PixelBufferPoolManagerError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PixelBufferPoolManagerError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for PixelBufferPoolManagerError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PixelBufferPoolManagerError()
{
  return &type metadata for PixelBufferPoolManagerError;
}

uint64_t HandyLoggerLogLevel.description.getter(int a1)
{
  uint64_t result;

  switch(a1)
  {
    case 1:
      result = 0x4755424544;
      break;
    case 2:
      result = 1330007625;
      break;
    case 3:
      result = 0x474E494E524157;
      break;
    case 4:
      result = 0x524F525245;
      break;
    case 5:
      result = 0x544C554146;
      break;
    default:
      result = 0x45534F42524556;
      break;
  }
  return result;
}

void one-time initialization function for _loggers()
{
  static HandyLoggerNeo._loggers = MEMORY[0x24BEE4AF8];
}

uint64_t one-time initialization function for _dispatchQ()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  _QWORD v10[2];

  v0 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v0, v1);
  v2 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v2, v3);
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x24BEE5758], v4);
  static DispatchQoS.unspecified.getter();
  v10[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static HandyLoggerNeo._dispatchQ = result;
  return result;
}

uint64_t static HandyLoggerNeo.attachLogger(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized static HandyLoggerNeo.attachLogger(_:)(a1, v2, ObjectType, a2);
}

uint64_t closure #1 in static HandyLoggerNeo.attachLogger(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  if (one-time initialization token for _loggers != -1)
    swift_once();
  result = swift_beginAccess();
  v6 = *(_QWORD *)(static HandyLoggerNeo._loggers + 16);
  if (v6)
  {
    v7 = (_QWORD *)(static HandyLoggerNeo._loggers + 32);
    while (*v7 != a2)
    {
      v7 += 2;
      if (!--v6)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    swift_beginAccess();
    v8 = (_QWORD *)static HandyLoggerNeo._loggers;
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static HandyLoggerNeo._loggers = (uint64_t)v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      static HandyLoggerNeo._loggers = (uint64_t)v8;
    }
    v11 = v8[2];
    v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
      static HandyLoggerNeo._loggers = (uint64_t)v8;
    }
    v8[2] = v11 + 1;
    v12 = &v8[2 * v11];
    v12[4] = a2;
    v12[5] = a3;
    return swift_endAccess();
  }
  return result;
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t static HandyLoggerNeo.detachLogger(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v12[6];

  if (one-time initialization token for _dispatchQ != -1)
    swift_once();
  v5 = (void *)static HandyLoggerNeo._dispatchQ;
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v2;
  v6[3] = a1;
  v6[4] = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in static HandyLoggerNeo.detachLogger(_:);
  *(_QWORD *)(v7 + 24) = v6;
  v12[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v12[5] = v7;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed () -> ();
  v12[3] = &block_descriptor;
  v8 = _Block_copy(v12);
  v9 = v5;
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v9, v8);

  _Block_release(v8);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t closure #1 in static HandyLoggerNeo.detachLogger(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  int64_t v5;

  if (one-time initialization token for _loggers != -1)
    swift_once();
  swift_beginAccess();
  swift_unknownObjectRetain();
  v3 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t)&static HandyLoggerNeo._loggers, a2);
  result = swift_unknownObjectRelease();
  v5 = *(_QWORD *)(static HandyLoggerNeo._loggers + 16);
  if (v5 < v3)
  {
    __break(1u);
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(v3, v5);
    return swift_endAccess();
  }
  return result;
}

uint64_t static HandyLoggerNeo.detachAllLoggers()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  NSObject *v3;
  uint64_t result;
  _QWORD v5[6];

  if (one-time initialization token for _dispatchQ != -1)
    swift_once();
  v0 = (void *)static HandyLoggerNeo._dispatchQ;
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = specialized closure #1 in static HandyLoggerNeo.detachAllLoggers();
  *(_QWORD *)(v1 + 24) = 0;
  v5[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v5[5] = v1;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed () -> ();
  v5[3] = &block_descriptor_10;
  v2 = _Block_copy(v5);
  v3 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v2);

  _Block_release(v2);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v2 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t static HandyLoggerNeo.setLevel(_:)(uint64_t result)
{
  static HandyLoggerNeo._currentLogLevel = result;
  return result;
}

uint64_t static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:)(unsigned int a1, int a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  unint64_t v16;
  _QWORD v20[4];
  uint64_t v21[4];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  type metadata accessor for HandyLoggerNeo();
  static LogArea.from(description:)(a3, a4, (uint64_t)&v22);
  v15 = v22;
  v16 = v23;
  v21[0] = v22;
  v21[1] = v23;
  v21[2] = v24;
  v21[3] = v25;
  v20[3] = MEMORY[0x24BEE0D00];
  v20[0] = a8;
  v20[1] = a9;
  swift_bridgeObjectRetain();
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(a1, a2, v21, a5, a6, a7, (uint64_t)v20, MEMORY[0x24BEE4AF8]);
  outlined consume of LogArea(v15, v16);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
}

uint64_t static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(unsigned int a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD aBlock[6];
  _OWORD v58[2];

  v54 = a2;
  v15 = type metadata accessor for Date();
  v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
  v18 = MEMORY[0x24BDAC7A8](v15, v17);
  v19 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v18, v20);
  v24 = (char *)&v43 - v23;
  if (static HandyLoggerNeo._currentLogLevel <= a1)
  {
    v51 = v22;
    v52 = result;
    v53 = a1;
    v50 = a8;
    v25 = *a3;
    v48 = a6;
    v49 = v25;
    v27 = a3[1];
    v26 = a3[2];
    v56 = a3[3];
    v28 = (void *)MEMORY[0x2426372E8](a4, a5);
    v29 = objc_msgSend(v28, sel_lastPathComponent);

    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v31;
    v46 = v30;

    static Date.now.getter();
    if (one-time initialization token for _dispatchQ != -1)
      swift_once();
    v47 = (id)static HandyLoggerNeo._dispatchQ;
    v32 = v51;
    v33 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
    v44 = v24;
    v34 = v52;
    v33(v19, v24, v52);
    v43 = a7;
    outlined init with copy of Any(a7, (uint64_t)v58);
    v35 = (*(unsigned __int8 *)(v32 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    v36 = (v16 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    v37 = swift_allocObject();
    *(_DWORD *)(v37 + 16) = v53;
    v38 = v49;
    *(_QWORD *)(v37 + 24) = v55;
    *(_QWORD *)(v37 + 32) = v38;
    *(_QWORD *)(v37 + 40) = v27;
    *(_QWORD *)(v37 + 48) = v26;
    *(_QWORD *)(v37 + 56) = v56;
    *(_DWORD *)(v37 + 64) = v54;
    v39 = v45;
    *(_QWORD *)(v37 + 72) = v46;
    *(_QWORD *)(v37 + 80) = v39;
    *(_QWORD *)(v37 + 88) = v48;
    (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v37 + v35, v19, v34);
    outlined init with take of Any(v58, (_OWORD *)(v37 + v36));
    *(_QWORD *)(v37 + ((v36 + 39) & 0xFFFFFFFFFFFFFFF8)) = v50;
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = partial apply for closure #1 in static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:);
    *(_QWORD *)(v40 + 24) = v37;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v40;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_20;
    v41 = _Block_copy(aBlock);
    v42 = v47;
    outlined copy of LogArea(v38, v27);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v42, v41);

    _Block_release(v41);
    LOBYTE(v41) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v41 & 1) != 0)
    {
      __break(1u);
    }
    else if (v53 != 5)
    {
      (*(void (**)(char *, uint64_t))(v51 + 8))(v44, v52);
      return swift_release();
    }
    outlined init with copy of Any(v43, (uint64_t)aBlock);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_bridgeObjectRetain();
      String.init(format:_:)();
      swift_bridgeObjectRelease();
    }
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD v32[4];

  if (static HandyLoggerNeo._currentLogLevel <= result)
  {
    v19 = result;
    if (one-time initialization token for _loggers != -1)
      swift_once();
    swift_beginAccess();
    result = static HandyLoggerNeo._loggers;
    v20 = *(_QWORD *)(static HandyLoggerNeo._loggers + 16);
    if (v20)
    {
      v21 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
      v31 = a7;
      v30 = a4;
      do
      {
        v22 = *v21;
        v23 = v19;
        v24 = a8;
        ObjectType = swift_getObjectType();
        v32[0] = a3;
        v32[1] = a4;
        v32[2] = a5;
        v32[3] = a6;
        v26 = a5;
        v27 = a6;
        v28 = *(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8);
        swift_unknownObjectRetain();
        v29 = ObjectType;
        a8 = v24;
        v19 = v23;
        v28(v23, v32, v31, a8, a9, a10, a11, a12, a13, v29, v22);
        a6 = v27;
        a5 = v26;
        a4 = v30;
        swift_unknownObjectRelease();
        v21 += 2;
        --v20;
      }
      while (v20);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t static HandyLoggerNeo.flush()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  NSObject *v3;
  uint64_t result;
  _QWORD v5[6];

  if (one-time initialization token for _dispatchQ != -1)
    swift_once();
  v0 = (void *)static HandyLoggerNeo._dispatchQ;
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = specialized closure #1 in static HandyLoggerNeo.flush();
  *(_QWORD *)(v1 + 24) = 0;
  v5[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v5[5] = v1;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed () -> ();
  v5[3] = &block_descriptor_27;
  v2 = _Block_copy(v5);
  v3 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v2);

  _Block_release(v2);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v2 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t static HandyLoggerNeo.clearLogs()()
{
  void *v0;
  uint64_t v1;
  void *v2;
  NSObject *v3;
  uint64_t result;
  _QWORD v5[6];

  if (one-time initialization token for _dispatchQ != -1)
    swift_once();
  v0 = (void *)static HandyLoggerNeo._dispatchQ;
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = specialized closure #1 in static HandyLoggerNeo.clearLogs();
  *(_QWORD *)(v1 + 24) = 0;
  v5[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v5[5] = v1;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed () -> ();
  v5[3] = &block_descriptor_34;
  v2 = _Block_copy(v5);
  v3 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v2);

  _Block_release(v2);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v2 & 1) != 0)
    __break(1u);
  return result;
}

id HandyLoggerNeo.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HandyLoggerNeo.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandyLoggerNeo();
  return objc_msgSendSuper2(&v2, sel_init);
}

id HandyLoggerNeo.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HandyLoggerNeo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized static HandyLoggerNeo.attachLogger(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v14[6];

  if (one-time initialization token for _dispatchQ != -1)
    swift_once();
  v7 = (void *)static HandyLoggerNeo._dispatchQ;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a1;
  v8[4] = a4;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in static HandyLoggerNeo.attachLogger(_:);
  *(_QWORD *)(v9 + 24) = v8;
  v14[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v14[5] = v9;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1107296256;
  v14[2] = thunk for @escaping @callee_guaranteed () -> ();
  v14[3] = &block_descriptor_44;
  v10 = _Block_copy(v14);
  v11 = v7;
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v10);

  _Block_release(v10);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_23D6DBC8C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static HandyLoggerNeo.detachLogger(_:)()
{
  uint64_t v0;

  return closure #1 in static HandyLoggerNeo.detachLogger(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23D6DBCBC()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t specialized closure #1 in static HandyLoggerNeo.detachAllLoggers()()
{
  if (one-time initialization token for _loggers != -1)
    swift_once();
  swift_beginAccess();
  static HandyLoggerNeo._loggers = MEMORY[0x24BEE4AF8];
  return swift_bridgeObjectRelease();
}

uint64_t sub_23D6DBD7C()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for HandyLoggerNeo()
{
  return objc_opt_self();
}

uint64_t outlined consume of LogArea(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 0x1A)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23D6DBE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 40) >= 0x1AuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = (v3 + 96) & ~v3;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  __swift_destroy_boxed_opaque_existential_0(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(*(unsigned int *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_DWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), v0 + v2, v0 + v3, *(_QWORD *)(v0 + ((v3 + 39) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23D6DBF54()
{
  return swift_deallocObject();
}

uint64_t outlined copy of LogArea(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 0x1A)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized closure #1 in static HandyLoggerNeo.flush()()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(uint64_t, uint64_t);

  if (one-time initialization token for _loggers != -1)
    swift_once();
  result = swift_beginAccess();
  v1 = static HandyLoggerNeo._loggers;
  v2 = *(_QWORD *)(static HandyLoggerNeo._loggers + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (uint64_t *)(v1 + 40);
    do
    {
      v4 = *v3;
      ObjectType = swift_getObjectType();
      v6 = *(void (**)(uint64_t, uint64_t))(v4 + 16);
      swift_unknownObjectRetain();
      v6(ObjectType, v4);
      swift_unknownObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23D6DC070()
{
  return swift_deallocObject();
}

uint64_t specialized closure #1 in static HandyLoggerNeo.clearLogs()()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(uint64_t, uint64_t);

  if (one-time initialization token for _loggers != -1)
    swift_once();
  result = swift_beginAccess();
  v1 = static HandyLoggerNeo._loggers;
  v2 = *(_QWORD *)(static HandyLoggerNeo._loggers + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (uint64_t *)(v1 + 40);
    do
    {
      v4 = *v3;
      ObjectType = swift_getObjectType();
      v6 = *(void (**)(uint64_t, uint64_t))(v4 + 24);
      swift_unknownObjectRetain();
      v6(ObjectType, v4);
      swift_unknownObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23D6DC158()
{
  return swift_deallocObject();
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v13;

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v3)
    return 0;
  v5 = (_QWORD *)result;
  v6 = 0;
  v7 = 0;
  while (v2[v6 + 4] != a2)
  {
    ++v7;
    v6 += 2;
    if (v3 == v7)
      return *(_QWORD *)(*(_QWORD *)result + 16);
  }
  v8 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  while (v8 != v3)
  {
    if (v8 >= v3)
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      return result;
    }
    v9 = v2[v6 + 6];
    if (v9 != a2)
    {
      if (v8 != v7)
      {
        if (v7 >= v3)
          goto LABEL_25;
        v10 = v2[v6 + 7];
        v13 = *(_OWORD *)&v2[2 * v7 + 4];
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
        v11 = &v2[2 * v7];
        v11[4] = v9;
        v11[5] = v10;
        result = swift_unknownObjectRelease();
        if (v8 >= v2[2])
          goto LABEL_26;
        *(_OWORD *)&v2[v6 + 6] = v13;
        result = swift_unknownObjectRelease();
        *v5 = v2;
      }
      if (__OFADD__(v7++, 1))
        goto LABEL_24;
      v3 = v2[2];
    }
LABEL_11:
    ++v8;
    v6 += 2;
  }
  return v7;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    result = MEMORY[0x242638C74](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x242638C74](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242638C68](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in static HandyLoggerNeo.attachLogger(_:)()
{
  uint64_t *v0;

  return closure #1 in static HandyLoggerNeo.attachLogger(_:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_23D6DC3F0()
{
  return swift_deallocObject();
}

uint64_t VideoDataStructs.WarperMeshData.warperMeshBin.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VideoDataStructs.WarperMeshData.arrivalTimeStamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void *VideoDataStructs.WarperMeshData.warperMeshBuffer.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

void *VideoDataStructs.WarperMeshData.warperMeshBufferSplitX.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 40);
  v2 = v1;
  return v1;
}

void *VideoDataStructs.WarperMeshData.warperMeshBufferSplitY.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 48);
  v2 = v1;
  return v1;
}

uint64_t VideoDataStructs.WarperMeshData.init(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  __CVBuffer *v14;
  CVBufferRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  CVBufferRef v20;
  uint64_t v21;
  char v22;

  v12 = *((_BYTE *)a2 + 8);
  v21 = *a2;
  v11 = v21;
  v22 = v12;
  v13 = swift_bridgeObjectRetain();
  v14 = WarperMeshCache.getWarperMesh(warperMeshData:cameraSource:)(v13, (uint64_t)&v21);
  v21 = v11;
  v22 = v12;
  v15 = WarperMeshCache.getWarperMeshSplit(warperMeshData:cameraSource:)(a1, (uint64_t)&v21);
  v17 = v16;
  swift_bridgeObjectRelease();
  result = swift_release();
  if ((unint64_t)v15 >= 2)
    v19 = v17;
  else
    v19 = 0;
  if ((unint64_t)v15 >= 2)
    v20 = v15;
  else
    v20 = 0;
  *a6 = a1;
  a6[1] = a3;
  a6[2] = a4;
  a6[3] = a5;
  a6[4] = (uint64_t)v14;
  a6[5] = (uint64_t)v20;
  a6[6] = v19;
  return result;
}

void destroy for VideoDataStructs.WarperMeshData(id *a1)
{
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for VideoDataStructs.WarperMeshData(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

uint64_t assignWithCopy for VideoDataStructs.WarperMeshData(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = v5;

  v7 = *(void **)(a1 + 40);
  v8 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 48);
  v11 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  v12 = v11;

  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for VideoDataStructs.WarperMeshData(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  v4 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  v5 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  return a1;
}

uint64_t getEnumTagSinglePayload for VideoDataStructs.WarperMeshData(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoDataStructs.WarperMeshData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoDataStructs.WarperMeshData()
{
  return &type metadata for VideoDataStructs.WarperMeshData;
}

_QWORD *initializeBufferWithCopyOfBuffer for Matrix3x3PB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    v6 = *(int *)(a3 + 52);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for Matrix3x3PB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 52);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for Matrix3x3PB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 52);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

_DWORD *assignWithCopy for Matrix3x3PB(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v4 = *(int *)(a3 + 52);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for Matrix3x3PB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 52);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Matrix3x3PB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 52);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Matrix3x3PB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6DCA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 52);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for Matrix3x3PB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6DCAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 52);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata accessor for Matrix3x3PB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for Matrix3x3PB);
}

uint64_t type metadata completion function for Matrix3x3PB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TransformMatrixPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (_OWORD *)((char *)a1 + v9);
    v11 = (_OWORD *)((char *)a2 + v9);
    v12 = type metadata accessor for Matrix3x3PB(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = v11[1];
      *v10 = *v11;
      v10[1] = v16;
      *((_DWORD *)v10 + 8) = *((_DWORD *)v11 + 8);
      v8((uint64_t *)((char *)v10 + *(int *)(v12 + 52)), (uint64_t *)((char *)v11 + *(int *)(v12 + 52)), v7);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = *(int *)(a3 + 24);
    v18 = (_DWORD *)((char *)a1 + v17);
    v19 = (_DWORD *)((char *)a2 + v17);
    v20 = type metadata accessor for Coordinate3DPB(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[2] = v19[2];
      v8((uint64_t *)((char *)v18 + *(int *)(v20 + 28)), (uint64_t *)((char *)v19 + *(int *)(v20 + 28)), v7);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t type metadata accessor for Coordinate3DPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for Coordinate3DPB);
}

uint64_t destroy for TransformMatrixPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Matrix3x3PB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    v10(v5 + *(int *)(v6 + 52), v4);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for Coordinate3DPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7 + *(int *)(v8 + 28), v4);
  return result;
}

char *initializeWithCopy for TransformMatrixPB(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Matrix3x3PB(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v14;
    *((_DWORD *)v9 + 8) = *((_DWORD *)v10 + 8);
    v7(&v9[*(int *)(v11 + 52)], &v10[*(int *)(v11 + 52)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for Coordinate3DPB(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_DWORD *)v16 + 2) = *((_DWORD *)v17 + 2);
    v7(&v16[*(int *)(v18 + 28)], &v17[*(int *)(v18 + 28)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

uint64_t assignWithCopy for TransformMatrixPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_DWORD *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;

  v6 = type metadata accessor for UnknownStorage();
  v27 = *(_QWORD *)(v6 - 8);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 24);
  v26(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for Matrix3x3PB(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      *(_DWORD *)v8 = *(_DWORD *)v9;
      *((_DWORD *)v8 + 1) = *((_DWORD *)v9 + 1);
      *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
      *((_DWORD *)v8 + 3) = *((_DWORD *)v9 + 3);
      *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
      *((_DWORD *)v8 + 5) = *((_DWORD *)v9 + 5);
      *((_DWORD *)v8 + 6) = *((_DWORD *)v9 + 6);
      *((_DWORD *)v8 + 7) = *((_DWORD *)v9 + 7);
      *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(&v8[*(int *)(v10 + 52)], &v9[*(int *)(v10 + 52)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v8, type metadata accessor for Matrix3x3PB);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *((_DWORD *)v8 + 1) = *((_DWORD *)v9 + 1);
  *((_DWORD *)v8 + 2) = *((_DWORD *)v9 + 2);
  *((_DWORD *)v8 + 3) = *((_DWORD *)v9 + 3);
  *((_DWORD *)v8 + 4) = *((_DWORD *)v9 + 4);
  *((_DWORD *)v8 + 5) = *((_DWORD *)v9 + 5);
  *((_DWORD *)v8 + 6) = *((_DWORD *)v9 + 6);
  *((_DWORD *)v8 + 7) = *((_DWORD *)v9 + 7);
  *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
  v26((uint64_t)&v8[*(int *)(v10 + 52)], (uint64_t)&v9[*(int *)(v10 + 52)], v6);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = (_DWORD *)(a1 + v16);
  v18 = (_DWORD *)(a2 + v16);
  v19 = type metadata accessor for Coordinate3DPB(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      *v17 = *v18;
      v17[1] = v18[1];
      v17[2] = v18[2];
      v26((uint64_t)v17 + *(int *)(v19 + 28), (uint64_t)v18 + *(int *)(v19 + 28), v6);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v17, type metadata accessor for Coordinate3DPB);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  *v17 = *v18;
  v17[1] = v18[1];
  v17[2] = v18[2];
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))((char *)v17 + *(int *)(v19 + 28), (char *)v18 + *(int *)(v19 + 28), v6);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t outlined destroy of Matrix3x3PB(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for TransformMatrixPB(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Matrix3x3PB(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = *((_OWORD *)v10 + 1);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v14;
    *((_DWORD *)v9 + 8) = *((_DWORD *)v10 + 8);
    v7(&v9[*(int *)(v11 + 52)], &v10[*(int *)(v11 + 52)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for Coordinate3DPB(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_DWORD *)v16 + 2) = *((_DWORD *)v17 + 2);
    v7(&v16[*(int *)(v18 + 28)], &v17[*(int *)(v18 + 28)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

uint64_t assignWithTake for TransformMatrixPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_DWORD *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  __int128 v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;

  v6 = type metadata accessor for UnknownStorage();
  v29 = *(_QWORD *)(v6 - 8);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 40);
  v28(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Matrix3x3PB(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v15 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v15;
      *(_DWORD *)(v8 + 32) = *(_DWORD *)(v9 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v8 + *(int *)(v10 + 52), v9 + *(int *)(v10 + 52), v6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of Matrix3x3PB(v8, type metadata accessor for Matrix3x3PB);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v27 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v27;
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(v9 + 32);
  v28(v8 + *(int *)(v10 + 52), v9 + *(int *)(v10 + 52), v6);
LABEL_7:
  v17 = *(int *)(a3 + 24);
  v18 = (_DWORD *)(a1 + v17);
  v19 = (_DWORD *)(a2 + v17);
  v20 = type metadata accessor for Coordinate3DPB(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[2] = v19[2];
      v28((uint64_t)v18 + *(int *)(v20 + 28), (uint64_t)v19 + *(int *)(v20 + 28), v6);
      return a1;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v18, type metadata accessor for Coordinate3DPB);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[2] = v19[2];
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v6);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformMatrixPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6DD724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for TransformMatrixPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6DD7D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for TransformMatrixPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TransformMatrixPB);
}

void type metadata completion function for TransformMatrixPB()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for Matrix3x3PB?, (void (*)(uint64_t))type metadata accessor for Matrix3x3PB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, (unint64_t *)&lazy cache variable for type metadata for Coordinate3DPB?, (void (*)(uint64_t))type metadata accessor for Coordinate3DPB);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Matrix3x3PB?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CMTimeProtobuf(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t initializeWithCopy for CMTimeProtobuf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for CMTimeProtobuf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for CMTimeProtobuf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for CMTimeProtobuf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CMTimeProtobuf()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CMTimeProtobuf()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for CMTimeProtobuf(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for CMTimeProtobuf);
}

uint64_t type metadata completion function for CMTimeProtobuf()
{
  return type metadata completion function for CMTimeProtobuf();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Matrix2dPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for Matrix2dPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for Matrix2dPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for Matrix2dPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for Matrix2dPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Matrix2dPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Matrix2dPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6DDF34(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Matrix2dPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D6DDFBC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for Matrix2dPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for Matrix2dPB);
}

uint64_t type metadata completion function for Matrix2dPB()
{
  return type metadata completion function for Matrix2dPB();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Coordinate3DPB(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v5 = *(int *)(a3 + 28);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for Coordinate3DPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for Coordinate3DPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for Coordinate3DPB(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for Coordinate3DPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for Coordinate3DPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Coordinate3DPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6DE2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for Coordinate3DPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6DE314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 28);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for Coordinate3DPB()
{
  return type metadata completion function for Matrix2dPB();
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Coordinate2DPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Coordinate2DPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "x";
  *(_QWORD *)(v7 + 8) = 1;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "y";
  *((_QWORD *)v11 + 1) = 1;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Coordinate3DPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Coordinate3DPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "x";
  *(_QWORD *)(v7 + 8) = 1;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "y";
  *((_QWORD *)v11 + 1) = 1;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "z";
  *(_QWORD *)(v12 + 8) = 1;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Matrix2dPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Matrix2dPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "vector";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "is_row_major";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "floatVector";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Matrix3x3PB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Matrix3x3PB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23D9A74B0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "e00";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v25 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "e01";
  *(_QWORD *)(v10 + 8) = 3;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v25 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "e02";
  *((_QWORD *)v12 + 1) = 3;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v25 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "e10";
  *((_QWORD *)v14 + 1) = 3;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v25 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "e11";
  *((_QWORD *)v16 + 1) = 3;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v25 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "e12";
  *((_QWORD *)v18 + 1) = 3;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v25 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "e20";
  *((_QWORD *)v20 + 1) = 3;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v25 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "e21";
  *((_QWORD *)v22 + 1) = 3;
  v22[16] = 2;
  v9();
  v23 = v25 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "e22";
  *(_QWORD *)(v23 + 8) = 3;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TransformMatrixPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TransformMatrixPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "rotation";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "translation";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CMTimeProtobuf._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CMTimeProtobuf._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "value";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "timescale";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static SimilarityMatrixCollectionPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static SimilarityMatrixCollectionPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A8140;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "similarityMatrix2d";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "similarityMatrix3d";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "similarityMatrixChiralityScore";
  *((_QWORD *)v13 + 1) = 30;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "similarityMatrixFeatureVector";
  *((_QWORD *)v15 + 1) = 29;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "similarityMatrixGlobal";
  *(_QWORD *)(v16 + 8) = 22;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingUpdateDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingUpdateDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_23D9A8150;
  v5 = v35 + v4;
  v6 = v35 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v35 + v4) = 1;
  *(_QWORD *)v6 = "handCenter";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "jointsUncertaintyAverage";
  *(_QWORD *)(v10 + 8) = 24;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "jointsBinnedConfidenceAverage";
  *((_QWORD *)v12 + 1) = 29;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "requiresAssociation";
  *((_QWORD *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "chiralityScoreForBuffer";
  *((_QWORD *)v16 + 1) = 23;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 7;
  *(_QWORD *)v18 = "arvinoJoints2d";
  *((_QWORD *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 8;
  *(_QWORD *)v20 = "cropBbox";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 9;
  *(_QWORD *)v22 = "isNotOnMargin";
  *((_QWORD *)v22 + 1) = 13;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 10;
  *(_QWORD *)v23 = "handIsLeft";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 11;
  *(_QWORD *)v25 = "isOnDriftMargin";
  *((_QWORD *)v25 + 1) = 15;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 12;
  *(_QWORD *)v27 = "isNulllIou";
  *((_QWORD *)v27 + 1) = 10;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 13;
  *(_QWORD *)v29 = "distanceToDCamera";
  *((_QWORD *)v29 + 1) = 17;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 14;
  *(_QWORD *)v31 = "handCenterDistanceImageCenter";
  *((_QWORD *)v31 + 1) = 29;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 15;
  *(_QWORD *)v33 = "optimalPoseSpecCameras";
  *((_QWORD *)v33 + 1) = 22;
  v33[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingIntermediateDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingIntermediateDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "similarityMatrixCollection";
  *(_QWORD *)(v7 + 8) = 26;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "dataAssociationResult";
  *((_QWORD *)v11 + 1) = 21;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "trackingUpdateData";
  *(_QWORD *)(v12 + 8) = 18;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CameraModel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CameraModel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "rectilinear";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "kannala";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CameraSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CameraSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_23D9A8150;
  v5 = v35 + v4;
  v6 = v35 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v35 + v4) = 0;
  *(_QWORD *)v6 = "sceneLeft";
  *(_QWORD *)(v6 + 8) = 9;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v35 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "sceneRight";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v35 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "downLeft";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v35 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "downRight";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v35 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "sideLeft";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v35 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "sideRight";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v35 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "jawLeft";
  *((_QWORD *)v20 + 1) = 7;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v35 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "jawRight";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  v23 = v35 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "pearlLeft";
  *(_QWORD *)(v23 + 8) = 9;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v35 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "pearlRight";
  *((_QWORD *)v25 + 1) = 10;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v35 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "metricDepth";
  *((_QWORD *)v27 + 1) = 11;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v35 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "semanticMask";
  *((_QWORD *)v29 + 1) = 12;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v35 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "objectInHandMask";
  *((_QWORD *)v31 + 1) = 16;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v35 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "genericCamera";
  *((_QWORD *)v33 + 1) = 13;
  v33[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v50;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static LastardesCameraSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static LastardesCameraSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_23D9A96E0;
  v5 = v50 + v4;
  v6 = v50 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v50 + v4) = 0;
  *(_QWORD *)v6 = "DOME_0";
  *(_QWORD *)(v6 + 8) = 6;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v50 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "DOME_1";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v50 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "DOME_2";
  *((_QWORD *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v50 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "DOME_3";
  *((_QWORD *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v50 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "DOME_4";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v50 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "DOME_5";
  *((_QWORD *)v18 + 1) = 6;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v50 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "DOME_6";
  *((_QWORD *)v20 + 1) = 6;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v50 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "DOME_7";
  *((_QWORD *)v22 + 1) = 6;
  v22[16] = 2;
  v9();
  v23 = v50 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "DOME_8";
  *(_QWORD *)(v23 + 8) = 6;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v50 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "DOME_9";
  *((_QWORD *)v25 + 1) = 6;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v50 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "DOME_10";
  *((_QWORD *)v27 + 1) = 7;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v50 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "DOME_11";
  *((_QWORD *)v29 + 1) = 7;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v50 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "MCAM_LEFT";
  *((_QWORD *)v31 + 1) = 9;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v50 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "MCAM_RIGHT";
  *((_QWORD *)v33 + 1) = 10;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v50 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "DCAM_LEFT";
  *((_QWORD *)v35 + 1) = 9;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v50 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "DCAM_RIGHT";
  *((_QWORD *)v37 + 1) = 10;
  v37[16] = 2;
  v9();
  v38 = v50 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 16;
  *(_QWORD *)v38 = "SCAM_LEFT";
  *(_QWORD *)(v38 + 8) = 9;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v50 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 17;
  *(_QWORD *)v40 = "SCAM_RIGHT";
  *((_QWORD *)v40 + 1) = 10;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v50 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 18;
  *(_QWORD *)v42 = "JCAM_LEFT";
  *((_QWORD *)v42 + 1) = 9;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v50 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 19;
  *(_QWORD *)v44 = "JCAM_RIGHT";
  *((_QWORD *)v44 + 1) = 10;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v50 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 20;
  *(_QWORD *)v46 = "ECAM_LEFT";
  *((_QWORD *)v46 + 1) = 9;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v50 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 21;
  *(_QWORD *)v48 = "ECAM_RIGHT";
  *((_QWORD *)v48 + 1) = 10;
  v48[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchOcclusionStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchOcclusionStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_23D9A8150;
  v5 = v35 + v4;
  v6 = v35 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v35 + v4) = 0;
  *(_QWORD *)v6 = "VISIBLE";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v35 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "OCCLUDED_BY_SELF";
  *(_QWORD *)(v10 + 8) = 16;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v35 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "OCCLUDED_BY_OBJECT";
  *((_QWORD *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v35 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "OCCLUDED_BY_OTHER_HAND";
  *((_QWORD *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v35 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "UNCERTAIN";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v35 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "MAKE_UNSURE";
  *((_QWORD *)v18 + 1) = 11;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v35 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "HOVER_DISTANCE_UNSURE";
  *((_QWORD *)v20 + 1) = 21;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v35 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "ROTATION_UNSURE";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v9();
  v23 = v35 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "UNCERTAIN_HOVER_DISTANCE";
  *(_QWORD *)(v23 + 8) = 24;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v35 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "UNSURE_NET";
  *((_QWORD *)v25 + 1) = 10;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v35 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "PINCH_CANCELLED";
  *((_QWORD *)v27 + 1) = 15;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v35 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "PINCH_BY_MEMORY";
  *((_QWORD *)v29 + 1) = 15;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v35 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = 0x23D9C7000;
  *((_QWORD *)v31 + 1) = 21;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v35 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "CONSECUTIVE_PINCH";
  *((_QWORD *)v33 + 1) = 17;
  v33[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchRecoveryStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchRecoveryStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "NOT_RECOVERY";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "SELECTION_IN_BREAK";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ObjectInteractionCategory._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ObjectInteractionCategory._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "NONE";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "GENERAL_OBJECT";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "PENCIL_OBJECT";
  *(_QWORD *)(v12 + 8) = 13;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ObjectInteractionStateStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ObjectInteractionStateStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "NO_INTERACTION";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "GENERAL_OBJECT_INTERACTION";
  *((_QWORD *)v11 + 1) = 26;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static EnrollmentResultsStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static EnrollmentResultsStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A96F0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "success";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "notEnrolled";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "inProgress";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "failed";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "failedHandsNotInMcamFov";
  *((_QWORD *)v17 + 1) = 23;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "fromManagedAssets";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v37;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandRejectionReason._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandRejectionReason._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_23D9A9700;
  v5 = v37 + v4;
  v6 = v37 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v37 + v4) = 0;
  *(_QWORD *)v6 = "UVO_BY_DEPTH";
  *(_QWORD *)(v6 + 8) = 12;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v37 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "UVO_BY_HAND_VECTOR";
  *(_QWORD *)(v10 + 8) = 18;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v37 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "UVO_TERMINATED";
  *((_QWORD *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v37 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "REPEATED_CHIRALITY";
  *((_QWORD *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v37 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "FOV_FILTER";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v37 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "TWO_HAND_OCCLUSION";
  *((_QWORD *)v18 + 1) = 18;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v37 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "GHOST_HAND";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v37 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "INITIALIZATION_FAILED";
  *((_QWORD *)v22 + 1) = 21;
  v22[16] = 2;
  v9();
  v23 = v37 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "POSE_SPEC_VISIBILITY";
  *(_QWORD *)(v23 + 8) = 20;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v37 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "ASSOCIATION_FAIL";
  *((_QWORD *)v25 + 1) = 16;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v37 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "DOUBLE_DETECTION";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v37 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "DISTANCE_FILTER";
  *((_QWORD *)v29 + 1) = 15;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v37 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "CLOSE_TO_HMD";
  *((_QWORD *)v31 + 1) = 12;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v37 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "PARTIALLY_OUT_OF_FOV";
  *((_QWORD *)v33 + 1) = 20;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v37 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "WRIST_UNCERTAINTY";
  *((_QWORD *)v35 + 1) = 17;
  v35[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandFilteredOutReason._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandFilteredOutReason._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A8140;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UNKNOWN_FILTERED_OUT_REASON";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "HAND_CLOSE_TO_HMD";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "HAND_FAR_FROM_HMD";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "HAND_PARTIALLY_OUT_OF_FOV";
  *((_QWORD *)v15 + 1) = 25;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "HAND_TRACKING_HEALTH_SCORE_IS_LOW";
  *(_QWORD *)(v16 + 8) = 33;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CanonicalizationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CanonicalizationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "Detection";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "Pose";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "Nocanonicalization";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "X";
  *((_QWORD *)v15 + 1) = 1;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MiddleDoubleTapSuppressorId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MiddleDoubleTapSuppressorId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9710;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "INDEX_FINGER_PROXIMITY";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "RING_FINGER_PROXIMITY";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "MANIPULATING_OBJECT";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "INVALID_HAND_POSE";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "HAND_IN_MOTION";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "RESTING_GESTURE";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "JOINT_UNCERTAINTY";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "JOINT_OCCLUSION";
  *((_QWORD *)v23 + 1) = 15;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "PALM_DIRECTION";
  *(_QWORD *)(v24 + 8) = 14;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "CAMERA_FOV";
  *((_QWORD *)v26 + 1) = 10;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "HAND_TOO_FAR";
  *((_QWORD *)v28 + 1) = 12;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v6 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "UNKNOWN";
  *((_QWORD *)v30 + 1) = 7;
  v30[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PotentialMissedScrollStates._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PotentialMissedScrollStates._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9710;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "mDefault";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "mFirstFrameIsTouch";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "mLowRawScore";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "mLargeHdCondition";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "mObjectInHand";
  *((_QWORD *)v17 + 1) = 13;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "mNotConsecutiveMiss";
  *((_QWORD *)v19 + 1) = 19;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "mFullyOccluded";
  *((_QWORD *)v21 + 1) = 14;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "mInvalidDuration";
  *((_QWORD *)v23 + 1) = 16;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "mMovingAlongZ";
  *(_QWORD *)(v24 + 8) = 13;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "mSmallMakeRange";
  *((_QWORD *)v26 + 1) = 15;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "mPotentialMissedScroll";
  *((_QWORD *)v28 + 1) = 22;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v6 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "mMissedScroll";
  *((_QWORD *)v30 + 1) = 13;
  v30[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PotentialMissedPinchStates._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PotentialMissedPinchStates._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9710;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "pmDefault";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "pmFirstFrameIsTouch";
  *(_QWORD *)(v11 + 8) = 19;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "pmLowRawScore";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "pmLargeHdCondition";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "pmObjectInHand";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "pmNotConsecutiveMiss";
  *((_QWORD *)v19 + 1) = 20;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "pmFullyOccluded";
  *((_QWORD *)v21 + 1) = 15;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "pmInvalidDuration";
  *((_QWORD *)v23 + 1) = 17;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "pmMovingAlongZ";
  *(_QWORD *)(v24 + 8) = 14;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "pmSmallMakeRange";
  *((_QWORD *)v26 + 1) = 16;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "pmPotentialMissedPinch";
  *((_QWORD *)v28 + 1) = 22;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v6 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "pmMissedPinch";
  *((_QWORD *)v30 + 1) = 13;
  v30[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PotentialMissedScrollBreakStates._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PotentialMissedScrollBreakStates._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9720;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "bDefault";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "bRecentPinched";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "bSmallBreakRange";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "bSmallHDIncrease";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "bTipOccluded";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "bPotentialMissedScroll";
  *((_QWORD *)v19 + 1) = 22;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "bMissedScroll";
  *((_QWORD *)v21 + 1) = 13;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PotentialMissedPinchBreakStates._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PotentialMissedPinchBreakStates._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9720;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "pbDefault";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "pbRecentPinched";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "pbSmallBreakRange";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "pbSmallHDIncrease";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "pbTipOccluded";
  *((_QWORD *)v17 + 1) = 13;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "pbPotentialMissedPinch";
  *((_QWORD *)v19 + 1) = 22;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "pbMissedPinch";
  *((_QWORD *)v21 + 1) = 13;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  char *v36;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ScrollDetectorForRecoveryStates._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ScrollDetectorForRecoveryStates._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9700;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "sDefault";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "sZeroFrames";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "sShortPinchCentroidMovement";
  *((_QWORD *)v13 + 1) = 27;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "sShortPinkyKnuckleMovement";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "sInvalidDuration";
  *((_QWORD *)v17 + 1) = 16;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "sFewPinchFrames";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "sSlowMoveSpeed";
  *((_QWORD *)v21 + 1) = 14;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "sSmallWristRatio";
  *((_QWORD *)v23 + 1) = 16;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "sDirectionChanged";
  *(_QWORD *)(v24 + 8) = 17;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "sIsScroll";
  *((_QWORD *)v26 + 1) = 9;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "sIsWristScroll";
  *((_QWORD *)v28 + 1) = 14;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v6 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "sIsArmScroll";
  *((_QWORD *)v30 + 1) = 12;
  v30[16] = 2;
  v10();
  v31 = (_QWORD *)(v6 + 12 * v3);
  v32 = (char *)v31 + *(int *)(v1 + 48);
  *v31 = 12;
  *(_QWORD *)v32 = "sInvalidDurationArmScroll";
  *((_QWORD *)v32 + 1) = 25;
  v32[16] = 2;
  v10();
  v33 = (_QWORD *)(v6 + 13 * v3);
  v34 = (char *)v33 + *(int *)(v1 + 48);
  *v33 = 13;
  *(_QWORD *)v34 = "sLargeWristRoll";
  *((_QWORD *)v34 + 1) = 15;
  v34[16] = 2;
  v10();
  v35 = (_QWORD *)(v6 + 14 * v3);
  v36 = (char *)v35 + *(int *)(v1 + 48);
  *v35 = 14;
  *(_QWORD *)v36 = "sLargeWristPitch";
  *((_QWORD *)v36 + 1) = 16;
  v36[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TapDetectorForRecoveryStates._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TapDetectorForRecoveryStates._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7040;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "tDefault";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "tZeroFrames";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "tLargePinchCentroidMovement";
  *((_QWORD *)v13 + 1) = 27;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "tLargePinkyKnuckleMovement";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "tLongDuration";
  *((_QWORD *)v17 + 1) = 13;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "tIsTap";
  *((_QWORD *)v19 + 1) = 6;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "tLargeHoverDistance";
  *((_QWORD *)v21 + 1) = 19;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "tLargeHDVectorDiffAngle";
  *((_QWORD *)v23 + 1) = 23;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static RecoverScrollStates._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static RecoverScrollStates._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A8150;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "rDefault";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "rObjectInHand";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "rNotInRecoveryMode";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "rFullyOccluded";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "rDifferentMovingDirection";
  *((_QWORD *)v17 + 1) = 25;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "rDifferentPalmOrientation";
  *((_QWORD *)v19 + 1) = 25;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "rLargeHdCondition";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "rLowRawScore";
  *((_QWORD *)v23 + 1) = 12;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "rSmallMakeRange";
  *(_QWORD *)(v24 + 8) = 15;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "rDifferentHd";
  *((_QWORD *)v26 + 1) = 12;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "rDifferentLocation";
  *((_QWORD *)v28 + 1) = 18;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v6 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "rDifferentRejectReason";
  *((_QWORD *)v30 + 1) = 22;
  v30[16] = 2;
  v10();
  v31 = (_QWORD *)(v6 + 12 * v3);
  v32 = (char *)v31 + *(int *)(v1 + 48);
  *v31 = 12;
  *(_QWORD *)v32 = "rRecoverScroll";
  *((_QWORD *)v32 + 1) = 14;
  v32[16] = 2;
  v10();
  v33 = (_QWORD *)(v6 + 13 * v3);
  v34 = (char *)v33 + *(int *)(v1 + 48);
  *v33 = 13;
  *(_QWORD *)v34 = "rRecentlyPinched";
  *((_QWORD *)v34 + 1) = 16;
  v34[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static RecoverPinchStates._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static RecoverPinchStates._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9730;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "rpDefault";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "rpObjectInHand";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "rpNotInRecoveryMode";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "rpFullyOccluded";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "rpDifferentMovingDirection";
  *((_QWORD *)v17 + 1) = 26;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "rpDifferentPalmOrientation";
  *((_QWORD *)v19 + 1) = 26;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "rpLargeHdCondition";
  *((_QWORD *)v21 + 1) = 18;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "rpLowRawScore";
  *((_QWORD *)v23 + 1) = 13;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "rpSmallMakeRange";
  *(_QWORD *)(v24 + 8) = 16;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "rpDifferentHd";
  *((_QWORD *)v26 + 1) = 13;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "rpDifferentLocation";
  *((_QWORD *)v28 + 1) = 19;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v6 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "rpDifferentRejectReason";
  *((_QWORD *)v30 + 1) = 23;
  v30[16] = 2;
  v10();
  v31 = (_QWORD *)(v6 + 12 * v3);
  v32 = (char *)v31 + *(int *)(v1 + 48);
  *v31 = 12;
  *(_QWORD *)v32 = "rpDifferentPinchCentroid";
  *((_QWORD *)v32 + 1) = 24;
  v32[16] = 2;
  v10();
  v33 = (_QWORD *)(v6 + 13 * v3);
  v34 = (char *)v33 + *(int *)(v1 + 48);
  *v33 = 13;
  *(_QWORD *)v34 = "rpRecentlyPinched";
  *((_QWORD *)v34 + 1) = 17;
  v34[16] = 2;
  v10();
  v35 = (_QWORD *)(v6 + 14 * v3);
  v36 = (char *)v35 + *(int *)(v1 + 48);
  *v35 = 14;
  *(_QWORD *)v36 = "rpRecoverScroll";
  *((_QWORD *)v36 + 1) = 15;
  v36[16] = 2;
  v10();
  v37 = (_QWORD *)(v6 + 15 * v3);
  v38 = (char *)v37 + *(int *)(v1 + 48);
  *v37 = 15;
  *(_QWORD *)v38 = "rpRecoverTap";
  *((_QWORD *)v38 + 1) = 12;
  v38[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v39;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchInternalDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchInternalDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_23D9A9730;
  v5 = v39 + v4;
  v6 = v39 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v39 + v4) = 1;
  *(_QWORD *)v6 = "score";
  *(_QWORD *)(v6 + 8) = 5;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "score_raw";
  *(_QWORD *)(v10 + 8) = 9;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "neg";
  *((_QWORD *)v12 + 1) = 3;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "pinch_down_raw";
  *((_QWORD *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "occlusion_status";
  *((_QWORD *)v16 + 1) = 16;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "score_aheads";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "search_make_thresholds";
  *((_QWORD *)v20 + 1) = 22;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "search_break_thresholds";
  *((_QWORD *)v22 + 1) = 23;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "search_tnt_states";
  *(_QWORD *)(v23 + 8) = 17;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "unsure_net_score";
  *((_QWORD *)v25 + 1) = 16;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "object_interaction_block_active";
  *((_QWORD *)v27 + 1) = 31;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "experimental_signals";
  *((_QWORD *)v29 + 1) = 20;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "pinch_recovery_status";
  *((_QWORD *)v31 + 1) = 21;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "pinch_delay_in_break";
  *((_QWORD *)v33 + 1) = 20;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "cancellation_score";
  *((_QWORD *)v35 + 1) = 18;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "break_score";
  *((_QWORD *)v37 + 1) = 11;
  v37[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchMakeSourcePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchMakeSourcePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7040;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PINCH_MAKE_FROM_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PINCH_MAKE_FROM_ACTION";
  *(_QWORD *)(v11 + 8) = 22;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PINCH_MAKE_FROM_SCROLL_RECOVERY";
  *((_QWORD *)v13 + 1) = 31;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PINCH_MAKE_FROM_SELECTION_IN_BREAK";
  *((_QWORD *)v15 + 1) = 34;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "PINCH_MAKE_FROM_CONSECUTIVE_PINCH_MAKE";
  *((_QWORD *)v17 + 1) = 38;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "PINCH_MAKE_FROM_REPETITIVE_PINCH_RECOVERY";
  *((_QWORD *)v19 + 1) = 41;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "PINCH_MAKE_FROM_OBJECT_INTERACTION_STATE";
  *((_QWORD *)v21 + 1) = 40;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "PINCH_MAKE_FROM_HOME_USER_INTERFACE";
  *((_QWORD *)v23 + 1) = 35;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchBreakSourcePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchBreakSourcePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7040;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PINCH_BREAK_FROM_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PINCH_BREAK_FROM_ACTION";
  *(_QWORD *)(v11 + 8) = 23;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PINCH_BREAK_FROM_SCROLL_BREAK";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PINCH_BREAK_FROM_CONSECUTIVE_PINCH_BREAK";
  *((_QWORD *)v15 + 1) = 40;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "PINCH_BREAK_FROM_CANCELLATION";
  *((_QWORD *)v17 + 1) = 29;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "PINCH_BREAK_FROM_SELECTION_IN_BREAK";
  *((_QWORD *)v19 + 1) = 35;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "PINCH_BREAK_FROM_OBJECT_INTERACTION_STATE";
  *((_QWORD *)v21 + 1) = 41;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "PINCH_BREAK_FROM_HOME_USER_INTERFACE";
  *((_QWORD *)v23 + 1) = 36;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchMakeRejectorPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchMakeRejectorPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A96F0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PINCH_MAKE_REJECTED_BY_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 30;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PINCH_MAKE_REJECTED_BY_UNSURENET";
  *(_QWORD *)(v11 + 8) = 32;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PINCH_MAKE_REJECTED_BY_OBJECT_IN_HAND";
  *((_QWORD *)v13 + 1) = 37;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PINCH_MAKE_REJECTED_BY_TWO_HAND_OCCLUSION";
  *((_QWORD *)v15 + 1) = 41;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "PINCH_MAKE_REJECTED_BY_OBJECT_INTERACTION_STATE";
  *((_QWORD *)v17 + 1) = 47;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "PINCH_MAKE_REJECTED_BY_OBJECT_IN_HAND_CORE_ANALYTICS";
  *((_QWORD *)v19 + 1) = 52;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchBreakRejectorPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchBreakRejectorPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "PINCH_BREAK_REJECTED_BY_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 31;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "PINCH_BREAK_REJECTED_BY_UNSURENET";
  *((_QWORD *)v11 + 1) = 33;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "PINCH_BREAK_REJECTED_BY_TWO_HAND_OCCLUSION";
  *(_QWORD *)(v12 + 8) = 42;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchGestureStatusPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchGestureStatusPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PINCH_GESTURE_UNDECIDED";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PINCH_GESTURE_OTHERS";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PINCH_GESTURE_TAP";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PINCH_GESTURE_SWIPE";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchStatusPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchStatusPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "pinch_make_source";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "pinch_break_source";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "pinch_make_rejector";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "pinch_break_rejector";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchInfoPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchInfoPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "pinch_status";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "pinch_gesture_status";
  *((_QWORD *)v11 + 1) = 20;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PoseFAResultRowValidity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PoseFAResultRowValidity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "None";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "OnlyGroundTruthPose";
  *(_QWORD *)(v11 + 8) = 19;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "OnlyPredictedHandPose";
  *((_QWORD *)v13 + 1) = 21;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ValidForPoseMetrics";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ObjectInteractionFADataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ObjectInteractionFADataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9AC830;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "gt";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "category";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "score_general";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "score_pencil";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "binned_general";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "binned_pencil";
  *((_QWORD *)v19 + 1) = 13;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "high_confidence_general";
  *((_QWORD *)v21 + 1) = 23;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "high_confidence_pencil";
  *((_QWORD *)v23 + 1) = 22;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 9;
  *(_QWORD *)v24 = "break_delay_active_general";
  *(_QWORD *)(v24 + 8) = 26;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 10;
  *(_QWORD *)v26 = "break_delay_active_pencil";
  *((_QWORD *)v26 + 1) = 25;
  v26[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  uint64_t v121;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandsFAResultRowPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandsFAResultRowPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v121 = swift_allocObject();
  *(_OWORD *)(v121 + 16) = xmmword_23D9AD7E0;
  v5 = v121 + v4;
  v6 = v121 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v121 + v4) = 1;
  *(_QWORD *)v6 = "sequence_id";
  *(_QWORD *)(v6 + 8) = 11;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v121 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "source_id";
  *(_QWORD *)(v10 + 8) = 9;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v121 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "validity";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v121 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "gt_is_left";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v121 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "gt_hand_grade";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v121 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "gt_camera_distance";
  *((_QWORD *)v18 + 1) = 18;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v121 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "gt_joints_in_fov";
  *((_QWORD *)v20 + 1) = 16;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v121 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "gt_hover_distance";
  *((_QWORD *)v22 + 1) = 17;
  v22[16] = 2;
  v9();
  v23 = v121 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "gt_action_hand";
  *(_QWORD *)(v23 + 8) = 14;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v121 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "hand_center_distance";
  *((_QWORD *)v25 + 1) = 20;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v121 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "joints";
  *((_QWORD *)v27 + 1) = 6;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v121 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "pinch_down";
  *((_QWORD *)v29 + 1) = 10;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v121 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "world_pose_transform";
  *((_QWORD *)v31 + 1) = 20;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v121 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "stereo_pair_true";
  *((_QWORD *)v33 + 1) = 16;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v121 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "stereo_pair_false";
  *((_QWORD *)v35 + 1) = 17;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v121 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "gesture";
  *((_QWORD *)v37 + 1) = 7;
  v37[16] = 2;
  v9();
  v38 = v121 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "grade_approval";
  *(_QWORD *)(v38 + 8) = 14;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v121 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "mesh_tnt_finger_label";
  *((_QWORD *)v40 + 1) = 21;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v121 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "gt_quality_0";
  *((_QWORD *)v42 + 1) = 12;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v121 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "gt_quality_1";
  *((_QWORD *)v44 + 1) = 12;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v121 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "good_pose_two_views";
  *((_QWORD *)v46 + 1) = 19;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v121 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "visible_manual_two_views";
  *((_QWORD *)v48 + 1) = 24;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v121 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "hand_in_m_cam";
  *((_QWORD *)v50 + 1) = 13;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v121 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 24;
  *(_QWORD *)v52 = "motion_speed";
  *((_QWORD *)v52 + 1) = 12;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v121 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 25;
  *(_QWORD *)v54 = "hand_fully_in_fov";
  *((_QWORD *)v54 + 1) = 17;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v121 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 26;
  *(_QWORD *)v56 = "gesture_video_id";
  *((_QWORD *)v56 + 1) = 16;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v121 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 27;
  *(_QWORD *)v58 = "predicted_hand_is_left";
  *((_QWORD *)v58 + 1) = 22;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v121 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 28;
  *(_QWORD *)v60 = "hand_center";
  *((_QWORD *)v60 + 1) = 11;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v121 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 29;
  *(_QWORD *)v62 = "hand_size";
  *((_QWORD *)v62 + 1) = 9;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v121 + v4 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 30;
  *(_QWORD *)v64 = "hover_uncertainty";
  *((_QWORD *)v64 + 1) = 17;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v121 + v4 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 31;
  *(_QWORD *)v66 = "up_vector";
  *((_QWORD *)v66 + 1) = 9;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v121 + v4 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 32;
  *(_QWORD *)v68 = "primary_camera_id";
  *((_QWORD *)v68 + 1) = 17;
  v68[16] = 2;
  v9();
  v69 = v121 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 33;
  *(_QWORD *)v69 = "secondary_camera_id";
  *(_QWORD *)(v69 + 8) = 19;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v121 + v4 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 34;
  *(_QWORD *)v71 = "calibrations";
  *((_QWORD *)v71 + 1) = 12;
  v71[16] = 2;
  v9();
  v72 = (_QWORD *)(v121 + v4 + 34 * v3);
  v73 = (char *)v72 + *(int *)(v1 + 48);
  *v72 = 35;
  *(_QWORD *)v73 = "pinch_internal_data";
  *((_QWORD *)v73 + 1) = 19;
  v73[16] = 2;
  v9();
  v74 = (_QWORD *)(v121 + v4 + 35 * v3);
  v75 = (char *)v74 + *(int *)(v1 + 48);
  *v74 = 36;
  *(_QWORD *)v75 = "scheduled_detection";
  *((_QWORD *)v75 + 1) = 19;
  v75[16] = 2;
  v9();
  v76 = (_QWORD *)(v121 + v4 + 36 * v3);
  v77 = (char *)v76 + *(int *)(v1 + 48);
  *v76 = 37;
  *(_QWORD *)v77 = "dt_hover_distance";
  *((_QWORD *)v77 + 1) = 17;
  v77[16] = 2;
  v9();
  v78 = (_QWORD *)(v121 + v4 + 37 * v3);
  v79 = (char *)v78 + *(int *)(v1 + 48);
  *v78 = 38;
  *(_QWORD *)v79 = "object_interaction_data";
  *((_QWORD *)v79 + 1) = 23;
  v79[16] = 2;
  v9();
  v80 = (_QWORD *)(v121 + v4 + 38 * v3);
  v81 = (char *)v80 + *(int *)(v1 + 48);
  *v80 = 39;
  *(_QWORD *)v81 = "hand_presence_score";
  *((_QWORD *)v81 + 1) = 19;
  v81[16] = 2;
  v9();
  v82 = (_QWORD *)(v121 + v4 + 39 * v3);
  v83 = (char *)v82 + *(int *)(v1 + 48);
  *v82 = 40;
  *(_QWORD *)v83 = "hand_presence_class";
  *((_QWORD *)v83 + 1) = 19;
  v83[16] = 2;
  v9();
  v84 = (_QWORD *)(v121 + v4 + 40 * v3);
  v85 = (char *)v84 + *(int *)(v1 + 48);
  *v84 = 41;
  *(_QWORD *)v85 = "detection_3_d_hand_center";
  *((_QWORD *)v85 + 1) = 25;
  v85[16] = 2;
  v9();
  v86 = (_QWORD *)(v121 + v4 + 41 * v3);
  v87 = (char *)v86 + *(int *)(v1 + 48);
  *v86 = 42;
  *(_QWORD *)v87 = "predicted_3_d_hand_center";
  *((_QWORD *)v87 + 1) = 25;
  v87[16] = 2;
  v9();
  v88 = (_QWORD *)(v121 + v4 + 42 * v3);
  v89 = (char *)v88 + *(int *)(v1 + 48);
  *v88 = 43;
  *(_QWORD *)v89 = "detection_specs";
  *((_QWORD *)v89 + 1) = 15;
  v89[16] = 2;
  v9();
  v90 = (_QWORD *)(v121 + v4 + 43 * v3);
  v91 = (char *)v90 + *(int *)(v1 + 48);
  *v90 = 44;
  *(_QWORD *)v91 = "crop_bounding_box";
  *((_QWORD *)v91 + 1) = 17;
  v91[16] = 2;
  v9();
  v92 = (_QWORD *)(v121 + v4 + 44 * v3);
  v93 = (char *)v92 + *(int *)(v1 + 48);
  *v92 = 45;
  *(_QWORD *)v93 = "tracking_health_score";
  *((_QWORD *)v93 + 1) = 21;
  v93[16] = 2;
  v9();
  v94 = (_QWORD *)(v121 + v4 + 45 * v3);
  v95 = (char *)v94 + *(int *)(v1 + 48);
  *v94 = 46;
  *(_QWORD *)v95 = "timestamp";
  *((_QWORD *)v95 + 1) = 9;
  v95[16] = 2;
  v9();
  v96 = (_QWORD *)(v121 + v4 + 46 * v3);
  v97 = (char *)v96 + *(int *)(v1 + 48);
  *v96 = 47;
  *(_QWORD *)v97 = "middle_double_tap";
  *((_QWORD *)v97 + 1) = 17;
  v97[16] = 2;
  v9();
  v98 = (_QWORD *)(v121 + v4 + 47 * v3);
  v99 = (char *)v98 + *(int *)(v1 + 48);
  *v98 = 48;
  *(_QWORD *)v99 = "middle_double_tap_internal_data";
  *((_QWORD *)v99 + 1) = 31;
  v99[16] = 2;
  v9();
  v100 = (_QWORD *)(v121 + v4 + 48 * v3);
  v101 = (char *)v100 + *(int *)(v1 + 48);
  *v100 = 49;
  *(_QWORD *)v101 = "cancellation_reason";
  *((_QWORD *)v101 + 1) = 19;
  v101[16] = 2;
  v9();
  v102 = (_QWORD *)(v121 + v4 + 49 * v3);
  v103 = (char *)v102 + *(int *)(v1 + 48);
  *v102 = 50;
  *(_QWORD *)v103 = "gt_visibility";
  *((_QWORD *)v103 + 1) = 13;
  v103[16] = 2;
  v9();
  v104 = (_QWORD *)(v121 + v4 + 50 * v3);
  v105 = (char *)v104 + *(int *)(v1 + 48);
  *v104 = 52;
  *(_QWORD *)v105 = "pinch_info";
  *((_QWORD *)v105 + 1) = 10;
  v105[16] = 2;
  v9();
  v106 = (_QWORD *)(v121 + v4 + 51 * v3);
  v107 = (char *)v106 + *(int *)(v1 + 48);
  *v106 = 53;
  *(_QWORD *)v107 = "action_internal";
  *((_QWORD *)v107 + 1) = 15;
  v107[16] = 2;
  v9();
  v108 = (_QWORD *)(v121 + v4 + 52 * v3);
  v109 = (char *)v108 + *(int *)(v1 + 48);
  *v108 = 54;
  *(_QWORD *)v109 = "unsure_internal";
  *((_QWORD *)v109 + 1) = 15;
  v109[16] = 2;
  v9();
  v110 = (_QWORD *)(v121 + v4 + 53 * v3);
  v111 = (char *)v110 + *(int *)(v1 + 48);
  *v110 = 55;
  *(_QWORD *)v111 = "recover_repetitive_pinch_internal";
  *((_QWORD *)v111 + 1) = 33;
  v111[16] = 2;
  v9();
  v112 = (_QWORD *)(v121 + v4 + 54 * v3);
  v113 = (char *)v112 + *(int *)(v1 + 48);
  *v112 = 56;
  *(_QWORD *)v113 = "object_interaction_state_internal";
  *((_QWORD *)v113 + 1) = 33;
  v113[16] = 2;
  v9();
  v114 = (_QWORD *)(v121 + v4 + 55 * v3);
  v115 = (char *)v114 + *(int *)(v1 + 48);
  *v114 = 57;
  *(_QWORD *)v115 = "object_interaction_state_status";
  *((_QWORD *)v115 + 1) = 31;
  v115[16] = 2;
  v9();
  v116 = (_QWORD *)(v121 + v4 + 56 * v3);
  v117 = (char *)v116 + *(int *)(v1 + 48);
  *v116 = 58;
  *(_QWORD *)v117 = "home_pinch_internal";
  *((_QWORD *)v117 + 1) = 19;
  v117[16] = 2;
  v9();
  v118 = (_QWORD *)(v121 + v4 + 57 * v3);
  v119 = (char *)v118 + *(int *)(v1 + 48);
  *v118 = 59;
  *(_QWORD *)v119 = "pinch_down_home_user_interface";
  *((_QWORD *)v119 + 1) = 30;
  v119[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandsFAResultTablePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandsFAResultTablePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23D9A70A0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "rows";
  *(_QWORD *)(v5 + 8) = 4;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingFAInternalFramePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingFAInternalFramePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "source_id";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "rejectedHands";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingFAInternalDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingFAInternalDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "sequence_id";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "frames";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static LogMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static LogMessage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9720;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "time";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "filePath";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "lineNum";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "logArea";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "level";
  *((_QWORD *)v17 + 1) = 5;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "strMsg";
  *((_QWORD *)v19 + 1) = 6;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "pbMsg";
  *((_QWORD *)v21 + 1) = 5;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static LogMessageBundle._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static LogMessageBundle._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23D9A70A0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "messages";
  *(_QWORD *)(v5 + 8) = 8;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingDataBlobPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingDataBlobPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A96F0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "handsKitData";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "trackingInfos";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "intermediateData";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "schedulingData";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "state";
  *((_QWORD *)v17 + 1) = 5;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "detectionSpec";
  *((_QWORD *)v19 + 1) = 13;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingModuleIOPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingModuleIOPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "frameID";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "input";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "output";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingModuleTestBundlePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingModuleTestBundlePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "module";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "description";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 4;
  *(_QWORD *)v12 = "testVector";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static SequenceFrameDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static SequenceFrameDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "frameID";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "moduleData";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingSequenceTestDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingSequenceTestDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "description";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 3;
  *(_QWORD *)v11 = "testVector";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ImageExpirationEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ImageExpirationEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "masterCameraTimestamp";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "camera";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "currentTime";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "imageExpirationTime";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandsKitPipelineEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandsKitPipelineEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "systemTime";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "eventType";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "pipelineType";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "graphName";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandsKitPipelineEvent.EventType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandsKitPipelineEvent.EventType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "Reconfig";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "Init";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "Deinit";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandsKitPipelineEvent.PipelineType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandsKitPipelineEvent.PipelineType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "handsGraph";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "standalone";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CalibrationUpdateEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CalibrationUpdateEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A8140;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "arrivalTimeStamp";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "camera";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "intrinsics";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "extrinsics";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "isWarperMeshUpdated";
  *(_QWORD *)(v16 + 8) = 19;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static InputFrameDropEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static InputFrameDropEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "masterCameraTimestamp";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "secsSinceLastFrame";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PrewittPowerChangeEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PrewittPowerChangeEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "masterCameraTimestamp";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "prewittCurrent";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "prewittPulseWidth";
  *(_QWORD *)(v12 + 8) = 17;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PipelineStatisticsLogging._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PipelineStatisticsLogging._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9AC830;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "fps";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 12;
  *(_QWORD *)v11 = "latencyAvg";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 13;
  *(_QWORD *)v13 = "latencyMax";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "numOfFrame";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "numFramesExceedDDL";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "maxCameraTSDelta";
  *((_QWORD *)v19 + 1) = 16;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "numFramesExceedCameraTSDeltaThres";
  *((_QWORD *)v21 + 1) = 33;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "detectionHasRun";
  *((_QWORD *)v23 + 1) = 15;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "poseHasRun";
  *(_QWORD *)(v24 + 8) = 10;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 11;
  *(_QWORD *)v26 = "averagePrewittStregth";
  *((_QWORD *)v26 + 1) = 21;
  v26[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandStatisticsLogging._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandStatisticsLogging._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7040;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "detectedInCamStats";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "poseStats";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 6;
  *(_QWORD *)v13 = "requestDetectionStats";
  *((_QWORD *)v13 + 1) = 21;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "HPStats";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 8;
  *(_QWORD *)v17 = "rejectionCount";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 4;
  *(_QWORD *)v19 = "countNum";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 5;
  *(_QWORD *)v21 = "pinchCount";
  *((_QWORD *)v21 + 1) = 10;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "cameraTransitionCount";
  *((_QWORD *)v23 + 1) = 21;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static RecoverRepetitivePinchInternalDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static RecoverRepetitivePinchInternalDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A96F0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 7;
  *(_QWORD *)v7 = "missed_pinch_state";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 8;
  *(_QWORD *)v11 = "missed_pinch_by_break_state";
  *(_QWORD *)(v11 + 8) = 27;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 12;
  *(_QWORD *)v13 = "generic_pinch";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 13;
  *(_QWORD *)v15 = "scroll_data";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 14;
  *(_QWORD *)v17 = "tap_data";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 15;
  *(_QWORD *)v19 = "pinch_data";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static RecoverRepetitivePinchInternalDataPB.RecoveryGestureDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "recovery_state";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "analytics_data";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MissedPinchStatePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MissedPinchStatePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 4;
  *(_QWORD *)v7 = "potential_missed_pinch_state";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 5;
  *(_QWORD *)v11 = "scroll_detector_state";
  *((_QWORD *)v11 + 1) = 21;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 6;
  *(_QWORD *)v12 = "tap_detector_state";
  *(_QWORD *)(v12 + 8) = 18;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchRecoveryAnalyticsDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchRecoveryAnalyticsDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "make_frame_timestamp";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "break_frame_timestamp";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "make_frame_source_id";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "break_frame_source_id";
  *((_QWORD *)v15 + 1) = 21;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MissedPinchByBreakStatePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MissedPinchByBreakStatePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "potentialMissedPinchBreakState";
  *(_QWORD *)(v7 + 8) = 30;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "scrollDetectorState";
  *((_QWORD *)v11 + 1) = 19;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "tapDetectorState";
  *(_QWORD *)(v12 + 8) = 16;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v42;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PoseModelIOData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PoseModelIOData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_23D9B3F10;
  v5 = v42 + v4;
  v6 = v42 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v42 + v4) = 1;
  *(_QWORD *)v6 = "mainImageCrop";
  *(_QWORD *)(v6 + 8) = 13;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "secondaryImageCrop";
  *(_QWORD *)(v10 + 8) = 18;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "camerasIntrinsicsSampled";
  *((_QWORD *)v12 + 1) = 24;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "localizerMatricesSampled";
  *((_QWORD *)v14 + 1) = 24;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "globalCenter3d";
  *((_QWORD *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "transformsArvino";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "cameraArvino";
  *((_QWORD *)v20 + 1) = 12;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "jointsUncertainty";
  *((_QWORD *)v22 + 1) = 17;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "jointsConfidenceThreshold";
  *(_QWORD *)(v23 + 8) = 25;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "jointsObjectOcclusionProb";
  *((_QWORD *)v25 + 1) = 25;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "jointsOcclusionProbability";
  *((_QWORD *)v27 + 1) = 26;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "branchArr_1_0";
  *((_QWORD *)v29 + 1) = 13;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "branchArr_2_0";
  *((_QWORD *)v31 + 1) = 13;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "branchArr_3_0";
  *((_QWORD *)v33 + 1) = 13;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "branchArr_1_1";
  *((_QWORD *)v35 + 1) = 13;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "branchArr_2_1";
  *((_QWORD *)v37 + 1) = 13;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "branchArr_3_1";
  *(_QWORD *)(v38 + 8) = 13;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v5 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "hoverDistanceUncertainty";
  *((_QWORD *)v40 + 1) = 24;
  v40[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v29;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchModelIOData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchModelIOData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_23D9B3F20;
  v5 = v29 + v4;
  v6 = v29 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v29 + v4) = 1;
  *(_QWORD *)v6 = "inputJoints3d";
  *(_QWORD *)(v6 + 8) = 13;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v29 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "inputTemporalEncodings";
  *(_QWORD *)(v10 + 8) = 22;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v29 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "branchArr_1_0";
  *((_QWORD *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v29 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "branchArr_2_0";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v29 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "branchArr_3_0";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v29 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "branchArr_1_1";
  *((_QWORD *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v29 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "branchArr_2_1";
  *((_QWORD *)v20 + 1) = 13;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v29 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "branchArr_3_1";
  *((_QWORD *)v22 + 1) = 13;
  v22[16] = 2;
  v9();
  v23 = v29 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "actionResult";
  *(_QWORD *)(v23 + 8) = 12;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v29 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "frameEncodingOutput";
  *((_QWORD *)v25 + 1) = 19;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v29 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "unsureResult";
  *((_QWORD *)v27 + 1) = 12;
  v27[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DetectionType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DetectionType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "FullDetection";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 3;
  *(_QWORD *)v11 = "FullDetectionWithDepth";
  *((_QWORD *)v11 + 1) = 22;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DetectionCanonicalizationDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DetectionCanonicalizationDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "palmCenter";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "wrist";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v39;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DetectionResultPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DetectionResultPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_23D9A9730;
  v5 = v39 + v4;
  v6 = v39 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v39 + v4) = 1;
  *(_QWORD *)v6 = "center2D";
  *(_QWORD *)(v6 + 8) = 8;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "size2D";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "detectionScore";
  *((_QWORD *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "chiralityScore";
  *((_QWORD *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "cameraSourceID";
  *((_QWORD *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "featureVector";
  *((_QWORD *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "detectionType";
  *((_QWORD *)v20 + 1) = 13;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "keyPoints";
  *((_QWORD *)v22 + 1) = 9;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "depth";
  *(_QWORD *)(v23 + 8) = 5;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "uvoScore";
  *((_QWORD *)v25 + 1) = 8;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "preferred";
  *((_QWORD *)v27 + 1) = 9;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "uvoDistance";
  *((_QWORD *)v29 + 1) = 11;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "sameChiralityCount";
  *((_QWORD *)v31 + 1) = 18;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "oDepth";
  *((_QWORD *)v33 + 1) = 6;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "oCenter2D";
  *((_QWORD *)v35 + 1) = 9;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "hasModelDepth";
  *((_QWORD *)v37 + 1) = 13;
  v37[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DetectionResultsByChiralityPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DetectionResultsByChiralityPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "leftDetections";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "rightDetections";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static OisEntryReason._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static OisEntryReason._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "NO_INFORMATION";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "OBJECT_IN_HAND_SEGMENTATION_MASK";
  *(_QWORD *)(v11 + 8) = 32;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GENERAL_SEGMENTATION_MASK";
  *((_QWORD *)v13 + 1) = 25;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "HAND_CLOSE_TO_MOUTH";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchAcceptorID._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchAcceptorID._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9710;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PINCH_ACCEPTOR_UNKNOWN_ID";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PINCH_ACCEPTOR_ACCEPT_ALL_MAKE_ID";
  *(_QWORD *)(v11 + 8) = 33;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PINCH_ACCEPTOR_ACCEPT_GOOD_MAKE_ID";
  *((_QWORD *)v13 + 1) = 34;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PINCH_ACCEPTOR_DURING_TOUCH_ID";
  *((_QWORD *)v15 + 1) = 30;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "PINCH_ACCEPTOR_SELECTION_AT_BREAK_ID";
  *((_QWORD *)v17 + 1) = 36;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "PINCH_ACCEPTOR_DURING_TOUCH_FOR_SCROLL_ID";
  *((_QWORD *)v19 + 1) = 41;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "PINCH_ACCEPTOR_HIGH_INTENTION_MAKE_ID";
  *((_QWORD *)v21 + 1) = 37;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "PINCH_ACCEPTOR_REPEATED_PINCH_ID";
  *((_QWORD *)v23 + 1) = 32;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "PINCH_ACCEPTOR_STATIC_HAND_ID";
  *(_QWORD *)(v24 + 8) = 29;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "PINCH_ACCEPTOR_CONSECUTIVE_PINCH_ATTEMPT_ID";
  *((_QWORD *)v26 + 1) = 43;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "PINCH_ACCEPTOR_HIGH_CONFIDENCE_PINCH_ID";
  *((_QWORD *)v28 + 1) = 39;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v6 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 20;
  *(_QWORD *)v30 = "PINCH_ACCEPTOR_TIMEOUT_ID";
  *((_QWORD *)v30 + 1) = 25;
  v30[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v33;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static OisSubstate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static OisSubstate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_23D9B5770;
  v5 = v33 + v4;
  v6 = v33 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v33 + v4) = 0;
  *(_QWORD *)v6 = "NOT_IN_OIS";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v33 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "OTHER";
  *(_QWORD *)(v10 + 8) = 5;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v33 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "HAND_IS_FAR_FROM_OBJECT";
  *((_QWORD *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v33 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "POSSIBLE_FALSE_POSITIVE";
  *((_QWORD *)v14 + 1) = 23;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v33 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "TOO_CLOSE_TO_SMALL_OBJECT";
  *((_QWORD *)v16 + 1) = 25;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v33 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "TOO_CLOSE_TO_LARGE_OBJECT";
  *((_QWORD *)v18 + 1) = 25;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v33 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "REPEATED_INTERACTION";
  *((_QWORD *)v20 + 1) = 20;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v33 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "deprecated";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v9();
  v23 = v33 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "NO_POSE_AVAILABLE";
  *(_QWORD *)(v23 + 8) = 17;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v33 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "NO_OBJECT_INFORMATION_AVAILABLE";
  *((_QWORD *)v25 + 1) = 31;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v33 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "NEAR_HAND_TO_MOUTH_TRAJECTORY";
  *((_QWORD *)v27 + 1) = 29;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v33 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "TOO_FAR_FROM_HAND_TO_MOUTH_TRAJECTORY_AND_NO_OBJECT_INFORMATION_AVAILABLE";
  *((_QWORD *)v29 + 1) = 73;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v33 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "STRICT_EATING_MODE";
  *((_QWORD *)v31 + 1) = 18;
  v31[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PoseModelType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PoseModelType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "FULL";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "SKIP";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static EngageStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static EngageStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "NEUTRAL";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "ENGAGED";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "UNENGAGED";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static JointTransformPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static JointTransformPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9720;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "transform";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "transformRaw";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 4;
  *(_QWORD *)v13 = "uncertainty";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 6;
  *(_QWORD *)v15 = "occlusionValues";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 9;
  *(_QWORD *)v17 = "transformMatrix";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 10;
  *(_QWORD *)v19 = "transformRawMatrix";
  *((_QWORD *)v19 + 1) = 18;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 11;
  *(_QWORD *)v21 = "unifiedConfidence";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandPosePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandPosePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "jointTransformsArvino";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "refTransform";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "wristStdDev";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CompactHandPosePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CompactHandPosePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "data";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "refTransform";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "wristStdDev";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandPresence._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandPresence._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "category";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "score";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandPresence.Category._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandPresence.Category._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "INVALID";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "LEFT";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "deprecated";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "REQUIRES_ASSOCIATION";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static EstimatedBoundingBoxPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static EstimatedBoundingBoxPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A8140;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "center2D";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "size2D";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "visibility";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "angularDistance";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "cameraSourceID";
  *(_QWORD *)(v16 + 8) = 14;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PoseSpecPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PoseSpecPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "poseCameras";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "modelType";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "estimatedBoundingBoxes";
  *(_QWORD *)(v12 + 8) = 22;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PoseLatentsPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PoseLatentsPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "latentFeature0";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "latentFeature1";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PoseImageCropPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PoseImageCropPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23D9A74B0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "cameraSource";
  *(_QWORD *)(v6 + 8) = 12;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "crop";
  *(_QWORD *)(v10 + 8) = 4;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "intrinsics";
  *((_QWORD *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "rotation";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "upVector";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "cropMean";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "cropStd";
  *((_QWORD *)v20 + 1) = 7;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "isFlipped";
  *((_QWORD *)v22 + 1) = 9;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "canonicalizationType";
  *(_QWORD *)(v23 + 8) = 20;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ObjectInteractionDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ObjectInteractionDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9720;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "score";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "binned";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "highConfidence";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "highConfidenceCounter";
  *((_QWORD *)v15 + 1) = 21;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "breakDelayReady";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "breakDelayActive";
  *((_QWORD *)v19 + 1) = 16;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "breakDelayCounter";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CameraPairTransitionPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CameraPairTransitionPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "decomposed";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "numSteps";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "currentStep";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CameraPairTransitionPB.UnscaledTransformPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CameraPairTransitionPB.UnscaledTransformPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "transform";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "scale";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  uint64_t v81;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandDescriptorPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandDescriptorPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v81 = swift_allocObject();
  *(_OWORD *)(v81 + 16) = xmmword_23D9B5DD0;
  v5 = v81 + v4;
  v6 = v81 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v81 + v4) = 1;
  *(_QWORD *)v6 = "handID";
  *(_QWORD *)(v6 + 8) = 6;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v81 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "detectionResults";
  *(_QWORD *)(v10 + 8) = 16;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v81 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "detection3dHandCenter";
  *((_QWORD *)v12 + 1) = 21;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v81 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 15;
  *(_QWORD *)v14 = "predictedHandCenter";
  *((_QWORD *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v81 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "center";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v81 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 16;
  *(_QWORD *)v18 = "detectionCanonicalizationData";
  *((_QWORD *)v18 + 1) = 29;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v81 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 5;
  *(_QWORD *)v20 = "handPose";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v81 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 6;
  *(_QWORD *)v22 = "isLeft";
  *((_QWORD *)v22 + 1) = 6;
  v22[16] = 2;
  v9();
  v23 = v81 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 7;
  *(_QWORD *)v23 = "handRadius";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v81 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 8;
  *(_QWORD *)v25 = "handPresenceScore";
  *((_QWORD *)v25 + 1) = 17;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v81 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 17;
  *(_QWORD *)v27 = "handPresenceClass";
  *((_QWORD *)v27 + 1) = 17;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v81 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 9;
  *(_QWORD *)v29 = "pinchDown";
  *((_QWORD *)v29 + 1) = 9;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v81 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 10;
  *(_QWORD *)v31 = "poseSpec";
  *((_QWORD *)v31 + 1) = 8;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v81 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 36;
  *(_QWORD *)v33 = "cropUsedHandCenter";
  *((_QWORD *)v33 + 1) = 18;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v81 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 11;
  *(_QWORD *)v35 = "imageCrops";
  *((_QWORD *)v35 + 1) = 10;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v81 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 12;
  *(_QWORD *)v37 = "latentFeatures";
  *((_QWORD *)v37 + 1) = 14;
  v37[16] = 2;
  v9();
  v38 = v81 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 13;
  *(_QWORD *)v38 = "pinchEngaged";
  *(_QWORD *)(v38 + 8) = 12;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v81 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 14;
  *(_QWORD *)v40 = "internalData";
  *((_QWORD *)v40 + 1) = 12;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v81 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 28;
  *(_QWORD *)v42 = "objectInteractionData";
  *((_QWORD *)v42 + 1) = 21;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v81 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "objectInteractionClass";
  *((_QWORD *)v44 + 1) = 22;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v81 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "pinchCancelled";
  *((_QWORD *)v46 + 1) = 14;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v81 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "hoverDistanceUncertainty";
  *((_QWORD *)v48 + 1) = 24;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v81 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 25;
  *(_QWORD *)v50 = "pinchScore";
  *((_QWORD *)v50 + 1) = 10;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v81 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 26;
  *(_QWORD *)v52 = "rawPinchScore";
  *((_QWORD *)v52 + 1) = 13;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v81 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 29;
  *(_QWORD *)v54 = "pinchFeatures";
  *((_QWORD *)v54 + 1) = 13;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v81 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 30;
  *(_QWORD *)v56 = "objectInteractionFilterCond";
  *((_QWORD *)v56 + 1) = 27;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v81 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 31;
  *(_QWORD *)v58 = "trackingHealthScore";
  *((_QWORD *)v58 + 1) = 19;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v81 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 32;
  *(_QWORD *)v60 = "cameraPairTransition";
  *((_QWORD *)v60 + 1) = 20;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v81 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 33;
  *(_QWORD *)v62 = "pinchOcclusionStatus";
  *((_QWORD *)v62 + 1) = 20;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v81 + v4 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 34;
  *(_QWORD *)v64 = "middleDoubleTap";
  *((_QWORD *)v64 + 1) = 15;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v81 + v4 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 35;
  *(_QWORD *)v66 = "cancellationReason";
  *((_QWORD *)v66 + 1) = 18;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v81 + v4 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 38;
  *(_QWORD *)v68 = "compactHandPose";
  *((_QWORD *)v68 + 1) = 15;
  v68[16] = 2;
  v9();
  v69 = v81 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 39;
  *(_QWORD *)v69 = "pinchInfo";
  *(_QWORD *)(v69 + 8) = 9;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v81 + v4 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 40;
  *(_QWORD *)v71 = "operationalEnvelopeSignals";
  *((_QWORD *)v71 + 1) = 26;
  v71[16] = 2;
  v9();
  v72 = (_QWORD *)(v81 + v4 + 34 * v3);
  v73 = (char *)v72 + *(int *)(v1 + 48);
  *v72 = 41;
  *(_QWORD *)v73 = "objectInteractionStateStatus";
  *((_QWORD *)v73 + 1) = 28;
  v73[16] = 2;
  v9();
  v74 = (_QWORD *)(v81 + v4 + 35 * v3);
  v75 = (char *)v74 + *(int *)(v1 + 48);
  *v74 = 42;
  *(_QWORD *)v75 = "thumbIndexTap";
  *((_QWORD *)v75 + 1) = 13;
  v75[16] = 2;
  v9();
  v76 = (_QWORD *)(v81 + v4 + 36 * v3);
  v77 = (char *)v76 + *(int *)(v1 + 48);
  *v76 = 43;
  *(_QWORD *)v77 = "thumbIndexTapFeatures";
  *((_QWORD *)v77 + 1) = 21;
  v77[16] = 2;
  v9();
  v78 = (_QWORD *)(v81 + v4 + 37 * v3);
  v79 = (char *)v78 + *(int *)(v1 + 48);
  *v78 = 44;
  *(_QWORD *)v79 = "pinchDownHomeUserInterface";
  *((_QWORD *)v79 + 1) = 26;
  v79[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static RawPinchFeaturesPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static RawPinchFeaturesPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "rawPinchScore";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "unsureNetScore";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "hoverDistanceUncertainty";
  *((_QWORD *)v13 + 1) = 24;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "scoreAheads";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchFeaturesPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchFeaturesPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9B3F20;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "pinchOcc";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "pinchHdUncertainty";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "makeUnsureScore";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "hdUnsureScore";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "scoreAheads";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "unsureNetScore";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "pinchScore";
  *((_QWORD *)v21 + 1) = 10;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "objectInteractionFilterCond";
  *((_QWORD *)v23 + 1) = 27;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 9;
  *(_QWORD *)v24 = "pinchOcclusionStatus";
  *(_QWORD *)(v24 + 8) = 20;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 10;
  *(_QWORD *)v26 = "rawPinchFeatures";
  *((_QWORD *)v26 + 1) = 16;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 11;
  *(_QWORD *)v28 = "occludedByOtherHand";
  *((_QWORD *)v28 + 1) = 19;
  v28[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static OperationalEnvelopeSignalsPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static OperationalEnvelopeSignalsPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "handToHmdDistance";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "visibilityScores";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Orientation3DPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Orientation3DPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "roll";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "pitch";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "yaw";
  *(_QWORD *)(v12 + 8) = 3;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v44;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PosePerJointDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PosePerJointDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_23D9B7990;
  v5 = v44 + v4;
  v6 = v44 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v44 + v4) = 1;
  *(_QWORD *)v6 = "error_3_d";
  *(_QWORD *)(v6 + 8) = 9;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v44 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "non_rigid_error";
  *(_QWORD *)(v10 + 8) = 15;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v44 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "xy_error";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v44 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "depth_error";
  *((_QWORD *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v44 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "gt_joint_occlusion_0";
  *((_QWORD *)v16 + 1) = 20;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v44 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "gt_joint_occlusion_1";
  *((_QWORD *)v18 + 1) = 20;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v44 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "joints_occlusion_probability_cam_0";
  *((_QWORD *)v20 + 1) = 34;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v44 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "joints_occlusion_probability_cam_1";
  *((_QWORD *)v22 + 1) = 34;
  v22[16] = 2;
  v9();
  v23 = v44 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "joint_uncertainty";
  *(_QWORD *)(v23 + 8) = 17;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v44 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "joint_rotation_error";
  *((_QWORD *)v25 + 1) = 20;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v44 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "joint_quaternion_error";
  *((_QWORD *)v27 + 1) = 22;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v44 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "gt_pose_3_d";
  *((_QWORD *)v29 + 1) = 11;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v44 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "dt_pose_3_d";
  *((_QWORD *)v31 + 1) = 11;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v44 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "dt_pose_3_d_filtered";
  *((_QWORD *)v33 + 1) = 20;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v44 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "gt_euler";
  *((_QWORD *)v35 + 1) = 8;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v44 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "dt_euler";
  *((_QWORD *)v37 + 1) = 8;
  v37[16] = 2;
  v9();
  v38 = v44 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "gt_transform";
  *(_QWORD *)(v38 + 8) = 12;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v44 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "dt_raw_transform";
  *((_QWORD *)v40 + 1) = 16;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v44 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "unified_confidence";
  *((_QWORD *)v42 + 1) = 18;
  v42[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  _QWORD *v60;
  char *v61;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PoseJointsDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PoseJointsDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9AF260;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "w1";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "t4";
  *(_QWORD *)(v11 + 8) = 2;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "t3";
  *((_QWORD *)v13 + 1) = 2;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "t2";
  *((_QWORD *)v15 + 1) = 2;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "t1";
  *((_QWORD *)v17 + 1) = 2;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "i5";
  *((_QWORD *)v19 + 1) = 2;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "i4";
  *((_QWORD *)v21 + 1) = 2;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "i3";
  *((_QWORD *)v23 + 1) = 2;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 9;
  *(_QWORD *)v24 = "i2";
  *(_QWORD *)(v24 + 8) = 2;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 10;
  *(_QWORD *)v26 = "i1";
  *((_QWORD *)v26 + 1) = 2;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 11;
  *(_QWORD *)v28 = "m5";
  *((_QWORD *)v28 + 1) = 2;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v6 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 12;
  *(_QWORD *)v30 = "m4";
  *((_QWORD *)v30 + 1) = 2;
  v30[16] = 2;
  v10();
  v31 = (_QWORD *)(v6 + 12 * v3);
  v32 = (char *)v31 + *(int *)(v1 + 48);
  *v31 = 13;
  *(_QWORD *)v32 = "m3";
  *((_QWORD *)v32 + 1) = 2;
  v32[16] = 2;
  v10();
  v33 = (_QWORD *)(v6 + 13 * v3);
  v34 = (char *)v33 + *(int *)(v1 + 48);
  *v33 = 14;
  *(_QWORD *)v34 = "m2";
  *((_QWORD *)v34 + 1) = 2;
  v34[16] = 2;
  v10();
  v35 = (_QWORD *)(v6 + 14 * v3);
  v36 = (char *)v35 + *(int *)(v1 + 48);
  *v35 = 15;
  *(_QWORD *)v36 = "m1";
  *((_QWORD *)v36 + 1) = 2;
  v36[16] = 2;
  v10();
  v37 = (_QWORD *)(v6 + 15 * v3);
  v38 = (char *)v37 + *(int *)(v1 + 48);
  *v37 = 16;
  *(_QWORD *)v38 = "r5";
  *((_QWORD *)v38 + 1) = 2;
  v38[16] = 2;
  v10();
  v39 = v6 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 16 * v3) = 17;
  *(_QWORD *)v39 = "r4";
  *(_QWORD *)(v39 + 8) = 2;
  *(_BYTE *)(v39 + 16) = 2;
  v10();
  v40 = (_QWORD *)(v6 + 17 * v3);
  v41 = (char *)v40 + *(int *)(v1 + 48);
  *v40 = 18;
  *(_QWORD *)v41 = "r3";
  *((_QWORD *)v41 + 1) = 2;
  v41[16] = 2;
  v10();
  v42 = (_QWORD *)(v6 + 18 * v3);
  v43 = (char *)v42 + *(int *)(v1 + 48);
  *v42 = 19;
  *(_QWORD *)v43 = "r2";
  *((_QWORD *)v43 + 1) = 2;
  v43[16] = 2;
  v10();
  v44 = (_QWORD *)(v6 + 19 * v3);
  v45 = (char *)v44 + *(int *)(v1 + 48);
  *v44 = 20;
  *(_QWORD *)v45 = "r1";
  *((_QWORD *)v45 + 1) = 2;
  v45[16] = 2;
  v10();
  v46 = (_QWORD *)(v6 + 20 * v3);
  v47 = (char *)v46 + *(int *)(v1 + 48);
  *v46 = 21;
  *(_QWORD *)v47 = "p5";
  *((_QWORD *)v47 + 1) = 2;
  v47[16] = 2;
  v10();
  v48 = (_QWORD *)(v6 + 21 * v3);
  v49 = (char *)v48 + *(int *)(v1 + 48);
  *v48 = 22;
  *(_QWORD *)v49 = "p4";
  *((_QWORD *)v49 + 1) = 2;
  v49[16] = 2;
  v10();
  v50 = (_QWORD *)(v6 + 22 * v3);
  v51 = (char *)v50 + *(int *)(v1 + 48);
  *v50 = 23;
  *(_QWORD *)v51 = "p3";
  *((_QWORD *)v51 + 1) = 2;
  v51[16] = 2;
  v10();
  v52 = (_QWORD *)(v6 + 23 * v3);
  v53 = (char *)v52 + *(int *)(v1 + 48);
  *v52 = 24;
  *(_QWORD *)v53 = "p2";
  *((_QWORD *)v53 + 1) = 2;
  v53[16] = 2;
  v10();
  v54 = (_QWORD *)(v6 + 24 * v3);
  v55 = (char *)v54 + *(int *)(v1 + 48);
  *v54 = 25;
  *(_QWORD *)v55 = "p1";
  *((_QWORD *)v55 + 1) = 2;
  v55[16] = 2;
  v10();
  v56 = (_QWORD *)(v6 + 25 * v3);
  v57 = (char *)v56 + *(int *)(v1 + 48);
  *v56 = 26;
  *(_QWORD *)v57 = "w2";
  *((_QWORD *)v57 + 1) = 2;
  v57[16] = 2;
  v10();
  v58 = (_QWORD *)(v6 + 26 * v3);
  v59 = (char *)v58 + *(int *)(v1 + 48);
  *v58 = 27;
  *(_QWORD *)v59 = "a1";
  *((_QWORD *)v59 + 1) = 2;
  v59[16] = 2;
  v10();
  v60 = (_QWORD *)(v6 + 27 * v3);
  v61 = (char *)v60 + *(int *)(v1 + 48);
  *v60 = 28;
  *(_QWORD *)v61 = "i1_t1";
  *((_QWORD *)v61 + 1) = 5;
  v61[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static RawThumbIndexTapFeaturesPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static RawThumbIndexTapFeaturesPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "scoreAheads";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "rawTapScore";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ThumbIndexTapFeaturesPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ThumbIndexTapFeaturesPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23D9A70A0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "rawTapFeatures";
  *(_QWORD *)(v5 + 8) = 14;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static UnsureLabel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static UnsureLabel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "INVALID";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "TRUE";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "FALSE";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "UNSURE";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PartialHandCategories._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PartialHandCategories._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PH_INVALID";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PH_VISIBLE";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PH_PARTIALLY_OCCLUDED";
  *((_QWORD *)v13 + 1) = 21;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PH_MOSTLY_OCCLUDED";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandOIHPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandOIHPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "oih_multiview";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "oih_per_camera";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PartialHand._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PartialHand._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "cameraSourceID";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "partialHandCategory";
  *((_QWORD *)v11 + 1) = 19;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PartialHandMultiCam._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PartialHandMultiCam._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "PartialHandsCameras";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "partialHand";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandGTDescriptorPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandGTDescriptorPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9AC830;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "handID";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "center";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "handPose";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "isLeft";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "pinchDown";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "poseSpec";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "handOIH";
  *((_QWORD *)v21 + 1) = 7;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "partialHand";
  *((_QWORD *)v23 + 1) = 11;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 9;
  *(_QWORD *)v24 = "hands_oih_category";
  *(_QWORD *)(v24 + 8) = 18;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 10;
  *(_QWORD *)v26 = "intentScore";
  *((_QWORD *)v26 + 1) = 11;
  v26[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v44;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static SequenceMetadataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static SequenceMetadataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_23D9B7990;
  v5 = v44 + v4;
  v6 = v44 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v44 + v4) = 1;
  *(_QWORD *)v6 = "sequence_id";
  *(_QWORD *)(v6 + 8) = 11;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v44 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "study_name";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v44 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "has_warped";
  *((_QWORD *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v44 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "has_unwarped";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v44 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "study_version";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v44 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "visit_id";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v44 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "subject_id";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v44 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "rootCamera";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v9();
  v23 = v44 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "has_povc_correction";
  *(_QWORD *)(v23 + 8) = 19;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v44 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "has_clip_on";
  *((_QWORD *)v25 + 1) = 11;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v44 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "ref_key";
  *((_QWORD *)v27 + 1) = 7;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v44 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "hand_radius";
  *((_QWORD *)v29 + 1) = 11;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v44 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "gesture_video_id";
  *((_QWORD *)v31 + 1) = 16;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v44 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "action_hand";
  *((_QWORD *)v33 + 1) = 11;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v44 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "gesture_video_category";
  *((_QWORD *)v35 + 1) = 22;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v44 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "avg_bone_length";
  *((_QWORD *)v37 + 1) = 15;
  v37[16] = 2;
  v9();
  v38 = v44 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "ref_visit_id";
  *(_QWORD *)(v38 + 8) = 12;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v44 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "ref_subject_id";
  *((_QWORD *)v40 + 1) = 14;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v44 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "description";
  *((_QWORD *)v42 + 1) = 11;
  v42[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FrameLabelPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FrameLabelPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "frame_number";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "hand_descriptor";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static SequenceLabelPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static SequenceLabelPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "gt_version";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "handRadius";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingCycles._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingCycles._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "fullFrameCycle";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "searchRegionCycle";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "noTrackingCycle";
  *(_QWORD *)(v12 + 8) = 15;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static THSDistanceHysteresis._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static THSDistanceHysteresis._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "closeHand";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "farHand";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingPredictionPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingPredictionPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "handCenterPrediction";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "jointsPrediction";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 4;
  *(_QWORD *)v12 = "featureVector";
  *(_QWORD *)(v12 + 8) = 13;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FeatureVectorPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FeatureVectorPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "cameraSourceID";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "data";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static FeatureVectorPerFramePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static FeatureVectorPerFramePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23D9A70A0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "featureVectorPerCam";
  *(_QWORD *)(v5 + 8) = 19;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingBuffersPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingBuffersPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "meanChiralityBuffer";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "featureVectorbuffer";
  *((_QWORD *)v11 + 1) = 19;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "trackingCycle";
  *(_QWORD *)(v12 + 8) = 13;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v62;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingInfoPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingInfoPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = xmmword_23D9AF260;
  v5 = v62 + v4;
  v6 = v62 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v62 + v4) = 3;
  *(_QWORD *)v6 = "handID";
  *(_QWORD *)(v6 + 8) = 6;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 4;
  *(_QWORD *)v10 = "trackingPrediction";
  *(_QWORD *)(v10 + 8) = 18;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 5;
  *(_QWORD *)v12 = "trackingBuffers";
  *((_QWORD *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 6;
  *(_QWORD *)v14 = "chiralityUpdateCounter";
  *((_QWORD *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 7;
  *(_QWORD *)v16 = "totalUpdateCounter";
  *((_QWORD *)v16 + 1) = 18;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 8;
  *(_QWORD *)v18 = "handRadius";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 9;
  *(_QWORD *)v20 = "isDrifting";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 10;
  *(_QWORD *)v22 = "requiresAssociation";
  *((_QWORD *)v22 + 1) = 19;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 11;
  *(_QWORD *)v23 = "consecutiveConfidentPoseCounter";
  *(_QWORD *)(v23 + 8) = 31;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 12;
  *(_QWORD *)v25 = "poseCameras";
  *((_QWORD *)v25 + 1) = 11;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 13;
  *(_QWORD *)v27 = "pinchDown";
  *((_QWORD *)v27 + 1) = 9;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 14;
  *(_QWORD *)v29 = "arvinoJoints2d";
  *((_QWORD *)v29 + 1) = 14;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 15;
  *(_QWORD *)v31 = "handIsLeft";
  *((_QWORD *)v31 + 1) = 10;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 16;
  *(_QWORD *)v33 = "chiralityIsConfident";
  *((_QWORD *)v33 + 1) = 20;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 17;
  *(_QWORD *)v35 = "detectionCoolingPeriodCounter";
  *((_QWORD *)v35 + 1) = 29;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 18;
  *(_QWORD *)v37 = "isOnDriftMargin";
  *((_QWORD *)v37 + 1) = 15;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 19;
  *(_QWORD *)v38 = "isNulllIou";
  *(_QWORD *)(v38 + 8) = 10;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v5 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 20;
  *(_QWORD *)v40 = "avgDriftScore";
  *((_QWORD *)v40 + 1) = 13;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v5 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 21;
  *(_QWORD *)v42 = "avgGhostHandScore";
  *((_QWORD *)v42 + 1) = 17;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v5 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 22;
  *(_QWORD *)v44 = "prevHandCenter";
  *((_QWORD *)v44 + 1) = 14;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v5 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 23;
  *(_QWORD *)v46 = "avgVelocity";
  *((_QWORD *)v46 + 1) = 11;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v5 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 24;
  *(_QWORD *)v48 = "initVelocityFilter";
  *((_QWORD *)v48 + 1) = 18;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v5 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 25;
  *(_QWORD *)v50 = "previousTimestamps";
  *((_QWORD *)v50 + 1) = 18;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v5 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 26;
  *(_QWORD *)v52 = "predictionError";
  *((_QWORD *)v52 + 1) = 15;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v5 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 27;
  *(_QWORD *)v54 = "prevVelocity";
  *((_QWORD *)v54 + 1) = 12;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v5 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 28;
  *(_QWORD *)v56 = "absVelocityChange";
  *((_QWORD *)v56 + 1) = 17;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v5 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 29;
  *(_QWORD *)v58 = "distanceToCameraHysDirection";
  *((_QWORD *)v58 + 1) = 28;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v5 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 30;
  *(_QWORD *)v60 = "distanceToDcamera";
  *((_QWORD *)v60 + 1) = 17;
  v60[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingInfosPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingInfosPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "latestHandID";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "trackingInfoList";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchModelHandInputPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchModelHandInputPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A96F0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "handID";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "handRadius";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "handCenter";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "isLeft";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "joints";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "calibrationData";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchModelInternalStatesPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchModelInternalStatesPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "encodingBuffer";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "currPinchProbabilities";
  *((_QWORD *)v11 + 1) = 22;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "currPinchState";
  *(_QWORD *)(v12 + 8) = 14;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchModelPostprocessedOutputPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchModelPostprocessedOutputPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A8140;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "pinchProbabilities";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "pinchState";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "engagementProbability";
  *((_QWORD *)v13 + 1) = 21;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "actionConfidence";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "hoverDistance";
  *(_QWORD *)(v16 + 8) = 13;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchModelFrameIOPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchModelFrameIOPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A96F0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "handID";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "actionCameraCalibrationData";
  *(_QWORD *)(v11 + 8) = 27;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "pinchModelInput";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "pinchModelOutput";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "pinchModelPostProcessedOutput";
  *((_QWORD *)v17 + 1) = 29;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "internalStates";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PinchModelFramePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PinchModelFramePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A8140;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "frameID";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "handsKitInput";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "leftHandFrameData";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "rightHandFrameData";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "enabledCameras";
  *(_QWORD *)(v16 + 8) = 14;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandCloseToMouthPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandCloseToMouthPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74B0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "IS_TOO_FAR_AWAY_FROM_MOUTH";
  *(_QWORD *)(v7 + 8) = 26;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "IS_CLOSE_TO_MOUTH";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "IS_HAND_APPROACHING_MOUTH";
  *((_QWORD *)v13 + 1) = 25;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ALWAYS_SMALL_HOVER_DISTANCE";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "IS_TOWARD_MOUTH_CENTER";
  *((_QWORD *)v17 + 1) = 22;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "IS_WITHIN_TIME_FROM_PREVIOUS_HAND_CLOSE_TO_MOUTH";
  *((_QWORD *)v19 + 1) = 48;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "IS_WITHIN_TIME_FROM_PREVIOUS_OBJECT_INTERACTION";
  *((_QWORD *)v21 + 1) = 47;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "STAYED_TOO_LONG_CLOSE_TO_MOUTH";
  *((_QWORD *)v23 + 1) = 30;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "HAND_APPROACHING_MOUTH_EVENT_ADDED_TO_BUFFER";
  *(_QWORD *)(v24 + 8) = 44;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CropBoxPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CropBoxPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "points";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "camera_source";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static LocalizerPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static LocalizerPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "matrix";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "cameraSource";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static BasicHandDescriptorPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static BasicHandDescriptorPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9720;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "handID";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "detectionResults";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "detection3dHandCenter";
  *((_QWORD *)v13 + 1) = 21;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "predictedHandCenter";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "center";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "isLeft";
  *((_QWORD *)v19 + 1) = 6;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "handRadius";
  *((_QWORD *)v21 + 1) = 10;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static RecoverScrollPinchInternalDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static RecoverScrollPinchInternalDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A96F0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 5;
  *(_QWORD *)v7 = "missedScrollMakeFrameOffset";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 6;
  *(_QWORD *)v11 = "missedScrollBreakFrameOffset";
  *(_QWORD *)(v11 + 8) = 28;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 7;
  *(_QWORD *)v13 = "genericPinch";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 8;
  *(_QWORD *)v15 = "missedScrollState";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 9;
  *(_QWORD *)v17 = "missedScrollByBreakState";
  *((_QWORD *)v17 + 1) = 24;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 10;
  *(_QWORD *)v19 = "recoverScrollState";
  *((_QWORD *)v19 + 1) = 18;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MiddleDoubleTapInternalPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MiddleDoubleTapInternalPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "middleHover";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "middleDoubleTapState";
  *((_QWORD *)v11 + 1) = 20;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "suppressors";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v44;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static UnsureInternalPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static UnsureInternalPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_23D9B7990;
  v5 = v44 + v4;
  v6 = v44 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v44 + v4) = 1;
  *(_QWORD *)v6 = "unsure_pinch_occlusion_score";
  *(_QWORD *)(v6 + 8) = 28;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "unsure_pinch_joint_uncertainty_score";
  *(_QWORD *)(v10 + 8) = 36;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "unsure_pinch_hd_uncertainty_score";
  *((_QWORD *)v12 + 1) = 33;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "unsure_pinch_hd_unsure_score";
  *((_QWORD *)v14 + 1) = 28;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "initially_detected";
  *((_QWORD *)v16 + 1) = 18;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "large_hover_distance_in_make";
  *((_QWORD *)v18 + 1) = 28;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "large_hover_distance_in_break";
  *((_QWORD *)v20 + 1) = 29;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "raw_action_make";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "raw_action_break";
  *(_QWORD *)(v23 + 8) = 16;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "touch_visible";
  *((_QWORD *)v25 + 1) = 13;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "sure_action_make";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "scenario_large_hd_with_raw_action_make";
  *((_QWORD *)v29 + 1) = 38;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "scenario_large_hd_with_raw_action_break";
  *((_QWORD *)v31 + 1) = 39;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "scenario_touch_visible_and_sure_action_make";
  *((_QWORD *)v33 + 1) = 43;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "scenario_sigmoid_temperature";
  *((_QWORD *)v35 + 1) = 28;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "initial_pinch_score";
  *((_QWORD *)v37 + 1) = 19;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "final_pinch_score";
  *(_QWORD *)(v38 + 8) = 17;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v5 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "initial_unsure_score";
  *((_QWORD *)v40 + 1) = 20;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v5 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "final_unsure_score";
  *((_QWORD *)v42 + 1) = 18;
  v42[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v56;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ObjectInteractionStateInternalPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ObjectInteractionStateInternalPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_23D9AB6E0;
  v5 = v56 + v4;
  v6 = v56 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v56 + v4) = 1;
  *(_QWORD *)v6 = "current_ois_substate";
  *(_QWORD *)(v6 + 8) = 20;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "size_of_object_in_hand_in_pixels";
  *(_QWORD *)(v10 + 8) = 32;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "object_interaction_type";
  *((_QWORD *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "active_pinch_acceptor";
  *((_QWORD *)v14 + 1) = 21;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "exit_object_interaction_state_source";
  *((_QWORD *)v16 + 1) = 36;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "current_distance_to_mouth";
  *((_QWORD *)v18 + 1) = 25;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "closest_distance_to_any_acceptable_object";
  *((_QWORD *)v20 + 1) = 41;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "time_since_last_object_interaction";
  *((_QWORD *)v22 + 1) = 34;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "time_since_last_eating_interaction";
  *(_QWORD *)(v23 + 8) = 34;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "time_since_last_intentional_ui_interaction";
  *((_QWORD *)v25 + 1) = 42;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "distance_from_last_object_interaction";
  *((_QWORD *)v27 + 1) = 37;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "distance_from_last_intentional_ui_interaction";
  *((_QWORD *)v29 + 1) = 45;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "maximum_size_of_interacted_object_in_pixels";
  *((_QWORD *)v31 + 1) = 43;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "recent_eating";
  *((_QWORD *)v33 + 1) = 13;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "recent_ui_interaction";
  *((_QWORD *)v35 + 1) = 21;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "is_currently_close_to_mouth";
  *((_QWORD *)v37 + 1) = 27;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "hand_close_to_mouth_state";
  *(_QWORD *)(v38 + 8) = 25;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v5 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "intention_lstm_score";
  *((_QWORD *)v40 + 1) = 20;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v5 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "hover_distance";
  *((_QWORD *)v42 + 1) = 14;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v5 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "is_hand_static";
  *((_QWORD *)v44 + 1) = 14;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v5 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "static_hand_current_translation";
  *((_QWORD *)v46 + 1) = 31;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v5 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "static_hand_current_rotation";
  *((_QWORD *)v48 + 1) = 28;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v5 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "hand_close_to_mouth_bitmask";
  *((_QWORD *)v50 + 1) = 27;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v5 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 24;
  *(_QWORD *)v52 = "hand_visible_in_metric_depth_fov";
  *((_QWORD *)v52 + 1) = 32;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v5 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 25;
  *(_QWORD *)v54 = "time_since_last_hand_close_to_mouth";
  *((_QWORD *)v54 + 1) = 35;
  v54[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MonoHandPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MonoHandPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "cameraSource";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "monoHandUVs";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "monoHandUVsStdDev";
  *(_QWORD *)(v12 + 8) = 17;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandDescriptorInternalPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandDescriptorInternalPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9B5770;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 4;
  *(_QWORD *)v7 = "cropBoundingBox";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 6;
  *(_QWORD *)v11 = "occludedByTheOtherHand";
  *(_QWORD *)(v11 + 8) = 22;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 10;
  *(_QWORD *)v13 = "pinchData";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 11;
  *(_QWORD *)v15 = "localizers";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 13;
  *(_QWORD *)v17 = "middleDoubleTap";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 15;
  *(_QWORD *)v19 = "recoverRepetitivePinchInternalData";
  *((_QWORD *)v19 + 1) = 34;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 16;
  *(_QWORD *)v21 = "actionInternalData";
  *((_QWORD *)v21 + 1) = 18;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 17;
  *(_QWORD *)v23 = "unsureInternalData";
  *((_QWORD *)v23 + 1) = 18;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 18;
  *(_QWORD *)v24 = "objectInteractionStateInternalPB";
  *(_QWORD *)(v24 + 8) = 32;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 19;
  *(_QWORD *)v26 = "poseModelIOData";
  *((_QWORD *)v26 + 1) = 15;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 20;
  *(_QWORD *)v28 = "pinchModelIOData";
  *((_QWORD *)v28 + 1) = 16;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v6 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 21;
  *(_QWORD *)v30 = "monoHand";
  *((_QWORD *)v30 + 1) = 8;
  v30[16] = 2;
  v10();
  v31 = (_QWORD *)(v6 + 12 * v3);
  v32 = (char *)v31 + *(int *)(v1 + 48);
  *v31 = 22;
  *(_QWORD *)v32 = "homePinchInternalData";
  *((_QWORD *)v32 + 1) = 21;
  v32[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DetectionSpecItemPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DetectionSpecItemPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A8140;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "detector_model_type";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "camera_source_id";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 4;
  *(_QWORD *)v13 = "crop_region";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 6;
  *(_QWORD *)v15 = "associated_hand_ids";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 8;
  *(_QWORD *)v16 = "estimatedBoneLength";
  *(_QWORD *)(v16 + 8) = 19;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DetectionSpecItemPB.ImageSize._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DetectionSpecItemPB.ImageSize._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "height";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "width";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "channel";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DetectionSpecItemPB.CropRegion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DetectionSpecItemPB.CropRegion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "normalized_x_min";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "normalized_y_min";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "normalized_x_max";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "normalized_y_max";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DetectionSpecIntermediatePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DetectionSpecIntermediatePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "priority";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "cameraPriority";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "age";
  *(_QWORD *)(v12 + 8) = 3;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DetectionSpecPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DetectionSpecPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "inputTimestamp";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "detectionSpecItems";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "intermediate";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static SchedulingDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static SchedulingDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23D9A74B0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 7;
  *(_QWORD *)v6 = "discoveryCounter";
  *(_QWORD *)(v6 + 8) = 16;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 8;
  *(_QWORD *)v10 = "roundRobinIndex";
  *(_QWORD *)(v10 + 8) = 15;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 9;
  *(_QWORD *)v12 = "detectionSpecPriorityQueue";
  *((_QWORD *)v12 + 1) = 26;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 10;
  *(_QWORD *)v14 = "newRequests";
  *((_QWORD *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 11;
  *(_QWORD *)v16 = "detectionScheduledFor";
  *((_QWORD *)v16 + 1) = 21;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 12;
  *(_QWORD *)v18 = "poseScheduledFor";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 13;
  *(_QWORD *)v20 = "canScheduleDetection";
  *((_QWORD *)v20 + 1) = 20;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 14;
  *(_QWORD *)v22 = "canSchedulePose";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 15;
  *(_QWORD *)v23 = "budgetedForDetection";
  *(_QWORD *)(v23 + 8) = 20;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static EnrollmentDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static EnrollmentDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23D9A70A0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "boneLengths";
  *(_QWORD *)(v5 + 8) = 11;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MissingFingerDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MissingFingerDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "leftHandData";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "rightHandData";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static EnrollmentResultsPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static EnrollmentResultsPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A96F0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "handRadiusEstimated";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "leftHandEnrolmentData";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "rightHandEnrolmentData";
  *((_QWORD *)v13 + 1) = 22;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "enrollmentStatus";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "secsSinceStart";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "missingFingerData";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static RejectedHandPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static RejectedHandPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "hand";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "reason";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "handDescriptor";
  *(_QWORD *)(v12 + 8) = 14;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandsKitDataInternalPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandsKitDataInternalPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A96F0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "trackingInfos";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "trackingInInitialState";
  *(_QWORD *)(v11 + 8) = 22;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "scheduling";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "detectionSpecItems";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 7;
  *(_QWORD *)v17 = "unfilteredHands";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 11;
  *(_QWORD *)v19 = "rejectedHands";
  *((_QWORD *)v19 + 1) = 13;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandsKitDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandsKitDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_23D9A8150;
  v5 = v35 + v4;
  v6 = v35 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v35 + v4) = 1;
  *(_QWORD *)v6 = "handDescriptors";
  *(_QWORD *)(v6 + 8) = 15;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v35 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "masterCameraTimestamp";
  *(_QWORD *)(v10 + 8) = 21;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v35 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "sessionID";
  *((_QWORD *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v35 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "inputImages";
  *((_QWORD *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v35 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "internalData";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v35 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "enrollmentResult";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v35 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "worldPoseTransform";
  *((_QWORD *)v20 + 1) = 18;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v35 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "mcamLeftCalibration";
  *((_QWORD *)v22 + 1) = 19;
  v22[16] = 2;
  v9();
  v23 = v35 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "mcamRightCalibration";
  *(_QWORD *)(v23 + 8) = 20;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v35 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "refHandDescriptors";
  *((_QWORD *)v25 + 1) = 18;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v35 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "version";
  *((_QWORD *)v27 + 1) = 7;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v35 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "frameID";
  *((_QWORD *)v29 + 1) = 7;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v35 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "sourceID";
  *((_QWORD *)v31 + 1) = 8;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v35 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "detectionOutputs";
  *((_QWORD *)v33 + 1) = 16;
  v33[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandsKitDataSequencePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandsKitDataSequencePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23D9A70A0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "frames";
  *(_QWORD *)(v5 + 8) = 6;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v66;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_23D9BFEB0;
  v5 = v66 + v4;
  v6 = v66 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v66 + v4) = 0;
  *(_QWORD *)v6 = "trackingDispatch";
  *(_QWORD *)(v6 + 8) = 16;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v66 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "computeSimilarityMatrix";
  *(_QWORD *)(v10 + 8) = 23;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v66 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "dataAssociation";
  *((_QWORD *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v66 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "modifyHandCenterChirality";
  *((_QWORD *)v14 + 1) = 25;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v66 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "recoverMissingHands";
  *((_QWORD *)v16 + 1) = 19;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v66 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "assignHandID";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v66 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "trackingUpdateDispatch";
  *((_QWORD *)v20 + 1) = 22;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v66 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "computeHandCenterAndReliability";
  *((_QWORD *)v22 + 1) = 31;
  v22[16] = 2;
  v9();
  v23 = v66 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "updateTrackingInfoBuffer";
  *(_QWORD *)(v23 + 8) = 24;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v66 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "updateTrackingFilter";
  *((_QWORD *)v25 + 1) = 20;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v66 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "updateTrackingInfoCounter";
  *((_QWORD *)v27 + 1) = 25;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v66 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "cleanUpHandByChirality";
  *((_QWORD *)v29 + 1) = 22;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v66 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 14;
  *(_QWORD *)v31 = "createTrackingInfo";
  *((_QWORD *)v31 + 1) = 18;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v66 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 15;
  *(_QWORD *)v33 = "prediction";
  *((_QWORD *)v33 + 1) = 10;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v66 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 16;
  *(_QWORD *)v35 = "schedulerDispatch";
  *((_QWORD *)v35 + 1) = 17;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v66 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 18;
  *(_QWORD *)v37 = "schedulerUpdateCounters";
  *((_QWORD *)v37 + 1) = 23;
  v37[16] = 2;
  v9();
  v38 = v66 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 23;
  *(_QWORD *)v38 = "filterHandsByFieldOfView";
  *(_QWORD *)(v38 + 8) = 24;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v66 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 24;
  *(_QWORD *)v40 = "cleanUpHandByFov";
  *((_QWORD *)v40 + 1) = 16;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v66 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 26;
  *(_QWORD *)v42 = "createDetectionSpecMultiCams";
  *((_QWORD *)v42 + 1) = 28;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v66 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 27;
  *(_QWORD *)v44 = "generateRoundRobinDetectionRequests";
  *((_QWORD *)v44 + 1) = 35;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v66 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 28;
  *(_QWORD *)v46 = "generateHandConfirmationRequests";
  *((_QWORD *)v46 + 1) = 32;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v66 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 29;
  *(_QWORD *)v48 = "consolidateDetectionRequestQueue";
  *((_QWORD *)v48 + 1) = 32;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v66 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 30;
  *(_QWORD *)v50 = "decideHandSkipping";
  *((_QWORD *)v50 + 1) = 18;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v66 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 31;
  *(_QWORD *)v52 = "updateTrackingFilterWithSkipping";
  *((_QWORD *)v52 + 1) = 32;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v66 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 32;
  *(_QWORD *)v54 = "cleanUpHandByTwoHandsOcclusion";
  *((_QWORD *)v54 + 1) = 30;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v66 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 33;
  *(_QWORD *)v56 = "cleanUpHandByGhostHand";
  *((_QWORD *)v56 + 1) = 22;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v66 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 34;
  *(_QWORD *)v58 = "uvoFilterDataAssociation";
  *((_QWORD *)v58 + 1) = 24;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v66 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 35;
  *(_QWORD *)v60 = "filterDoubleDetection";
  *((_QWORD *)v60 + 1) = 21;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v66 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 36;
  *(_QWORD *)v62 = "filterTrackingByDistance";
  *((_QWORD *)v62 + 1) = 24;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v66 + v4 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 37;
  *(_QWORD *)v64 = "updateTrackingHealthScoreForSpeed";
  *((_QWORD *)v64 + 1) = 33;
  v64[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TrackingStatePB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TrackingStatePB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23D9A70A0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "state";
  *(_QWORD *)(v5 + 8) = 5;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandEventCommon._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandEventCommon._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "masterCameraTimestamp";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "handID";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "isLeft";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandEventCommon.EventStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandEventCommon.EventStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "ONETIME";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "START";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "END";
  *(_QWORD *)(v12 + 8) = 3;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandTrackingEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandTrackingEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "eventCommonInfo";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "reason";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandFilteringEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandFilteringEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7080;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "eventCommonInfo";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "reason";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "signals";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "rejectionReason";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandCameraTransitionEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandCameraTransitionEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "eventCommonInfo";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "previousPair";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "currentPair";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandPinchEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandPinchEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_23D9A8150;
  v5 = v35 + v4;
  v6 = v35 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v35 + v4) = 1;
  *(_QWORD *)v6 = "eventCommonInfo";
  *(_QWORD *)(v6 + 8) = 15;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "pinchDown";
  *(_QWORD *)(v10 + 8) = 9;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "signal";
  *((_QWORD *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "rawPinchScore";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "filteredPinchScore";
  *((_QWORD *)v16 + 1) = 18;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "occlusionMin";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "occlusionMax";
  *((_QWORD *)v20 + 1) = 12;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "uncertainty";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "hoverDistance";
  *(_QWORD *)(v23 + 8) = 13;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "pinchSource";
  *((_QWORD *)v25 + 1) = 11;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "intentionScore";
  *((_QWORD *)v27 + 1) = 14;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "currentOisSubstate";
  *((_QWORD *)v29 + 1) = 18;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "pinchAcceptorID";
  *((_QWORD *)v31 + 1) = 15;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "oisEntryReason";
  *((_QWORD *)v33 + 1) = 14;
  v33[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandPinchEvent.PinchSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandPinchEvent.PinchSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A9720;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "POSTPROCESSING";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "MEMORY";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "CANCELLATION";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SELECTION_RECOVERY_IN_BREAK";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "CONSECUTIVE_PINCH_RECOVERY";
  *((_QWORD *)v17 + 1) = 26;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "OBJECT_INTERACTION_STATE_PINCH_SUPPRESSION";
  *((_QWORD *)v19 + 1) = 42;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "OBJECT_INTERACTION_STATE";
  *((_QWORD *)v21 + 1) = 24;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static HandCursorEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static HandCursorEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A8140;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "eventCommonInfo";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "middleDoubleTap";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "middleHover";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "middleDoubleTapState";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "activeSuppressors";
  *(_QWORD *)(v16 + 8) = 17;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CameraType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CameraType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A74A0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "RGB";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "grayscale";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "depth";
  *(_QWORD *)(v12 + 8) = 5;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ImageCalibrationDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ImageCalibrationDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23D9A74B0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "intrinsics";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "distortion_parameters";
  *(_QWORD *)(v10 + 8) = 21;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "extrinsics";
  *((_QWORD *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "camera_model";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "image_size";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "arrival_timestamp";
  *((_QWORD *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "warper_mesh";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "intrinsics_matrix";
  *((_QWORD *)v22 + 1) = 17;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "extrinsics_transform";
  *(_QWORD *)(v23 + 8) = 20;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static ImageDataPB._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static ImageDataPB._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9AC830;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "timestamp";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "calibrationData";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "sourceCamera";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "imageSize";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "jpegData";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "cameraType";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "imageRotation";
  *((_QWORD *)v21 + 1) = 13;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "rawImageData";
  *((_QWORD *)v23 + 1) = 12;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 9;
  *(_QWORD *)v24 = "prewittCurrent";
  *(_QWORD *)(v24 + 8) = 14;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 10;
  *(_QWORD *)v26 = "prewittPulseWidth";
  *((_QWORD *)v26 + 1) = 17;
  v26[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Coordinate2DPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Coordinate2DPB.traverse<A>(visitor:)()
{
  float *v0;
  uint64_t v1;
  uint64_t result;

  if (*v0 == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
  {
    if (v0[1] == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for Coordinate2DPB(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance Coordinate2DPB@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance Coordinate2DPB()
{
  return 0x616E6964726F6F43;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance Coordinate2DPB())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance Coordinate2DPB()
{
  return Coordinate2DPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance Coordinate2DPB()
{
  return Coordinate2DPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance Coordinate2DPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate2DPB and conformance Coordinate2DPB, type metadata accessor for Coordinate2DPB, (uint64_t)&protocol conformance descriptor for Coordinate2DPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Coordinate2DPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Coordinate2DPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate2DPB and conformance Coordinate2DPB, type metadata accessor for Coordinate2DPB, (uint64_t)&protocol conformance descriptor for Coordinate2DPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Coordinate2DPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate2DPB and conformance Coordinate2DPB, type metadata accessor for Coordinate2DPB, (uint64_t)&protocol conformance descriptor for Coordinate2DPB);
  return Message.hash(into:)();
}

uint64_t Coordinate3DPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1)
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Coordinate3DPB.traverse<A>(visitor:)()
{
  float *v0;
  uint64_t v1;
  uint64_t result;

  if (*v0 == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
  {
    if (v0[1] == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
    {
      if (v0[2] == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for Coordinate3DPB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance Coordinate3DPB@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance Coordinate3DPB()
{
  return 0x616E6964726F6F43;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance Coordinate3DPB())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance Coordinate3DPB()
{
  return Coordinate3DPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance Coordinate3DPB()
{
  return Coordinate3DPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance Coordinate3DPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate3DPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Coordinate3DPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Coordinate3DPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Coordinate3DPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  return Message.hash(into:)();
}

uint64_t Matrix2dPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for Matrix2dPB.VectorPB(0);
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.VectorPB and conformance Matrix2dPB.VectorPB, type metadata accessor for Matrix2dPB.VectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.VectorPB);
        goto LABEL_5;
      }
LABEL_12:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for Matrix2dPB.FloatVectorPB(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.FloatVectorPB and conformance Matrix2dPB.FloatVectorPB, type metadata accessor for Matrix2dPB.FloatVectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.FloatVectorPB);
LABEL_5:
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t Matrix2dPB.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for Matrix2dPB.VectorPB(0),
        lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.VectorPB and conformance Matrix2dPB.VectorPB, type metadata accessor for Matrix2dPB.VectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.VectorPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (*(_BYTE *)(v0 + 8) != 1
      || (result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16)
        || (type metadata accessor for Matrix2dPB.FloatVectorPB(0),
            lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.FloatVectorPB and conformance Matrix2dPB.FloatVectorPB, type metadata accessor for Matrix2dPB.FloatVectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.FloatVectorPB), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for Matrix2dPB(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance Matrix2dPB@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v1;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance Matrix2dPB()
{
  return 0x643278697274614DLL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance Coordinate3DPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance Coordinate3DPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance Matrix2dPB()
{
  return Matrix2dPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance Matrix2dPB()
{
  return Matrix2dPB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance Matrix2dPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Matrix2dPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Matrix2dPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Matrix2dPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Matrix2dPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return Message.hash(into:)();
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap(a1, static Matrix2dPB.VectorPB._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Matrix2dPB.FloatVectorPB._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CountByCameraSource._protobuf_nameMap, (uint64_t)"camera", 6);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static HandStatisticsLogging.CountByHandPresence._protobuf_nameMap, (uint64_t)"category", 8);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static HandStatisticsLogging.CountByRejectionReason._protobuf_nameMap, (uint64_t)"reason", 6);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static MissedScrollStatePB._protobuf_nameMap, (uint64_t)"potentialMissedScrollState", 26);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static MissedScrollByBreakStatePB._protobuf_nameMap, (uint64_t)"potentialMissedScrollBreakState", 31);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PinchSyncSequencePB._protobuf_nameMap, (uint64_t)"testVector", 10);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PinchModelInferenceInputPB._protobuf_nameMap, (uint64_t)"pinchModelInput", 15);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PinchModelInferenceOutputPB._protobuf_nameMap, (uint64_t)"pinchModelOutput", 16);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PinchModelInferenceInputSequencePB._protobuf_nameMap, (uint64_t)"testVector", 10);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PinchModelInferenceOutputSequencePB._protobuf_nameMap, (uint64_t)"testVector", 10);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static ActionInternalPB._protobuf_nameMap, (uint64_t)"exclusive_break_by_break_range", 30);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static HomePinchInternalPB._protobuf_nameMap, (uint64_t)"home_pinch_internal_bitmask", 27);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance Matrix2dPB.VectorPB()
{
  return 0xD000000000000013;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance Matrix2dPB.VectorPB())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance Matrix2dPB.VectorPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Matrix2dPB.VectorPB.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x24BE5C0E0]);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance Matrix2dPB.VectorPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Matrix2dPB.VectorPB.traverse<A>(visitor:)(a1, a2, a3, MEMORY[0x24BE5C250], (void (*)(_QWORD))type metadata accessor for Matrix2dPB.VectorPB);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance Matrix2dPB.VectorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.VectorPB and conformance Matrix2dPB.VectorPB, type metadata accessor for Matrix2dPB.VectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.VectorPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Matrix2dPB.VectorPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Matrix2dPB.VectorPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Matrix2dPB.VectorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.VectorPB and conformance Matrix2dPB.VectorPB, type metadata accessor for Matrix2dPB.VectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.VectorPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Matrix2dPB.VectorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.VectorPB and conformance Matrix2dPB.VectorPB, type metadata accessor for Matrix2dPB.VectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.VectorPB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Matrix2dPB.VectorPB(_QWORD *a1, char *a2)
{
  return specialized static Matrix2dPB.VectorPB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized static Array<A>.== infix(_:_:), type metadata accessor for Matrix2dPB.VectorPB) & 1;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23D9A70A0;
  v8 = v7 + v6 + *(int *)(v4 + 48);
  *(_QWORD *)(v7 + v6) = 1;
  *(_QWORD *)v8 = "data";
  *(_QWORD *)(v8 + 8) = 4;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = *MEMORY[0x24BE5C318];
  v10 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t Matrix2dPB.VectorPB.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v5 || (v10 & 1) != 0)
      break;
    if (result == 1)
      a4(v4, a2, a3);
  }
  return result;
}

uint64_t Matrix2dPB.VectorPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v5 + 16) || (result = a4(), !v6))
  {
    a5(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance Matrix2dPB.FloatVectorPB@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance Matrix2dPB.FloatVectorPB()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance Matrix2dPB.VectorPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance Matrix2dPB.VectorPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance Matrix2dPB.FloatVectorPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Matrix2dPB.VectorPB.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C088]);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance Matrix2dPB.FloatVectorPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Matrix2dPB.VectorPB.traverse<A>(visitor:)(a1, a2, a3, MEMORY[0x24BE5C238], (void (*)(_QWORD))type metadata accessor for Matrix2dPB.FloatVectorPB);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance Matrix2dPB.FloatVectorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.FloatVectorPB and conformance Matrix2dPB.FloatVectorPB, type metadata accessor for Matrix2dPB.FloatVectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.FloatVectorPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Matrix2dPB.FloatVectorPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Matrix2dPB.FloatVectorPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Matrix2dPB.FloatVectorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.FloatVectorPB and conformance Matrix2dPB.FloatVectorPB, type metadata accessor for Matrix2dPB.FloatVectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.FloatVectorPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Matrix2dPB.FloatVectorPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.FloatVectorPB and conformance Matrix2dPB.FloatVectorPB, type metadata accessor for Matrix2dPB.FloatVectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.FloatVectorPB);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Matrix2dPB.FloatVectorPB(_QWORD *a1, char *a2)
{
  return specialized static Matrix2dPB.VectorPB.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized static Array<A>.== infix(_:_:), type metadata accessor for Matrix2dPB.FloatVectorPB) & 1;
}

uint64_t Matrix3x3PB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t Matrix3x3PB.traverse<A>(visitor:)()
{
  float *v0;
  uint64_t v1;
  uint64_t result;

  if (*v0 == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
  {
    if (v0[1] == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
    {
      if (v0[2] == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
      {
        if (v0[3] == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
        {
          if (v0[4] == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
          {
            if (v0[5] == 0.0 || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
            {
              if (v0[6] == 0.0
                || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
              {
                if (v0[7] == 0.0
                  || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
                {
                  if (v0[8] == 0.0
                    || (result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(), !v1))
                  {
                    type metadata accessor for Matrix3x3PB(0);
                    return UnknownStorage.traverse<A>(visitor:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance Matrix3x3PB@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance Matrix3x3PB()
{
  return 0x783378697274614DLL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance Matrix3x3PB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 52);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance Matrix3x3PB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 52);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance Matrix3x3PB())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance Matrix3x3PB()
{
  return Matrix3x3PB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance Matrix3x3PB()
{
  return Matrix3x3PB.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance Matrix3x3PB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix3x3PB and conformance Matrix3x3PB, type metadata accessor for Matrix3x3PB, (uint64_t)&protocol conformance descriptor for Matrix3x3PB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Matrix3x3PB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static Matrix3x3PB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Matrix3x3PB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix3x3PB and conformance Matrix3x3PB, type metadata accessor for Matrix3x3PB, (uint64_t)&protocol conformance descriptor for Matrix3x3PB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Matrix3x3PB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix3x3PB and conformance Matrix3x3PB, type metadata accessor for Matrix3x3PB, (uint64_t)&protocol conformance descriptor for Matrix3x3PB);
  return Message.hash(into:)();
}

uint64_t TransformMatrixPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in TransformMatrixPB.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      closure #1 in TransformMatrixPB.decodeMessage<A>(decoder:)();
    }
  }
  return result;
}

uint64_t closure #1 in TransformMatrixPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for TransformMatrixPB(0);
  type metadata accessor for Matrix3x3PB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix3x3PB and conformance Matrix3x3PB, type metadata accessor for Matrix3x3PB, (uint64_t)&protocol conformance descriptor for Matrix3x3PB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in TransformMatrixPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for TransformMatrixPB(0);
  type metadata accessor for Coordinate3DPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t TransformMatrixPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in TransformMatrixPB.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in TransformMatrixPB.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in TransformMatrixPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix3x3PB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TransformMatrixPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 20), (uint64_t)v8, &demangling cache variable for type metadata for Matrix3x3PB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix3x3PB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix3x3PB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix3x3PB and conformance Matrix3x3PB, type metadata accessor for Matrix3x3PB, (uint64_t)&protocol conformance descriptor for Matrix3x3PB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix3x3PB);
}

uint64_t closure #2 in TransformMatrixPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TransformMatrixPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 24), (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t protocol witness for Message.init() in conformance TransformMatrixPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for Matrix3x3PB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 24);
  v7 = type metadata accessor for Coordinate3DPB(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TransformMatrixPB()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance TransformMatrixPB@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance TransformMatrixPB(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance TransformMatrixPB())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TransformMatrixPB()
{
  return TransformMatrixPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TransformMatrixPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TransformMatrixPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TransformMatrixPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB, type metadata accessor for TransformMatrixPB, (uint64_t)&protocol conformance descriptor for TransformMatrixPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TransformMatrixPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TransformMatrixPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TransformMatrixPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB, type metadata accessor for TransformMatrixPB, (uint64_t)&protocol conformance descriptor for TransformMatrixPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TransformMatrixPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB, type metadata accessor for TransformMatrixPB, (uint64_t)&protocol conformance descriptor for TransformMatrixPB);
  return Message.hash(into:)();
}

uint64_t CMTimeProtobuf.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CMTimeProtobuf.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)v0 || (result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 8) || (result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CMTimeProtobuf(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance CMTimeProtobuf@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CMTimeProtobuf()
{
  return 0x7250656D69544D43;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance Coordinate2DPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance Coordinate2DPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CMTimeProtobuf()
{
  return CMTimeProtobuf.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CMTimeProtobuf()
{
  return CMTimeProtobuf.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CMTimeProtobuf()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CMTimeProtobuf@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CMTimeProtobuf._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CMTimeProtobuf()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Coordinate2DPB()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CMTimeProtobuf()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Coordinate2DPB()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Equatable in CMTimeProtobuf()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
}

uint64_t base witness table accessor for Message in CMTimeProtobuf()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
}

uint64_t base witness table accessor for Hashable in CMTimeProtobuf()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
}

uint64_t base witness table accessor for Equatable in TransformMatrixPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB, type metadata accessor for TransformMatrixPB, (uint64_t)&protocol conformance descriptor for TransformMatrixPB);
}

uint64_t base witness table accessor for Message in TransformMatrixPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB, type metadata accessor for TransformMatrixPB, (uint64_t)&protocol conformance descriptor for TransformMatrixPB);
}

uint64_t base witness table accessor for Hashable in TransformMatrixPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB, type metadata accessor for TransformMatrixPB, (uint64_t)&protocol conformance descriptor for TransformMatrixPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TransformMatrixPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TransformMatrixPB and conformance TransformMatrixPB, type metadata accessor for TransformMatrixPB, (uint64_t)&protocol conformance descriptor for TransformMatrixPB);
}

uint64_t base witness table accessor for Equatable in Matrix3x3PB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix3x3PB and conformance Matrix3x3PB, type metadata accessor for Matrix3x3PB, (uint64_t)&protocol conformance descriptor for Matrix3x3PB);
}

uint64_t base witness table accessor for Message in Matrix3x3PB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix3x3PB and conformance Matrix3x3PB, type metadata accessor for Matrix3x3PB, (uint64_t)&protocol conformance descriptor for Matrix3x3PB);
}

uint64_t base witness table accessor for Hashable in Matrix3x3PB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix3x3PB and conformance Matrix3x3PB, type metadata accessor for Matrix3x3PB, (uint64_t)&protocol conformance descriptor for Matrix3x3PB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Matrix3x3PB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix3x3PB and conformance Matrix3x3PB, type metadata accessor for Matrix3x3PB, (uint64_t)&protocol conformance descriptor for Matrix3x3PB);
}

uint64_t base witness table accessor for Equatable in Matrix2dPB.FloatVectorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.FloatVectorPB and conformance Matrix2dPB.FloatVectorPB, type metadata accessor for Matrix2dPB.FloatVectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.FloatVectorPB);
}

uint64_t type metadata accessor for Matrix2dPB.FloatVectorPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for Matrix2dPB.FloatVectorPB);
}

uint64_t base witness table accessor for Message in Matrix2dPB.FloatVectorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.FloatVectorPB and conformance Matrix2dPB.FloatVectorPB, type metadata accessor for Matrix2dPB.FloatVectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.FloatVectorPB);
}

uint64_t base witness table accessor for Hashable in Matrix2dPB.FloatVectorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.FloatVectorPB and conformance Matrix2dPB.FloatVectorPB, type metadata accessor for Matrix2dPB.FloatVectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.FloatVectorPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Matrix2dPB.FloatVectorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.FloatVectorPB and conformance Matrix2dPB.FloatVectorPB, type metadata accessor for Matrix2dPB.FloatVectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.FloatVectorPB);
}

uint64_t base witness table accessor for Equatable in Matrix2dPB.VectorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.VectorPB and conformance Matrix2dPB.VectorPB, type metadata accessor for Matrix2dPB.VectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.VectorPB);
}

uint64_t type metadata accessor for Matrix2dPB.VectorPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for Matrix2dPB.VectorPB);
}

uint64_t base witness table accessor for Message in Matrix2dPB.VectorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.VectorPB and conformance Matrix2dPB.VectorPB, type metadata accessor for Matrix2dPB.VectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.VectorPB);
}

uint64_t base witness table accessor for Hashable in Matrix2dPB.VectorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.VectorPB and conformance Matrix2dPB.VectorPB, type metadata accessor for Matrix2dPB.VectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.VectorPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Matrix2dPB.VectorPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB.VectorPB and conformance Matrix2dPB.VectorPB, type metadata accessor for Matrix2dPB.VectorPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB.VectorPB);
}

uint64_t base witness table accessor for Equatable in Matrix2dPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
}

uint64_t base witness table accessor for Message in Matrix2dPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
}

uint64_t base witness table accessor for Hashable in Matrix2dPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Matrix2dPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
}

uint64_t base witness table accessor for Equatable in Coordinate3DPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
}

uint64_t base witness table accessor for Message in Coordinate3DPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
}

uint64_t base witness table accessor for Hashable in Coordinate3DPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Coordinate3DPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
}

uint64_t base witness table accessor for Equatable in Coordinate2DPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate2DPB and conformance Coordinate2DPB, type metadata accessor for Coordinate2DPB, (uint64_t)&protocol conformance descriptor for Coordinate2DPB);
}

uint64_t type metadata accessor for Coordinate2DPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for Coordinate2DPB);
}

uint64_t type metadata accessor for Matrix3x3PB(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t base witness table accessor for Message in Coordinate2DPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate2DPB and conformance Coordinate2DPB, type metadata accessor for Coordinate2DPB, (uint64_t)&protocol conformance descriptor for Coordinate2DPB);
}

uint64_t base witness table accessor for Hashable in Coordinate2DPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate2DPB and conformance Coordinate2DPB, type metadata accessor for Coordinate2DPB, (uint64_t)&protocol conformance descriptor for Coordinate2DPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Coordinate2DPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate2DPB and conformance Coordinate2DPB, type metadata accessor for Coordinate2DPB, (uint64_t)&protocol conformance descriptor for Coordinate2DPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CMTimeProtobuf()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type CMTimeProtobuf and conformance CMTimeProtobuf, type metadata accessor for CMTimeProtobuf, (uint64_t)&protocol conformance descriptor for CMTimeProtobuf);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t specialized static TransformMatrixPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  float *v56;
  char v57;
  float *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  float *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v79 = a1;
  v80 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v70 = *(_QWORD *)(v2 - 8);
  v71 = v2;
  MEMORY[0x24BDAC7A8](v2, v3);
  v69 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v6);
  v68 = (char *)&v67 - v7;
  v77 = type metadata accessor for Coordinate3DPB(0);
  v74 = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77, v8);
  v67 = (float *)((char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
  MEMORY[0x24BDAC7A8](v73, v10);
  v78 = (uint64_t)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v72 = (float *)((char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15, v16);
  v75 = (uint64_t)&v67 - v17;
  MEMORY[0x24BDAC7A8](v18, v19);
  v76 = (uint64_t)&v67 - v20;
  v21 = type metadata accessor for Matrix3x3PB(0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21, v23);
  v25 = (float *)((char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix3x3PB?, Matrix3x3PB?));
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix3x3PB?);
  MEMORY[0x24BDAC7A8](v30, v31);
  v33 = (float *)((char *)&v67 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v34, v35);
  v37 = (char *)&v67 - v36;
  MEMORY[0x24BDAC7A8](v38, v39);
  v41 = (char *)&v67 - v40;
  v42 = type metadata accessor for TransformMatrixPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(v79 + *(int *)(v42 + 20), (uint64_t)v41, &demangling cache variable for type metadata for Matrix3x3PB?);
  outlined init with copy of (Int32, Matrix2dPB)(v80 + *(int *)(v42 + 20), (uint64_t)v37, &demangling cache variable for type metadata for Matrix3x3PB?);
  v43 = (uint64_t)&v29[*(int *)(v26 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v41, (uint64_t)v29, &demangling cache variable for type metadata for Matrix3x3PB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v37, v43, &demangling cache variable for type metadata for Matrix3x3PB?);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v44((uint64_t)v29, 1, v21) != 1)
  {
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v33, &demangling cache variable for type metadata for Matrix3x3PB?);
    if (v44(v43, 1, v21) != 1)
    {
      outlined init with take of Matrix2dPB(v43, (uint64_t)v25, type metadata accessor for Matrix3x3PB);
      v47 = specialized static Matrix3x3PB.== infix(_:_:)(v33, v25);
      outlined destroy of Matrix3x3PB((uint64_t)v25, type metadata accessor for Matrix3x3PB);
      outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for Matrix3x3PB?);
      outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for Matrix3x3PB?);
      outlined destroy of Matrix3x3PB((uint64_t)v33, type metadata accessor for Matrix3x3PB);
      outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Matrix3x3PB?);
      if ((v47 & 1) == 0)
        goto LABEL_15;
      goto LABEL_8;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for Matrix3x3PB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for Matrix3x3PB?);
    outlined destroy of Matrix3x3PB((uint64_t)v33, type metadata accessor for Matrix3x3PB);
LABEL_6:
    v45 = &demangling cache variable for type metadata for (Matrix3x3PB?, Matrix3x3PB?);
    v46 = (uint64_t)v29;
LABEL_14:
    outlined destroy of Coordinate3DPB?(v46, v45);
    goto LABEL_15;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v37, &demangling cache variable for type metadata for Matrix3x3PB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v41, &demangling cache variable for type metadata for Matrix3x3PB?);
  if (v44(v43, 1, v21) != 1)
    goto LABEL_6;
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Matrix3x3PB?);
LABEL_8:
  v48 = v79;
  v49 = v76;
  outlined init with copy of (Int32, Matrix2dPB)(v79 + *(int *)(v42 + 24), v76, &demangling cache variable for type metadata for Coordinate3DPB?);
  v50 = v80;
  v51 = v75;
  outlined init with copy of (Int32, Matrix2dPB)(v80 + *(int *)(v42 + 24), v75, &demangling cache variable for type metadata for Coordinate3DPB?);
  v52 = v78;
  v53 = v78 + *(int *)(v73 + 48);
  outlined init with copy of (Int32, Matrix2dPB)(v49, v78, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v51, v53, &demangling cache variable for type metadata for Coordinate3DPB?);
  v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  v55 = v77;
  if (v54(v52, 1, v77) == 1)
  {
    outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?(v49, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v54(v53, 1, v55) == 1)
    {
      outlined destroy of Coordinate3DPB?(v52, &demangling cache variable for type metadata for Coordinate3DPB?);
LABEL_18:
      v62 = v70;
      v61 = v71;
      v63 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
      v64 = v68;
      v63(v68, v48, v71);
      v65 = v69;
      v63(v69, v50, v61);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v57 = dispatch thunk of static Equatable.== infix(_:_:)();
      v66 = *(void (**)(char *, uint64_t))(v62 + 8);
      v66(v65, v61);
      v66(v64, v61);
      return v57 & 1;
    }
    goto LABEL_13;
  }
  v56 = v72;
  outlined init with copy of (Int32, Matrix2dPB)(v52, (uint64_t)v72, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v54(v53, 1, v55) == 1)
  {
    outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?(v49, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v56, type metadata accessor for Coordinate3DPB);
LABEL_13:
    v45 = &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?);
    v46 = v52;
    goto LABEL_14;
  }
  v59 = v67;
  outlined init with take of Matrix2dPB(v53, (uint64_t)v67, type metadata accessor for Coordinate3DPB);
  v60 = specialized static Coordinate3DPB.== infix(_:_:)(v56, v59);
  outlined destroy of Matrix3x3PB((uint64_t)v59, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v51, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?(v49, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v56, type metadata accessor for Coordinate3DPB);
  outlined destroy of Coordinate3DPB?(v52, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((v60 & 1) != 0)
    goto LABEL_18;
LABEL_15:
  v57 = 0;
  return v57 & 1;
}

uint64_t specialized static Coordinate2DPB.== infix(_:_:)(float *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4, v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v10);
  v12 = (char *)&v19 - v11;
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    v13 = type metadata accessor for Coordinate2DPB(0);
    v14 = (char *)a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v9, (char *)a2 + *(int *)(v13 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v9, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static CMTimeProtobuf.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    v13 = type metadata accessor for CMTimeProtobuf(0);
    v14 = a1 + *(int *)(v13 + 24);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 24), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static Matrix3x3PB.== infix(_:_:)(float *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*a1 == *a2
    && a1[1] == a2[1]
    && a1[2] == a2[2]
    && a1[3] == a2[3]
    && a1[4] == a2[4]
    && a1[5] == a2[5]
    && a1[6] == a2[6]
    && a1[7] == a2[7]
    && a1[8] == a2[8])
  {
    v13 = type metadata accessor for Matrix3x3PB(0);
    v14 = (char *)a1 + *(int *)(v13 + 52);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 52), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static Matrix2dPB.VectorPB.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x24BDAC7A8](v8, v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v14);
  v16 = (char *)&v23 - v15;
  if ((a3(*a1, *(_QWORD *)a2) & 1) != 0)
  {
    v17 = a4(0);
    v18 = (char *)a1 + *(int *)(v17 + 20);
    v19 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v19(v16, v18, v8);
    v19(v13, &a2[*(int *)(v17 + 20)], v8);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v13, v8);
    v21(v16, v8);
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t specialized static Matrix2dPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16)) & 1) != 0)
  {
    v13 = type metadata accessor for Matrix2dPB(0);
    v14 = a1 + *(int *)(v13 + 28);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, a2 + *(int *)(v13 + 28), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static Coordinate3DPB.== infix(_:_:)(float *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v19 - v11;
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2])
  {
    v13 = type metadata accessor for Coordinate3DPB(0);
    v14 = (char *)a1 + *(int *)(v13 + 28);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v12, v14, v4);
    v15(v8, (char *)a2 + *(int *)(v13 + 28), v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v12, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t outlined destroy of Coordinate3DPB?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for Coordinate2DPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for CMTimeProtobuf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for Coordinate2DPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for Coordinate2DPB(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for Coordinate2DPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for Coordinate2DPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Coordinate2DPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_3Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for Coordinate2DPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_4Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for Coordinate2DPB()
{
  return type metadata completion function for CMTimeProtobuf();
}

uint64_t getEnumTagSinglePayload for Matrix2dPB.FloatVectorPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Matrix2dPB.FloatVectorPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for Matrix2dPB.FloatVectorPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for Matrix2dPB.FloatVectorPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for Matrix2dPB.FloatVectorPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for Matrix2dPB.FloatVectorPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *initializeWithTake for Matrix2dPB.FloatVectorPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for Matrix2dPB.FloatVectorPB(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Matrix2dPB.VectorPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_11Tm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Matrix2dPB.VectorPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_12Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for Matrix2dPB.FloatVectorPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t DetectionScheduler.init()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD **v2;
  _QWORD **v3;
  _QWORD **v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int64_t v20;

  *(_OWORD *)(v0 + 16) = xmmword_23D9A7060;
  v1 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 32) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 32) = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0, v1);
  *(_QWORD *)(v0 + 40) = v1;
  *(_QWORD *)(v0 + 48) = v1;
  v2 = (_QWORD **)(v0 + 48);
  *(_QWORD *)(v0 + 56) = v1;
  v3 = (_QWORD **)(v0 + 56);
  *(_QWORD *)(v0 + 64) = v1;
  v4 = (_QWORD **)(v0 + 64);
  *(_QWORD *)(v0 + 72) = v1;
  v5 = (_QWORD **)(v0 + 72);
  swift_beginAccess();
  v6 = *(_QWORD **)(v0 + 40);
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 40) = v6;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v6[3] <= 7uLL)
  {
    if (v6[2] <= 4uLL)
      v8 = 4;
    else
      v8 = v6[2];
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v8, 0, v6);
  }
  *(_QWORD *)(v0 + 40) = v6;
  swift_endAccess();
  swift_beginAccess();
  v9 = *v3;
  v10 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *v3 = v9;
  if (!(_DWORD)v10 || v9[3] <= 7uLL)
  {
    if (v9[2] <= 4uLL)
      v11 = 4;
    else
      v11 = v9[2];
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v11, 0, v9);
  }
  *v3 = v9;
  swift_endAccess();
  swift_beginAccess();
  v12 = *v4;
  v13 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *v4 = v12;
  if (!(_DWORD)v13 || v12[3] <= 7uLL)
  {
    if (v12[2] <= 4uLL)
      v14 = 4;
    else
      v14 = v12[2];
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13, v14, 0, v12);
  }
  *v4 = v12;
  swift_endAccess();
  swift_beginAccess();
  v15 = *v5;
  v16 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *v5 = v15;
  if (!(_DWORD)v16 || v15[3] <= 7uLL)
  {
    if (v15[2] <= 4uLL)
      v17 = 4;
    else
      v17 = v15[2];
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16, v17, 0, v15);
  }
  *v5 = v15;
  swift_endAccess();
  swift_beginAccess();
  v18 = *v2;
  v19 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *v2 = v18;
  if (!(_DWORD)v19 || v18[3] <= 7uLL)
  {
    if (v18[2] <= 4uLL)
      v20 = 4;
    else
      v20 = v18[2];
    v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19, v20, 0, v18);
  }
  *(_QWORD *)(v0 + 48) = v18;
  swift_endAccess();
  return v0;
}

Swift::Void __swiftcall DetectionScheduler.reconfig(_:)(HandsKitConfig *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[5];

  specialized static DetectionScheduler.getCameraSources(_:)(a1, v7);
  v3 = v7[0];
  v2 = v7[1];
  v4 = v7[2];
  v5 = v7[3];
  v6 = v7[4];
  swift_beginAccess();
  v1[5] = v3;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v1[7] = v4;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v1[6] = v5;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v1[8] = v2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v1[9] = v6;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v1[2] = -1;
}

uint64_t closure #1 in DetectionScheduler.generateHandConfirmationRequest(handsKitData:trackingInfos:updateConfig:config:)@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  _OWORD *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  char *v22;
  uint64_t v23;
  _QWORD **v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char v29;
  char v30;
  float v31;
  float32x2_t *v32;
  float32x2_t *v33;
  char v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  int v38;
  _OWORD *v39;
  _QWORD **v40;
  _OWORD v41[2];
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = a3;
  v7 = (int *)type metadata accessor for HandDescriptor();
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 144);
  v12 = (*a2)[2];
  if (v12)
  {
    v13 = 0;
    v14 = 0;
    while ((*a2)[v13 + 6] != v11)
    {
      ++v14;
      v13 += 40;
      if (v12 == v14)
        goto LABEL_5;
    }
    v39 = a4;
    v40 = a2;
    v18 = a1 + v7[25];
    v19 = *(_QWORD *)v18;
    v20 = *(unsigned __int8 *)(v18 + 8);
    outlined init with copy of HandDescriptor(a1, (uint64_t)v10);
    if (v20 == 1)
    {
      if (v19 >= 3)
      {
LABEL_8:
        v38 = 1;
        v21 = 1;
LABEL_13:
        v24 = v40;
        outlined destroy of HandDescriptor((uint64_t)v10);
        v25 = *v24;
        if (*(_QWORD *)v18 != 1)
          goto LABEL_21;
        if (v14 >= v25[2])
          goto LABEL_41;
        v26 = v25[v13 + 21];
        if (v26 == 0x7FFFFFFFFFFFFFFFLL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v26 + 1;
        result = swift_isUniquelyReferenced_nonNull_native();
        *v24 = v25;
        if ((result & 1) == 0)
          goto LABEL_42;
        while (1)
        {
          v27 = v25[2];
          if (v14 >= v27)
          {
            __break(1u);
LABEL_21:
            result = swift_isUniquelyReferenced_nonNull_native();
            *v24 = v25;
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
              v25 = (_QWORD *)result;
            }
            v27 = v25[2];
            if (v14 >= v27)
            {
              __break(1u);
              return result;
            }
            v18 = 0;
          }
          v28 = &v25[v13];
          v25[v13 + 21] = v18;
          if (v14 < v27)
            break;
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
          v25 = (_QWORD *)result;
        }
        v29 = *((_BYTE *)v28 + 160);
        if (v21 || (v29 & 1) == 0)
        {
          v30 = v29 | v21;
        }
        else
        {
          v31 = *(float *)(v45 + 56);
          if (v31 <= 0.0)
          {
            v30 = 0;
          }
          else
          {
            v32 = (float32x2_t *)(a1 + v7[19]);
            if ((v32[2].i8[0] & 1) != 0)
            {
              v30 = v18 < *(int *)(v45 + 60);
            }
            else
            {
              v33 = (float32x2_t *)(a1 + v7[20]);
              if ((v33[2].i8[0] & 1) == 0)
              {
                v16 = v39;
                v34 = v38;
                if ((uint64_t)v25[v13 + 5] < 2)
                {
                  v30 = 1;
                }
                else
                {
                  *(float32x2_t *)v35.f32 = vsub_f32(*v32, *v33);
                  *(float32x2_t *)&v35.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v32->f32, *(int8x16_t *)v32->f32, 8uLL), *(float32x2_t *)(a1 + v7[20] + 8));
                  v36 = vmulq_f32(v35, v35);
                  v30 = v31 < sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0]);
                }
                goto LABEL_35;
              }
              v30 = 1;
            }
          }
        }
        v16 = v39;
        v34 = v38;
LABEL_35:
        *((_BYTE *)v28 + 160) = v30 & 1;
        BYTE1(v25[v13 + 20]) = v34;
        *v24 = v25;
        goto LABEL_36;
      }
    }
    else if (v19 == 3)
    {
      goto LABEL_8;
    }
    v22 = &v10[v7[25]];
    v23 = *(_QWORD *)v22;
    if (v22[8] == 1)
      v23 = qword_23D9A8118[v23];
    v38 = 0;
    v21 = v23 == 0;
    goto LABEL_13;
  }
LABEL_5:
  v42 = 0;
  v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v42 = 0xD000000000000014;
  v43 = 0x800000023D9C4D40;
  *(_QWORD *)&v41[0] = v11;
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v16 = a4;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v44 = MEMORY[0x24BEE0D00];
  type metadata accessor for HandyLoggerNeo();
  memset(v41, 0, sizeof(v41));
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v41, 0xD000000000000070, 0x800000023D9C4C70, 103, (uint64_t)&v42, MEMORY[0x24BEE4AF8]);
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)&v42);
LABEL_36:
  *v16 = 0u;
  v16[1] = 0u;
  return result;
}

uint64_t DetectionScheduler.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DetectionScheduler()
{
  return objc_opt_self();
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  return specialized MutableCollection<>.sort(by:)(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized Array._makeMutableAndUnique()()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)*v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = (uint64_t)v1;
  if (!(_DWORD)result)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    *v0 = result;
  }
  return result;
}

unint64_t specialized Array._checkSubscript_mutating(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(_QWORD *)(a2 + 16) <= result)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 16 * a3;
LABEL_5:
    v6 = v5;
    v7 = result;
    while (1)
    {
      v8 = *(_QWORD *)v6;
      v9 = *(_BYTE *)(v6 + 8);
      v10 = *(_QWORD *)(v6 - 16);
      if (*(_BYTE *)(v6 - 8) == 1)
        return ((uint64_t (*)(void))((char *)&loc_23D6E3CD4 + *((int *)qword_23D6E3D68 + v10)))();
      if (v8 < v10)
      {
        if (!v4)
        {
          __break(1u);
          JUMPOUT(0x23D6E3D68);
        }
        *(_OWORD *)v6 = *(_OWORD *)(v6 - 16);
        *(_BYTE *)(v6 - 8) = v9;
        *(_QWORD *)(v6 - 16) = v8;
        v6 -= 16;
        if (a3 != ++v7)
          continue;
      }
      ++a3;
      v5 += 16;
      if (a3 == a2)
        return result;
      goto LABEL_5;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = (uint64_t *)(*a4 + (a3 << 7));
    do
    {
      v6 = result;
      v7 = v5;
      do
      {
        v8 = v7[2];
        v9 = *((_BYTE *)v7 + 24);
        v10 = *(v7 - 14);
        if (*((_BYTE *)v7 - 104) == 1)
          __asm { BR              X16 }
        if (v8 >= v10)
          break;
        if (!v4)
        {
          __break(1u);
          JUMPOUT(0x23D82B83CLL);
        }
        v11 = *v7;
        v12 = *((_BYTE *)v7 + 8);
        v13 = *((_OWORD *)v7 + 2);
        v14 = v7[6];
        v15 = *((_OWORD *)v7 + 4);
        v16 = v7[10];
        v17 = v7[12];
        v18 = *((_DWORD *)v7 + 26);
        v19 = *((_BYTE *)v7 + 108);
        v20 = v7[14];
        v21 = v7[11];
        v22 = *((_OWORD *)v7 - 3);
        *((_OWORD *)v7 + 4) = *((_OWORD *)v7 - 4);
        *((_OWORD *)v7 + 5) = v22;
        v23 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v7 + 6) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v7 + 7) = v23;
        v24 = *((_OWORD *)v7 - 7);
        *(_OWORD *)v7 = *((_OWORD *)v7 - 8);
        *((_OWORD *)v7 + 1) = v24;
        v25 = *((_OWORD *)v7 - 5);
        *((_OWORD *)v7 + 2) = *((_OWORD *)v7 - 6);
        *((_OWORD *)v7 + 3) = v25;
        *((_BYTE *)v7 - 120) = v12;
        *(v7 - 14) = v8;
        *((_BYTE *)v7 - 104) = v9;
        *((_OWORD *)v7 - 6) = v13;
        *(v7 - 10) = v14;
        *((_OWORD *)v7 - 4) = v15;
        *(v7 - 6) = v16;
        *(v7 - 5) = v21;
        *(v7 - 4) = v17;
        *((_DWORD *)v7 - 6) = v18;
        *((_BYTE *)v7 - 20) = v19;
        *(v7 - 2) = v20;
        ++v6;
        *(v7 - 16) = v11;
        v7 -= 16;
      }
      while (a3 != v6);
      ++a3;
      v5 += 16;
    }
    while (a3 != a2);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands12CameraSourceOG_AF17DetectionSpecItemVs5NeverOTg5035_s5Hands14SchedulerUtilsV24generategh51For7cameras8pipeline9timestamp6handIDAA0eF0VSayAA12ef56OG_So16PosePipelineTypeVSo6CMTimeaSays6UInt64VGtFZAA0eF4I8VALXEfU_Says6UInt64VGSo6CMTimeaTf1cn_nTf4ngn_n(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  int v8;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v8 = a4;
    v20 = HIDWORD(a4);
    v23 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v23;
    v12 = (_BYTE *)(a1 + 40);
    do
    {
      v22 = *((_QWORD *)v12 - 1);
      v21 = *v12;
      swift_bridgeObjectRetain();
      CMTime.seconds.getter();
      v14 = v13;
      v15 = a5;
      v17 = *(_QWORD *)(v23 + 16);
      v16 = *(_QWORD *)(v23 + 24);
      if (v17 >= v16 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      *(_QWORD *)(v23 + 16) = v17 + 1;
      v18 = v23 + (v17 << 7);
      *(_QWORD *)(v18 + 32) = 1;
      *(_BYTE *)(v18 + 40) = 1;
      *(_QWORD *)(v18 + 48) = v22;
      *(_BYTE *)(v18 + 56) = v21;
      *(_OWORD *)(v18 + 64) = xmmword_23D9A80A0;
      *(_QWORD *)(v18 + 80) = a2;
      *(_OWORD *)(v18 + 96) = xmmword_23D9A3E30;
      *(_QWORD *)(v18 + 112) = a3;
      *(_DWORD *)(v18 + 120) = v8;
      *(_DWORD *)(v18 + 124) = v20;
      *(_QWORD *)(v18 + 128) = v15;
      *(_DWORD *)(v18 + 136) = 0;
      *(_BYTE *)(v18 + 140) = 1;
      v12 += 16;
      *(_QWORD *)(v18 + 144) = v14;
      --v5;
      a5 = v15;
    }
    while (v5);
  }
  return v6;
}

uint64_t specialized static DetectionScheduler.getCameraSources(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int v13;
  int v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  char **v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  int v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  char v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  int v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t result;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _OWORD v99[2];
  uint64_t v100[5];

  v3 = a1;
  v4 = objc_msgSend(a1, sel_InputImageStreams);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8 = specialized static DetectionUtils.GetDetectionCameraSet(inputImageStreams:)(v5, v7);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v8 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  v95 = v3;
  if (v9)
  {
    v100[0] = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v11 = v100[0];
    v12 = specialized _NativeSet.startIndex.getter(v8);
    v14 = v13;
    v16 = v15 & 1;
    while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(_BYTE *)(v8 + 32))
    {
      if (((*(_QWORD *)(v8 + 56 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_66;
      if (*(_DWORD *)(v8 + 36) != v14)
        goto LABEL_67;
      v17 = *(_QWORD *)(v8 + 48) + 16 * v12;
      v18 = *(_QWORD *)v17;
      v19 = *(_BYTE *)(v17 + 8);
      v100[0] = v11;
      v21 = *(_QWORD *)(v11 + 16);
      v20 = *(_QWORD *)(v11 + 24);
      v2 = v21 + 1;
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v11 = v100[0];
      }
      *(_QWORD *)(v11 + 16) = v2;
      v22 = v11 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v18;
      *(_BYTE *)(v22 + 40) = v19;
      v23 = specialized _NativeSet.index(after:)(v12, v14, v16 & 1, v8);
      v12 = v23;
      v14 = v24;
      v16 = v25 & 1;
      if (!--v9)
      {
        outlined consume of Set<CameraSource>.Index._Variant(v23, v24, v25 & 1);
        swift_bridgeObjectRelease();
        v3 = v95;
        v10 = MEMORY[0x24BEE4AF8];
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  swift_bridgeObjectRelease();
  v11 = MEMORY[0x24BEE4AF8];
LABEL_12:
  v100[0] = v11;
  swift_bridgeObjectRetain();
  v8 = 0;
  specialized MutableCollection<>.sort(by:)(v100);
  swift_bridgeObjectRelease();
  v2 = v100[0];
  v26 = &selRef_downScaleIntrinsics_;
  v27 = objc_msgSend(v3, sel_DetectionInputImageStreams);
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  v31 = specialized static DetectionUtils.GetDetectionCameraSet(inputImageStreams:)(v28, v30);
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(v31 + 16);
  v97 = v2;
  if (v32)
  {
    v100[0] = v10;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
    v33 = v100[0];
    v34 = specialized _NativeSet.startIndex.getter(v31);
    v36 = v35;
    v2 = v37 & 1;
    while ((v34 & 0x8000000000000000) == 0 && v34 < 1 << *(_BYTE *)(v31 + 32))
    {
      if (((*(_QWORD *)(v31 + 56 + (((unint64_t)v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
        goto LABEL_69;
      if (*(_DWORD *)(v31 + 36) != v36)
        goto LABEL_70;
      v38 = *(_QWORD *)(v31 + 48) + 16 * v34;
      v39 = *(_QWORD *)v38;
      v8 = *(unsigned __int8 *)(v38 + 8);
      v100[0] = v33;
      v41 = *(_QWORD *)(v33 + 16);
      v40 = *(_QWORD *)(v33 + 24);
      if (v41 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
        v33 = v100[0];
      }
      *(_QWORD *)(v33 + 16) = v41 + 1;
      v42 = v33 + 16 * v41;
      *(_QWORD *)(v42 + 32) = v39;
      *(_BYTE *)(v42 + 40) = v8;
      v43 = specialized _NativeSet.index(after:)(v34, v36, v2 & 1, v31);
      v34 = v43;
      v36 = v44;
      v2 = v45 & 1;
      if (!--v32)
      {
        outlined consume of Set<CameraSource>.Index._Variant(v43, v44, v45 & 1);
        swift_bridgeObjectRelease();
        v3 = v95;
        v2 = v97;
        v10 = MEMORY[0x24BEE4AF8];
        v26 = &selRef_downScaleIntrinsics_;
        v8 = 0;
        goto LABEL_23;
      }
    }
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  swift_bridgeObjectRelease();
  v33 = MEMORY[0x24BEE4AF8];
LABEL_23:
  v100[0] = v33;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(v100);
  swift_bridgeObjectRelease();
  v92 = v100[0];
  v46 = objc_msgSend(v3, v26[18]);
  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v49 = v48;

  v50 = specialized static DetectionUtils.GetRoundRobinCameraSet(inputImageStreams:)(v47, v49);
  swift_bridgeObjectRelease();
  v51 = *(_QWORD *)(v50 + 16);
  if (v51)
  {
    v100[0] = v10;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51, 0);
    v52 = v100[0];
    v53 = specialized _NativeSet.startIndex.getter(v50);
    v55 = v54;
    v2 = v56 & 1;
    while ((v53 & 0x8000000000000000) == 0 && v53 < 1 << *(_BYTE *)(v50 + 32))
    {
      if (((*(_QWORD *)(v50 + 56 + (((unint64_t)v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
        goto LABEL_72;
      if (*(_DWORD *)(v50 + 36) != v55)
        goto LABEL_73;
      v57 = *(_QWORD *)(v50 + 48) + 16 * v53;
      v58 = *(_QWORD *)v57;
      v8 = *(unsigned __int8 *)(v57 + 8);
      v100[0] = v52;
      v60 = *(_QWORD *)(v52 + 16);
      v59 = *(_QWORD *)(v52 + 24);
      if (v60 >= v59 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
        v52 = v100[0];
      }
      *(_QWORD *)(v52 + 16) = v60 + 1;
      v61 = v52 + 16 * v60;
      *(_QWORD *)(v61 + 32) = v58;
      *(_BYTE *)(v61 + 40) = v8;
      v62 = specialized _NativeSet.index(after:)(v53, v55, v2 & 1, v50);
      v53 = v62;
      v55 = v63;
      v2 = v64 & 1;
      if (!--v51)
      {
        outlined consume of Set<CameraSource>.Index._Variant(v62, v63, v64 & 1);
        swift_bridgeObjectRelease();
        v3 = v95;
        v2 = v97;
        goto LABEL_34;
      }
    }
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  swift_bridgeObjectRelease();
  v52 = MEMORY[0x24BEE4AF8];
LABEL_34:
  v100[0] = v52;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(v100);
  swift_bridgeObjectRelease();
  v8 = v100[0];
  if (objc_msgSend(v3, sel_PosePipelineType) == 2)
  {
    if (one-time initialization token for _stereoCameraPairsListMCP == -1)
    {
LABEL_36:
      v65 = &static SchedulerUtils._stereoCameraPairsListMCP;
      goto LABEL_40;
    }
LABEL_74:
    swift_once();
    goto LABEL_36;
  }
  if (one-time initialization token for _stereoCameraPairsListN301 != -1)
    swift_once();
  v65 = (uint64_t *)&static SchedulerUtils._stereoCameraPairsListN301;
LABEL_40:
  v94 = *v65;
  v66 = *(_QWORD *)(*v65 + 16);
  if (v66)
  {
    v91 = v8;
    v67 = v94 + 32;
    v68 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRetain();
    v69 = (uint64_t *)(v2 + 32);
    v70 = 0;
    v98 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v96 = v2 + 32;
    do
    {
      if (v68)
      {
        v72 = (uint64_t *)(v67 + 32 * v70);
        v73 = *v72;
        v74 = *((unsigned __int8 *)v72 + 8);
        v75 = v72[2];
        v76 = *((unsigned __int8 *)v72 + 24);
        v77 = v69;
        v78 = v68;
        while (1)
        {
          v80 = *v77;
          v77 += 2;
          v79 = v80;
          if (v74)
            __asm { BR              X11 }
          if (v79 == v73)
            break;
          if (!--v78)
            goto LABEL_43;
        }
        v81 = *(_QWORD *)(v2 + 16);
        if (v81)
        {
          v82 = v69;
          while (1)
          {
            v84 = *v82;
            v82 += 2;
            v83 = v84;
            if (v76)
              __asm { BR              X11 }
            if (v83 == v75)
              break;
            if (!--v81)
              goto LABEL_43;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v98[2] + 1, 1, v98);
          v86 = v98[2];
          v85 = v98[3];
          v69 = (uint64_t *)v96;
          if (v86 >= v85 >> 1)
          {
            v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v85 > 1), v86 + 1, 1, v98);
            v69 = (uint64_t *)v96;
            v98 = v87;
          }
          v98[2] = v86 + 1;
          v71 = &v98[4 * v86];
          v71[4] = v73;
          *((_BYTE *)v71 + 40) = 0;
          v71[6] = v75;
          *((_BYTE *)v71 + 56) = 0;
          v2 = v97;
          v67 = v94 + 32;
        }
      }
LABEL_43:
      ++v70;
    }
    while (v70 != v66);
    swift_bridgeObjectRelease();
    v8 = v91;
    if (*(_QWORD *)(v91 + 16))
      goto LABEL_61;
LABEL_63:
    v100[3] = MEMORY[0x24BEE0D00];
    v100[0] = 0xD00000000000002DLL;
    v100[1] = 0x800000023D9C4CF0;
    type metadata accessor for HandyLoggerNeo();
    memset(v99, 0, sizeof(v99));
    v89 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v99, 0xD000000000000070, 0x800000023D9C4C70, 187, (uint64_t)v100, MEMORY[0x24BEE4AF8]);
    result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v100);
    goto LABEL_64;
  }
  v98 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_63;
LABEL_61:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>);
  result = swift_allocObject();
  v89 = result;
  *(_OWORD *)(result + 16) = xmmword_23D9A70A0;
  v90 = *(_BYTE *)(v8 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(v8 + 32);
  *(_BYTE *)(result + 40) = v90;
LABEL_64:
  *a2 = v2;
  a2[1] = v92;
  a2[2] = v8;
  a2[3] = (uint64_t)v98;
  a2[4] = v89;
  return result;
}

uint64_t specialized DetectionScheduler.updateCounters(tinfoCount:config:handsKitTimestamp:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = 104;
  if (a1 == 1)
    v4 = 100;
  if (!a1)
    v4 = 96;
  v5 = *(int *)(a2 + v4);
  result = swift_beginAccess();
  v7 = *(_QWORD *)(v2 + 16);
  if (v7 <= 0x7FFFFFFFFFFFFFFDLL)
    v8 = v7 + 1;
  else
    v8 = 0;
  *(_QWORD *)(v2 + 16) = v8;
  if (v8 < 0)
  {
    if (!a1)
      return 18;
    return 20;
  }
  if (!(_DWORD)v5)
  {
    __break(1u);
    return result;
  }
  v9 = v8 % v5;
  if (v9)
    result = 18;
  else
    result = 19;
  if (a1 && v9)
    return 20;
  return result;
}

uint64_t specialized DetectionScheduler.generateRoundRobinDetectionRequest(handsKitData:config:pipeline:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t inited;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _OWORD v22[2];
  _QWORD v23[4];

  v2 = *a1;
  v3 = a1[43];
  v4 = *((unsigned int *)a1 + 88);
  v5 = *((unsigned int *)a1 + 89);
  v6 = a1[45];
  swift_beginAccess();
  v7 = v1[7];
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
    v23[3] = MEMORY[0x24BEE0D00];
    v23[0] = 0xD00000000000002DLL;
    v23[1] = 0x800000023D9C4CF0;
    type metadata accessor for HandyLoggerNeo();
    memset(v22, 0, sizeof(v22));
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v22, 0xD000000000000070, 0x800000023D9C4C70, 70, (uint64_t)v23, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
    return 17;
  }
  v9 = v1 + 2;
  swift_beginAccess();
  v10 = v1[3];
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_13;
  }
  v1[3] = (v10 + 1) % v8;
  v11 = *(_QWORD *)(v7 + 16);
  if (!v11)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v12 = v10 % v11;
  if (v12 < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v7 + 16 * v12;
  v14 = *(_QWORD *)(v13 + 32);
  v15 = *(_BYTE *)(v13 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A70A0;
  *(_QWORD *)(inited + 32) = v14;
  *(_BYTE *)(inited + 40) = v15;
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay5Hands12CameraSourceOG_AF17DetectionSpecItemVs5NeverOTg5035_s5Hands14SchedulerUtilsV24generategh51For7cameras8pipeline9timestamp6handIDAA0eF0VSayAA12ef56OG_So16PosePipelineTypeVSo6CMTimeaSays6UInt64VGtFZAA0eF4I8VALXEfU_Says6UInt64VGSo6CMTimeaTf1cn_nTf4ngn_n(inited, MEMORY[0x24BEE4AF8], v3, v4 | (v5 << 32), v6);
  swift_setDeallocating();
  swift_beginAccess();
  v9 = (_QWORD *)v1[4];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[4] = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_15:
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    v1[4] = v9;
  }
  v19 = v9[2];
  v18 = v9[3];
  if (v19 >= v18 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v9);
    v1[4] = v9;
  }
  v9[2] = v19 + 1;
  v20 = &v9[4 * v19];
  v20[4] = v3;
  *((_DWORD *)v20 + 10) = v4;
  *((_DWORD *)v20 + 11) = v5;
  v20[6] = v6;
  v20[7] = v7;
  swift_endAccess();
  if (*(_QWORD *)(v2 + 16))
    return 20;
  else
    return 18;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD *)(type metadata accessor for HandDescriptor() - 8);
  v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v15 = *(_QWORD *)(v6 + 72);
  swift_bridgeObjectRetain();
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    closure #1 in DetectionScheduler.generateHandConfirmationRequest(handsKitData:trackingInfos:updateConfig:config:)(v7, a2, a3, &v18);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    v10 = v20;
    if (v20)
    {
      v11 = v18;
      v21 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v13 = v8[2];
      v12 = v8[3];
      if (v13 >= v12 >> 1)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v8);
      v8[2] = v13 + 1;
      v9 = &v8[4 * v13];
      *((_OWORD *)v9 + 2) = v11;
      v9[6] = v21;
      v9[7] = v10;
    }
    v7 += v15;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized DetectionScheduler.generateHandConfirmationRequest(handsKitData:trackingInfos:updateConfig:config:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  Swift::String v4;
  uint64_t v6;
  _QWORD *v7;
  _OWORD v9[2];
  _QWORD v10[5];

  v3 = a2;
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 16) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    *(_QWORD *)&v9[0] = a2;
    swift_bridgeObjectRetain();
    outlined retain of SchedulingConfig(a3);
    v6 = swift_bridgeObjectRetain();
    v7 = specialized Sequence.compactMap<A>(_:)(v6, (_QWORD **)v9, a3);
    outlined release of SchedulingConfig(a3);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    specialized Array.append<A>(contentsOf:)((uint64_t)v7);
    swift_endAccess();
    return *(_QWORD *)&v9[0];
  }
  else
  {
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    v10[0] = 0xD000000000000019;
    v10[1] = 0x800000023D9C4D20;
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v10[3] = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    memset(v9, 0, sizeof(v9));
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(5u, 1, (uint64_t *)v9, 0xD000000000000070, 0x800000023D9C4C70, 94, (uint64_t)v10, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t outlined retain of SchedulingConfig(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of SchedulingConfig(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of Set<CameraSource>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t SimilarityMatrixCollectionPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in SimilarityMatrixCollectionPB.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in SimilarityMatrixCollectionPB.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in SimilarityMatrixCollectionPB.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in SimilarityMatrixCollectionPB.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #5 in SimilarityMatrixCollectionPB.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in SimilarityMatrixCollectionPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for SimilarityMatrixCollectionPB(0);
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in SimilarityMatrixCollectionPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for SimilarityMatrixCollectionPB(0);
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in SimilarityMatrixCollectionPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for SimilarityMatrixCollectionPB(0);
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #4 in SimilarityMatrixCollectionPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for SimilarityMatrixCollectionPB(0);
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #5 in SimilarityMatrixCollectionPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for SimilarityMatrixCollectionPB(0);
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t SimilarityMatrixCollectionPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in SimilarityMatrixCollectionPB.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in SimilarityMatrixCollectionPB.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #3 in SimilarityMatrixCollectionPB.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #4 in SimilarityMatrixCollectionPB.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #5 in SimilarityMatrixCollectionPB.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in SimilarityMatrixCollectionPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SimilarityMatrixCollectionPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 20), (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t closure #2 in SimilarityMatrixCollectionPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SimilarityMatrixCollectionPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 24), (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t closure #3 in SimilarityMatrixCollectionPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SimilarityMatrixCollectionPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 28), (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t closure #4 in SimilarityMatrixCollectionPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SimilarityMatrixCollectionPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 32), (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t closure #5 in SimilarityMatrixCollectionPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Matrix2dPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SimilarityMatrixCollectionPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v14 + 36), (uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Matrix2dPB);
}

uint64_t protocol witness for Message.init() in conformance SimilarityMatrixCollectionPB@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for Matrix2dPB(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v7(v4, 1, 1, v5);
  v7(a2 + a1[6], 1, 1, v5);
  v7(a2 + a1[7], 1, 1, v5);
  v7(a2 + a1[8], 1, 1, v5);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(a2 + a1[9], 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance SimilarityMatrixCollectionPB()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance SimilarityMatrixCollectionPB()
{
  return SimilarityMatrixCollectionPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance SimilarityMatrixCollectionPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SimilarityMatrixCollectionPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance SimilarityMatrixCollectionPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB, type metadata accessor for SimilarityMatrixCollectionPB, (uint64_t)&protocol conformance descriptor for SimilarityMatrixCollectionPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance SimilarityMatrixCollectionPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static SimilarityMatrixCollectionPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SimilarityMatrixCollectionPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB, type metadata accessor for SimilarityMatrixCollectionPB, (uint64_t)&protocol conformance descriptor for SimilarityMatrixCollectionPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SimilarityMatrixCollectionPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB, type metadata accessor for SimilarityMatrixCollectionPB, (uint64_t)&protocol conformance descriptor for SimilarityMatrixCollectionPB);
  return Message.hash(into:)();
}

uint64_t TrackingUpdateDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in TrackingUpdateDataPB.decodeMessage<A>(decoder:)();
          break;
        case 2:
        case 3:
        case 13:
        case 14:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 4:
        case 9:
        case 10:
        case 11:
        case 12:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 5:
          type metadata accessor for TrackingUpdateDataPB(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 7:
          closure #6 in TrackingUpdateDataPB.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #7 in TrackingUpdateDataPB.decodeMessage<A>(decoder:)();
          break;
        case 15:
          lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in TrackingUpdateDataPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for TrackingUpdateDataPB(0);
  type metadata accessor for Coordinate3DPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #6 in TrackingUpdateDataPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufInt32();
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t closure #7 in TrackingUpdateDataPB.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufInt32();
  type metadata accessor for Matrix2dPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t TrackingUpdateDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in TrackingUpdateDataPB.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(float *)v3 != 0.0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if (*(float *)(v3 + 4) != 0.0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if (*(_BYTE *)(v3 + 8) == 1)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    closure #2 in TrackingUpdateDataPB.traverse<A>(visitor:)(v3);
    if (*(_QWORD *)(*(_QWORD *)(v3 + 16) + 16))
    {
      type metadata accessor for ProtobufInt32();
      type metadata accessor for Matrix2dPB(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
      dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
    }
    if (*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16))
    {
      type metadata accessor for ProtobufInt32();
      type metadata accessor for Matrix2dPB(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Matrix2dPB and conformance Matrix2dPB, type metadata accessor for Matrix2dPB, (uint64_t)&protocol conformance descriptor for Matrix2dPB);
      dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
    }
    if (*(_BYTE *)(v3 + 32) == 1)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v3 + 33) == 1)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v3 + 34) == 1)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v3 + 35) == 1)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(float *)(v3 + 36) != 0.0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if (*(float *)(v3 + 40) != 0.0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if (*(_QWORD *)(*(_QWORD *)(v3 + 48) + 16))
    {
      lazy protocol witness table accessor for type CameraSource and conformance CameraSource();
      dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)();
    }
    type metadata accessor for TrackingUpdateDataPB(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in TrackingUpdateDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t updated;
  _QWORD v16[2];

  v16[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Coordinate3DPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for TrackingUpdateDataPB(0);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(updated + 68), (uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for Coordinate3DPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type Coordinate3DPB and conformance Coordinate3DPB, type metadata accessor for Coordinate3DPB, (uint64_t)&protocol conformance descriptor for Coordinate3DPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for Coordinate3DPB);
}

uint64_t closure #2 in TrackingUpdateDataPB.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for TrackingUpdateDataPB(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 72) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t protocol witness for Message.init() in conformance TrackingUpdateDataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a2 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(a2 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = v4;
  UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 68);
  v6 = type metadata accessor for Coordinate3DPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = a2 + *(int *)(a1 + 72);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingUpdateDataPB()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance TrackingUpdateDataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 64);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance TrackingUpdateDataPB(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 64);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance TrackingUpdateDataPB())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingUpdateDataPB()
{
  return TrackingUpdateDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingUpdateDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TrackingUpdateDataPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingUpdateDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB, type metadata accessor for TrackingUpdateDataPB, (uint64_t)&protocol conformance descriptor for TrackingUpdateDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingUpdateDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingUpdateDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingUpdateDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB, type metadata accessor for TrackingUpdateDataPB, (uint64_t)&protocol conformance descriptor for TrackingUpdateDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingUpdateDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB, type metadata accessor for TrackingUpdateDataPB, (uint64_t)&protocol conformance descriptor for TrackingUpdateDataPB);
  return Message.hash(into:)();
}

unint64_t one-time initialization function for defaultInstance()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;

  type metadata accessor for TrackingIntermediateDataPB._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__similarityMatrixCollection;
  v2 = type metadata accessor for SimilarityMatrixCollectionPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__dataAssociationResult;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + v3) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v5 = OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__trackingUpdateData;
  result = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(_QWORD *)(v0 + v5) = result;
  static TrackingIntermediateDataPB._StorageClass.defaultInstance = v0;
  return result;
}

uint64_t TrackingIntermediateDataPB._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1
     + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__similarityMatrixCollection;
  v8 = type metadata accessor for SimilarityMatrixCollectionPB(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (unint64_t *)(v1
                          + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__dataAssociationResult);
  v10 = MEMORY[0x24BEE4AF8];
  *v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v11 = (unint64_t *)(v1
                           + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__trackingUpdateData);
  *v11 = specialized Dictionary.init(dictionaryLiteral:)(v10);
  v12 = a1
      + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__similarityMatrixCollection;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v12, (uint64_t)v6, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  swift_beginAccess();
  outlined assign with take of SimilarityMatrixCollectionPB?((uint64_t)v6, v7);
  swift_endAccess();
  v13 = (unint64_t *)(a1
                           + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__dataAssociationResult);
  swift_beginAccess();
  v14 = *v13;
  swift_beginAccess();
  *v9 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = (unint64_t *)(a1
                           + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__trackingUpdateData);
  swift_beginAccess();
  v16 = *v15;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *v11 = v16;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t TrackingIntermediateDataPB._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Coordinate3DPB?(v0+ OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__similarityMatrixCollection, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TrackingIntermediateDataPB._StorageClass()
{
  return type metadata accessor for TrackingIntermediateDataPB._StorageClass(0);
}

uint64_t type metadata accessor for TrackingIntermediateDataPB._StorageClass(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingIntermediateDataPB._StorageClass);
}

void type metadata completion function for TrackingIntermediateDataPB._StorageClass()
{
  unint64_t v0;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for SimilarityMatrixCollectionPB?, (void (*)(uint64_t))type metadata accessor for SimilarityMatrixCollectionPB);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for SimilarityMatrixCollectionPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for SimilarityMatrixCollectionPB);
}

uint64_t *initializeBufferWithCopyOfBuffer for TrackingIntermediateDataPB(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for TrackingIntermediateDataPB(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for TrackingIntermediateDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TrackingIntermediateDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TrackingIntermediateDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TrackingIntermediateDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingIntermediateDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6E7C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackingIntermediateDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6E7CD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TrackingIntermediateDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingIntermediateDataPB);
}

uint64_t type metadata completion function for TrackingIntermediateDataPB()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TrackingUpdateDataPB(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    *(_QWORD *)(a1 + 36) = *(uint64_t *)((char *)a2 + 36);
    *(_QWORD *)(a1 + 48) = a2[6];
    v8 = a3[16];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[17];
    v14 = (_DWORD *)((char *)v4 + v13);
    v15 = (_DWORD *)((char *)a2 + v13);
    v16 = type metadata accessor for Coordinate3DPB(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      v14[2] = v15[2];
      v12((uint64_t)v14 + *(int *)(v16 + 28), (uint64_t)v15 + *(int *)(v16 + 28), v11);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v20 = a3[18];
    v21 = (char *)v4 + v20;
    v22 = (uint64_t)a2 + v20;
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = *(_BYTE *)(v22 + 4);
  }
  return v4;
}

uint64_t destroy for TrackingUpdateDataPB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 64);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 68);
  v7 = type metadata accessor for Coordinate3DPB(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 28), v5);
  return result;
}

uint64_t initializeWithCopy for TrackingUpdateDataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a3[16];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[17];
  v13 = (_DWORD *)(a1 + v12);
  v14 = (_DWORD *)(a2 + v12);
  v15 = type metadata accessor for Coordinate3DPB(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[2] = v14[2];
    v11((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v10);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[18];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t assignWithCopy for TrackingUpdateDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_DWORD *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v25;
  uint64_t v26;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 64);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v25 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24);
  v10(v7, v8, v9);
  v26 = a3;
  v11 = *(int *)(a3 + 68);
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for Coordinate3DPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      *v12 = *v13;
      v12[1] = v13[1];
      v12[2] = v13[2];
      v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v9);
      goto LABEL_7;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for Coordinate3DPB);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *v12 = *v13;
  v12[1] = v13[1];
  v12[2] = v13[2];
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v20 = *(int *)(v26 + 72);
  v21 = a1 + v20;
  v22 = (int *)(a2 + v20);
  v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)v21 = v23;
  return a1;
}

uint64_t initializeWithTake for TrackingUpdateDataPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = a3[16];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[17];
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for Coordinate3DPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[18];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  return a1;
}

uint64_t assignWithTake for TrackingUpdateDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_DWORD *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 64);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v24 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 40);
  v10(v7, v8, v9);
  v25 = a3;
  v11 = *(int *)(a3 + 68);
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for Coordinate3DPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      *(_QWORD *)v12 = *(_QWORD *)v13;
      v12[2] = v13[2];
      v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v9);
      goto LABEL_7;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for Coordinate3DPB);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[2] = v13[2];
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  v20 = *(int *)(v25 + 72);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingUpdateDataPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6E8740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 64);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 68);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for TrackingUpdateDataPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6E87F0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 64);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 68);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for TrackingUpdateDataPB(uint64_t a1)
{
  return type metadata accessor for Matrix3x3PB(a1, (uint64_t *)&type metadata singleton initialization cache for TrackingUpdateDataPB);
}

void type metadata completion function for TrackingUpdateDataPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, (unint64_t *)&lazy cache variable for type metadata for Coordinate3DPB?, (void (*)(uint64_t))type metadata accessor for Coordinate3DPB);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for SimilarityMatrixCollectionPB(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v53;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for Matrix2dPB(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48);
    v53 = v13;
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      *v10 = *v11;
      *((_BYTE *)v10 + 8) = *((_BYTE *)v11 + 8);
      v10[2] = v11[2];
      v17 = *(int *)(v12 + 28);
      v18 = (char *)v10 + v17;
      v19 = (char *)v11 + v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20 = v18;
      v13 = v53;
      v8((uint64_t *)v20, (uint64_t *)v19, v7);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v10, 0, 1, v12);
    }
    v21 = a3[6];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    if (v14((uint64_t *)((char *)a2 + v21), 1, v12))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      *v22 = *v23;
      *((_BYTE *)v22 + 8) = *((_BYTE *)v23 + 8);
      v22[2] = v23[2];
      v25 = *(int *)(v12 + 28);
      v26 = (char *)v22 + v25;
      v27 = (char *)v23 + v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28 = v26;
      v13 = v53;
      v8((uint64_t *)v28, (uint64_t *)v27, v7);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v22, 0, 1, v12);
    }
    v29 = a3[7];
    v30 = (uint64_t *)((char *)a1 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    if (v14((uint64_t *)((char *)a2 + v29), 1, v12))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      *v30 = *v31;
      *((_BYTE *)v30 + 8) = *((_BYTE *)v31 + 8);
      v30[2] = v31[2];
      v33 = *(int *)(v12 + 28);
      v34 = (char *)v30 + v33;
      v35 = (char *)v31 + v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36 = v34;
      v13 = v53;
      v8((uint64_t *)v36, (uint64_t *)v35, v7);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v30, 0, 1, v12);
    }
    v37 = a3[8];
    v38 = (uint64_t *)((char *)a1 + v37);
    v39 = (uint64_t *)((char *)a2 + v37);
    if (v14((uint64_t *)((char *)a2 + v37), 1, v12))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      *v38 = *v39;
      *((_BYTE *)v38 + 8) = *((_BYTE *)v39 + 8);
      v38[2] = v39[2];
      v41 = *(int *)(v12 + 28);
      v42 = (char *)v38 + v41;
      v43 = (char *)v39 + v41;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44 = v42;
      v13 = v53;
      v8((uint64_t *)v44, (uint64_t *)v43, v7);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v38, 0, 1, v12);
    }
    v45 = a3[9];
    v46 = (uint64_t *)((char *)a1 + v45);
    v47 = (uint64_t *)((char *)a2 + v45);
    if (v14(v47, 1, v12))
    {
      v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      *v46 = *v47;
      *((_BYTE *)v46 + 8) = *((_BYTE *)v47 + 8);
      v46[2] = v47[2];
      v49 = *(int *)(v12 + 28);
      v50 = (char *)v46 + v49;
      v51 = (char *)v47 + v49;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8((uint64_t *)v50, (uint64_t *)v51, v7);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v46, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for SimilarityMatrixCollectionPB(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v13(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for Matrix2dPB(0);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13(v5 + *(int *)(v6 + 28), v4);
  }
  v8 = a1 + a2[6];
  if (!v7(v8, 1, v6))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13(v8 + *(int *)(v6 + 28), v4);
  }
  v9 = a1 + a2[7];
  if (!v7(v9, 1, v6))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13(v9 + *(int *)(v6 + 28), v4);
  }
  v10 = a1 + a2[8];
  if (!v7(v10, 1, v6))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13(v10 + *(int *)(v6 + 28), v4);
  }
  v11 = a1 + a2[9];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v11, 1, v6);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v11 + *(int *)(v6 + 28), v4);
  }
  return result;
}

uint64_t initializeWithCopy for SimilarityMatrixCollectionPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v51;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for Matrix2dPB(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  v51 = v12;
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    *((_BYTE *)v9 + 8) = *((_BYTE *)v10 + 8);
    v9[2] = v10[2];
    v15 = *(int *)(v11 + 28);
    v16 = (char *)v9 + v15;
    v17 = (char *)v10 + v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = v16;
    v12 = v51;
    v7((uint64_t)v18, (uint64_t)v17, v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v9, 0, 1, v11);
  }
  v19 = a3[6];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  if (v13((_QWORD *)(a2 + v19), 1, v11))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v20 = *v21;
    *((_BYTE *)v20 + 8) = *((_BYTE *)v21 + 8);
    v20[2] = v21[2];
    v23 = *(int *)(v11 + 28);
    v24 = (char *)v20 + v23;
    v25 = (char *)v21 + v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = v24;
    v12 = v51;
    v7((uint64_t)v26, (uint64_t)v25, v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v20, 0, 1, v11);
  }
  v27 = a3[7];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  if (v13((_QWORD *)(a2 + v27), 1, v11))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    *v28 = *v29;
    *((_BYTE *)v28 + 8) = *((_BYTE *)v29 + 8);
    v28[2] = v29[2];
    v31 = *(int *)(v11 + 28);
    v32 = (char *)v28 + v31;
    v33 = (char *)v29 + v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34 = v32;
    v12 = v51;
    v7((uint64_t)v34, (uint64_t)v33, v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v28, 0, 1, v11);
  }
  v35 = a3[8];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  if (v13((_QWORD *)(a2 + v35), 1, v11))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    *v36 = *v37;
    *((_BYTE *)v36 + 8) = *((_BYTE *)v37 + 8);
    v36[2] = v37[2];
    v39 = *(int *)(v11 + 28);
    v40 = (char *)v36 + v39;
    v41 = (char *)v37 + v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42 = v40;
    v12 = v51;
    v7((uint64_t)v42, (uint64_t)v41, v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v36, 0, 1, v11);
  }
  v43 = a3[9];
  v44 = (_QWORD *)(a1 + v43);
  v45 = (_QWORD *)(a2 + v43);
  if (v13(v45, 1, v11))
  {
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    *v44 = *v45;
    *((_BYTE *)v44 + 8) = *((_BYTE *)v45 + 8);
    v44[2] = v45[2];
    v47 = *(int *)(v11 + 28);
    v48 = (char *)v44 + v47;
    v49 = (char *)v45 + v47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7((uint64_t)v48, (uint64_t)v49, v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v44, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for SimilarityMatrixCollectionPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  int *v74;
  uint64_t v75;
  uint64_t v76;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v73(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Matrix2dPB(0);
  v76 = *(_QWORD *)(v11 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  v13 = v12(v9, 1, v11);
  v14 = v12(v10, 1, v11);
  v74 = a3;
  v75 = a2;
  if (v13)
  {
    if (!v14)
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
      v15 = *(int *)(v11 + 28);
      v16 = v6;
      v17 = v9 + v15;
      v18 = v10 + v15;
      v19 = a1;
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21 = v17;
      v6 = v16;
      a3 = v74;
      v20(v21, v18, v6);
      a1 = v19;
      a2 = v75;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of Matrix3x3PB(v9, type metadata accessor for Matrix2dPB);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v9, (const void *)v10, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v73(v9 + *(int *)(v11 + 28), v10 + *(int *)(v11 + 28), v6);
LABEL_7:
  v23 = a3[6];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = v12(a1 + v23, 1, v11);
  v27 = v12(v25, 1, v11);
  if (v26)
  {
    if (!v27)
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
      v28 = *(int *)(v11 + 28);
      v29 = v6;
      v30 = v24 + v28;
      v31 = v25 + v28;
      v32 = a1;
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34 = v30;
      v6 = v29;
      a3 = v74;
      v33(v34, v31, v6);
      a1 = v32;
      a2 = v75;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v24, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    outlined destroy of Matrix3x3PB(v24, type metadata accessor for Matrix2dPB);
LABEL_12:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v24, (const void *)v25, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v24 = *(_QWORD *)v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v73(v24 + *(int *)(v11 + 28), v25 + *(int *)(v11 + 28), v6);
LABEL_13:
  v36 = a3[7];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = v12(a1 + v36, 1, v11);
  v40 = v12(v38, 1, v11);
  if (v39)
  {
    if (!v40)
    {
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
      *(_QWORD *)(v37 + 16) = *(_QWORD *)(v38 + 16);
      v41 = *(int *)(v11 + 28);
      v42 = v6;
      v43 = v37 + v41;
      v44 = v38 + v41;
      v45 = a1;
      v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47 = v43;
      v6 = v42;
      a3 = v74;
      v46(v47, v44, v6);
      a1 = v45;
      a2 = v75;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v37, 0, 1, v11);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v40)
  {
    outlined destroy of Matrix3x3PB(v37, type metadata accessor for Matrix2dPB);
LABEL_18:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v37, (const void *)v38, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  *(_QWORD *)v37 = *(_QWORD *)v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  *(_QWORD *)(v37 + 16) = *(_QWORD *)(v38 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v73(v37 + *(int *)(v11 + 28), v38 + *(int *)(v11 + 28), v6);
LABEL_19:
  v49 = a3[8];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = v12(a1 + v49, 1, v11);
  v53 = v12(v51, 1, v11);
  if (v52)
  {
    if (!v53)
    {
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
      *(_QWORD *)(v50 + 16) = *(_QWORD *)(v51 + 16);
      v54 = *(int *)(v11 + 28);
      v55 = v6;
      v56 = v50 + v54;
      v57 = v51 + v54;
      v58 = a1;
      v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v60 = v56;
      v6 = v55;
      a3 = v74;
      v59(v60, v57, v6);
      a1 = v58;
      a2 = v75;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v50, 0, 1, v11);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v53)
  {
    outlined destroy of Matrix3x3PB(v50, type metadata accessor for Matrix2dPB);
LABEL_24:
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v50, (const void *)v51, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_25;
  }
  *(_QWORD *)v50 = *(_QWORD *)v51;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  *(_QWORD *)(v50 + 16) = *(_QWORD *)(v51 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v73(v50 + *(int *)(v11 + 28), v51 + *(int *)(v11 + 28), v6);
LABEL_25:
  v62 = a3[9];
  v63 = a1 + v62;
  v64 = a2 + v62;
  v65 = v12(a1 + v62, 1, v11);
  v66 = v12(v64, 1, v11);
  if (!v65)
  {
    if (!v66)
    {
      *(_QWORD *)v63 = *(_QWORD *)v64;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v63 + 8) = *(_BYTE *)(v64 + 8);
      *(_QWORD *)(v63 + 16) = *(_QWORD *)(v64 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v73(v63 + *(int *)(v11 + 28), v64 + *(int *)(v11 + 28), v6);
      return a1;
    }
    outlined destroy of Matrix3x3PB(v63, type metadata accessor for Matrix2dPB);
    goto LABEL_30;
  }
  if (v66)
  {
LABEL_30:
    v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v63, (const void *)v64, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v63 = *(_QWORD *)v64;
  *(_BYTE *)(v63 + 8) = *(_BYTE *)(v64 + 8);
  *(_QWORD *)(v63 + 16) = *(_QWORD *)(v64 + 16);
  v67 = *(int *)(v11 + 28);
  v68 = v63 + v67;
  v69 = v64 + v67;
  v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v70(v68, v69, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v63, 0, 1, v11);
  return a1;
}

char *initializeWithTake for SimilarityMatrixCollectionPB(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for Matrix2dPB(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    v7(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  if (v13(&a2[v15], 1, v11))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    *((_QWORD *)v16 + 2) = *((_QWORD *)v17 + 2);
    v7(&v16[*(int *)(v11 + 28)], &v17[*(int *)(v11 + 28)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  if (v13(&a2[v19], 1, v11))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    v7(&v20[*(int *)(v11 + 28)], &v21[*(int *)(v11 + 28)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
  }
  v23 = a3[8];
  v24 = &a1[v23];
  v25 = &a2[v23];
  if (v13(&a2[v23], 1, v11))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
    v7(&v24[*(int *)(v11 + 28)], &v25[*(int *)(v11 + 28)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v24, 0, 1, v11);
  }
  v27 = a3[9];
  v28 = &a1[v27];
  v29 = &a2[v27];
  if (v13(v29, 1, v11))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
    v7(&v28[*(int *)(v11 + 28)], &v29[*(int *)(v11 + 28)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v28, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for SimilarityMatrixCollectionPB(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;

  v6 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v6 - 8);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 40);
  v41(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Matrix2dPB(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v8 + *(int *)(v10 + 28), v9 + *(int *)(v10 + 28), v6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of Matrix3x3PB(v8, type metadata accessor for Matrix2dPB);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v8, (const void *)v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v8 = *(_QWORD *)v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease();
  v41(v8 + *(int *)(v10 + 28), v9 + *(int *)(v10 + 28), v6);
LABEL_7:
  v16 = a3[6];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = v12(a1 + v16, 1, v10);
  v20 = v12(v18, 1, v10);
  if (v19)
  {
    if (!v20)
    {
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v17 + *(int *)(v10 + 28), v18 + *(int *)(v10 + 28), v6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    outlined destroy of Matrix3x3PB(v17, type metadata accessor for Matrix2dPB);
LABEL_12:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v17 = *(_QWORD *)v18;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRelease();
  v41(v17 + *(int *)(v10 + 28), v18 + *(int *)(v10 + 28), v6);
LABEL_13:
  v22 = a3[7];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = v12(a1 + v22, 1, v10);
  v26 = v12(v24, 1, v10);
  if (v25)
  {
    if (!v26)
    {
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v23 + *(int *)(v10 + 28), v24 + *(int *)(v10 + 28), v6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v23, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v26)
  {
    outlined destroy of Matrix3x3PB(v23, type metadata accessor for Matrix2dPB);
LABEL_18:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v23, (const void *)v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_19;
  }
  *(_QWORD *)v23 = *(_QWORD *)v24;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
  swift_bridgeObjectRelease();
  v41(v23 + *(int *)(v10 + 28), v24 + *(int *)(v10 + 28), v6);
LABEL_19:
  v28 = a3[8];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = v12(a1 + v28, 1, v10);
  v32 = v12(v30, 1, v10);
  if (v31)
  {
    if (!v32)
    {
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
      *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v29 + *(int *)(v10 + 28), v30 + *(int *)(v10 + 28), v6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v29, 0, 1, v10);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v32)
  {
    outlined destroy of Matrix3x3PB(v29, type metadata accessor for Matrix2dPB);
LABEL_24:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v29, (const void *)v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_25;
  }
  *(_QWORD *)v29 = *(_QWORD *)v30;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
  swift_bridgeObjectRelease();
  v41(v29 + *(int *)(v10 + 28), v30 + *(int *)(v10 + 28), v6);
LABEL_25:
  v34 = a3[9];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = v12(a1 + v34, 1, v10);
  v38 = v12(v36, 1, v10);
  if (!v37)
  {
    if (!v38)
    {
      *(_QWORD *)v35 = *(_QWORD *)v36;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
      *(_QWORD *)(v35 + 16) = *(_QWORD *)(v36 + 16);
      swift_bridgeObjectRelease();
      v41(v35 + *(int *)(v10 + 28), v36 + *(int *)(v10 + 28), v6);
      return a1;
    }
    outlined destroy of Matrix3x3PB(v35, type metadata accessor for Matrix2dPB);
    goto LABEL_30;
  }
  if (v38)
  {
LABEL_30:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    memcpy((void *)v35, (const void *)v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
  *(_QWORD *)(v35 + 16) = *(_QWORD *)(v36 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v35 + *(int *)(v10 + 28), v36 + *(int *)(v10 + 28), v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v35, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimilarityMatrixCollectionPB()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6EA234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SimilarityMatrixCollectionPB()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6EA2B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for SimilarityMatrixCollectionPB()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for Matrix2dPB?, (void (*)(uint64_t))type metadata accessor for Matrix2dPB);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t TrackingIntermediateDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(type metadata accessor for TrackingIntermediateDataPB(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for TrackingIntermediateDataPB._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = TrackingIntermediateDataPB._StorageClass.init(copying:)(v2);
    swift_release();
  }
  swift_retain();
  closure #1 in TrackingIntermediateDataPB.decodeMessage<A>(decoder:)();
  return swift_release();
}

uint64_t closure #1 in TrackingIntermediateDataPB.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        closure #3 in closure #1 in TrackingIntermediateDataPB.decodeMessage<A>(decoder:)();
        break;
      case 2:
        closure #2 in closure #1 in TrackingIntermediateDataPB.decodeMessage<A>(decoder:)();
        break;
      case 1:
        closure #1 in closure #1 in TrackingIntermediateDataPB.decodeMessage<A>(decoder:)();
        break;
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in TrackingIntermediateDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for SimilarityMatrixCollectionPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB, type metadata accessor for SimilarityMatrixCollectionPB, (uint64_t)&protocol conformance descriptor for SimilarityMatrixCollectionPB);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in TrackingIntermediateDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for ProtobufUInt64();
  type metadata accessor for ProtobufInt32();
  dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in TrackingIntermediateDataPB.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  type metadata accessor for ProtobufUInt64();
  type metadata accessor for TrackingUpdateDataPB(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB, type metadata accessor for TrackingUpdateDataPB, (uint64_t)&protocol conformance descriptor for TrackingUpdateDataPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB, type metadata accessor for TrackingUpdateDataPB, (uint64_t)&protocol conformance descriptor for TrackingUpdateDataPB);
  dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
  return swift_endAccess();
}

uint64_t TrackingIntermediateDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for TrackingIntermediateDataPB(0);
  v7 = swift_retain();
  closure #1 in TrackingIntermediateDataPB.traverse<A>(visitor:)(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in TrackingIntermediateDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = closure #1 in closure #1 in TrackingIntermediateDataPB.traverse<A>(visitor:)(a1, a2, a3, a4);
  if (!v4)
  {
    v7 = a1
       + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__dataAssociationResult;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v7 + 16))
    {
      type metadata accessor for ProtobufUInt64();
      type metadata accessor for ProtobufInt32();
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    v8 = a1
       + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__trackingUpdateData;
    result = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v8 + 16))
    {
      type metadata accessor for ProtobufUInt64();
      type metadata accessor for TrackingUpdateDataPB(0);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB, type metadata accessor for TrackingUpdateDataPB, (uint64_t)&protocol conformance descriptor for TrackingUpdateDataPB);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB, type metadata accessor for TrackingUpdateDataPB, (uint64_t)&protocol conformance descriptor for TrackingUpdateDataPB);
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in TrackingIntermediateDataPB.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[6];

  v16[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SimilarityMatrixCollectionPB(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1
      + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__similarityMatrixCollection;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v14, (uint64_t)v8, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v13, type metadata accessor for SimilarityMatrixCollectionPB);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB, type metadata accessor for SimilarityMatrixCollectionPB, (uint64_t)&protocol conformance descriptor for SimilarityMatrixCollectionPB);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of Matrix3x3PB((uint64_t)v13, type metadata accessor for SimilarityMatrixCollectionPB);
}

uint64_t closure #1 in static TrackingIntermediateDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a2;
  v3 = type metadata accessor for SimilarityMatrixCollectionPB(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v38 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SimilarityMatrixCollectionPB?, SimilarityMatrixCollectionPB?));
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = (char *)&v37 - v17;
  v19 = a1
      + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__similarityMatrixCollection;
  swift_beginAccess();
  outlined init with copy of (Int32, Matrix2dPB)(v19, (uint64_t)v18, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  v20 = v39;
  v21 = v39
      + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__similarityMatrixCollection;
  swift_beginAccess();
  v22 = (uint64_t)&v10[*(int *)(v7 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v18, (uint64_t)v10, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v21, v22, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v23((uint64_t)v10, 1, v3) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
    v24 = a1;
    if (v23(v22, 1, v3) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v10, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v10, (uint64_t)v14, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  if (v23(v22, 1, v3) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v14, type metadata accessor for SimilarityMatrixCollectionPB);
LABEL_6:
    outlined destroy of Coordinate3DPB?((uint64_t)v10, &demangling cache variable for type metadata for (SimilarityMatrixCollectionPB?, SimilarityMatrixCollectionPB?));
LABEL_10:
    swift_release();
    swift_release();
    v35 = 0;
    return v35 & 1;
  }
  v25 = v38;
  outlined init with take of Matrix2dPB(v22, v38, type metadata accessor for SimilarityMatrixCollectionPB);
  v24 = a1;
  swift_retain();
  swift_retain();
  v26 = specialized static SimilarityMatrixCollectionPB.== infix(_:_:)((uint64_t)v14, v25);
  outlined destroy of Matrix3x3PB(v25, type metadata accessor for SimilarityMatrixCollectionPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v18, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v14, type metadata accessor for SimilarityMatrixCollectionPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v10, &demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  if ((v26 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v27 = (uint64_t *)(v24
                  + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__dataAssociationResult);
  swift_beginAccess();
  v28 = *v27;
  v29 = (uint64_t *)(v20
                  + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__dataAssociationResult);
  swift_beginAccess();
  if ((specialized static Dictionary<>.== infix(_:_:)(v28, *v29) & 1) == 0)
    goto LABEL_10;
  v30 = (uint64_t *)(v24
                  + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__trackingUpdateData);
  swift_beginAccess();
  v31 = *v30;
  v32 = (uint64_t *)(v20
                  + OBJC_IVAR____TtCV5Hands26TrackingIntermediateDataPBP33_CBF5C637B62D3330E1FDB118771FF93013_StorageClass__trackingUpdateData);
  swift_beginAccess();
  v33 = *v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static Dictionary<>.== infix(_:_:)(v31, v33);
  v35 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v35 & 1;
}

uint64_t protocol witness for Message.init() in conformance TrackingIntermediateDataPB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static TrackingIntermediateDataPB._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TrackingIntermediateDataPB()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TrackingIntermediateDataPB()
{
  return TrackingIntermediateDataPB.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TrackingIntermediateDataPB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TrackingIntermediateDataPB.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TrackingIntermediateDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB, type metadata accessor for TrackingIntermediateDataPB, (uint64_t)&protocol conformance descriptor for TrackingIntermediateDataPB);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TrackingIntermediateDataPB@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance Coordinate2DPB(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TrackingIntermediateDataPB._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrackingIntermediateDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB, type metadata accessor for TrackingIntermediateDataPB, (uint64_t)&protocol conformance descriptor for TrackingIntermediateDataPB);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrackingIntermediateDataPB()
{
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB, type metadata accessor for TrackingIntermediateDataPB, (uint64_t)&protocol conformance descriptor for TrackingIntermediateDataPB);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in TrackingIntermediateDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB, type metadata accessor for TrackingIntermediateDataPB, (uint64_t)&protocol conformance descriptor for TrackingIntermediateDataPB);
}

uint64_t base witness table accessor for Message in TrackingIntermediateDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB, type metadata accessor for TrackingIntermediateDataPB, (uint64_t)&protocol conformance descriptor for TrackingIntermediateDataPB);
}

uint64_t base witness table accessor for Hashable in TrackingIntermediateDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB, type metadata accessor for TrackingIntermediateDataPB, (uint64_t)&protocol conformance descriptor for TrackingIntermediateDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingIntermediateDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingIntermediateDataPB and conformance TrackingIntermediateDataPB, type metadata accessor for TrackingIntermediateDataPB, (uint64_t)&protocol conformance descriptor for TrackingIntermediateDataPB);
}

uint64_t base witness table accessor for Equatable in TrackingUpdateDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB, type metadata accessor for TrackingUpdateDataPB, (uint64_t)&protocol conformance descriptor for TrackingUpdateDataPB);
}

uint64_t base witness table accessor for Message in TrackingUpdateDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB, type metadata accessor for TrackingUpdateDataPB, (uint64_t)&protocol conformance descriptor for TrackingUpdateDataPB);
}

uint64_t base witness table accessor for Hashable in TrackingUpdateDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB, type metadata accessor for TrackingUpdateDataPB, (uint64_t)&protocol conformance descriptor for TrackingUpdateDataPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TrackingUpdateDataPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type TrackingUpdateDataPB and conformance TrackingUpdateDataPB, type metadata accessor for TrackingUpdateDataPB, (uint64_t)&protocol conformance descriptor for TrackingUpdateDataPB);
}

uint64_t base witness table accessor for Equatable in SimilarityMatrixCollectionPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB, type metadata accessor for SimilarityMatrixCollectionPB, (uint64_t)&protocol conformance descriptor for SimilarityMatrixCollectionPB);
}

uint64_t base witness table accessor for Message in SimilarityMatrixCollectionPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB, type metadata accessor for SimilarityMatrixCollectionPB, (uint64_t)&protocol conformance descriptor for SimilarityMatrixCollectionPB);
}

uint64_t base witness table accessor for Hashable in SimilarityMatrixCollectionPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB, type metadata accessor for SimilarityMatrixCollectionPB, (uint64_t)&protocol conformance descriptor for SimilarityMatrixCollectionPB);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in SimilarityMatrixCollectionPB()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type SimilarityMatrixCollectionPB and conformance SimilarityMatrixCollectionPB, type metadata accessor for SimilarityMatrixCollectionPB, (uint64_t)&protocol conformance descriptor for SimilarityMatrixCollectionPB);
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  char v22;
  char v23;
  int64_t v25;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v4 = 0;
    v5 = a1 + 64;
    v6 = 1 << *(_BYTE *)(a1 + 32);
    v7 = -1;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    v8 = v7 & *(_QWORD *)(a1 + 64);
    v25 = (unint64_t)(v6 + 63) >> 6;
    while (1)
    {
      if (v8)
      {
        v9 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v10 = v9 | (v4 << 6);
      }
      else
      {
        v11 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_29;
        }
        if (v11 >= v25)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v11);
        ++v4;
        if (!v12)
        {
          v4 = v11 + 1;
          if (v11 + 1 >= v25)
            return 1;
          v12 = *(_QWORD *)(v5 + 8 * v4);
          if (!v12)
          {
            v4 = v11 + 2;
            if (v11 + 2 >= v25)
              return 1;
            v12 = *(_QWORD *)(v5 + 8 * v4);
            if (!v12)
            {
              v13 = v11 + 3;
              if (v13 >= v25)
                return 1;
              v12 = *(_QWORD *)(v5 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v4 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    break;
                  if (v4 >= v25)
                    return 1;
                  v12 = *(_QWORD *)(v5 + 8 * v4);
                  ++v13;
                  if (v12)
                    goto LABEL_22;
                }
LABEL_29:
                __break(1u);
                JUMPOUT(0x23D6EB518);
              }
              v4 = v13;
            }
          }
        }
LABEL_22:
        v8 = (v12 - 1) & v12;
        v10 = __clz(__rbit64(v12)) + (v4 << 6);
      }
      v14 = 16 * v10;
      v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v14);
      v16 = *v15;
      v17 = v15[1];
      v18 = *(_QWORD *)(a1 + 56) + v14;
      v19 = *(_QWORD *)v18;
      v20 = *(unsigned __int8 *)(v18 + 8);
      swift_bridgeObjectRetain();
      v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
      v23 = v22;
      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
      {
        if (v20)
          __asm { BR              X9 }
        if (*(_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21) == v19)
          continue;
      }
      return 0;
    }
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int64_t v20;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v2 = *(_QWORD *)(a1 + 64);
    v3 = 1 << *(_BYTE *)(a1 + 32);
    v4 = -1;
    if (v3 < 64)
      v4 = ~(-1 << v3);
    v20 = (unint64_t)(v3 + 63) >> 6;
    if ((v4 & v2) != 0)
    {
      v5 = __clz(__rbit64(v4 & v2));
      v6 = a2;
LABEL_20:
      v10 = 16 * v5;
      v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v10);
      v13 = *v11;
      v12 = v11[1];
      v14 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v10);
      v16 = *v14;
      v15 = v14[1];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v16, v15);
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
      LOBYTE(v13) = v18;
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        __asm { BR              X8 }
      outlined consume of Data._Representation(v16, v15);
      return 0;
    }
    v6 = a2;
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 72);
      v8 = 1;
      if (v7)
        goto LABEL_19;
      v8 = 2;
      if ((unint64_t)(v3 + 63) >> 6 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_19;
      v8 = 3;
      if ((unint64_t)(v3 + 63) >> 6 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
      {
LABEL_19:
        v5 = __clz(__rbit64(v7)) + (v8 << 6);
        goto LABEL_20;
      }
      v9 = 4;
      if (v20 > 4)
      {
        v7 = *(_QWORD *)(a1 + 96);
        if (v7)
        {
          v8 = 4;
          goto LABEL_19;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x23D6EBEF8);
          }
          if (v8 >= v20)
            break;
          v7 = *(_QWORD *)(a1 + 64 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_19;
        }
      }
    }
    return 1;
  }
  return 0;
}

void specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  char v39;
  char v40;
  int64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;

  v4 = type metadata accessor for TrackingModuleIOPB(0);
  v46 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v41 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: TrackingModuleIOPB)?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (_DWORD *)((char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (unsigned int *)((char *)&v41 - v18);
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v44 = a1;
  v45 = 0;
  v22 = *(_QWORD *)(a1 + 64);
  v21 = a1 + 64;
  v20 = v22;
  v23 = 1 << *(_BYTE *)(v21 - 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v20;
  v42 = v21;
  v43 = (unint64_t)(v23 + 63) >> 6;
  v41 = v43 - 1;
  while (1)
  {
    if (v25)
    {
      v26 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v27 = v26 | (v45 << 6);
LABEL_8:
      v28 = *(_DWORD *)(*(_QWORD *)(v44 + 48) + 4 * v27);
      v29 = *(_QWORD *)(v44 + 56) + *(_QWORD *)(v46 + 72) * v27;
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: TrackingModuleIOPB));
      outlined init with copy of TrackingUpdateDataPB(v29, (uint64_t)v15 + *(int *)(v30 + 48), type metadata accessor for TrackingModuleIOPB);
      *v15 = v28;
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v15, 0, 1, v30);
      goto LABEL_27;
    }
    v31 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v31 < v43)
    {
      v32 = *(_QWORD *)(v42 + 8 * v31);
      if (v32)
        goto LABEL_12;
      v33 = v45 + 2;
      ++v45;
      if (v31 + 1 < v43)
      {
        v32 = *(_QWORD *)(v42 + 8 * v33);
        if (v32)
          goto LABEL_15;
        v45 = v31 + 1;
        if (v31 + 2 < v43)
        {
          v32 = *(_QWORD *)(v42 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_12;
          }
          v33 = v31 + 3;
          v45 = v31 + 2;
          if (v31 + 3 < v43)
            break;
        }
      }
    }
LABEL_26:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: TrackingModuleIOPB));
    (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v15, 1, 1, v34);
    v25 = 0;
LABEL_27:
    outlined init with take of ImageData?((uint64_t)v15, (uint64_t)v19, &demangling cache variable for type metadata for (key: Int32, value: TrackingModuleIOPB)?);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: TrackingModuleIOPB));
    if ((*(unsigned int (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v19, 1, v35) == 1)
      return;
    v36 = (uint64_t)v19 + *(int *)(v35 + 48);
    v37 = *v19;
    outlined init with take of Matrix2dPB(v36, (uint64_t)v11, type metadata accessor for TrackingModuleIOPB);
    v38 = specialized __RawDictionaryStorage.find<A>(_:)(v37);
    if ((v39 & 1) == 0)
    {
      outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for TrackingModuleIOPB);
      return;
    }
    outlined init with copy of TrackingUpdateDataPB(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v46 + 72) * v38, (uint64_t)v7, type metadata accessor for TrackingModuleIOPB);
    v40 = static TrackingModuleIOPB.== infix(_:_:)(v7, v11);
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for TrackingModuleIOPB);
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for TrackingModuleIOPB);
    if ((v40 & 1) == 0)
      return;
  }
  v32 = *(_QWORD *)(v42 + 8 * v33);
  if (v32)
  {
LABEL_15:
    v31 = v33;
LABEL_12:
    v25 = (v32 - 1) & v32;
    v27 = __clz(__rbit64(v32)) + (v31 << 6);
    v45 = v31;
    goto LABEL_8;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v43)
    {
      v45 = v41;
      goto LABEL_26;
    }
    v32 = *(_QWORD *)(v42 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_12;
  }
LABEL_35:
  __break(1u);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for Matrix2dPB(0);
  v5 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  v43 = v5;
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v38 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: Matrix2dPB)?);
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (_DWORD *)((char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v17, v18);
  v20 = (unsigned int *)((char *)&v38 - v19);
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v21 = *(_QWORD *)(a1 + 64);
  v39 = a1 + 64;
  v22 = 1 << *(_BYTE *)(a1 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v40 = (unint64_t)(v22 + 63) >> 6;
  v41 = 0;
  v38 = v40 - 1;
  while (1)
  {
    if (v24)
    {
      v25 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v26 = v25 | (v41 << 6);
LABEL_8:
      v27 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v26);
      v28 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(v43 + 72) * v26;
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: Matrix2dPB));
      outlined init with copy of TrackingUpdateDataPB(v28, (uint64_t)v16 + *(int *)(v29 + 48), type metadata accessor for Matrix2dPB);
      *v16 = v27;
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v16, 0, 1, v29);
      goto LABEL_27;
    }
    v30 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v30 < v40)
    {
      v31 = *(_QWORD *)(v39 + 8 * v30);
      if (v31)
        goto LABEL_12;
      v32 = v41 + 2;
      ++v41;
      if (v30 + 1 < v40)
      {
        v31 = *(_QWORD *)(v39 + 8 * v32);
        if (v31)
          goto LABEL_15;
        v41 = v30 + 1;
        if (v30 + 2 < v40)
        {
          v31 = *(_QWORD *)(v39 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
            goto LABEL_12;
          }
          v32 = v30 + 3;
          v41 = v30 + 2;
          if (v30 + 3 < v40)
            break;
        }
      }
    }
LABEL_26:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: Matrix2dPB));
    (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v16, 1, 1, v33);
    v24 = 0;
LABEL_27:
    outlined init with take of ImageData?((uint64_t)v16, (uint64_t)v20, &demangling cache variable for type metadata for (key: Int32, value: Matrix2dPB)?);
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: Matrix2dPB));
    if ((*(unsigned int (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v20, 1, v34) == 1)
      return;
    v35 = *v20;
    outlined init with take of Matrix2dPB((uint64_t)v20 + *(int *)(v34 + 48), (uint64_t)v12, type metadata accessor for Matrix2dPB);
    v36 = specialized __RawDictionaryStorage.find<A>(_:)(v35);
    if ((v37 & 1) == 0)
      goto LABEL_36;
    outlined init with copy of TrackingUpdateDataPB(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v43 + 72) * v36, (uint64_t)v8, type metadata accessor for Matrix2dPB);
    if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)v8, *(_QWORD *)v12) & 1) == 0
      || v8[8] != v12[8]
      || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v8 + 2), *((_QWORD *)v12 + 2)) & 1) == 0
      || (type metadata accessor for UnknownStorage(),
          lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
    {
      outlined destroy of Matrix3x3PB((uint64_t)v8, type metadata accessor for Matrix2dPB);
LABEL_36:
      outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for Matrix2dPB);
      return;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v8, type metadata accessor for Matrix2dPB);
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for Matrix2dPB);
  }
  v31 = *(_QWORD *)(v39 + 8 * v32);
  if (v31)
  {
LABEL_15:
    v30 = v32;
LABEL_12:
    v24 = (v31 - 1) & v31;
    v26 = __clz(__rbit64(v31)) + (v30 << 6);
    v41 = v30;
    goto LABEL_8;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v40)
    {
      v41 = v38;
      goto LABEL_26;
    }
    v31 = *(_QWORD *)(v39 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;

  v50 = type metadata accessor for HandsKitDataPB(0);
  v52 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50, v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v45 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: HandsKitDataPB)?);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (int64_t *)((char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = (int64_t *)((char *)&v45 - v17);
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v48 = a1;
  v49 = a2;
  v51 = 0;
  v21 = *(_QWORD *)(a1 + 64);
  v20 = a1 + 64;
  v19 = v21;
  v22 = 1 << *(_BYTE *)(v20 - 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v19;
  v46 = v20;
  v47 = (unint64_t)(v22 + 63) >> 6;
  v45 = v47 - 1;
  while (1)
  {
    if (v24)
    {
      v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v27 = v26 | (v51 << 6);
      v28 = v49;
LABEL_9:
      v29 = *(_QWORD *)(v48 + 56);
      *v14 = *(_QWORD *)(*(_QWORD *)(v48 + 48) + 8 * v27);
      v30 = v29 + *(_QWORD *)(v52 + 72) * v27;
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: HandsKitDataPB));
      outlined init with copy of TrackingUpdateDataPB(v30, (uint64_t)v14 + *(int *)(v31 + 48), type metadata accessor for HandsKitDataPB);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v14, 0, 1, v31);
      goto LABEL_31;
    }
    v32 = v51 + 1;
    if (__OFADD__(v51, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    v28 = v49;
    if (v32 < v47)
    {
      v33 = *(_QWORD *)(v46 + 8 * v32);
      if (v33)
        goto LABEL_13;
      v34 = v51 + 2;
      ++v51;
      if (v32 + 1 < v47)
      {
        v33 = *(_QWORD *)(v46 + 8 * v34);
        if (v33)
          goto LABEL_16;
        v51 = v32 + 1;
        if (v32 + 2 < v47)
        {
          v33 = *(_QWORD *)(v46 + 8 * (v32 + 2));
          if (v33)
          {
            v32 += 2;
            goto LABEL_13;
          }
          v51 = v32 + 2;
          if (v32 + 3 < v47)
          {
            v33 = *(_QWORD *)(v46 + 8 * (v32 + 3));
            if (v33)
            {
              v32 += 3;
              goto LABEL_13;
            }
            v34 = v32 + 4;
            v51 = v32 + 3;
            if (v32 + 4 < v47)
              break;
          }
        }
      }
    }
LABEL_30:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: HandsKitDataPB));
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v14, 1, 1, v35);
    v24 = 0;
LABEL_31:
    outlined init with take of ImageData?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for (key: UInt64, value: HandsKitDataPB)?);
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: HandsKitDataPB));
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v18, 1, v36) == 1)
      return;
    v37 = (uint64_t)v18 + *(int *)(v36 + 48);
    v38 = *v18;
    outlined init with take of Matrix2dPB(v37, (uint64_t)v10, type metadata accessor for HandsKitDataPB);
    v39 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
    if ((v40 & 1) == 0)
      goto LABEL_36;
    outlined init with copy of TrackingUpdateDataPB(*(_QWORD *)(v28 + 56) + *(_QWORD *)(v52 + 72) * v39, (uint64_t)v6, type metadata accessor for HandsKitDataPB);
    v41 = *(int *)(v50 + 20);
    v42 = *(_QWORD *)&v6[v41];
    v43 = *(_QWORD *)&v10[v41];
    if (v42 != v43)
    {
      swift_retain();
      swift_retain();
      v44 = closure #1 in static HandsKitDataPB.== infix(_:_:)(v42, v43);
      swift_release();
      swift_release();
      if (!v44)
      {
        outlined destroy of Matrix3x3PB((uint64_t)v6, type metadata accessor for HandsKitDataPB);
LABEL_36:
        outlined destroy of Matrix3x3PB((uint64_t)v10, type metadata accessor for HandsKitDataPB);
        return;
      }
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of Matrix3x3PB((uint64_t)v6, type metadata accessor for HandsKitDataPB);
    outlined destroy of Matrix3x3PB((uint64_t)v10, type metadata accessor for HandsKitDataPB);
    if ((v25 & 1) == 0)
      return;
  }
  v33 = *(_QWORD *)(v46 + 8 * v34);
  if (v33)
  {
LABEL_16:
    v32 = v34;
LABEL_13:
    v24 = (v33 - 1) & v33;
    v27 = __clz(__rbit64(v33)) + (v32 << 6);
    v51 = v32;
    goto LABEL_9;
  }
  while (1)
  {
    v32 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v32 >= v47)
    {
      v51 = v45;
      goto LABEL_30;
    }
    v33 = *(_QWORD *)(v46 + 8 * v32);
    ++v34;
    if (v33)
      goto LABEL_13;
  }
LABEL_40:
  __break(1u);
}

{
  uint64_t updated;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;

  updated = type metadata accessor for TrackingUpdateDataPB(0);
  v44 = *(_QWORD *)(updated - 8);
  MEMORY[0x24BDAC7A8](updated, v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8, v9);
  v11 = (char *)&v39 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: TrackingUpdateDataPB)?);
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = (uint64_t *)((char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16, v17);
  v19 = (uint64_t *)((char *)&v39 - v18);
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v20 = *(_QWORD *)(a1 + 64);
  v41 = a1 + 64;
  v21 = 1 << *(_BYTE *)(a1 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v42 = (unint64_t)(v21 + 63) >> 6;
  v43 = 0;
  v40 = v42 - 1;
  while (1)
  {
    if (v23)
    {
      v24 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v25 = v24 | (v43 << 6);
LABEL_8:
      v26 = *(_QWORD *)(a1 + 56);
      *v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v25);
      v27 = v26 + *(_QWORD *)(v44 + 72) * v25;
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: TrackingUpdateDataPB));
      outlined init with copy of TrackingUpdateDataPB(v27, (uint64_t)v15 + *(int *)(v28 + 48), type metadata accessor for TrackingUpdateDataPB);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v15, 0, 1, v28);
      goto LABEL_30;
    }
    v29 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v29 < v42)
    {
      v30 = *(_QWORD *)(v41 + 8 * v29);
      if (v30)
        goto LABEL_12;
      v31 = v43 + 2;
      ++v43;
      if (v29 + 1 < v42)
      {
        v30 = *(_QWORD *)(v41 + 8 * v31);
        if (v30)
          goto LABEL_15;
        v43 = v29 + 1;
        if (v29 + 2 < v42)
        {
          v30 = *(_QWORD *)(v41 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2;
            goto LABEL_12;
          }
          v43 = v29 + 2;
          if (v29 + 3 < v42)
          {
            v30 = *(_QWORD *)(v41 + 8 * (v29 + 3));
            if (v30)
            {
              v29 += 3;
              goto LABEL_12;
            }
            v31 = v29 + 4;
            v43 = v29 + 3;
            if (v29 + 4 < v42)
              break;
          }
        }
      }
    }
LABEL_29:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: TrackingUpdateDataPB));
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v15, 1, 1, v32);
    v23 = 0;
LABEL_30:
    outlined init with take of ImageData?((uint64_t)v15, (uint64_t)v19, &demangling cache variable for type metadata for (key: UInt64, value: TrackingUpdateDataPB)?);
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: TrackingUpdateDataPB));
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v19, 1, v33) == 1)
      return;
    v34 = (uint64_t)v19 + *(int *)(v33 + 48);
    v35 = *v19;
    outlined init with take of Matrix2dPB(v34, (uint64_t)v11, type metadata accessor for TrackingUpdateDataPB);
    v36 = specialized __RawDictionaryStorage.find<A>(_:)(v35);
    if ((v37 & 1) == 0)
    {
      outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for TrackingUpdateDataPB);
      return;
    }
    outlined init with copy of TrackingUpdateDataPB(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v44 + 72) * v36, (uint64_t)v7, type metadata accessor for TrackingUpdateDataPB);
    v38 = specialized static TrackingUpdateDataPB.== infix(_:_:)((uint64_t)v7, (uint64_t)v11);
    outlined destroy of Matrix3x3PB((uint64_t)v7, type metadata accessor for TrackingUpdateDataPB);
    outlined destroy of Matrix3x3PB((uint64_t)v11, type metadata accessor for TrackingUpdateDataPB);
    if ((v38 & 1) == 0)
      return;
  }
  v30 = *(_QWORD *)(v41 + 8 * v31);
  if (v30)
  {
LABEL_15:
    v29 = v31;
LABEL_12:
    v23 = (v30 - 1) & v30;
    v25 = __clz(__rbit64(v30)) + (v29 << 6);
    v43 = v29;
    goto LABEL_8;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v42)
    {
      v43 = v40;
      goto LABEL_29;
    }
    v30 = *(_QWORD *)(v41 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_12;
  }
LABEL_38:
  __break(1u);
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;

  v50 = type metadata accessor for ImageCalibrationDataPB(0);
  v52 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50, v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v45 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: ImageCalibrationDataPB)?);
  MEMORY[0x24BDAC7A8](v11, v12);
  v14 = (_DWORD *)((char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15, v16);
  v18 = (unsigned int *)((char *)&v45 - v17);
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v48 = a1;
  v49 = a2;
  v51 = 0;
  v21 = *(_QWORD *)(a1 + 64);
  v20 = a1 + 64;
  v19 = v21;
  v22 = 1 << *(_BYTE *)(v20 - 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v19;
  v46 = v20;
  v47 = (unint64_t)(v22 + 63) >> 6;
  v45 = v47 - 1;
  while (1)
  {
    if (v24)
    {
      v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v27 = v26 | (v51 << 6);
      v28 = v49;
LABEL_9:
      v29 = *(_QWORD *)(v48 + 56);
      *v14 = *(_DWORD *)(*(_QWORD *)(v48 + 48) + 4 * v27);
      v30 = v29 + *(_QWORD *)(v52 + 72) * v27;
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: ImageCalibrationDataPB));
      outlined init with copy of TrackingUpdateDataPB(v30, (uint64_t)v14 + *(int *)(v31 + 48), type metadata accessor for ImageCalibrationDataPB);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v14, 0, 1, v31);
      goto LABEL_31;
    }
    v32 = v51 + 1;
    if (__OFADD__(v51, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    v28 = v49;
    if (v32 < v47)
    {
      v33 = *(_QWORD *)(v46 + 8 * v32);
      if (v33)
        goto LABEL_13;
      v34 = v51 + 2;
      ++v51;
      if (v32 + 1 < v47)
      {
        v33 = *(_QWORD *)(v46 + 8 * v34);
        if (v33)
          goto LABEL_16;
        v51 = v32 + 1;
        if (v32 + 2 < v47)
        {
          v33 = *(_QWORD *)(v46 + 8 * (v32 + 2));
          if (v33)
          {
            v32 += 2;
            goto LABEL_13;
          }
          v51 = v32 + 2;
          if (v32 + 3 < v47)
          {
            v33 = *(_QWORD *)(v46 + 8 * (v32 + 3));
            if (v33)
            {
              v32 += 3;
              goto LABEL_13;
            }
            v34 = v32 + 4;
            v51 = v32 + 3;
            if (v32 + 4 < v47)
              break;
          }
        }
      }
    }
LABEL_30:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: ImageCalibrationDataPB));
    (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v14, 1, 1, v35);
    v24 = 0;
LABEL_31:
    outlined init with take of ImageData?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for (key: Int32, value: ImageCalibrationDataPB)?);
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int32, value: ImageCalibrationDataPB));
    if ((*(unsigned int (**)(unsigned int *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v18, 1, v36) == 1)
      return;
    v37 = (uint64_t)v18 + *(int *)(v36 + 48);
    v38 = *v18;
    outlined init with take of Matrix2dPB(v37, (uint64_t)v10, type metadata accessor for ImageCalibrationDataPB);
    v39 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
    if ((v40 & 1) == 0)
      goto LABEL_36;
    outlined init with copy of TrackingUpdateDataPB(*(_QWORD *)(v28 + 56) + *(_QWORD *)(v52 + 72) * v39, (uint64_t)v6, type metadata accessor for ImageCalibrationDataPB);
    v41 = *(int *)(v50 + 20);
    v42 = *(_QWORD *)&v6[v41];
    v43 = *(_QWORD *)&v10[v41];
    if (v42 != v43)
    {
      swift_retain();
      swift_retain();
      v44 = closure #1 in static ImageCalibrationDataPB.== infix(_:_:)(v42, v43);
      swift_release();
      swift_release();
      if (!v44)
      {
        outlined destroy of Matrix3x3PB((uint64_t)v6, type metadata accessor for ImageCalibrationDataPB);
LABEL_36:
        outlined destroy of Matrix3x3PB((uint64_t)v10, type metadata accessor for ImageCalibrationDataPB);
        return;
      }
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of Matrix3x3PB((uint64_t)v6, type metadata accessor for ImageCalibrationDataPB);
    outlined destroy of Matrix3x3PB((uint64_t)v10, type metadata accessor for ImageCalibrationDataPB);
    if ((v25 & 1) == 0)
      return;
  }
  v33 = *(_QWORD *)(v46 + 8 * v34);
  if (v33)
  {
LABEL_16:
    v32 = v34;
LABEL_13:
    v24 = (v33 - 1) & v33;
    v27 = __clz(__rbit64(v33)) + (v32 << 6);
    v51 = v32;
    goto LABEL_9;
  }
  while (1)
  {
    v32 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v32 >= v47)
    {
      v51 = v45;
      goto LABEL_30;
    }
    v33 = *(_QWORD *)(v46 + 8 * v32);
    ++v34;
    if (v33)
      goto LABEL_13;
  }
LABEL_40:
  __break(1u);
}

unint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  float v16;
  char v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = 4 * v11;
    v16 = *(float *)(*(_QWORD *)(v3 + 56) + v15);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(float *)(*(_QWORD *)(a2 + 56) + 4 * result) != v16)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int v15;
  char v16;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = *(_DWORD *)(*(_QWORD *)(v3 + 56) + 4 * v11);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11));
    if ((v16 & 1) == 0 || *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * result) != v15)
      return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized static SimilarityMatrixCollectionPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  _BYTE *v87;
  char v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  _BYTE *v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  _BYTE *v106;
  uint64_t v107;
  int *v108;
  _BYTE *v109;
  uint64_t v110;
  char v111;
  uint64_t v113;
  _BYTE *v114;
  int *v115;
  _BYTE *v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  int *v130;
  _BYTE *v131;
  uint64_t v132;
  unsigned int (*v133)(uint64_t, uint64_t, uint64_t);
  _BYTE *v134;
  _BYTE *v135;
  char v136;
  uint64_t v137;
  void (*v138)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v139;
  uint64_t v140;
  _BYTE *v141;
  void (*v142)(_BYTE *, uint64_t);
  _BYTE v143[4];
  int v144;
  _BYTE *v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  _BYTE *v150;
  _BYTE *v151;
  _BYTE *v152;
  _BYTE *v153;
  _BYTE *v154;
  _BYTE *v155;
  _BYTE *v156;
  _BYTE *v157;
  _BYTE *v158;
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  int *v167;
  uint64_t v168;

  v168 = a2;
  v148 = type metadata accessor for UnknownStorage();
  v147 = *(_QWORD *)(v148 - 8);
  MEMORY[0x24BDAC7A8](v148, v3);
  v146 = &v143[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5, v6);
  v145 = &v143[-v7];
  v8 = type metadata accessor for Matrix2dPB(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v165 = &v143[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
  MEMORY[0x24BDAC7A8](v12, v13);
  v150 = &v143[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15, v16);
  v153 = &v143[-v17];
  MEMORY[0x24BDAC7A8](v18, v19);
  v159 = &v143[-v20];
  MEMORY[0x24BDAC7A8](v21, v22);
  v163 = (uint64_t)&v143[-v23];
  MEMORY[0x24BDAC7A8](v24, v25);
  v27 = &v143[-v26];
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  MEMORY[0x24BDAC7A8](v28, v29);
  v149 = &v143[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v31, v32);
  v154 = &v143[-v33];
  MEMORY[0x24BDAC7A8](v34, v35);
  v155 = &v143[-v36];
  MEMORY[0x24BDAC7A8](v37, v38);
  v151 = &v143[-v39];
  MEMORY[0x24BDAC7A8](v40, v41);
  v157 = &v143[-v42];
  MEMORY[0x24BDAC7A8](v43, v44);
  v152 = &v143[-v45];
  MEMORY[0x24BDAC7A8](v46, v47);
  v156 = &v143[-v48];
  MEMORY[0x24BDAC7A8](v49, v50);
  v161 = &v143[-v51];
  MEMORY[0x24BDAC7A8](v52, v53);
  v158 = &v143[-v54];
  MEMORY[0x24BDAC7A8](v55, v56);
  v160 = &v143[-v57];
  MEMORY[0x24BDAC7A8](v58, v59);
  v166 = (uint64_t)&v143[-v60];
  MEMORY[0x24BDAC7A8](v61, v62);
  v162 = &v143[-v63];
  MEMORY[0x24BDAC7A8](v64, v65);
  v67 = &v143[-v66];
  MEMORY[0x24BDAC7A8](v68, v69);
  v71 = &v143[-v70];
  MEMORY[0x24BDAC7A8](v72, v73);
  v75 = &v143[-v74];
  v76 = type metadata accessor for SimilarityMatrixCollectionPB(0);
  v77 = *(int *)(v76 + 20);
  v164 = a1;
  v78 = a1 + v77;
  v79 = v8;
  outlined init with copy of (Int32, Matrix2dPB)(v78, (uint64_t)v75, &demangling cache variable for type metadata for Matrix2dPB?);
  v167 = (int *)v76;
  outlined init with copy of (Int32, Matrix2dPB)(v168 + *(int *)(v76 + 20), (uint64_t)v71, &demangling cache variable for type metadata for Matrix2dPB?);
  v80 = v12;
  v81 = (uint64_t)&v27[*(int *)(v12 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v75, (uint64_t)v27, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v71, v81, &demangling cache variable for type metadata for Matrix2dPB?);
  v82 = v79;
  v83 = v79;
  v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v84((uint64_t)v27, 1, v83) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v71, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v75, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v84(v81, 1, v82) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v27, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_8;
    }
LABEL_6:
    v85 = (uint64_t)v27;
LABEL_21:
    outlined destroy of Coordinate3DPB?(v85, &demangling cache variable for type metadata for (Matrix2dPB?, Matrix2dPB?));
    goto LABEL_22;
  }
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v27, (uint64_t)v67, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v84(v81, 1, v82) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v71, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v75, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v67, type metadata accessor for Matrix2dPB);
    goto LABEL_6;
  }
  v86 = v84;
  v87 = v165;
  outlined init with take of Matrix2dPB(v81, (uint64_t)v165, type metadata accessor for Matrix2dPB);
  v88 = static Matrix2dPB.== infix(_:_:)(v67, v87);
  v89 = (uint64_t)v87;
  v84 = v86;
  outlined destroy of Matrix3x3PB(v89, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v71, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v75, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v67, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v27, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v88 & 1) == 0)
    goto LABEL_22;
LABEL_8:
  v90 = v167;
  v91 = v164;
  v92 = v162;
  outlined init with copy of (Int32, Matrix2dPB)(v164 + v167[6], (uint64_t)v162, &demangling cache variable for type metadata for Matrix2dPB?);
  v93 = v168;
  v94 = v168 + v90[6];
  v95 = v166;
  outlined init with copy of (Int32, Matrix2dPB)(v94, v166, &demangling cache variable for type metadata for Matrix2dPB?);
  v96 = v80;
  v97 = v95;
  v98 = (_BYTE *)v163;
  v99 = v163 + *(int *)(v96 + 48);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v92, v163, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v97, v99, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v84((uint64_t)v98, 1, v82) == 1)
  {
    outlined destroy of Coordinate3DPB?(v97, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v92, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v84(v99, 1, v82) != 1)
    {
LABEL_20:
      v85 = (uint64_t)v98;
      goto LABEL_21;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v98, &demangling cache variable for type metadata for Matrix2dPB?);
  }
  else
  {
    v100 = v160;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v98, (uint64_t)v160, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v84(v99, 1, v82) == 1)
    {
      v101 = (_BYTE *)v166;
LABEL_19:
      outlined destroy of Coordinate3DPB?((uint64_t)v101, &demangling cache variable for type metadata for Matrix2dPB?);
      outlined destroy of Coordinate3DPB?((uint64_t)v92, &demangling cache variable for type metadata for Matrix2dPB?);
      outlined destroy of Matrix3x3PB((uint64_t)v100, type metadata accessor for Matrix2dPB);
      goto LABEL_20;
    }
    v102 = v96;
    v103 = v93;
    v104 = v91;
    v105 = v92;
    v106 = v165;
    outlined init with take of Matrix2dPB(v99, (uint64_t)v165, type metadata accessor for Matrix2dPB);
    v144 = static Matrix2dPB.== infix(_:_:)(v100, v106);
    outlined destroy of Matrix3x3PB((uint64_t)v106, type metadata accessor for Matrix2dPB);
    outlined destroy of Coordinate3DPB?(v166, &demangling cache variable for type metadata for Matrix2dPB?);
    v107 = (uint64_t)v105;
    v91 = v104;
    v93 = v103;
    v96 = v102;
    outlined destroy of Coordinate3DPB?(v107, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v100, type metadata accessor for Matrix2dPB);
    outlined destroy of Coordinate3DPB?((uint64_t)v98, &demangling cache variable for type metadata for Matrix2dPB?);
    if ((v144 & 1) == 0)
      goto LABEL_22;
  }
  v108 = v167;
  v92 = v158;
  outlined init with copy of (Int32, Matrix2dPB)(v91 + v167[7], (uint64_t)v158, &demangling cache variable for type metadata for Matrix2dPB?);
  v109 = v161;
  outlined init with copy of (Int32, Matrix2dPB)(v93 + v108[7], (uint64_t)v161, &demangling cache variable for type metadata for Matrix2dPB?);
  v98 = v159;
  v110 = (uint64_t)&v159[*(int *)(v96 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v92, (uint64_t)v159, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v109, v110, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v84((uint64_t)v98, 1, v82) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v109, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v92, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v84(v110, 1, v82) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v98, &demangling cache variable for type metadata for Matrix2dPB?);
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  v100 = v156;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v98, (uint64_t)v156, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v84(v110, 1, v82) == 1)
  {
    v101 = v161;
    goto LABEL_19;
  }
  v113 = (uint64_t)v92;
  v114 = v165;
  outlined init with take of Matrix2dPB(v110, (uint64_t)v165, type metadata accessor for Matrix2dPB);
  LODWORD(v166) = static Matrix2dPB.== infix(_:_:)(v100, v114);
  outlined destroy of Matrix3x3PB((uint64_t)v114, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v161, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?(v113, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v100, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v98, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v166 & 1) == 0)
    goto LABEL_22;
LABEL_25:
  v115 = v167;
  v116 = v152;
  outlined init with copy of (Int32, Matrix2dPB)(v91 + v167[8], (uint64_t)v152, &demangling cache variable for type metadata for Matrix2dPB?);
  v117 = v157;
  outlined init with copy of (Int32, Matrix2dPB)(v93 + v115[8], (uint64_t)v157, &demangling cache variable for type metadata for Matrix2dPB?);
  v118 = v153;
  v119 = (uint64_t)&v153[*(int *)(v96 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v116, (uint64_t)v153, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v117, v119, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v84((uint64_t)v118, 1, v82) != 1)
  {
    v124 = v151;
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v118, (uint64_t)v151, &demangling cache variable for type metadata for Matrix2dPB?);
    v125 = v84(v119, 1, v82);
    v126 = (uint64_t)v84;
    v123 = (uint64_t)v154;
    v122 = (uint64_t)v155;
    if (v125 != 1)
    {
      v166 = v126;
      v127 = v119;
      v128 = (uint64_t)v116;
      v129 = v165;
      outlined init with take of Matrix2dPB(v127, (uint64_t)v165, type metadata accessor for Matrix2dPB);
      LODWORD(v163) = static Matrix2dPB.== infix(_:_:)(v124, v129);
      outlined destroy of Matrix3x3PB((uint64_t)v129, type metadata accessor for Matrix2dPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v157, &demangling cache variable for type metadata for Matrix2dPB?);
      outlined destroy of Coordinate3DPB?(v128, &demangling cache variable for type metadata for Matrix2dPB?);
      outlined destroy of Matrix3x3PB((uint64_t)v124, type metadata accessor for Matrix2dPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v118, &demangling cache variable for type metadata for Matrix2dPB?);
      if ((v163 & 1) == 0)
        goto LABEL_22;
      goto LABEL_32;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v157, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v116, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v124, type metadata accessor for Matrix2dPB);
    goto LABEL_30;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v117, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v116, &demangling cache variable for type metadata for Matrix2dPB?);
  v120 = v84(v119, 1, v82);
  v121 = (uint64_t)v84;
  v123 = (uint64_t)v154;
  v122 = (uint64_t)v155;
  if (v120 != 1)
  {
LABEL_30:
    v85 = (uint64_t)v118;
    goto LABEL_21;
  }
  v166 = v121;
  outlined destroy of Coordinate3DPB?((uint64_t)v118, &demangling cache variable for type metadata for Matrix2dPB?);
LABEL_32:
  v130 = v167;
  outlined init with copy of (Int32, Matrix2dPB)(v91 + v167[9], v122, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v93 + v130[9], v123, &demangling cache variable for type metadata for Matrix2dPB?);
  v131 = v150;
  v132 = (uint64_t)&v150[*(int *)(v96 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)(v122, (uint64_t)v150, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined init with copy of (Int32, Matrix2dPB)(v123, v132, &demangling cache variable for type metadata for Matrix2dPB?);
  v133 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v166;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v166)(v131, 1, v82) == 1)
  {
    outlined destroy of Coordinate3DPB?(v123, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?(v122, &demangling cache variable for type metadata for Matrix2dPB?);
    if (v133(v132, 1, v82) == 1)
    {
      outlined destroy of Coordinate3DPB?((uint64_t)v131, &demangling cache variable for type metadata for Matrix2dPB?);
LABEL_39:
      v137 = v147;
      v138 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v147 + 16);
      v139 = v145;
      v140 = v148;
      v138(v145, v91, v148);
      v141 = v146;
      v138(v146, v93, v140);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v111 = dispatch thunk of static Equatable.== infix(_:_:)();
      v142 = *(void (**)(_BYTE *, uint64_t))(v137 + 8);
      v142(v141, v140);
      v142(v139, v140);
      return v111 & 1;
    }
    goto LABEL_37;
  }
  v134 = v149;
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v131, (uint64_t)v149, &demangling cache variable for type metadata for Matrix2dPB?);
  if (v133(v132, 1, v82) == 1)
  {
    outlined destroy of Coordinate3DPB?(v123, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Coordinate3DPB?(v122, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v134, type metadata accessor for Matrix2dPB);
LABEL_37:
    v85 = (uint64_t)v131;
    goto LABEL_21;
  }
  v135 = v165;
  outlined init with take of Matrix2dPB(v132, (uint64_t)v165, type metadata accessor for Matrix2dPB);
  v136 = static Matrix2dPB.== infix(_:_:)(v134, v135);
  outlined destroy of Matrix3x3PB((uint64_t)v135, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?(v123, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Coordinate3DPB?(v122, &demangling cache variable for type metadata for Matrix2dPB?);
  outlined destroy of Matrix3x3PB((uint64_t)v134, type metadata accessor for Matrix2dPB);
  outlined destroy of Coordinate3DPB?((uint64_t)v131, &demangling cache variable for type metadata for Matrix2dPB?);
  if ((v136 & 1) != 0)
    goto LABEL_39;
LABEL_22:
  v111 = 0;
  return v111 & 1;
}

uint64_t specialized static TrackingIntermediateDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(int *)(type metadata accessor for TrackingIntermediateDataPB(0) + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a2 + v13);
  if (v14 == v15
    || (swift_retain(),
        swift_retain(),
        v16 = closure #1 in static TrackingIntermediateDataPB.== infix(_:_:)(v14, v15),
        swift_release(),
        swift_release(),
        (v16 & 1) != 0))
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v12, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v12, v4);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static TrackingUpdateDataPB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t updated;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  float *v44;
  char v45;
  float *v46;
  int v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = type metadata accessor for UnknownStorage();
  v60 = *(_QWORD *)(v4 - 8);
  v61 = v4;
  MEMORY[0x24BDAC7A8](v4, v5);
  v59 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v58 = (char *)&v57 - v9;
  v10 = type metadata accessor for Coordinate3DPB(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10, v12);
  v62 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
  MEMORY[0x24BDAC7A8](v14, v15);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Coordinate3DPB?);
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22, v23);
  v25 = (char *)&v57 - v24;
  MEMORY[0x24BDAC7A8](v26, v27);
  v29 = (char *)&v57 - v28;
  updated = type metadata accessor for TrackingUpdateDataPB(0);
  v31 = *(int *)(updated + 68);
  v63 = a1;
  v32 = a1 + v31;
  v33 = (int *)updated;
  outlined init with copy of (Int32, Matrix2dPB)(v32, (uint64_t)v29, &demangling cache variable for type metadata for Coordinate3DPB?);
  v34 = v33[17];
  v64 = a2;
  outlined init with copy of (Int32, Matrix2dPB)(a2 + v34, (uint64_t)v25, &demangling cache variable for type metadata for Coordinate3DPB?);
  v35 = (uint64_t)&v17[*(int *)(v14 + 48)];
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v29, (uint64_t)v17, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v25, v35, &demangling cache variable for type metadata for Coordinate3DPB?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v36((uint64_t)v17, 1, v10) != 1)
  {
    outlined init with copy of (Int32, Matrix2dPB)((uint64_t)v17, (uint64_t)v21, &demangling cache variable for type metadata for Coordinate3DPB?);
    if (v36(v35, 1, v10) != 1)
    {
      v37 = v62;
      outlined init with take of Matrix2dPB(v35, v62, type metadata accessor for Coordinate3DPB);
      v38 = static Coordinate3DPB.== infix(_:_:)(v21, v37);
      outlined destroy of Matrix3x3PB(v37, type metadata accessor for Coordinate3DPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for Coordinate3DPB?);
      outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Coordinate3DPB?);
      outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for Coordinate3DPB);
      outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for Coordinate3DPB?);
      if ((v38 & 1) == 0)
        goto LABEL_11;
      goto LABEL_8;
    }
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Coordinate3DPB?);
    outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for Coordinate3DPB);
LABEL_6:
    outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for (Coordinate3DPB?, Coordinate3DPB?));
    goto LABEL_11;
  }
  outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for Coordinate3DPB?);
  outlined destroy of Coordinate3DPB?((uint64_t)v29, &demangling cache variable for type metadata for Coordinate3DPB?);
  if (v36(v35, 1, v10) != 1)
    goto LABEL_6;
  outlined destroy of Coordinate3DPB?((uint64_t)v17, &demangling cache variable for type metadata for Coordinate3DPB?);
LABEL_8:
  v39 = v63;
  v40 = v64;
  if (*(float *)v63 != *(float *)v64
    || *(float *)(v63 + 4) != *(float *)(v64 + 4)
    || *(unsigned __int8 *)(v63 + 8) != *(unsigned __int8 *)(v64 + 8))
  {
    goto LABEL_11;
  }
  v43 = v33[18];
  v44 = (float *)(v63 + v43);
  v45 = *(_BYTE *)(v63 + v43 + 4);
  v46 = (float *)(v64 + v43);
  v47 = *(unsigned __int8 *)(v64 + v43 + 4);
  if ((v45 & 1) != 0)
  {
    if (!v47)
      goto LABEL_11;
  }
  else
  {
    if (*v44 != *v46)
      LOBYTE(v47) = 1;
    if ((v47 & 1) != 0)
      goto LABEL_11;
  }
  specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(v63 + 16), *(_QWORD *)(v64 + 16));
  if ((v48 & 1) != 0)
  {
    specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(v39 + 24), *(_QWORD *)(v40 + 24));
    if ((v49 & 1) != 0
      && *(unsigned __int8 *)(v39 + 32) == *(unsigned __int8 *)(v40 + 32)
      && *(unsigned __int8 *)(v39 + 33) == *(unsigned __int8 *)(v40 + 33)
      && *(unsigned __int8 *)(v39 + 34) == *(unsigned __int8 *)(v40 + 34)
      && *(unsigned __int8 *)(v39 + 35) == *(unsigned __int8 *)(v40 + 35)
      && *(float *)(v39 + 36) == *(float *)(v40 + 36)
      && *(float *)(v39 + 40) == *(float *)(v40 + 40)
      && (specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v39 + 48), *(_QWORD *)(v40 + 48)) & 1) != 0)
    {
      v50 = v39 + v33[16];
      v52 = v60;
      v51 = v61;
      v53 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
      v54 = v58;
      v53(v58, v50, v61);
      v55 = v59;
      v53(v59, v40 + v33[16], v51);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      v56 = *(void (**)(char *, uint64_t))(v52 + 8);
      v56(v55, v51);
      v56(v54, v51);
      return v41 & 1;
    }
  }
LABEL_11:
  v41 = 0;
  return v41 & 1;
}

uint64_t outlined assign with take of SimilarityMatrixCollectionPB?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SimilarityMatrixCollectionPB?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t VideoDataStructs.ImageMetaData.midExposureTimeStamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t VideoDataStructs.ImageMetaData.midExposureTimeStamp.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*VideoDataStructs.ImageMetaData.midExposureTimeStamp.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

float VideoDataStructs.ImageMetaData.sensorTemperature.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void VideoDataStructs.ImageMetaData.sensorTemperature.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*VideoDataStructs.ImageMetaData.sensorTemperature.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

float VideoDataStructs.ImageMetaData.exposureTime.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 12);
}

void VideoDataStructs.ImageMetaData.exposureTime.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 12) = a1;
}

uint64_t (*VideoDataStructs.ImageMetaData.exposureTime.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t VideoDataStructs.ImageMetaData.luxLevel.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t VideoDataStructs.ImageMetaData.luxLevel.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*VideoDataStructs.ImageMetaData.luxLevel.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t VideoDataStructs.ImageMetaData.aeAverage.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t VideoDataStructs.ImageMetaData.aeAverage.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*VideoDataStructs.ImageMetaData.aeAverage.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t VideoDataStructs.ImageMetaData.projectorPowerFlood.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t VideoDataStructs.ImageMetaData.projectorPowerFlood.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*VideoDataStructs.ImageMetaData.projectorPowerFlood.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t VideoDataStructs.ImageMetaData.projectorPulseWidth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t VideoDataStructs.ImageMetaData.projectorPulseWidth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*VideoDataStructs.ImageMetaData.projectorPulseWidth.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t VideoDataStructs.ImageMetaData.darkestHandAverage.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t VideoDataStructs.ImageMetaData.darkestHandAverage.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*VideoDataStructs.ImageMetaData.darkestHandAverage.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t VideoDataStructs.ImageMetaData.brightestHandAverage.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t VideoDataStructs.ImageMetaData.brightestHandAverage.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*VideoDataStructs.ImageMetaData.brightestHandAverage.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t VideoDataStructs.ImageMetaData.ispDGain.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t VideoDataStructs.ImageMetaData.ispDGain.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*VideoDataStructs.ImageMetaData.ispDGain.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t VideoDataStructs.ImageMetaData.remoteFrameID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t VideoDataStructs.ImageMetaData.remoteFrameID.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = result;
  return result;
}

uint64_t (*VideoDataStructs.ImageMetaData.remoteFrameID.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t VideoDataStructs.ImageMetaData.originalTimestampWhenWrittenToFile.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t VideoDataStructs.ImageMetaData.originalTimestampWhenWrittenToFile.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[10] = result;
  v3[11] = a2;
  v3[12] = a3;
  return result;
}

uint64_t (*VideoDataStructs.ImageMetaData.originalTimestampWhenWrittenToFile.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t VideoDataStructs.ImageMetaData.init(midExposureTimeStamp:sensorTemperature:exposureTime:luxLevel:aeAverage:projectorPowerFlood:projectorPulseWidth:darkestHandAverage:brightestHandAverage:ispDGain:remoteFrameID:originalTimestampWhenWrittenToFile:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, float a11@<S1>, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(_QWORD *)a9 = result;
  *(float *)(a9 + 8) = a10;
  *(float *)(a9 + 12) = a11;
  *(_QWORD *)(a9 + 16) = a2;
  *(_QWORD *)(a9 + 24) = a3;
  *(_QWORD *)(a9 + 32) = a4;
  *(_QWORD *)(a9 + 40) = a5;
  *(_QWORD *)(a9 + 48) = a6;
  *(_QWORD *)(a9 + 56) = a7;
  *(_QWORD *)(a9 + 64) = a8;
  *(_QWORD *)(a9 + 72) = a12;
  *(_QWORD *)(a9 + 80) = a13;
  *(_QWORD *)(a9 + 88) = a14;
  *(_QWORD *)(a9 + 96) = a15;
  return result;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for VideoDataStructs.ImageMetaData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VideoDataStructs.ImageMetaData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 104) = v3;
  return result;
}

ValueMetadata *type metadata accessor for VideoDataStructs.ImageMetaData()
{
  return &type metadata for VideoDataStructs.ImageMetaData;
}

uint64_t RestingGestureSuppressor.shouldSuppress(basedOn:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];

  if (*(_BYTE *)(v0 + 64) == 1)
  {
    swift_beginAccess();
    v1 = *(_QWORD *)(v0 + 48);
    v2 = *(_QWORD *)(v1 + 16);
    if (v2)
    {
      v7[0] = *(_QWORD *)(v0 + 48);
      v7[1] = v1;
      v7[2] = v1 + 32;
      v7[3] = 1;
      v7[4] = (2 * v2) | 1;
      swift_bridgeObjectRetain();
      v3 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySd_s5SIMD3VySfGtGs10ArraySliceVySd_AJtGG_Sds5NeverOTg506_sSds5f26VySfGSdACSdIgyyyyd_Sd_ACt_q5_ACttki106OIegnrzr_TR089_s5Hands24RestingGestureSuppressorC14shouldSuppress7basedOnSbAA14HandDescriptorV_tFS2d_s5A19lm3Gt_Q20_AJttXEfU_Tf3nnnpf_nTf1cn_n(v7);
      v4 = v3[2];
      if (!v4)
      {
LABEL_7:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      v5 = 0;
      while (*(double *)(v0 + 40) > *(double *)&v3[v5 + 4])
      {
        if (v4 == ++v5)
          goto LABEL_7;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

_QWORD *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySd_s5SIMD3VySfGtGs10ArraySliceVySd_AJtGG_Sds5NeverOTg506_sSds5f26VySfGSdACSdIgyyyyd_Sd_ACt_q5_ACttki106OIegnrzr_TR089_s5Hands24RestingGestureSuppressorC14shouldSuppress7basedOnSbAA14HandDescriptorV_tFS2d_s5A19lm3Gt_Q20_AJttXEfU_Tf3nnnpf_nTf1cn_n(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  float32x4_t *v12;
  uint64_t v13;
  double v14;
  float32x4_t v15;
  float32x4_t v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  float32x4_t v30;
  float32x4_t v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  uint64_t v46;

  v1 = result[3];
  v2 = result[4] >> 1;
  if (!__OFSUB__(v2, v1))
  {
    v44 = result[4] >> 1;
    v42 = result[3];
    v40 = result[2];
    v43 = *result;
    v39 = *(_QWORD *)(*result + 16);
    if (v2 - v1 >= v39)
      v3 = *(_QWORD *)(*result + 16);
    else
      v3 = v2 - v1;
    v46 = MEMORY[0x24BEE4AF8];
    result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
    if (v3 < 0)
      goto LABEL_38;
    if (v3)
    {
      if (v42 <= v44)
        v4 = v44;
      else
        v4 = v42;
      swift_bridgeObjectRetain();
      result = (_QWORD *)swift_unknownObjectRetain();
      v5 = v42;
      v6 = 0;
      v7 = v42 - v4;
      v8 = v43;
      v9 = -v3;
      v10 = (double *)(v43 + 48);
      v11 = v40;
      v12 = (float32x4_t *)(v40 + 32 * v42 + 16);
      v13 = v39;
      while (v9 != v6)
      {
        if (!v13)
          goto LABEL_32;
        if (v42 - v44 == v6)
          goto LABEL_33;
        if (v7 == v6)
          goto LABEL_34;
        v14 = *(v10 - 2);
        v15 = *(float32x4_t *)v10;
        v16 = *v12;
        v17 = *(double *)v12[-1].i64;
        v19 = *(_QWORD *)(v46 + 16);
        v18 = *(_QWORD *)(v46 + 24);
        if (v19 >= v18 >> 1)
        {
          v37 = *v12;
          v38 = *(float32x4_t *)v10;
          result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          v16 = v37;
          v15 = v38;
          v13 = v39;
          v11 = v40;
          v5 = v42;
          v8 = v43;
        }
        v20 = vsubq_f32(v16, v15);
        v21 = vmulq_f32(v20, v20);
        *(_QWORD *)(v46 + 16) = v19 + 1;
        *(double *)(v46 + 8 * v19 + 32) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0])/ vabdd_f64(v17, v14);
        --v6;
        v10 += 4;
        v12 += 2;
        if (v9 == v6)
        {
          v22 = v5 - v6;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
    }
    else
    {
      v8 = v43;
      swift_bridgeObjectRetain();
      result = (_QWORD *)swift_unknownObjectRetain();
      v5 = v42;
      v22 = v42;
      v11 = v40;
LABEL_20:
      v23 = *(_QWORD *)(v8 + 16);
      if (v3 == v23)
      {
LABEL_21:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return (_QWORD *)v46;
      }
      v24 = 0;
      v25 = v8 + 32 * v3;
      v26 = v22;
      v27 = v11 + 32 * v22;
      v28 = v44;
      while (v3 < v23)
      {
        if (v28 == v26)
          goto LABEL_21;
        if (v22 < v5 || v26 >= v28)
          goto LABEL_36;
        v29 = *(double *)(v25 + v24 + 32);
        v30 = *(float32x4_t *)(v25 + v24 + 48);
        v31 = *(float32x4_t *)(v27 + v24 + 16);
        v32 = *(double *)(v27 + v24);
        v34 = *(_QWORD *)(v46 + 16);
        v33 = *(_QWORD *)(v46 + 24);
        if (v34 >= v33 >> 1)
        {
          v45 = *(float32x4_t *)(v25 + v24 + 48);
          v41 = *(float32x4_t *)(v27 + v24 + 16);
          result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          v31 = v41;
          v30 = v45;
          v8 = v43;
          v28 = v44;
          v5 = v42;
        }
        ++v3;
        v35 = vsubq_f32(v31, v30);
        v36 = vmulq_f32(v35, v35);
        *(_QWORD *)(v46 + 16) = v34 + 1;
        *(double *)(v46 + 8 * v34 + 32) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0])/ vabdd_f64(v32, v29);
        v23 = *(_QWORD *)(v8 + 16);
        v24 += 32;
        ++v26;
        if (v3 == v23)
          goto LABEL_21;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t RestingGestureSuppressor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RestingGestureSuppressor()
{
  return objc_opt_self();
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.reset() in conformance RestingGestureSuppressor()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = MEMORY[0x24BEE4AF8];
  result = swift_bridgeObjectRelease();
  *(_BYTE *)(v1 + 64) = 0;
  return result;
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.update(inProgress:withHand:withData:atTime:) in conformance RestingGestureSuppressor(float32x4_t a1, uint64_t a2, uint64_t a3)
{
  return specialized RestingGestureSuppressor.update(inProgress:withHand:withData:atTime:)(a3, a1);
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.shouldSuppress(basedOn:) in conformance RestingGestureSuppressor()
{
  return RestingGestureSuppressor.shouldSuppress(basedOn:)() & 1;
}

uint64_t specialized RestingGestureSuppressor.update(inProgress:withHand:withData:atTime:)(uint64_t result, float32x4_t a2)
{
  double **v2;
  uint64_t v3;
  double *v4;
  double v5;
  float32x2_t *v6;
  unint64_t v7;
  float32x4_t v8;
  int32x4_t v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;

  if (!*(_QWORD *)(result + 16))
    return result;
  v6 = *(float32x2_t **)(result + 24);
  v7 = (unint64_t)v6[2];
  if (!v7)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v7 < 0x1B)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v5 = *(double *)a2.i64;
  *(float32x2_t *)a2.f32 = vsub_f32(v6[4], v6[108]);
  v8 = a2;
  v8.f32[2] = v6[5].f32[0] - v6[109].f32[0];
  v9 = (int32x4_t)vmulq_f32(v8, v8);
  v9.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v9, 2), vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1))).u32[0];
  *(float32x2_t *)v8.f32 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  *(float32x2_t *)v8.f32 = vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32)));
  if (COERCE_FLOAT(vmul_n_f32(*(float32x2_t *)&a2, COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v8, vrsqrts_f32((float32x2_t)*(unsigned int *)&v9, vmul_f32(*(float32x2_t *)&v8, *(float32x2_t *)&v8))))).i32[1]) > 0.0)
  {
    swift_beginAccess();
    *(_QWORD *)(v3 + 48) = MEMORY[0x24BEE4AF8];
    result = swift_bridgeObjectRelease();
    *(_BYTE *)(v3 + 64) = 0;
    return result;
  }
  v10 = *(_QWORD *)(v3 + 56);
  if (v10 < v7)
  {
    v18 = *(_OWORD *)v6[4 * v10 + 4].f32;
    v2 = (double **)(v3 + 48);
    swift_beginAccess();
    v4 = *(double **)(v3 + 48);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 48) = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  v4 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
  *v2 = v4;
LABEL_8:
  v13 = *((_QWORD *)v4 + 2);
  v12 = *((_QWORD *)v4 + 3);
  if (v13 >= v12 >> 1)
  {
    v4 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v4);
    *v2 = v4;
  }
  *((_QWORD *)v4 + 2) = v13 + 1;
  v14 = &v4[4 * v13];
  v14[4] = v5;
  *((_OWORD *)v14 + 3) = v18;
  v4 = *(double **)(v3 + 48);
  result = swift_endAccess();
  if (*((_QWORD *)v4 + 2))
  {
    while (v4[4] < v5 - *(double *)(v3 + 32))
    {
      swift_beginAccess();
      v4 = *v2;
      v15 = *((_QWORD *)*v2 + 2);
      if (!v15)
      {
        __break(1u);
        goto LABEL_20;
      }
      v16 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)v16 || (unint64_t)(v15 - 1) > *((_QWORD *)v4 + 3) >> 1)
        v4 = (double *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16, v15, 1, v4);
      v17 = *((_QWORD *)v4 + 2);
      if (!v17)
      {
        result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      memmove(v4 + 4, v4 + 8, 32 * v17 - 32);
      *((_QWORD *)v4 + 2) = v17 - 1;
      *(_QWORD *)(v3 + 48) = v4;
      result = swift_endAccess();
      *(_BYTE *)(v3 + 64) = 1;
      if (!*((_QWORD *)v4 + 2))
        return result;
    }
  }
  return result;
}

BOOL HandInMotionSuppressor.shouldSuppress(basedOn:)()
{
  uint64_t v0;
  float32x4_t *v1;
  uint64_t v2;
  float32x4_t *v3;
  float32x4_t v4;
  float32x4_t v5;
  float v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  _BOOL8 result;

  swift_beginAccess();
  v1 = *(float32x4_t **)(v0 + 32);
  v2 = v1[1].i64[0];
  if (!v2)
    return 0;
  v4 = v1[2];
  v3 = v1 + 2;
  v5 = v4;
  v6 = *(float *)(v0 + 40);
  v7 = v2 - 1;
  do
  {
    v8 = *v3++;
    v9 = vsubq_f32(v5, v8);
    v10 = vmulq_f32(v9, v9);
    v10.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
    result = v6 <= v10.f32[0];
  }
  while (v6 > v10.f32[0] && v7-- != 0);
  return result;
}

uint64_t HandInMotionSuppressor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HandInMotionSuppressor()
{
  return objc_opt_self();
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.reset() in conformance HandInMotionSuppressor()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = MEMORY[0x24BEE4AF8];
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.update(inProgress:withHand:withData:atTime:) in conformance HandInMotionSuppressor(uint64_t a1, uint64_t a2)
{
  return specialized HandInMotionSuppressor.update(inProgress:withHand:withData:atTime:)(a1, a2);
}

BOOL protocol witness for MiddleDoubleTapSuppressor.shouldSuppress(basedOn:) in conformance HandInMotionSuppressor()
{
  return HandInMotionSuppressor.shouldSuppress(basedOn:)();
}

uint64_t specialized HandInMotionSuppressor.update(inProgress:withHand:withData:atTime:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;

  if ((result & 1) == 0)
  {
    swift_beginAccess();
    *(_QWORD *)(v3 + 32) = MEMORY[0x24BEE4AF8];
    return swift_bridgeObjectRelease();
  }
  if (!*(_QWORD *)(a2 + 16))
    return result;
  v5 = *(_QWORD *)(v3 + 48);
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v5 >= *(_QWORD *)(v6 + 16))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v14 = *(_OWORD *)(v6 + 32 * v5 + 32);
  v2 = (_QWORD *)(v3 + 32);
  swift_beginAccess();
  v4 = *(_QWORD **)(v3 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 32) = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_13:
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    *v2 = v4;
  }
  v8 = v4[2];
  v9 = v4[3];
  v10 = v8 + 1;
  if (v8 >= v9 >> 1)
  {
    v11 = v4;
    v12 = v4[2];
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v8 + 1, 1, v11);
    v8 = v12;
    v4 = v13;
    *v2 = v13;
  }
  v4[2] = v10;
  *(_OWORD *)&v4[2 * v8 + 4] = v14;
  return swift_endAccess();
}

void one-time initialization function for _stereoCameraPairsListN301()
{
  static SchedulerUtils._stereoCameraPairsListN301 = &outlined read-only object #0 of one-time initialization function for _stereoCameraPairsListN301;
}

void one-time initialization function for _stereoCameraPairsListMCP()
{
  static SchedulerUtils._stereoCameraPairsListMCP = MEMORY[0x24BEE4AF8];
}

double one-time initialization function for _cropShape()
{
  double result;

  result = 5.62950094e14;
  static SchedulerUtils._cropShape = 0x4300000043000000;
  return result;
}

__n128 one-time initialization function for _sparseGrid()
{
  uint64_t v0;
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  float32x2_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23D9A7040;
  *(_QWORD *)(v0 + 32) = &outlined read-only object #0 of one-time initialization function for _sparseGrid;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_23D9A7050;
  *(_DWORD *)(v1 + 32) = 0;
  if (one-time initialization token for _cropShape != -1)
    swift_once();
  v11 = (float32x2_t)static SchedulerUtils._cropShape;
  v2 = *((float *)&static SchedulerUtils._cropShape + 1) + -1.0;
  *(float *)(v1 + 36) = *((float *)&static SchedulerUtils._cropShape + 1) + -1.0;
  *(_QWORD *)(v0 + 40) = v1;
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_23D9A7050;
  *(float *)(v3 + 32) = v11.f32[0] + -1.0;
  *(_DWORD *)(v3 + 36) = 0;
  *(_QWORD *)(v0 + 48) = v3;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23D9A7050;
  *(float *)(v4 + 32) = v11.f32[0] + -1.0;
  *(float *)(v4 + 36) = v2;
  *(_QWORD *)(v0 + 56) = v4;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D9A7050;
  *(_DWORD *)(v5 + 32) = 0;
  v6 = vmuls_lane_f32(0.5, v11, 1);
  *(float *)(v5 + 36) = v6;
  *(_QWORD *)(v0 + 64) = v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23D9A7050;
  *(float *)(v7 + 32) = 0.5 * v11.f32[0];
  *(_DWORD *)(v7 + 36) = 0;
  *(_QWORD *)(v0 + 72) = v7;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_23D9A7050;
  *(float *)(v8 + 32) = 0.5 * v11.f32[0];
  *(float *)(v8 + 36) = v2;
  *(_QWORD *)(v0 + 80) = v8;
  v9 = swift_allocObject();
  result = (__n128)xmmword_23D9A7050;
  *(_OWORD *)(v9 + 16) = xmmword_23D9A7050;
  *(float *)(v9 + 32) = v11.f32[0] + -1.0;
  *(float *)(v9 + 36) = v6;
  *(_QWORD *)(v0 + 88) = v9;
  static SchedulerUtils._sparseGrid = v0;
  return result;
}

uint64_t specialized Sequence.min(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  float v21;
  float v22;
  uint64_t inited;
  char v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  char v47;
  char v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v41 = *(_QWORD *)(a1 + 40);
    v42 = *(_QWORD *)(a1 + 32);
    v51 = *(_QWORD *)(a1 + 48);
    v48 = *(_BYTE *)(a1 + 56);
    v49 = *(float *)(a1 + 60);
    v44 = *(float *)(a1 + 64);
    v43 = *(_QWORD *)(a1 + 72);
    v40 = *(_QWORD *)(a1 + 80);
    v52 = *(_QWORD *)(a1 + 88);
    v47 = *(_BYTE *)(a1 + 96);
    v50 = *(float *)(a1 + 100);
    v45 = *(float *)(a1 + 104);
    v7 = swift_bridgeObjectRetain();
    v8 = v6 - 1;
    if (v6 != 1)
    {
      v10 = (float *)(v7 + 184);
      do
      {
        v11 = *((_QWORD *)v10 - 9);
        v12 = *((_QWORD *)v10 - 8);
        v13 = *((_QWORD *)v10 - 7);
        v14 = *((_BYTE *)v10 - 48);
        v15 = *(v10 - 11);
        v16 = *(v10 - 10);
        v18 = *((_QWORD *)v10 - 4);
        v17 = *((_QWORD *)v10 - 3);
        v19 = *((_QWORD *)v10 - 2);
        v20 = *((_BYTE *)v10 - 8);
        v21 = *(v10 - 1);
        v22 = *v10;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CameraSource>);
        inited = swift_initStackObject();
        v24 = 0;
        *(_OWORD *)(inited + 16) = xmmword_23D9A7050;
        *(_QWORD *)(inited + 32) = v51;
        *(_BYTE *)(inited + 40) = v48 & 1;
        *(_QWORD *)(inited + 48) = v52;
        *(_BYTE *)(inited + 56) = v47 & 1;
        if ((*(_BYTE *)(a2 + 80) & 1) != 0 && a3)
          v24 = specialized static Array<A>.== infix(_:_:)(inited, a3);
        swift_bridgeObjectRelease();
        v25 = v15;
        v26 = *(double *)(a2 + 8);
        v27 = *(double *)(a2 + 16);
        if (v27 < v15)
          v25 = *(double *)(a2 + 16);
        v28 = v21;
        if (v27 < v21)
          v28 = *(double *)(a2 + 16);
        v29 = v49;
        if (v27 < v49)
          v29 = *(double *)(a2 + 16);
        v30 = v50;
        if (v27 < v50)
          v30 = *(double *)(a2 + 16);
        v31 = *(double *)(a2 + 8);
        if ((v24 & 1) != 0)
          v31 = v26 / *(double *)(a2 + 88);
        v32 = v25 * v28 - v29 * v30;
        if (v31 < v32)
          goto LABEL_7;
        if (fabs(v32) <= v26)
        {
          v33 = *(double *)(a2 + 24);
          v34 = v16 - v33;
          if (v34 <= 0.0)
            v34 = 0.0;
          v35 = v22 - v33;
          if (v35 <= 0.0)
            v35 = 0.0;
          v36 = v44 - v33;
          if (v36 <= 0.0)
            v36 = 0.0;
          v37 = v45 - v33;
          if (v37 > 0.0)
            v36 = v37 + v36;
          v38 = *(double *)(a2 + 64);
          if ((v24 & 1) != 0)
            v38 = v38 / *(double *)(a2 + 88);
          if (v38 < v36 - (v34 + v35))
          {
LABEL_7:
            v50 = v21;
            v52 = v19;
            v42 = v11;
            v43 = v18;
            v49 = v15;
            v51 = v13;
            v40 = v17;
            v41 = v12;
            v48 = v14;
            v44 = v16;
            v45 = v22;
            v47 = v20;
          }
        }
        v10 += 20;
        --v8;
      }
      while (v8);
    }
    swift_bridgeObjectRelease();
    outlined release of SchedulingConfig(a2);
    *(_QWORD *)a4 = v42;
    *(_QWORD *)(a4 + 8) = v41;
    *(_QWORD *)(a4 + 16) = v51;
    *(_QWORD *)(a4 + 24) = v48 & 1 | ((unint64_t)LODWORD(v49) << 32);
    *(_QWORD *)(a4 + 32) = LODWORD(v44);
    *(_QWORD *)(a4 + 40) = v43;
    *(_QWORD *)(a4 + 48) = v40;
    *(_QWORD *)(a4 + 56) = v52;
    *(_QWORD *)(a4 + 64) = v47 & 1 | ((unint64_t)LODWORD(v50) << 32);
    *(float *)(a4 + 72) = v45;
    *(_BYTE *)(a4 + 76) = 0;
  }
  else
  {
    outlined release of SchedulingConfig(a2);
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 60) = 0u;
    *(_BYTE *)(a4 + 76) = 1;
  }
  return swift_bridgeObjectRelease();
}

uint64_t static SchedulerUtils.pickBestCameraPair(bboxPairs:config:timestamp:hand:poseCameras:)@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t result;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;

  v4 = a3;
  v5 = (uint64_t)a2;
  v6 = a4;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = *a2;
    v9 = swift_bridgeObjectRetain() + 56;
    v11 = MEMORY[0x24BEE4AF8];
    do
    {
      *(_QWORD *)&v10 = *(_QWORD *)(v9 + 44);
      if (COERCE_FLOAT(*(_QWORD *)(v9 + 4)) > v8 && *(float *)&v10 > v8)
      {
        v33 = *(_QWORD *)(v9 + 4);
        v34 = v10;
        v16 = *(_QWORD *)(v9 - 24);
        v17 = *(_QWORD *)(v9 - 16);
        v18 = *(_QWORD *)(v9 - 8);
        v19 = *(_BYTE *)v9;
        v20 = *(_QWORD *)(v9 + 16);
        v21 = *(_QWORD *)(v9 + 24);
        v22 = *(_QWORD *)(v9 + 32);
        v23 = *(_BYTE *)(v9 + 40);
        v35[0] = v11;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1);
          v11 = v35[0];
        }
        v13 = *(_QWORD *)(v11 + 16);
        v12 = *(_QWORD *)(v11 + 24);
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          v11 = v35[0];
        }
        *(_QWORD *)(v11 + 16) = v13 + 1;
        v14 = v11 + 80 * v13;
        *(_QWORD *)(v14 + 32) = v16;
        *(_QWORD *)(v14 + 40) = v17;
        *(_QWORD *)(v14 + 48) = v18;
        *(_BYTE *)(v14 + 56) = v19;
        *(_QWORD *)(v14 + 60) = v33;
        *(_QWORD *)(v14 + 72) = v20;
        *(_QWORD *)(v14 + 80) = v21;
        *(_QWORD *)(v14 + 88) = v22;
        *(_BYTE *)(v14 + 96) = v23;
        *((_QWORD *)&v10 + 1) = *((_QWORD *)&v34 + 1);
        *(_QWORD *)(v14 + 100) = v34;
      }
      v9 += 80;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    v4 = a3;
    v6 = a4;
    v5 = (uint64_t)a2;
  }
  else
  {
    v11 = MEMORY[0x24BEE4AF8];
  }
  outlined retain of SchedulingConfig(v5);
  swift_bridgeObjectRetain();
  specialized Sequence.min(by:)(v11, v5, v4, (uint64_t)v35);
  result = swift_release();
  v25 = v39;
  if ((v39 & 1) != 0)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
  }
  else
  {
    v28 = v37;
    v26 = v35[2];
    v27 = v36 & 1;
    v29 = v38 & 1;
  }
  *(_QWORD *)v6 = v26;
  *(_QWORD *)(v6 + 8) = v27;
  *(_QWORD *)(v6 + 16) = v28;
  *(_BYTE *)(v6 + 24) = v29;
  *(_BYTE *)(v6 + 25) = v25;
  return result;
}

uint64_t static SchedulerUtils.createEstimatedBoundingBox(handCenter:handRadius:images:)(float32x4_t *a1, uint64_t a2, float a3)
{
  int64_t v3;
  uint64_t v4;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float32x4_t v23;
  float32x4_t v24;
  _OWORD v25[12];
  float32x2_t v26[3];
  char v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v23 = a1[1];
    v24 = *a1;
    v29 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v29;
    v7 = (_OWORD *)(a2 + 32);
    do
    {
      v8 = v7[9];
      v25[8] = v7[8];
      v25[9] = v8;
      v9 = v7[11];
      v25[10] = v7[10];
      v25[11] = v9;
      v10 = v7[5];
      v25[4] = v7[4];
      v25[5] = v10;
      v11 = v7[7];
      v25[6] = v7[6];
      v25[7] = v11;
      v12 = v7[1];
      v25[0] = *v7;
      v25[1] = v12;
      v13 = v7[3];
      v25[2] = v7[2];
      v25[3] = v13;
      closure #1 in static SchedulerUtils.createEstimatedBoundingBox(handCenter:handRadius:images:)((uint64_t)v25, v26, v24, v23, a3);
      v14 = v26[0];
      v15 = v26[1];
      v16 = v26[2];
      v17 = v27;
      v18 = v28;
      v29 = v4;
      v20 = *(_QWORD *)(v4 + 16);
      v19 = *(_QWORD *)(v4 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v4 = v29;
      }
      *(_QWORD *)(v4 + 16) = v20 + 1;
      v21 = v4 + 40 * v20;
      *(float32x2_t *)(v21 + 32) = v14;
      *(float32x2_t *)(v21 + 40) = v15;
      *(float32x2_t *)(v21 + 48) = v16;
      *(_BYTE *)(v21 + 56) = v17;
      *(_QWORD *)(v21 + 60) = v18;
      v7 += 12;
      --v3;
    }
    while (v3);
  }
  return v4;
}

void closure #1 in static SchedulerUtils.createEstimatedBoundingBox(handCenter:handRadius:images:)(uint64_t a1@<X0>, float32x2_t *a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>, float a5@<S2>)
{
  uint64_t v8;
  float32x2_t v9;
  char v10;
  __int128 *v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  float32x2_t v18;
  int8x16_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float v23;
  float v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  float32x2_t v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[23];
  float32x2_t v47;
  float32x4_t v48[2];

  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(float32x2_t *)(a1 + 72);
  v10 = *(_BYTE *)(a1 + 80);
  v11 = (__int128 *)(a1 + 81);
  v12 = *(float32x2_t *)(a1 + 184);
  v32 = a4;
  if (one-time initialization token for _cropShape != -1)
  {
    v31 = a3;
    swift_once();
    a3 = v31;
    a4 = v32;
  }
  v13 = *(float32x4_t *)(a1 + 16);
  v34 = *(float32x4_t *)a1;
  v35 = v13;
  v14 = *(float32x4_t *)(a1 + 48);
  v36 = *(float32x4_t *)(a1 + 32);
  v37 = v14;
  v15 = v11[2];
  v44 = v11[3];
  v16 = v11[5];
  v45 = v11[4];
  *(_OWORD *)v46 = v16;
  v17 = v11[1];
  v41 = *v11;
  v42 = v17;
  v18 = (float32x2_t)static SchedulerUtils._cropShape;
  v48[0] = a3;
  v48[1] = a4;
  v38 = v8;
  v39 = v9;
  v40 = v10;
  *(_QWORD *)&v46[15] = *(_QWORD *)((char *)v11 + 95);
  v43 = v15;
  v47 = v12;
  if (one-time initialization token for _sparseGrid != -1)
    swift_once();
  specialized static HandsKitUtils.computeCropBoundingBox(_:center3D:fromImage:shouldFlip:handRadius:sparseGrid:)(v48, (uint64_t)&v34, 0, static SchedulerUtils._sparseGrid, v18, a5);
  v20 = (float32x2_t)vextq_s8(v19, v19, 8uLL).u64[0];
  v21 = vmul_f32(vadd_f32(*(float32x2_t *)v19.i8, v20), (float32x2_t)0x3F0000003F000000);
  v22 = vsub_f32(v20, *(float32x2_t *)v19.i8);
  ImageCalibrationData.headsetToCameraTransform4x3.getter((uint64_t *)&v34);
  v33 = vaddq_f32(v37, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v32.f32[0]), v35, *(float32x2_t *)v32.f32, 1), v36, v32, 2));
  v23 = v33.f32[2];
  swift_beginAccess();
  if (*(_QWORD *)(v8 + 16))
  {
    v24 = 0.0;
    if (v33.f32[2] <= 0.0)
      goto LABEL_10;
    v25 = vmulq_f32(v33, v33);
    v23 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
  }
  v24 = 0.0;
  if (v23 > a5)
    v24 = specialized static SchedulerUtils.getBoundingBoxVisibility(bboxCenter:bboxSize:imageSize:)(v21, *(double *)&v22, v12);
LABEL_10:
  v26 = (int32x4_t)vmulq_f32(v33, v33);
  v26.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2), vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1))).u32[0];
  v27 = vrsqrte_f32((float32x2_t)v26.u32[0]);
  v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v27, v27)));
  v29 = vmulq_f32(vmulq_n_f32(v33, vmul_f32(v28, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v28, v28))).f32[0]), (float32x4_t)xmmword_23D9A3E30);
  v30 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]);
  *a2 = vdiv_f32(v21, v12);
  a2[1] = vdiv_f32(v22, v12);
  a2[2] = v9;
  a2[3].i8[0] = v10 & 1;
  a2[3].f32[1] = v24;
  a2[4].f32[0] = v30;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  char v51;
  char v52;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_22;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v51 = *(_BYTE *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 76);
  v11 = (_QWORD *)*a3;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v17 = v12;
  if (v11[3] >= v16)
  {
    if ((a2 & 1) != 0)
    {
      if ((v12 & 1) == 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v17 & 1) == 0)
        goto LABEL_12;
    }
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a2 & 1);
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    if ((v17 & 1) == 0)
    {
LABEL_12:
      v22 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
      v23 = v22[6] + 16 * v13;
      *(_QWORD *)v23 = v5;
      *(_BYTE *)(v23 + 8) = v6;
      v24 = v22[7] + 40 * v13;
      *(_QWORD *)v24 = v7;
      *(_QWORD *)(v24 + 8) = v8;
      *(_QWORD *)(v24 + 16) = v9;
      *(_BYTE *)(v24 + 24) = v51;
      *(_QWORD *)(v24 + 28) = v10;
      v25 = v22[2];
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (!v26)
      {
        v22[2] = v27;
        if (v4 != 1)
        {
          v28 = (_QWORD *)(a1 + 132);
          v29 = 1;
          while (v29 < *(_QWORD *)(a1 + 16))
          {
            v30 = *(_QWORD *)((char *)v28 - 44);
            v31 = *((_BYTE *)v28 - 36);
            v32 = *(_QWORD *)((char *)v28 - 28);
            v33 = *(_QWORD *)((char *)v28 - 20);
            v34 = *(_QWORD *)((char *)v28 - 12);
            v52 = *((_BYTE *)v28 - 4);
            v35 = *v28;
            v36 = (_QWORD *)*a3;
            v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v31);
            v39 = v36[2];
            v40 = (v38 & 1) == 0;
            v26 = __OFADD__(v39, v40);
            v41 = v39 + v40;
            if (v26)
              goto LABEL_23;
            v42 = v38;
            if (v36[3] < v41)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, 1);
              v37 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v31);
              if ((v42 & 1) != (v43 & 1))
                goto LABEL_26;
            }
            if ((v42 & 1) != 0)
              goto LABEL_9;
            v44 = (_QWORD *)*a3;
            *(_QWORD *)(*a3 + 8 * (v37 >> 6) + 64) |= 1 << v37;
            v45 = v44[6] + 16 * v37;
            *(_QWORD *)v45 = v30;
            *(_BYTE *)(v45 + 8) = v31;
            v46 = v44[7] + 40 * v37;
            *(_QWORD *)v46 = v32;
            *(_QWORD *)(v46 + 8) = v33;
            *(_QWORD *)(v46 + 16) = v34;
            *(_BYTE *)(v46 + 24) = v52;
            *(_QWORD *)(v46 + 28) = v35;
            v47 = v44[2];
            v26 = __OFADD__(v47, 1);
            v48 = v47 + 1;
            if (v26)
              goto LABEL_24;
            ++v29;
            v44[2] = v48;
            v28 += 7;
            if (v4 == v29)
              goto LABEL_22;
          }
          goto LABEL_25;
        }
LABEL_22:
        swift_bridgeObjectRelease_n();
        return;
      }
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_9:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  _StringGuts.grow(_:)(30);
  v49._object = (void *)0x800000023D9C5160;
  v49._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v49);
  _print_unlocked<A, B>(_:_:)();
  v50._countAndFlagsBits = 39;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  void *v46;
  id v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[208];
  _OWORD v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD *v91;

  v91 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v50 = a1 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  if (v4)
    goto LABEL_3;
LABEL_2:
  _s5Hands12CameraSourceO_AA9ImageDataVtSgWOi0_(v66);
  outlined init with take of ImageData?((uint64_t)v66, (uint64_t)&v78, &demangling cache variable for type metadata for (CameraSource, ImageData)?);
  v6 = v4;
  while (1)
  {
    outlined init with take of ImageData?((uint64_t)&v78, (uint64_t)v65, &demangling cache variable for type metadata for (CameraSource, ImageData)?);
    outlined init with take of ImageData?((uint64_t)v65, (uint64_t)v66, &demangling cache variable for type metadata for (CameraSource, ImageData)?);
    if (_s5Hands12CameraSourceO_AA9ImageDataVtSgWOg((uint64_t)v66) == 1)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    v52 = v6;
    v20 = v78;
    v21 = BYTE8(v78);
    v61 = v87;
    v62 = v88;
    v63 = v89;
    v64 = v90;
    v57 = v83;
    v58 = v84;
    v59 = v85;
    v60 = v86;
    v53 = v79;
    v54 = v80;
    v55 = v81;
    v56 = v82;
    v22 = (_QWORD *)*v91;
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(v78, SBYTE8(v78));
    v25 = v22[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    v28 = v23;
    if (v22[3] < v27)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v23 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v28 & 1) != 0)
        goto LABEL_17;
    }
LABEL_13:
    v31 = (_QWORD *)*v91;
    v31[(v24 >> 6) + 8] |= 1 << v24;
    v32 = v31[6] + 16 * v24;
    *(_QWORD *)v32 = v20;
    *(_BYTE *)(v32 + 8) = v21;
    v33 = (_OWORD *)(v31[7] + 192 * v24);
    v34 = v53;
    v35 = v54;
    v36 = v56;
    v33[2] = v55;
    v33[3] = v36;
    *v33 = v34;
    v33[1] = v35;
    v37 = v57;
    v38 = v58;
    v39 = v60;
    v33[6] = v59;
    v33[7] = v39;
    v33[4] = v37;
    v33[5] = v38;
    v40 = v61;
    v41 = v62;
    v42 = v64;
    v33[10] = v63;
    v33[11] = v42;
    v33[8] = v40;
    v33[9] = v41;
    v43 = v31[2];
    v44 = __OFADD__(v43, 1);
    v45 = v43 + 1;
    if (v44)
      goto LABEL_21;
    v31[2] = v45;
    a2 = 1;
    v5 = v52;
    if (v52 == v4)
      goto LABEL_2;
LABEL_3:
    if (v5 >= *(_QWORD *)(a1 + 16))
      goto LABEL_22;
    v7 = (_OWORD *)(v50 + 208 * v5);
    v8 = v7[9];
    v9 = v7[11];
    v75 = v7[10];
    v76 = v9;
    v10 = v7[5];
    v11 = v7[7];
    v71 = v7[6];
    v72 = v11;
    v12 = v7[7];
    v13 = v7[9];
    v73 = v7[8];
    v74 = v13;
    v14 = v7[1];
    v15 = v7[3];
    v67 = v7[2];
    v68 = v15;
    v16 = v7[3];
    v17 = v7[5];
    v69 = v7[4];
    v70 = v17;
    v18 = v7[1];
    v66[0] = *v7;
    v66[1] = v18;
    v87 = v8;
    v88 = v75;
    v19 = v7[12];
    v89 = v7[11];
    v90 = v19;
    v83 = v10;
    v84 = v71;
    v85 = v12;
    v86 = v73;
    v79 = v14;
    v80 = v67;
    v81 = v16;
    v82 = v69;
    v6 = v5 + 1;
    v77 = v19;
    v78 = v66[0];
    _s5Hands13PoseImageCropVSgWOi_(&v78);
    outlined retain of (CameraSource, ImageData)(v66);
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, a2 & 1);
  v29 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
  if ((v28 & 1) != (v30 & 1))
    goto LABEL_23;
  v24 = v29;
  if ((v28 & 1) == 0)
    goto LABEL_13;
LABEL_17:
  v46 = (void *)swift_allocError();
  swift_willThrow();
  v47 = v46;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined release of ImageData((uint64_t)&v53);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v48._object = (void *)0x800000023D9C5160;
  v48._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v48);
  _print_unlocked<A, B>(_:_:)();
  v49._countAndFlagsBits = 39;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  id v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;

  LOBYTE(v4) = a2;
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_23;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  if (!v9)
    goto LABEL_23;
  v10 = (_QWORD *)*a3;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = v12;
  if (v10[3] < v16)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, v4 & 1);
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_8;
LABEL_6:
    v11 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if ((v4 & 1) != 0)
  {
LABEL_8:
    if ((v17 & 1) != 0)
      goto LABEL_9;
    goto LABEL_12;
  }
  v21 = v11;
  specialized _NativeDictionary.copy()();
  v11 = v21;
  if ((v17 & 1) != 0)
  {
LABEL_9:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  v22 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  v23 = v22[6] + 16 * v11;
  *(_QWORD *)v23 = v7;
  *(_BYTE *)(v23 + 8) = v8;
  *(_QWORD *)(v22[7] + 8 * v11) = v9;
  v24 = v22[2];
  v15 = __OFADD__(v24, 1);
  v25 = v24 + 1;
  if (v15)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    _StringGuts.grow(_:)(30);
    v38._object = (void *)0x800000023D9C5160;
    v38._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v38);
    _print_unlocked<A, B>(_:_:)();
    v39._countAndFlagsBits = 39;
    v39._object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v22[2] = v25;
  if (v6 != 1)
  {
    v4 = (_QWORD *)(a1 + 72);
    v26 = 1;
    while (v26 < *(_QWORD *)(a1 + 16))
    {
      v7 = *(v4 - 2);
      v8 = *((_BYTE *)v4 - 8);
      v9 = *v4;
      swift_bridgeObjectRetain();
      if (!v9)
        goto LABEL_23;
      v27 = (_QWORD *)*a3;
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
      v30 = v27[2];
      v31 = (v29 & 1) == 0;
      v15 = __OFADD__(v30, v31);
      v32 = v30 + v31;
      if (v15)
        goto LABEL_25;
      v17 = v29;
      if (v27[3] < v32)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, 1);
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
        if ((v17 & 1) != (v33 & 1))
          goto LABEL_6;
      }
      if ((v17 & 1) != 0)
        goto LABEL_9;
      v34 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      v35 = v34[6] + 16 * v28;
      *(_QWORD *)v35 = v7;
      *(_BYTE *)(v35 + 8) = v8;
      *(_QWORD *)(v34[7] + 8 * v28) = v9;
      v36 = v34[2];
      v15 = __OFADD__(v36, 1);
      v37 = v36 + 1;
      if (v15)
        goto LABEL_26;
      ++v26;
      v34[2] = v37;
      v4 += 3;
      if (v6 == v26)
        goto LABEL_23;
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  void *v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  unsigned int v65;

  v7 = type metadata accessor for Matrix2dPB(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7, v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int32, Matrix2dPB));
  MEMORY[0x24BDAC7A8](v12, v13);
  v17 = (unsigned int *)((char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v58 = a1;
  v59 = v8;
  v19 = a2;
  v57 = v3;
  v20 = (uint64_t)v17 + *(int *)(v14 + 48);
  v56 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v21 = a1 + v56;
  v61 = *(_QWORD *)(v15 + 72);
  swift_bridgeObjectRetain();
  outlined init with copy of (Int32, Matrix2dPB)(v21, (uint64_t)v17);
  v65 = *v17;
  v22 = v65;
  v60 = v20;
  outlined init with take of Matrix2dPB(v20, (uint64_t)v11, type metadata accessor for Matrix2dPB);
  v23 = (_QWORD *)*a3;
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
  v26 = v23[2];
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
    goto LABEL_23;
  v29 = v24;
  if (v23[3] >= v28)
  {
    if ((v19 & 1) != 0)
    {
      if ((v24 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v29 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v34 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v25 >> 6) + 64) |= 1 << v25;
    *(_DWORD *)(v34[6] + 4 * v25) = v22;
    v35 = v34[7];
    v59 = *(_QWORD *)(v59 + 72);
    outlined init with take of Matrix2dPB((uint64_t)v11, v35 + v59 * v25, type metadata accessor for Matrix2dPB);
    v36 = v34[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v34[2] = v38;
    v39 = v18 - 1;
    if (v18 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v40 = v58 + v61 + v56;
    while (1)
    {
      outlined init with copy of (Int32, Matrix2dPB)(v40, (uint64_t)v17);
      v65 = *v17;
      v41 = v65;
      outlined init with take of Matrix2dPB(v60, (uint64_t)v11, type metadata accessor for Matrix2dPB);
      v42 = (_QWORD *)*a3;
      v43 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
      v45 = v42[2];
      v46 = (v44 & 1) == 0;
      v37 = __OFADD__(v45, v46);
      v47 = v45 + v46;
      if (v37)
        break;
      v48 = v44;
      if (v42[3] < v47)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, 1);
        v43 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
        if ((v48 & 1) != (v49 & 1))
          goto LABEL_25;
      }
      if ((v48 & 1) != 0)
        goto LABEL_10;
      v50 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v43 >> 6) + 64) |= 1 << v43;
      *(_DWORD *)(v50[6] + 4 * v43) = v41;
      outlined init with take of Matrix2dPB((uint64_t)v11, v50[7] + v59 * v43, type metadata accessor for Matrix2dPB);
      v51 = v50[2];
      v37 = __OFADD__(v51, 1);
      v52 = v51 + 1;
      if (v37)
        goto LABEL_24;
      v50[2] = v52;
      v40 += v61;
      if (!--v39)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, v19 & 1);
  v30 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
  if ((v29 & 1) == (v31 & 1))
  {
    v25 = v30;
    if ((v29 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v32 = (void *)swift_allocError();
    swift_willThrow();
    v64 = v32;
    v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      outlined destroy of Matrix2dPB((uint64_t)v11);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  v62 = 0;
  v63 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v53._object = (void *)0x800000023D9C5160;
  v53._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v53);
  _print_unlocked<A, B>(_:_:)();
  v54._countAndFlagsBits = 39;
  v54._object = (void *)0xE100000000000000;
  String.append(_:)(v54);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;

  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_22;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 44);
  v10 = (_QWORD *)*a3;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v16 = v11;
  if (v10[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) == 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v16 & 1) == 0)
        goto LABEL_12;
    }
LABEL_9:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_27:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_28:
    _StringGuts.grow(_:)(30);
    v43._object = (void *)0x800000023D9C5160;
    v43._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v43);
    _print_unlocked<A, B>(_:_:)();
    v44._countAndFlagsBits = 39;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v12 = v17;
  if ((v16 & 1) != 0)
    goto LABEL_9;
LABEL_12:
  v21 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
  v22 = v21[6] + 16 * v12;
  *(_QWORD *)v22 = v7;
  *(_BYTE *)(v22 + 8) = v8;
  *(_DWORD *)(v21[7] + 4 * v12) = v9;
  v23 = v21[2];
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v21[2] = v25;
  if (v6 != 1)
  {
    v26 = (_DWORD *)(a1 + 60);
    v27 = 1;
    while (v27 < *(_QWORD *)(a1 + 16))
    {
      v28 = *(_QWORD *)(v26 - 3);
      v29 = *((_BYTE *)v26 - 4);
      v30 = *v26;
      v31 = (_QWORD *)*a3;
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v29);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        goto LABEL_24;
      v37 = v33;
      if (v31[3] < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        v32 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v29);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_27;
      }
      if ((v37 & 1) != 0)
        goto LABEL_9;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = v39[6] + 16 * v32;
      *(_QWORD *)v40 = v28;
      *(_BYTE *)(v40 + 8) = v29;
      *(_DWORD *)(v39[7] + 4 * v32) = v30;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_25;
      ++v27;
      v39[2] = v42;
      v26 += 4;
      if (v6 == v27)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  swift_bridgeObjectRelease_n();
}

{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  void *v46;
  id v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  _BYTE v63[192];
  _OWORD v64[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[2];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[3];
  _QWORD *v85;

  v85 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v50 = a1 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (uint64_t *)&demangling cache variable for type metadata for (CameraSource, PoseImageCrop)?;
  if (v4)
    goto LABEL_3;
LABEL_2:
  _s5Hands12CameraSourceO_AA13PoseImageCropVtSgWOi0_((uint64_t)v64);
  outlined init with take of ImageData?((uint64_t)v64, (uint64_t)&v74, v6);
  v7 = v4;
  while (1)
  {
    outlined init with take of ImageData?((uint64_t)&v74, (uint64_t)v63, v6);
    outlined init with take of ImageData?((uint64_t)v63, (uint64_t)v64, v6);
    if (_s5Hands12CameraSourceO_AA13PoseImageCropVtSgWOg((uint64_t)v64) == 1)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    v52 = v7;
    v20 = v6;
    v21 = v74;
    v22 = BYTE8(v74);
    v61 = v83;
    v62[0] = v84[0];
    *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)((char *)v84 + 9);
    v57 = v79;
    v58 = v80;
    v59 = v81;
    v60 = v82;
    v53 = v75;
    v54 = v76;
    v55 = v77;
    v56 = v78;
    v23 = (_QWORD *)*v85;
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(v74, SBYTE8(v74));
    v26 = v23[2];
    v27 = (v24 & 1) == 0;
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    v29 = v24;
    if (v23[3] < v28)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v24 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v29 & 1) != 0)
        goto LABEL_17;
    }
LABEL_13:
    v32 = (_QWORD *)*v85;
    v32[(v25 >> 6) + 8] |= 1 << v25;
    v33 = v32[6] + 16 * v25;
    *(_QWORD *)v33 = v21;
    *(_BYTE *)(v33 + 8) = v22;
    v34 = (_OWORD *)(v32[7] + 176 * v25);
    v35 = v53;
    v36 = v55;
    v34[1] = v54;
    v34[2] = v36;
    *v34 = v35;
    v37 = v56;
    v38 = v57;
    v39 = v59;
    v34[5] = v58;
    v34[6] = v39;
    v34[3] = v37;
    v34[4] = v38;
    v40 = v60;
    v41 = v61;
    v42 = v62[0];
    *(_OWORD *)((char *)v34 + 153) = *(_OWORD *)((char *)v62 + 9);
    v34[8] = v41;
    v34[9] = v42;
    v34[7] = v40;
    v43 = v32[2];
    v44 = __OFADD__(v43, 1);
    v45 = v43 + 1;
    if (v44)
      goto LABEL_21;
    v32[2] = v45;
    a2 = 1;
    v6 = v20;
    v5 = v52;
    if (v52 == v4)
      goto LABEL_2;
LABEL_3:
    if (v5 >= *(_QWORD *)(a1 + 16))
      goto LABEL_22;
    v8 = (_OWORD *)(v50 + 192 * v5);
    v9 = v8[9];
    v10 = v8[7];
    v71 = v8[8];
    v72 = v9;
    v11 = v8[9];
    v73[0] = v8[10];
    *(_OWORD *)((char *)v73 + 9) = *(_OWORD *)((char *)v8 + 169);
    v12 = v8[5];
    v13 = v8[3];
    v67 = v8[4];
    v68 = v12;
    v14 = v8[5];
    v15 = v8[7];
    v69 = v8[6];
    v70 = v15;
    v16 = v8[1];
    v64[0] = *v8;
    v64[1] = v16;
    v17 = v8[3];
    v19 = *v8;
    v18 = v8[1];
    v65 = v8[2];
    v66 = v17;
    v82 = v71;
    v83 = v11;
    v84[0] = v8[10];
    *(_OWORD *)((char *)v84 + 9) = *(_OWORD *)((char *)v8 + 169);
    v78 = v67;
    v79 = v14;
    v80 = v69;
    v81 = v10;
    v74 = v19;
    v75 = v18;
    v7 = v5 + 1;
    v76 = v65;
    v77 = v13;
    _s5Hands13PoseImageCropVSgWOi_(&v74);
    outlined retain of (CameraSource, PoseImageCrop)((uint64_t)v64);
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, a2 & 1);
  v30 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22);
  if ((v29 & 1) != (v31 & 1))
    goto LABEL_23;
  v25 = v30;
  if ((v29 & 1) == 0)
    goto LABEL_13;
LABEL_17:
  v46 = (void *)swift_allocError();
  swift_willThrow();
  v47 = v46;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined release of PoseImageCrop((uint64_t)&v53);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v48._object = (void *)0x800000023D9C5160;
  v48._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v48);
  _print_unlocked<A, B>(_:_:)();
  v49._countAndFlagsBits = 39;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v4;
  uint64_t v7;
  int v8;
  char v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  char v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 44);
  v9 = *(_BYTE *)(a1 + 40);
  swift_bridgeObjectRetain();
  v10 = (_QWORD *)*a3;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v10[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v22 = v21[6] + 16 * v12;
    *(_QWORD *)v22 = v7;
    *(_BYTE *)(v22 + 8) = v9;
    *(_DWORD *)(v21[7] + 4 * v12) = v8;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = (_DWORD *)(a1 + 60);
    while (1)
    {
      v28 = *(_QWORD *)(v27 - 3);
      v29 = *v27;
      v30 = *((_BYTE *)v27 - 4);
      v31 = (_QWORD *)*a3;
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v30);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        v32 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v30);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = v39[6] + 16 * v32;
      *(_QWORD *)v40 = v28;
      *(_BYTE *)(v40 + 8) = v30;
      *(_DWORD *)(v39[7] + 4 * v32) = v29;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_24;
      v39[2] = v42;
      v27 += 4;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x800000023D9C5160;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)();
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  void *v36;
  id v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  _BYTE v49[128];
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD v55[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[3];
  _QWORD *v63;

  v63 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v40 = a1 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (uint64_t *)&demangling cache variable for type metadata for (CameraSource, DetectionResult)?;
  if (v4)
    goto LABEL_3;
LABEL_2:
  _s5Hands12CameraSourceO_AA15DetectionResultVtSgWOi0_(v50);
  outlined init with take of ImageData?((uint64_t)v50, (uint64_t)&v56, v6);
  v7 = v4;
  while (1)
  {
    outlined init with take of ImageData?((uint64_t)&v56, (uint64_t)v49, v6);
    outlined init with take of ImageData?((uint64_t)v49, (uint64_t)v50, v6);
    if (_s5Hands12CameraSourceO_AA15DetectionResultVtSgWOg((uint64_t)v50) == 1)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    v42 = v7;
    v13 = v6;
    v15 = BYTE8(v56);
    v14 = v56;
    v47 = v61;
    v48[0] = v62[0];
    *(_OWORD *)((char *)v48 + 9) = *(_OWORD *)((char *)v62 + 9);
    v43 = v57;
    v44 = v58;
    v45 = v59;
    v46 = v60;
    v16 = (_QWORD *)*v63;
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v56, SBYTE8(v56));
    v19 = v16[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    v22 = v17;
    if (v16[3] < v21)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v17 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v22 & 1) != 0)
        goto LABEL_17;
    }
LABEL_13:
    v25 = (_QWORD *)*v63;
    v25[(v18 >> 6) + 8] |= 1 << v18;
    v26 = v25[6] + 16 * v18;
    *(_QWORD *)v26 = v14;
    *(_BYTE *)(v26 + 8) = v15;
    v27 = (_OWORD *)(v25[7] + 112 * v18);
    v28 = v43;
    v29 = v45;
    v27[1] = v44;
    v27[2] = v29;
    *v27 = v28;
    v30 = v46;
    v31 = v47;
    v32 = v48[0];
    *(_OWORD *)((char *)v27 + 89) = *(_OWORD *)((char *)v48 + 9);
    v27[4] = v31;
    v27[5] = v32;
    v27[3] = v30;
    v33 = v25[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_21;
    v25[2] = v35;
    a2 = 1;
    v6 = v13;
    v5 = v42;
    if (v42 == v4)
      goto LABEL_2;
LABEL_3:
    if (v5 >= *(_QWORD *)(a1 + 16))
      goto LABEL_22;
    v8 = (_OWORD *)(v40 + (v5 << 7));
    v9 = v8[5];
    v53 = v8[4];
    v54 = v9;
    v55[0] = v8[6];
    v10 = v55[0];
    *(_OWORD *)((char *)v55 + 9) = *(_OWORD *)((char *)v8 + 105);
    v11 = v8[1];
    v50[0] = *v8;
    v50[1] = v11;
    v12 = v8[3];
    v51 = v8[2];
    v52 = v12;
    v56 = v50[0];
    v57 = v11;
    v58 = v51;
    v59 = v12;
    v60 = v53;
    v61 = v9;
    v62[0] = v10;
    v7 = v5 + 1;
    *(_OWORD *)((char *)v62 + 9) = *(_OWORD *)((char *)v55 + 9);
    _s5Hands13PoseImageCropVSgWOi_(&v56);
    outlined retain of (CameraSource, DetectionResult)((uint64_t)v50);
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a2 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
  if ((v22 & 1) != (v24 & 1))
    goto LABEL_23;
  v18 = v23;
  if ((v22 & 1) == 0)
    goto LABEL_13;
LABEL_17:
  v36 = (void *)swift_allocError();
  swift_willThrow();
  v37 = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined release of DetectionResult((uint64_t)&v43);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v38._object = (void *)0x800000023D9C5160;
  v38._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v38);
  _print_unlocked<A, B>(_:_:)();
  v39._countAndFlagsBits = 39;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v4;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = *(_DWORD *)(a1 + 36);
  v8 = *(_DWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = 4 * v11;
    *(_DWORD *)(v20[6] + v21) = v8;
    *(_DWORD *)(v20[7] + v21) = v7;
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = (int *)(a1 + 44);
    while (1)
    {
      v27 = *v26;
      v28 = *(v26 - 1);
      v29 = (_QWORD *)*a3;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
      v32 = v29[2];
      v33 = (v31 & 1) == 0;
      v23 = __OFADD__(v32, v33);
      v34 = v32 + v33;
      if (v23)
        break;
      v35 = v31;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
        if ((v35 & 1) != (v36 & 1))
          goto LABEL_25;
      }
      if ((v35 & 1) != 0)
        goto LABEL_10;
      v37 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      v38 = 4 * v30;
      *(_DWORD *)(v37[6] + v38) = v28;
      *(_DWORD *)(v37[7] + v38) = v27;
      v39 = v37[2];
      v23 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v23)
        goto LABEL_24;
      v37[2] = v40;
      v26 += 2;
      if (!--v25)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v41._object = (void *)0x800000023D9C5160;
  v41._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._countAndFlagsBits = 39;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v3;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  void *v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  uint64_t v65;

  updated = type metadata accessor for TrackingUpdateDataPB(0);
  v8 = *(_QWORD *)(updated - 8);
  MEMORY[0x24BDAC7A8](updated, v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, TrackingUpdateDataPB));
  MEMORY[0x24BDAC7A8](v12, v13);
  v17 = (uint64_t *)((char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v58 = a1;
  v59 = v8;
  v19 = a2;
  v57 = v3;
  v20 = (uint64_t)v17 + *(int *)(v14 + 48);
  v56 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v21 = a1 + v56;
  v61 = *(_QWORD *)(v15 + 72);
  swift_bridgeObjectRetain();
  outlined init with copy of (UInt64, TrackingUpdateDataPB)(v21, (uint64_t)v17);
  v65 = *v17;
  v22 = v65;
  v60 = v20;
  outlined init with take of Matrix2dPB(v20, (uint64_t)v11, type metadata accessor for TrackingUpdateDataPB);
  v23 = (_QWORD *)*a3;
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
  v26 = v23[2];
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
    goto LABEL_23;
  v29 = v24;
  if (v23[3] >= v28)
  {
    if ((v19 & 1) != 0)
    {
      if ((v24 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v29 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v34 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v25 >> 6) + 64) |= 1 << v25;
    *(_QWORD *)(v34[6] + 8 * v25) = v22;
    v35 = v34[7];
    v59 = *(_QWORD *)(v59 + 72);
    outlined init with take of Matrix2dPB((uint64_t)v11, v35 + v59 * v25, type metadata accessor for TrackingUpdateDataPB);
    v36 = v34[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v34[2] = v38;
    v39 = v18 - 1;
    if (v18 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v40 = v58 + v61 + v56;
    while (1)
    {
      outlined init with copy of (UInt64, TrackingUpdateDataPB)(v40, (uint64_t)v17);
      v65 = *v17;
      v41 = v65;
      outlined init with take of Matrix2dPB(v60, (uint64_t)v11, type metadata accessor for TrackingUpdateDataPB);
      v42 = (_QWORD *)*a3;
      v43 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
      v45 = v42[2];
      v46 = (v44 & 1) == 0;
      v37 = __OFADD__(v45, v46);
      v47 = v45 + v46;
      if (v37)
        break;
      v48 = v44;
      if (v42[3] < v47)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, 1);
        v43 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
        if ((v48 & 1) != (v49 & 1))
          goto LABEL_25;
      }
      if ((v48 & 1) != 0)
        goto LABEL_10;
      v50 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v43 >> 6) + 64) |= 1 << v43;
      *(_QWORD *)(v50[6] + 8 * v43) = v41;
      outlined init with take of Matrix2dPB((uint64_t)v11, v50[7] + v59 * v43, type metadata accessor for TrackingUpdateDataPB);
      v51 = v50[2];
      v37 = __OFADD__(v51, 1);
      v52 = v51 + 1;
      if (v37)
        goto LABEL_24;
      v50[2] = v52;
      v40 += v61;
      if (!--v39)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, v19 & 1);
  v30 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
  if ((v29 & 1) == (v31 & 1))
  {
    v25 = v30;
    if ((v29 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v32 = (void *)swift_allocError();
    swift_willThrow();
    v64 = v32;
    v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      outlined destroy of TrackingUpdateDataPB((uint64_t)v11);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  v62 = 0;
  v63 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v53._object = (void *)0x800000023D9C5160;
  v53._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v53);
  _print_unlocked<A, B>(_:_:)();
  v54._countAndFlagsBits = 39;
  v54._object = (void *)0xE100000000000000;
  String.append(_:)(v54);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  void *v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  int v40;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = *(_QWORD *)(a1 + 32);
  v40 = *(_DWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  v8 = (_QWORD *)*a3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
    goto LABEL_23;
  v14 = v9;
  if (v8[3] >= v13)
  {
    if ((a2 & 1) != 0)
    {
      if ((v9 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v14 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v19 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    *(_QWORD *)(v19[6] + 8 * v10) = v7;
    *(_DWORD *)(v19[7] + 4 * v10) = v40;
    v20 = v19[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v19[2] = v22;
    v23 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v24 = (_DWORD *)(a1 + 56);
    while (1)
    {
      v25 = *((_QWORD *)v24 - 1);
      v26 = *v24;
      v27 = (_QWORD *)*a3;
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
      v30 = v27[2];
      v31 = (v29 & 1) == 0;
      v21 = __OFADD__(v30, v31);
      v32 = v30 + v31;
      if (v21)
        break;
      v33 = v29;
      if (v27[3] < v32)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, 1);
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
        if ((v33 & 1) != (v34 & 1))
          goto LABEL_25;
      }
      if ((v33 & 1) != 0)
        goto LABEL_10;
      v35 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      *(_QWORD *)(v35[6] + 8 * v28) = v25;
      *(_DWORD *)(v35[7] + 4 * v28) = v26;
      v36 = v35[2];
      v21 = __OFADD__(v36, 1);
      v37 = v36 + 1;
      if (v21)
        goto LABEL_24;
      v24 += 4;
      v35[2] = v37;
      if (!--v23)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a2 & 1);
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  if ((v14 & 1) == (v16 & 1))
  {
    v10 = v15;
    if ((v14 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v17 = (void *)swift_allocError();
    swift_willThrow();
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v38._object = (void *)0x800000023D9C5160;
  v38._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v38);
  _print_unlocked<A, B>(_:_:)();
  v39._countAndFlagsBits = 39;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v27;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v4 = (char *)(swift_bridgeObjectRetain() + 56);
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v7 = *((_QWORD *)v4 - 1);
      v8 = *v4;
      v9 = specialized __RawDictionaryStorage.find<A>(_:)(*((_QWORD *)v4 - 3), *(v4 - 16));
      if ((v10 & 1) != 0)
      {
        if (*(_QWORD *)(a2 + 16))
        {
          v11 = *(_QWORD *)(a2 + 56) + 40 * v9;
          v12 = *(_QWORD *)v11;
          v13 = *(_QWORD *)(v11 + 8);
          v14 = *(_QWORD *)(v11 + 16);
          v15 = *(_BYTE *)(v11 + 24);
          v16 = *(_QWORD *)(v11 + 28);
          v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
          if ((v18 & 1) != 0)
          {
            v19 = *(_QWORD *)(a2 + 56) + 40 * v17;
            v20 = *(_QWORD *)v19;
            v21 = *(_QWORD *)(v19 + 8);
            v22 = *(_QWORD *)(v19 + 16);
            v27 = *(_BYTE *)(v19 + 24);
            v23 = *(_QWORD *)(v19 + 28);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
            v25 = v5[2];
            v24 = v5[3];
            if (v25 >= v24 >> 1)
              v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v5);
            v5[2] = v25 + 1;
            v6 = &v5[10 * v25];
            v6[4] = v12;
            v6[5] = v13;
            v6[6] = v14;
            *((_BYTE *)v6 + 56) = v15;
            *(_QWORD *)((char *)v6 + 60) = v16;
            v6[9] = v20;
            v6[10] = v21;
            v6[11] = v22;
            *((_BYTE *)v6 + 96) = v27;
            *(_QWORD *)((char *)v6 + 100) = v23;
          }
        }
      }
    }
    v4 += 32;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12[2];
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v5 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v7 = *v5;
    v12[0] = *(v5 - 1);
    v12[1] = v7;
    swift_bridgeObjectRetain();
    closure #1 in static IntentionBreakScoreCalculator.featureSelection(_:_:)(v12, a2, &v13);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    swift_bridgeObjectRelease();
    v8 = v13;
    if (v13)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      v10 = v6[2];
      v9 = v6[3];
      if (v10 >= v9 >> 1)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v6);
      v6[2] = v10 + 1;
      v6[v10 + 4] = v8;
    }
    v5 += 2;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12[2];
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v5 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v7 = *v5;
    v12[0] = *(v5 - 1);
    v12[1] = v7;
    swift_bridgeObjectRetain();
    closure #1 in static ScrollBreak.featureSelection(_:_:)(v12, a2, &v13);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    swift_bridgeObjectRelease();
    v8 = v13;
    if (v13)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      v10 = v6[2];
      v9 = v6[3];
      if (v10 >= v9 >> 1)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v6);
      v6[2] = v10 + 1;
      v6[v10 + 4] = v8;
    }
    v5 += 2;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

float specialized static SchedulerUtils.getBoundingBoxVisibility(bboxCenter:bboxSize:imageSize:)(float32x2_t a1, double a2, float32x2_t a3)
{
  float v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;

  v3 = 0.0;
  if (*(float *)&a2 != 0.0 && *((float *)&a2 + 1) != 0.0)
  {
    v4 = vmul_f32(*(float32x2_t *)&a2, (float32x2_t)0x3F0000003F000000);
    v5 = vsub_f32(a1, v4);
    v6 = vadd_f32(v4, a1);
    v7 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v6, a3), (int8x8_t)a3, (int8x8_t)v6), (float32x2_t)vbic_s8((int8x8_t)v5, (int8x8_t)vclez_f32(v5)));
    v8 = (float32x2_t)vand_s8((int8x8_t)v7, (int8x8_t)vcgez_f32(v7));
    return vmul_lane_f32(v8, v8, 1).f32[0] / (float)(*(float *)&a2 * *((float *)&a2 + 1));
  }
  return v3;
}

_QWORD *specialized static SchedulerUtils.groupBoundingBoxByStereoPair(bbox:pipeline:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v21 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = v21;
    v4 = *(_QWORD *)(v21 + 16);
    v5 = 56 * v4 + 76;
    v6 = (_QWORD *)(a1 + 60);
    do
    {
      v7 = *(_QWORD *)((char *)v6 - 28);
      v8 = *(_QWORD *)((char *)v6 - 20);
      v9 = *(_QWORD *)((char *)v6 - 12);
      v10 = *((_BYTE *)v6 - 4);
      v11 = *v6;
      v21 = v3;
      v12 = *(_QWORD *)(v3 + 24);
      if (v4++ >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v4, 1);
        v3 = v21;
      }
      *(_QWORD *)(v3 + 16) = v4;
      v14 = (_QWORD *)(v3 + v5);
      *(_QWORD *)((char *)v14 - 44) = v9;
      *((_BYTE *)v14 - 36) = v10;
      *(_QWORD *)((char *)v14 - 28) = v7;
      *(_QWORD *)((char *)v14 - 20) = v8;
      *(_QWORD *)((char *)v14 - 12) = v9;
      *((_BYTE *)v14 - 4) = v10;
      v5 += 56;
      v6 += 5;
      *v14 = v11;
      --v1;
    }
    while (v1);
    goto LABEL_8;
  }
  if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
  {
LABEL_8:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CameraSource, EstimatedBoundingBox>);
    v15 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_9;
  }
  v15 = MEMORY[0x24BEE4B00];
LABEL_9:
  v21 = v15;
  v16 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v16, 1, &v21);
  swift_bridgeObjectRelease();
  v17 = v21;
  if (one-time initialization token for _stereoCameraPairsListN301 != -1)
    swift_once();
  swift_retain();
  v18 = swift_bridgeObjectRetain();
  v19 = specialized Sequence.compactMap<A>(_:)(v18, v17);
  swift_bridgeObjectRelease();
  swift_release_n();
  return v19;
}

uint64_t createMiddleDoubleTapSuppressor(suppressorId:config:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Swift::String v3;
  uint64_t result;
  _QWORD v5[4];

  if (*(_BYTE *)(a1 + 8) == 1)
    __asm { BR              X9 }
  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  v3._object = (void *)0x800000023D9C5200;
  v3._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v5[3] = MEMORY[0x24BEE0D00];
  specialized static HLog.E(file:function:line:_:_:)(0xD00000000000007BLL, 0x800000023D9C5180, 63, (uint64_t)v5, MEMORY[0x24BEE4AF8]);
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

void sub_23D6F0EA0()
{
  uint64_t v0;
  void *v1;
  float v2;
  float v3;
  uint64_t v4;

  objc_msgSend(v1, sel_MiddleDoubleTapJointOcclusionTheshold);
  v3 = v2;
  v4 = type metadata accessor for JointOcclusionSuppressor();
  swift_allocObject();
  JointOcclusionSuppressor.init(occlusionThreshold:)(v3);
  *(_QWORD *)(v0 + 24) = v4;
  JUMPOUT(0x23D6F0E7CLL);
}

void sub_23D6F0EE8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  float v3;
  double v4;
  uint64_t v5;

  v2 = (int)objc_msgSend(v1, sel_MiddleDoubleTapNoiseWindowSize);
  objc_msgSend(v1, sel_MiddleDoubleTapMinSignalToNoiseRatio);
  v4 = v3;
  v5 = type metadata accessor for NoiseSuppressor();
  swift_allocObject();
  NoiseSuppressor.init(withWinSize:withMinSignalToNoiseRatio:)(v2, v4);
  *(_QWORD *)(v0 + 24) = v5;
  JUMPOUT(0x23D6F0E7CLL);
}

uint64_t destroy for TrackingConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrackingConfig(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_WORD *)(a1 + 225) = *(_WORD *)(a2 + 225);
  *(_QWORD *)(a1 + 228) = *(_QWORD *)(a2 + 228);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_BYTE *)(a1 + 237) = *(_BYTE *)(a2 + 237);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  v5 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v5;
  v6 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v6;
  v7 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v7;
  v8 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v8;
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  v9 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v9;
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a2 + 348);
  v10 = *(_OWORD *)(a2 + 352);
  v11 = *(_OWORD *)(a2 + 368);
  v12 = *(_OWORD *)(a2 + 384);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_OWORD *)(a1 + 368) = v11;
  *(_OWORD *)(a1 + 384) = v12;
  *(_OWORD *)(a1 + 352) = v10;
  v13 = *(_OWORD *)(a2 + 404);
  v14 = *(_OWORD *)(a2 + 436);
  *(_OWORD *)(a1 + 420) = *(_OWORD *)(a2 + 420);
  *(_OWORD *)(a1 + 436) = v14;
  *(_OWORD *)(a1 + 404) = v13;
  *(_QWORD *)(a1 + 452) = *(_QWORD *)(a2 + 452);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrackingConfig(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;

  v4 = (_BYTE *)(a2 + 320);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_BYTE *)(a1 + 173) = *(_BYTE *)(a2 + 173);
  *(_BYTE *)(a1 + 174) = *(_BYTE *)(a2 + 174);
  *(_BYTE *)(a1 + 175) = *(_BYTE *)(a2 + 175);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_BYTE *)(a1 + 237) = *(_BYTE *)(a2 + 237);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 344) = v4[24];
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a2 + 348);
  *(_BYTE *)(a1 + 352) = v4[32];
  *(_BYTE *)(a1 + 353) = v4[33];
  *(_BYTE *)(a1 + 354) = v4[34];
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = v4[64];
  *(_DWORD *)(a1 + 388) = *(_DWORD *)(a2 + 388);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_BYTE *)(a1 + 400) = v4[80];
  *(_BYTE *)(a1 + 404) = v4[84];
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 412) = *(_DWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 420) = v4[100];
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 424);
  *(_DWORD *)(a1 + 428) = *(_DWORD *)(a2 + 428);
  *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 436) = *(_DWORD *)(a2 + 436);
  *(_BYTE *)(a1 + 440) = v4[120];
  *(_DWORD *)(a1 + 444) = *(_DWORD *)(a2 + 444);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_BYTE *)(a1 + 452) = v4[132];
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  return a1;
}

void *__swift_memcpy460_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1CCuLL);
}

uint64_t assignWithTake for TrackingConfig(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (_BYTE *)(a2 + 320);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_BYTE *)(a1 + 173) = *(_BYTE *)(a2 + 173);
  *(_BYTE *)(a1 + 174) = *(_BYTE *)(a2 + 174);
  *(_BYTE *)(a1 + 175) = *(_BYTE *)(a2 + 175);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  v7 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v7;
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
  *(_QWORD *)(a1 + 228) = *(_QWORD *)(a2 + 228);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_BYTE *)(a1 + 237) = *(_BYTE *)(a2 + 237);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 344) = v4[24];
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a2 + 348);
  *(_BYTE *)(a1 + 352) = v4[32];
  *(_BYTE *)(a1 + 353) = v4[33];
  *(_BYTE *)(a1 + 354) = v4[34];
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 384) = v4[64];
  *(_DWORD *)(a1 + 388) = *(_DWORD *)(a2 + 388);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = v4[80];
  *(_BYTE *)(a1 + 404) = v4[84];
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  *(_BYTE *)(a1 + 420) = v4[100];
  v8 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v8;
  *(_BYTE *)(a1 + 440) = v4[120];
  *(_DWORD *)(a1 + 444) = *(_DWORD *)(a2 + 444);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_BYTE *)(a1 + 452) = v4[132];
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 460))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackingConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 456) = 0;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 460) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 460) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackingConfig()
{
  return &type metadata for TrackingConfig;
}

uint64_t getEnumTagSinglePayload for TrackingSensitivityConfig(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[8])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackingSensitivityConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackingSensitivityConfig()
{
  return &type metadata for TrackingSensitivityConfig;
}

uint64_t getEnumTagSinglePayload for UvOFilterConfig(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[48])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UvOFilterConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for UvOFilterConfig()
{
  return &type metadata for UvOFilterConfig;
}

uint64_t getEnumTagSinglePayload for TwoHandsOcclusionFilterConfig(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[49])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TwoHandsOcclusionFilterConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TwoHandsOcclusionFilterConfig()
{
  return &type metadata for TwoHandsOcclusionFilterConfig;
}

uint64_t destroy for TrackingUpdateConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrackingUpdateConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 84);
  *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 92);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v3 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v3;
  v4 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v5;
  v6 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v6;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v7 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v7;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrackingUpdateConfig(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 31);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for TrackingUpdateConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  *(_BYTE *)(a1 + 30) = *(_BYTE *)(a2 + 30);
  *(_BYTE *)(a1 + 31) = *(_BYTE *)(a2 + 31);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackingUpdateConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackingUpdateConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 112) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackingUpdateConfig()
{
  return &type metadata for TrackingUpdateConfig;
}

uint64_t getEnumTagSinglePayload for DataAssociationConfig(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DataAssociationConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DataAssociationConfig()
{
  return &type metadata for DataAssociationConfig;
}

uint64_t destroy for SchedulingConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SchedulingConfig(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SchedulingConfig(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SchedulingConfig(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v5;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchedulingConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchedulingConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SchedulingConfig()
{
  return &type metadata for SchedulingConfig;
}

void *TrackingConfig.init(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *result;
  int64_t v38;
  uint64_t i;
  id v40;
  void *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  id v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  void *v91;
  int v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  id v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  void *v103;
  int v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  id v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  void *v114;
  int v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  id v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  void *v125;
  int v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  unsigned __int8 v136;
  id v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  void *v143;
  int v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  id v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  id v153;
  void *v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  float v162;
  unsigned int v163;
  unsigned int v164;
  double v165;
  float v166;
  unsigned __int8 v167;
  int v168;
  int v169;
  unsigned __int8 v170;
  uint64_t v171;
  unsigned __int8 v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  void *__dst;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unsigned __int8 v182;
  unsigned int v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  unsigned __int8 v186;
  unsigned __int8 v187;
  unsigned __int8 v188;
  unsigned int v189;
  unsigned __int8 v190;
  unsigned __int8 v191;
  unsigned int v192;
  unsigned int v193;
  _QWORD *v194;
  uint64_t v195;
  unsigned __int8 v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  id v200;
  _OWORD __src[29];

  v2 = a1;
  v197 = objc_msgSend(a1, sel_SchedulerInterval);
  objc_msgSend(v2, sel_HandCenterAngleDeadzone);
  v5 = v4;
  objc_msgSend(v2, sel_EstimatedBboxVisibilitySaturation);
  v7 = v6;
  objc_msgSend(v2, sel_HandCenterAngleGrayzone);
  v9 = v8;
  v196 = objc_msgSend(v2, sel_EnableCameraSelectionHysteresis);
  objc_msgSend(v2, sel_HandCenterAngleGrayzoneReductionFactor);
  v11 = v10;
  v12 = objc_msgSend(v2, sel_InputImageStreams);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;

  v16 = specialized static CameraStreamUtils.StreamCombination.create(from:)(v13, v15);
  LOBYTE(v13) = v17;
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    v18 = MEMORY[0x24BEE4B08];
  else
    v18 = CameraStreamUtils.StreamCombination.toCameraSourceSet()(v16);
  v195 = v18;
  swift_bridgeObjectRetain();
  v19 = MEMORY[0x24BEE4B08];
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v2, sel_DetectionInputImageStreams);
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;

  v24 = specialized static CameraStreamUtils.StreamCombination.create(from:)(v21, v23);
  LOBYTE(v21) = v25;
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
    v19 = CameraStreamUtils.StreamCombination.toCameraSourceSet()(v24);
  v26 = specialized _copyCollectionToContiguousArray<A>(_:)(v19);
  swift_bridgeObjectRelease();
  v194 = v26;
  swift_retain();
  swift_bridgeObjectRelease();
  v193 = objc_msgSend(v2, sel_SchedulerIntervalZeroHand);
  v192 = objc_msgSend(v2, sel_SchedulerIntervalOneHand);
  objc_msgSend(v2, sel_PoseSchedulerBboxVisibilityRequirement);
  v28 = v27;
  objc_msgSend(v2, sel_PoseSchedulerBboxVisibilityTolerance);
  v30 = v29;
  v191 = objc_msgSend(v2, sel_UseAvgBoneLengthFromPose);
  objc_msgSend(v2, sel_MaxUncertaintyForFetchBoneLength);
  v32 = v31;
  v189 = objc_msgSend(v2, sel_NumCachedPoseForBoneLength);
  v190 = objc_msgSend(v2, sel_EnableTwoHandsOcclussionFilter);
  v188 = objc_msgSend(v2, sel_EnableTwoHandsOcclusionSuppressor);
  v187 = objc_msgSend(v2, sel_EnableTwoHandsOcclusionOnlyForNonDoubleTrackedHands);
  v186 = objc_msgSend(v2, sel_EnableDoubleTrackerFilter);
  v185 = objc_msgSend(v2, sel_EnableCoreAnalytics);
  v182 = objc_msgSend(v2, sel_EnableOverlappingHandsFilter);
  v184 = objc_msgSend(v2, sel_UvOEnableForceDcamRotation);
  v183 = objc_msgSend(v2, sel_UvODcamLeftRotation);
  v181 = objc_msgSend(v2, sel_UvODcamRightRotation);
  v33 = objc_msgSend(v2, sel_DSFOVNoiseValues);
  type metadata accessor for NSNumber();
  v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v34 >> 62))
  {
    v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v35)
      goto LABEL_8;
LABEL_26:
    swift_bridgeObjectRelease();
    v43 = MEMORY[0x24BEE4AF8];
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  v35 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v35)
    goto LABEL_26;
LABEL_8:
  v36 = MEMORY[0x24BEE4AF8];
  result = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&__src[0] = v36;
  if (!(_DWORD)result || v35 > *(_QWORD *)(v36 + 24) >> 1)
  {
    if (*(_QWORD *)(v36 + 16) <= v35)
      v38 = v35;
    else
      v38 = *(_QWORD *)(v36 + 16);
    result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char)result, v38, 0);
  }
  if (v35 < 0)
  {
    __break(1u);
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  for (i = 0; i != v35; ++i)
  {
    if ((v34 & 0xC000000000000001) != 0)
      v40 = (id)MEMORY[0x24263790C](i, v34);
    else
      v40 = *(id *)(v34 + 8 * i + 32);
    v41 = v40;
    v42 = Int32.init(truncating:)();

    v43 = *(_QWORD *)&__src[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)&__src[0] + 16) + 1, 1);
      v43 = *(_QWORD *)&__src[0];
    }
    v45 = *(_QWORD *)(v43 + 16);
    v44 = *(_QWORD *)(v43 + 24);
    if (v45 >= v44 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      v43 = *(_QWORD *)&__src[0];
    }
    *(_QWORD *)(v43 + 16) = v45 + 1;
    *(_DWORD *)(v43 + 4 * v45 + 32) = v42;
  }
  swift_bridgeObjectRelease();
LABEL_27:
  v180 = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46 = objc_msgSend(v2, sel_SDFOVNoiseValues);
  v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v47 >> 62)
  {
    swift_bridgeObjectRetain();
    v48 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v48)
      goto LABEL_29;
LABEL_45:
    swift_bridgeObjectRelease();
    v52 = MEMORY[0x24BEE4AF8];
    goto LABEL_46;
  }
  v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v48)
    goto LABEL_45;
LABEL_29:
  v49 = MEMORY[0x24BEE4AF8];
  result = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&__src[0] = v49;
  if (!(_DWORD)result || v48 > *(_QWORD *)(v49 + 24) >> 1)
  {
    if (*(_QWORD *)(v49 + 16) <= v48)
      v50 = v48;
    else
      v50 = *(_QWORD *)(v49 + 16);
    result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char)result, v50, 0);
  }
  if (v48 < 0)
    goto LABEL_152;
  v51 = 0;
  v52 = *(_QWORD *)&__src[0];
  do
  {
    v53 = v52;
    if ((v47 & 0xC000000000000001) != 0)
      v54 = (id)MEMORY[0x24263790C](v51, v47);
    else
      v54 = *(id *)(v47 + 8 * v51 + 32);
    v55 = v54;
    v56 = Int32.init(truncating:)();

    v52 = v53;
    *(_QWORD *)&__src[0] = v53;
    v58 = *(_QWORD *)(v53 + 16);
    v57 = *(_QWORD *)(v53 + 24);
    if (v58 >= v57 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
      v52 = *(_QWORD *)&__src[0];
    }
    ++v51;
    *(_QWORD *)(v52 + 16) = v58 + 1;
    *(_DWORD *)(v52 + 4 * v58 + 32) = v56;
  }
  while (v48 != v51);
  swift_bridgeObjectRelease();
LABEL_46:
  v179 = v52;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59 = objc_msgSend(v2, sel_DDFOVNoiseValues);
  v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v60 >> 62))
  {
    v61 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v61)
      goto LABEL_48;
LABEL_58:
    swift_bridgeObjectRelease();
    v71 = MEMORY[0x24BEE4AF8];
    goto LABEL_59;
  }
  swift_bridgeObjectRetain();
  v61 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v61)
    goto LABEL_58;
LABEL_48:
  *(_QWORD *)&__src[0] = MEMORY[0x24BEE4AF8];
  result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61 & ~(v61 >> 63), 0);
  if (v61 < 0)
  {
LABEL_153:
    __break(1u);
    goto LABEL_154;
  }
  v62 = 0;
  v63 = *(_QWORD *)&__src[0];
  do
  {
    v64 = v63;
    if ((v60 & 0xC000000000000001) != 0)
      v65 = (id)MEMORY[0x24263790C](v62, v60);
    else
      v65 = *(id *)(v60 + 8 * v62 + 32);
    v66 = v65;
    v67 = Int32.init(truncating:)();

    v63 = v64;
    *(_QWORD *)&__src[0] = v64;
    v69 = *(_QWORD *)(v64 + 16);
    v68 = *(_QWORD *)(v64 + 24);
    if (v69 >= v68 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1);
      v63 = *(_QWORD *)&__src[0];
    }
    ++v62;
    *(_QWORD *)(v63 + 16) = v69 + 1;
    *(_DWORD *)(v63 + 4 * v69 + 32) = v67;
  }
  while (v61 != v62);
  v70 = v63;
  swift_bridgeObjectRelease();
  v71 = v70;
LABEL_59:
  v178 = v71;
  swift_bridgeObjectRetain();
  v72 = objc_msgSend(v2, sel_FOV2dCircles);
  v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v73 >> 62))
  {
    v74 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v74)
      goto LABEL_61;
LABEL_71:
    swift_bridgeObjectRelease();
    v84 = MEMORY[0x24BEE4AF8];
    goto LABEL_72;
  }
  swift_bridgeObjectRetain();
  v74 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v74)
    goto LABEL_71;
LABEL_61:
  *(_QWORD *)&__src[0] = MEMORY[0x24BEE4AF8];
  result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74 & ~(v74 >> 63), 0);
  if (v74 < 0)
  {
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  v75 = 0;
  v76 = *(_QWORD *)&__src[0];
  do
  {
    v77 = v76;
    if ((v73 & 0xC000000000000001) != 0)
      v78 = (id)MEMORY[0x24263790C](v75, v73);
    else
      v78 = *(id *)(v73 + 8 * v75 + 32);
    v79 = v78;
    v80 = Int32.init(truncating:)();

    v76 = v77;
    *(_QWORD *)&__src[0] = v77;
    v82 = *(_QWORD *)(v77 + 16);
    v81 = *(_QWORD *)(v77 + 24);
    if (v82 >= v81 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1);
      v76 = *(_QWORD *)&__src[0];
    }
    ++v75;
    *(_QWORD *)(v76 + 16) = v82 + 1;
    *(_DWORD *)(v76 + 4 * v82 + 32) = v80;
  }
  while (v74 != v75);
  v83 = v76;
  swift_bridgeObjectRelease();
  v84 = v83;
LABEL_72:
  v199 = v84;
  swift_bridgeObjectRetain();
  v85 = objc_msgSend(v2, sel_DDFOVDistances);
  v86 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v86 >> 62))
  {
    v87 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v87)
      goto LABEL_74;
LABEL_84:
    swift_bridgeObjectRelease();
    v89 = MEMORY[0x24BEE4AF8];
    goto LABEL_85;
  }
  swift_bridgeObjectRetain();
  v87 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v87)
    goto LABEL_84;
LABEL_74:
  *(_QWORD *)&__src[0] = MEMORY[0x24BEE4AF8];
  result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v87 & ~(v87 >> 63), 0);
  if (v87 < 0)
  {
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  v88 = 0;
  v89 = *(_QWORD *)&__src[0];
  do
  {
    if ((v86 & 0xC000000000000001) != 0)
      v90 = (id)MEMORY[0x24263790C](v88, v86);
    else
      v90 = *(id *)(v86 + 8 * v88 + 32);
    v91 = v90;
    Float.init(truncating:)();
    v93 = v92;

    *(_QWORD *)&__src[0] = v89;
    v95 = *(_QWORD *)(v89 + 16);
    v94 = *(_QWORD *)(v89 + 24);
    if (v95 >= v94 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v94 > 1, v95 + 1, 1);
      v89 = *(_QWORD *)&__src[0];
    }
    ++v88;
    *(_QWORD *)(v89 + 16) = v95 + 1;
    *(_DWORD *)(v89 + 4 * v95 + 32) = v93;
  }
  while (v87 != v88);
  swift_bridgeObjectRelease();
LABEL_85:
  swift_bridgeObjectRetain();
  v96 = objc_msgSend(v2, sel_DSFOVDistances);
  v97 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v97 >> 62))
  {
    v98 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v98)
      goto LABEL_87;
LABEL_97:
    swift_bridgeObjectRelease();
    v101 = MEMORY[0x24BEE4AF8];
    goto LABEL_98;
  }
  swift_bridgeObjectRetain();
  v98 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v98)
    goto LABEL_97;
LABEL_87:
  *(_QWORD *)&__src[0] = MEMORY[0x24BEE4AF8];
  result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v98 & ~(v98 >> 63), 0);
  if (v98 < 0)
  {
LABEL_156:
    __break(1u);
    goto LABEL_157;
  }
  v99 = v89;
  v100 = 0;
  v101 = *(_QWORD *)&__src[0];
  do
  {
    if ((v97 & 0xC000000000000001) != 0)
      v102 = (id)MEMORY[0x24263790C](v100, v97);
    else
      v102 = *(id *)(v97 + 8 * v100 + 32);
    v103 = v102;
    Float.init(truncating:)();
    v105 = v104;

    *(_QWORD *)&__src[0] = v101;
    v107 = *(_QWORD *)(v101 + 16);
    v106 = *(_QWORD *)(v101 + 24);
    if (v107 >= v106 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v106 > 1, v107 + 1, 1);
      v101 = *(_QWORD *)&__src[0];
    }
    ++v100;
    *(_QWORD *)(v101 + 16) = v107 + 1;
    *(_DWORD *)(v101 + 4 * v107 + 32) = v105;
  }
  while (v98 != v100);
  swift_bridgeObjectRelease();
  v89 = v99;
LABEL_98:
  v198 = v101;
  swift_bridgeObjectRetain();
  v108 = objc_msgSend(v2, sel_SDFOVDistances);
  v109 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v200 = v2;
  v177 = v89;
  if (!(v109 >> 62))
  {
    v110 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v110)
      goto LABEL_100;
LABEL_110:
    swift_bridgeObjectRelease();
    v112 = MEMORY[0x24BEE4AF8];
    goto LABEL_111;
  }
  swift_bridgeObjectRetain();
  v110 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v110)
    goto LABEL_110;
LABEL_100:
  *(_QWORD *)&__src[0] = MEMORY[0x24BEE4AF8];
  result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v110 & ~(v110 >> 63), 0);
  if (v110 < 0)
  {
LABEL_157:
    __break(1u);
    goto LABEL_158;
  }
  v111 = 0;
  v112 = *(_QWORD *)&__src[0];
  do
  {
    if ((v109 & 0xC000000000000001) != 0)
      v113 = (id)MEMORY[0x24263790C](v111, v109);
    else
      v113 = *(id *)(v109 + 8 * v111 + 32);
    v114 = v113;
    Float.init(truncating:)();
    v116 = v115;

    *(_QWORD *)&__src[0] = v112;
    v118 = *(_QWORD *)(v112 + 16);
    v117 = *(_QWORD *)(v112 + 24);
    if (v118 >= v117 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v117 > 1, v118 + 1, 1);
      v112 = *(_QWORD *)&__src[0];
    }
    ++v111;
    *(_QWORD *)(v112 + 16) = v118 + 1;
    *(_DWORD *)(v112 + 4 * v118 + 32) = v116;
  }
  while (v110 != v111);
  swift_bridgeObjectRelease();
  v2 = v200;
LABEL_111:
  swift_bridgeObjectRetain();
  v119 = objc_msgSend(v2, sel_Noise2Ths);
  v120 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  __dst = a2;
  v174 = v30;
  v175 = v28;
  v173 = v32;
  if (!(v120 >> 62))
  {
    v121 = *(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v121)
      goto LABEL_113;
LABEL_123:
    swift_bridgeObjectRelease();
    v123 = MEMORY[0x24BEE4AF8];
    goto LABEL_124;
  }
  swift_bridgeObjectRetain();
  v121 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v121)
    goto LABEL_123;
LABEL_113:
  *(_QWORD *)&__src[0] = MEMORY[0x24BEE4AF8];
  result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v121 & ~(v121 >> 63), 0);
  if (v121 < 0)
  {
LABEL_158:
    __break(1u);
    goto LABEL_159;
  }
  v122 = 0;
  v123 = *(_QWORD *)&__src[0];
  do
  {
    if ((v120 & 0xC000000000000001) != 0)
      v124 = (id)MEMORY[0x24263790C](v122, v120);
    else
      v124 = *(id *)(v120 + 8 * v122 + 32);
    v125 = v124;
    Float.init(truncating:)();
    v127 = v126;

    *(_QWORD *)&__src[0] = v123;
    v129 = *(_QWORD *)(v123 + 16);
    v128 = *(_QWORD *)(v123 + 24);
    if (v129 >= v128 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v128 > 1, v129 + 1, 1);
      v123 = *(_QWORD *)&__src[0];
    }
    ++v122;
    *(_QWORD *)(v123 + 16) = v129 + 1;
    *(_DWORD *)(v123 + 4 * v129 + 32) = v127;
  }
  while (v121 != v122);
  swift_bridgeObjectRelease();
LABEL_124:
  swift_bridgeObjectRetain();
  objc_msgSend(v200, sel_TrackingHealthDriftAveragingFactor);
  v131 = v130;
  objc_msgSend(v200, sel_TrackingHealthGhostHandAveragingFactor);
  v133 = v132;
  objc_msgSend(v200, sel_TrackingHealthSpeedAveragingFactor);
  v135 = v134;
  v136 = objc_msgSend(v200, sel_ThsFroceFovContinuity);
  v137 = objc_msgSend(v200, sel_PredictionErroLutForSpeed);
  v138 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v172 = v136;
  if (!(v138 >> 62))
  {
    v139 = *(_QWORD *)((v138 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v139)
      goto LABEL_126;
LABEL_136:
    swift_bridgeObjectRelease();
    v141 = MEMORY[0x24BEE4AF8];
    goto LABEL_137;
  }
  swift_bridgeObjectRetain();
  v139 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v139)
    goto LABEL_136;
LABEL_126:
  *(_QWORD *)&__src[0] = MEMORY[0x24BEE4AF8];
  result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v139 & ~(v139 >> 63), 0);
  if (v139 < 0)
  {
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
  v140 = 0;
  v141 = *(_QWORD *)&__src[0];
  do
  {
    if ((v138 & 0xC000000000000001) != 0)
      v142 = (id)MEMORY[0x24263790C](v140, v138);
    else
      v142 = *(id *)(v138 + 8 * v140 + 32);
    v143 = v142;
    Float.init(truncating:)();
    v145 = v144;

    *(_QWORD *)&__src[0] = v141;
    v147 = *(_QWORD *)(v141 + 16);
    v146 = *(_QWORD *)(v141 + 24);
    if (v147 >= v146 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v146 > 1, v147 + 1, 1);
      v141 = *(_QWORD *)&__src[0];
    }
    ++v140;
    *(_QWORD *)(v141 + 16) = v147 + 1;
    *(_DWORD *)(v141 + 4 * v147 + 32) = v145;
  }
  while (v139 != v140);
  swift_bridgeObjectRelease();
LABEL_137:
  swift_bridgeObjectRetain();
  v148 = objc_msgSend(v200, sel_AvgVelocityLutForSpeed);
  v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v171 = v11;
  if (!(v149 >> 62))
  {
    v150 = *(_QWORD *)((v149 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v150)
      goto LABEL_139;
LABEL_149:
    v159 = v9;
    v160 = v7;
    v161 = v5;
    swift_bridgeObjectRelease();
    v152 = MEMORY[0x24BEE4AF8];
LABEL_150:
    *(float *)&v163 = v133;
    swift_bridgeObjectRetain();
    objc_msgSend(v200, sel_TrackingHealthScoreFovHysDis);
    v166 = v165;
    v167 = objc_msgSend(v200, sel_TrackingHealthScoreEnableFovHysDis);
    objc_msgSend(v200, sel_TrackingSensitivityNoiseMagnitude);
    v169 = v168;
    v170 = objc_msgSend(v200, sel_EnableTrackingSensitivity);

    *(_QWORD *)((char *)&__src[27] + 12) = 0x3DCCCCCD3E19999ALL;
    *(_QWORD *)&__src[2] = MEMORY[0x24BEE4AF8];
    *((_QWORD *)&__src[3] + 1) = 0x23E4CCCCDLL;
    *((_QWORD *)&__src[4] + 1) = 0x3FA999999999999ALL;
    LOBYTE(__src[5]) = v196;
    *(_QWORD *)&__src[6] = __PAIR64__(v192, v193);
    DWORD2(__src[6]) = v197;
    BYTE12(__src[6]) = v191;
    DWORD2(__src[7]) = 1045220557;
    BYTE12(__src[7]) = v182;
    LODWORD(__src[13]) = 150;
    *((_QWORD *)&__src[13] + 1) = 0x3FB3333333333333;
    LOWORD(__src[14]) = 256;
    *(_OWORD *)((char *)&__src[9] + 8) = xmmword_23D9A87B0;
    *(_QWORD *)((char *)&__src[11] + 5) = 0;
    *(_QWORD *)((char *)&__src[10] + 13) = 0;
    DWORD1(__src[12]) = 0;
    *(_QWORD *)((char *)&__src[11] + 13) = 0;
    *(_QWORD *)((char *)&__src[14] + 4) = 0x3F3333333F733333;
    WORD6(__src[14]) = 257;
    LODWORD(__src[15]) = 1067869798;
    LOBYTE(__src[20]) = v172;
    BYTE8(__src[21]) = v167;
    LOBYTE(__src[22]) = v190;
    BYTE1(__src[22]) = v188;
    BYTE2(__src[22]) = v187;
    *((_QWORD *)&__src[22] + 1) = 0x3FE0000000000000;
    LOBYTE(__src[24]) = v186;
    DWORD1(__src[24]) = 1064011039;
    LOBYTE(__src[25]) = v185;
    LODWORD(__src[26]) = 1048576000;
    BYTE4(__src[26]) = v184;
    *((_QWORD *)&__src[26] + 1) = __PAIR64__(v181, v183);
    DWORD2(__src[10]) = 1;
    BYTE12(__src[10]) = 1;
    BYTE2(__src[14]) = 1;
    BYTE4(__src[25]) = 1;
    BYTE8(__src[27]) = 1;
    BYTE4(__src[28]) = v170;
    *((_QWORD *)&__src[2] + 1) = v195;
    *(_QWORD *)&__src[3] = v194;
    *(_QWORD *)&__src[0] = v175;
    *((_QWORD *)&__src[0] + 1) = v174;
    *(_QWORD *)&__src[1] = v160;
    *((_QWORD *)&__src[1] + 1) = v161;
    *(_QWORD *)&__src[4] = v159;
    *((_QWORD *)&__src[5] + 1) = v171;
    *(_QWORD *)&__src[7] = __PAIR64__(v189, v173);
    __src[8] = xmmword_23D9A87A0;
    *(_QWORD *)&__src[9] = 0x31000001F4;
    *((_QWORD *)&__src[12] + 1) = 0x9600000096;
    *(float *)&v164 = v131;
    *(_QWORD *)((char *)&__src[15] + 4) = __PAIR64__(v163, v164);
    v162 = v135;
    *((float *)&__src[15] + 3) = v162;
    *(_QWORD *)&__src[16] = v178;
    *((_QWORD *)&__src[16] + 1) = v180;
    *(_QWORD *)&__src[17] = v179;
    *((_QWORD *)&__src[17] + 1) = v177;
    *(_QWORD *)&__src[18] = v198;
    *((_QWORD *)&__src[18] + 1) = v112;
    *(_QWORD *)&__src[19] = v199;
    *((_QWORD *)&__src[19] + 1) = v123;
    *((_QWORD *)&__src[20] + 1) = v141;
    *(_QWORD *)&__src[21] = v152;
    *((float *)&__src[21] + 3) = v166;
    __src[23] = xmmword_23D9A87C0;
    *((_QWORD *)&__src[24] + 1) = 0x412000003CA3D70ALL;
    *((_QWORD *)&__src[25] + 1) = 0x42B4000042F00000;
    *(_QWORD *)&__src[27] = 0x3E4CCCCD3E19999ALL;
    DWORD2(__src[28]) = v169;
    outlined retain of TrackingConfig((uint64_t)__src);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of TrackingConfig((uint64_t)__src);
    return memcpy(__dst, __src, 0x1CCuLL);
  }
  swift_bridgeObjectRetain();
  v150 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v150)
    goto LABEL_149;
LABEL_139:
  *(_QWORD *)&__src[0] = MEMORY[0x24BEE4AF8];
  result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v150 & ~(v150 >> 63), 0);
  if ((v150 & 0x8000000000000000) == 0)
  {
    v151 = 0;
    v152 = *(_QWORD *)&__src[0];
    do
    {
      if ((v149 & 0xC000000000000001) != 0)
        v153 = (id)MEMORY[0x24263790C](v151, v149);
      else
        v153 = *(id *)(v149 + 8 * v151 + 32);
      v154 = v153;
      Float.init(truncating:)();
      v156 = v155;

      *(_QWORD *)&__src[0] = v152;
      v158 = *(_QWORD *)(v152 + 16);
      v157 = *(_QWORD *)(v152 + 24);
      if (v158 >= v157 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v157 > 1, v158 + 1, 1);
        v152 = *(_QWORD *)&__src[0];
      }
      ++v151;
      *(_QWORD *)(v152 + 16) = v158 + 1;
      *(_DWORD *)(v152 + 4 * v158 + 32) = v156;
    }
    while (v150 != v151);
    v159 = v9;
    v160 = v7;
    v161 = v5;
    swift_bridgeObjectRelease();
    goto LABEL_150;
  }
LABEL_160:
  __break(1u);
  return result;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t outlined retain of TrackingConfig(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of TrackingConfig(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

float LogisticRegression3.predictProbability(_:)(int8x16_t a1)
{
  uint64_t v1;
  float v2;
  float32x2_t v3;

  v2 = *(float *)(v1 + 16) * *(float *)a1.i32;
  v3 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)a1.i8, (int8x8_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), 4uLL), *(float32x2_t *)(v1 + 20));
  return 1.0 / (float)(expf(-(float)((float)(v3.f32[1] + (float)(v2 + v3.f32[0])) + -2.721)) + 1.0);
}

uint64_t LogisticRegression3.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LogisticRegression3()
{
  return objc_opt_self();
}

uint64_t specialized Array.append(_:)(float a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1, (char *)v3);
    v3 = result;
  }
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, (char *)v3);
    v3 = result;
  }
  *(_QWORD *)(v3 + 16) = v6 + 1;
  *(float *)(v3 + 4 * v6 + 32) = a1;
  *v1 = v3;
  return result;
}

uint64_t specialized Array.append(_:)(uint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    v3 = (_QWORD *)result;
  }
  v6 = v3[2];
  v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
    v3 = (_QWORD *)result;
  }
  v3[2] = v6 + 1;
  v3[v6 + 4] = a1;
  *v1 = v3;
  return result;
}

BOOL InvalidHandPoseSuppressor.shouldSuppress(basedOn:)(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  float v7;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  if ((*(_BYTE *)(a1 + 128) & 1) == 0)
    return 1;
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  v5 = (float *)(v3 + 32);
  v6 = v4 - 1;
  do
  {
    v7 = *v5++;
    result = v7 < 0.2;
  }
  while (v7 >= 0.2 && v6-- != 0);
  return result;
}

uint64_t InvalidHandPoseSuppressor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InvalidHandPoseSuppressor()
{
  return objc_opt_self();
}

uint64_t protocol witness for MiddleDoubleTapSuppressor.update(inProgress:withHand:withData:atTime:) in conformance InvalidHandPoseSuppressor(uint64_t a1, _QWORD *a2)
{
  return specialized InvalidHandPoseSuppressor.update(inProgress:withHand:withData:atTime:)(a1, a2);
}

BOOL protocol witness for MiddleDoubleTapSuppressor.shouldSuppress(basedOn:) in conformance InvalidHandPoseSuppressor(uint64_t a1)
{
  return InvalidHandPoseSuppressor.shouldSuppress(basedOn:)(a1);
}

uint64_t specialized InvalidHandPoseSuppressor.update(inProgress:withHand:withData:atTime:)(uint64_t result, _QWORD *a2)
{
  float32x4_t *v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;
  char *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;

  if ((result & 1) != 0)
  {
    if (a2[2])
    {
      v4 = a2[4];
      v3 = a2[5];
      v5 = (char **)&v2[2];
      v13 = v2[3];
      swift_beginAccess();
      v6 = (char *)v2[2].i64[0];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v2[2].i64[0] = (uint64_t)v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
        *v5 = v6;
      }
      v9 = *((_QWORD *)v6 + 2);
      v8 = *((_QWORD *)v6 + 3);
      if (v9 >= v8 >> 1)
      {
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v6);
        *v5 = v6;
      }
      v10.i64[0] = v4;
      v10.i64[1] = v3;
      v11 = vsubq_f32(v13, v10);
      v12 = vmulq_f32(v11, v11);
      *((_QWORD *)v6 + 2) = v9 + 1;
      *(float *)&v6[4 * v9 + 32] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]);
      return swift_endAccess();
    }
  }
  else
  {
    swift_beginAccess();
    v2[2].i64[0] = MEMORY[0x24BEE4AF8];
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSays5SIMD2VySfGGG_AF9CropBoxPBVs5NeverOTg5061_s5Hands22HandDescriptorInternalV10toProtoBufAA0bcD2PBVyFAA07hi7H0VAA12ef11O3key_Says5G20VySfGG5valuet_tXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v54 = type metadata accessor for Coordinate2DPB(0);
  v3 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54, v4);
  v6 = (uint64_t *)((char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for CropBoxPB(0);
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  MEMORY[0x24BDAC7A8](v7, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v39 = v1;
    v56 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v13 = v56;
    result = specialized Dictionary.startIndex.getter(a1);
    v16 = 0;
    v17 = a1 + 64;
    v18 = *(_BYTE *)(a1 + 32);
    v47 = a1 + 80;
    v40 = v10;
    v41 = a1;
    v42 = v11;
    v43 = v15;
    v44 = a1 + 64;
    while ((result & 0x8000000000000000) == 0 && (uint64_t)result < 1 << v18)
    {
      v21 = result >> 6;
      if ((*(_QWORD *)(v17 + 8 * (result >> 6)) & (1 << result)) == 0)
        goto LABEL_32;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v15)
        goto LABEL_33;
      v48 = v16;
      v49 = 1 << result;
      v52 = result;
      v53 = v13;
      v22 = *(_QWORD *)(a1 + 56);
      v23 = *(_QWORD *)(a1 + 48) + 16 * result;
      v51 = *(_QWORD *)v23;
      v50 = *(unsigned __int8 *)(v23 + 8);
      v24 = *(_QWORD *)(v22 + 8 * result);
      swift_bridgeObjectRetain();
      UnknownStorage.init()();
      v25 = *(_QWORD *)(v24 + 16);
      if (v25)
      {
        v55 = v12;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
        v26 = 0;
        v27 = v55;
        do
        {
          v28 = *(_QWORD *)(v24 + 8 * v26 + 32);
          UnknownStorage.init()();
          *v6 = v28;
          v55 = v27;
          v30 = *(_QWORD *)(v27 + 16);
          v29 = *(_QWORD *)(v27 + 24);
          if (v30 >= v29 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
            v27 = v55;
          }
          ++v26;
          *(_QWORD *)(v27 + 16) = v30 + 1;
          outlined init with take of Matrix2dPB((uint64_t)v6, v27+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v30, type metadata accessor for Coordinate2DPB);
        }
        while (v25 != v26);
        swift_bridgeObjectRelease();
        v10 = v40;
        a1 = v41;
        v12 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        swift_bridgeObjectRelease();
        v27 = v12;
      }
      v10[16] = v50;
      v31 = v51;
      *(_QWORD *)v10 = v27;
      *((_QWORD *)v10 + 1) = v31;
      v13 = v53;
      v56 = v53;
      v33 = *(_QWORD *)(v53 + 16);
      v32 = *(_QWORD *)(v53 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        v13 = v56;
      }
      *(_QWORD *)(v13 + 16) = v33 + 1;
      result = outlined init with take of Matrix2dPB((uint64_t)v10, v13+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v33, type metadata accessor for CropBoxPB);
      v18 = *(_BYTE *)(a1 + 32);
      v19 = 1 << v18;
      if (v52 >= 1 << v18)
        goto LABEL_34;
      v17 = v44;
      v34 = *(_QWORD *)(v44 + 8 * v21);
      if ((v34 & v49) == 0)
        goto LABEL_35;
      LODWORD(v15) = v43;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v43)
        goto LABEL_36;
      v35 = v34 & (-2 << (v52 & 0x3F));
      if (v35)
      {
        v19 = __clz(__rbit64(v35)) | v52 & 0xFFFFFFFFFFFFFFC0;
        v20 = v42;
      }
      else
      {
        v36 = v21 + 1;
        v37 = (v19 + 63) >> 6;
        v20 = v42;
        if (v21 + 1 < v37)
        {
          v38 = *(_QWORD *)(v44 + 8 * v36);
          if (v38)
          {
LABEL_27:
            v19 = __clz(__rbit64(v38)) + (v36 << 6);
          }
          else
          {
            while (v37 - 2 != v21)
            {
              v38 = *(_QWORD *)(v47 + 8 * v21++);
              if (v38)
              {
                v36 = v21 + 1;
                goto LABEL_27;
              }
            }
          }
        }
      }
      v16 = v48 + 1;
      result = v19;
      if (v48 + 1 == v20)
        return v13;
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSo13simd_float4x4aG_AF11LocalizerPBVs5NeverOTg5061_s5Hands22HandDescriptorInternalV10toProtoBufAA0bcD2PBVyFAA09i7H0VAA12eF39O3key_So13simd_float4x4a5valuet_tXEfU0_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  uint64_t v57;
  uint64_t v58;

  v3 = type metadata accessor for Matrix2dPB(0);
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  MEMORY[0x24BDAC7A8](v3, v4);
  v49 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizerPB(0);
  v47 = *(_QWORD *)(v6 - 8);
  v48 = v6;
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (!v10)
    return v11;
  v41 = v1;
  v58 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
  v11 = v58;
  result = specialized Dictionary.startIndex.getter(a1);
  v14 = result;
  v15 = 0;
  v16 = a1 + 64;
  v42 = a1 + 80;
  v43 = v10;
  v44 = v13;
  v45 = a1 + 64;
  v46 = a1;
  while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(_BYTE *)(a1 + 32))
  {
    v19 = (unint64_t)v14 >> 6;
    if ((*(_QWORD *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v13)
      goto LABEL_24;
    v52 = v15;
    v20 = *(_QWORD *)(a1 + 48) + 16 * v14;
    v21 = *(_QWORD *)v20;
    v22 = *(_BYTE *)(v20 + 8);
    v23 = *(_QWORD *)(a1 + 56) + (v14 << 6);
    v24 = *(int32x4_t *)v23;
    v25 = *(int32x4_t *)(v23 + 16);
    v55 = *(int8x16_t *)(v23 + 32);
    v56 = v25;
    v26 = *(int32x4_t *)(v23 + 48);
    v53 = v24;
    v54 = v26;
    v57 = v11;
    v27 = v48;
    UnknownStorage.init()();
    v28 = (uint64_t)&v9[*(int *)(v27 + 24)];
    v29 = v51;
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56);
    v30(v28, 1, 1, v51);
    *(_QWORD *)v9 = v21;
    v9[8] = v22;
    v31 = specialized Matrix2d.init(simd4x4float:)(v53, v56, v55, v54);
    v33 = v49;
    Matrix2d.toProtoBuf()(v31, v32 & 1, v49);
    swift_bridgeObjectRelease();
    outlined destroy of Coordinate3DPB?(v28, &demangling cache variable for type metadata for Matrix2dPB?);
    outlined init with take of Matrix2dPB(v33, v28, type metadata accessor for Matrix2dPB);
    v30(v28, 0, 1, v29);
    v11 = v57;
    v58 = v57;
    v35 = *(_QWORD *)(v57 + 16);
    v34 = *(_QWORD *)(v57 + 24);
    if (v35 >= v34 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
      v11 = v58;
    }
    *(_QWORD *)(v11 + 16) = v35 + 1;
    result = outlined init with take of Matrix2dPB((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v47 + 72) * v35, type metadata accessor for LocalizerPB);
    a1 = v46;
    v17 = 1 << *(_BYTE *)(v46 + 32);
    if (v14 >= v17)
      goto LABEL_25;
    v16 = v45;
    v36 = *(_QWORD *)(v45 + 8 * v19);
    if ((v36 & (1 << v14)) == 0)
      goto LABEL_26;
    LODWORD(v13) = v44;
    if (*(_DWORD *)(v46 + 36) != (_DWORD)v44)
      goto LABEL_27;
    v37 = v36 & (-2 << (v14 & 0x3F));
    if (v37)
    {
      v17 = __clz(__rbit64(v37)) | v14 & 0xFFFFFFFFFFFFFFC0;
      v18 = v43;
    }
    else
    {
      v38 = v19 + 1;
      v39 = (unint64_t)(v17 + 63) >> 6;
      v18 = v43;
      if (v19 + 1 < v39)
      {
        v40 = *(_QWORD *)(v45 + 8 * v38);
        if (v40)
        {
LABEL_20:
          v17 = __clz(__rbit64(v40)) + (v38 << 6);
        }
        else
        {
          while (v39 - 2 != v19)
          {
            v40 = *(_QWORD *)(v42 + 8 * v19++);
            if (v40)
            {
              v38 = v19 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v15 = v52 + 1;
    v14 = v17;
    if (v52 + 1 == v18)
      return v11;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

float PinchInternalData.score.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void PinchInternalData.score.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*PinchInternalData.score.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

float PinchInternalData.scoreRaw.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void PinchInternalData.scoreRaw.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*PinchInternalData.scoreRaw.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t PinchInternalData.neg.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t PinchInternalData.neg.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*PinchInternalData.neg.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t PinchInternalData.pinchDownRaw.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t PinchInternalData.pinchDownRaw.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

uint64_t (*PinchInternalData.pinchDownRaw.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

void PinchInternalData.occlusionStatus.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t PinchInternalData.occlusionStatus.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 24) = v2;
  return result;
}

uint64_t (*PinchInternalData.occlusionStatus.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t PinchInternalData.objectInteractionBlockActive.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PinchInternalData.objectInteractionBlockActive.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*PinchInternalData.objectInteractionBlockActive.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t PinchInternalData.scoreAheads.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PinchInternalData.scoreAheads.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*PinchInternalData.scoreAheads.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t PinchInternalData.searchMakeThresholds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PinchInternalData.searchMakeThresholds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*PinchInternalData.searchMakeThresholds.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t PinchInternalData.searchBreakThresholds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PinchInternalData.searchBreakThresholds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t (*PinchInternalData.searchBreakThresholds.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t PinchInternalData.searchTntStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PinchInternalData.searchTntStates.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*PinchInternalData.searchTntStates.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

float PinchInternalData.unsureNetScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 72);
}

void PinchInternalData.unsureNetScore.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 72) = a1;
}

uint64_t (*PinchInternalData.unsureNetScore.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t PinchInternalData.experimentalSignals.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PinchInternalData.experimentalSignals.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

uint64_t (*PinchInternalData.experimentalSignals.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

void PinchInternalData.pinchRecoveryStatus.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 104);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 96);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t PinchInternalData.pinchRecoveryStatus.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 96) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 104) = v2;
  return result;
}

uint64_t (*PinchInternalData.pinchRecoveryStatus.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

float PinchInternalData.pinchDelayInBreak.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 108);
}

void PinchInternalData.pinchDelayInBreak.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 108) = a1;
}

uint64_t (*PinchInternalData.pinchDelayInBreak.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

float PinchInternalData.breakScore.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 112);
}

void PinchInternalData.breakScore.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 112) = a1;
}

uint64_t (*PinchInternalData.breakScore.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t PinchInternalData.init(protoBuf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  char v13;
  int v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v4 = *(_QWORD *)a1;
  v21 = *(_BYTE *)(a1 + 9);
  v22 = *(_BYTE *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 64);
  v12 = (uint64_t *)(a1 + *(int *)(type metadata accessor for PinchInternalDataPB() + 80));
  if (v12[1])
  {
    v18 = v12[1];
    v19 = *v12;
  }
  else
  {
    v18 = 0xE000000000000000;
    v19 = 0;
  }
  v17 = *(_QWORD *)(a1 + 80);
  v13 = *(_BYTE *)(a1 + 88);
  v14 = *(_DWORD *)(a1 + 92);
  v15 = *(_DWORD *)(a1 + 100);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = outlined destroy of Matrix3x3PB(a1, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v22;
  *(_BYTE *)(a2 + 9) = v21;
  *(_QWORD *)(a2 + 16) = v20;
  *(_BYTE *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  *(_DWORD *)(a2 + 72) = v11;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v18;
  *(_QWORD *)(a2 + 96) = v17;
  *(_BYTE *)(a2 + 104) = v13;
  *(_DWORD *)(a2 + 108) = v14;
  *(_DWORD *)(a2 + 112) = v15;
  return result;
}

uint64_t PinchInternalData.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;

  v3 = *(_BYTE *)(v1 + 8);
  v21 = *(_BYTE *)(v1 + 9);
  v20 = *(_QWORD *)(v1 + 16);
  v19 = *(_BYTE *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(_DWORD *)(v1 + 72);
  v10 = *(_QWORD *)(v1 + 88);
  v17 = *(_QWORD *)(v1 + 96);
  v18 = *(_QWORD *)(v1 + 80);
  v16 = *(_BYTE *)(v1 + 104);
  v11 = *(_DWORD *)(v1 + 108);
  v12 = *(_DWORD *)(v1 + 112);
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  v13 = type metadata accessor for PinchInternalDataPB();
  UnknownStorage.init()();
  v14 = (_QWORD *)(a1 + *(int *)(v13 + 80));
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v21;
  *(_QWORD *)(a1 + 16) = v20;
  *(_BYTE *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v8;
  *(_DWORD *)(a1 + 64) = v9;
  *v14 = v18;
  v14[1] = v10;
  *(_QWORD *)(a1 + 80) = v17;
  *(_BYTE *)(a1 + 88) = v16;
  *(_DWORD *)(a1 + 92) = v11;
  *(_DWORD *)(a1 + 100) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

float MiddleDoubleTapInternalData.middleHover.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void MiddleDoubleTapInternalData.middleHover.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*MiddleDoubleTapInternalData.middleHover.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t MiddleDoubleTapInternalData.middleDoubleTapState.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t MiddleDoubleTapInternalData.middleDoubleTapState.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*MiddleDoubleTapInternalData.middleDoubleTapState.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t MiddleDoubleTapInternalData.activeSuppressors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MiddleDoubleTapInternalData.activeSuppressors.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*MiddleDoubleTapInternalData.activeSuppressors.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance MiddleDoubleTapInternalData@<X0>(uint64_t a1@<X8>)
{
  int *v1;
  int v3;
  int v4;
  uint64_t v5;

  v3 = *v1;
  v4 = v1[1];
  v5 = *((_QWORD *)v1 + 1);
  type metadata accessor for MiddleDoubleTapInternalPB(0);
  UnknownStorage.init()();
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = v4;
  *(_QWORD *)(a1 + 8) = v5;
  return swift_bridgeObjectRetain();
}

void MonoHand.cameraSource.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t MonoHand.monoHandUVs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MonoHand.monoHandUVsStdDev.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for HandsKitDataProtocol.toProtoBuf() in conformance MonoHand@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 8);
  v6 = v1[2];
  v5 = v1[3];
  type metadata accessor for MonoHandPB(0);
  UnknownStorage.init()();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

BOOL ObjectInteractionStateInternalPB.almostEqual(to:withThreshold:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BOOL8 v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  Swift::String v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  Swift::String v71;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  Swift::String v79;
  uint64_t v80;
  uint64_t v81;
  Swift::String v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  uint64_t v93;
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  Swift::String v97;
  uint64_t v98;
  float v99;
  uint64_t v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _BYTE *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  _BYTE *v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  float v153;
  uint64_t v154;
  Swift::String v155;
  uint64_t v156;
  uint64_t v157;
  Swift::String v158;
  uint64_t v159;
  _BYTE *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  float v172;
  uint64_t v173;
  Swift::String v174;
  uint64_t v175;
  uint64_t v176;
  Swift::String v177;
  uint64_t v178;
  float v179;
  uint64_t v180;
  Swift::String v181;
  uint64_t v182;
  uint64_t v183;
  Swift::String v184;
  uint64_t v185;
  uint64_t v186;
  float v187;
  uint64_t v188;
  Swift::String v189;
  uint64_t v190;
  uint64_t v191;
  Swift::String v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  Swift::String v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  Swift::String v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  float v215;
  uint64_t v216;
  Swift::String v217;
  uint64_t v218;
  uint64_t v219;
  Swift::String v220;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;

  v3 = v2;
  v6 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v7 = *(int *)(v6 + 20);
  v8 = *(_QWORD *)(v3 + v7);
  swift_beginAccess();
  v9 = *(_DWORD *)(v8 + 16);
  v10 = *(int *)(v6 + 20);
  v11 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  v12 = v9 == *(_DWORD *)(v11 + 16);
  v13 = v12;
  v222 = v7;
  v223 = v3;
  if (!v12)
  {
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v227 = 0xD00000000000001ALL;
    v228 = 0x800000023D9C5360;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v16 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 185, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v227 = 0xD00000000000001BLL;
    v228 = 0x800000023D9C5380;
    v17 = *(_QWORD *)(a1 + v10);
    swift_beginAccess();
    LODWORD(v224) = *(_DWORD *)(v17 + 16);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v229 = v15;
    v7 = v222;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 186, (uint64_t)&v227, v16);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v8 = *(_QWORD *)(v3 + v222);
  }
  v19 = (_DWORD *)(v8 + 20);
  swift_beginAccess();
  v20 = *(_DWORD *)(v8 + 20);
  v21 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (v20 != *(_DWORD *)(v21 + 20))
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    v227 = 0xD000000000000022;
    v228 = 0x800000023D9C53A0;
    LODWORD(v224) = *v19;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v24 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 191, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    v227 = 0xD000000000000023;
    v228 = 0x800000023D9C53D0;
    v25 = *(_QWORD *)(a1 + v10);
    swift_beginAccess();
    LODWORD(v224) = *(_DWORD *)(v25 + 20);
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v229 = v23;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v27 = v24;
    v7 = v222;
    v3 = v223;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 192, (uint64_t)&v227, v27);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
  }
  v28 = *(_QWORD *)(v3 + v7);
  swift_beginAccess();
  v29 = *(_DWORD *)(v28 + 28);
  v30 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (v29 != *(_DWORD *)(v30 + 28))
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v227 = 0xD00000000000001BLL;
    v228 = 0x800000023D9C5400;
    LODWORD(v224) = *(_DWORD *)(v28 + 28);
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v33 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 197, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v227 = 0xD00000000000001CLL;
    v228 = 0x800000023D9C5420;
    v34 = *(_QWORD *)(a1 + v10);
    swift_beginAccess();
    LODWORD(v224) = *(_DWORD *)(v34 + 28);
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v229 = v32;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v36 = v33;
    v7 = v222;
    v3 = v223;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 198, (uint64_t)&v227, v36);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
    v28 = *(_QWORD *)(v223 + v222);
  }
  v37 = (_DWORD *)(v28 + 32);
  swift_beginAccess();
  v38 = *(_DWORD *)(v28 + 32);
  v39 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (v38 != *(_DWORD *)(v39 + 32))
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v227 = 0xD000000000000028;
    v228 = 0x800000023D9C5440;
    LODWORD(v224) = *v37;
    v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v42 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 203, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v227 = 0xD000000000000029;
    v228 = 0x800000023D9C5470;
    v43 = *(_QWORD *)(a1 + v10);
    swift_beginAccess();
    LODWORD(v224) = *(_DWORD *)(v43 + 32);
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v229 = v41;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v45 = v42;
    v7 = v222;
    v3 = v223;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 204, (uint64_t)&v227, v45);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
  }
  v46 = *(_QWORD *)(v3 + v7);
  swift_beginAccess();
  v47 = *(float *)(v46 + 36);
  v48 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v47, *(float *)(v48 + 36)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v49._countAndFlagsBits = 0xD00000000000001ELL;
    v49._object = (void *)0x800000023D9C5B00;
    String.append(_:)(v49);
    Float.write<A>(to:)();
    v50 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v51 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 209, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    v52._countAndFlagsBits = 0xD00000000000001FLL;
    v52._object = (void *)0x800000023D9C5B20;
    String.append(_:)(v52);
    swift_beginAccess();
    v3 = v223;
    Float.write<A>(to:)();
    v229 = v50;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v53 = v51;
    v7 = v222;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 210, (uint64_t)&v227, v53);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
    v46 = *(_QWORD *)(v223 + v222);
  }
  swift_beginAccess();
  v54 = *(float *)(v46 + 40);
  v55 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v54, *(float *)(v55 + 40)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v56._countAndFlagsBits = 0xD00000000000002CLL;
    v56._object = (void *)0x800000023D9C5AA0;
    String.append(_:)(v56);
    Float.write<A>(to:)();
    v57 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v58 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 215, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    v59._countAndFlagsBits = 0xD00000000000002DLL;
    v59._object = (void *)0x800000023D9C5AD0;
    String.append(_:)(v59);
    swift_beginAccess();
    v3 = v223;
    Float.write<A>(to:)();
    v229 = v57;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v60 = v58;
    v7 = v222;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 216, (uint64_t)&v227, v60);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
  }
  v61 = *(_QWORD *)(v3 + v7);
  swift_beginAccess();
  v62 = *(float *)(v61 + 44);
  v63 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v62, *(float *)(v63 + 44)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v64._countAndFlagsBits = 0xD000000000000026;
    v64._object = (void *)0x800000023D9C5A40;
    String.append(_:)(v64);
    Float.write<A>(to:)();
    v65 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v66 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 221, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    v67._countAndFlagsBits = 0xD000000000000027;
    v67._object = (void *)0x800000023D9C5A70;
    String.append(_:)(v67);
    swift_beginAccess();
    v3 = v223;
    Float.write<A>(to:)();
    v229 = v65;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v68 = v66;
    v7 = v222;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 222, (uint64_t)&v227, v68);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
    v61 = *(_QWORD *)(v223 + v222);
  }
  swift_beginAccess();
  v69 = *(float *)(v61 + 48);
  v70 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v69, *(float *)(v70 + 48)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v71._countAndFlagsBits = 0xD000000000000026;
    v71._object = (void *)0x800000023D9C59E0;
    String.append(_:)(v71);
    Float.write<A>(to:)();
    v72 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v73 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 227, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    v74._countAndFlagsBits = 0xD000000000000027;
    v74._object = (void *)0x800000023D9C5A10;
    String.append(_:)(v74);
    swift_beginAccess();
    v3 = v223;
    Float.write<A>(to:)();
    v229 = v72;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v75 = v73;
    v7 = v222;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 228, (uint64_t)&v227, v75);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
  }
  v76 = *(_QWORD *)(v3 + v7);
  swift_beginAccess();
  v77 = *(float *)(v76 + 52);
  v78 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v77, *(float *)(v78 + 52)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    v79._countAndFlagsBits = 0xD00000000000002DLL;
    v79._object = (void *)0x800000023D9C5980;
    String.append(_:)(v79);
    Float.write<A>(to:)();
    v80 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v81 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 233, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    v82._countAndFlagsBits = 0xD00000000000002ELL;
    v82._object = (void *)0x800000023D9C59B0;
    String.append(_:)(v82);
    swift_beginAccess();
    v3 = v223;
    Float.write<A>(to:)();
    v229 = v80;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v83 = v81;
    v7 = v222;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 234, (uint64_t)&v227, v83);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
    v76 = *(_QWORD *)(v223 + v222);
  }
  swift_beginAccess();
  v84 = *(float *)(v76 + 56);
  v85 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v84, *(float *)(v85 + 56)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    v86._countAndFlagsBits = 0xD000000000000029;
    v86._object = (void *)0x800000023D9C5920;
    String.append(_:)(v86);
    Float.write<A>(to:)();
    v87 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v88 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 239, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    v89._countAndFlagsBits = 0xD00000000000002ALL;
    v89._object = (void *)0x800000023D9C5950;
    String.append(_:)(v89);
    swift_beginAccess();
    v3 = v223;
    Float.write<A>(to:)();
    v229 = v87;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v90 = v88;
    v7 = v222;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 240, (uint64_t)&v227, v90);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
  }
  v91 = *(_QWORD *)(v3 + v7);
  swift_beginAccess();
  v92 = *(float *)(v91 + 60);
  v93 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v92, *(float *)(v93 + 60)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    v94._countAndFlagsBits = 0xD000000000000030;
    v94._object = (void *)0x800000023D9C58A0;
    String.append(_:)(v94);
    Float.write<A>(to:)();
    v95 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v96 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 245, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v97._countAndFlagsBits = 0xD000000000000031;
    v97._object = (void *)0x800000023D9C58E0;
    String.append(_:)(v97);
    swift_beginAccess();
    v3 = v223;
    Float.write<A>(to:)();
    v229 = v95;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v98 = v96;
    v7 = v222;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 246, (uint64_t)&v227, v98);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
    v91 = *(_QWORD *)(v223 + v222);
  }
  swift_beginAccess();
  v99 = *(float *)(v91 + 64);
  v100 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v99, *(float *)(v100 + 64)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    v101._countAndFlagsBits = 0xD00000000000002DLL;
    v101._object = (void *)0x800000023D9C5840;
    String.append(_:)(v101);
    Float.write<A>(to:)();
    v102 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v103 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 251, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    v104._countAndFlagsBits = 0xD00000000000002ELL;
    v104._object = (void *)0x800000023D9C5870;
    String.append(_:)(v104);
    swift_beginAccess();
    v3 = v223;
    Float.write<A>(to:)();
    v229 = v102;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v105 = v103;
    v7 = v222;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 252, (uint64_t)&v227, v105);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
  }
  v106 = *(_QWORD *)(v3 + v7);
  v107 = (_BYTE *)(v106 + 68);
  swift_beginAccess();
  v108 = *(unsigned __int8 *)(v106 + 68);
  v109 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (v108 != *(unsigned __int8 *)(v109 + 68))
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v227 = 0xD000000000000014;
    v228 = 0x800000023D9C54A0;
    if (*v107)
      v110 = 1702195828;
    else
      v110 = 0x65736C6166;
    v111 = 0xE400000000000000;
    if (*v107)
      v112 = 0xE400000000000000;
    else
      v112 = 0xE500000000000000;
    v113 = v112;
    String.append(_:)(*(Swift::String *)&v110);
    swift_bridgeObjectRelease();
    v114 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 257, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    v7 = v222;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v227 = 0xD000000000000015;
    v228 = 0x800000023D9C54C0;
    v115 = *(_QWORD *)(a1 + v10);
    swift_beginAccess();
    if (*(_BYTE *)(v115 + 68))
      v116 = 1702195828;
    else
      v116 = 0x65736C6166;
    if (!*(_BYTE *)(v115 + 68))
      v111 = 0xE500000000000000;
    v117 = v111;
    String.append(_:)(*(Swift::String *)&v116);
    v3 = v223;
    swift_bridgeObjectRelease();
    v229 = v114;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 258, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
    v106 = *(_QWORD *)(v223 + v222);
  }
  v118 = (_BYTE *)(v106 + 69);
  swift_beginAccess();
  v119 = *(unsigned __int8 *)(v106 + 69);
  v120 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (v119 != *(unsigned __int8 *)(v120 + 69))
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v227 = 0xD00000000000001BLL;
    v228 = 0x800000023D9C54E0;
    if (*v118)
      v121 = 1702195828;
    else
      v121 = 0x65736C6166;
    v122 = 0xE400000000000000;
    if (*v118)
      v123 = 0xE400000000000000;
    else
      v123 = 0xE500000000000000;
    v124 = v123;
    String.append(_:)(*(Swift::String *)&v121);
    swift_bridgeObjectRelease();
    v125 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 263, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    v7 = v222;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v227 = 0xD00000000000001CLL;
    v228 = 0x800000023D9C5500;
    v126 = *(_QWORD *)(a1 + v10);
    swift_beginAccess();
    if (*(_BYTE *)(v126 + 69))
      v127 = 1702195828;
    else
      v127 = 0x65736C6166;
    if (!*(_BYTE *)(v126 + 69))
      v122 = 0xE500000000000000;
    v128 = v122;
    String.append(_:)(*(Swift::String *)&v127);
    v3 = v223;
    swift_bridgeObjectRelease();
    v229 = v125;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 264, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
  }
  v129 = *(_QWORD *)(v3 + v7);
  v130 = (_BYTE *)(v129 + 70);
  swift_beginAccess();
  v131 = *(unsigned __int8 *)(v129 + 70);
  v132 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (v131 != *(unsigned __int8 *)(v132 + 70))
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v227 = 0xD00000000000001FLL;
    v228 = 0x800000023D9C5520;
    if (*v130)
      v133 = 1702195828;
    else
      v133 = 0x65736C6166;
    v134 = 0xE400000000000000;
    if (*v130)
      v135 = 0xE400000000000000;
    else
      v135 = 0xE500000000000000;
    v136 = v135;
    String.append(_:)(*(Swift::String *)&v133);
    swift_bridgeObjectRelease();
    v137 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 269, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    v7 = v222;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v227 = 0xD000000000000020;
    v228 = 0x800000023D9C5540;
    v138 = *(_QWORD *)(a1 + v10);
    swift_beginAccess();
    if (*(_BYTE *)(v138 + 70))
      v139 = 1702195828;
    else
      v139 = 0x65736C6166;
    if (!*(_BYTE *)(v138 + 70))
      v134 = 0xE500000000000000;
    v140 = v134;
    String.append(_:)(*(Swift::String *)&v139);
    v3 = v223;
    swift_bridgeObjectRelease();
    v229 = v137;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 270, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
    v129 = *(_QWORD *)(v223 + v222);
  }
  v141 = (_BYTE *)(v129 + 71);
  swift_beginAccess();
  v142 = *(unsigned __int8 *)(v129 + 71);
  v143 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (v142 != *(unsigned __int8 *)(v143 + 71))
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v227 = 0xD00000000000001DLL;
    v228 = 0x800000023D9C5570;
    if (*v141)
      v144 = 1702195828;
    else
      v144 = 0x65736C6166;
    v145 = 0xE400000000000000;
    if (*v141)
      v146 = 0xE400000000000000;
    else
      v146 = 0xE500000000000000;
    v147 = v146;
    String.append(_:)(*(Swift::String *)&v144);
    swift_bridgeObjectRelease();
    v148 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 275, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    v7 = v222;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v227 = 0xD00000000000001ELL;
    v228 = 0x800000023D9C5590;
    v149 = *(_QWORD *)(a1 + v10);
    swift_beginAccess();
    if (*(_BYTE *)(v149 + 71))
      v150 = 1702195828;
    else
      v150 = 0x65736C6166;
    if (!*(_BYTE *)(v149 + 71))
      v145 = 0xE500000000000000;
    v151 = v145;
    String.append(_:)(*(Swift::String *)&v150);
    v3 = v223;
    swift_bridgeObjectRelease();
    v229 = v148;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 276, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
  }
  v152 = *(_QWORD *)(v3 + v7);
  swift_beginAccess();
  v153 = *(float *)(v152 + 72);
  v154 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v153, *(float *)(v154 + 72)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v155._countAndFlagsBits = 0xD00000000000001ALL;
    v155._object = (void *)0x800000023D9C5800;
    String.append(_:)(v155);
    Float.write<A>(to:)();
    v156 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v157 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 281, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v158._countAndFlagsBits = 0xD00000000000001BLL;
    v158._object = (void *)0x800000023D9C5820;
    String.append(_:)(v158);
    swift_beginAccess();
    v3 = v223;
    Float.write<A>(to:)();
    v229 = v156;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v159 = v157;
    v7 = v222;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 282, (uint64_t)&v227, v159);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
    v152 = *(_QWORD *)(v223 + v222);
  }
  v160 = (_BYTE *)(v152 + 80);
  swift_beginAccess();
  v161 = *(unsigned __int8 *)(v152 + 80);
  v162 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (v161 != *(unsigned __int8 *)(v162 + 80))
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v227 = 0xD000000000000014;
    v228 = 0x800000023D9C55B0;
    if (*v160)
      v163 = 1702195828;
    else
      v163 = 0x65736C6166;
    v164 = 0xE400000000000000;
    if (*v160)
      v165 = 0xE400000000000000;
    else
      v165 = 0xE500000000000000;
    v166 = v165;
    String.append(_:)(*(Swift::String *)&v163);
    swift_bridgeObjectRelease();
    v167 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 287, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    v7 = v222;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v227 = 0xD000000000000015;
    v228 = 0x800000023D9C55D0;
    v168 = *(_QWORD *)(a1 + v10);
    swift_beginAccess();
    if (*(_BYTE *)(v168 + 80))
      v169 = 1702195828;
    else
      v169 = 0x65736C6166;
    if (!*(_BYTE *)(v168 + 80))
      v164 = 0xE500000000000000;
    v170 = v164;
    String.append(_:)(*(Swift::String *)&v169);
    v3 = v223;
    swift_bridgeObjectRelease();
    v229 = v167;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 288, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
  }
  v171 = *(_QWORD *)(v3 + v7);
  swift_beginAccess();
  v172 = *(float *)(v171 + 76);
  v173 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v172, *(float *)(v173 + 76)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    v174._countAndFlagsBits = 0xD000000000000015;
    v174._object = (void *)0x800000023D9C57C0;
    String.append(_:)(v174);
    Float.write<A>(to:)();
    v175 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v176 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 293, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v177._countAndFlagsBits = 0xD000000000000016;
    v177._object = (void *)0x800000023D9C57E0;
    String.append(_:)(v177);
    swift_beginAccess();
    v3 = v223;
    Float.write<A>(to:)();
    v229 = v175;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v178 = v176;
    v7 = v222;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 294, (uint64_t)&v227, v178);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
    v171 = *(_QWORD *)(v223 + v222);
  }
  swift_beginAccess();
  v179 = *(float *)(v171 + 84);
  v180 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v179, *(float *)(v180 + 84)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    v181._countAndFlagsBits = 0xD000000000000024;
    v181._object = (void *)0x800000023D9C5760;
    String.append(_:)(v181);
    Float.write<A>(to:)();
    v182 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v183 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 299, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    v184._countAndFlagsBits = 0xD000000000000025;
    v184._object = (void *)0x800000023D9C5790;
    String.append(_:)(v184);
    swift_beginAccess();
    v3 = v223;
    Float.write<A>(to:)();
    v229 = v182;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v185 = v183;
    v7 = v222;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 300, (uint64_t)&v227, v185);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
  }
  v186 = *(_QWORD *)(v3 + v7);
  swift_beginAccess();
  v187 = *(float *)(v186 + 88);
  v188 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v187, *(float *)(v188 + 88)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v189._countAndFlagsBits = 0xD000000000000021;
    v189._object = (void *)0x800000023D9C5700;
    String.append(_:)(v189);
    Float.write<A>(to:)();
    v190 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v191 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 305, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    v192._countAndFlagsBits = 0xD000000000000022;
    v192._object = (void *)0x800000023D9C5730;
    String.append(_:)(v192);
    swift_beginAccess();
    v3 = v223;
    Float.write<A>(to:)();
    v229 = v190;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v193 = v191;
    v7 = v222;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 306, (uint64_t)&v227, v193);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
    v186 = *(_QWORD *)(v223 + v222);
  }
  v194 = (_QWORD *)(v186 + 96);
  swift_beginAccess();
  v195 = *(_QWORD *)(v186 + 96);
  v196 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (v195 != *(_QWORD *)(v196 + 96))
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v227 = 0xD00000000000001FLL;
    v228 = 0x800000023D9C55F0;
    *(_QWORD *)&v224 = *v194;
    v197._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v197);
    swift_bridgeObjectRelease();
    v198 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v199 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 311, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v227 = 0xD000000000000020;
    v228 = 0x800000023D9C5610;
    v200 = *(_QWORD *)(a1 + v10);
    swift_beginAccess();
    *(_QWORD *)&v224 = *(_QWORD *)(v200 + 96);
    v201._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v201);
    swift_bridgeObjectRelease();
    v229 = v198;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v202 = v199;
    v7 = v222;
    v3 = v223;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 312, (uint64_t)&v227, v202);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
  }
  v203 = *(_QWORD *)(v3 + v7);
  v204 = (_BYTE *)(v203 + 104);
  swift_beginAccess();
  v205 = *(unsigned __int8 *)(v203 + 104);
  v206 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (v205 != *(unsigned __int8 *)(v206 + 104))
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    v227 = 0xD000000000000023;
    v228 = 0x800000023D9C5640;
    if (*v204)
      v207 = 1702195828;
    else
      v207 = 0x65736C6166;
    v208 = 0xE400000000000000;
    if (*v204)
      v209 = 0xE400000000000000;
    else
      v209 = 0xE500000000000000;
    v210 = v209;
    String.append(_:)(*(Swift::String *)&v207);
    swift_bridgeObjectRelease();
    v211 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 317, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v227 = 0xD000000000000024;
    v228 = 0x800000023D9C5670;
    v212 = *(_QWORD *)(a1 + v10);
    swift_beginAccess();
    if (*(_BYTE *)(v212 + 104))
      v213 = 1702195828;
    else
      v213 = 0x65736C6166;
    if (!*(_BYTE *)(v212 + 104))
      v208 = 0xE500000000000000;
    v214 = v208;
    String.append(_:)(*(Swift::String *)&v213);
    swift_bridgeObjectRelease();
    v229 = v211;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 318, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v13 = 0;
    v203 = *(_QWORD *)(v223 + v222);
  }
  swift_beginAccess();
  v215 = *(float *)(v203 + 108);
  v216 = *(_QWORD *)(a1 + v10);
  swift_beginAccess();
  if (vabds_f32(v215, *(float *)(v216 + 108)) > a2)
  {
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    v217._countAndFlagsBits = 0xD000000000000025;
    v217._object = (void *)0x800000023D9C56A0;
    String.append(_:)(v217);
    Float.write<A>(to:)();
    v218 = MEMORY[0x24BEE0D00];
    v229 = MEMORY[0x24BEE0D00];
    type metadata accessor for HandyLoggerNeo();
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    v219 = MEMORY[0x24BEE4AF8];
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 323, (uint64_t)&v227, MEMORY[0x24BEE4AF8]);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    v227 = 0;
    v228 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v220._countAndFlagsBits = 0xD000000000000026;
    v220._object = (void *)0x800000023D9C56D0;
    String.append(_:)(v220);
    swift_beginAccess();
    Float.write<A>(to:)();
    v229 = v218;
    v224 = xmmword_23D9A8970;
    v225 = 0;
    v226 = 0;
    static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v224, 0xD00000000000005ELL, 0x800000023D9C52A0, 324, (uint64_t)&v227, v219);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v227);
    return 0;
  }
  return v13;
}

uint64_t HandDescriptorInternal.cropBBox.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandDescriptorInternal.cropBBox.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*HandDescriptorInternal.cropBBox.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptorInternal.occludedByTheOtherHand.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t HandDescriptorInternal.occludedByTheOtherHand.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*HandDescriptorInternal.occludedByTheOtherHand.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptorInternal.pinchData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 72);
  v10 = *(_QWORD *)(v1 + 80);
  v11 = *(_QWORD *)(v1 + 88);
  v12 = *(_QWORD *)(v1 + 96);
  v13 = *(_QWORD *)(v1 + 104);
  v14 = *(_QWORD *)(v1 + 112);
  v15 = *(_QWORD *)(v1 + 120);
  v16 = *(_DWORD *)(v1 + 128);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v15;
  *(_DWORD *)(a1 + 112) = v16;
  return outlined copy of PinchInternalData?(v2, v3, v4, v5, v6);
}

uint64_t outlined copy of PinchInternalData?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 HandDescriptorInternal.pinchData.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  __n128 result;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v10 = a1[1];
  v11 = *a1;
  v9 = a1[2];
  v7 = a1[4];
  v8 = a1[3];
  v6 = (__n128)a1[5];
  v2 = *((_QWORD *)a1 + 12);
  v3 = *((_QWORD *)a1 + 13);
  v4 = *((_DWORD *)a1 + 28);
  outlined consume of PinchInternalData?(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
  *(_OWORD *)(v1 + 16) = v11;
  *(_OWORD *)(v1 + 32) = v10;
  *(_OWORD *)(v1 + 48) = v9;
  *(_OWORD *)(v1 + 64) = v8;
  result = v6;
  *(_OWORD *)(v1 + 80) = v7;
  *(__n128 *)(v1 + 96) = v6;
  *(_QWORD *)(v1 + 112) = v2;
  *(_QWORD *)(v1 + 120) = v3;
  *(_DWORD *)(v1 + 128) = v4;
  return result;
}

uint64_t outlined consume of PinchInternalData?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*HandDescriptorInternal.pinchData.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptorInternal.localizers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HandDescriptorInternal.localizers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 136) = a1;
  return result;
}

uint64_t (*HandDescriptorInternal.localizers.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptorInternal.middleDoubleTapData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 152);
  *a1 = *(_QWORD *)(v1 + 144);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t HandDescriptorInternal.middleDoubleTapData.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 144) = v2;
  *(_QWORD *)(v1 + 152) = v3;
  return result;
}

uint64_t (*HandDescriptorInternal.middleDoubleTapData.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptorInternal.recoverRepetitivePinchInternalData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[888];

  outlined init with take of ImageData?(v1 + 160, (uint64_t)v4, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
  return outlined init with take of ImageData?((uint64_t)v4, a1, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
}

uint64_t HandDescriptorInternal.recoverRepetitivePinchInternalData.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[896];

  outlined init with take of ImageData?(a1, (uint64_t)v3, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
  return outlined init with take of ImageData?((uint64_t)v3, v1 + 160, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
}

uint64_t (*HandDescriptorInternal.recoverRepetitivePinchInternalData.modify())()
{
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptorInternal.monoHand.getter()
{
  type metadata accessor for HandDescriptorInternal();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for HandDescriptorInternal()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HandDescriptorInternal;
  if (!type metadata singleton initialization cache for HandDescriptorInternal)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t HandDescriptorInternal.monoHand.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for HandDescriptorInternal() + 56);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*HandDescriptorInternal.monoHand.modify())(_QWORD)
{
  type metadata accessor for HandDescriptorInternal();
  return _s5Hands13PoseImageCropVSgWOi_;
}

uint64_t HandDescriptorInternal.init(protoBuf:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  char *v96;
  void (*v97)(void);
  uint64_t v98;
  void (*v99)(void);
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t);
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _BOOL8 v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  __int128 v143;
  int v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  unint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t (*v173)(uint64_t, uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t (*v183)(uint64_t, uint64_t, uint64_t);
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t (*v201)(uint64_t, uint64_t, uint64_t);
  unint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  unint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t (*v227)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  void (*v233)(char *, uint64_t, uint64_t);
  _QWORD v234[2];
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void (*v238)(void);
  uint64_t v239;
  void (*v240)(void);
  uint64_t v241;
  void (*v242)(void);
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  _BYTE *v253;
  _BYTE *v254;
  uint64_t v255;
  unint64_t v256;
  char *v257;
  void (*v258)(char *, uint64_t, uint64_t);
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  unint64_t *v297;
  __int128 v298;
  _BYTE v299[888];
  _OWORD v300[77];
  _BYTE v301[896];

  v285 = a1;
  v3 = type metadata accessor for MonoHandPB(0);
  v261 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v4);
  v291 = (uint64_t)v234 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
  v8 = MEMORY[0x24BDAC7A8](v6, v7);
  v246 = (uint64_t)v234 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8, v10);
  v260 = (_QWORD *)((char *)v234 - v12);
  MEMORY[0x24BDAC7A8](v11, v13);
  v281 = (uint64_t)v234 - v14;
  v15 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v282 = *(_QWORD *)(v15 - 8);
  v283 = v15;
  v17 = MEMORY[0x24BDAC7A8](v15, v16);
  v19 = (char *)v234 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17, v20);
  v22 = (unint64_t)v234 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  v25 = MEMORY[0x24BDAC7A8](v23, v24);
  v244 = (uint64_t)v234 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v25, v27);
  v245 = (uint64_t)v234 - v29;
  MEMORY[0x24BDAC7A8](v28, v30);
  v278 = (uint64_t)v234 - v31;
  v32 = type metadata accessor for UnsureInternalPB(0);
  v33 = *(_QWORD *)(v32 - 8);
  v35 = MEMORY[0x24BDAC7A8](v32, v34);
  v257 = (char *)v234 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35, v37);
  v256 = (unint64_t)v234 - v38;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
  v41 = MEMORY[0x24BDAC7A8](v39, v40);
  v262 = (uint64_t)v234 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = MEMORY[0x24BDAC7A8](v41, v43);
  v243 = (uint64_t)v234 - v45;
  MEMORY[0x24BDAC7A8](v44, v46);
  v275 = (uint64_t)v234 - v47;
  v48 = type metadata accessor for ActionInternalPB(0);
  v49 = *(_QWORD *)(v48 - 8);
  v51 = MEMORY[0x24BDAC7A8](v48, v50);
  v254 = (char *)v234 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v51, v53);
  v253 = (char *)v234 - v54;
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
  v57 = MEMORY[0x24BDAC7A8](v55, v56);
  v239 = (uint64_t)v234 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = MEMORY[0x24BDAC7A8](v57, v59);
  v252 = (char *)v234 - v61;
  MEMORY[0x24BDAC7A8](v60, v62);
  v272 = (uint64_t)v234 - v63;
  v64 = type metadata accessor for RecoverRepetitivePinchInternalDataPB(0);
  v270 = *(_QWORD *)(v64 - 8);
  v271 = v64;
  MEMORY[0x24BDAC7A8](v64, v65);
  v250 = (uint64_t)v234 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  v69 = MEMORY[0x24BDAC7A8](v67, v68);
  v237 = (uint64_t)v234 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v69, v71);
  v269 = (uint64_t)v234 - v72;
  v73 = type metadata accessor for MiddleDoubleTapInternalPB(0);
  v267 = *(_QWORD *)(v73 - 8);
  v268 = v73;
  MEMORY[0x24BDAC7A8](v73, v74);
  v248 = (_QWORD *)((char *)v234 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  v78 = MEMORY[0x24BDAC7A8](v76, v77);
  v236 = (uint64_t)v234 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v78, v80);
  v266 = (uint64_t)v234 - v81;
  v82 = type metadata accessor for PinchInternalDataPB();
  v264 = *(_QWORD *)(v82 - 8);
  v265 = v82;
  MEMORY[0x24BDAC7A8](v82, v83);
  v247 = (uint64_t)v234 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for Coordinate2DPB(0);
  v286 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85, v86);
  v88 = (_QWORD *)((char *)v234 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0));
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInternalDataPB?);
  v91 = MEMORY[0x24BDAC7A8](v89, v90);
  v235 = (uint64_t)v234 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v91, v93);
  v263 = (uint64_t)v234 - v94;
  *((_DWORD *)a2 + 32) = 0;
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 7) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  a2[18] = 0;
  a2[19] = 0;
  _s5Hands34RecoverRepetitivePinchInternalDataVSgWOi0_((uint64_t)v301);
  v249 = (uint64_t)(a2 + 20);
  outlined init with take of ImageData?((uint64_t)v301, (uint64_t)(a2 + 20), &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
  v95 = (int *)type metadata accessor for HandDescriptorInternal();
  v96 = (char *)a2 + v95[10];
  v273 = v49;
  v274 = v48;
  v97 = *(void (**)(void))(v49 + 56);
  v251 = (uint64_t)v96;
  v238 = v97;
  v97();
  v98 = (uint64_t)a2 + v95[11];
  v276 = v33;
  v277 = v32;
  v240 = *(void (**)(void))(v33 + 56);
  v241 = v98;
  v240();
  v99 = *(void (**)(void))(v282 + 56);
  v255 = (uint64_t)a2 + v95[12];
  v242 = v99;
  v99();
  v100 = (char *)a2 + v95[13];
  v101 = type metadata accessor for HomePinchInternalPB(0);
  v279 = *(_QWORD *)(v101 - 8);
  v280 = v101;
  v258 = *(void (**)(char *, uint64_t, uint64_t))(v279 + 56);
  v259 = (uint64_t)v100;
  v258(v100, 1, 1);
  v102 = MEMORY[0x24BEE4AF8];
  v293 = v95[14];
  *(unint64_t *)((char *)a2 + v293) = MEMORY[0x24BEE4AF8];
  v284 = *(int *)(type metadata accessor for HandDescriptorInternalPB(0) + 20);
  v103 = *(_QWORD *)(v285 + v284);
  swift_beginAccess();
  *((_BYTE *)a2 + 8) = *(_BYTE *)(v103 + 24);
  *a2 = specialized Dictionary.init(dictionaryLiteral:)(v102);
  a2[17] = specialized Dictionary.init(dictionaryLiteral:)(v102);
  swift_beginAccess();
  v104 = *(_QWORD *)(v103 + 16);
  v105 = *(_QWORD *)(v104 + 16);
  v297 = a2;
  v292 = v22;
  *(_QWORD *)&v290 = v105;
  if (v105)
  {
    v106 = *(_QWORD *)(type metadata accessor for CropBoxPB(0) - 8);
    v107 = *(unsigned __int8 *)(v106 + 80);
    v288 = *(_QWORD *)(v106 + 72);
    *(_QWORD *)&v289 = v104 + ((v107 + 32) & ~v107);
    v234[1] = v104;
    swift_bridgeObjectRetain();
    v108 = 0;
    v109 = type metadata accessor for Coordinate2DPB;
    v287 = v19;
    while (1)
    {
      *(_QWORD *)&v296 = v108;
      v111 = v289 + v288 * v108;
      v112 = *(unsigned __int8 *)(v111 + 16);
      v113 = *(_QWORD *)v111;
      *(_QWORD *)&v298 = *(_QWORD *)(v111 + 8);
      v114 = *(_QWORD *)(v113 + 16);
      if (v114)
      {
        LODWORD(v295) = v112;
        *(_QWORD *)&v300[0] = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v114, 0);
        v115 = *(unsigned __int8 *)(v286 + 80);
        *(_QWORD *)&v294 = v113;
        v116 = v113 + ((v115 + 32) & ~v115);
        v117 = *(_QWORD *)(v286 + 72);
        v19 = *(char **)&v300[0];
        do
        {
          outlined init with copy of TrackingUpdateDataPB(v116, (uint64_t)v88, type metadata accessor for Coordinate2DPB);
          v118 = *v88;
          outlined destroy of Matrix3x3PB((uint64_t)v88, type metadata accessor for Coordinate2DPB);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1);
            v19 = *(char **)&v300[0];
          }
          v22 = *((_QWORD *)v19 + 2);
          v119 = *((_QWORD *)v19 + 3);
          v113 = v22 + 1;
          if (v22 >= v119 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v119 > 1, v22 + 1, 1);
            v19 = *(char **)&v300[0];
          }
          *((_QWORD *)v19 + 2) = v113;
          *(_QWORD *)&v19[8 * v22 + 32] = v118;
          v116 += v117;
          --v114;
        }
        while (v114);
        swift_bridgeObjectRelease();
        a2 = v297;
        v112 = v295;
      }
      else
      {
        v19 = (char *)MEMORY[0x24BEE4AF8];
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v300[0] = *a2;
      v121 = *(_QWORD **)&v300[0];
      *a2 = 0x8000000000000000;
      v123 = specialized __RawDictionaryStorage.find<A>(_:)(v298, v112);
      v124 = v121[2];
      v125 = (v122 & 1) == 0;
      v126 = v124 + v125;
      if (__OFADD__(v124, v125))
      {
        __break(1u);
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      v22 = v122;
      if (v121[3] >= v126)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v126, isUniquelyReferenced_nonNull_native);
        v127 = specialized __RawDictionaryStorage.find<A>(_:)(v298, v112);
        if ((v22 & 1) != (v128 & 1))
        {
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        v123 = v127;
      }
      isUniquelyReferenced_nonNull_native = v296;
      v121 = *(_QWORD **)&v300[0];
      if ((v22 & 1) != 0)
      {
        v110 = *(_QWORD *)(*(_QWORD *)&v300[0] + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v110 + 8 * v123) = v19;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)&v300[0] + 8 * (v123 >> 6) + 64) |= 1 << v123;
        v129 = v121[6] + 16 * v123;
        *(_QWORD *)v129 = v298;
        *(_BYTE *)(v129 + 8) = v112;
        *(_QWORD *)(v121[7] + 8 * v123) = v19;
        v130 = v121[2];
        v131 = __OFADD__(v130, 1);
        v132 = v130 + 1;
        if (v131)
          goto LABEL_84;
        v121[2] = v132;
      }
      v108 = isUniquelyReferenced_nonNull_native + 1;
      a2 = v297;
      *v297 = (unint64_t)v121;
      swift_bridgeObjectRelease();
      v19 = v287;
      v22 = v292;
      if (v108 == (_QWORD)v290)
      {
        swift_bridgeObjectRelease();
        v103 = *(_QWORD *)(v285 + v284);
        break;
      }
    }
  }
  v133 = v103
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchData;
  swift_beginAccess();
  v134 = v263;
  outlined init with copy of (Int32, Matrix2dPB)(v133, v263, &demangling cache variable for type metadata for PinchInternalDataPB?);
  v135 = v265;
  v136 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v264 + 48);
  LODWORD(v133) = v136(v134, 1, v265);
  outlined destroy of Coordinate3DPB?(v134, &demangling cache variable for type metadata for PinchInternalDataPB?);
  if ((_DWORD)v133 == 1)
  {
    v137 = *(_QWORD *)(v285 + v284);
  }
  else
  {
    v137 = *(_QWORD *)(v285 + v284);
    v138 = v137
         + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchData;
    swift_beginAccess();
    v139 = v235;
    outlined init with copy of (Int32, Matrix2dPB)(v138, v235, &demangling cache variable for type metadata for PinchInternalDataPB?);
    if (v136(v139, 1, v135) == 1)
    {
      v140 = v247;
      *(_QWORD *)(v247 + 16) = 0;
      *(_QWORD *)v140 = 0;
      *(_WORD *)(v140 + 8) = 0;
      *(_BYTE *)(v140 + 24) = 1;
      v141 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v140 + 32) = MEMORY[0x24BEE4AF8];
      *(_QWORD *)(v140 + 40) = v141;
      *(_QWORD *)(v140 + 48) = v141;
      *(_QWORD *)(v140 + 56) = v141;
      *(_QWORD *)(v140 + 72) = v141;
      *(_QWORD *)(v140 + 80) = 0;
      *(_BYTE *)(v140 + 88) = 1;
      *(_QWORD *)(v140 + 96) = 0;
      *(_DWORD *)(v140 + 92) = 0;
      *(_DWORD *)(v140 + 64) = 0;
      UnknownStorage.init()();
      v142 = (_QWORD *)(v140 + *(int *)(v135 + 80));
      *v142 = 0;
      v142[1] = 0;
      outlined destroy of Coordinate3DPB?(v139, &demangling cache variable for type metadata for PinchInternalDataPB?);
    }
    else
    {
      v140 = v247;
      outlined init with take of Matrix2dPB(v139, v247, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
    }
    PinchInternalData.init(protoBuf:)(v140, (uint64_t)v300);
    v298 = v300[0];
    v295 = v300[2];
    v296 = v300[1];
    v294 = v300[3];
    v289 = v300[5];
    v290 = v300[4];
    v143 = v300[6];
    v144 = v300[7];
    outlined consume of PinchInternalData?(a2[2], a2[3], a2[4], a2[5], a2[6]);
    v145 = v296;
    *((_OWORD *)a2 + 1) = v298;
    *((_OWORD *)a2 + 2) = v145;
    v146 = v294;
    *((_OWORD *)a2 + 3) = v295;
    *((_OWORD *)a2 + 4) = v146;
    v147 = v289;
    *((_OWORD *)a2 + 5) = v290;
    *((_OWORD *)a2 + 6) = v147;
    *((_OWORD *)a2 + 7) = v143;
    *((_DWORD *)a2 + 32) = v144;
  }
  v148 = (uint64_t *)(v137
                   + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__localizers);
  swift_beginAccess();
  v149 = *v148;
  swift_bridgeObjectRetain();
  v150 = MEMORY[0x24BEE4AF8];
  v151 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)&v300[0] = v151;
  v152 = *(_QWORD *)(v149 + 16);
  if (v152)
  {
    v153 = *(_QWORD *)(type metadata accessor for LocalizerPB(0) - 8);
    v154 = v149 + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
    v155 = *(_QWORD *)(v153 + 72);
    swift_bridgeObjectRetain();
    do
    {
      closure #1 in static HandDescriptorInternal.parseLocalizers(from:)(v154, (uint64_t *)v300);
      v154 += v155;
      --v152;
    }
    while (v152);
    swift_bridgeObjectRelease_n();
    v156 = *(_QWORD *)&v300[0];
    v22 = v292;
  }
  else
  {
    v156 = v151;
    swift_bridgeObjectRelease();
  }
  v157 = v297;
  swift_bridgeObjectRelease();
  v157[17] = v156;
  v158 = v137
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__middleDoubleTap;
  swift_beginAccess();
  v159 = v266;
  outlined init with copy of (Int32, Matrix2dPB)(v158, v266, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  v160 = v268;
  v161 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v267 + 48);
  LODWORD(v158) = v161(v159, 1, v268);
  outlined destroy of Coordinate3DPB?(v159, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  v162 = *(_QWORD *)(v285 + v284);
  if ((_DWORD)v158 != 1)
  {
    v163 = v162
         + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__middleDoubleTap;
    swift_beginAccess();
    v164 = v163;
    v165 = v236;
    outlined init with copy of (Int32, Matrix2dPB)(v164, v236, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
    if (v161(v165, 1, v160) == 1)
    {
      v166 = v248;
      *v248 = 0;
      v166[1] = v150;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v165, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
    }
    else
    {
      v166 = v248;
      outlined init with take of Matrix2dPB(v165, (uint64_t)v248, type metadata accessor for MiddleDoubleTapInternalPB);
    }
    v167 = v297;
    v169 = *v166;
    v168 = v166[1];
    swift_bridgeObjectRetain();
    outlined destroy of Matrix3x3PB((uint64_t)v166, type metadata accessor for MiddleDoubleTapInternalPB);
    swift_bridgeObjectRelease();
    v167[18] = v169;
    v167[19] = v168;
  }
  v170 = v162
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__recoverRepetitivePinchInternalData;
  swift_beginAccess();
  v171 = v269;
  outlined init with copy of (Int32, Matrix2dPB)(v170, v269, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  v172 = v271;
  v173 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v270 + 48);
  LODWORD(v170) = v173(v171, 1, v271);
  outlined destroy of Coordinate3DPB?(v171, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  v174 = *(_QWORD *)(v285 + v284);
  v175 = v274;
  if ((_DWORD)v170 != 1)
  {
    v176 = v174
         + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__recoverRepetitivePinchInternalData;
    swift_beginAccess();
    v177 = v237;
    outlined init with copy of (Int32, Matrix2dPB)(v176, v237, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
    if (v173(v177, 1, v172) == 1)
    {
      v178 = v250;
      UnknownStorage.init()();
      v179 = *(int *)(v172 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v178 + v179) = static RecoverRepetitivePinchInternalDataPB._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of Coordinate3DPB?(v177, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
    }
    else
    {
      v178 = v250;
      outlined init with take of Matrix2dPB(v177, v250, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
    }
    v180 = v249;
    RecoverRepetitivePinchInternalData.init(protoBuf:)(v178, (uint64_t)v299);
    memcpy(v300, v299, 0x373uLL);
    _s5Hands13PoseImageCropVSgWOi_(v300);
    outlined init with take of ImageData?((uint64_t)v300, v180, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
  }
  v181 = v174
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__actionInternalData;
  swift_beginAccess();
  v182 = v272;
  outlined init with copy of (Int32, Matrix2dPB)(v181, v272, &demangling cache variable for type metadata for ActionInternalPB?);
  v183 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v273 + 48);
  LODWORD(v181) = v183(v182, 1, v175);
  outlined destroy of Coordinate3DPB?(v182, &demangling cache variable for type metadata for ActionInternalPB?);
  if ((_DWORD)v181 != 1)
  {
    v184 = *(_QWORD *)(v285 + v284)
         + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__actionInternalData;
    swift_beginAccess();
    v185 = v184;
    v186 = v239;
    outlined init with copy of (Int32, Matrix2dPB)(v185, v239, &demangling cache variable for type metadata for ActionInternalPB?);
    if (v183(v186, 1, v175) == 1)
    {
      v187 = v253;
      *v253 = 0;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v186, &demangling cache variable for type metadata for ActionInternalPB?);
    }
    else
    {
      v187 = v253;
      outlined init with take of Matrix2dPB(v186, (uint64_t)v253, type metadata accessor for ActionInternalPB);
    }
    v188 = (uint64_t)v254;
    v190 = v251;
    v189 = (uint64_t)v252;
    *v254 = 0;
    UnknownStorage.init()();
    outlined destroy of Matrix3x3PB(v188, type metadata accessor for ActionInternalPB);
    outlined init with take of Matrix2dPB((uint64_t)v187, v189, type metadata accessor for ActionInternalPB);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v238)(v189, 0, 1, v175);
    outlined assign with take of HomePinchInternalPB?(v189, v190, &demangling cache variable for type metadata for ActionInternalPB?);
  }
  v191 = *(_QWORD *)(v285 + v284);
  v192 = v191
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__unsureInternalData;
  swift_beginAccess();
  v193 = v275;
  outlined init with copy of (Int32, Matrix2dPB)(v192, v275, &demangling cache variable for type metadata for UnsureInternalPB?);
  v113 = v277;
  v194 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v276 + 48);
  LODWORD(v192) = v194(v193, 1, v277);
  outlined destroy of Coordinate3DPB?(v193, &demangling cache variable for type metadata for UnsureInternalPB?);
  isUniquelyReferenced_nonNull_native = MEMORY[0x24BEE4AF8];
  if ((_DWORD)v192 != 1)
  {
    v195 = v191
         + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__unsureInternalData;
    swift_beginAccess();
    v196 = v262;
    outlined init with copy of (Int32, Matrix2dPB)(v195, v262, &demangling cache variable for type metadata for UnsureInternalPB?);
    v112 = (unint64_t)&unk_256CA3000;
    if (v194(v196, 1, v113) == 1)
    {
      v123 = v256;
      UnknownStorage.init()();
      v197 = *(int *)(v113 + 20);
      v121 = v257;
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v123 + v197) = static UnsureInternalPB._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of Coordinate3DPB?(v262, &demangling cache variable for type metadata for UnsureInternalPB?);
    }
    else
    {
      v123 = v256;
      outlined init with take of Matrix2dPB(v196, v256, type metadata accessor for UnsureInternalPB);
      v121 = v257;
    }
    UnknownStorage.init()();
    v109 = (uint64_t (*)(uint64_t))*(int *)(v113 + 20);
    if (one-time initialization token for defaultInstance != -1)
LABEL_85:
      swift_once();
    *(_QWORD *)((char *)v109 + (_QWORD)v121) = *(_QWORD *)(v112 + 360);
    swift_retain();
    outlined destroy of Matrix3x3PB((uint64_t)v121, type metadata accessor for UnsureInternalPB);
    v198 = v243;
    outlined init with take of Matrix2dPB(v123, v243, type metadata accessor for UnsureInternalPB);
    ((void (*)(uint64_t, _QWORD, uint64_t, unint64_t))v240)(v198, 0, 1, v113);
    outlined assign with take of HomePinchInternalPB?(v198, v241, &demangling cache variable for type metadata for UnsureInternalPB?);
    v191 = *(_QWORD *)(v285 + v284);
  }
  v199 = v191
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__objectInteractionStateInternalPb;
  swift_beginAccess();
  v200 = v278;
  outlined init with copy of (Int32, Matrix2dPB)(v199, v278, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  v201 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v282 + 48);
  LODWORD(v199) = v201(v200, 1, v283);
  outlined destroy of Coordinate3DPB?(v200, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  v202 = v297;
  if ((_DWORD)v199 != 1)
  {
    v203 = *(_QWORD *)(v285 + v284)
         + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__objectInteractionStateInternalPb;
    swift_beginAccess();
    v204 = v244;
    outlined init with copy of (Int32, Matrix2dPB)(v203, v244, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    if (v201(v204, 1, v283) == 1)
    {
      UnknownStorage.init()();
      v205 = *(int *)(v283 + 20);
      v206 = v255;
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v22 + v205) = static ObjectInteractionStateInternalPB._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of Coordinate3DPB?(v204, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v204, v22, type metadata accessor for ObjectInteractionStateInternalPB);
      v206 = v255;
    }
    UnknownStorage.init()();
    v207 = *(int *)(v283 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v19[v207] = static ObjectInteractionStateInternalPB._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of Matrix3x3PB((uint64_t)v19, type metadata accessor for ObjectInteractionStateInternalPB);
    v208 = v245;
    outlined init with take of Matrix2dPB(v22, v245, type metadata accessor for ObjectInteractionStateInternalPB);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v242)(v208, 0, 1, v283);
    outlined assign with take of HomePinchInternalPB?(v208, v206, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  }
  v209 = v293;
  swift_bridgeObjectRelease();
  *(unint64_t *)((char *)v202 + v209) = isUniquelyReferenced_nonNull_native;
  v210 = *(_QWORD *)(v285 + v284);
  v211 = (uint64_t *)(v210
                   + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__monoHand);
  swift_beginAccess();
  v212 = *v211;
  v213 = *(_QWORD *)(*v211 + 16);
  if (v213)
  {
    v214 = v212 + ((*(unsigned __int8 *)(v261 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v261 + 80));
    *(_QWORD *)&v296 = *(_QWORD *)(v261 + 72);
    *(_QWORD *)&v295 = v212;
    swift_bridgeObjectRetain();
    do
    {
      v215 = v291;
      outlined init with copy of TrackingUpdateDataPB(v214, v291, type metadata accessor for MonoHandPB);
      *(_QWORD *)&v298 = *(_QWORD *)v215;
      v216 = *(_BYTE *)(v215 + 8);
      v217 = *(_QWORD *)(v215 + 16);
      v218 = *(_QWORD *)(v215 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined destroy of Matrix3x3PB(v215, type metadata accessor for MonoHandPB);
      v219 = *(_QWORD **)((char *)v202 + v209);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v219 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v219[2] + 1, 1, v219);
      v221 = v219[2];
      v220 = v219[3];
      if (v221 >= v220 >> 1)
        v219 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v220 > 1), v221 + 1, 1, v219);
      v219[2] = v221 + 1;
      v222 = &v219[4 * v221];
      v222[4] = v298;
      *((_BYTE *)v222 + 40) = v216;
      v222[6] = v217;
      v222[7] = v218;
      v223 = v297;
      v209 = v293;
      *(unint64_t *)((char *)v297 + v293) = (unint64_t)v219;
      v202 = v223;
      v214 += v296;
      --v213;
    }
    while (v213);
    swift_bridgeObjectRelease();
    v210 = *(_QWORD *)(v285 + v284);
  }
  v224 = v210
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__homePinchInternalData;
  swift_beginAccess();
  v225 = v281;
  outlined init with copy of (Int32, Matrix2dPB)(v224, v281, &demangling cache variable for type metadata for HomePinchInternalPB?);
  v226 = v280;
  v227 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v279 + 48);
  LODWORD(v224) = v227(v225, 1, v280);
  outlined destroy of Coordinate3DPB?(v225, &demangling cache variable for type metadata for HomePinchInternalPB?);
  if ((_DWORD)v224 == 1)
    return outlined destroy of Matrix3x3PB(v285, type metadata accessor for HandDescriptorInternalPB);
  v229 = *(_QWORD *)(v285 + v284)
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__homePinchInternalData;
  swift_beginAccess();
  v230 = v246;
  outlined init with copy of (Int32, Matrix2dPB)(v229, v246, &demangling cache variable for type metadata for HomePinchInternalPB?);
  if (v227(v230, 1, v226) == 1)
  {
    v231 = v260;
    *v260 = 0;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v230, &demangling cache variable for type metadata for HomePinchInternalPB?);
  }
  else
  {
    v231 = v260;
    outlined init with take of Matrix2dPB(v230, (uint64_t)v260, type metadata accessor for HomePinchInternalPB);
  }
  v233 = v258;
  v232 = v259;
  outlined destroy of Matrix3x3PB(v285, type metadata accessor for HandDescriptorInternalPB);
  ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v233)(v231, 0, 1, v226);
  return outlined assign with take of HomePinchInternalPB?((uint64_t)v231, v232, &demangling cache variable for type metadata for HomePinchInternalPB?);
}

uint64_t closure #1 in static HandDescriptorInternal.parseLocalizers(from:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  double v65;
  unint64_t v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71;
  int v72;
  uint64_t result;
  uint64_t v74;
  __int128 v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  float32x4_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  unint64_t v91;
  int64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int128 v100;
  int v101;
  uint64_t v102;
  __int128 v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _QWORD *v109;
  uint64_t v110;
  float32x4_t v111;
  uint64_t v112;
  __n128 v113;
  uint64_t *v114;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  unint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  float32x4x4_t v131;
  uint64_t v132[10];
  _QWORD v133[8];
  char v134;

  v120 = a2;
  v124.n128_u64[0] = a1;
  v2 = type metadata accessor for Matrix2dPB.FloatVectorPB(0);
  v116 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Matrix2dPB.VectorPB(0);
  v126.n128_u64[0] = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v7);
  v9 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Matrix2dPB?);
  v12 = MEMORY[0x24BDAC7A8](v10, v11);
  v125.n128_u64[0] = (unint64_t)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v127 = (unint64_t)&v116 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15, v17);
  v119 = (uint64_t)&v116 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18, v20);
  *(_QWORD *)&v128 = (char *)&v116 - v22;
  MEMORY[0x24BDAC7A8](v21, v23);
  v25 = (char *)&v116 - v24;
  v26 = type metadata accessor for Matrix2dPB(0);
  v27 = *(_QWORD *)(v26 - 8);
  v29 = MEMORY[0x24BDAC7A8](v26, v28);
  v117 = (uint64_t *)((char *)&v116 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = MEMORY[0x24BDAC7A8](v29, v31);
  v34 = (char *)&v116 - v33;
  v36 = MEMORY[0x24BDAC7A8](v32, v35);
  v118 = (uint64_t *)((char *)&v116 - v37);
  v39 = MEMORY[0x24BDAC7A8](v36, v38);
  v41 = (char *)&v116 - v40;
  MEMORY[0x24BDAC7A8](v39, v42);
  v44 = (char *)&v116 - v43;
  v122 = v124.n128_u64[0] + *(int *)(type metadata accessor for LocalizerPB(0) + 24);
  outlined init with copy of (Int32, Matrix2dPB)(v122, (uint64_t)v25, &demangling cache variable for type metadata for Matrix2dPB?);
  v123.n128_u64[0] = *(_QWORD *)(v27 + 48);
  v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v123.n128_u64[0])(v25, 1, v26);
  v46 = MEMORY[0x24BEE4AF8];
  v121 = v26;
  if (v45 == 1)
  {
    *(_QWORD *)v44 = MEMORY[0x24BEE4AF8];
    v44[8] = 0;
    *((_QWORD *)v44 + 2) = v46;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?((uint64_t)v25, &demangling cache variable for type metadata for Matrix2dPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB((uint64_t)v25, (uint64_t)v44, type metadata accessor for Matrix2dPB);
  }
  v47 = *(_QWORD *)v44;
  swift_bridgeObjectRetain();
  outlined destroy of Matrix3x3PB((uint64_t)v44, type metadata accessor for Matrix2dPB);
  v48 = *(_QWORD *)(v47 + 16);
  swift_bridgeObjectRelease();
  if (v48)
  {
    v49 = v128;
    outlined init with copy of (Int32, Matrix2dPB)(v122, v128, &demangling cache variable for type metadata for Matrix2dPB?);
    v50 = v121;
    if (((uint64_t (*)(uint64_t, uint64_t, uint64_t))v123.n128_u64[0])(v49, 1, v121) == 1)
    {
      v51 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)v41 = MEMORY[0x24BEE4AF8];
      v41[8] = 0;
      *((_QWORD *)v41 + 2) = v51;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v49, &demangling cache variable for type metadata for Matrix2dPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v49, (uint64_t)v41, type metadata accessor for Matrix2dPB);
      v51 = MEMORY[0x24BEE4AF8];
    }
    v55 = *(_QWORD **)v41;
    swift_bridgeObjectRetain();
    outlined destroy of Matrix3x3PB((uint64_t)v41, type metadata accessor for Matrix2dPB);
    v56 = v55[2];
    if (v56)
    {
      v133[0] = v51;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56, 0);
      v57 = 0;
      v58 = *(unsigned __int8 *)(v126.n128_u64[0] + 80);
      v117 = v55;
      v127 = (unint64_t)v55 + ((v58 + 32) & ~v58);
      v126.n128_u64[0] = *(_QWORD *)(v126.n128_u64[0] + 72);
      v125.n128_u64[0] = v56;
      while (1)
      {
        outlined init with copy of TrackingUpdateDataPB(v127 + v126.n128_u64[0] * v57, (uint64_t)v9, type metadata accessor for Matrix2dPB.VectorPB);
        v59 = (uint64_t)v9;
        v60 = *(_QWORD *)v9;
        v61 = *(_QWORD *)(*(_QWORD *)v9 + 16);
        if (v61)
        {
          v132[0] = v51;
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61, 0);
          v62 = 0;
          v63 = v132[0];
          v64 = *(_QWORD *)(v132[0] + 16);
          do
          {
            v65 = *(double *)(v60 + 8 * v62 + 32);
            v132[0] = v63;
            v66 = *(_QWORD *)(v63 + 24);
            if (v64 >= v66 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v64 + 1, 1);
              v63 = v132[0];
            }
            ++v62;
            v67 = v65;
            *(_QWORD *)(v63 + 16) = v64 + 1;
            *(float *)(v63 + 4 * v64++ + 32) = v67;
          }
          while (v61 != v62);
          swift_bridgeObjectRelease();
          v51 = MEMORY[0x24BEE4AF8];
          v56 = v125.n128_u64[0];
          v68 = *(_QWORD *)(v63 + 16);
          if (!v68)
            goto LABEL_65;
        }
        else
        {
          v63 = v51;
          v68 = *(_QWORD *)(v51 + 16);
          if (!v68)
            goto LABEL_65;
        }
        v69 = 0;
        ++v57;
        if ((unint64_t)(v68 - 1) >= 4)
          v70 = 4;
        else
          v70 = v68 - 1;
        v71 = 0uLL;
        v9 = (char *)v59;
        do
        {
          if ((unint64_t)(v68 - 1) > 3)
          {
            __break(1u);
            goto LABEL_64;
          }
          v72 = *(_DWORD *)(v63 + 4 * v69 + 32);
          v130 = v71;
          *(_DWORD *)((unint64_t)&v130 & 0xFFFFFFFFFFFFFFF3 | (4 * (v69 & 3))) = v72;
          v71 = v130;
          ++v69;
        }
        while (v68 != v69);
        v128 = v130;
        result = swift_bridgeObjectRelease();
        if (v70 < 3)
          goto LABEL_66;
        outlined destroy of Matrix3x3PB(v59, type metadata accessor for Matrix2dPB.VectorPB);
        v74 = v133[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v74 + 16) + 1, 1);
          v74 = v133[0];
        }
        v75 = v128;
        v77 = *(_QWORD *)(v74 + 16);
        v76 = *(_QWORD *)(v74 + 24);
        if (v77 >= v76 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v77 + 1, 1);
          v75 = v128;
          v74 = v133[0];
        }
        *(_QWORD *)(v74 + 16) = v77 + 1;
        *(_OWORD *)(v74 + 16 * v77 + 32) = v75;
        if (v57 == v56)
        {
          swift_bridgeObjectRelease();
          v50 = v121;
          goto LABEL_34;
        }
      }
    }
    swift_bridgeObjectRelease();
    v74 = MEMORY[0x24BEE4AF8];
LABEL_34:
    v78 = *(_QWORD *)v124.n128_u64[0];
    v79 = *(unsigned __int8 *)(v124.n128_u64[0] + 8);
    v80 = v119;
    outlined init with copy of (Int32, Matrix2dPB)(v122, v119, &demangling cache variable for type metadata for Matrix2dPB?);
    v81 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v123.n128_u64[0])(v80, 1, v50);
    v82 = v118;
    LODWORD(v128) = v79;
    v127 = v78;
    if (v81 == 1)
    {
      *v118 = v51;
      *((_BYTE *)v82 + 8) = 0;
      v82[2] = v51;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v80, &demangling cache variable for type metadata for Matrix2dPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v80, (uint64_t)v118, type metadata accessor for Matrix2dPB);
    }
    v83 = *((unsigned __int8 *)v82 + 8);
    outlined destroy of Matrix3x3PB((uint64_t)v82, type metadata accessor for Matrix2dPB);
    closure #2 in closure #1 in static HandDescriptorInternal.parseLocalizers(from:)(v83, v74, &v131);
    v84 = v131.val[0];
    v86 = v131.val[1].i64[1];
    v85 = v131.val[1].i64[0];
    v87 = v131.val[2].i64[1];
    v88 = v131.val[2].i64[0];
    v126.n128_u64[0] = v131.val[3].u64[1];
    v89 = v131.val[3].i64[0];
    swift_bridgeObjectRelease();
    outlined init with take of ImageData?((uint64_t)&v131, (uint64_t)v133, &demangling cache variable for type metadata for simd_float4x4?);
    if ((v134 & 1) == 0)
    {
      v125 = (__n128)v84;
      v90.n128_u64[0] = v85;
LABEL_62:
      v90.n128_u64[1] = v86;
      v124 = v90;
      v113.n128_u64[0] = v88;
      v113.n128_u64[1] = v87;
      v123 = v113;
      v113.n128_u64[0] = v89;
      v113.n128_u64[1] = v126.n128_u64[0];
      v126 = v113;
      v114 = v120;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v132[0] = *v114;
      *v114 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v127, v128, isUniquelyReferenced_nonNull_native, v125, v124, v123, v126);
      *v114 = v132[0];
      return swift_bridgeObjectRelease();
    }
    return specialized Dictionary._Variant.removeValue(forKey:)(v127, v128, (uint64_t)v132);
  }
  v52 = v127;
  outlined init with copy of (Int32, Matrix2dPB)(v122, v127, &demangling cache variable for type metadata for Matrix2dPB?);
  v53 = v121;
  if (((uint64_t (*)(uint64_t, uint64_t, uint64_t))v123.n128_u64[0])(v52, 1, v121) == 1)
  {
    v54 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)v34 = MEMORY[0x24BEE4AF8];
    v34[8] = 0;
    *((_QWORD *)v34 + 2) = v54;
    UnknownStorage.init()();
    outlined destroy of Coordinate3DPB?(v52, &demangling cache variable for type metadata for Matrix2dPB?);
  }
  else
  {
    outlined init with take of Matrix2dPB(v52, (uint64_t)v34, type metadata accessor for Matrix2dPB);
  }
  v91 = *((_QWORD *)v34 + 2);
  swift_bridgeObjectRetain();
  outlined destroy of Matrix3x3PB((uint64_t)v34, type metadata accessor for Matrix2dPB);
  v92 = *(_QWORD *)(v91 + 16);
  if (!v92)
  {
    swift_bridgeObjectRelease();
    v102 = MEMORY[0x24BEE4AF8];
LABEL_56:
    v106 = MEMORY[0x24BEE4AF8];
    v127 = *(_QWORD *)v124.n128_u64[0];
    LODWORD(v128) = *(unsigned __int8 *)(v124.n128_u64[0] + 8);
    v107 = v125.n128_u64[0];
    outlined init with copy of (Int32, Matrix2dPB)(v122, v125.n128_i64[0], &demangling cache variable for type metadata for Matrix2dPB?);
    v108 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v123.n128_u64[0])(v107, 1, v53);
    v109 = v117;
    if (v108 == 1)
    {
      *v117 = v106;
      *((_BYTE *)v109 + 8) = 0;
      v109[2] = v106;
      UnknownStorage.init()();
      outlined destroy of Coordinate3DPB?(v107, &demangling cache variable for type metadata for Matrix2dPB?);
    }
    else
    {
      outlined init with take of Matrix2dPB(v107, (uint64_t)v117, type metadata accessor for Matrix2dPB);
    }
    v110 = *((unsigned __int8 *)v109 + 8);
    outlined destroy of Matrix3x3PB((uint64_t)v109, type metadata accessor for Matrix2dPB);
    closure #2 in closure #1 in static HandDescriptorInternal.parseLocalizers(from:)(v110, v102, &v131);
    v111 = v131.val[0];
    v86 = v131.val[1].i64[1];
    v112 = v131.val[1].i64[0];
    v87 = v131.val[2].i64[1];
    v88 = v131.val[2].i64[0];
    v126.n128_u64[0] = v131.val[3].u64[1];
    v89 = v131.val[3].i64[0];
    swift_bridgeObjectRelease();
    outlined init with take of ImageData?((uint64_t)&v131, (uint64_t)v133, &demangling cache variable for type metadata for simd_float4x4?);
    if ((v134 & 1) == 0)
    {
      v125 = (__n128)v111;
      v90.n128_u64[0] = v112;
      goto LABEL_62;
    }
    return specialized Dictionary._Variant.removeValue(forKey:)(v127, v128, (uint64_t)v132);
  }
  v133[0] = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v92, 0);
  v93 = 0;
  v94 = *(unsigned __int8 *)(v116 + 80);
  v126.n128_u64[0] = v91;
  v127 = v91 + ((v94 + 32) & ~v94);
  v95 = *(_QWORD *)(v116 + 72);
  while (1)
  {
    result = outlined init with copy of TrackingUpdateDataPB(v127 + v95 * v93, (uint64_t)v5, type metadata accessor for Matrix2dPB.FloatVectorPB);
    v96 = *(_QWORD *)(*(_QWORD *)v5 + 16);
    if (!v96)
      break;
    v97 = 0;
    ++v93;
    v98 = *(_QWORD *)v5 + 32;
    v99 = 4;
    if ((unint64_t)(v96 - 1) < 4)
      v99 = v96 - 1;
    v100 = 0uLL;
    do
    {
      if ((unint64_t)(v96 - 1) > 3)
      {
LABEL_64:
        __break(1u);
LABEL_65:
        result = swift_bridgeObjectRelease();
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      v101 = *(_DWORD *)(v98 + 4 * v97);
      v129 = v100;
      *(_DWORD *)((unint64_t)&v129 & 0xFFFFFFFFFFFFFFF3 | (4 * (v97 & 3))) = v101;
      v100 = v129;
      ++v97;
    }
    while (v96 != v97);
    v128 = v129;
    if (v99 < 3)
      break;
    outlined destroy of Matrix3x3PB((uint64_t)v5, type metadata accessor for Matrix2dPB.FloatVectorPB);
    v102 = v133[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v102 + 16) + 1, 1);
      v102 = v133[0];
    }
    v103 = v128;
    v105 = *(_QWORD *)(v102 + 16);
    v104 = *(_QWORD *)(v102 + 24);
    if (v105 >= v104 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v104 > 1, v105 + 1, 1);
      v103 = v128;
      v102 = v133[0];
    }
    *(_QWORD *)(v102 + 16) = v105 + 1;
    *(_OWORD *)(v102 + 16 * v105 + 32) = v103;
    if (v93 == v92)
    {
      swift_bridgeObjectRelease();
      v53 = v121;
      goto LABEL_56;
    }
  }
LABEL_67:
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in static HandDescriptorInternal.parseLocalizers(from:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, float32x4x4_t *a3@<X8>)
{
  uint64_t v3;
  const float *v4;
  float32x4x4_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  if ((result & 1) == 0)
  {
    if (v3 != 4)
      goto LABEL_8;
    v5 = *(float32x4x4_t *)(a2 + 32);
LABEL_7:
    *a3 = v5;
    a3[1].val[0].i8[0] = 0;
    return result;
  }
  if (v3 == 4)
  {
    v4 = (const float *)(a2 + 32);
    v5 = vld4q_f32(v4);
    goto LABEL_7;
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t HandDescriptorInternal.toProtoBuf()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  unint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _BYTE v253[883];
  _BYTE v254[888];
  _BYTE v255[883];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
  MEMORY[0x24BDAC7A8](v4, v5);
  v224 = (uint64_t)&v208 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7, v8);
  v222 = (uint64_t)&v208 - v9;
  MEMORY[0x24BDAC7A8](v10, v11);
  v241 = (uint64_t)&v208 - v12;
  v13 = type metadata accessor for HomePinchInternalPB(0);
  v242 = *(_QWORD *)(v13 - 8);
  v243 = v13;
  MEMORY[0x24BDAC7A8](v13, v14);
  v221 = (uint64_t)&v208 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16, v17);
  v223 = (uint64_t)&v208 - v18;
  v19 = type metadata accessor for MonoHandPB(0);
  v248 = *(_QWORD *)(v19 - 8);
  v249 = v19;
  MEMORY[0x24BDAC7A8](v19, v20);
  v252 = (uint64_t)&v208 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  MEMORY[0x24BDAC7A8](v22, v23);
  v220 = (uint64_t)&v208 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25, v26);
  v219 = (uint64_t)&v208 - v27;
  MEMORY[0x24BDAC7A8](v28, v29);
  v239 = (uint64_t)&v208 - v30;
  v31 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v233 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31, v32);
  v218 = (uint64_t)&v208 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34, v35);
  v240 = (uint64_t)&v208 - v36;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
  MEMORY[0x24BDAC7A8](v37, v38);
  v217 = (uint64_t)&v208 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40, v41);
  v216 = (uint64_t)&v208 - v42;
  MEMORY[0x24BDAC7A8](v43, v44);
  v236 = (uint64_t)&v208 - v45;
  v237 = type metadata accessor for UnsureInternalPB(0);
  v251 = *(_QWORD *)(v237 - 8);
  MEMORY[0x24BDAC7A8](v237, v46);
  v215 = (uint64_t)&v208 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v48, v49);
  v238 = (uint64_t)&v208 - v50;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
  MEMORY[0x24BDAC7A8](v51, v52);
  v214 = (uint64_t)&v208 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v54, v55);
  v213 = (uint64_t)&v208 - v56;
  MEMORY[0x24BDAC7A8](v57, v58);
  v234 = (uint64_t)&v208 - v59;
  v60 = type metadata accessor for ActionInternalPB(0);
  v244 = *(_QWORD *)(v60 - 8);
  v245 = v60;
  MEMORY[0x24BDAC7A8](v60, v61);
  v212 = (uint64_t)&v208 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v63, v64);
  v235 = (uint64_t)&v208 - v65;
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v66, v67);
  v211 = (uint64_t)&v208 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v69, v70);
  v210 = (uint64_t)&v208 - v71;
  v72 = type metadata accessor for RecoverRepetitivePinchInternalDataPB(0);
  v208 = *(_QWORD *)(v72 - 8);
  v209 = v72;
  MEMORY[0x24BDAC7A8](v72, v73);
  v247 = (int *)((char *)&v208 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0));
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
  MEMORY[0x24BDAC7A8](v75, v76);
  v231 = (uint64_t)&v208 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v78, v79);
  v230 = (uint64_t)&v208 - v80;
  v81 = type metadata accessor for MiddleDoubleTapInternalPB(0);
  v229 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81, v82);
  v228 = (char *)&v208 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PinchInternalDataPB?);
  MEMORY[0x24BDAC7A8](v84, v85);
  v226 = (uint64_t)&v208 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v87, v88);
  v90 = (char *)&v208 - v89;
  v225 = type metadata accessor for PinchInternalDataPB();
  v91 = *(_QWORD *)(v225 - 8);
  MEMORY[0x24BDAC7A8](v225, v92);
  v94 = (char *)&v208 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v95 = *(int *)(type metadata accessor for HandDescriptorInternalPB(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  v227 = v81;
  v232 = v31;
  v250 = v95;
  *(_QWORD *)(a1 + v95) = static HandDescriptorInternalPB._StorageClass.defaultInstance;
  v96 = *(unsigned __int8 *)(v2 + 8);
  if (v96 == 2)
  {
    swift_retain();
    v97 = v250;
  }
  else
  {
    v98 = v96 & 1;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v99 = v250;
      type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
      swift_allocObject();
      v100 = swift_retain();
      *(_QWORD *)(a1 + v99) = HandDescriptorInternalPB._StorageClass.init(copying:)(v100);
      swift_release();
    }
    v97 = v250;
    v101 = *(_QWORD *)(a1 + v250);
    swift_beginAccess();
    *(_BYTE *)(v101 + 24) = v98;
  }
  v246 = v2;
  v102 = swift_bridgeObjectRetain();
  v103 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSays5SIMD2VySfGGG_AF9CropBoxPBVs5NeverOTg5061_s5Hands22HandDescriptorInternalV10toProtoBufAA0bcD2PBVyFAA07hi7H0VAA12ef11O3key_Says5G20VySfGG5valuet_tXEfU_Tf1cn_n(v102);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
    swift_allocObject();
    v104 = swift_retain();
    *(_QWORD *)(a1 + v97) = HandDescriptorInternalPB._StorageClass.init(copying:)(v104);
    swift_release();
  }
  v105 = *(_QWORD *)(a1 + v97);
  swift_beginAccess();
  *(_QWORD *)(v105 + 16) = v103;
  swift_bridgeObjectRelease();
  v106 = v246;
  v107 = *(_QWORD *)(v246 + 48);
  if (v107)
  {
    v108 = (uint64_t)v94;
    v109 = *(_DWORD *)(v246 + 128);
    v111 = *(_QWORD *)(v246 + 112);
    v110 = *(_QWORD *)(v246 + 120);
    v112 = *(_OWORD *)(v246 + 96);
    v113 = *(_QWORD *)(v246 + 88);
    v114 = *(_QWORD *)(v246 + 32);
    v115 = *(_DWORD *)(v246 + 24);
    v116 = *(_QWORD *)(v246 + 16);
    v254[0] = *(_DWORD *)(v246 + 40) & 1;
    v253[0] = v110 & 1;
    *(_QWORD *)v255 = v116;
    *(_WORD *)&v255[8] = v115 & 0x101;
    *(_QWORD *)&v255[16] = v114;
    v255[24] = v254[0];
    *(_QWORD *)&v255[32] = v107;
    *(_OWORD *)&v255[40] = *(_OWORD *)(v246 + 56);
    *(_OWORD *)&v255[56] = *(_OWORD *)(v246 + 72);
    *(_DWORD *)&v255[72] = v113;
    *(_OWORD *)&v255[80] = v112;
    *(_QWORD *)&v255[96] = v111;
    v255[104] = v110 & 1;
    *(_DWORD *)&v255[108] = HIDWORD(v110);
    *(_DWORD *)&v255[112] = v109;
    PinchInternalData.toProtoBuf()((uint64_t)v94);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
      swift_allocObject();
      v117 = swift_retain();
      v108 = (uint64_t)v94;
      *(_QWORD *)(a1 + v97) = HandDescriptorInternalPB._StorageClass.init(copying:)(v117);
      swift_release();
    }
    v118 = *(_QWORD *)(a1 + v97);
    outlined init with take of Matrix2dPB(v108, (uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for PinchInternalDataPB);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v90, 0, 1, v225);
    v119 = v226;
    outlined init with take of ImageData?((uint64_t)v90, v226, &demangling cache variable for type metadata for PinchInternalDataPB?);
    v120 = v118
         + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__pinchData;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v119, v120, &demangling cache variable for type metadata for PinchInternalDataPB?);
    swift_endAccess();
    swift_release();
  }
  v121 = swift_bridgeObjectRetain();
  v122 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy5Hands12CameraSourceOSo13simd_float4x4aG_AF11LocalizerPBVs5NeverOTg5061_s5Hands22HandDescriptorInternalV10toProtoBufAA0bcD2PBVyFAA09i7H0VAA12eF39O3key_So13simd_float4x4a5valuet_tXEfU0_Tf1cn_n(v121);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
    swift_allocObject();
    v123 = swift_retain();
    v97 = v250;
    *(_QWORD *)(a1 + v97) = HandDescriptorInternalPB._StorageClass.init(copying:)(v123);
    swift_release();
  }
  v124 = (uint64_t *)(*(_QWORD *)(a1 + v97)
                   + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__localizers);
  swift_beginAccess();
  *v124 = v122;
  swift_bridgeObjectRelease();
  v125 = *(_QWORD *)(v106 + 152);
  if (v125)
  {
    v126 = *(_QWORD *)(v106 + 144);
    v128 = v227;
    v127 = v228;
    UnknownStorage.init()();
    *v127 = v126;
    v127[1] = v125;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
      swift_allocObject();
      v129 = swift_retain();
      *(_QWORD *)(a1 + v97) = HandDescriptorInternalPB._StorageClass.init(copying:)(v129);
      swift_release();
    }
    v130 = *(_QWORD *)(a1 + v97);
    v131 = v230;
    outlined init with take of Matrix2dPB((uint64_t)v127, v230, type metadata accessor for MiddleDoubleTapInternalPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v229 + 56))(v131, 0, 1, v128);
    v132 = v231;
    outlined init with take of ImageData?(v131, v231, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
    v133 = v130
         + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__middleDoubleTap;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v132, v133, &demangling cache variable for type metadata for MiddleDoubleTapInternalPB?);
    swift_endAccess();
    swift_release();
  }
  outlined init with take of ImageData?(v106 + 160, (uint64_t)v254, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
  outlined init with take of ImageData?((uint64_t)v254, (uint64_t)v255, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalData?);
  v134 = _s5Hands34RecoverRepetitivePinchInternalDataVSgWOg((uint64_t)v255);
  v136 = v232;
  v135 = v233;
  v137 = v237;
  if (v134 != 1)
  {
    memcpy(v253, v255, sizeof(v253));
    RecoverRepetitivePinchInternalData.toProtoBuf()((uint64_t)v247);
    v138 = v250;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
      swift_allocObject();
      v139 = swift_retain();
      *(_QWORD *)(a1 + v138) = HandDescriptorInternalPB._StorageClass.init(copying:)(v139);
      swift_release();
    }
    v140 = *(_QWORD *)(a1 + v138);
    v141 = v210;
    outlined init with take of Matrix2dPB((uint64_t)v247, v210, type metadata accessor for RecoverRepetitivePinchInternalDataPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v208 + 56))(v141, 0, 1, v209);
    v142 = v211;
    outlined init with take of ImageData?(v141, v211, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
    v143 = v140
         + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__recoverRepetitivePinchInternalData;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v142, v143, &demangling cache variable for type metadata for RecoverRepetitivePinchInternalDataPB?);
    swift_endAccess();
    swift_release();
  }
  v247 = (int *)type metadata accessor for HandDescriptorInternal();
  v144 = v234;
  outlined init with copy of (Int32, Matrix2dPB)(v106 + v247[10], v234, &demangling cache variable for type metadata for ActionInternalPB?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v244 + 48))(v144, 1, v245) == 1)
  {
    outlined destroy of Coordinate3DPB?(v144, &demangling cache variable for type metadata for ActionInternalPB?);
  }
  else
  {
    v145 = v144;
    v146 = v235;
    outlined init with take of Matrix2dPB(v145, v235, type metadata accessor for ActionInternalPB);
    v147 = v212;
    outlined init with copy of TrackingUpdateDataPB(v146, v212, type metadata accessor for ActionInternalPB);
    v148 = v250;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
      swift_allocObject();
      v149 = swift_retain();
      v148 = v250;
      *(_QWORD *)(a1 + v148) = HandDescriptorInternalPB._StorageClass.init(copying:)(v149);
      swift_release();
    }
    v150 = *(_QWORD *)(a1 + v148);
    v151 = v213;
    outlined init with take of Matrix2dPB(v147, v213, type metadata accessor for ActionInternalPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v244 + 56))(v151, 0, 1, v245);
    v152 = v151;
    v153 = v214;
    outlined init with take of ImageData?(v152, v214, &demangling cache variable for type metadata for ActionInternalPB?);
    v154 = v150
         + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__actionInternalData;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v153, v154, &demangling cache variable for type metadata for ActionInternalPB?);
    swift_endAccess();
    swift_release();
    outlined destroy of Matrix3x3PB(v235, type metadata accessor for ActionInternalPB);
    v106 = v246;
  }
  v155 = v236;
  outlined init with copy of (Int32, Matrix2dPB)(v106 + v247[11], v236, &demangling cache variable for type metadata for UnsureInternalPB?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v251 + 48))(v155, 1, v137) == 1)
  {
    outlined destroy of Coordinate3DPB?(v155, &demangling cache variable for type metadata for UnsureInternalPB?);
  }
  else
  {
    v156 = v155;
    v157 = v238;
    outlined init with take of Matrix2dPB(v156, v238, type metadata accessor for UnsureInternalPB);
    v158 = v215;
    outlined init with copy of TrackingUpdateDataPB(v157, v215, type metadata accessor for UnsureInternalPB);
    v159 = v250;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
      swift_allocObject();
      v160 = swift_retain();
      v159 = v250;
      *(_QWORD *)(a1 + v159) = HandDescriptorInternalPB._StorageClass.init(copying:)(v160);
      swift_release();
    }
    v161 = *(_QWORD *)(a1 + v159);
    v162 = v216;
    outlined init with take of Matrix2dPB(v158, v216, type metadata accessor for UnsureInternalPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v251 + 56))(v162, 0, 1, v137);
    v163 = v162;
    v164 = v217;
    outlined init with take of ImageData?(v163, v217, &demangling cache variable for type metadata for UnsureInternalPB?);
    v165 = v161
         + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__unsureInternalData;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v164, v165, &demangling cache variable for type metadata for UnsureInternalPB?);
    swift_endAccess();
    swift_release();
    outlined destroy of Matrix3x3PB(v238, type metadata accessor for UnsureInternalPB);
    v106 = v246;
  }
  v166 = v239;
  outlined init with copy of (Int32, Matrix2dPB)(v106 + v247[12], v239, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v166, 1, v136) == 1)
  {
    outlined destroy of Coordinate3DPB?(v166, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    v167 = v250;
  }
  else
  {
    v168 = v166;
    v169 = v240;
    outlined init with take of Matrix2dPB(v168, v240, type metadata accessor for ObjectInteractionStateInternalPB);
    v170 = v218;
    outlined init with copy of TrackingUpdateDataPB(v169, v218, type metadata accessor for ObjectInteractionStateInternalPB);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
      swift_allocObject();
      v171 = swift_retain();
      v172 = v250;
      *(_QWORD *)(a1 + v172) = HandDescriptorInternalPB._StorageClass.init(copying:)(v171);
      swift_release();
    }
    v173 = *(_QWORD *)(a1 + v250);
    v174 = v219;
    outlined init with take of Matrix2dPB(v170, v219, type metadata accessor for ObjectInteractionStateInternalPB);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v135 + 56))(v174, 0, 1, v136);
    v175 = v174;
    v176 = v220;
    outlined init with take of ImageData?(v175, v220, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    v177 = v173
         + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__objectInteractionStateInternalPb;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of HomePinchInternalPB?(v176, v177, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    swift_endAccess();
    v167 = v250;
    swift_release();
    outlined destroy of Matrix3x3PB(v240, type metadata accessor for ObjectInteractionStateInternalPB);
    v106 = v246;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
    swift_allocObject();
    v178 = swift_retain();
    v167 = v250;
    *(_QWORD *)(a1 + v167) = HandDescriptorInternalPB._StorageClass.init(copying:)(v178);
    swift_release();
  }
  v179 = (_QWORD *)(*(_QWORD *)(a1 + v167)
                  + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__monoHand);
  swift_beginAccess();
  *v179 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v180 = *(_QWORD *)(*(_QWORD *)(v106 + v247[14]) + 16);
  if (v180)
  {
    v245 = swift_bridgeObjectRetain();
    v181 = (_QWORD *)(v245 + 56);
    do
    {
      v251 = v180;
      v183 = a1;
      v184 = *(v181 - 3);
      v185 = *((_BYTE *)v181 - 16);
      v186 = *(v181 - 1);
      v187 = *v181;
      v188 = v252;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      UnknownStorage.init()();
      *(_QWORD *)v188 = v184;
      a1 = v183;
      *(_BYTE *)(v188 + 8) = v185;
      *(_QWORD *)(v188 + 16) = v186;
      *(_QWORD *)(v188 + 24) = v187;
      v189 = v250;
      v190 = (unint64_t *)(*(_QWORD *)(v183 + v250)
                                + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__monoHand);
      swift_beginAccess();
      v191 = *v190;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v191 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v191 + 16) + 1, 1, v191);
      v193 = *(_QWORD *)(v191 + 16);
      v192 = *(_QWORD *)(v191 + 24);
      if (v193 >= v192 >> 1)
        v191 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v192 > 1, v193 + 1, 1, v191);
      *(_QWORD *)(v191 + 16) = v193 + 1;
      outlined init with take of Matrix2dPB(v252, v191+ ((*(unsigned __int8 *)(v248 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v248 + 80))+ *(_QWORD *)(v248 + 72) * v193, type metadata accessor for MonoHandPB);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
        swift_allocObject();
        v194 = swift_retain();
        *(_QWORD *)(v183 + v189) = HandDescriptorInternalPB._StorageClass.init(copying:)(v194);
        swift_release();
      }
      v182 = (unint64_t *)(*(_QWORD *)(v183 + v189)
                                + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__monoHand);
      swift_beginAccess();
      *v182 = v191;
      swift_bridgeObjectRelease();
      v181 += 4;
      v180 = v251 - 1;
    }
    while (v251 != 1);
    swift_bridgeObjectRelease();
    v106 = v246;
  }
  v195 = v241;
  outlined init with copy of (Int32, Matrix2dPB)(v106 + v247[13], v241, &demangling cache variable for type metadata for HomePinchInternalPB?);
  v197 = v242;
  v196 = v243;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v242 + 48))(v195, 1, v243) == 1)
    return outlined destroy of Coordinate3DPB?(v195, &demangling cache variable for type metadata for HomePinchInternalPB?);
  v199 = v223;
  outlined init with take of Matrix2dPB(v195, v223, type metadata accessor for HomePinchInternalPB);
  v200 = v221;
  outlined init with copy of TrackingUpdateDataPB(v199, v221, type metadata accessor for HomePinchInternalPB);
  v201 = v250;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for HandDescriptorInternalPB._StorageClass(0);
    swift_allocObject();
    v202 = swift_retain();
    *(_QWORD *)(a1 + v201) = HandDescriptorInternalPB._StorageClass.init(copying:)(v202);
    swift_release();
  }
  v203 = *(_QWORD *)(a1 + v201);
  v204 = v200;
  v205 = v222;
  outlined init with take of Matrix2dPB(v204, v222, type metadata accessor for HomePinchInternalPB);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v197 + 56))(v205, 0, 1, v196);
  v206 = v224;
  outlined init with take of ImageData?(v205, v224, &demangling cache variable for type metadata for HomePinchInternalPB?);
  v207 = v203
       + OBJC_IVAR____TtCV5Hands24HandDescriptorInternalPBP33_4AE2B41FEC0803D4864C2BD0A689D74913_StorageClass__homePinchInternalData;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of HomePinchInternalPB?(v206, v207, &demangling cache variable for type metadata for HomePinchInternalPB?);
  swift_endAccess();
  swift_release();
  return outlined destroy of Matrix3x3PB(v199, type metadata accessor for HomePinchInternalPB);
}

uint64_t HandDescriptorInternal.almostEqual(to:withThreshold:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  MEMORY[0x24BDAC7A8](v5, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9, v10);
  v12 = (char *)&v29 - v11;
  v13 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13, v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18, v19);
  v21 = (char *)&v29 - v20;
  v22 = type metadata accessor for HandDescriptorInternal();
  outlined init with copy of (Int32, Matrix2dPB)(v2 + *(int *)(v22 + 48), (uint64_t)v12, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v23(v12, 1, v13) == 1)
  {
    outlined destroy of Coordinate3DPB?((uint64_t)v12, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    return 1;
  }
  outlined init with take of Matrix2dPB((uint64_t)v12, (uint64_t)v21, type metadata accessor for ObjectInteractionStateInternalPB);
  outlined init with copy of (Int32, Matrix2dPB)(a1 + *(int *)(v22 + 48), (uint64_t)v8, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
  if (v23(v8, 1, v13) == 1)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for ObjectInteractionStateInternalPB);
    outlined destroy of Coordinate3DPB?((uint64_t)v8, &demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    return 1;
  }
  outlined init with take of Matrix2dPB((uint64_t)v8, (uint64_t)v17, type metadata accessor for ObjectInteractionStateInternalPB);
  if (ObjectInteractionStateInternalPB.almostEqual(to:withThreshold:)((uint64_t)v17, a2 + a2))
  {
    outlined destroy of Matrix3x3PB((uint64_t)v17, type metadata accessor for ObjectInteractionStateInternalPB);
    outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for ObjectInteractionStateInternalPB);
    return 1;
  }
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  v25._countAndFlagsBits = 0xD000000000000023;
  v25._object = (void *)0x800000023D9C5300;
  String.append(_:)(v25);
  _print_unlocked<A, B>(_:_:)();
  v26 = MEMORY[0x24BEE0D00];
  v35 = MEMORY[0x24BEE0D00];
  type metadata accessor for HandyLoggerNeo();
  v29 = xmmword_23D9A8970;
  v30 = xmmword_23D9A8970;
  v31 = 0;
  v32 = 0;
  v27 = MEMORY[0x24BEE4AF8];
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v30, 0xD00000000000005ELL, 0x800000023D9C52A0, 481, (uint64_t)&v33, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v33);
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v28._countAndFlagsBits = 0xD000000000000029;
  v28._object = (void *)0x800000023D9C5330;
  String.append(_:)(v28);
  _print_unlocked<A, B>(_:_:)();
  v35 = v26;
  v30 = v29;
  v31 = 0;
  v32 = 0;
  static HandyLoggerNeo.log(atLevel:withPrivacy:withLogArea:inFile:onLine:message:withArgs:)(1u, 1, (uint64_t *)&v30, 0xD00000000000005ELL, 0x800000023D9C52A0, 482, (uint64_t)&v33, v27);
  outlined destroy of Matrix3x3PB((uint64_t)v17, type metadata accessor for ObjectInteractionStateInternalPB);
  outlined destroy of Matrix3x3PB((uint64_t)v21, type metadata accessor for ObjectInteractionStateInternalPB);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v33);
  return 0;
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in PinchInternalData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type PinchInternalDataPB and conformance PinchInternalDataPB, (uint64_t (*)(uint64_t))type metadata accessor for PinchInternalDataPB, (uint64_t)&protocol conformance descriptor for PinchInternalDataPB);
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in MiddleDoubleTapInternalData()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MiddleDoubleTapInternalPB and conformance MiddleDoubleTapInternalPB, type metadata accessor for MiddleDoubleTapInternalPB, (uint64_t)&protocol conformance descriptor for MiddleDoubleTapInternalPB);
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in MonoHand()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type MonoHandPB and conformance MonoHandPB, type metadata accessor for MonoHandPB, (uint64_t)&protocol conformance descriptor for MonoHandPB);
}

uint64_t associated type witness table accessor for HandsKitDataProtocol.PBMessageType : Message in HandDescriptorInternal()
{
  return lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(&lazy protocol witness table cache variable for type HandDescriptorInternalPB and conformance HandDescriptorInternalPB, type metadata accessor for HandDescriptorInternalPB, (uint64_t)&protocol conformance descriptor for HandDescriptorInternalPB);
}

uint64_t destroy for PinchInternalData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PinchInternalData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 108) = *(_QWORD *)(a2 + 108);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PinchInternalData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v5;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

__n128 __swift_memcpy116_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for PinchInternalData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 108) = *(_QWORD *)(a2 + 108);
  return a1;
}

uint64_t getEnumTagSinglePayload for PinchInternalData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 116))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PinchInternalData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 116) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 116) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PinchInternalData()
{
  return &type metadata for PinchInternalData;
}

_QWORD *initializeBufferWithCopyOfBuffer for MiddleDoubleTapInternalData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MiddleDoubleTapInternalData()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for MiddleDoubleTapInternalData(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MiddleDoubleTapInternalData(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MiddleDoubleTapInternalData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MiddleDoubleTapInternalData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MiddleDoubleTapInternalData()
{
  return &type metadata for MiddleDoubleTapInternalData;
}

uint64_t destroy for MonoHand()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MonoHand(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MonoHand(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for MonoHand(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MonoHand(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MonoHand(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MonoHand()
{
  return &type metadata for MonoHand;
}

uint64_t initializeBufferWithCopyOfBuffer for HandDescriptorInternal(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(_BYTE *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v8 = a2[6];
    swift_bridgeObjectRetain();
    if (v8)
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      v9 = a2[7];
      v10 = a2[8];
      *(_QWORD *)(a1 + 48) = v8;
      *(_QWORD *)(a1 + 56) = v9;
      v11 = a2[9];
      v12 = a2[10];
      *(_QWORD *)(a1 + 64) = v10;
      *(_QWORD *)(a1 + 72) = v11;
      *(_QWORD *)(a1 + 80) = v12;
      *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
      v13 = a2[13];
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_QWORD *)(a1 + 104) = v13;
      *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 124) = *(uint64_t *)((char *)a2 + 124);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 96) = v14;
      *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
      *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
      v15 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v15;
      v16 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 64) = v16;
    }
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = a2[19];
    memcpy((void *)(a1 + 160), a2 + 20, 0x373uLL);
    v17 = a3[10];
    v18 = (_BYTE *)(a1 + v17);
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for ActionInternalPB(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v22(v19, 1, v20))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *v18 = *v19;
      v24 = *(int *)(v20 + 20);
      v25 = &v18[v24];
      v26 = &v19[v24];
      v27 = type metadata accessor for UnknownStorage();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v28 = a3[11];
    v29 = (char *)(a1 + v28);
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for UnsureInternalPB(0);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v34 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v29, v30, v34);
      *(_QWORD *)&v29[*(int *)(v31 + 20)] = *(_QWORD *)&v30[*(int *)(v31 + 20)];
      v35 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56);
      swift_retain();
      v35(v29, 0, 1, v31);
    }
    v36 = a3[12];
    v37 = (char *)(a1 + v36);
    v38 = (char *)a2 + v36;
    v39 = type metadata accessor for ObjectInteractionStateInternalPB(0);
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v42 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v37, v38, v42);
      *(_QWORD *)&v37[*(int *)(v39 + 20)] = *(_QWORD *)&v38[*(int *)(v39 + 20)];
      v43 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56);
      swift_retain();
      v43(v37, 0, 1, v39);
    }
    v44 = a3[13];
    v45 = (_QWORD *)(a1 + v44);
    v46 = (uint64_t *)((char *)a2 + v44);
    v47 = type metadata accessor for HomePinchInternalPB(0);
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      *v45 = *v46;
      v50 = *(int *)(v47 + 20);
      v51 = (char *)v45 + v50;
      v52 = (char *)v46 + v50;
      v53 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    *(_QWORD *)(a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for HandDescriptorInternal(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[10];
  v5 = type metadata accessor for ActionInternalPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = v4 + *(int *)(v5 + 20);
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  v8 = a1 + a2[11];
  v9 = type metadata accessor for UnsureInternalPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
    swift_release();
  }
  v11 = a1 + a2[12];
  v12 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
    swift_release();
  }
  v14 = a1 + a2[13];
  v15 = type metadata accessor for HomePinchInternalPB(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    v17 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HandDescriptorInternal(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(_BYTE *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v7 = *(_QWORD *)(a2 + 56);
    v8 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v7;
    v9 = *(_QWORD *)(a2 + 72);
    v10 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 64) = v8;
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = v10;
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    v11 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = v11;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 124) = *(_QWORD *)(a2 + 124);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v12;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    v13 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v13;
    v14 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v14;
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x373uLL);
  v15 = a3[10];
  v16 = (_BYTE *)(a1 + v15);
  v17 = (_BYTE *)(a2 + v15);
  v18 = type metadata accessor for ActionInternalPB(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20(v17, 1, v18))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    v22 = *(int *)(v18 + 20);
    v23 = &v16[v22];
    v24 = &v17[v22];
    v25 = type metadata accessor for UnknownStorage();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v26 = a3[11];
  v27 = (char *)(a1 + v26);
  v28 = (char *)(a2 + v26);
  v29 = type metadata accessor for UnsureInternalPB(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v27, v28, v32);
    *(_QWORD *)&v27[*(int *)(v29 + 20)] = *(_QWORD *)&v28[*(int *)(v29 + 20)];
    v33 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56);
    swift_retain();
    v33(v27, 0, 1, v29);
  }
  v34 = a3[12];
  v35 = (char *)(a1 + v34);
  v36 = (char *)(a2 + v34);
  v37 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v40 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v35, v36, v40);
    *(_QWORD *)&v35[*(int *)(v37 + 20)] = *(_QWORD *)&v36[*(int *)(v37 + 20)];
    v41 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56);
    swift_retain();
    v41(v35, 0, 1, v37);
  }
  v42 = a3[13];
  v43 = (_QWORD *)(a1 + v42);
  v44 = (_QWORD *)(a2 + v42);
  v45 = type metadata accessor for HomePinchInternalPB(0);
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    *v43 = *v44;
    v48 = *(int *)(v45 + 20);
    v49 = (char *)v43 + v48;
    v50 = (char *)v44 + v48;
    v51 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HandDescriptorInternal(uint64_t a1, uint64_t a2, int *a3)
{
  _OWORD *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_BYTE *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(_QWORD *, uint64_t, uint64_t);
  int v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = (_OWORD *)(a1 + 16);
  v7 = (__int128 *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v8)
    {
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
      v9 = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v9;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = v10;
      *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
      *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    }
    else
    {
      outlined destroy of PinchInternalData(a1 + 16);
      v13 = *(_OWORD *)(a2 + 64);
      v15 = *v7;
      v14 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v13;
      *v6 = v15;
      *(_OWORD *)(a1 + 32) = v14;
      v17 = *(_OWORD *)(a2 + 96);
      v16 = *(_OWORD *)(a2 + 112);
      v18 = *(_OWORD *)(a2 + 80);
      *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 96) = v17;
      *(_OWORD *)(a1 + 112) = v16;
      *(_OWORD *)(a1 + 80) = v18;
    }
  }
  else if (v8)
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
    v11 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v12 = *(_QWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = v12;
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *v7;
    v20 = *(_OWORD *)(a2 + 32);
    v21 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v21;
    *v6 = v19;
    *(_OWORD *)(a1 + 32) = v20;
    v22 = *(_OWORD *)(a2 + 80);
    v23 = *(_OWORD *)(a2 + 96);
    v24 = *(_OWORD *)(a2 + 112);
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 96) = v23;
    *(_OWORD *)(a1 + 112) = v24;
    *(_OWORD *)(a1 + 80) = v22;
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x373uLL);
  v25 = a3[10];
  v26 = (_BYTE *)(a1 + v25);
  v27 = (_BYTE *)(a2 + v25);
  v28 = type metadata accessor for ActionInternalPB(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      *v26 = *v27;
      v33 = *(int *)(v28 + 20);
      v34 = &v26[v33];
      v35 = &v27[v33];
      v36 = type metadata accessor for UnknownStorage();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v32)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v26, type metadata accessor for ActionInternalPB);
LABEL_13:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_14;
  }
  *v26 = *v27;
  v74 = *(int *)(v28 + 20);
  v75 = &v26[v74];
  v76 = &v27[v74];
  v77 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v77 - 8) + 24))(v75, v76, v77);
LABEL_14:
  v38 = a3[11];
  v39 = (char *)(a1 + v38);
  v40 = (char *)(a2 + v38);
  v41 = type metadata accessor for UnsureInternalPB(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43(v40, 1, v41);
  if (v44)
  {
    if (!v45)
    {
      v46 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v39, v40, v46);
      *(_QWORD *)&v39[*(int *)(v41 + 20)] = *(_QWORD *)&v40[*(int *)(v41 + 20)];
      v47 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56);
      swift_retain();
      v47(v39, 0, 1, v41);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v45)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v39, type metadata accessor for UnsureInternalPB);
LABEL_19:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_20;
  }
  v78 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 24))(v39, v40, v78);
  *(_QWORD *)&v39[*(int *)(v41 + 20)] = *(_QWORD *)&v40[*(int *)(v41 + 20)];
  swift_retain();
  swift_release();
LABEL_20:
  v49 = a3[12];
  v50 = (char *)(a1 + v49);
  v51 = (char *)(a2 + v49);
  v52 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (v55)
  {
    if (!v56)
    {
      v57 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v50, v51, v57);
      *(_QWORD *)&v50[*(int *)(v52 + 20)] = *(_QWORD *)&v51[*(int *)(v52 + 20)];
      v58 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56);
      swift_retain();
      v58(v50, 0, 1, v52);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v56)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v50, type metadata accessor for ObjectInteractionStateInternalPB);
LABEL_25:
    v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_26;
  }
  v79 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 24))(v50, v51, v79);
  *(_QWORD *)&v50[*(int *)(v52 + 20)] = *(_QWORD *)&v51[*(int *)(v52 + 20)];
  swift_retain();
  swift_release();
LABEL_26:
  v60 = a3[13];
  v61 = (_QWORD *)(a1 + v60);
  v62 = (_QWORD *)(a2 + v60);
  v63 = type metadata accessor for HomePinchInternalPB(0);
  v64 = *(_QWORD *)(v63 - 8);
  v65 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v64 + 48);
  v66 = v65(v61, 1, v63);
  v67 = v65(v62, 1, v63);
  if (!v66)
  {
    if (!v67)
    {
      *v61 = *v62;
      v80 = *(int *)(v63 + 20);
      v81 = (char *)v61 + v80;
      v82 = (char *)v62 + v80;
      v83 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 24))(v81, v82, v83);
      goto LABEL_32;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v61, type metadata accessor for HomePinchInternalPB);
    goto LABEL_31;
  }
  if (v67)
  {
LABEL_31:
    v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_32;
  }
  *v61 = *v62;
  v68 = *(int *)(v63 + 20);
  v69 = (char *)v61 + v68;
  v70 = (char *)v62 + v68;
  v71 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
LABEL_32:
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of PinchInternalData(uint64_t a1)
{
  destroy for PinchInternalData();
  return a1;
}

uint64_t initializeWithTake for HandDescriptorInternal(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x373uLL);
  v9 = a3[10];
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  v12 = type metadata accessor for ActionInternalPB(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    *v10 = *v11;
    v15 = *(int *)(v12 + 20);
    v16 = &v10[v15];
    v17 = &v11[v15];
    v18 = type metadata accessor for UnknownStorage();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v19 = a3[11];
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = type metadata accessor for UnsureInternalPB(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v20, v21, v25);
    *(_QWORD *)&v20[*(int *)(v22 + 20)] = *(_QWORD *)&v21[*(int *)(v22 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v26 = a3[12];
  v27 = (char *)(a1 + v26);
  v28 = (char *)(a2 + v26);
  v29 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v27, v28, v32);
    *(_QWORD *)&v27[*(int *)(v29 + 20)] = *(_QWORD *)&v28[*(int *)(v29 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v33 = a3[13];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  v36 = type metadata accessor for HomePinchInternalPB(0);
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    *v34 = *v35;
    v39 = *(int *)(v36 + 20);
    v40 = (char *)v34 + v39;
    v41 = (char *)v35 + v39;
    v42 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t assignWithTake for HandDescriptorInternal(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_BYTE *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  if (*(_QWORD *)(a1 + 48))
  {
    v6 = *(_QWORD *)(a2 + 48);
    if (v6)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
      v7 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v7;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 124) = *(_QWORD *)(a2 + 124);
      goto LABEL_6;
    }
    outlined destroy of PinchInternalData(a1 + 16);
  }
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v9;
  v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v10;
LABEL_6:
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x373uLL);
  v11 = a3[10];
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  v14 = type metadata accessor for ActionInternalPB(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *v12 = *v13;
      v19 = *(int *)(v14 + 20);
      v20 = &v12[v19];
      v21 = &v13[v19];
      v22 = type metadata accessor for UnknownStorage();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v18)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v12, type metadata accessor for ActionInternalPB);
LABEL_11:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_12;
  }
  *v12 = *v13;
  v58 = *(int *)(v14 + 20);
  v59 = &v12[v58];
  v60 = &v13[v58];
  v61 = type metadata accessor for UnknownStorage();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v61 - 8) + 40))(v59, v60, v61);
LABEL_12:
  v24 = a3[11];
  v25 = (char *)(a1 + v24);
  v26 = (char *)(a2 + v24);
  v27 = type metadata accessor for UnsureInternalPB(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      v32 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v25, v26, v32);
      *(_QWORD *)&v25[*(int *)(v27 + 20)] = *(_QWORD *)&v26[*(int *)(v27 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v31)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v25, type metadata accessor for UnsureInternalPB);
LABEL_17:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_18;
  }
  v62 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 40))(v25, v26, v62);
  *(_QWORD *)&v25[*(int *)(v27 + 20)] = *(_QWORD *)&v26[*(int *)(v27 + 20)];
  swift_release();
LABEL_18:
  v34 = a3[12];
  v35 = (char *)(a1 + v34);
  v36 = (char *)(a2 + v34);
  v37 = type metadata accessor for ObjectInteractionStateInternalPB(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      v42 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v35, v36, v42);
      *(_QWORD *)&v35[*(int *)(v37 + 20)] = *(_QWORD *)&v36[*(int *)(v37 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v41)
  {
    outlined destroy of Matrix3x3PB((uint64_t)v35, type metadata accessor for ObjectInteractionStateInternalPB);
LABEL_23:
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_24;
  }
  v63 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 40))(v35, v36, v63);
  *(_QWORD *)&v35[*(int *)(v37 + 20)] = *(_QWORD *)&v36[*(int *)(v37 + 20)];
  swift_release();
LABEL_24:
  v44 = a3[13];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (_QWORD *)(a2 + v44);
  v47 = type metadata accessor for HomePinchInternalPB(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (!v51)
    {
      *v45 = *v46;
      v64 = *(int *)(v47 + 20);
      v65 = (char *)v45 + v64;
      v66 = (char *)v46 + v64;
      v67 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 40))(v65, v66, v67);
      goto LABEL_30;
    }
    outlined destroy of Matrix3x3PB((uint64_t)v45, type metadata accessor for HomePinchInternalPB);
    goto LABEL_29;
  }
  if (v51)
  {
LABEL_29:
    v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_30;
  }
  *v45 = *v46;
  v52 = *(int *)(v47 + 20);
  v53 = (char *)v45 + v52;
  v54 = (char *)v46 + v52;
  v55 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v53, v54, v55);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
LABEL_30:
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HandDescriptorInternal()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6FDC30(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[10];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[11];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[12];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[13];
        }
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HandDescriptorInternal()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D6FDD34(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionInternalPB?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[10];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsureInternalPB?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[11];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObjectInteractionStateInternalPB?);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[12];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomePinchInternalPB?);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[13];
        }
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for HandDescriptorInternal()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ActionInternalPB?, (void (*)(uint64_t))type metadata accessor for ActionInternalPB);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for UnsureInternalPB?, (void (*)(uint64_t))type metadata accessor for UnsureInternalPB);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for ObjectInteractionStateInternalPB?, (void (*)(uint64_t))type metadata accessor for ObjectInteractionStateInternalPB);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Matrix3x3PB?(319, &lazy cache variable for type metadata for HomePinchInternalPB?, (void (*)(uint64_t))type metadata accessor for HomePinchInternalPB);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t _s5Hands34RecoverRepetitivePinchInternalDataVSgWOg(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 882);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

uint64_t outlined assign with take of HomePinchInternalPB?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void _s5Hands34RecoverRepetitivePinchInternalDataVSgWOi0_(uint64_t a1)
{
  bzero((void *)a1, 0x370uLL);
  *(_BYTE *)(a1 + 882) = 2;
  *(_WORD *)(a1 + 880) = 0;
}

uint64_t specialized Zip2Sequence.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t result;
  char v20;

  v3 = v1[1];
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 24);
    if (v4 == *v1)
      v6 = v1[2];
    else
      v6 = 0;
    if (v5 <= 1)
      v7 = 0;
    else
      v7 = v6;
    v8 = v5 <= 1;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v9 = v1[3];
  v10 = v1[4];
  v11 = v1[5];
  v12 = ((uint64_t (*)(void))specialized CircularBuffer.lastAddedElementPtr.getter)();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v13 & 1;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 33) = 0;
  v14 = *(_QWORD *)(v10 + 16);
  if (v14)
  {
    v15 = *(_QWORD *)(v10 + 24);
    if (v14 == v9)
      v16 = v11;
    else
      v16 = 0;
    if (v15 <= 1)
      v17 = 0;
    else
      v17 = v16;
    v18 = v15 <= 1;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  result = specialized CircularBuffer.lastAddedElementPtr.getter(v9, v10, v11);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = result;
  *(_BYTE *)(a1 + 56) = v20 & 1;
  *(_QWORD *)(a1 + 64) = v17;
  *(_BYTE *)(a1 + 72) = v18;
  *(_WORD *)(a1 + 73) = 0;
  return result;
}

uint64_t AverageSidePinchAngleCalculator.getAverageSidePinchAngle(_:_:_:)(uint64_t result, double a2, float a3)
{
  uint64_t v3;
  _QWORD *v4;
  float v6;
  char v7;
  char v8;
  __int128 v9;
  float32x4_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[7];
  char v24;
  char v25;
  int v26;

  if (*(_BYTE *)(v3 + 68) == 1)
  {
    v4 = (_QWORD *)v3;
    v6 = *(float *)&a2;
    LODWORD(a2) = *(_DWORD *)(result + 116);
    v7 = *(_BYTE *)(result + 113);
    v8 = *(_BYTE *)(result + 112);
    v10 = *(float32x4_t *)(result + 80);
    v9 = *(_OWORD *)(result + 96);
    v12 = *(_OWORD *)(result + 48);
    v11 = *(_OWORD *)(result + 64);
    v14 = *(_OWORD *)(result + 16);
    v13 = *(_OWORD *)(result + 32);
    v23[0] = *(_OWORD *)result;
    v23[1] = v14;
    v23[2] = v13;
    v23[3] = v12;
    v23[4] = v11;
    v23[5] = v10;
    v23[6] = v9;
    v24 = v8;
    v25 = v7;
    v26 = LODWORD(a2);
    v15 = specialized static PinchGestureHelper.getSidePinchAngle(_:)((uint64_t)v23, a2, *(double *)&v9, v10);
    v16 = *(float *)&v15;
    result = swift_beginAccess();
    if (*(_QWORD *)(v3 + 48))
    {
      specialized CircularBuffer.add(_:)(v16);
      swift_endAccess();
      result = swift_beginAccess();
      if (*(_QWORD *)(v3 + 24))
      {
        specialized CircularBuffer.add(_:)(v6);
        result = swift_endAccess();
        v17 = *(_QWORD *)(v3 + 48);
        if (v17)
        {
          v18 = v4[3];
          if (v18)
          {
            v19 = v4[7];
            v21 = v4[4];
            v20 = v4[5];
            v22 = v4[2];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized static AverageSidePinchAngleCalculator.getAvgSidePinchAngleBeforeMake(_:_:_:)(v20, v17, v19, v22, v18, v21, a3);
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
LABEL_11:
          __break(1u);
          return result;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

uint64_t AverageSidePinchAngleCalculator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AverageSidePinchAngleCalculator()
{
  return objc_opt_self();
}

uint64_t specialized static AverageSidePinchAngleCalculator.getAvgSidePinchAngleBeforeMake(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  unint64_t v16;
  float v17;
  float v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v33 = a4;
  v34 = a5;
  v35 = a6;
  v36 = a1;
  v37 = a2;
  v38 = a3;
  result = specialized Zip2Sequence.makeIterator()((uint64_t)&v20);
  if ((v32 & 1) != 0)
    goto LABEL_33;
  v9 = *(_QWORD *)(v20 + 16);
  if (!v9 || (v25 & 1) != 0 || (v24 & 1) != 0 || (v22 & 1) != 0)
    goto LABEL_33;
  if (v23 >= v9)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v10 = v23 + 1 == v9 ? 0 : v23 + 1;
  v11 = *(_QWORD *)(v26 + 16);
  if (!v11 || (((v31 | v30) | v28) & 1) != 0)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v12 = v29;
  if (v29 < v11)
  {
    v13 = v26 + 32;
    if (*(float *)(v20 + 32 + 4 * v23) >= a7)
      v14 = 0.0;
    else
      v14 = 1.0;
    if (*(float *)(v20 + 32 + 4 * v23) >= a7)
      v15 = 0.0;
    else
      v15 = *(float *)(v13 + 4 * v29) + 0.0;
    if (v23 != v21)
    {
      if (v29 + 1 == v11)
        v16 = 0;
      else
        v16 = v29 + 1;
      while (v10 < v9)
      {
        if (v12 != v27)
        {
          v17 = *(float *)(v13 + 4 * v16);
          v12 = v16;
          if (v16 + 1 == v11)
            v16 = 0;
          else
            ++v16;
          if (*(float *)(v20 + 32 + 4 * v10) >= a7)
          {
            v18 = -0.0;
          }
          else
          {
            v14 = v14 + 1.0;
            v18 = v17;
          }
          v15 = v15 + v18;
          v19 = v10 == v21;
          v10 = (uint64_t)(v10 + 1) % (uint64_t)v9;
          if (!v19)
            continue;
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:)(uint64_t a1, uint64_t a2)
{
  return specialized Sequence.forEach(_:)(a2, (uint64_t (*)(_QWORD, _QWORD))partial apply for closure #1 in closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:));
}

void closure #1 in closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  void *v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[6];

  v14 = (void *)MEMORY[0x2426372E8](a3, a4);
  v15 = swift_allocObject();
  *(_BYTE *)(v15 + 16) = a5;
  *(_QWORD *)(v15 + 24) = a6;
  *(_BYTE *)(v15 + 32) = a7 & 1;
  *(_BYTE *)(v15 + 35) = BYTE2(a1);
  *(_WORD *)(v15 + 33) = a1;
  *(_QWORD *)(v15 + 40) = a2;
  *(_QWORD *)(v15 + 48) = a3;
  *(_QWORD *)(v15 + 56) = a4;
  v17[4] = partial apply for closure #1 in closure #1 in closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:);
  v17[5] = v15;
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1107296256;
  v17[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v17[3] = &block_descriptor_0;
  v16 = _Block_copy(v17);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v16);

}

unint64_t closure #1 in closure #1 in closure #1 in static StatisticUtils.Send2DLocationEvent(name:is_left:counters:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t inited;
  char *v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  _QWORD v17[4];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D9A7080;
  *(_QWORD *)(inited + 32) = 0x7466656C5F7369;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0x6172656D6163;
  *(_QWORD *)(inited + 64) = 0xE600000000000000;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0x6E6F69676572;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  v11 = specialized static StatisticUtils.CameraRegion.allCases.getter();
  specialized Collection<>.firstIndex(of:)(a4 & 0xFFFFFF, (uint64_t)v11);
  swift_bridgeObjectRelease();
  *(NSNumber *)(inited + 96) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0xD000000000000011;
  *(_QWORD *)(inited + 112) = 0x800000023D9C5C20;
  *(NSNumber *)(inited + 120) = UInt64._bridgeToObjectiveC()();
  v12 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v18 = xmmword_23D9A8B80;
  v19 = 0;
  v20 = 0;
  v17[0] = a6;
  v17[1] = a7;
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = 8250;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  type metadata accessor for NSObject();
  v14 = MEMORY[0x24BEE0D00];
  v15._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v17[3] = v14;
  specialized static HLog.D(file:function:line:logArea:_:_:)(0xD000000000000051, 0x800000023D9C5C40, 26, (uint64_t *)&v18, (uint64_t)v17, MEMORY[0x24BEE4AF8]);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  return v12;
}

